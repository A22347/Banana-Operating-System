
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8d 9e 00 00       	call   c0009ead <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 95 31 02 00       	call   c00231ba <_init>
c0000025:	c3                   	ret    
c0000026:	bb 3e 3e 02 c0       	mov    ebx,0xc0023e3e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 4c 3e 02 c0    	cmp    ebx,0xc0023e4c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 85 02 c0       	mov    eax,0xc00285f8
c0000049:	3d f8 85 02 c0       	cmp    eax,0xc00285f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 85 02 c0       	push   0xc00285f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 85 02 c0       	mov    eax,0xc00285f8
c0000075:	2d f8 85 02 c0       	sub    eax,0xc00285f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 85 02 c0       	push   0xc00285f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 80 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028780,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 54 3e 02 c0       	mov    ebx,0xc0023e54
c00000bb:	81 eb 50 3e 02 c0    	sub    ebx,0xc0023e50
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 50 3e 02 c0       	mov    esi,0xc0023e50
c00000ca:	a1 84 87 02 c0       	mov    eax,ds:0xc0028784
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 84 87 02 c0       	mov    ds:0xc0028784,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 84 87 02 c0       	mov    eax,ds:0xc0028784
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 85 02 c0       	push   0xc00285f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 80 87 02 c0 01 	mov    BYTE PTR ds:0xc0028780,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 88 87 02 c0       	push   0xc0028788
c000012c:	68 f8 85 02 c0       	push   0xc00285f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <getRDRAND>:
c0000219:	b9 64 00 00 00       	mov    ecx,0x64

c000021e <retry>:
c000021e:	0f c7 f0             	rdrand eax
c0000221:	72 05                	jb     c0000228 <retry.done>
c0000223:	e2 f9                	loop   c000021e <retry>

c0000225 <retry.fail>:
c0000225:	31 c0                	xor    eax,eax
c0000227:	c3                   	ret    

c0000228 <retry.done>:
c0000228:	c3                   	ret    

c0000229 <detectCPUID>:
c0000229:	9c                   	pushf  
c000022a:	9c                   	pushf  
c000022b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000232:	9d                   	popf   
c0000233:	9c                   	pushf  
c0000234:	58                   	pop    eax
c0000235:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000238:	9d                   	popf   
c0000239:	25 00 00 20 00       	and    eax,0x200000
c000023e:	c3                   	ret    

c000023f <goToVM86>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000245:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000248:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000024b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000024e:	25 ff ff 00 00       	and    eax,0xffff
c0000253:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000259:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000025f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000265:	52                   	push   edx
c0000266:	51                   	push   ecx
c0000267:	68 02 02 02 00       	push   0x20202
c000026c:	53                   	push   ebx
c000026d:	50                   	push   eax
c000026e:	cf                   	iret   

c000026f <goToUsermode>:
c000026f:	55                   	push   ebp
c0000270:	89 e5                	mov    ebp,esp
c0000272:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000275:	66 b8 23 00          	mov    ax,0x23
c0000279:	66 8e d8             	mov    ds,ax
c000027c:	66 8e c0             	mov    es,ax
c000027f:	66 8e e0             	mov    fs,ax
c0000282:	66 8e e8             	mov    gs,ax
c0000285:	89 e0                	mov    eax,esp
c0000287:	68 23 00 00 00       	push   0x23
c000028c:	50                   	push   eax
c000028d:	68 02 02 00 00       	push   0x202
c0000292:	68 1b 00 00 00       	push   0x1b
c0000297:	53                   	push   ebx
c0000298:	cf                   	iret   

c0000299 <switchToThreadASMFirstTime>:
c0000299:	9c                   	pushf  
c000029a:	fa                   	cli    
c000029b:	50                   	push   eax
c000029c:	53                   	push   ebx
c000029d:	51                   	push   ecx
c000029e:	52                   	push   edx
c000029f:	56                   	push   esi
c00002a0:	57                   	push   edi
c00002a1:	55                   	push   ebp
c00002a2:	e9 11 00 00 00       	jmp    c00002b8 <commonThreadSwitch>

c00002a7 <switchToThreadASM>:
c00002a7:	9c                   	pushf  
c00002a8:	50                   	push   eax
c00002a9:	53                   	push   ebx
c00002aa:	51                   	push   ecx
c00002ab:	52                   	push   edx
c00002ac:	56                   	push   esi
c00002ad:	57                   	push   edi
c00002ae:	55                   	push   ebp
c00002af:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002b5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002b8 <commonThreadSwitch>:
c00002b8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002bc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002c4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002c7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ca:	0f 20 d9             	mov    ecx,cr3
c00002cd:	39 c8                	cmp    eax,ecx
c00002cf:	74 03                	je     c00002d4 <commonThreadSwitch.doneVAS>
c00002d1:	0f 22 d8             	mov    cr3,eax

c00002d4 <commonThreadSwitch.doneVAS>:
c00002d4:	0f 20 c0             	mov    eax,cr0
c00002d7:	0c 08                	or     al,0x8
c00002d9:	0f 22 c0             	mov    cr0,eax
c00002dc:	85 d2                	test   edx,edx
c00002de:	75 11                	jne    c00002f1 <commonThreadSwitch.firstTime>
c00002e0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002e3:	e8 d4 84 01 00       	call   c00187bc <changeTSS>
c00002e8:	5d                   	pop    ebp
c00002e9:	5f                   	pop    edi
c00002ea:	5e                   	pop    esi
c00002eb:	5a                   	pop    edx
c00002ec:	59                   	pop    ecx
c00002ed:	5b                   	pop    ebx
c00002ee:	58                   	pop    eax
c00002ef:	9d                   	popf   
c00002f0:	c3                   	ret    

c00002f1 <commonThreadSwitch.firstTime>:
c00002f1:	fa                   	cli    
c00002f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002f5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002fa:	60                   	pusha  
c00002fb:	e8 34 cb 00 00       	call   c000ce34 <mapVASFirstTime>
c0000300:	61                   	popa   
c0000301:	89 c4                	mov    esp,eax
c0000303:	56                   	push   esi
c0000304:	52                   	push   edx
c0000305:	e8 b2 84 01 00       	call   c00187bc <changeTSS>
c000030a:	5a                   	pop    edx
c000030b:	5e                   	pop    esi
c000030c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000313:	5d                   	pop    ebp
c0000314:	5f                   	pop    edi
c0000315:	5e                   	pop    esi
c0000316:	59                   	pop    ecx
c0000317:	59                   	pop    ecx
c0000318:	5b                   	pop    ebx
c0000319:	58                   	pop    eax
c000031a:	81 c4 04 00 00 00    	add    esp,0x4
c0000320:	6a 02                	push   0x2
c0000322:	9d                   	popf   
c0000323:	52                   	push   edx
c0000324:	e8 7b 89 01 00       	call   c0018ca4 <taskStartupFunction>
c0000329:	5a                   	pop    edx
c000032a:	50                   	push   eax
c000032b:	ff d2                	call   edx
c000032d:	e8 be 8f 01 00       	call   c00192f0 <taskReturned>
c0000332:	e9 fb ff ff ff       	jmp    c0000332 <commonThreadSwitch.firstTime+0x41>

c0000337 <asmQuickAcquireLock>:
c0000337:	55                   	push   ebp
c0000338:	89 e5                	mov    ebp,esp
c000033a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000033d <asmQuickAcquireLock.retry>:
c000033d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000342:	72 02                	jb     c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000344:	fa                   	cli    
c0000345:	c3                   	ret    

c0000346 <asmQuickAcquireLock.spin_with_pause>:
c0000346:	f3 90                	pause  
c0000348:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000034e:	75 f6                	jne    c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000350:	e9 e8 ff ff ff       	jmp    c000033d <asmQuickAcquireLock.retry>

c0000355 <asmQuickReleaseLock>:
c0000355:	55                   	push   ebp
c0000356:	89 e5                	mov    ebp,esp
c0000358:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000035f:	5d                   	pop    ebp
c0000360:	c3                   	ret    

c0000361 <asmAcquireLock>:
c0000361:	55                   	push   ebp
c0000362:	89 e5                	mov    ebp,esp
c0000364:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000367 <asmAcquireLock.retry>:
c0000367:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000036c:	72 05                	jb     c0000373 <asmAcquireLock.spin_with_pause>
c000036e:	9c                   	pushf  
c000036f:	58                   	pop    eax
c0000370:	fa                   	cli    
c0000371:	5d                   	pop    ebp
c0000372:	c3                   	ret    

c0000373 <asmAcquireLock.spin_with_pause>:
c0000373:	f3 90                	pause  
c0000375:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000037b:	75 f6                	jne    c0000373 <asmAcquireLock.spin_with_pause>
c000037d:	e9 e5 ff ff ff       	jmp    c0000367 <asmAcquireLock.retry>

c0000382 <asmReleaseLock>:
c0000382:	55                   	push   ebp
c0000383:	89 e5                	mov    ebp,esp
c0000385:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000388:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000038b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000391:	52                   	push   edx
c0000392:	9d                   	popf   
c0000393:	5d                   	pop    ebp
c0000394:	c3                   	ret    

c0000395 <loadGDT>:
c0000395:	0f 01 15 d0 8b 02 c0 	lgdtd  ds:0xc0028bd0
c000039c:	66 b8 10 00          	mov    ax,0x10
c00003a0:	66 8e d8             	mov    ds,ax
c00003a3:	66 8e c0             	mov    es,ax
c00003a6:	66 8e e0             	mov    fs,ax
c00003a9:	66 8e e8             	mov    gs,ax
c00003ac:	66 8e d0             	mov    ss,ax
c00003af:	e9 00 00 00 00       	jmp    c00003b4 <flush2>

c00003b4 <flush2>:
c00003b4:	c3                   	ret    

c00003b5 <isr0>:
c00003b5:	fa                   	cli    
c00003b6:	68 00 00 00 00       	push   0x0
c00003bb:	68 00 00 00 00       	push   0x0
c00003c0:	e9 44 01 00 00       	jmp    c0000509 <int_common_stub>

c00003c5 <isr1>:
c00003c5:	fa                   	cli    
c00003c6:	6a 00                	push   0x0
c00003c8:	6a 01                	push   0x1
c00003ca:	e9 3a 01 00 00       	jmp    c0000509 <int_common_stub>

c00003cf <isr2>:
c00003cf:	fa                   	cli    
c00003d0:	6a 00                	push   0x0
c00003d2:	6a 02                	push   0x2
c00003d4:	e9 30 01 00 00       	jmp    c0000509 <int_common_stub>

c00003d9 <isr3>:
c00003d9:	fa                   	cli    
c00003da:	6a 00                	push   0x0
c00003dc:	6a 03                	push   0x3
c00003de:	e9 26 01 00 00       	jmp    c0000509 <int_common_stub>

c00003e3 <isr4>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 04                	push   0x4
c00003e8:	e9 1c 01 00 00       	jmp    c0000509 <int_common_stub>

c00003ed <isr5>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 05                	push   0x5
c00003f2:	e9 12 01 00 00       	jmp    c0000509 <int_common_stub>

c00003f7 <isr6>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 06                	push   0x6
c00003fc:	e9 08 01 00 00       	jmp    c0000509 <int_common_stub>

c0000401 <isr7>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 07                	push   0x7
c0000406:	e9 fe 00 00 00       	jmp    c0000509 <int_common_stub>

c000040b <isr8>:
c000040b:	fa                   	cli    
c000040c:	6a 08                	push   0x8
c000040e:	e9 f6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000413 <isr9>:
c0000413:	fa                   	cli    
c0000414:	6a 00                	push   0x0
c0000416:	6a 09                	push   0x9
c0000418:	e9 ec 00 00 00       	jmp    c0000509 <int_common_stub>

c000041d <isr10>:
c000041d:	fa                   	cli    
c000041e:	6a 0a                	push   0xa
c0000420:	e9 e4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000425 <isr11>:
c0000425:	fa                   	cli    
c0000426:	6a 0b                	push   0xb
c0000428:	e9 dc 00 00 00       	jmp    c0000509 <int_common_stub>

c000042d <isr12>:
c000042d:	fa                   	cli    
c000042e:	6a 0c                	push   0xc
c0000430:	e9 d4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000435 <isr13>:
c0000435:	fa                   	cli    
c0000436:	6a 0d                	push   0xd
c0000438:	e9 cc 00 00 00       	jmp    c0000509 <int_common_stub>

c000043d <isr14>:
c000043d:	fa                   	cli    
c000043e:	6a 0e                	push   0xe
c0000440:	e9 c4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000445 <isr15>:
c0000445:	fa                   	cli    
c0000446:	6a 00                	push   0x0
c0000448:	6a 0f                	push   0xf
c000044a:	e9 ba 00 00 00       	jmp    c0000509 <int_common_stub>

c000044f <isr16>:
c000044f:	fa                   	cli    
c0000450:	6a 00                	push   0x0
c0000452:	6a 10                	push   0x10
c0000454:	e9 b0 00 00 00       	jmp    c0000509 <int_common_stub>

c0000459 <isr17>:
c0000459:	fa                   	cli    
c000045a:	6a 00                	push   0x0
c000045c:	6a 11                	push   0x11
c000045e:	e9 a6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000463 <isr18>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 12                	push   0x12
c0000468:	e9 9c 00 00 00       	jmp    c0000509 <int_common_stub>

c000046d <irq3>:
c000046d:	fa                   	cli    
c000046e:	6a 00                	push   0x0
c0000470:	6a 23                	push   0x23
c0000472:	e9 92 00 00 00       	jmp    c0000509 <int_common_stub>

c0000477 <irq4>:
c0000477:	fa                   	cli    
c0000478:	6a 00                	push   0x0
c000047a:	6a 24                	push   0x24
c000047c:	e9 88 00 00 00       	jmp    c0000509 <int_common_stub>

c0000481 <irq5>:
c0000481:	fa                   	cli    
c0000482:	6a 00                	push   0x0
c0000484:	6a 25                	push   0x25
c0000486:	e9 7e 00 00 00       	jmp    c0000509 <int_common_stub>

c000048b <irq6>:
c000048b:	fa                   	cli    
c000048c:	6a 00                	push   0x0
c000048e:	6a 26                	push   0x26
c0000490:	e9 74 00 00 00       	jmp    c0000509 <int_common_stub>

c0000495 <irq7>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 27                	push   0x27
c000049a:	e9 6a 00 00 00       	jmp    c0000509 <int_common_stub>

c000049f <irq8>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 28                	push   0x28
c00004a4:	e9 60 00 00 00       	jmp    c0000509 <int_common_stub>

c00004a9 <irq9>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 29                	push   0x29
c00004ae:	e9 56 00 00 00       	jmp    c0000509 <int_common_stub>

c00004b3 <irq10>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 2a                	push   0x2a
c00004b8:	e9 4c 00 00 00       	jmp    c0000509 <int_common_stub>

c00004bd <irq11>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 2b                	push   0x2b
c00004c2:	e9 42 00 00 00       	jmp    c0000509 <int_common_stub>

c00004c7 <irq12>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 2c                	push   0x2c
c00004cc:	e9 38 00 00 00       	jmp    c0000509 <int_common_stub>

c00004d1 <irq13>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 2d                	push   0x2d
c00004d6:	e9 2e 00 00 00       	jmp    c0000509 <int_common_stub>

c00004db <irq14>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 2e                	push   0x2e
c00004e0:	e9 24 00 00 00       	jmp    c0000509 <int_common_stub>

c00004e5 <irq15>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 2f                	push   0x2f
c00004ea:	e9 1a 00 00 00       	jmp    c0000509 <int_common_stub>

c00004ef <irq1>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 21                	push   0x21
c00004f4:	eb 13                	jmp    c0000509 <int_common_stub>

c00004f6 <irq2>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 22                	push   0x22
c00004fb:	eb 0c                	jmp    c0000509 <int_common_stub>

c00004fd <isr96>:
c00004fd:	6a 00                	push   0x0
c00004ff:	6a 60                	push   0x60
c0000501:	fb                   	sti    
c0000502:	eb 05                	jmp    c0000509 <int_common_stub>

c0000504 <irq0>:
c0000504:	fa                   	cli    
c0000505:	6a 00                	push   0x0
c0000507:	6a 20                	push   0x20

c0000509 <int_common_stub>:
c0000509:	60                   	pusha  
c000050a:	1e                   	push   ds
c000050b:	06                   	push   es
c000050c:	0f a0                	push   fs
c000050e:	0f a8                	push   gs
c0000510:	66 b8 10 00          	mov    ax,0x10
c0000514:	66 8e d8             	mov    ds,ax
c0000517:	66 8e c0             	mov    es,ax
c000051a:	66 8e e0             	mov    fs,ax
c000051d:	66 8e e8             	mov    gs,ax
c0000520:	54                   	push   esp
c0000521:	fc                   	cld    
c0000522:	e8 06 ea 00 00       	call   c000ef2d <int_handler>
c0000527:	81 c4 04 00 00 00    	add    esp,0x4
c000052d:	0f a9                	pop    gs
c000052f:	0f a1                	pop    fs
c0000531:	07                   	pop    es
c0000532:	1f                   	pop    ds
c0000533:	61                   	popa   
c0000534:	81 c4 08 00 00 00    	add    esp,0x8
c000053a:	cf                   	iret   

c000053b <irq16>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 30                	push   0x30
c0000540:	e9 c4 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000545 <irq17>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 31                	push   0x31
c000054a:	e9 ba ff ff ff       	jmp    c0000509 <int_common_stub>

c000054f <irq18>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 32                	push   0x32
c0000554:	e9 b0 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000559 <irq19>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 33                	push   0x33
c000055e:	e9 a6 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000563 <irq20>:
c0000563:	fa                   	cli    
c0000564:	6a 00                	push   0x0
c0000566:	6a 34                	push   0x34
c0000568:	e9 9c ff ff ff       	jmp    c0000509 <int_common_stub>

c000056d <irq21>:
c000056d:	fa                   	cli    
c000056e:	6a 00                	push   0x0
c0000570:	6a 35                	push   0x35
c0000572:	e9 92 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000577 <irq22>:
c0000577:	fa                   	cli    
c0000578:	6a 00                	push   0x0
c000057a:	6a 36                	push   0x36
c000057c:	e9 88 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000581 <irq23>:
c0000581:	fa                   	cli    
c0000582:	6a 00                	push   0x0
c0000584:	6a 37                	push   0x37
c0000586:	e9 7e ff ff ff       	jmp    c0000509 <int_common_stub>

c000058b <memcpy>:
c000058b:	e9 7a 83 00 00       	jmp    c000890a <__not_memcpy>

c0000590 <memcmp>:
c0000590:	56                   	push   esi
c0000591:	53                   	push   ebx
c0000592:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000059a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000059e:	85 f6                	test   esi,esi
c00005a0:	74 1d                	je     c00005bf <memcmp+0x2f>
c00005a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a4:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a7:	38 cb                	cmp    bl,cl
c00005a9:	75 19                	jne    c00005c4 <memcmp+0x34>
c00005ab:	01 c6                	add    esi,eax
c00005ad:	eb 0a                	jmp    c00005b9 <memcmp+0x29>
c00005af:	90                   	nop
c00005b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005b2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005b5:	38 d9                	cmp    cl,bl
c00005b7:	75 0b                	jne    c00005c4 <memcmp+0x34>
c00005b9:	40                   	inc    eax
c00005ba:	42                   	inc    edx
c00005bb:	39 f0                	cmp    eax,esi
c00005bd:	75 f1                	jne    c00005b0 <memcmp+0x20>
c00005bf:	31 c0                	xor    eax,eax
c00005c1:	5b                   	pop    ebx
c00005c2:	5e                   	pop    esi
c00005c3:	c3                   	ret    
c00005c4:	0f b6 c1             	movzx  eax,cl
c00005c7:	29 d8                	sub    eax,ebx
c00005c9:	5b                   	pop    ebx
c00005ca:	5e                   	pop    esi
c00005cb:	c3                   	ret    

c00005cc <memmove>:
c00005cc:	55                   	push   ebp
c00005cd:	57                   	push   edi
c00005ce:	56                   	push   esi
c00005cf:	53                   	push   ebx
c00005d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005dc:	39 dd                	cmp    ebp,ebx
c00005de:	0f 83 80 00 00 00    	jae    c0000664 <memmove+0x98>
c00005e4:	85 d2                	test   edx,edx
c00005e6:	74 74                	je     c000065c <memmove+0x90>
c00005e8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005eb:	8d 75 04             	lea    esi,[ebp+0x4]
c00005ee:	39 cd                	cmp    ebp,ecx
c00005f0:	0f 93 c1             	setae  cl
c00005f3:	39 f3                	cmp    ebx,esi
c00005f5:	0f 93 c0             	setae  al
c00005f8:	89 c6                	mov    esi,eax
c00005fa:	09 ce                	or     esi,ecx
c00005fc:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ff:	89 f0                	mov    eax,esi
c0000601:	83 f9 0c             	cmp    ecx,0xc
c0000604:	0f 97 c1             	seta   cl
c0000607:	84 c8                	test   al,cl
c0000609:	74 75                	je     c0000680 <memmove+0xb4>
c000060b:	89 e9                	mov    ecx,ebp
c000060d:	09 d9                	or     ecx,ebx
c000060f:	83 e1 03             	and    ecx,0x3
c0000612:	75 6c                	jne    c0000680 <memmove+0xb4>
c0000614:	89 d7                	mov    edi,edx
c0000616:	89 d9                	mov    ecx,ebx
c0000618:	83 e7 fc             	and    edi,0xfffffffc
c000061b:	89 ee                	mov    esi,ebp
c000061d:	01 df                	add    edi,ebx
c000061f:	90                   	nop
c0000620:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000622:	83 c6 04             	add    esi,0x4
c0000625:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000628:	83 c1 04             	add    ecx,0x4
c000062b:	39 f9                	cmp    ecx,edi
c000062d:	75 f1                	jne    c0000620 <memmove+0x54>
c000062f:	89 d1                	mov    ecx,edx
c0000631:	89 d7                	mov    edi,edx
c0000633:	83 e1 fc             	and    ecx,0xfffffffc
c0000636:	29 cf                	sub    edi,ecx
c0000638:	01 cb                	add    ebx,ecx
c000063a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000063e:	39 ca                	cmp    edx,ecx
c0000640:	74 1a                	je     c000065c <memmove+0x90>
c0000642:	8a 03                	mov    al,BYTE PTR [ebx]
c0000644:	83 ff 01             	cmp    edi,0x1
c0000647:	88 06                	mov    BYTE PTR [esi],al
c0000649:	74 11                	je     c000065c <memmove+0x90>
c000064b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000064e:	83 ff 02             	cmp    edi,0x2
c0000651:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000654:	74 06                	je     c000065c <memmove+0x90>
c0000656:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000659:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000065c:	5b                   	pop    ebx
c000065d:	89 e8                	mov    eax,ebp
c000065f:	5e                   	pop    esi
c0000660:	5f                   	pop    edi
c0000661:	5d                   	pop    ebp
c0000662:	c3                   	ret    
c0000663:	90                   	nop
c0000664:	76 f6                	jbe    c000065c <memmove+0x90>
c0000666:	85 d2                	test   edx,edx
c0000668:	74 f2                	je     c000065c <memmove+0x90>
c000066a:	4b                   	dec    ebx
c000066b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000066e:	66 90                	xchg   ax,ax
c0000670:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000673:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000676:	4a                   	dec    edx
c0000677:	75 f7                	jne    c0000670 <memmove+0xa4>
c0000679:	5b                   	pop    ebx
c000067a:	89 e8                	mov    eax,ebp
c000067c:	5e                   	pop    esi
c000067d:	5f                   	pop    edi
c000067e:	5d                   	pop    ebp
c000067f:	c3                   	ret    
c0000680:	01 ea                	add    edx,ebp
c0000682:	89 e9                	mov    ecx,ebp
c0000684:	8a 03                	mov    al,BYTE PTR [ebx]
c0000686:	41                   	inc    ecx
c0000687:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000068a:	43                   	inc    ebx
c000068b:	39 d1                	cmp    ecx,edx
c000068d:	75 f5                	jne    c0000684 <memmove+0xb8>
c000068f:	eb cb                	jmp    c000065c <memmove+0x90>
c0000691:	8d 76 00             	lea    esi,[esi+0x0]

c0000694 <memset>:
c0000694:	57                   	push   edi
c0000695:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000699:	85 c9                	test   ecx,ecx
c000069b:	74 0b                	je     c00006a8 <memset+0x14>
c000069d:	fc                   	cld    
c000069e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00006a6:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00006a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ac:	5f                   	pop    edi
c00006ad:	c3                   	ret    
c00006ae:	66 90                	xchg   ax,ax

c00006b0 <strlen>:
c00006b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006b4:	31 c0                	xor    eax,eax
c00006b6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006b9:	74 09                	je     c00006c4 <strlen+0x14>
c00006bb:	90                   	nop
c00006bc:	40                   	inc    eax
c00006bd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006c1:	75 f9                	jne    c00006bc <strlen+0xc>
c00006c3:	c3                   	ret    
c00006c4:	c3                   	ret    
c00006c5:	8d 76 00             	lea    esi,[esi+0x0]

c00006c8 <strpbrk>:
c00006c8:	57                   	push   edi
c00006c9:	56                   	push   esi
c00006ca:	53                   	push   ebx
c00006cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006d3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006d5:	84 db                	test   bl,bl
c00006d7:	74 21                	je     c00006fa <strpbrk+0x32>
c00006d9:	8a 07                	mov    al,BYTE PTR [edi]
c00006db:	84 c0                	test   al,al
c00006dd:	74 14                	je     c00006f3 <strpbrk+0x2b>
c00006df:	38 d8                	cmp    al,bl
c00006e1:	74 19                	je     c00006fc <strpbrk+0x34>
c00006e3:	89 fa                	mov    edx,edi
c00006e5:	eb 05                	jmp    c00006ec <strpbrk+0x24>
c00006e7:	90                   	nop
c00006e8:	38 d9                	cmp    cl,bl
c00006ea:	74 10                	je     c00006fc <strpbrk+0x34>
c00006ec:	42                   	inc    edx
c00006ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006ef:	84 c9                	test   cl,cl
c00006f1:	75 f5                	jne    c00006e8 <strpbrk+0x20>
c00006f3:	46                   	inc    esi
c00006f4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006f6:	84 db                	test   bl,bl
c00006f8:	75 e1                	jne    c00006db <strpbrk+0x13>
c00006fa:	31 f6                	xor    esi,esi
c00006fc:	89 f0                	mov    eax,esi
c00006fe:	5b                   	pop    ebx
c00006ff:	5e                   	pop    esi
c0000700:	5f                   	pop    edi
c0000701:	c3                   	ret    
c0000702:	66 90                	xchg   ax,ax

c0000704 <strtok>:
c0000704:	56                   	push   esi
c0000705:	53                   	push   ebx
c0000706:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000070a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000070e:	85 db                	test   ebx,ebx
c0000710:	75 07                	jne    c0000719 <strtok+0x15>
c0000712:	eb 2c                	jmp    c0000740 <strtok+0x3c>
c0000714:	43                   	inc    ebx
c0000715:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000719:	56                   	push   esi
c000071a:	53                   	push   ebx
c000071b:	e8 a8 ff ff ff       	call   c00006c8 <strpbrk>
c0000720:	5a                   	pop    edx
c0000721:	a3 a0 87 02 c0       	mov    ds:0xc00287a0,eax
c0000726:	59                   	pop    ecx
c0000727:	39 d8                	cmp    eax,ebx
c0000729:	74 e9                	je     c0000714 <strtok+0x10>
c000072b:	85 c0                	test   eax,eax
c000072d:	74 1b                	je     c000074a <strtok+0x46>
c000072f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000732:	8d 50 01             	lea    edx,[eax+0x1]
c0000735:	89 d8                	mov    eax,ebx
c0000737:	89 15 a0 87 02 c0    	mov    DWORD PTR ds:0xc00287a0,edx
c000073d:	5b                   	pop    ebx
c000073e:	5e                   	pop    esi
c000073f:	c3                   	ret    
c0000740:	8b 1d a0 87 02 c0    	mov    ebx,DWORD PTR ds:0xc00287a0
c0000746:	85 db                	test   ebx,ebx
c0000748:	75 cf                	jne    c0000719 <strtok+0x15>
c000074a:	31 c0                	xor    eax,eax
c000074c:	5b                   	pop    ebx
c000074d:	5e                   	pop    esi
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strcpy>:
c0000750:	53                   	push   ebx
c0000751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000755:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000759:	89 c3                	mov    ebx,eax
c000075b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075d:	84 d2                	test   dl,dl
c000075f:	74 0d                	je     c000076e <strcpy+0x1e>
c0000761:	8d 76 00             	lea    esi,[esi+0x0]
c0000764:	88 13                	mov    BYTE PTR [ebx],dl
c0000766:	41                   	inc    ecx
c0000767:	43                   	inc    ebx
c0000768:	8a 11                	mov    dl,BYTE PTR [ecx]
c000076a:	84 d2                	test   dl,dl
c000076c:	75 f6                	jne    c0000764 <strcpy+0x14>
c000076e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000771:	5b                   	pop    ebx
c0000772:	c3                   	ret    
c0000773:	90                   	nop

c0000774 <strncpy>:
c0000774:	55                   	push   ebp
c0000775:	57                   	push   edi
c0000776:	56                   	push   esi
c0000777:	53                   	push   ebx
c0000778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000077c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000780:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000784:	85 c0                	test   eax,eax
c0000786:	74 39                	je     c00007c1 <strncpy+0x4d>
c0000788:	8a 1e                	mov    bl,BYTE PTR [esi]
c000078a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000078d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000790:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000793:	84 db                	test   bl,bl
c0000795:	74 31                	je     c00007c8 <strncpy+0x54>
c0000797:	85 c9                	test   ecx,ecx
c0000799:	74 26                	je     c00007c1 <strncpy+0x4d>
c000079b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000079e:	8d 48 fe             	lea    ecx,[eax-0x2]
c00007a1:	8d 55 02             	lea    edx,[ebp+0x2]
c00007a4:	8d 46 02             	lea    eax,[esi+0x2]
c00007a7:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00007aa:	84 db                	test   bl,bl
c00007ac:	75 0f                	jne    c00007bd <strncpy+0x49>
c00007ae:	eb 18                	jmp    c00007c8 <strncpy+0x54>
c00007b0:	40                   	inc    eax
c00007b1:	42                   	inc    edx
c00007b2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007b5:	49                   	dec    ecx
c00007b6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 0b                	je     c00007c8 <strncpy+0x54>
c00007bd:	85 c9                	test   ecx,ecx
c00007bf:	75 ef                	jne    c00007b0 <strncpy+0x3c>
c00007c1:	5b                   	pop    ebx
c00007c2:	89 e8                	mov    eax,ebp
c00007c4:	5e                   	pop    esi
c00007c5:	5f                   	pop    edi
c00007c6:	5d                   	pop    ebp
c00007c7:	c3                   	ret    
c00007c8:	85 c9                	test   ecx,ecx
c00007ca:	74 f5                	je     c00007c1 <strncpy+0x4d>
c00007cc:	fc                   	cld    
c00007cd:	31 c0                	xor    eax,eax
c00007cf:	89 d7                	mov    edi,edx
c00007d1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007d3:	89 e8                	mov    eax,ebp
c00007d5:	5b                   	pop    ebx
c00007d6:	5e                   	pop    esi
c00007d7:	5f                   	pop    edi
c00007d8:	5d                   	pop    ebp
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strcmp>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007e6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007e8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007eb:	38 d1                	cmp    cl,dl
c00007ed:	75 1d                	jne    c000080c <strcmp+0x30>
c00007ef:	84 c9                	test   cl,cl
c00007f1:	74 21                	je     c0000814 <strcmp+0x38>
c00007f3:	b8 01 00 00 00       	mov    eax,0x1
c00007f8:	eb 07                	jmp    c0000801 <strcmp+0x25>
c00007fa:	66 90                	xchg   ax,ax
c00007fc:	40                   	inc    eax
c00007fd:	84 d2                	test   dl,dl
c00007ff:	74 13                	je     c0000814 <strcmp+0x38>
c0000801:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000804:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000808:	38 ca                	cmp    dl,cl
c000080a:	74 f0                	je     c00007fc <strcmp+0x20>
c000080c:	0f b6 c2             	movzx  eax,dl
c000080f:	5b                   	pop    ebx
c0000810:	29 c8                	sub    eax,ecx
c0000812:	5e                   	pop    esi
c0000813:	c3                   	ret    
c0000814:	31 c0                	xor    eax,eax
c0000816:	5b                   	pop    ebx
c0000817:	5e                   	pop    esi
c0000818:	c3                   	ret    
c0000819:	8d 76 00             	lea    esi,[esi+0x0]

c000081c <strchr>:
c000081c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000820:	8a 10                	mov    dl,BYTE PTR [eax]
c0000822:	84 d2                	test   dl,dl
c0000824:	74 15                	je     c000083b <strchr+0x1f>
c0000826:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000082a:	38 ca                	cmp    dl,cl
c000082c:	75 06                	jne    c0000834 <strchr+0x18>
c000082e:	eb 0e                	jmp    c000083e <strchr+0x22>
c0000830:	38 ca                	cmp    dl,cl
c0000832:	74 09                	je     c000083d <strchr+0x21>
c0000834:	40                   	inc    eax
c0000835:	8a 10                	mov    dl,BYTE PTR [eax]
c0000837:	84 d2                	test   dl,dl
c0000839:	75 f5                	jne    c0000830 <strchr+0x14>
c000083b:	31 c0                	xor    eax,eax
c000083d:	c3                   	ret    
c000083e:	c3                   	ret    
c000083f:	90                   	nop

c0000840 <strncmp>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084f:	85 ff                	test   edi,edi
c0000851:	74 28                	je     c000087b <strncmp+0x3b>
c0000853:	8a 16                	mov    dl,BYTE PTR [esi]
c0000855:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000858:	38 d1                	cmp    cl,dl
c000085a:	75 28                	jne    c0000884 <strncmp+0x44>
c000085c:	8d 46 01             	lea    eax,[esi+0x1]
c000085f:	84 c9                	test   cl,cl
c0000861:	74 18                	je     c000087b <strncmp+0x3b>
c0000863:	01 fe                	add    esi,edi
c0000865:	eb 0f                	jmp    c0000876 <strncmp+0x36>
c0000867:	90                   	nop
c0000868:	8a 10                	mov    dl,BYTE PTR [eax]
c000086a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	75 13                	jne    c0000884 <strncmp+0x44>
c0000871:	40                   	inc    eax
c0000872:	84 d2                	test   dl,dl
c0000874:	74 05                	je     c000087b <strncmp+0x3b>
c0000876:	43                   	inc    ebx
c0000877:	39 c6                	cmp    esi,eax
c0000879:	75 ed                	jne    c0000868 <strncmp+0x28>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	8d 76 00             	lea    esi,[esi+0x0]
c0000884:	5b                   	pop    ebx
c0000885:	0f b6 c2             	movzx  eax,dl
c0000888:	5e                   	pop    esi
c0000889:	29 c8                	sub    eax,ecx
c000088b:	5f                   	pop    edi
c000088c:	c3                   	ret    
c000088d:	8d 76 00             	lea    esi,[esi+0x0]

c0000890 <strcat>:
c0000890:	56                   	push   esi
c0000891:	53                   	push   ebx
c0000892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000896:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000089a:	89 c3                	mov    ebx,eax
c000089c:	eb 04                	jmp    c00008a2 <strcat+0x12>
c000089e:	66 90                	xchg   ax,ax
c00008a0:	89 d3                	mov    ebx,edx
c00008a2:	8d 53 01             	lea    edx,[ebx+0x1]
c00008a5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x10>
c00008ab:	31 d2                	xor    edx,edx
c00008ad:	8d 76 00             	lea    esi,[esi+0x0]
c00008b0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008b3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008b6:	42                   	inc    edx
c00008b7:	84 c9                	test   cl,cl
c00008b9:	75 f5                	jne    c00008b0 <strcat+0x20>
c00008bb:	5b                   	pop    ebx
c00008bc:	5e                   	pop    esi
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strncat>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ce:	85 f6                	test   esi,esi
c00008d0:	74 1e                	je     c00008f0 <strncat+0x30>
c00008d2:	89 c2                	mov    edx,eax
c00008d4:	42                   	inc    edx
c00008d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008d9:	75 f9                	jne    c00008d4 <strncat+0x14>
c00008db:	01 ce                	add    esi,ecx
c00008dd:	eb 06                	jmp    c00008e5 <strncat+0x25>
c00008df:	90                   	nop
c00008e0:	39 f1                	cmp    ecx,esi
c00008e2:	74 10                	je     c00008f4 <strncat+0x34>
c00008e4:	42                   	inc    edx
c00008e5:	41                   	inc    ecx
c00008e6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008e9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008ec:	84 db                	test   bl,bl
c00008ee:	75 f0                	jne    c00008e0 <strncat+0x20>
c00008f0:	5b                   	pop    ebx
c00008f1:	5e                   	pop    esi
c00008f2:	c3                   	ret    
c00008f3:	90                   	nop
c00008f4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f7:	5b                   	pop    ebx
c00008f8:	5e                   	pop    esi
c00008f9:	c3                   	ret    
c00008fa:	66 90                	xchg   ax,ax

c00008fc <strstr>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	57                   	push   edi
c0000908:	e8 a3 fd ff ff       	call   c00006b0 <strlen>
c000090d:	59                   	pop    ecx
c000090e:	85 c0                	test   eax,eax
c0000910:	74 2a                	je     c000093c <strstr+0x40>
c0000912:	89 c6                	mov    esi,eax
c0000914:	eb 12                	jmp    c0000928 <strstr+0x2c>
c0000916:	66 90                	xchg   ax,ax
c0000918:	56                   	push   esi
c0000919:	57                   	push   edi
c000091a:	53                   	push   ebx
c000091b:	e8 70 fc ff ff       	call   c0000590 <memcmp>
c0000920:	83 c4 0c             	add    esp,0xc
c0000923:	85 c0                	test   eax,eax
c0000925:	74 15                	je     c000093c <strstr+0x40>
c0000927:	43                   	inc    ebx
c0000928:	53                   	push   ebx
c0000929:	e8 82 fd ff ff       	call   c00006b0 <strlen>
c000092e:	5a                   	pop    edx
c000092f:	39 f0                	cmp    eax,esi
c0000931:	73 e5                	jae    c0000918 <strstr+0x1c>
c0000933:	5b                   	pop    ebx
c0000934:	31 c0                	xor    eax,eax
c0000936:	5e                   	pop    esi
c0000937:	5f                   	pop    edi
c0000938:	c3                   	ret    
c0000939:	8d 76 00             	lea    esi,[esi+0x0]
c000093c:	89 d8                	mov    eax,ebx
c000093e:	5b                   	pop    ebx
c000093f:	5e                   	pop    esi
c0000940:	5f                   	pop    edi
c0000941:	c3                   	ret    
c0000942:	66 90                	xchg   ax,ax

c0000944 <toupper>:
c0000944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000948:	0f b6 d0             	movzx  edx,al
c000094b:	f6 82 60 3e 02 c0 02 	test   BYTE PTR [edx-0x3ffdc1a0],0x2
c0000952:	74 03                	je     c0000957 <toupper+0x13>
c0000954:	83 e8 20             	sub    eax,0x20
c0000957:	c3                   	ret    

c0000958 <tolower>:
c0000958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000095c:	0f b6 d0             	movzx  edx,al
c000095f:	f6 82 60 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc1a0],0x1
c0000966:	74 03                	je     c000096b <tolower+0x13>
c0000968:	83 c0 20             	add    eax,0x20
c000096b:	c3                   	ret    

c000096c <simple_strtoul>:
c000096c:	55                   	push   ebp
c000096d:	57                   	push   edi
c000096e:	56                   	push   esi
c000096f:	53                   	push   ebx
c0000970:	83 ec 08             	sub    esp,0x8
c0000973:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000977:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000097b:	90                   	nop
c000097c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000097f:	f6 82 60 3e 02 c0 08 	test   BYTE PTR [edx-0x3ffdc1a0],0x8
c0000986:	75 05                	jne    c000098d <simple_strtoul+0x21>
c0000988:	80 fa 09             	cmp    dl,0x9
c000098b:	75 03                	jne    c0000990 <simple_strtoul+0x24>
c000098d:	41                   	inc    ecx
c000098e:	eb ec                	jmp    c000097c <simple_strtoul+0x10>
c0000990:	80 fa 2d             	cmp    dl,0x2d
c0000993:	0f 84 1b 01 00 00    	je     c0000ab4 <simple_strtoul+0x148>
c0000999:	80 fa 2b             	cmp    dl,0x2b
c000099c:	0f 84 c2 00 00 00    	je     c0000a64 <simple_strtoul+0xf8>
c00009a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009aa:	85 f6                	test   esi,esi
c00009ac:	0f 85 c3 00 00 00    	jne    c0000a75 <simple_strtoul+0x109>
c00009b2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009b4:	80 fa 30             	cmp    dl,0x30
c00009b7:	0f 84 47 01 00 00    	je     c0000b04 <simple_strtoul+0x198>
c00009bd:	be 0a 00 00 00       	mov    esi,0xa
c00009c2:	84 d2                	test   dl,dl
c00009c4:	0f 84 6f 01 00 00    	je     c0000b39 <simple_strtoul+0x1cd>
c00009ca:	31 ed                	xor    ebp,ebp
c00009cc:	31 ff                	xor    edi,edi
c00009ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009d5:	eb 2b                	jmp    c0000a02 <simple_strtoul+0x96>
c00009d7:	90                   	nop
c00009d8:	83 eb 30             	sub    ebx,0x30
c00009db:	39 f3                	cmp    ebx,esi
c00009dd:	73 4d                	jae    c0000a2c <simple_strtoul+0xc0>
c00009df:	31 d2                	xor    edx,edx
c00009e1:	89 d8                	mov    eax,ebx
c00009e3:	f7 d0                	not    eax
c00009e5:	f7 f6                	div    esi
c00009e7:	39 f8                	cmp    eax,edi
c00009e9:	0f 82 b1 00 00 00    	jb     c0000aa0 <simple_strtoul+0x134>
c00009ef:	0f af fe             	imul   edi,esi
c00009f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f9:	01 df                	add    edi,ebx
c00009fb:	41                   	inc    ecx
c00009fc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009fe:	84 d2                	test   dl,dl
c0000a00:	74 2a                	je     c0000a2c <simple_strtoul+0xc0>
c0000a02:	0f b6 da             	movzx  ebx,dl
c0000a05:	f6 83 60 3e 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc1a0],0x4
c0000a0c:	75 ca                	jne    c00009d8 <simple_strtoul+0x6c>
c0000a0e:	0f be d2             	movsx  edx,dl
c0000a11:	52                   	push   edx
c0000a12:	e8 2d ff ff ff       	call   c0000944 <toupper>
c0000a17:	5b                   	pop    ebx
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 3e 02 c0 01 	test   BYTE PTR [edx-0x3ffdc1a0],0x1
c0000a22:	74 08                	je     c0000a2c <simple_strtoul+0xc0>
c0000a24:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a27:	39 f3                	cmp    ebx,esi
c0000a29:	72 b4                	jb     c00009df <simple_strtoul+0x73>
c0000a2b:	90                   	nop
c0000a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a30:	85 c0                	test   eax,eax
c0000a32:	74 14                	je     c0000a48 <simple_strtoul+0xdc>
c0000a34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a37:	09 f8                	or     eax,edi
c0000a39:	75 71                	jne    c0000aac <simple_strtoul+0x140>
c0000a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a3f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a43:	31 ff                	xor    edi,edi
c0000a45:	89 30                	mov    DWORD PTR [eax],esi
c0000a47:	90                   	nop
c0000a48:	4d                   	dec    ebp
c0000a49:	75 05                	jne    c0000a50 <simple_strtoul+0xe4>
c0000a4b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a50:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a55:	75 02                	jne    c0000a59 <simple_strtoul+0xed>
c0000a57:	f7 df                	neg    edi
c0000a59:	83 c4 08             	add    esp,0x8
c0000a5c:	89 f8                	mov    eax,edi
c0000a5e:	5b                   	pop    ebx
c0000a5f:	5e                   	pop    esi
c0000a60:	5f                   	pop    edi
c0000a61:	5d                   	pop    ebp
c0000a62:	c3                   	ret    
c0000a63:	90                   	nop
c0000a64:	41                   	inc    ecx
c0000a65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a6d:	85 f6                	test   esi,esi
c0000a6f:	0f 84 3d ff ff ff    	je     c00009b2 <simple_strtoul+0x46>
c0000a75:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a78:	83 f8 22             	cmp    eax,0x22
c0000a7b:	77 6a                	ja     c0000ae7 <simple_strtoul+0x17b>
c0000a7d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a7f:	83 fe 08             	cmp    esi,0x8
c0000a82:	0f 84 a2 00 00 00    	je     c0000b2a <simple_strtoul+0x1be>
c0000a88:	83 fe 10             	cmp    esi,0x10
c0000a8b:	0f 85 31 ff ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000a91:	80 fa 30             	cmp    dl,0x30
c0000a94:	74 2c                	je     c0000ac2 <simple_strtoul+0x156>
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	e9 22 ff ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000aa0:	bd 01 00 00 00       	mov    ebp,0x1
c0000aa5:	31 ff                	xor    edi,edi
c0000aa7:	e9 4f ff ff ff       	jmp    c00009fb <simple_strtoul+0x8f>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	89 08                	mov    DWORD PTR [eax],ecx
c0000ab2:	eb 94                	jmp    c0000a48 <simple_strtoul+0xdc>
c0000ab4:	41                   	inc    ecx
c0000ab5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000abd:	e9 e8 fe ff ff       	jmp    c00009aa <simple_strtoul+0x3e>
c0000ac2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac9:	50                   	push   eax
c0000aca:	e8 89 fe ff ff       	call   c0000958 <tolower>
c0000acf:	5e                   	pop    esi
c0000ad0:	83 f8 78             	cmp    eax,0x78
c0000ad3:	0f 84 84 00 00 00    	je     c0000b5d <simple_strtoul+0x1f1>
c0000ad9:	41                   	inc    ecx
c0000ada:	be 10 00 00 00       	mov    esi,0x10
c0000adf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ae2:	e9 db fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000ae7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aeb:	85 ff                	test   edi,edi
c0000aed:	74 5c                	je     c0000b4b <simple_strtoul+0x1df>
c0000aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af3:	85 c9                	test   ecx,ecx
c0000af5:	75 4e                	jne    c0000b45 <simple_strtoul+0x1d9>
c0000af7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000afd:	31 ff                	xor    edi,edi
c0000aff:	e9 4c ff ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b04:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b08:	88 04 24             	mov    BYTE PTR [esp],al
c0000b0b:	50                   	push   eax
c0000b0c:	e8 47 fe ff ff       	call   c0000958 <tolower>
c0000b11:	5d                   	pop    ebp
c0000b12:	83 f8 78             	cmp    eax,0x78
c0000b15:	74 3b                	je     c0000b52 <simple_strtoul+0x1e6>
c0000b17:	41                   	inc    ecx
c0000b18:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b1b:	80 fa 30             	cmp    dl,0x30
c0000b1e:	74 13                	je     c0000b33 <simple_strtoul+0x1c7>
c0000b20:	be 08 00 00 00       	mov    esi,0x8
c0000b25:	e9 98 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000b2a:	80 fa 30             	cmp    dl,0x30
c0000b2d:	0f 85 8f fe ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000b33:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b36:	41                   	inc    ecx
c0000b37:	eb e7                	jmp    c0000b20 <simple_strtoul+0x1b4>
c0000b39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b3d:	85 d2                	test   edx,edx
c0000b3f:	74 0a                	je     c0000b4b <simple_strtoul+0x1df>
c0000b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b45:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b49:	89 30                	mov    DWORD PTR [eax],esi
c0000b4b:	31 ff                	xor    edi,edi
c0000b4d:	e9 fe fe ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b52:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 34 ff ff ff       	jmp    c0000a91 <simple_strtoul+0x125>
c0000b5d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b60:	be 10 00 00 00       	mov    esi,0x10
c0000b65:	83 c1 02             	add    ecx,0x2
c0000b68:	e9 55 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>

c0000b6d <largebin_index>:
c0000b6d:	89 c2                	mov    edx,eax
c0000b6f:	c1 ea 08             	shr    edx,0x8
c0000b72:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b78:	77 10                	ja     c0000b8a <largebin_index+0x1d>
c0000b7a:	0f bd d2             	bsr    edx,edx
c0000b7d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b80:	d3 e8                	shr    eax,cl
c0000b82:	83 e0 03             	and    eax,0x3
c0000b85:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b89:	c3                   	ret    
c0000b8a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b8f:	c3                   	ret    

c0000b90 <malloc_init_state>:
c0000b90:	53                   	push   ebx
c0000b91:	8d 50 34             	lea    edx,[eax+0x34]
c0000b94:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b9a:	89 d1                	mov    ecx,edx
c0000b9c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b9f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000ba2:	83 c2 08             	add    edx,0x8
c0000ba5:	39 da                	cmp    edx,ebx
c0000ba7:	75 f3                	jne    c0000b9c <malloc_init_state+0xc>
c0000ba9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bab:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000bb5:	83 e2 03             	and    edx,0x3
c0000bb8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bc2:	83 ca 48             	or     edx,0x48
c0000bc5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bcf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bd9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000be0:	89 10                	mov    DWORD PTR [eax],edx
c0000be2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000be5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bef:	5b                   	pop    ebx
c0000bf0:	c3                   	ret    

c0000bf1 <malloc_consolidate>:
c0000bf1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bf3:	85 d2                	test   edx,edx
c0000bf5:	0f 84 d8 00 00 00    	je     c0000cd3 <malloc_consolidate+0xe2>
c0000bfb:	55                   	push   ebp
c0000bfc:	83 e2 fd             	and    edx,0xfffffffd
c0000bff:	57                   	push   edi
c0000c00:	89 c5                	mov    ebp,eax
c0000c02:	56                   	push   esi
c0000c03:	8d 78 34             	lea    edi,[eax+0x34]
c0000c06:	53                   	push   ebx
c0000c07:	83 ec 10             	sub    esp,0x10
c0000c0a:	89 10                	mov    DWORD PTR [eax],edx
c0000c0c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c10:	c1 ea 03             	shr    edx,0x3
c0000c13:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c17:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c1b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c1e:	85 d2                	test   edx,edx
c0000c20:	0f 84 98 00 00 00    	je     c0000cbe <malloc_consolidate+0xcd>
c0000c26:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c2d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c30:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c37:	89 f9                	mov    ecx,edi
c0000c39:	83 e1 fe             	and    ecx,0xfffffffe
c0000c3c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c3f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c42:	83 e3 fc             	and    ebx,0xfffffffc
c0000c45:	83 e7 01             	and    edi,0x1
c0000c48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c4b:	75 14                	jne    c0000c61 <malloc_consolidate+0x70>
c0000c4d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c4f:	29 fa                	sub    edx,edi
c0000c51:	01 f9                	add    ecx,edi
c0000c53:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c56:	89 fb                	mov    ebx,edi
c0000c58:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c5b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c5e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c61:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c64:	74 40                	je     c0000ca6 <malloc_consolidate+0xb5>
c0000c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c69:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c6c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c70:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c73:	83 e7 01             	and    edi,0x1
c0000c76:	75 0e                	jne    c0000c86 <malloc_consolidate+0x95>
c0000c78:	01 d9                	add    ecx,ebx
c0000c7a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c7d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c80:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c83:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c86:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c89:	89 ce                	mov    esi,ecx
c0000c8b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c8e:	83 ce 01             	or     esi,0x1
c0000c91:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c94:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c97:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c9a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c9e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ca1:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ca4:	eb 0c                	jmp    c0000cb2 <malloc_consolidate+0xc1>
c0000ca6:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ca9:	83 c9 01             	or     ecx,0x1
c0000cac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000caf:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000cb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000cb6:	85 d2                	test   edx,edx
c0000cb8:	0f 85 6f ff ff ff    	jne    c0000c2d <malloc_consolidate+0x3c>
c0000cbe:	83 c5 04             	add    ebp,0x4
c0000cc1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cc5:	0f 85 50 ff ff ff    	jne    c0000c1b <malloc_consolidate+0x2a>
c0000ccb:	83 c4 10             	add    esp,0x10
c0000cce:	5b                   	pop    ebx
c0000ccf:	5e                   	pop    esi
c0000cd0:	5f                   	pop    edi
c0000cd1:	5d                   	pop    ebp
c0000cd2:	c3                   	ret    
c0000cd3:	e9 b8 fe ff ff       	jmp    c0000b90 <malloc_init_state>

c0000cd8 <dlfree>:
c0000cd8:	57                   	push   edi
c0000cd9:	56                   	push   esi
c0000cda:	53                   	push   ebx
c0000cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cdf:	85 db                	test   ebx,ebx
c0000ce1:	0f 84 e2 00 00 00    	je     c0000dc9 <dlfree+0xf1>
c0000ce7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cea:	8b 0d c0 87 02 c0    	mov    ecx,DWORD PTR ds:0xc00287c0
c0000cf0:	89 f0                	mov    eax,esi
c0000cf2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cf5:	83 e0 fc             	and    eax,0xfffffffc
c0000cf8:	39 c1                	cmp    ecx,eax
c0000cfa:	72 24                	jb     c0000d20 <dlfree+0x48>
c0000cfc:	83 c9 03             	or     ecx,0x3
c0000cff:	c1 e8 03             	shr    eax,0x3
c0000d02:	89 0d c0 87 02 c0    	mov    DWORD PTR ds:0xc00287c0,ecx
c0000d08:	83 e8 02             	sub    eax,0x2
c0000d0b:	8b 0c 85 c4 87 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd783c]
c0000d12:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d14:	89 14 85 c4 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd783c],edx
c0000d1b:	e9 a9 00 00 00       	jmp    c0000dc9 <dlfree+0xf1>
c0000d20:	83 e6 02             	and    esi,0x2
c0000d23:	0f 85 a0 00 00 00    	jne    c0000dc9 <dlfree+0xf1>
c0000d29:	83 c9 01             	or     ecx,0x1
c0000d2c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d2f:	89 0d c0 87 02 c0    	mov    DWORD PTR ds:0xc00287c0,ecx
c0000d35:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d38:	83 e1 fc             	and    ecx,0xfffffffc
c0000d3b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d3f:	75 13                	jne    c0000d54 <dlfree+0x7c>
c0000d41:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d44:	29 da                	sub    edx,ebx
c0000d46:	01 d8                	add    eax,ebx
c0000d48:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d4b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d4e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d51:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d54:	39 35 ec 87 02 c0    	cmp    DWORD PTR ds:0xc00287ec,esi
c0000d5a:	74 40                	je     c0000d9c <dlfree+0xc4>
c0000d5c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d60:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d63:	80 e3 01             	and    bl,0x1
c0000d66:	75 0e                	jne    c0000d76 <dlfree+0x9e>
c0000d68:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d6b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d6e:	01 c8                	add    eax,ecx
c0000d70:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d73:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d76:	8b 0d fc 87 02 c0    	mov    ecx,DWORD PTR ds:0xc00287fc
c0000d7c:	c7 42 0c f4 87 02 c0 	mov    DWORD PTR [edx+0xc],0xc00287f4
c0000d83:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d86:	89 15 fc 87 02 c0    	mov    DWORD PTR ds:0xc00287fc,edx
c0000d8c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d8f:	89 c1                	mov    ecx,eax
c0000d91:	83 c9 01             	or     ecx,0x1
c0000d94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d97:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d9a:	eb 10                	jmp    c0000dac <dlfree+0xd4>
c0000d9c:	01 c8                	add    eax,ecx
c0000d9e:	89 c1                	mov    ecx,eax
c0000da0:	83 c9 01             	or     ecx,0x1
c0000da3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000da6:	89 15 ec 87 02 c0    	mov    DWORD PTR ds:0xc00287ec,edx
c0000dac:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000db1:	76 16                	jbe    c0000dc9 <dlfree+0xf1>
c0000db3:	f6 05 c0 87 02 c0 02 	test   BYTE PTR ds:0xc00287c0,0x2
c0000dba:	74 0d                	je     c0000dc9 <dlfree+0xf1>
c0000dbc:	5b                   	pop    ebx
c0000dbd:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0000dc2:	5e                   	pop    esi
c0000dc3:	5f                   	pop    edi
c0000dc4:	e9 28 fe ff ff       	jmp    c0000bf1 <malloc_consolidate>
c0000dc9:	5b                   	pop    ebx
c0000dca:	5e                   	pop    esi
c0000dcb:	5f                   	pop    edi
c0000dcc:	c3                   	ret    

c0000dcd <sYSMALLOc>:
c0000dcd:	55                   	push   ebp
c0000dce:	57                   	push   edi
c0000dcf:	56                   	push   esi
c0000dd0:	53                   	push   ebx
c0000dd1:	89 d3                	mov    ebx,edx
c0000dd3:	83 ec 2c             	sub    esp,0x2c
c0000dd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dda:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000de0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000de3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000de6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dea:	74 1f                	je     c0000e0b <sYSMALLOc+0x3e>
c0000dec:	89 d8                	mov    eax,ebx
c0000dee:	e8 fe fd ff ff       	call   c0000bf1 <malloc_consolidate>
c0000df3:	83 ec 0c             	sub    esp,0xc
c0000df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dfa:	83 e8 07             	sub    eax,0x7
c0000dfd:	50                   	push   eax
c0000dfe:	e8 30 02 00 00       	call   c0001033 <dlmalloc>
c0000e03:	83 c4 10             	add    esp,0x10
c0000e06:	e9 20 02 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e0b:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e0e:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e14:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e17:	83 e0 fc             	and    eax,0xfffffffc
c0000e1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e22:	83 c0 10             	add    eax,0x10
c0000e25:	01 c1                	add    ecx,eax
c0000e27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e2b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e32:	74 04                	je     c0000e38 <sYSMALLOc+0x6b>
c0000e34:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e38:	f7 da                	neg    edx
c0000e3a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e3e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e42:	21 d1                	and    ecx,edx
c0000e44:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e48:	7f 07                	jg     c0000e51 <sYSMALLOc+0x84>
c0000e4a:	31 c0                	xor    eax,eax
c0000e4c:	e9 da 01 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e51:	83 ec 0c             	sub    esp,0xc
c0000e54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e58:	e8 53 8e 00 00       	call   c0009cb0 <sbrk>
c0000e5d:	83 c4 10             	add    esp,0x10
c0000e60:	89 c6                	mov    esi,eax
c0000e62:	83 f8 ff             	cmp    eax,0xffffffff
c0000e65:	74 e3                	je     c0000e4a <sYSMALLOc+0x7d>
c0000e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e6b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e6f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e72:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e78:	39 f1                	cmp    ecx,esi
c0000e7a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e80:	75 13                	jne    c0000e95 <sYSMALLOc+0xc8>
c0000e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e86:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e8a:	83 c8 01             	or     eax,0x1
c0000e8d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e90:	e9 3e 01 00 00       	jmp    c0000fd3 <sYSMALLOc+0x206>
c0000e95:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e9b:	88 d0                	mov    al,dl
c0000e9d:	83 e0 01             	and    eax,0x1
c0000ea0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ea5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000ea9:	0f 95 c0             	setne  al
c0000eac:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000eb0:	39 f1                	cmp    ecx,esi
c0000eb2:	76 12                	jbe    c0000ec6 <sYSMALLOc+0xf9>
c0000eb4:	84 c0                	test   al,al
c0000eb6:	74 0e                	je     c0000ec6 <sYSMALLOc+0xf9>
c0000eb8:	83 e2 fe             	and    edx,0xfffffffe
c0000ebb:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ec1:	e9 83 00 00 00       	jmp    c0000f49 <sYSMALLOc+0x17c>
c0000ec6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ecb:	74 7c                	je     c0000f49 <sYSMALLOc+0x17c>
c0000ecd:	84 c0                	test   al,al
c0000ecf:	74 0c                	je     c0000edd <sYSMALLOc+0x110>
c0000ed1:	89 f0                	mov    eax,esi
c0000ed3:	29 c8                	sub    eax,ecx
c0000ed5:	01 e8                	add    eax,ebp
c0000ed7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000edd:	89 f2                	mov    edx,esi
c0000edf:	83 e2 07             	and    edx,0x7
c0000ee2:	74 0c                	je     c0000ef0 <sYSMALLOc+0x123>
c0000ee4:	b8 08 00 00 00       	mov    eax,0x8
c0000ee9:	29 d0                	sub    eax,edx
c0000eeb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eee:	eb 04                	jmp    c0000ef4 <sYSMALLOc+0x127>
c0000ef0:	89 f5                	mov    ebp,esi
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ef8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000efc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f00:	01 c1                	add    ecx,eax
c0000f02:	83 ec 0c             	sub    esp,0xc
c0000f05:	01 f1                	add    ecx,esi
c0000f07:	01 ca                	add    edx,ecx
c0000f09:	29 c8                	sub    eax,ecx
c0000f0b:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000f0f:	01 c2                	add    edx,eax
c0000f11:	52                   	push   edx
c0000f12:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f16:	e8 95 8d 00 00       	call   c0009cb0 <sbrk>
c0000f1b:	83 c4 10             	add    esp,0x10
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f25:	75 0f                	jne    c0000f36 <sYSMALLOc+0x169>
c0000f27:	83 ec 0c             	sub    esp,0xc
c0000f2a:	6a 00                	push   0x0
c0000f2c:	e8 7f 8d 00 00       	call   c0009cb0 <sbrk>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	eb 30                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f36:	39 c6                	cmp    esi,eax
c0000f38:	76 33                	jbe    c0000f6d <sYSMALLOc+0x1a0>
c0000f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f3e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f45:	01 f0                	add    eax,esi
c0000f47:	eb 1d                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f49:	83 ec 0c             	sub    esp,0xc
c0000f4c:	89 f5                	mov    ebp,esi
c0000f4e:	6a 00                	push   0x0
c0000f50:	e8 5b 8d 00 00       	call   c0009cb0 <sbrk>
c0000f55:	89 c2                	mov    edx,eax
c0000f57:	29 f2                	sub    edx,esi
c0000f59:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f5d:	83 c4 10             	add    esp,0x10
c0000f60:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f66:	31 d2                	xor    edx,edx
c0000f68:	83 f8 ff             	cmp    eax,0xffffffff
c0000f6b:	74 66                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f6d:	29 e8                	sub    eax,ebp
c0000f6f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f72:	01 d0                	add    eax,edx
c0000f74:	83 c8 01             	or     eax,0x1
c0000f77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f7a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f80:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f85:	74 4c                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f8b:	83 e8 0c             	sub    eax,0xc
c0000f8e:	83 e0 f8             	and    eax,0xfffffff8
c0000f91:	89 c2                	mov    edx,eax
c0000f93:	83 ca 01             	or     edx,0x1
c0000f96:	83 f8 0f             	cmp    eax,0xf
c0000f99:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f9c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000fa4:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000fac:	76 25                	jbe    c0000fd3 <sYSMALLOc+0x206>
c0000fae:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fb4:	83 ec 0c             	sub    esp,0xc
c0000fb7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fc1:	83 c7 08             	add    edi,0x8
c0000fc4:	57                   	push   edi
c0000fc5:	e8 0e fd ff ff       	call   c0000cd8 <dlfree>
c0000fca:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fd0:	83 c4 10             	add    esp,0x10
c0000fd3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fdf:	73 06                	jae    c0000fe7 <sYSMALLOc+0x21a>
c0000fe1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fe7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fed:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ff3:	73 06                	jae    c0000ffb <sYSMALLOc+0x22e>
c0000ff5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ffb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ffe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001001:	83 e2 fc             	and    edx,0xfffffffc
c0001004:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001008:	0f 82 3c fe ff ff    	jb     c0000e4a <sYSMALLOc+0x7d>
c000100e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001012:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001015:	29 fa                	sub    edx,edi
c0001017:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000101a:	83 ca 01             	or     edx,0x1
c000101d:	89 fb                	mov    ebx,edi
c000101f:	83 c0 08             	add    eax,0x8
c0001022:	83 cb 01             	or     ebx,0x1
c0001025:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001028:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000102b:	83 c4 2c             	add    esp,0x2c
c000102e:	5b                   	pop    ebx
c000102f:	5e                   	pop    esi
c0001030:	5f                   	pop    edi
c0001031:	5d                   	pop    ebp
c0001032:	c3                   	ret    

c0001033 <dlmalloc>:
c0001033:	55                   	push   ebp
c0001034:	57                   	push   edi
c0001035:	56                   	push   esi
c0001036:	53                   	push   ebx
c0001037:	83 ec 1c             	sub    esp,0x1c
c000103a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000103e:	83 f8 df             	cmp    eax,0xffffffdf
c0001041:	0f 87 70 03 00 00    	ja     c00013b7 <dlmalloc+0x384>
c0001047:	83 c0 0b             	add    eax,0xb
c000104a:	be 10 00 00 00       	mov    esi,0x10
c000104f:	83 f8 0f             	cmp    eax,0xf
c0001052:	76 05                	jbe    c0001059 <dlmalloc+0x26>
c0001054:	83 e0 f8             	and    eax,0xfffffff8
c0001057:	89 c6                	mov    esi,eax
c0001059:	8b 3d c0 87 02 c0    	mov    edi,DWORD PTR ds:0xc00287c0
c000105f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001065:	75 17                	jne    c000107e <dlmalloc+0x4b>
c0001067:	85 ff                	test   edi,edi
c0001069:	0f 85 05 03 00 00    	jne    c0001374 <dlmalloc+0x341>
c000106f:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0001074:	e8 78 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c0001079:	e9 f6 02 00 00       	jmp    c0001374 <dlmalloc+0x341>
c000107e:	39 f7                	cmp    edi,esi
c0001080:	72 1f                	jb     c00010a1 <dlmalloc+0x6e>
c0001082:	89 f2                	mov    edx,esi
c0001084:	c1 ea 03             	shr    edx,0x3
c0001087:	83 ea 02             	sub    edx,0x2
c000108a:	8b 04 95 c4 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd783c]
c0001091:	85 c0                	test   eax,eax
c0001093:	74 0c                	je     c00010a1 <dlmalloc+0x6e>
c0001095:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001098:	89 0c 95 c4 87 02 c0 	mov    DWORD PTR [edx*4-0x3ffd783c],ecx
c000109f:	eb 30                	jmp    c00010d1 <dlmalloc+0x9e>
c00010a1:	89 f0                	mov    eax,esi
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	77 2e                	ja     c00010d9 <dlmalloc+0xa6>
c00010ab:	c1 e8 03             	shr    eax,0x3
c00010ae:	8d 14 c5 f4 87 02 c0 	lea    edx,[eax*8-0x3ffd780c]
c00010b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010b9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010bc:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010bf:	39 c3                	cmp    ebx,eax
c00010c1:	74 2e                	je     c00010f1 <dlmalloc+0xbe>
c00010c3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010c6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010cb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010ce:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010d1:	83 c0 08             	add    eax,0x8
c00010d4:	e9 e0 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c00010d9:	e8 8f fa ff ff       	call   c0000b6d <largebin_index>
c00010de:	83 e7 02             	and    edi,0x2
c00010e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010e5:	74 0a                	je     c00010f1 <dlmalloc+0xbe>
c00010e7:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c00010ec:	e8 00 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c00010f1:	8d 46 10             	lea    eax,[esi+0x10]
c00010f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010f8:	8b 1d 00 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028800
c00010fe:	81 fb f4 87 02 c0    	cmp    ebx,0xc00287f4
c0001104:	0f 84 13 01 00 00    	je     c000121d <dlmalloc+0x1ea>
c000110a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000110d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001110:	83 e7 fc             	and    edi,0xfffffffc
c0001113:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001119:	77 4c                	ja     c0001167 <dlmalloc+0x134>
c000111b:	3d f4 87 02 c0       	cmp    eax,0xc00287f4
c0001120:	75 45                	jne    c0001167 <dlmalloc+0x134>
c0001122:	39 1d f0 87 02 c0    	cmp    DWORD PTR ds:0xc00287f0,ebx
c0001128:	75 3d                	jne    c0001167 <dlmalloc+0x134>
c000112a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000112e:	73 37                	jae    c0001167 <dlmalloc+0x134>
c0001130:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001133:	89 fa                	mov    edx,edi
c0001135:	a3 fc 87 02 c0       	mov    ds:0xc00287fc,eax
c000113a:	a3 00 88 02 c0       	mov    ds:0xc0028800,eax
c000113f:	a3 f0 87 02 c0       	mov    ds:0xc00287f0,eax
c0001144:	29 f2                	sub    edx,esi
c0001146:	c7 40 08 f4 87 02 c0 	mov    DWORD PTR [eax+0x8],0xc00287f4
c000114d:	c7 40 0c f4 87 02 c0 	mov    DWORD PTR [eax+0xc],0xc00287f4
c0001154:	83 ce 01             	or     esi,0x1
c0001157:	89 d1                	mov    ecx,edx
c0001159:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000115c:	83 c9 01             	or     ecx,0x1
c000115f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001162:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001165:	eb 15                	jmp    c000117c <dlmalloc+0x149>
c0001167:	a3 00 88 02 c0       	mov    ds:0xc0028800,eax
c000116c:	39 fe                	cmp    esi,edi
c000116e:	c7 40 08 f4 87 02 c0 	mov    DWORD PTR [eax+0x8],0xc00287f4
c0001175:	75 0d                	jne    c0001184 <dlmalloc+0x151>
c0001177:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000117c:	8d 43 08             	lea    eax,[ebx+0x8]
c000117f:	e9 35 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001184:	89 f8                	mov    eax,edi
c0001186:	81 ff ff 00 00 00    	cmp    edi,0xff
c000118c:	77 19                	ja     c00011a7 <dlmalloc+0x174>
c000118e:	c1 e8 03             	shr    eax,0x3
c0001191:	8d 14 00             	lea    edx,[eax+eax*1]
c0001194:	83 c2 0d             	add    edx,0xd
c0001197:	8d 2c 95 b8 87 02 c0 	lea    ebp,[edx*4-0x3ffd7848]
c000119e:	8b 14 95 c0 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7840]
c00011a5:	eb 46                	jmp    c00011ed <dlmalloc+0x1ba>
c00011a7:	e8 c1 f9 ff ff       	call   c0000b6d <largebin_index>
c00011ac:	8d 14 00             	lea    edx,[eax+eax*1]
c00011af:	83 c2 0d             	add    edx,0xd
c00011b2:	8d 0c 95 c0 87 02 c0 	lea    ecx,[edx*4-0x3ffd7840]
c00011b9:	8b 14 95 c0 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7840]
c00011c0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011c3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011c7:	89 d5                	mov    ebp,edx
c00011c9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011cd:	74 1e                	je     c00011ed <dlmalloc+0x1ba>
c00011cf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011d2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011d5:	77 12                	ja     c00011e9 <dlmalloc+0x1b6>
c00011d7:	83 cf 01             	or     edi,0x1
c00011da:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011dd:	76 05                	jbe    c00011e4 <dlmalloc+0x1b1>
c00011df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011e2:	eb f6                	jmp    c00011da <dlmalloc+0x1a7>
c00011e4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011e7:	eb 04                	jmp    c00011ed <dlmalloc+0x1ba>
c00011e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ed:	89 c7                	mov    edi,eax
c00011ef:	88 c1                	mov    cl,al
c00011f1:	c1 ff 05             	sar    edi,0x5
c00011f4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011f8:	bf 01 00 00 00       	mov    edi,0x1
c00011fd:	d3 e7                	shl    edi,cl
c00011ff:	89 f8                	mov    eax,edi
c0001201:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001205:	09 04 bd f4 8a 02 c0 	or     DWORD PTR [edi*4-0x3ffd750c],eax
c000120c:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000120f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001212:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001215:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001218:	e9 db fe ff ff       	jmp    c00010f8 <dlmalloc+0xc5>
c000121d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001223:	76 78                	jbe    c000129d <dlmalloc+0x26a>
c0001225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001229:	8d 04 c5 f4 87 02 c0 	lea    eax,[eax*8-0x3ffd780c]
c0001230:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001233:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001236:	39 ca                	cmp    edx,ecx
c0001238:	74 63                	je     c000129d <dlmalloc+0x26a>
c000123a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000123d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001240:	83 e3 fc             	and    ebx,0xfffffffc
c0001243:	39 de                	cmp    esi,ebx
c0001245:	77 52                	ja     c0001299 <dlmalloc+0x266>
c0001247:	89 df                	mov    edi,ebx
c0001249:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000124c:	29 f7                	sub    edi,esi
c000124e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001251:	01 d3                	add    ebx,edx
c0001253:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001256:	83 ff 0f             	cmp    edi,0xf
c0001259:	8d 42 08             	lea    eax,[edx+0x8]
c000125c:	77 09                	ja     c0001267 <dlmalloc+0x234>
c000125e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001262:	e9 52 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001267:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000126a:	83 ce 01             	or     esi,0x1
c000126d:	89 0d fc 87 02 c0    	mov    DWORD PTR ds:0xc00287fc,ecx
c0001273:	89 0d 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,ecx
c0001279:	c7 41 08 f4 87 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00287f4
c0001280:	c7 41 0c f4 87 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00287f4
c0001287:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000128a:	89 fa                	mov    edx,edi
c000128c:	83 ca 01             	or     edx,0x1
c000128f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001292:	89 3b                	mov    DWORD PTR [ebx],edi
c0001294:	e9 20 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001299:	89 c2                	mov    edx,eax
c000129b:	eb 99                	jmp    c0001236 <dlmalloc+0x203>
c000129d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00012a1:	b8 01 00 00 00       	mov    eax,0x1
c00012a6:	41                   	inc    ecx
c00012a7:	89 cb                	mov    ebx,ecx
c00012a9:	8d 14 cd ec 87 02 c0 	lea    edx,[ecx*8-0x3ffd7814]
c00012b0:	c1 eb 05             	shr    ebx,0x5
c00012b3:	d3 e0                	shl    eax,cl
c00012b5:	8b 3c 9d f4 8a 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd750c]
c00012bc:	39 f8                	cmp    eax,edi
c00012be:	77 04                	ja     c00012c4 <dlmalloc+0x291>
c00012c0:	85 c0                	test   eax,eax
c00012c2:	75 26                	jne    c00012ea <dlmalloc+0x2b7>
c00012c4:	43                   	inc    ebx
c00012c5:	83 fb 02             	cmp    ebx,0x2
c00012c8:	0f 87 a6 00 00 00    	ja     c0001374 <dlmalloc+0x341>
c00012ce:	8b 3c 9d f4 8a 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd750c]
c00012d5:	85 ff                	test   edi,edi
c00012d7:	74 eb                	je     c00012c4 <dlmalloc+0x291>
c00012d9:	89 d8                	mov    eax,ebx
c00012db:	c1 e0 06             	shl    eax,0x6
c00012de:	8d 14 85 ec 87 02 c0 	lea    edx,[eax*4-0x3ffd7814]
c00012e5:	b8 01 00 00 00       	mov    eax,0x1
c00012ea:	85 f8                	test   eax,edi
c00012ec:	75 07                	jne    c00012f5 <dlmalloc+0x2c2>
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	01 c0                	add    eax,eax
c00012f3:	eb f5                	jmp    c00012ea <dlmalloc+0x2b7>
c00012f5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012f8:	39 ca                	cmp    edx,ecx
c00012fa:	75 14                	jne    c0001310 <dlmalloc+0x2dd>
c00012fc:	89 c1                	mov    ecx,eax
c00012fe:	83 c2 08             	add    edx,0x8
c0001301:	f7 d1                	not    ecx
c0001303:	01 c0                	add    eax,eax
c0001305:	21 cf                	and    edi,ecx
c0001307:	89 3c 9d f4 8a 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd750c],edi
c000130e:	eb ac                	jmp    c00012bc <dlmalloc+0x289>
c0001310:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001313:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001316:	83 e0 fc             	and    eax,0xfffffffc
c0001319:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000131c:	89 c3                	mov    ebx,eax
c000131e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001321:	29 f3                	sub    ebx,esi
c0001323:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001326:	83 fb 0f             	cmp    ebx,0xf
c0001329:	8d 41 08             	lea    eax,[ecx+0x8]
c000132c:	77 09                	ja     c0001337 <dlmalloc+0x304>
c000132e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001332:	e9 82 00 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001337:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000133a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001340:	89 3d fc 87 02 c0    	mov    DWORD PTR ds:0xc00287fc,edi
c0001346:	89 3d 00 88 02 c0    	mov    DWORD PTR ds:0xc0028800,edi
c000134c:	c7 47 08 f4 87 02 c0 	mov    DWORD PTR [edi+0x8],0xc00287f4
c0001353:	c7 47 0c f4 87 02 c0 	mov    DWORD PTR [edi+0xc],0xc00287f4
c000135a:	77 06                	ja     c0001362 <dlmalloc+0x32f>
c000135c:	89 3d f0 87 02 c0    	mov    DWORD PTR ds:0xc00287f0,edi
c0001362:	83 ce 01             	or     esi,0x1
c0001365:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	83 c9 01             	or     ecx,0x1
c000136d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001370:	89 1a                	mov    DWORD PTR [edx],ebx
c0001372:	eb 45                	jmp    c00013b9 <dlmalloc+0x386>
c0001374:	a1 ec 87 02 c0       	mov    eax,ds:0xc00287ec
c0001379:	8d 4e 10             	lea    ecx,[esi+0x10]
c000137c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000137f:	83 e2 fc             	and    edx,0xfffffffc
c0001382:	39 d1                	cmp    ecx,edx
c0001384:	77 1e                	ja     c00013a4 <dlmalloc+0x371>
c0001386:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001389:	89 f3                	mov    ebx,esi
c000138b:	89 0d ec 87 02 c0    	mov    DWORD PTR ds:0xc00287ec,ecx
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	29 f2                	sub    edx,esi
c0001396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001399:	83 ca 01             	or     edx,0x1
c000139c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000139f:	e9 2d fd ff ff       	jmp    c00010d1 <dlmalloc+0x9e>
c00013a4:	83 c4 1c             	add    esp,0x1c
c00013a7:	89 f0                	mov    eax,esi
c00013a9:	5b                   	pop    ebx
c00013aa:	ba c0 87 02 c0       	mov    edx,0xc00287c0
c00013af:	5e                   	pop    esi
c00013b0:	5f                   	pop    edi
c00013b1:	5d                   	pop    ebp
c00013b2:	e9 16 fa ff ff       	jmp    c0000dcd <sYSMALLOc>
c00013b7:	31 c0                	xor    eax,eax
c00013b9:	83 c4 1c             	add    esp,0x1c
c00013bc:	5b                   	pop    ebx
c00013bd:	5e                   	pop    esi
c00013be:	5f                   	pop    edi
c00013bf:	5d                   	pop    ebp
c00013c0:	c3                   	ret    

c00013c1 <iALLOc>:
c00013c1:	55                   	push   ebp
c00013c2:	89 c5                	mov    ebp,eax
c00013c4:	57                   	push   edi
c00013c5:	56                   	push   esi
c00013c6:	53                   	push   ebx
c00013c7:	83 ec 2c             	sub    esp,0x2c
c00013ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013ce:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013d6:	83 3d c0 87 02 c0 00 	cmp    DWORD PTR ds:0xc00287c0,0x0
c00013dd:	75 12                	jne    c00013f1 <iALLOc+0x30>
c00013df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013e3:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c00013e8:	e8 04 f8 ff ff       	call   c0000bf1 <malloc_consolidate>
c00013ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f6:	74 12                	je     c000140a <iALLOc+0x49>
c00013f8:	85 ed                	test   ebp,ebp
c00013fa:	0f 84 64 01 00 00    	je     c0001564 <iALLOc+0x1a3>
c0001400:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001408:	eb 33                	jmp    c000143d <iALLOc+0x7c>
c000140a:	85 ed                	test   ebp,ebp
c000140c:	75 14                	jne    c0001422 <iALLOc+0x61>
c000140e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001416:	83 c4 2c             	add    esp,0x2c
c0001419:	5b                   	pop    ebx
c000141a:	5e                   	pop    esi
c000141b:	5f                   	pop    edi
c000141c:	5d                   	pop    ebp
c000141d:	e9 11 fc ff ff       	jmp    c0001033 <dlmalloc>
c0001422:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001429:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001431:	83 f8 0f             	cmp    eax,0xf
c0001434:	76 07                	jbe    c000143d <iALLOc+0x7c>
c0001436:	83 e0 f8             	and    eax,0xfffffff8
c0001439:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000143d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001442:	75 09                	jne    c000144d <iALLOc+0x8c>
c0001444:	89 d0                	mov    eax,edx
c0001446:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001449:	31 f6                	xor    esi,esi
c000144b:	eb 3b                	jmp    c0001488 <iALLOc+0xc7>
c000144d:	8b 02                	mov    eax,DWORD PTR [edx]
c000144f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001457:	83 c0 0b             	add    eax,0xb
c000145a:	83 f8 0f             	cmp    eax,0xf
c000145d:	76 07                	jbe    c0001466 <iALLOc+0xa5>
c000145f:	83 e0 f8             	and    eax,0xfffffff8
c0001462:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001466:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000146a:	0f af f5             	imul   esi,ebp
c000146d:	eb 25                	jmp    c0001494 <iALLOc+0xd3>
c000146f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001471:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001474:	bb 10 00 00 00       	mov    ebx,0x10
c0001479:	83 f9 0f             	cmp    ecx,0xf
c000147c:	76 05                	jbe    c0001483 <iALLOc+0xc2>
c000147e:	83 e1 f8             	and    ecx,0xfffffff8
c0001481:	89 cb                	mov    ebx,ecx
c0001483:	01 de                	add    esi,ebx
c0001485:	83 c0 04             	add    eax,0x4
c0001488:	39 c7                	cmp    edi,eax
c000148a:	75 e3                	jne    c000146f <iALLOc+0xae>
c000148c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001494:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001498:	8b 1d 14 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b14
c000149e:	83 ec 0c             	sub    esp,0xc
c00014a1:	c7 05 14 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b14,0x0
c00014ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00014af:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014b3:	50                   	push   eax
c00014b4:	e8 7a fb ff ff       	call   c0001033 <dlmalloc>
c00014b9:	83 c4 10             	add    esp,0x10
c00014bc:	89 1d 14 8b 02 c0    	mov    DWORD PTR ds:0xc0028b14,ebx
c00014c2:	85 c0                	test   eax,eax
c00014c4:	0f 84 92 00 00 00    	je     c000155c <iALLOc+0x19b>
c00014ca:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014cd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014d0:	83 e3 fc             	and    ebx,0xfffffffc
c00014d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014d7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014dc:	74 1e                	je     c00014fc <iALLOc+0x13b>
c00014de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014e2:	89 d9                	mov    ecx,ebx
c00014e4:	52                   	push   edx
c00014e5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014e9:	83 e9 04             	sub    ecx,0x4
c00014ec:	51                   	push   ecx
c00014ed:	6a 00                	push   0x0
c00014ef:	50                   	push   eax
c00014f0:	e8 9f f1 ff ff       	call   c0000694 <memset>
c00014f5:	83 c4 10             	add    esp,0x10
c00014f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001501:	75 14                	jne    c0001517 <iALLOc+0x156>
c0001503:	8d 04 37             	lea    eax,[edi+esi*1]
c0001506:	29 f3                	sub    ebx,esi
c0001508:	8d 48 08             	lea    ecx,[eax+0x8]
c000150b:	83 cb 01             	or     ebx,0x1
c000150e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001512:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001515:	89 f3                	mov    ebx,esi
c0001517:	31 c0                	xor    eax,eax
c0001519:	4d                   	dec    ebp
c000151a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000151d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001521:	39 c5                	cmp    ebp,eax
c0001523:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001526:	74 2c                	je     c0001554 <iALLOc+0x193>
c0001528:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000152c:	85 c9                	test   ecx,ecx
c000152e:	75 15                	jne    c0001545 <iALLOc+0x184>
c0001530:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001533:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001536:	b9 10 00 00 00       	mov    ecx,0x10
c000153b:	83 fe 0f             	cmp    esi,0xf
c000153e:	76 05                	jbe    c0001545 <iALLOc+0x184>
c0001540:	83 e6 f8             	and    esi,0xfffffff8
c0001543:	89 f1                	mov    ecx,esi
c0001545:	89 ce                	mov    esi,ecx
c0001547:	29 cb                	sub    ebx,ecx
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	40                   	inc    eax
c000154d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001550:	01 cf                	add    edi,ecx
c0001552:	eb c6                	jmp    c000151a <iALLOc+0x159>
c0001554:	83 cb 01             	or     ebx,0x1
c0001557:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000155a:	eb 08                	jmp    c0001564 <iALLOc+0x1a3>
c000155c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001568:	83 c4 2c             	add    esp,0x2c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	c3                   	ret    

c0001570 <dlrealloc>:
c0001570:	55                   	push   ebp
c0001571:	57                   	push   edi
c0001572:	56                   	push   esi
c0001573:	53                   	push   ebx
c0001574:	83 ec 1c             	sub    esp,0x1c
c0001577:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000157b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000157f:	85 db                	test   ebx,ebx
c0001581:	75 10                	jne    c0001593 <dlrealloc+0x23>
c0001583:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001587:	83 c4 1c             	add    esp,0x1c
c000158a:	5b                   	pop    ebx
c000158b:	5e                   	pop    esi
c000158c:	5f                   	pop    edi
c000158d:	5d                   	pop    ebp
c000158e:	e9 a0 fa ff ff       	jmp    c0001033 <dlmalloc>
c0001593:	83 f8 df             	cmp    eax,0xffffffdf
c0001596:	76 07                	jbe    c000159f <dlrealloc+0x2f>
c0001598:	31 db                	xor    ebx,ebx
c000159a:	e9 6a 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c000159f:	83 c0 0b             	add    eax,0xb
c00015a2:	bd 10 00 00 00       	mov    ebp,0x10
c00015a7:	83 f8 0f             	cmp    eax,0xf
c00015aa:	76 05                	jbe    c00015b1 <dlrealloc+0x41>
c00015ac:	83 e0 f8             	and    eax,0xfffffff8
c00015af:	89 c5                	mov    ebp,eax
c00015b1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015b4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015b7:	89 c6                	mov    esi,eax
c00015b9:	83 e6 fc             	and    esi,0xfffffffc
c00015bc:	a8 02                	test   al,0x2
c00015be:	75 d8                	jne    c0001598 <dlrealloc+0x28>
c00015c0:	39 f5                	cmp    ebp,esi
c00015c2:	0f 86 04 01 00 00    	jbe    c00016cc <dlrealloc+0x15c>
c00015c8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015cb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015ce:	39 15 ec 87 02 c0    	cmp    DWORD PTR ds:0xc00287ec,edx
c00015d4:	75 33                	jne    c0001609 <dlrealloc+0x99>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015df:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015e2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015e6:	77 49                	ja     c0001631 <dlrealloc+0xc1>
c00015e8:	01 ef                	add    edi,ebp
c00015ea:	83 e0 01             	and    eax,0x1
c00015ed:	09 e8                	or     eax,ebp
c00015ef:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015f2:	89 3d ec 87 02 c0    	mov    DWORD PTR ds:0xc00287ec,edi
c00015f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015fc:	29 e8                	sub    eax,ebp
c00015fe:	83 c8 01             	or     eax,0x1
c0001601:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001604:	e9 00 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c0001609:	89 c8                	mov    eax,ecx
c000160b:	83 e0 fe             	and    eax,0xfffffffe
c000160e:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001613:	75 1c                	jne    c0001631 <dlrealloc+0xc1>
c0001615:	83 e1 fc             	and    ecx,0xfffffffc
c0001618:	01 f1                	add    ecx,esi
c000161a:	39 cd                	cmp    ebp,ecx
c000161c:	77 13                	ja     c0001631 <dlrealloc+0xc1>
c000161e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001621:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001624:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001627:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000162a:	89 ce                	mov    esi,ecx
c000162c:	e9 9b 00 00 00       	jmp    c00016cc <dlrealloc+0x15c>
c0001631:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001635:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001638:	83 ec 0c             	sub    esp,0xc
c000163b:	50                   	push   eax
c000163c:	e8 f2 f9 ff ff       	call   c0001033 <dlmalloc>
c0001641:	83 c4 10             	add    esp,0x10
c0001644:	85 c0                	test   eax,eax
c0001646:	0f 84 4c ff ff ff    	je     c0001598 <dlrealloc+0x28>
c000164c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000164f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001653:	39 ca                	cmp    edx,ecx
c0001655:	75 0a                	jne    c0001661 <dlrealloc+0xf1>
c0001657:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000165a:	83 e0 fc             	and    eax,0xfffffffc
c000165d:	01 c6                	add    esi,eax
c000165f:	eb 6b                	jmp    c00016cc <dlrealloc+0x15c>
c0001661:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001664:	83 f9 27             	cmp    ecx,0x27
c0001667:	76 08                	jbe    c0001671 <dlrealloc+0x101>
c0001669:	89 de                	mov    esi,ebx
c000166b:	89 c7                	mov    edi,eax
c000166d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000166f:	eb 43                	jmp    c00016b4 <dlrealloc+0x144>
c0001671:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001673:	83 f9 13             	cmp    ecx,0x13
c0001676:	89 10                	mov    DWORD PTR [eax],edx
c0001678:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000167b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000167e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001681:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001684:	76 2e                	jbe    c00016b4 <dlrealloc+0x144>
c0001686:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001689:	83 f9 1b             	cmp    ecx,0x1b
c000168c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000168f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001695:	76 1d                	jbe    c00016b4 <dlrealloc+0x144>
c0001697:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000169a:	83 f9 23             	cmp    ecx,0x23
c000169d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00016a0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00016a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00016a6:	76 0c                	jbe    c00016b4 <dlrealloc+0x144>
c00016a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00016ab:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00016ae:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016b1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016b8:	83 ec 0c             	sub    esp,0xc
c00016bb:	53                   	push   ebx
c00016bc:	e8 17 f6 ff ff       	call   c0000cd8 <dlfree>
c00016c1:	83 c4 10             	add    esp,0x10
c00016c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016c8:	89 c3                	mov    ebx,eax
c00016ca:	eb 3d                	jmp    c0001709 <dlrealloc+0x199>
c00016cc:	89 f2                	mov    edx,esi
c00016ce:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016d1:	29 ea                	sub    edx,ebp
c00016d3:	83 e1 01             	and    ecx,0x1
c00016d6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016d9:	83 fa 0f             	cmp    edx,0xf
c00016dc:	77 0b                	ja     c00016e9 <dlrealloc+0x179>
c00016de:	09 ce                	or     esi,ecx
c00016e0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016e3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e7:	eb 20                	jmp    c0001709 <dlrealloc+0x199>
c00016e9:	01 ef                	add    edi,ebp
c00016eb:	83 ec 0c             	sub    esp,0xc
c00016ee:	09 cd                	or     ebp,ecx
c00016f0:	83 ca 01             	or     edx,0x1
c00016f3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016f6:	83 c7 08             	add    edi,0x8
c00016f9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016fc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001700:	57                   	push   edi
c0001701:	e8 d2 f5 ff ff       	call   c0000cd8 <dlfree>
c0001706:	83 c4 10             	add    esp,0x10
c0001709:	83 c4 1c             	add    esp,0x1c
c000170c:	89 d8                	mov    eax,ebx
c000170e:	5b                   	pop    ebx
c000170f:	5e                   	pop    esi
c0001710:	5f                   	pop    edi
c0001711:	5d                   	pop    ebp
c0001712:	c3                   	ret    

c0001713 <dlmemalign>:
c0001713:	55                   	push   ebp
c0001714:	57                   	push   edi
c0001715:	56                   	push   esi
c0001716:	53                   	push   ebx
c0001717:	83 ec 0c             	sub    esp,0xc
c000171a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000171e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001722:	83 fa 08             	cmp    edx,0x8
c0001725:	77 10                	ja     c0001737 <dlmemalign+0x24>
c0001727:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000172b:	83 c4 0c             	add    esp,0xc
c000172e:	5b                   	pop    ebx
c000172f:	5e                   	pop    esi
c0001730:	5f                   	pop    edi
c0001731:	5d                   	pop    ebp
c0001732:	e9 fc f8 ff ff       	jmp    c0001033 <dlmalloc>
c0001737:	bf 10 00 00 00       	mov    edi,0x10
c000173c:	83 fa 0f             	cmp    edx,0xf
c000173f:	76 13                	jbe    c0001754 <dlmemalign+0x41>
c0001741:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001744:	85 d1                	test   ecx,edx
c0001746:	75 04                	jne    c000174c <dlmemalign+0x39>
c0001748:	89 d7                	mov    edi,edx
c000174a:	eb 08                	jmp    c0001754 <dlmemalign+0x41>
c000174c:	39 d7                	cmp    edi,edx
c000174e:	73 04                	jae    c0001754 <dlmemalign+0x41>
c0001750:	01 ff                	add    edi,edi
c0001752:	eb f8                	jmp    c000174c <dlmemalign+0x39>
c0001754:	83 f8 df             	cmp    eax,0xffffffdf
c0001757:	76 07                	jbe    c0001760 <dlmemalign+0x4d>
c0001759:	31 c0                	xor    eax,eax
c000175b:	e9 ce 00 00 00       	jmp    c000182e <dlmemalign+0x11b>
c0001760:	83 c0 0b             	add    eax,0xb
c0001763:	bd 10 00 00 00       	mov    ebp,0x10
c0001768:	83 f8 0f             	cmp    eax,0xf
c000176b:	76 05                	jbe    c0001772 <dlmemalign+0x5f>
c000176d:	83 e0 f8             	and    eax,0xfffffff8
c0001770:	89 c5                	mov    ebp,eax
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001779:	50                   	push   eax
c000177a:	e8 b4 f8 ff ff       	call   c0001033 <dlmalloc>
c000177f:	83 c4 10             	add    esp,0x10
c0001782:	89 c1                	mov    ecx,eax
c0001784:	85 c0                	test   eax,eax
c0001786:	74 d1                	je     c0001759 <dlmemalign+0x46>
c0001788:	31 d2                	xor    edx,edx
c000178a:	8d 70 f8             	lea    esi,[eax-0x8]
c000178d:	f7 f7                	div    edi
c000178f:	85 d2                	test   edx,edx
c0001791:	74 62                	je     c00017f5 <dlmemalign+0xe2>
c0001793:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001797:	89 f8                	mov    eax,edi
c0001799:	f7 d8                	neg    eax
c000179b:	21 c3                	and    ebx,eax
c000179d:	83 eb 08             	sub    ebx,0x8
c00017a0:	89 d8                	mov    eax,ebx
c00017a2:	29 f0                	sub    eax,esi
c00017a4:	83 f8 0f             	cmp    eax,0xf
c00017a7:	77 02                	ja     c00017ab <dlmemalign+0x98>
c00017a9:	01 fb                	add    ebx,edi
c00017ab:	89 d8                	mov    eax,ebx
c00017ad:	29 f0                	sub    eax,esi
c00017af:	89 c6                	mov    esi,eax
c00017b1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017b4:	89 c2                	mov    edx,eax
c00017b6:	83 e2 fc             	and    edx,0xfffffffc
c00017b9:	29 f2                	sub    edx,esi
c00017bb:	a8 02                	test   al,0x2
c00017bd:	74 10                	je     c00017cf <dlmemalign+0xbc>
c00017bf:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017c2:	83 ca 02             	or     edx,0x2
c00017c5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017c8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ca:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017cd:	eb 5f                	jmp    c000182e <dlmemalign+0x11b>
c00017cf:	83 ec 0c             	sub    esp,0xc
c00017d2:	89 d0                	mov    eax,edx
c00017d4:	83 c8 01             	or     eax,0x1
c00017d7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017da:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017e2:	83 e0 01             	and    eax,0x1
c00017e5:	09 f0                	or     eax,esi
c00017e7:	89 de                	mov    esi,ebx
c00017e9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ec:	51                   	push   ecx
c00017ed:	e8 e6 f4 ff ff       	call   c0000cd8 <dlfree>
c00017f2:	83 c4 10             	add    esp,0x10
c00017f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017f8:	a8 02                	test   al,0x2
c00017fa:	75 2f                	jne    c000182b <dlmemalign+0x118>
c00017fc:	83 e0 fc             	and    eax,0xfffffffc
c00017ff:	8d 55 10             	lea    edx,[ebp+0x10]
c0001802:	39 c2                	cmp    edx,eax
c0001804:	73 25                	jae    c000182b <dlmemalign+0x118>
c0001806:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001809:	83 ec 0c             	sub    esp,0xc
c000180c:	29 e8                	sub    eax,ebp
c000180e:	83 c2 08             	add    edx,0x8
c0001811:	83 c8 01             	or     eax,0x1
c0001814:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001817:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000181a:	83 e0 01             	and    eax,0x1
c000181d:	09 c5                	or     ebp,eax
c000181f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001822:	52                   	push   edx
c0001823:	e8 b0 f4 ff ff       	call   c0000cd8 <dlfree>
c0001828:	83 c4 10             	add    esp,0x10
c000182b:	8d 46 08             	lea    eax,[esi+0x8]
c000182e:	83 c4 0c             	add    esp,0xc
c0001831:	5b                   	pop    ebx
c0001832:	5e                   	pop    esi
c0001833:	5f                   	pop    edi
c0001834:	5d                   	pop    ebp
c0001835:	c3                   	ret    

c0001836 <dlcalloc>:
c0001836:	53                   	push   ebx
c0001837:	83 ec 14             	sub    esp,0x14
c000183a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000183e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001843:	50                   	push   eax
c0001844:	e8 ea f7 ff ff       	call   c0001033 <dlmalloc>
c0001849:	83 c4 10             	add    esp,0x10
c000184c:	89 c3                	mov    ebx,eax
c000184e:	85 c0                	test   eax,eax
c0001850:	74 77                	je     c00018c9 <dlcalloc+0x93>
c0001852:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001855:	89 d0                	mov    eax,edx
c0001857:	83 e0 fc             	and    eax,0xfffffffc
c000185a:	80 e2 02             	and    dl,0x2
c000185d:	75 5a                	jne    c00018b9 <dlcalloc+0x83>
c000185f:	83 e8 04             	sub    eax,0x4
c0001862:	83 f8 27             	cmp    eax,0x27
c0001865:	76 03                	jbe    c000186a <dlcalloc+0x34>
c0001867:	51                   	push   ecx
c0001868:	eb 53                	jmp    c00018bd <dlcalloc+0x87>
c000186a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001870:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001877:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000187e:	83 f8 13             	cmp    eax,0x13
c0001881:	76 46                	jbe    c00018c9 <dlcalloc+0x93>
c0001883:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000188a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001891:	83 f8 1b             	cmp    eax,0x1b
c0001894:	76 33                	jbe    c00018c9 <dlcalloc+0x93>
c0001896:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000189d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00018a4:	83 f8 23             	cmp    eax,0x23
c00018a7:	76 20                	jbe    c00018c9 <dlcalloc+0x93>
c00018a9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018b0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018b7:	eb 10                	jmp    c00018c9 <dlcalloc+0x93>
c00018b9:	83 e8 08             	sub    eax,0x8
c00018bc:	52                   	push   edx
c00018bd:	50                   	push   eax
c00018be:	6a 00                	push   0x0
c00018c0:	53                   	push   ebx
c00018c1:	e8 ce ed ff ff       	call   c0000694 <memset>
c00018c6:	83 c4 10             	add    esp,0x10
c00018c9:	89 d8                	mov    eax,ebx
c00018cb:	83 c4 08             	add    esp,0x8
c00018ce:	5b                   	pop    ebx
c00018cf:	c3                   	ret    

c00018d0 <dlcfree>:
c00018d0:	e9 03 f4 ff ff       	jmp    c0000cd8 <dlfree>

c00018d5 <dlindependent_calloc>:
c00018d5:	83 ec 28             	sub    esp,0x28
c00018d8:	b9 03 00 00 00       	mov    ecx,0x3
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018f1:	e8 cb fa ff ff       	call   c00013c1 <iALLOc>
c00018f6:	83 c4 2c             	add    esp,0x2c
c00018f9:	c3                   	ret    

c00018fa <dlindependent_comalloc>:
c00018fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001902:	31 c9                	xor    ecx,ecx
c0001904:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000190c:	e9 b0 fa ff ff       	jmp    c00013c1 <iALLOc>

c0001911 <dlvalloc>:
c0001911:	83 ec 0c             	sub    esp,0xc
c0001914:	83 3d c0 87 02 c0 00 	cmp    DWORD PTR ds:0xc00287c0,0x0
c000191b:	75 0a                	jne    c0001927 <dlvalloc+0x16>
c000191d:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0001922:	e8 ca f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001927:	50                   	push   eax
c0001928:	50                   	push   eax
c0001929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000192d:	ff 35 1c 8b 02 c0    	push   DWORD PTR ds:0xc0028b1c
c0001933:	e8 db fd ff ff       	call   c0001713 <dlmemalign>
c0001938:	83 c4 1c             	add    esp,0x1c
c000193b:	c3                   	ret    

c000193c <dlpvalloc>:
c000193c:	83 ec 0c             	sub    esp,0xc
c000193f:	83 3d c0 87 02 c0 00 	cmp    DWORD PTR ds:0xc00287c0,0x0
c0001946:	75 0a                	jne    c0001952 <dlpvalloc+0x16>
c0001948:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c000194d:	e8 9f f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001952:	a1 1c 8b 02 c0       	mov    eax,ds:0xc0028b1c
c0001957:	89 c1                	mov    ecx,eax
c0001959:	52                   	push   edx
c000195a:	f7 d9                	neg    ecx
c000195c:	52                   	push   edx
c000195d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001961:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001965:	21 ca                	and    edx,ecx
c0001967:	52                   	push   edx
c0001968:	50                   	push   eax
c0001969:	e8 a5 fd ff ff       	call   c0001713 <dlmemalign>
c000196e:	83 c4 1c             	add    esp,0x1c
c0001971:	c3                   	ret    

c0001972 <dlmalloc_trim>:
c0001972:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0001977:	e8 75 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c000197c:	31 c0                	xor    eax,eax
c000197e:	c3                   	ret    

c000197f <dlmalloc_usable_size>:
c000197f:	53                   	push   ebx
c0001980:	31 c0                	xor    eax,eax
c0001982:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001986:	85 c9                	test   ecx,ecx
c0001988:	74 24                	je     c00019ae <dlmalloc_usable_size+0x2f>
c000198a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000198d:	f6 c2 02             	test   dl,0x2
c0001990:	74 08                	je     c000199a <dlmalloc_usable_size+0x1b>
c0001992:	83 e2 fc             	and    edx,0xfffffffc
c0001995:	8d 42 f8             	lea    eax,[edx-0x8]
c0001998:	eb 14                	jmp    c00019ae <dlmalloc_usable_size+0x2f>
c000199a:	89 d3                	mov    ebx,edx
c000199c:	31 c0                	xor    eax,eax
c000199e:	83 e3 fe             	and    ebx,0xfffffffe
c00019a1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00019a6:	74 06                	je     c00019ae <dlmalloc_usable_size+0x2f>
c00019a8:	83 e2 fc             	and    edx,0xfffffffc
c00019ab:	8d 42 fc             	lea    eax,[edx-0x4]
c00019ae:	5b                   	pop    ebx
c00019af:	c3                   	ret    

c00019b0 <dlmallinfo>:
c00019b0:	55                   	push   ebp
c00019b1:	57                   	push   edi
c00019b2:	56                   	push   esi
c00019b3:	53                   	push   ebx
c00019b4:	83 ec 08             	sub    esp,0x8
c00019b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019bb:	83 3d ec 87 02 c0 00 	cmp    DWORD PTR ds:0xc00287ec,0x0
c00019c2:	75 0a                	jne    c00019ce <dlmallinfo+0x1e>
c00019c4:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c00019c9:	e8 23 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c00019ce:	a1 ec 87 02 c0       	mov    eax,ds:0xc00287ec
c00019d3:	31 ed                	xor    ebp,ebp
c00019d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019d8:	31 c9                	xor    ecx,ecx
c00019da:	83 e0 fc             	and    eax,0xfffffffc
c00019dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019e1:	31 c0                	xor    eax,eax
c00019e3:	8b 14 85 c4 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd783c]
c00019ea:	85 d2                	test   edx,edx
c00019ec:	74 0e                	je     c00019fc <dlmallinfo+0x4c>
c00019ee:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019f1:	45                   	inc    ebp
c00019f2:	83 e6 fc             	and    esi,0xfffffffc
c00019f5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019f8:	01 f1                	add    ecx,esi
c00019fa:	eb ee                	jmp    c00019ea <dlmallinfo+0x3a>
c00019fc:	40                   	inc    eax
c00019fd:	83 f8 0a             	cmp    eax,0xa
c0001a00:	75 e1                	jne    c00019e3 <dlmallinfo+0x33>
c0001a02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a06:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a0d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a10:	b8 f4 87 02 c0       	mov    eax,0xc00287f4
c0001a15:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a18:	39 f0                	cmp    eax,esi
c0001a1a:	74 10                	je     c0001a2c <dlmallinfo+0x7c>
c0001a1c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a1f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a22:	83 e7 fc             	and    edi,0xfffffffc
c0001a25:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a28:	01 fa                	add    edx,edi
c0001a2a:	eb ec                	jmp    c0001a18 <dlmallinfo+0x68>
c0001a2c:	83 c0 08             	add    eax,0x8
c0001a2f:	3d ec 8a 02 c0       	cmp    eax,0xc0028aec
c0001a34:	75 df                	jne    c0001a15 <dlmallinfo+0x65>
c0001a36:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a39:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a3c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a3f:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c0001a44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a47:	89 03                	mov    DWORD PTR [ebx],eax
c0001a49:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a4c:	8b 35 10 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b10
c0001a52:	29 d0                	sub    eax,edx
c0001a54:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a57:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a5a:	8b 35 24 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b24
c0001a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a64:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a67:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a6a:	8b 35 34 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b34
c0001a70:	89 d8                	mov    eax,ebx
c0001a72:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a75:	83 c4 08             	add    esp,0x8
c0001a78:	5b                   	pop    ebx
c0001a79:	5e                   	pop    esi
c0001a7a:	5f                   	pop    edi
c0001a7b:	5d                   	pop    ebp
c0001a7c:	c2 04 00             	ret    0x4

c0001a7f <dlmalloc_stats>:
c0001a7f:	83 ec 30             	sub    esp,0x30
c0001a82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a86:	50                   	push   eax
c0001a87:	e8 24 ff ff ff       	call   c00019b0 <dlmallinfo>
c0001a8c:	83 c4 30             	add    esp,0x30
c0001a8f:	c3                   	ret    

c0001a90 <dlmallopt>:
c0001a90:	56                   	push   esi
c0001a91:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0001a96:	53                   	push   ebx
c0001a97:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a9f:	e8 4d f1 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001aa4:	8d 46 04             	lea    eax,[esi+0x4]
c0001aa7:	83 f8 05             	cmp    eax,0x5
c0001aaa:	77 67                	ja     c0001b13 <dlmallopt+0x83>
c0001aac:	ff 24 85 64 3f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc09c]
c0001ab3:	83 fb 50             	cmp    ebx,0x50
c0001ab6:	77 5b                	ja     c0001b13 <dlmallopt+0x83>
c0001ab8:	ba 08 00 00 00       	mov    edx,0x8
c0001abd:	85 db                	test   ebx,ebx
c0001abf:	74 12                	je     c0001ad3 <dlmallopt+0x43>
c0001ac1:	83 c3 0b             	add    ebx,0xb
c0001ac4:	ba 10 00 00 00       	mov    edx,0x10
c0001ac9:	83 fb 0f             	cmp    ebx,0xf
c0001acc:	76 05                	jbe    c0001ad3 <dlmallopt+0x43>
c0001ace:	89 da                	mov    edx,ebx
c0001ad0:	83 e2 f8             	and    edx,0xfffffff8
c0001ad3:	a1 c0 87 02 c0       	mov    eax,ds:0xc00287c0
c0001ad8:	83 e0 03             	and    eax,0x3
c0001adb:	09 d0                	or     eax,edx
c0001add:	a3 c0 87 02 c0       	mov    ds:0xc00287c0,eax
c0001ae2:	eb 31                	jmp    c0001b15 <dlmallopt+0x85>
c0001ae4:	89 1d 04 8b 02 c0    	mov    DWORD PTR ds:0xc0028b04,ebx
c0001aea:	eb 06                	jmp    c0001af2 <dlmallopt+0x62>
c0001aec:	89 1d 08 8b 02 c0    	mov    DWORD PTR ds:0xc0028b08,ebx
c0001af2:	be 01 00 00 00       	mov    esi,0x1
c0001af7:	eb 1c                	jmp    c0001b15 <dlmallopt+0x85>
c0001af9:	89 1d 0c 8b 02 c0    	mov    DWORD PTR ds:0xc0028b0c,ebx
c0001aff:	eb f1                	jmp    c0001af2 <dlmallopt+0x62>
c0001b01:	31 f6                	xor    esi,esi
c0001b03:	85 db                	test   ebx,ebx
c0001b05:	75 0e                	jne    c0001b15 <dlmallopt+0x85>
c0001b07:	c7 05 14 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028b14,0x0
c0001b11:	eb df                	jmp    c0001af2 <dlmallopt+0x62>
c0001b13:	31 f6                	xor    esi,esi
c0001b15:	89 f0                	mov    eax,esi
c0001b17:	5b                   	pop    ebx
c0001b18:	5e                   	pop    esi
c0001b19:	c3                   	ret    

c0001b1a <disk_status>:
c0001b1a:	31 c0                	xor    eax,eax
c0001b1c:	c3                   	ret    

c0001b1d <disk_initialize>:
c0001b1d:	31 c0                	xor    eax,eax
c0001b1f:	c3                   	ret    

c0001b20 <disk_read>:
c0001b20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b25:	0f b6 04 85 80 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d80]
c0001b2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b31:	e9 76 a5 01 00       	jmp    c001c0ac <fatWrapperReadDisk>

c0001b36 <disk_write>:
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 80 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d80]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 a8 a5 01 00       	jmp    c001c0f4 <fatWrapperWriteDisk>

c0001b4c <disk_ioctl>:
c0001b4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b55:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b5a:	0f b6 04 85 80 a2 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5d80]
c0001b62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b66:	e9 d1 a5 01 00       	jmp    c001c13c <fatWrapperIoctl>

c0001b6b <ld_word>:
c0001b6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_dword>:
c0001b78:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b7c:	89 d1                	mov    ecx,edx
c0001b7e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b82:	c1 e1 08             	shl    ecx,0x8
c0001b85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b88:	09 ca                	or     edx,ecx
c0001b8a:	c1 e2 08             	shl    edx,0x8
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	c3                   	ret    

c0001b90 <ld_qword>:
c0001b90:	57                   	push   edi
c0001b91:	56                   	push   esi
c0001b92:	53                   	push   ebx
c0001b93:	31 db                	xor    ebx,ebx
c0001b95:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b98:	89 df                	mov    edi,ebx
c0001b9a:	89 ce                	mov    esi,ecx
c0001b9c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ba0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba4:	c1 e6 08             	shl    esi,0x8
c0001ba7:	09 f2                	or     edx,esi
c0001ba9:	89 d6                	mov    esi,edx
c0001bab:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001baf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb3:	c1 e6 08             	shl    esi,0x8
c0001bb6:	09 f2                	or     edx,esi
c0001bb8:	89 d6                	mov    esi,edx
c0001bba:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bbe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bc5:	c1 e6 08             	shl    esi,0x8
c0001bc8:	89 fb                	mov    ebx,edi
c0001bca:	09 f2                	or     edx,esi
c0001bcc:	89 d1                	mov    ecx,edx
c0001bce:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bd2:	c1 e1 08             	shl    ecx,0x8
c0001bd5:	89 da                	mov    edx,ebx
c0001bd7:	09 c8                	or     eax,ecx
c0001bd9:	5b                   	pop    ebx
c0001bda:	5e                   	pop    esi
c0001bdb:	5f                   	pop    edi
c0001bdc:	c3                   	ret    

c0001bdd <st_word>:
c0001bdd:	66 89 10             	mov    WORD PTR [eax],dx
c0001be0:	c3                   	ret    

c0001be1 <st_dword>:
c0001be1:	89 10                	mov    DWORD PTR [eax],edx
c0001be3:	c3                   	ret    

c0001be4 <st_qword>:
c0001be4:	89 10                	mov    DWORD PTR [eax],edx
c0001be6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001be9:	c3                   	ret    

c0001bea <mem_cpy>:
c0001bea:	85 c9                	test   ecx,ecx
c0001bec:	74 10                	je     c0001bfe <mem_cpy+0x14>
c0001bee:	57                   	push   edi
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	56                   	push   esi
c0001bf2:	89 c7                	mov    edi,eax
c0001bf4:	89 d6                	mov    esi,edx
c0001bf6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bf7:	39 f9                	cmp    ecx,edi
c0001bf9:	75 fb                	jne    c0001bf6 <mem_cpy+0xc>
c0001bfb:	5e                   	pop    esi
c0001bfc:	5f                   	pop    edi
c0001bfd:	c3                   	ret    
c0001bfe:	c3                   	ret    

c0001bff <mem_set>:
c0001bff:	01 c1                	add    ecx,eax
c0001c01:	40                   	inc    eax
c0001c02:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001c05:	39 c8                	cmp    eax,ecx
c0001c07:	75 f8                	jne    c0001c01 <mem_set+0x2>
c0001c09:	c3                   	ret    

c0001c0a <mem_cmp>:
c0001c0a:	57                   	push   edi
c0001c0b:	56                   	push   esi
c0001c0c:	89 c6                	mov    esi,eax
c0001c0e:	53                   	push   ebx
c0001c0f:	46                   	inc    esi
c0001c10:	42                   	inc    edx
c0001c11:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c15:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c19:	29 fb                	sub    ebx,edi
c0001c1b:	89 cf                	mov    edi,ecx
c0001c1d:	29 f7                	sub    edi,esi
c0001c1f:	01 c7                	add    edi,eax
c0001c21:	74 04                	je     c0001c27 <mem_cmp+0x1d>
c0001c23:	85 db                	test   ebx,ebx
c0001c25:	74 e8                	je     c0001c0f <mem_cmp+0x5>
c0001c27:	89 d8                	mov    eax,ebx
c0001c29:	5b                   	pop    ebx
c0001c2a:	5e                   	pop    esi
c0001c2b:	5f                   	pop    edi
c0001c2c:	c3                   	ret    

c0001c2d <chk_chr>:
c0001c2d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c30:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c33:	74 07                	je     c0001c3c <chk_chr+0xf>
c0001c35:	39 d1                	cmp    ecx,edx
c0001c37:	74 03                	je     c0001c3c <chk_chr+0xf>
c0001c39:	40                   	inc    eax
c0001c3a:	eb f1                	jmp    c0001c2d <chk_chr>
c0001c3c:	89 c8                	mov    eax,ecx
c0001c3e:	c3                   	ret    

c0001c3f <dbc_1st>:
c0001c3f:	31 c0                	xor    eax,eax
c0001c41:	c3                   	ret    

c0001c42 <dbc_2nd>:
c0001c42:	31 c0                	xor    eax,eax
c0001c44:	c3                   	ret    

c0001c45 <tchar2uni>:
c0001c45:	57                   	push   edi
c0001c46:	89 c7                	mov    edi,eax
c0001c48:	56                   	push   esi
c0001c49:	53                   	push   ebx
c0001c4a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c4c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c4e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c51:	84 c9                	test   cl,cl
c0001c53:	78 0a                	js     c0001c5f <tchar2uni+0x1a>
c0001c55:	0f b6 d1             	movzx  edx,cl
c0001c58:	89 f3                	mov    ebx,esi
c0001c5a:	e9 9f 00 00 00       	jmp    c0001cfe <tchar2uni+0xb9>
c0001c5f:	88 ca                	mov    dl,cl
c0001c61:	83 e2 e0             	and    edx,0xffffffe0
c0001c64:	80 fa c0             	cmp    dl,0xc0
c0001c67:	75 0c                	jne    c0001c75 <tchar2uni+0x30>
c0001c69:	89 ca                	mov    edx,ecx
c0001c6b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c70:	83 e2 1f             	and    edx,0x1f
c0001c73:	eb 2e                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c75:	88 ca                	mov    dl,cl
c0001c77:	83 e2 f0             	and    edx,0xfffffff0
c0001c7a:	80 fa e0             	cmp    dl,0xe0
c0001c7d:	75 0c                	jne    c0001c8b <tchar2uni+0x46>
c0001c7f:	89 ca                	mov    edx,ecx
c0001c81:	b9 02 00 00 00       	mov    ecx,0x2
c0001c86:	83 e2 0f             	and    edx,0xf
c0001c89:	eb 18                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c8b:	88 ca                	mov    dl,cl
c0001c8d:	83 e2 f8             	and    edx,0xfffffff8
c0001c90:	88 d0                	mov    al,dl
c0001c92:	83 ca ff             	or     edx,0xffffffff
c0001c95:	3c f0                	cmp    al,0xf0
c0001c97:	75 6c                	jne    c0001d05 <tchar2uni+0xc0>
c0001c99:	89 ca                	mov    edx,ecx
c0001c9b:	b9 03 00 00 00       	mov    ecx,0x3
c0001ca0:	83 e2 07             	and    edx,0x7
c0001ca3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ca7:	46                   	inc    esi
c0001ca8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001cab:	88 c8                	mov    al,cl
c0001cad:	83 e0 c0             	and    eax,0xffffffc0
c0001cb0:	3c 80                	cmp    al,0x80
c0001cb2:	75 4e                	jne    c0001d02 <tchar2uni+0xbd>
c0001cb4:	c1 e2 06             	shl    edx,0x6
c0001cb7:	83 e1 3f             	and    ecx,0x3f
c0001cba:	09 ca                	or     edx,ecx
c0001cbc:	39 de                	cmp    esi,ebx
c0001cbe:	75 e7                	jne    c0001ca7 <tchar2uni+0x62>
c0001cc0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cc3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cc9:	77 37                	ja     c0001d02 <tchar2uni+0xbd>
c0001ccb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cd1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cd7:	76 29                	jbe    c0001d02 <tchar2uni+0xbd>
c0001cd9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cdf:	76 1d                	jbe    c0001cfe <tchar2uni+0xb9>
c0001ce1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ce7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001ced:	c1 e1 06             	shl    ecx,0x6
c0001cf0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cf6:	09 ca                	or     edx,ecx
c0001cf8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cfe:	89 1f                	mov    DWORD PTR [edi],ebx
c0001d00:	eb 03                	jmp    c0001d05 <tchar2uni+0xc0>
c0001d02:	83 ca ff             	or     edx,0xffffffff
c0001d05:	5b                   	pop    ebx
c0001d06:	89 d0                	mov    eax,edx
c0001d08:	5e                   	pop    esi
c0001d09:	5f                   	pop    edi
c0001d0a:	c3                   	ret    

c0001d0b <put_utf>:
c0001d0b:	53                   	push   ebx
c0001d0c:	83 f8 7f             	cmp    eax,0x7f
c0001d0f:	89 c3                	mov    ebx,eax
c0001d11:	b0 00                	mov    al,0x0
c0001d13:	77 11                	ja     c0001d26 <put_utf+0x1b>
c0001d15:	85 c9                	test   ecx,ecx
c0001d17:	0f 84 e5 00 00 00    	je     c0001e02 <put_utf+0xf7>
c0001d1d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d1f:	b0 01                	mov    al,0x1
c0001d21:	e9 dc 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d2c:	77 23                	ja     c0001d51 <put_utf+0x46>
c0001d2e:	83 f9 01             	cmp    ecx,0x1
c0001d31:	0f 86 cb 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d37:	89 d8                	mov    eax,ebx
c0001d39:	83 e3 3f             	and    ebx,0x3f
c0001d3c:	c1 e8 06             	shr    eax,0x6
c0001d3f:	83 cb 80             	or     ebx,0xffffff80
c0001d42:	83 c8 c0             	or     eax,0xffffffc0
c0001d45:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d48:	88 02                	mov    BYTE PTR [edx],al
c0001d4a:	b0 02                	mov    al,0x2
c0001d4c:	e9 b1 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d51:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d57:	77 40                	ja     c0001d99 <put_utf+0x8e>
c0001d59:	83 f9 02             	cmp    ecx,0x2
c0001d5c:	0f 86 a0 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d62:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d68:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d6e:	0f 86 8e 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d74:	89 d8                	mov    eax,ebx
c0001d76:	c1 e8 0c             	shr    eax,0xc
c0001d79:	83 c8 e0             	or     eax,0xffffffe0
c0001d7c:	88 02                	mov    BYTE PTR [edx],al
c0001d7e:	89 d8                	mov    eax,ebx
c0001d80:	83 e3 3f             	and    ebx,0x3f
c0001d83:	c1 e8 06             	shr    eax,0x6
c0001d86:	83 cb 80             	or     ebx,0xffffff80
c0001d89:	83 e0 3f             	and    eax,0x3f
c0001d8c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d8f:	83 c8 80             	or     eax,0xffffff80
c0001d92:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d95:	b0 03                	mov    al,0x3
c0001d97:	eb 69                	jmp    c0001e02 <put_utf+0xf7>
c0001d99:	83 f9 03             	cmp    ecx,0x3
c0001d9c:	76 64                	jbe    c0001e02 <put_utf+0xf7>
c0001d9e:	89 d9                	mov    ecx,ebx
c0001da0:	0f b7 c3             	movzx  eax,bx
c0001da3:	66 31 c9             	xor    cx,cx
c0001da6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001dac:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001db2:	c1 e9 06             	shr    ecx,0x6
c0001db5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dbb:	77 43                	ja     c0001e00 <put_utf+0xf5>
c0001dbd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dc3:	77 3b                	ja     c0001e00 <put_utf+0xf5>
c0001dc5:	09 cb                	or     ebx,ecx
c0001dc7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	c1 e8 12             	shr    eax,0x12
c0001dd2:	83 c8 f0             	or     eax,0xfffffff0
c0001dd5:	88 02                	mov    BYTE PTR [edx],al
c0001dd7:	89 d8                	mov    eax,ebx
c0001dd9:	c1 e8 0c             	shr    eax,0xc
c0001ddc:	83 e0 3f             	and    eax,0x3f
c0001ddf:	83 c8 80             	or     eax,0xffffff80
c0001de2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001de5:	89 d8                	mov    eax,ebx
c0001de7:	83 e3 3f             	and    ebx,0x3f
c0001dea:	c1 e8 06             	shr    eax,0x6
c0001ded:	83 cb 80             	or     ebx,0xffffff80
c0001df0:	83 e0 3f             	and    eax,0x3f
c0001df3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001df6:	83 c8 80             	or     eax,0xffffff80
c0001df9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dfc:	b0 04                	mov    al,0x4
c0001dfe:	eb 02                	jmp    c0001e02 <put_utf+0xf7>
c0001e00:	31 c0                	xor    eax,eax
c0001e02:	5b                   	pop    ebx
c0001e03:	c3                   	ret    

c0001e04 <clst2sect>:
c0001e04:	89 c1                	mov    ecx,eax
c0001e06:	83 ea 02             	sub    edx,0x2
c0001e09:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001e0c:	83 e8 02             	sub    eax,0x2
c0001e0f:	39 d0                	cmp    eax,edx
c0001e11:	76 0d                	jbe    c0001e20 <clst2sect+0x1c>
c0001e13:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e17:	f7 e2                	mul    edx
c0001e19:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e1c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e1f:	c3                   	ret    
c0001e20:	31 c0                	xor    eax,eax
c0001e22:	31 d2                	xor    edx,edx
c0001e24:	c3                   	ret    

c0001e25 <clmt_clust>:
c0001e25:	57                   	push   edi
c0001e26:	89 cf                	mov    edi,ecx
c0001e28:	56                   	push   esi
c0001e29:	89 d6                	mov    esi,edx
c0001e2b:	53                   	push   ebx
c0001e2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e30:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e33:	89 f2                	mov    edx,esi
c0001e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e37:	c1 ef 09             	shr    edi,0x9
c0001e3a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e3e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e41:	89 f9                	mov    ecx,edi
c0001e43:	31 ff                	xor    edi,edi
c0001e45:	57                   	push   edi
c0001e46:	56                   	push   esi
c0001e47:	51                   	push   ecx
c0001e48:	52                   	push   edx
c0001e49:	e8 52 11 02 00       	call   c0022fa0 <__udivdi3>
c0001e4e:	83 c4 10             	add    esp,0x10
c0001e51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e53:	85 d2                	test   edx,edx
c0001e55:	74 10                	je     c0001e67 <clmt_clust+0x42>
c0001e57:	39 d0                	cmp    eax,edx
c0001e59:	72 07                	jb     c0001e62 <clmt_clust+0x3d>
c0001e5b:	29 d0                	sub    eax,edx
c0001e5d:	83 c3 08             	add    ebx,0x8
c0001e60:	eb ef                	jmp    c0001e51 <clmt_clust+0x2c>
c0001e62:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e65:	89 c2                	mov    edx,eax
c0001e67:	5b                   	pop    ebx
c0001e68:	89 d0                	mov    eax,edx
c0001e6a:	5e                   	pop    esi
c0001e6b:	5f                   	pop    edi
c0001e6c:	c3                   	ret    

c0001e6d <pick_lfn>:
c0001e6d:	55                   	push   ebp
c0001e6e:	57                   	push   edi
c0001e6f:	56                   	push   esi
c0001e70:	89 d6                	mov    esi,edx
c0001e72:	53                   	push   ebx
c0001e73:	89 c3                	mov    ebx,eax
c0001e75:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e78:	e8 ee fc ff ff       	call   c0001b6b <ld_word>
c0001e7d:	66 85 c0             	test   ax,ax
c0001e80:	74 04                	je     c0001e86 <pick_lfn+0x19>
c0001e82:	31 c0                	xor    eax,eax
c0001e84:	eb 5c                	jmp    c0001ee2 <pick_lfn+0x75>
c0001e86:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e89:	bd 01 00 00 00       	mov    ebp,0x1
c0001e8e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e91:	31 ff                	xor    edi,edi
c0001e93:	49                   	dec    ecx
c0001e94:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e97:	0f b6 87 80 40 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdbf80]
c0001e9e:	01 f0                	add    eax,esi
c0001ea0:	e8 c6 fc ff ff       	call   c0001b6b <ld_word>
c0001ea5:	66 85 ed             	test   bp,bp
c0001ea8:	74 11                	je     c0001ebb <pick_lfn+0x4e>
c0001eaa:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001eb0:	77 d0                	ja     c0001e82 <pick_lfn+0x15>
c0001eb2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001eb6:	89 c5                	mov    ebp,eax
c0001eb8:	41                   	inc    ecx
c0001eb9:	eb 04                	jmp    c0001ebf <pick_lfn+0x52>
c0001ebb:	66 40                	inc    ax
c0001ebd:	75 c3                	jne    c0001e82 <pick_lfn+0x15>
c0001ebf:	47                   	inc    edi
c0001ec0:	83 ff 0d             	cmp    edi,0xd
c0001ec3:	75 d2                	jne    c0001e97 <pick_lfn+0x2a>
c0001ec5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ec8:	74 13                	je     c0001edd <pick_lfn+0x70>
c0001eca:	66 85 ed             	test   bp,bp
c0001ecd:	74 0e                	je     c0001edd <pick_lfn+0x70>
c0001ecf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ed5:	77 ab                	ja     c0001e82 <pick_lfn+0x15>
c0001ed7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001edd:	b8 01 00 00 00       	mov    eax,0x1
c0001ee2:	5b                   	pop    ebx
c0001ee3:	5e                   	pop    esi
c0001ee4:	5f                   	pop    edi
c0001ee5:	5d                   	pop    ebp
c0001ee6:	c3                   	ret    

c0001ee7 <put_lfn>:
c0001ee7:	55                   	push   ebp
c0001ee8:	31 ed                	xor    ebp,ebp
c0001eea:	57                   	push   edi
c0001eeb:	89 d7                	mov    edi,edx
c0001eed:	56                   	push   esi
c0001eee:	31 f6                	xor    esi,esi
c0001ef0:	53                   	push   ebx
c0001ef1:	83 ec 08             	sub    esp,0x8
c0001ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ef7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eff:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001f05:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001f08:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f0b:	31 d2                	xor    edx,edx
c0001f0d:	e8 cb fc ff ff       	call   c0001bdd <st_word>
c0001f12:	0f b6 d9             	movzx  ebx,cl
c0001f15:	4b                   	dec    ebx
c0001f16:	6b db 0d             	imul   ebx,ebx,0xd
c0001f19:	66 83 fe ff          	cmp    si,0xffff
c0001f1d:	74 08                	je     c0001f27 <put_lfn+0x40>
c0001f1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f22:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f26:	43                   	inc    ebx
c0001f27:	0f b6 85 80 40 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdbf80]
c0001f2e:	0f b7 d6             	movzx  edx,si
c0001f31:	01 f8                	add    eax,edi
c0001f33:	e8 a5 fc ff ff       	call   c0001bdd <st_word>
c0001f38:	66 85 f6             	test   si,si
c0001f3b:	75 03                	jne    c0001f40 <put_lfn+0x59>
c0001f3d:	83 ce ff             	or     esi,0xffffffff
c0001f40:	45                   	inc    ebp
c0001f41:	83 fd 0d             	cmp    ebp,0xd
c0001f44:	75 d3                	jne    c0001f19 <put_lfn+0x32>
c0001f46:	66 46                	inc    si
c0001f48:	74 0a                	je     c0001f54 <put_lfn+0x6d>
c0001f4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f4d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f52:	75 09                	jne    c0001f5d <put_lfn+0x76>
c0001f54:	88 c8                	mov    al,cl
c0001f56:	83 c8 40             	or     eax,0x40
c0001f59:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f5d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f61:	88 07                	mov    BYTE PTR [edi],al
c0001f63:	83 c4 08             	add    esp,0x8
c0001f66:	5b                   	pop    ebx
c0001f67:	5e                   	pop    esi
c0001f68:	5f                   	pop    edi
c0001f69:	5d                   	pop    ebp
c0001f6a:	c3                   	ret    

c0001f6b <gen_numname>:
c0001f6b:	57                   	push   edi
c0001f6c:	89 cf                	mov    edi,ecx
c0001f6e:	56                   	push   esi
c0001f6f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f74:	53                   	push   ebx
c0001f75:	89 c6                	mov    esi,eax
c0001f77:	83 ec 10             	sub    esp,0x10
c0001f7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f7e:	e8 67 fc ff ff       	call   c0001bea <mem_cpy>
c0001f83:	83 fb 05             	cmp    ebx,0x5
c0001f86:	76 2d                	jbe    c0001fb5 <gen_numname+0x4a>
c0001f88:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f8b:	66 85 c0             	test   ax,ax
c0001f8e:	74 25                	je     c0001fb5 <gen_numname+0x4a>
c0001f90:	83 c7 02             	add    edi,0x2
c0001f93:	ba 10 00 00 00       	mov    edx,0x10
c0001f98:	01 db                	add    ebx,ebx
c0001f9a:	89 c1                	mov    ecx,eax
c0001f9c:	66 d1 e8             	shr    ax,1
c0001f9f:	83 e1 01             	and    ecx,0x1
c0001fa2:	01 cb                	add    ebx,ecx
c0001fa4:	0f ba e3 10          	bt     ebx,0x10
c0001fa8:	73 06                	jae    c0001fb0 <gen_numname+0x45>
c0001faa:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fb0:	4a                   	dec    edx
c0001fb1:	75 e5                	jne    c0001f98 <gen_numname+0x2d>
c0001fb3:	eb d3                	jmp    c0001f88 <gen_numname+0x1d>
c0001fb5:	b8 07 00 00 00       	mov    eax,0x7
c0001fba:	88 d9                	mov    cl,bl
c0001fbc:	83 e1 0f             	and    ecx,0xf
c0001fbf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fc2:	80 fa 39             	cmp    dl,0x39
c0001fc5:	76 03                	jbe    c0001fca <gen_numname+0x5f>
c0001fc7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fca:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fcd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fd1:	89 da                	mov    edx,ebx
c0001fd3:	c1 ea 04             	shr    edx,0x4
c0001fd6:	83 fb 0f             	cmp    ebx,0xf
c0001fd9:	76 06                	jbe    c0001fe1 <gen_numname+0x76>
c0001fdb:	89 c8                	mov    eax,ecx
c0001fdd:	89 d3                	mov    ebx,edx
c0001fdf:	eb d9                	jmp    c0001fba <gen_numname+0x4f>
c0001fe1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fe6:	31 d2                	xor    edx,edx
c0001fe8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001feb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fee:	39 ca                	cmp    edx,ecx
c0001ff0:	73 18                	jae    c000200a <gen_numname+0x9f>
c0001ff2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff5:	3c 20                	cmp    al,0x20
c0001ff7:	74 11                	je     c000200a <gen_numname+0x9f>
c0001ff9:	e8 41 fc ff ff       	call   c0001c3f <dbc_1st>
c0001ffe:	85 c0                	test   eax,eax
c0002000:	74 05                	je     c0002007 <gen_numname+0x9c>
c0002002:	39 d3                	cmp    ebx,edx
c0002004:	74 04                	je     c000200a <gen_numname+0x9f>
c0002006:	42                   	inc    edx
c0002007:	42                   	inc    edx
c0002008:	eb e1                	jmp    c0001feb <gen_numname+0x80>
c000200a:	b0 20                	mov    al,0x20
c000200c:	83 f9 07             	cmp    ecx,0x7
c000200f:	77 05                	ja     c0002016 <gen_numname+0xab>
c0002011:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002015:	41                   	inc    ecx
c0002016:	42                   	inc    edx
c0002017:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000201b:	83 fa 07             	cmp    edx,0x7
c000201e:	76 ea                	jbe    c000200a <gen_numname+0x9f>
c0002020:	83 c4 10             	add    esp,0x10
c0002023:	5b                   	pop    ebx
c0002024:	5e                   	pop    esi
c0002025:	5f                   	pop    edi
c0002026:	c3                   	ret    

c0002027 <sum_sfn>:
c0002027:	31 c9                	xor    ecx,ecx
c0002029:	31 d2                	xor    edx,edx
c000202b:	d0 ca                	ror    dl,1
c000202d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002030:	41                   	inc    ecx
c0002031:	83 f9 0b             	cmp    ecx,0xb
c0002034:	75 f5                	jne    c000202b <sum_sfn+0x4>
c0002036:	88 d0                	mov    al,dl
c0002038:	c3                   	ret    

c0002039 <xdir_sum>:
c0002039:	56                   	push   esi
c000203a:	31 c9                	xor    ecx,ecx
c000203c:	53                   	push   ebx
c000203d:	31 d2                	xor    edx,edx
c000203f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002043:	43                   	inc    ebx
c0002044:	c1 e3 05             	shl    ebx,0x5
c0002047:	83 fa 02             	cmp    edx,0x2
c000204a:	74 0b                	je     c0002057 <xdir_sum+0x1e>
c000204c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002050:	66 d1 c9             	ror    cx,1
c0002053:	01 f1                	add    ecx,esi
c0002055:	eb 05                	jmp    c000205c <xdir_sum+0x23>
c0002057:	ba 03 00 00 00       	mov    edx,0x3
c000205c:	42                   	inc    edx
c000205d:	39 d3                	cmp    ebx,edx
c000205f:	77 e6                	ja     c0002047 <xdir_sum+0xe>
c0002061:	89 c8                	mov    eax,ecx
c0002063:	5b                   	pop    ebx
c0002064:	5e                   	pop    esi
c0002065:	c3                   	ret    

c0002066 <xsum32>:
c0002066:	d1 ca                	ror    edx,1
c0002068:	0f b6 c0             	movzx  eax,al
c000206b:	01 d0                	add    eax,edx
c000206d:	c3                   	ret    

c000206e <get_xfileinfo>:
c000206e:	55                   	push   ebp
c000206f:	31 c9                	xor    ecx,ecx
c0002071:	57                   	push   edi
c0002072:	bd 40 00 00 00       	mov    ebp,0x40
c0002077:	56                   	push   esi
c0002078:	31 ff                	xor    edi,edi
c000207a:	53                   	push   ebx
c000207b:	89 c6                	mov    esi,eax
c000207d:	83 ec 0c             	sub    esp,0xc
c0002080:	89 d3                	mov    ebx,edx
c0002082:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002089:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000208d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002090:	76 6d                	jbe    c00020ff <get_xfileinfo+0x91>
c0002092:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002098:	76 0b                	jbe    c00020a5 <get_xfileinfo+0x37>
c000209a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000209e:	bf 01 00 00 00       	mov    edi,0x1
c00020a3:	eb 63                	jmp    c0002108 <get_xfileinfo+0x9a>
c00020a5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00020ab:	75 03                	jne    c00020b0 <get_xfileinfo+0x42>
c00020ad:	83 c5 02             	add    ebp,0x2
c00020b0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020b3:	83 c5 02             	add    ebp,0x2
c00020b6:	e8 b0 fa ff ff       	call   c0001b6b <ld_word>
c00020bb:	ff 04 24             	inc    DWORD PTR [esp]
c00020be:	66 85 c9             	test   cx,cx
c00020c1:	75 0d                	jne    c00020d0 <get_xfileinfo+0x62>
c00020c3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020c9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020ce:	76 2b                	jbe    c00020fb <get_xfileinfo+0x8d>
c00020d0:	c1 e1 10             	shl    ecx,0x10
c00020d3:	ba ff 00 00 00       	mov    edx,0xff
c00020d8:	0f b7 c0             	movzx  eax,ax
c00020db:	29 fa                	sub    edx,edi
c00020dd:	09 c8                	or     eax,ecx
c00020df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020e3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020eb:	e8 1b fc ff ff       	call   c0001d0b <put_utf>
c00020f0:	84 c0                	test   al,al
c00020f2:	74 a6                	je     c000209a <get_xfileinfo+0x2c>
c00020f4:	0f b6 c0             	movzx  eax,al
c00020f7:	01 c7                	add    edi,eax
c00020f9:	31 c0                	xor    eax,eax
c00020fb:	89 c1                	mov    ecx,eax
c00020fd:	eb 8a                	jmp    c0002089 <get_xfileinfo+0x1b>
c00020ff:	85 ff                	test   edi,edi
c0002101:	74 97                	je     c000209a <get_xfileinfo+0x2c>
c0002103:	66 85 c9             	test   cx,cx
c0002106:	75 92                	jne    c000209a <get_xfileinfo+0x2c>
c0002108:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000210d:	31 c0                	xor    eax,eax
c000210f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002113:	31 d2                	xor    edx,edx
c0002115:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002118:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000211b:	80 e1 10             	and    cl,0x10
c000211e:	75 08                	jne    c0002128 <get_xfileinfo+0xba>
c0002120:	8d 46 38             	lea    eax,[esi+0x38]
c0002123:	e8 68 fa ff ff       	call   c0001b90 <ld_qword>
c0002128:	89 03                	mov    DWORD PTR [ebx],eax
c000212a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000212d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002130:	e8 36 fa ff ff       	call   c0001b6b <ld_word>
c0002135:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002139:	8d 46 0e             	lea    eax,[esi+0xe]
c000213c:	e8 2a fa ff ff       	call   c0001b6b <ld_word>
c0002141:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002145:	83 c4 0c             	add    esp,0xc
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	5f                   	pop    edi
c000214b:	5d                   	pop    ebp
c000214c:	c3                   	ret    

c000214d <get_ldnumber>:
c000214d:	8b 10                	mov    edx,DWORD PTR [eax]
c000214f:	85 d2                	test   edx,edx
c0002151:	74 14                	je     c0002167 <get_ldnumber+0x1a>
c0002153:	56                   	push   esi
c0002154:	53                   	push   ebx
c0002155:	89 d3                	mov    ebx,edx
c0002157:	43                   	inc    ebx
c0002158:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215b:	80 f9 1f             	cmp    cl,0x1f
c000215e:	76 0d                	jbe    c000216d <get_ldnumber+0x20>
c0002160:	80 f9 3a             	cmp    cl,0x3a
c0002163:	75 f2                	jne    c0002157 <get_ldnumber+0xa>
c0002165:	eb 0a                	jmp    c0002171 <get_ldnumber+0x24>
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	89 c8                	mov    eax,ecx
c000216c:	c3                   	ret    
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	eb 24                	jmp    c0002195 <get_ldnumber+0x48>
c0002171:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002174:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002177:	80 f9 09             	cmp    cl,0x9
c000217a:	77 16                	ja     c0002192 <get_ldnumber+0x45>
c000217c:	83 c2 02             	add    edx,0x2
c000217f:	83 c9 ff             	or     ecx,0xffffffff
c0002182:	39 d3                	cmp    ebx,edx
c0002184:	75 0f                	jne    c0002195 <get_ldnumber+0x48>
c0002186:	89 f2                	mov    edx,esi
c0002188:	89 18                	mov    DWORD PTR [eax],ebx
c000218a:	0f be ca             	movsx  ecx,dl
c000218d:	83 e9 30             	sub    ecx,0x30
c0002190:	eb 03                	jmp    c0002195 <get_ldnumber+0x48>
c0002192:	83 c9 ff             	or     ecx,0xffffffff
c0002195:	89 c8                	mov    eax,ecx
c0002197:	5b                   	pop    ebx
c0002198:	5e                   	pop    esi
c0002199:	c3                   	ret    

c000219a <crc32>:
c000219a:	56                   	push   esi
c000219b:	89 d6                	mov    esi,edx
c000219d:	53                   	push   ebx
c000219e:	b2 01                	mov    dl,0x1
c00021a0:	bb 08 00 00 00       	mov    ebx,0x8
c00021a5:	89 f1                	mov    ecx,esi
c00021a7:	84 d1                	test   cl,dl
c00021a9:	0f 95 c1             	setne  cl
c00021ac:	0f b6 c9             	movzx  ecx,cl
c00021af:	31 c1                	xor    ecx,eax
c00021b1:	89 c8                	mov    eax,ecx
c00021b3:	d1 e8                	shr    eax,1
c00021b5:	80 e1 01             	and    cl,0x1
c00021b8:	74 05                	je     c00021bf <crc32+0x25>
c00021ba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021bf:	d1 e2                	shl    edx,1
c00021c1:	4b                   	dec    ebx
c00021c2:	75 e1                	jne    c00021a5 <crc32+0xb>
c00021c4:	5b                   	pop    ebx
c00021c5:	5e                   	pop    esi
c00021c6:	c3                   	ret    

c00021c7 <test_gpt_header>:
c00021c7:	55                   	push   ebp
c00021c8:	b9 10 00 00 00       	mov    ecx,0x10
c00021cd:	57                   	push   edi
c00021ce:	ba 80 3f 02 c0       	mov    edx,0xc0023f80
c00021d3:	56                   	push   esi
c00021d4:	31 ff                	xor    edi,edi
c00021d6:	53                   	push   ebx
c00021d7:	89 c3                	mov    ebx,eax
c00021d9:	e8 2c fa ff ff       	call   c0001c0a <mem_cmp>
c00021de:	85 c0                	test   eax,eax
c00021e0:	75 55                	jne    c0002237 <test_gpt_header+0x70>
c00021e2:	89 c7                	mov    edi,eax
c00021e4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021e9:	83 ce ff             	or     esi,0xffffffff
c00021ec:	31 d2                	xor    edx,edx
c00021ee:	83 fd 03             	cmp    ebp,0x3
c00021f1:	76 05                	jbe    c00021f8 <test_gpt_header+0x31>
c00021f3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021f8:	89 f0                	mov    eax,esi
c00021fa:	45                   	inc    ebp
c00021fb:	e8 9a ff ff ff       	call   c000219a <crc32>
c0002200:	83 fd 4c             	cmp    ebp,0x4c
c0002203:	89 c6                	mov    esi,eax
c0002205:	75 e5                	jne    c00021ec <test_gpt_header+0x25>
c0002207:	8d 43 10             	lea    eax,[ebx+0x10]
c000220a:	f7 d6                	not    esi
c000220c:	e8 67 f9 ff ff       	call   c0001b78 <ld_dword>
c0002211:	39 c6                	cmp    esi,eax
c0002213:	75 22                	jne    c0002237 <test_gpt_header+0x70>
c0002215:	8d 43 54             	lea    eax,[ebx+0x54]
c0002218:	e8 5b f9 ff ff       	call   c0001b78 <ld_dword>
c000221d:	83 c0 80             	add    eax,0xffffff80
c0002220:	75 15                	jne    c0002237 <test_gpt_header+0x70>
c0002222:	8d 43 50             	lea    eax,[ebx+0x50]
c0002225:	e8 4e f9 ff ff       	call   c0001b78 <ld_dword>
c000222a:	3d 80 00 00 00       	cmp    eax,0x80
c000222f:	0f 96 c0             	setbe  al
c0002232:	0f b6 c0             	movzx  eax,al
c0002235:	89 c7                	mov    edi,eax
c0002237:	5b                   	pop    ebx
c0002238:	89 f8                	mov    eax,edi
c000223a:	5e                   	pop    esi
c000223b:	5f                   	pop    edi
c000223c:	5d                   	pop    ebp
c000223d:	c3                   	ret    

c000223e <make_rand>:
c000223e:	56                   	push   esi
c000223f:	85 c0                	test   eax,eax
c0002241:	53                   	push   ebx
c0002242:	75 05                	jne    c0002249 <make_rand+0xb>
c0002244:	b8 01 00 00 00       	mov    eax,0x1
c0002249:	01 d1                	add    ecx,edx
c000224b:	bb 08 00 00 00       	mov    ebx,0x8
c0002250:	89 c6                	mov    esi,eax
c0002252:	d1 e8                	shr    eax,1
c0002254:	83 e6 01             	and    esi,0x1
c0002257:	85 f6                	test   esi,esi
c0002259:	74 05                	je     c0002260 <make_rand+0x22>
c000225b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002260:	4b                   	dec    ebx
c0002261:	75 ed                	jne    c0002250 <make_rand+0x12>
c0002263:	42                   	inc    edx
c0002264:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002267:	39 ca                	cmp    edx,ecx
c0002269:	75 e0                	jne    c000224b <make_rand+0xd>
c000226b:	5b                   	pop    ebx
c000226c:	5e                   	pop    esi
c000226d:	c3                   	ret    

c000226e <validate>:
c000226e:	56                   	push   esi
c000226f:	53                   	push   ebx
c0002270:	89 d6                	mov    esi,edx
c0002272:	51                   	push   ecx
c0002273:	85 c0                	test   eax,eax
c0002275:	75 09                	jne    c0002280 <validate+0x12>
c0002277:	b8 09 00 00 00       	mov    eax,0x9
c000227c:	31 c9                	xor    ecx,ecx
c000227e:	eb 2f                	jmp    c00022af <validate+0x41>
c0002280:	89 c3                	mov    ebx,eax
c0002282:	8b 00                	mov    eax,DWORD PTR [eax]
c0002284:	85 c0                	test   eax,eax
c0002286:	74 ef                	je     c0002277 <validate+0x9>
c0002288:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000228b:	74 ea                	je     c0002277 <validate+0x9>
c000228d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002291:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002295:	75 e0                	jne    c0002277 <validate+0x9>
c0002297:	83 ec 0c             	sub    esp,0xc
c000229a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000229e:	50                   	push   eax
c000229f:	e8 76 f8 ff ff       	call   c0001b1a <disk_status>
c00022a4:	83 c4 10             	add    esp,0x10
c00022a7:	a8 01                	test   al,0x1
c00022a9:	75 cc                	jne    c0002277 <validate+0x9>
c00022ab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022ad:	31 c0                	xor    eax,eax
c00022af:	89 0e                	mov    DWORD PTR [esi],ecx
c00022b1:	5a                   	pop    edx
c00022b2:	5b                   	pop    ebx
c00022b3:	5e                   	pop    esi
c00022b4:	c3                   	ret    

c00022b5 <sync_window>:
c00022b5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022b9:	0f 84 85 00 00 00    	je     c0002344 <sync_window+0x8f>
c00022bf:	55                   	push   ebp
c00022c0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022c3:	57                   	push   edi
c00022c4:	56                   	push   esi
c00022c5:	53                   	push   ebx
c00022c6:	89 c3                	mov    ebx,eax
c00022c8:	83 ec 28             	sub    esp,0x28
c00022cb:	6a 01                	push   0x1
c00022cd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022d0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022d3:	55                   	push   ebp
c00022d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022d8:	50                   	push   eax
c00022d9:	e8 58 f8 ff ff       	call   c0001b36 <disk_write>
c00022de:	83 c4 20             	add    esp,0x20
c00022e1:	ba 01 00 00 00       	mov    edx,0x1
c00022e6:	85 c0                	test   eax,eax
c00022e8:	75 50                	jne    c000233a <sync_window+0x85>
c00022ea:	31 ff                	xor    edi,edi
c00022ec:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022f7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022fa:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022fd:	89 c6                	mov    esi,eax
c00022ff:	89 d7                	mov    edi,edx
c0002301:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002304:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002308:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000230b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000230f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002313:	73 23                	jae    c0002338 <sync_window+0x83>
c0002315:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002319:	75 1d                	jne    c0002338 <sync_window+0x83>
c000231b:	83 ec 0c             	sub    esp,0xc
c000231e:	6a 01                	push   0x1
c0002320:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002324:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002328:	52                   	push   edx
c0002329:	50                   	push   eax
c000232a:	55                   	push   ebp
c000232b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000232f:	50                   	push   eax
c0002330:	e8 01 f8 ff ff       	call   c0001b36 <disk_write>
c0002335:	83 c4 20             	add    esp,0x20
c0002338:	31 d2                	xor    edx,edx
c000233a:	83 c4 1c             	add    esp,0x1c
c000233d:	89 d0                	mov    eax,edx
c000233f:	5b                   	pop    ebx
c0002340:	5e                   	pop    esi
c0002341:	5f                   	pop    edi
c0002342:	5d                   	pop    ebp
c0002343:	c3                   	ret    
c0002344:	31 d2                	xor    edx,edx
c0002346:	89 d0                	mov    eax,edx
c0002348:	c3                   	ret    

c0002349 <move_window>:
c0002349:	56                   	push   esi
c000234a:	53                   	push   ebx
c000234b:	89 c3                	mov    ebx,eax
c000234d:	83 ec 14             	sub    esp,0x14
c0002350:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002353:	75 07                	jne    c000235c <move_window+0x13>
c0002355:	31 f6                	xor    esi,esi
c0002357:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000235a:	74 59                	je     c00023b5 <move_window+0x6c>
c000235c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002360:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002364:	89 d8                	mov    eax,ebx
c0002366:	e8 4a ff ff ff       	call   c00022b5 <sync_window>
c000236b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000236f:	89 c6                	mov    esi,eax
c0002371:	85 c0                	test   eax,eax
c0002373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002377:	75 3c                	jne    c00023b5 <move_window+0x6c>
c0002379:	83 ec 0c             	sub    esp,0xc
c000237c:	8d 43 54             	lea    eax,[ebx+0x54]
c000237f:	6a 01                	push   0x1
c0002381:	51                   	push   ecx
c0002382:	52                   	push   edx
c0002383:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002387:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000238b:	50                   	push   eax
c000238c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002390:	50                   	push   eax
c0002391:	e8 8a f7 ff ff       	call   c0001b20 <disk_read>
c0002396:	83 c4 20             	add    esp,0x20
c0002399:	85 c0                	test   eax,eax
c000239b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000239f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00023a3:	74 0a                	je     c00023af <move_window+0x66>
c00023a5:	83 ca ff             	or     edx,0xffffffff
c00023a8:	be 01 00 00 00       	mov    esi,0x1
c00023ad:	89 d1                	mov    ecx,edx
c00023af:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023b2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023b5:	89 f0                	mov    eax,esi
c00023b7:	83 c4 14             	add    esp,0x14
c00023ba:	5b                   	pop    ebx
c00023bb:	5e                   	pop    esi
c00023bc:	c3                   	ret    

c00023bd <check_fs>:
c00023bd:	53                   	push   ebx
c00023be:	89 c3                	mov    ebx,eax
c00023c0:	83 ec 08             	sub    esp,0x8
c00023c3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023ce:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023d5:	e8 6f ff ff ff       	call   c0002349 <move_window>
c00023da:	ba 04 00 00 00       	mov    edx,0x4
c00023df:	85 c0                	test   eax,eax
c00023e1:	0f 85 89 00 00 00    	jne    c0002470 <check_fs+0xb3>
c00023e7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023ed:	e8 79 f7 ff ff       	call   c0001b6b <ld_word>
c00023f2:	ba 03 00 00 00       	mov    edx,0x3
c00023f7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023fb:	75 73                	jne    c0002470 <check_fs+0xb3>
c00023fd:	ba a0 40 02 c0       	mov    edx,0xc00240a0
c0002402:	8d 43 54             	lea    eax,[ebx+0x54]
c0002405:	b9 0b 00 00 00       	mov    ecx,0xb
c000240a:	e8 fb f7 ff ff       	call   c0001c0a <mem_cmp>
c000240f:	ba 01 00 00 00       	mov    edx,0x1
c0002414:	85 c0                	test   eax,eax
c0002416:	74 58                	je     c0002470 <check_fs+0xb3>
c0002418:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000241b:	8d 50 18             	lea    edx,[eax+0x18]
c000241e:	80 fa 01             	cmp    dl,0x1
c0002421:	76 09                	jbe    c000242c <check_fs+0x6f>
c0002423:	ba 02 00 00 00       	mov    edx,0x2
c0002428:	3c eb                	cmp    al,0xeb
c000242a:	75 44                	jne    c0002470 <check_fs+0xb3>
c000242c:	ba b4 6f 02 c0       	mov    edx,0xc0026fb4
c0002431:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002437:	b9 03 00 00 00       	mov    ecx,0x3
c000243c:	e8 c9 f7 ff ff       	call   c0001c0a <mem_cmp>
c0002441:	31 d2                	xor    edx,edx
c0002443:	85 c0                	test   eax,eax
c0002445:	74 29                	je     c0002470 <check_fs+0xb3>
c0002447:	ba ac 40 02 c0       	mov    edx,0xc00240ac
c000244c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002452:	b9 05 00 00 00       	mov    ecx,0x5
c0002457:	e8 ae f7 ff ff       	call   c0001c0a <mem_cmp>
c000245c:	31 d2                	xor    edx,edx
c000245e:	85 c0                	test   eax,eax
c0002460:	74 0e                	je     c0002470 <check_fs+0xb3>
c0002462:	31 d2                	xor    edx,edx
c0002464:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000246b:	0f 95 c2             	setne  dl
c000246e:	01 d2                	add    edx,edx
c0002470:	89 d0                	mov    eax,edx
c0002472:	83 c4 08             	add    esp,0x8
c0002475:	5b                   	pop    ebx
c0002476:	c3                   	ret    

c0002477 <find_volume>:
c0002477:	55                   	push   ebp
c0002478:	31 c9                	xor    ecx,ecx
c000247a:	57                   	push   edi
c000247b:	56                   	push   esi
c000247c:	89 d6                	mov    esi,edx
c000247e:	53                   	push   ebx
c000247f:	31 d2                	xor    edx,edx
c0002481:	83 ec 3c             	sub    esp,0x3c
c0002484:	89 c3                	mov    ebx,eax
c0002486:	e8 32 ff ff ff       	call   c00023bd <check_fs>
c000248b:	83 f8 02             	cmp    eax,0x2
c000248e:	74 0e                	je     c000249e <find_volume+0x27>
c0002490:	0f 87 5d 01 00 00    	ja     c00025f3 <find_volume+0x17c>
c0002496:	85 f6                	test   esi,esi
c0002498:	0f 84 55 01 00 00    	je     c00025f3 <find_volume+0x17c>
c000249e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00024a5:	0f 85 dd 00 00 00    	jne    c0002588 <find_volume+0x111>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	ba 01 00 00 00       	mov    edx,0x1
c00024b2:	89 d8                	mov    eax,ebx
c00024b4:	e8 90 fe ff ff       	call   c0002349 <move_window>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	74 0a                	je     c00024c7 <find_volume+0x50>
c00024bd:	b8 04 00 00 00       	mov    eax,0x4
c00024c2:	e9 2c 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024c7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ca:	89 e8                	mov    eax,ebp
c00024cc:	e8 f6 fc ff ff       	call   c00021c7 <test_gpt_header>
c00024d1:	85 c0                	test   eax,eax
c00024d3:	75 0a                	jne    c00024df <find_volume+0x68>
c00024d5:	b8 03 00 00 00       	mov    eax,0x3
c00024da:	e9 14 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024df:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024e5:	e8 8e f6 ff ff       	call   c0001b78 <ld_dword>
c00024ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024ee:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024f4:	e8 97 f6 ff ff       	call   c0001b90 <ld_qword>
c00024f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002501:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002505:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002509:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002511:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002515:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002519:	74 ba                	je     c00024d5 <find_volume+0x5e>
c000251b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000251f:	31 c9                	xor    ecx,ecx
c0002521:	c1 e7 07             	shl    edi,0x7
c0002524:	89 d8                	mov    eax,ebx
c0002526:	89 fa                	mov    edx,edi
c0002528:	c1 ea 09             	shr    edx,0x9
c000252b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000252f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002533:	e8 11 fe ff ff       	call   c0002349 <move_window>
c0002538:	85 c0                	test   eax,eax
c000253a:	75 81                	jne    c00024bd <find_volume+0x46>
c000253c:	81 e7 80 01 00 00    	and    edi,0x180
c0002542:	b9 10 00 00 00       	mov    ecx,0x10
c0002547:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000254b:	ba 90 40 02 c0       	mov    edx,0xc0024090
c0002550:	e8 b5 f6 ff ff       	call   c0001c0a <mem_cmp>
c0002555:	85 c0                	test   eax,eax
c0002557:	75 29                	jne    c0002582 <find_volume+0x10b>
c0002559:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000255d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002561:	e8 2a f6 ff ff       	call   c0001b90 <ld_qword>
c0002566:	89 d1                	mov    ecx,edx
c0002568:	89 c2                	mov    edx,eax
c000256a:	89 d8                	mov    eax,ebx
c000256c:	e8 4c fe ff ff       	call   c00023bd <check_fs>
c0002571:	85 f6                	test   esi,esi
c0002573:	75 07                	jne    c000257c <find_volume+0x105>
c0002575:	83 f8 01             	cmp    eax,0x1
c0002578:	77 08                	ja     c0002582 <find_volume+0x10b>
c000257a:	eb 77                	jmp    c00025f3 <find_volume+0x17c>
c000257c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002580:	74 71                	je     c00025f3 <find_volume+0x17c>
c0002582:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002586:	eb 89                	jmp    c0002511 <find_volume+0x9a>
c0002588:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000258c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002592:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000259c:	89 cd                	mov    ebp,ecx
c000259e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00025a2:	89 f8                	mov    eax,edi
c00025a4:	83 c7 10             	add    edi,0x10
c00025a7:	e8 cc f5 ff ff       	call   c0001b78 <ld_dword>
c00025ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025b0:	89 01                	mov    DWORD PTR [ecx],eax
c00025b2:	83 c1 04             	add    ecx,0x4
c00025b5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025b9:	75 e3                	jne    c000259e <find_volume+0x127>
c00025bb:	31 ff                	xor    edi,edi
c00025bd:	85 f6                	test   esi,esi
c00025bf:	74 03                	je     c00025c4 <find_volume+0x14d>
c00025c1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025c4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025c8:	85 d2                	test   edx,edx
c00025ca:	74 14                	je     c00025e0 <find_volume+0x169>
c00025cc:	31 c9                	xor    ecx,ecx
c00025ce:	89 d8                	mov    eax,ebx
c00025d0:	e8 e8 fd ff ff       	call   c00023bd <check_fs>
c00025d5:	83 f8 01             	cmp    eax,0x1
c00025d8:	76 19                	jbe    c00025f3 <find_volume+0x17c>
c00025da:	85 f6                	test   esi,esi
c00025dc:	74 0f                	je     c00025ed <find_volume+0x176>
c00025de:	eb 13                	jmp    c00025f3 <find_volume+0x17c>
c00025e0:	85 f6                	test   esi,esi
c00025e2:	0f 85 ed fe ff ff    	jne    c00024d5 <find_volume+0x5e>
c00025e8:	b8 03 00 00 00       	mov    eax,0x3
c00025ed:	47                   	inc    edi
c00025ee:	83 ff 03             	cmp    edi,0x3
c00025f1:	76 d1                	jbe    c00025c4 <find_volume+0x14d>
c00025f3:	83 c4 3c             	add    esp,0x3c
c00025f6:	5b                   	pop    ebx
c00025f7:	5e                   	pop    esi
c00025f8:	5f                   	pop    edi
c00025f9:	5d                   	pop    ebp
c00025fa:	c3                   	ret    

c00025fb <mount_volume>:
c00025fb:	55                   	push   ebp
c00025fc:	57                   	push   edi
c00025fd:	89 cf                	mov    edi,ecx
c00025ff:	56                   	push   esi
c0002600:	53                   	push   ebx
c0002601:	bb 0b 00 00 00       	mov    ebx,0xb
c0002606:	83 ec 3c             	sub    esp,0x3c
c0002609:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000260f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002613:	e8 35 fb ff ff       	call   c000214d <get_ldnumber>
c0002618:	85 c0                	test   eax,eax
c000261a:	0f 88 3a 05 00 00    	js     c0002b5a <mount_volume+0x55f>
c0002620:	8b 2c 85 60 8b 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd74a0]
c0002627:	89 c6                	mov    esi,eax
c0002629:	bb 0c 00 00 00       	mov    ebx,0xc
c000262e:	85 ed                	test   ebp,ebp
c0002630:	0f 84 24 05 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000263a:	83 e7 fe             	and    edi,0xfffffffe
c000263d:	89 2a                	mov    DWORD PTR [edx],ebp
c000263f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002643:	74 32                	je     c0002677 <mount_volume+0x7c>
c0002645:	83 ec 0c             	sub    esp,0xc
c0002648:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000264c:	50                   	push   eax
c000264d:	e8 c8 f4 ff ff       	call   c0001b1a <disk_status>
c0002652:	83 c4 10             	add    esp,0x10
c0002655:	a8 01                	test   al,0x1
c0002657:	75 1e                	jne    c0002677 <mount_volume+0x7c>
c0002659:	31 db                	xor    ebx,ebx
c000265b:	89 f9                	mov    ecx,edi
c000265d:	84 c9                	test   cl,cl
c000265f:	0f 84 f5 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002665:	a8 04                	test   al,0x4
c0002667:	0f 84 ed 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c000266d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002672:	e9 e3 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c0002677:	83 ec 0c             	sub    esp,0xc
c000267a:	89 f0                	mov    eax,esi
c000267c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002680:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002683:	0f b6 f0             	movzx  esi,al
c0002686:	bb 03 00 00 00       	mov    ebx,0x3
c000268b:	56                   	push   esi
c000268c:	e8 8c f4 ff ff       	call   c0001b1d <disk_initialize>
c0002691:	83 c4 10             	add    esp,0x10
c0002694:	a8 01                	test   al,0x1
c0002696:	0f 85 be 04 00 00    	jne    c0002b5a <mount_volume+0x55f>
c000269c:	89 f9                	mov    ecx,edi
c000269e:	84 c9                	test   cl,cl
c00026a0:	74 04                	je     c00026a6 <mount_volume+0xab>
c00026a2:	a8 04                	test   al,0x4
c00026a4:	75 c7                	jne    c000266d <mount_volume+0x72>
c00026a6:	31 d2                	xor    edx,edx
c00026a8:	89 e8                	mov    eax,ebp
c00026aa:	e8 c8 fd ff ff       	call   c0002477 <find_volume>
c00026af:	83 f8 04             	cmp    eax,0x4
c00026b2:	75 0a                	jne    c00026be <mount_volume+0xc3>
c00026b4:	bb 01 00 00 00       	mov    ebx,0x1
c00026b9:	e9 9c 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026be:	83 f8 01             	cmp    eax,0x1
c00026c1:	76 0a                	jbe    c00026cd <mount_volume+0xd2>
c00026c3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026c8:	e9 8d 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026cd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026d0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026db:	75 17                	jne    c00026f4 <mount_volume+0xf9>
c00026dd:	b8 0b 00 00 00       	mov    eax,0xb
c00026e2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026e7:	75 da                	jne    c00026c3 <mount_volume+0xc8>
c00026e9:	40                   	inc    eax
c00026ea:	83 f8 40             	cmp    eax,0x40
c00026ed:	75 f3                	jne    c00026e2 <mount_volume+0xe7>
c00026ef:	e9 5a 02 00 00       	jmp    c000294e <mount_volume+0x353>
c00026f4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026f7:	e8 6f f4 ff ff       	call   c0001b6b <ld_word>
c00026fc:	66 3d 00 02          	cmp    ax,0x200
c0002700:	75 c1                	jne    c00026c3 <mount_volume+0xc8>
c0002702:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002705:	e8 61 f4 ff ff       	call   c0001b6b <ld_word>
c000270a:	0f b7 c0             	movzx  eax,ax
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	85 c0                	test   eax,eax
c0002713:	75 0c                	jne    c0002721 <mount_volume+0x126>
c0002715:	8d 45 78             	lea    eax,[ebp+0x78]
c0002718:	e8 5b f4 ff ff       	call   c0001b78 <ld_dword>
c000271d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002725:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002728:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000272b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000272f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002732:	48                   	dec    eax
c0002733:	3c 01                	cmp    al,0x1
c0002735:	77 8c                	ja     c00026c3 <mount_volume+0xc8>
c0002737:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000273b:	89 c3                	mov    ebx,eax
c000273d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002741:	66 85 c0             	test   ax,ax
c0002744:	0f 84 79 ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c000274a:	8d 40 ff             	lea    eax,[eax-0x1]
c000274d:	85 d8                	test   eax,ebx
c000274f:	0f 85 6e ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002755:	8d 45 65             	lea    eax,[ebp+0x65]
c0002758:	e8 0e f4 ff ff       	call   c0001b6b <ld_word>
c000275d:	89 c7                	mov    edi,eax
c000275f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002763:	a8 0f                	test   al,0xf
c0002765:	0f 85 58 ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c000276b:	8d 45 67             	lea    eax,[ebp+0x67]
c000276e:	e8 f8 f3 ff ff       	call   c0001b6b <ld_word>
c0002773:	0f b7 f0             	movzx  esi,ax
c0002776:	85 f6                	test   esi,esi
c0002778:	75 0a                	jne    c0002784 <mount_volume+0x189>
c000277a:	8d 45 74             	lea    eax,[ebp+0x74]
c000277d:	e8 f6 f3 ff ff       	call   c0001b78 <ld_dword>
c0002782:	89 c6                	mov    esi,eax
c0002784:	8d 45 62             	lea    eax,[ebp+0x62]
c0002787:	e8 df f3 ff ff       	call   c0001b6b <ld_word>
c000278c:	66 85 c0             	test   ax,ax
c000278f:	0f 84 2e ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002795:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000279a:	0f b7 c8             	movzx  ecx,ax
c000279d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00027a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00027a6:	89 fa                	mov    edx,edi
c00027a8:	66 c1 ea 04          	shr    dx,0x4
c00027ac:	0f b7 d2             	movzx  edx,dx
c00027af:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027ba:	39 c6                	cmp    esi,eax
c00027bc:	0f 82 01 ff ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027c2:	29 c6                	sub    esi,eax
c00027c4:	31 d2                	xor    edx,edx
c00027c6:	89 f0                	mov    eax,esi
c00027c8:	f7 f3                	div    ebx
c00027ca:	39 de                	cmp    esi,ebx
c00027cc:	0f 82 f1 fe ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027d2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027d7:	0f 87 e6 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00027dd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027e2:	0f 86 63 03 00 00    	jbe    c0002b4b <mount_volume+0x550>
c00027e8:	bb 03 00 00 00       	mov    ebx,0x3
c00027ed:	8d 70 02             	lea    esi,[eax+0x2]
c00027f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027f8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027fb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fe:	31 d2                	xor    edx,edx
c0002800:	89 c8                	mov    eax,ecx
c0002802:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002805:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002809:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000280d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002811:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002815:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002818:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000281b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000281f:	31 d2                	xor    edx,edx
c0002821:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002825:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	83 fb 03             	cmp    ebx,0x3
c0002832:	75 2b                	jne    c000285f <mount_volume+0x264>
c0002834:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002837:	e8 2f f3 ff ff       	call   c0001b6b <ld_word>
c000283c:	66 09 c7             	or     di,ax
c000283f:	0f 85 7e fe ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002845:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000284b:	c1 e6 02             	shl    esi,0x2
c000284e:	e8 25 f3 ff ff       	call   c0001b78 <ld_dword>
c0002853:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000285a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000285d:	eb 30                	jmp    c000288f <mount_volume+0x294>
c000285f:	66 85 ff             	test   di,di
c0002862:	0f 84 5b fe ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002868:	31 d2                	xor    edx,edx
c000286a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000286e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002872:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002876:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002879:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000287c:	83 fb 02             	cmp    ebx,0x2
c000287f:	75 04                	jne    c0002885 <mount_volume+0x28a>
c0002881:	01 f6                	add    esi,esi
c0002883:	eb 0a                	jmp    c000288f <mount_volume+0x294>
c0002885:	8d 04 76             	lea    eax,[esi+esi*2]
c0002888:	83 e6 01             	and    esi,0x1
c000288b:	d1 e8                	shr    eax,1
c000288d:	01 c6                	add    esi,eax
c000288f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002895:	c1 ee 09             	shr    esi,0x9
c0002898:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000289c:	0f 87 21 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00028a2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00028a9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028b0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028b4:	83 fb 03             	cmp    ebx,0x3
c00028b7:	75 7a                	jne    c0002933 <mount_volume+0x338>
c00028b9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028bf:	e8 a7 f2 ff ff       	call   c0001b6b <ld_word>
c00028c4:	66 48                	dec    ax
c00028c6:	75 6b                	jne    c0002933 <mount_volume+0x338>
c00028c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028d0:	83 c2 01             	add    edx,0x1
c00028d3:	89 e8                	mov    eax,ebp
c00028d5:	83 d1 00             	adc    ecx,0x0
c00028d8:	e8 6c fa ff ff       	call   c0002349 <move_window>
c00028dd:	85 c0                	test   eax,eax
c00028df:	75 52                	jne    c0002933 <mount_volume+0x338>
c00028e1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028e5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028eb:	e8 7b f2 ff ff       	call   c0001b6b <ld_word>
c00028f0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028f4:	75 3d                	jne    c0002933 <mount_volume+0x338>
c00028f6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028f9:	e8 7a f2 ff ff       	call   c0001b78 <ld_dword>
c00028fe:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002903:	75 2e                	jne    c0002933 <mount_volume+0x338>
c0002905:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000290b:	e8 68 f2 ff ff       	call   c0001b78 <ld_dword>
c0002910:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002915:	75 1c                	jne    c0002933 <mount_volume+0x338>
c0002917:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000291d:	e8 56 f2 ff ff       	call   c0001b78 <ld_dword>
c0002922:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002925:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000292b:	e8 48 f2 ff ff       	call   c0001b78 <ld_dword>
c0002930:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002933:	66 a1 40 8b 02 c0    	mov    ax,ds:0xc0028b40
c0002939:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000293c:	40                   	inc    eax
c000293d:	31 db                	xor    ebx,ebx
c000293f:	66 a3 40 8b 02 c0    	mov    ds:0xc0028b40,ax
c0002945:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002949:	e9 0c 02 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c000294e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002954:	e8 12 f2 ff ff       	call   c0001b6b <ld_word>
c0002959:	66 3d 00 01          	cmp    ax,0x100
c000295d:	0f 85 60 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002963:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000296a:	0f 85 53 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002970:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002976:	e8 15 f2 ff ff       	call   c0001b90 <ld_qword>
c000297b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000297f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002983:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002989:	e8 ea f1 ff ff       	call   c0001b78 <ld_dword>
c000298e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002991:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002997:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000299a:	fe c8                	dec    al
c000299c:	0f 85 21 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c00029a2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00029a9:	bb 01 00 00 00       	mov    ebx,0x1
c00029ae:	d3 e3                	shl    ebx,cl
c00029b0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029b4:	66 85 db             	test   bx,bx
c00029b7:	0f 84 06 fd ff ff    	je     c00026c3 <mount_volume+0xc8>
c00029bd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029c3:	e8 b0 f1 ff ff       	call   c0001b78 <ld_dword>
c00029c8:	89 c6                	mov    esi,eax
c00029ca:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029cf:	0f 87 ee fc ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00029d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d9:	8d 40 02             	lea    eax,[eax+0x2]
c00029dc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029df:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029e6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029e9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029ef:	e8 84 f1 ff ff       	call   c0001b78 <ld_dword>
c00029f4:	31 d2                	xor    edx,edx
c00029f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029fa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002a06:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002a09:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002a0c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a12:	e8 61 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a17:	31 d2                	xor    edx,edx
c0002a19:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a1d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a21:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a25:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a28:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a2b:	0f b7 c3             	movzx  eax,bx
c0002a2e:	31 d2                	xor    edx,edx
c0002a30:	0f af f0             	imul   esi,eax
c0002a33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a37:	89 f0                	mov    eax,esi
c0002a39:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a3d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a41:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a45:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a49:	39 c1                	cmp    ecx,eax
c0002a4b:	89 df                	mov    edi,ebx
c0002a4d:	19 d7                	sbb    edi,edx
c0002a4f:	0f 82 6e fc ff ff    	jb     c00026c3 <mount_volume+0xc8>
c0002a55:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a5b:	31 db                	xor    ebx,ebx
c0002a5d:	e8 16 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a62:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a69:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	75 39                	jne    c0002ab1 <mount_volume+0x4b6>
c0002a78:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a7c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a80:	0f 86 3d fc ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002a86:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a89:	31 ff                	xor    edi,edi
c0002a8b:	89 e8                	mov    eax,ebp
c0002a8d:	e8 72 f3 ff ff       	call   c0001e04 <clst2sect>
c0002a92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a96:	01 c6                	add    esi,eax
c0002a98:	89 e8                	mov    eax,ebp
c0002a9a:	11 d7                	adc    edi,edx
c0002a9c:	89 f2                	mov    edx,esi
c0002a9e:	89 f9                	mov    ecx,edi
c0002aa0:	e8 a4 f8 ff ff       	call   c0002349 <move_window>
c0002aa5:	85 c0                	test   eax,eax
c0002aa7:	0f 85 07 fc ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002aad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ab1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002ab6:	74 0b                	je     c0002ac3 <mount_volume+0x4c8>
c0002ab8:	83 c3 20             	add    ebx,0x20
c0002abb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ac1:	eb b1                	jmp    c0002a74 <mount_volume+0x479>
c0002ac3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ac6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aca:	e8 a9 f0 ff ff       	call   c0001b78 <ld_dword>
c0002acf:	89 c3                	mov    ebx,eax
c0002ad1:	83 f8 01             	cmp    eax,0x1
c0002ad4:	0f 86 e9 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ada:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002add:	0f 86 e0 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ae3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ae6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002aea:	0f af c2             	imul   eax,edx
c0002aed:	31 d2                	xor    edx,edx
c0002aef:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002af2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002af5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002af8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002afb:	31 c9                	xor    ecx,ecx
c0002afd:	89 da                	mov    edx,ebx
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	c1 ea 07             	shr    edx,0x7
c0002b04:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002b07:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002b0a:	e8 3a f8 ff ff       	call   c0002349 <move_window>
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 85 9d fb ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002b17:	89 d8                	mov    eax,ebx
c0002b19:	83 e0 7f             	and    eax,0x7f
c0002b1c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b1f:	e8 54 f0 ff ff       	call   c0001b78 <ld_dword>
c0002b24:	83 f8 ff             	cmp    eax,0xffffffff
c0002b27:	74 0a                	je     c0002b33 <mount_volume+0x538>
c0002b29:	43                   	inc    ebx
c0002b2a:	39 d8                	cmp    eax,ebx
c0002b2c:	74 cd                	je     c0002afb <mount_volume+0x500>
c0002b2e:	e9 90 fb ff ff       	jmp    c00026c3 <mount_volume+0xc8>
c0002b33:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b3a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b41:	bb 04 00 00 00       	mov    ebx,0x4
c0002b46:	e9 e8 fd ff ff       	jmp    c0002933 <mount_volume+0x338>
c0002b4b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b50:	19 db                	sbb    ebx,ebx
c0002b52:	83 c3 02             	add    ebx,0x2
c0002b55:	e9 93 fc ff ff       	jmp    c00027ed <mount_volume+0x1f2>
c0002b5a:	83 c4 3c             	add    esp,0x3c
c0002b5d:	89 d8                	mov    eax,ebx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <find_bitmap>:
c0002b64:	55                   	push   ebp
c0002b65:	57                   	push   edi
c0002b66:	89 c7                	mov    edi,eax
c0002b68:	56                   	push   esi
c0002b69:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b6c:	53                   	push   ebx
c0002b6d:	83 ec 1c             	sub    esp,0x1c
c0002b70:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b73:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b77:	83 e8 02             	sub    eax,0x2
c0002b7a:	39 f0                	cmp    eax,esi
c0002b7c:	77 02                	ja     c0002b80 <find_bitmap+0x1c>
c0002b7e:	31 f6                	xor    esi,esi
c0002b80:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b84:	89 f3                	mov    ebx,esi
c0002b86:	31 ed                	xor    ebp,ebp
c0002b88:	31 c9                	xor    ecx,ecx
c0002b8a:	89 da                	mov    edx,ebx
c0002b8c:	89 f8                	mov    eax,edi
c0002b8e:	c1 ea 0c             	shr    edx,0xc
c0002b91:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b94:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b97:	e8 ad f7 ff ff       	call   c0002349 <move_window>
c0002b9c:	85 c0                	test   eax,eax
c0002b9e:	75 68                	jne    c0002c08 <find_bitmap+0xa4>
c0002ba0:	89 da                	mov    edx,ebx
c0002ba2:	89 d9                	mov    ecx,ebx
c0002ba4:	c1 ea 03             	shr    edx,0x3
c0002ba7:	83 e1 07             	and    ecx,0x7
c0002baa:	b8 01 00 00 00       	mov    eax,0x1
c0002baf:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002bb5:	d3 e0                	shl    eax,cl
c0002bb7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002bba:	83 e9 02             	sub    ecx,0x2
c0002bbd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bc1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bc5:	43                   	inc    ebx
c0002bc6:	21 c1                	and    ecx,eax
c0002bc8:	d1 e0                	shl    eax,1
c0002bca:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bce:	77 09                	ja     c0002bd9 <find_bitmap+0x75>
c0002bd0:	31 db                	xor    ebx,ebx
c0002bd2:	ba 00 02 00 00       	mov    edx,0x200
c0002bd7:	31 c0                	xor    eax,eax
c0002bd9:	84 c9                	test   cl,cl
c0002bdb:	75 10                	jne    c0002bed <find_bitmap+0x89>
c0002bdd:	45                   	inc    ebp
c0002bde:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002be2:	75 0f                	jne    c0002bf3 <find_bitmap+0x8f>
c0002be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002be8:	83 c0 02             	add    eax,0x2
c0002beb:	eb 22                	jmp    c0002c0f <find_bitmap+0xab>
c0002bed:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bf1:	31 ed                	xor    ebp,ebp
c0002bf3:	39 de                	cmp    esi,ebx
c0002bf5:	74 16                	je     c0002c0d <find_bitmap+0xa9>
c0002bf7:	84 c0                	test   al,al
c0002bf9:	75 c6                	jne    c0002bc1 <find_bitmap+0x5d>
c0002bfb:	42                   	inc    edx
c0002bfc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002c02:	77 84                	ja     c0002b88 <find_bitmap+0x24>
c0002c04:	b0 01                	mov    al,0x1
c0002c06:	eb b9                	jmp    c0002bc1 <find_bitmap+0x5d>
c0002c08:	83 c8 ff             	or     eax,0xffffffff
c0002c0b:	eb 02                	jmp    c0002c0f <find_bitmap+0xab>
c0002c0d:	31 c0                	xor    eax,eax
c0002c0f:	83 c4 1c             	add    esp,0x1c
c0002c12:	5b                   	pop    ebx
c0002c13:	5e                   	pop    esi
c0002c14:	5f                   	pop    edi
c0002c15:	5d                   	pop    ebp
c0002c16:	c3                   	ret    

c0002c17 <change_bitmap>:
c0002c17:	55                   	push   ebp
c0002c18:	89 cd                	mov    ebp,ecx
c0002c1a:	57                   	push   edi
c0002c1b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c1e:	56                   	push   esi
c0002c1f:	89 c7                	mov    edi,eax
c0002c21:	53                   	push   ebx
c0002c22:	89 c8                	mov    eax,ecx
c0002c24:	83 ec 1c             	sub    esp,0x1c
c0002c27:	31 d2                	xor    edx,edx
c0002c29:	89 ce                	mov    esi,ecx
c0002c2b:	c1 e8 0c             	shr    eax,0xc
c0002c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c33:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c36:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c39:	c1 ee 03             	shr    esi,0x3
c0002c3c:	83 e1 07             	and    ecx,0x7
c0002c3f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c45:	d3 e3                	shl    ebx,cl
c0002c47:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c4b:	89 c1                	mov    ecx,eax
c0002c4d:	89 d3                	mov    ebx,edx
c0002c4f:	83 c1 01             	add    ecx,0x1
c0002c52:	83 d3 00             	adc    ebx,0x0
c0002c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c59:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c5d:	89 d1                	mov    ecx,edx
c0002c5f:	89 c2                	mov    edx,eax
c0002c61:	89 f8                	mov    eax,edi
c0002c63:	e8 e1 f6 ff ff       	call   c0002349 <move_window>
c0002c68:	89 c1                	mov    ecx,eax
c0002c6a:	85 c0                	test   eax,eax
c0002c6c:	75 48                	jne    c0002cb6 <change_bitmap+0x9f>
c0002c6e:	31 d2                	xor    edx,edx
c0002c70:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c74:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c78:	0f 95 c2             	setne  dl
c0002c7b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c7f:	74 3c                	je     c0002cbd <change_bitmap+0xa6>
c0002c81:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c85:	4d                   	dec    ebp
c0002c86:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c8a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c8e:	74 32                	je     c0002cc2 <change_bitmap+0xab>
c0002c90:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c94:	75 d8                	jne    c0002c6e <change_bitmap+0x57>
c0002c96:	8d 46 01             	lea    eax,[esi+0x1]
c0002c99:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c9e:	89 c3                	mov    ebx,eax
c0002ca0:	31 f6                	xor    esi,esi
c0002ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002caa:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cb0:	74 99                	je     c0002c4b <change_bitmap+0x34>
c0002cb2:	89 de                	mov    esi,ebx
c0002cb4:	eb b8                	jmp    c0002c6e <change_bitmap+0x57>
c0002cb6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cbb:	eb 05                	jmp    c0002cc2 <change_bitmap+0xab>
c0002cbd:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc2:	83 c4 1c             	add    esp,0x1c
c0002cc5:	89 c8                	mov    eax,ecx
c0002cc7:	5b                   	pop    ebx
c0002cc8:	5e                   	pop    esi
c0002cc9:	5f                   	pop    edi
c0002cca:	5d                   	pop    ebp
c0002ccb:	c3                   	ret    

c0002ccc <put_fat>:
c0002ccc:	83 fa 01             	cmp    edx,0x1
c0002ccf:	0f 86 7b 01 00 00    	jbe    c0002e50 <put_fat+0x184>
c0002cd5:	55                   	push   ebp
c0002cd6:	57                   	push   edi
c0002cd7:	89 cf                	mov    edi,ecx
c0002cd9:	56                   	push   esi
c0002cda:	b9 02 00 00 00       	mov    ecx,0x2
c0002cdf:	53                   	push   ebx
c0002ce0:	89 c6                	mov    esi,eax
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 d3                	mov    ebx,edx
c0002ce7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cea:	0f 86 68 01 00 00    	jbe    c0002e58 <put_fat+0x18c>
c0002cf0:	8a 00                	mov    al,BYTE PTR [eax]
c0002cf2:	3c 02                	cmp    al,0x2
c0002cf4:	0f 84 c7 00 00 00    	je     c0002dc1 <put_fat+0xf5>
c0002cfa:	77 09                	ja     c0002d05 <put_fat+0x39>
c0002cfc:	fe c8                	dec    al
c0002cfe:	74 17                	je     c0002d17 <put_fat+0x4b>
c0002d00:	e9 53 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d05:	b9 02 00 00 00       	mov    ecx,0x2
c0002d0a:	3c 04                	cmp    al,0x4
c0002d0c:	0f 86 e1 00 00 00    	jbe    c0002df3 <put_fat+0x127>
c0002d12:	e9 41 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d17:	89 d5                	mov    ebp,edx
c0002d19:	31 c9                	xor    ecx,ecx
c0002d1b:	d1 ed                	shr    ebp,1
c0002d1d:	89 f0                	mov    eax,esi
c0002d1f:	01 d5                	add    ebp,edx
c0002d21:	89 ea                	mov    edx,ebp
c0002d23:	c1 ea 09             	shr    edx,0x9
c0002d26:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d29:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d2c:	e8 18 f6 ff ff       	call   c0002349 <move_window>
c0002d31:	89 c1                	mov    ecx,eax
c0002d33:	85 c0                	test   eax,eax
c0002d35:	0f 85 1d 01 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d3b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d42:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d45:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d4f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d53:	89 f8                	mov    eax,edi
c0002d55:	83 e3 01             	and    ebx,0x1
c0002d58:	74 0d                	je     c0002d67 <put_fat+0x9b>
c0002d5a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d5d:	89 fa                	mov    edx,edi
c0002d5f:	83 e0 0f             	and    eax,0xf
c0002d62:	c1 e2 04             	shl    edx,0x4
c0002d65:	09 d0                	or     eax,edx
c0002d67:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6e:	31 c9                	xor    ecx,ecx
c0002d70:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d74:	c1 ea 09             	shr    edx,0x9
c0002d77:	89 f0                	mov    eax,esi
c0002d79:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d7c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d7f:	e8 c5 f5 ff ff       	call   c0002349 <move_window>
c0002d84:	89 c1                	mov    ecx,eax
c0002d86:	85 c0                	test   eax,eax
c0002d88:	0f 85 ca 00 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d8e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d92:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d98:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d9c:	85 db                	test   ebx,ebx
c0002d9e:	74 07                	je     c0002da7 <put_fat+0xdb>
c0002da0:	c1 ef 04             	shr    edi,0x4
c0002da3:	89 fa                	mov    edx,edi
c0002da5:	eb 0e                	jmp    c0002db5 <put_fat+0xe9>
c0002da7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002daa:	c1 ef 08             	shr    edi,0x8
c0002dad:	83 e2 f0             	and    edx,0xfffffff0
c0002db0:	83 e7 0f             	and    edi,0xf
c0002db3:	09 fa                	or     edx,edi
c0002db5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002db8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dbc:	e9 97 00 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002dc1:	31 c9                	xor    ecx,ecx
c0002dc3:	c1 ea 08             	shr    edx,0x8
c0002dc6:	89 f0                	mov    eax,esi
c0002dc8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dcb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dce:	e8 76 f5 ff ff       	call   c0002349 <move_window>
c0002dd3:	89 c1                	mov    ecx,eax
c0002dd5:	85 c0                	test   eax,eax
c0002dd7:	75 7f                	jne    c0002e58 <put_fat+0x18c>
c0002dd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ddd:	01 db                	add    ebx,ebx
c0002ddf:	0f b7 d7             	movzx  edx,di
c0002de2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002de8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dec:	e8 ec ed ff ff       	call   c0001bdd <st_word>
c0002df1:	eb 53                	jmp    c0002e46 <put_fat+0x17a>
c0002df3:	31 c9                	xor    ecx,ecx
c0002df5:	c1 ea 07             	shr    edx,0x7
c0002df8:	89 f0                	mov    eax,esi
c0002dfa:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dfd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e00:	e8 44 f5 ff ff       	call   c0002349 <move_window>
c0002e05:	89 c1                	mov    ecx,eax
c0002e07:	85 c0                	test   eax,eax
c0002e09:	75 4d                	jne    c0002e58 <put_fat+0x18c>
c0002e0b:	c1 e3 02             	shl    ebx,0x2
c0002e0e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e14:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e17:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e1b:	74 1c                	je     c0002e39 <put_fat+0x16d>
c0002e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e21:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 4a ed ff ff       	call   c0001b78 <ld_dword>
c0002e2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e32:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e37:	09 c7                	or     edi,eax
c0002e39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e3d:	89 fa                	mov    edx,edi
c0002e3f:	89 d8                	mov    eax,ebx
c0002e41:	e8 9b ed ff ff       	call   c0001be1 <st_dword>
c0002e46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e4e:	eb 08                	jmp    c0002e58 <put_fat+0x18c>
c0002e50:	b9 02 00 00 00       	mov    ecx,0x2
c0002e55:	89 c8                	mov    eax,ecx
c0002e57:	c3                   	ret    
c0002e58:	83 c4 1c             	add    esp,0x1c
c0002e5b:	89 c8                	mov    eax,ecx
c0002e5d:	5b                   	pop    ebx
c0002e5e:	5e                   	pop    esi
c0002e5f:	5f                   	pop    edi
c0002e60:	5d                   	pop    ebp
c0002e61:	c3                   	ret    

c0002e62 <fill_last_frag>:
c0002e62:	57                   	push   edi
c0002e63:	89 cf                	mov    edi,ecx
c0002e65:	56                   	push   esi
c0002e66:	89 d6                	mov    esi,edx
c0002e68:	53                   	push   ebx
c0002e69:	89 c3                	mov    ebx,eax
c0002e6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e6e:	85 c0                	test   eax,eax
c0002e70:	74 21                	je     c0002e93 <fill_last_frag+0x31>
c0002e72:	89 f9                	mov    ecx,edi
c0002e74:	83 f8 01             	cmp    eax,0x1
c0002e77:	76 05                	jbe    c0002e7e <fill_last_frag+0x1c>
c0002e79:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e7c:	29 c1                	sub    ecx,eax
c0002e7e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e81:	29 c2                	sub    edx,eax
c0002e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e85:	e8 42 fe ff ff       	call   c0002ccc <put_fat>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 05                	jne    c0002e93 <fill_last_frag+0x31>
c0002e8e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e91:	eb d8                	jmp    c0002e6b <fill_last_frag+0x9>
c0002e93:	5b                   	pop    ebx
c0002e94:	5e                   	pop    esi
c0002e95:	5f                   	pop    edi
c0002e96:	c3                   	ret    

c0002e97 <fill_first_frag>:
c0002e97:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e9b:	75 2d                	jne    c0002eca <fill_first_frag+0x33>
c0002e9d:	57                   	push   edi
c0002e9e:	56                   	push   esi
c0002e9f:	53                   	push   ebx
c0002ea0:	89 c3                	mov    ebx,eax
c0002ea2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002ea5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ea8:	01 d7                	add    edi,edx
c0002eaa:	39 fa                	cmp    edx,edi
c0002eac:	74 14                	je     c0002ec2 <fill_first_frag+0x2b>
c0002eae:	8d 72 01             	lea    esi,[edx+0x1]
c0002eb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002eb3:	89 f1                	mov    ecx,esi
c0002eb5:	e8 12 fe ff ff       	call   c0002ccc <put_fat>
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	85 c0                	test   eax,eax
c0002ebe:	74 ea                	je     c0002eaa <fill_first_frag+0x13>
c0002ec0:	eb 0b                	jmp    c0002ecd <fill_first_frag+0x36>
c0002ec2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ec6:	31 c0                	xor    eax,eax
c0002ec8:	eb 03                	jmp    c0002ecd <fill_first_frag+0x36>
c0002eca:	31 c0                	xor    eax,eax
c0002ecc:	c3                   	ret    
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	5f                   	pop    edi
c0002ed0:	c3                   	ret    

c0002ed1 <get_fat>:
c0002ed1:	83 fa 01             	cmp    edx,0x1
c0002ed4:	0f 86 db 01 00 00    	jbe    c00030b5 <get_fat+0x1e4>
c0002eda:	55                   	push   ebp
c0002edb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee0:	57                   	push   edi
c0002ee1:	56                   	push   esi
c0002ee2:	53                   	push   ebx
c0002ee3:	83 ec 1c             	sub    esp,0x1c
c0002ee6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002eeb:	0f 86 cc 01 00 00    	jbe    c00030bd <get_fat+0x1ec>
c0002ef1:	89 c3                	mov    ebx,eax
c0002ef3:	89 d6                	mov    esi,edx
c0002ef5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ef7:	3c 02                	cmp    al,0x2
c0002ef9:	0f 84 99 00 00 00    	je     c0002f98 <get_fat+0xc7>
c0002eff:	77 09                	ja     c0002f0a <get_fat+0x39>
c0002f01:	fe c8                	dec    al
c0002f03:	74 1a                	je     c0002f1f <get_fat+0x4e>
c0002f05:	e9 b3 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f0a:	3c 03                	cmp    al,0x3
c0002f0c:	0f 84 b5 00 00 00    	je     c0002fc7 <get_fat+0xf6>
c0002f12:	3c 04                	cmp    al,0x4
c0002f14:	0f 84 e3 00 00 00    	je     c0002ffd <get_fat+0x12c>
c0002f1a:	e9 9e 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f1f:	89 d3                	mov    ebx,edx
c0002f21:	31 c9                	xor    ecx,ecx
c0002f23:	d1 eb                	shr    ebx,1
c0002f25:	89 f8                	mov    eax,edi
c0002f27:	01 d3                	add    ebx,edx
c0002f29:	89 da                	mov    edx,ebx
c0002f2b:	c1 ea 09             	shr    edx,0x9
c0002f2e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f31:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f34:	e8 10 f4 ff ff       	call   c0002349 <move_window>
c0002f39:	85 c0                	test   eax,eax
c0002f3b:	74 08                	je     c0002f45 <get_fat+0x74>
c0002f3d:	83 c9 ff             	or     ecx,0xffffffff
c0002f40:	e9 78 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f45:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f48:	31 c9                	xor    ecx,ecx
c0002f4a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f50:	89 ea                	mov    edx,ebp
c0002f52:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f56:	c1 ea 09             	shr    edx,0x9
c0002f59:	89 f8                	mov    eax,edi
c0002f5b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f61:	e8 e3 f3 ff ff       	call   c0002349 <move_window>
c0002f66:	85 c0                	test   eax,eax
c0002f68:	75 d3                	jne    c0002f3d <get_fat+0x6c>
c0002f6a:	0f b6 c3             	movzx  eax,bl
c0002f6d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f73:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f78:	c1 e3 08             	shl    ebx,0x8
c0002f7b:	09 c3                	or     ebx,eax
c0002f7d:	89 d9                	mov    ecx,ebx
c0002f7f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f85:	83 e6 01             	and    esi,0x1
c0002f88:	0f 84 2f 01 00 00    	je     c00030bd <get_fat+0x1ec>
c0002f8e:	89 d9                	mov    ecx,ebx
c0002f90:	c1 e9 04             	shr    ecx,0x4
c0002f93:	e9 25 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f98:	31 c9                	xor    ecx,ecx
c0002f9a:	c1 ea 08             	shr    edx,0x8
c0002f9d:	89 f8                	mov    eax,edi
c0002f9f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fa2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fa5:	e8 9f f3 ff ff       	call   c0002349 <move_window>
c0002faa:	85 c0                	test   eax,eax
c0002fac:	75 8f                	jne    c0002f3d <get_fat+0x6c>
c0002fae:	01 f6                	add    esi,esi
c0002fb0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fb6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fba:	e8 ac eb ff ff       	call   c0001b6b <ld_word>
c0002fbf:	0f b7 c8             	movzx  ecx,ax
c0002fc2:	e9 f6 00 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002fc7:	31 c9                	xor    ecx,ecx
c0002fc9:	c1 ea 07             	shr    edx,0x7
c0002fcc:	89 f8                	mov    eax,edi
c0002fce:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fd1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fd4:	e8 70 f3 ff ff       	call   c0002349 <move_window>
c0002fd9:	85 c0                	test   eax,eax
c0002fdb:	0f 85 5c ff ff ff    	jne    c0002f3d <get_fat+0x6c>
c0002fe1:	c1 e6 02             	shl    esi,0x2
c0002fe4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fea:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fee:	e8 85 eb ff ff       	call   c0001b78 <ld_dword>
c0002ff3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ff8:	e9 b4 00 00 00       	jmp    c00030b1 <get_fat+0x1e0>
c0002ffd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003000:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003003:	89 d1                	mov    ecx,edx
c0003005:	09 c1                	or     ecx,eax
c0003007:	74 06                	je     c000300f <get_fat+0x13e>
c0003009:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000300d:	75 0f                	jne    c000301e <get_fat+0x14d>
c000300f:	b9 01 00 00 00       	mov    ecx,0x1
c0003014:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003018:	0f 85 9f 00 00 00    	jne    c00030bd <get_fat+0x1ec>
c000301e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003022:	89 f5                	mov    ebp,esi
c0003024:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003029:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000302c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000302f:	80 f9 02             	cmp    cl,0x2
c0003032:	75 35                	jne    c0003069 <get_fat+0x198>
c0003034:	83 c0 ff             	add    eax,0xffffffff
c0003037:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000303c:	83 d2 ff             	adc    edx,0xffffffff
c000303f:	31 db                	xor    ebx,ebx
c0003041:	0f ac d0 09          	shrd   eax,edx,0x9
c0003045:	53                   	push   ebx
c0003046:	c1 ea 09             	shr    edx,0x9
c0003049:	51                   	push   ecx
c000304a:	52                   	push   edx
c000304b:	50                   	push   eax
c000304c:	e8 4f ff 01 00       	call   c0022fa0 <__udivdi3>
c0003051:	83 c4 10             	add    esp,0x10
c0003054:	b9 01 00 00 00       	mov    ecx,0x1
c0003059:	39 c5                	cmp    ebp,eax
c000305b:	77 60                	ja     c00030bd <get_fat+0x1ec>
c000305d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003062:	74 59                	je     c00030bd <get_fat+0x1ec>
c0003064:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003067:	eb 54                	jmp    c00030bd <get_fat+0x1ec>
c0003069:	80 f9 03             	cmp    cl,0x3
c000306c:	75 05                	jne    c0003073 <get_fat+0x1a2>
c000306e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003071:	77 f1                	ja     c0003064 <get_fat+0x193>
c0003073:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003078:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000307c:	75 3f                	jne    c00030bd <get_fat+0x1ec>
c000307e:	31 c9                	xor    ecx,ecx
c0003080:	89 f2                	mov    edx,esi
c0003082:	89 f8                	mov    eax,edi
c0003084:	c1 ea 07             	shr    edx,0x7
c0003087:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000308d:	e8 b7 f2 ff ff       	call   c0002349 <move_window>
c0003092:	85 c0                	test   eax,eax
c0003094:	0f 85 a3 fe ff ff    	jne    c0002f3d <get_fat+0x6c>
c000309a:	c1 e6 02             	shl    esi,0x2
c000309d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030a7:	e8 cc ea ff ff       	call   c0001b78 <ld_dword>
c00030ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030b1:	89 c1                	mov    ecx,eax
c00030b3:	eb 08                	jmp    c00030bd <get_fat+0x1ec>
c00030b5:	b9 01 00 00 00       	mov    ecx,0x1
c00030ba:	89 c8                	mov    eax,ecx
c00030bc:	c3                   	ret    
c00030bd:	83 c4 1c             	add    esp,0x1c
c00030c0:	89 c8                	mov    eax,ecx
c00030c2:	5b                   	pop    ebx
c00030c3:	5e                   	pop    esi
c00030c4:	5f                   	pop    edi
c00030c5:	5d                   	pop    ebp
c00030c6:	c3                   	ret    

c00030c7 <dir_sdi>:
c00030c7:	55                   	push   ebp
c00030c8:	57                   	push   edi
c00030c9:	56                   	push   esi
c00030ca:	53                   	push   ebx
c00030cb:	89 c3                	mov    ebx,eax
c00030cd:	83 ec 1c             	sub    esp,0x1c
c00030d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030d2:	31 c0                	xor    eax,eax
c00030d4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030d7:	0f 94 c0             	sete   al
c00030da:	48                   	dec    eax
c00030db:	25 00 00 20 f0       	and    eax,0xf0200000
c00030e0:	05 00 00 00 10       	add    eax,0x10000000
c00030e5:	39 d0                	cmp    eax,edx
c00030e7:	77 0a                	ja     c00030f3 <dir_sdi+0x2c>
c00030e9:	b8 02 00 00 00       	mov    eax,0x2
c00030ee:	e9 c4 00 00 00       	jmp    c00031b7 <dir_sdi+0xf0>
c00030f3:	89 d6                	mov    esi,edx
c00030f5:	f6 c2 1f             	test   dl,0x1f
c00030f8:	75 ef                	jne    c00030e9 <dir_sdi+0x22>
c00030fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030fd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003100:	85 c9                	test   ecx,ecx
c0003102:	75 2d                	jne    c0003131 <dir_sdi+0x6a>
c0003104:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003107:	77 1b                	ja     c0003124 <dir_sdi+0x5d>
c0003109:	89 f2                	mov    edx,esi
c000310b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000310f:	c1 ea 05             	shr    edx,0x5
c0003112:	39 c2                	cmp    edx,eax
c0003114:	73 d3                	jae    c00030e9 <dir_sdi+0x22>
c0003116:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003119:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000311c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000311f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003122:	eb 4b                	jmp    c000316f <dir_sdi+0xa8>
c0003124:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003127:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000312b:	85 c0                	test   eax,eax
c000312d:	74 da                	je     c0003109 <dir_sdi+0x42>
c000312f:	89 c1                	mov    ecx,eax
c0003131:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003135:	c1 e5 09             	shl    ebp,0x9
c0003138:	89 ca                	mov    edx,ecx
c000313a:	39 ee                	cmp    esi,ebp
c000313c:	72 1c                	jb     c000315a <dir_sdi+0x93>
c000313e:	89 d8                	mov    eax,ebx
c0003140:	e8 8c fd ff ff       	call   c0002ed1 <get_fat>
c0003145:	89 c1                	mov    ecx,eax
c0003147:	83 f8 ff             	cmp    eax,0xffffffff
c000314a:	74 66                	je     c00031b2 <dir_sdi+0xeb>
c000314c:	83 f8 01             	cmp    eax,0x1
c000314f:	76 98                	jbe    c00030e9 <dir_sdi+0x22>
c0003151:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003154:	76 93                	jbe    c00030e9 <dir_sdi+0x22>
c0003156:	29 ee                	sub    esi,ebp
c0003158:	eb de                	jmp    c0003138 <dir_sdi+0x71>
c000315a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000315e:	89 f8                	mov    eax,edi
c0003160:	e8 9f ec ff ff       	call   c0001e04 <clst2sect>
c0003165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003169:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000316c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000316f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003172:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003175:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003178:	89 d1                	mov    ecx,edx
c000317a:	09 c1                	or     ecx,eax
c000317c:	0f 84 67 ff ff ff    	je     c00030e9 <dir_sdi+0x22>
c0003182:	89 f1                	mov    ecx,esi
c0003184:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000318c:	c1 e9 09             	shr    ecx,0x9
c000318f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003193:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003197:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000319b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000319e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00031a4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031a7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00031ae:	31 c0                	xor    eax,eax
c00031b0:	eb 05                	jmp    c00031b7 <dir_sdi+0xf0>
c00031b2:	b8 01 00 00 00       	mov    eax,0x1
c00031b7:	83 c4 1c             	add    esp,0x1c
c00031ba:	5b                   	pop    ebx
c00031bb:	5e                   	pop    esi
c00031bc:	5f                   	pop    edi
c00031bd:	5d                   	pop    ebp
c00031be:	c3                   	ret    

c00031bf <create_chain>:
c00031bf:	55                   	push   ebp
c00031c0:	89 c5                	mov    ebp,eax
c00031c2:	57                   	push   edi
c00031c3:	56                   	push   esi
c00031c4:	53                   	push   ebx
c00031c5:	83 ec 1c             	sub    esp,0x1c
c00031c8:	85 d2                	test   edx,edx
c00031ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031ce:	8b 30                	mov    esi,DWORD PTR [eax]
c00031d0:	75 0e                	jne    c00031e0 <create_chain+0x21>
c00031d2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031d5:	85 ff                	test   edi,edi
c00031d7:	74 39                	je     c0003212 <create_chain+0x53>
c00031d9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031dc:	77 39                	ja     c0003217 <create_chain+0x58>
c00031de:	eb 32                	jmp    c0003212 <create_chain+0x53>
c00031e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031e4:	e8 e8 fc ff ff       	call   c0002ed1 <get_fat>
c00031e9:	89 c3                	mov    ebx,eax
c00031eb:	83 f8 01             	cmp    eax,0x1
c00031ee:	77 0a                	ja     c00031fa <create_chain+0x3b>
c00031f0:	bb 01 00 00 00       	mov    ebx,0x1
c00031f5:	e9 ba 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c00031fa:	83 f8 ff             	cmp    eax,0xffffffff
c00031fd:	0f 84 62 01 00 00    	je     c0003365 <create_chain+0x1a6>
c0003203:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003206:	0f 87 a8 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c000320c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003210:	eb 05                	jmp    c0003217 <create_chain+0x58>
c0003212:	bf 01 00 00 00       	mov    edi,0x1
c0003217:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000321b:	75 07                	jne    c0003224 <create_chain+0x65>
c000321d:	31 db                	xor    ebx,ebx
c000321f:	e9 90 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c0003224:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003227:	75 74                	jne    c000329d <create_chain+0xde>
c0003229:	b9 01 00 00 00       	mov    ecx,0x1
c000322e:	89 fa                	mov    edx,edi
c0003230:	89 f0                	mov    eax,esi
c0003232:	e8 2d f9 ff ff       	call   c0002b64 <find_bitmap>
c0003237:	89 c3                	mov    ebx,eax
c0003239:	8d 40 ff             	lea    eax,[eax-0x1]
c000323c:	83 f8 fd             	cmp    eax,0xfffffffd
c000323f:	0f 87 6f 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c0003245:	83 ec 0c             	sub    esp,0xc
c0003248:	b9 01 00 00 00       	mov    ecx,0x1
c000324d:	6a 01                	push   0x1
c000324f:	89 da                	mov    edx,ebx
c0003251:	89 f0                	mov    eax,esi
c0003253:	e8 bf f9 ff ff       	call   c0002c17 <change_bitmap>
c0003258:	83 c4 10             	add    esp,0x10
c000325b:	83 f8 02             	cmp    eax,0x2
c000325e:	74 90                	je     c00031f0 <create_chain+0x31>
c0003260:	83 f8 01             	cmp    eax,0x1
c0003263:	0f 84 fc 00 00 00    	je     c0003365 <create_chain+0x1a6>
c0003269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000326e:	75 09                	jne    c0003279 <create_chain+0xba>
c0003270:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003274:	e9 0c 01 00 00       	jmp    c0003385 <create_chain+0x1c6>
c0003279:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000327d:	0f 85 e7 00 00 00    	jne    c000336a <create_chain+0x1ab>
c0003283:	8d 57 01             	lea    edx,[edi+0x1]
c0003286:	39 da                	cmp    edx,ebx
c0003288:	0f 84 f7 00 00 00    	je     c0003385 <create_chain+0x1c6>
c000328e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003291:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003295:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003298:	e9 cd 00 00 00       	jmp    c000336a <create_chain+0x1ab>
c000329d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00032a1:	75 41                	jne    c00032e4 <create_chain+0x125>
c00032a3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00032a6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032a9:	77 05                	ja     c00032b0 <create_chain+0xf1>
c00032ab:	bb 02 00 00 00       	mov    ebx,0x2
c00032b0:	89 da                	mov    edx,ebx
c00032b2:	89 e8                	mov    eax,ebp
c00032b4:	e8 18 fc ff ff       	call   c0002ed1 <get_fat>
c00032b9:	83 f8 01             	cmp    eax,0x1
c00032bc:	0f 84 2e ff ff ff    	je     c00031f0 <create_chain+0x31>
c00032c2:	83 f8 ff             	cmp    eax,0xffffffff
c00032c5:	0f 84 9a 00 00 00    	je     c0003365 <create_chain+0x1a6>
c00032cb:	85 c0                	test   eax,eax
c00032cd:	74 11                	je     c00032e0 <create_chain+0x121>
c00032cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032d2:	83 f8 01             	cmp    eax,0x1
c00032d5:	76 0d                	jbe    c00032e4 <create_chain+0x125>
c00032d7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032da:	76 08                	jbe    c00032e4 <create_chain+0x125>
c00032dc:	89 c7                	mov    edi,eax
c00032de:	eb 04                	jmp    c00032e4 <create_chain+0x125>
c00032e0:	85 db                	test   ebx,ebx
c00032e2:	75 38                	jne    c000331c <create_chain+0x15d>
c00032e4:	89 fb                	mov    ebx,edi
c00032e6:	43                   	inc    ebx
c00032e7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032ea:	77 0e                	ja     c00032fa <create_chain+0x13b>
c00032ec:	83 ff 01             	cmp    edi,0x1
c00032ef:	0f 86 28 ff ff ff    	jbe    c000321d <create_chain+0x5e>
c00032f5:	bb 02 00 00 00       	mov    ebx,0x2
c00032fa:	89 da                	mov    edx,ebx
c00032fc:	89 e8                	mov    eax,ebp
c00032fe:	e8 ce fb ff ff       	call   c0002ed1 <get_fat>
c0003303:	85 c0                	test   eax,eax
c0003305:	74 15                	je     c000331c <create_chain+0x15d>
c0003307:	83 f8 01             	cmp    eax,0x1
c000330a:	0f 84 e0 fe ff ff    	je     c00031f0 <create_chain+0x31>
c0003310:	40                   	inc    eax
c0003311:	74 52                	je     c0003365 <create_chain+0x1a6>
c0003313:	39 fb                	cmp    ebx,edi
c0003315:	75 cf                	jne    c00032e6 <create_chain+0x127>
c0003317:	e9 01 ff ff ff       	jmp    c000321d <create_chain+0x5e>
c000331c:	83 c9 ff             	or     ecx,0xffffffff
c000331f:	89 da                	mov    edx,ebx
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 a4 f9 ff ff       	call   c0002ccc <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 32                	jne    c000335e <create_chain+0x19f>
c000332c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003331:	74 11                	je     c0003344 <create_chain+0x185>
c0003333:	89 d9                	mov    ecx,ebx
c0003335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003339:	89 f0                	mov    eax,esi
c000333b:	e8 8c f9 ff ff       	call   c0002ccc <put_fat>
c0003340:	85 c0                	test   eax,eax
c0003342:	75 1a                	jne    c000335e <create_chain+0x19f>
c0003344:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003347:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000334a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000334d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003350:	39 d0                	cmp    eax,edx
c0003352:	77 04                	ja     c0003358 <create_chain+0x199>
c0003354:	48                   	dec    eax
c0003355:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003358:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000335c:	eb 56                	jmp    c00033b4 <create_chain+0x1f5>
c000335e:	48                   	dec    eax
c000335f:	0f 85 8b fe ff ff    	jne    c00031f0 <create_chain+0x31>
c0003365:	83 cb ff             	or     ebx,0xffffffff
c0003368:	eb 4a                	jmp    c00033b4 <create_chain+0x1f5>
c000336a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003371:	41                   	inc    ecx
c0003372:	39 d9                	cmp    ecx,ebx
c0003374:	75 19                	jne    c000338f <create_chain+0x1d0>
c0003376:	b9 02 00 00 00       	mov    ecx,0x2
c000337b:	85 d2                	test   edx,edx
c000337d:	74 03                	je     c0003382 <create_chain+0x1c3>
c000337f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003382:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003385:	85 c0                	test   eax,eax
c0003387:	0f 85 63 fe ff ff    	jne    c00031f0 <create_chain+0x31>
c000338d:	eb b5                	jmp    c0003344 <create_chain+0x185>
c000338f:	85 d2                	test   edx,edx
c0003391:	75 07                	jne    c000339a <create_chain+0x1db>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	89 d9                	mov    ecx,ebx
c000339c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033a0:	89 e8                	mov    eax,ebp
c00033a2:	e8 bb fa ff ff       	call   c0002e62 <fill_last_frag>
c00033a7:	85 c0                	test   eax,eax
c00033a9:	75 b3                	jne    c000335e <create_chain+0x19f>
c00033ab:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033b2:	eb 90                	jmp    c0003344 <create_chain+0x185>
c00033b4:	83 c4 1c             	add    esp,0x1c
c00033b7:	89 d8                	mov    eax,ebx
c00033b9:	5b                   	pop    ebx
c00033ba:	5e                   	pop    esi
c00033bb:	5f                   	pop    edi
c00033bc:	5d                   	pop    ebp
c00033bd:	c3                   	ret    

c00033be <remove_chain>:
c00033be:	55                   	push   ebp
c00033bf:	57                   	push   edi
c00033c0:	56                   	push   esi
c00033c1:	53                   	push   ebx
c00033c2:	83 ec 1c             	sub    esp,0x1c
c00033c5:	83 fa 01             	cmp    edx,0x1
c00033c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033cc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033ce:	77 0a                	ja     c00033da <remove_chain+0x1c>
c00033d0:	b8 02 00 00 00       	mov    eax,0x2
c00033d5:	e9 24 01 00 00       	jmp    c00034fe <remove_chain+0x140>
c00033da:	89 d6                	mov    esi,edx
c00033dc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033df:	76 ef                	jbe    c00033d0 <remove_chain+0x12>
c00033e1:	89 c7                	mov    edi,eax
c00033e3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033e8:	75 06                	jne    c00033f0 <remove_chain+0x32>
c00033ea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033ee:	eb 54                	jmp    c0003444 <remove_chain+0x86>
c00033f0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033f3:	75 06                	jne    c00033fb <remove_chain+0x3d>
c00033f5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033f9:	74 ef                	je     c00033ea <remove_chain+0x2c>
c00033fb:	83 c9 ff             	or     ecx,0xffffffff
c00033fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003402:	89 d8                	mov    eax,ebx
c0003404:	e8 c3 f8 ff ff       	call   c0002ccc <put_fat>
c0003409:	85 c0                	test   eax,eax
c000340b:	74 dd                	je     c00033ea <remove_chain+0x2c>
c000340d:	e9 ec 00 00 00       	jmp    c00034fe <remove_chain+0x140>
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	74 b9                	je     c00033d0 <remove_chain+0x12>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	74 6d                	je     c0003489 <remove_chain+0xcb>
c000341c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000341f:	75 6f                	jne    c0003490 <remove_chain+0xd2>
c0003421:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003424:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003427:	8d 51 fe             	lea    edx,[ecx-0x2]
c000342a:	39 d0                	cmp    eax,edx
c000342c:	73 08                	jae    c0003436 <remove_chain+0x78>
c000342e:	40                   	inc    eax
c000342f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003433:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003436:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003439:	39 e9                	cmp    ecx,ebp
c000343b:	75 64                	jne    c00034a1 <remove_chain+0xe3>
c000343d:	89 ee                	mov    esi,ebp
c000343f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003442:	76 0f                	jbe    c0003453 <remove_chain+0x95>
c0003444:	89 f2                	mov    edx,esi
c0003446:	89 f8                	mov    eax,edi
c0003448:	e8 84 fa ff ff       	call   c0002ed1 <get_fat>
c000344d:	89 c5                	mov    ebp,eax
c000344f:	85 c0                	test   eax,eax
c0003451:	75 bf                	jne    c0003412 <remove_chain+0x54>
c0003453:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003456:	0f 85 a0 00 00 00    	jne    c00034fc <remove_chain+0x13e>
c000345c:	eb 6c                	jmp    c00034ca <remove_chain+0x10c>
c000345e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003461:	84 c0                	test   al,al
c0003463:	75 7d                	jne    c00034e2 <remove_chain+0x124>
c0003465:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003468:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000346c:	0f 84 86 00 00 00    	je     c00034f8 <remove_chain+0x13a>
c0003472:	89 da                	mov    edx,ebx
c0003474:	89 f8                	mov    eax,edi
c0003476:	e8 56 fa ff ff       	call   c0002ed1 <get_fat>
c000347b:	83 f8 01             	cmp    eax,0x1
c000347e:	0f 86 4c ff ff ff    	jbe    c00033d0 <remove_chain+0x12>
c0003484:	83 f8 ff             	cmp    eax,0xffffffff
c0003487:	75 4e                	jne    c00034d7 <remove_chain+0x119>
c0003489:	b8 01 00 00 00       	mov    eax,0x1
c000348e:	eb 6e                	jmp    c00034fe <remove_chain+0x140>
c0003490:	31 c9                	xor    ecx,ecx
c0003492:	89 f2                	mov    edx,esi
c0003494:	89 d8                	mov    eax,ebx
c0003496:	e8 31 f8 ff ff       	call   c0002ccc <put_fat>
c000349b:	85 c0                	test   eax,eax
c000349d:	74 82                	je     c0003421 <remove_chain+0x63>
c000349f:	eb 5d                	jmp    c00034fe <remove_chain+0x140>
c00034a1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034a4:	75 1b                	jne    c00034c1 <remove_chain+0x103>
c00034a6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00034aa:	89 d8                	mov    eax,ebx
c00034ac:	83 ec 0c             	sub    esp,0xc
c00034af:	6a 00                	push   0x0
c00034b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034b5:	e8 5d f7 ff ff       	call   c0002c17 <change_bitmap>
c00034ba:	83 c4 10             	add    esp,0x10
c00034bd:	85 c0                	test   eax,eax
c00034bf:	75 3d                	jne    c00034fe <remove_chain+0x140>
c00034c1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034c5:	e9 73 ff ff ff       	jmp    c000343d <remove_chain+0x7f>
c00034ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034cf:	75 8d                	jne    c000345e <remove_chain+0xa0>
c00034d1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034d5:	eb 25                	jmp    c00034fc <remove_chain+0x13e>
c00034d7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034da:	89 c3                	mov    ebx,eax
c00034dc:	39 c2                	cmp    edx,eax
c00034de:	74 88                	je     c0003468 <remove_chain+0xaa>
c00034e0:	eb 1a                	jmp    c00034fc <remove_chain+0x13e>
c00034e2:	3c 03                	cmp    al,0x3
c00034e4:	75 16                	jne    c00034fc <remove_chain+0x13e>
c00034e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034e9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034ed:	77 0d                	ja     c00034fc <remove_chain+0x13e>
c00034ef:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034f2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034f6:	72 04                	jb     c00034fc <remove_chain+0x13e>
c00034f8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034fc:	31 c0                	xor    eax,eax
c00034fe:	83 c4 1c             	add    esp,0x1c
c0003501:	5b                   	pop    ebx
c0003502:	5e                   	pop    esi
c0003503:	5f                   	pop    edi
c0003504:	5d                   	pop    ebp
c0003505:	c3                   	ret    

c0003506 <dir_clear>:
c0003506:	55                   	push   ebp
c0003507:	57                   	push   edi
c0003508:	56                   	push   esi
c0003509:	89 c6                	mov    esi,eax
c000350b:	53                   	push   ebx
c000350c:	83 ec 1c             	sub    esp,0x1c
c000350f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003513:	e8 9d ed ff ff       	call   c00022b5 <sync_window>
c0003518:	85 c0                	test   eax,eax
c000351a:	0f 85 de 00 00 00    	jne    c00035fe <dir_clear+0xf8>
c0003520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003524:	89 f0                	mov    eax,esi
c0003526:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003529:	e8 d6 e8 ff ff       	call   c0001e04 <clst2sect>
c000352e:	b9 00 02 00 00       	mov    ecx,0x200
c0003533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003537:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000353b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000353e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003541:	89 e8                	mov    eax,ebp
c0003543:	31 d2                	xor    edx,edx
c0003545:	e8 b5 e6 ff ff       	call   c0001bff <mem_set>
c000354a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000354e:	c1 e3 09             	shl    ebx,0x9
c0003551:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003557:	76 1f                	jbe    c0003578 <dir_clear+0x72>
c0003559:	bb 00 80 00 00       	mov    ebx,0x8000
c000355e:	eb 18                	jmp    c0003578 <dir_clear+0x72>
c0003560:	83 ec 0c             	sub    esp,0xc
c0003563:	53                   	push   ebx
c0003564:	e8 6b 50 00 00       	call   c00085d4 <ff_memalloc>
c0003569:	83 c4 10             	add    esp,0x10
c000356c:	89 c7                	mov    edi,eax
c000356e:	85 c0                	test   eax,eax
c0003570:	0f 85 8f 00 00 00    	jne    c0003605 <dir_clear+0xff>
c0003576:	d1 eb                	shr    ebx,1
c0003578:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000357e:	77 e0                	ja     c0003560 <dir_clear+0x5a>
c0003580:	31 db                	xor    ebx,ebx
c0003582:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003586:	39 d8                	cmp    eax,ebx
c0003588:	76 66                	jbe    c00035f0 <dir_clear+0xea>
c000358a:	83 ec 0c             	sub    esp,0xc
c000358d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003591:	6a 01                	push   0x1
c0003593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000359b:	55                   	push   ebp
c000359c:	50                   	push   eax
c000359d:	e8 94 e5 ff ff       	call   c0001b36 <disk_write>
c00035a2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00035a7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00035ac:	83 c4 20             	add    esp,0x20
c00035af:	85 c0                	test   eax,eax
c00035b1:	75 3d                	jne    c00035f0 <dir_clear+0xea>
c00035b3:	43                   	inc    ebx
c00035b4:	eb cc                	jmp    c0003582 <dir_clear+0x7c>
c00035b6:	83 ec 0c             	sub    esp,0xc
c00035b9:	31 d2                	xor    edx,edx
c00035bb:	55                   	push   ebp
c00035bc:	89 d8                	mov    eax,ebx
c00035be:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035c2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035c6:	52                   	push   edx
c00035c7:	50                   	push   eax
c00035c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035cc:	57                   	push   edi
c00035cd:	50                   	push   eax
c00035ce:	e8 63 e5 ff ff       	call   c0001b36 <disk_write>
c00035d3:	83 c4 20             	add    esp,0x20
c00035d6:	85 c0                	test   eax,eax
c00035d8:	75 0a                	jne    c00035e4 <dir_clear+0xde>
c00035da:	01 eb                	add    ebx,ebp
c00035dc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e0:	39 d8                	cmp    eax,ebx
c00035e2:	77 d2                	ja     c00035b6 <dir_clear+0xb0>
c00035e4:	83 ec 0c             	sub    esp,0xc
c00035e7:	57                   	push   edi
c00035e8:	e8 ff 4f 00 00       	call   c00085ec <ff_memfree>
c00035ed:	83 c4 10             	add    esp,0x10
c00035f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035f4:	39 d8                	cmp    eax,ebx
c00035f6:	0f 95 c0             	setne  al
c00035f9:	0f b6 c0             	movzx  eax,al
c00035fc:	eb 19                	jmp    c0003617 <dir_clear+0x111>
c00035fe:	b8 01 00 00 00       	mov    eax,0x1
c0003603:	eb 12                	jmp    c0003617 <dir_clear+0x111>
c0003605:	89 d9                	mov    ecx,ebx
c0003607:	31 d2                	xor    edx,edx
c0003609:	c1 eb 09             	shr    ebx,0x9
c000360c:	e8 ee e5 ff ff       	call   c0001bff <mem_set>
c0003611:	89 dd                	mov    ebp,ebx
c0003613:	31 db                	xor    ebx,ebx
c0003615:	eb c5                	jmp    c00035dc <dir_clear+0xd6>
c0003617:	83 c4 1c             	add    esp,0x1c
c000361a:	5b                   	pop    ebx
c000361b:	5e                   	pop    esi
c000361c:	5f                   	pop    edi
c000361d:	5d                   	pop    ebp
c000361e:	c3                   	ret    

c000361f <dir_next>:
c000361f:	55                   	push   ebp
c0003620:	57                   	push   edi
c0003621:	56                   	push   esi
c0003622:	53                   	push   ebx
c0003623:	89 c3                	mov    ebx,eax
c0003625:	83 ec 1c             	sub    esp,0x1c
c0003628:	8b 28                	mov    ebp,DWORD PTR [eax]
c000362a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000362e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003631:	8d 78 20             	lea    edi,[eax+0x20]
c0003634:	31 c0                	xor    eax,eax
c0003636:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000363a:	0f 94 c0             	sete   al
c000363d:	48                   	dec    eax
c000363e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003643:	05 00 00 00 10       	add    eax,0x10000000
c0003648:	39 f8                	cmp    eax,edi
c000364a:	77 0e                	ja     c000365a <dir_next+0x3b>
c000364c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003653:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000365a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000365d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003660:	b8 04 00 00 00       	mov    eax,0x4
c0003665:	89 ce                	mov    esi,ecx
c0003667:	09 d6                	or     esi,edx
c0003669:	0f 84 da 00 00 00    	je     c0003749 <dir_next+0x12a>
c000366f:	89 f8                	mov    eax,edi
c0003671:	25 ff 01 00 00       	and    eax,0x1ff
c0003676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000367a:	0f 85 b9 00 00 00    	jne    c0003739 <dir_next+0x11a>
c0003680:	83 c2 01             	add    edx,0x1
c0003683:	83 d1 00             	adc    ecx,0x0
c0003686:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003689:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000368c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000368f:	85 d2                	test   edx,edx
c0003691:	75 29                	jne    c00036bc <dir_next+0x9d>
c0003693:	89 fa                	mov    edx,edi
c0003695:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003699:	c1 ea 05             	shr    edx,0x5
c000369c:	39 c2                	cmp    edx,eax
c000369e:	0f 82 95 00 00 00    	jb     c0003739 <dir_next+0x11a>
c00036a4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00036ab:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036b2:	b8 04 00 00 00       	mov    eax,0x4
c00036b7:	e9 8d 00 00 00       	jmp    c0003749 <dir_next+0x12a>
c00036bc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036c0:	89 f9                	mov    ecx,edi
c00036c2:	48                   	dec    eax
c00036c3:	c1 e9 09             	shr    ecx,0x9
c00036c6:	85 c8                	test   eax,ecx
c00036c8:	75 6f                	jne    c0003739 <dir_next+0x11a>
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	e8 00 f8 ff ff       	call   c0002ed1 <get_fat>
c00036d1:	89 c6                	mov    esi,eax
c00036d3:	83 f8 01             	cmp    eax,0x1
c00036d6:	77 07                	ja     c00036df <dir_next+0xc0>
c00036d8:	b8 02 00 00 00       	mov    eax,0x2
c00036dd:	eb 6a                	jmp    c0003749 <dir_next+0x12a>
c00036df:	83 f8 ff             	cmp    eax,0xffffffff
c00036e2:	75 07                	jne    c00036eb <dir_next+0xcc>
c00036e4:	b8 01 00 00 00       	mov    eax,0x1
c00036e9:	eb 5e                	jmp    c0003749 <dir_next+0x12a>
c00036eb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036ee:	77 37                	ja     c0003727 <dir_next+0x108>
c00036f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036f5:	74 ad                	je     c00036a4 <dir_next+0x85>
c00036f7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036fa:	89 d8                	mov    eax,ebx
c00036fc:	e8 be fa ff ff       	call   c00031bf <create_chain>
c0003701:	89 c6                	mov    esi,eax
c0003703:	b8 07 00 00 00       	mov    eax,0x7
c0003708:	85 f6                	test   esi,esi
c000370a:	74 3d                	je     c0003749 <dir_next+0x12a>
c000370c:	83 fe 01             	cmp    esi,0x1
c000370f:	74 c7                	je     c00036d8 <dir_next+0xb9>
c0003711:	83 fe ff             	cmp    esi,0xffffffff
c0003714:	74 ce                	je     c00036e4 <dir_next+0xc5>
c0003716:	89 f2                	mov    edx,esi
c0003718:	89 e8                	mov    eax,ebp
c000371a:	e8 e7 fd ff ff       	call   c0003506 <dir_clear>
c000371f:	85 c0                	test   eax,eax
c0003721:	75 c1                	jne    c00036e4 <dir_next+0xc5>
c0003723:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003727:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000372a:	89 f2                	mov    edx,esi
c000372c:	89 e8                	mov    eax,ebp
c000372e:	e8 d1 e6 ff ff       	call   c0001e04 <clst2sect>
c0003733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003736:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000373d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003740:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003744:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003747:	31 c0                	xor    eax,eax
c0003749:	83 c4 1c             	add    esp,0x1c
c000374c:	5b                   	pop    ebx
c000374d:	5e                   	pop    esi
c000374e:	5f                   	pop    edi
c000374f:	5d                   	pop    ebp
c0003750:	c3                   	ret    

c0003751 <load_xdir>:
c0003751:	55                   	push   ebp
c0003752:	57                   	push   edi
c0003753:	56                   	push   esi
c0003754:	89 c6                	mov    esi,eax
c0003756:	53                   	push   ebx
c0003757:	83 ec 1c             	sub    esp,0x1c
c000375a:	8b 00                	mov    eax,DWORD PTR [eax]
c000375c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000375f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003762:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003765:	e8 df eb ff ff       	call   c0002349 <move_window>
c000376a:	89 c3                	mov    ebx,eax
c000376c:	85 c0                	test   eax,eax
c000376e:	0f 85 0c 01 00 00    	jne    c0003880 <load_xdir+0x12f>
c0003774:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003777:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000377a:	0f 85 fb 00 00 00    	jne    c000387b <load_xdir+0x12a>
c0003780:	89 f8                	mov    eax,edi
c0003782:	b9 20 00 00 00       	mov    ecx,0x20
c0003787:	e8 5e e4 ff ff       	call   c0001bea <mem_cpy>
c000378c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003790:	40                   	inc    eax
c0003791:	c1 e0 05             	shl    eax,0x5
c0003794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003798:	83 e8 60             	sub    eax,0x60
c000379b:	3d 00 02 00 00       	cmp    eax,0x200
c00037a0:	0f 87 d5 00 00 00    	ja     c000387b <load_xdir+0x12a>
c00037a6:	31 d2                	xor    edx,edx
c00037a8:	89 f0                	mov    eax,esi
c00037aa:	e8 70 fe ff ff       	call   c000361f <dir_next>
c00037af:	89 c3                	mov    ebx,eax
c00037b1:	83 f8 04             	cmp    eax,0x4
c00037b4:	0f 84 c1 00 00 00    	je     c000387b <load_xdir+0x12a>
c00037ba:	85 c0                	test   eax,eax
c00037bc:	0f 85 be 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037c2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037c5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ca:	e8 7a eb ff ff       	call   c0002349 <move_window>
c00037cf:	89 c3                	mov    ebx,eax
c00037d1:	85 c0                	test   eax,eax
c00037d3:	0f 85 a7 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037d9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037dc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037df:	0f 85 96 00 00 00    	jne    c000387b <load_xdir+0x12a>
c00037e5:	8d 47 20             	lea    eax,[edi+0x20]
c00037e8:	b9 20 00 00 00       	mov    ecx,0x20
c00037ed:	e8 f8 e3 ff ff       	call   c0001bea <mem_cpy>
c00037f2:	31 d2                	xor    edx,edx
c00037f4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037f8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037fd:	83 c0 2c             	add    eax,0x2c
c0003800:	f7 f1                	div    ecx
c0003802:	c1 e0 05             	shl    eax,0x5
c0003805:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003809:	77 70                	ja     c000387b <load_xdir+0x12a>
c000380b:	bd 40 00 00 00       	mov    ebp,0x40
c0003810:	31 d2                	xor    edx,edx
c0003812:	89 f0                	mov    eax,esi
c0003814:	e8 06 fe ff ff       	call   c000361f <dir_next>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	83 f8 04             	cmp    eax,0x4
c000381e:	74 5b                	je     c000387b <load_xdir+0x12a>
c0003820:	85 c0                	test   eax,eax
c0003822:	75 5c                	jne    c0003880 <load_xdir+0x12f>
c0003824:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003827:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000382a:	8b 06                	mov    eax,DWORD PTR [esi]
c000382c:	e8 18 eb ff ff       	call   c0002349 <move_window>
c0003831:	89 c3                	mov    ebx,eax
c0003833:	85 c0                	test   eax,eax
c0003835:	75 49                	jne    c0003880 <load_xdir+0x12f>
c0003837:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000383a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000383d:	75 3c                	jne    c000387b <load_xdir+0x12a>
c000383f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003845:	77 0d                	ja     c0003854 <load_xdir+0x103>
c0003847:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000384a:	b9 20 00 00 00       	mov    ecx,0x20
c000384f:	e8 96 e3 ff ff       	call   c0001bea <mem_cpy>
c0003854:	83 c5 20             	add    ebp,0x20
c0003857:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000385b:	77 b3                	ja     c0003810 <load_xdir+0xbf>
c000385d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003863:	77 1b                	ja     c0003880 <load_xdir+0x12f>
c0003865:	89 f8                	mov    eax,edi
c0003867:	e8 cd e7 ff ff       	call   c0002039 <xdir_sum>
c000386c:	89 c1                	mov    ecx,eax
c000386e:	8d 47 02             	lea    eax,[edi+0x2]
c0003871:	e8 f5 e2 ff ff       	call   c0001b6b <ld_word>
c0003876:	66 39 c1             	cmp    cx,ax
c0003879:	74 05                	je     c0003880 <load_xdir+0x12f>
c000387b:	bb 02 00 00 00       	mov    ebx,0x2
c0003880:	83 c4 1c             	add    esp,0x1c
c0003883:	89 d8                	mov    eax,ebx
c0003885:	5b                   	pop    ebx
c0003886:	5e                   	pop    esi
c0003887:	5f                   	pop    edi
c0003888:	5d                   	pop    ebp
c0003889:	c3                   	ret    

c000388a <load_obj_xdir>:
c000388a:	53                   	push   ebx
c000388b:	89 c3                	mov    ebx,eax
c000388d:	83 ec 08             	sub    esp,0x8
c0003890:	8b 02                	mov    eax,DWORD PTR [edx]
c0003892:	89 03                	mov    DWORD PTR [ebx],eax
c0003894:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003897:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000389a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000389d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00038a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00038a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00038aa:	30 c0                	xor    al,al
c00038ac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038b3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038b6:	89 d8                	mov    eax,ebx
c00038b8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038bb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038be:	e8 04 f8 ff ff       	call   c00030c7 <dir_sdi>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	75 0b                	jne    c00038d2 <load_obj_xdir+0x48>
c00038c7:	89 d8                	mov    eax,ebx
c00038c9:	83 c4 08             	add    esp,0x8
c00038cc:	5b                   	pop    ebx
c00038cd:	e9 7f fe ff ff       	jmp    c0003751 <load_xdir>
c00038d2:	83 c4 08             	add    esp,0x8
c00038d5:	5b                   	pop    ebx
c00038d6:	c3                   	ret    

c00038d7 <dir_read>:
c00038d7:	55                   	push   ebp
c00038d8:	bd 04 00 00 00       	mov    ebp,0x4
c00038dd:	57                   	push   edi
c00038de:	56                   	push   esi
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	53                   	push   ebx
c00038e5:	89 c3                	mov    ebx,eax
c00038e7:	83 ec 1c             	sub    esp,0x1c
c00038ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ee:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038f5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038f8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038fb:	89 c8                	mov    eax,ecx
c00038fd:	09 d0                	or     eax,edx
c00038ff:	0f 84 25 01 00 00    	je     c0003a2a <dir_read+0x153>
c0003905:	89 f8                	mov    eax,edi
c0003907:	e8 3d ea ff ff       	call   c0002349 <move_window>
c000390c:	89 c5                	mov    ebp,eax
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 85 23 01 00 00    	jne    c0003a39 <dir_read+0x162>
c0003916:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003919:	8a 0a                	mov    cl,BYTE PTR [edx]
c000391b:	84 c9                	test   cl,cl
c000391d:	0f 84 11 01 00 00    	je     c0003a34 <dir_read+0x15d>
c0003923:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003926:	75 48                	jne    c0003970 <dir_read+0x99>
c0003928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000392d:	74 10                	je     c000393f <dir_read+0x68>
c000392f:	80 f9 83             	cmp    cl,0x83
c0003932:	0f 85 dd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003938:	31 ed                	xor    ebp,ebp
c000393a:	e9 08 01 00 00       	jmp    c0003a47 <dir_read+0x170>
c000393f:	80 f9 85             	cmp    cl,0x85
c0003942:	0f 85 cd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003948:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000394b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000394e:	89 d8                	mov    eax,ebx
c0003950:	e8 fc fd ff ff       	call   c0003751 <load_xdir>
c0003955:	89 c5                	mov    ebp,eax
c0003957:	85 c0                	test   eax,eax
c0003959:	0f 85 da 00 00 00    	jne    c0003a39 <dir_read+0x162>
c000395f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003962:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003965:	83 e0 3f             	and    eax,0x3f
c0003968:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000396b:	e9 d7 00 00 00       	jmp    c0003a47 <dir_read+0x170>
c0003970:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003973:	83 e0 3f             	and    eax,0x3f
c0003976:	80 f9 2e             	cmp    cl,0x2e
c0003979:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000397d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003980:	0f 84 8a 00 00 00    	je     c0003a10 <dir_read+0x139>
c0003986:	80 f9 e5             	cmp    cl,0xe5
c0003989:	0f 84 81 00 00 00    	je     c0003a10 <dir_read+0x139>
c000398f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003993:	83 e0 1f             	and    eax,0x1f
c0003996:	83 f8 08             	cmp    eax,0x8
c0003999:	0f 94 c0             	sete   al
c000399c:	0f b6 c0             	movzx  eax,al
c000399f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00039a3:	75 6b                	jne    c0003a10 <dir_read+0x139>
c00039a5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00039aa:	75 44                	jne    c00039f0 <dir_read+0x119>
c00039ac:	f6 c1 40             	test   cl,0x40
c00039af:	74 12                	je     c00039c3 <dir_read+0xec>
c00039b1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039b4:	83 e1 bf             	and    ecx,0xffffffbf
c00039b7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039be:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039c1:	eb 06                	jmp    c00039c9 <dir_read+0xf2>
c00039c3:	89 f0                	mov    eax,esi
c00039c5:	38 c8                	cmp    al,cl
c00039c7:	75 47                	jne    c0003a10 <dir_read+0x139>
c00039c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039d2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039d5:	75 3e                	jne    c0003a15 <dir_read+0x13e>
c00039d7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039db:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039de:	e8 8a e4 ff ff       	call   c0001e6d <pick_lfn>
c00039e3:	85 c0                	test   eax,eax
c00039e5:	74 2e                	je     c0003a15 <dir_read+0x13e>
c00039e7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039eb:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039ee:	eb 25                	jmp    c0003a15 <dir_read+0x13e>
c00039f0:	89 f0                	mov    eax,esi
c00039f2:	84 c0                	test   al,al
c00039f4:	75 11                	jne    c0003a07 <dir_read+0x130>
c00039f6:	89 d0                	mov    eax,edx
c00039f8:	e8 2a e6 ff ff       	call   c0002027 <sum_sfn>
c00039fd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003a01:	0f 84 31 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a07:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003a0e:	eb 37                	jmp    c0003a47 <dir_read+0x170>
c0003a10:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a15:	31 d2                	xor    edx,edx
c0003a17:	89 d8                	mov    eax,ebx
c0003a19:	e8 01 fc ff ff       	call   c000361f <dir_next>
c0003a1e:	89 c5                	mov    ebp,eax
c0003a20:	85 c0                	test   eax,eax
c0003a22:	0f 84 cd fe ff ff    	je     c00038f5 <dir_read+0x1e>
c0003a28:	eb 0f                	jmp    c0003a39 <dir_read+0x162>
c0003a2a:	85 ed                	test   ebp,ebp
c0003a2c:	0f 84 06 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a32:	eb 05                	jmp    c0003a39 <dir_read+0x162>
c0003a34:	bd 04 00 00 00       	mov    ebp,0x4
c0003a39:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a47:	83 c4 1c             	add    esp,0x1c
c0003a4a:	89 e8                	mov    eax,ebp
c0003a4c:	5b                   	pop    ebx
c0003a4d:	5e                   	pop    esi
c0003a4e:	5f                   	pop    edi
c0003a4f:	5d                   	pop    ebp
c0003a50:	c3                   	ret    

c0003a51 <dir_alloc>:
c0003a51:	55                   	push   ebp
c0003a52:	89 d5                	mov    ebp,edx
c0003a54:	57                   	push   edi
c0003a55:	31 d2                	xor    edx,edx
c0003a57:	56                   	push   esi
c0003a58:	53                   	push   ebx
c0003a59:	89 c3                	mov    ebx,eax
c0003a5b:	83 ec 0c             	sub    esp,0xc
c0003a5e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a60:	e8 62 f6 ff ff       	call   c00030c7 <dir_sdi>
c0003a65:	85 c0                	test   eax,eax
c0003a67:	75 4e                	jne    c0003ab7 <dir_alloc+0x66>
c0003a69:	31 f6                	xor    esi,esi
c0003a6b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a6e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a71:	89 f8                	mov    eax,edi
c0003a73:	e8 d1 e8 ff ff       	call   c0002349 <move_window>
c0003a78:	85 c0                	test   eax,eax
c0003a7a:	75 3b                	jne    c0003ab7 <dir_alloc+0x66>
c0003a7c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a7f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a82:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a84:	75 07                	jne    c0003a8d <dir_alloc+0x3c>
c0003a86:	f7 d2                	not    edx
c0003a88:	c0 ea 07             	shr    dl,0x7
c0003a8b:	eb 0d                	jmp    c0003a9a <dir_alloc+0x49>
c0003a8d:	84 d2                	test   dl,dl
c0003a8f:	0f 94 c1             	sete   cl
c0003a92:	80 fa e5             	cmp    dl,0xe5
c0003a95:	0f 94 c2             	sete   dl
c0003a98:	09 ca                	or     edx,ecx
c0003a9a:	84 d2                	test   dl,dl
c0003a9c:	74 07                	je     c0003aa5 <dir_alloc+0x54>
c0003a9e:	46                   	inc    esi
c0003a9f:	39 ee                	cmp    esi,ebp
c0003aa1:	75 04                	jne    c0003aa7 <dir_alloc+0x56>
c0003aa3:	eb 1c                	jmp    c0003ac1 <dir_alloc+0x70>
c0003aa5:	31 f6                	xor    esi,esi
c0003aa7:	ba 01 00 00 00       	mov    edx,0x1
c0003aac:	89 d8                	mov    eax,ebx
c0003aae:	e8 6c fb ff ff       	call   c000361f <dir_next>
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	74 b4                	je     c0003a6b <dir_alloc+0x1a>
c0003ab7:	83 f8 04             	cmp    eax,0x4
c0003aba:	75 05                	jne    c0003ac1 <dir_alloc+0x70>
c0003abc:	b8 07 00 00 00       	mov    eax,0x7
c0003ac1:	83 c4 0c             	add    esp,0xc
c0003ac4:	5b                   	pop    ebx
c0003ac5:	5e                   	pop    esi
c0003ac6:	5f                   	pop    edi
c0003ac7:	5d                   	pop    ebp
c0003ac8:	c3                   	ret    

c0003ac9 <store_xdir>:
c0003ac9:	55                   	push   ebp
c0003aca:	57                   	push   edi
c0003acb:	89 c7                	mov    edi,eax
c0003acd:	56                   	push   esi
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 0c             	sub    esp,0xc
c0003ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ad4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ad7:	89 e8                	mov    eax,ebp
c0003ad9:	e8 5b e5 ff ff       	call   c0002039 <xdir_sum>
c0003ade:	0f b7 d0             	movzx  edx,ax
c0003ae1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ae4:	e8 f4 e0 ff ff       	call   c0001bdd <st_word>
c0003ae9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003aed:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003af0:	89 f8                	mov    eax,edi
c0003af2:	e8 d0 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003af7:	89 c6                	mov    esi,eax
c0003af9:	85 f6                	test   esi,esi
c0003afb:	75 3d                	jne    c0003b3a <store_xdir+0x71>
c0003afd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003b00:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003b03:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b05:	e8 3f e8 ff ff       	call   c0002349 <move_window>
c0003b0a:	89 c6                	mov    esi,eax
c0003b0c:	85 c0                	test   eax,eax
c0003b0e:	75 2a                	jne    c0003b3a <store_xdir+0x71>
c0003b10:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b13:	b9 20 00 00 00       	mov    ecx,0x20
c0003b18:	89 ea                	mov    edx,ebp
c0003b1a:	e8 cb e0 ff ff       	call   c0001bea <mem_cpy>
c0003b1f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b27:	74 11                	je     c0003b3a <store_xdir+0x71>
c0003b29:	31 d2                	xor    edx,edx
c0003b2b:	89 f8                	mov    eax,edi
c0003b2d:	83 c5 20             	add    ebp,0x20
c0003b30:	e8 ea fa ff ff       	call   c000361f <dir_next>
c0003b35:	4b                   	dec    ebx
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	eb bf                	jmp    c0003af9 <store_xdir+0x30>
c0003b3a:	89 f0                	mov    eax,esi
c0003b3c:	83 fe 02             	cmp    esi,0x2
c0003b3f:	76 05                	jbe    c0003b46 <store_xdir+0x7d>
c0003b41:	b8 02 00 00 00       	mov    eax,0x2
c0003b46:	83 c4 0c             	add    esp,0xc
c0003b49:	5b                   	pop    ebx
c0003b4a:	5e                   	pop    esi
c0003b4b:	5f                   	pop    edi
c0003b4c:	5d                   	pop    ebp
c0003b4d:	c3                   	ret    

c0003b4e <dir_remove>:
c0003b4e:	57                   	push   edi
c0003b4f:	56                   	push   esi
c0003b50:	53                   	push   ebx
c0003b51:	89 c3                	mov    ebx,eax
c0003b53:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b56:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b58:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b5b:	83 fa ff             	cmp    edx,0xffffffff
c0003b5e:	74 09                	je     c0003b69 <dir_remove+0x1b>
c0003b60:	e8 62 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003b65:	85 c0                	test   eax,eax
c0003b67:	75 41                	jne    c0003baa <dir_remove+0x5c>
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f0                	mov    eax,esi
c0003b71:	e8 d3 e7 ff ff       	call   c0002349 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 26                	jne    c0003ba0 <dir_remove+0x52>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b80:	75 05                	jne    c0003b87 <dir_remove+0x39>
c0003b82:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b85:	eb 03                	jmp    c0003b8a <dir_remove+0x3c>
c0003b87:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b8e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b91:	73 17                	jae    c0003baa <dir_remove+0x5c>
c0003b93:	31 d2                	xor    edx,edx
c0003b95:	89 d8                	mov    eax,ebx
c0003b97:	e8 83 fa ff ff       	call   c000361f <dir_next>
c0003b9c:	85 c0                	test   eax,eax
c0003b9e:	74 c9                	je     c0003b69 <dir_remove+0x1b>
c0003ba0:	83 f8 04             	cmp    eax,0x4
c0003ba3:	75 05                	jne    c0003baa <dir_remove+0x5c>
c0003ba5:	b8 02 00 00 00       	mov    eax,0x2
c0003baa:	5b                   	pop    ebx
c0003bab:	5e                   	pop    esi
c0003bac:	5f                   	pop    edi
c0003bad:	c3                   	ret    

c0003bae <create_name>:
c0003bae:	55                   	push   ebp
c0003baf:	89 d5                	mov    ebp,edx
c0003bb1:	57                   	push   edi
c0003bb2:	89 c7                	mov    edi,eax
c0003bb4:	56                   	push   esi
c0003bb5:	31 f6                	xor    esi,esi
c0003bb7:	53                   	push   ebx
c0003bb8:	83 ec 3c             	sub    esp,0x3c
c0003bbb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bc1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bce:	e8 72 e0 ff ff       	call   c0001c45 <tchar2uni>
c0003bd3:	89 c3                	mov    ebx,eax
c0003bd5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bd8:	75 0a                	jne    c0003be4 <create_name+0x36>
c0003bda:	b8 06 00 00 00       	mov    eax,0x6
c0003bdf:	e9 9e 02 00 00       	jmp    c0003e82 <create_name+0x2d4>
c0003be4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003be9:	76 0c                	jbe    c0003bf7 <create_name+0x49>
c0003beb:	c1 e8 10             	shr    eax,0x10
c0003bee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bf2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bf6:	46                   	inc    esi
c0003bf7:	66 83 fb 1f          	cmp    bx,0x1f
c0003bfb:	76 4f                	jbe    c0003c4c <create_name+0x9e>
c0003bfd:	66 83 fb 5c          	cmp    bx,0x5c
c0003c01:	74 35                	je     c0003c38 <create_name+0x8a>
c0003c03:	66 83 fb 2f          	cmp    bx,0x2f
c0003c07:	74 2f                	je     c0003c38 <create_name+0x8a>
c0003c09:	66 83 fb 7f          	cmp    bx,0x7f
c0003c0d:	77 11                	ja     c0003c20 <create_name+0x72>
c0003c0f:	0f b7 d3             	movzx  edx,bx
c0003c12:	b8 b2 40 02 c0       	mov    eax,0xc00240b2
c0003c17:	e8 11 e0 ff ff       	call   c0001c2d <chk_chr>
c0003c1c:	85 c0                	test   eax,eax
c0003c1e:	75 ba                	jne    c0003bda <create_name+0x2c>
c0003c20:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c26:	77 b2                	ja     c0003bda <create_name+0x2c>
c0003c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c2c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c30:	46                   	inc    esi
c0003c31:	eb 97                	jmp    c0003bca <create_name+0x1c>
c0003c33:	40                   	inc    eax
c0003c34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c3e:	80 fa 2f             	cmp    dl,0x2f
c0003c41:	74 f0                	je     c0003c33 <create_name+0x85>
c0003c43:	80 fa 5c             	cmp    dl,0x5c
c0003c46:	74 eb                	je     c0003c33 <create_name+0x85>
c0003c48:	31 db                	xor    ebx,ebx
c0003c4a:	eb 02                	jmp    c0003c4e <create_name+0xa0>
c0003c4c:	b3 04                	mov    bl,0x4
c0003c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c52:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c55:	85 f6                	test   esi,esi
c0003c57:	74 18                	je     c0003c71 <create_name+0xc3>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c62:	66 83 f8 20          	cmp    ax,0x20
c0003c66:	74 06                	je     c0003c6e <create_name+0xc0>
c0003c68:	66 83 f8 2e          	cmp    ax,0x2e
c0003c6c:	75 03                	jne    c0003c71 <create_name+0xc3>
c0003c6e:	4e                   	dec    esi
c0003c6f:	eb e4                	jmp    c0003c55 <create_name+0xa7>
c0003c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c75:	31 ed                	xor    ebp,ebp
c0003c77:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c7d:	85 f6                	test   esi,esi
c0003c7f:	0f 84 55 ff ff ff    	je     c0003bda <create_name+0x2c>
c0003c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c89:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c8c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c90:	66 83 f8 20          	cmp    ax,0x20
c0003c94:	75 04                	jne    c0003c9a <create_name+0xec>
c0003c96:	89 d5                	mov    ebp,edx
c0003c98:	eb eb                	jmp    c0003c85 <create_name+0xd7>
c0003c9a:	85 ed                	test   ebp,ebp
c0003c9c:	75 06                	jne    c0003ca4 <create_name+0xf6>
c0003c9e:	66 83 f8 2e          	cmp    ax,0x2e
c0003ca2:	75 08                	jne    c0003cac <create_name+0xfe>
c0003ca4:	83 cb 03             	or     ebx,0x3
c0003ca7:	eb 03                	jmp    c0003cac <create_name+0xfe>
c0003ca9:	4e                   	dec    esi
c0003caa:	74 0c                	je     c0003cb8 <create_name+0x10a>
c0003cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cb0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003cb6:	75 f1                	jne    c0003ca9 <create_name+0xfb>
c0003cb8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cbd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cc0:	ba 20 00 00 00       	mov    edx,0x20
c0003cc5:	e8 35 df ff ff       	call   c0001bff <mem_set>
c0003cca:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cd2:	31 c9                	xor    ecx,ecx
c0003cd4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cd9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003ce8:	66 85 ed             	test   bp,bp
c0003ceb:	0f 84 30 01 00 00    	je     c0003e21 <create_name+0x273>
c0003cf1:	66 83 fd 20          	cmp    bp,0x20
c0003cf5:	74 10                	je     c0003d07 <create_name+0x159>
c0003cf7:	66 83 fd 2e          	cmp    bp,0x2e
c0003cfb:	75 13                	jne    c0003d10 <create_name+0x162>
c0003cfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d01:	0f 84 6b 01 00 00    	je     c0003e72 <create_name+0x2c4>
c0003d07:	83 cb 03             	or     ebx,0x3
c0003d0a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003d0e:	eb c9                	jmp    c0003cd9 <create_name+0x12b>
c0003d10:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d14:	73 0b                	jae    c0003d21 <create_name+0x173>
c0003d16:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d1a:	75 47                	jne    c0003d63 <create_name+0x1b5>
c0003d1c:	e9 51 01 00 00       	jmp    c0003e72 <create_name+0x2c4>
c0003d21:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d26:	75 10                	jne    c0003d38 <create_name+0x18a>
c0003d28:	83 cb 03             	or     ebx,0x3
c0003d2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d33:	e9 e9 00 00 00       	jmp    c0003e21 <create_name+0x273>
c0003d38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d3c:	74 0d                	je     c0003d4b <create_name+0x19d>
c0003d3e:	83 cb 03             	or     ebx,0x3
c0003d41:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d45:	0f 87 d6 00 00 00    	ja     c0003e21 <create_name+0x273>
c0003d4b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d50:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d54:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d5c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d61:	eb a7                	jmp    c0003d0a <create_name+0x15c>
c0003d63:	66 83 fd 7f          	cmp    bp,0x7f
c0003d67:	76 68                	jbe    c0003dd1 <create_name+0x223>
c0003d69:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d6d:	88 da                	mov    dl,bl
c0003d6f:	83 ca 02             	or     edx,0x2
c0003d72:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d76:	50                   	push   eax
c0003d77:	50                   	push   eax
c0003d78:	68 b5 01 00 00       	push   0x1b5
c0003d7d:	55                   	push   ebp
c0003d7e:	e8 81 48 00 00       	call   c0008604 <ff_uni2oem>
c0003d83:	83 c4 10             	add    esp,0x10
c0003d86:	89 c5                	mov    ebp,eax
c0003d88:	a8 80                	test   al,0x80
c0003d8a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d92:	74 0c                	je     c0003da0 <create_name+0x1f2>
c0003d94:	83 e5 7f             	and    ebp,0x7f
c0003d97:	0f b6 ad 00 40 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc000]
c0003d9e:	eb 2a                	jmp    c0003dca <create_name+0x21c>
c0003da0:	66 3d ff 00          	cmp    ax,0xff
c0003da4:	76 24                	jbe    c0003dca <create_name+0x21c>
c0003da6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003daa:	48                   	dec    eax
c0003dab:	39 c8                	cmp    eax,ecx
c0003dad:	77 0c                	ja     c0003dbb <create_name+0x20d>
c0003daf:	83 cb 03             	or     ebx,0x3
c0003db2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003db6:	e9 4f ff ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003dbb:	89 e8                	mov    eax,ebp
c0003dbd:	88 d3                	mov    bl,dl
c0003dbf:	66 c1 e8 08          	shr    ax,0x8
c0003dc3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003dc7:	41                   	inc    ecx
c0003dc8:	eb 4b                	jmp    c0003e15 <create_name+0x267>
c0003dca:	88 d3                	mov    bl,dl
c0003dcc:	66 85 ed             	test   bp,bp
c0003dcf:	74 19                	je     c0003dea <create_name+0x23c>
c0003dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dd5:	0f b7 d5             	movzx  edx,bp
c0003dd8:	b8 bb 40 02 c0       	mov    eax,0xc00240bb
c0003ddd:	e8 4b de ff ff       	call   c0001c2d <chk_chr>
c0003de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003de6:	85 c0                	test   eax,eax
c0003de8:	74 0a                	je     c0003df4 <create_name+0x246>
c0003dea:	83 cb 03             	or     ebx,0x3
c0003ded:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003df2:	eb 21                	jmp    c0003e15 <create_name+0x267>
c0003df4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 07                	ja     c0003e04 <create_name+0x256>
c0003dfd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003e02:	eb 11                	jmp    c0003e15 <create_name+0x267>
c0003e04:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003e07:	66 83 f8 19          	cmp    ax,0x19
c0003e0b:	77 08                	ja     c0003e15 <create_name+0x267>
c0003e0d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e12:	83 ed 20             	sub    ebp,0x20
c0003e15:	89 e8                	mov    eax,ebp
c0003e17:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e1b:	41                   	inc    ecx
c0003e1c:	e9 e9 fe ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003e21:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e25:	75 04                	jne    c0003e2b <create_name+0x27d>
c0003e27:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e2b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e30:	75 05                	jne    c0003e37 <create_name+0x289>
c0003e32:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e3b:	83 e0 0c             	and    eax,0xc
c0003e3e:	3c 0c                	cmp    al,0xc
c0003e40:	74 0b                	je     c0003e4d <create_name+0x29f>
c0003e42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e46:	83 e0 03             	and    eax,0x3
c0003e49:	3c 03                	cmp    al,0x3
c0003e4b:	75 05                	jne    c0003e52 <create_name+0x2a4>
c0003e4d:	83 cb 02             	or     ebx,0x2
c0003e50:	eb 19                	jmp    c0003e6b <create_name+0x2bd>
c0003e52:	f6 c3 02             	test   bl,0x2
c0003e55:	75 14                	jne    c0003e6b <create_name+0x2bd>
c0003e57:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e5c:	74 03                	je     c0003e61 <create_name+0x2b3>
c0003e5e:	83 cb 10             	or     ebx,0x10
c0003e61:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e66:	74 03                	je     c0003e6b <create_name+0x2bd>
c0003e68:	83 cb 08             	or     ebx,0x8
c0003e6b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e6e:	31 c0                	xor    eax,eax
c0003e70:	eb 10                	jmp    c0003e82 <create_name+0x2d4>
c0003e72:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e77:	0f 85 ce fe ff ff    	jne    c0003d4b <create_name+0x19d>
c0003e7d:	e9 a6 fe ff ff       	jmp    c0003d28 <create_name+0x17a>
c0003e82:	83 c4 3c             	add    esp,0x3c
c0003e85:	5b                   	pop    ebx
c0003e86:	5e                   	pop    esi
c0003e87:	5f                   	pop    edi
c0003e88:	5d                   	pop    ebp
c0003e89:	c3                   	ret    

c0003e8a <xname_sum>:
c0003e8a:	56                   	push   esi
c0003e8b:	53                   	push   ebx
c0003e8c:	89 c6                	mov    esi,eax
c0003e8e:	51                   	push   ecx
c0003e8f:	31 db                	xor    ebx,ebx
c0003e91:	83 c6 02             	add    esi,0x2
c0003e94:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e98:	66 85 c0             	test   ax,ax
c0003e9b:	74 1f                	je     c0003ebc <xname_sum+0x32>
c0003e9d:	83 ec 0c             	sub    esp,0xc
c0003ea0:	66 d1 cb             	ror    bx,1
c0003ea3:	50                   	push   eax
c0003ea4:	e8 67 48 00 00       	call   c0008710 <ff_wtoupper>
c0003ea9:	83 c4 10             	add    esp,0x10
c0003eac:	0f b6 d0             	movzx  edx,al
c0003eaf:	66 c1 e8 08          	shr    ax,0x8
c0003eb3:	01 d3                	add    ebx,edx
c0003eb5:	66 d1 cb             	ror    bx,1
c0003eb8:	01 c3                	add    ebx,eax
c0003eba:	eb d5                	jmp    c0003e91 <xname_sum+0x7>
c0003ebc:	89 d8                	mov    eax,ebx
c0003ebe:	5a                   	pop    edx
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	c3                   	ret    

c0003ec2 <create_xdir>:
c0003ec2:	55                   	push   ebp
c0003ec3:	b9 40 00 00 00       	mov    ecx,0x40
c0003ec8:	57                   	push   edi
c0003ec9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ece:	56                   	push   esi
c0003ecf:	31 ff                	xor    edi,edi
c0003ed1:	53                   	push   ebx
c0003ed2:	be 40 00 00 00       	mov    esi,0x40
c0003ed7:	89 c3                	mov    ebx,eax
c0003ed9:	83 ec 1c             	sub    esp,0x1c
c0003edc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ee0:	31 d2                	xor    edx,edx
c0003ee2:	e8 18 dd ff ff       	call   c0001bff <mem_set>
c0003ee7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eea:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003eee:	31 c9                	xor    ecx,ecx
c0003ef0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ef3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ef7:	83 c6 02             	add    esi,0x2
c0003efa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003efe:	66 85 ed             	test   bp,bp
c0003f01:	74 12                	je     c0003f15 <create_xdir+0x53>
c0003f03:	0f b6 c1             	movzx  eax,cl
c0003f06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f0a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003f0e:	66 83 fd 01          	cmp    bp,0x1
c0003f12:	80 d9 ff             	sbb    cl,0xff
c0003f15:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f18:	0f b7 d5             	movzx  edx,bp
c0003f1b:	83 c6 02             	add    esi,0x2
c0003f1e:	e8 ba dc ff ff       	call   c0001bdd <st_word>
c0003f23:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f29:	75 d3                	jne    c0003efe <create_xdir+0x3c>
c0003f2b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f32:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f36:	0f b6 c1             	movzx  eax,cl
c0003f39:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f3e:	74 07                	je     c0003f47 <create_xdir+0x85>
c0003f40:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f45:	eb a9                	jmp    c0003ef0 <create_xdir+0x2e>
c0003f47:	8d 47 02             	lea    eax,[edi+0x2]
c0003f4a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f4d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f50:	89 d0                	mov    eax,edx
c0003f52:	e8 33 ff ff ff       	call   c0003e8a <xname_sum>
c0003f57:	83 c4 1c             	add    esp,0x1c
c0003f5a:	0f b7 d0             	movzx  edx,ax
c0003f5d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f60:	5b                   	pop    ebx
c0003f61:	5e                   	pop    esi
c0003f62:	5f                   	pop    edi
c0003f63:	5d                   	pop    ebp
c0003f64:	e9 74 dc ff ff       	jmp    c0001bdd <st_word>

c0003f69 <cmp_lfn>:
c0003f69:	55                   	push   ebp
c0003f6a:	57                   	push   edi
c0003f6b:	89 d7                	mov    edi,edx
c0003f6d:	56                   	push   esi
c0003f6e:	53                   	push   ebx
c0003f6f:	83 ec 1c             	sub    esp,0x1c
c0003f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f76:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f79:	e8 ed db ff ff       	call   c0001b6b <ld_word>
c0003f7e:	66 85 c0             	test   ax,ax
c0003f81:	74 07                	je     c0003f8a <cmp_lfn+0x21>
c0003f83:	31 c0                	xor    eax,eax
c0003f85:	e9 9a 00 00 00       	jmp    c0004024 <cmp_lfn+0xbb>
c0003f8a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f8c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f91:	83 e3 3f             	and    ebx,0x3f
c0003f94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f9c:	4b                   	dec    ebx
c0003f9d:	6b db 0d             	imul   ebx,ebx,0xd
c0003fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fa4:	0f b6 80 80 40 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdbf80]
c0003fab:	01 f8                	add    eax,edi
c0003fad:	e8 b9 db ff ff       	call   c0001b6b <ld_word>
c0003fb2:	66 85 ed             	test   bp,bp
c0003fb5:	89 c6                	mov    esi,eax
c0003fb7:	74 3c                	je     c0003ff5 <cmp_lfn+0x8c>
c0003fb9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fbf:	77 c2                	ja     c0003f83 <cmp_lfn+0x1a>
c0003fc1:	83 ec 0c             	sub    esp,0xc
c0003fc4:	0f b7 c0             	movzx  eax,ax
c0003fc7:	50                   	push   eax
c0003fc8:	e8 43 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fcd:	89 c5                	mov    ebp,eax
c0003fcf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fda:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fde:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe1:	e8 2a 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fe6:	83 c4 10             	add    esp,0x10
c0003fe9:	39 c5                	cmp    ebp,eax
c0003feb:	75 96                	jne    c0003f83 <cmp_lfn+0x1a>
c0003fed:	89 f5                	mov    ebp,esi
c0003fef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ff3:	eb 04                	jmp    c0003ff9 <cmp_lfn+0x90>
c0003ff5:	66 46                	inc    si
c0003ff7:	75 8a                	jne    c0003f83 <cmp_lfn+0x1a>
c0003ff9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ffd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004002:	75 9c                	jne    c0003fa0 <cmp_lfn+0x37>
c0004004:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004007:	74 16                	je     c000401f <cmp_lfn+0xb6>
c0004009:	66 85 ed             	test   bp,bp
c000400c:	74 11                	je     c000401f <cmp_lfn+0xb6>
c000400e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004012:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004017:	0f 94 c0             	sete   al
c000401a:	0f b6 c0             	movzx  eax,al
c000401d:	eb 05                	jmp    c0004024 <cmp_lfn+0xbb>
c000401f:	b8 01 00 00 00       	mov    eax,0x1
c0004024:	83 c4 1c             	add    esp,0x1c
c0004027:	5b                   	pop    ebx
c0004028:	5e                   	pop    esi
c0004029:	5f                   	pop    edi
c000402a:	5d                   	pop    ebp
c000402b:	c3                   	ret    

c000402c <dir_find>:
c000402c:	55                   	push   ebp
c000402d:	31 d2                	xor    edx,edx
c000402f:	57                   	push   edi
c0004030:	56                   	push   esi
c0004031:	53                   	push   ebx
c0004032:	89 c3                	mov    ebx,eax
c0004034:	83 ec 1c             	sub    esp,0x1c
c0004037:	8b 30                	mov    esi,DWORD PTR [eax]
c0004039:	e8 89 f0 ff ff       	call   c00030c7 <dir_sdi>
c000403e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004041:	85 c0                	test   eax,eax
c0004043:	0f 85 9e 01 00 00    	jne    c00041e7 <dir_find+0x1bb>
c0004049:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000404c:	0f 85 8d 00 00 00    	jne    c00040df <dir_find+0xb3>
c0004052:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004055:	e8 30 fe ff ff       	call   c0003e8a <xname_sum>
c000405a:	89 c7                	mov    edi,eax
c000405c:	31 d2                	xor    edx,edx
c000405e:	89 d8                	mov    eax,ebx
c0004060:	e8 72 f8 ff ff       	call   c00038d7 <dir_read>
c0004065:	85 c0                	test   eax,eax
c0004067:	0f 85 5e 01 00 00    	jne    c00041cb <dir_find+0x19f>
c000406d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004070:	8d 41 24             	lea    eax,[ecx+0x24]
c0004073:	e8 f3 da ff ff       	call   c0001b6b <ld_word>
c0004078:	66 39 f8             	cmp    ax,di
c000407b:	75 df                	jne    c000405c <dir_find+0x30>
c000407d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004080:	31 ed                	xor    ebp,ebp
c0004082:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004086:	ba 40 00 00 00       	mov    edx,0x40
c000408b:	89 e9                	mov    ecx,ebp
c000408d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004091:	0f 84 42 01 00 00    	je     c00041d9 <dir_find+0x1ad>
c0004097:	f6 c2 1f             	test   dl,0x1f
c000409a:	75 03                	jne    c000409f <dir_find+0x73>
c000409c:	83 c2 02             	add    edx,0x2
c000409f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00040a3:	89 d0                	mov    eax,edx
c00040a5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00040a8:	e8 be da ff ff       	call   c0001b6b <ld_word>
c00040ad:	83 ec 0c             	sub    esp,0xc
c00040b0:	0f b7 c0             	movzx  eax,ax
c00040b3:	50                   	push   eax
c00040b4:	e8 57 46 00 00       	call   c0008710 <ff_wtoupper>
c00040b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040c0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040c7:	e8 44 46 00 00       	call   c0008710 <ff_wtoupper>
c00040cc:	83 c4 10             	add    esp,0x10
c00040cf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040d3:	75 87                	jne    c000405c <dir_find+0x30>
c00040d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040d9:	45                   	inc    ebp
c00040da:	83 c2 02             	add    edx,0x2
c00040dd:	eb ac                	jmp    c000408b <dir_find+0x5f>
c00040df:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040e6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040f0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040f3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040f6:	89 f0                	mov    eax,esi
c00040f8:	e8 4c e2 ff ff       	call   c0002349 <move_window>
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 c6 00 00 00    	jne    c00041cb <dir_find+0x19f>
c0004105:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004108:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000410b:	84 c9                	test   cl,cl
c000410d:	0f 84 bd 00 00 00    	je     c00041d0 <dir_find+0x1a4>
c0004113:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004116:	88 d0                	mov    al,dl
c0004118:	83 e0 3f             	and    eax,0x3f
c000411b:	80 f9 e5             	cmp    cl,0xe5
c000411e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004121:	0f 84 87 00 00 00    	je     c00041ae <dir_find+0x182>
c0004127:	80 e2 08             	and    dl,0x8
c000412a:	74 06                	je     c0004132 <dir_find+0x106>
c000412c:	3c 0f                	cmp    al,0xf
c000412e:	75 7e                	jne    c00041ae <dir_find+0x182>
c0004130:	eb 04                	jmp    c0004136 <dir_find+0x10a>
c0004132:	3c 0f                	cmp    al,0xf
c0004134:	75 4c                	jne    c0004182 <dir_find+0x156>
c0004136:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000413a:	75 7e                	jne    c00041ba <dir_find+0x18e>
c000413c:	f6 c1 40             	test   cl,0x40
c000413f:	74 12                	je     c0004153 <dir_find+0x127>
c0004141:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004144:	83 e1 bf             	and    ecx,0xffffffbf
c0004147:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000414b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000414e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004151:	eb 06                	jmp    c0004159 <dir_find+0x12d>
c0004153:	89 f8                	mov    eax,edi
c0004155:	38 c8                	cmp    al,cl
c0004157:	75 5c                	jne    c00041b5 <dir_find+0x189>
c0004159:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000415d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004162:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004165:	75 53                	jne    c00041ba <dir_find+0x18e>
c0004167:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000416b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000416e:	89 ea                	mov    edx,ebp
c0004170:	e8 f4 fd ff ff       	call   c0003f69 <cmp_lfn>
c0004175:	85 c0                	test   eax,eax
c0004177:	74 41                	je     c00041ba <dir_find+0x18e>
c0004179:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000417d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004180:	eb 38                	jmp    c00041ba <dir_find+0x18e>
c0004182:	89 f8                	mov    eax,edi
c0004184:	84 c0                	test   al,al
c0004186:	75 0d                	jne    c0004195 <dir_find+0x169>
c0004188:	89 e8                	mov    eax,ebp
c000418a:	e8 98 de ff ff       	call   c0002027 <sum_sfn>
c000418f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004193:	74 52                	je     c00041e7 <dir_find+0x1bb>
c0004195:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004199:	75 13                	jne    c00041ae <dir_find+0x182>
c000419b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000419e:	b9 0b 00 00 00       	mov    ecx,0xb
c00041a3:	89 e8                	mov    eax,ebp
c00041a5:	e8 60 da ff ff       	call   c0001c0a <mem_cmp>
c00041aa:	85 c0                	test   eax,eax
c00041ac:	74 39                	je     c00041e7 <dir_find+0x1bb>
c00041ae:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041b5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ba:	31 d2                	xor    edx,edx
c00041bc:	89 d8                	mov    eax,ebx
c00041be:	e8 5c f4 ff ff       	call   c000361f <dir_next>
c00041c3:	85 c0                	test   eax,eax
c00041c5:	0f 84 25 ff ff ff    	je     c00040f0 <dir_find+0xc4>
c00041cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041ce:	eb 17                	jmp    c00041e7 <dir_find+0x1bb>
c00041d0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041d7:	eb 0e                	jmp    c00041e7 <dir_find+0x1bb>
c00041d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041dc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041e1:	0f 85 75 fe ff ff    	jne    c000405c <dir_find+0x30>
c00041e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041ea:	83 c4 1c             	add    esp,0x1c
c00041ed:	5b                   	pop    ebx
c00041ee:	5e                   	pop    esi
c00041ef:	5f                   	pop    edi
c00041f0:	5d                   	pop    ebp
c00041f1:	c3                   	ret    

c00041f2 <dir_register>:
c00041f2:	55                   	push   ebp
c00041f3:	57                   	push   edi
c00041f4:	56                   	push   esi
c00041f5:	be 06 00 00 00       	mov    esi,0x6
c00041fa:	53                   	push   ebx
c00041fb:	83 ec 6c             	sub    esp,0x6c
c00041fe:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004202:	0f 85 62 02 00 00    	jne    c000446a <dir_register+0x278>
c0004208:	8b 28                	mov    ebp,DWORD PTR [eax]
c000420a:	31 ff                	xor    edi,edi
c000420c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000420f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004214:	74 03                	je     c0004219 <dir_register+0x27>
c0004216:	47                   	inc    edi
c0004217:	eb f6                	jmp    c000420f <dir_register+0x1d>
c0004219:	89 c3                	mov    ebx,eax
c000421b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000421f:	0f 85 e1 00 00 00    	jne    c0004306 <dir_register+0x114>
c0004225:	83 c7 0e             	add    edi,0xe
c0004228:	b9 0f 00 00 00       	mov    ecx,0xf
c000422d:	89 f8                	mov    eax,edi
c000422f:	31 d2                	xor    edx,edx
c0004231:	f7 f1                	div    ecx
c0004233:	8d 50 02             	lea    edx,[eax+0x2]
c0004236:	89 c7                	mov    edi,eax
c0004238:	89 d8                	mov    eax,ebx
c000423a:	e8 12 f8 ff ff       	call   c0003a51 <dir_alloc>
c000423f:	89 c6                	mov    esi,eax
c0004241:	85 c0                	test   eax,eax
c0004243:	0f 85 21 02 00 00    	jne    c000446a <dir_register+0x278>
c0004249:	81 c7 01 00 00 08    	add    edi,0x8000001
c000424f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004252:	c1 e7 05             	shl    edi,0x5
c0004255:	29 f8                	sub    eax,edi
c0004257:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000425a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000425d:	a8 04                	test   al,0x4
c000425f:	0f 84 91 00 00 00    	je     c00042f6 <dir_register+0x104>
c0004265:	83 e0 fb             	and    eax,0xfffffffb
c0004268:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000426b:	89 d8                	mov    eax,ebx
c000426d:	e8 25 ec ff ff       	call   c0002e97 <fill_first_frag>
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 ee 01 00 00    	jne    c0004468 <dir_register+0x276>
c000427a:	83 c9 ff             	or     ecx,0xffffffff
c000427d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004280:	89 d8                	mov    eax,ebx
c0004282:	e8 db eb ff ff       	call   c0002e62 <fill_last_frag>
c0004287:	85 c0                	test   eax,eax
c0004289:	0f 85 d9 01 00 00    	jne    c0004468 <dir_register+0x276>
c000428f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004293:	74 61                	je     c00042f6 <dir_register+0x104>
c0004295:	89 da                	mov    edx,ebx
c0004297:	8d 44 24 14          	lea    eax,[esp+0x14]
c000429b:	e8 ea f5 ff ff       	call   c000388a <load_obj_xdir>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	0f 85 c0 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042a8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00042ac:	31 c9                	xor    ecx,ecx
c00042ae:	c1 e2 09             	shl    edx,0x9
c00042b1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042b4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042b7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042ba:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042c0:	83 c0 38             	add    eax,0x38
c00042c3:	e8 1c d9 ff ff       	call   c0001be4 <st_qword>
c00042c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042cb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042ce:	83 c0 28             	add    eax,0x28
c00042d1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042d4:	e8 0b d9 ff ff       	call   c0001be4 <st_qword>
c00042d9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042dc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042df:	83 c8 01             	or     eax,0x1
c00042e2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042e9:	e8 db f7 ff ff       	call   c0003ac9 <store_xdir>
c00042ee:	85 c0                	test   eax,eax
c00042f0:	0f 85 72 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042fc:	e8 c1 fb ff ff       	call   c0003ec2 <create_xdir>
c0004301:	e9 64 01 00 00       	jmp    c000446a <dir_register+0x278>
c0004306:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004309:	b9 0c 00 00 00       	mov    ecx,0xc
c000430e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004312:	89 c2                	mov    edx,eax
c0004314:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004318:	e8 cd d8 ff ff       	call   c0001bea <mem_cpy>
c000431d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004322:	74 58                	je     c000437c <dir_register+0x18a>
c0004324:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004328:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004330:	83 ec 0c             	sub    esp,0xc
c0004333:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000433a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000433e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004342:	e8 24 dc ff ff       	call   c0001f6b <gen_numname>
c0004347:	89 d8                	mov    eax,ebx
c0004349:	e8 de fc ff ff       	call   c000402c <dir_find>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	89 c6                	mov    esi,eax
c0004353:	85 c0                	test   eax,eax
c0004355:	75 15                	jne    c000436c <dir_register+0x17a>
c0004357:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000435b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004360:	75 ce                	jne    c0004330 <dir_register+0x13e>
c0004362:	be 07 00 00 00       	mov    esi,0x7
c0004367:	e9 fe 00 00 00       	jmp    c000446a <dir_register+0x278>
c000436c:	83 f8 04             	cmp    eax,0x4
c000436f:	0f 85 f5 00 00 00    	jne    c000446a <dir_register+0x278>
c0004375:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004379:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000437c:	b9 01 00 00 00       	mov    ecx,0x1
c0004381:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004386:	74 0f                	je     c0004397 <dir_register+0x1a5>
c0004388:	b9 0d 00 00 00       	mov    ecx,0xd
c000438d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004390:	31 d2                	xor    edx,edx
c0004392:	f7 f1                	div    ecx
c0004394:	8d 48 01             	lea    ecx,[eax+0x1]
c0004397:	89 ca                	mov    edx,ecx
c0004399:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439d:	89 d8                	mov    eax,ebx
c000439f:	e8 ad f6 ff ff       	call   c0003a51 <dir_alloc>
c00043a4:	89 c6                	mov    esi,eax
c00043a6:	85 c0                	test   eax,eax
c00043a8:	0f 85 bc 00 00 00    	jne    c000446a <dir_register+0x278>
c00043ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b2:	49                   	dec    ecx
c00043b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043b7:	74 6a                	je     c0004423 <dir_register+0x231>
c00043b9:	89 c8                	mov    eax,ecx
c00043bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043be:	c1 e0 05             	shl    eax,0x5
c00043c1:	29 c2                	sub    edx,eax
c00043c3:	89 d8                	mov    eax,ebx
c00043c5:	e8 fd ec ff ff       	call   c00030c7 <dir_sdi>
c00043ca:	89 c6                	mov    esi,eax
c00043cc:	85 c0                	test   eax,eax
c00043ce:	0f 85 96 00 00 00    	jne    c000446a <dir_register+0x278>
c00043d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043d8:	e8 4a dc ff ff       	call   c0002027 <sum_sfn>
c00043dd:	0f b6 f8             	movzx  edi,al
c00043e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043e6:	89 e8                	mov    eax,ebp
c00043e8:	e8 5c df ff ff       	call   c0002349 <move_window>
c00043ed:	89 c6                	mov    esi,eax
c00043ef:	85 c0                	test   eax,eax
c00043f1:	75 77                	jne    c000446a <dir_register+0x278>
c00043f3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043f8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043fb:	83 ec 0c             	sub    esp,0xc
c00043fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004401:	57                   	push   edi
c0004402:	e8 e0 da ff ff       	call   c0001ee7 <put_lfn>
c0004407:	31 d2                	xor    edx,edx
c0004409:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000440d:	89 d8                	mov    eax,ebx
c000440f:	e8 0b f2 ff ff       	call   c000361f <dir_next>
c0004414:	83 c4 10             	add    esp,0x10
c0004417:	89 c6                	mov    esi,eax
c0004419:	85 c0                	test   eax,eax
c000441b:	75 4d                	jne    c000446a <dir_register+0x278>
c000441d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004421:	75 bd                	jne    c00043e0 <dir_register+0x1ee>
c0004423:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004426:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004429:	89 e8                	mov    eax,ebp
c000442b:	e8 19 df ff ff       	call   c0002349 <move_window>
c0004430:	89 c6                	mov    esi,eax
c0004432:	85 c0                	test   eax,eax
c0004434:	75 34                	jne    c000446a <dir_register+0x278>
c0004436:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004439:	b9 20 00 00 00       	mov    ecx,0x20
c000443e:	31 d2                	xor    edx,edx
c0004440:	e8 ba d7 ff ff       	call   c0001bff <mem_set>
c0004445:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004448:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000444c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004451:	e8 94 d7 ff ff       	call   c0001bea <mem_cpy>
c0004456:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004459:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000445c:	83 e0 18             	and    eax,0x18
c000445f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004462:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004466:	eb 02                	jmp    c000446a <dir_register+0x278>
c0004468:	89 c6                	mov    esi,eax
c000446a:	83 c4 6c             	add    esp,0x6c
c000446d:	89 f0                	mov    eax,esi
c000446f:	5b                   	pop    ebx
c0004470:	5e                   	pop    esi
c0004471:	5f                   	pop    edi
c0004472:	5d                   	pop    ebp
c0004473:	c3                   	ret    

c0004474 <sync_fs>:
c0004474:	56                   	push   esi
c0004475:	53                   	push   ebx
c0004476:	53                   	push   ebx
c0004477:	89 c3                	mov    ebx,eax
c0004479:	e8 37 de ff ff       	call   c00022b5 <sync_window>
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 b1 00 00 00    	jne    c0004537 <sync_fs+0xc3>
c0004486:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004489:	0f 85 8e 00 00 00    	jne    c000451d <sync_fs+0xa9>
c000448f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004493:	0f 85 84 00 00 00    	jne    c000451d <sync_fs+0xa9>
c0004499:	b9 00 02 00 00       	mov    ecx,0x200
c000449e:	8d 73 54             	lea    esi,[ebx+0x54]
c00044a1:	31 d2                	xor    edx,edx
c00044a3:	89 f0                	mov    eax,esi
c00044a5:	e8 55 d7 ff ff       	call   c0001bff <mem_set>
c00044aa:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044b5:	e8 23 d7 ff ff       	call   c0001bdd <st_word>
c00044ba:	ba 52 52 61 41       	mov    edx,0x41615252
c00044bf:	89 f0                	mov    eax,esi
c00044c1:	e8 1b d7 ff ff       	call   c0001be1 <st_dword>
c00044c6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044cc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044d1:	e8 0b d7 ff ff       	call   c0001be1 <st_dword>
c00044d6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044d9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044df:	e8 fd d6 ff ff       	call   c0001be1 <st_dword>
c00044e4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044e7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044ed:	e8 ef d6 ff ff       	call   c0001be1 <st_dword>
c00044f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044f8:	83 c0 01             	add    eax,0x1
c00044fb:	83 d2 00             	adc    edx,0x0
c00044fe:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004501:	83 ec 0c             	sub    esp,0xc
c0004504:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004507:	6a 01                	push   0x1
c0004509:	52                   	push   edx
c000450a:	50                   	push   eax
c000450b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000450f:	56                   	push   esi
c0004510:	50                   	push   eax
c0004511:	e8 20 d6 ff ff       	call   c0001b36 <disk_write>
c0004516:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000451a:	83 c4 20             	add    esp,0x20
c000451d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004521:	51                   	push   ecx
c0004522:	6a 00                	push   0x0
c0004524:	6a 00                	push   0x0
c0004526:	50                   	push   eax
c0004527:	e8 20 d6 ff ff       	call   c0001b4c <disk_ioctl>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	85 c0                	test   eax,eax
c0004531:	0f 95 c0             	setne  al
c0004534:	0f b6 c0             	movzx  eax,al
c0004537:	5a                   	pop    edx
c0004538:	5b                   	pop    ebx
c0004539:	5e                   	pop    esi
c000453a:	c3                   	ret    

c000453b <create_partition>:
c000453b:	55                   	push   ebp
c000453c:	0f b6 c0             	movzx  eax,al
c000453f:	57                   	push   edi
c0004540:	56                   	push   esi
c0004541:	53                   	push   ebx
c0004542:	83 ec 60             	sub    esp,0x60
c0004545:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004549:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000454d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004551:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004555:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004559:	50                   	push   eax
c000455a:	6a 01                	push   0x1
c000455c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004560:	e8 e7 d5 ff ff       	call   c0001b4c <disk_ioctl>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	85 c0                	test   eax,eax
c000456a:	74 0a                	je     c0004576 <create_partition+0x3b>
c000456c:	b8 01 00 00 00       	mov    eax,0x1
c0004571:	e9 67 05 00 00       	jmp    c0004add <create_partition+0x5a2>
c0004576:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000457a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000457e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004582:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004586:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000458b:	0f 86 ed 03 00 00    	jbe    c000497e <create_partition+0x443>
c0004591:	83 c0 df             	add    eax,0xffffffdf
c0004594:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000459c:	83 d2 ff             	adc    edx,0xffffffff
c000459f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00045a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00045a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00045af:	83 c0 bd             	add    eax,0xffffffbd
c00045b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045b9:	83 d2 ff             	adc    edx,0xffffffff
c00045bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045cc:	be 22 00 00 00       	mov    esi,0x22
c00045d1:	31 ff                	xor    edi,edi
c00045d3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045db:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045e3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045ef:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f5:	75 0e                	jne    c0004605 <create_partition+0xca>
c00045f7:	b9 00 02 00 00       	mov    ecx,0x200
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	89 d8                	mov    eax,ebx
c0004600:	e8 fa d5 ff ff       	call   c0001bff <mem_set>
c0004605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004609:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000460d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004611:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004614:	0f 84 23 01 00 00    	je     c000473d <create_partition+0x202>
c000461a:	89 f0                	mov    eax,esi
c000461c:	89 fa                	mov    edx,edi
c000461e:	05 ff 07 00 00       	add    eax,0x7ff
c0004623:	83 d2 00             	adc    edx,0x0
c0004626:	89 c1                	mov    ecx,eax
c0004628:	89 d7                	mov    edi,edx
c000462a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004630:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004634:	89 ce                	mov    esi,ecx
c0004636:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000463a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000463e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004642:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004645:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004649:	89 04 24             	mov    DWORD PTR [esp],eax
c000464c:	b8 64 00 00 00       	mov    eax,0x64
c0004651:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004654:	b8 00 00 00 00       	mov    eax,0x0
c0004659:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000465d:	72 41                	jb     c00046a0 <create_partition+0x165>
c000465f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004667:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000466b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004670:	01 c1                	add    ecx,eax
c0004672:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004676:	f7 24 24             	mul    DWORD PTR [esp]
c0004679:	6a 00                	push   0x0
c000467b:	01 ca                	add    edx,ecx
c000467d:	6a 64                	push   0x64
c000467f:	52                   	push   edx
c0004680:	50                   	push   eax
c0004681:	e8 1a e9 01 00       	call   c0022fa0 <__udivdi3>
c0004686:	83 c4 10             	add    esp,0x10
c0004689:	05 ff 07 00 00       	add    eax,0x7ff
c000468e:	83 d2 00             	adc    edx,0x0
c0004691:	89 c1                	mov    ecx,eax
c0004693:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004697:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000469d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00046a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00046a7:	01 f0                	add    eax,esi
c00046a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00046ad:	11 fa                	adc    edx,edi
c00046af:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046b3:	19 d1                	sbb    ecx,edx
c00046b5:	73 2e                	jae    c00046e5 <create_partition+0x1aa>
c00046b7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046bb:	89 f8                	mov    eax,edi
c00046bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046c4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046d0:	73 6b                	jae    c000473d <create_partition+0x202>
c00046d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046da:	29 f0                	sub    eax,esi
c00046dc:	19 fa                	sbb    edx,edi
c00046de:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	74 4f                	je     c000473d <create_partition+0x202>
c00046ee:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046f1:	b9 10 00 00 00       	mov    ecx,0x10
c00046f6:	ba 90 40 02 c0       	mov    edx,0xc0024090
c00046fb:	e8 ea d4 ff ff       	call   c0001bea <mem_cpy>
c0004700:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004704:	b9 10 00 00 00       	mov    ecx,0x10
c0004709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000470d:	e8 2c db ff ff       	call   c000223e <make_rand>
c0004712:	89 f2                	mov    edx,esi
c0004714:	89 f9                	mov    ecx,edi
c0004716:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000471a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000471e:	e8 c1 d4 ff ff       	call   c0001be4 <st_qword>
c0004723:	03 34 24             	add    esi,DWORD PTR [esp]
c0004726:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000472a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000472e:	89 f2                	mov    edx,esi
c0004730:	89 f9                	mov    ecx,edi
c0004732:	83 c2 ff             	add    edx,0xffffffff
c0004735:	83 d1 ff             	adc    ecx,0xffffffff
c0004738:	e8 a7 d4 ff ff       	call   c0001be4 <st_qword>
c000473d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004741:	83 e8 80             	sub    eax,0xffffff80
c0004744:	89 c5                	mov    ebp,eax
c0004746:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000474a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004750:	75 6b                	jne    c00047bd <create_partition+0x282>
c0004752:	45                   	inc    ebp
c0004753:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004757:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000475c:	e8 39 da ff ff       	call   c000219a <crc32>
c0004761:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000476b:	75 e5                	jne    c0004752 <create_partition+0x217>
c000476d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004771:	31 d2                	xor    edx,edx
c0004773:	83 ec 0c             	sub    esp,0xc
c0004776:	c1 ed 09             	shr    ebp,0x9
c0004779:	6a 01                	push   0x1
c000477b:	8d 45 02             	lea    eax,[ebp+0x2]
c000477e:	52                   	push   edx
c000477f:	50                   	push   eax
c0004780:	53                   	push   ebx
c0004781:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004785:	e8 ac d3 ff ff       	call   c0001b36 <disk_write>
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	85 c0                	test   eax,eax
c000478f:	0f 85 d7 fd ff ff    	jne    c000456c <create_partition+0x31>
c0004795:	83 ec 0c             	sub    esp,0xc
c0004798:	31 d2                	xor    edx,edx
c000479a:	6a 01                	push   0x1
c000479c:	89 e8                	mov    eax,ebp
c000479e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00047a2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00047a6:	52                   	push   edx
c00047a7:	50                   	push   eax
c00047a8:	53                   	push   ebx
c00047a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ad:	e8 84 d3 ff ff       	call   c0001b36 <disk_write>
c00047b2:	83 c4 20             	add    esp,0x20
c00047b5:	85 c0                	test   eax,eax
c00047b7:	0f 85 af fd ff ff    	jne    c000456c <create_partition+0x31>
c00047bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047c5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ca:	74 0d                	je     c00047d9 <create_partition+0x29e>
c00047cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047d4:	e9 12 fe ff ff       	jmp    c00045eb <create_partition+0xb0>
c00047d9:	31 d2                	xor    edx,edx
c00047db:	b9 00 02 00 00       	mov    ecx,0x200
c00047e0:	89 d8                	mov    eax,ebx
c00047e2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047e5:	e8 15 d4 ff ff       	call   c0001bff <mem_set>
c00047ea:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047ed:	b9 10 00 00 00       	mov    ecx,0x10
c00047f2:	ba 80 3f 02 c0       	mov    edx,0xc0023f80
c00047f7:	89 d8                	mov    eax,ebx
c00047f9:	e8 ec d3 ff ff       	call   c0001bea <mem_cpy>
c00047fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004802:	8d 43 58             	lea    eax,[ebx+0x58]
c0004805:	f7 d2                	not    edx
c0004807:	e8 d5 d3 ff ff       	call   c0001be1 <st_dword>
c000480c:	8d 43 18             	lea    eax,[ebx+0x18]
c000480f:	31 c9                	xor    ecx,ecx
c0004811:	89 04 24             	mov    DWORD PTR [esp],eax
c0004814:	ba 01 00 00 00       	mov    edx,0x1
c0004819:	e8 c6 d3 ff ff       	call   c0001be4 <st_qword>
c000481e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004822:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004826:	83 c2 ff             	add    edx,0xffffffff
c0004829:	89 e8                	mov    eax,ebp
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 b1 d3 ff ff       	call   c0001be4 <st_qword>
c0004833:	31 c9                	xor    ecx,ecx
c0004835:	8d 43 28             	lea    eax,[ebx+0x28]
c0004838:	ba 22 00 00 00       	mov    edx,0x22
c000483d:	e8 a2 d3 ff ff       	call   c0001be4 <st_qword>
c0004842:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004846:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000484a:	83 c2 de             	add    edx,0xffffffde
c000484d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004850:	83 d1 ff             	adc    ecx,0xffffffff
c0004853:	31 f6                	xor    esi,esi
c0004855:	e8 8a d3 ff ff       	call   c0001be4 <st_qword>
c000485a:	8d 43 54             	lea    eax,[ebx+0x54]
c000485d:	ba 80 00 00 00       	mov    edx,0x80
c0004862:	e8 7a d3 ff ff       	call   c0001be1 <st_dword>
c0004867:	8d 43 50             	lea    eax,[ebx+0x50]
c000486a:	ba 80 00 00 00       	mov    edx,0x80
c000486f:	e8 6d d3 ff ff       	call   c0001be1 <st_dword>
c0004874:	ba 02 00 00 00       	mov    edx,0x2
c0004879:	89 f8                	mov    eax,edi
c000487b:	e8 61 d3 ff ff       	call   c0001be1 <st_dword>
c0004880:	8d 53 38             	lea    edx,[ebx+0x38]
c0004883:	b9 10 00 00 00       	mov    ecx,0x10
c0004888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000488c:	e8 ad d9 ff ff       	call   c000223e <make_rand>
c0004891:	83 c8 ff             	or     eax,0xffffffff
c0004894:	46                   	inc    esi
c0004895:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000489a:	e8 fb d8 ff ff       	call   c000219a <crc32>
c000489f:	83 fe 5c             	cmp    esi,0x5c
c00048a2:	75 f0                	jne    c0004894 <create_partition+0x359>
c00048a4:	f7 d0                	not    eax
c00048a6:	8d 73 10             	lea    esi,[ebx+0x10]
c00048a9:	89 c2                	mov    edx,eax
c00048ab:	89 f0                	mov    eax,esi
c00048ad:	e8 2f d3 ff ff       	call   c0001be1 <st_dword>
c00048b2:	83 ec 0c             	sub    esp,0xc
c00048b5:	6a 01                	push   0x1
c00048b7:	6a 00                	push   0x0
c00048b9:	6a 01                	push   0x1
c00048bb:	53                   	push   ebx
c00048bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c0:	e8 71 d2 ff ff       	call   c0001b36 <disk_write>
c00048c5:	83 c4 20             	add    esp,0x20
c00048c8:	85 c0                	test   eax,eax
c00048ca:	0f 85 9c fc ff ff    	jne    c000456c <create_partition+0x31>
c00048d0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048d4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048d8:	83 c2 ff             	add    edx,0xffffffff
c00048db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048de:	83 d1 ff             	adc    ecx,0xffffffff
c00048e1:	e8 fe d2 ff ff       	call   c0001be4 <st_qword>
c00048e6:	ba 01 00 00 00       	mov    edx,0x1
c00048eb:	31 c9                	xor    ecx,ecx
c00048ed:	89 e8                	mov    eax,ebp
c00048ef:	e8 f0 d2 ff ff       	call   c0001be4 <st_qword>
c00048f4:	89 f8                	mov    eax,edi
c00048f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048fe:	31 ff                	xor    edi,edi
c0004900:	e8 df d2 ff ff       	call   c0001be4 <st_qword>
c0004905:	89 f0                	mov    eax,esi
c0004907:	31 d2                	xor    edx,edx
c0004909:	e8 d3 d2 ff ff       	call   c0001be1 <st_dword>
c000490e:	83 c8 ff             	or     eax,0xffffffff
c0004911:	47                   	inc    edi
c0004912:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004917:	e8 7e d8 ff ff       	call   c000219a <crc32>
c000491c:	83 ff 5c             	cmp    edi,0x5c
c000491f:	75 f0                	jne    c0004911 <create_partition+0x3d6>
c0004921:	f7 d0                	not    eax
c0004923:	89 c2                	mov    edx,eax
c0004925:	89 f0                	mov    eax,esi
c0004927:	e8 b5 d2 ff ff       	call   c0001be1 <st_dword>
c000492c:	83 ec 0c             	sub    esp,0xc
c000492f:	6a 01                	push   0x1
c0004931:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004935:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004939:	83 c0 ff             	add    eax,0xffffffff
c000493c:	83 d2 ff             	adc    edx,0xffffffff
c000493f:	52                   	push   edx
c0004940:	50                   	push   eax
c0004941:	53                   	push   ebx
c0004942:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004946:	e8 eb d1 ff ff       	call   c0001b36 <disk_write>
c000494b:	83 c4 20             	add    esp,0x20
c000494e:	85 c0                	test   eax,eax
c0004950:	0f 85 16 fc ff ff    	jne    c000456c <create_partition+0x31>
c0004956:	31 d2                	xor    edx,edx
c0004958:	89 d8                	mov    eax,ebx
c000495a:	b9 00 02 00 00       	mov    ecx,0x200
c000495f:	e8 9b d2 ff ff       	call   c0001bff <mem_set>
c0004964:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000496a:	b9 10 00 00 00       	mov    ecx,0x10
c000496f:	ba 90 3f 02 c0       	mov    edx,0xc0023f90
c0004974:	e8 71 d2 ff ff       	call   c0001bea <mem_cpy>
c0004979:	e9 21 01 00 00       	jmp    c0004a9f <create_partition+0x564>
c000497e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004982:	b9 05 00 00 00       	mov    ecx,0x5
c0004987:	89 04 24             	mov    DWORD PTR [esp],eax
c000498a:	bf 08 00 00 00       	mov    edi,0x8
c000498f:	89 f8                	mov    eax,edi
c0004991:	31 d2                	xor    edx,edx
c0004993:	0f b6 f0             	movzx  esi,al
c0004996:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004999:	f7 f6                	div    esi
c000499b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00049a0:	76 0a                	jbe    c00049ac <create_partition+0x471>
c00049a2:	d1 e7                	shl    edi,1
c00049a4:	49                   	dec    ecx
c00049a5:	75 e8                	jne    c000498f <create_partition+0x454>
c00049a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00049ac:	b9 00 02 00 00       	mov    ecx,0x200
c00049b1:	31 d2                	xor    edx,edx
c00049b3:	89 d8                	mov    eax,ebx
c00049b5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049bb:	e8 3f d2 ff ff       	call   c0001bff <mem_set>
c00049c0:	b9 64 00 00 00       	mov    ecx,0x64
c00049c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049c8:	31 d2                	xor    edx,edx
c00049ca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049d2:	f7 f1                	div    ecx
c00049d4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049dd:	89 f8                	mov    eax,edi
c00049df:	0f b6 c0             	movzx  eax,al
c00049e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049e6:	e9 80 00 00 00       	jmp    c0004a6b <create_partition+0x530>
c00049eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ee:	29 cf                	sub    edi,ecx
c00049f0:	89 ca                	mov    edx,ecx
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049f9:	e8 e3 d1 ff ff       	call   c0001be1 <st_dword>
c00049fe:	8d 46 04             	lea    eax,[esi+0x4]
c0004a01:	89 fa                	mov    edx,edi
c0004a03:	83 c6 10             	add    esi,0x10
c0004a06:	e8 d6 d1 ff ff       	call   c0001be1 <st_dword>
c0004a0b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004a0f:	31 d2                	xor    edx,edx
c0004a11:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a14:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a18:	89 c8                	mov    eax,ecx
c0004a1a:	01 f9                	add    ecx,edi
c0004a1c:	f7 f5                	div    ebp
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	31 d2                	xor    edx,edx
c0004a22:	45                   	inc    ebp
c0004a23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a27:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a2a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a2d:	89 c2                	mov    edx,eax
c0004a2f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a32:	c1 ea 02             	shr    edx,0x2
c0004a35:	83 e2 c0             	and    edx,0xffffffc0
c0004a38:	09 ea                	or     edx,ebp
c0004a3a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a3f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a42:	31 d2                	xor    edx,edx
c0004a44:	f7 f5                	div    ebp
c0004a46:	89 d7                	mov    edi,edx
c0004a48:	31 d2                	xor    edx,edx
c0004a4a:	47                   	inc    edi
c0004a4b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a4f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a52:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a55:	89 c5                	mov    ebp,eax
c0004a57:	c1 ed 02             	shr    ebp,0x2
c0004a5a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a5d:	09 ef                	or     edi,ebp
c0004a5f:	89 fa                	mov    edx,edi
c0004a61:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a64:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a69:	74 34                	je     c0004a9f <create_partition+0x564>
c0004a6b:	85 c9                	test   ecx,ecx
c0004a6d:	74 30                	je     c0004a9f <create_partition+0x564>
c0004a6f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a72:	76 2b                	jbe    c0004a9f <create_partition+0x564>
c0004a74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a78:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a7c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a7f:	83 ff 64             	cmp    edi,0x64
c0004a82:	76 4b                	jbe    c0004acf <create_partition+0x594>
c0004a84:	89 f8                	mov    eax,edi
c0004a86:	01 c8                	add    eax,ecx
c0004a88:	0f 82 5d ff ff ff    	jb     c00049eb <create_partition+0x4b0>
c0004a8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a91:	0f 87 54 ff ff ff    	ja     c00049eb <create_partition+0x4b0>
c0004a97:	85 ff                	test   edi,edi
c0004a99:	0f 85 51 ff ff ff    	jne    c00049f0 <create_partition+0x4b5>
c0004a9f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004aa5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004aaa:	e8 2e d1 ff ff       	call   c0001bdd <st_word>
c0004aaf:	83 ec 0c             	sub    esp,0xc
c0004ab2:	6a 01                	push   0x1
c0004ab4:	6a 00                	push   0x0
c0004ab6:	6a 00                	push   0x0
c0004ab8:	53                   	push   ebx
c0004ab9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004abd:	e8 74 d0 ff ff       	call   c0001b36 <disk_write>
c0004ac2:	83 c4 20             	add    esp,0x20
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	0f 95 c0             	setne  al
c0004aca:	0f b6 c0             	movzx  eax,al
c0004acd:	eb 0e                	jmp    c0004add <create_partition+0x5a2>
c0004acf:	74 07                	je     c0004ad8 <create_partition+0x59d>
c0004ad1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ad6:	eb ac                	jmp    c0004a84 <create_partition+0x549>
c0004ad8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004adb:	eb a7                	jmp    c0004a84 <create_partition+0x549>
c0004add:	83 c4 5c             	add    esp,0x5c
c0004ae0:	5b                   	pop    ebx
c0004ae1:	5e                   	pop    esi
c0004ae2:	5f                   	pop    edi
c0004ae3:	5d                   	pop    ebp
c0004ae4:	c3                   	ret    

c0004ae5 <get_fileinfo>:
c0004ae5:	55                   	push   ebp
c0004ae6:	57                   	push   edi
c0004ae7:	56                   	push   esi
c0004ae8:	53                   	push   ebx
c0004ae9:	83 ec 1c             	sub    esp,0x1c
c0004aec:	8b 30                	mov    esi,DWORD PTR [eax]
c0004aee:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004af2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004af6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004af9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004afc:	0f 84 dc 01 00 00    	je     c0004cde <get_fileinfo+0x1f9>
c0004b02:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004b05:	75 0f                	jne    c0004b16 <get_fileinfo+0x31>
c0004b07:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004b0a:	83 c4 1c             	add    esp,0x1c
c0004b0d:	5b                   	pop    ebx
c0004b0e:	5e                   	pop    esi
c0004b0f:	5f                   	pop    edi
c0004b10:	5d                   	pop    ebp
c0004b11:	e9 58 d5 ff ff       	jmp    c000206e <get_xfileinfo>
c0004b16:	89 d3                	mov    ebx,edx
c0004b18:	89 c6                	mov    esi,eax
c0004b1a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b1e:	74 6a                	je     c0004b8a <get_fileinfo+0xa5>
c0004b20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b28:	31 ed                	xor    ebp,ebp
c0004b2a:	31 ff                	xor    edi,edi
c0004b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b37:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b3b:	66 85 d2             	test   dx,dx
c0004b3e:	74 3e                	je     c0004b7e <get_fileinfo+0x99>
c0004b40:	66 85 ed             	test   bp,bp
c0004b43:	75 0c                	jne    c0004b51 <get_fileinfo+0x6c>
c0004b45:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b4b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b4f:	76 22                	jbe    c0004b73 <get_fileinfo+0x8e>
c0004b51:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b56:	89 e8                	mov    eax,ebp
c0004b58:	29 f9                	sub    ecx,edi
c0004b5a:	c1 e0 10             	shl    eax,0x10
c0004b5d:	09 d0                	or     eax,edx
c0004b5f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b63:	e8 a3 d1 ff ff       	call   c0001d0b <put_utf>
c0004b68:	84 c0                	test   al,al
c0004b6a:	74 10                	je     c0004b7c <get_fileinfo+0x97>
c0004b6c:	0f b6 c0             	movzx  eax,al
c0004b6f:	31 d2                	xor    edx,edx
c0004b71:	01 c7                	add    edi,eax
c0004b73:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b78:	89 d5                	mov    ebp,edx
c0004b7a:	eb b0                	jmp    c0004b2c <get_fileinfo+0x47>
c0004b7c:	31 ff                	xor    edi,edi
c0004b7e:	66 85 ed             	test   bp,bp
c0004b81:	74 02                	je     c0004b85 <get_fileinfo+0xa0>
c0004b83:	31 ff                	xor    edi,edi
c0004b85:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b8a:	31 ff                	xor    edi,edi
c0004b8c:	31 c9                	xor    ecx,ecx
c0004b8e:	83 f9 0a             	cmp    ecx,0xa
c0004b91:	0f 87 ad 00 00 00    	ja     c0004c44 <get_fileinfo+0x15f>
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b9d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ba1:	66 83 fa 20          	cmp    dx,0x20
c0004ba5:	0f 84 92 00 00 00    	je     c0004c3d <get_fileinfo+0x158>
c0004bab:	66 83 fa 05          	cmp    dx,0x5
c0004baf:	75 05                	jne    c0004bb6 <get_fileinfo+0xd1>
c0004bb1:	ba e5 00 00 00       	mov    edx,0xe5
c0004bb6:	83 ff 0b             	cmp    edi,0xb
c0004bb9:	77 0b                	ja     c0004bc6 <get_fileinfo+0xe1>
c0004bbb:	83 fd 09             	cmp    ebp,0x9
c0004bbe:	75 06                	jne    c0004bc6 <get_fileinfo+0xe1>
c0004bc0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bc5:	47                   	inc    edi
c0004bc6:	0f b7 c2             	movzx  eax,dx
c0004bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bcd:	e8 6d d0 ff ff       	call   c0001c3f <dbc_1st>
c0004bd2:	85 c0                	test   eax,eax
c0004bd4:	74 2f                	je     c0004c05 <get_fileinfo+0x120>
c0004bd6:	83 fd 08             	cmp    ebp,0x8
c0004bd9:	74 2a                	je     c0004c05 <get_fileinfo+0x120>
c0004bdb:	83 fd 0b             	cmp    ebp,0xb
c0004bde:	74 25                	je     c0004c05 <get_fileinfo+0x120>
c0004be0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004be3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004be7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004beb:	e8 52 d0 ff ff       	call   c0001c42 <dbc_2nd>
c0004bf0:	85 c0                	test   eax,eax
c0004bf2:	74 11                	je     c0004c05 <get_fileinfo+0x120>
c0004bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004bf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bfd:	c1 e2 08             	shl    edx,0x8
c0004c00:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004c03:	09 c2                	or     edx,eax
c0004c05:	0f b7 d2             	movzx  edx,dx
c0004c08:	50                   	push   eax
c0004c09:	50                   	push   eax
c0004c0a:	68 b5 01 00 00       	push   0x1b5
c0004c0f:	52                   	push   edx
c0004c10:	e8 87 3a 00 00       	call   c000869c <ff_oem2uni>
c0004c15:	83 c4 10             	add    esp,0x10
c0004c18:	66 85 c0             	test   ax,ax
c0004c1b:	75 04                	jne    c0004c21 <get_fileinfo+0x13c>
c0004c1d:	31 ff                	xor    edi,edi
c0004c1f:	eb 23                	jmp    c0004c44 <get_fileinfo+0x15f>
c0004c21:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c26:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c2a:	29 f9                	sub    ecx,edi
c0004c2c:	0f b7 c0             	movzx  eax,ax
c0004c2f:	e8 d7 d0 ff ff       	call   c0001d0b <put_utf>
c0004c34:	84 c0                	test   al,al
c0004c36:	74 e5                	je     c0004c1d <get_fileinfo+0x138>
c0004c38:	0f b6 c0             	movzx  eax,al
c0004c3b:	01 c7                	add    edi,eax
c0004c3d:	89 e9                	mov    ecx,ebp
c0004c3f:	e9 4a ff ff ff       	jmp    c0004b8e <get_fileinfo+0xa9>
c0004c44:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c49:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c4d:	75 54                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c4f:	85 ff                	test   edi,edi
c0004c51:	75 0b                	jne    c0004c5e <get_fileinfo+0x179>
c0004c53:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c57:	ba 01 00 00 00       	mov    edx,0x1
c0004c5c:	eb 33                	jmp    c0004c91 <get_fileinfo+0x1ac>
c0004c5e:	b1 08                	mov    cl,0x8
c0004c60:	31 d2                	xor    edx,edx
c0004c62:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c68:	84 c0                	test   al,al
c0004c6a:	74 25                	je     c0004c91 <get_fileinfo+0x1ac>
c0004c6c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c70:	74 16                	je     c0004c88 <get_fileinfo+0x1a3>
c0004c72:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c75:	66 83 ff 19          	cmp    di,0x19
c0004c79:	77 0f                	ja     c0004c8a <get_fileinfo+0x1a5>
c0004c7b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c7e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c81:	74 07                	je     c0004c8a <get_fileinfo+0x1a5>
c0004c83:	83 c0 20             	add    eax,0x20
c0004c86:	eb 02                	jmp    c0004c8a <get_fileinfo+0x1a5>
c0004c88:	b1 10                	mov    cl,0x10
c0004c8a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c8e:	42                   	inc    edx
c0004c8f:	eb d1                	jmp    c0004c62 <get_fileinfo+0x17d>
c0004c91:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c96:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c99:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c9d:	75 04                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c9f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ca3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ca6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ca9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004cac:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004caf:	83 c0 1c             	add    eax,0x1c
c0004cb2:	e8 c1 ce ff ff       	call   c0001b78 <ld_dword>
c0004cb7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cbe:	89 03                	mov    DWORD PTR [ebx],eax
c0004cc0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc3:	83 c0 16             	add    eax,0x16
c0004cc6:	e8 a0 ce ff ff       	call   c0001b6b <ld_word>
c0004ccb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ccf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd2:	83 c0 18             	add    eax,0x18
c0004cd5:	e8 91 ce ff ff       	call   c0001b6b <ld_word>
c0004cda:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cde:	83 c4 1c             	add    esp,0x1c
c0004ce1:	5b                   	pop    ebx
c0004ce2:	5e                   	pop    esi
c0004ce3:	5f                   	pop    edi
c0004ce4:	5d                   	pop    ebp
c0004ce5:	c3                   	ret    

c0004ce6 <ld_clust.isra.0>:
c0004ce6:	56                   	push   esi
c0004ce7:	89 c6                	mov    esi,eax
c0004ce9:	53                   	push   ebx
c0004cea:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004ced:	89 d3                	mov    ebx,edx
c0004cef:	e8 77 ce ff ff       	call   c0001b6b <ld_word>
c0004cf4:	0f b7 c8             	movzx  ecx,ax
c0004cf7:	89 f0                	mov    eax,esi
c0004cf9:	3c 03                	cmp    al,0x3
c0004cfb:	75 0d                	jne    c0004d0a <ld_clust.isra.0+0x24>
c0004cfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d00:	e8 66 ce ff ff       	call   c0001b6b <ld_word>
c0004d05:	c1 e0 10             	shl    eax,0x10
c0004d08:	09 c1                	or     ecx,eax
c0004d0a:	89 c8                	mov    eax,ecx
c0004d0c:	5b                   	pop    ebx
c0004d0d:	5e                   	pop    esi
c0004d0e:	c3                   	ret    

c0004d0f <st_clust.isra.1>:
c0004d0f:	56                   	push   esi
c0004d10:	89 c6                	mov    esi,eax
c0004d12:	53                   	push   ebx
c0004d13:	89 d3                	mov    ebx,edx
c0004d15:	0f b7 d1             	movzx  edx,cx
c0004d18:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d1b:	e8 bd ce ff ff       	call   c0001bdd <st_word>
c0004d20:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d23:	75 0f                	jne    c0004d34 <st_clust.isra.1+0x25>
c0004d25:	c1 e9 10             	shr    ecx,0x10
c0004d28:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d2b:	89 ca                	mov    edx,ecx
c0004d2d:	5b                   	pop    ebx
c0004d2e:	5e                   	pop    esi
c0004d2f:	e9 a9 ce ff ff       	jmp    c0001bdd <st_word>
c0004d34:	5b                   	pop    ebx
c0004d35:	5e                   	pop    esi
c0004d36:	c3                   	ret    

c0004d37 <init_alloc_info.isra.2>:
c0004d37:	56                   	push   esi
c0004d38:	53                   	push   ebx
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	89 d3                	mov    ebx,edx
c0004d3d:	51                   	push   ecx
c0004d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d40:	83 c0 34             	add    eax,0x34
c0004d43:	e8 30 ce ff ff       	call   c0001b78 <ld_dword>
c0004d48:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	83 c0 38             	add    eax,0x38
c0004d50:	e8 3b ce ff ff       	call   c0001b90 <ld_qword>
c0004d55:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d58:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d5d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d67:	83 e0 02             	and    eax,0x2
c0004d6a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d6d:	5b                   	pop    ebx
c0004d6e:	5b                   	pop    ebx
c0004d6f:	5e                   	pop    esi
c0004d70:	c3                   	ret    

c0004d71 <follow_path>:
c0004d71:	56                   	push   esi
c0004d72:	53                   	push   ebx
c0004d73:	89 c3                	mov    ebx,eax
c0004d75:	83 ec 14             	sub    esp,0x14
c0004d78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d7c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d82:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d84:	80 fa 5c             	cmp    dl,0x5c
c0004d87:	75 07                	jne    c0004d90 <follow_path+0x1f>
c0004d89:	40                   	inc    eax
c0004d8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8e:	eb ee                	jmp    c0004d7e <follow_path+0xd>
c0004d90:	80 fa 2f             	cmp    dl,0x2f
c0004d93:	74 f4                	je     c0004d89 <follow_path+0x18>
c0004d95:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d9c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004da6:	77 52                	ja     c0004dfa <follow_path+0x89>
c0004da8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004dac:	31 d2                	xor    edx,edx
c0004dae:	89 d8                	mov    eax,ebx
c0004db0:	e8 12 e3 ff ff       	call   c00030c7 <dir_sdi>
c0004db5:	eb 7c                	jmp    c0004e33 <follow_path+0xc2>
c0004db7:	89 d8                	mov    eax,ebx
c0004db9:	e8 6e f2 ff ff       	call   c000402c <dir_find>
c0004dbe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	75 46                	jne    c0004e0b <follow_path+0x9a>
c0004dc5:	80 e2 04             	and    dl,0x4
c0004dc8:	75 69                	jne    c0004e33 <follow_path+0xc2>
c0004dca:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dce:	74 5e                	je     c0004e2e <follow_path+0xbd>
c0004dd0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dd2:	3c 04                	cmp    al,0x4
c0004dd4:	75 41                	jne    c0004e17 <follow_path+0xa6>
c0004dd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dd9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ddd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004de0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004de3:	30 c0                	xor    al,al
c0004de5:	09 d0                	or     eax,edx
c0004de7:	89 da                	mov    edx,ebx
c0004de9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dec:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004def:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004df2:	8d 46 10             	lea    eax,[esi+0x10]
c0004df5:	e8 3d ff ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004dfa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dfe:	89 d8                	mov    eax,ebx
c0004e00:	e8 a9 ed ff ff       	call   c0003bae <create_name>
c0004e05:	85 c0                	test   eax,eax
c0004e07:	74 ae                	je     c0004db7 <follow_path+0x46>
c0004e09:	eb 28                	jmp    c0004e33 <follow_path+0xc2>
c0004e0b:	83 f8 04             	cmp    eax,0x4
c0004e0e:	75 23                	jne    c0004e33 <follow_path+0xc2>
c0004e10:	80 e2 04             	and    dl,0x4
c0004e13:	74 19                	je     c0004e2e <follow_path+0xbd>
c0004e15:	eb 1c                	jmp    c0004e33 <follow_path+0xc2>
c0004e17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e20:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e24:	e8 bd fe ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0004e29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e2c:	eb cc                	jmp    c0004dfa <follow_path+0x89>
c0004e2e:	b8 05 00 00 00       	mov    eax,0x5
c0004e33:	83 c4 14             	add    esp,0x14
c0004e36:	5b                   	pop    ebx
c0004e37:	5e                   	pop    esi
c0004e38:	c3                   	ret    

c0004e39 <f_mount>:
c0004e39:	53                   	push   ebx
c0004e3a:	83 ec 18             	sub    esp,0x18
c0004e3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e4d:	e8 fb d2 ff ff       	call   c000214d <get_ldnumber>
c0004e52:	89 c2                	mov    edx,eax
c0004e54:	b8 0b 00 00 00       	mov    eax,0xb
c0004e59:	85 d2                	test   edx,edx
c0004e5b:	78 39                	js     c0004e96 <f_mount+0x5d>
c0004e5d:	8b 04 95 60 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd74a0]
c0004e64:	85 c0                	test   eax,eax
c0004e66:	74 03                	je     c0004e6b <f_mount+0x32>
c0004e68:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6f:	85 c0                	test   eax,eax
c0004e71:	74 03                	je     c0004e76 <f_mount+0x3d>
c0004e73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7a:	89 04 95 60 8b 02 c0 	mov    DWORD PTR [edx*4-0x3ffd74a0],eax
c0004e81:	31 c0                	xor    eax,eax
c0004e83:	84 db                	test   bl,bl
c0004e85:	74 0f                	je     c0004e96 <f_mount+0x5d>
c0004e87:	31 c9                	xor    ecx,ecx
c0004e89:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e91:	e8 65 d7 ff ff       	call   c00025fb <mount_volume>
c0004e96:	83 c4 18             	add    esp,0x18
c0004e99:	5b                   	pop    ebx
c0004e9a:	c3                   	ret    

c0004e9b <f_open>:
c0004e9b:	55                   	push   ebp
c0004e9c:	bd 09 00 00 00       	mov    ebp,0x9
c0004ea1:	57                   	push   edi
c0004ea2:	56                   	push   esi
c0004ea3:	53                   	push   ebx
c0004ea4:	83 ec 7c             	sub    esp,0x7c
c0004ea7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004eae:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004eb5:	85 db                	test   ebx,ebx
c0004eb7:	0f 84 10 04 00 00    	je     c00052cd <f_open+0x432>
c0004ebd:	89 fe                	mov    esi,edi
c0004ebf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ec3:	83 e6 3f             	and    esi,0x3f
c0004ec6:	89 f0                	mov    eax,esi
c0004ec8:	0f b6 c8             	movzx  ecx,al
c0004ecb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ed2:	e8 24 d7 ff ff       	call   c00025fb <mount_volume>
c0004ed7:	89 c5                	mov    ebp,eax
c0004ed9:	85 c0                	test   eax,eax
c0004edb:	0f 85 e6 03 00 00    	jne    c00052c7 <f_open+0x42c>
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eee:	83 ec 0c             	sub    esp,0xc
c0004ef1:	68 60 04 00 00       	push   0x460
c0004ef6:	e8 d9 36 00 00       	call   c00085d4 <ff_memalloc>
c0004efb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eff:	83 c4 10             	add    esp,0x10
c0004f02:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004f07:	0f 84 c0 03 00 00    	je     c00052cd <f_open+0x432>
c0004f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f15:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f1b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f1e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f21:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f2c:	e8 40 fe ff ff       	call   c0004d71 <follow_path>
c0004f31:	89 c5                	mov    ebp,eax
c0004f33:	85 c0                	test   eax,eax
c0004f35:	75 0c                	jne    c0004f43 <f_open+0xa8>
c0004f37:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f3c:	79 05                	jns    c0004f43 <f_open+0xa8>
c0004f3e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f43:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f49:	0f 84 84 01 00 00    	je     c00050d3 <f_open+0x238>
c0004f4f:	85 ed                	test   ebp,ebp
c0004f51:	74 20                	je     c0004f73 <f_open+0xd8>
c0004f53:	83 fd 04             	cmp    ebp,0x4
c0004f56:	0f 85 58 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f60:	83 ce 08             	or     esi,0x8
c0004f63:	e8 8a f2 ff ff       	call   c00041f2 <dir_register>
c0004f68:	89 c5                	mov    ebp,eax
c0004f6a:	85 c0                	test   eax,eax
c0004f6c:	74 2f                	je     c0004f9d <f_open+0x102>
c0004f6e:	e9 41 03 00 00       	jmp    c00052b4 <f_open+0x419>
c0004f73:	bd 07 00 00 00       	mov    ebp,0x7
c0004f78:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f7d:	0f 85 31 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f83:	bd 08 00 00 00       	mov    ebp,0x8
c0004f88:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f8e:	0f 85 20 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f94:	83 e7 08             	and    edi,0x8
c0004f97:	0f 84 65 01 00 00    	je     c0005102 <f_open+0x267>
c0004f9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa1:	8a 02                	mov    al,BYTE PTR [edx]
c0004fa3:	3c 04                	cmp    al,0x4
c0004fa5:	0f 85 97 00 00 00    	jne    c0005042 <f_open+0x1a7>
c0004fab:	8d 42 10             	lea    eax,[edx+0x10]
c0004fae:	89 13                	mov    DWORD PTR [ebx],edx
c0004fb0:	89 da                	mov    edx,ebx
c0004fb2:	e8 80 fd ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004fb7:	31 d2                	xor    edx,edx
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc5:	83 c0 02             	add    eax,0x2
c0004fc8:	e8 32 cc ff ff       	call   c0001bff <mem_set>
c0004fcd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fd2:	31 d2                	xor    edx,edx
c0004fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fdb:	83 c0 26             	add    eax,0x26
c0004fde:	e8 1c cc ff ff       	call   c0001bff <mem_set>
c0004fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fea:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fee:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ff3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff6:	83 c0 08             	add    eax,0x8
c0004ff9:	e8 e3 cb ff ff       	call   c0001be1 <st_dword>
c0004ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005002:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005005:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005009:	8d 44 24 24          	lea    eax,[esp+0x24]
c000500d:	e8 b7 ea ff ff       	call   c0003ac9 <store_xdir>
c0005012:	89 c5                	mov    ebp,eax
c0005014:	85 c0                	test   eax,eax
c0005016:	0f 85 98 02 00 00    	jne    c00052b4 <f_open+0x419>
c000501c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000501f:	85 d2                	test   edx,edx
c0005021:	0f 84 db 00 00 00    	je     c0005102 <f_open+0x267>
c0005027:	31 c9                	xor    ecx,ecx
c0005029:	89 d8                	mov    eax,ebx
c000502b:	e8 8e e3 ff ff       	call   c00033be <remove_chain>
c0005030:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005034:	89 c5                	mov    ebp,eax
c0005036:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005039:	48                   	dec    eax
c000503a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000503d:	e9 b8 00 00 00       	jmp    c00050fa <f_open+0x25f>
c0005042:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005046:	89 ea                	mov    edx,ebp
c0005048:	e8 99 fc ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000504d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005052:	89 c7                	mov    edi,eax
c0005054:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005057:	e8 85 cb ff ff       	call   c0001be1 <st_dword>
c000505c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005060:	31 c9                	xor    ecx,ecx
c0005062:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000506e:	e8 9c fc ff ff       	call   c0004d0f <st_clust.isra.1>
c0005073:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005077:	31 d2                	xor    edx,edx
c0005079:	83 c0 1c             	add    eax,0x1c
c000507c:	e8 60 cb ff ff       	call   c0001be1 <st_dword>
c0005081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005085:	85 ff                	test   edi,edi
c0005087:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000508b:	74 75                	je     c0005102 <f_open+0x267>
c000508d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005091:	31 c9                	xor    ecx,ecx
c0005093:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005096:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a1:	89 fa                	mov    edx,edi
c00050a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a7:	e8 12 e3 ff ff       	call   c00033be <remove_chain>
c00050ac:	89 c5                	mov    ebp,eax
c00050ae:	85 c0                	test   eax,eax
c00050b0:	0f 85 fe 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c2:	4f                   	dec    edi
c00050c3:	e8 81 d2 ff ff       	call   c0002349 <move_window>
c00050c8:	89 c5                	mov    ebp,eax
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050d1:	eb 27                	jmp    c00050fa <f_open+0x25f>
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	0f 85 d9 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050db:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050df:	bd 04 00 00 00       	mov    ebp,0x4
c00050e4:	a8 10                	test   al,0x10
c00050e6:	0f 85 c8 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050ec:	83 e7 02             	and    edi,0x2
c00050ef:	74 11                	je     c0005102 <f_open+0x267>
c00050f1:	bd 07 00 00 00       	mov    ebp,0x7
c00050f6:	a8 01                	test   al,0x1
c00050f8:	eb 02                	jmp    c00050fc <f_open+0x261>
c00050fa:	85 ed                	test   ebp,ebp
c00050fc:	0f 85 b2 01 00 00    	jne    c00052b4 <f_open+0x419>
c0005102:	f7 c6 08 00 00 00    	test   esi,0x8
c0005108:	74 03                	je     c000510d <f_open+0x272>
c000510a:	83 ce 40             	or     esi,0x40
c000510d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005111:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005114:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005117:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000511a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000511d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005121:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005124:	8a 02                	mov    al,BYTE PTR [edx]
c0005126:	3c 04                	cmp    al,0x4
c0005128:	75 2a                	jne    c0005154 <f_open+0x2b9>
c000512a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000512e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005133:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000513a:	30 c0                	xor    al,al
c000513c:	09 c8                	or     eax,ecx
c000513e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005141:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005145:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005148:	8d 42 10             	lea    eax,[edx+0x10]
c000514b:	89 da                	mov    edx,ebx
c000514d:	e8 e5 fb ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005152:	eb 1c                	jmp    c0005170 <f_open+0x2d5>
c0005154:	89 fa                	mov    edx,edi
c0005156:	e8 8b fb ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000515b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000515e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005161:	e8 12 ca ff ff       	call   c0001b78 <ld_dword>
c0005166:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000516d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005174:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000517b:	89 03                	mov    DWORD PTR [ebx],eax
c000517d:	31 d2                	xor    edx,edx
c000517f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005183:	b9 00 02 00 00       	mov    ecx,0x200
c0005188:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000518c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005190:	89 f0                	mov    eax,esi
c0005192:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005199:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000519c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00051a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00051a6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00051ad:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051b8:	e8 42 ca ff ff       	call   c0001bff <mem_set>
c00051bd:	83 e6 20             	and    esi,0x20
c00051c0:	75 07                	jne    c00051c9 <f_open+0x32e>
c00051c2:	31 ed                	xor    ebp,ebp
c00051c4:	e9 eb 00 00 00       	jmp    c00052b4 <f_open+0x419>
c00051c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051cc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051db:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051df:	74 e1                	je     c00051c2 <f_open+0x327>
c00051e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051e9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051ec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051f3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051f6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051fa:	31 ff                	xor    edi,edi
c00051fc:	c1 e5 09             	shl    ebp,0x9
c00051ff:	89 ee                	mov    esi,ebp
c0005201:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005205:	89 f8                	mov    eax,edi
c0005207:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000520b:	73 22                	jae    c000522f <f_open+0x394>
c000520d:	89 d8                	mov    eax,ebx
c000520f:	e8 bd dc ff ff       	call   c0002ed1 <get_fat>
c0005214:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005218:	89 c2                	mov    edx,eax
c000521a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000521e:	83 f8 01             	cmp    eax,0x1
c0005221:	76 10                	jbe    c0005233 <f_open+0x398>
c0005223:	83 f8 ff             	cmp    eax,0xffffffff
c0005226:	75 d9                	jne    c0005201 <f_open+0x366>
c0005228:	bd 01 00 00 00       	mov    ebp,0x1
c000522d:	eb 09                	jmp    c0005238 <f_open+0x39d>
c000522f:	31 ed                	xor    ebp,ebp
c0005231:	eb 05                	jmp    c0005238 <f_open+0x39d>
c0005233:	bd 02 00 00 00       	mov    ebp,0x2
c0005238:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000523b:	85 ed                	test   ebp,ebp
c000523d:	75 75                	jne    c00052b4 <f_open+0x419>
c000523f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005243:	25 ff 01 00 00       	and    eax,0x1ff
c0005248:	0f 84 74 ff ff ff    	je     c00051c2 <f_open+0x327>
c000524e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005252:	bd 02 00 00 00       	mov    ebp,0x2
c0005257:	89 c8                	mov    eax,ecx
c0005259:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000525d:	e8 a2 cb ff ff       	call   c0001e04 <clst2sect>
c0005262:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005266:	89 d7                	mov    edi,edx
c0005268:	09 c7                	or     edi,eax
c000526a:	74 48                	je     c00052b4 <f_open+0x419>
c000526c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005270:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005274:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000527c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005280:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005284:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005288:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000528b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000528f:	83 ec 0c             	sub    esp,0xc
c0005292:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005295:	6a 01                	push   0x1
c0005297:	52                   	push   edx
c0005298:	50                   	push   eax
c0005299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000529d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052a1:	50                   	push   eax
c00052a2:	e8 79 c8 ff ff       	call   c0001b20 <disk_read>
c00052a7:	83 c4 20             	add    esp,0x20
c00052aa:	85 c0                	test   eax,eax
c00052ac:	0f 95 c0             	setne  al
c00052af:	0f b6 c0             	movzx  eax,al
c00052b2:	89 c5                	mov    ebp,eax
c00052b4:	83 ec 0c             	sub    esp,0xc
c00052b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052bb:	e8 2c 33 00 00       	call   c00085ec <ff_memfree>
c00052c0:	83 c4 10             	add    esp,0x10
c00052c3:	85 ed                	test   ebp,ebp
c00052c5:	74 06                	je     c00052cd <f_open+0x432>
c00052c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052cd:	83 c4 7c             	add    esp,0x7c
c00052d0:	89 e8                	mov    eax,ebp
c00052d2:	5b                   	pop    ebx
c00052d3:	5e                   	pop    esi
c00052d4:	5f                   	pop    edi
c00052d5:	5d                   	pop    ebp
c00052d6:	c3                   	ret    

c00052d7 <f_read>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052ec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052f0:	89 d8                	mov    eax,ebx
c00052f2:	e8 77 cf ff ff       	call   c000226e <validate>
c00052f7:	89 c5                	mov    ebp,eax
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 4c 02 00 00    	jne    c000554d <f_read+0x276>
c0005301:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005305:	85 ed                	test   ebp,ebp
c0005307:	0f 85 40 02 00 00    	jne    c000554d <f_read+0x276>
c000530d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005311:	0f 84 31 02 00 00    	je     c0005548 <f_read+0x271>
c0005317:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000531a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000531d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005320:	bf 00 00 00 00       	mov    edi,0x0
c0005325:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005328:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000532c:	89 d1                	mov    ecx,edx
c000532e:	19 f9                	sbb    ecx,edi
c0005330:	0f 83 cf 00 00 00    	jae    c0005405 <f_read+0x12e>
c0005336:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000533a:	e9 c6 00 00 00       	jmp    c0005405 <f_read+0x12e>
c000533f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005342:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005345:	89 d0                	mov    eax,edx
c0005347:	25 ff 01 00 00       	and    eax,0x1ff
c000534c:	0f 85 c9 01 00 00    	jne    c000551b <f_read+0x244>
c0005352:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005356:	89 d6                	mov    esi,edx
c0005358:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000535c:	89 cf                	mov    edi,ecx
c000535e:	48                   	dec    eax
c000535f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005363:	21 f0                	and    eax,esi
c0005365:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005369:	0f 84 a6 00 00 00    	je     c0005415 <f_read+0x13e>
c000536f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005373:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005376:	89 c8                	mov    eax,ecx
c0005378:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000537b:	e8 84 ca ff ff       	call   c0001e04 <clst2sect>
c0005380:	89 d7                	mov    edi,edx
c0005382:	09 c7                	or     edi,eax
c0005384:	0f 84 b4 00 00 00    	je     c000543e <f_read+0x167>
c000538a:	31 ff                	xor    edi,edi
c000538c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005390:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005393:	01 c6                	add    esi,eax
c0005395:	11 d7                	adc    edi,edx
c0005397:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000539f:	0f 86 fd 00 00 00    	jbe    c00054a2 <f_read+0x1cb>
c00053a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00053ad:	c1 e8 09             	shr    eax,0x9
c00053b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053b7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053ba:	39 c2                	cmp    edx,eax
c00053bc:	76 07                	jbe    c00053c5 <f_read+0xee>
c00053be:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053cc:	57                   	push   edi
c00053cd:	56                   	push   esi
c00053ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053d6:	50                   	push   eax
c00053d7:	e8 44 c7 ff ff       	call   c0001b20 <disk_read>
c00053dc:	83 c4 20             	add    esp,0x20
c00053df:	85 c0                	test   eax,eax
c00053e1:	75 6e                	jne    c0005451 <f_read+0x17a>
c00053e3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053e7:	78 7e                	js     c0005467 <f_read+0x190>
c00053e9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053ec:	c1 e6 09             	shl    esi,0x9
c00053ef:	31 ff                	xor    edi,edi
c00053f1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053fd:	01 30                	add    DWORD PTR [eax],esi
c00053ff:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005402:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005405:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000540a:	0f 85 2f ff ff ff    	jne    c000533f <f_read+0x68>
c0005410:	e9 38 01 00 00       	jmp    c000554d <f_read+0x276>
c0005415:	89 c8                	mov    eax,ecx
c0005417:	09 d0                	or     eax,edx
c0005419:	75 05                	jne    c0005420 <f_read+0x149>
c000541b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000541e:	eb 19                	jmp    c0005439 <f_read+0x162>
c0005420:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005424:	74 09                	je     c000542f <f_read+0x158>
c0005426:	89 d8                	mov    eax,ebx
c0005428:	e8 f8 c9 ff ff       	call   c0001e25 <clmt_clust>
c000542d:	eb 0a                	jmp    c0005439 <f_read+0x162>
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 98 da ff ff       	call   c0002ed1 <get_fat>
c0005439:	83 f8 01             	cmp    eax,0x1
c000543c:	77 0e                	ja     c000544c <f_read+0x175>
c000543e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005442:	bd 02 00 00 00       	mov    ebp,0x2
c0005447:	e9 01 01 00 00       	jmp    c000554d <f_read+0x276>
c000544c:	83 f8 ff             	cmp    eax,0xffffffff
c000544f:	75 0e                	jne    c000545f <f_read+0x188>
c0005451:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005455:	bd 01 00 00 00       	mov    ebp,0x1
c000545a:	e9 ee 00 00 00       	jmp    c000554d <f_read+0x276>
c000545f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005462:	e9 08 ff ff ff       	jmp    c000536f <f_read+0x98>
c0005467:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000546a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000546d:	29 f0                	sub    eax,esi
c000546f:	19 fa                	sbb    edx,edi
c0005471:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005474:	89 d7                	mov    edi,edx
c0005476:	ba 00 00 00 00       	mov    edx,0x0
c000547b:	89 f9                	mov    ecx,edi
c000547d:	19 d1                	sbb    ecx,edx
c000547f:	0f 83 64 ff ff ff    	jae    c00053e9 <f_read+0x112>
c0005485:	89 c7                	mov    edi,eax
c0005487:	8d 53 50             	lea    edx,[ebx+0x50]
c000548a:	c1 e7 09             	shl    edi,0x9
c000548d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005491:	b9 00 02 00 00       	mov    ecx,0x200
c0005496:	01 f8                	add    eax,edi
c0005498:	e8 4d c7 ff ff       	call   c0001bea <mem_cpy>
c000549d:	e9 47 ff ff ff       	jmp    c00053e9 <f_read+0x112>
c00054a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00054af:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054b3:	75 05                	jne    c00054ba <f_read+0x1e3>
c00054b5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054b8:	74 5b                	je     c0005515 <f_read+0x23e>
c00054ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00054bd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c5:	79 2a                	jns    c00054f1 <f_read+0x21a>
c00054c7:	83 ec 0c             	sub    esp,0xc
c00054ca:	6a 01                	push   0x1
c00054cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054dc:	50                   	push   eax
c00054dd:	e8 54 c6 ff ff       	call   c0001b36 <disk_write>
c00054e2:	83 c4 20             	add    esp,0x20
c00054e5:	85 c0                	test   eax,eax
c00054e7:	0f 85 64 ff ff ff    	jne    c0005451 <f_read+0x17a>
c00054ed:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054f1:	83 ec 0c             	sub    esp,0xc
c00054f4:	6a 01                	push   0x1
c00054f6:	57                   	push   edi
c00054f7:	56                   	push   esi
c00054f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005500:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005504:	50                   	push   eax
c0005505:	e8 16 c6 ff ff       	call   c0001b20 <disk_read>
c000550a:	83 c4 20             	add    esp,0x20
c000550d:	85 c0                	test   eax,eax
c000550f:	0f 85 3c ff ff ff    	jne    c0005451 <f_read+0x17a>
c0005515:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005518:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000551b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000551e:	ba 00 02 00 00       	mov    edx,0x200
c0005523:	25 ff 01 00 00       	and    eax,0x1ff
c0005528:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000552c:	29 c2                	sub    edx,eax
c000552e:	39 d6                	cmp    esi,edx
c0005530:	76 02                	jbe    c0005534 <f_read+0x25d>
c0005532:	89 d6                	mov    esi,edx
c0005534:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005538:	89 f1                	mov    ecx,esi
c000553a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000553e:	e8 a7 c6 ff ff       	call   c0001bea <mem_cpy>
c0005543:	e9 a7 fe ff ff       	jmp    c00053ef <f_read+0x118>
c0005548:	bd 07 00 00 00       	mov    ebp,0x7
c000554d:	83 c4 2c             	add    esp,0x2c
c0005550:	89 e8                	mov    eax,ebp
c0005552:	5b                   	pop    ebx
c0005553:	5e                   	pop    esi
c0005554:	5f                   	pop    edi
c0005555:	5d                   	pop    ebp
c0005556:	c3                   	ret    

c0005557 <f_write>:
c0005557:	55                   	push   ebp
c0005558:	57                   	push   edi
c0005559:	56                   	push   esi
c000555a:	53                   	push   ebx
c000555b:	83 ec 2c             	sub    esp,0x2c
c000555e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005562:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005566:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000556c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005570:	89 d8                	mov    eax,ebx
c0005572:	e8 f7 cc ff ff       	call   c000226e <validate>
c0005577:	89 c5                	mov    ebp,eax
c0005579:	85 c0                	test   eax,eax
c000557b:	0f 85 86 02 00 00    	jne    c0005807 <f_write+0x2b0>
c0005581:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005585:	85 ed                	test   ebp,ebp
c0005587:	0f 85 7a 02 00 00    	jne    c0005807 <f_write+0x2b0>
c000558d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005591:	0f 84 6b 02 00 00    	je     c0005802 <f_write+0x2ab>
c0005597:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000559b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000559e:	0f 84 43 01 00 00    	je     c00056e7 <f_write+0x190>
c00055a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055a7:	89 c1                	mov    ecx,eax
c00055a9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00055ad:	0f 83 34 01 00 00    	jae    c00056e7 <f_write+0x190>
c00055b3:	f7 d0                	not    eax
c00055b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055b9:	e9 29 01 00 00       	jmp    c00056e7 <f_write+0x190>
c00055be:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055c1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055c4:	89 d0                	mov    eax,edx
c00055c6:	25 ff 01 00 00       	and    eax,0x1ff
c00055cb:	0f 85 00 02 00 00    	jne    c00057d1 <f_write+0x27a>
c00055d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055d5:	89 d6                	mov    esi,edx
c00055d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055db:	89 cf                	mov    edi,ecx
c00055dd:	48                   	dec    eax
c00055de:	0f ac fe 09          	shrd   esi,edi,0x9
c00055e2:	21 f0                	and    eax,esi
c00055e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055e8:	0f 84 06 01 00 00    	je     c00056f4 <f_write+0x19d>
c00055ee:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055f2:	0f 88 6e 01 00 00    	js     c0005766 <f_write+0x20f>
c00055f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ff:	89 c8                	mov    eax,ecx
c0005601:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005605:	e8 fa c7 ff ff       	call   c0001e04 <clst2sect>
c000560a:	89 d1                	mov    ecx,edx
c000560c:	09 c1                	or     ecx,eax
c000560e:	0f 84 1c 01 00 00    	je     c0005730 <f_write+0x1d9>
c0005614:	31 ff                	xor    edi,edi
c0005616:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000561a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000561e:	01 c6                	add    esi,eax
c0005620:	11 d7                	adc    edi,edx
c0005622:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000562a:	0f 86 63 01 00 00    	jbe    c0005793 <f_write+0x23c>
c0005630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005634:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005638:	c1 e8 09             	shr    eax,0x9
c000563b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005643:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005647:	39 c2                	cmp    edx,eax
c0005649:	76 08                	jbe    c0005653 <f_write+0xfc>
c000564b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000564f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005653:	83 ec 0c             	sub    esp,0xc
c0005656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000565a:	57                   	push   edi
c000565b:	56                   	push   esi
c000565c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005660:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 cc c4 ff ff       	call   c0001b36 <disk_write>
c000566a:	83 c4 20             	add    esp,0x20
c000566d:	85 c0                	test   eax,eax
c000566f:	0f 85 ce 00 00 00    	jne    c0005743 <f_write+0x1ec>
c0005675:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005678:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000567b:	29 f0                	sub    eax,esi
c000567d:	19 fa                	sbb    edx,edi
c000567f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005683:	89 d7                	mov    edi,edx
c0005685:	ba 00 00 00 00       	mov    edx,0x0
c000568a:	89 f9                	mov    ecx,edi
c000568c:	19 d1                	sbb    ecx,edx
c000568e:	73 1c                	jae    c00056ac <f_write+0x155>
c0005690:	89 c7                	mov    edi,eax
c0005692:	b9 00 02 00 00       	mov    ecx,0x200
c0005697:	c1 e7 09             	shl    edi,0x9
c000569a:	8d 43 50             	lea    eax,[ebx+0x50]
c000569d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00056a1:	89 fa                	mov    edx,edi
c00056a3:	e8 42 c5 ff ff       	call   c0001bea <mem_cpy>
c00056a8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00056ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056b0:	c1 e6 09             	shl    esi,0x9
c00056b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056b7:	31 ff                	xor    edi,edi
c00056b9:	01 30                	add    DWORD PTR [eax],esi
c00056bb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056bf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056c6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056cc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056cf:	89 c1                	mov    ecx,eax
c00056d1:	39 f2                	cmp    edx,esi
c00056d3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056d6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056d9:	19 f9                	sbb    ecx,edi
c00056db:	73 04                	jae    c00056e1 <f_write+0x18a>
c00056dd:	89 f2                	mov    edx,esi
c00056df:	89 f8                	mov    eax,edi
c00056e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056ec:	0f 85 cc fe ff ff    	jne    c00055be <f_write+0x67>
c00056f2:	eb 2e                	jmp    c0005722 <f_write+0x1cb>
c00056f4:	89 c8                	mov    eax,ecx
c00056f6:	09 d0                	or     eax,edx
c00056f8:	75 0b                	jne    c0005705 <f_write+0x1ae>
c00056fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056fd:	31 d2                	xor    edx,edx
c00056ff:	85 c0                	test   eax,eax
c0005701:	75 28                	jne    c000572b <f_write+0x1d4>
c0005703:	eb 12                	jmp    c0005717 <f_write+0x1c0>
c0005705:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005709:	74 09                	je     c0005714 <f_write+0x1bd>
c000570b:	89 d8                	mov    eax,ebx
c000570d:	e8 13 c7 ff ff       	call   c0001e25 <clmt_clust>
c0005712:	eb 0a                	jmp    c000571e <f_write+0x1c7>
c0005714:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005717:	89 d8                	mov    eax,ebx
c0005719:	e8 a1 da ff ff       	call   c00031bf <create_chain>
c000571e:	85 c0                	test   eax,eax
c0005720:	75 09                	jne    c000572b <f_write+0x1d4>
c0005722:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005726:	e9 dc 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000572b:	83 f8 01             	cmp    eax,0x1
c000572e:	75 0e                	jne    c000573e <f_write+0x1e7>
c0005730:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005734:	bd 02 00 00 00       	mov    ebp,0x2
c0005739:	e9 c9 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000573e:	83 f8 ff             	cmp    eax,0xffffffff
c0005741:	75 0e                	jne    c0005751 <f_write+0x1fa>
c0005743:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005747:	bd 01 00 00 00       	mov    ebp,0x1
c000574c:	e9 b6 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c0005751:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005754:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005758:	0f 85 90 fe ff ff    	jne    c00055ee <f_write+0x97>
c000575e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005761:	e9 88 fe ff ff       	jmp    c00055ee <f_write+0x97>
c0005766:	83 ec 0c             	sub    esp,0xc
c0005769:	8d 43 50             	lea    eax,[ebx+0x50]
c000576c:	6a 01                	push   0x1
c000576e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005771:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005774:	50                   	push   eax
c0005775:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005779:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000577d:	50                   	push   eax
c000577e:	e8 b3 c3 ff ff       	call   c0001b36 <disk_write>
c0005783:	83 c4 20             	add    esp,0x20
c0005786:	85 c0                	test   eax,eax
c0005788:	75 b9                	jne    c0005743 <f_write+0x1ec>
c000578a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000578e:	e9 65 fe ff ff       	jmp    c00055f8 <f_write+0xa1>
c0005793:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005796:	75 05                	jne    c000579d <f_write+0x246>
c0005798:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000579b:	74 2e                	je     c00057cb <f_write+0x274>
c000579d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00057a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00057a6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00057a9:	73 20                	jae    c00057cb <f_write+0x274>
c00057ab:	83 ec 0c             	sub    esp,0xc
c00057ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b1:	6a 01                	push   0x1
c00057b3:	57                   	push   edi
c00057b4:	56                   	push   esi
c00057b5:	50                   	push   eax
c00057b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057ba:	50                   	push   eax
c00057bb:	e8 60 c3 ff ff       	call   c0001b20 <disk_read>
c00057c0:	83 c4 20             	add    esp,0x20
c00057c3:	85 c0                	test   eax,eax
c00057c5:	0f 85 78 ff ff ff    	jne    c0005743 <f_write+0x1ec>
c00057cb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057ce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057d1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057d4:	ba 00 02 00 00       	mov    edx,0x200
c00057d9:	25 ff 01 00 00       	and    eax,0x1ff
c00057de:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057e2:	29 c2                	sub    edx,eax
c00057e4:	39 d6                	cmp    esi,edx
c00057e6:	76 02                	jbe    c00057ea <f_write+0x293>
c00057e8:	89 d6                	mov    esi,edx
c00057ea:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057ee:	89 f1                	mov    ecx,esi
c00057f0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057f4:	e8 f1 c3 ff ff       	call   c0001bea <mem_cpy>
c00057f9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057fd:	e9 b1 fe ff ff       	jmp    c00056b3 <f_write+0x15c>
c0005802:	bd 07 00 00 00       	mov    ebp,0x7
c0005807:	83 c4 2c             	add    esp,0x2c
c000580a:	89 e8                	mov    eax,ebp
c000580c:	5b                   	pop    ebx
c000580d:	5e                   	pop    esi
c000580e:	5f                   	pop    edi
c000580f:	5d                   	pop    ebp
c0005810:	c3                   	ret    

c0005811 <f_sync>:
c0005811:	56                   	push   esi
c0005812:	53                   	push   ebx
c0005813:	83 ec 64             	sub    esp,0x64
c0005816:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000581a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000581e:	89 d8                	mov    eax,ebx
c0005820:	e8 49 ca ff ff       	call   c000226e <validate>
c0005825:	85 c0                	test   eax,eax
c0005827:	0f 85 ba 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000582d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005830:	f6 c2 40             	test   dl,0x40
c0005833:	0f 84 ae 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c0005839:	84 d2                	test   dl,dl
c000583b:	79 33                	jns    c0005870 <f_sync+0x5f>
c000583d:	83 ec 0c             	sub    esp,0xc
c0005840:	8d 43 50             	lea    eax,[ebx+0x50]
c0005843:	6a 01                	push   0x1
c0005845:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005848:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584b:	50                   	push   eax
c000584c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005850:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005854:	50                   	push   eax
c0005855:	e8 dc c2 ff ff       	call   c0001b36 <disk_write>
c000585a:	83 c4 20             	add    esp,0x20
c000585d:	89 c2                	mov    edx,eax
c000585f:	b8 01 00 00 00       	mov    eax,0x1
c0005864:	85 d2                	test   edx,edx
c0005866:	0f 85 7b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000586c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005874:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005877:	0f 85 11 01 00 00    	jne    c000598e <f_sync+0x17d>
c000587d:	89 d8                	mov    eax,ebx
c000587f:	e8 13 d6 ff ff       	call   c0002e97 <fill_first_frag>
c0005884:	85 c0                	test   eax,eax
c0005886:	0f 85 5b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000588c:	83 c9 ff             	or     ecx,0xffffffff
c000588f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005892:	89 d8                	mov    eax,ebx
c0005894:	e8 c9 d5 ff ff       	call   c0002e62 <fill_last_frag>
c0005899:	85 c0                	test   eax,eax
c000589b:	0f 85 46 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	68 60 04 00 00       	push   0x460
c00058a9:	e8 26 2d 00 00       	call   c00085d4 <ff_memalloc>
c00058ae:	83 c4 10             	add    esp,0x10
c00058b1:	89 c6                	mov    esi,eax
c00058b3:	b8 11 00 00 00       	mov    eax,0x11
c00058b8:	85 f6                	test   esi,esi
c00058ba:	0f 84 27 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c00058c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ca:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058d0:	89 da                	mov    edx,ebx
c00058d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058d6:	e8 af df ff ff       	call   c000388a <load_obj_xdir>
c00058db:	85 c0                	test   eax,eax
c00058dd:	0f 85 95 00 00 00    	jne    c0005978 <f_sync+0x167>
c00058e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058ea:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058ee:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058f1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058f4:	83 ca 01             	or     edx,0x1
c00058f7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005900:	83 c0 34             	add    eax,0x34
c0005903:	e8 d9 c2 ff ff       	call   c0001be1 <st_dword>
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005915:	83 c0 38             	add    eax,0x38
c0005918:	e8 c7 c2 ff ff       	call   c0001be4 <st_qword>
c000591d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005924:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005927:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592a:	83 c0 28             	add    eax,0x28
c000592d:	e8 b2 c2 ff ff       	call   c0001be4 <st_qword>
c0005932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005936:	ba 00 00 21 50       	mov    edx,0x50210000
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 0c             	add    eax,0xc
c0005941:	e8 9b c2 ff ff       	call   c0001be1 <st_dword>
c0005946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000594d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005951:	31 d2                	xor    edx,edx
c0005953:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005956:	83 c0 10             	add    eax,0x10
c0005959:	e8 83 c2 ff ff       	call   c0001be1 <st_dword>
c000595e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005962:	e8 62 e1 ff ff       	call   c0003ac9 <store_xdir>
c0005967:	85 c0                	test   eax,eax
c0005969:	75 0d                	jne    c0005978 <f_sync+0x167>
c000596b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596f:	e8 00 eb ff ff       	call   c0004474 <sync_fs>
c0005974:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000597c:	83 ec 0c             	sub    esp,0xc
c000597f:	56                   	push   esi
c0005980:	e8 67 2c 00 00       	call   c00085ec <ff_memfree>
c0005985:	83 c4 10             	add    esp,0x10
c0005988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000598c:	eb 59                	jmp    c00059e7 <f_sync+0x1d6>
c000598e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005991:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005994:	e8 b0 c9 ff ff       	call   c0002349 <move_window>
c0005999:	85 c0                	test   eax,eax
c000599b:	75 4a                	jne    c00059e7 <f_sync+0x1d6>
c000599d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00059a0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00059a4:	89 f2                	mov    edx,esi
c00059a6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00059a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00059ab:	e8 5f f3 ff ff       	call   c0004d0f <st_clust.isra.1>
c00059b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059b3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059b6:	e8 26 c2 ff ff       	call   c0001be1 <st_dword>
c00059bb:	8d 46 16             	lea    eax,[esi+0x16]
c00059be:	ba 00 00 21 50       	mov    edx,0x50210000
c00059c3:	e8 19 c2 ff ff       	call   c0001be1 <st_dword>
c00059c8:	8d 46 12             	lea    eax,[esi+0x12]
c00059cb:	31 d2                	xor    edx,edx
c00059cd:	e8 0b c2 ff ff       	call   c0001bdd <st_word>
c00059d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059d6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059de:	e8 91 ea ff ff       	call   c0004474 <sync_fs>
c00059e3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059e7:	83 c4 64             	add    esp,0x64
c00059ea:	5b                   	pop    ebx
c00059eb:	5e                   	pop    esi
c00059ec:	c3                   	ret    

c00059ed <f_close>:
c00059ed:	53                   	push   ebx
c00059ee:	83 ec 24             	sub    esp,0x24
c00059f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059f5:	53                   	push   ebx
c00059f6:	e8 16 fe ff ff       	call   c0005811 <f_sync>
c00059fb:	83 c4 10             	add    esp,0x10
c00059fe:	85 c0                	test   eax,eax
c0005a00:	75 15                	jne    c0005a17 <f_close+0x2a>
c0005a02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005a06:	89 d8                	mov    eax,ebx
c0005a08:	e8 61 c8 ff ff       	call   c000226e <validate>
c0005a0d:	85 c0                	test   eax,eax
c0005a0f:	75 06                	jne    c0005a17 <f_close+0x2a>
c0005a11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a17:	83 c4 18             	add    esp,0x18
c0005a1a:	5b                   	pop    ebx
c0005a1b:	c3                   	ret    

c0005a1c <f_lseek>:
c0005a1c:	55                   	push   ebp
c0005a1d:	57                   	push   edi
c0005a1e:	56                   	push   esi
c0005a1f:	53                   	push   ebx
c0005a20:	83 ec 3c             	sub    esp,0x3c
c0005a23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a2b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a36:	89 d8                	mov    eax,ebx
c0005a38:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a3c:	e8 2d c8 ff ff       	call   c000226e <validate>
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 7a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a4d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a55:	85 c0                	test   eax,eax
c0005a57:	0f 85 6a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a61:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a64:	74 0c                	je     c0005a72 <f_lseek+0x56>
c0005a66:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a69:	85 c0                	test   eax,eax
c0005a6b:	75 1f                	jne    c0005a8c <f_lseek+0x70>
c0005a6d:	e9 b5 01 00 00       	jmp    c0005c27 <f_lseek+0x20b>
c0005a72:	83 c9 ff             	or     ecx,0xffffffff
c0005a75:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a78:	89 d8                	mov    eax,ebx
c0005a7a:	e8 e3 d3 ff ff       	call   c0002e62 <fill_last_frag>
c0005a7f:	85 c0                	test   eax,eax
c0005a81:	74 e3                	je     c0005a66 <f_lseek+0x4a>
c0005a83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a87:	e9 3b 04 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005a8c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a91:	0f 85 ac 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005a97:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a9b:	0f 85 a2 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005aa1:	8d 78 04             	lea    edi,[eax+0x4]
c0005aa4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005aa9:	be 02 00 00 00       	mov    esi,0x2
c0005aae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab2:	85 ed                	test   ebp,ebp
c0005ab4:	74 73                	je     c0005b29 <f_lseek+0x10d>
c0005ab6:	89 e9                	mov    ecx,ebp
c0005ab8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005abf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ac2:	89 ca                	mov    edx,ecx
c0005ac4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ac8:	89 d8                	mov    eax,ebx
c0005aca:	e8 02 d4 ff ff       	call   c0002ed1 <get_fat>
c0005acf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ad3:	83 f8 01             	cmp    eax,0x1
c0005ad6:	77 11                	ja     c0005ae9 <f_lseek+0xcd>
c0005ad8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005adc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ae4:	e9 de 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ae9:	83 f8 ff             	cmp    eax,0xffffffff
c0005aec:	75 11                	jne    c0005aff <f_lseek+0xe3>
c0005aee:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005af2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005afa:	e9 c8 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005aff:	8d 51 01             	lea    edx,[ecx+0x1]
c0005b02:	89 c1                	mov    ecx,eax
c0005b04:	39 c2                	cmp    edx,eax
c0005b06:	74 b7                	je     c0005abf <f_lseek+0xa3>
c0005b08:	83 c6 02             	add    esi,0x2
c0005b0b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005b0f:	72 0b                	jb     c0005b1c <f_lseek+0x100>
c0005b11:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b14:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b17:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b19:	83 c7 08             	add    edi,0x8
c0005b1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b20:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b23:	76 04                	jbe    c0005b29 <f_lseek+0x10d>
c0005b25:	89 c5                	mov    ebp,eax
c0005b27:	eb 8d                	jmp    c0005ab6 <f_lseek+0x9a>
c0005b29:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b2c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b30:	89 30                	mov    DWORD PTR [eax],esi
c0005b32:	0f 87 87 03 00 00    	ja     c0005ebf <f_lseek+0x4a3>
c0005b38:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b3e:	e9 84 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005b43:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b46:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b55:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b60:	73 0f                	jae    c0005b71 <f_lseek+0x155>
c0005b62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b7c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b83:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b87:	0f 84 3a 03 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005b8d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b91:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b95:	83 c6 ff             	add    esi,0xffffffff
c0005b98:	89 d8                	mov    eax,ebx
c0005b9a:	83 d7 ff             	adc    edi,0xffffffff
c0005b9d:	89 f2                	mov    edx,esi
c0005b9f:	89 f9                	mov    ecx,edi
c0005ba1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ba5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ba8:	e8 78 c2 ff ff       	call   c0001e25 <clmt_clust>
c0005bad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005bb1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bb4:	89 c2                	mov    edx,eax
c0005bb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bba:	89 c8                	mov    eax,ecx
c0005bbc:	e8 43 c2 ff ff       	call   c0001e04 <clst2sect>
c0005bc1:	89 d7                	mov    edi,edx
c0005bc3:	09 c7                	or     edi,eax
c0005bc5:	0f 84 0d ff ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005bcb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bcf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bd5:	0f 84 ec 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005bdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005be3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005be6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bee:	4d                   	dec    ebp
c0005bef:	31 ff                	xor    edi,edi
c0005bf1:	21 ee                	and    esi,ebp
c0005bf3:	01 c6                	add    esi,eax
c0005bf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005bf8:	11 d7                	adc    edi,edx
c0005bfa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bfd:	39 fa                	cmp    edx,edi
c0005bff:	75 08                	jne    c0005c09 <f_lseek+0x1ed>
c0005c01:	39 f0                	cmp    eax,esi
c0005c03:	0f 84 be 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005c09:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c0c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c10:	0f 89 80 02 00 00    	jns    c0005e96 <f_lseek+0x47a>
c0005c16:	83 ec 0c             	sub    esp,0xc
c0005c19:	6a 01                	push   0x1
c0005c1b:	52                   	push   edx
c0005c1c:	50                   	push   eax
c0005c1d:	55                   	push   ebp
c0005c1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c22:	e9 5a 02 00 00       	jmp    c0005e81 <f_lseek+0x465>
c0005c27:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c2b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c2e:	74 16                	je     c0005c46 <f_lseek+0x22a>
c0005c30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c35:	76 0f                	jbe    c0005c46 <f_lseek+0x22a>
c0005c37:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c46:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c4c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c4f:	89 c7                	mov    edi,eax
c0005c51:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c55:	73 0d                	jae    c0005c64 <f_lseek+0x248>
c0005c57:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c5b:	75 07                	jne    c0005c64 <f_lseek+0x248>
c0005c5d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c6a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c6e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c75:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c7c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c7f:	75 09                	jne    c0005c8a <f_lseek+0x26e>
c0005c81:	31 f6                	xor    esi,esi
c0005c83:	31 ff                	xor    edi,edi
c0005c85:	e9 af 01 00 00       	jmp    c0005e39 <f_lseek+0x41d>
c0005c8a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c8e:	89 d7                	mov    edi,edx
c0005c90:	c1 e1 09             	shl    ecx,0x9
c0005c93:	09 c7                	or     edi,eax
c0005c95:	89 cd                	mov    ebp,ecx
c0005c97:	74 6d                	je     c0005d06 <f_lseek+0x2ea>
c0005c99:	83 c0 ff             	add    eax,0xffffffff
c0005c9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ca0:	83 d2 ff             	adc    edx,0xffffffff
c0005ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005caa:	83 c0 ff             	add    eax,0xffffffff
c0005cad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005cb1:	83 d2 ff             	adc    edx,0xffffffff
c0005cb4:	31 ff                	xor    edi,edi
c0005cb6:	57                   	push   edi
c0005cb7:	51                   	push   ecx
c0005cb8:	52                   	push   edx
c0005cb9:	50                   	push   eax
c0005cba:	e8 e1 d2 01 00       	call   c0022fa0 <__udivdi3>
c0005cbf:	83 c4 10             	add    esp,0x10
c0005cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cca:	57                   	push   edi
c0005ccb:	55                   	push   ebp
c0005ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd4:	e8 c7 d2 01 00       	call   c0022fa0 <__udivdi3>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005ce0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ce4:	19 d1                	sbb    ecx,edx
c0005ce6:	72 1e                	jb     c0005d06 <f_lseek+0x2ea>
c0005ce8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cec:	89 e9                	mov    ecx,ebp
c0005cee:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cf1:	f7 d9                	neg    ecx
c0005cf3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cf6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cfa:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005cfd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005d00:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005d04:	eb 28                	jmp    c0005d2e <f_lseek+0x312>
c0005d06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d09:	85 c0                	test   eax,eax
c0005d0b:	75 1e                	jne    c0005d2b <f_lseek+0x30f>
c0005d0d:	31 d2                	xor    edx,edx
c0005d0f:	89 d8                	mov    eax,ebx
c0005d11:	e8 a9 d4 ff ff       	call   c00031bf <create_chain>
c0005d16:	83 f8 01             	cmp    eax,0x1
c0005d19:	0f 84 b9 fd ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005d1f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d22:	0f 84 c6 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005d28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d2b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d2e:	85 c0                	test   eax,eax
c0005d30:	0f 84 4b ff ff ff    	je     c0005c81 <f_lseek+0x265>
c0005d36:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d42:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d4c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	0f 83 9d 00 00 00    	jae    c0005df6 <f_lseek+0x3da>
c0005d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d61:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d64:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d68:	01 f2                	add    edx,esi
c0005d6a:	11 f9                	adc    ecx,edi
c0005d6c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d74:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d77:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d7a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d7d:	f6 c1 02             	test   cl,0x2
c0005d80:	74 35                	je     c0005db7 <f_lseek+0x39b>
c0005d82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d86:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d89:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d8c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d90:	73 16                	jae    c0005da8 <f_lseek+0x38c>
c0005d92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d96:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d9a:	88 ca                	mov    dl,cl
c0005d9c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d9f:	83 ca 40             	or     edx,0x40
c0005da2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005da5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005da8:	89 c2                	mov    edx,eax
c0005daa:	89 d8                	mov    eax,ebx
c0005dac:	e8 0e d4 ff ff       	call   c00031bf <create_chain>
c0005db1:	85 c0                	test   eax,eax
c0005db3:	75 0b                	jne    c0005dc0 <f_lseek+0x3a4>
c0005db5:	eb 30                	jmp    c0005de7 <f_lseek+0x3cb>
c0005db7:	89 c2                	mov    edx,eax
c0005db9:	89 d8                	mov    eax,ebx
c0005dbb:	e8 11 d1 ff ff       	call   c0002ed1 <get_fat>
c0005dc0:	83 f8 ff             	cmp    eax,0xffffffff
c0005dc3:	0f 84 25 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005dc9:	83 f8 01             	cmp    eax,0x1
c0005dcc:	0f 86 06 fd ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005dd2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dd6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dd9:	0f 86 f9 fc ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005ddf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005de2:	e9 5b ff ff ff       	jmp    c0005d42 <f_lseek+0x326>
c0005de7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005df6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005df9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005dfd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005e00:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005e03:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005e06:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005e0c:	0f 84 6f fe ff ff    	je     c0005c81 <f_lseek+0x265>
c0005e12:	89 c2                	mov    edx,eax
c0005e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e18:	e8 e7 bf ff ff       	call   c0001e04 <clst2sect>
c0005e1d:	89 d7                	mov    edi,edx
c0005e1f:	09 c7                	or     edi,eax
c0005e21:	0f 84 b1 fc ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005e27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e2e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e32:	c1 ef 09             	shr    edi,0x9
c0005e35:	01 c6                	add    esi,eax
c0005e37:	11 d7                	adc    edi,edx
c0005e39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e3f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e42:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e45:	19 d1                	sbb    ecx,edx
c0005e47:	73 0a                	jae    c0005e53 <f_lseek+0x437>
c0005e49:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e4c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e4f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e53:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e58:	74 6d                	je     c0005ec7 <f_lseek+0x4ab>
c0005e5a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e5d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e60:	39 fa                	cmp    edx,edi
c0005e62:	75 04                	jne    c0005e68 <f_lseek+0x44c>
c0005e64:	39 f0                	cmp    eax,esi
c0005e66:	74 5f                	je     c0005ec7 <f_lseek+0x4ab>
c0005e68:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e6b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e6f:	79 25                	jns    c0005e96 <f_lseek+0x47a>
c0005e71:	83 ec 0c             	sub    esp,0xc
c0005e74:	6a 01                	push   0x1
c0005e76:	52                   	push   edx
c0005e77:	50                   	push   eax
c0005e78:	55                   	push   ebp
c0005e79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e7d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e81:	50                   	push   eax
c0005e82:	e8 af bc ff ff       	call   c0001b36 <disk_write>
c0005e87:	83 c4 20             	add    esp,0x20
c0005e8a:	85 c0                	test   eax,eax
c0005e8c:	0f 85 5c fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005e92:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e96:	83 ec 0c             	sub    esp,0xc
c0005e99:	6a 01                	push   0x1
c0005e9b:	57                   	push   edi
c0005e9c:	56                   	push   esi
c0005e9d:	55                   	push   ebp
c0005e9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ea2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ea6:	50                   	push   eax
c0005ea7:	e8 74 bc ff ff       	call   c0001b20 <disk_read>
c0005eac:	83 c4 20             	add    esp,0x20
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	0f 85 37 fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005eb7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ebd:	eb 08                	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ebf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ecb:	83 c4 3c             	add    esp,0x3c
c0005ece:	5b                   	pop    ebx
c0005ecf:	5e                   	pop    esi
c0005ed0:	5f                   	pop    edi
c0005ed1:	5d                   	pop    ebp
c0005ed2:	c3                   	ret    

c0005ed3 <f_opendir>:
c0005ed3:	56                   	push   esi
c0005ed4:	b8 09 00 00 00       	mov    eax,0x9
c0005ed9:	53                   	push   ebx
c0005eda:	83 ec 24             	sub    esp,0x24
c0005edd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee1:	85 db                	test   ebx,ebx
c0005ee3:	0f 84 e6 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005ee9:	31 c9                	xor    ecx,ecx
c0005eeb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eef:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ef3:	e8 03 c7 ff ff       	call   c00025fb <mount_volume>
c0005ef8:	85 c0                	test   eax,eax
c0005efa:	0f 85 c9 00 00 00    	jne    c0005fc9 <f_opendir+0xf6>
c0005f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f04:	83 ec 0c             	sub    esp,0xc
c0005f07:	89 03                	mov    DWORD PTR [ebx],eax
c0005f09:	68 60 04 00 00       	push   0x460
c0005f0e:	e8 c1 26 00 00       	call   c00085d4 <ff_memalloc>
c0005f13:	83 c4 10             	add    esp,0x10
c0005f16:	89 c6                	mov    esi,eax
c0005f18:	b8 11 00 00 00       	mov    eax,0x11
c0005f1d:	85 f6                	test   esi,esi
c0005f1f:	0f 84 aa 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f29:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f2f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f39:	89 d8                	mov    eax,ebx
c0005f3b:	e8 31 ee ff ff       	call   c0004d71 <follow_path>
c0005f40:	85 c0                	test   eax,eax
c0005f42:	75 61                	jne    c0005fa5 <f_opendir+0xd2>
c0005f44:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f48:	78 46                	js     c0005f90 <f_opendir+0xbd>
c0005f4a:	b8 05 00 00 00       	mov    eax,0x5
c0005f4f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f53:	74 50                	je     c0005fa5 <f_opendir+0xd2>
c0005f55:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f59:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f5b:	3c 04                	cmp    al,0x4
c0005f5d:	75 26                	jne    c0005f85 <f_opendir+0xb2>
c0005f5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f62:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f65:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f68:	30 d2                	xor    dl,dl
c0005f6a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f6e:	09 c2                	or     edx,eax
c0005f70:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f73:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f76:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f79:	89 da                	mov    edx,ebx
c0005f7b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f7e:	e8 b4 ed ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005f83:	eb 0b                	jmp    c0005f90 <f_opendir+0xbd>
c0005f85:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f88:	e8 59 ed ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0005f8d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f94:	31 d2                	xor    edx,edx
c0005f96:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f9a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f9e:	89 d8                	mov    eax,ebx
c0005fa0:	e8 22 d1 ff ff       	call   c00030c7 <dir_sdi>
c0005fa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fa9:	83 ec 0c             	sub    esp,0xc
c0005fac:	56                   	push   esi
c0005fad:	e8 3a 26 00 00       	call   c00085ec <ff_memfree>
c0005fb2:	83 c4 10             	add    esp,0x10
c0005fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb9:	83 f8 04             	cmp    eax,0x4
c0005fbc:	74 06                	je     c0005fc4 <f_opendir+0xf1>
c0005fbe:	85 c0                	test   eax,eax
c0005fc0:	74 0d                	je     c0005fcf <f_opendir+0xfc>
c0005fc2:	eb 05                	jmp    c0005fc9 <f_opendir+0xf6>
c0005fc4:	b8 05 00 00 00       	mov    eax,0x5
c0005fc9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fcf:	83 c4 24             	add    esp,0x24
c0005fd2:	5b                   	pop    ebx
c0005fd3:	5e                   	pop    esi
c0005fd4:	c3                   	ret    

c0005fd5 <f_closedir>:
c0005fd5:	53                   	push   ebx
c0005fd6:	83 ec 18             	sub    esp,0x18
c0005fd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fdd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fe1:	89 d8                	mov    eax,ebx
c0005fe3:	e8 86 c2 ff ff       	call   c000226e <validate>
c0005fe8:	85 c0                	test   eax,eax
c0005fea:	75 06                	jne    c0005ff2 <f_closedir+0x1d>
c0005fec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ff2:	83 c4 18             	add    esp,0x18
c0005ff5:	5b                   	pop    ebx
c0005ff6:	c3                   	ret    

c0005ff7 <f_readdir>:
c0005ff7:	57                   	push   edi
c0005ff8:	56                   	push   esi
c0005ff9:	53                   	push   ebx
c0005ffa:	83 ec 20             	sub    esp,0x20
c0005ffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006001:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006009:	89 d8                	mov    eax,ebx
c000600b:	e8 5e c2 ff ff       	call   c000226e <validate>
c0006010:	85 c0                	test   eax,eax
c0006012:	75 77                	jne    c000608b <f_readdir+0x94>
c0006014:	85 ff                	test   edi,edi
c0006016:	75 0b                	jne    c0006023 <f_readdir+0x2c>
c0006018:	31 d2                	xor    edx,edx
c000601a:	89 d8                	mov    eax,ebx
c000601c:	e8 a6 d0 ff ff       	call   c00030c7 <dir_sdi>
c0006021:	eb 68                	jmp    c000608b <f_readdir+0x94>
c0006023:	83 ec 0c             	sub    esp,0xc
c0006026:	68 60 04 00 00       	push   0x460
c000602b:	e8 a4 25 00 00       	call   c00085d4 <ff_memalloc>
c0006030:	83 c4 10             	add    esp,0x10
c0006033:	89 c6                	mov    esi,eax
c0006035:	b8 11 00 00 00       	mov    eax,0x11
c000603a:	85 f6                	test   esi,esi
c000603c:	74 4d                	je     c000608b <f_readdir+0x94>
c000603e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006042:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006048:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000604b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000604e:	31 d2                	xor    edx,edx
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 80 d8 ff ff       	call   c00038d7 <dir_read>
c0006057:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000605c:	75 19                	jne    c0006077 <f_readdir+0x80>
c000605e:	89 fa                	mov    edx,edi
c0006060:	89 d8                	mov    eax,ebx
c0006062:	e8 7e ea ff ff       	call   c0004ae5 <get_fileinfo>
c0006067:	31 d2                	xor    edx,edx
c0006069:	89 d8                	mov    eax,ebx
c000606b:	e8 af d5 ff ff       	call   c000361f <dir_next>
c0006070:	83 f8 04             	cmp    eax,0x4
c0006073:	75 02                	jne    c0006077 <f_readdir+0x80>
c0006075:	31 c0                	xor    eax,eax
c0006077:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000607b:	83 ec 0c             	sub    esp,0xc
c000607e:	56                   	push   esi
c000607f:	e8 68 25 00 00       	call   c00085ec <ff_memfree>
c0006084:	83 c4 10             	add    esp,0x10
c0006087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000608b:	83 c4 20             	add    esp,0x20
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	5f                   	pop    edi
c0006091:	c3                   	ret    

c0006092 <f_stat>:
c0006092:	57                   	push   edi
c0006093:	31 c9                	xor    ecx,ecx
c0006095:	56                   	push   esi
c0006096:	53                   	push   ebx
c0006097:	83 ec 50             	sub    esp,0x50
c000609a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000609e:	8d 54 24 04          	lea    edx,[esp+0x4]
c00060a2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00060a6:	e8 50 c5 ff ff       	call   c00025fb <mount_volume>
c00060ab:	89 c3                	mov    ebx,eax
c00060ad:	85 c0                	test   eax,eax
c00060af:	75 67                	jne    c0006118 <f_stat+0x86>
c00060b1:	83 ec 0c             	sub    esp,0xc
c00060b4:	bb 11 00 00 00       	mov    ebx,0x11
c00060b9:	68 60 04 00 00       	push   0x460
c00060be:	e8 11 25 00 00       	call   c00085d4 <ff_memalloc>
c00060c3:	83 c4 10             	add    esp,0x10
c00060c6:	89 c6                	mov    esi,eax
c00060c8:	85 c0                	test   eax,eax
c00060ca:	74 4c                	je     c0006118 <f_stat+0x86>
c00060cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060d0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060d6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060dc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060e0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e4:	e8 88 ec ff ff       	call   c0004d71 <follow_path>
c00060e9:	89 c3                	mov    ebx,eax
c00060eb:	85 c0                	test   eax,eax
c00060ed:	75 1d                	jne    c000610c <f_stat+0x7a>
c00060ef:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060f4:	78 11                	js     c0006107 <f_stat+0x75>
c00060f6:	85 ff                	test   edi,edi
c00060f8:	74 12                	je     c000610c <f_stat+0x7a>
c00060fa:	89 fa                	mov    edx,edi
c00060fc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006100:	e8 e0 e9 ff ff       	call   c0004ae5 <get_fileinfo>
c0006105:	eb 05                	jmp    c000610c <f_stat+0x7a>
c0006107:	bb 06 00 00 00       	mov    ebx,0x6
c000610c:	83 ec 0c             	sub    esp,0xc
c000610f:	56                   	push   esi
c0006110:	e8 d7 24 00 00       	call   c00085ec <ff_memfree>
c0006115:	83 c4 10             	add    esp,0x10
c0006118:	83 c4 50             	add    esp,0x50
c000611b:	89 d8                	mov    eax,ebx
c000611d:	5b                   	pop    ebx
c000611e:	5e                   	pop    esi
c000611f:	5f                   	pop    edi
c0006120:	c3                   	ret    

c0006121 <f_getfree>:
c0006121:	55                   	push   ebp
c0006122:	31 c9                	xor    ecx,ecx
c0006124:	57                   	push   edi
c0006125:	56                   	push   esi
c0006126:	53                   	push   ebx
c0006127:	83 ec 5c             	sub    esp,0x5c
c000612a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000612e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006132:	e8 c4 c4 ff ff       	call   c00025fb <mount_volume>
c0006137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000613b:	85 c0                	test   eax,eax
c000613d:	0f 85 9d 01 00 00    	jne    c00062e0 <f_getfree+0x1bf>
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000614b:	89 02                	mov    DWORD PTR [edx],eax
c000614d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006150:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006153:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006156:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000615a:	39 f2                	cmp    edx,esi
c000615c:	77 0b                	ja     c0006169 <f_getfree+0x48>
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 10                	mov    DWORD PTR [eax],edx
c0006164:	e9 77 01 00 00       	jmp    c00062e0 <f_getfree+0x1bf>
c0006169:	8a 10                	mov    dl,BYTE PTR [eax]
c000616b:	80 fa 01             	cmp    dl,0x1
c000616e:	75 3a                	jne    c00061aa <f_getfree+0x89>
c0006170:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006174:	be 02 00 00 00       	mov    esi,0x2
c0006179:	31 db                	xor    ebx,ebx
c000617b:	89 f2                	mov    edx,esi
c000617d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006181:	e8 4b cd ff ff       	call   c0002ed1 <get_fat>
c0006186:	83 f8 ff             	cmp    eax,0xffffffff
c0006189:	0f 84 28 01 00 00    	je     c00062b7 <f_getfree+0x196>
c000618f:	83 f8 01             	cmp    eax,0x1
c0006192:	0f 84 29 01 00 00    	je     c00062c1 <f_getfree+0x1a0>
c0006198:	83 d3 00             	adc    ebx,0x0
c000619b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000619f:	46                   	inc    esi
c00061a0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00061a3:	77 d6                	ja     c000617b <f_getfree+0x5a>
c00061a5:	e9 25 01 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c00061aa:	80 fa 04             	cmp    dl,0x4
c00061ad:	0f 85 88 00 00 00    	jne    c000623b <f_getfree+0x11a>
c00061b3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061b6:	31 ed                	xor    ebp,ebp
c00061b8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061c3:	31 db                	xor    ebx,ebx
c00061c5:	85 ed                	test   ebp,ebp
c00061c7:	75 3f                	jne    c0006208 <f_getfree+0xe7>
c00061c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061d1:	83 c0 01             	add    eax,0x1
c00061d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061d8:	83 d2 00             	adc    edx,0x0
c00061db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061eb:	e8 59 c1 ff ff       	call   c0002349 <move_window>
c00061f0:	85 c0                	test   eax,eax
c00061f2:	0f 85 d3 00 00 00    	jne    c00062cb <f_getfree+0x1aa>
c00061f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006200:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006204:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006208:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000620c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000620f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006213:	89 cf                	mov    edi,ecx
c0006215:	85 f6                	test   esi,esi
c0006217:	74 12                	je     c000622b <f_getfree+0x10a>
c0006219:	88 c1                	mov    cl,al
c000621b:	83 e1 01             	and    ecx,0x1
c000621e:	80 f9 01             	cmp    cl,0x1
c0006221:	83 d3 00             	adc    ebx,0x0
c0006224:	d0 e8                	shr    al,1
c0006226:	4e                   	dec    esi
c0006227:	39 fe                	cmp    esi,edi
c0006229:	75 ea                	jne    c0006215 <f_getfree+0xf4>
c000622b:	45                   	inc    ebp
c000622c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006232:	85 f6                	test   esi,esi
c0006234:	75 8f                	jne    c00061c5 <f_getfree+0xa4>
c0006236:	e9 94 00 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c000623b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000623e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006241:	31 f6                	xor    esi,esi
c0006243:	31 db                	xor    ebx,ebx
c0006245:	85 f6                	test   esi,esi
c0006247:	75 1b                	jne    c0006264 <f_getfree+0x143>
c0006249:	89 d7                	mov    edi,edx
c000624b:	89 cd                	mov    ebp,ecx
c000624d:	83 c7 01             	add    edi,0x1
c0006250:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006254:	83 d5 00             	adc    ebp,0x0
c0006257:	e8 ed c0 ff ff       	call   c0002349 <move_window>
c000625c:	85 c0                	test   eax,eax
c000625e:	75 6b                	jne    c00062cb <f_getfree+0x1aa>
c0006260:	89 fa                	mov    edx,edi
c0006262:	89 e9                	mov    ecx,ebp
c0006264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006268:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000626c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006270:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006273:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006277:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000627b:	75 11                	jne    c000628e <f_getfree+0x16d>
c000627d:	e8 e9 b8 ff ff       	call   c0001b6b <ld_word>
c0006282:	66 83 f8 01          	cmp    ax,0x1
c0006286:	83 d3 00             	adc    ebx,0x0
c0006289:	83 c6 02             	add    esi,0x2
c000628c:	eb 13                	jmp    c00062a1 <f_getfree+0x180>
c000628e:	e8 e5 b8 ff ff       	call   c0001b78 <ld_dword>
c0006293:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006298:	83 f8 01             	cmp    eax,0x1
c000629b:	83 d3 00             	adc    ebx,0x0
c000629e:	83 c6 04             	add    esi,0x4
c00062a1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00062a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00062ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00062af:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062b3:	75 90                	jne    c0006245 <f_getfree+0x124>
c00062b5:	eb 18                	jmp    c00062cf <f_getfree+0x1ae>
c00062b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062bf:	eb 0e                	jmp    c00062cf <f_getfree+0x1ae>
c00062c1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062c9:	eb 04                	jmp    c00062cf <f_getfree+0x1ae>
c00062cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062d3:	89 18                	mov    DWORD PTR [eax],ebx
c00062d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062d9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062dc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062e4:	83 c4 5c             	add    esp,0x5c
c00062e7:	5b                   	pop    ebx
c00062e8:	5e                   	pop    esi
c00062e9:	5f                   	pop    edi
c00062ea:	5d                   	pop    ebp
c00062eb:	c3                   	ret    

c00062ec <f_truncate>:
c00062ec:	56                   	push   esi
c00062ed:	53                   	push   ebx
c00062ee:	83 ec 14             	sub    esp,0x14
c00062f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062f9:	89 d8                	mov    eax,ebx
c00062fb:	e8 6e bf ff ff       	call   c000226e <validate>
c0006300:	89 c6                	mov    esi,eax
c0006302:	85 c0                	test   eax,eax
c0006304:	0f 85 d2 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c000630a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000630e:	85 f6                	test   esi,esi
c0006310:	0f 85 c6 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c0006316:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000631a:	0f 84 b7 00 00 00    	je     c00063d7 <f_truncate+0xeb>
c0006320:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006323:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006326:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006329:	89 d1                	mov    ecx,edx
c000632b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000632e:	0f 83 a8 00 00 00    	jae    c00063dc <f_truncate+0xf0>
c0006334:	09 c2                	or     edx,eax
c0006336:	75 15                	jne    c000634d <f_truncate+0x61>
c0006338:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000633b:	31 c9                	xor    ecx,ecx
c000633d:	89 d8                	mov    eax,ebx
c000633f:	e8 7a d0 ff ff       	call   c00033be <remove_chain>
c0006344:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000634b:	eb 35                	jmp    c0006382 <f_truncate+0x96>
c000634d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006350:	89 d8                	mov    eax,ebx
c0006352:	e8 7a cb ff ff       	call   c0002ed1 <get_fat>
c0006357:	89 c2                	mov    edx,eax
c0006359:	b8 01 00 00 00       	mov    eax,0x1
c000635e:	83 fa ff             	cmp    edx,0xffffffff
c0006361:	74 1f                	je     c0006382 <f_truncate+0x96>
c0006363:	b8 02 00 00 00       	mov    eax,0x2
c0006368:	83 fa 01             	cmp    edx,0x1
c000636b:	74 15                	je     c0006382 <f_truncate+0x96>
c000636d:	31 c0                	xor    eax,eax
c000636f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006373:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006376:	76 0a                	jbe    c0006382 <f_truncate+0x96>
c0006378:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000637b:	89 d8                	mov    eax,ebx
c000637d:	e8 3c d0 ff ff       	call   c00033be <remove_chain>
c0006382:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006385:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006388:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000638b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000638e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006391:	83 ca 40             	or     edx,0x40
c0006394:	85 c0                	test   eax,eax
c0006396:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006399:	75 35                	jne    c00063d0 <f_truncate+0xe4>
c000639b:	84 d2                	test   dl,dl
c000639d:	79 3d                	jns    c00063dc <f_truncate+0xf0>
c000639f:	83 ec 0c             	sub    esp,0xc
c00063a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00063a5:	6a 01                	push   0x1
c00063a7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00063aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00063ad:	50                   	push   eax
c00063ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063b2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063b6:	50                   	push   eax
c00063b7:	e8 7a b7 ff ff       	call   c0001b36 <disk_write>
c00063bc:	83 c4 20             	add    esp,0x20
c00063bf:	85 c0                	test   eax,eax
c00063c1:	75 08                	jne    c00063cb <f_truncate+0xdf>
c00063c3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063c7:	31 f6                	xor    esi,esi
c00063c9:	eb 11                	jmp    c00063dc <f_truncate+0xf0>
c00063cb:	b8 01 00 00 00       	mov    eax,0x1
c00063d0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063d3:	89 c6                	mov    esi,eax
c00063d5:	eb 05                	jmp    c00063dc <f_truncate+0xf0>
c00063d7:	be 07 00 00 00       	mov    esi,0x7
c00063dc:	89 f0                	mov    eax,esi
c00063de:	83 c4 14             	add    esp,0x14
c00063e1:	5b                   	pop    ebx
c00063e2:	5e                   	pop    esi
c00063e3:	c3                   	ret    

c00063e4 <f_unlink>:
c00063e4:	56                   	push   esi
c00063e5:	b9 02 00 00 00       	mov    ecx,0x2
c00063ea:	53                   	push   ebx
c00063eb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063f1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063f5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063fc:	e8 fa c1 ff ff       	call   c00025fb <mount_volume>
c0006401:	85 c0                	test   eax,eax
c0006403:	0f 85 55 01 00 00    	jne    c000655e <f_unlink+0x17a>
c0006409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000640d:	83 ec 0c             	sub    esp,0xc
c0006410:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006414:	68 60 04 00 00       	push   0x460
c0006419:	e8 b6 21 00 00       	call   c00085d4 <ff_memalloc>
c000641e:	83 c4 10             	add    esp,0x10
c0006421:	89 c3                	mov    ebx,eax
c0006423:	b8 11 00 00 00       	mov    eax,0x11
c0006428:	85 db                	test   ebx,ebx
c000642a:	0f 84 2e 01 00 00    	je     c000655e <f_unlink+0x17a>
c0006430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006434:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000643a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000643d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006440:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006447:	8d 44 24 48          	lea    eax,[esp+0x48]
c000644b:	e8 21 e9 ff ff       	call   c0004d71 <follow_path>
c0006450:	85 c0                	test   eax,eax
c0006452:	0f 85 f2 00 00 00    	jne    c000654a <f_unlink+0x166>
c0006458:	b8 06 00 00 00       	mov    eax,0x6
c000645d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006465:	0f 88 df 00 00 00    	js     c000654a <f_unlink+0x166>
c000646b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006470:	74 0a                	je     c000647c <f_unlink+0x98>
c0006472:	b8 07 00 00 00       	mov    eax,0x7
c0006477:	e9 ce 00 00 00       	jmp    c000654a <f_unlink+0x166>
c000647c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006480:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006484:	8a 02                	mov    al,BYTE PTR [edx]
c0006486:	3c 04                	cmp    al,0x4
c0006488:	75 12                	jne    c000649c <f_unlink+0xb8>
c000648a:	8d 42 10             	lea    eax,[edx+0x10]
c000648d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006491:	e8 a1 e8 ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0006496:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000649a:	eb 0e                	jmp    c00064aa <f_unlink+0xc6>
c000649c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00064a3:	e8 3e e8 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c00064a8:	89 c6                	mov    esi,eax
c00064aa:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00064af:	75 12                	jne    c00064c3 <f_unlink+0xdf>
c00064b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064b5:	e8 94 d6 ff ff       	call   c0003b4e <dir_remove>
c00064ba:	85 c0                	test   eax,eax
c00064bc:	74 6c                	je     c000652a <f_unlink+0x146>
c00064be:	e9 87 00 00 00       	jmp    c000654a <f_unlink+0x166>
c00064c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064ce:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064d5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064d8:	75 21                	jne    c00064fb <f_unlink+0x117>
c00064da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064e2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064e9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064f0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064f4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064fb:	31 d2                	xor    edx,edx
c00064fd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006504:	e8 be cb ff ff       	call   c00030c7 <dir_sdi>
c0006509:	85 c0                	test   eax,eax
c000650b:	75 3d                	jne    c000654a <f_unlink+0x166>
c000650d:	31 d2                	xor    edx,edx
c000650f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006516:	e8 bc d3 ff ff       	call   c00038d7 <dir_read>
c000651b:	85 c0                	test   eax,eax
c000651d:	0f 84 4f ff ff ff    	je     c0006472 <f_unlink+0x8e>
c0006523:	83 f8 04             	cmp    eax,0x4
c0006526:	75 22                	jne    c000654a <f_unlink+0x166>
c0006528:	eb 87                	jmp    c00064b1 <f_unlink+0xcd>
c000652a:	85 f6                	test   esi,esi
c000652c:	75 0b                	jne    c0006539 <f_unlink+0x155>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	e8 3d df ff ff       	call   c0004474 <sync_fs>
c0006537:	eb 11                	jmp    c000654a <f_unlink+0x166>
c0006539:	31 c9                	xor    ecx,ecx
c000653b:	89 f2                	mov    edx,esi
c000653d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006541:	e8 78 ce ff ff       	call   c00033be <remove_chain>
c0006546:	85 c0                	test   eax,eax
c0006548:	74 e4                	je     c000652e <f_unlink+0x14a>
c000654a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000654e:	83 ec 0c             	sub    esp,0xc
c0006551:	53                   	push   ebx
c0006552:	e8 95 20 00 00       	call   c00085ec <ff_memfree>
c0006557:	83 c4 10             	add    esp,0x10
c000655a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000655e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006564:	5b                   	pop    ebx
c0006565:	5e                   	pop    esi
c0006566:	c3                   	ret    

c0006567 <f_mkdir>:
c0006567:	57                   	push   edi
c0006568:	b9 02 00 00 00       	mov    ecx,0x2
c000656d:	56                   	push   esi
c000656e:	53                   	push   ebx
c000656f:	83 c4 80             	add    esp,0xffffff80
c0006572:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006576:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000657d:	e8 79 c0 ff ff       	call   c00025fb <mount_volume>
c0006582:	89 c3                	mov    ebx,eax
c0006584:	85 c0                	test   eax,eax
c0006586:	0f 85 fe 01 00 00    	jne    c000678a <f_mkdir+0x223>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	bb 11 00 00 00       	mov    ebx,0x11
c0006595:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006599:	83 ec 0c             	sub    esp,0xc
c000659c:	68 60 04 00 00       	push   0x460
c00065a1:	e8 2e 20 00 00       	call   c00085d4 <ff_memalloc>
c00065a6:	83 c4 10             	add    esp,0x10
c00065a9:	89 c7                	mov    edi,eax
c00065ab:	85 c0                	test   eax,eax
c00065ad:	0f 84 d7 01 00 00    	je     c000678a <f_mkdir+0x223>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065bd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065c3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ca:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065ce:	e8 9e e7 ff ff       	call   c0004d71 <follow_path>
c00065d3:	89 c3                	mov    ebx,eax
c00065d5:	85 c0                	test   eax,eax
c00065d7:	74 3e                	je     c0006617 <f_mkdir+0xb0>
c00065d9:	83 f8 04             	cmp    eax,0x4
c00065dc:	75 3e                	jne    c000661c <f_mkdir+0xb5>
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	31 d2                	xor    edx,edx
c00065e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065ec:	e8 ce cb ff ff       	call   c00031bf <create_chain>
c00065f1:	89 c6                	mov    esi,eax
c00065f3:	85 c0                	test   eax,eax
c00065f5:	74 0c                	je     c0006603 <f_mkdir+0x9c>
c00065f7:	bb 02 00 00 00       	mov    ebx,0x2
c00065fc:	83 f8 01             	cmp    eax,0x1
c00065ff:	74 07                	je     c0006608 <f_mkdir+0xa1>
c0006601:	eb 2a                	jmp    c000662d <f_mkdir+0xc6>
c0006603:	bb 07 00 00 00       	mov    ebx,0x7
c0006608:	31 c9                	xor    ecx,ecx
c000660a:	89 f2                	mov    edx,esi
c000660c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006610:	e8 a9 cd ff ff       	call   c00033be <remove_chain>
c0006615:	eb 05                	jmp    c000661c <f_mkdir+0xb5>
c0006617:	bb 08 00 00 00       	mov    ebx,0x8
c000661c:	83 ec 0c             	sub    esp,0xc
c000661f:	57                   	push   edi
c0006620:	e8 c7 1f 00 00       	call   c00085ec <ff_memfree>
c0006625:	83 c4 10             	add    esp,0x10
c0006628:	e9 5d 01 00 00       	jmp    c000678a <f_mkdir+0x223>
c000662d:	bb 01 00 00 00       	mov    ebx,0x1
c0006632:	83 f8 ff             	cmp    eax,0xffffffff
c0006635:	74 d1                	je     c0006608 <f_mkdir+0xa1>
c0006637:	89 f2                	mov    edx,esi
c0006639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663d:	e8 c4 ce ff ff       	call   c0003506 <dir_clear>
c0006642:	89 c3                	mov    ebx,eax
c0006644:	85 c0                	test   eax,eax
c0006646:	75 c0                	jne    c0006608 <f_mkdir+0xa1>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000664f:	74 69                	je     c00066ba <f_mkdir+0x153>
c0006651:	b9 0b 00 00 00       	mov    ecx,0xb
c0006656:	83 c0 54             	add    eax,0x54
c0006659:	ba 20 00 00 00       	mov    edx,0x20
c000665e:	e8 9c b5 ff ff       	call   c0001bff <mem_set>
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	ba 00 00 21 50       	mov    edx,0x50210000
c000666c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006670:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006674:	83 c0 6a             	add    eax,0x6a
c0006677:	e8 65 b5 ff ff       	call   c0001be1 <st_dword>
c000667c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006680:	89 f1                	mov    ecx,esi
c0006682:	8d 50 54             	lea    edx,[eax+0x54]
c0006685:	e8 85 e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	b9 20 00 00 00       	mov    ecx,0x20
c0006693:	8d 50 54             	lea    edx,[eax+0x54]
c0006696:	83 c0 74             	add    eax,0x74
c0006699:	e8 4c b5 ff ff       	call   c0001bea <mem_cpy>
c000669e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00066a6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00066aa:	8d 50 74             	lea    edx,[eax+0x74]
c00066ad:	e8 5d e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c00066b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066be:	e8 2f db ff ff       	call   c00041f2 <dir_register>
c00066c3:	89 c3                	mov    ebx,eax
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 85 3b ff ff ff    	jne    c0006608 <f_mkdir+0xa1>
c00066cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d4:	75 74                	jne    c000674a <f_mkdir+0x1e3>
c00066d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066de:	83 c0 0c             	add    eax,0xc
c00066e1:	e8 fb b4 ff ff       	call   c0001be1 <st_dword>
c00066e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ea:	89 f2                	mov    edx,esi
c00066ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ef:	83 c0 34             	add    eax,0x34
c00066f2:	e8 ea b4 ff ff       	call   c0001be1 <st_dword>
c00066f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066fb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	c1 e2 09             	shl    edx,0x9
c0006705:	83 c0 38             	add    eax,0x38
c0006708:	e8 d4 b4 ff ff       	call   c0001be1 <st_dword>
c000670d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006711:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006715:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006718:	c1 e2 09             	shl    edx,0x9
c000671b:	83 c0 28             	add    eax,0x28
c000671e:	e8 be b4 ff ff       	call   c0001be1 <st_dword>
c0006723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006727:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000672a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000672e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006731:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006735:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006739:	e8 8b d3 ff ff       	call   c0003ac9 <store_xdir>
c000673e:	89 c3                	mov    ebx,eax
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 d4 fe ff ff    	jne    c000661c <f_mkdir+0xb5>
c0006748:	eb 30                	jmp    c000677a <f_mkdir+0x213>
c000674a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000674e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006753:	83 c0 16             	add    eax,0x16
c0006756:	e8 86 b4 ff ff       	call   c0001be1 <st_dword>
c000675b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675f:	89 f1                	mov    ecx,esi
c0006761:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006765:	e8 a5 e5 ff ff       	call   c0004d0f <st_clust.isra.1>
c000676a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000676e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	e8 f1 dc ff ff       	call   c0004474 <sync_fs>
c0006783:	89 c3                	mov    ebx,eax
c0006785:	e9 92 fe ff ff       	jmp    c000661c <f_mkdir+0xb5>
c000678a:	83 ec 80             	sub    esp,0xffffff80
c000678d:	89 d8                	mov    eax,ebx
c000678f:	5b                   	pop    ebx
c0006790:	5e                   	pop    esi
c0006791:	5f                   	pop    edi
c0006792:	c3                   	ret    

c0006793 <f_rename>:
c0006793:	55                   	push   ebp
c0006794:	57                   	push   edi
c0006795:	56                   	push   esi
c0006796:	53                   	push   ebx
c0006797:	81 ec fc 00 00 00    	sub    esp,0xfc
c000679d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00067a4:	e8 a4 b9 ff ff       	call   c000214d <get_ldnumber>
c00067a9:	b9 02 00 00 00       	mov    ecx,0x2
c00067ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067b2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067b9:	e8 3d be ff ff       	call   c00025fb <mount_volume>
c00067be:	85 c0                	test   eax,eax
c00067c0:	0f 85 b5 02 00 00    	jne    c0006a7b <f_rename+0x2e8>
c00067c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ca:	83 ec 0c             	sub    esp,0xc
c00067cd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067d1:	68 60 04 00 00       	push   0x460
c00067d6:	e8 f9 1d 00 00       	call   c00085d4 <ff_memalloc>
c00067db:	83 c4 10             	add    esp,0x10
c00067de:	89 c3                	mov    ebx,eax
c00067e0:	b8 11 00 00 00       	mov    eax,0x11
c00067e5:	85 db                	test   ebx,ebx
c00067e7:	0f 84 8e 02 00 00    	je     c0006a7b <f_rename+0x2e8>
c00067ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067f7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067fd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006804:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006808:	e8 64 e5 ff ff       	call   c0004d71 <follow_path>
c000680d:	85 c0                	test   eax,eax
c000680f:	0f 85 52 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006815:	b8 06 00 00 00       	mov    eax,0x6
c000681a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006822:	0f 85 3f 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000682f:	0f 85 05 01 00 00    	jne    c000693a <f_rename+0x1a7>
c0006835:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006838:	b9 40 00 00 00       	mov    ecx,0x40
c000683d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006841:	e8 a4 b3 ff ff       	call   c0001bea <mem_cpy>
c0006846:	b9 4c 00 00 00       	mov    ecx,0x4c
c000684b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000684f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006856:	e8 8f b3 ff ff       	call   c0001bea <mem_cpy>
c000685b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006862:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006869:	e8 03 e5 ff ff       	call   c0004d71 <follow_path>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 29                	jne    c000689b <f_rename+0x108>
c0006872:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006876:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000687d:	74 0a                	je     c0006889 <f_rename+0xf6>
c000687f:	b8 08 00 00 00       	mov    eax,0x8
c0006884:	e9 de 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c0006889:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006890:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006897:	75 e6                	jne    c000687f <f_rename+0xec>
c0006899:	eb 09                	jmp    c00068a4 <f_rename+0x111>
c000689b:	83 f8 04             	cmp    eax,0x4
c000689e:	0f 85 c3 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068a4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068ab:	e8 42 d9 ff ff       	call   c00041f2 <dir_register>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	0f 85 af 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068bf:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068c2:	89 c5                	mov    ebp,eax
c00068c4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068cb:	8d 46 24             	lea    eax,[esi+0x24]
c00068ce:	e8 98 b2 ff ff       	call   c0001b6b <ld_word>
c00068d3:	b9 40 00 00 00       	mov    ecx,0x40
c00068d8:	89 c7                	mov    edi,eax
c00068da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068de:	89 f0                	mov    eax,esi
c00068e0:	e8 05 b3 ff ff       	call   c0001bea <mem_cpy>
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	89 e9                	mov    ecx,ebp
c00068eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ee:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068f1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ff:	0f b7 d7             	movzx  edx,di
c0006902:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006905:	83 c0 24             	add    eax,0x24
c0006908:	e8 d0 b2 ff ff       	call   c0001bdd <st_word>
c000690d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006911:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006914:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006917:	a8 10                	test   al,0x10
c0006919:	75 06                	jne    c0006921 <f_rename+0x18e>
c000691b:	83 c8 20             	or     eax,0x20
c000691e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006921:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006928:	e8 9c d1 ff ff       	call   c0003ac9 <store_xdir>
c000692d:	85 c0                	test   eax,eax
c000692f:	0f 84 1c 01 00 00    	je     c0006a51 <f_rename+0x2be>
c0006935:	e9 2d 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c000693a:	b9 20 00 00 00       	mov    ecx,0x20
c000693f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006946:	8d 44 24 18          	lea    eax,[esp+0x18]
c000694a:	e8 9b b2 ff ff       	call   c0001bea <mem_cpy>
c000694f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006954:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 86 b2 ff ff       	call   c0001bea <mem_cpy>
c0006964:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000696b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006972:	e8 fa e3 ff ff       	call   c0004d71 <follow_path>
c0006977:	85 c0                	test   eax,eax
c0006979:	75 27                	jne    c00069a2 <f_rename+0x20f>
c000697b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000697f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006986:	0f 85 f3 fe ff ff    	jne    c000687f <f_rename+0xec>
c000698c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006993:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000699a:	0f 85 df fe ff ff    	jne    c000687f <f_rename+0xec>
c00069a0:	eb 09                	jmp    c00069ab <f_rename+0x218>
c00069a2:	83 f8 04             	cmp    eax,0x4
c00069a5:	0f 85 bc 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069ab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069b2:	e8 3b d8 ff ff       	call   c00041f2 <dir_register>
c00069b7:	85 c0                	test   eax,eax
c00069b9:	0f 85 a8 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069bf:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069c6:	b9 13 00 00 00       	mov    ecx,0x13
c00069cb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069ce:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069d2:	e8 13 b2 ff ff       	call   c0001bea <mem_cpy>
c00069d7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069db:	a8 10                	test   al,0x10
c00069dd:	75 03                	jne    c00069e2 <f_rename+0x24f>
c00069df:	83 c8 20             	or     eax,0x20
c00069e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069ed:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069f1:	74 5e                	je     c0006a51 <f_rename+0x2be>
c00069f3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069fa:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069fe:	74 51                	je     c0006a51 <f_rename+0x2be>
c0006a00:	89 f2                	mov    edx,esi
c0006a02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006a06:	8a 07                	mov    al,BYTE PTR [edi]
c0006a08:	e8 d9 e2 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0006a0d:	89 c2                	mov    edx,eax
c0006a0f:	89 f8                	mov    eax,edi
c0006a11:	e8 ee b3 ff ff       	call   c0001e04 <clst2sect>
c0006a16:	89 c6                	mov    esi,eax
c0006a18:	89 d1                	mov    ecx,edx
c0006a1a:	b8 02 00 00 00       	mov    eax,0x2
c0006a1f:	09 f2                	or     edx,esi
c0006a21:	74 44                	je     c0006a67 <f_rename+0x2d4>
c0006a23:	89 f2                	mov    edx,esi
c0006a25:	89 f8                	mov    eax,edi
c0006a27:	e8 1d b9 ff ff       	call   c0002349 <move_window>
c0006a2c:	85 c0                	test   eax,eax
c0006a2e:	75 37                	jne    c0006a67 <f_rename+0x2d4>
c0006a30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a34:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a38:	75 17                	jne    c0006a51 <f_rename+0x2be>
c0006a3a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a3d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a44:	e8 c6 e2 ff ff       	call   c0004d0f <st_clust.isra.1>
c0006a49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a51:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a55:	e8 f4 d0 ff ff       	call   c0003b4e <dir_remove>
c0006a5a:	85 c0                	test   eax,eax
c0006a5c:	75 09                	jne    c0006a67 <f_rename+0x2d4>
c0006a5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a62:	e8 0d da ff ff       	call   c0004474 <sync_fs>
c0006a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a6b:	83 ec 0c             	sub    esp,0xc
c0006a6e:	53                   	push   ebx
c0006a6f:	e8 78 1b 00 00       	call   c00085ec <ff_memfree>
c0006a74:	83 c4 10             	add    esp,0x10
c0006a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a7b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a81:	5b                   	pop    ebx
c0006a82:	5e                   	pop    esi
c0006a83:	5f                   	pop    edi
c0006a84:	5d                   	pop    ebp
c0006a85:	c3                   	ret    

c0006a86 <f_chmod>:
c0006a86:	57                   	push   edi
c0006a87:	b9 02 00 00 00       	mov    ecx,0x2
c0006a8c:	56                   	push   esi
c0006a8d:	53                   	push   ebx
c0006a8e:	83 ec 60             	sub    esp,0x60
c0006a91:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a95:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a99:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a9d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006aa1:	e8 55 bb ff ff       	call   c00025fb <mount_volume>
c0006aa6:	85 c0                	test   eax,eax
c0006aa8:	0f 85 af 00 00 00    	jne    c0006b5d <f_chmod+0xd7>
c0006aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab2:	83 ec 0c             	sub    esp,0xc
c0006ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006ab9:	68 60 04 00 00       	push   0x460
c0006abe:	e8 11 1b 00 00       	call   c00085d4 <ff_memalloc>
c0006ac3:	83 c4 10             	add    esp,0x10
c0006ac6:	89 c6                	mov    esi,eax
c0006ac8:	b8 11 00 00 00       	mov    eax,0x11
c0006acd:	85 f6                	test   esi,esi
c0006acf:	0f 84 88 00 00 00    	je     c0006b5d <f_chmod+0xd7>
c0006ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006adf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ae2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ae5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ae9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aed:	e8 7f e2 ff ff       	call   c0004d71 <follow_path>
c0006af2:	85 c0                	test   eax,eax
c0006af4:	75 53                	jne    c0006b49 <f_chmod+0xc3>
c0006af6:	b8 06 00 00 00       	mov    eax,0x6
c0006afb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006b00:	75 47                	jne    c0006b49 <f_chmod+0xc3>
c0006b02:	89 f9                	mov    ecx,edi
c0006b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b08:	83 e1 27             	and    ecx,0x27
c0006b0b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b0e:	75 1d                	jne    c0006b2d <f_chmod+0xa7>
c0006b10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b13:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b16:	21 cb                	and    ebx,ecx
c0006b18:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b1b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b22:	e8 a2 cf ff ff       	call   c0003ac9 <store_xdir>
c0006b27:	85 c0                	test   eax,eax
c0006b29:	75 1e                	jne    c0006b49 <f_chmod+0xc3>
c0006b2b:	eb 13                	jmp    c0006b40 <f_chmod+0xba>
c0006b2d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b31:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b34:	21 cb                	and    ebx,ecx
c0006b36:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b39:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b3c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b44:	e8 2b d9 ff ff       	call   c0004474 <sync_fs>
c0006b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b4d:	83 ec 0c             	sub    esp,0xc
c0006b50:	56                   	push   esi
c0006b51:	e8 96 1a 00 00       	call   c00085ec <ff_memfree>
c0006b56:	83 c4 10             	add    esp,0x10
c0006b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b5d:	83 c4 60             	add    esp,0x60
c0006b60:	5b                   	pop    ebx
c0006b61:	5e                   	pop    esi
c0006b62:	5f                   	pop    edi
c0006b63:	c3                   	ret    

c0006b64 <f_utime>:
c0006b64:	56                   	push   esi
c0006b65:	b9 02 00 00 00       	mov    ecx,0x2
c0006b6a:	53                   	push   ebx
c0006b6b:	83 ec 64             	sub    esp,0x64
c0006b6e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b72:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b76:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b7a:	e8 7c ba ff ff       	call   c00025fb <mount_volume>
c0006b7f:	85 c0                	test   eax,eax
c0006b81:	0f 85 b5 00 00 00    	jne    c0006c3c <f_utime+0xd8>
c0006b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8b:	83 ec 0c             	sub    esp,0xc
c0006b8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b92:	68 60 04 00 00       	push   0x460
c0006b97:	e8 38 1a 00 00       	call   c00085d4 <ff_memalloc>
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	89 c3                	mov    ebx,eax
c0006ba1:	b8 11 00 00 00       	mov    eax,0x11
c0006ba6:	85 db                	test   ebx,ebx
c0006ba8:	0f 84 8e 00 00 00    	je     c0006c3c <f_utime+0xd8>
c0006bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006bb8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bbb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc6:	e8 a6 e1 ff ff       	call   c0004d71 <follow_path>
c0006bcb:	85 c0                	test   eax,eax
c0006bcd:	75 59                	jne    c0006c28 <f_utime+0xc4>
c0006bcf:	b8 06 00 00 00       	mov    eax,0x6
c0006bd4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd9:	75 4d                	jne    c0006c28 <f_utime+0xc4>
c0006bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006be3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006be7:	c1 e2 10             	shl    edx,0x10
c0006bea:	09 ca                	or     edx,ecx
c0006bec:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bef:	75 1a                	jne    c0006c0b <f_utime+0xa7>
c0006bf1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bf4:	83 c0 0c             	add    eax,0xc
c0006bf7:	e8 e5 af ff ff       	call   c0001be1 <st_dword>
c0006bfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c00:	e8 c4 ce ff ff       	call   c0003ac9 <store_xdir>
c0006c05:	85 c0                	test   eax,eax
c0006c07:	75 1f                	jne    c0006c28 <f_utime+0xc4>
c0006c09:	eb 14                	jmp    c0006c1f <f_utime+0xbb>
c0006c0b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006c0f:	83 c0 16             	add    eax,0x16
c0006c12:	e8 ca af ff ff       	call   c0001be1 <st_dword>
c0006c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c23:	e8 4c d8 ff ff       	call   c0004474 <sync_fs>
c0006c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2c:	83 ec 0c             	sub    esp,0xc
c0006c2f:	53                   	push   ebx
c0006c30:	e8 b7 19 00 00       	call   c00085ec <ff_memfree>
c0006c35:	83 c4 10             	add    esp,0x10
c0006c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c3c:	83 c4 64             	add    esp,0x64
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	c3                   	ret    

c0006c42 <f_getlabel>:
c0006c42:	55                   	push   ebp
c0006c43:	31 c9                	xor    ecx,ecx
c0006c45:	57                   	push   edi
c0006c46:	56                   	push   esi
c0006c47:	53                   	push   ebx
c0006c48:	83 ec 6c             	sub    esp,0x6c
c0006c4b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c56:	e8 a0 b9 ff ff       	call   c00025fb <mount_volume>
c0006c5b:	89 c6                	mov    esi,eax
c0006c5d:	85 c0                	test   eax,eax
c0006c5f:	0f 85 c1 01 00 00    	jne    c0006e26 <f_getlabel+0x1e4>
c0006c65:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c6d:	0f 84 5f 01 00 00    	je     c0006dd2 <f_getlabel+0x190>
c0006c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c77:	31 d2                	xor    edx,edx
c0006c79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c89:	e8 39 c4 ff ff       	call   c00030c7 <dir_sdi>
c0006c8e:	85 c0                	test   eax,eax
c0006c90:	0f 85 2d 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006c96:	ba 01 00 00 00       	mov    edx,0x1
c0006c9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9f:	e8 33 cc ff ff       	call   c00038d7 <dir_read>
c0006ca4:	85 c0                	test   eax,eax
c0006ca6:	0f 85 17 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cb3:	74 09                	je     c0006cbe <f_getlabel+0x7c>
c0006cb5:	31 db                	xor    ebx,ebx
c0006cb7:	31 c9                	xor    ecx,ecx
c0006cb9:	e9 c8 00 00 00       	jmp    c0006d86 <f_getlabel+0x144>
c0006cbe:	31 ed                	xor    ebp,ebp
c0006cc0:	31 db                	xor    ebx,ebx
c0006cc2:	31 ff                	xor    edi,edi
c0006cc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cc8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ccc:	39 fa                	cmp    edx,edi
c0006cce:	76 4b                	jbe    c0006d1b <f_getlabel+0xd9>
c0006cd0:	47                   	inc    edi
c0006cd1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cd4:	01 d0                	add    eax,edx
c0006cd6:	e8 90 ae ff ff       	call   c0001b6b <ld_word>
c0006cdb:	66 85 ed             	test   bp,bp
c0006cde:	75 0d                	jne    c0006ced <f_getlabel+0xab>
c0006ce0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ce6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006ceb:	76 28                	jbe    c0006d15 <f_getlabel+0xd3>
c0006ced:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cf4:	89 e9                	mov    ecx,ebp
c0006cf6:	01 da                	add    edx,ebx
c0006cf8:	c1 e1 10             	shl    ecx,0x10
c0006cfb:	0f b7 c0             	movzx  eax,ax
c0006cfe:	09 c8                	or     eax,ecx
c0006d00:	b9 04 00 00 00       	mov    ecx,0x4
c0006d05:	e8 01 b0 ff ff       	call   c0001d0b <put_utf>
c0006d0a:	84 c0                	test   al,al
c0006d0c:	74 0b                	je     c0006d19 <f_getlabel+0xd7>
c0006d0e:	0f b6 c0             	movzx  eax,al
c0006d11:	01 c3                	add    ebx,eax
c0006d13:	31 c0                	xor    eax,eax
c0006d15:	89 c5                	mov    ebp,eax
c0006d17:	eb ab                	jmp    c0006cc4 <f_getlabel+0x82>
c0006d19:	31 db                	xor    ebx,ebx
c0006d1b:	66 85 ed             	test   bp,bp
c0006d1e:	74 02                	je     c0006d22 <f_getlabel+0xe0>
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d29:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d2d:	e9 a0 00 00 00       	jmp    c0006dd2 <f_getlabel+0x190>
c0006d32:	83 ff 0b             	cmp    edi,0xb
c0006d35:	74 11                	je     c0006d48 <f_getlabel+0x106>
c0006d37:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d40:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d43:	c1 e0 08             	shl    eax,0x8
c0006d46:	09 c2                	or     edx,eax
c0006d48:	0f b7 d2             	movzx  edx,dx
c0006d4b:	50                   	push   eax
c0006d4c:	50                   	push   eax
c0006d4d:	68 b5 01 00 00       	push   0x1b5
c0006d52:	52                   	push   edx
c0006d53:	e8 44 19 00 00       	call   c000869c <ff_oem2uni>
c0006d58:	83 c4 10             	add    esp,0x10
c0006d5b:	66 85 c0             	test   ax,ax
c0006d5e:	74 46                	je     c0006da6 <f_getlabel+0x164>
c0006d60:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d67:	0f b7 c0             	movzx  eax,ax
c0006d6a:	01 da                	add    edx,ebx
c0006d6c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d71:	e8 95 af ff ff       	call   c0001d0b <put_utf>
c0006d76:	84 c0                	test   al,al
c0006d78:	74 2c                	je     c0006da6 <f_getlabel+0x164>
c0006d7a:	0f b6 c0             	movzx  eax,al
c0006d7d:	01 c3                	add    ebx,eax
c0006d7f:	83 ff 0b             	cmp    edi,0xb
c0006d82:	74 24                	je     c0006da8 <f_getlabel+0x166>
c0006d84:	89 f9                	mov    ecx,edi
c0006d86:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d8a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d8d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d92:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d9b:	e8 9f ae ff ff       	call   c0001c3f <dbc_1st>
c0006da0:	85 c0                	test   eax,eax
c0006da2:	74 a4                	je     c0006d48 <f_getlabel+0x106>
c0006da4:	eb 8c                	jmp    c0006d32 <f_getlabel+0xf0>
c0006da6:	31 db                	xor    ebx,ebx
c0006da8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006daf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006db2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006db9:	74 17                	je     c0006dd2 <f_getlabel+0x190>
c0006dbb:	4b                   	dec    ebx
c0006dbc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006dbf:	74 ee                	je     c0006daf <f_getlabel+0x16d>
c0006dc1:	eb 0f                	jmp    c0006dd2 <f_getlabel+0x190>
c0006dc3:	83 f8 04             	cmp    eax,0x4
c0006dc6:	75 5c                	jne    c0006e24 <f_getlabel+0x1e2>
c0006dc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dcf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dd2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dda:	74 4a                	je     c0006e26 <f_getlabel+0x1e4>
c0006ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006de3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006de6:	e8 5e b5 ff ff       	call   c0002349 <move_window>
c0006deb:	89 c6                	mov    esi,eax
c0006ded:	85 c0                	test   eax,eax
c0006def:	75 35                	jne    c0006e26 <f_getlabel+0x1e4>
c0006df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006df5:	b8 43 00 00 00       	mov    eax,0x43
c0006dfa:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dfc:	80 f9 03             	cmp    cl,0x3
c0006dff:	74 0f                	je     c0006e10 <f_getlabel+0x1ce>
c0006e01:	31 c0                	xor    eax,eax
c0006e03:	80 f9 04             	cmp    cl,0x4
c0006e06:	0f 94 c0             	sete   al
c0006e09:	48                   	dec    eax
c0006e0a:	83 e0 c3             	and    eax,0xffffffc3
c0006e0d:	83 c0 64             	add    eax,0x64
c0006e10:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e14:	e8 5f ad ff ff       	call   c0001b78 <ld_dword>
c0006e19:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e20:	89 07                	mov    DWORD PTR [edi],eax
c0006e22:	eb 02                	jmp    c0006e26 <f_getlabel+0x1e4>
c0006e24:	89 c6                	mov    esi,eax
c0006e26:	83 c4 6c             	add    esp,0x6c
c0006e29:	89 f0                	mov    eax,esi
c0006e2b:	5b                   	pop    ebx
c0006e2c:	5e                   	pop    esi
c0006e2d:	5f                   	pop    edi
c0006e2e:	5d                   	pop    ebp
c0006e2f:	c3                   	ret    

c0006e30 <f_setlabel>:
c0006e30:	56                   	push   esi
c0006e31:	b9 02 00 00 00       	mov    ecx,0x2
c0006e36:	53                   	push   ebx
c0006e37:	83 ec 74             	sub    esp,0x74
c0006e3a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e3e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e45:	e8 b1 b7 ff ff       	call   c00025fb <mount_volume>
c0006e4a:	89 c6                	mov    esi,eax
c0006e4c:	85 c0                	test   eax,eax
c0006e4e:	0f 85 41 02 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e58:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e5b:	0f 85 8e 00 00 00    	jne    c0006eef <f_setlabel+0xbf>
c0006e61:	b9 16 00 00 00       	mov    ecx,0x16
c0006e66:	31 d2                	xor    edx,edx
c0006e68:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e6c:	31 db                	xor    ebx,ebx
c0006e6e:	e8 8c ad ff ff       	call   c0001bff <mem_set>
c0006e73:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e7d:	0f 86 0a 01 00 00    	jbe    c0006f8d <f_setlabel+0x15d>
c0006e83:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e8a:	e8 b6 ad ff ff       	call   c0001c45 <tchar2uni>
c0006e8f:	89 c6                	mov    esi,eax
c0006e91:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e96:	76 2a                	jbe    c0006ec2 <f_setlabel+0x92>
c0006e98:	83 f8 ff             	cmp    eax,0xffffffff
c0006e9b:	74 05                	je     c0006ea2 <f_setlabel+0x72>
c0006e9d:	83 fb 09             	cmp    ebx,0x9
c0006ea0:	76 0a                	jbe    c0006eac <f_setlabel+0x7c>
c0006ea2:	be 06 00 00 00       	mov    esi,0x6
c0006ea7:	e9 e9 01 00 00       	jmp    c0007095 <f_setlabel+0x265>
c0006eac:	89 c2                	mov    edx,eax
c0006eae:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eb2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006eb5:	c1 ea 10             	shr    edx,0x10
c0006eb8:	01 c8                	add    eax,ecx
c0006eba:	43                   	inc    ebx
c0006ebb:	e8 1d ad ff ff       	call   c0001bdd <st_word>
c0006ec0:	eb 04                	jmp    c0006ec6 <f_setlabel+0x96>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	74 dc                	je     c0006ea2 <f_setlabel+0x72>
c0006ec6:	89 f2                	mov    edx,esi
c0006ec8:	b8 d7 3f 02 c0       	mov    eax,0xc0023fd7
c0006ecd:	e8 5b ad ff ff       	call   c0001c2d <chk_chr>
c0006ed2:	85 c0                	test   eax,eax
c0006ed4:	75 cc                	jne    c0006ea2 <f_setlabel+0x72>
c0006ed6:	83 fb 0a             	cmp    ebx,0xa
c0006ed9:	77 c7                	ja     c0006ea2 <f_setlabel+0x72>
c0006edb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ede:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ee2:	0f b7 d6             	movzx  edx,si
c0006ee5:	01 c8                	add    eax,ecx
c0006ee7:	43                   	inc    ebx
c0006ee8:	e8 f0 ac ff ff       	call   c0001bdd <st_word>
c0006eed:	eb 84                	jmp    c0006e73 <f_setlabel+0x43>
c0006eef:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ef4:	ba 20 00 00 00       	mov    edx,0x20
c0006ef9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006efd:	31 db                	xor    ebx,ebx
c0006eff:	e8 fb ac ff ff       	call   c0001bff <mem_set>
c0006f04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f0e:	76 60                	jbe    c0006f70 <f_setlabel+0x140>
c0006f10:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f17:	e8 29 ad ff ff       	call   c0001c45 <tchar2uni>
c0006f1c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f21:	0f 87 7b ff ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0006f27:	83 ec 0c             	sub    esp,0xc
c0006f2a:	50                   	push   eax
c0006f2b:	e8 e0 17 00 00       	call   c0008710 <ff_wtoupper>
c0006f30:	5a                   	pop    edx
c0006f31:	59                   	pop    ecx
c0006f32:	68 b5 01 00 00       	push   0x1b5
c0006f37:	50                   	push   eax
c0006f38:	e8 c7 16 00 00       	call   c0008604 <ff_uni2oem>
c0006f3d:	83 c4 10             	add    esp,0x10
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	66 85 c0             	test   ax,ax
c0006f45:	0f 84 57 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f4b:	0f b7 d0             	movzx  edx,ax
c0006f4e:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c0006f53:	e8 d5 ac ff ff       	call   c0001c2d <chk_chr>
c0006f58:	85 c0                	test   eax,eax
c0006f5a:	0f 85 42 ff ff ff    	jne    c0006ea2 <f_setlabel+0x72>
c0006f60:	66 81 fe ff 00       	cmp    si,0xff
c0006f65:	0f 87 14 01 00 00    	ja     c000707f <f_setlabel+0x24f>
c0006f6b:	e9 fa 00 00 00       	jmp    c000706a <f_setlabel+0x23a>
c0006f70:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f75:	0f 84 27 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f7b:	85 db                	test   ebx,ebx
c0006f7d:	74 0e                	je     c0006f8d <f_setlabel+0x15d>
c0006f7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f82:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f87:	75 04                	jne    c0006f8d <f_setlabel+0x15d>
c0006f89:	89 c3                	mov    ebx,eax
c0006f8b:	eb ee                	jmp    c0006f7b <f_setlabel+0x14b>
c0006f8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f91:	31 d2                	xor    edx,edx
c0006f93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 1f c1 ff ff       	call   c00030c7 <dir_sdi>
c0006fa8:	89 c6                	mov    esi,eax
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 85 e3 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006fb2:	ba 01 00 00 00       	mov    edx,0x1
c0006fb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fbb:	e8 17 c9 ff ff       	call   c00038d7 <dir_read>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	75 21                	jne    c0006fe5 <f_setlabel+0x1b5>
c0006fc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fc8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fcc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fcf:	74 5d                	je     c000702e <f_setlabel+0x1fe>
c0006fd1:	85 db                	test   ebx,ebx
c0006fd3:	74 0b                	je     c0006fe0 <f_setlabel+0x1b0>
c0006fd5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fda:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fde:	eb 70                	jmp    c0007050 <f_setlabel+0x220>
c0006fe0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fe3:	eb 70                	jmp    c0007055 <f_setlabel+0x225>
c0006fe5:	83 f8 04             	cmp    eax,0x4
c0006fe8:	75 7c                	jne    c0007066 <f_setlabel+0x236>
c0006fea:	85 db                	test   ebx,ebx
c0006fec:	0f 84 a3 00 00 00    	je     c0007095 <f_setlabel+0x265>
c0006ff2:	ba 01 00 00 00       	mov    edx,0x1
c0006ff7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ffb:	e8 51 ca ff ff       	call   c0003a51 <dir_alloc>
c0007000:	89 c6                	mov    esi,eax
c0007002:	85 c0                	test   eax,eax
c0007004:	0f 85 8b 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c000700a:	31 d2                	xor    edx,edx
c000700c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007010:	b9 20 00 00 00       	mov    ecx,0x20
c0007015:	e8 e5 ab ff ff       	call   c0001bff <mem_set>
c000701a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000701e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007021:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007025:	75 18                	jne    c000703f <f_setlabel+0x20f>
c0007027:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000702a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007031:	b9 16 00 00 00       	mov    ecx,0x16
c0007036:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000703a:	83 c0 02             	add    eax,0x2
c000703d:	eb 9b                	jmp    c0006fda <f_setlabel+0x1aa>
c000703f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007043:	b9 0b 00 00 00       	mov    ecx,0xb
c0007048:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000704c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007050:	e8 95 ab ff ff       	call   c0001bea <mem_cpy>
c0007055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007059:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000705d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007061:	e8 0e d4 ff ff       	call   c0004474 <sync_fs>
c0007066:	89 c6                	mov    esi,eax
c0007068:	eb 2b                	jmp    c0007095 <f_setlabel+0x265>
c000706a:	83 fb 0a             	cmp    ebx,0xa
c000706d:	0f 87 2f fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007073:	89 f0                	mov    eax,esi
c0007075:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007079:	43                   	inc    ebx
c000707a:	e9 85 fe ff ff       	jmp    c0006f04 <f_setlabel+0xd4>
c000707f:	83 fb 09             	cmp    ebx,0x9
c0007082:	0f 87 1a fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007088:	89 f0                	mov    eax,esi
c000708a:	66 c1 e8 08          	shr    ax,0x8
c000708e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007092:	43                   	inc    ebx
c0007093:	eb de                	jmp    c0007073 <f_setlabel+0x243>
c0007095:	89 f0                	mov    eax,esi
c0007097:	83 c4 74             	add    esp,0x74
c000709a:	5b                   	pop    ebx
c000709b:	5e                   	pop    esi
c000709c:	c3                   	ret    

c000709d <f_expand>:
c000709d:	55                   	push   ebp
c000709e:	57                   	push   edi
c000709f:	56                   	push   esi
c00070a0:	53                   	push   ebx
c00070a1:	83 ec 3c             	sub    esp,0x3c
c00070a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00070a8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00070ac:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070b8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070bc:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070c4:	89 d8                	mov    eax,ebx
c00070c6:	e8 a3 b1 ff ff       	call   c000226e <validate>
c00070cb:	89 c5                	mov    ebp,eax
c00070cd:	85 c0                	test   eax,eax
c00070cf:	0f 85 f4 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070d5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070d9:	85 ed                	test   ebp,ebp
c00070db:	0f 85 e8 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070e5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070e9:	75 0a                	jne    c00070f5 <f_expand+0x58>
c00070eb:	bd 07 00 00 00       	mov    ebp,0x7
c00070f0:	e9 d4 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00070f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070f8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070fb:	75 ee                	jne    c00070eb <f_expand+0x4e>
c00070fd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0007101:	74 e8                	je     c00070eb <f_expand+0x4e>
c0007103:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0007107:	8a 0e                	mov    cl,BYTE PTR [esi]
c0007109:	80 f9 04             	cmp    cl,0x4
c000710c:	74 07                	je     c0007115 <f_expand+0x78>
c000710e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007113:	77 d6                	ja     c00070eb <f_expand+0x4e>
c0007115:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007119:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000711d:	c1 e0 09             	shl    eax,0x9
c0007120:	8d 50 ff             	lea    edx,[eax-0x1]
c0007123:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007127:	0f 95 c2             	setne  dl
c000712a:	0f b6 d2             	movzx  edx,dl
c000712d:	89 d7                	mov    edi,edx
c000712f:	31 d2                	xor    edx,edx
c0007131:	52                   	push   edx
c0007132:	50                   	push   eax
c0007133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000713b:	e8 60 be 01 00       	call   c0022fa0 <__udivdi3>
c0007140:	83 c4 10             	add    esp,0x10
c0007143:	01 f8                	add    eax,edi
c0007145:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007149:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000714c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007150:	83 ff 01             	cmp    edi,0x1
c0007153:	76 05                	jbe    c000715a <f_expand+0xbd>
c0007155:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007158:	77 05                	ja     c000715f <f_expand+0xc2>
c000715a:	bf 02 00 00 00       	mov    edi,0x2
c000715f:	80 f9 04             	cmp    cl,0x4
c0007162:	75 19                	jne    c000717d <f_expand+0xe0>
c0007164:	89 f0                	mov    eax,esi
c0007166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000716a:	89 fa                	mov    edx,edi
c000716c:	e8 f3 b9 ff ff       	call   c0002b64 <find_bitmap>
c0007171:	89 c6                	mov    esi,eax
c0007173:	85 c0                	test   eax,eax
c0007175:	0f 84 70 ff ff ff    	je     c00070eb <f_expand+0x4e>
c000717b:	eb 7f                	jmp    c00071fc <f_expand+0x15f>
c000717d:	89 fe                	mov    esi,edi
c000717f:	89 f9                	mov    ecx,edi
c0007181:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007189:	89 ca                	mov    edx,ecx
c000718b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000718f:	89 d8                	mov    eax,ebx
c0007191:	e8 3b bd ff ff       	call   c0002ed1 <get_fat>
c0007196:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000719a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000719e:	41                   	inc    ecx
c000719f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071a3:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c00071a6:	77 05                	ja     c00071ad <f_expand+0x110>
c00071a8:	b9 02 00 00 00       	mov    ecx,0x2
c00071ad:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071b2:	74 3e                	je     c00071f2 <f_expand+0x155>
c00071b4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071b9:	75 0a                	jne    c00071c5 <f_expand+0x128>
c00071bb:	bd 01 00 00 00       	mov    ebp,0x1
c00071c0:	e9 04 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071c5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ca:	75 13                	jne    c00071df <f_expand+0x142>
c00071cc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071d4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071d8:	75 0f                	jne    c00071e9 <f_expand+0x14c>
c00071da:	e9 ce 00 00 00       	jmp    c00072ad <f_expand+0x210>
c00071df:	89 ce                	mov    esi,ecx
c00071e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071e9:	39 f9                	cmp    ecx,edi
c00071eb:	75 9c                	jne    c0007189 <f_expand+0xec>
c00071ed:	e9 f9 fe ff ff       	jmp    c00070eb <f_expand+0x4e>
c00071f2:	bd 02 00 00 00       	mov    ebp,0x2
c00071f7:	e9 cd 00 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071fc:	83 f8 ff             	cmp    eax,0xffffffff
c00071ff:	74 ba                	je     c00071bb <f_expand+0x11e>
c0007201:	8d 7e ff             	lea    edi,[esi-0x1]
c0007204:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007208:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000720c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007211:	74 51                	je     c0007264 <f_expand+0x1c7>
c0007213:	83 ec 0c             	sub    esp,0xc
c0007216:	89 f2                	mov    edx,esi
c0007218:	6a 01                	push   0x1
c000721a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000721e:	e8 f4 b9 ff ff       	call   c0002c17 <change_bitmap>
c0007223:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007227:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000722b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000722f:	83 c4 10             	add    esp,0x10
c0007232:	85 c0                	test   eax,eax
c0007234:	74 2e                	je     c0007264 <f_expand+0x1c7>
c0007236:	eb 71                	jmp    c00072a9 <f_expand+0x20c>
c0007238:	83 c9 ff             	or     ecx,0xffffffff
c000723b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007240:	74 03                	je     c0007245 <f_expand+0x1a8>
c0007242:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007245:	89 fa                	mov    edx,edi
c0007247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000724b:	e8 7c ba ff ff       	call   c0002ccc <put_fat>
c0007250:	85 c0                	test   eax,eax
c0007252:	75 55                	jne    c00072a9 <f_expand+0x20c>
c0007254:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007258:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000725c:	47                   	inc    edi
c000725d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007262:	75 d4                	jne    c0007238 <f_expand+0x19b>
c0007264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000726c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007271:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007274:	74 53                	je     c00072c9 <f_expand+0x22c>
c0007276:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007279:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000727d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007281:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007285:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007289:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000728c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000728f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007292:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007298:	39 ca                	cmp    edx,ecx
c000729a:	77 2d                	ja     c00072c9 <f_expand+0x22c>
c000729c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00072a0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00072a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00072a7:	eb 20                	jmp    c00072c9 <f_expand+0x22c>
c00072a9:	89 c5                	mov    ebp,eax
c00072ab:	eb 1c                	jmp    c00072c9 <f_expand+0x22c>
c00072ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072b2:	74 0c                	je     c00072c0 <f_expand+0x223>
c00072b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072b8:	89 f7                	mov    edi,esi
c00072ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072be:	eb 9d                	jmp    c000725d <f_expand+0x1c0>
c00072c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072c7:	eb 9b                	jmp    c0007264 <f_expand+0x1c7>
c00072c9:	83 c4 3c             	add    esp,0x3c
c00072cc:	89 e8                	mov    eax,ebp
c00072ce:	5b                   	pop    ebx
c00072cf:	5e                   	pop    esi
c00072d0:	5f                   	pop    edi
c00072d1:	5d                   	pop    ebp
c00072d2:	c3                   	ret    

c00072d3 <f_forward>:
c00072d3:	55                   	push   ebp
c00072d4:	57                   	push   edi
c00072d5:	56                   	push   esi
c00072d6:	53                   	push   ebx
c00072d7:	83 ec 2c             	sub    esp,0x2c
c00072da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072de:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072e8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072ec:	89 d8                	mov    eax,ebx
c00072ee:	e8 7b af ff ff       	call   c000226e <validate>
c00072f3:	89 c5                	mov    ebp,eax
c00072f5:	85 c0                	test   eax,eax
c00072f7:	0f 85 aa 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c00072fd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007301:	85 ed                	test   ebp,ebp
c0007303:	0f 85 9e 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c0007309:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000730d:	0f 84 8f 01 00 00    	je     c00074a2 <f_forward+0x1cf>
c0007313:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007316:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007319:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000731c:	bf 00 00 00 00       	mov    edi,0x0
c0007321:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007324:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007328:	89 d1                	mov    ecx,edx
c000732a:	19 f9                	sbb    ecx,edi
c000732c:	0f 83 cf 00 00 00    	jae    c0007401 <f_forward+0x12e>
c0007332:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007336:	e9 c6 00 00 00       	jmp    c0007401 <f_forward+0x12e>
c000733b:	50                   	push   eax
c000733c:	50                   	push   eax
c000733d:	6a 00                	push   0x0
c000733f:	6a 00                	push   0x0
c0007341:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007345:	83 c4 10             	add    esp,0x10
c0007348:	85 c0                	test   eax,eax
c000734a:	0f 84 57 01 00 00    	je     c00074a7 <f_forward+0x1d4>
c0007350:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007353:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007357:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000735a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000735e:	89 d7                	mov    edi,edx
c0007360:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007363:	89 c6                	mov    esi,eax
c0007365:	0f ac fe 09          	shrd   esi,edi,0x9
c0007369:	21 ce                	and    esi,ecx
c000736b:	89 c1                	mov    ecx,eax
c000736d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007373:	0f 84 98 00 00 00    	je     c0007411 <f_forward+0x13e>
c0007379:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000737d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007380:	89 c8                	mov    eax,ecx
c0007382:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007386:	e8 79 aa ff ff       	call   c0001e04 <clst2sect>
c000738b:	89 d7                	mov    edi,edx
c000738d:	09 c7                	or     edi,eax
c000738f:	0f 84 9e 00 00 00    	je     c0007433 <f_forward+0x160>
c0007395:	31 ff                	xor    edi,edi
c0007397:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000739a:	01 c6                	add    esi,eax
c000739c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00073a0:	11 d7                	adc    edi,edx
c00073a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00073a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00073a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ac:	39 fa                	cmp    edx,edi
c00073ae:	0f 85 a2 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073b4:	39 f0                	cmp    eax,esi
c00073b6:	0f 85 9a 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073bc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073bf:	ba 00 02 00 00       	mov    edx,0x200
c00073c4:	25 ff 01 00 00       	and    eax,0x1ff
c00073c9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073cd:	29 c2                	sub    edx,eax
c00073cf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073d2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073d5:	39 d1                	cmp    ecx,edx
c00073d7:	76 02                	jbe    c00073db <f_forward+0x108>
c00073d9:	89 d1                	mov    ecx,edx
c00073db:	8d 73 50             	lea    esi,[ebx+0x50]
c00073de:	52                   	push   edx
c00073df:	01 c6                	add    esi,eax
c00073e1:	52                   	push   edx
c00073e2:	51                   	push   ecx
c00073e3:	56                   	push   esi
c00073e4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073e8:	83 c4 10             	add    esp,0x10
c00073eb:	85 c0                	test   eax,eax
c00073ed:	74 44                	je     c0007433 <f_forward+0x160>
c00073ef:	31 ff                	xor    edi,edi
c00073f1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073f4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073f7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073fb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ff:	01 07                	add    DWORD PTR [edi],eax
c0007401:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007406:	0f 85 2f ff ff ff    	jne    c000733b <f_forward+0x68>
c000740c:	e9 96 00 00 00       	jmp    c00074a7 <f_forward+0x1d4>
c0007411:	85 f6                	test   esi,esi
c0007413:	0f 85 60 ff ff ff    	jne    c0007379 <f_forward+0xa6>
c0007419:	89 d7                	mov    edi,edx
c000741b:	09 c7                	or     edi,eax
c000741d:	75 05                	jne    c0007424 <f_forward+0x151>
c000741f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007422:	eb 0a                	jmp    c000742e <f_forward+0x15b>
c0007424:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007427:	89 d8                	mov    eax,ebx
c0007429:	e8 a3 ba ff ff       	call   c0002ed1 <get_fat>
c000742e:	83 f8 01             	cmp    eax,0x1
c0007431:	77 0b                	ja     c000743e <f_forward+0x16b>
c0007433:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007437:	bd 02 00 00 00       	mov    ebp,0x2
c000743c:	eb 69                	jmp    c00074a7 <f_forward+0x1d4>
c000743e:	83 f8 ff             	cmp    eax,0xffffffff
c0007441:	75 0b                	jne    c000744e <f_forward+0x17b>
c0007443:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007447:	bd 01 00 00 00       	mov    ebp,0x1
c000744c:	eb 59                	jmp    c00074a7 <f_forward+0x1d4>
c000744e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007451:	e9 23 ff ff ff       	jmp    c0007379 <f_forward+0xa6>
c0007456:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000745a:	79 20                	jns    c000747c <f_forward+0x1a9>
c000745c:	83 ec 0c             	sub    esp,0xc
c000745f:	6a 01                	push   0x1
c0007461:	52                   	push   edx
c0007462:	50                   	push   eax
c0007463:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007467:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000746b:	50                   	push   eax
c000746c:	e8 c5 a6 ff ff       	call   c0001b36 <disk_write>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	85 c0                	test   eax,eax
c0007476:	75 cb                	jne    c0007443 <f_forward+0x170>
c0007478:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000747c:	83 ec 0c             	sub    esp,0xc
c000747f:	6a 01                	push   0x1
c0007481:	57                   	push   edi
c0007482:	56                   	push   esi
c0007483:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007487:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000748b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000748f:	50                   	push   eax
c0007490:	e8 8b a6 ff ff       	call   c0001b20 <disk_read>
c0007495:	83 c4 20             	add    esp,0x20
c0007498:	85 c0                	test   eax,eax
c000749a:	0f 84 1c ff ff ff    	je     c00073bc <f_forward+0xe9>
c00074a0:	eb a1                	jmp    c0007443 <f_forward+0x170>
c00074a2:	bd 07 00 00 00       	mov    ebp,0x7
c00074a7:	83 c4 2c             	add    esp,0x2c
c00074aa:	89 e8                	mov    eax,ebp
c00074ac:	5b                   	pop    ebx
c00074ad:	5e                   	pop    esi
c00074ae:	5f                   	pop    edi
c00074af:	5d                   	pop    ebp
c00074b0:	c3                   	ret    

c00074b1 <f_mkfs>:
c00074b1:	55                   	push   ebp
c00074b2:	57                   	push   edi
c00074b3:	56                   	push   esi
c00074b4:	53                   	push   ebx
c00074b5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074ba:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074c0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074c7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074ce:	e8 7a ac ff ff       	call   c000214d <get_ldnumber>
c00074d3:	85 c0                	test   eax,eax
c00074d5:	0f 88 ec 10 00 00    	js     c00085c7 <f_mkfs+0x1116>
c00074db:	8b 14 85 60 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd74a0]
c00074e2:	85 d2                	test   edx,edx
c00074e4:	74 03                	je     c00074e9 <f_mkfs+0x38>
c00074e6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074e9:	85 f6                	test   esi,esi
c00074eb:	75 05                	jne    c00074f2 <f_mkfs+0x41>
c00074ed:	be c0 3f 02 c0       	mov    esi,0xc0023fc0
c00074f2:	83 ec 0c             	sub    esp,0xc
c00074f5:	0f b6 c0             	movzx  eax,al
c00074f8:	bb 03 00 00 00       	mov    ebx,0x3
c00074fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007505:	e8 13 a6 ff ff       	call   c0001b1d <disk_initialize>
c000750a:	83 c4 10             	add    esp,0x10
c000750d:	a8 01                	test   al,0x1
c000750f:	0f 85 b2 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007515:	bb 0a 00 00 00       	mov    ebx,0xa
c000751a:	a8 04                	test   al,0x4
c000751c:	0f 85 a5 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007522:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007525:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007529:	85 c0                	test   eax,eax
c000752b:	75 20                	jne    c000754d <f_mkfs+0x9c>
c000752d:	51                   	push   ecx
c000752e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007532:	50                   	push   eax
c0007533:	6a 03                	push   0x3
c0007535:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007539:	e8 0e a6 ff ff       	call   c0001b4c <disk_ioctl>
c000753e:	83 c4 10             	add    esp,0x10
c0007541:	85 c0                	test   eax,eax
c0007543:	74 08                	je     c000754d <f_mkfs+0x9c>
c0007545:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007551:	8d 42 ff             	lea    eax,[edx-0x1]
c0007554:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007559:	77 04                	ja     c000755f <f_mkfs+0xae>
c000755b:	85 c2                	test   edx,eax
c000755d:	74 08                	je     c0007567 <f_mkfs+0xb6>
c000755f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007567:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000756a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000756e:	48                   	dec    eax
c000756f:	3c 01                	cmp    al,0x1
c0007571:	76 05                	jbe    c0007578 <f_mkfs+0xc7>
c0007573:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007578:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000757b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000757f:	48                   	dec    eax
c0007580:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007585:	77 07                	ja     c000758e <f_mkfs+0xdd>
c0007587:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000758c:	74 08                	je     c0007596 <f_mkfs+0xe5>
c000758e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007596:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007599:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000759f:	77 07                	ja     c00075a8 <f_mkfs+0xf7>
c00075a1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00075a4:	85 d8                	test   eax,ebx
c00075a6:	74 02                	je     c00075aa <f_mkfs+0xf9>
c00075a8:	31 db                	xor    ebx,ebx
c00075aa:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075b5:	77 0a                	ja     c00075c1 <f_mkfs+0x110>
c00075b7:	bb 11 00 00 00       	mov    ebx,0x11
c00075bc:	e9 06 10 00 00       	jmp    c00085c7 <f_mkfs+0x1116>
c00075c1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075c8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ca:	85 ed                	test   ebp,ebp
c00075cc:	75 1e                	jne    c00075ec <f_mkfs+0x13b>
c00075ce:	83 ec 0c             	sub    esp,0xc
c00075d1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075d8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075dd:	50                   	push   eax
c00075de:	e8 f1 0f 00 00       	call   c00085d4 <ff_memalloc>
c00075e3:	83 c4 10             	add    esp,0x10
c00075e6:	89 c5                	mov    ebp,eax
c00075e8:	85 c0                	test   eax,eax
c00075ea:	74 cb                	je     c00075b7 <f_mkfs+0x106>
c00075ec:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075f4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075fc:	52                   	push   edx
c00075fd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007601:	50                   	push   eax
c0007602:	6a 01                	push   0x1
c0007604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007608:	e8 3f a5 ff ff       	call   c0001b4c <disk_ioctl>
c000760d:	83 c4 10             	add    esp,0x10
c0007610:	85 c0                	test   eax,eax
c0007612:	0f 85 4a 0f 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007618:	89 f1                	mov    ecx,esi
c000761a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007622:	83 e1 0f             	and    ecx,0xf
c0007625:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000762d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007631:	83 e6 08             	and    esi,0x8
c0007634:	75 56                	jne    c000768c <f_mkfs+0x1db>
c0007636:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000763a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000763e:	83 ff 00             	cmp    edi,0x0
c0007641:	76 20                	jbe    c0007663 <f_mkfs+0x1b2>
c0007643:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007648:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007650:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007656:	83 d7 ff             	adc    edi,0xffffffff
c0007659:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000765d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007661:	eb 21                	jmp    c0007684 <f_mkfs+0x1d3>
c0007663:	ba 3f 00 00 00       	mov    edx,0x3f
c0007668:	39 f2                	cmp    edx,esi
c000766a:	19 f8                	sbb    eax,edi
c000766c:	73 1e                	jae    c000768c <f_mkfs+0x1db>
c000766e:	83 c6 c1             	add    esi,0xffffffc1
c0007671:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007679:	83 d7 ff             	adc    edi,0xffffffff
c000767c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007680:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007684:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000768c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007690:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007694:	89 04 24             	mov    DWORD PTR [esp],eax
c0007697:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000769b:	31 c0                	xor    eax,eax
c000769d:	ba 7f 00 00 00       	mov    edx,0x7f
c00076a2:	89 c7                	mov    edi,eax
c00076a4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00076a7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00076ab:	0f 83 c5 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c00076b1:	89 df                	mov    edi,ebx
c00076b3:	c1 ef 09             	shr    edi,0x9
c00076b6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076ba:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076c1:	c1 ef 09             	shr    edi,0x9
c00076c4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076c9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076cd:	74 29                	je     c00076f8 <f_mkfs+0x247>
c00076cf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076d5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076da:	0f 97 c2             	seta   dl
c00076dd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076e0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076e4:	0f 92 c0             	setb   al
c00076e7:	08 c2                	or     dl,al
c00076e9:	75 5b                	jne    c0007746 <f_mkfs+0x295>
c00076eb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ef:	83 e0 07             	and    eax,0x7
c00076f2:	3c 04                	cmp    al,0x4
c00076f4:	74 50                	je     c0007746 <f_mkfs+0x295>
c00076f6:	eb 1b                	jmp    c0007713 <f_mkfs+0x262>
c00076f8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076fd:	0f 87 73 0a 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007703:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007709:	76 08                	jbe    c0007713 <f_mkfs+0x262>
c000770b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007713:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007717:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000771b:	83 e0 01             	and    eax,0x1
c000771e:	80 e1 02             	and    cl,0x2
c0007721:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007725:	74 0d                	je     c0007734 <f_mkfs+0x283>
c0007727:	84 c0                	test   al,al
c0007729:	0f 84 53 09 00 00    	je     c0008082 <f_mkfs+0xbd1>
c000772f:	e9 12 08 00 00       	jmp    c0007f46 <f_mkfs+0xa95>
c0007734:	bb 13 00 00 00       	mov    ebx,0x13
c0007739:	84 c0                	test   al,al
c000773b:	0f 85 05 08 00 00    	jne    c0007f46 <f_mkfs+0xa95>
c0007741:	e9 39 0e 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0007746:	31 c0                	xor    eax,eax
c0007748:	ba ff 0f 00 00       	mov    edx,0xfff
c000774d:	89 c7                	mov    edi,eax
c000774f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007752:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007756:	0f 83 1a 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c000775c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007762:	77 39                	ja     c000779d <f_mkfs+0x2ec>
c0007764:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007769:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007771:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007774:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007778:	73 08                	jae    c0007782 <f_mkfs+0x2d1>
c000777a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007782:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007787:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000778a:	b8 00 00 00 00       	mov    eax,0x0
c000778f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007793:	73 08                	jae    c000779d <f_mkfs+0x2ec>
c0007795:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000779d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00077a5:	83 c0 20             	add    eax,0x20
c00077a8:	83 d2 00             	adc    edx,0x0
c00077ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077af:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077b7:	31 d2                	xor    edx,edx
c00077b9:	31 ff                	xor    edi,edi
c00077bb:	52                   	push   edx
c00077bc:	89 fb                	mov    ebx,edi
c00077be:	50                   	push   eax
c00077bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c7:	e8 d4 b7 01 00       	call   c0022fa0 <__udivdi3>
c00077cc:	83 c4 10             	add    esp,0x10
c00077cf:	c1 e0 02             	shl    eax,0x2
c00077d2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077d6:	05 07 02 00 00       	add    eax,0x207
c00077db:	89 f1                	mov    ecx,esi
c00077dd:	c1 e8 09             	shr    eax,0x9
c00077e0:	83 c1 ff             	add    ecx,0xffffffff
c00077e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077e7:	83 d3 ff             	adc    ebx,0xffffffff
c00077ea:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077ee:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077f2:	31 d2                	xor    edx,edx
c00077f4:	01 c8                	add    eax,ecx
c00077f6:	11 da                	adc    edx,ebx
c00077f8:	89 c1                	mov    ecx,eax
c00077fa:	f7 de                	neg    esi
c00077fc:	89 d0                	mov    eax,edx
c00077fe:	83 d7 00             	adc    edi,0x0
c0007801:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007805:	f7 df                	neg    edi
c0007807:	21 f1                	and    ecx,esi
c0007809:	21 f8                	and    eax,edi
c000780b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000780f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007813:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007817:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000781b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000781f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007822:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007826:	0f ac d0 01          	shrd   eax,edx,0x1
c000782a:	89 df                	mov    edi,ebx
c000782c:	d1 ea                	shr    edx,1
c000782e:	39 c1                	cmp    ecx,eax
c0007830:	19 d7                	sbb    edi,edx
c0007832:	0f 83 3e 09 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c0007838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000783c:	31 d2                	xor    edx,edx
c000783e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007842:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007846:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000784a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000784d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007851:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007855:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007859:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000785d:	83 f8 0f             	cmp    eax,0xf
c0007860:	0f 86 10 09 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c0007866:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000786e:	0f 87 02 09 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007874:	31 d2                	xor    edx,edx
c0007876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000787a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007882:	83 c0 07             	add    eax,0x7
c0007885:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000788d:	c1 e8 03             	shr    eax,0x3
c0007890:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007897:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000789b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789f:	c1 e0 09             	shl    eax,0x9
c00078a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078a6:	48                   	dec    eax
c00078a7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078ab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00078af:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078b3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b7:	31 d2                	xor    edx,edx
c00078b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078bd:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078cd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078d1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078d5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078d9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078dd:	31 ff                	xor    edi,edi
c00078df:	31 f6                	xor    esi,esi
c00078e1:	31 db                	xor    ebx,ebx
c00078e3:	85 ff                	test   edi,edi
c00078e5:	74 05                	je     c00078ec <f_mkfs+0x43b>
c00078e7:	4f                   	dec    edi
c00078e8:	74 44                	je     c000792e <f_mkfs+0x47d>
c00078ea:	eb 4f                	jmp    c000793b <f_mkfs+0x48a>
c00078ec:	83 ec 0c             	sub    esp,0xc
c00078ef:	0f b7 c3             	movzx  eax,bx
c00078f2:	50                   	push   eax
c00078f3:	e8 18 0e 00 00       	call   c0008710 <ff_wtoupper>
c00078f8:	83 c4 10             	add    esp,0x10
c00078fb:	89 c1                	mov    ecx,eax
c00078fd:	8d 53 01             	lea    edx,[ebx+0x1]
c0007900:	66 39 c3             	cmp    bx,ax
c0007903:	75 3e                	jne    c0007943 <f_mkfs+0x492>
c0007905:	be 01 00 00 00       	mov    esi,0x1
c000790a:	89 df                	mov    edi,ebx
c000790c:	66 01 f7             	add    di,si
c000790f:	75 07                	jne    c0007918 <f_mkfs+0x467>
c0007911:	83 fe 7f             	cmp    esi,0x7f
c0007914:	77 31                	ja     c0007947 <f_mkfs+0x496>
c0007916:	eb 16                	jmp    c000792e <f_mkfs+0x47d>
c0007918:	83 ec 0c             	sub    esp,0xc
c000791b:	0f b7 ff             	movzx  edi,di
c000791e:	57                   	push   edi
c000791f:	e8 ec 0d 00 00       	call   c0008710 <ff_wtoupper>
c0007924:	83 c4 10             	add    esp,0x10
c0007927:	39 c7                	cmp    edi,eax
c0007929:	75 e6                	jne    c0007911 <f_mkfs+0x460>
c000792b:	46                   	inc    esi
c000792c:	eb dc                	jmp    c000790a <f_mkfs+0x459>
c000792e:	31 c0                	xor    eax,eax
c0007930:	89 d9                	mov    ecx,ebx
c0007932:	4e                   	dec    esi
c0007933:	0f 95 c0             	setne  al
c0007936:	43                   	inc    ebx
c0007937:	89 c7                	mov    edi,eax
c0007939:	eb 14                	jmp    c000794f <f_mkfs+0x49e>
c000793b:	89 f1                	mov    ecx,esi
c000793d:	01 f3                	add    ebx,esi
c000793f:	31 ff                	xor    edi,edi
c0007941:	eb 0c                	jmp    c000794f <f_mkfs+0x49e>
c0007943:	89 d3                	mov    ebx,edx
c0007945:	eb 08                	jmp    c000794f <f_mkfs+0x49e>
c0007947:	bf 02 00 00 00       	mov    edi,0x2
c000794c:	83 c9 ff             	or     ecx,0xffffffff
c000794f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007953:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007956:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000795a:	0f b6 c1             	movzx  eax,cl
c000795d:	e8 04 a7 ff ff       	call   c0002066 <xsum32>
c0007962:	66 c1 e9 08          	shr    cx,0x8
c0007966:	89 c2                	mov    edx,eax
c0007968:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000796b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000796f:	0f b7 c1             	movzx  eax,cx
c0007972:	e8 ef a6 ff ff       	call   c0002066 <xsum32>
c0007977:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000797c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007980:	66 85 db             	test   bx,bx
c0007983:	74 1f                	je     c00079a4 <f_mkfs+0x4f3>
c0007985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007988:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000798f:	83 c0 02             	add    eax,0x2
c0007992:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007998:	39 c2                	cmp    edx,eax
c000799a:	74 08                	je     c00079a4 <f_mkfs+0x4f3>
c000799c:	89 04 24             	mov    DWORD PTR [esp],eax
c000799f:	e9 3f ff ff ff       	jmp    c00078e3 <f_mkfs+0x432>
c00079a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079a7:	83 ec 0c             	sub    esp,0xc
c00079aa:	05 01 02 00 00       	add    eax,0x201
c00079af:	c1 e8 09             	shr    eax,0x9
c00079b2:	50                   	push   eax
c00079b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bf:	55                   	push   ebp
c00079c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079c4:	e8 6d a1 ff ff       	call   c0001b36 <disk_write>
c00079c9:	83 c4 20             	add    esp,0x20
c00079cc:	85 c0                	test   eax,eax
c00079ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079d1:	0f 85 8b 0b 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00079d7:	89 d0                	mov    eax,edx
c00079d9:	31 d2                	xor    edx,edx
c00079db:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079df:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079e3:	66 85 db             	test   bx,bx
c00079e6:	74 04                	je     c00079ec <f_mkfs+0x53b>
c00079e8:	31 c0                	xor    eax,eax
c00079ea:	eb b0                	jmp    c000799c <f_mkfs+0x4eb>
c00079ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079f0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079f4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079f8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079fe:	31 d2                	xor    edx,edx
c0007a00:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007a0b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007a0f:	c1 eb 09             	shr    ebx,0x9
c0007a12:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a1d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a25:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a29:	8d 70 01             	lea    esi,[eax+0x1]
c0007a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a34:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a3b:	31 d2                	xor    edx,edx
c0007a3d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a45:	89 c1                	mov    ecx,eax
c0007a47:	89 e8                	mov    eax,ebp
c0007a49:	e8 b1 a1 ff ff       	call   c0001bff <mem_set>
c0007a4e:	31 c0                	xor    eax,eax
c0007a50:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a53:	76 10                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a55:	83 fe 07             	cmp    esi,0x7
c0007a58:	76 0b                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a5a:	40                   	inc    eax
c0007a5b:	83 ee 08             	sub    esi,0x8
c0007a5e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a63:	eb eb                	jmp    c0007a50 <f_mkfs+0x59f>
c0007a65:	b2 01                	mov    dl,0x1
c0007a67:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a6b:	85 f6                	test   esi,esi
c0007a6d:	74 0c                	je     c0007a7b <f_mkfs+0x5ca>
c0007a6f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a72:	76 07                	jbe    c0007a7b <f_mkfs+0x5ca>
c0007a74:	08 11                	or     BYTE PTR [ecx],dl
c0007a76:	4e                   	dec    esi
c0007a77:	d1 e2                	shl    edx,1
c0007a79:	eb f0                	jmp    c0007a6b <f_mkfs+0x5ba>
c0007a7b:	89 df                	mov    edi,ebx
c0007a7d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a81:	76 04                	jbe    c0007a87 <f_mkfs+0x5d6>
c0007a83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a87:	83 ec 0c             	sub    esp,0xc
c0007a8a:	57                   	push   edi
c0007a8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a93:	55                   	push   ebp
c0007a94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a98:	e8 99 a0 ff ff       	call   c0001b36 <disk_write>
c0007a9d:	83 c4 20             	add    esp,0x20
c0007aa0:	85 c0                	test   eax,eax
c0007aa2:	0f 85 ba 0a 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007aa8:	31 d2                	xor    edx,edx
c0007aaa:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007aae:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007ab2:	29 fb                	sub    ebx,edi
c0007ab4:	0f 85 7a ff ff ff    	jne    c0007a34 <f_mkfs+0x583>
c0007aba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007abe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ac6:	31 f6                	xor    esi,esi
c0007ac8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007acc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007acf:	31 d2                	xor    edx,edx
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 27 a1 ff ff       	call   c0001bff <mem_set>
c0007ad8:	31 c9                	xor    ecx,ecx
c0007ada:	85 db                	test   ebx,ebx
c0007adc:	75 40                	jne    c0007b1e <f_mkfs+0x66d>
c0007ade:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ae3:	89 e8                	mov    eax,ebp
c0007ae5:	bb 02 00 00 00       	mov    ebx,0x2
c0007aea:	e8 f2 a0 ff ff       	call   c0001be1 <st_dword>
c0007aef:	8d 45 04             	lea    eax,[ebp+0x4]
c0007af2:	83 ca ff             	or     edx,0xffffffff
c0007af5:	e8 e7 a0 ff ff       	call   c0001be1 <st_dword>
c0007afa:	b9 08 00 00 00       	mov    ecx,0x8
c0007aff:	eb 1d                	jmp    c0007b1e <f_mkfs+0x66d>
c0007b01:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b04:	76 3b                	jbe    c0007b41 <f_mkfs+0x690>
c0007b06:	43                   	inc    ebx
c0007b07:	83 fe 01             	cmp    esi,0x1
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	77 03                	ja     c0007b11 <f_mkfs+0x660>
c0007b0e:	83 ca ff             	or     edx,0xffffffff
c0007b11:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b15:	4e                   	dec    esi
c0007b16:	e8 c6 a0 ff ff       	call   c0001be1 <st_dword>
c0007b1b:	83 c1 04             	add    ecx,0x4
c0007b1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b22:	85 f6                	test   esi,esi
c0007b24:	75 db                	jne    c0007b01 <f_mkfs+0x650>
c0007b26:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b2b:	77 14                	ja     c0007b41 <f_mkfs+0x690>
c0007b2d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b31:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b38:	85 f6                	test   esi,esi
c0007b3a:	74 05                	je     c0007b41 <f_mkfs+0x690>
c0007b3c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b3f:	77 dd                	ja     c0007b1e <f_mkfs+0x66d>
c0007b41:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b45:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b49:	39 cf                	cmp    edi,ecx
c0007b4b:	76 02                	jbe    c0007b4f <f_mkfs+0x69e>
c0007b4d:	89 cf                	mov    edi,ecx
c0007b4f:	83 ec 0c             	sub    esp,0xc
c0007b52:	57                   	push   edi
c0007b53:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b5b:	55                   	push   ebp
c0007b5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b60:	e8 d1 9f ff ff       	call   c0001b36 <disk_write>
c0007b65:	83 c4 20             	add    esp,0x20
c0007b68:	85 c0                	test   eax,eax
c0007b6a:	0f 85 f2 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007b70:	31 d2                	xor    edx,edx
c0007b72:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b76:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b7a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b7e:	0f 85 48 ff ff ff    	jne    c0007acc <f_mkfs+0x61b>
c0007b84:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b87:	31 d2                	xor    edx,edx
c0007b89:	89 e8                	mov    eax,ebp
c0007b8b:	31 ff                	xor    edi,edi
c0007b8d:	e8 6d a0 ff ff       	call   c0001bff <mem_set>
c0007b92:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b95:	ba 02 00 00 00       	mov    edx,0x2
c0007b9a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b9e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007ba2:	e8 3a a0 ff ff       	call   c0001be1 <st_dword>
c0007ba7:	8d 45 38             	lea    eax,[ebp+0x38]
c0007baa:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007bae:	e8 2e a0 ff ff       	call   c0001be1 <st_dword>
c0007bb3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007bb6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007bba:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bbe:	e8 1e a0 ff ff       	call   c0001be1 <st_dword>
c0007bc3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bc6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bce:	83 c2 02             	add    edx,0x2
c0007bd1:	e8 0b a0 ff ff       	call   c0001be1 <st_dword>
c0007bd6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bd9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bdd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007be1:	e8 fb 9f ff ff       	call   c0001be1 <st_dword>
c0007be6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bea:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bef:	89 c6                	mov    esi,eax
c0007bf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bf5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007c00:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007c03:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c07:	39 cb                	cmp    ebx,ecx
c0007c09:	76 02                	jbe    c0007c0d <f_mkfs+0x75c>
c0007c0b:	89 cb                	mov    ebx,ecx
c0007c0d:	83 ec 0c             	sub    esp,0xc
c0007c10:	53                   	push   ebx
c0007c11:	57                   	push   edi
c0007c12:	56                   	push   esi
c0007c13:	55                   	push   ebp
c0007c14:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c18:	e8 19 9f ff ff       	call   c0001b36 <disk_write>
c0007c1d:	83 c4 20             	add    esp,0x20
c0007c20:	85 c0                	test   eax,eax
c0007c22:	0f 85 3a 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007c28:	31 d2                	xor    edx,edx
c0007c2a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c2f:	89 e8                	mov    eax,ebp
c0007c31:	e8 c9 9f ff ff       	call   c0001bff <mem_set>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	01 de                	add    esi,ebx
c0007c3a:	11 d7                	adc    edi,edx
c0007c3c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c3f:	75 bf                	jne    c0007c00 <f_mkfs+0x74f>
c0007c41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c49:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c51:	b9 00 02 00 00       	mov    ecx,0x200
c0007c56:	31 d2                	xor    edx,edx
c0007c58:	89 e8                	mov    eax,ebp
c0007c5a:	e8 a0 9f ff ff       	call   c0001bff <mem_set>
c0007c5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c64:	ba a0 40 02 c0       	mov    edx,0xc00240a0
c0007c69:	89 e8                	mov    eax,ebp
c0007c6b:	e8 7a 9f ff ff       	call   c0001bea <mem_cpy>
c0007c70:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c77:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c7b:	e8 64 9f ff ff       	call   c0001be4 <st_qword>
c0007c80:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c84:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c87:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c8b:	e8 54 9f ff ff       	call   c0001be4 <st_qword>
c0007c90:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c93:	ba 20 00 00 00       	mov    edx,0x20
c0007c98:	e8 44 9f ff ff       	call   c0001be1 <st_dword>
c0007c9d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ca5:	e8 37 9f ff ff       	call   c0001be1 <st_dword>
c0007caa:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007cae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007cb2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007cb6:	e8 26 9f ff ff       	call   c0001be1 <st_dword>
c0007cbb:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cbe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cc2:	e8 1a 9f ff ff       	call   c0001be1 <st_dword>
c0007cc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007ccb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cce:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cd1:	e8 0b 9f ff ff       	call   c0001be1 <st_dword>
c0007cd6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cd9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cde:	e8 fe 9e ff ff       	call   c0001be1 <st_dword>
c0007ce3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ce6:	ba 00 01 00 00       	mov    edx,0x100
c0007ceb:	e8 ed 9e ff ff       	call   c0001bdd <st_word>
c0007cf0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cf4:	b8 0a 00 00 00       	mov    eax,0xa
c0007cf9:	48                   	dec    eax
c0007cfa:	74 05                	je     c0007d01 <f_mkfs+0x850>
c0007cfc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cff:	eb f8                	jmp    c0007cf9 <f_mkfs+0x848>
c0007d01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d05:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007d09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d0d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d11:	74 05                	je     c0007d18 <f_mkfs+0x867>
c0007d13:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d16:	eb f5                	jmp    c0007d0d <f_mkfs+0x85c>
c0007d18:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d1b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d20:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d26:	31 db                	xor    ebx,ebx
c0007d28:	e8 b0 9e ff ff       	call   c0001bdd <st_word>
c0007d2d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d33:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d38:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d3b:	e8 9d 9e ff ff       	call   c0001bdd <st_word>
c0007d40:	31 c9                	xor    ecx,ecx
c0007d42:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d45:	83 f8 01             	cmp    eax,0x1
c0007d48:	76 13                	jbe    c0007d5d <f_mkfs+0x8ac>
c0007d4a:	83 f9 70             	cmp    ecx,0x70
c0007d4d:	74 0e                	je     c0007d5d <f_mkfs+0x8ac>
c0007d4f:	89 da                	mov    edx,ebx
c0007d51:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d56:	e8 0b a3 ff ff       	call   c0002066 <xsum32>
c0007d5b:	89 c3                	mov    ebx,eax
c0007d5d:	41                   	inc    ecx
c0007d5e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d64:	75 dc                	jne    c0007d42 <f_mkfs+0x891>
c0007d66:	89 f0                	mov    eax,esi
c0007d68:	89 fa                	mov    edx,edi
c0007d6a:	83 c0 01             	add    eax,0x1
c0007d6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d71:	83 d2 00             	adc    edx,0x0
c0007d74:	83 ec 0c             	sub    esp,0xc
c0007d77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d7b:	6a 01                	push   0x1
c0007d7d:	57                   	push   edi
c0007d7e:	56                   	push   esi
c0007d7f:	55                   	push   ebp
c0007d80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d84:	e8 ad 9d ff ff       	call   c0001b36 <disk_write>
c0007d89:	83 c4 20             	add    esp,0x20
c0007d8c:	85 c0                	test   eax,eax
c0007d8e:	0f 85 ce 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	b9 00 02 00 00       	mov    ecx,0x200
c0007d9b:	89 e8                	mov    eax,ebp
c0007d9d:	e8 5d 9e ff ff       	call   c0001bff <mem_set>
c0007da2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007da7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007daa:	e8 2e 9e ff ff       	call   c0001bdd <st_word>
c0007daf:	89 f0                	mov    eax,esi
c0007db1:	89 fa                	mov    edx,edi
c0007db3:	83 c0 09             	add    eax,0x9
c0007db6:	83 d2 00             	adc    edx,0x0
c0007db9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007dc0:	31 c9                	xor    ecx,ecx
c0007dc2:	41                   	inc    ecx
c0007dc3:	89 da                	mov    edx,ebx
c0007dc5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dca:	e8 97 a2 ff ff       	call   c0002066 <xsum32>
c0007dcf:	89 c3                	mov    ebx,eax
c0007dd1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dd7:	75 e9                	jne    c0007dc2 <f_mkfs+0x911>
c0007dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ddd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007de1:	83 c0 01             	add    eax,0x1
c0007de4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007de8:	83 d2 00             	adc    edx,0x0
c0007deb:	83 ec 0c             	sub    esp,0xc
c0007dee:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007df2:	6a 01                	push   0x1
c0007df4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007df8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dfc:	55                   	push   ebp
c0007dfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e01:	e8 30 9d ff ff       	call   c0001b36 <disk_write>
c0007e06:	83 c4 20             	add    esp,0x20
c0007e09:	85 c0                	test   eax,eax
c0007e0b:	0f 85 51 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e15:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e19:	75 09                	jne    c0007e24 <f_mkfs+0x973>
c0007e1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e1e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e22:	74 12                	je     c0007e36 <f_mkfs+0x985>
c0007e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e34:	eb 8a                	jmp    c0007dc0 <f_mkfs+0x90f>
c0007e36:	31 d2                	xor    edx,edx
c0007e38:	b9 00 02 00 00       	mov    ecx,0x200
c0007e3d:	89 e8                	mov    eax,ebp
c0007e3f:	e8 bb 9d ff ff       	call   c0001bff <mem_set>
c0007e44:	83 c6 0b             	add    esi,0xb
c0007e47:	83 d7 00             	adc    edi,0x0
c0007e4a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e4e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e52:	31 c9                	xor    ecx,ecx
c0007e54:	41                   	inc    ecx
c0007e55:	89 da                	mov    edx,ebx
c0007e57:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e5c:	e8 05 a2 ff ff       	call   c0002066 <xsum32>
c0007e61:	89 c3                	mov    ebx,eax
c0007e63:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e69:	75 e9                	jne    c0007e54 <f_mkfs+0x9a3>
c0007e6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e6e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e72:	83 c6 01             	add    esi,0x1
c0007e75:	83 d7 00             	adc    edi,0x0
c0007e78:	83 ec 0c             	sub    esp,0xc
c0007e7b:	6a 01                	push   0x1
c0007e7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e85:	55                   	push   ebp
c0007e86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e8a:	e8 a7 9c ff ff       	call   c0001b36 <disk_write>
c0007e8f:	83 c4 20             	add    esp,0x20
c0007e92:	85 c0                	test   eax,eax
c0007e94:	0f 85 c8 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e9a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e9e:	75 06                	jne    c0007ea6 <f_mkfs+0x9f5>
c0007ea0:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007ea4:	74 09                	je     c0007eaf <f_mkfs+0x9fe>
c0007ea6:	89 34 24             	mov    DWORD PTR [esp],esi
c0007ea9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007ead:	eb a3                	jmp    c0007e52 <f_mkfs+0x9a1>
c0007eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	01 e8                	add    eax,ebp
c0007eb7:	e8 25 9d ff ff       	call   c0001be1 <st_dword>
c0007ebc:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ec1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ec9:	75 e4                	jne    c0007eaf <f_mkfs+0x9fe>
c0007ecb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ece:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ed2:	83 c6 02             	add    esi,0x2
c0007ed5:	83 d7 00             	adc    edi,0x0
c0007ed8:	83 ec 0c             	sub    esp,0xc
c0007edb:	6a 01                	push   0x1
c0007edd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee5:	55                   	push   ebp
c0007ee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eea:	e8 47 9c ff ff       	call   c0001b36 <disk_write>
c0007eef:	83 c4 20             	add    esp,0x20
c0007ef2:	85 c0                	test   eax,eax
c0007ef4:	0f 85 68 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007efa:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eff:	74 0d                	je     c0007f0e <f_mkfs+0xa5d>
c0007f01:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007f09:	e9 43 fd ff ff       	jmp    c0007c51 <f_mkfs+0x7a0>
c0007f0e:	b1 07                	mov    cl,0x7
c0007f10:	e9 e3 05 00 00       	jmp    c00084f8 <f_mkfs+0x1047>
c0007f15:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f1a:	0f 85 4f 02 00 00    	jne    c000816f <f_mkfs+0xcbe>
c0007f20:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f25:	0f 86 22 02 00 00    	jbe    c000814d <f_mkfs+0xc9c>
c0007f2b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f30:	0f 85 81 06 00 00    	jne    c00085b7 <f_mkfs+0x1106>
c0007f36:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f3d:	83 f8 40             	cmp    eax,0x40
c0007f40:	0f 87 51 06 00 00    	ja     c0008597 <f_mkfs+0x10e6>
c0007f46:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f4a:	85 ff                	test   edi,edi
c0007f4c:	75 1c                	jne    c0007f6a <f_mkfs+0xab9>
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	ba a0 3f 02 c0       	mov    edx,0xc0023fa0
c0007f56:	c1 e9 0c             	shr    ecx,0xc
c0007f59:	bf 01 00 00 00       	mov    edi,0x1
c0007f5e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f61:	66 85 c0             	test   ax,ax
c0007f64:	0f 85 95 01 00 00    	jne    c00080ff <f_mkfs+0xc4e>
c0007f6a:	31 d2                	xor    edx,edx
c0007f6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f6f:	f7 f7                	div    edi
c0007f71:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f76:	0f 86 95 01 00 00    	jbe    c0008111 <f_mkfs+0xc60>
c0007f7c:	83 c0 02             	add    eax,0x2
c0007f7f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f84:	01 c0                	add    eax,eax
c0007f86:	05 ff 01 00 00       	add    eax,0x1ff
c0007f8b:	be 01 00 00 00       	mov    esi,0x1
c0007f90:	c1 e8 09             	shr    eax,0x9
c0007f93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f9b:	c1 e0 05             	shl    eax,0x5
c0007f9e:	c1 e8 09             	shr    eax,0x9
c0007fa1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007fa5:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fb0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fb4:	89 f0                	mov    eax,esi
c0007fb6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fba:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fc2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fca:	31 d2                	xor    edx,edx
c0007fcc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fd1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fd5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fd9:	31 db                	xor    ebx,ebx
c0007fdb:	01 c8                	add    eax,ecx
c0007fdd:	11 da                	adc    edx,ebx
c0007fdf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fe3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fe7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007feb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fef:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ff3:	f7 da                	neg    edx
c0007ff5:	21 d1                	and    ecx,edx
c0007ff7:	29 d9                	sub    ecx,ebx
c0007ff9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ffe:	0f 85 20 01 00 00    	jne    c0008124 <f_mkfs+0xc73>
c0008004:	31 db                	xor    ebx,ebx
c0008006:	01 ce                	add    esi,ecx
c0008008:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c000800c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008010:	31 d2                	xor    edx,edx
c0008012:	89 f8                	mov    eax,edi
c0008014:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008018:	c1 e0 04             	shl    eax,0x4
c000801b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000801f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008023:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008027:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000802b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000802e:	19 d3                	sbb    ebx,edx
c0008030:	0f 82 40 01 00 00    	jb     c0008176 <f_mkfs+0xcc5>
c0008036:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008039:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000803d:	89 c8                	mov    eax,ecx
c000803f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008044:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008048:	29 f0                	sub    eax,esi
c000804a:	29 d0                	sub    eax,edx
c000804c:	31 d2                	xor    edx,edx
c000804e:	f7 f7                	div    edi
c0008050:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008055:	89 c3                	mov    ebx,eax
c0008057:	0f 85 b8 fe ff ff    	jne    c0007f15 <f_mkfs+0xa64>
c000805d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008062:	0f 87 1d 01 00 00    	ja     c0008185 <f_mkfs+0xcd4>
c0008068:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000806d:	0f 85 03 01 00 00    	jne    c0008176 <f_mkfs+0xcc5>
c0008073:	83 ff 01             	cmp    edi,0x1
c0008076:	0f 86 fa 00 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c000807c:	d1 ef                	shr    edi,1
c000807e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008082:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008086:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008089:	85 db                	test   ebx,ebx
c000808b:	75 2d                	jne    c00080ba <f_mkfs+0xc09>
c000808d:	89 cb                	mov    ebx,ecx
c000808f:	ba b0 3f 02 c0       	mov    edx,0xc0023fb0
c0008094:	c1 eb 11             	shr    ebx,0x11
c0008097:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000809f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00080a2:	66 85 c0             	test   ax,ax
c00080a5:	74 11                	je     c00080b8 <f_mkfs+0xc07>
c00080a7:	83 c2 02             	add    edx,0x2
c00080aa:	39 d8                	cmp    eax,ebx
c00080ac:	77 0a                	ja     c00080b8 <f_mkfs+0xc07>
c00080ae:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080b2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080b6:	eb e7                	jmp    c000809f <f_mkfs+0xbee>
c00080b8:	31 db                	xor    ebx,ebx
c00080ba:	31 d2                	xor    edx,edx
c00080bc:	89 c8                	mov    eax,ecx
c00080be:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080c2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080c9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080ce:	c1 ea 09             	shr    edx,0x9
c00080d1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080da:	0f 87 96 00 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c00080e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080ec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080f0:	be 20 00 00 00       	mov    esi,0x20
c00080f5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080fa:	e9 a6 fe ff ff       	jmp    c0007fa5 <f_mkfs+0xaf4>
c00080ff:	83 c2 02             	add    edx,0x2
c0008102:	39 c8                	cmp    eax,ecx
c0008104:	0f 87 60 fe ff ff    	ja     c0007f6a <f_mkfs+0xab9>
c000810a:	01 ff                	add    edi,edi
c000810c:	e9 4d fe ff ff       	jmp    c0007f5e <f_mkfs+0xaad>
c0008111:	8d 04 40             	lea    eax,[eax+eax*2]
c0008114:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008119:	40                   	inc    eax
c000811a:	d1 e8                	shr    eax,1
c000811c:	83 c0 03             	add    eax,0x3
c000811f:	e9 62 fe ff ff       	jmp    c0007f86 <f_mkfs+0xad5>
c0008124:	31 d2                	xor    edx,edx
c0008126:	89 c8                	mov    eax,ecx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	85 d2                	test   edx,edx
c000812e:	74 0c                	je     c000813c <f_mkfs+0xc8b>
c0008130:	49                   	dec    ecx
c0008131:	46                   	inc    esi
c0008132:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008137:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000813c:	89 c8                	mov    eax,ecx
c000813e:	31 d2                	xor    edx,edx
c0008140:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008144:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008148:	e9 c3 fe ff ff       	jmp    c0008010 <f_mkfs+0xb5f>
c000814d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008152:	77 31                	ja     c0008185 <f_mkfs+0xcd4>
c0008154:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008159:	75 1b                	jne    c0008176 <f_mkfs+0xcc5>
c000815b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000815e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008162:	3d 80 00 00 00       	cmp    eax,0x80
c0008167:	0f 86 d9 fd ff ff    	jbe    c0007f46 <f_mkfs+0xa95>
c000816d:	eb 07                	jmp    c0008176 <f_mkfs+0xcc5>
c000816f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008174:	76 0a                	jbe    c0008180 <f_mkfs+0xccf>
c0008176:	bb 0e 00 00 00       	mov    ebx,0xe
c000817b:	e9 ff 03 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0008180:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008185:	31 d2                	xor    edx,edx
c0008187:	b9 00 02 00 00       	mov    ecx,0x200
c000818c:	89 e8                	mov    eax,ebp
c000818e:	e8 6c 9a ff ff       	call   c0001bff <mem_set>
c0008193:	b9 0b 00 00 00       	mov    ecx,0xb
c0008198:	ba c2 40 02 c0       	mov    edx,0xc00240c2
c000819d:	89 e8                	mov    eax,ebp
c000819f:	e8 46 9a ff ff       	call   c0001bea <mem_cpy>
c00081a4:	8d 45 0b             	lea    eax,[ebp+0xb]
c00081a7:	ba 00 02 00 00       	mov    edx,0x200
c00081ac:	e8 2c 9a ff ff       	call   c0001bdd <st_word>
c00081b1:	89 f8                	mov    eax,edi
c00081b3:	0f b7 d6             	movzx  edx,si
c00081b6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081b9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081bc:	e8 1c 9a ff ff       	call   c0001bdd <st_word>
c00081c1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081c5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ca:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081cd:	75 08                	jne    c00081d7 <f_mkfs+0xd26>
c00081cf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081d7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081de:	e8 fa 99 ff ff       	call   c0001bdd <st_word>
c00081e3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081e8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081ec:	39 d0                	cmp    eax,edx
c00081ee:	b8 00 00 00 00       	mov    eax,0x0
c00081f3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081f7:	72 0a                	jb     c0008203 <f_mkfs+0xd52>
c00081f9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081fc:	e8 dc 99 ff ff       	call   c0001bdd <st_word>
c0008201:	eb 08                	jmp    c000820b <f_mkfs+0xd5a>
c0008203:	8d 45 20             	lea    eax,[ebp+0x20]
c0008206:	e8 d6 99 ff ff       	call   c0001be1 <st_dword>
c000820b:	8d 45 18             	lea    eax,[ebp+0x18]
c000820e:	ba 3f 00 00 00       	mov    edx,0x3f
c0008213:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008217:	e8 c1 99 ff ff       	call   c0001bdd <st_word>
c000821c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000821f:	ba ff 00 00 00       	mov    edx,0xff
c0008224:	e8 b4 99 ff ff       	call   c0001bdd <st_word>
c0008229:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000822c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008230:	e8 ac 99 ff ff       	call   c0001be1 <st_dword>
c0008235:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000823a:	75 57                	jne    c0008293 <f_mkfs+0xde2>
c000823c:	8d 45 43             	lea    eax,[ebp+0x43]
c000823f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008244:	e8 98 99 ff ff       	call   c0001be1 <st_dword>
c0008249:	8d 45 24             	lea    eax,[ebp+0x24]
c000824c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008250:	e8 8c 99 ff ff       	call   c0001be1 <st_dword>
c0008255:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008258:	ba 02 00 00 00       	mov    edx,0x2
c000825d:	e8 7f 99 ff ff       	call   c0001be1 <st_dword>
c0008262:	8d 45 30             	lea    eax,[ebp+0x30]
c0008265:	ba 01 00 00 00       	mov    edx,0x1
c000826a:	e8 6e 99 ff ff       	call   c0001bdd <st_word>
c000826f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008272:	ba 06 00 00 00       	mov    edx,0x6
c0008277:	e8 61 99 ff ff       	call   c0001bdd <st_word>
c000827c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008280:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008284:	8d 45 47             	lea    eax,[ebp+0x47]
c0008287:	b9 13 00 00 00       	mov    ecx,0x13
c000828c:	ba ce 40 02 c0       	mov    edx,0xc00240ce
c0008291:	eb 2f                	jmp    c00082c2 <f_mkfs+0xe11>
c0008293:	8d 45 27             	lea    eax,[ebp+0x27]
c0008296:	ba 00 00 21 50       	mov    edx,0x50210000
c000829b:	e8 41 99 ff ff       	call   c0001be1 <st_dword>
c00082a0:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00082a5:	8d 45 16             	lea    eax,[ebp+0x16]
c00082a8:	e8 30 99 ff ff       	call   c0001bdd <st_word>
c00082ad:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082b1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082b5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082b8:	b9 13 00 00 00       	mov    ecx,0x13
c00082bd:	ba e2 40 02 c0       	mov    edx,0xc00240e2
c00082c2:	e8 23 99 ff ff       	call   c0001bea <mem_cpy>
c00082c7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082cd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082d2:	89 f0                	mov    eax,esi
c00082d4:	e8 04 99 ff ff       	call   c0001bdd <st_word>
c00082d9:	83 ec 0c             	sub    esp,0xc
c00082dc:	6a 01                	push   0x1
c00082de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 46 98 ff ff       	call   c0001b36 <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 67 02 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	0f 85 b7 00 00 00    	jne    c00083bd <f_mkfs+0xf0c>
c0008306:	83 ec 0c             	sub    esp,0xc
c0008309:	6a 01                	push   0x1
c000830b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008313:	83 c0 06             	add    eax,0x6
c0008316:	83 d2 00             	adc    edx,0x0
c0008319:	52                   	push   edx
c000831a:	50                   	push   eax
c000831b:	55                   	push   ebp
c000831c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008320:	e8 11 98 ff ff       	call   c0001b36 <disk_write>
c0008325:	83 c4 20             	add    esp,0x20
c0008328:	b9 00 02 00 00       	mov    ecx,0x200
c000832d:	31 d2                	xor    edx,edx
c000832f:	89 e8                	mov    eax,ebp
c0008331:	e8 c9 98 ff ff       	call   c0001bff <mem_set>
c0008336:	ba 52 52 61 41       	mov    edx,0x41615252
c000833b:	89 e8                	mov    eax,ebp
c000833d:	e8 9f 98 ff ff       	call   c0001be1 <st_dword>
c0008342:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008348:	ba 72 72 41 61       	mov    edx,0x61417272
c000834d:	e8 8f 98 ff ff       	call   c0001be1 <st_dword>
c0008352:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008355:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000835b:	e8 81 98 ff ff       	call   c0001be1 <st_dword>
c0008360:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008366:	ba 02 00 00 00       	mov    edx,0x2
c000836b:	e8 71 98 ff ff       	call   c0001be1 <st_dword>
c0008370:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008375:	89 f0                	mov    eax,esi
c0008377:	e8 61 98 ff ff       	call   c0001bdd <st_word>
c000837c:	83 ec 0c             	sub    esp,0xc
c000837f:	6a 01                	push   0x1
c0008381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008385:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008389:	83 c0 07             	add    eax,0x7
c000838c:	83 d2 00             	adc    edx,0x0
c000838f:	52                   	push   edx
c0008390:	50                   	push   eax
c0008391:	55                   	push   ebp
c0008392:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008396:	e8 9b 97 ff ff       	call   c0001b36 <disk_write>
c000839b:	83 c4 14             	add    esp,0x14
c000839e:	6a 01                	push   0x1
c00083a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083a8:	83 c0 01             	add    eax,0x1
c00083ab:	83 d2 00             	adc    edx,0x0
c00083ae:	52                   	push   edx
c00083af:	50                   	push   eax
c00083b0:	55                   	push   ebp
c00083b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083b5:	e8 7c 97 ff ff       	call   c0001b36 <disk_write>
c00083ba:	83 c4 20             	add    esp,0x20
c00083bd:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083c4:	31 d2                	xor    edx,edx
c00083c6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083cc:	31 db                	xor    ebx,ebx
c00083ce:	89 e8                	mov    eax,ebp
c00083d0:	e8 2a 98 ff ff       	call   c0001bff <mem_set>
c00083d5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083e1:	0f 94 c3             	sete   bl
c00083e4:	4b                   	dec    ebx
c00083e5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083eb:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083f6:	75 21                	jne    c0008419 <f_mkfs+0xf68>
c00083f8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083fd:	89 e8                	mov    eax,ebp
c00083ff:	e8 dd 97 ff ff       	call   c0001be1 <st_dword>
c0008404:	8d 45 04             	lea    eax,[ebp+0x4]
c0008407:	83 ca ff             	or     edx,0xffffffff
c000840a:	e8 d2 97 ff ff       	call   c0001be1 <st_dword>
c000840f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008412:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008417:	eb 04                	jmp    c000841d <f_mkfs+0xf6c>
c0008419:	89 da                	mov    edx,ebx
c000841b:	89 e8                	mov    eax,ebp
c000841d:	e8 bf 97 ff ff       	call   c0001be1 <st_dword>
c0008422:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000842a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000842e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008432:	39 ce                	cmp    esi,ecx
c0008434:	76 02                	jbe    c0008438 <f_mkfs+0xf87>
c0008436:	89 ce                	mov    esi,ecx
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	56                   	push   esi
c000843c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008440:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008444:	55                   	push   ebp
c0008445:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008449:	e8 e8 96 ff ff       	call   c0001b36 <disk_write>
c000844e:	83 c4 20             	add    esp,0x20
c0008451:	85 c0                	test   eax,eax
c0008453:	0f 85 09 01 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0008459:	31 d2                	xor    edx,edx
c000845b:	b9 00 02 00 00       	mov    ecx,0x200
c0008460:	89 e8                	mov    eax,ebp
c0008462:	e8 98 97 ff ff       	call   c0001bff <mem_set>
c0008467:	31 d2                	xor    edx,edx
c0008469:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000846d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008471:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008475:	75 b3                	jne    c000842a <f_mkfs+0xf79>
c0008477:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000847a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008481:	40                   	inc    eax
c0008482:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008486:	0f 87 65 ff ff ff    	ja     c00083f1 <f_mkfs+0xf40>
c000848c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008491:	74 04                	je     c0008497 <f_mkfs+0xfe6>
c0008493:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008497:	89 fb                	mov    ebx,edi
c0008499:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000849d:	76 04                	jbe    c00084a3 <f_mkfs+0xff2>
c000849f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00084a3:	83 ec 0c             	sub    esp,0xc
c00084a6:	53                   	push   ebx
c00084a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084af:	55                   	push   ebp
c00084b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084b4:	e8 7d 96 ff ff       	call   c0001b36 <disk_write>
c00084b9:	83 c4 20             	add    esp,0x20
c00084bc:	85 c0                	test   eax,eax
c00084be:	0f 85 9e 00 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00084c4:	31 d2                	xor    edx,edx
c00084c6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ca:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084ce:	29 df                	sub    edi,ebx
c00084d0:	75 c5                	jne    c0008497 <f_mkfs+0xfe6>
c00084d2:	b1 0c                	mov    cl,0xc
c00084d4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084d9:	74 1d                	je     c00084f8 <f_mkfs+0x1047>
c00084db:	b8 ff ff 00 00       	mov    eax,0xffff
c00084e0:	b1 06                	mov    cl,0x6
c00084e2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084e6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084ea:	72 0c                	jb     c00084f8 <f_mkfs+0x1047>
c00084ec:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084f1:	0f 94 c1             	sete   cl
c00084f4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084f8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084fd:	75 4c                	jne    c000854b <f_mkfs+0x109a>
c00084ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008503:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008507:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000850e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008515:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008520:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000852b:	0f b6 c9             	movzx  ecx,cl
c000852e:	83 ec 0c             	sub    esp,0xc
c0008531:	55                   	push   ebp
c0008532:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000853d:	e8 f9 bf ff ff       	call   c000453b <create_partition>
c0008542:	83 c4 10             	add    esp,0x10
c0008545:	89 c3                	mov    ebx,eax
c0008547:	85 c0                	test   eax,eax
c0008549:	75 34                	jne    c000857f <f_mkfs+0x10ce>
c000854b:	31 db                	xor    ebx,ebx
c000854d:	50                   	push   eax
c000854e:	6a 00                	push   0x0
c0008550:	6a 00                	push   0x0
c0008552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008556:	e8 f1 95 ff ff       	call   c0001b4c <disk_ioctl>
c000855b:	83 c4 10             	add    esp,0x10
c000855e:	85 c0                	test   eax,eax
c0008560:	74 1d                	je     c000857f <f_mkfs+0x10ce>
c0008562:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856a:	75 0c                	jne    c0008578 <f_mkfs+0x10c7>
c000856c:	83 ec 0c             	sub    esp,0xc
c000856f:	55                   	push   ebp
c0008570:	e8 77 00 00 00       	call   c00085ec <ff_memfree>
c0008575:	83 c4 10             	add    esp,0x10
c0008578:	bb 01 00 00 00       	mov    ebx,0x1
c000857d:	eb 48                	jmp    c00085c7 <f_mkfs+0x1116>
c000857f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008587:	75 3e                	jne    c00085c7 <f_mkfs+0x1116>
c0008589:	83 ec 0c             	sub    esp,0xc
c000858c:	55                   	push   ebp
c000858d:	e8 5a 00 00 00       	call   c00085ec <ff_memfree>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	eb 30                	jmp    c00085c7 <f_mkfs+0x1116>
c0008597:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000859c:	0f 85 eb fa ff ff    	jne    c000808d <f_mkfs+0xbdc>
c00085a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00085a6:	81 ff 80 00 00 00    	cmp    edi,0x80
c00085ac:	0f 86 b8 f9 ff ff    	jbe    c0007f6a <f_mkfs+0xab9>
c00085b2:	e9 bf fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085b7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085bc:	0f 85 c0 fa ff ff    	jne    c0008082 <f_mkfs+0xbd1>
c00085c2:	e9 af fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085c7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085cd:	89 d8                	mov    eax,ebx
c00085cf:	5b                   	pop    ebx
c00085d0:	5e                   	pop    esi
c00085d1:	5f                   	pop    edi
c00085d2:	5d                   	pop    ebp
c00085d3:	c3                   	ret    

c00085d4 <ff_memalloc>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 04 18 00 00       	call   c0009de7 <malloc>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	83 c4 0c             	add    esp,0xc
c00085e9:	c3                   	ret    
c00085ea:	66 90                	xchg   ax,ax

c00085ec <ff_memfree>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	83 ec 0c             	sub    esp,0xc
c00085f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085f6:	e8 fc 17 00 00       	call   c0009df7 <free>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	90                   	nop
c00085ff:	83 c4 0c             	add    esp,0xc
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <ff_uni2oem>:
c0008604:	83 ec 14             	sub    esp,0x14
c0008607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000860b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000860f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008616:	c7 44 24 0c 00 44 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024400
c000861e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008623:	77 0b                	ja     c0008630 <ff_uni2oem+0x2c>
c0008625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008629:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000862e:	eb 60                	jmp    c0008690 <ff_uni2oem+0x8c>
c0008630:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008638:	77 56                	ja     c0008690 <ff_uni2oem+0x8c>
c000863a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008640:	75 4e                	jne    c0008690 <ff_uni2oem+0x8c>
c0008642:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008649:	eb 0d                	jmp    c0008658 <ff_uni2oem+0x54>
c000864b:	90                   	nop
c000864c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008651:	40                   	inc    eax
c0008652:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008657:	90                   	nop
c0008658:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000865e:	77 1c                	ja     c000867c <ff_uni2oem+0x78>
c0008660:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008665:	01 c0                	add    eax,eax
c0008667:	89 c2                	mov    edx,eax
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	01 d0                	add    eax,edx
c000866f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008672:	0f b7 c0             	movzx  eax,ax
c0008675:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008679:	75 d1                	jne    c000864c <ff_uni2oem+0x48>
c000867b:	90                   	nop
c000867c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008681:	83 e8 80             	sub    eax,0xffffff80
c0008684:	25 ff 00 00 00       	and    eax,0xff
c0008689:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000868e:	66 90                	xchg   ax,ax
c0008690:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008695:	83 c4 14             	add    esp,0x14
c0008698:	c3                   	ret    
c0008699:	8d 76 00             	lea    esi,[esi+0x0]

c000869c <ff_oem2uni>:
c000869c:	83 ec 18             	sub    esp,0x18
c000869f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086a7:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00086ac:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086b0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086b7:	c7 44 24 10 00 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024400
c00086bf:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086c5:	77 0d                	ja     c00086d4 <ff_oem2uni+0x38>
c00086c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086cb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086d0:	eb 32                	jmp    c0008704 <ff_oem2uni+0x68>
c00086d2:	66 90                	xchg   ax,ax
c00086d4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086da:	75 28                	jne    c0008704 <ff_oem2uni+0x68>
c00086dc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086e3:	77 1f                	ja     c0008704 <ff_oem2uni+0x68>
c00086e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086ea:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086ef:	01 c0                	add    eax,eax
c00086f1:	89 c2                	mov    edx,eax
c00086f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f7:	01 d0                	add    eax,edx
c00086f9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008701:	8d 76 00             	lea    esi,[esi+0x0]
c0008704:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008709:	83 c4 18             	add    esp,0x18
c000870c:	c3                   	ret    
c000870d:	8d 76 00             	lea    esi,[esi+0x0]

c0008710 <ff_wtoupper>:
c0008710:	83 ec 10             	sub    esp,0x10
c0008713:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000871b:	0f 87 4f 01 00 00    	ja     c0008870 <ff_wtoupper+0x160>
c0008721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008725:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000872a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008731:	77 09                	ja     c000873c <ff_wtoupper+0x2c>
c0008733:	b8 00 42 02 c0       	mov    eax,0xc0024200
c0008738:	eb 0a                	jmp    c0008744 <ff_wtoupper+0x34>
c000873a:	66 90                	xchg   ax,ax
c000873c:	b8 40 41 02 c0       	mov    eax,0xc0024140
c0008741:	8d 76 00             	lea    esi,[esi+0x0]
c0008744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008748:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000874c:	8d 50 02             	lea    edx,[eax+0x2]
c000874f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008753:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008756:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000875b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008761:	0f 84 fd 00 00 00    	je     c0008864 <ff_wtoupper+0x154>
c0008767:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000876c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008771:	0f 82 ed 00 00 00    	jb     c0008864 <ff_wtoupper+0x154>
c0008777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000877b:	8d 50 02             	lea    edx,[eax+0x2]
c000877e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008782:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008785:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000878a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000878f:	66 c1 e8 08          	shr    ax,0x8
c0008793:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008798:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000879f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00087a4:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00087a9:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00087ae:	01 ca                	add    edx,ecx
c00087b0:	39 d0                	cmp    eax,edx
c00087b2:	0f 8d 8c 00 00 00    	jge    c0008844 <ff_wtoupper+0x134>
c00087b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087bd:	83 f8 08             	cmp    eax,0x8
c00087c0:	0f 87 9a 00 00 00    	ja     c0008860 <ff_wtoupper+0x150>
c00087c6:	8b 04 85 00 41 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf00]
c00087cd:	ff e0                	jmp    eax
c00087cf:	90                   	nop
c00087d0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087d5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087da:	29 c2                	sub    edx,eax
c00087dc:	89 d0                	mov    eax,edx
c00087de:	01 c0                	add    eax,eax
c00087e0:	89 c2                	mov    edx,eax
c00087e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087e6:	01 d0                	add    eax,edx
c00087e8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087eb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087f0:	eb 4e                	jmp    c0008840 <ff_wtoupper+0x130>
c00087f2:	66 90                	xchg   ax,ax
c00087f4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087fd:	83 e0 01             	and    eax,0x1
c0008800:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008805:	eb 39                	jmp    c0008840 <ff_wtoupper+0x130>
c0008807:	90                   	nop
c0008808:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000880e:	eb 30                	jmp    c0008840 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008816:	eb 28                	jmp    c0008840 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000881e:	eb 20                	jmp    c0008840 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008826:	eb 18                	jmp    c0008840 <ff_wtoupper+0x130>
c0008828:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000882e:	eb 10                	jmp    c0008840 <ff_wtoupper+0x130>
c0008830:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008836:	eb 08                	jmp    c0008840 <ff_wtoupper+0x130>
c0008838:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000883f:	90                   	nop
c0008840:	eb 1e                	jmp    c0008860 <ff_wtoupper+0x150>
c0008842:	66 90                	xchg   ax,ax
c0008844:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000884a:	0f 85 f8 fe ff ff    	jne    c0008748 <ff_wtoupper+0x38>
c0008850:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008855:	01 c0                	add    eax,eax
c0008857:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000885b:	e9 e8 fe ff ff       	jmp    c0008748 <ff_wtoupper+0x38>
c0008860:	90                   	nop
c0008861:	8d 76 00             	lea    esi,[esi+0x0]
c0008864:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008869:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000886d:	8d 76 00             	lea    esi,[esi+0x0]
c0008870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	c3                   	ret    

c0008878 <CPU::current()>:
c0008878:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000887d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008883:	c3                   	ret    

c0008884 <operator new(unsigned long)>:
c0008884:	e9 5e 15 00 00       	jmp    c0009de7 <malloc>

c0008889 <operator delete(void*)>:
c0008889:	e9 79 15 00 00       	jmp    c0009e07 <rfree>

c000888e <disableIRQs()>:
c000888e:	fa                   	cli    
c000888f:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0008895:	c3                   	ret    

c0008896 <enableIRQs()>:
c0008896:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000889b:	48                   	dec    eax
c000889c:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00088a1:	75 01                	jne    c00088a4 <enableIRQs()+0xe>
c00088a3:	fb                   	sti    
c00088a4:	c3                   	ret    

c00088a5 <lockScheduler()>:
c00088a5:	fa                   	cli    
c00088a6:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00088ac:	c3                   	ret    

c00088ad <unlockScheduler()>:
c00088ad:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00088b2:	48                   	dec    eax
c00088b3:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00088b8:	75 01                	jne    c00088bb <unlockScheduler()+0xe>
c00088ba:	fb                   	sti    
c00088bb:	c3                   	ret    

c00088bc <lockStuff()>:
c00088bc:	fa                   	cli    
c00088bd:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00088c3:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c00088c9:	c3                   	ret    

c00088ca <unlockStuff()>:
c00088ca:	83 ec 0c             	sub    esp,0xc
c00088cd:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00088d2:	48                   	dec    eax
c00088d3:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00088d8:	75 18                	jne    c00088f2 <unlockStuff()+0x28>
c00088da:	83 3d e0 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a0e0,0x0
c00088e1:	74 0f                	je     c00088f2 <unlockStuff()+0x28>
c00088e3:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00088ed:	e8 1e 06 01 00       	call   c0018f10 <schedule()>
c00088f2:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00088f7:	48                   	dec    eax
c00088f8:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00088fd:	75 01                	jne    c0008900 <unlockStuff()+0x36>
c00088ff:	fb                   	sti    
c0008900:	83 c4 0c             	add    esp,0xc
c0008903:	c3                   	ret    

c0008904 <Virt::getAKernelVAS()>:
c0008904:	a1 f0 8c 02 c0       	mov    eax,ds:0xc0028cf0
c0008909:	c3                   	ret    

c000890a <__not_memcpy>:
c000890a:	57                   	push   edi
c000890b:	56                   	push   esi
c000890c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008910:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008914:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008918:	89 c7                	mov    edi,eax
c000891a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000891c:	5e                   	pop    esi
c000891d:	5f                   	pop    edi
c000891e:	c3                   	ret    
c000891f:	90                   	nop

c0008920 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	83 ec 08             	sub    esp,0x8
c0008926:	68 00 45 02 c0       	push   0xc0024500
c000892b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000892f:	e8 a8 7e ff ff       	call   c00007dc <strcmp>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	85 c0                	test   eax,eax
c0008939:	0f 94 c0             	sete   al
c000893c:	84 c0                	test   al,al
c000893e:	74 0c                	je     c000894c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008940:	b8 c8 8b 02 c0       	mov    eax,0xc0028bc8
c0008945:	e9 ea 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000894a:	66 90                	xchg   ax,ax
c000894c:	83 ec 08             	sub    esp,0x8
c000894f:	68 09 45 02 c0       	push   0xc0024509
c0008954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008958:	e8 7f 7e ff ff       	call   c00007dc <strcmp>
c000895d:	83 c4 10             	add    esp,0x10
c0008960:	85 c0                	test   eax,eax
c0008962:	0f 94 c0             	sete   al
c0008965:	84 c0                	test   al,al
c0008967:	74 0b                	je     c0008974 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008969:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c000896e:	e9 c1 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008973:	90                   	nop
c0008974:	83 ec 08             	sub    esp,0x8
c0008977:	68 13 45 02 c0       	push   0xc0024513
c000897c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008980:	e8 57 7e ff ff       	call   c00007dc <strcmp>
c0008985:	83 c4 10             	add    esp,0x10
c0008988:	85 c0                	test   eax,eax
c000898a:	0f 94 c0             	sete   al
c000898d:	84 c0                	test   al,al
c000898f:	74 0b                	je     c000899c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008991:	b8 d4 2c 02 c0       	mov    eax,0xc0022cd4
c0008996:	e9 99 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000899b:	90                   	nop
c000899c:	83 ec 08             	sub    esp,0x8
c000899f:	68 1c 45 02 c0       	push   0xc002451c
c00089a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089a8:	e8 2f 7e ff ff       	call   c00007dc <strcmp>
c00089ad:	83 c4 10             	add    esp,0x10
c00089b0:	85 c0                	test   eax,eax
c00089b2:	0f 94 c0             	sete   al
c00089b5:	84 c0                	test   al,al
c00089b7:	74 07                	je     c00089c0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089b9:	b8 a0 30 02 c0       	mov    eax,0xc00230a0
c00089be:	eb 74                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089c0:	83 ec 08             	sub    esp,0x8
c00089c3:	68 26 45 02 c0       	push   0xc0024526
c00089c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089cc:	e8 0b 7e ff ff       	call   c00007dc <strcmp>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	85 c0                	test   eax,eax
c00089d6:	0f 94 c0             	sete   al
c00089d9:	84 c0                	test   al,al
c00089db:	74 07                	je     c00089e4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089dd:	b8 20 2e 02 c0       	mov    eax,0xc0022e20
c00089e2:	eb 50                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089e4:	83 ec 08             	sub    esp,0x8
c00089e7:	68 2f 45 02 c0       	push   0xc002452f
c00089ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089f0:	e8 e7 7d ff ff       	call   c00007dc <strcmp>
c00089f5:	83 c4 10             	add    esp,0x10
c00089f8:	85 c0                	test   eax,eax
c00089fa:	0f 94 c0             	sete   al
c00089fd:	84 c0                	test   al,al
c00089ff:	74 07                	je     c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008a01:	b8 cc 8b 02 c0       	mov    eax,0xc0028bcc
c0008a06:	eb 2c                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a08:	83 ec 08             	sub    esp,0x8
c0008a0b:	68 3c 45 02 c0       	push   0xc002453c
c0008a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a14:	e8 c3 7d ff ff       	call   c00007dc <strcmp>
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	85 c0                	test   eax,eax
c0008a1e:	0f 94 c0             	sete   al
c0008a21:	84 c0                	test   al,al
c0008a23:	74 07                	je     c0008a2c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a25:	b8 cd 8b 02 c0       	mov    eax,0xc0028bcd
c0008a2a:	eb 08                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a2c:	b8 00 00 00 00       	mov    eax,0x0
c0008a31:	8d 76 00             	lea    esi,[esi+0x0]
c0008a34:	83 c4 0c             	add    esp,0xc
c0008a37:	c3                   	ret    

c0008a38 <Computer::close(int, int, void*)>:
c0008a38:	57                   	push   edi
c0008a39:	56                   	push   esi
c0008a3a:	53                   	push   ebx
c0008a3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a47:	83 ec 0c             	sub    esp,0xc
c0008a4a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a50:	e8 6f 5d 00 00       	call   c000e7c4 <Device::closeAll()>
c0008a55:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a5b:	83 c4 10             	add    esp,0x10
c0008a5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a60:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a64:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a6c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a74:	5b                   	pop    ebx
c0008a75:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a78:	5e                   	pop    esi
c0008a79:	5f                   	pop    edi
c0008a7a:	ff e0                	jmp    eax

c0008a7c <Krnl::firstTask()>:
c0008a7c:	53                   	push   ebx
c0008a7d:	83 ec 14             	sub    esp,0x14
c0008a80:	68 49 45 02 c0       	push   0xc0024549
c0008a85:	e8 b7 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a8a:	fb                   	sti    
c0008a8b:	c7 04 24 60 45 02 c0 	mov    DWORD PTR [esp],0xc0024560
c0008a92:	e8 aa 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008a97:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a9e:	e8 44 13 00 00       	call   c0009de7 <malloc>
c0008aa3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008aaa:	89 c3                	mov    ebx,eax
c0008aac:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0008ab2:	68 79 45 02 c0       	push   0xc0024579
c0008ab7:	6a 01                	push   0x1
c0008ab9:	50                   	push   eax
c0008aba:	e8 2d 00 01 00       	call   c0018aec <Process::Process(bool, char const*, Process*, char**)>
c0008abf:	83 c4 20             	add    esp,0x20
c0008ac2:	68 ff 00 00 00       	push   0xff
c0008ac7:	6a 00                	push   0x0
c0008ac9:	68 df 97 00 c0       	push   0xc00097df
c0008ace:	53                   	push   ebx
c0008acf:	e8 20 02 01 00       	call   c0018cf4 <Process::createThread(void (*)(void*), void*, int)>
c0008ad4:	6a 7a                	push   0x7a
c0008ad6:	6a 00                	push   0x0
c0008ad8:	68 38 97 01 c0       	push   0xc0019738
c0008add:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0008ae3:	e8 0c 02 01 00       	call   c0018cf4 <Process::createThread(void (*)(void*), void*, int)>
c0008ae8:	83 c4 14             	add    esp,0x14
c0008aeb:	a3 c8 a0 02 c0       	mov    ds:0xc002a0c8,eax
c0008af0:	68 6c 48 02 c0       	push   0xc002486c
c0008af5:	c6 05 cd 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028bcd,0x1
c0008afc:	e8 40 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b01:	e8 0d 10 01 00       	call   c0019b13 <Vm::initialise8086()>
c0008b06:	e8 53 49 00 00       	call   c000d45e <Fs::initVFS()>
c0008b0b:	c7 04 24 86 45 02 c0 	mov    DWORD PTR [esp],0xc0024586
c0008b12:	e8 2a 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b17:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0008b1c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b22:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b24:	6a 00                	push   0x0
c0008b26:	6a 00                	push   0x0
c0008b28:	6a 00                	push   0x0
c0008b2a:	50                   	push   eax
c0008b2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b2e:	83 c4 14             	add    esp,0x14
c0008b31:	68 6c 48 02 c0       	push   0xc002486c
c0008b36:	e8 06 13 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b3b:	e8 1a e8 00 00       	call   c001735a <Sys::loadSyscalls()>
c0008b40:	e8 5b c5 00 00       	call   c00150a0 <Krnl::loadSystemEnv()>
c0008b45:	e8 cf c9 00 00       	call   c0015519 <Krnl::setupPowerManager()>
c0008b4a:	83 c4 0c             	add    esp,0xc
c0008b4d:	6a 3a                	push   0x3a
c0008b4f:	68 a0 45 02 c0       	push   0xc00245a0
c0008b54:	68 a9 45 02 c0       	push   0xc00245a9
c0008b59:	e8 bf d5 00 00       	call   c001611d <Reg::readIntWithDefault(char*, char*, int)>
c0008b5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b61:	e8 16 55 00 00       	call   c000e07c <User::loadClockSettings(int)>
c0008b66:	c7 04 24 90 48 02 c0 	mov    DWORD PTR [esp],0xc0024890
c0008b6d:	e8 cf 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b72:	58                   	pop    eax
c0008b73:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0008b78:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b7e:	e8 01 5c 00 00       	call   c000e784 <Device::loadDriversForAll()>
c0008b83:	c7 04 24 b1 45 02 c0 	mov    DWORD PTR [esp],0xc00245b1
c0008b8a:	e8 b2 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008b8f:	e8 74 c0 00 00       	call   c0014c08 <Krnl::startCPUs()>
c0008b94:	c7 04 24 cb 45 02 c0 	mov    DWORD PTR [esp],0xc00245cb
c0008b9b:	e8 a1 12 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0008ba0:	5a                   	pop    edx
c0008ba1:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c0008ba7:	59                   	pop    ecx
c0008ba8:	6a 01                	push   0x1
c0008baa:	68 dc 45 02 c0       	push   0xc00245dc
c0008baf:	e8 76 f9 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c0008bb4:	5a                   	pop    edx
c0008bb5:	59                   	pop    ecx
c0008bb6:	53                   	push   ebx
c0008bb7:	50                   	push   eax
c0008bb8:	e8 9e fb 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c0008bbd:	83 c4 10             	add    esp,0x10
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	6a 02                	push   0x2
c0008bc5:	e8 3e 05 01 00       	call   c0019108 <blockTask(TaskState)>
c0008bca:	83 c4 10             	add    esp,0x10
c0008bcd:	eb f1                	jmp    c0008bc0 <Krnl::firstTask()+0x144>
c0008bcf:	90                   	nop

c0008bd0 <Computer::Computer()>:
c0008bd0:	83 ec 0c             	sub    esp,0xc
c0008bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd7:	83 ec 08             	sub    esp,0x8
c0008bda:	68 f8 45 02 c0       	push   0xc00245f8
c0008bdf:	50                   	push   eax
c0008be0:	e8 59 5c 00 00       	call   c000e83e <Device::Device(char const*)>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	ba 40 49 02 c0       	mov    edx,0xc0024940
c0008bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf1:	89 10                	mov    DWORD PTR [eax],edx
c0008bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c05:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c13:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c19:	83 ca 04             	or     edx,0x4
c0008c1c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	0f b6 d0             	movzx  edx,al
c0008c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c4b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c5a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c61:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c67:	0f b6 d0             	movzx  edx,al
c0008c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c72:	83 e1 3f             	and    ecx,0x3f
c0008c75:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	0f b6 d0             	movzx  edx,al
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cb1:	8d 50 01             	lea    edx,[eax+0x1]
c0008cb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cb8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cbe:	0f b6 d0             	movzx  edx,al
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cc9:	83 e1 3f             	and    ecx,0x3f
c0008ccc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	0f b6 d0             	movzx  edx,al
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d08:	8d 50 01             	lea    edx,[eax+0x1]
c0008d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d0f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d15:	0f b6 d0             	movzx  edx,al
c0008d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d20:	83 e1 3f             	and    ecx,0x3f
c0008d23:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d27:	90                   	nop
c0008d28:	83 c4 0c             	add    esp,0xc
c0008d2b:	c3                   	ret    

c0008d2c <Computer::setBootMessage(char const*)>:
c0008d2c:	c3                   	ret    
c0008d2d:	90                   	nop

c0008d2e <Computer::detectFeatures()>:
c0008d2e:	55                   	push   ebp
c0008d2f:	57                   	push   edi
c0008d30:	56                   	push   esi
c0008d31:	53                   	push   ebx
c0008d32:	83 ec 1c             	sub    esp,0x1c
c0008d35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d39:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d43:	e8 e1 74 ff ff       	call   c0000229 <detectCPUID>
c0008d48:	85 c0                	test   eax,eax
c0008d4a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d50:	0f 95 c2             	setne  dl
c0008d53:	83 e0 fd             	and    eax,0xfffffffd
c0008d56:	d1 e2                	shl    edx,1
c0008d58:	09 d0                	or     eax,edx
c0008d5a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d60:	a8 02                	test   al,0x2
c0008d62:	75 46                	jne    c0008daa <Computer::detectFeatures()+0x7c>
c0008d64:	f6 05 e1 8b 02 c0 04 	test   BYTE PTR ds:0xc0028be1,0x4
c0008d6b:	74 07                	je     c0008d74 <Computer::detectFeatures()+0x46>
c0008d6d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d74:	e8 ed 9e 01 00       	call   c0022c66 <x87Detect>
c0008d79:	83 e0 01             	and    eax,0x1
c0008d7c:	c1 e0 04             	shl    eax,0x4
c0008d7f:	88 c2                	mov    dl,al
c0008d81:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d87:	83 e0 ef             	and    eax,0xffffffef
c0008d8a:	09 d0                	or     eax,edx
c0008d8c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d92:	a8 10                	test   al,0x10
c0008d94:	0f 85 2a 01 00 00    	jne    c0008ec4 <Computer::detectFeatures()+0x196>
c0008d9a:	84 c0                	test   al,al
c0008d9c:	0f 88 45 01 00 00    	js     c0008ee7 <Computer::detectFeatures()+0x1b9>
c0008da2:	83 c4 1c             	add    esp,0x1c
c0008da5:	5b                   	pop    ebx
c0008da6:	5e                   	pop    esi
c0008da7:	5f                   	pop    edi
c0008da8:	5d                   	pop    ebp
c0008da9:	c3                   	ret    
c0008daa:	83 ec 0c             	sub    esp,0xc
c0008dad:	6a 20                	push   0x20
c0008daf:	e8 1a aa 00 00       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0008db4:	83 e0 01             	and    eax,0x1
c0008db7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dbe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dc4:	83 e0 f7             	and    eax,0xfffffff7
c0008dc7:	09 d0                	or     eax,edx
c0008dc9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dcf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dd6:	e8 f3 a9 00 00       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0008ddb:	83 e0 01             	and    eax,0x1
c0008dde:	88 c2                	mov    dl,al
c0008de0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008de6:	83 e0 fe             	and    eax,0xfffffffe
c0008de9:	09 d0                	or     eax,edx
c0008deb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008df1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008df8:	e8 d1 a9 00 00       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0008dfd:	c1 e0 07             	shl    eax,0x7
c0008e00:	88 c2                	mov    dl,al
c0008e02:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008e08:	83 e0 7f             	and    eax,0x7f
c0008e0b:	09 d0                	or     eax,edx
c0008e0d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e13:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e1a:	e8 af a9 00 00       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 e0 01             	and    eax,0x1
c0008e25:	c1 e0 05             	shl    eax,0x5
c0008e28:	88 c2                	mov    dl,al
c0008e2a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e30:	83 e0 df             	and    eax,0xffffffdf
c0008e33:	09 d0                	or     eax,edx
c0008e35:	f7 05 e0 8b 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028be0,0x401
c0008e3f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e45:	0f 84 c2 00 00 00    	je     c0008f0d <Computer::detectFeatures()+0x1df>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e5a:	88 c2                	mov    dl,al
c0008e5c:	83 e2 09             	and    edx,0x9
c0008e5f:	fe ca                	dec    dl
c0008e61:	75 09                	jne    c0008e6c <Computer::detectFeatures()+0x13e>
c0008e63:	83 e0 fe             	and    eax,0xfffffffe
c0008e66:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e73:	50                   	push   eax
c0008e74:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e78:	55                   	push   ebp
c0008e79:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e7d:	57                   	push   edi
c0008e7e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e82:	56                   	push   esi
c0008e83:	68 00 00 00 80       	push   0x80000000
c0008e88:	e8 bd a8 00 00       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e8d:	83 c4 20             	add    esp,0x20
c0008e90:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e9b:	0f 86 c3 fe ff ff    	jbe    c0008d64 <Computer::detectFeatures()+0x36>
c0008ea1:	83 ec 0c             	sub    esp,0xc
c0008ea4:	50                   	push   eax
c0008ea5:	55                   	push   ebp
c0008ea6:	57                   	push   edi
c0008ea7:	56                   	push   esi
c0008ea8:	68 01 00 00 80       	push   0x80000001
c0008ead:	e8 98 a8 00 00       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008eb2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ebc:	83 c4 20             	add    esp,0x20
c0008ebf:	e9 a0 fe ff ff       	jmp    c0008d64 <Computer::detectFeatures()+0x36>
c0008ec4:	e8 57 9d 01 00       	call   c0022c20 <absolutelyNoChanceInHell>
c0008ec9:	88 c2                	mov    dl,al
c0008ecb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ed1:	c1 e2 07             	shl    edx,0x7
c0008ed4:	83 e0 7f             	and    eax,0x7f
c0008ed7:	09 d0                	or     eax,edx
c0008ed9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008edf:	84 c0                	test   al,al
c0008ee1:	0f 89 bb fe ff ff    	jns    c0008da2 <Computer::detectFeatures()+0x74>
c0008ee7:	e8 a4 9c 01 00       	call   c0022b90 <avxDetect>
c0008eec:	83 e0 01             	and    eax,0x1
c0008eef:	c1 e0 05             	shl    eax,0x5
c0008ef2:	88 c2                	mov    dl,al
c0008ef4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008efa:	83 e0 df             	and    eax,0xffffffdf
c0008efd:	09 d0                	or     eax,edx
c0008eff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008f05:	83 c4 1c             	add    esp,0x1c
c0008f08:	5b                   	pop    ebx
c0008f09:	5e                   	pop    esi
c0008f0a:	5f                   	pop    edi
c0008f0b:	5d                   	pop    ebp
c0008f0c:	c3                   	ret    
c0008f0d:	83 ec 0c             	sub    esp,0xc
c0008f10:	68 00 02 00 00       	push   0x200
c0008f15:	e8 b4 a8 00 00       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0008f1a:	83 c4 10             	add    esp,0x10
c0008f1d:	83 e0 01             	and    eax,0x1
c0008f20:	88 c2                	mov    dl,al
c0008f22:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f28:	83 e0 fe             	and    eax,0xfffffffe
c0008f2b:	09 d0                	or     eax,edx
c0008f2d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f33:	e9 1c ff ff ff       	jmp    c0008e54 <Computer::detectFeatures()+0x126>

c0008f38 <Computer::displayFeatures()>:
c0008f38:	53                   	push   ebx
c0008f39:	83 ec 14             	sub    esp,0x14
c0008f3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f40:	68 08 46 02 c0       	push   0xc0024608
c0008f45:	e8 7d 41 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0008f4a:	83 c4 10             	add    esp,0x10
c0008f4d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f54:	0f 85 73 02 00 00    	jne    c00091cd <Computer::displayFeatures()+0x295>
c0008f5a:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008f5f:	83 ec 08             	sub    esp,0x8
c0008f62:	50                   	push   eax
c0008f63:	68 1b 46 02 c0       	push   0xc002461b
c0008f68:	e8 5a 41 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0008f6d:	83 c4 10             	add    esp,0x10
c0008f70:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f77:	0f 85 8c 02 00 00    	jne    c0009209 <Computer::displayFeatures()+0x2d1>
c0008f7d:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008f82:	83 ec 08             	sub    esp,0x8
c0008f85:	50                   	push   eax
c0008f86:	68 2c 46 02 c0       	push   0xc002462c
c0008f8b:	e8 37 41 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f9a:	0f 85 5f 02 00 00    	jne    c00091ff <Computer::displayFeatures()+0x2c7>
c0008fa0:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008fa5:	83 ec 08             	sub    esp,0x8
c0008fa8:	50                   	push   eax
c0008fa9:	68 3d 46 02 c0       	push   0xc002463d
c0008fae:	e8 14 41 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0008fb3:	83 c4 10             	add    esp,0x10
c0008fb6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fbd:	0f 85 32 02 00 00    	jne    c00091f5 <Computer::displayFeatures()+0x2bd>
c0008fc3:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008fc8:	83 ec 08             	sub    esp,0x8
c0008fcb:	50                   	push   eax
c0008fcc:	68 4e 46 02 c0       	push   0xc002464e
c0008fd1:	e8 f1 40 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fe0:	0f 85 05 02 00 00    	jne    c00091eb <Computer::displayFeatures()+0x2b3>
c0008fe6:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0008feb:	83 ec 08             	sub    esp,0x8
c0008fee:	50                   	push   eax
c0008fef:	68 5f 46 02 c0       	push   0xc002465f
c0008ff4:	e8 ce 40 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0008ff9:	83 c4 10             	add    esp,0x10
c0008ffc:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0009003:	0f 85 d8 01 00 00    	jne    c00091e1 <Computer::displayFeatures()+0x2a9>
c0009009:	b8 05 46 02 c0       	mov    eax,0xc0024605
c000900e:	83 ec 08             	sub    esp,0x8
c0009011:	50                   	push   eax
c0009012:	68 70 46 02 c0       	push   0xc0024670
c0009017:	e8 ab 40 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000901c:	83 c4 10             	add    esp,0x10
c000901f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009026:	0f 85 ab 01 00 00    	jne    c00091d7 <Computer::displayFeatures()+0x29f>
c000902c:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009031:	83 ec 08             	sub    esp,0x8
c0009034:	50                   	push   eax
c0009035:	68 81 46 02 c0       	push   0xc0024681
c000903a:	e8 88 40 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000903f:	83 c4 10             	add    esp,0x10
c0009042:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009049:	0f 88 1b 02 00 00    	js     c000926a <Computer::displayFeatures()+0x332>
c000904f:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009054:	83 ec 08             	sub    esp,0x8
c0009057:	50                   	push   eax
c0009058:	68 92 46 02 c0       	push   0xc0024692
c000905d:	e8 65 40 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000906c:	0f 85 a1 01 00 00    	jne    c0009213 <Computer::displayFeatures()+0x2db>
c0009072:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009077:	83 ec 08             	sub    esp,0x8
c000907a:	50                   	push   eax
c000907b:	68 a3 46 02 c0       	push   0xc00246a3
c0009080:	e8 42 40 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009085:	83 c4 10             	add    esp,0x10
c0009088:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000908f:	0f 85 cb 01 00 00    	jne    c0009260 <Computer::displayFeatures()+0x328>
c0009095:	b8 05 46 02 c0       	mov    eax,0xc0024605
c000909a:	83 ec 08             	sub    esp,0x8
c000909d:	50                   	push   eax
c000909e:	68 b4 46 02 c0       	push   0xc00246b4
c00090a3:	e8 1f 40 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090b2:	0f 85 9e 01 00 00    	jne    c0009256 <Computer::displayFeatures()+0x31e>
c00090b8:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	50                   	push   eax
c00090c1:	68 c5 46 02 c0       	push   0xc00246c5
c00090c6:	e8 fc 3f 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090d5:	0f 85 71 01 00 00    	jne    c000924c <Computer::displayFeatures()+0x314>
c00090db:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	50                   	push   eax
c00090e4:	68 d6 46 02 c0       	push   0xc00246d6
c00090e9:	e8 d9 3f 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00090ee:	83 c4 10             	add    esp,0x10
c00090f1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090f8:	0f 85 44 01 00 00    	jne    c0009242 <Computer::displayFeatures()+0x30a>
c00090fe:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009103:	83 ec 08             	sub    esp,0x8
c0009106:	50                   	push   eax
c0009107:	68 e7 46 02 c0       	push   0xc00246e7
c000910c:	e8 b6 3f 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000911b:	0f 85 17 01 00 00    	jne    c0009238 <Computer::displayFeatures()+0x300>
c0009121:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009126:	83 ec 08             	sub    esp,0x8
c0009129:	50                   	push   eax
c000912a:	68 f8 46 02 c0       	push   0xc00246f8
c000912f:	e8 93 3f 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009134:	83 c4 10             	add    esp,0x10
c0009137:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000913e:	0f 85 ea 00 00 00    	jne    c000922e <Computer::displayFeatures()+0x2f6>
c0009144:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0009149:	83 ec 08             	sub    esp,0x8
c000914c:	50                   	push   eax
c000914d:	68 09 47 02 c0       	push   0xc0024709
c0009152:	e8 70 3f 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009157:	83 c4 10             	add    esp,0x10
c000915a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009161:	0f 88 0d 01 00 00    	js     c0009274 <Computer::displayFeatures()+0x33c>
c0009167:	b8 05 46 02 c0       	mov    eax,0xc0024605
c000916c:	83 ec 08             	sub    esp,0x8
c000916f:	50                   	push   eax
c0009170:	68 1a 47 02 c0       	push   0xc002471a
c0009175:	e8 4d 3f 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009184:	0f 85 9a 00 00 00    	jne    c0009224 <Computer::displayFeatures()+0x2ec>
c000918a:	b8 05 46 02 c0       	mov    eax,0xc0024605
c000918f:	83 ec 08             	sub    esp,0x8
c0009192:	50                   	push   eax
c0009193:	68 2b 47 02 c0       	push   0xc002472b
c0009198:	e8 2a 3f 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000919d:	83 c4 10             	add    esp,0x10
c00091a0:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c00091a7:	75 74                	jne    c000921d <Computer::displayFeatures()+0x2e5>
c00091a9:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00091ae:	83 ec 08             	sub    esp,0x8
c00091b1:	50                   	push   eax
c00091b2:	68 3c 47 02 c0       	push   0xc002473c
c00091b7:	e8 0b 3f 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00091bc:	c7 44 24 20 3b 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc002673b
c00091c4:	83 c4 18             	add    esp,0x18
c00091c7:	5b                   	pop    ebx
c00091c8:	e9 fa 3e 00 00       	jmp    c000d0c7 <Dbg::kprintf(char const*, ...)>
c00091cd:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091d2:	e9 88 fd ff ff       	jmp    c0008f5f <Computer::displayFeatures()+0x27>
c00091d7:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091dc:	e9 50 fe ff ff       	jmp    c0009031 <Computer::displayFeatures()+0xf9>
c00091e1:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091e6:	e9 23 fe ff ff       	jmp    c000900e <Computer::displayFeatures()+0xd6>
c00091eb:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091f0:	e9 f6 fd ff ff       	jmp    c0008feb <Computer::displayFeatures()+0xb3>
c00091f5:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00091fa:	e9 c9 fd ff ff       	jmp    c0008fc8 <Computer::displayFeatures()+0x90>
c00091ff:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009204:	e9 9c fd ff ff       	jmp    c0008fa5 <Computer::displayFeatures()+0x6d>
c0009209:	b8 01 46 02 c0       	mov    eax,0xc0024601
c000920e:	e9 6f fd ff ff       	jmp    c0008f82 <Computer::displayFeatures()+0x4a>
c0009213:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009218:	e9 5a fe ff ff       	jmp    c0009077 <Computer::displayFeatures()+0x13f>
c000921d:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009222:	eb 8a                	jmp    c00091ae <Computer::displayFeatures()+0x276>
c0009224:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009229:	e9 61 ff ff ff       	jmp    c000918f <Computer::displayFeatures()+0x257>
c000922e:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009233:	e9 11 ff ff ff       	jmp    c0009149 <Computer::displayFeatures()+0x211>
c0009238:	b8 01 46 02 c0       	mov    eax,0xc0024601
c000923d:	e9 e4 fe ff ff       	jmp    c0009126 <Computer::displayFeatures()+0x1ee>
c0009242:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009247:	e9 b7 fe ff ff       	jmp    c0009103 <Computer::displayFeatures()+0x1cb>
c000924c:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009251:	e9 8a fe ff ff       	jmp    c00090e0 <Computer::displayFeatures()+0x1a8>
c0009256:	b8 01 46 02 c0       	mov    eax,0xc0024601
c000925b:	e9 5d fe ff ff       	jmp    c00090bd <Computer::displayFeatures()+0x185>
c0009260:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009265:	e9 30 fe ff ff       	jmp    c000909a <Computer::displayFeatures()+0x162>
c000926a:	b8 01 46 02 c0       	mov    eax,0xc0024601
c000926f:	e9 e0 fd ff ff       	jmp    c0009054 <Computer::displayFeatures()+0x11c>
c0009274:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0009279:	e9 ee fe ff ff       	jmp    c000916c <Computer::displayFeatures()+0x234>

c000927e <Computer::rdmsr(unsigned int)>:
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009285:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000928c:	74 0a                	je     c0009298 <Computer::rdmsr(unsigned int)+0x1a>
c000928e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009292:	0f 32                	rdmsr  
c0009294:	83 c4 0c             	add    esp,0xc
c0009297:	c3                   	ret    
c0009298:	83 ec 0c             	sub    esp,0xc
c000929b:	68 4d 47 02 c0       	push   0xc002474d
c00092a0:	e8 04 bf 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	eb e4                	jmp    c000928e <Computer::rdmsr(unsigned int)+0x10>

c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>:
c00092aa:	57                   	push   edi
c00092ab:	56                   	push   esi
c00092ac:	52                   	push   edx
c00092ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092b9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092c0:	74 0e                	je     c00092d0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092c6:	89 f0                	mov    eax,esi
c00092c8:	89 fa                	mov    edx,edi
c00092ca:	0f 30                	wrmsr  
c00092cc:	58                   	pop    eax
c00092cd:	5e                   	pop    esi
c00092ce:	5f                   	pop    edi
c00092cf:	c3                   	ret    
c00092d0:	83 ec 0c             	sub    esp,0xc
c00092d3:	68 53 47 02 c0       	push   0xc0024753
c00092d8:	e8 cc be 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	eb e0                	jmp    c00092c2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092e2 <Computer::shutdown()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 00                	push   0x0
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::restart()>:
c00092fa:	83 ec 0c             	sub    esp,0xc
c00092fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009301:	8b 10                	mov    edx,DWORD PTR [eax]
c0009303:	6a 00                	push   0x0
c0009305:	6a 00                	push   0x0
c0009307:	6a 01                	push   0x1
c0009309:	50                   	push   eax
c000930a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000930d:	83 c4 1c             	add    esp,0x1c
c0009310:	c3                   	ret    
c0009311:	90                   	nop

c0009312 <Computer::sleep()>:
c0009312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009316:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000931c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009320:	e9 77 9a 00 00       	jmp    c0012d9c <ACPI::sleep()>
c0009325:	90                   	nop

c0009326 <Computer::nmiEnabled()>:
c0009326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000932a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009330:	c3                   	ret    
c0009331:	90                   	nop

c0009332 <Computer::readCMOS(unsigned char)>:
c0009332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009336:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000933d:	19 c0                	sbb    eax,eax
c000933f:	83 e0 80             	and    eax,0xffffff80
c0009342:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009346:	e6 70                	out    0x70,al
c0009348:	e4 71                	in     al,0x71
c000934a:	c3                   	ret    
c000934b:	90                   	nop

c000934c <Computer::enableNMI(bool)>:
c000934c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009354:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000935a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009362:	eb ce                	jmp    c0009332 <Computer::readCMOS(unsigned char)>

c0009364 <Computer::open(int, int, void*)>:
c0009364:	56                   	push   esi
c0009365:	53                   	push   ebx
c0009366:	83 ec 10             	sub    esp,0x10
c0009369:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000936d:	68 b0 48 02 c0       	push   0xc00248b0
c0009372:	e8 ca 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009377:	58                   	pop    eax
c0009378:	f6 05 e0 8b 02 c0 04 	test   BYTE PTR ds:0xc0028be0,0x4
c000937f:	5a                   	pop    edx
c0009380:	0f 94 05 a0 7f 02 c0 	sete   BYTE PTR ds:0xc0027fa0
c0009387:	68 58 01 00 00       	push   0x158
c000938c:	68 59 47 02 c0       	push   0xc0024759
c0009391:	e8 31 3d 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009396:	59                   	pop    ecx
c0009397:	5e                   	pop    esi
c0009398:	68 14 01 00 00       	push   0x114
c000939d:	68 6f 47 02 c0       	push   0xc002476f
c00093a2:	e8 20 3d 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00093a7:	58                   	pop    eax
c00093a8:	5a                   	pop    edx
c00093a9:	6a 14                	push   0x14
c00093ab:	68 83 47 02 c0       	push   0xc0024783
c00093b0:	e8 12 3d 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00093b5:	59                   	pop    ecx
c00093b6:	5e                   	pop    esi
c00093b7:	68 1f 07 00 00       	push   0x71f
c00093bc:	68 96 47 02 c0       	push   0xc0024796
c00093c1:	e8 01 3d 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00093c6:	58                   	pop    eax
c00093c7:	5a                   	pop    edx
c00093c8:	6a 5f                	push   0x5f
c00093ca:	68 ad 47 02 c0       	push   0xc00247ad
c00093cf:	e8 f3 3c 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00093d4:	c7 04 24 c3 47 02 c0 	mov    DWORD PTR [esp],0xc00247c3
c00093db:	e8 e7 3c 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00093e0:	c7 04 24 d5 47 02 c0 	mov    DWORD PTR [esp],0xc00247d5
c00093e7:	e8 55 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00093ec:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093f3:	e8 ef 09 00 00       	call   c0009de7 <malloc>
c00093f8:	89 c6                	mov    esi,eax
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 52 92 00 00       	call   c0012654 <ACPI::ACPI()>
c0009402:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009408:	c7 04 24 ef 47 02 c0 	mov    DWORD PTR [esp],0xc00247ef
c000940f:	e8 2d 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009414:	59                   	pop    ecx
c0009415:	5e                   	pop    esi
c0009416:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000941c:	53                   	push   ebx
c000941d:	e8 18 52 00 00       	call   c000e63a <Device::addChild(Device*)>
c0009422:	c7 04 24 d4 48 02 c0 	mov    DWORD PTR [esp],0xc00248d4
c0009429:	e8 13 0a 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000942e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009431:	e8 f8 f8 ff ff       	call   c0008d2e <Computer::detectFeatures()>
c0009436:	c7 04 24 f4 48 02 c0 	mov    DWORD PTR [esp],0xc00248f4
c000943d:	e8 ff 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009445:	e8 ee fa ff ff       	call   c0008f38 <Computer::displayFeatures()>
c000944a:	c7 04 24 09 48 02 c0 	mov    DWORD PTR [esp],0xc0024809
c0009451:	e8 eb 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009456:	58                   	pop    eax
c0009457:	5a                   	pop    edx
c0009458:	6a 01                	push   0x1
c000945a:	53                   	push   ebx
c000945b:	e8 ec fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c0009460:	c7 04 24 b1 45 02 c0 	mov    DWORD PTR [esp],0xc00245b1
c0009467:	e8 d5 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000946c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009473:	e8 6f 09 00 00       	call   c0009de7 <malloc>
c0009478:	89 04 24             	mov    DWORD PTR [esp],eax
c000947b:	89 c6                	mov    esi,eax
c000947d:	e8 04 a4 00 00       	call   c0013886 <CPU::CPU()>
c0009482:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009488:	59                   	pop    ecx
c0009489:	58                   	pop    eax
c000948a:	56                   	push   esi
c000948b:	53                   	push   ebx
c000948c:	e8 a9 51 00 00       	call   c000e63a <Device::addChild(Device*)>
c0009491:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009497:	8b 10                	mov    edx,DWORD PTR [eax]
c0009499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000949d:	6a 00                	push   0x0
c000949f:	6a 00                	push   0x0
c00094a1:	50                   	push   eax
c00094a2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094a5:	83 c4 20             	add    esp,0x20
c00094a8:	e8 f5 c0 00 00       	call   c00155a2 <Krnl::initRNG()>
c00094ad:	83 ec 0c             	sub    esp,0xc
c00094b0:	68 14 49 02 c0       	push   0xc0024914
c00094b5:	e8 87 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094ba:	e8 17 57 00 00       	call   c000ebd6 <setupFPU()>
c00094bf:	83 c4 10             	add    esp,0x10
c00094c2:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094c8:	85 c0                	test   eax,eax
c00094ca:	74 1f                	je     c00094eb <Computer::open(int, int, void*)+0x187>
c00094cc:	83 ec 08             	sub    esp,0x8
c00094cf:	50                   	push   eax
c00094d0:	53                   	push   ebx
c00094d1:	e8 64 51 00 00       	call   c000e63a <Device::addChild(Device*)>
c00094d6:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00094de:	6a 00                	push   0x0
c00094e0:	6a 00                	push   0x0
c00094e2:	6a 00                	push   0x0
c00094e4:	50                   	push   eax
c00094e5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094e8:	83 c4 20             	add    esp,0x20
c00094eb:	83 ec 0c             	sub    esp,0xc
c00094ee:	68 1a 48 02 c0       	push   0xc002481a
c00094f3:	e8 49 09 00 00       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00094f8:	c7 04 24 7c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a7c
c00094ff:	e8 04 f9 00 00       	call   c0018e08 <setupMultitasking(void (*)())>
c0009504:	83 c4 14             	add    esp,0x14
c0009507:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000950c:	5b                   	pop    ebx
c000950d:	5e                   	pop    esi
c000950e:	c3                   	ret    
c000950f:	90                   	nop

c0009510 <Computer::disableNMI()>:
c0009510:	6a 00                	push   0x0
c0009512:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009516:	e8 31 fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c000951b:	58                   	pop    eax
c000951c:	5a                   	pop    edx
c000951d:	c3                   	ret    

c000951e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000951e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009522:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009529:	19 c0                	sbb    eax,eax
c000952b:	83 e0 80             	and    eax,0xffffff80
c000952e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009532:	e6 70                	out    0x70,al
c0009534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009538:	e6 71                	out    0x71,al
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <Computer::handleNMI()>:
c000953c:	56                   	push   esi
c000953d:	53                   	push   ebx
c000953e:	83 ec 10             	sub    esp,0x10
c0009541:	e4 92                	in     al,0x92
c0009543:	89 c6                	mov    esi,eax
c0009545:	e4 61                	in     al,0x61
c0009547:	68 35 48 02 c0       	push   0xc0024835
c000954c:	88 c3                	mov    bl,al
c000954e:	e8 74 3b 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009553:	83 c4 10             	add    esp,0x10
c0009556:	83 e6 10             	and    esi,0x10
c0009559:	75 0d                	jne    c0009568 <Computer::handleNMI()+0x2c>
c000955b:	f6 c3 40             	test   bl,0x40
c000955e:	75 1d                	jne    c000957d <Computer::handleNMI()+0x41>
c0009560:	84 db                	test   bl,bl
c0009562:	78 2d                	js     c0009591 <Computer::handleNMI()+0x55>
c0009564:	58                   	pop    eax
c0009565:	5b                   	pop    ebx
c0009566:	5e                   	pop    esi
c0009567:	c3                   	ret    
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 46 48 02 c0       	push   0xc0024846
c0009570:	e8 34 bc 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	f6 c3 40             	test   bl,0x40
c000957b:	74 e3                	je     c0009560 <Computer::handleNMI()+0x24>
c000957d:	83 ec 0c             	sub    esp,0xc
c0009580:	68 53 48 02 c0       	push   0xc0024853
c0009585:	e8 1f bc 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000958a:	83 c4 10             	add    esp,0x10
c000958d:	84 db                	test   bl,bl
c000958f:	79 d3                	jns    c0009564 <Computer::handleNMI()+0x28>
c0009591:	c7 44 24 10 5d 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc002485d
c0009599:	5a                   	pop    edx
c000959a:	5b                   	pop    ebx
c000959b:	5e                   	pop    esi
c000959c:	e9 08 bc 00 00       	jmp    c00151a9 <Krnl::panic(char const*)>
c00095a1:	90                   	nop

c00095a2 <Computer::setDiskActivityLight(int, bool)>:
c00095a2:	56                   	push   esi
c00095a3:	53                   	push   ebx
c00095a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00095a8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00095ad:	77 1b                	ja     c00095ca <Computer::setDiskActivityLight(int, bool)+0x28>
c00095af:	e4 92                	in     al,0x92
c00095b1:	bb 40 00 00 00       	mov    ebx,0x40
c00095b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00095ba:	89 da                	mov    edx,ebx
c00095bc:	d3 e2                	shl    edx,cl
c00095be:	89 f1                	mov    ecx,esi
c00095c0:	f7 d2                	not    edx
c00095c2:	d3 e3                	shl    ebx,cl
c00095c4:	21 d0                	and    eax,edx
c00095c6:	09 d8                	or     eax,ebx
c00095c8:	e6 92                	out    0x92,al
c00095ca:	5b                   	pop    ebx
c00095cb:	5e                   	pop    esi
c00095cc:	c3                   	ret    
c00095cd:	90                   	nop

c00095ce <GDTEntry::setBase(unsigned int)>:
c00095ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095d6:	89 c1                	mov    ecx,eax
c00095d8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095dc:	c1 e9 10             	shr    ecx,0x10
c00095df:	c1 e8 18             	shr    eax,0x18
c00095e2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095e5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095e8:	c3                   	ret    
c00095e9:	90                   	nop

c00095ea <GDTEntry::setLimit(unsigned int)>:
c00095ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095f2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095f5:	66 89 01             	mov    WORD PTR [ecx],ax
c00095f8:	83 e2 f0             	and    edx,0xfffffff0
c00095fb:	c1 e8 10             	shr    eax,0x10
c00095fe:	83 e0 0f             	and    eax,0xf
c0009601:	09 d0                	or     eax,edx
c0009603:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009606:	c3                   	ret    
c0009607:	90                   	nop

c0009608 <GDT::GDT()>:
c0009608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000960c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009616:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000961c:	90                   	nop
c000961d:	c3                   	ret    

c000961e <GDT::addEntry(GDTEntry)>:
c000961e:	53                   	push   ebx
c000961f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009627:	8b 02                	mov    eax,DWORD PTR [edx]
c0009629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000962d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009631:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009635:	8d 48 01             	lea    ecx,[eax+0x1]
c0009638:	c1 e0 03             	shl    eax,0x3
c000963b:	89 0a                	mov    DWORD PTR [edx],ecx
c000963d:	5b                   	pop    ebx
c000963e:	c3                   	ret    
c000963f:	90                   	nop

c0009640 <GDT::getNumberOfEntries()>:
c0009640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009644:	8b 00                	mov    eax,DWORD PTR [eax]
c0009646:	c3                   	ret    
c0009647:	90                   	nop

c0009648 <GDT::flush()>:
c0009648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000964c:	8b 10                	mov    edx,DWORD PTR [eax]
c000964e:	83 c0 04             	add    eax,0x4
c0009651:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009658:	a3 d2 8b 02 c0       	mov    ds:0xc0028bd2,eax
c000965d:	66 89 15 d0 8b 02 c0 	mov    WORD PTR ds:0xc0028bd0,dx
c0009664:	e9 2c 6d ff ff       	jmp    c0000395 <loadGDT>
c0009669:	90                   	nop

c000966a <GDT::setup()>:
c000966a:	57                   	push   edi
c000966b:	56                   	push   esi
c000966c:	53                   	push   ebx
c000966d:	83 ec 40             	sub    esp,0x40
c0009670:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009674:	6a 00                	push   0x0
c0009676:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000967a:	56                   	push   esi
c000967b:	e8 4e ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c0009680:	6a 00                	push   0x0
c0009682:	56                   	push   esi
c0009683:	e8 62 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c0009688:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c0009690:	6a 00                	push   0x0
c0009692:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009696:	56                   	push   esi
c0009697:	e8 32 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000969c:	68 ff ff ff 00       	push   0xffffff
c00096a1:	56                   	push   esi
c00096a2:	e8 43 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00096ab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096b0:	0d 00 9a c0 00       	or     eax,0xc09a00
c00096b5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00096c2:	56                   	push   esi
c00096c3:	e8 06 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c00096c8:	68 ff ff ff 00       	push   0xffffff
c00096cd:	56                   	push   esi
c00096ce:	e8 17 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00096d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00096db:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00096df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00096e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e7:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096ec:	0d 00 92 c0 00       	or     eax,0xc09200
c00096f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00096f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00096f9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00096fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009705:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009709:	89 fa                	mov    edx,edi
c000970b:	80 cc 60             	or     ah,0x60
c000970e:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009714:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009718:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000971c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009724:	80 cc 60             	or     ah,0x60
c0009727:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000972b:	89 f8                	mov    eax,edi
c000972d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009732:	09 d0                	or     eax,edx
c0009734:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009738:	89 c7                	mov    edi,eax
c000973a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000973e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009742:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009746:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000974a:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009754:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009759:	09 d0                	or     eax,edx
c000975b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000975f:	83 c4 0c             	add    esp,0xc
c0009762:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009766:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000976a:	53                   	push   ebx
c000976b:	e8 ae fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009770:	83 c4 0c             	add    esp,0xc
c0009773:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009777:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000977b:	53                   	push   ebx
c000977c:	e8 9d fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009781:	83 c4 0c             	add    esp,0xc
c0009784:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009788:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000978c:	53                   	push   ebx
c000978d:	e8 8c fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009792:	83 c4 0c             	add    esp,0xc
c0009795:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009799:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000979d:	53                   	push   ebx
c000979e:	e8 7b fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097a3:	83 c4 0c             	add    esp,0xc
c00097a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097ae:	53                   	push   ebx
c00097af:	e8 6a fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097b4:	83 c4 0c             	add    esp,0xc
c00097b7:	57                   	push   edi
c00097b8:	56                   	push   esi
c00097b9:	53                   	push   ebx
c00097ba:	e8 5f fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097bf:	83 c4 0c             	add    esp,0xc
c00097c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00097ca:	53                   	push   ebx
c00097cb:	e8 4e fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c00097d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097d3:	e8 70 fe ff ff       	call   c0009648 <GDT::flush()>
c00097d8:	83 c4 50             	add    esp,0x50
c00097db:	5b                   	pop    ebx
c00097dc:	5e                   	pop    esi
c00097dd:	5f                   	pop    edi
c00097de:	c3                   	ret    

c00097df <idleFunction(void*)>:
c00097df:	53                   	push   ebx
c00097e0:	83 ec 08             	sub    esp,0x8
c00097e3:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00097e8:	48                   	dec    eax
c00097e9:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00097ee:	75 01                	jne    c00097f1 <idleFunction(void*)+0x12>
c00097f0:	fb                   	sti    
c00097f1:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00097f6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00097fc:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c0009803:	74 3c                	je     c0009841 <idleFunction(void*)+0x62>
c0009805:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000980c:	74 33                	je     c0009841 <idleFunction(void*)+0x62>
c000980e:	31 db                	xor    ebx,ebx
c0009810:	52                   	push   edx
c0009811:	52                   	push   edx
c0009812:	68 e1 00 00 00       	push   0xe1
c0009817:	50                   	push   eax
c0009818:	e8 61 fa ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c000981d:	53                   	push   ebx
c000981e:	83 e0 02             	and    eax,0x2
c0009821:	50                   	push   eax
c0009822:	68 e1 00 00 00       	push   0xe1
c0009827:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c000982d:	e8 78 fa ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c0009832:	83 c4 20             	add    esp,0x20
c0009835:	e8 7a 69 ff ff       	call   c00001b4 <doTPAUSE>
c000983a:	e8 e3 99 01 00       	call   c0023222 <idleCommon()>
c000983f:	eb f4                	jmp    c0009835 <idleFunction(void*)+0x56>
c0009841:	fb                   	sti    
c0009842:	f4                   	hlt    
c0009843:	e8 da 99 01 00       	call   c0023222 <idleCommon()>
c0009848:	eb f7                	jmp    c0009841 <idleFunction(void*)+0x62>
c000984a:	66 90                	xchg   ax,ax

c000984c <IDTEntry::IDTEntry(bool)>:
c000984c:	83 ec 04             	sub    esp,0x4
c000984f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009853:	88 04 24             	mov    BYTE PTR [esp],al
c0009856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000985a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009864:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000986c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000986f:	83 e2 f0             	and    edx,0xfffffff0
c0009872:	83 ca 0e             	or     edx,0xe
c0009875:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000987f:	83 e2 ef             	and    edx,0xffffffef
c0009882:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009885:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009889:	74 05                	je     c0009890 <IDTEntry::IDTEntry(bool)+0x44>
c000988b:	b2 03                	mov    dl,0x3
c000988d:	eb 05                	jmp    c0009894 <IDTEntry::IDTEntry(bool)+0x48>
c000988f:	90                   	nop
c0009890:	b2 00                	mov    dl,0x0
c0009892:	66 90                	xchg   ax,ax
c0009894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009898:	83 e2 03             	and    edx,0x3
c000989b:	88 d1                	mov    cl,dl
c000989d:	c1 e1 05             	shl    ecx,0x5
c00098a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098a3:	83 e2 9f             	and    edx,0xffffff9f
c00098a6:	09 ca                	or     edx,ecx
c00098a8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098af:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00098b2:	83 ca 80             	or     edx,0xffffff80
c00098b5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00098b8:	90                   	nop
c00098b9:	83 c4 04             	add    esp,0x4
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <IDTEntry::setOffset(unsigned int)>:
c00098be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00098c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c6:	66 89 02             	mov    WORD PTR [edx],ax
c00098c9:	c1 e8 10             	shr    eax,0x10
c00098cc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00098d0:	c3                   	ret    
c00098d1:	90                   	nop
c00098d2:	66 90                	xchg   ax,ax

c00098d4 <IDT::IDT()>:
c00098d4:	90                   	nop
c00098d5:	c3                   	ret    

c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00098d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098da:	83 c0 30             	add    eax,0x30
c00098dd:	c3                   	ret    

c00098de <IDT::addEntry(IDTEntry, int)>:
c00098de:	53                   	push   ebx
c00098df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00098e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00098eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00098ef:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00098f2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00098f6:	5b                   	pop    ebx
c00098f7:	c3                   	ret    

c00098f8 <IDT::addEntry(int, void (*)(), bool)>:
c00098f8:	53                   	push   ebx
c00098f9:	83 ec 10             	sub    esp,0x10
c00098fc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009901:	50                   	push   eax
c0009902:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009906:	53                   	push   ebx
c0009907:	e8 40 ff ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c000990c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009910:	53                   	push   ebx
c0009911:	e8 a8 ff ff ff       	call   c00098be <IDTEntry::setOffset(unsigned int)>
c0009916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000991a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000991e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009922:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009926:	e8 b3 ff ff ff       	call   c00098de <IDT::addEntry(IDTEntry, int)>
c000992b:	83 c4 30             	add    esp,0x30
c000992e:	5b                   	pop    ebx
c000992f:	c3                   	ret    

c0009930 <IDT::flush()>:
c0009930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009934:	66 c7 05 d8 8b 02 c0 ff 07 	mov    WORD PTR ds:0xc0028bd8,0x7ff
c000993d:	a3 da 8b 02 c0       	mov    ds:0xc0028bda,eax
c0009942:	0f 01 1d d8 8b 02 c0 	lidtd  ds:0xc0028bd8
c0009949:	c3                   	ret    

c000994a <IDT::setup()>:
c000994a:	57                   	push   edi
c000994b:	56                   	push   esi
c000994c:	53                   	push   ebx
c000994d:	83 ec 10             	sub    esp,0x10
c0009950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009954:	6a 00                	push   0x0
c0009956:	68 b5 03 00 c0       	push   0xc00003b5
c000995b:	6a 00                	push   0x0
c000995d:	53                   	push   ebx
c000995e:	e8 95 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009963:	6a 00                	push   0x0
c0009965:	68 c5 03 00 c0       	push   0xc00003c5
c000996a:	6a 01                	push   0x1
c000996c:	53                   	push   ebx
c000996d:	e8 86 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009972:	83 c4 20             	add    esp,0x20
c0009975:	6a 00                	push   0x0
c0009977:	68 cf 03 00 c0       	push   0xc00003cf
c000997c:	6a 02                	push   0x2
c000997e:	53                   	push   ebx
c000997f:	e8 74 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009984:	6a 00                	push   0x0
c0009986:	68 d9 03 00 c0       	push   0xc00003d9
c000998b:	6a 03                	push   0x3
c000998d:	53                   	push   ebx
c000998e:	e8 65 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009993:	83 c4 20             	add    esp,0x20
c0009996:	6a 00                	push   0x0
c0009998:	68 e3 03 00 c0       	push   0xc00003e3
c000999d:	6a 04                	push   0x4
c000999f:	53                   	push   ebx
c00099a0:	e8 53 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099a5:	6a 00                	push   0x0
c00099a7:	68 ed 03 00 c0       	push   0xc00003ed
c00099ac:	6a 05                	push   0x5
c00099ae:	53                   	push   ebx
c00099af:	e8 44 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099b4:	83 c4 20             	add    esp,0x20
c00099b7:	6a 00                	push   0x0
c00099b9:	68 f7 03 00 c0       	push   0xc00003f7
c00099be:	6a 06                	push   0x6
c00099c0:	53                   	push   ebx
c00099c1:	e8 32 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099c6:	6a 00                	push   0x0
c00099c8:	68 01 04 00 c0       	push   0xc0000401
c00099cd:	6a 07                	push   0x7
c00099cf:	53                   	push   ebx
c00099d0:	e8 23 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099d5:	83 c4 20             	add    esp,0x20
c00099d8:	6a 00                	push   0x0
c00099da:	68 0b 04 00 c0       	push   0xc000040b
c00099df:	6a 08                	push   0x8
c00099e1:	53                   	push   ebx
c00099e2:	e8 11 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099e7:	6a 00                	push   0x0
c00099e9:	68 13 04 00 c0       	push   0xc0000413
c00099ee:	6a 09                	push   0x9
c00099f0:	53                   	push   ebx
c00099f1:	e8 02 ff ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c00099f6:	83 c4 20             	add    esp,0x20
c00099f9:	6a 00                	push   0x0
c00099fb:	68 1d 04 00 c0       	push   0xc000041d
c0009a00:	6a 0a                	push   0xa
c0009a02:	53                   	push   ebx
c0009a03:	e8 f0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a08:	6a 00                	push   0x0
c0009a0a:	68 25 04 00 c0       	push   0xc0000425
c0009a0f:	6a 0b                	push   0xb
c0009a11:	53                   	push   ebx
c0009a12:	e8 e1 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a17:	83 c4 20             	add    esp,0x20
c0009a1a:	6a 00                	push   0x0
c0009a1c:	68 2d 04 00 c0       	push   0xc000042d
c0009a21:	6a 0c                	push   0xc
c0009a23:	53                   	push   ebx
c0009a24:	e8 cf fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a29:	6a 00                	push   0x0
c0009a2b:	68 35 04 00 c0       	push   0xc0000435
c0009a30:	6a 0d                	push   0xd
c0009a32:	53                   	push   ebx
c0009a33:	e8 c0 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a38:	83 c4 20             	add    esp,0x20
c0009a3b:	6a 00                	push   0x0
c0009a3d:	68 3d 04 00 c0       	push   0xc000043d
c0009a42:	6a 0e                	push   0xe
c0009a44:	53                   	push   ebx
c0009a45:	e8 ae fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a4a:	6a 00                	push   0x0
c0009a4c:	68 45 04 00 c0       	push   0xc0000445
c0009a51:	6a 0f                	push   0xf
c0009a53:	53                   	push   ebx
c0009a54:	e8 9f fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a59:	83 c4 20             	add    esp,0x20
c0009a5c:	6a 00                	push   0x0
c0009a5e:	68 4f 04 00 c0       	push   0xc000044f
c0009a63:	6a 10                	push   0x10
c0009a65:	53                   	push   ebx
c0009a66:	e8 8d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a6b:	6a 00                	push   0x0
c0009a6d:	68 59 04 00 c0       	push   0xc0000459
c0009a72:	6a 11                	push   0x11
c0009a74:	53                   	push   ebx
c0009a75:	e8 7e fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a7a:	83 c4 20             	add    esp,0x20
c0009a7d:	6a 00                	push   0x0
c0009a7f:	68 63 04 00 c0       	push   0xc0000463
c0009a84:	6a 12                	push   0x12
c0009a86:	53                   	push   ebx
c0009a87:	e8 6c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a8c:	6a 01                	push   0x1
c0009a8e:	68 fd 04 00 c0       	push   0xc00004fd
c0009a93:	6a 60                	push   0x60
c0009a95:	53                   	push   ebx
c0009a96:	e8 5d fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009a9b:	83 c4 20             	add    esp,0x20
c0009a9e:	6a 00                	push   0x0
c0009aa0:	68 04 05 00 c0       	push   0xc0000504
c0009aa5:	6a 20                	push   0x20
c0009aa7:	53                   	push   ebx
c0009aa8:	e8 4b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aad:	6a 00                	push   0x0
c0009aaf:	68 ef 04 00 c0       	push   0xc00004ef
c0009ab4:	6a 21                	push   0x21
c0009ab6:	53                   	push   ebx
c0009ab7:	e8 3c fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009abc:	83 c4 20             	add    esp,0x20
c0009abf:	6a 00                	push   0x0
c0009ac1:	68 f6 04 00 c0       	push   0xc00004f6
c0009ac6:	6a 22                	push   0x22
c0009ac8:	53                   	push   ebx
c0009ac9:	e8 2a fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ace:	6a 00                	push   0x0
c0009ad0:	68 6d 04 00 c0       	push   0xc000046d
c0009ad5:	6a 23                	push   0x23
c0009ad7:	53                   	push   ebx
c0009ad8:	e8 1b fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009add:	83 c4 20             	add    esp,0x20
c0009ae0:	6a 00                	push   0x0
c0009ae2:	68 77 04 00 c0       	push   0xc0000477
c0009ae7:	6a 24                	push   0x24
c0009ae9:	53                   	push   ebx
c0009aea:	e8 09 fe ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009aef:	6a 00                	push   0x0
c0009af1:	68 81 04 00 c0       	push   0xc0000481
c0009af6:	6a 25                	push   0x25
c0009af8:	53                   	push   ebx
c0009af9:	e8 fa fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009afe:	83 c4 20             	add    esp,0x20
c0009b01:	6a 00                	push   0x0
c0009b03:	68 8b 04 00 c0       	push   0xc000048b
c0009b08:	6a 26                	push   0x26
c0009b0a:	53                   	push   ebx
c0009b0b:	e8 e8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b10:	6a 00                	push   0x0
c0009b12:	68 95 04 00 c0       	push   0xc0000495
c0009b17:	6a 27                	push   0x27
c0009b19:	53                   	push   ebx
c0009b1a:	e8 d9 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b1f:	83 c4 20             	add    esp,0x20
c0009b22:	6a 00                	push   0x0
c0009b24:	68 9f 04 00 c0       	push   0xc000049f
c0009b29:	6a 28                	push   0x28
c0009b2b:	53                   	push   ebx
c0009b2c:	e8 c7 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b31:	6a 00                	push   0x0
c0009b33:	68 a9 04 00 c0       	push   0xc00004a9
c0009b38:	6a 29                	push   0x29
c0009b3a:	53                   	push   ebx
c0009b3b:	e8 b8 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b40:	83 c4 20             	add    esp,0x20
c0009b43:	6a 00                	push   0x0
c0009b45:	68 b3 04 00 c0       	push   0xc00004b3
c0009b4a:	6a 2a                	push   0x2a
c0009b4c:	53                   	push   ebx
c0009b4d:	e8 a6 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b52:	6a 00                	push   0x0
c0009b54:	68 bd 04 00 c0       	push   0xc00004bd
c0009b59:	6a 2b                	push   0x2b
c0009b5b:	53                   	push   ebx
c0009b5c:	e8 97 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b61:	83 c4 20             	add    esp,0x20
c0009b64:	6a 00                	push   0x0
c0009b66:	68 c7 04 00 c0       	push   0xc00004c7
c0009b6b:	6a 2c                	push   0x2c
c0009b6d:	53                   	push   ebx
c0009b6e:	e8 85 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b73:	6a 00                	push   0x0
c0009b75:	68 d1 04 00 c0       	push   0xc00004d1
c0009b7a:	6a 2d                	push   0x2d
c0009b7c:	53                   	push   ebx
c0009b7d:	e8 76 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b82:	83 c4 20             	add    esp,0x20
c0009b85:	6a 00                	push   0x0
c0009b87:	68 db 04 00 c0       	push   0xc00004db
c0009b8c:	6a 2e                	push   0x2e
c0009b8e:	53                   	push   ebx
c0009b8f:	e8 64 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009b94:	6a 00                	push   0x0
c0009b96:	68 e5 04 00 c0       	push   0xc00004e5
c0009b9b:	6a 2f                	push   0x2f
c0009b9d:	53                   	push   ebx
c0009b9e:	e8 55 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009ba3:	83 c4 20             	add    esp,0x20
c0009ba6:	6a 00                	push   0x0
c0009ba8:	68 3b 05 00 c0       	push   0xc000053b
c0009bad:	6a 30                	push   0x30
c0009baf:	53                   	push   ebx
c0009bb0:	e8 43 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bb5:	6a 00                	push   0x0
c0009bb7:	68 45 05 00 c0       	push   0xc0000545
c0009bbc:	6a 31                	push   0x31
c0009bbe:	53                   	push   ebx
c0009bbf:	e8 34 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bc4:	83 c4 20             	add    esp,0x20
c0009bc7:	6a 00                	push   0x0
c0009bc9:	68 4f 05 00 c0       	push   0xc000054f
c0009bce:	6a 32                	push   0x32
c0009bd0:	53                   	push   ebx
c0009bd1:	e8 22 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bd6:	6a 00                	push   0x0
c0009bd8:	68 59 05 00 c0       	push   0xc0000559
c0009bdd:	6a 33                	push   0x33
c0009bdf:	53                   	push   ebx
c0009be0:	e8 13 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009be5:	83 c4 20             	add    esp,0x20
c0009be8:	6a 00                	push   0x0
c0009bea:	68 63 05 00 c0       	push   0xc0000563
c0009bef:	6a 34                	push   0x34
c0009bf1:	53                   	push   ebx
c0009bf2:	e8 01 fd ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009bf7:	6a 00                	push   0x0
c0009bf9:	68 6d 05 00 c0       	push   0xc000056d
c0009bfe:	6a 35                	push   0x35
c0009c00:	53                   	push   ebx
c0009c01:	e8 f2 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c06:	83 c4 20             	add    esp,0x20
c0009c09:	6a 00                	push   0x0
c0009c0b:	68 77 05 00 c0       	push   0xc0000577
c0009c10:	6a 36                	push   0x36
c0009c12:	53                   	push   ebx
c0009c13:	e8 e0 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c18:	6a 00                	push   0x0
c0009c1a:	68 81 05 00 c0       	push   0xc0000581
c0009c1f:	6a 37                	push   0x37
c0009c21:	53                   	push   ebx
c0009c22:	e8 d1 fc ff ff       	call   c00098f8 <IDT::addEntry(int, void (*)(), bool)>
c0009c27:	83 c4 1c             	add    esp,0x1c
c0009c2a:	6a 03                	push   0x3
c0009c2c:	6a 02                	push   0x2
c0009c2e:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0009c34:	e8 11 29 00 00       	call   c000c54a <VAS::allocatePages(int, int)>
c0009c39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009c40:	89 c6                	mov    esi,eax
c0009c42:	e8 a0 01 00 00       	call   c0009de7 <malloc>
c0009c47:	81 c6 00 20 00 00    	add    esi,0x2000
c0009c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c50:	89 c7                	mov    edi,eax
c0009c52:	e8 8d 1a 00 00       	call   c000b6e4 <TSS::TSS()>
c0009c57:	83 c4 0c             	add    esp,0xc
c0009c5a:	68 0b 04 00 c0       	push   0xc000040b
c0009c5f:	56                   	push   esi
c0009c60:	57                   	push   edi
c0009c61:	e8 c2 1a 00 00       	call   c000b728 <TSS::setup(unsigned long, unsigned long)>
c0009c66:	89 c6                	mov    esi,eax
c0009c68:	58                   	pop    eax
c0009c69:	5a                   	pop    edx
c0009c6a:	6a 00                	push   0x0
c0009c6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c70:	50                   	push   eax
c0009c71:	e8 d6 fb ff ff       	call   c000984c <IDTEntry::IDTEntry(bool)>
c0009c76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c7a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009c7f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009c86:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009c8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c90:	80 ce 05             	or     dh,0x5
c0009c93:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c9e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009ca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009ca4:	e8 87 fc ff ff       	call   c0009930 <IDT::flush()>
c0009ca9:	83 c4 20             	add    esp,0x20
c0009cac:	5b                   	pop    ebx
c0009cad:	5e                   	pop    esi
c0009cae:	5f                   	pop    edi
c0009caf:	c3                   	ret    

c0009cb0 <sbrk>:
c0009cb0:	55                   	push   ebp
c0009cb1:	57                   	push   edi
c0009cb2:	56                   	push   esi
c0009cb3:	53                   	push   ebx
c0009cb4:	83 ec 24             	sub    esp,0x24
c0009cb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cbb:	53                   	push   ebx
c0009cbc:	68 64 49 02 c0       	push   0xc0024964
c0009cc1:	e8 01 34 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	74 5f                	je     c0009d2c <sbrk+0x7c>
c0009ccd:	78 64                	js     c0009d33 <sbrk+0x83>
c0009ccf:	a1 3c 7e 02 c0       	mov    eax,ds:0xc0027e3c
c0009cd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cd8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009cde:	89 dd                	mov    ebp,ebx
c0009ce0:	78 69                	js     c0009d4b <sbrk+0x9b>
c0009ce2:	c1 fd 0c             	sar    ebp,0xc
c0009ce5:	bb 00 00 00 00       	mov    ebx,0x0
c0009cea:	8b 35 f0 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028cf0
c0009cf0:	8b 3d 3c 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027e3c
c0009cf6:	e8 a3 07 00 00       	call   c000a49e <Phys::allocatePage()>
c0009cfb:	68 01 04 00 00       	push   0x401
c0009d00:	57                   	push   edi
c0009d01:	50                   	push   eax
c0009d02:	56                   	push   esi
c0009d03:	e8 40 27 00 00       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d08:	81 05 3c 7e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027e3c,0x1000
c0009d12:	43                   	inc    ebx
c0009d13:	83 c4 10             	add    esp,0x10
c0009d16:	39 dd                	cmp    ebp,ebx
c0009d18:	75 d0                	jne    c0009cea <sbrk+0x3a>
c0009d1a:	0f 20 d8             	mov    eax,cr3
c0009d1d:	0f 22 d8             	mov    cr3,eax
c0009d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d24:	83 c4 1c             	add    esp,0x1c
c0009d27:	5b                   	pop    ebx
c0009d28:	5e                   	pop    esi
c0009d29:	5f                   	pop    edi
c0009d2a:	5d                   	pop    ebp
c0009d2b:	c3                   	ret    
c0009d2c:	a1 3c 7e 02 c0       	mov    eax,ds:0xc0027e3c
c0009d31:	eb f1                	jmp    c0009d24 <sbrk+0x74>
c0009d33:	83 ec 08             	sub    esp,0x8
c0009d36:	53                   	push   ebx
c0009d37:	68 90 49 02 c0       	push   0xc0024990
c0009d3c:	e8 86 33 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009d41:	83 c4 10             	add    esp,0x10
c0009d44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009d49:	eb d9                	jmp    c0009d24 <sbrk+0x74>
c0009d4b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009d51:	eb 8f                	jmp    c0009ce2 <sbrk+0x32>

c0009d53 <mmap>:
c0009d53:	83 ec 18             	sub    esp,0x18
c0009d56:	68 82 49 02 c0       	push   0xc0024982
c0009d5b:	e8 49 b4 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c0009d60:	b8 00 00 00 00       	mov    eax,0x0
c0009d65:	83 c4 1c             	add    esp,0x1c
c0009d68:	c3                   	ret    

c0009d69 <munmap>:
c0009d69:	83 ec 18             	sub    esp,0x18
c0009d6c:	68 87 49 02 c0       	push   0xc0024987
c0009d71:	e8 33 b4 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c0009d76:	b8 00 00 00 00       	mov    eax,0x0
c0009d7b:	83 c4 1c             	add    esp,0x1c
c0009d7e:	c3                   	ret    

c0009d7f <liballoc_lock()>:
c0009d7f:	fa                   	cli    
c0009d80:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0009d86:	b8 00 00 00 00       	mov    eax,0x0
c0009d8b:	c3                   	ret    

c0009d8c <liballoc_unlock()>:
c0009d8c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0009d91:	48                   	dec    eax
c0009d92:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0009d97:	75 01                	jne    c0009d9a <liballoc_unlock()+0xe>
c0009d99:	fb                   	sti    
c0009d9a:	b8 00 00 00 00       	mov    eax,0x0
c0009d9f:	c3                   	ret    

c0009da0 <liballoc_alloc(int)>:
c0009da0:	83 ec 10             	sub    esp,0x10
c0009da3:	6a 01                	push   0x1
c0009da5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009da9:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0009daf:	e8 96 27 00 00       	call   c000c54a <VAS::allocatePages(int, int)>
c0009db4:	83 c4 1c             	add    esp,0x1c
c0009db7:	c3                   	ret    

c0009db8 <liballoc_free(void*, int)>:
c0009db8:	83 ec 14             	sub    esp,0x14
c0009dbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009dbf:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0009dc5:	e8 2a 24 00 00       	call   c000c1f4 <VAS::freeAllocatedPages(unsigned long)>
c0009dca:	b8 00 00 00 00       	mov    eax,0x0
c0009dcf:	83 c4 1c             	add    esp,0x1c
c0009dd2:	c3                   	ret    

c0009dd3 <realloc>:
c0009dd3:	83 ec 14             	sub    esp,0x14
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dde:	e8 8d 77 ff ff       	call   c0001570 <dlrealloc>
c0009de3:	83 c4 1c             	add    esp,0x1c
c0009de6:	c3                   	ret    

c0009de7 <malloc>:
c0009de7:	83 ec 18             	sub    esp,0x18
c0009dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dee:	e8 40 72 ff ff       	call   c0001033 <dlmalloc>
c0009df3:	83 c4 1c             	add    esp,0x1c
c0009df6:	c3                   	ret    

c0009df7 <free>:
c0009df7:	83 ec 18             	sub    esp,0x18
c0009dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfe:	e8 d5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e03:	83 c4 1c             	add    esp,0x1c
c0009e06:	c3                   	ret    

c0009e07 <rfree>:
c0009e07:	83 ec 18             	sub    esp,0x18
c0009e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0e:	e8 c5 6e ff ff       	call   c0000cd8 <dlfree>
c0009e13:	83 c4 1c             	add    esp,0x1c
c0009e16:	c3                   	ret    

c0009e17 <calloc>:
c0009e17:	56                   	push   esi
c0009e18:	53                   	push   ebx
c0009e19:	83 ec 10             	sub    esp,0x10
c0009e1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009e20:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009e25:	53                   	push   ebx
c0009e26:	e8 bc ff ff ff       	call   c0009de7 <malloc>
c0009e2b:	89 c6                	mov    esi,eax
c0009e2d:	83 c4 0c             	add    esp,0xc
c0009e30:	53                   	push   ebx
c0009e31:	6a 00                	push   0x0
c0009e33:	50                   	push   eax
c0009e34:	e8 5b 68 ff ff       	call   c0000694 <memset>
c0009e39:	89 f0                	mov    eax,esi
c0009e3b:	83 c4 14             	add    esp,0x14
c0009e3e:	5b                   	pop    ebx
c0009e3f:	5e                   	pop    esi
c0009e40:	c3                   	ret    

c0009e41 <Krnl::setBootMessage(char const*)>:
c0009e41:	57                   	push   edi
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009e4a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009e51:	68 9e 00 00 00       	push   0x9e
c0009e56:	6a 00                	push   0x0
c0009e58:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009e5c:	56                   	push   esi
c0009e5d:	e8 32 68 ff ff       	call   c0000694 <memset>
c0009e62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009e65:	e8 46 68 ff ff       	call   c00006b0 <strlen>
c0009e6a:	ba 50 00 00 00       	mov    edx,0x50
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	29 c2                	sub    edx,eax
c0009e74:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009e78:	d1 ea                	shr    edx,1
c0009e7a:	84 c0                	test   al,al
c0009e7c:	74 19                	je     c0009e97 <Krnl::setBootMessage(char const*)+0x56>
c0009e7e:	01 d2                	add    edx,edx
c0009e80:	43                   	inc    ebx
c0009e81:	01 f2                	add    edx,esi
c0009e83:	80 cc 0f             	or     ah,0xf
c0009e86:	83 c2 02             	add    edx,0x2
c0009e89:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009e8d:	43                   	inc    ebx
c0009e8e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009e93:	84 c0                	test   al,al
c0009e95:	75 ec                	jne    c0009e83 <Krnl::setBootMessage(char const*)+0x42>
c0009e97:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e9c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ea1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009ea3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ea9:	5b                   	pop    ebx
c0009eaa:	5e                   	pop    esi
c0009eab:	5f                   	pop    edi
c0009eac:	c3                   	ret    

c0009ead <kernel_main>:
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 20             	sub    esp,0x20
c0009eb3:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009eb8:	a3 e0 8b 02 c0       	mov    ds:0xc0028be0,eax
c0009ebd:	f6 c4 08             	test   ah,0x8
c0009ec0:	0f 85 7a 03 00 00    	jne    c000a240 <kernel_main+0x393>
c0009ec6:	31 f6                	xor    esi,esi
c0009ec8:	bf f9 03 00 00       	mov    edi,0x3f9
c0009ecd:	89 f0                	mov    eax,esi
c0009ecf:	89 fa                	mov    edx,edi
c0009ed1:	ee                   	out    dx,al
c0009ed2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009ed7:	b0 80                	mov    al,0x80
c0009ed9:	89 da                	mov    edx,ebx
c0009edb:	ee                   	out    dx,al
c0009edc:	b1 03                	mov    cl,0x3
c0009ede:	ba f8 03 00 00       	mov    edx,0x3f8
c0009ee3:	88 c8                	mov    al,cl
c0009ee5:	ee                   	out    dx,al
c0009ee6:	89 f0                	mov    eax,esi
c0009ee8:	89 fa                	mov    edx,edi
c0009eea:	ee                   	out    dx,al
c0009eeb:	88 c8                	mov    al,cl
c0009eed:	89 da                	mov    edx,ebx
c0009eef:	ee                   	out    dx,al
c0009ef0:	b0 c7                	mov    al,0xc7
c0009ef2:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ef7:	ee                   	out    dx,al
c0009ef8:	b0 0b                	mov    al,0xb
c0009efa:	ba fc 03 00 00       	mov    edx,0x3fc
c0009eff:	ee                   	out    dx,al
c0009f00:	83 ec 0c             	sub    esp,0xc
c0009f03:	68 c0 49 02 c0       	push   0xc00249c0
c0009f08:	e8 ba 31 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0009f17:	0f 85 eb 02 00 00    	jne    c000a208 <kernel_main+0x35b>
c0009f1d:	e8 c6 0c 00 00       	call   c000abe8 <installVgaTextImplementation()>
c0009f22:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0009f29:	0f 85 94 02 00 00    	jne    c000a1c3 <kernel_main+0x316>
c0009f2f:	0f b6 05 40 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027e40
c0009f36:	84 c0                	test   al,al
c0009f38:	74 7b                	je     c0009fb5 <kernel_main+0x108>
c0009f3a:	31 db                	xor    ebx,ebx
c0009f3c:	bf 0a 00 00 00       	mov    edi,0xa
c0009f41:	be 05 00 00 00       	mov    esi,0x5
c0009f46:	31 c9                	xor    ecx,ecx
c0009f48:	eb 2a                	jmp    c0009f74 <kernel_main+0xc7>
c0009f4a:	3c 0d                	cmp    al,0xd
c0009f4c:	74 1a                	je     c0009f68 <kernel_main+0xbb>
c0009f4e:	3c 0a                	cmp    al,0xa
c0009f50:	74 40                	je     c0009f92 <kernel_main+0xe5>
c0009f52:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009f55:	80 cc 0e             	or     ah,0xe
c0009f58:	c1 e2 04             	shl    edx,0x4
c0009f5b:	01 ca                	add    edx,ecx
c0009f5d:	41                   	inc    ecx
c0009f5e:	01 fa                	add    edx,edi
c0009f60:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009f68:	43                   	inc    ebx
c0009f69:	0f b6 83 40 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd81c0]
c0009f70:	84 c0                	test   al,al
c0009f72:	74 32                	je     c0009fa6 <kernel_main+0xf9>
c0009f74:	80 b9 76 7e 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd818a],0xdb
c0009f7b:	75 cd                	jne    c0009f4a <kernel_main+0x9d>
c0009f7d:	0f b6 91 75 7e 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd818b]
c0009f84:	83 e2 fe             	and    edx,0xfffffffe
c0009f87:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009f8d:	75 bb                	jne    c0009f4a <kernel_main+0x9d>
c0009f8f:	47                   	inc    edi
c0009f90:	eb b8                	jmp    c0009f4a <kernel_main+0x9d>
c0009f92:	43                   	inc    ebx
c0009f93:	46                   	inc    esi
c0009f94:	31 c9                	xor    ecx,ecx
c0009f96:	0f b6 83 40 7e 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd81c0]
c0009f9d:	bf 0a 00 00 00       	mov    edi,0xa
c0009fa2:	84 c0                	test   al,al
c0009fa4:	75 ce                	jne    c0009f74 <kernel_main+0xc7>
c0009fa6:	8b 15 e0 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be0
c0009fac:	80 e6 08             	and    dh,0x8
c0009faf:	0f 85 bf 00 00 00    	jne    c000a074 <kernel_main+0x1c7>
c0009fb5:	83 ec 0c             	sub    esp,0xc
c0009fb8:	68 5c 4a 02 c0       	push   0xc0024a5c
c0009fbd:	e8 7f fe ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0009fc2:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009fc7:	05 ff 0f 00 00       	add    eax,0xfff
c0009fcc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd4:	e8 44 06 00 00       	call   c000a61d <Phys::physicalMemorySetup(unsigned int)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0009fe3:	0f 85 a2 01 00 00    	jne    c000a18b <kernel_main+0x2de>
c0009fe9:	e8 72 1f 00 00       	call   c000bf60 <Virt::virtualMemorySetup()>
c0009fee:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0009ff5:	0f 85 58 01 00 00    	jne    c000a153 <kernel_main+0x2a6>
c0009ffb:	83 ec 0c             	sub    esp,0xc
c0009ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c000a002:	56                   	push   esi
c000a003:	e8 14 20 00 00       	call   c000c01c <VAS::VAS()>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 35 f0 8c 02 c0    	mov    DWORD PTR ds:0xc0028cf0,esi
c000a011:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c000a018:	0f 85 fd 00 00 00    	jne    c000a11b <kernel_main+0x26e>
c000a01e:	e8 fd 5f ff ff       	call   c0000020 <callGlobalConstructors>
c000a023:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c000a02a:	0f 85 b3 00 00 00    	jne    c000a0e3 <kernel_main+0x236>
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	68 ec 01 00 00       	push   0x1ec
c000a038:	e8 aa fd ff ff       	call   c0009de7 <malloc>
c000a03d:	89 c3                	mov    ebx,eax
c000a03f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a042:	e8 89 eb ff ff       	call   c0008bd0 <Computer::Computer()>
c000a047:	83 c4 10             	add    esp,0x10
c000a04a:	89 1d c8 8b 02 c0    	mov    DWORD PTR ds:0xc0028bc8,ebx
c000a050:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c000a057:	75 53                	jne    c000a0ac <kernel_main+0x1ff>
c000a059:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a05b:	6a 00                	push   0x0
c000a05d:	6a 00                	push   0x0
c000a05f:	6a 00                	push   0x0
c000a061:	53                   	push   ebx
c000a062:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a065:	89 34 24             	mov    DWORD PTR [esp],esi
c000a068:	e8 5f 22 00 00       	call   c000c2cc <VAS::~VAS()>
c000a06d:	83 c4 30             	add    esp,0x30
c000a070:	5b                   	pop    ebx
c000a071:	5e                   	pop    esi
c000a072:	5f                   	pop    edi
c000a073:	c3                   	ret    
c000a074:	83 ec 0c             	sub    esp,0xc
c000a077:	68 0b 4a 02 c0       	push   0xc0024a0b
c000a07c:	e8 c0 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a08b:	0f 85 24 ff ff ff    	jne    c0009fb5 <kernel_main+0x108>
c000a091:	eb 04                	jmp    c000a097 <kernel_main+0x1ea>
c000a093:	3c 1c                	cmp    al,0x1c
c000a095:	74 06                	je     c000a09d <kernel_main+0x1f0>
c000a097:	e4 60                	in     al,0x60
c000a099:	3c 5a                	cmp    al,0x5a
c000a09b:	75 f6                	jne    c000a093 <kernel_main+0x1e6>
c000a09d:	e4 60                	in     al,0x60
c000a09f:	3c 5a                	cmp    al,0x5a
c000a0a1:	74 fa                	je     c000a09d <kernel_main+0x1f0>
c000a0a3:	3c 1c                	cmp    al,0x1c
c000a0a5:	74 f6                	je     c000a09d <kernel_main+0x1f0>
c000a0a7:	e9 09 ff ff ff       	jmp    c0009fb5 <kernel_main+0x108>
c000a0ac:	83 ec 0c             	sub    esp,0xc
c000a0af:	68 4a 4a 02 c0       	push   0xc0024a4a
c000a0b4:	e8 88 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0b9:	83 c4 10             	add    esp,0x10
c000a0bc:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a0c3:	74 0c                	je     c000a0d1 <kernel_main+0x224>
c000a0c5:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c000a0cb:	eb 8c                	jmp    c000a059 <kernel_main+0x1ac>
c000a0cd:	3c 1c                	cmp    al,0x1c
c000a0cf:	74 06                	je     c000a0d7 <kernel_main+0x22a>
c000a0d1:	e4 60                	in     al,0x60
c000a0d3:	3c 5a                	cmp    al,0x5a
c000a0d5:	75 f6                	jne    c000a0cd <kernel_main+0x220>
c000a0d7:	e4 60                	in     al,0x60
c000a0d9:	3c 5a                	cmp    al,0x5a
c000a0db:	74 fa                	je     c000a0d7 <kernel_main+0x22a>
c000a0dd:	3c 1c                	cmp    al,0x1c
c000a0df:	74 f6                	je     c000a0d7 <kernel_main+0x22a>
c000a0e1:	eb e2                	jmp    c000a0c5 <kernel_main+0x218>
c000a0e3:	83 ec 0c             	sub    esp,0xc
c000a0e6:	68 37 4a 02 c0       	push   0xc0024a37
c000a0eb:	e8 51 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a0f0:	83 c4 10             	add    esp,0x10
c000a0f3:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a0fa:	0f 85 30 ff ff ff    	jne    c000a030 <kernel_main+0x183>
c000a100:	eb 04                	jmp    c000a106 <kernel_main+0x259>
c000a102:	3c 1c                	cmp    al,0x1c
c000a104:	74 06                	je     c000a10c <kernel_main+0x25f>
c000a106:	e4 60                	in     al,0x60
c000a108:	3c 5a                	cmp    al,0x5a
c000a10a:	75 f6                	jne    c000a102 <kernel_main+0x255>
c000a10c:	e4 60                	in     al,0x60
c000a10e:	3c 5a                	cmp    al,0x5a
c000a110:	74 fa                	je     c000a10c <kernel_main+0x25f>
c000a112:	3c 1c                	cmp    al,0x1c
c000a114:	74 f6                	je     c000a10c <kernel_main+0x25f>
c000a116:	e9 15 ff ff ff       	jmp    c000a030 <kernel_main+0x183>
c000a11b:	83 ec 0c             	sub    esp,0xc
c000a11e:	68 2d 4a 02 c0       	push   0xc0024a2d
c000a123:	e8 19 fd ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a128:	83 c4 10             	add    esp,0x10
c000a12b:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a132:	0f 85 e6 fe ff ff    	jne    c000a01e <kernel_main+0x171>
c000a138:	eb 04                	jmp    c000a13e <kernel_main+0x291>
c000a13a:	3c 1c                	cmp    al,0x1c
c000a13c:	74 06                	je     c000a144 <kernel_main+0x297>
c000a13e:	e4 60                	in     al,0x60
c000a140:	3c 5a                	cmp    al,0x5a
c000a142:	75 f6                	jne    c000a13a <kernel_main+0x28d>
c000a144:	e4 60                	in     al,0x60
c000a146:	3c 5a                	cmp    al,0x5a
c000a148:	74 fa                	je     c000a144 <kernel_main+0x297>
c000a14a:	3c 1c                	cmp    al,0x1c
c000a14c:	74 f6                	je     c000a144 <kernel_main+0x297>
c000a14e:	e9 cb fe ff ff       	jmp    c000a01e <kernel_main+0x171>
c000a153:	83 ec 0c             	sub    esp,0xc
c000a156:	68 22 4a 02 c0       	push   0xc0024a22
c000a15b:	e8 e1 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a160:	83 c4 10             	add    esp,0x10
c000a163:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a16a:	0f 85 8b fe ff ff    	jne    c0009ffb <kernel_main+0x14e>
c000a170:	eb 04                	jmp    c000a176 <kernel_main+0x2c9>
c000a172:	3c 1c                	cmp    al,0x1c
c000a174:	74 06                	je     c000a17c <kernel_main+0x2cf>
c000a176:	e4 60                	in     al,0x60
c000a178:	3c 5a                	cmp    al,0x5a
c000a17a:	75 f6                	jne    c000a172 <kernel_main+0x2c5>
c000a17c:	e4 60                	in     al,0x60
c000a17e:	3c 5a                	cmp    al,0x5a
c000a180:	74 fa                	je     c000a17c <kernel_main+0x2cf>
c000a182:	3c 1c                	cmp    al,0x1c
c000a184:	74 f6                	je     c000a17c <kernel_main+0x2cf>
c000a186:	e9 70 fe ff ff       	jmp    c0009ffb <kernel_main+0x14e>
c000a18b:	83 ec 0c             	sub    esp,0xc
c000a18e:	68 17 4a 02 c0       	push   0xc0024a17
c000a193:	e8 a9 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a198:	83 c4 10             	add    esp,0x10
c000a19b:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a1a2:	0f 85 41 fe ff ff    	jne    c0009fe9 <kernel_main+0x13c>
c000a1a8:	eb 04                	jmp    c000a1ae <kernel_main+0x301>
c000a1aa:	3c 1c                	cmp    al,0x1c
c000a1ac:	74 06                	je     c000a1b4 <kernel_main+0x307>
c000a1ae:	e4 60                	in     al,0x60
c000a1b0:	3c 5a                	cmp    al,0x5a
c000a1b2:	75 f6                	jne    c000a1aa <kernel_main+0x2fd>
c000a1b4:	e4 60                	in     al,0x60
c000a1b6:	3c 5a                	cmp    al,0x5a
c000a1b8:	74 fa                	je     c000a1b4 <kernel_main+0x307>
c000a1ba:	3c 1c                	cmp    al,0x1c
c000a1bc:	74 f6                	je     c000a1b4 <kernel_main+0x307>
c000a1be:	e9 26 fe ff ff       	jmp    c0009fe9 <kernel_main+0x13c>
c000a1c3:	83 ec 0c             	sub    esp,0xc
c000a1c6:	68 f9 49 02 c0       	push   0xc00249f9
c000a1cb:	e8 71 fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a1d0:	8b 15 e0 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be0
c000a1d6:	83 c4 10             	add    esp,0x10
c000a1d9:	f6 c2 80             	test   dl,0x80
c000a1dc:	74 18                	je     c000a1f6 <kernel_main+0x349>
c000a1de:	0f b6 05 40 7e 02 c0 	movzx  eax,BYTE PTR ds:0xc0027e40
c000a1e5:	84 c0                	test   al,al
c000a1e7:	0f 85 4d fd ff ff    	jne    c0009f3a <kernel_main+0x8d>
c000a1ed:	e9 ba fd ff ff       	jmp    c0009fac <kernel_main+0xff>
c000a1f2:	3c 1c                	cmp    al,0x1c
c000a1f4:	74 06                	je     c000a1fc <kernel_main+0x34f>
c000a1f6:	e4 60                	in     al,0x60
c000a1f8:	3c 5a                	cmp    al,0x5a
c000a1fa:	75 f6                	jne    c000a1f2 <kernel_main+0x345>
c000a1fc:	e4 60                	in     al,0x60
c000a1fe:	3c 5a                	cmp    al,0x5a
c000a200:	74 fa                	je     c000a1fc <kernel_main+0x34f>
c000a202:	3c 1c                	cmp    al,0x1c
c000a204:	74 f6                	je     c000a1fc <kernel_main+0x34f>
c000a206:	eb d6                	jmp    c000a1de <kernel_main+0x331>
c000a208:	83 ec 0c             	sub    esp,0xc
c000a20b:	68 ea 49 02 c0       	push   0xc00249ea
c000a210:	e8 2c fc ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a215:	83 c4 10             	add    esp,0x10
c000a218:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a21f:	0f 85 f8 fc ff ff    	jne    c0009f1d <kernel_main+0x70>
c000a225:	eb 04                	jmp    c000a22b <kernel_main+0x37e>
c000a227:	3c 1c                	cmp    al,0x1c
c000a229:	74 06                	je     c000a231 <kernel_main+0x384>
c000a22b:	e4 60                	in     al,0x60
c000a22d:	3c 5a                	cmp    al,0x5a
c000a22f:	75 f6                	jne    c000a227 <kernel_main+0x37a>
c000a231:	e4 60                	in     al,0x60
c000a233:	3c 5a                	cmp    al,0x5a
c000a235:	74 fa                	je     c000a231 <kernel_main+0x384>
c000a237:	3c 1c                	cmp    al,0x1c
c000a239:	74 f6                	je     c000a231 <kernel_main+0x384>
c000a23b:	e9 dd fc ff ff       	jmp    c0009f1d <kernel_main+0x70>
c000a240:	83 ec 0c             	sub    esp,0xc
c000a243:	68 d7 49 02 c0       	push   0xc00249d7
c000a248:	e8 f4 fb ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c000a257:	0f 85 69 fc ff ff    	jne    c0009ec6 <kernel_main+0x19>
c000a25d:	eb 04                	jmp    c000a263 <kernel_main+0x3b6>
c000a25f:	3c 1c                	cmp    al,0x1c
c000a261:	74 06                	je     c000a269 <kernel_main+0x3bc>
c000a263:	e4 60                	in     al,0x60
c000a265:	3c 5a                	cmp    al,0x5a
c000a267:	75 f6                	jne    c000a25f <kernel_main+0x3b2>
c000a269:	e4 60                	in     al,0x60
c000a26b:	3c 5a                	cmp    al,0x5a
c000a26d:	74 fa                	je     c000a269 <kernel_main+0x3bc>
c000a26f:	3c 1c                	cmp    al,0x1c
c000a271:	74 f6                	je     c000a269 <kernel_main+0x3bc>
c000a273:	e9 4e fc ff ff       	jmp    c0009ec6 <kernel_main+0x19>

c000a278 <Phys::allocateDMA(unsigned long)>:
c000a278:	55                   	push   ebp
c000a279:	31 ed                	xor    ebp,ebp
c000a27b:	57                   	push   edi
c000a27c:	56                   	push   esi
c000a27d:	53                   	push   ebx
c000a27e:	31 db                	xor    ebx,ebx
c000a280:	83 ec 28             	sub    esp,0x28
c000a283:	68 7b 4a 02 c0       	push   0xc0024a7b
c000a288:	e8 3a 2e 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a28d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a29a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a2a2:	c1 ef 0c             	shr    edi,0xc
c000a2a5:	31 c0                	xor    eax,eax
c000a2a7:	eb 19                	jmp    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2a9:	85 c0                	test   eax,eax
c000a2ab:	75 06                	jne    c000a2b3 <Phys::allocateDMA(unsigned long)+0x3b>
c000a2ad:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a2b1:	89 dd                	mov    ebp,ebx
c000a2b3:	8d 70 01             	lea    esi,[eax+0x1]
c000a2b6:	39 f7                	cmp    edi,esi
c000a2b8:	74 3f                	je     c000a2f9 <Phys::allocateDMA(unsigned long)+0x81>
c000a2ba:	89 f0                	mov    eax,esi
c000a2bc:	43                   	inc    ebx
c000a2bd:	83 fb 0f             	cmp    ebx,0xf
c000a2c0:	7f 11                	jg     c000a2d3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a2c2:	80 bb fc 8b 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7404],0x0
c000a2c9:	74 de                	je     c000a2a9 <Phys::allocateDMA(unsigned long)+0x31>
c000a2cb:	31 c0                	xor    eax,eax
c000a2cd:	43                   	inc    ebx
c000a2ce:	83 fb 0f             	cmp    ebx,0xf
c000a2d1:	7e ef                	jle    c000a2c2 <Phys::allocateDMA(unsigned long)+0x4a>
c000a2d3:	83 ec 0c             	sub    esp,0xc
c000a2d6:	68 ab 4a 02 c0       	push   0xc0024aab
c000a2db:	e8 e7 2d 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a2e0:	c7 04 24 68 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b68
c000a2e7:	e8 bd ae 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	31 c0                	xor    eax,eax
c000a2f1:	83 c4 1c             	add    esp,0x1c
c000a2f4:	5b                   	pop    ebx
c000a2f5:	5e                   	pop    esi
c000a2f6:	5f                   	pop    edi
c000a2f7:	5d                   	pop    ebp
c000a2f8:	c3                   	ret    
c000a2f9:	89 e9                	mov    ecx,ebp
c000a2fb:	c1 f9 04             	sar    ecx,0x4
c000a2fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a302:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a306:	89 ca                	mov    edx,ecx
c000a308:	4a                   	dec    edx
c000a309:	79 03                	jns    c000a30e <Phys::allocateDMA(unsigned long)+0x96>
c000a30b:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a30e:	c1 fa 04             	sar    edx,0x4
c000a311:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a315:	74 08                	je     c000a31f <Phys::allocateDMA(unsigned long)+0xa7>
c000a317:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a31b:	31 c0                	xor    eax,eax
c000a31d:	eb ae                	jmp    c000a2cd <Phys::allocateDMA(unsigned long)+0x55>
c000a31f:	85 f6                	test   esi,esi
c000a321:	74 15                	je     c000a338 <Phys::allocateDMA(unsigned long)+0xc0>
c000a323:	8d 95 fc 8b 02 c0    	lea    edx,[ebp-0x3ffd7404]
c000a329:	8d 84 05 fd 8b 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7403]
c000a330:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a333:	42                   	inc    edx
c000a334:	39 d0                	cmp    eax,edx
c000a336:	75 f8                	jne    c000a330 <Phys::allocateDMA(unsigned long)+0xb8>
c000a338:	83 ec 0c             	sub    esp,0xc
c000a33b:	01 3d f4 8b 02 c0    	add    DWORD PTR ds:0xc0028bf4,edi
c000a341:	68 94 4a 02 c0       	push   0xc0024a94
c000a346:	e8 7c 2d 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a34b:	83 c4 10             	add    esp,0x10
c000a34e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a352:	85 c0                	test   eax,eax
c000a354:	74 23                	je     c000a379 <Phys::allocateDMA(unsigned long)+0x101>
c000a356:	83 ec 0c             	sub    esp,0xc
c000a359:	68 8c 7a 02 c0       	push   0xc0027a8c
c000a35e:	e8 64 2d 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a363:	c7 04 24 68 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b68
c000a36a:	e8 3a ae 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000a36f:	83 c4 10             	add    esp,0x10
c000a372:	89 f0                	mov    eax,esi
c000a374:	e9 43 ff ff ff       	jmp    c000a2bc <Phys::allocateDMA(unsigned long)+0x44>
c000a379:	c1 e5 0c             	shl    ebp,0xc
c000a37c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a382:	e9 6a ff ff ff       	jmp    c000a2f1 <Phys::allocateDMA(unsigned long)+0x79>

c000a387 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a387:	83 ec 18             	sub    esp,0x18
c000a38a:	68 af 4a 02 c0       	push   0xc0024aaf
c000a38f:	e8 33 2d 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a394:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a398:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a3a2:	c1 ea 0c             	shr    edx,0xc
c000a3a5:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a3aa:	29 15 f4 8b 02 c0    	sub    DWORD PTR ds:0xc0028bf4,edx
c000a3b0:	c1 e8 0c             	shr    eax,0xc
c000a3b3:	83 c4 10             	add    esp,0x10
c000a3b6:	85 d2                	test   edx,edx
c000a3b8:	74 0f                	je     c000a3c9 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a3ba:	05 fc 8b 02 c0       	add    eax,0xc0028bfc
c000a3bf:	01 c2                	add    edx,eax
c000a3c1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a3c4:	40                   	inc    eax
c000a3c5:	39 d0                	cmp    eax,edx
c000a3c7:	75 f8                	jne    c000a3c1 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a3c9:	83 c4 0c             	add    esp,0xc
c000a3cc:	c3                   	ret    

c000a3cd <Phys::setPageState(unsigned long, bool)>:
c000a3cd:	56                   	push   esi
c000a3ce:	ba 01 00 00 00       	mov    edx,0x1
c000a3d3:	53                   	push   ebx
c000a3d4:	8b 35 84 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f84
c000a3da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a3de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e2:	89 c8                	mov    eax,ecx
c000a3e4:	83 e1 07             	and    ecx,0x7
c000a3e7:	c1 e8 03             	shr    eax,0x3
c000a3ea:	d3 e3                	shl    ebx,cl
c000a3ec:	01 c6                	add    esi,eax
c000a3ee:	d3 e2                	shl    edx,cl
c000a3f0:	f7 d2                	not    edx
c000a3f2:	20 16                	and    BYTE PTR [esi],dl
c000a3f4:	03 05 84 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027f84
c000a3fa:	08 18                	or     BYTE PTR [eax],bl
c000a3fc:	5b                   	pop    ebx
c000a3fd:	5e                   	pop    esi
c000a3fe:	c3                   	ret    

c000a3ff <Phys::getPageState(unsigned long)>:
c000a3ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a403:	8b 15 84 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f84
c000a409:	89 c8                	mov    eax,ecx
c000a40b:	83 e1 07             	and    ecx,0x7
c000a40e:	c1 e8 03             	shr    eax,0x3
c000a411:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a415:	d3 f8                	sar    eax,cl
c000a417:	83 e0 01             	and    eax,0x1
c000a41a:	c3                   	ret    

c000a41b <Phys::freePage(unsigned long)>:
c000a41b:	53                   	push   ebx
c000a41c:	83 ec 10             	sub    esp,0x10
c000a41f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a423:	53                   	push   ebx
c000a424:	68 c5 4a 02 c0       	push   0xc0024ac5
c000a429:	e8 99 2c 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a42e:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	3d ff ff 00 00       	cmp    eax,0xffff
c000a43c:	76 3d                	jbe    c000a47b <Phys::freePage(unsigned long)+0x60>
c000a43e:	83 ec 0c             	sub    esp,0xc
c000a441:	c1 eb 0c             	shr    ebx,0xc
c000a444:	53                   	push   ebx
c000a445:	e8 b5 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a44a:	83 c4 10             	add    esp,0x10
c000a44d:	84 c0                	test   al,al
c000a44f:	74 19                	je     c000a46a <Phys::freePage(unsigned long)+0x4f>
c000a451:	83 ec 08             	sub    esp,0x8
c000a454:	ff 0d f4 8b 02 c0    	dec    DWORD PTR ds:0xc0028bf4
c000a45a:	6a 00                	push   0x0
c000a45c:	53                   	push   ebx
c000a45d:	e8 6b ff ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	83 c4 08             	add    esp,0x8
c000a468:	5b                   	pop    ebx
c000a469:	c3                   	ret    
c000a46a:	c7 44 24 10 ef 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024aef
c000a472:	83 c4 08             	add    esp,0x8
c000a475:	5b                   	pop    ebx
c000a476:	e9 2e ad 00 00       	jmp    c00151a9 <Krnl::panic(char const*)>
c000a47b:	83 ec 08             	sub    esp,0x8
c000a47e:	53                   	push   ebx
c000a47f:	68 d8 4a 02 c0       	push   0xc0024ad8
c000a484:	e8 3e 2c 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a489:	58                   	pop    eax
c000a48a:	5a                   	pop    edx
c000a48b:	68 00 10 00 00       	push   0x1000
c000a490:	53                   	push   ebx
c000a491:	e8 f1 fe ff ff       	call   c000a387 <Phys::freeDMA(unsigned long, unsigned long)>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	83 c4 08             	add    esp,0x8
c000a49c:	5b                   	pop    ebx
c000a49d:	c3                   	ret    

c000a49e <Phys::allocatePage()>:
c000a49e:	56                   	push   esi
c000a49f:	53                   	push   ebx
c000a4a0:	83 ec 14             	sub    esp,0x14
c000a4a3:	8b 35 e8 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028be8
c000a4a9:	89 f3                	mov    ebx,esi
c000a4ab:	eb 0a                	jmp    c000a4b7 <Phys::allocatePage()+0x19>
c000a4ad:	89 1d e8 8b 02 c0    	mov    DWORD PTR ds:0xc0028be8,ebx
c000a4b3:	39 de                	cmp    esi,ebx
c000a4b5:	74 24                	je     c000a4db <Phys::allocatePage()+0x3d>
c000a4b7:	53                   	push   ebx
c000a4b8:	e8 42 ff ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a4bd:	5a                   	pop    edx
c000a4be:	84 c0                	test   al,al
c000a4c0:	74 69                	je     c000a52b <Phys::allocatePage()+0x8d>
c000a4c2:	43                   	inc    ebx
c000a4c3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a4c9:	75 e2                	jne    c000a4ad <Phys::allocatePage()+0xf>
c000a4cb:	31 db                	xor    ebx,ebx
c000a4cd:	c7 05 e8 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028be8,0x0
c000a4d7:	39 de                	cmp    esi,ebx
c000a4d9:	75 dc                	jne    c000a4b7 <Phys::allocatePage()+0x19>
c000a4db:	83 ec 0c             	sub    esp,0xc
c000a4de:	80 35 0c 8c 02 c0 01 	xor    BYTE PTR ds:0xc0028c0c,0x1
c000a4e5:	68 90 4b 02 c0       	push   0xc0024b90
c000a4ea:	e8 d8 2b 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a4ef:	58                   	pop    eax
c000a4f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a4f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a4fe:	e8 53 28 00 00       	call   c000cd56 <VAS::scanForEviction()>
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	85 c0                	test   eax,eax
c000a508:	75 62                	jne    c000a56c <Phys::allocatePage()+0xce>
c000a50a:	83 ec 0c             	sub    esp,0xc
c000a50d:	68 b4 4b 02 c0       	push   0xc0024bb4
c000a512:	e8 92 ac 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000a517:	83 c4 10             	add    esp,0x10
c000a51a:	8b 1d e8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028be8
c000a520:	53                   	push   ebx
c000a521:	e8 d9 fe ff ff       	call   c000a3ff <Phys::getPageState(unsigned long)>
c000a526:	5a                   	pop    edx
c000a527:	84 c0                	test   al,al
c000a529:	75 97                	jne    c000a4c2 <Phys::allocatePage()+0x24>
c000a52b:	6a 01                	push   0x1
c000a52d:	53                   	push   ebx
c000a52e:	e8 9a fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a533:	5a                   	pop    edx
c000a534:	a1 f4 8b 02 c0       	mov    eax,ds:0xc0028bf4
c000a539:	59                   	pop    ecx
c000a53a:	40                   	inc    eax
c000a53b:	8b 15 e8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be8
c000a541:	a3 f4 8b 02 c0       	mov    ds:0xc0028bf4,eax
c000a546:	c1 e2 0c             	shl    edx,0xc
c000a549:	52                   	push   edx
c000a54a:	ff 35 f8 8b 02 c0    	push   DWORD PTR ds:0xc0028bf8
c000a550:	50                   	push   eax
c000a551:	68 05 4b 02 c0       	push   0xc0024b05
c000a556:	e8 6c 2b 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a55b:	a1 e8 8b 02 c0       	mov    eax,ds:0xc0028be8
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	c1 e0 0c             	shl    eax,0xc
c000a566:	83 c4 14             	add    esp,0x14
c000a569:	5b                   	pop    ebx
c000a56a:	5e                   	pop    esi
c000a56b:	c3                   	ret    
c000a56c:	83 ec 08             	sub    esp,0x8
c000a56f:	89 c2                	mov    edx,eax
c000a571:	6a 01                	push   0x1
c000a573:	c1 ea 0c             	shr    edx,0xc
c000a576:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a57a:	52                   	push   edx
c000a57b:	e8 4d fe ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a587:	eb dd                	jmp    c000a566 <Phys::allocatePage()+0xc8>

c000a589 <Phys::allocateContiguousPages(int)>:
c000a589:	57                   	push   edi
c000a58a:	56                   	push   esi
c000a58b:	53                   	push   ebx
c000a58c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a590:	fa                   	cli    
c000a591:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c000a597:	31 db                	xor    ebx,ebx
c000a599:	85 db                	test   ebx,ebx
c000a59b:	75 11                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a59d:	e8 fc fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5a2:	83 fe 01             	cmp    esi,0x1
c000a5a5:	89 c7                	mov    edi,eax
c000a5a7:	74 21                	je     c000a5ca <Phys::allocateContiguousPages(int)+0x41>
c000a5a9:	bb 01 00 00 00       	mov    ebx,0x1
c000a5ae:	e8 eb fe ff ff       	call   c000a49e <Phys::allocatePage()>
c000a5b3:	89 da                	mov    edx,ebx
c000a5b5:	c1 e2 0c             	shl    edx,0xc
c000a5b8:	01 fa                	add    edx,edi
c000a5ba:	39 c2                	cmp    edx,eax
c000a5bc:	74 20                	je     c000a5de <Phys::allocateContiguousPages(int)+0x55>
c000a5be:	bb 01 00 00 00       	mov    ebx,0x1
c000a5c3:	89 c7                	mov    edi,eax
c000a5c5:	83 fe 01             	cmp    esi,0x1
c000a5c8:	75 e4                	jne    c000a5ae <Phys::allocateContiguousPages(int)+0x25>
c000a5ca:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000a5cf:	48                   	dec    eax
c000a5d0:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000a5d5:	75 01                	jne    c000a5d8 <Phys::allocateContiguousPages(int)+0x4f>
c000a5d7:	fb                   	sti    
c000a5d8:	89 f8                	mov    eax,edi
c000a5da:	5b                   	pop    ebx
c000a5db:	5e                   	pop    esi
c000a5dc:	5f                   	pop    edi
c000a5dd:	c3                   	ret    
c000a5de:	43                   	inc    ebx
c000a5df:	39 f3                	cmp    ebx,esi
c000a5e1:	75 b6                	jne    c000a599 <Phys::allocateContiguousPages(int)+0x10>
c000a5e3:	eb e5                	jmp    c000a5ca <Phys::allocateContiguousPages(int)+0x41>

c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a5e5:	56                   	push   esi
c000a5e6:	53                   	push   ebx
c000a5e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a5eb:	39 1d ec 8b 02 c0    	cmp    DWORD PTR ds:0xc0028bec,ebx
c000a5f1:	73 06                	jae    c000a5f9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a5f3:	89 1d ec 8b 02 c0    	mov    DWORD PTR ds:0xc0028bec,ebx
c000a5f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a5fd:	c1 eb 0c             	shr    ebx,0xc
c000a600:	c1 e8 0c             	shr    eax,0xc
c000a603:	39 d8                	cmp    eax,ebx
c000a605:	73 13                	jae    c000a61a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a607:	6a 00                	push   0x0
c000a609:	8d 70 01             	lea    esi,[eax+0x1]
c000a60c:	50                   	push   eax
c000a60d:	e8 bb fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a612:	5a                   	pop    edx
c000a613:	89 f0                	mov    eax,esi
c000a615:	59                   	pop    ecx
c000a616:	39 f3                	cmp    ebx,esi
c000a618:	75 ed                	jne    c000a607 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a61a:	5b                   	pop    ebx
c000a61b:	5e                   	pop    esi
c000a61c:	c3                   	ret    

c000a61d <Phys::physicalMemorySetup(unsigned int)>:
c000a61d:	55                   	push   ebp
c000a61e:	57                   	push   edi
c000a61f:	56                   	push   esi
c000a620:	53                   	push   ebx
c000a621:	31 db                	xor    ebx,ebx
c000a623:	83 ec 40             	sub    esp,0x40
c000a626:	6a 10                	push   0x10
c000a628:	6a 00                	push   0x0
c000a62a:	68 fc 8b 02 c0       	push   0xc0028bfc
c000a62f:	e8 60 60 ff ff       	call   c0000694 <memset>
c000a634:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a638:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a63d:	05 00 10 00 00       	add    eax,0x1000
c000a642:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a646:	5a                   	pop    edx
c000a647:	59                   	pop    ecx
c000a648:	50                   	push   eax
c000a649:	68 23 4b 02 c0       	push   0xc0024b23
c000a64e:	e8 74 2a 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	83 ec 08             	sub    esp,0x8
c000a659:	6a 01                	push   0x1
c000a65b:	53                   	push   ebx
c000a65c:	43                   	inc    ebx
c000a65d:	e8 6b fd ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a662:	83 c4 10             	add    esp,0x10
c000a665:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a66b:	75 e9                	jne    c000a656 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a66d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a674:	66 85 c0             	test   ax,ax
c000a677:	0f 84 8e 01 00 00    	je     c000a80b <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a67d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a681:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a689:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a68d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a696:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a69e:	eb 15                	jmp    c000a6b5 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a6a0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a6a4:	83 c3 18             	add    ebx,0x18
c000a6a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6ab:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a6af:	0f 84 66 01 00 00    	je     c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a6b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a6bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a6be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6c6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a6c8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a6cb:	01 f0                	add    eax,esi
c000a6cd:	55                   	push   ebp
c000a6ce:	11 fa                	adc    edx,edi
c000a6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a6d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a6d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a6dc:	56                   	push   esi
c000a6dd:	68 e4 4b 02 c0       	push   0xc0024be4
c000a6e2:	e8 e0 29 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	09 f8                	or     eax,edi
c000a6f0:	0f 85 25 01 00 00    	jne    c000a81b <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a6f6:	4d                   	dec    ebp
c000a6f7:	75 a7                	jne    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6f9:	ba 00 00 08 00       	mov    edx,0x80000
c000a6fe:	89 c1                	mov    ecx,eax
c000a700:	39 f2                	cmp    edx,esi
c000a702:	19 f9                	sbb    ecx,edi
c000a704:	0f 82 a7 00 00 00    	jb     c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a70a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a70e:	89 c1                	mov    ecx,eax
c000a710:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a714:	0f 83 97 00 00 00    	jae    c000a7b1 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a71a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a71f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a723:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a727:	39 fa                	cmp    edx,edi
c000a729:	19 e8                	sbb    eax,ebp
c000a72b:	0f 82 9a 01 00 00    	jb     c000a8cb <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a731:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a735:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a739:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a73f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a744:	83 d5 ff             	adc    ebp,0xffffffff
c000a747:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a74b:	31 c0                	xor    eax,eax
c000a74d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a751:	39 fa                	cmp    edx,edi
c000a753:	89 c1                	mov    ecx,eax
c000a755:	19 e9                	sbb    ecx,ebp
c000a757:	0f 83 43 ff ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a75d:	be 00 00 08 00       	mov    esi,0x80000
c000a762:	51                   	push   ecx
c000a763:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a767:	57                   	push   edi
c000a768:	56                   	push   esi
c000a769:	68 08 4c 02 c0       	push   0xc0024c08
c000a76e:	e8 54 29 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a773:	5d                   	pop    ebp
c000a774:	58                   	pop    eax
c000a775:	57                   	push   edi
c000a776:	56                   	push   esi
c000a777:	e8 69 fe ff ff       	call   c000a5e5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a77c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a78b:	03 05 f8 8b 02 c0    	add    eax,DWORD PTR ds:0xc0028bf8
c000a791:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a798:	a3 f8 8b 02 c0       	mov    ds:0xc0028bf8,eax
c000a79d:	52                   	push   edx
c000a79e:	50                   	push   eax
c000a79f:	68 49 4b 02 c0       	push   0xc0024b49
c000a7a4:	e8 1e 29 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	e9 ef fe ff ff       	jmp    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7b1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a7b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a7bd:	39 ea                	cmp    edx,ebp
c000a7bf:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a7c3:	0f 82 d7 fe ff ff    	jb     c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7c9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a7ce:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a7d2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a7d6:	0f 83 c4 fe ff ff    	jae    c000a6a0 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a7dc:	39 ee                	cmp    esi,ebp
c000a7de:	89 f8                	mov    eax,edi
c000a7e0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a7e4:	0f 83 78 ff ff ff    	jae    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a7ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a7ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a7f2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a7f6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a7fa:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a7fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a802:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a806:	e9 57 ff ff ff       	jmp    c000a762 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a80b:	83 ec 0c             	sub    esp,0xc
c000a80e:	68 3b 4b 02 c0       	push   0xc0024b3b
c000a813:	e8 91 a9 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000a818:	83 c4 10             	add    esp,0x10
c000a81b:	83 ec 08             	sub    esp,0x8
c000a81e:	bb 60 00 00 00       	mov    ebx,0x60
c000a823:	6a 00                	push   0x0
c000a825:	6a 06                	push   0x6
c000a827:	e8 a1 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a82c:	58                   	pop    eax
c000a82d:	5a                   	pop    edx
c000a82e:	6a 00                	push   0x0
c000a830:	6a 07                	push   0x7
c000a832:	e8 96 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a837:	83 05 f8 8b 02 c0 02 	add    DWORD PTR ds:0xc0028bf8,0x2
c000a83e:	83 c4 10             	add    esp,0x10
c000a841:	83 ec 08             	sub    esp,0x8
c000a844:	6a 00                	push   0x0
c000a846:	53                   	push   ebx
c000a847:	43                   	inc    ebx
c000a848:	e8 80 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a84d:	83 c4 10             	add    esp,0x10
c000a850:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a856:	75 e9                	jne    c000a841 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a858:	a1 f8 8b 02 c0       	mov    eax,ds:0xc0028bf8
c000a85d:	bb 40 01 00 00       	mov    ebx,0x140
c000a862:	83 c0 20             	add    eax,0x20
c000a865:	a3 f8 8b 02 c0       	mov    ds:0xc0028bf8,eax
c000a86a:	eb 22                	jmp    c000a88e <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a86c:	83 ec 08             	sub    esp,0x8
c000a86f:	6a 00                	push   0x0
c000a871:	53                   	push   ebx
c000a872:	43                   	inc    ebx
c000a873:	e8 55 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a878:	a1 f8 8b 02 c0       	mov    eax,ds:0xc0028bf8
c000a87d:	83 c4 10             	add    esp,0x10
c000a880:	40                   	inc    eax
c000a881:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a887:	a3 f8 8b 02 c0       	mov    ds:0xc0028bf8,eax
c000a88c:	74 07                	je     c000a895 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a88e:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a893:	7e d7                	jle    c000a86c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a895:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a89a:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a89f:	7f 22                	jg     c000a8c3 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a8a1:	83 ec 08             	sub    esp,0x8
c000a8a4:	6a 00                	push   0x0
c000a8a6:	53                   	push   ebx
c000a8a7:	43                   	inc    ebx
c000a8a8:	e8 20 fb ff ff       	call   c000a3cd <Phys::setPageState(unsigned long, bool)>
c000a8ad:	a1 f8 8b 02 c0       	mov    eax,ds:0xc0028bf8
c000a8b2:	83 c4 10             	add    esp,0x10
c000a8b5:	40                   	inc    eax
c000a8b6:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a8bc:	a3 f8 8b 02 c0       	mov    ds:0xc0028bf8,eax
c000a8c1:	75 d7                	jne    c000a89a <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a8c3:	83 c4 3c             	add    esp,0x3c
c000a8c6:	5b                   	pop    ebx
c000a8c7:	5e                   	pop    esi
c000a8c8:	5f                   	pop    edi
c000a8c9:	5d                   	pop    ebp
c000a8ca:	c3                   	ret    
c000a8cb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a8d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a8db:	e9 51 fe ff ff       	jmp    c000a731 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a8e0 <Pipe::isAtty()>:
c000a8e0:	31 c0                	xor    eax,eax
c000a8e2:	c3                   	ret    
c000a8e3:	90                   	nop

c000a8e4 <Pipe::~Pipe()>:
c000a8e4:	83 ec 0c             	sub    esp,0xc
c000a8e7:	ba 74 4c 02 c0       	mov    edx,0xc0024c74
c000a8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f0:	89 10                	mov    DWORD PTR [eax],edx
c000a8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f6:	83 ec 0c             	sub    esp,0xc
c000a8f9:	50                   	push   eax
c000a8fa:	e8 41 12 00 00       	call   c000bb40 <UnixFile::~UnixFile()>
c000a8ff:	83 c4 10             	add    esp,0x10
c000a902:	90                   	nop
c000a903:	83 c4 0c             	add    esp,0xc
c000a906:	c3                   	ret    
c000a907:	90                   	nop

c000a908 <Pipe::~Pipe()>:
c000a908:	83 ec 0c             	sub    esp,0xc
c000a90b:	83 ec 0c             	sub    esp,0xc
c000a90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a912:	e8 cd ff ff ff       	call   c000a8e4 <Pipe::~Pipe()>
c000a917:	83 c4 10             	add    esp,0x10
c000a91a:	83 ec 08             	sub    esp,0x8
c000a91d:	6a 20                	push   0x20
c000a91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a923:	e8 be 26 00 00       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000a928:	83 c4 10             	add    esp,0x10
c000a92b:	83 c4 0c             	add    esp,0xc
c000a92e:	c3                   	ret    
c000a92f:	90                   	nop

c000a930 <Pipe::read(unsigned long long, void*, int*)>:
c000a930:	55                   	push   ebp
c000a931:	57                   	push   edi
c000a932:	56                   	push   esi
c000a933:	53                   	push   ebx
c000a934:	83 ec 1c             	sub    esp,0x1c
c000a937:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a93b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a93f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a943:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a946:	89 c8                	mov    eax,ecx
c000a948:	99                   	cdq    
c000a949:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a94d:	74 24                	je     c000a973 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a94f:	39 f9                	cmp    ecx,edi
c000a951:	89 d1                	mov    ecx,edx
c000a953:	19 f1                	sbb    ecx,esi
c000a955:	73 1c                	jae    c000a973 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a957:	fa                   	cli    
c000a958:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c000a95e:	e8 ad e5 00 00       	call   c0018f10 <schedule()>
c000a963:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000a968:	48                   	dec    eax
c000a969:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000a96e:	75 d3                	jne    c000a943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a970:	fb                   	sti    
c000a971:	eb d0                	jmp    c000a943 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a973:	39 f8                	cmp    eax,edi
c000a975:	89 d1                	mov    ecx,edx
c000a977:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a97a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a97e:	19 f1                	sbb    ecx,esi
c000a980:	73 07                	jae    c000a989 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a982:	89 04 24             	mov    DWORD PTR [esp],eax
c000a985:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a989:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a98c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a98f:	29 f7                	sub    edi,esi
c000a991:	89 f8                	mov    eax,edi
c000a993:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a997:	99                   	cdq    
c000a998:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a99b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99f:	19 d0                	sbb    eax,edx
c000a9a1:	73 07                	jae    c000a9aa <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a9a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a9a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9aa:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a9ad:	89 ea                	mov    edx,ebp
c000a9af:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a9b3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a9b8:	74 0d                	je     c000a9c7 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a9ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9bd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a9c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a9c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9c7:	85 d2                	test   edx,edx
c000a9c9:	74 11                	je     c000a9dc <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9cf:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a9d2:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a9d6:	89 d1                	mov    ecx,edx
c000a9d8:	89 c7                	mov    edi,eax
c000a9da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a9dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a9df:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a9e2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a9e5:	99                   	cdq    
c000a9e6:	89 f7                	mov    edi,esi
c000a9e8:	03 04 24             	add    eax,DWORD PTR [esp]
c000a9eb:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a9ef:	c1 ff 1f             	sar    edi,0x1f
c000a9f2:	57                   	push   edi
c000a9f3:	56                   	push   esi
c000a9f4:	52                   	push   edx
c000a9f5:	50                   	push   eax
c000a9f6:	e8 a5 86 01 00       	call   c00230a0 <__umoddi3>
c000a9fb:	83 c4 10             	add    esp,0x10
c000a9fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa01:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa06:	75 10                	jne    c000aa18 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000aa08:	83 ec 0c             	sub    esp,0xc
c000aa0b:	68 31 4c 02 c0       	push   0xc0024c31
c000aa10:	e8 94 a7 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa1c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa1f:	89 10                	mov    DWORD PTR [eax],edx
c000aa21:	83 c4 1c             	add    esp,0x1c
c000aa24:	31 c0                	xor    eax,eax
c000aa26:	5b                   	pop    ebx
c000aa27:	5e                   	pop    esi
c000aa28:	5f                   	pop    edi
c000aa29:	5d                   	pop    ebp
c000aa2a:	c3                   	ret    
c000aa2b:	90                   	nop

c000aa2c <Pipe::write(unsigned long long, void*, int*)>:
c000aa2c:	55                   	push   ebp
c000aa2d:	57                   	push   edi
c000aa2e:	56                   	push   esi
c000aa2f:	53                   	push   ebx
c000aa30:	83 ec 1c             	sub    esp,0x1c
c000aa33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aa37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa3b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000aa3e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000aa42:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa49:	89 d8                	mov    eax,ebx
c000aa4b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000aa4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000aa52:	89 d6                	mov    esi,edx
c000aa54:	89 d7                	mov    edi,edx
c000aa56:	c1 ff 1f             	sar    edi,0x1f
c000aa59:	03 34 24             	add    esi,DWORD PTR [esp]
c000aa5c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000aa60:	c1 f8 1f             	sar    eax,0x1f
c000aa63:	39 f3                	cmp    ebx,esi
c000aa65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa6d:	19 f8                	sbb    eax,edi
c000aa6f:	b8 01 00 00 00       	mov    eax,0x1
c000aa74:	72 6e                	jb     c000aae4 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000aa76:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000aa79:	01 d0                	add    eax,edx
c000aa7b:	99                   	cdq    
c000aa7c:	f7 fb                	idiv   ebx
c000aa7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa82:	29 d3                	sub    ebx,edx
c000aa84:	89 d7                	mov    edi,edx
c000aa86:	89 de                	mov    esi,ebx
c000aa88:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa8b:	c1 fb 1f             	sar    ebx,0x1f
c000aa8e:	39 f2                	cmp    edx,esi
c000aa90:	19 d8                	sbb    eax,ebx
c000aa92:	b8 00 00 00 00       	mov    eax,0x0
c000aa97:	72 04                	jb     c000aa9d <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa99:	89 d0                	mov    eax,edx
c000aa9b:	29 f0                	sub    eax,esi
c000aa9d:	89 d3                	mov    ebx,edx
c000aa9f:	29 c3                	sub    ebx,eax
c000aaa1:	74 0b                	je     c000aaae <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aaa3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aaa6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aaaa:	89 d9                	mov    ecx,ebx
c000aaac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aaae:	85 c0                	test   eax,eax
c000aab0:	74 0d                	je     c000aabf <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aab2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aab6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aab9:	89 de                	mov    esi,ebx
c000aabb:	89 c1                	mov    ecx,eax
c000aabd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aabf:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aac2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aac7:	75 10                	jne    c000aad9 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aac9:	83 ec 0c             	sub    esp,0xc
c000aacc:	68 4d 4c 02 c0       	push   0xc0024c4d
c000aad1:	e8 d3 a6 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000aad6:	83 c4 10             	add    esp,0x10
c000aad9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aadd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aae0:	89 08                	mov    DWORD PTR [eax],ecx
c000aae2:	31 c0                	xor    eax,eax
c000aae4:	83 c4 1c             	add    esp,0x1c
c000aae7:	5b                   	pop    ebx
c000aae8:	5e                   	pop    esi
c000aae9:	5f                   	pop    edi
c000aaea:	5d                   	pop    ebp
c000aaeb:	c3                   	ret    

c000aaec <Pipe::Pipe(int)>:
c000aaec:	83 ec 0c             	sub    esp,0xc
c000aaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf3:	83 ec 08             	sub    esp,0x8
c000aaf6:	6a 00                	push   0x0
c000aaf8:	50                   	push   eax
c000aaf9:	e8 60 0e 00 00       	call   c000b95e <UnixFile::UnixFile(int)>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	ba 74 4c 02 c0       	mov    edx,0xc0024c74
c000ab06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab0a:	89 10                	mov    DWORD PTR [eax],edx
c000ab0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ab22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab26:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ab2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab31:	83 ec 0c             	sub    esp,0xc
c000ab34:	50                   	push   eax
c000ab35:	e8 ad f2 ff ff       	call   c0009de7 <malloc>
c000ab3a:	83 c4 10             	add    esp,0x10
c000ab3d:	89 c2                	mov    edx,eax
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ab4e:	90                   	nop
c000ab4f:	83 c4 0c             	add    esp,0xc
c000ab52:	c3                   	ret    
c000ab53:	90                   	nop

c000ab54 <VgaText::isAtty()>:
c000ab54:	b0 01                	mov    al,0x1
c000ab56:	c3                   	ret    
c000ab57:	90                   	nop

c000ab58 <VgaText::~VgaText()>:
c000ab58:	83 ec 0c             	sub    esp,0xc
c000ab5b:	ba fc 4c 02 c0       	mov    edx,0xc0024cfc
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	89 10                	mov    DWORD PTR [eax],edx
c000ab66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	50                   	push   eax
c000ab6e:	e8 cd 0f 00 00       	call   c000bb40 <UnixFile::~UnixFile()>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	90                   	nop
c000ab77:	83 c4 0c             	add    esp,0xc
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <VgaText::~VgaText()>:
c000ab7c:	83 ec 0c             	sub    esp,0xc
c000ab7f:	83 ec 0c             	sub    esp,0xc
c000ab82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab86:	e8 cd ff ff ff       	call   c000ab58 <VgaText::~VgaText()>
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	83 ec 08             	sub    esp,0x8
c000ab91:	68 b4 01 00 00       	push   0x1b4
c000ab96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab9a:	e8 47 24 00 00       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	83 c4 0c             	add    esp,0xc
c000aba5:	c3                   	ret    

c000aba6 <VgaText::read(unsigned long long, void*, int*)>:
c000aba6:	83 ec 10             	sub    esp,0x10
c000aba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000abb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb5:	e8 c3 59 00 00       	call   c001057d <readKeyboard(VgaText*, char*, unsigned long)>
c000abba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abbe:	89 02                	mov    DWORD PTR [edx],eax
c000abc0:	31 c0                	xor    eax,eax
c000abc2:	83 c4 1c             	add    esp,0x1c
c000abc5:	c3                   	ret    

c000abc6 <setTerminalScrollLock(bool)>:
c000abc6:	c3                   	ret    

c000abc7 <addToTerminalCycle(VgaText*)>:
c000abc7:	8b 15 40 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c40
c000abcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abd1:	85 d2                	test   edx,edx
c000abd3:	75 09                	jne    c000abde <addToTerminalCycle(VgaText*)+0x17>
c000abd5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000abd8:	a3 40 8c 02 c0       	mov    ds:0xc0028c40,eax
c000abdd:	c3                   	ret    
c000abde:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000abe1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000abe4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000abe7:	c3                   	ret    

c000abe8 <installVgaTextImplementation()>:
c000abe8:	83 ec 10             	sub    esp,0x10
c000abeb:	6a 20                	push   0x20
c000abed:	6a 00                	push   0x0
c000abef:	68 20 8c 02 c0       	push   0xc0028c20
c000abf4:	e8 9b 5a ff ff       	call   c0000694 <memset>
c000abf9:	83 c4 1c             	add    esp,0x1c
c000abfc:	c3                   	ret    

c000abfd <scrollTerminalScrollLock(int)>:
c000abfd:	c3                   	ret    

c000abfe <VgaText::updateTitle()>:
c000abfe:	53                   	push   ebx
c000abff:	31 c0                	xor    eax,eax
c000ac01:	83 ec 58             	sub    esp,0x58
c000ac04:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ac08:	89 e1                	mov    ecx,esp
c000ac0a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ac0e:	40                   	inc    eax
c000ac0f:	83 f8 50             	cmp    eax,0x50
c000ac12:	75 f6                	jne    c000ac0a <VgaText::updateTitle()+0xc>
c000ac14:	31 c0                	xor    eax,eax
c000ac16:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ac1d:	84 db                	test   bl,bl
c000ac1f:	74 06                	je     c000ac27 <VgaText::updateTitle()+0x29>
c000ac21:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ac24:	40                   	inc    eax
c000ac25:	eb ef                	jmp    c000ac16 <VgaText::updateTitle()+0x18>
c000ac27:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000ac2a:	85 c0                	test   eax,eax
c000ac2c:	74 09                	je     c000ac37 <VgaText::updateTitle()+0x39>
c000ac2e:	53                   	push   ebx
c000ac2f:	53                   	push   ebx
c000ac30:	51                   	push   ecx
c000ac31:	52                   	push   edx
c000ac32:	ff d0                	call   eax
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	83 c4 58             	add    esp,0x58
c000ac3a:	5b                   	pop    ebx
c000ac3b:	c3                   	ret    

c000ac3c <VgaText::load()>:
c000ac3c:	53                   	push   ebx
c000ac3d:	31 c0                	xor    eax,eax
c000ac3f:	83 ec 58             	sub    esp,0x58
c000ac42:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ac46:	89 e2                	mov    edx,esp
c000ac48:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ac4c:	40                   	inc    eax
c000ac4d:	83 f8 50             	cmp    eax,0x50
c000ac50:	75 f6                	jne    c000ac48 <VgaText::load()+0xc>
c000ac52:	31 c0                	xor    eax,eax
c000ac54:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ac5b:	84 c9                	test   cl,cl
c000ac5d:	74 06                	je     c000ac65 <VgaText::load()+0x29>
c000ac5f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ac62:	40                   	inc    eax
c000ac63:	eb ef                	jmp    c000ac54 <VgaText::load()+0x18>
c000ac65:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ac68:	85 c0                	test   eax,eax
c000ac6a:	74 09                	je     c000ac75 <VgaText::load()+0x39>
c000ac6c:	51                   	push   ecx
c000ac6d:	51                   	push   ecx
c000ac6e:	52                   	push   edx
c000ac6f:	53                   	push   ebx
c000ac70:	ff d0                	call   eax
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ac78:	85 c0                	test   eax,eax
c000ac7a:	74 09                	je     c000ac85 <VgaText::load()+0x49>
c000ac7c:	83 ec 0c             	sub    esp,0xc
c000ac7f:	53                   	push   ebx
c000ac80:	ff d0                	call   eax
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	83 c4 58             	add    esp,0x58
c000ac88:	5b                   	pop    ebx
c000ac89:	c3                   	ret    

c000ac8a <VgaText::updateCursor()>:
c000ac8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac8e:	39 05 44 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c44,eax
c000ac94:	75 09                	jne    c000ac9f <VgaText::updateCursor()+0x15>
c000ac96:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac99:	85 c0                	test   eax,eax
c000ac9b:	74 02                	je     c000ac9f <VgaText::updateCursor()+0x15>
c000ac9d:	ff e0                	jmp    eax
c000ac9f:	c3                   	ret    

c000aca0 <VgaText::doANSI_SGR(int)>:
c000aca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca8:	85 d2                	test   edx,edx
c000acaa:	75 0b                	jne    c000acb7 <VgaText::doANSI_SGR(int)+0x17>
c000acac:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000acaf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acb2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000acb5:	eb 59                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acb7:	83 fa 07             	cmp    edx,0x7
c000acba:	75 0b                	jne    c000acc7 <VgaText::doANSI_SGR(int)+0x27>
c000acbc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000acbf:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000acc2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000acc5:	eb 49                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acc7:	83 fa 1b             	cmp    edx,0x1b
c000acca:	74 e0                	je     c000acac <VgaText::doANSI_SGR(int)+0xc>
c000accc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000accf:	83 f9 07             	cmp    ecx,0x7
c000acd2:	77 09                	ja     c000acdd <VgaText::doANSI_SGR(int)+0x3d>
c000acd4:	8b 14 8d c0 7f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8040]
c000acdb:	eb 20                	jmp    c000acfd <VgaText::doANSI_SGR(int)+0x5d>
c000acdd:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ace0:	83 f9 07             	cmp    ecx,0x7
c000ace3:	77 09                	ja     c000acee <VgaText::doANSI_SGR(int)+0x4e>
c000ace5:	8b 14 8d c0 7f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8040]
c000acec:	eb 22                	jmp    c000ad10 <VgaText::doANSI_SGR(int)+0x70>
c000acee:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000acf1:	83 f9 07             	cmp    ecx,0x7
c000acf4:	77 0b                	ja     c000ad01 <VgaText::doANSI_SGR(int)+0x61>
c000acf6:	8b 14 95 78 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8188]
c000acfd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad00:	c3                   	ret    
c000ad01:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ad04:	83 f9 07             	cmp    ecx,0x7
c000ad07:	77 0a                	ja     c000ad13 <VgaText::doANSI_SGR(int)+0x73>
c000ad09:	8b 14 95 50 7e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd81b0]
c000ad10:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad13:	c3                   	ret    

c000ad14 <VgaText::setDefaultBgColour(VgaColour)>:
c000ad14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad1c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ad1f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ad22:	c3                   	ret    
c000ad23:	90                   	nop

c000ad24 <VgaText::setDefaultFgColour(VgaColour)>:
c000ad24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad2c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000ad2f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ad32:	c3                   	ret    
c000ad33:	90                   	nop

c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ad34:	53                   	push   ebx
c000ad35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ad39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ad41:	51                   	push   ecx
c000ad42:	e8 cd ff ff ff       	call   c000ad14 <VgaText::setDefaultBgColour(VgaColour)>
c000ad47:	58                   	pop    eax
c000ad48:	5a                   	pop    edx
c000ad49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ad4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ad51:	5b                   	pop    ebx
c000ad52:	eb d0                	jmp    c000ad24 <VgaText::setDefaultFgColour(VgaColour)>

c000ad54 <VgaText::setTitleTextColour(VgaColour)>:
c000ad54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad5c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ad5f:	e9 9a fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>

c000ad64 <VgaText::setTitleColour(VgaColour)>:
c000ad64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad6c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ad6f:	e9 8a fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>

c000ad74 <VgaText::setTitle(char*)>:
c000ad74:	53                   	push   ebx
c000ad75:	83 ec 10             	sub    esp,0x10
c000ad78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad80:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ad86:	50                   	push   eax
c000ad87:	e8 c4 59 ff ff       	call   c0000750 <strcpy>
c000ad8c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad90:	83 c4 18             	add    esp,0x18
c000ad93:	5b                   	pop    ebx
c000ad94:	e9 65 fe ff ff       	jmp    c000abfe <VgaText::updateTitle()>
c000ad99:	90                   	nop

c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad9a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad9e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ada3:	83 e0 0f             	and    eax,0xf
c000ada6:	c1 e2 04             	shl    edx,0x4
c000ada9:	09 d0                	or     eax,edx
c000adab:	c3                   	ret    

c000adac <VgaText::scrollScreen()>:
c000adac:	55                   	push   ebp
c000adad:	b9 01 00 00 00       	mov    ecx,0x1
c000adb2:	57                   	push   edi
c000adb3:	56                   	push   esi
c000adb4:	53                   	push   ebx
c000adb5:	83 ec 0c             	sub    esp,0xc
c000adb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000adbc:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000adc2:	31 ff                	xor    edi,edi
c000adc4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000adc7:	83 f9 17             	cmp    ecx,0x17
c000adca:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000adcd:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000add4:	75 27                	jne    c000adfd <VgaText::scrollScreen()+0x51>
c000add6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000add9:	01 f5                	add    ebp,esi
c000addb:	f7 c7 01 00 00 00    	test   edi,0x1
c000ade1:	74 16                	je     c000adf9 <VgaText::scrollScreen()+0x4d>
c000ade3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ade7:	50                   	push   eax
c000ade8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000adec:	50                   	push   eax
c000aded:	e8 a8 ff ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000adf2:	5a                   	pop    edx
c000adf3:	5a                   	pop    edx
c000adf4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000adf7:	eb 04                	jmp    c000adfd <VgaText::scrollScreen()+0x51>
c000adf9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000adfd:	47                   	inc    edi
c000adfe:	46                   	inc    esi
c000adff:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ae05:	75 bd                	jne    c000adc4 <VgaText::scrollScreen()+0x18>
c000ae07:	41                   	inc    ecx
c000ae08:	83 f9 18             	cmp    ecx,0x18
c000ae0b:	75 af                	jne    c000adbc <VgaText::scrollScreen()+0x10>
c000ae0d:	39 1d 44 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c44,ebx
c000ae13:	75 1b                	jne    c000ae30 <VgaText::scrollScreen()+0x84>
c000ae15:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ae19:	74 05                	je     c000ae20 <VgaText::scrollScreen()+0x74>
c000ae1b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ae1e:	eb 10                	jmp    c000ae30 <VgaText::scrollScreen()+0x84>
c000ae20:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ae23:	85 c0                	test   eax,eax
c000ae25:	74 09                	je     c000ae30 <VgaText::scrollScreen()+0x84>
c000ae27:	83 ec 0c             	sub    esp,0xc
c000ae2a:	53                   	push   ebx
c000ae2b:	ff d0                	call   eax
c000ae2d:	83 c4 10             	add    esp,0x10
c000ae30:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ae34:	83 c4 0c             	add    esp,0xc
c000ae37:	5b                   	pop    ebx
c000ae38:	5e                   	pop    esi
c000ae39:	5f                   	pop    edi
c000ae3a:	5d                   	pop    ebp
c000ae3b:	e9 4a fe ff ff       	jmp    c000ac8a <VgaText::updateCursor()>

c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ae40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ae45:	c1 e0 08             	shl    eax,0x8
c000ae48:	89 c2                	mov    edx,eax
c000ae4a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ae4f:	09 d0                	or     eax,edx
c000ae51:	c3                   	ret    

c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ae52:	56                   	push   esi
c000ae53:	53                   	push   ebx
c000ae54:	51                   	push   ecx
c000ae55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae59:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae5e:	50                   	push   eax
c000ae5f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ae64:	50                   	push   eax
c000ae65:	e8 30 ff ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000ae6a:	5b                   	pop    ebx
c000ae6b:	0f b6 c0             	movzx  eax,al
c000ae6e:	5e                   	pop    esi
c000ae6f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ae74:	50                   	push   eax
c000ae75:	53                   	push   ebx
c000ae76:	e8 c5 ff ff ff       	call   c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>
c000ae7b:	5a                   	pop    edx
c000ae7c:	5e                   	pop    esi
c000ae7d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ae80:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ae86:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae8a:	0f b7 d2             	movzx  edx,dx
c000ae8d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae91:	39 0d 44 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c44,ecx
c000ae97:	75 10                	jne    c000aea9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae99:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae9c:	85 c0                	test   eax,eax
c000ae9e:	74 09                	je     c000aea9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aea0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aea4:	5a                   	pop    edx
c000aea5:	5b                   	pop    ebx
c000aea6:	5e                   	pop    esi
c000aea7:	ff e0                	jmp    eax
c000aea9:	58                   	pop    eax
c000aeaa:	5b                   	pop    ebx
c000aeab:	5e                   	pop    esi
c000aeac:	c3                   	ret    
c000aead:	90                   	nop

c000aeae <VgaText::getCursorX()>:
c000aeae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeb2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aeb5:	c3                   	ret    

c000aeb6 <VgaText::getCursorY()>:
c000aeb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aeba:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aebd:	c3                   	ret    

c000aebe <VgaText::setCursor(int, int)>:
c000aebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aec6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aec9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aecd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aed0:	e9 b5 fd ff ff       	jmp    c000ac8a <VgaText::updateCursor()>

c000aed5 <setActiveTerminal(VgaText*)>:
c000aed5:	53                   	push   ebx
c000aed6:	83 ec 08             	sub    esp,0x8
c000aed9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aedd:	85 db                	test   ebx,ebx
c000aedf:	75 11                	jne    c000aef2 <setActiveTerminal(VgaText*)+0x1d>
c000aee1:	c7 44 24 10 88 4c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024c88
c000aee9:	83 c4 08             	add    esp,0x8
c000aeec:	5b                   	pop    ebx
c000aeed:	e9 b7 a2 00 00       	jmp    c00151a9 <Krnl::panic(char const*)>
c000aef2:	a1 44 8c 02 c0       	mov    eax,ds:0xc0028c44
c000aef7:	85 c0                	test   eax,eax
c000aef9:	74 0c                	je     c000af07 <setActiveTerminal(VgaText*)+0x32>
c000aefb:	83 ec 0c             	sub    esp,0xc
c000aefe:	50                   	push   eax
c000aeff:	e8 86 fd ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000af04:	83 c4 10             	add    esp,0x10
c000af07:	89 1d 44 8c 02 c0    	mov    DWORD PTR ds:0xc0028c44,ebx
c000af0d:	51                   	push   ecx
c000af0e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af11:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af14:	53                   	push   ebx
c000af15:	e8 a4 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000af21:	75 07                	jne    c000af2a <setActiveTerminal(VgaText*)+0x55>
c000af23:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000af2a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af2e:	83 c4 08             	add    esp,0x8
c000af31:	5b                   	pop    ebx
c000af32:	e9 05 fd ff ff       	jmp    c000ac3c <VgaText::load()>

c000af37 <doTerminalCycle()>:
c000af37:	83 ec 18             	sub    esp,0x18
c000af3a:	a1 40 8c 02 c0       	mov    eax,ds:0xc0028c40
c000af3f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000af42:	50                   	push   eax
c000af43:	a3 40 8c 02 c0       	mov    ds:0xc0028c40,eax
c000af48:	e8 88 ff ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c000af4d:	83 c4 1c             	add    esp,0x1c
c000af50:	c3                   	ret    
c000af51:	90                   	nop

c000af52 <VgaText::setCursorX(int)>:
c000af52:	83 ec 10             	sub    esp,0x10
c000af55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af59:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000af5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af60:	50                   	push   eax
c000af61:	e8 58 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af66:	83 c4 1c             	add    esp,0x1c
c000af69:	c3                   	ret    

c000af6a <VgaText::setCursorY(int)>:
c000af6a:	83 ec 10             	sub    esp,0x10
c000af6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af75:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000af78:	50                   	push   eax
c000af79:	e8 40 ff ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000af7e:	83 c4 1c             	add    esp,0x1c
c000af81:	c3                   	ret    

c000af82 <VgaText::incrementCursor(bool)>:
c000af82:	56                   	push   esi
c000af83:	53                   	push   ebx
c000af84:	51                   	push   ecx
c000af85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af90:	40                   	inc    eax
c000af91:	83 f8 50             	cmp    eax,0x50
c000af94:	74 05                	je     c000af9b <VgaText::incrementCursor(bool)+0x19>
c000af96:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af99:	eb 24                	jmp    c000afbf <VgaText::incrementCursor(bool)+0x3d>
c000af9b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afa5:	8d 50 01             	lea    edx,[eax+0x1]
c000afa8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afab:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afae:	75 0f                	jne    c000afbf <VgaText::incrementCursor(bool)+0x3d>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afb6:	53                   	push   ebx
c000afb7:	e8 f0 fd ff ff       	call   c000adac <VgaText::scrollScreen()>
c000afbc:	83 c4 10             	add    esp,0x10
c000afbf:	89 f0                	mov    eax,esi
c000afc1:	84 c0                	test   al,al
c000afc3:	74 0c                	je     c000afd1 <VgaText::incrementCursor(bool)+0x4f>
c000afc5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000afc9:	5a                   	pop    edx
c000afca:	5b                   	pop    ebx
c000afcb:	5e                   	pop    esi
c000afcc:	e9 b9 fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000afd1:	58                   	pop    eax
c000afd2:	5b                   	pop    ebx
c000afd3:	5e                   	pop    esi
c000afd4:	c3                   	ret    
c000afd5:	90                   	nop

c000afd6 <VgaText::decrementCursor(bool)>:
c000afd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000afda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000afde:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000afe1:	85 c0                	test   eax,eax
c000afe3:	74 04                	je     c000afe9 <VgaText::decrementCursor(bool)+0x13>
c000afe5:	48                   	dec    eax
c000afe6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000afe9:	84 c9                	test   cl,cl
c000afeb:	74 09                	je     c000aff6 <VgaText::decrementCursor(bool)+0x20>
c000afed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aff1:	e9 94 fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000aff6:	c3                   	ret    
c000aff7:	90                   	nop

c000aff8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000aff8:	53                   	push   ebx
c000aff9:	83 ec 08             	sub    esp,0x8
c000affc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b004:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b008:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b00c:	3c 07                	cmp    al,0x7
c000b00e:	75 2a                	jne    c000b03a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000b010:	a1 f8 8c 02 c0       	mov    eax,ds:0xc0028cf8
c000b015:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b01d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000b025:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000b02d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b031:	83 c4 08             	add    esp,0x8
c000b034:	5b                   	pop    ebx
c000b035:	e9 d4 2f 00 00       	jmp    c000e00e <Buzzer::beep(int, int, bool)>
c000b03a:	3c 0d                	cmp    al,0xd
c000b03c:	75 09                	jne    c000b047 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000b03e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b045:	eb 2c                	jmp    c000b073 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000b047:	3c 0a                	cmp    al,0xa
c000b049:	75 31                	jne    c000b07c <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000b04b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b04e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b055:	8d 50 01             	lea    edx,[eax+0x1]
c000b058:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000b05b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000b05e:	75 0f                	jne    c000b06f <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b066:	53                   	push   ebx
c000b067:	e8 40 fd ff ff       	call   c000adac <VgaText::scrollScreen()>
c000b06c:	83 c4 10             	add    esp,0x10
c000b06f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b073:	83 c4 08             	add    esp,0x8
c000b076:	5b                   	pop    ebx
c000b077:	e9 0e fc ff ff       	jmp    c000ac8a <VgaText::updateCursor()>
c000b07c:	3c 08                	cmp    al,0x8
c000b07e:	75 25                	jne    c000b0a5 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000b080:	50                   	push   eax
c000b081:	50                   	push   eax
c000b082:	6a 01                	push   0x1
c000b084:	53                   	push   ebx
c000b085:	e8 4c ff ff ff       	call   c000afd6 <VgaText::decrementCursor(bool)>
c000b08a:	5a                   	pop    edx
c000b08b:	59                   	pop    ecx
c000b08c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b08f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b092:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b095:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b098:	6a 20                	push   0x20
c000b09a:	53                   	push   ebx
c000b09b:	e8 b2 fd ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0a0:	83 c4 28             	add    esp,0x28
c000b0a3:	5b                   	pop    ebx
c000b0a4:	c3                   	ret    
c000b0a5:	83 ec 08             	sub    esp,0x8
c000b0a8:	0f be c0             	movsx  eax,al
c000b0ab:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0ae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0b1:	51                   	push   ecx
c000b0b2:	52                   	push   edx
c000b0b3:	50                   	push   eax
c000b0b4:	53                   	push   ebx
c000b0b5:	e8 98 fd ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b0ba:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b0be:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b0c6:	83 c4 28             	add    esp,0x28
c000b0c9:	5b                   	pop    ebx
c000b0ca:	e9 b3 fe ff ff       	jmp    c000af82 <VgaText::incrementCursor(bool)>
c000b0cf:	90                   	nop

c000b0d0 <VgaText::doUpdate()>:
c000b0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0d4:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b0d7:	85 c0                	test   eax,eax
c000b0d9:	74 02                	je     c000b0dd <VgaText::doUpdate()+0xd>
c000b0db:	ff e0                	jmp    eax
c000b0dd:	c3                   	ret    

c000b0de <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b0de:	55                   	push   ebp
c000b0df:	31 ed                	xor    ebp,ebp
c000b0e1:	57                   	push   edi
c000b0e2:	56                   	push   esi
c000b0e3:	53                   	push   ebx
c000b0e4:	83 ec 1c             	sub    esp,0x1c
c000b0e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0eb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b0f0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b0f7:	50                   	push   eax
c000b0f8:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b0fd:	50                   	push   eax
c000b0fe:	e8 97 fc ff ff       	call   c000ad9a <VgaText::combineColours(unsigned char, unsigned char)>
c000b103:	59                   	pop    ecx
c000b104:	0f b6 c0             	movzx  eax,al
c000b107:	5e                   	pop    esi
c000b108:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b10d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b111:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b118:	0f b7 f6             	movzx  esi,si
c000b11b:	01 f6                	add    esi,esi
c000b11d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b120:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b123:	84 c0                	test   al,al
c000b125:	0f 84 fd 00 00 00    	je     c000b228 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b12b:	3c 0d                	cmp    al,0xd
c000b12d:	75 0c                	jne    c000b13b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b12f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b136:	e9 e7 00 00 00       	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b13b:	3c 0a                	cmp    al,0xa
c000b13d:	75 47                	jne    c000b186 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b13f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b142:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b149:	8d 48 01             	lea    ecx,[eax+0x1]
c000b14c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b14f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b152:	75 0f                	jne    c000b163 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b15a:	53                   	push   ebx
c000b15b:	e8 4c fc ff ff       	call   c000adac <VgaText::scrollScreen()>
c000b160:	83 c4 10             	add    esp,0x10
c000b163:	83 ec 0c             	sub    esp,0xc
c000b166:	31 ed                	xor    ebp,ebp
c000b168:	53                   	push   ebx
c000b169:	e8 1c fb ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000b16e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b173:	83 c4 10             	add    esp,0x10
c000b176:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b179:	0f b7 f6             	movzx  esi,si
c000b17c:	01 f6                	add    esi,esi
c000b17e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b181:	e9 9c 00 00 00       	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b186:	3c 08                	cmp    al,0x8
c000b188:	75 35                	jne    c000b1bf <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b18a:	56                   	push   esi
c000b18b:	56                   	push   esi
c000b18c:	6a 01                	push   0x1
c000b18e:	53                   	push   ebx
c000b18f:	e8 42 fe ff ff       	call   c000afd6 <VgaText::decrementCursor(bool)>
c000b194:	58                   	pop    eax
c000b195:	5a                   	pop    edx
c000b196:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b199:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b19c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b19f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b1a2:	6a 20                	push   0x20
c000b1a4:	53                   	push   ebx
c000b1a5:	e8 a8 fc ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b1aa:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b1af:	83 c4 20             	add    esp,0x20
c000b1b2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b1b5:	0f b7 f6             	movzx  esi,si
c000b1b8:	01 f6                	add    esi,esi
c000b1ba:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b1bd:	eb 63                	jmp    c000b222 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b1bf:	51                   	push   ecx
c000b1c0:	51                   	push   ecx
c000b1c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1c5:	50                   	push   eax
c000b1c6:	e8 75 fc ff ff       	call   c000ae40 <VgaText::combineCharAndColour(char, unsigned char)>
c000b1cb:	83 c4 10             	add    esp,0x10
c000b1ce:	66 89 06             	mov    WORD PTR [esi],ax
c000b1d1:	39 1d 44 8c 02 c0    	cmp    DWORD PTR ds:0xc0028c44,ebx
c000b1d7:	75 21                	jne    c000b1fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1d9:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b1dc:	85 c0                	test   eax,eax
c000b1de:	74 1a                	je     c000b1fa <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b1e0:	52                   	push   edx
c000b1e1:	52                   	push   edx
c000b1e2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b1e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b1e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b1f0:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b1f3:	51                   	push   ecx
c000b1f4:	53                   	push   ebx
c000b1f5:	ff d0                	call   eax
c000b1f7:	83 c4 20             	add    esp,0x20
c000b1fa:	83 c6 02             	add    esi,0x2
c000b1fd:	50                   	push   eax
c000b1fe:	50                   	push   eax
c000b1ff:	6a 00                	push   0x0
c000b201:	53                   	push   ebx
c000b202:	e8 7b fd ff ff       	call   c000af82 <VgaText::incrementCursor(bool)>
c000b207:	83 c4 10             	add    esp,0x10
c000b20a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b20e:	75 0d                	jne    c000b21d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b210:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b215:	0f b7 f6             	movzx  esi,si
c000b218:	01 f6                	add    esi,esi
c000b21a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b21d:	bd 01 00 00 00       	mov    ebp,0x1
c000b222:	47                   	inc    edi
c000b223:	e9 f8 fe ff ff       	jmp    c000b120 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	53                   	push   ebx
c000b22c:	e8 59 fa ff ff       	call   c000ac8a <VgaText::updateCursor()>
c000b231:	83 c4 10             	add    esp,0x10
c000b234:	89 e8                	mov    eax,ebp
c000b236:	84 c0                	test   al,al
c000b238:	74 0c                	je     c000b246 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b23a:	83 ec 0c             	sub    esp,0xc
c000b23d:	53                   	push   ebx
c000b23e:	e8 8d fe ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b243:	83 c4 10             	add    esp,0x10
c000b246:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b24d:	83 c4 1c             	add    esp,0x1c
c000b250:	5b                   	pop    ebx
c000b251:	5e                   	pop    esi
c000b252:	5f                   	pop    edi
c000b253:	5d                   	pop    ebp
c000b254:	c3                   	ret    
c000b255:	90                   	nop

c000b256 <VgaText::clearScreen()>:
c000b256:	57                   	push   edi
c000b257:	56                   	push   esi
c000b258:	31 f6                	xor    esi,esi
c000b25a:	53                   	push   ebx
c000b25b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b25f:	52                   	push   edx
c000b260:	6a 00                	push   0x0
c000b262:	6a 00                	push   0x0
c000b264:	53                   	push   ebx
c000b265:	e8 54 fc ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b26a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b271:	83 c4 10             	add    esp,0x10
c000b274:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b277:	7e 20                	jle    c000b299 <VgaText::clearScreen()+0x43>
c000b279:	31 ff                	xor    edi,edi
c000b27b:	50                   	push   eax
c000b27c:	50                   	push   eax
c000b27d:	56                   	push   esi
c000b27e:	57                   	push   edi
c000b27f:	47                   	inc    edi
c000b280:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b283:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b286:	6a 20                	push   0x20
c000b288:	53                   	push   ebx
c000b289:	e8 c4 fb ff ff       	call   c000ae52 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b28e:	83 c4 20             	add    esp,0x20
c000b291:	83 ff 50             	cmp    edi,0x50
c000b294:	75 e5                	jne    c000b27b <VgaText::clearScreen()+0x25>
c000b296:	46                   	inc    esi
c000b297:	eb db                	jmp    c000b274 <VgaText::clearScreen()+0x1e>
c000b299:	83 ec 0c             	sub    esp,0xc
c000b29c:	53                   	push   ebx
c000b29d:	e8 2e fe ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b2a2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	5b                   	pop    ebx
c000b2ad:	5e                   	pop    esi
c000b2ae:	5f                   	pop    edi
c000b2af:	c3                   	ret    

c000b2b0 <VgaText::putchar(char)>:
c000b2b0:	56                   	push   esi
c000b2b1:	53                   	push   ebx
c000b2b2:	83 ec 14             	sub    esp,0x14
c000b2b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b2bd:	3c 5b                	cmp    al,0x5b
c000b2bf:	75 18                	jne    c000b2d9 <VgaText::putchar(char)+0x29>
c000b2c1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b2c5:	74 1f                	je     c000b2e6 <VgaText::putchar(char)+0x36>
c000b2c7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b2cd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b2d4:	e9 bd 00 00 00       	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b2d9:	3c 1b                	cmp    al,0x1b
c000b2db:	75 09                	jne    c000b2e6 <VgaText::putchar(char)+0x36>
c000b2dd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b2e1:	e9 b0 00 00 00       	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b2e6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b2e9:	84 c9                	test   cl,cl
c000b2eb:	0f 84 92 00 00 00    	je     c000b383 <VgaText::putchar(char)+0xd3>
c000b2f1:	8d 50 c0             	lea    edx,[eax-0x40]
c000b2f4:	80 fa 3e             	cmp    dl,0x3e
c000b2f7:	77 76                	ja     c000b36f <VgaText::putchar(char)+0xbf>
c000b2f9:	3c 6d                	cmp    al,0x6d
c000b2fb:	75 47                	jne    c000b344 <VgaText::putchar(char)+0x94>
c000b2fd:	31 f6                	xor    esi,esi
c000b2ff:	31 d2                	xor    edx,edx
c000b301:	31 c0                	xor    eax,eax
c000b303:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b306:	7e 2d                	jle    c000b335 <VgaText::putchar(char)+0x85>
c000b308:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b30d:	80 fa 3b             	cmp    dl,0x3b
c000b310:	75 17                	jne    c000b329 <VgaText::putchar(char)+0x79>
c000b312:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b316:	50                   	push   eax
c000b317:	53                   	push   ebx
c000b318:	e8 83 f9 ff ff       	call   c000aca0 <VgaText::doANSI_SGR(int)>
c000b31d:	59                   	pop    ecx
c000b31e:	31 d2                	xor    edx,edx
c000b320:	58                   	pop    eax
c000b321:	31 c0                	xor    eax,eax
c000b323:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b327:	eb 09                	jmp    c000b332 <VgaText::putchar(char)+0x82>
c000b329:	6b c0 0a             	imul   eax,eax,0xa
c000b32c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b330:	88 ca                	mov    dl,cl
c000b332:	46                   	inc    esi
c000b333:	eb ce                	jmp    c000b303 <VgaText::putchar(char)+0x53>
c000b335:	84 d2                	test   dl,dl
c000b337:	74 2e                	je     c000b367 <VgaText::putchar(char)+0xb7>
c000b339:	50                   	push   eax
c000b33a:	53                   	push   ebx
c000b33b:	e8 60 f9 ff ff       	call   c000aca0 <VgaText::doANSI_SGR(int)>
c000b340:	58                   	pop    eax
c000b341:	5a                   	pop    edx
c000b342:	eb 23                	jmp    c000b367 <VgaText::putchar(char)+0xb7>
c000b344:	3c 4a                	cmp    al,0x4a
c000b346:	75 1f                	jne    c000b367 <VgaText::putchar(char)+0xb7>
c000b348:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b34c:	75 19                	jne    c000b367 <VgaText::putchar(char)+0xb7>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	53                   	push   ebx
c000b352:	e8 ff fe ff ff       	call   c000b256 <VgaText::clearScreen()>
c000b357:	83 c4 0c             	add    esp,0xc
c000b35a:	6a 00                	push   0x0
c000b35c:	6a 00                	push   0x0
c000b35e:	53                   	push   ebx
c000b35f:	e8 5a fb ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b364:	83 c4 10             	add    esp,0x10
c000b367:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b36d:	eb 27                	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b36f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b372:	83 fa 0e             	cmp    edx,0xe
c000b375:	7f 1f                	jg     c000b396 <VgaText::putchar(char)+0xe6>
c000b377:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b37a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b37d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b381:	eb 13                	jmp    c000b396 <VgaText::putchar(char)+0xe6>
c000b383:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b386:	0f be c0             	movsx  eax,al
c000b389:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b38c:	50                   	push   eax
c000b38d:	53                   	push   ebx
c000b38e:	e8 65 fc ff ff       	call   c000aff8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	83 c4 14             	add    esp,0x14
c000b399:	5b                   	pop    ebx
c000b39a:	5e                   	pop    esi
c000b39b:	c3                   	ret    

c000b39c <VgaText::putx(unsigned int)>:
c000b39c:	57                   	push   edi
c000b39d:	b9 11 00 00 00       	mov    ecx,0x11
c000b3a2:	56                   	push   esi
c000b3a3:	be 96 4c 02 c0       	mov    esi,0xc0024c96
c000b3a8:	53                   	push   ebx
c000b3a9:	83 ec 20             	sub    esp,0x20
c000b3ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b3b0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b3b4:	fc                   	cld    
c000b3b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3b7:	be 08 00 00 00       	mov    esi,0x8
c000b3bc:	50                   	push   eax
c000b3bd:	50                   	push   eax
c000b3be:	89 d8                	mov    eax,ebx
c000b3c0:	c1 e3 04             	shl    ebx,0x4
c000b3c3:	c1 e8 1c             	shr    eax,0x1c
c000b3c6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b3cb:	50                   	push   eax
c000b3cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b3d0:	e8 db fe ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b3d5:	83 c4 10             	add    esp,0x10
c000b3d8:	4e                   	dec    esi
c000b3d9:	75 e1                	jne    c000b3bc <VgaText::putx(unsigned int)+0x20>
c000b3db:	83 c4 20             	add    esp,0x20
c000b3de:	5b                   	pop    ebx
c000b3df:	5e                   	pop    esi
c000b3e0:	5f                   	pop    edi
c000b3e1:	c3                   	ret    

c000b3e2 <VgaText::puts(char const*)>:
c000b3e2:	53                   	push   ebx
c000b3e3:	83 ec 08             	sub    esp,0x8
c000b3e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b3ea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b3ed:	84 c0                	test   al,al
c000b3ef:	74 12                	je     c000b403 <VgaText::puts(char const*)+0x21>
c000b3f1:	43                   	inc    ebx
c000b3f2:	51                   	push   ecx
c000b3f3:	51                   	push   ecx
c000b3f4:	50                   	push   eax
c000b3f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f9:	e8 b2 fe ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	eb e7                	jmp    c000b3ea <VgaText::puts(char const*)+0x8>
c000b403:	83 c4 08             	add    esp,0x8
c000b406:	5b                   	pop    ebx
c000b407:	c3                   	ret    

c000b408 <VgaText::VgaText(char const*)>:
c000b408:	57                   	push   edi
c000b409:	56                   	push   esi
c000b40a:	53                   	push   ebx
c000b40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40f:	83 ec 08             	sub    esp,0x8
c000b412:	6a 00                	push   0x0
c000b414:	50                   	push   eax
c000b415:	e8 44 05 00 00       	call   c000b95e <UnixFile::UnixFile(int)>
c000b41a:	83 c4 10             	add    esp,0x10
c000b41d:	ba fc 4c 02 c0       	mov    edx,0xc0024cfc
c000b422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b426:	89 10                	mov    DWORD PTR [eax],edx
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b437:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b442:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b452:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b468:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b473:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47e:	8d 50 60             	lea    edx,[eax+0x60]
c000b481:	bb 20 8c 02 c0       	mov    ebx,0xc0028c20
c000b486:	b8 08 00 00 00       	mov    eax,0x8
c000b48b:	fc                   	cld    
c000b48c:	89 d7                	mov    edi,edx
c000b48e:	89 de                	mov    esi,ebx
c000b490:	89 c1                	mov    ecx,eax
c000b492:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b498:	05 82 00 00 00       	add    eax,0x82
c000b49d:	83 ec 08             	sub    esp,0x8
c000b4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a4:	50                   	push   eax
c000b4a5:	e8 a6 52 ff ff       	call   c0000750 <strcpy>
c000b4aa:	83 c4 10             	add    esp,0x10
c000b4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b1:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b4b8:	83 ec 0c             	sub    esp,0xc
c000b4bb:	6a 01                	push   0x1
c000b4bd:	e8 df 08 00 00       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000b4c2:	83 c4 10             	add    esp,0x10
c000b4c5:	89 c2                	mov    edx,eax
c000b4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b4ce:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c000b4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4db:	89 c6                	mov    esi,eax
c000b4dd:	e8 bc ef ff ff       	call   c000a49e <Phys::allocatePage()>
c000b4e2:	68 05 0c 00 00       	push   0xc05
c000b4e7:	56                   	push   esi
c000b4e8:	50                   	push   eax
c000b4e9:	53                   	push   ebx
c000b4ea:	e8 59 0f 00 00       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b4ef:	83 c4 10             	add    esp,0x10
c000b4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4f9:	83 ec 04             	sub    esp,0x4
c000b4fc:	68 00 0f 00 00       	push   0xf00
c000b501:	6a 00                	push   0x0
c000b503:	50                   	push   eax
c000b504:	e8 8b 51 ff ff       	call   c0000694 <memset>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	83 ec 04             	sub    esp,0x4
c000b50f:	6a 00                	push   0x0
c000b511:	6a 07                	push   0x7
c000b513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b517:	e8 18 f8 ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	83 ec 04             	sub    esp,0x4
c000b522:	6a 00                	push   0x0
c000b524:	6a 00                	push   0x0
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	e8 8f f9 ff ff       	call   c000aebe <VgaText::setCursor(int, int)>
c000b52f:	83 c4 10             	add    esp,0x10
c000b532:	83 ec 0c             	sub    esp,0xc
c000b535:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b539:	e8 18 fd ff ff       	call   c000b256 <VgaText::clearScreen()>
c000b53e:	83 c4 10             	add    esp,0x10
c000b541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b545:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54d:	05 02 01 00 00       	add    eax,0x102
c000b552:	83 ec 04             	sub    esp,0x4
c000b555:	6a 30                	push   0x30
c000b557:	6a 00                	push   0x0
c000b559:	50                   	push   eax
c000b55a:	e8 35 51 ff ff       	call   c0000694 <memset>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b566:	05 32 01 00 00       	add    eax,0x132
c000b56b:	83 ec 04             	sub    esp,0x4
c000b56e:	68 80 00 00 00       	push   0x80
c000b573:	6a 00                	push   0x0
c000b575:	50                   	push   eax
c000b576:	e8 19 51 ff ff       	call   c0000694 <memset>
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	90                   	nop
c000b57f:	5b                   	pop    ebx
c000b580:	5e                   	pop    esi
c000b581:	5f                   	pop    edi
c000b582:	c3                   	ret    
c000b583:	90                   	nop

c000b584 <VgaText::receiveKey(unsigned char)>:
c000b584:	55                   	push   ebp
c000b585:	57                   	push   edi
c000b586:	56                   	push   esi
c000b587:	53                   	push   ebx
c000b588:	83 ec 1c             	sub    esp,0x1c
c000b58b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b58f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b593:	84 db                	test   bl,bl
c000b595:	0f 84 c6 00 00 00    	je     c000b661 <VgaText::receiveKey(unsigned char)+0xdd>
c000b59b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b5a1:	80 fb 08             	cmp    bl,0x8
c000b5a4:	75 2c                	jne    c000b5d2 <VgaText::receiveKey(unsigned char)+0x4e>
c000b5a6:	83 ec 0c             	sub    esp,0xc
c000b5a9:	57                   	push   edi
c000b5aa:	e8 01 51 ff ff       	call   c00006b0 <strlen>
c000b5af:	83 c4 10             	add    esp,0x10
c000b5b2:	85 c0                	test   eax,eax
c000b5b4:	74 41                	je     c000b5f7 <VgaText::receiveKey(unsigned char)+0x73>
c000b5b6:	50                   	push   eax
c000b5b7:	50                   	push   eax
c000b5b8:	6a 08                	push   0x8
c000b5ba:	56                   	push   esi
c000b5bb:	e8 f0 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b5c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b5c3:	e8 e8 50 ff ff       	call   c00006b0 <strlen>
c000b5c8:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b5d0:	eb 22                	jmp    c000b5f4 <VgaText::receiveKey(unsigned char)+0x70>
c000b5d2:	0f be c3             	movsx  eax,bl
c000b5d5:	52                   	push   edx
c000b5d6:	52                   	push   edx
c000b5d7:	50                   	push   eax
c000b5d8:	56                   	push   esi
c000b5d9:	e8 d2 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b5de:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b5e2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b5e7:	59                   	pop    ecx
c000b5e8:	5d                   	pop    ebp
c000b5e9:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b5ed:	50                   	push   eax
c000b5ee:	57                   	push   edi
c000b5ef:	e8 9c 52 ff ff       	call   c0000890 <strcat>
c000b5f4:	83 c4 10             	add    esp,0x10
c000b5f7:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b5fe:	75 05                	jne    c000b605 <VgaText::receiveKey(unsigned char)+0x81>
c000b600:	80 fb 0a             	cmp    bl,0xa
c000b603:	75 50                	jne    c000b655 <VgaText::receiveKey(unsigned char)+0xd1>
c000b605:	83 ec 0c             	sub    esp,0xc
c000b608:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b60e:	53                   	push   ebx
c000b60f:	e8 9c 50 ff ff       	call   c00006b0 <strlen>
c000b614:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b617:	89 c5                	mov    ebp,eax
c000b619:	e8 92 50 ff ff       	call   c00006b0 <strlen>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b625:	3d 80 00 00 00       	cmp    eax,0x80
c000b62a:	76 10                	jbe    c000b63c <VgaText::receiveKey(unsigned char)+0xb8>
c000b62c:	83 ec 0c             	sub    esp,0xc
c000b62f:	68 a7 4c 02 c0       	push   0xc0024ca7
c000b634:	e8 70 9b 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	50                   	push   eax
c000b63d:	50                   	push   eax
c000b63e:	57                   	push   edi
c000b63f:	53                   	push   ebx
c000b640:	e8 4b 52 ff ff       	call   c0000890 <strcat>
c000b645:	83 c4 0c             	add    esp,0xc
c000b648:	6a 30                	push   0x30
c000b64a:	6a 00                	push   0x0
c000b64c:	57                   	push   edi
c000b64d:	e8 42 50 ff ff       	call   c0000694 <memset>
c000b652:	83 c4 10             	add    esp,0x10
c000b655:	83 ec 0c             	sub    esp,0xc
c000b658:	56                   	push   esi
c000b659:	e8 72 fa ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	83 c4 1c             	add    esp,0x1c
c000b664:	5b                   	pop    ebx
c000b665:	5e                   	pop    esi
c000b666:	5f                   	pop    edi
c000b667:	5d                   	pop    ebp
c000b668:	c3                   	ret    
c000b669:	90                   	nop

c000b66a <VgaText::write(unsigned long long, void*, int*)>:
c000b66a:	55                   	push   ebp
c000b66b:	57                   	push   edi
c000b66c:	56                   	push   esi
c000b66d:	53                   	push   ebx
c000b66e:	83 ec 0c             	sub    esp,0xc
c000b671:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b675:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b679:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b67d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b684:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b687:	39 eb                	cmp    ebx,ebp
c000b689:	74 13                	je     c000b69e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b68b:	43                   	inc    ebx
c000b68c:	50                   	push   eax
c000b68d:	50                   	push   eax
c000b68e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b692:	50                   	push   eax
c000b693:	56                   	push   esi
c000b694:	e8 17 fc ff ff       	call   c000b2b0 <VgaText::putchar(char)>
c000b699:	83 c4 10             	add    esp,0x10
c000b69c:	eb e9                	jmp    c000b687 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b69e:	83 ec 0c             	sub    esp,0xc
c000b6a1:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b6a8:	56                   	push   esi
c000b6a9:	e8 22 fa ff ff       	call   c000b0d0 <VgaText::doUpdate()>
c000b6ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b6b2:	89 38                	mov    DWORD PTR [eax],edi
c000b6b4:	83 c4 1c             	add    esp,0x1c
c000b6b7:	31 c0                	xor    eax,eax
c000b6b9:	5b                   	pop    ebx
c000b6ba:	5e                   	pop    esi
c000b6bb:	5f                   	pop    edi
c000b6bc:	5d                   	pop    ebp
c000b6bd:	c3                   	ret    

c000b6be <newTerminal(char*)>:
c000b6be:	83 ec 28             	sub    esp,0x28
c000b6c1:	68 b4 01 00 00       	push   0x1b4
c000b6c6:	e8 1c e7 ff ff       	call   c0009de7 <malloc>
c000b6cb:	5a                   	pop    edx
c000b6cc:	59                   	pop    ecx
c000b6cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6d1:	50                   	push   eax
c000b6d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6d6:	e8 2d fd ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c000b6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6df:	83 c4 2c             	add    esp,0x2c
c000b6e2:	c3                   	ret    
c000b6e3:	90                   	nop

c000b6e4 <TSS::TSS()>:
c000b6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b6ef:	90                   	nop
c000b6f0:	c3                   	ret    
c000b6f1:	90                   	nop
c000b6f2:	66 90                	xchg   ax,ax

c000b6f4 <TSS::setESP(unsigned long)>:
c000b6f4:	55                   	push   ebp
c000b6f5:	89 e5                	mov    ebp,esp
c000b6f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b700:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b703:	90                   	nop
c000b704:	5d                   	pop    ebp
c000b705:	c3                   	ret    
c000b706:	66 90                	xchg   ax,ax

c000b708 <TSS::flush()>:
c000b708:	55                   	push   ebp
c000b709:	89 e5                	mov    ebp,esp
c000b70b:	83 ec 10             	sub    esp,0x10
c000b70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b711:	8b 00                	mov    eax,DWORD PTR [eax]
c000b713:	83 c8 03             	or     eax,0x3
c000b716:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b71a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b71e:	66 89 d0             	mov    ax,dx
c000b721:	0f 00 d8             	ltr    ax
c000b724:	90                   	nop
c000b725:	c9                   	leave  
c000b726:	c3                   	ret    
c000b727:	90                   	nop

c000b728 <TSS::setup(unsigned long, unsigned long)>:
c000b728:	55                   	push   ebp
c000b729:	89 e5                	mov    ebp,esp
c000b72b:	83 ec 18             	sub    esp,0x18
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	6a 68                	push   0x68
c000b733:	e8 af e6 ff ff       	call   c0009de7 <malloc>
c000b738:	83 c4 10             	add    esp,0x10
c000b73b:	89 c2                	mov    edx,eax
c000b73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b740:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b749:	83 ec 04             	sub    esp,0x4
c000b74c:	6a 68                	push   0x68
c000b74e:	6a 00                	push   0x0
c000b750:	50                   	push   eax
c000b751:	e8 3e 4f ff ff       	call   c0000694 <memset>
c000b756:	83 c4 10             	add    esp,0x10
c000b759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b75c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b75f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b76b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b777:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b77a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b77d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b783:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b78c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b78f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b79b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7a7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7b3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7bf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b7c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7cb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b7ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b7da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7e3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b7ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7f0:	0f 20 da             	mov    edx,cr3
c000b7f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b7f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b7f9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b7fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b802:	83 ec 08             	sub    esp,0x8
c000b805:	50                   	push   eax
c000b806:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b809:	50                   	push   eax
c000b80a:	e8 bf dd ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	83 ec 08             	sub    esp,0x8
c000b815:	6a 68                	push   0x68
c000b817:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b81a:	50                   	push   eax
c000b81b:	e8 ca dd ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c000b820:	83 c4 10             	add    esp,0x10
c000b823:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b827:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b82a:	83 e0 0f             	and    eax,0xf
c000b82d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b830:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b833:	83 c8 40             	or     eax,0x40
c000b836:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b839:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000b83e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b844:	05 78 01 00 00       	add    eax,0x178
c000b849:	83 ec 04             	sub    esp,0x4
c000b84c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b84f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b852:	50                   	push   eax
c000b853:	e8 c6 dd ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	89 c2                	mov    edx,eax
c000b85d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b860:	89 10                	mov    DWORD PTR [eax],edx
c000b862:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000b867:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b86d:	05 78 01 00 00       	add    eax,0x178
c000b872:	83 ec 0c             	sub    esp,0xc
c000b875:	50                   	push   eax
c000b876:	e8 cd dd ff ff       	call   c0009648 <GDT::flush()>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b881:	8b 00                	mov    eax,DWORD PTR [eax]
c000b883:	c9                   	leave  
c000b884:	c3                   	ret    
c000b885:	90                   	nop

c000b886 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b88a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b88e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b891:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b896:	75 08                	jne    c000b8a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b898:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b89e:	eb 38                	jmp    c000b8d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b8a0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b8a5:	75 17                	jne    c000b8be <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b8a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8bb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b8be:	89 c1                	mov    ecx,eax
c000b8c0:	83 e1 fd             	and    ecx,0xfffffffd
c000b8c3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b8c9:	74 cd                	je     c000b898 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8cb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8d0:	83 e0 ef             	and    eax,0xffffffef
c000b8d3:	83 f8 08             	cmp    eax,0x8
c000b8d6:	76 c0                	jbe    c000b898 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b8d8:	31 c0                	xor    eax,eax
c000b8da:	c3                   	ret    
c000b8db:	90                   	nop

c000b8dc <ReservedFilename::isAtty()>:
c000b8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b8e3:	31 c0                	xor    eax,eax
c000b8e5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b8eb:	74 09                	je     c000b8f6 <ReservedFilename::isAtty()+0x1a>
c000b8ed:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b8f3:	0f 94 c0             	sete   al
c000b8f6:	c3                   	ret    
c000b8f7:	90                   	nop

c000b8f8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b903:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b907:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b90c:	75 08                	jne    c000b916 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b90e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b914:	eb 3d                	jmp    c000b953 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b916:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b91b:	75 17                	jne    c000b934 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b91d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b922:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b925:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b92b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b92d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b931:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b934:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b939:	75 04                	jne    c000b93f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b93b:	89 0a                	mov    DWORD PTR [edx],ecx
c000b93d:	eb 14                	jmp    c000b953 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b93f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b944:	74 c8                	je     c000b90e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b946:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b94b:	83 e0 ef             	and    eax,0xffffffef
c000b94e:	83 f8 08             	cmp    eax,0x8
c000b951:	76 bb                	jbe    c000b90e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b953:	31 c0                	xor    eax,eax
c000b955:	c3                   	ret    

c000b956 <UnixFile::getFileDescriptor()>:
c000b956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b95a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b95d:	c3                   	ret    

c000b95e <UnixFile::UnixFile(int)>:
c000b95e:	53                   	push   ebx
c000b95f:	83 ec 28             	sub    esp,0x28
c000b962:	ba c4 4d 02 c0       	mov    edx,0xc0024dc4
c000b967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b96b:	89 10                	mov    DWORD PTR [eax],edx
c000b96d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b975:	0f 8f 8c 01 00 00    	jg     c000bb07 <UnixFile::UnixFile(int)+0x1a9>
c000b97b:	a1 00 80 02 c0       	mov    eax,ds:0xc0028000
c000b980:	8d 50 01             	lea    edx,[eax+0x1]
c000b983:	89 15 00 80 02 c0    	mov    DWORD PTR ds:0xc0028000,edx
c000b989:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b98d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b990:	83 ec 08             	sub    esp,0x8
c000b993:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b997:	68 d8 8c 02 c0       	push   0xc0028cd8
c000b99c:	e8 e7 78 01 00       	call   c0023288 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	a0 d4 8c 02 c0       	mov    al,ds:0xc0028cd4
c000b9a9:	83 f0 01             	xor    eax,0x1
c000b9ac:	84 c0                	test   al,al
c000b9ae:	0f 84 54 01 00 00    	je     c000bb08 <UnixFile::UnixFile(int)+0x1aa>
c000b9b4:	c6 05 d4 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028cd4,0x1
c000b9bb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b9c3:	83 ec 0c             	sub    esp,0xc
c000b9c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9ca:	e8 18 e4 ff ff       	call   c0009de7 <malloc>
c000b9cf:	83 c4 10             	add    esp,0x10
c000b9d2:	89 c3                	mov    ebx,eax
c000b9d4:	83 ec 08             	sub    esp,0x8
c000b9d7:	68 03 ff ff 0f       	push   0xfffff03
c000b9dc:	53                   	push   ebx
c000b9dd:	e8 2c 01 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000b9e2:	83 c4 10             	add    esp,0x10
c000b9e5:	89 1d cc 8c 02 c0    	mov    DWORD PTR ds:0xc0028ccc,ebx
c000b9eb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b9f3:	83 ec 0c             	sub    esp,0xc
c000b9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fa:	e8 e8 e3 ff ff       	call   c0009de7 <malloc>
c000b9ff:	83 c4 10             	add    esp,0x10
c000ba02:	89 c3                	mov    ebx,eax
c000ba04:	83 ec 08             	sub    esp,0x8
c000ba07:	68 01 ff ff 0f       	push   0xfffff01
c000ba0c:	53                   	push   ebx
c000ba0d:	e8 fc 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba12:	83 c4 10             	add    esp,0x10
c000ba15:	89 1d d0 8c 02 c0    	mov    DWORD PTR ds:0xc0028cd0,ebx
c000ba1b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000ba23:	83 ec 0c             	sub    esp,0xc
c000ba26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba2a:	e8 b8 e3 ff ff       	call   c0009de7 <malloc>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	89 c3                	mov    ebx,eax
c000ba34:	83 ec 08             	sub    esp,0x8
c000ba37:	68 00 ff ff 0f       	push   0xfffff00
c000ba3c:	53                   	push   ebx
c000ba3d:	e8 cc 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba42:	83 c4 10             	add    esp,0x10
c000ba45:	89 1d c4 8c 02 c0    	mov    DWORD PTR ds:0xc0028cc4,ebx
c000ba4b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba5a:	e8 88 e3 ff ff       	call   c0009de7 <malloc>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	89 c3                	mov    ebx,eax
c000ba64:	83 ec 08             	sub    esp,0x8
c000ba67:	68 02 ff ff 0f       	push   0xfffff02
c000ba6c:	53                   	push   ebx
c000ba6d:	e8 9c 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000ba72:	83 c4 10             	add    esp,0x10
c000ba75:	89 1d c8 8c 02 c0    	mov    DWORD PTR ds:0xc0028cc8,ebx
c000ba7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ba83:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba88:	7f 7e                	jg     c000bb08 <UnixFile::UnixFile(int)+0x1aa>
c000ba8a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba92:	83 ec 0c             	sub    esp,0xc
c000ba95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba99:	e8 49 e3 ff ff       	call   c0009de7 <malloc>
c000ba9e:	83 c4 10             	add    esp,0x10
c000baa1:	89 c3                	mov    ebx,eax
c000baa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baa7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000baac:	83 ec 08             	sub    esp,0x8
c000baaf:	50                   	push   eax
c000bab0:	53                   	push   ebx
c000bab1:	e8 58 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000babd:	89 1c 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],ebx
c000bac4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000bacc:	83 ec 0c             	sub    esp,0xc
c000bacf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bad3:	e8 0f e3 ff ff       	call   c0009de7 <malloc>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 c3                	mov    ebx,eax
c000badd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bae1:	05 20 ff ff 0f       	add    eax,0xfffff20
c000bae6:	83 ec 08             	sub    esp,0x8
c000bae9:	50                   	push   eax
c000baea:	53                   	push   ebx
c000baeb:	e8 1e 00 00 00       	call   c000bb0e <ReservedFilename::ReservedFilename(int)>
c000baf0:	83 c4 10             	add    esp,0x10
c000baf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000baf7:	89 1c 85 60 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73a0],ebx
c000bafe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bb02:	e9 7c ff ff ff       	jmp    c000ba83 <UnixFile::UnixFile(int)+0x125>
c000bb07:	90                   	nop
c000bb08:	83 c4 28             	add    esp,0x28
c000bb0b:	5b                   	pop    ebx
c000bb0c:	c3                   	ret    
c000bb0d:	90                   	nop

c000bb0e <ReservedFilename::ReservedFilename(int)>:
c000bb0e:	83 ec 0c             	sub    esp,0xc
c000bb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb15:	83 ec 08             	sub    esp,0x8
c000bb18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb1c:	50                   	push   eax
c000bb1d:	e8 3c fe ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	ba e0 4d 02 c0       	mov    edx,0xc0024de0
c000bb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb2e:	89 10                	mov    DWORD PTR [eax],edx
c000bb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000bb3b:	90                   	nop
c000bb3c:	83 c4 0c             	add    esp,0xc
c000bb3f:	c3                   	ret    

c000bb40 <UnixFile::~UnixFile()>:
c000bb40:	83 ec 1c             	sub    esp,0x1c
c000bb43:	ba c4 4d 02 c0       	mov    edx,0xc0024dc4
c000bb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4c:	89 10                	mov    DWORD PTR [eax],edx
c000bb4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb55:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bb5a:	7f 73                	jg     c000bbcf <UnixFile::~UnixFile()+0x8f>
c000bb5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bb64:	83 ec 0c             	sub    esp,0xc
c000bb67:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bb6c:	e8 eb 77 01 00       	call   c002335c <LinkedList<UnixFile>::getFirstElement()>
c000bb71:	83 c4 10             	add    esp,0x10
c000bb74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bb80:	e8 df 77 01 00       	call   c0023364 <LinkedList<UnixFile>::removeFirst()>
c000bb85:	83 c4 10             	add    esp,0x10
c000bb88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb8c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb90:	74 40                	je     c000bbd2 <UnixFile::~UnixFile()+0x92>
c000bb92:	83 ec 08             	sub    esp,0x8
c000bb95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb99:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bb9e:	e8 e5 76 01 00       	call   c0023288 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbaa:	8d 50 01             	lea    edx,[eax+0x1]
c000bbad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbb1:	3d 88 13 00 00       	cmp    eax,0x1388
c000bbb6:	0f 94 c0             	sete   al
c000bbb9:	84 c0                	test   al,al
c000bbbb:	74 a7                	je     c000bb64 <UnixFile::~UnixFile()+0x24>
c000bbbd:	83 ec 0c             	sub    esp,0xc
c000bbc0:	68 9c 4d 02 c0       	push   0xc0024d9c
c000bbc5:	e8 df 95 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	eb 95                	jmp    c000bb64 <UnixFile::~UnixFile()+0x24>
c000bbcf:	90                   	nop
c000bbd0:	eb 01                	jmp    c000bbd3 <UnixFile::~UnixFile()+0x93>
c000bbd2:	90                   	nop
c000bbd3:	90                   	nop
c000bbd4:	83 c4 1c             	add    esp,0x1c
c000bbd7:	c3                   	ret    

c000bbd8 <UnixFile::~UnixFile()>:
c000bbd8:	83 ec 0c             	sub    esp,0xc
c000bbdb:	83 ec 0c             	sub    esp,0xc
c000bbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe2:	e8 59 ff ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000bbe7:	83 c4 10             	add    esp,0x10
c000bbea:	83 ec 08             	sub    esp,0x8
c000bbed:	6a 0c                	push   0xc
c000bbef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbf3:	e8 ee 13 00 00       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000bbf8:	83 c4 10             	add    esp,0x10
c000bbfb:	83 c4 0c             	add    esp,0xc
c000bbfe:	c3                   	ret    
c000bbff:	90                   	nop

c000bc00 <ReservedFilename::~ReservedFilename()>:
c000bc00:	83 ec 0c             	sub    esp,0xc
c000bc03:	ba e0 4d 02 c0       	mov    edx,0xc0024de0
c000bc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc0c:	89 10                	mov    DWORD PTR [eax],edx
c000bc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc12:	83 ec 0c             	sub    esp,0xc
c000bc15:	50                   	push   eax
c000bc16:	e8 25 ff ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000bc1b:	83 c4 10             	add    esp,0x10
c000bc1e:	90                   	nop
c000bc1f:	83 c4 0c             	add    esp,0xc
c000bc22:	c3                   	ret    
c000bc23:	90                   	nop

c000bc24 <ReservedFilename::~ReservedFilename()>:
c000bc24:	83 ec 0c             	sub    esp,0xc
c000bc27:	83 ec 0c             	sub    esp,0xc
c000bc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc2e:	e8 cd ff ff ff       	call   c000bc00 <ReservedFilename::~ReservedFilename()>
c000bc33:	83 c4 10             	add    esp,0x10
c000bc36:	83 ec 08             	sub    esp,0x8
c000bc39:	6a 0c                	push   0xc
c000bc3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3f:	e8 a2 13 00 00       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000bc44:	83 c4 10             	add    esp,0x10
c000bc47:	83 c4 0c             	add    esp,0xc
c000bc4a:	c3                   	ret    

c000bc4b <getFromFileDescriptor(int)>:
c000bc4b:	53                   	push   ebx
c000bc4c:	83 ec 08             	sub    esp,0x8
c000bc4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc53:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bc59:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bc5f:	7f 2c                	jg     c000bc8d <getFromFileDescriptor(int)+0x42>
c000bc61:	83 ec 0c             	sub    esp,0xc
c000bc64:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bc69:	e8 ee 76 01 00       	call   c002335c <LinkedList<UnixFile>::getFirstElement()>
c000bc6e:	83 c4 10             	add    esp,0x10
c000bc71:	85 c0                	test   eax,eax
c000bc73:	75 04                	jne    c000bc79 <getFromFileDescriptor(int)+0x2e>
c000bc75:	31 c0                	xor    eax,eax
c000bc77:	eb 6e                	jmp    c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc79:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bc7c:	74 69                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc7e:	52                   	push   edx
c000bc7f:	52                   	push   edx
c000bc80:	50                   	push   eax
c000bc81:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bc86:	e8 7b 77 01 00       	call   c0023406 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc8b:	eb e1                	jmp    c000bc6e <getFromFileDescriptor(int)+0x23>
c000bc8d:	a1 cc 8c 02 c0       	mov    eax,ds:0xc0028ccc
c000bc92:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc98:	74 4d                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bc9a:	a1 d0 8c 02 c0       	mov    eax,ds:0xc0028cd0
c000bc9f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bca5:	74 40                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bca7:	a1 c8 8c 02 c0       	mov    eax,ds:0xc0028cc8
c000bcac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bcb2:	74 33                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcb4:	a1 c4 8c 02 c0       	mov    eax,ds:0xc0028cc4
c000bcb9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bcbf:	74 26                	je     c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcc1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bcc7:	83 f8 08             	cmp    eax,0x8
c000bcca:	77 09                	ja     c000bcd5 <getFromFileDescriptor(int)+0x8a>
c000bccc:	8b 04 85 a0 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7360]
c000bcd3:	eb 12                	jmp    c000bce7 <getFromFileDescriptor(int)+0x9c>
c000bcd5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bcdb:	83 fb 08             	cmp    ebx,0x8
c000bcde:	77 95                	ja     c000bc75 <getFromFileDescriptor(int)+0x2a>
c000bce0:	8b 04 9d 60 8c 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd73a0]
c000bce7:	83 c4 08             	add    esp,0x8
c000bcea:	5b                   	pop    ebx
c000bceb:	c3                   	ret    

c000bcec <__static_initialization_and_destruction_0(int, int)>:
c000bcec:	83 ec 0c             	sub    esp,0xc
c000bcef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bcf4:	75 34                	jne    c000bd2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bcf6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bcfe:	75 2a                	jne    c000bd2a <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bd00:	83 ec 0c             	sub    esp,0xc
c000bd03:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bd08:	e8 39 75 01 00       	call   c0023246 <LinkedList<UnixFile>::LinkedList()>
c000bd0d:	83 c4 10             	add    esp,0x10
c000bd10:	83 ec 04             	sub    esp,0x4
c000bd13:	68 38 7e 02 c0       	push   0xc0027e38
c000bd18:	68 d8 8c 02 c0       	push   0xc0028cd8
c000bd1d:	68 44 32 02 c0       	push   0xc0023244
c000bd22:	e8 39 12 00 00       	call   c000cf60 <__cxa_atexit>
c000bd27:	83 c4 10             	add    esp,0x10
c000bd2a:	90                   	nop
c000bd2b:	83 c4 0c             	add    esp,0xc
c000bd2e:	c3                   	ret    

c000bd2f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bd2f:	83 ec 0c             	sub    esp,0xc
c000bd32:	83 ec 08             	sub    esp,0x8
c000bd35:	68 ff ff 00 00       	push   0xffff
c000bd3a:	6a 01                	push   0x1
c000bd3c:	e8 ab ff ff ff       	call   c000bcec <__static_initialization_and_destruction_0(int, int)>
c000bd41:	83 c4 10             	add    esp,0x10
c000bd44:	83 c4 0c             	add    esp,0xc
c000bd47:	c3                   	ret    

c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bd48:	53                   	push   ebx
c000bd49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bd51:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bd57:	89 c8                	mov    eax,ecx
c000bd59:	d1 e8                	shr    eax,1
c000bd5b:	03 05 08 80 02 c0    	add    eax,DWORD PTR ds:0xc0028008
c000bd61:	83 e1 01             	and    ecx,0x1
c000bd64:	8a 10                	mov    dl,BYTE PTR [eax]
c000bd66:	75 09                	jne    c000bd71 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bd68:	83 e2 f0             	and    edx,0xfffffff0
c000bd6b:	09 da                	or     edx,ebx
c000bd6d:	88 10                	mov    BYTE PTR [eax],dl
c000bd6f:	5b                   	pop    ebx
c000bd70:	c3                   	ret    
c000bd71:	c1 e3 04             	shl    ebx,0x4
c000bd74:	83 e2 0f             	and    edx,0xf
c000bd77:	09 da                	or     edx,ebx
c000bd79:	88 10                	mov    BYTE PTR [eax],dl
c000bd7b:	5b                   	pop    ebx
c000bd7c:	c3                   	ret    

c000bd7d <Virt::getPageState(unsigned long)>:
c000bd7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd81:	8b 0d 08 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028008
c000bd87:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd8d:	89 d0                	mov    eax,edx
c000bd8f:	d1 e8                	shr    eax,1
c000bd91:	83 e2 01             	and    edx,0x1
c000bd94:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd97:	75 04                	jne    c000bd9d <Virt::getPageState(unsigned long)+0x20>
c000bd99:	83 e0 0f             	and    eax,0xf
c000bd9c:	c3                   	ret    
c000bd9d:	c0 e8 04             	shr    al,0x4
c000bda0:	c3                   	ret    

c000bda1 <Virt::allocateKernelVirtualPages(int)>:
c000bda1:	55                   	push   ebp
c000bda2:	31 ed                	xor    ebp,ebp
c000bda4:	57                   	push   edi
c000bda5:	56                   	push   esi
c000bda6:	53                   	push   ebx
c000bda7:	31 db                	xor    ebx,ebx
c000bda9:	83 ec 1c             	sub    esp,0x1c
c000bdac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bdb0:	8b 3d 04 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028004
c000bdb6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bdbb:	57                   	push   edi
c000bdbc:	e8 bc ff ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000bdc1:	5a                   	pop    edx
c000bdc2:	84 c0                	test   al,al
c000bdc4:	75 3a                	jne    c000be00 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bdc6:	85 db                	test   ebx,ebx
c000bdc8:	75 02                	jne    c000bdcc <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bdca:	89 fd                	mov    ebp,edi
c000bdcc:	43                   	inc    ebx
c000bdcd:	39 f3                	cmp    ebx,esi
c000bdcf:	74 5a                	je     c000be2b <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bdd1:	47                   	inc    edi
c000bdd2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bdd8:	76 31                	jbe    c000be0b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bdda:	c7 05 04 80 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0028004,0xc8000
c000bde4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bde9:	75 28                	jne    c000be13 <Virt::allocateKernelVirtualPages(int)+0x72>
c000bdeb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bdf0:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bdf5:	57                   	push   edi
c000bdf6:	e8 82 ff ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000bdfb:	5a                   	pop    edx
c000bdfc:	84 c0                	test   al,al
c000bdfe:	74 c6                	je     c000bdc6 <Virt::allocateKernelVirtualPages(int)+0x25>
c000be00:	31 db                	xor    ebx,ebx
c000be02:	47                   	inc    edi
c000be03:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000be09:	77 cf                	ja     c000bdda <Virt::allocateKernelVirtualPages(int)+0x39>
c000be0b:	89 3d 04 80 02 c0    	mov    DWORD PTR ds:0xc0028004,edi
c000be11:	eb a8                	jmp    c000bdbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be13:	83 ec 0c             	sub    esp,0xc
c000be16:	68 f4 4d 02 c0       	push   0xc0024df4
c000be1b:	e8 89 93 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000be20:	8b 3d 04 80 02 c0    	mov    edi,DWORD PTR ds:0xc0028004
c000be26:	83 c4 10             	add    esp,0x10
c000be29:	eb 90                	jmp    c000bdbb <Virt::allocateKernelVirtualPages(int)+0x1a>
c000be2b:	89 2d 04 80 02 c0    	mov    DWORD PTR ds:0xc0028004,ebp
c000be31:	4b                   	dec    ebx
c000be32:	74 5f                	je     c000be93 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000be34:	85 f6                	test   esi,esi
c000be36:	74 3d                	je     c000be75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be38:	89 e8                	mov    eax,ebp
c000be3a:	31 db                	xor    ebx,ebx
c000be3c:	8d 7e ff             	lea    edi,[esi-0x1]
c000be3f:	eb 14                	jmp    c000be55 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000be41:	6a 01                	push   0x1
c000be43:	43                   	inc    ebx
c000be44:	50                   	push   eax
c000be45:	e8 fe fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be4a:	58                   	pop    eax
c000be4b:	39 f3                	cmp    ebx,esi
c000be4d:	5a                   	pop    edx
c000be4e:	74 25                	je     c000be75 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000be50:	a1 04 80 02 c0       	mov    eax,ds:0xc0028004
c000be55:	8d 50 01             	lea    edx,[eax+0x1]
c000be58:	85 db                	test   ebx,ebx
c000be5a:	89 15 04 80 02 c0    	mov    DWORD PTR ds:0xc0028004,edx
c000be60:	74 20                	je     c000be82 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000be62:	39 df                	cmp    edi,ebx
c000be64:	75 db                	jne    c000be41 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000be66:	6a 03                	push   0x3
c000be68:	43                   	inc    ebx
c000be69:	50                   	push   eax
c000be6a:	e8 d9 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be6f:	59                   	pop    ecx
c000be70:	39 f3                	cmp    ebx,esi
c000be72:	58                   	pop    eax
c000be73:	75 db                	jne    c000be50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be75:	83 c4 1c             	add    esp,0x1c
c000be78:	89 e8                	mov    eax,ebp
c000be7a:	5b                   	pop    ebx
c000be7b:	c1 e0 0c             	shl    eax,0xc
c000be7e:	5e                   	pop    esi
c000be7f:	5f                   	pop    edi
c000be80:	5d                   	pop    ebp
c000be81:	c3                   	ret    
c000be82:	6a 02                	push   0x2
c000be84:	bb 01 00 00 00       	mov    ebx,0x1
c000be89:	50                   	push   eax
c000be8a:	e8 b9 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be8f:	58                   	pop    eax
c000be90:	5a                   	pop    edx
c000be91:	eb bd                	jmp    c000be50 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be93:	6a 04                	push   0x4
c000be95:	8d 45 01             	lea    eax,[ebp+0x1]
c000be98:	55                   	push   ebp
c000be99:	a3 04 80 02 c0       	mov    ds:0xc0028004,eax
c000be9e:	e8 a5 fe ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bea3:	59                   	pop    ecx
c000bea4:	89 e8                	mov    eax,ebp
c000bea6:	5b                   	pop    ebx
c000bea7:	c1 e0 0c             	shl    eax,0xc
c000beaa:	83 c4 1c             	add    esp,0x1c
c000bead:	5b                   	pop    ebx
c000beae:	5e                   	pop    esi
c000beaf:	5f                   	pop    edi
c000beb0:	5d                   	pop    ebp
c000beb1:	c3                   	ret    

c000beb2 <Virt::freeSwapfilePage(unsigned long)>:
c000beb2:	53                   	push   ebx
c000beb3:	8b 15 ec 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cec
c000beb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bebd:	b8 01 00 00 00       	mov    eax,0x1
c000bec2:	89 cb                	mov    ebx,ecx
c000bec4:	d3 e0                	shl    eax,cl
c000bec6:	c1 eb 05             	shr    ebx,0x5
c000bec9:	f7 d0                	not    eax
c000becb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bece:	5b                   	pop    ebx
c000becf:	c3                   	ret    

c000bed0 <Virt::swapIDToSector(unsigned long)>:
c000bed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bed4:	0f af 05 0c 80 02 c0 	imul   eax,DWORD PTR ds:0xc002800c
c000bedb:	03 05 14 80 02 c0    	add    eax,DWORD PTR ds:0xc0028014
c000bee1:	c3                   	ret    

c000bee2 <Virt::allocateSwapfilePage()>:
c000bee2:	55                   	push   ebp
c000bee3:	31 d2                	xor    edx,edx
c000bee5:	57                   	push   edi
c000bee6:	56                   	push   esi
c000bee7:	53                   	push   ebx
c000bee8:	83 ec 0c             	sub    esp,0xc
c000beeb:	8b 0d 0c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002800c
c000bef1:	a1 10 80 02 c0       	mov    eax,ds:0xc0028010
c000bef6:	f7 f1                	div    ecx
c000bef8:	39 0d 10 80 02 c0    	cmp    DWORD PTR ds:0xc0028010,ecx
c000befe:	72 2d                	jb     c000bf2d <Virt::allocateSwapfilePage()+0x4b>
c000bf00:	8b 35 ec 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028cec
c000bf06:	8b 16                	mov    edx,DWORD PTR [esi]
c000bf08:	f6 c2 01             	test   dl,0x1
c000bf0b:	74 3c                	je     c000bf49 <Virt::allocateSwapfilePage()+0x67>
c000bf0d:	31 c9                	xor    ecx,ecx
c000bf0f:	bf 01 00 00 00       	mov    edi,0x1
c000bf14:	eb 12                	jmp    c000bf28 <Virt::allocateSwapfilePage()+0x46>
c000bf16:	89 fd                	mov    ebp,edi
c000bf18:	89 ca                	mov    edx,ecx
c000bf1a:	d3 e5                	shl    ebp,cl
c000bf1c:	c1 ea 05             	shr    edx,0x5
c000bf1f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bf22:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bf24:	85 ea                	test   edx,ebp
c000bf26:	74 2a                	je     c000bf52 <Virt::allocateSwapfilePage()+0x70>
c000bf28:	41                   	inc    ecx
c000bf29:	39 c8                	cmp    eax,ecx
c000bf2b:	77 e9                	ja     c000bf16 <Virt::allocateSwapfilePage()+0x34>
c000bf2d:	83 ec 0c             	sub    esp,0xc
c000bf30:	68 ac 4f 02 c0       	push   0xc0024fac
c000bf35:	e8 6f 92 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	31 c9                	xor    ecx,ecx
c000bf3f:	83 c4 0c             	add    esp,0xc
c000bf42:	89 c8                	mov    eax,ecx
c000bf44:	5b                   	pop    ebx
c000bf45:	5e                   	pop    esi
c000bf46:	5f                   	pop    edi
c000bf47:	5d                   	pop    ebp
c000bf48:	c3                   	ret    
c000bf49:	89 f3                	mov    ebx,esi
c000bf4b:	bd 01 00 00 00       	mov    ebp,0x1
c000bf50:	31 c9                	xor    ecx,ecx
c000bf52:	09 ea                	or     edx,ebp
c000bf54:	89 c8                	mov    eax,ecx
c000bf56:	89 13                	mov    DWORD PTR [ebx],edx
c000bf58:	83 c4 0c             	add    esp,0xc
c000bf5b:	5b                   	pop    ebx
c000bf5c:	5e                   	pop    esi
c000bf5d:	5f                   	pop    edi
c000bf5e:	5d                   	pop    ebp
c000bf5f:	c3                   	ret    

c000bf60 <Virt::virtualMemorySetup()>:
c000bf60:	53                   	push   ebx
c000bf61:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf66:	6a 0f                	push   0xf
c000bf68:	53                   	push   ebx
c000bf69:	43                   	inc    ebx
c000bf6a:	e8 d9 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf6f:	58                   	pop    eax
c000bf70:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf76:	5a                   	pop    edx
c000bf77:	75 ed                	jne    c000bf66 <Virt::virtualMemorySetup()+0x6>
c000bf79:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf7e:	6a 00                	push   0x0
c000bf80:	53                   	push   ebx
c000bf81:	43                   	inc    ebx
c000bf82:	e8 c1 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf87:	59                   	pop    ecx
c000bf88:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf8e:	58                   	pop    eax
c000bf8f:	75 ed                	jne    c000bf7e <Virt::virtualMemorySetup()+0x1e>
c000bf91:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf96:	6a 0f                	push   0xf
c000bf98:	53                   	push   ebx
c000bf99:	43                   	inc    ebx
c000bf9a:	e8 a9 fd ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf9f:	58                   	pop    eax
c000bfa0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bfa6:	5a                   	pop    edx
c000bfa7:	75 ed                	jne    c000bf96 <Virt::virtualMemorySetup()+0x36>
c000bfa9:	5b                   	pop    ebx
c000bfaa:	c3                   	ret    

c000bfab <Virt::setupPageSwapping(int)>:
c000bfab:	53                   	push   ebx
c000bfac:	83 ec 0c             	sub    esp,0xc
c000bfaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bfb3:	a1 88 91 02 c0       	mov    eax,ds:0xc0029188
c000bfb8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bfbe:	8b 10                	mov    edx,DWORD PTR [eax]
c000bfc0:	53                   	push   ebx
c000bfc1:	c1 e3 0b             	shl    ebx,0xb
c000bfc4:	68 c3 4f 02 c0       	push   0xc0024fc3
c000bfc9:	50                   	push   eax
c000bfca:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bfcd:	89 1d 10 80 02 c0    	mov    DWORD PTR ds:0xc0028010,ebx
c000bfd3:	c6 05 18 80 02 c0 43 	mov    BYTE PTR ds:0xc0028018,0x43
c000bfda:	c1 eb 08             	shr    ebx,0x8
c000bfdd:	a3 14 80 02 c0       	mov    ds:0xc0028014,eax
c000bfe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bfe5:	c7 05 0c 80 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002800c,0x8
c000bfef:	e8 f3 dd ff ff       	call   c0009de7 <malloc>
c000bff4:	83 c4 0c             	add    esp,0xc
c000bff7:	89 c1                	mov    ecx,eax
c000bff9:	a3 ec 8c 02 c0       	mov    ds:0xc0028cec,eax
c000bffe:	31 d2                	xor    edx,edx
c000c000:	a1 10 80 02 c0       	mov    eax,ds:0xc0028010
c000c005:	f7 35 0c 80 02 c0    	div    DWORD PTR ds:0xc002800c
c000c00b:	c1 e8 05             	shr    eax,0x5
c000c00e:	50                   	push   eax
c000c00f:	6a 00                	push   0x0
c000c011:	51                   	push   ecx
c000c012:	e8 7d 46 ff ff       	call   c0000694 <memset>
c000c017:	83 c4 18             	add    esp,0x18
c000c01a:	5b                   	pop    ebx
c000c01b:	c3                   	ret    

c000c01c <VAS::VAS()>:
c000c01c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c020:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c02b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c036:	a3 f0 8c 02 c0       	mov    ds:0xc0028cf0,eax
c000c03b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c03f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000c043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c047:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000c04a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c04e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000c055:	90                   	nop
c000c056:	c3                   	ret    
c000c057:	90                   	nop

c000c058 <VAS::VAS(VAS*)>:
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c071:	83 ec 0c             	sub    esp,0xc
c000c074:	68 14 4e 02 c0       	push   0xc0024e14
c000c079:	e8 2b 91 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000c07e:	83 c4 10             	add    esp,0x10
c000c081:	90                   	nop
c000c082:	83 c4 0c             	add    esp,0xc
c000c085:	c3                   	ret    

c000c086 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000c086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c08a:	89 c2                	mov    edx,eax
c000c08c:	c1 e8 0a             	shr    eax,0xa
c000c08f:	c1 ea 16             	shr    edx,0x16
c000c092:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c097:	19 c9                	sbb    ecx,ecx
c000c099:	c1 e2 0c             	shl    edx,0xc
c000c09c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c0a2:	25 fc 0f 00 00       	and    eax,0xffc
c000c0a7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c0ae:	01 d0                	add    eax,edx
c000c0b0:	c3                   	ret    
c000c0b1:	90                   	nop

c000c0b2 <VAS::getPageTableEntry(unsigned long)>:
c000c0b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b6:	89 ca                	mov    edx,ecx
c000c0b8:	c1 e9 0a             	shr    ecx,0xa
c000c0bb:	c1 ea 16             	shr    edx,0x16
c000c0be:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c0c4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c0ca:	c1 e0 0c             	shl    eax,0xc
c000c0cd:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c0d0:	c3                   	ret    

c000c0d1 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c0d1:	57                   	push   edi
c000c0d2:	56                   	push   esi
c000c0d3:	be 01 00 00 00       	mov    esi,0x1
c000c0d8:	53                   	push   ebx
c000c0d9:	83 ec 10             	sub    esp,0x10
c000c0dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c0e0:	c1 eb 0c             	shr    ebx,0xc
c000c0e3:	eb 3f                	jmp    c000c124 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c0e5:	83 ec 08             	sub    esp,0x8
c000c0e8:	57                   	push   edi
c000c0e9:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c000c0ef:	e8 be ff ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0f9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0fd:	f6 c4 04             	test   ah,0x4
c000c100:	75 5f                	jne    c000c161 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c102:	80 fa 04             	cmp    dl,0x4
c000c105:	74 78                	je     c000c17f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c107:	80 fa 02             	cmp    dl,0x2
c000c10a:	0f 84 88 00 00 00    	je     c000c198 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c110:	80 fa 03             	cmp    dl,0x3
c000c113:	0f 84 ad 00 00 00    	je     c000c1c6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c119:	fe ca                	dec    dl
c000c11b:	0f 84 92 00 00 00    	je     c000c1b3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c121:	43                   	inc    ebx
c000c122:	31 f6                	xor    esi,esi
c000c124:	53                   	push   ebx
c000c125:	89 df                	mov    edi,ebx
c000c127:	e8 51 fc ff ff       	call   c000bd7d <Virt::getPageState(unsigned long)>
c000c12c:	c1 e7 0c             	shl    edi,0xc
c000c12f:	59                   	pop    ecx
c000c130:	84 c0                	test   al,al
c000c132:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c136:	75 ad                	jne    c000c0e5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c138:	83 ec 0c             	sub    esp,0xc
c000c13b:	68 da 4f 02 c0       	push   0xc0024fda
c000c140:	e8 64 90 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000c145:	58                   	pop    eax
c000c146:	5a                   	pop    edx
c000c147:	57                   	push   edi
c000c148:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c000c14e:	e8 5f ff ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	8b 00                	mov    eax,DWORD PTR [eax]
c000c158:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c15c:	f6 c4 04             	test   ah,0x4
c000c15f:	74 c0                	je     c000c121 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c161:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c165:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c16a:	83 ec 0c             	sub    esp,0xc
c000c16d:	50                   	push   eax
c000c16e:	e8 a8 e2 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c173:	83 c4 10             	add    esp,0x10
c000c176:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c17a:	80 fa 04             	cmp    dl,0x4
c000c17d:	75 88                	jne    c000c107 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c17f:	89 f0                	mov    eax,esi
c000c181:	84 c0                	test   al,al
c000c183:	75 47                	jne    c000c1cc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c185:	c7 44 24 20 38 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024e38
c000c18d:	83 c4 10             	add    esp,0x10
c000c190:	5b                   	pop    ebx
c000c191:	5e                   	pop    esi
c000c192:	5f                   	pop    edi
c000c193:	e9 11 90 00 00       	jmp    c00151a9 <Krnl::panic(char const*)>
c000c198:	89 f0                	mov    eax,esi
c000c19a:	84 c0                	test   al,al
c000c19c:	75 15                	jne    c000c1b3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c19e:	83 ec 0c             	sub    esp,0xc
c000c1a1:	68 f6 4f 02 c0       	push   0xc0024ff6
c000c1a6:	e8 fe 8f 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000c1ab:	83 c4 10             	add    esp,0x10
c000c1ae:	e9 6e ff ff ff       	jmp    c000c121 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c1b3:	83 ec 08             	sub    esp,0x8
c000c1b6:	6a 00                	push   0x0
c000c1b8:	53                   	push   ebx
c000c1b9:	e8 8a fb ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c1be:	83 c4 10             	add    esp,0x10
c000c1c1:	e9 5b ff ff ff       	jmp    c000c121 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c1c6:	89 f0                	mov    eax,esi
c000c1c8:	84 c0                	test   al,al
c000c1ca:	75 15                	jne    c000c1e1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c1cc:	83 ec 08             	sub    esp,0x8
c000c1cf:	6a 00                	push   0x0
c000c1d1:	53                   	push   ebx
c000c1d2:	e8 71 fb ff ff       	call   c000bd48 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	83 c4 10             	add    esp,0x10
c000c1dd:	5b                   	pop    ebx
c000c1de:	5e                   	pop    esi
c000c1df:	5f                   	pop    edi
c000c1e0:	c3                   	ret    
c000c1e1:	c7 44 24 20 12 50 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025012
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	5b                   	pop    ebx
c000c1ed:	5e                   	pop    esi
c000c1ee:	5f                   	pop    edi
c000c1ef:	e9 b5 8f 00 00       	jmp    c00151a9 <Krnl::panic(char const*)>

c000c1f4 <VAS::freeAllocatedPages(unsigned long)>:
c000c1f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c1f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c1fc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c200:	74 09                	je     c000c20b <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c202:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c206:	e9 c6 fe ff ff       	jmp    c000c0d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000c20b:	c7 44 24 04 5c 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e5c
c000c213:	e9 af 0e 00 00       	jmp    c000d0c7 <Dbg::kprintf(char const*, ...)>

c000c218 <VAS::virtualToPhysical(unsigned long)>:
c000c218:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c21c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c220:	e8 8d fe ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c000c225:	5a                   	pop    edx
c000c226:	8b 00                	mov    eax,DWORD PTR [eax]
c000c228:	59                   	pop    ecx
c000c229:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c22e:	c3                   	ret    
c000c22f:	90                   	nop

c000c230 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c230:	55                   	push   ebp
c000c231:	57                   	push   edi
c000c232:	56                   	push   esi
c000c233:	53                   	push   ebx
c000c234:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c238:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c23c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c240:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c244:	85 db                	test   ebx,ebx
c000c246:	7e 22                	jle    c000c26a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c248:	c1 e3 0c             	shl    ebx,0xc
c000c24b:	01 f3                	add    ebx,esi
c000c24d:	56                   	push   esi
c000c24e:	81 c6 00 10 00 00    	add    esi,0x1000
c000c254:	55                   	push   ebp
c000c255:	e8 58 fe ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c000c25a:	5a                   	pop    edx
c000c25b:	59                   	pop    ecx
c000c25c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c25e:	21 f9                	and    ecx,edi
c000c260:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c264:	39 f3                	cmp    ebx,esi
c000c266:	89 08                	mov    DWORD PTR [eax],ecx
c000c268:	75 e3                	jne    c000c24d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c26a:	5b                   	pop    ebx
c000c26b:	5e                   	pop    esi
c000c26c:	5f                   	pop    edi
c000c26d:	5d                   	pop    ebp
c000c26e:	c3                   	ret    
c000c26f:	90                   	nop

c000c270 <VAS::setToWriteCombining(unsigned long, int)>:
c000c270:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c275:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c27b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c282:	75 01                	jne    c000c285 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c284:	c3                   	ret    
c000c285:	68 80 00 00 00       	push   0x80
c000c28a:	6a ff                	push   0xffffffff
c000c28c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c290:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c298:	e8 93 ff ff ff       	call   c000c230 <VAS::reflagRange(unsigned long, int, int, int)>
c000c29d:	83 c4 14             	add    esp,0x14
c000c2a0:	c3                   	ret    
c000c2a1:	90                   	nop

c000c2a2 <VAS::mapOtherVASIn(bool, VAS*)>:
c000c2a2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c2a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2ab:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c2ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c2b2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c2b5:	19 c0                	sbb    eax,eax
c000c2b7:	83 ca 03             	or     edx,0x3
c000c2ba:	83 e0 fc             	and    eax,0xfffffffc
c000c2bd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c2c4:	0f 20 d8             	mov    eax,cr3
c000c2c7:	0f 22 d8             	mov    cr3,eax
c000c2ca:	c3                   	ret    
c000c2cb:	90                   	nop

c000c2cc <VAS::~VAS()>:
c000c2cc:	83 ec 2c             	sub    esp,0x2c
c000c2cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c2d7:	fa                   	cli    
c000c2d8:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000c2dd:	40                   	inc    eax
c000c2de:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000c2e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2ed:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c2f7:	6a 01                	push   0x1
c000c2f9:	50                   	push   eax
c000c2fa:	e8 a3 ff ff ff       	call   c000c2a2 <VAS::mapOtherVASIn(bool, VAS*)>
c000c2ff:	83 c4 0c             	add    esp,0xc
c000c302:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c30a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c312:	0f 8f d4 00 00 00    	jg     c000c3ec <VAS::~VAS()+0x120>
c000c318:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c31c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c31f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c323:	c1 e2 02             	shl    edx,0x2
c000c326:	01 d0                	add    eax,edx
c000c328:	8b 00                	mov    eax,DWORD PTR [eax]
c000c32a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c332:	83 e0 01             	and    eax,0x1
c000c335:	0f 84 a8 00 00 00    	je     c000c3e3 <VAS::~VAS()+0x117>
c000c33b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c343:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c34b:	7f 72                	jg     c000c3bf <VAS::~VAS()+0xf3>
c000c34d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c351:	c1 e0 0a             	shl    eax,0xa
c000c354:	89 c2                	mov    edx,eax
c000c356:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c35a:	01 d0                	add    eax,edx
c000c35c:	c1 e0 0c             	shl    eax,0xc
c000c35f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c363:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c368:	8b 00                	mov    eax,DWORD PTR [eax]
c000c36a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c36d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c373:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c377:	6a 01                	push   0x1
c000c379:	50                   	push   eax
c000c37a:	e8 07 fd ff ff       	call   c000c086 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c37f:	83 c4 0c             	add    esp,0xc
c000c382:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c386:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c38a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c38c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c394:	25 01 04 00 00       	and    eax,0x401
c000c399:	3d 01 04 00 00       	cmp    eax,0x401
c000c39e:	75 19                	jne    c000c3b9 <VAS::~VAS()+0xed>
c000c3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3a4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3a9:	83 ec 0c             	sub    esp,0xc
c000c3ac:	50                   	push   eax
c000c3ad:	e8 69 e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3b2:	83 c4 10             	add    esp,0x10
c000c3b5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3b9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c3bd:	eb 84                	jmp    c000c343 <VAS::~VAS()+0x77>
c000c3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3c3:	25 00 04 00 00       	and    eax,0x400
c000c3c8:	74 19                	je     c000c3e3 <VAS::~VAS()+0x117>
c000c3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3d3:	83 ec 0c             	sub    esp,0xc
c000c3d6:	50                   	push   eax
c000c3d7:	e8 3f e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c3dc:	83 c4 10             	add    esp,0x10
c000c3df:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3e3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c3e7:	e9 1e ff ff ff       	jmp    c000c30a <VAS::~VAS()+0x3e>
c000c3ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3f3:	83 ec 0c             	sub    esp,0xc
c000c3f6:	50                   	push   eax
c000c3f7:	e8 d5 fc ff ff       	call   c000c0d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000c3fc:	83 c4 10             	add    esp,0x10
c000c3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c403:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c406:	83 ec 0c             	sub    esp,0xc
c000c409:	50                   	push   eax
c000c40a:	e8 0c e0 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000c40f:	83 c4 10             	add    esp,0x10
c000c412:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c41a:	c1 e0 02             	shl    eax,0x2
c000c41d:	83 ec 08             	sub    esp,0x8
c000c420:	50                   	push   eax
c000c421:	68 80 4e 02 c0       	push   0xc0024e80
c000c426:	e8 9c 0c 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000c42b:	83 c4 10             	add    esp,0x10
c000c42e:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000c433:	48                   	dec    eax
c000c434:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000c439:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000c43e:	85 c0                	test   eax,eax
c000c440:	75 01                	jne    c000c443 <VAS::~VAS()+0x177>
c000c442:	fb                   	sti    
c000c443:	90                   	nop
c000c444:	83 c4 2c             	add    esp,0x2c
c000c447:	c3                   	ret    

c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c448:	55                   	push   ebp
c000c449:	57                   	push   edi
c000c44a:	56                   	push   esi
c000c44b:	53                   	push   ebx
c000c44c:	83 ec 1c             	sub    esp,0x1c
c000c44f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c453:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c457:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c45d:	77 08                	ja     c000c467 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c45f:	0f 20 d8             	mov    eax,cr3
c000c462:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c465:	75 47                	jne    c000c4ae <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c467:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c46b:	09 d8                	or     eax,ebx
c000c46d:	a9 ff 0f 00 00       	test   eax,0xfff
c000c472:	75 57                	jne    c000c4cb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c474:	89 de                	mov    esi,ebx
c000c476:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c479:	c1 ee 16             	shr    esi,0x16
c000c47c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c483:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c487:	74 54                	je     c000c4dd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c489:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c48d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c493:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c497:	c1 e6 0c             	shl    esi,0xc
c000c49a:	c1 eb 0a             	shr    ebx,0xa
c000c49d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c4a3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c4a6:	83 c4 1c             	add    esp,0x1c
c000c4a9:	5b                   	pop    ebx
c000c4aa:	5e                   	pop    esi
c000c4ab:	5f                   	pop    edi
c000c4ac:	5d                   	pop    ebp
c000c4ad:	c3                   	ret    
c000c4ae:	83 ec 0c             	sub    esp,0xc
c000c4b1:	68 a0 4e 02 c0       	push   0xc0024ea0
c000c4b6:	e8 0c 0c 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000c4bb:	83 c4 10             	add    esp,0x10
c000c4be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c4c2:	09 d8                	or     eax,ebx
c000c4c4:	a9 ff 0f 00 00       	test   eax,0xfff
c000c4c9:	74 a9                	je     c000c474 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c4cb:	83 ec 0c             	sub    esp,0xc
c000c4ce:	68 08 4f 02 c0       	push   0xc0024f08
c000c4d3:	e8 d1 8c 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000c4d8:	83 c4 10             	add    esp,0x10
c000c4db:	eb 97                	jmp    c000c474 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c4dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4e1:	e8 b8 df ff ff       	call   c000a49e <Phys::allocatePage()>
c000c4e6:	83 ec 0c             	sub    esp,0xc
c000c4e9:	89 c5                	mov    ebp,eax
c000c4eb:	8b 0d f0 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028cf0
c000c4f1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4f5:	6a 01                	push   0x1
c000c4f7:	e8 a5 f8 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c4fc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c503:	6a 01                	push   0x1
c000c505:	50                   	push   eax
c000c506:	55                   	push   ebp
c000c507:	81 cd 07 04 00 00    	or     ebp,0x407
c000c50d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c511:	51                   	push   ecx
c000c512:	e8 27 02 00 00       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c517:	83 c4 1c             	add    esp,0x1c
c000c51a:	68 00 10 00 00       	push   0x1000
c000c51f:	6a 00                	push   0x0
c000c521:	50                   	push   eax
c000c522:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c526:	e8 69 41 ff ff       	call   c0000694 <memset>
c000c52b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c52f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c532:	e8 9a fb ff ff       	call   c000c0d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000c537:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c53b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c53e:	83 c4 10             	add    esp,0x10
c000c541:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c544:	e9 40 ff ff ff       	jmp    c000c489 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c549:	90                   	nop

c000c54a <VAS::allocatePages(int, int)>:
c000c54a:	55                   	push   ebp
c000c54b:	57                   	push   edi
c000c54c:	56                   	push   esi
c000c54d:	53                   	push   ebx
c000c54e:	83 ec 1c             	sub    esp,0x1c
c000c551:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c555:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c55a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c560:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c566:	83 e0 01             	and    eax,0x1
c000c569:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c56d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c571:	0f 85 cc 00 00 00    	jne    c000c643 <VAS::allocatePages(int, int)+0xf9>
c000c577:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c57a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c57e:	85 c0                	test   eax,eax
c000c580:	0f 84 a1 00 00 00    	je     c000c627 <VAS::allocatePages(int, int)+0xdd>
c000c586:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c58a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c58e:	c1 e6 0c             	shl    esi,0xc
c000c591:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c595:	85 c0                	test   eax,eax
c000c597:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c59a:	7e 33                	jle    c000c5cf <VAS::allocatePages(int, int)+0x85>
c000c59c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c5a0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5a4:	81 cd 00 04 00 00    	or     ebp,0x400
c000c5aa:	e8 ef de ff ff       	call   c000a49e <Phys::allocatePage()>
c000c5af:	55                   	push   ebp
c000c5b0:	53                   	push   ebx
c000c5b1:	50                   	push   eax
c000c5b2:	57                   	push   edi
c000c5b3:	e8 90 fe ff ff       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c5b8:	83 c4 10             	add    esp,0x10
c000c5bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c5c0:	74 03                	je     c000c5c5 <VAS::allocatePages(int, int)+0x7b>
c000c5c2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c5c5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c5cb:	39 de                	cmp    esi,ebx
c000c5cd:	75 db                	jne    c000c5aa <VAS::allocatePages(int, int)+0x60>
c000c5cf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c5d4:	75 12                	jne    c000c5e8 <VAS::allocatePages(int, int)+0x9e>
c000c5d6:	0f 20 d8             	mov    eax,cr3
c000c5d9:	0f 22 d8             	mov    cr3,eax
c000c5dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5e0:	83 c4 1c             	add    esp,0x1c
c000c5e3:	5b                   	pop    ebx
c000c5e4:	5e                   	pop    esi
c000c5e5:	5f                   	pop    edi
c000c5e6:	5d                   	pop    ebp
c000c5e7:	c3                   	ret    
c000c5e8:	c1 ee 0a             	shr    esi,0xa
c000c5eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5ef:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c5f5:	c1 eb 0a             	shr    ebx,0xa
c000c5f8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c5fe:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c604:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c60a:	39 c3                	cmp    ebx,eax
c000c60c:	77 ce                	ja     c000c5dc <VAS::allocatePages(int, int)+0x92>
c000c60e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c617:	39 d8                	cmp    eax,ebx
c000c619:	73 f3                	jae    c000c60e <VAS::allocatePages(int, int)+0xc4>
c000c61b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c61f:	83 c4 1c             	add    esp,0x1c
c000c622:	5b                   	pop    ebx
c000c623:	5e                   	pop    esi
c000c624:	5f                   	pop    edi
c000c625:	5d                   	pop    ebp
c000c626:	c3                   	ret    
c000c627:	83 ec 0c             	sub    esp,0xc
c000c62a:	68 2c 4f 02 c0       	push   0xc0024f2c
c000c62f:	e8 75 8b 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000c634:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c637:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c63b:	83 c4 10             	add    esp,0x10
c000c63e:	e9 43 ff ff ff       	jmp    c000c586 <VAS::allocatePages(int, int)+0x3c>
c000c643:	83 ec 0c             	sub    esp,0xc
c000c646:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c64a:	e8 52 f7 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c64f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c653:	83 c4 10             	add    esp,0x10
c000c656:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c65b:	0f 87 9b 00 00 00    	ja     c000c6fc <VAS::allocatePages(int, int)+0x1b2>
c000c661:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c665:	85 d2                	test   edx,edx
c000c667:	7e 3c                	jle    c000c6a5 <VAS::allocatePages(int, int)+0x15b>
c000c669:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c66d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c671:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c675:	c1 e5 0c             	shl    ebp,0xc
c000c678:	81 ce 00 04 00 00    	or     esi,0x400
c000c67e:	01 dd                	add    ebp,ebx
c000c680:	e8 19 de ff ff       	call   c000a49e <Phys::allocatePage()>
c000c685:	56                   	push   esi
c000c686:	53                   	push   ebx
c000c687:	50                   	push   eax
c000c688:	57                   	push   edi
c000c689:	e8 ba fd ff ff       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c68e:	83 c4 10             	add    esp,0x10
c000c691:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c696:	74 03                	je     c000c69b <VAS::allocatePages(int, int)+0x151>
c000c698:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c69b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6a1:	39 dd                	cmp    ebp,ebx
c000c6a3:	75 db                	jne    c000c680 <VAS::allocatePages(int, int)+0x136>
c000c6a5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c6aa:	0f 84 26 ff ff ff    	je     c000c5d6 <VAS::allocatePages(int, int)+0x8c>
c000c6b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c6b8:	89 d3                	mov    ebx,edx
c000c6ba:	c1 e0 0c             	shl    eax,0xc
c000c6bd:	c1 eb 0a             	shr    ebx,0xa
c000c6c0:	01 d0                	add    eax,edx
c000c6c2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c6c8:	c1 e8 0a             	shr    eax,0xa
c000c6cb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c6d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6d6:	2d 00 00 40 00       	sub    eax,0x400000
c000c6db:	39 c3                	cmp    ebx,eax
c000c6dd:	0f 87 f9 fe ff ff    	ja     c000c5dc <VAS::allocatePages(int, int)+0x92>
c000c6e3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c6e6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c6ec:	39 d8                	cmp    eax,ebx
c000c6ee:	73 f3                	jae    c000c6e3 <VAS::allocatePages(int, int)+0x199>
c000c6f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6f4:	83 c4 1c             	add    esp,0x1c
c000c6f7:	5b                   	pop    ebx
c000c6f8:	5e                   	pop    esi
c000c6f9:	5f                   	pop    edi
c000c6fa:	5d                   	pop    ebp
c000c6fb:	c3                   	ret    
c000c6fc:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c701:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c707:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c70e:	0f 84 4d ff ff ff    	je     c000c661 <VAS::allocatePages(int, int)+0x117>
c000c714:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c71c:	e9 40 ff ff ff       	jmp    c000c661 <VAS::allocatePages(int, int)+0x117>
c000c721:	90                   	nop

c000c722 <VAS::setCPUSpecific(unsigned long)>:
c000c722:	83 ec 0c             	sub    esp,0xc
c000c725:	6a 05                	push   0x5
c000c727:	68 00 00 40 c2       	push   0xc2400000
c000c72c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c734:	e8 0f fd ff ff       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c739:	83 c4 1c             	add    esp,0x1c
c000c73c:	c3                   	ret    
c000c73d:	90                   	nop

c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c73e:	55                   	push   ebp
c000c73f:	57                   	push   edi
c000c740:	56                   	push   esi
c000c741:	53                   	push   ebx
c000c742:	83 ec 1c             	sub    esp,0x1c
c000c745:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c74a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c74e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c754:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c758:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c75e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c762:	83 e0 01             	and    eax,0x1
c000c765:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c769:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c76d:	85 c0                	test   eax,eax
c000c76f:	7e 39                	jle    c000c7aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c771:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c775:	89 f3                	mov    ebx,esi
c000c777:	c1 e0 0c             	shl    eax,0xc
c000c77a:	01 f0                	add    eax,esi
c000c77c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c780:	55                   	push   ebp
c000c781:	53                   	push   ebx
c000c782:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c786:	29 f0                	sub    eax,esi
c000c788:	01 d8                	add    eax,ebx
c000c78a:	50                   	push   eax
c000c78b:	57                   	push   edi
c000c78c:	e8 b7 fc ff ff       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c791:	83 c4 10             	add    esp,0x10
c000c794:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c799:	74 03                	je     c000c79e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c79b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c79e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c7a4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c7a8:	75 d6                	jne    c000c780 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c7aa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c7af:	75 10                	jne    c000c7c1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c7b1:	0f 20 d8             	mov    eax,cr3
c000c7b4:	0f 22 d8             	mov    cr3,eax
c000c7b7:	83 c4 1c             	add    esp,0x1c
c000c7ba:	89 f0                	mov    eax,esi
c000c7bc:	5b                   	pop    ebx
c000c7bd:	5e                   	pop    esi
c000c7be:	5f                   	pop    edi
c000c7bf:	5d                   	pop    ebp
c000c7c0:	c3                   	ret    
c000c7c1:	89 f3                	mov    ebx,esi
c000c7c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c7c7:	c1 eb 0a             	shr    ebx,0xa
c000c7ca:	c1 e0 0c             	shl    eax,0xc
c000c7cd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c7d3:	01 f0                	add    eax,esi
c000c7d5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c7db:	c1 e8 0a             	shr    eax,0xa
c000c7de:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7e3:	2d 00 00 40 00       	sub    eax,0x400000
c000c7e8:	39 c3                	cmp    ebx,eax
c000c7ea:	77 cb                	ja     c000c7b7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c7ec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c7ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c7f5:	39 d8                	cmp    eax,ebx
c000c7f7:	73 f3                	jae    c000c7ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c7f9:	83 c4 1c             	add    esp,0x1c
c000c7fc:	89 f0                	mov    eax,esi
c000c7fe:	5b                   	pop    ebx
c000c7ff:	5e                   	pop    esi
c000c800:	5f                   	pop    edi
c000c801:	5d                   	pop    ebp
c000c802:	c3                   	ret    
c000c803:	90                   	nop

c000c804 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c804:	55                   	push   ebp
c000c805:	57                   	push   edi
c000c806:	56                   	push   esi
c000c807:	53                   	push   ebx
c000c808:	83 ec 1c             	sub    esp,0x1c
c000c80b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c80f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c813:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c817:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c81b:	a9 ff 0f 00 00       	test   eax,0xfff
c000c820:	75 4a                	jne    c000c86c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c822:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c826:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c829:	c1 eb 16             	shr    ebx,0x16
c000c82c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c833:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c837:	74 4d                	je     c000c886 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c839:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c83d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c841:	c1 e8 0a             	shr    eax,0xa
c000c844:	80 fa 01             	cmp    dl,0x1
c000c847:	19 d2                	sbb    edx,edx
c000c849:	c1 e3 0c             	shl    ebx,0xc
c000c84c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c850:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c856:	25 fc 0f 00 00       	and    eax,0xffc
c000c85b:	01 d8                	add    eax,ebx
c000c85d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c864:	83 c4 1c             	add    esp,0x1c
c000c867:	5b                   	pop    ebx
c000c868:	5e                   	pop    esi
c000c869:	5f                   	pop    edi
c000c86a:	5d                   	pop    ebp
c000c86b:	c3                   	ret    
c000c86c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	68 58 4f 02 c0       	push   0xc0024f58
c000c878:	e8 2c 89 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000c87d:	83 c4 10             	add    esp,0x10
c000c880:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c884:	eb 9c                	jmp    c000c822 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c886:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c88a:	e8 0f dc ff ff       	call   c000a49e <Phys::allocatePage()>
c000c88f:	83 ec 0c             	sub    esp,0xc
c000c892:	89 c5                	mov    ebp,eax
c000c894:	8b 0d f0 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028cf0
c000c89a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c89e:	6a 01                	push   0x1
c000c8a0:	e8 fc f4 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c8a5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c8ac:	6a 01                	push   0x1
c000c8ae:	50                   	push   eax
c000c8af:	55                   	push   ebp
c000c8b0:	81 cd 07 04 00 00    	or     ebp,0x407
c000c8b6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c8ba:	51                   	push   ecx
c000c8bb:	e8 7e fe ff ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8c0:	83 c4 1c             	add    esp,0x1c
c000c8c3:	68 00 10 00 00       	push   0x1000
c000c8c8:	6a 00                	push   0x0
c000c8ca:	50                   	push   eax
c000c8cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8cf:	e8 c0 3d ff ff       	call   c0000694 <memset>
c000c8d4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c8d8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c8db:	e8 f1 f7 ff ff       	call   c000c0d1 <Virt::freeKernelVirtualPages(unsigned long)>
c000c8e0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c8e3:	83 c4 10             	add    esp,0x10
c000c8e6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c8e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8ed:	e9 47 ff ff ff       	jmp    c000c839 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c8f2 <VAS::VAS(bool)>:
c000c8f2:	53                   	push   ebx
c000c8f3:	83 ec 28             	sub    esp,0x28
c000c8f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8fa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c8fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c902:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c909:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c90d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c914:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c918:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c91c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c91f:	e8 7a db ff ff       	call   c000a49e <Phys::allocatePage()>
c000c924:	89 c2                	mov    edx,eax
c000c926:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c92a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c92d:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c000c933:	83 ec 0c             	sub    esp,0xc
c000c936:	6a 01                	push   0x1
c000c938:	e8 64 f4 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	89 c2                	mov    edx,eax
c000c942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c946:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c949:	83 ec 0c             	sub    esp,0xc
c000c94c:	6a 03                	push   0x3
c000c94e:	6a 01                	push   0x1
c000c950:	52                   	push   edx
c000c951:	50                   	push   eax
c000c952:	53                   	push   ebx
c000c953:	e8 e6 fd ff ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c958:	83 c4 20             	add    esp,0x20
c000c95b:	89 c2                	mov    edx,eax
c000c95d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c961:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c964:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c96c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c974:	7f 1c                	jg     c000c992 <VAS::VAS(bool)+0xa0>
c000c976:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c97a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c97d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c981:	c1 e2 02             	shl    edx,0x2
c000c984:	01 d0                	add    eax,edx
c000c986:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c98c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c990:	eb da                	jmp    c000c96c <VAS::VAS(bool)+0x7a>
c000c992:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c99a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c9a2:	7f 7a                	jg     c000ca1e <VAS::VAS(bool)+0x12c>
c000c9a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c9a8:	2d 00 02 00 00       	sub    eax,0x200
c000c9ad:	c1 e0 0c             	shl    eax,0xc
c000c9b0:	83 c8 03             	or     eax,0x3
c000c9b3:	89 c2                	mov    edx,eax
c000c9b5:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000c9ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9c0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9c6:	83 e0 10             	and    eax,0x10
c000c9c9:	84 c0                	test   al,al
c000c9cb:	74 07                	je     c000c9d4 <VAS::VAS(bool)+0xe2>
c000c9cd:	b8 00 01 00 00       	mov    eax,0x100
c000c9d2:	eb 05                	jmp    c000c9d9 <VAS::VAS(bool)+0xe7>
c000c9d4:	b8 00 00 00 00       	mov    eax,0x0
c000c9d9:	09 d0                	or     eax,edx
c000c9db:	89 c1                	mov    ecx,eax
c000c9dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9e8:	c1 e2 02             	shl    edx,0x2
c000c9eb:	01 d0                	add    eax,edx
c000c9ed:	89 ca                	mov    edx,ecx
c000c9ef:	89 10                	mov    DWORD PTR [eax],edx
c000c9f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c9f5:	2d 40 03 00 00       	sub    eax,0x340
c000c9fa:	83 f8 7f             	cmp    eax,0x7f
c000c9fd:	77 16                	ja     c000ca15 <VAS::VAS(bool)+0x123>
c000c9ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca06:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca0a:	c1 e2 02             	shl    edx,0x2
c000ca0d:	01 d0                	add    eax,edx
c000ca0f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ca15:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ca19:	e9 7c ff ff ff       	jmp    c000c99a <VAS::VAS(bool)+0xa8>
c000ca1e:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ca23:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca29:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca2f:	83 e0 10             	and    eax,0x10
c000ca32:	84 c0                	test   al,al
c000ca34:	74 07                	je     c000ca3d <VAS::VAS(bool)+0x14b>
c000ca36:	b8 03 41 00 00       	mov    eax,0x4103
c000ca3b:	eb 05                	jmp    c000ca42 <VAS::VAS(bool)+0x150>
c000ca3d:	b8 03 40 00 00       	mov    eax,0x4003
c000ca42:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ca46:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ca49:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ca4f:	89 02                	mov    DWORD PTR [edx],eax
c000ca51:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ca56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca5c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ca62:	83 ec 08             	sub    esp,0x8
c000ca65:	50                   	push   eax
c000ca66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca6a:	e8 b3 fc ff ff       	call   c000c722 <VAS::setCPUSpecific(unsigned long)>
c000ca6f:	83 c4 10             	add    esp,0x10
c000ca72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca76:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000ca79:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ca7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca84:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca8a:	83 e0 10             	and    eax,0x10
c000ca8d:	84 c0                	test   al,al
c000ca8f:	74 07                	je     c000ca98 <VAS::VAS(bool)+0x1a6>
c000ca91:	b8 00 01 00 00       	mov    eax,0x100
c000ca96:	eb 05                	jmp    c000ca9d <VAS::VAS(bool)+0x1ab>
c000ca98:	b8 00 00 00 00       	mov    eax,0x0
c000ca9d:	09 c2                	or     edx,eax
c000ca9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000caa3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000caa6:	05 fc 0f 00 00       	add    eax,0xffc
c000caab:	83 ca 03             	or     edx,0x3
c000caae:	89 10                	mov    DWORD PTR [eax],edx
c000cab0:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000cab5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cabb:	83 ec 0c             	sub    esp,0xc
c000cabe:	50                   	push   eax
c000cabf:	e8 76 1e 00 00       	call   c000e93a <Device::getName()>
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	83 ec 08             	sub    esp,0x8
c000caca:	68 2c 50 02 c0       	push   0xc002502c
c000cacf:	50                   	push   eax
c000cad0:	e8 07 3d ff ff       	call   c00007dc <strcmp>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	85 c0                	test   eax,eax
c000cada:	0f 94 c0             	sete   al
c000cadd:	84 c0                	test   al,al
c000cadf:	0f 84 87 00 00 00    	je     c000cb6c <VAS::VAS(bool)+0x27a>
c000cae5:	fa                   	cli    
c000cae6:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000caeb:	40                   	inc    eax
c000caec:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000caf1:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000caf6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cafc:	05 7c 09 00 00       	add    eax,0x97c
c000cb01:	83 ec 0c             	sub    esp,0xc
c000cb04:	50                   	push   eax
c000cb05:	e8 cc cd ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000cb0a:	83 c4 10             	add    esp,0x10
c000cb0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cb12:	89 c3                	mov    ebx,eax
c000cb14:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000cb19:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cb1f:	05 7c 09 00 00       	add    eax,0x97c
c000cb24:	83 ec 0c             	sub    esp,0xc
c000cb27:	50                   	push   eax
c000cb28:	e8 a9 cd ff ff       	call   c00098d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000cb2d:	83 c4 10             	add    esp,0x10
c000cb30:	83 ec 08             	sub    esp,0x8
c000cb33:	50                   	push   eax
c000cb34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb38:	e8 75 f5 ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c000cb3d:	83 c4 10             	add    esp,0x10
c000cb40:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb42:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cb47:	6a 11                	push   0x11
c000cb49:	53                   	push   ebx
c000cb4a:	50                   	push   eax
c000cb4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb4f:	e8 f4 f8 ff ff       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c000cb54:	83 c4 10             	add    esp,0x10
c000cb57:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000cb5c:	48                   	dec    eax
c000cb5d:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000cb62:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000cb67:	85 c0                	test   eax,eax
c000cb69:	75 01                	jne    c000cb6c <VAS::VAS(bool)+0x27a>
c000cb6b:	fb                   	sti    
c000cb6c:	90                   	nop
c000cb6d:	83 c4 28             	add    esp,0x28
c000cb70:	5b                   	pop    ebx
c000cb71:	c3                   	ret    

c000cb72 <VAS::evict(unsigned long)>:
c000cb72:	55                   	push   ebp
c000cb73:	57                   	push   edi
c000cb74:	56                   	push   esi
c000cb75:	53                   	push   ebx
c000cb76:	83 ec 1c             	sub    esp,0x1c
c000cb79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb7d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb85:	e8 58 f3 ff ff       	call   c000bee2 <Virt::allocateSwapfilePage()>
c000cb8a:	89 c7                	mov    edi,eax
c000cb8c:	a1 0c 80 02 c0       	mov    eax,ds:0xc002800c
c000cb91:	85 c0                	test   eax,eax
c000cb93:	7e 3d                	jle    c000cbd2 <VAS::evict(unsigned long)+0x60>
c000cb95:	89 ee                	mov    esi,ebp
c000cb97:	31 db                	xor    ebx,ebx
c000cb99:	83 ec 0c             	sub    esp,0xc
c000cb9c:	57                   	push   edi
c000cb9d:	e8 2e f3 ff ff       	call   c000bed0 <Virt::swapIDToSector(unsigned long)>
c000cba2:	89 34 24             	mov    DWORD PTR [esp],esi
c000cba5:	01 d8                	add    eax,ebx
c000cba7:	6a 01                	push   0x1
c000cba9:	31 d2                	xor    edx,edx
c000cbab:	43                   	inc    ebx
c000cbac:	52                   	push   edx
c000cbad:	81 c6 00 02 00 00    	add    esi,0x200
c000cbb3:	50                   	push   eax
c000cbb4:	0f be 05 18 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028018
c000cbbb:	ff 34 85 7c 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f84]
c000cbc2:	e8 ef 3e 00 00       	call   c0010ab6 <LogicalDisk::write(unsigned long long, int, void*)>
c000cbc7:	83 c4 20             	add    esp,0x20
c000cbca:	39 1d 0c 80 02 c0    	cmp    DWORD PTR ds:0xc002800c,ebx
c000cbd0:	7f c7                	jg     c000cb99 <VAS::evict(unsigned long)+0x27>
c000cbd2:	83 ec 08             	sub    esp,0x8
c000cbd5:	c1 e7 0b             	shl    edi,0xb
c000cbd8:	55                   	push   ebp
c000cbd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbdd:	e8 d0 f4 ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c000cbe2:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbe4:	89 d3                	mov    ebx,edx
c000cbe6:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cbec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cbf2:	09 d7                	or     edi,edx
c000cbf4:	89 38                	mov    DWORD PTR [eax],edi
c000cbf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cbf9:	ff 05 e8 8c 02 c0    	inc    DWORD PTR ds:0xc0028ce8
c000cbff:	e8 17 d8 ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c000cc04:	0f 20 d8             	mov    eax,cr3
c000cc07:	0f 22 d8             	mov    cr3,eax
c000cc0a:	ff 35 e8 8c 02 c0    	push   DWORD PTR ds:0xc0028ce8
c000cc10:	55                   	push   ebp
c000cc11:	53                   	push   ebx
c000cc12:	68 7c 4f 02 c0       	push   0xc0024f7c
c000cc17:	e8 ab 04 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cc1c:	a1 e4 8c 02 c0       	mov    eax,ds:0xc0028ce4
c000cc21:	c7 44 24 50 3a 50 02 c0 	mov    DWORD PTR [esp+0x50],0xc002503a
c000cc29:	8d 50 01             	lea    edx,[eax+0x1]
c000cc2c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cc30:	89 15 e4 8c 02 c0    	mov    DWORD PTR ds:0xc0028ce4,edx
c000cc36:	83 c4 3c             	add    esp,0x3c
c000cc39:	5b                   	pop    ebx
c000cc3a:	5e                   	pop    esi
c000cc3b:	5f                   	pop    edi
c000cc3c:	5d                   	pop    ebp
c000cc3d:	e9 85 04 00 00       	jmp    c000d0c7 <Dbg::kprintf(char const*, ...)>

c000cc42 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cc42:	55                   	push   ebp
c000cc43:	57                   	push   edi
c000cc44:	56                   	push   esi
c000cc45:	53                   	push   ebx
c000cc46:	83 ec 14             	sub    esp,0x14
c000cc49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4d:	68 4b 50 02 c0       	push   0xc002504b
c000cc52:	e8 70 04 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cc57:	83 c4 10             	add    esp,0x10
c000cc5a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cc5e:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cc64:	74 20                	je     c000cc86 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cc66:	83 ec 08             	sub    esp,0x8
c000cc69:	55                   	push   ebp
c000cc6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6e:	e8 3f f4 ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c000cc73:	83 c4 10             	add    esp,0x10
c000cc76:	89 c3                	mov    ebx,eax
c000cc78:	85 c0                	test   eax,eax
c000cc7a:	74 0a                	je     c000cc86 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cc7c:	8b 38                	mov    edi,DWORD PTR [eax]
c000cc7e:	f7 c7 01 00 00 00    	test   edi,0x1
c000cc84:	74 0a                	je     c000cc90 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cc86:	31 c0                	xor    eax,eax
c000cc88:	83 c4 0c             	add    esp,0xc
c000cc8b:	5b                   	pop    ebx
c000cc8c:	5e                   	pop    esi
c000cc8d:	5f                   	pop    edi
c000cc8e:	5d                   	pop    ebp
c000cc8f:	c3                   	ret    
c000cc90:	e8 09 d8 ff ff       	call   c000a49e <Phys::allocatePage()>
c000cc95:	c1 ef 0b             	shr    edi,0xb
c000cc98:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc9a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cca0:	09 c2                	or     edx,eax
c000cca2:	81 ca 01 08 00 00    	or     edx,0x801
c000cca8:	89 13                	mov    DWORD PTR [ebx],edx
c000ccaa:	8b 0d 0c 80 02 c0    	mov    ecx,DWORD PTR ds:0xc002800c
c000ccb0:	85 c9                	test   ecx,ecx
c000ccb2:	7e 3d                	jle    c000ccf1 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000ccb4:	89 ee                	mov    esi,ebp
c000ccb6:	31 db                	xor    ebx,ebx
c000ccb8:	83 ec 0c             	sub    esp,0xc
c000ccbb:	57                   	push   edi
c000ccbc:	e8 0f f2 ff ff       	call   c000bed0 <Virt::swapIDToSector(unsigned long)>
c000ccc1:	89 34 24             	mov    DWORD PTR [esp],esi
c000ccc4:	01 d8                	add    eax,ebx
c000ccc6:	6a 01                	push   0x1
c000ccc8:	31 d2                	xor    edx,edx
c000ccca:	43                   	inc    ebx
c000cccb:	52                   	push   edx
c000cccc:	81 c6 00 02 00 00    	add    esi,0x200
c000ccd2:	50                   	push   eax
c000ccd3:	0f be 05 18 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028018
c000ccda:	ff 34 85 7c 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f84]
c000cce1:	e8 64 3d 00 00       	call   c0010a4a <LogicalDisk::read(unsigned long long, int, void*)>
c000cce6:	83 c4 20             	add    esp,0x20
c000cce9:	39 1d 0c 80 02 c0    	cmp    DWORD PTR ds:0xc002800c,ebx
c000ccef:	7f c7                	jg     c000ccb8 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000ccf1:	a1 e8 8c 02 c0       	mov    eax,ds:0xc0028ce8
c000ccf6:	48                   	dec    eax
c000ccf7:	52                   	push   edx
c000ccf8:	a3 e8 8c 02 c0       	mov    ds:0xc0028ce8,eax
c000ccfd:	50                   	push   eax
c000ccfe:	55                   	push   ebp
c000ccff:	68 5e 50 02 c0       	push   0xc002505e
c000cd04:	e8 be 03 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cd09:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd0c:	e8 a1 f1 ff ff       	call   c000beb2 <Virt::freeSwapfilePage(unsigned long)>
c000cd11:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000cd16:	83 c4 10             	add    esp,0x10
c000cd19:	48                   	dec    eax
c000cd1a:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000cd1f:	85 c0                	test   eax,eax
c000cd21:	74 1d                	je     c000cd40 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cd23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cd27:	25 ff 0f 00 00       	and    eax,0xfff
c000cd2c:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cd31:	77 10                	ja     c000cd43 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cd33:	0f 20 d8             	mov    eax,cr3
c000cd36:	0f 22 d8             	mov    cr3,eax
c000cd39:	b0 01                	mov    al,0x1
c000cd3b:	e9 48 ff ff ff       	jmp    c000cc88 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cd40:	fb                   	sti    
c000cd41:	eb e0                	jmp    c000cd23 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cd43:	83 ec 0c             	sub    esp,0xc
c000cd46:	68 73 50 02 c0       	push   0xc0025073
c000cd4b:	e8 77 03 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cd50:	83 c4 10             	add    esp,0x10
c000cd53:	eb de                	jmp    c000cd33 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cd55:	90                   	nop

c000cd56 <VAS::scanForEviction()>:
c000cd56:	57                   	push   edi
c000cd57:	31 ff                	xor    edi,edi
c000cd59:	56                   	push   esi
c000cd5a:	53                   	push   ebx
c000cd5b:	83 ec 10             	sub    esp,0x10
c000cd5e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd65:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd6b:	75 0e                	jne    c000cd7b <VAS::scanForEviction()+0x25>
c000cd6d:	89 da                	mov    edx,ebx
c000cd6f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd72:	c1 ea 16             	shr    edx,0x16
c000cd75:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd79:	74 4e                	je     c000cdc9 <VAS::scanForEviction()+0x73>
c000cd7b:	53                   	push   ebx
c000cd7c:	56                   	push   esi
c000cd7d:	e8 30 f3 ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c000cd82:	5a                   	pop    edx
c000cd83:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd85:	59                   	pop    ecx
c000cd86:	89 d1                	mov    ecx,edx
c000cd88:	81 e1 01 08 00 00    	and    ecx,0x801
c000cd8e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cd94:	74 3e                	je     c000cdd4 <VAS::scanForEviction()+0x7e>
c000cd96:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cd9c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cda2:	76 2b                	jbe    c000cdcf <VAS::scanForEviction()+0x79>
c000cda4:	47                   	inc    edi
c000cda5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cdac:	83 ff 03             	cmp    edi,0x3
c000cdaf:	74 32                	je     c000cde3 <VAS::scanForEviction()+0x8d>
c000cdb1:	31 db                	xor    ebx,ebx
c000cdb3:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cdb9:	75 c0                	jne    c000cd7b <VAS::scanForEviction()+0x25>
c000cdbb:	89 da                	mov    edx,ebx
c000cdbd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cdc0:	c1 ea 16             	shr    edx,0x16
c000cdc3:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cdc7:	75 b2                	jne    c000cd7b <VAS::scanForEviction()+0x25>
c000cdc9:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cdcf:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cdd2:	eb 91                	jmp    c000cd65 <VAS::scanForEviction()+0xf>
c000cdd4:	f6 c2 20             	test   dl,0x20
c000cdd7:	74 13                	je     c000cdec <VAS::scanForEviction()+0x96>
c000cdd9:	83 e2 df             	and    edx,0xffffffdf
c000cddc:	89 10                	mov    DWORD PTR [eax],edx
c000cdde:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cde1:	eb b3                	jmp    c000cd96 <VAS::scanForEviction()+0x40>
c000cde3:	83 c4 10             	add    esp,0x10
c000cde6:	31 c0                	xor    eax,eax
c000cde8:	5b                   	pop    ebx
c000cde9:	5e                   	pop    esi
c000cdea:	5f                   	pop    edi
c000cdeb:	c3                   	ret    
c000cdec:	83 ec 08             	sub    esp,0x8
c000cdef:	89 d0                	mov    eax,edx
c000cdf1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cdf6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cdfa:	53                   	push   ebx
c000cdfb:	68 83 50 02 c0       	push   0xc0025083
c000ce00:	e8 c2 02 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000ce05:	58                   	pop    eax
c000ce06:	5a                   	pop    edx
c000ce07:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce0a:	56                   	push   esi
c000ce0b:	e8 62 fd ff ff       	call   c000cb72 <VAS::evict(unsigned long)>
c000ce10:	59                   	pop    ecx
c000ce11:	5b                   	pop    ebx
c000ce12:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ce15:	68 97 50 02 c0       	push   0xc0025097
c000ce1a:	e8 a8 02 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000ce1f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce2d:	83 c4 10             	add    esp,0x10
c000ce30:	5b                   	pop    ebx
c000ce31:	5e                   	pop    esi
c000ce32:	5f                   	pop    edi
c000ce33:	c3                   	ret    

c000ce34 <mapVASFirstTime>:
c000ce34:	55                   	push   ebp
c000ce35:	57                   	push   edi
c000ce36:	56                   	push   esi
c000ce37:	53                   	push   ebx
c000ce38:	83 ec 0c             	sub    esp,0xc
c000ce3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ce40:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ce43:	4a                   	dec    edx
c000ce44:	0f 84 fe 00 00 00    	je     c000cf48 <mapVASFirstTime+0x114>
c000ce4a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ce4d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ce50:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ce55:	c1 e5 15             	shl    ebp,0x15
c000ce58:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ce5d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ce63:	29 eb                	sub    ebx,ebp
c000ce65:	29 ef                	sub    edi,ebp
c000ce67:	83 ec 08             	sub    esp,0x8
c000ce6a:	53                   	push   ebx
c000ce6b:	68 c3 50 02 c0       	push   0xc00250c3
c000ce70:	e8 52 02 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000ce75:	e8 24 d6 ff ff       	call   c000a49e <Phys::allocatePage()>
c000ce7a:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ce81:	6a 01                	push   0x1
c000ce83:	53                   	push   ebx
c000ce84:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce8a:	50                   	push   eax
c000ce8b:	56                   	push   esi
c000ce8c:	e8 ad f8 ff ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce91:	83 c4 20             	add    esp,0x20
c000ce94:	39 fb                	cmp    ebx,edi
c000ce96:	75 cf                	jne    c000ce67 <mapVASFirstTime+0x33>
c000ce98:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ce9d:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cea2:	29 eb                	sub    ebx,ebp
c000cea4:	29 ef                	sub    edi,ebp
c000cea6:	83 ec 08             	sub    esp,0x8
c000cea9:	53                   	push   ebx
c000ceaa:	68 df 50 02 c0       	push   0xc00250df
c000ceaf:	e8 13 02 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000ceb4:	58                   	pop    eax
c000ceb5:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ceb9:	5a                   	pop    edx
c000ceba:	19 c0                	sbb    eax,eax
c000cebc:	83 e0 04             	and    eax,0x4
c000cebf:	05 03 04 00 00       	add    eax,0x403
c000cec4:	50                   	push   eax
c000cec5:	68 f3 50 02 c0       	push   0xc00250f3
c000ceca:	e8 f8 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cecf:	e8 ca d5 ff ff       	call   c000a49e <Phys::allocatePage()>
c000ced4:	59                   	pop    ecx
c000ced5:	89 c5                	mov    ebp,eax
c000ced7:	58                   	pop    eax
c000ced8:	55                   	push   ebp
c000ced9:	68 01 51 02 c0       	push   0xc0025101
c000cede:	e8 e4 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cee3:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cee7:	19 d2                	sbb    edx,edx
c000cee9:	83 e2 04             	and    edx,0x4
c000ceec:	81 c2 03 04 00 00    	add    edx,0x403
c000cef2:	89 14 24             	mov    DWORD PTR [esp],edx
c000cef5:	6a 01                	push   0x1
c000cef7:	53                   	push   ebx
c000cef8:	55                   	push   ebp
c000cef9:	56                   	push   esi
c000cefa:	e8 3f f8 ff ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ceff:	83 c4 18             	add    esp,0x18
c000cf02:	53                   	push   ebx
c000cf03:	56                   	push   esi
c000cf04:	e8 a9 f1 ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c000cf09:	5a                   	pop    edx
c000cf0a:	59                   	pop    ecx
c000cf0b:	ff 30                	push   DWORD PTR [eax]
c000cf0d:	68 1d 51 02 c0       	push   0xc002511d
c000cf12:	e8 b0 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cf17:	0f 20 d8             	mov    eax,cr3
c000cf1a:	83 c4 0c             	add    esp,0xc
c000cf1d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cf23:	56                   	push   esi
c000cf24:	50                   	push   eax
c000cf25:	68 28 51 02 c0       	push   0xc0025128
c000cf2a:	e8 98 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cf2f:	83 c4 10             	add    esp,0x10
c000cf32:	39 df                	cmp    edi,ebx
c000cf34:	0f 85 6c ff ff ff    	jne    c000cea6 <mapVASFirstTime+0x72>
c000cf3a:	0f 20 d8             	mov    eax,cr3
c000cf3d:	0f 22 d8             	mov    cr3,eax
c000cf40:	83 c4 0c             	add    esp,0xc
c000cf43:	5b                   	pop    ebx
c000cf44:	5e                   	pop    esi
c000cf45:	5f                   	pop    edi
c000cf46:	5d                   	pop    ebp
c000cf47:	c3                   	ret    
c000cf48:	83 ec 0c             	sub    esp,0xc
c000cf4b:	68 aa 50 02 c0       	push   0xc00250aa
c000cf50:	e8 72 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cf55:	83 c4 10             	add    esp,0x10
c000cf58:	83 c4 0c             	add    esp,0xc
c000cf5b:	5b                   	pop    ebx
c000cf5c:	5e                   	pop    esi
c000cf5d:	5f                   	pop    edi
c000cf5e:	5d                   	pop    ebp
c000cf5f:	c3                   	ret    

c000cf60 <__cxa_atexit>:
c000cf60:	31 c0                	xor    eax,eax
c000cf62:	c3                   	ret    

c000cf63 <__cxa_finalize>:
c000cf63:	c3                   	ret    

c000cf64 <__stack_chk_fail>:
c000cf64:	55                   	push   ebp
c000cf65:	89 e5                	mov    ebp,esp
c000cf67:	83 ec 14             	sub    esp,0x14
c000cf6a:	68 40 51 02 c0       	push   0xc0025140
c000cf6f:	e8 53 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cf74:	58                   	pop    eax
c000cf75:	5a                   	pop    edx
c000cf76:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cf79:	68 90 51 02 c0       	push   0xc0025190
c000cf7e:	e8 44 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cf83:	59                   	pop    ecx
c000cf84:	58                   	pop    eax
c000cf85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf88:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf8b:	68 90 51 02 c0       	push   0xc0025190
c000cf90:	e8 32 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cf95:	5a                   	pop    edx
c000cf96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf99:	59                   	pop    ecx
c000cf9a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf9c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf9f:	68 90 51 02 c0       	push   0xc0025190
c000cfa4:	e8 1e 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cfa9:	5a                   	pop    edx
c000cfaa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cfad:	59                   	pop    ecx
c000cfae:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfb2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cfb5:	68 90 51 02 c0       	push   0xc0025190
c000cfba:	e8 08 01 00 00       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000cfbf:	c7 04 24 98 51 02 c0 	mov    DWORD PTR [esp],0xc0025198
c000cfc6:	e8 de 81 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000cfcb:	83 c4 10             	add    esp,0x10
c000cfce:	c9                   	leave  
c000cfcf:	c3                   	ret    

c000cfd0 <__cxa_pure_virtual>:
c000cfd0:	83 ec 18             	sub    esp,0x18
c000cfd3:	68 b0 51 02 c0       	push   0xc00251b0
c000cfd8:	e8 cc 81 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000cfdd:	83 c4 1c             	add    esp,0x1c
c000cfe0:	c3                   	ret    

c000cfe1 <operator new[](unsigned long)>:
c000cfe1:	e9 01 ce ff ff       	jmp    c0009de7 <malloc>

c000cfe6 <operator delete(void*, unsigned long)>:
c000cfe6:	e9 1c ce ff ff       	jmp    c0009e07 <rfree>

c000cfeb <operator delete[](void*)>:
c000cfeb:	e9 17 ce ff ff       	jmp    c0009e07 <rfree>

c000cff0 <operator delete[](void*, unsigned long)>:
c000cff0:	e9 12 ce ff ff       	jmp    c0009e07 <rfree>

c000cff5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cff5:	55                   	push   ebp
c000cff6:	b9 11 00 00 00       	mov    ecx,0x11
c000cffb:	57                   	push   edi
c000cffc:	56                   	push   esi
c000cffd:	be 96 4c 02 c0       	mov    esi,0xc0024c96
c000d002:	53                   	push   ebx
c000d003:	83 ec 20             	sub    esp,0x20
c000d006:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d00a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d00e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d012:	fc                   	cld    
c000d013:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d015:	89 ee                	mov    esi,ebp
c000d017:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d01b:	eb 02                	jmp    c000d01f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000d01d:	89 c6                	mov    esi,eax
c000d01f:	31 d2                	xor    edx,edx
c000d021:	41                   	inc    ecx
c000d022:	89 f0                	mov    eax,esi
c000d024:	f7 f3                	div    ebx
c000d026:	39 de                	cmp    esi,ebx
c000d028:	73 f3                	jae    c000d01d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000d02a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d02d:	eb 02                	jmp    c000d031 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000d02f:	89 c5                	mov    ebp,eax
c000d031:	31 d2                	xor    edx,edx
c000d033:	49                   	dec    ecx
c000d034:	89 e8                	mov    eax,ebp
c000d036:	f7 f3                	div    ebx
c000d038:	39 dd                	cmp    ebp,ebx
c000d03a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000d03e:	88 11                	mov    BYTE PTR [ecx],dl
c000d040:	73 ed                	jae    c000d02f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000d042:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d046:	83 c4 20             	add    esp,0x20
c000d049:	5b                   	pop    ebx
c000d04a:	5e                   	pop    esi
c000d04b:	5f                   	pop    edi
c000d04c:	5d                   	pop    ebp
c000d04d:	c3                   	ret    

c000d04e <Dbg::logc(char)>:
c000d04e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d052:	f6 05 e0 8b 02 c0 10 	test   BYTE PTR ds:0xc0028be0,0x10
c000d059:	75 12                	jne    c000d06d <Dbg::logc(char)+0x1f>
c000d05b:	ba fd 03 00 00       	mov    edx,0x3fd
c000d060:	ec                   	in     al,dx
c000d061:	a8 20                	test   al,0x20
c000d063:	74 fb                	je     c000d060 <Dbg::logc(char)+0x12>
c000d065:	ba f8 03 00 00       	mov    edx,0x3f8
c000d06a:	88 c8                	mov    al,cl
c000d06c:	ee                   	out    dx,al
c000d06d:	c3                   	ret    

c000d06e <Dbg::logs(char*)>:
c000d06e:	53                   	push   ebx
c000d06f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000d073:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d076:	84 c0                	test   al,al
c000d078:	74 0f                	je     c000d089 <Dbg::logs(char*)+0x1b>
c000d07a:	50                   	push   eax
c000d07b:	43                   	inc    ebx
c000d07c:	e8 cd ff ff ff       	call   c000d04e <Dbg::logc(char)>
c000d081:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d084:	5a                   	pop    edx
c000d085:	84 c0                	test   al,al
c000d087:	75 f1                	jne    c000d07a <Dbg::logs(char*)+0xc>
c000d089:	5b                   	pop    ebx
c000d08a:	c3                   	ret    

c000d08b <Dbg::logWriteInt(unsigned int)>:
c000d08b:	83 ec 10             	sub    esp,0x10
c000d08e:	6a 0a                	push   0xa
c000d090:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d094:	50                   	push   eax
c000d095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d099:	e8 57 ff ff ff       	call   c000cff5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d09e:	50                   	push   eax
c000d09f:	e8 ca ff ff ff       	call   c000d06e <Dbg::logs(char*)>
c000d0a4:	83 c4 20             	add    esp,0x20
c000d0a7:	c3                   	ret    

c000d0a8 <Dbg::logWriteIntBase(unsigned int, int)>:
c000d0a8:	83 ec 10             	sub    esp,0x10
c000d0ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d0af:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0b3:	50                   	push   eax
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	e8 38 ff ff ff       	call   c000cff5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d0bd:	50                   	push   eax
c000d0be:	e8 ab ff ff ff       	call   c000d06e <Dbg::logs(char*)>
c000d0c3:	83 c4 20             	add    esp,0x20
c000d0c6:	c3                   	ret    

c000d0c7 <Dbg::kprintf(char const*, ...)>:
c000d0c7:	55                   	push   ebp
c000d0c8:	57                   	push   edi
c000d0c9:	56                   	push   esi
c000d0ca:	53                   	push   ebx
c000d0cb:	83 ec 0c             	sub    esp,0xc
c000d0ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d0d2:	f6 05 e0 8b 02 c0 10 	test   BYTE PTR ds:0xc0028be0,0x10
c000d0d9:	74 08                	je     c000d0e3 <Dbg::kprintf(char const*, ...)+0x1c>
c000d0db:	83 c4 0c             	add    esp,0xc
c000d0de:	5b                   	pop    ebx
c000d0df:	5e                   	pop    esi
c000d0e0:	5f                   	pop    edi
c000d0e1:	5d                   	pop    ebp
c000d0e2:	c3                   	ret    
c000d0e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d0e7:	31 db                	xor    ebx,ebx
c000d0e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0ed:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d0f0:	84 c0                	test   al,al
c000d0f2:	74 e7                	je     c000d0db <Dbg::kprintf(char const*, ...)+0x14>
c000d0f4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d0f7:	3c 25                	cmp    al,0x25
c000d0f9:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d0fc:	75 44                	jne    c000d142 <Dbg::kprintf(char const*, ...)+0x7b>
c000d0fe:	83 c3 02             	add    ebx,0x2
c000d101:	8a 07                	mov    al,BYTE PTR [edi]
c000d103:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d106:	83 e8 25             	sub    eax,0x25
c000d109:	3c 53                	cmp    al,0x53
c000d10b:	0f 87 c9 00 00 00    	ja     c000d1da <Dbg::kprintf(char const*, ...)+0x113>
c000d111:	0f b6 c0             	movzx  eax,al
c000d114:	ff 24 85 c4 51 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdae3c]
c000d11b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d11f:	89 c8                	mov    eax,ecx
c000d121:	83 c1 04             	add    ecx,0x4
c000d124:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d128:	ff 30                	push   DWORD PTR [eax]
c000d12a:	e8 5c ff ff ff       	call   c000d08b <Dbg::logWriteInt(unsigned int)>
c000d12f:	5f                   	pop    edi
c000d130:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d134:	84 c0                	test   al,al
c000d136:	74 a3                	je     c000d0db <Dbg::kprintf(char const*, ...)+0x14>
c000d138:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d13b:	3c 25                	cmp    al,0x25
c000d13d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d140:	74 bc                	je     c000d0fe <Dbg::kprintf(char const*, ...)+0x37>
c000d142:	50                   	push   eax
c000d143:	89 eb                	mov    ebx,ebp
c000d145:	e8 04 ff ff ff       	call   c000d04e <Dbg::logc(char)>
c000d14a:	89 fd                	mov    ebp,edi
c000d14c:	58                   	pop    eax
c000d14d:	eb e1                	jmp    c000d130 <Dbg::kprintf(char const*, ...)+0x69>
c000d14f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d153:	89 c8                	mov    eax,ecx
c000d155:	83 c1 04             	add    ecx,0x4
c000d158:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d15c:	ff 30                	push   DWORD PTR [eax]
c000d15e:	e8 0b ff ff ff       	call   c000d06e <Dbg::logs(char*)>
c000d163:	58                   	pop    eax
c000d164:	eb ca                	jmp    c000d130 <Dbg::kprintf(char const*, ...)+0x69>
c000d166:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d16a:	89 d0                	mov    eax,edx
c000d16c:	83 c2 04             	add    edx,0x4
c000d16f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d173:	ff 30                	push   DWORD PTR [eax]
c000d175:	e8 11 ff ff ff       	call   c000d08b <Dbg::logWriteInt(unsigned int)>
c000d17a:	58                   	pop    eax
c000d17b:	eb b3                	jmp    c000d130 <Dbg::kprintf(char const*, ...)+0x69>
c000d17d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d181:	89 d0                	mov    eax,edx
c000d183:	83 c2 04             	add    edx,0x4
c000d186:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d189:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d18d:	50                   	push   eax
c000d18e:	e8 bb fe ff ff       	call   c000d04e <Dbg::logc(char)>
c000d193:	58                   	pop    eax
c000d194:	eb 9a                	jmp    c000d130 <Dbg::kprintf(char const*, ...)+0x69>
c000d196:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d19a:	89 c8                	mov    eax,ecx
c000d19c:	83 c1 04             	add    ecx,0x4
c000d19f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d1a3:	6a 10                	push   0x10
c000d1a5:	ff 30                	push   DWORD PTR [eax]
c000d1a7:	e8 fc fe ff ff       	call   c000d0a8 <Dbg::logWriteIntBase(unsigned int, int)>
c000d1ac:	59                   	pop    ecx
c000d1ad:	5f                   	pop    edi
c000d1ae:	eb 80                	jmp    c000d130 <Dbg::kprintf(char const*, ...)+0x69>
c000d1b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1b4:	89 d0                	mov    eax,edx
c000d1b6:	83 c2 08             	add    edx,0x8
c000d1b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1bd:	6a 10                	push   0x10
c000d1bf:	ff 30                	push   DWORD PTR [eax]
c000d1c1:	e8 e2 fe ff ff       	call   c000d0a8 <Dbg::logWriteIntBase(unsigned int, int)>
c000d1c6:	58                   	pop    eax
c000d1c7:	5a                   	pop    edx
c000d1c8:	e9 63 ff ff ff       	jmp    c000d130 <Dbg::kprintf(char const*, ...)+0x69>
c000d1cd:	6a 25                	push   0x25
c000d1cf:	e8 7a fe ff ff       	call   c000d04e <Dbg::logc(char)>
c000d1d4:	58                   	pop    eax
c000d1d5:	e9 56 ff ff ff       	jmp    c000d130 <Dbg::kprintf(char const*, ...)+0x69>
c000d1da:	6a 25                	push   0x25
c000d1dc:	e8 6d fe ff ff       	call   c000d04e <Dbg::logc(char)>
c000d1e1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d1e4:	50                   	push   eax
c000d1e5:	e8 64 fe ff ff       	call   c000d04e <Dbg::logc(char)>
c000d1ea:	5a                   	pop    edx
c000d1eb:	59                   	pop    ecx
c000d1ec:	e9 3f ff ff ff       	jmp    c000d130 <Dbg::kprintf(char const*, ...)+0x69>
c000d1f1:	90                   	nop

c000d1f2 <File::read(unsigned long long, void*, int*)>:
c000d1f2:	53                   	push   ebx
c000d1f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1fb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d202:	3c 19                	cmp    al,0x19
c000d204:	77 35                	ja     c000d23b <File::read(unsigned long long, void*, int*)+0x49>
c000d206:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d20d:	85 c0                	test   eax,eax
c000d20f:	74 2a                	je     c000d23b <File::read(unsigned long long, void*, int*)+0x49>
c000d211:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d217:	85 c0                	test   eax,eax
c000d219:	74 20                	je     c000d23b <File::read(unsigned long long, void*, int*)+0x49>
c000d21b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d21f:	74 21                	je     c000d242 <File::read(unsigned long long, void*, int*)+0x50>
c000d221:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d223:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d227:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d22d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d231:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d235:	5b                   	pop    ebx
c000d236:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d239:	ff e0                	jmp    eax
c000d23b:	b8 0b 00 00 00       	mov    eax,0xb
c000d240:	eb 05                	jmp    c000d247 <File::read(unsigned long long, void*, int*)+0x55>
c000d242:	b8 05 00 00 00       	mov    eax,0x5
c000d247:	5b                   	pop    ebx
c000d248:	c3                   	ret    
c000d249:	90                   	nop

c000d24a <File::write(unsigned long long, void*, int*)>:
c000d24a:	53                   	push   ebx
c000d24b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d24f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d253:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d25a:	3c 19                	cmp    al,0x19
c000d25c:	77 35                	ja     c000d293 <File::write(unsigned long long, void*, int*)+0x49>
c000d25e:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d265:	85 c0                	test   eax,eax
c000d267:	74 2a                	je     c000d293 <File::write(unsigned long long, void*, int*)+0x49>
c000d269:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d26f:	85 c0                	test   eax,eax
c000d271:	74 20                	je     c000d293 <File::write(unsigned long long, void*, int*)+0x49>
c000d273:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d277:	74 21                	je     c000d29a <File::write(unsigned long long, void*, int*)+0x50>
c000d279:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d27b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d27f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d285:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d289:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d28d:	5b                   	pop    ebx
c000d28e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d291:	ff e0                	jmp    eax
c000d293:	b8 0b 00 00 00       	mov    eax,0xb
c000d298:	eb 05                	jmp    c000d29f <File::write(unsigned long long, void*, int*)+0x55>
c000d29a:	b8 05 00 00 00       	mov    eax,0x5
c000d29f:	5b                   	pop    ebx
c000d2a0:	c3                   	ret    
c000d2a1:	90                   	nop

c000d2a2 <Directory::read(unsigned long long, void*, int*)>:
c000d2a2:	53                   	push   ebx
c000d2a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d2a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d2ab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d2b2:	3c 19                	cmp    al,0x19
c000d2b4:	77 35                	ja     c000d2eb <Directory::read(unsigned long long, void*, int*)+0x49>
c000d2b6:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d2bd:	85 c0                	test   eax,eax
c000d2bf:	74 2a                	je     c000d2eb <Directory::read(unsigned long long, void*, int*)+0x49>
c000d2c1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2c7:	85 c0                	test   eax,eax
c000d2c9:	74 20                	je     c000d2eb <Directory::read(unsigned long long, void*, int*)+0x49>
c000d2cb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2cf:	74 21                	je     c000d2f2 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d2d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d2d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2d7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d2dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2e5:	5b                   	pop    ebx
c000d2e6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d2e9:	ff e0                	jmp    eax
c000d2eb:	b8 0b 00 00 00       	mov    eax,0xb
c000d2f0:	eb 05                	jmp    c000d2f7 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d2f2:	b8 05 00 00 00       	mov    eax,0x5
c000d2f7:	5b                   	pop    ebx
c000d2f8:	c3                   	ret    
c000d2f9:	90                   	nop

c000d2fa <Directory::write(unsigned long long, void*, int*)>:
c000d2fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2fe:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d305:	b8 0b 00 00 00       	mov    eax,0xb
c000d30a:	80 fa 19             	cmp    dl,0x19
c000d30d:	77 18                	ja     c000d327 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d30f:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000d316:	85 d2                	test   edx,edx
c000d318:	74 0d                	je     c000d327 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d31a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d321:	19 c0                	sbb    eax,eax
c000d323:	83 e0 0a             	and    eax,0xa
c000d326:	40                   	inc    eax
c000d327:	c3                   	ret    

c000d328 <File::isAtty()>:
c000d328:	31 c0                	xor    eax,eax
c000d32a:	c3                   	ret    
c000d32b:	90                   	nop

c000d32c <Directory::isAtty()>:
c000d32c:	31 c0                	xor    eax,eax
c000d32e:	c3                   	ret    
c000d32f:	90                   	nop

c000d330 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d330:	b8 0a 00 00 00       	mov    eax,0xa
c000d335:	c3                   	ret    

c000d336 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d336:	b8 0a 00 00 00       	mov    eax,0xa
c000d33b:	c3                   	ret    

c000d33c <Filesystem::allocateSwapfile(char const*, int)>:
c000d33c:	31 c0                	xor    eax,eax
c000d33e:	31 d2                	xor    edx,edx
c000d340:	c3                   	ret    
c000d341:	90                   	nop

c000d342 <File::~File()>:
c000d342:	83 ec 0c             	sub    esp,0xc
c000d345:	ba 00 54 02 c0       	mov    edx,0xc0025400
c000d34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d34e:	89 10                	mov    DWORD PTR [eax],edx
c000d350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d354:	83 ec 0c             	sub    esp,0xc
c000d357:	50                   	push   eax
c000d358:	e8 e3 e7 ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000d35d:	83 c4 10             	add    esp,0x10
c000d360:	90                   	nop
c000d361:	83 c4 0c             	add    esp,0xc
c000d364:	c3                   	ret    
c000d365:	90                   	nop

c000d366 <File::~File()>:
c000d366:	83 ec 0c             	sub    esp,0xc
c000d369:	83 ec 0c             	sub    esp,0xc
c000d36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d370:	e8 cd ff ff ff       	call   c000d342 <File::~File()>
c000d375:	83 c4 10             	add    esp,0x10
c000d378:	83 ec 08             	sub    esp,0x8
c000d37b:	68 14 01 00 00       	push   0x114
c000d380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d384:	e8 5d fc ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	83 c4 0c             	add    esp,0xc
c000d38f:	c3                   	ret    

c000d390 <Directory::~Directory()>:
c000d390:	83 ec 0c             	sub    esp,0xc
c000d393:	ba 1c 54 02 c0       	mov    edx,0xc002541c
c000d398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d39c:	89 10                	mov    DWORD PTR [eax],edx
c000d39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a2:	83 ec 0c             	sub    esp,0xc
c000d3a5:	50                   	push   eax
c000d3a6:	e8 95 e7 ff ff       	call   c000bb40 <UnixFile::~UnixFile()>
c000d3ab:	83 c4 10             	add    esp,0x10
c000d3ae:	90                   	nop
c000d3af:	83 c4 0c             	add    esp,0xc
c000d3b2:	c3                   	ret    
c000d3b3:	90                   	nop

c000d3b4 <Directory::~Directory()>:
c000d3b4:	83 ec 0c             	sub    esp,0xc
c000d3b7:	83 ec 0c             	sub    esp,0xc
c000d3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3be:	e8 cd ff ff ff       	call   c000d390 <Directory::~Directory()>
c000d3c3:	83 c4 10             	add    esp,0x10
c000d3c6:	83 ec 08             	sub    esp,0x8
c000d3c9:	68 14 01 00 00       	push   0x114
c000d3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3d2:	e8 0f fc ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000d3d7:	83 c4 10             	add    esp,0x10
c000d3da:	83 c4 0c             	add    esp,0xc
c000d3dd:	c3                   	ret    

c000d3de <Filesystem::Filesystem()>:
c000d3de:	ba 98 53 02 c0       	mov    edx,0xc0025398
c000d3e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3e7:	89 10                	mov    DWORD PTR [eax],edx
c000d3e9:	8b 15 f4 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cf4
c000d3ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3fa:	a3 f4 8c 02 c0       	mov    ds:0xc0028cf4,eax
c000d3ff:	90                   	nop
c000d400:	c3                   	ret    
c000d401:	90                   	nop

c000d402 <Filesystem::~Filesystem()>:
c000d402:	ba 98 53 02 c0       	mov    edx,0xc0025398
c000d407:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d40b:	89 10                	mov    DWORD PTR [eax],edx
c000d40d:	90                   	nop
c000d40e:	c3                   	ret    
c000d40f:	90                   	nop

c000d410 <Filesystem::~Filesystem()>:
c000d410:	83 ec 0c             	sub    esp,0xc
c000d413:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d417:	e8 e6 ff ff ff       	call   c000d402 <Filesystem::~Filesystem()>
c000d41c:	83 c4 04             	add    esp,0x4
c000d41f:	83 ec 08             	sub    esp,0x8
c000d422:	6a 08                	push   0x8
c000d424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d428:	e8 b9 fb ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000d42d:	83 c4 10             	add    esp,0x10
c000d430:	83 c4 0c             	add    esp,0xc
c000d433:	c3                   	ret    

c000d434 <Fs::getcwd(Process*, char*, int)>:
c000d434:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d438:	31 c0                	xor    eax,eax
c000d43a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d43d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d441:	7d 15                	jge    c000d458 <Fs::getcwd(Process*, char*, int)+0x24>
c000d443:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d447:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d44e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d451:	84 c9                	test   cl,cl
c000d453:	74 06                	je     c000d45b <Fs::getcwd(Process*, char*, int)+0x27>
c000d455:	40                   	inc    eax
c000d456:	eb e2                	jmp    c000d43a <Fs::getcwd(Process*, char*, int)+0x6>
c000d458:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d45b:	31 c0                	xor    eax,eax
c000d45d:	c3                   	ret    

c000d45e <Fs::initVFS()>:
c000d45e:	83 ec 18             	sub    esp,0x18
c000d461:	6a 08                	push   0x8
c000d463:	e8 7f c9 ff ff       	call   c0009de7 <malloc>
c000d468:	89 04 24             	mov    DWORD PTR [esp],eax
c000d46b:	e8 dc ed 00 00       	call   c001c24c <FAT::FAT()>
c000d470:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d477:	e8 6b c9 ff ff       	call   c0009de7 <malloc>
c000d47c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d47f:	e8 58 00 01 00       	call   c001d4dc <ISO9660::ISO9660()>
c000d484:	83 c4 1c             	add    esp,0x1c
c000d487:	c3                   	ret    

c000d488 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d488:	55                   	push   ebp
c000d489:	57                   	push   edi
c000d48a:	56                   	push   esi
c000d48b:	53                   	push   ebx
c000d48c:	81 ec 10 04 00 00    	sub    esp,0x410
c000d492:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d499:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d4a0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d4a7:	68 00 04 00 00       	push   0x400
c000d4ac:	6a 00                	push   0x0
c000d4ae:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d4b2:	56                   	push   esi
c000d4b3:	e8 dc 31 ff ff       	call   c0000694 <memset>
c000d4b8:	83 c4 10             	add    esp,0x10
c000d4bb:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d4bf:	75 0b                	jne    c000d4cc <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d4c1:	50                   	push   eax
c000d4c2:	50                   	push   eax
c000d4c3:	57                   	push   edi
c000d4c4:	56                   	push   esi
c000d4c5:	e8 86 32 ff ff       	call   c0000750 <strcpy>
c000d4ca:	eb 41                	jmp    c000d50d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d4cc:	8a 07                	mov    al,BYTE PTR [edi]
c000d4ce:	3c 5c                	cmp    al,0x5c
c000d4d0:	74 04                	je     c000d4d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d4d2:	3c 2f                	cmp    al,0x2f
c000d4d4:	75 18                	jne    c000d4ee <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d4d6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d4d9:	3c 60                	cmp    al,0x60
c000d4db:	7e 03                	jle    c000d4e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d4dd:	83 e8 20             	sub    eax,0x20
c000d4e0:	88 04 24             	mov    BYTE PTR [esp],al
c000d4e3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d4ea:	50                   	push   eax
c000d4eb:	50                   	push   eax
c000d4ec:	eb 18                	jmp    c000d506 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d4ee:	50                   	push   eax
c000d4ef:	50                   	push   eax
c000d4f0:	55                   	push   ebp
c000d4f1:	56                   	push   esi
c000d4f2:	e8 59 32 ff ff       	call   c0000750 <strcpy>
c000d4f7:	5a                   	pop    edx
c000d4f8:	59                   	pop    ecx
c000d4f9:	68 ca 6c 02 c0       	push   0xc0026cca
c000d4fe:	56                   	push   esi
c000d4ff:	e8 8c 33 ff ff       	call   c0000890 <strcat>
c000d504:	5d                   	pop    ebp
c000d505:	58                   	pop    eax
c000d506:	57                   	push   edi
c000d507:	56                   	push   esi
c000d508:	e8 83 33 ff ff       	call   c0000890 <strcat>
c000d50d:	83 c4 10             	add    esp,0x10
c000d510:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d513:	3c 60                	cmp    al,0x60
c000d515:	7e 03                	jle    c000d51a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d517:	83 e8 20             	sub    eax,0x20
c000d51a:	88 04 24             	mov    BYTE PTR [esp],al
c000d51d:	88 03                	mov    BYTE PTR [ebx],al
c000d51f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d526:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d52c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d530:	bf 03 00 00 00       	mov    edi,0x3
c000d535:	b8 03 00 00 00       	mov    eax,0x3
c000d53a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d53d:	84 d2                	test   dl,dl
c000d53f:	0f 84 91 00 00 00    	je     c000d5d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d545:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d548:	80 fa 5c             	cmp    dl,0x5c
c000d54b:	74 05                	je     c000d552 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d54d:	80 fa 2f             	cmp    dl,0x2f
c000d550:	75 12                	jne    c000d564 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d552:	89 c5                	mov    ebp,eax
c000d554:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d559:	74 09                	je     c000d564 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d55b:	40                   	inc    eax
c000d55c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d560:	89 cf                	mov    edi,ecx
c000d562:	eb d6                	jmp    c000d53a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d564:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d569:	75 5b                	jne    c000d5c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d56b:	80 fa 2e             	cmp    dl,0x2e
c000d56e:	75 56                	jne    c000d5c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d570:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d574:	74 19                	je     c000d58f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d576:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d57b:	74 53                	je     c000d5d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d57d:	89 f9                	mov    ecx,edi
c000d57f:	41                   	inc    ecx
c000d580:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d583:	80 fa 2f             	cmp    dl,0x2f
c000d586:	74 f7                	je     c000d57f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d588:	80 fa 5c             	cmp    dl,0x5c
c000d58b:	74 f2                	je     c000d57f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d58d:	eb d1                	jmp    c000d560 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d58f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d594:	74 3a                	je     c000d5d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d596:	83 f8 03             	cmp    eax,0x3
c000d599:	74 c5                	je     c000d560 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d59b:	41                   	inc    ecx
c000d59c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d59f:	80 fa 2f             	cmp    dl,0x2f
c000d5a2:	74 f7                	je     c000d59b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d5a4:	80 fa 5c             	cmp    dl,0x5c
c000d5a7:	74 f2                	je     c000d59b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d5a9:	48                   	dec    eax
c000d5aa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d5ae:	75 06                	jne    c000d5b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d5b0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d5b4:	eb f3                	jmp    c000d5a9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d5b6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d5ba:	74 07                	je     c000d5c3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d5bc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d5c0:	48                   	dec    eax
c000d5c1:	eb f3                	jmp    c000d5b6 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d5c3:	40                   	inc    eax
c000d5c4:	eb 9a                	jmp    c000d560 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5c6:	80 fa 2f             	cmp    dl,0x2f
c000d5c9:	74 95                	je     c000d560 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5cb:	80 fa 5c             	cmp    dl,0x5c
c000d5ce:	74 90                	je     c000d560 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5d0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d5d3:	40                   	inc    eax
c000d5d4:	eb 8a                	jmp    c000d560 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d5d6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d5da:	83 ec 0c             	sub    esp,0xc
c000d5dd:	53                   	push   ebx
c000d5de:	e8 cd 30 ff ff       	call   c00006b0 <strlen>
c000d5e3:	83 c4 10             	add    esp,0x10
c000d5e6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d5eb:	75 26                	jne    c000d613 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d5ed:	83 ec 0c             	sub    esp,0xc
c000d5f0:	53                   	push   ebx
c000d5f1:	e8 ba 30 ff ff       	call   c00006b0 <strlen>
c000d5f6:	83 c4 10             	add    esp,0x10
c000d5f9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d5fe:	74 26                	je     c000d626 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d600:	83 ec 0c             	sub    esp,0xc
c000d603:	53                   	push   ebx
c000d604:	e8 a7 30 ff ff       	call   c00006b0 <strlen>
c000d609:	83 c4 10             	add    esp,0x10
c000d60c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d611:	eb c7                	jmp    c000d5da <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d613:	83 ec 0c             	sub    esp,0xc
c000d616:	53                   	push   ebx
c000d617:	e8 94 30 ff ff       	call   c00006b0 <strlen>
c000d61c:	83 c4 10             	add    esp,0x10
c000d61f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d624:	74 c7                	je     c000d5ed <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d626:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d62c:	5b                   	pop    ebx
c000d62d:	5e                   	pop    esi
c000d62e:	5f                   	pop    edi
c000d62f:	5d                   	pop    ebp
c000d630:	c3                   	ret    
c000d631:	90                   	nop

c000d632 <File::File(char const*, Process*)>:
c000d632:	83 ec 0c             	sub    esp,0xc
c000d635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d639:	83 ec 08             	sub    esp,0x8
c000d63c:	6a 00                	push   0x0
c000d63e:	50                   	push   eax
c000d63f:	e8 1a e3 ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000d644:	83 c4 10             	add    esp,0x10
c000d647:	ba 00 54 02 c0       	mov    edx,0xc0025400
c000d64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d650:	89 10                	mov    DWORD PTR [eax],edx
c000d652:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d656:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d660:	83 c0 0d             	add    eax,0xd
c000d663:	83 ec 04             	sub    esp,0x4
c000d666:	52                   	push   edx
c000d667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d66b:	50                   	push   eax
c000d66c:	e8 17 fe ff ff       	call   c000d488 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d671:	83 c4 10             	add    esp,0x10
c000d674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d678:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d67b:	8d 50 bf             	lea    edx,[eax-0x41]
c000d67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d682:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d694:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d69a:	0f b6 c0             	movzx  eax,al
c000d69d:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	74 5e                	je     c000d706 <File::File(char const*, Process*)+0xd4>
c000d6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ac:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d6b2:	0f b6 c0             	movzx  eax,al
c000d6b5:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d6bc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d6c2:	85 c0                	test   eax,eax
c000d6c4:	75 40                	jne    c000d706 <File::File(char const*, Process*)+0xd4>
c000d6c6:	83 ec 0c             	sub    esp,0xc
c000d6c9:	68 3c 53 02 c0       	push   0xc002533c
c000d6ce:	e8 f4 f9 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000d6d3:	83 c4 10             	add    esp,0x10
c000d6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6da:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d6e0:	0f b6 c0             	movzx  eax,al
c000d6e3:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000d6ea:	83 ec 0c             	sub    esp,0xc
c000d6ed:	50                   	push   eax
c000d6ee:	e8 55 32 00 00       	call   c0010948 <LogicalDisk::mount()>
c000d6f3:	83 c4 10             	add    esp,0x10
c000d6f6:	83 ec 0c             	sub    esp,0xc
c000d6f9:	68 fb 76 02 c0       	push   0xc00276fb
c000d6fe:	e8 c4 f9 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000d703:	83 c4 10             	add    esp,0x10
c000d706:	90                   	nop
c000d707:	83 c4 0c             	add    esp,0xc
c000d70a:	c3                   	ret    
c000d70b:	90                   	nop

c000d70c <File::open(FileOpenMode)>:
c000d70c:	53                   	push   ebx
c000d70d:	b8 0b 00 00 00       	mov    eax,0xb
c000d712:	83 ec 08             	sub    esp,0x8
c000d715:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d719:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d720:	80 fa 19             	cmp    dl,0x19
c000d723:	77 40                	ja     c000d765 <File::open(FileOpenMode)+0x59>
c000d725:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000d72c:	85 d2                	test   edx,edx
c000d72e:	74 35                	je     c000d765 <File::open(FileOpenMode)+0x59>
c000d730:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d736:	85 d2                	test   edx,edx
c000d738:	74 2b                	je     c000d765 <File::open(FileOpenMode)+0x59>
c000d73a:	b8 06 00 00 00       	mov    eax,0x6
c000d73f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d743:	75 20                	jne    c000d765 <File::open(FileOpenMode)+0x59>
c000d745:	8b 02                	mov    eax,DWORD PTR [edx]
c000d747:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d74d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d751:	51                   	push   ecx
c000d752:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d755:	51                   	push   ecx
c000d756:	52                   	push   edx
c000d757:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d75a:	83 c4 10             	add    esp,0x10
c000d75d:	85 c0                	test   eax,eax
c000d75f:	75 04                	jne    c000d765 <File::open(FileOpenMode)+0x59>
c000d761:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d765:	83 c4 08             	add    esp,0x8
c000d768:	5b                   	pop    ebx
c000d769:	c3                   	ret    

c000d76a <File::close()>:
c000d76a:	53                   	push   ebx
c000d76b:	b8 0b 00 00 00       	mov    eax,0xb
c000d770:	83 ec 08             	sub    esp,0x8
c000d773:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d777:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d77e:	80 fa 19             	cmp    dl,0x19
c000d781:	77 41                	ja     c000d7c4 <File::close()+0x5a>
c000d783:	8b 1c 95 80 91 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e80]
c000d78a:	85 db                	test   ebx,ebx
c000d78c:	74 36                	je     c000d7c4 <File::close()+0x5a>
c000d78e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d795:	74 2d                	je     c000d7c4 <File::close()+0x5a>
c000d797:	b8 05 00 00 00       	mov    eax,0x5
c000d79c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7a0:	74 22                	je     c000d7c4 <File::close()+0x5a>
c000d7a2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d7a6:	8b 04 95 80 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e80]
c000d7ad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d7b3:	53                   	push   ebx
c000d7b4:	53                   	push   ebx
c000d7b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7b7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7bd:	50                   	push   eax
c000d7be:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d7c1:	83 c4 10             	add    esp,0x10
c000d7c4:	83 c4 08             	add    esp,0x8
c000d7c7:	5b                   	pop    ebx
c000d7c8:	c3                   	ret    
c000d7c9:	90                   	nop

c000d7ca <File::seek(unsigned long long)>:
c000d7ca:	56                   	push   esi
c000d7cb:	53                   	push   ebx
c000d7cc:	b8 0b 00 00 00       	mov    eax,0xb
c000d7d1:	51                   	push   ecx
c000d7d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d7d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d7da:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d7e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d7e5:	80 fa 19             	cmp    dl,0x19
c000d7e8:	77 31                	ja     c000d81b <File::seek(unsigned long long)+0x51>
c000d7ea:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000d7f1:	85 d2                	test   edx,edx
c000d7f3:	74 26                	je     c000d81b <File::seek(unsigned long long)+0x51>
c000d7f5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7fb:	85 d2                	test   edx,edx
c000d7fd:	74 1c                	je     c000d81b <File::seek(unsigned long long)+0x51>
c000d7ff:	b8 05 00 00 00       	mov    eax,0x5
c000d804:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d808:	74 11                	je     c000d81b <File::seek(unsigned long long)+0x51>
c000d80a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d80c:	53                   	push   ebx
c000d80d:	51                   	push   ecx
c000d80e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d814:	52                   	push   edx
c000d815:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d818:	83 c4 10             	add    esp,0x10
c000d81b:	5a                   	pop    edx
c000d81c:	5b                   	pop    ebx
c000d81d:	5e                   	pop    esi
c000d81e:	c3                   	ret    
c000d81f:	90                   	nop

c000d820 <File::tell(unsigned long long*)>:
c000d820:	83 ec 0c             	sub    esp,0xc
c000d823:	b8 0b 00 00 00       	mov    eax,0xb
c000d828:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d82c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d833:	80 fa 19             	cmp    dl,0x19
c000d836:	77 34                	ja     c000d86c <File::tell(unsigned long long*)+0x4c>
c000d838:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000d83f:	85 d2                	test   edx,edx
c000d841:	74 29                	je     c000d86c <File::tell(unsigned long long*)+0x4c>
c000d843:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d849:	85 d2                	test   edx,edx
c000d84b:	74 1f                	je     c000d86c <File::tell(unsigned long long*)+0x4c>
c000d84d:	b8 05 00 00 00       	mov    eax,0x5
c000d852:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d856:	74 14                	je     c000d86c <File::tell(unsigned long long*)+0x4c>
c000d858:	50                   	push   eax
c000d859:	8b 02                	mov    eax,DWORD PTR [edx]
c000d85b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d85f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d865:	52                   	push   edx
c000d866:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d869:	83 c4 10             	add    esp,0x10
c000d86c:	83 c4 0c             	add    esp,0xc
c000d86f:	c3                   	ret    

c000d870 <File::rewind()>:
c000d870:	83 ec 10             	sub    esp,0x10
c000d873:	6a 00                	push   0x0
c000d875:	6a 00                	push   0x0
c000d877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d87b:	e8 4a ff ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c000d880:	83 c4 1c             	add    esp,0x1c
c000d883:	c3                   	ret    

c000d884 <File::unlink()>:
c000d884:	83 ec 0c             	sub    esp,0xc
c000d887:	b8 0b 00 00 00       	mov    eax,0xb
c000d88c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d890:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d897:	80 f9 19             	cmp    cl,0x19
c000d89a:	77 2f                	ja     c000d8cb <File::unlink()+0x47>
c000d89c:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d8a3:	85 c9                	test   ecx,ecx
c000d8a5:	74 24                	je     c000d8cb <File::unlink()+0x47>
c000d8a7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8ad:	85 c9                	test   ecx,ecx
c000d8af:	74 1a                	je     c000d8cb <File::unlink()+0x47>
c000d8b1:	b8 06 00 00 00       	mov    eax,0x6
c000d8b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8ba:	75 0f                	jne    c000d8cb <File::unlink()+0x47>
c000d8bc:	83 c2 0d             	add    edx,0xd
c000d8bf:	50                   	push   eax
c000d8c0:	50                   	push   eax
c000d8c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8c3:	52                   	push   edx
c000d8c4:	51                   	push   ecx
c000d8c5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	83 c4 0c             	add    esp,0xc
c000d8ce:	c3                   	ret    
c000d8cf:	90                   	nop

c000d8d0 <File::rename(char const*)>:
c000d8d0:	83 ec 0c             	sub    esp,0xc
c000d8d3:	b8 0b 00 00 00       	mov    eax,0xb
c000d8d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8e3:	80 f9 19             	cmp    cl,0x19
c000d8e6:	77 32                	ja     c000d91a <File::rename(char const*)+0x4a>
c000d8e8:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d8ef:	85 c9                	test   ecx,ecx
c000d8f1:	74 27                	je     c000d91a <File::rename(char const*)+0x4a>
c000d8f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8f9:	85 c9                	test   ecx,ecx
c000d8fb:	74 1d                	je     c000d91a <File::rename(char const*)+0x4a>
c000d8fd:	b8 06 00 00 00       	mov    eax,0x6
c000d902:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d906:	75 12                	jne    c000d91a <File::rename(char const*)+0x4a>
c000d908:	83 c2 0d             	add    edx,0xd
c000d90b:	50                   	push   eax
c000d90c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d90e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d912:	52                   	push   edx
c000d913:	51                   	push   ecx
c000d914:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d917:	83 c4 10             	add    esp,0x10
c000d91a:	83 c4 0c             	add    esp,0xc
c000d91d:	c3                   	ret    

c000d91e <File::chfatattr(unsigned char, unsigned char)>:
c000d91e:	57                   	push   edi
c000d91f:	b8 0b 00 00 00       	mov    eax,0xb
c000d924:	56                   	push   esi
c000d925:	53                   	push   ebx
c000d926:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d92a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d92e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d935:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d939:	80 f9 19             	cmp    cl,0x19
c000d93c:	77 37                	ja     c000d975 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d93e:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d945:	85 c9                	test   ecx,ecx
c000d947:	74 2c                	je     c000d975 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d949:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d94f:	85 c9                	test   ecx,ecx
c000d951:	74 22                	je     c000d975 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d953:	b8 06 00 00 00       	mov    eax,0x6
c000d958:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d95c:	75 17                	jne    c000d975 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d95e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d960:	89 f0                	mov    eax,esi
c000d962:	83 c2 0d             	add    edx,0xd
c000d965:	0f b6 f0             	movzx  esi,al
c000d968:	0f b6 db             	movzx  ebx,bl
c000d96b:	56                   	push   esi
c000d96c:	53                   	push   ebx
c000d96d:	52                   	push   edx
c000d96e:	51                   	push   ecx
c000d96f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d972:	83 c4 10             	add    esp,0x10
c000d975:	5b                   	pop    ebx
c000d976:	5e                   	pop    esi
c000d977:	5f                   	pop    edi
c000d978:	c3                   	ret    
c000d979:	90                   	nop

c000d97a <File::exists()>:
c000d97a:	83 ec 0c             	sub    esp,0xc
c000d97d:	31 c0                	xor    eax,eax
c000d97f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d983:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d98a:	80 f9 19             	cmp    cl,0x19
c000d98d:	77 24                	ja     c000d9b3 <File::exists()+0x39>
c000d98f:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d996:	85 c9                	test   ecx,ecx
c000d998:	74 19                	je     c000d9b3 <File::exists()+0x39>
c000d99a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9a0:	85 c9                	test   ecx,ecx
c000d9a2:	74 0f                	je     c000d9b3 <File::exists()+0x39>
c000d9a4:	83 c2 0d             	add    edx,0xd
c000d9a7:	50                   	push   eax
c000d9a8:	50                   	push   eax
c000d9a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9ab:	52                   	push   edx
c000d9ac:	51                   	push   ecx
c000d9ad:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d9b0:	83 c4 10             	add    esp,0x10
c000d9b3:	83 c4 0c             	add    esp,0xc
c000d9b6:	c3                   	ret    
c000d9b7:	90                   	nop

c000d9b8 <File::stat(unsigned long long*, bool*)>:
c000d9b8:	56                   	push   esi
c000d9b9:	53                   	push   ebx
c000d9ba:	50                   	push   eax
c000d9bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d9c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d9c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9d3:	80 f9 19             	cmp    cl,0x19
c000d9d6:	77 3d                	ja     c000da15 <File::stat(unsigned long long*, bool*)+0x5d>
c000d9d8:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000d9df:	85 c9                	test   ecx,ecx
c000d9e1:	74 32                	je     c000da15 <File::stat(unsigned long long*, bool*)+0x5d>
c000d9e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9e9:	85 c9                	test   ecx,ecx
c000d9eb:	74 28                	je     c000da15 <File::stat(unsigned long long*, bool*)+0x5d>
c000d9ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9f3:	74 13                	je     c000da08 <File::stat(unsigned long long*, bool*)+0x50>
c000d9f5:	83 ec 04             	sub    esp,0x4
c000d9f8:	56                   	push   esi
c000d9f9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d9ff:	51                   	push   ecx
c000da00:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000da03:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000da06:	eb 0a                	jmp    c000da12 <File::stat(unsigned long long*, bool*)+0x5a>
c000da08:	53                   	push   ebx
c000da09:	83 c2 0d             	add    edx,0xd
c000da0c:	56                   	push   esi
c000da0d:	52                   	push   edx
c000da0e:	51                   	push   ecx
c000da0f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000da12:	83 c4 10             	add    esp,0x10
c000da15:	5a                   	pop    edx
c000da16:	5b                   	pop    ebx
c000da17:	5e                   	pop    esi
c000da18:	c3                   	ret    

c000da19 <Fs::setcwd(Process*, char*)>:
c000da19:	55                   	push   ebp
c000da1a:	57                   	push   edi
c000da1b:	56                   	push   esi
c000da1c:	53                   	push   ebx
c000da1d:	81 ec 20 02 00 00    	sub    esp,0x220
c000da23:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000da2a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000da30:	57                   	push   edi
c000da31:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000da38:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000da3c:	56                   	push   esi
c000da3d:	e8 46 fa ff ff       	call   c000d488 <Fs::standardiseFiles(char*, char const*, char const*)>
c000da42:	89 34 24             	mov    DWORD PTR [esp],esi
c000da45:	e8 66 2c ff ff       	call   c00006b0 <strlen>
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	83 f8 02             	cmp    eax,0x2
c000da50:	77 15                	ja     c000da67 <Fs::setcwd(Process*, char*)+0x4e>
c000da52:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000da57:	83 eb 41             	sub    ebx,0x41
c000da5a:	8b 04 9d 80 91 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6e80]
c000da61:	85 c0                	test   eax,eax
c000da63:	75 1c                	jne    c000da81 <Fs::setcwd(Process*, char*)+0x68>
c000da65:	eb 4c                	jmp    c000dab3 <Fs::setcwd(Process*, char*)+0x9a>
c000da67:	83 ec 0c             	sub    esp,0xc
c000da6a:	56                   	push   esi
c000da6b:	e8 40 2c ff ff       	call   c00006b0 <strlen>
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	83 f8 03             	cmp    eax,0x3
c000da76:	75 74                	jne    c000daec <Fs::setcwd(Process*, char*)+0xd3>
c000da78:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000da7d:	75 6d                	jne    c000daec <Fs::setcwd(Process*, char*)+0xd3>
c000da7f:	eb d1                	jmp    c000da52 <Fs::setcwd(Process*, char*)+0x39>
c000da81:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000da88:	75 29                	jne    c000dab3 <Fs::setcwd(Process*, char*)+0x9a>
c000da8a:	83 ec 0c             	sub    esp,0xc
c000da8d:	68 14 53 02 c0       	push   0xc0025314
c000da92:	e8 30 f6 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000da97:	5a                   	pop    edx
c000da98:	ff 34 9d 80 91 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6e80]
c000da9f:	e8 a4 2e 00 00       	call   c0010948 <LogicalDisk::mount()>
c000daa4:	c7 04 24 fb 76 02 c0 	mov    DWORD PTR [esp],0xc00276fb
c000daab:	e8 17 f6 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000dab0:	83 c4 10             	add    esp,0x10
c000dab3:	b8 03 00 00 00       	mov    eax,0x3
c000dab8:	83 fb 19             	cmp    ebx,0x19
c000dabb:	0f 87 c6 00 00 00    	ja     c000db87 <Fs::setcwd(Process*, char*)+0x16e>
c000dac1:	8b 14 9d 80 91 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6e80]
c000dac8:	b8 05 00 00 00       	mov    eax,0x5
c000dacd:	85 d2                	test   edx,edx
c000dacf:	0f 84 b2 00 00 00    	je     c000db87 <Fs::setcwd(Process*, char*)+0x16e>
c000dad5:	b8 06 00 00 00       	mov    eax,0x6
c000dada:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000dae1:	0f 85 92 00 00 00    	jne    c000db79 <Fs::setcwd(Process*, char*)+0x160>
c000dae7:	e9 9b 00 00 00       	jmp    c000db87 <Fs::setcwd(Process*, char*)+0x16e>
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	68 14 01 00 00       	push   0x114
c000daf4:	e8 ee c2 ff ff       	call   c0009de7 <malloc>
c000daf9:	83 c4 0c             	add    esp,0xc
c000dafc:	89 c3                	mov    ebx,eax
c000dafe:	55                   	push   ebp
c000daff:	56                   	push   esi
c000db00:	50                   	push   eax
c000db01:	e8 2c fb ff ff       	call   c000d632 <File::File(char const*, Process*)>
c000db06:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000db0b:	83 c4 0c             	add    esp,0xc
c000db0e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000db12:	50                   	push   eax
c000db13:	8d 44 24 10          	lea    eax,[esp+0x10]
c000db17:	50                   	push   eax
c000db18:	53                   	push   ebx
c000db19:	e8 9a fe ff ff       	call   c000d9b8 <File::stat(unsigned long long*, bool*)>
c000db1e:	83 c4 10             	add    esp,0x10
c000db21:	83 f8 02             	cmp    eax,0x2
c000db24:	74 04                	je     c000db2a <Fs::setcwd(Process*, char*)+0x111>
c000db26:	85 c0                	test   eax,eax
c000db28:	74 1c                	je     c000db46 <Fs::setcwd(Process*, char*)+0x12d>
c000db2a:	b8 01 00 00 00       	mov    eax,0x1
c000db2f:	85 db                	test   ebx,ebx
c000db31:	74 54                	je     c000db87 <Fs::setcwd(Process*, char*)+0x16e>
c000db33:	83 ec 0c             	sub    esp,0xc
c000db36:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db38:	53                   	push   ebx
c000db39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	b8 01 00 00 00       	mov    eax,0x1
c000db44:	eb 41                	jmp    c000db87 <Fs::setcwd(Process*, char*)+0x16e>
c000db46:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000db4b:	75 1c                	jne    c000db69 <Fs::setcwd(Process*, char*)+0x150>
c000db4d:	b8 02 00 00 00       	mov    eax,0x2
c000db52:	85 db                	test   ebx,ebx
c000db54:	74 31                	je     c000db87 <Fs::setcwd(Process*, char*)+0x16e>
c000db56:	83 ec 0c             	sub    esp,0xc
c000db59:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db5b:	53                   	push   ebx
c000db5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db5f:	83 c4 10             	add    esp,0x10
c000db62:	b8 02 00 00 00       	mov    eax,0x2
c000db67:	eb 1e                	jmp    c000db87 <Fs::setcwd(Process*, char*)+0x16e>
c000db69:	85 db                	test   ebx,ebx
c000db6b:	74 0c                	je     c000db79 <Fs::setcwd(Process*, char*)+0x160>
c000db6d:	83 ec 0c             	sub    esp,0xc
c000db70:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db72:	53                   	push   ebx
c000db73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db76:	83 c4 10             	add    esp,0x10
c000db79:	50                   	push   eax
c000db7a:	50                   	push   eax
c000db7b:	56                   	push   esi
c000db7c:	57                   	push   edi
c000db7d:	e8 ce 2b ff ff       	call   c0000750 <strcpy>
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	31 c0                	xor    eax,eax
c000db87:	81 c4 1c 02 00 00    	add    esp,0x21c
c000db8d:	5b                   	pop    ebx
c000db8e:	5e                   	pop    esi
c000db8f:	5f                   	pop    edi
c000db90:	5d                   	pop    ebp
c000db91:	c3                   	ret    

c000db92 <Directory::Directory(char const*, Process*)>:
c000db92:	83 ec 0c             	sub    esp,0xc
c000db95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db99:	83 ec 08             	sub    esp,0x8
c000db9c:	6a 00                	push   0x0
c000db9e:	50                   	push   eax
c000db9f:	e8 ba dd ff ff       	call   c000b95e <UnixFile::UnixFile(int)>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	ba 1c 54 02 c0       	mov    edx,0xc002541c
c000dbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb0:	89 10                	mov    DWORD PTR [eax],edx
c000dbb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dbb6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000dbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc0:	83 c0 0d             	add    eax,0xd
c000dbc3:	83 ec 04             	sub    esp,0x4
c000dbc6:	52                   	push   edx
c000dbc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcb:	50                   	push   eax
c000dbcc:	e8 b7 f8 ff ff       	call   c000d488 <Fs::standardiseFiles(char*, char const*, char const*)>
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dbdb:	8d 50 bf             	lea    edx,[eax-0x41]
c000dbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbe2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000dbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000dbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbf4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dbfa:	0f b6 c0             	movzx  eax,al
c000dbfd:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000dc04:	85 c0                	test   eax,eax
c000dc06:	74 5e                	je     c000dc66 <Directory::Directory(char const*, Process*)+0xd4>
c000dc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc12:	0f b6 c0             	movzx  eax,al
c000dc15:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000dc1c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc22:	85 c0                	test   eax,eax
c000dc24:	75 40                	jne    c000dc66 <Directory::Directory(char const*, Process*)+0xd4>
c000dc26:	83 ec 0c             	sub    esp,0xc
c000dc29:	68 64 53 02 c0       	push   0xc0025364
c000dc2e:	e8 94 f4 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc3a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dc40:	0f b6 c0             	movzx  eax,al
c000dc43:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c000dc4a:	83 ec 0c             	sub    esp,0xc
c000dc4d:	50                   	push   eax
c000dc4e:	e8 f5 2c 00 00       	call   c0010948 <LogicalDisk::mount()>
c000dc53:	83 c4 10             	add    esp,0x10
c000dc56:	83 ec 0c             	sub    esp,0xc
c000dc59:	68 fb 76 02 c0       	push   0xc00276fb
c000dc5e:	e8 64 f4 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000dc63:	83 c4 10             	add    esp,0x10
c000dc66:	90                   	nop
c000dc67:	83 c4 0c             	add    esp,0xc
c000dc6a:	c3                   	ret    
c000dc6b:	90                   	nop

c000dc6c <Directory::open()>:
c000dc6c:	53                   	push   ebx
c000dc6d:	b8 0b 00 00 00       	mov    eax,0xb
c000dc72:	83 ec 08             	sub    esp,0x8
c000dc75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc79:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dc80:	80 fa 19             	cmp    dl,0x19
c000dc83:	77 3d                	ja     c000dcc2 <Directory::open()+0x56>
c000dc85:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000dc8c:	85 d2                	test   edx,edx
c000dc8e:	74 32                	je     c000dcc2 <Directory::open()+0x56>
c000dc90:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dc96:	85 d2                	test   edx,edx
c000dc98:	74 28                	je     c000dcc2 <Directory::open()+0x56>
c000dc9a:	b8 06 00 00 00       	mov    eax,0x6
c000dc9f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dca3:	75 1d                	jne    c000dcc2 <Directory::open()+0x56>
c000dca5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dcab:	50                   	push   eax
c000dcac:	8b 02                	mov    eax,DWORD PTR [edx]
c000dcae:	51                   	push   ecx
c000dcaf:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dcb2:	51                   	push   ecx
c000dcb3:	52                   	push   edx
c000dcb4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dcb7:	83 c4 10             	add    esp,0x10
c000dcba:	85 c0                	test   eax,eax
c000dcbc:	75 04                	jne    c000dcc2 <Directory::open()+0x56>
c000dcbe:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dcc2:	83 c4 08             	add    esp,0x8
c000dcc5:	5b                   	pop    ebx
c000dcc6:	c3                   	ret    
c000dcc7:	90                   	nop

c000dcc8 <Directory::close()>:
c000dcc8:	53                   	push   ebx
c000dcc9:	b8 0b 00 00 00       	mov    eax,0xb
c000dcce:	83 ec 08             	sub    esp,0x8
c000dcd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dcd5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dcdc:	80 fa 19             	cmp    dl,0x19
c000dcdf:	77 41                	ja     c000dd22 <Directory::close()+0x5a>
c000dce1:	8b 1c 95 80 91 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6e80]
c000dce8:	85 db                	test   ebx,ebx
c000dcea:	74 36                	je     c000dd22 <Directory::close()+0x5a>
c000dcec:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dcf3:	74 2d                	je     c000dd22 <Directory::close()+0x5a>
c000dcf5:	b8 05 00 00 00       	mov    eax,0x5
c000dcfa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dcfe:	74 22                	je     c000dd22 <Directory::close()+0x5a>
c000dd00:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dd04:	8b 04 95 80 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6e80]
c000dd0b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dd11:	53                   	push   ebx
c000dd12:	53                   	push   ebx
c000dd13:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd15:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dd1b:	50                   	push   eax
c000dd1c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dd1f:	83 c4 10             	add    esp,0x10
c000dd22:	83 c4 08             	add    esp,0x8
c000dd25:	5b                   	pop    ebx
c000dd26:	c3                   	ret    
c000dd27:	90                   	nop

c000dd28 <Directory::unlink()>:
c000dd28:	83 ec 0c             	sub    esp,0xc
c000dd2b:	b8 0b 00 00 00       	mov    eax,0xb
c000dd30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd34:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd3b:	80 f9 19             	cmp    cl,0x19
c000dd3e:	77 2f                	ja     c000dd6f <Directory::unlink()+0x47>
c000dd40:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000dd47:	85 c9                	test   ecx,ecx
c000dd49:	74 24                	je     c000dd6f <Directory::unlink()+0x47>
c000dd4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd51:	85 c9                	test   ecx,ecx
c000dd53:	74 1a                	je     c000dd6f <Directory::unlink()+0x47>
c000dd55:	b8 06 00 00 00       	mov    eax,0x6
c000dd5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd5e:	75 0f                	jne    c000dd6f <Directory::unlink()+0x47>
c000dd60:	83 c2 0d             	add    edx,0xd
c000dd63:	50                   	push   eax
c000dd64:	50                   	push   eax
c000dd65:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd67:	52                   	push   edx
c000dd68:	51                   	push   ecx
c000dd69:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dd6c:	83 c4 10             	add    esp,0x10
c000dd6f:	83 c4 0c             	add    esp,0xc
c000dd72:	c3                   	ret    
c000dd73:	90                   	nop

c000dd74 <Directory::rename(char const*)>:
c000dd74:	83 ec 0c             	sub    esp,0xc
c000dd77:	b8 0b 00 00 00       	mov    eax,0xb
c000dd7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd80:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd87:	80 f9 19             	cmp    cl,0x19
c000dd8a:	77 32                	ja     c000ddbe <Directory::rename(char const*)+0x4a>
c000dd8c:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000dd93:	85 c9                	test   ecx,ecx
c000dd95:	74 27                	je     c000ddbe <Directory::rename(char const*)+0x4a>
c000dd97:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd9d:	85 c9                	test   ecx,ecx
c000dd9f:	74 1d                	je     c000ddbe <Directory::rename(char const*)+0x4a>
c000dda1:	b8 06 00 00 00       	mov    eax,0x6
c000dda6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ddaa:	75 12                	jne    c000ddbe <Directory::rename(char const*)+0x4a>
c000ddac:	83 c2 0d             	add    edx,0xd
c000ddaf:	50                   	push   eax
c000ddb0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddb6:	52                   	push   edx
c000ddb7:	51                   	push   ecx
c000ddb8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ddbb:	83 c4 10             	add    esp,0x10
c000ddbe:	83 c4 0c             	add    esp,0xc
c000ddc1:	c3                   	ret    

c000ddc2 <Directory::exists()>:
c000ddc2:	83 ec 0c             	sub    esp,0xc
c000ddc5:	31 c0                	xor    eax,eax
c000ddc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddcb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ddd2:	80 f9 19             	cmp    cl,0x19
c000ddd5:	77 24                	ja     c000ddfb <Directory::exists()+0x39>
c000ddd7:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000ddde:	85 c9                	test   ecx,ecx
c000dde0:	74 19                	je     c000ddfb <Directory::exists()+0x39>
c000dde2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dde8:	85 c9                	test   ecx,ecx
c000ddea:	74 0f                	je     c000ddfb <Directory::exists()+0x39>
c000ddec:	83 c2 0d             	add    edx,0xd
c000ddef:	50                   	push   eax
c000ddf0:	50                   	push   eax
c000ddf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddf3:	52                   	push   edx
c000ddf4:	51                   	push   ecx
c000ddf5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ddf8:	83 c4 10             	add    esp,0x10
c000ddfb:	83 c4 0c             	add    esp,0xc
c000ddfe:	c3                   	ret    
c000ddff:	90                   	nop

c000de00 <Directory::read(dirent*)>:
c000de00:	83 ec 1c             	sub    esp,0x1c
c000de03:	b8 0b 00 00 00       	mov    eax,0xb
c000de08:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000de0c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000de13:	80 fa 19             	cmp    dl,0x19
c000de16:	77 30                	ja     c000de48 <Directory::read(dirent*)+0x48>
c000de18:	8b 14 95 80 91 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6e80]
c000de1f:	85 d2                	test   edx,edx
c000de21:	74 25                	je     c000de48 <Directory::read(dirent*)+0x48>
c000de23:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000de2a:	74 1c                	je     c000de48 <Directory::read(dirent*)+0x48>
c000de2c:	83 ec 0c             	sub    esp,0xc
c000de2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de31:	8d 54 24 18          	lea    edx,[esp+0x18]
c000de35:	52                   	push   edx
c000de36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de3a:	6a 00                	push   0x0
c000de3c:	68 10 01 00 00       	push   0x110
c000de41:	51                   	push   ecx
c000de42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000de45:	83 c4 20             	add    esp,0x20
c000de48:	83 c4 1c             	add    esp,0x1c
c000de4b:	c3                   	ret    

c000de4c <Directory::create()>:
c000de4c:	83 ec 0c             	sub    esp,0xc
c000de4f:	b8 0b 00 00 00       	mov    eax,0xb
c000de54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000de5f:	80 f9 19             	cmp    cl,0x19
c000de62:	77 2f                	ja     c000de93 <Directory::create()+0x47>
c000de64:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c000de6b:	85 c9                	test   ecx,ecx
c000de6d:	74 24                	je     c000de93 <Directory::create()+0x47>
c000de6f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000de75:	85 c9                	test   ecx,ecx
c000de77:	74 1a                	je     c000de93 <Directory::create()+0x47>
c000de79:	b8 06 00 00 00       	mov    eax,0x6
c000de7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000de82:	75 0f                	jne    c000de93 <Directory::create()+0x47>
c000de84:	83 c2 0d             	add    edx,0xd
c000de87:	50                   	push   eax
c000de88:	50                   	push   eax
c000de89:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de8b:	52                   	push   edx
c000de8c:	51                   	push   ecx
c000de8d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	83 c4 0c             	add    esp,0xc
c000de96:	c3                   	ret    
c000de97:	90                   	nop

c000de98 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000de98:	b8 0a 00 00 00       	mov    eax,0xa
c000de9d:	c3                   	ret    
c000de9e:	66 90                	xchg   ax,ax

c000dea0 <Bus::Bus(char const*)>:
c000dea0:	83 ec 0c             	sub    esp,0xc
c000dea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea7:	83 ec 08             	sub    esp,0x8
c000deaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deae:	50                   	push   eax
c000deaf:	e8 8a 09 00 00       	call   c000e83e <Device::Device(char const*)>
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	ba 38 54 02 c0       	mov    edx,0xc0025438
c000debc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec0:	89 10                	mov    DWORD PTR [eax],edx
c000dec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ded0:	90                   	nop
c000ded1:	83 c4 0c             	add    esp,0xc
c000ded4:	c3                   	ret    
c000ded5:	90                   	nop
c000ded6:	66 90                	xchg   ax,ax

c000ded8 <Bus::~Bus()>:
c000ded8:	83 ec 0c             	sub    esp,0xc
c000dedb:	ba 38 54 02 c0       	mov    edx,0xc0025438
c000dee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee4:	89 10                	mov    DWORD PTR [eax],edx
c000dee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deea:	83 ec 0c             	sub    esp,0xc
c000deed:	50                   	push   eax
c000deee:	e8 15 06 00 00       	call   c000e508 <Device::~Device()>
c000def3:	83 c4 10             	add    esp,0x10
c000def6:	90                   	nop
c000def7:	83 c4 0c             	add    esp,0xc
c000defa:	c3                   	ret    
c000defb:	90                   	nop

c000defc <Bus::~Bus()>:
c000defc:	83 ec 0c             	sub    esp,0xc
c000deff:	83 ec 0c             	sub    esp,0xc
c000df02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df06:	e8 cd ff ff ff       	call   c000ded8 <Bus::~Bus()>
c000df0b:	83 c4 10             	add    esp,0x10
c000df0e:	83 ec 08             	sub    esp,0x8
c000df11:	68 58 01 00 00       	push   0x158
c000df16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1a:	e8 c7 f0 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	83 c4 0c             	add    esp,0xc
c000df25:	c3                   	ret    
c000df26:	66 90                	xchg   ax,ax

c000df28 <Buzzer::Buzzer(char const*)>:
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2f:	83 ec 08             	sub    esp,0x8
c000df32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df36:	50                   	push   eax
c000df37:	e8 02 09 00 00       	call   c000e83e <Device::Device(char const*)>
c000df3c:	83 c4 10             	add    esp,0x10
c000df3f:	ba 64 54 02 c0       	mov    edx,0xc0025464
c000df44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df48:	89 10                	mov    DWORD PTR [eax],edx
c000df4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000df58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000df66:	90                   	nop
c000df67:	83 c4 0c             	add    esp,0xc
c000df6a:	c3                   	ret    
c000df6b:	90                   	nop

c000df6c <Buzzer::~Buzzer()>:
c000df6c:	83 ec 0c             	sub    esp,0xc
c000df6f:	ba 64 54 02 c0       	mov    edx,0xc0025464
c000df74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df78:	89 10                	mov    DWORD PTR [eax],edx
c000df7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7e:	83 ec 0c             	sub    esp,0xc
c000df81:	50                   	push   eax
c000df82:	e8 81 05 00 00       	call   c000e508 <Device::~Device()>
c000df87:	83 c4 10             	add    esp,0x10
c000df8a:	90                   	nop
c000df8b:	83 c4 0c             	add    esp,0xc
c000df8e:	c3                   	ret    
c000df8f:	90                   	nop

c000df90 <Buzzer::~Buzzer()>:
c000df90:	83 ec 0c             	sub    esp,0xc
c000df93:	83 ec 0c             	sub    esp,0xc
c000df96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9a:	e8 cd ff ff ff       	call   c000df6c <Buzzer::~Buzzer()>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	83 ec 08             	sub    esp,0x8
c000dfa5:	68 5c 01 00 00       	push   0x15c
c000dfaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfae:	e8 33 f0 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	83 c4 0c             	add    esp,0xc
c000dfb9:	c3                   	ret    

c000dfba <Buzzer::stop()>:
c000dfba:	83 ec 14             	sub    esp,0x14
c000dfbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfc1:	8b 10                	mov    edx,DWORD PTR [eax]
c000dfc3:	6a 00                	push   0x0
c000dfc5:	50                   	push   eax
c000dfc6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dfc9:	83 c4 1c             	add    esp,0x1c
c000dfcc:	c3                   	ret    

c000dfcd <beepThread(void*)>:
c000dfcd:	53                   	push   ebx
c000dfce:	83 ec 08             	sub    esp,0x8
c000dfd1:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000dfd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfda:	48                   	dec    eax
c000dfdb:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000dfe0:	75 02                	jne    c000dfe4 <beepThread(void*)+0x17>
c000dfe2:	fb                   	sti    
c000dfe3:	90                   	nop
c000dfe4:	83 ec 0c             	sub    esp,0xc
c000dfe7:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000dfee:	50                   	push   eax
c000dfef:	e8 14 b2 00 00       	call   c0019208 <milliTenthSleep(unsigned int)>
c000dff4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dff7:	e8 be ff ff ff       	call   c000dfba <Buzzer::stop()>
c000dffc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000e004:	83 c4 18             	add    esp,0x18
c000e007:	5b                   	pop    ebx
c000e008:	e9 fb b0 00 00       	jmp    c0019108 <blockTask(TaskState)>
c000e00d:	90                   	nop

c000e00e <Buzzer::beep(int, int, bool)>:
c000e00e:	57                   	push   edi
c000e00f:	56                   	push   esi
c000e010:	53                   	push   ebx
c000e011:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e015:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e019:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e01d:	50                   	push   eax
c000e01e:	50                   	push   eax
c000e01f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e025:	53                   	push   ebx
c000e026:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e029:	83 c4 10             	add    esp,0x10
c000e02c:	89 f8                	mov    eax,edi
c000e02e:	84 c0                	test   al,al
c000e030:	74 1e                	je     c000e050 <Buzzer::beep(int, int, bool)+0x42>
c000e032:	83 ec 0c             	sub    esp,0xc
c000e035:	6b f6 0a             	imul   esi,esi,0xa
c000e038:	56                   	push   esi
c000e039:	e8 ca b1 00 00       	call   c0019208 <milliTenthSleep(unsigned int)>
c000e03e:	83 c4 10             	add    esp,0x10
c000e041:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e045:	5b                   	pop    ebx
c000e046:	5e                   	pop    esi
c000e047:	5f                   	pop    edi
c000e048:	e9 6d ff ff ff       	jmp    c000dfba <Buzzer::stop()>
c000e04d:	8d 76 00             	lea    esi,[esi+0x0]
c000e050:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e056:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000e05b:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000e063:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000e067:	c7 44 24 14 cd df 00 c0 	mov    DWORD PTR [esp+0x14],0xc000dfcd
c000e06f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e073:	5b                   	pop    ebx
c000e074:	5e                   	pop    esi
c000e075:	5f                   	pop    edi
c000e076:	e9 79 ac 00 00       	jmp    c0018cf4 <Process::createThread(void (*)(void*), void*, int)>
c000e07b:	90                   	nop

c000e07c <User::loadClockSettings(int)>:
c000e07c:	53                   	push   ebx
c000e07d:	83 ec 14             	sub    esp,0x14
c000e080:	68 14 01 00 00       	push   0x114
c000e085:	e8 5d bd ff ff       	call   c0009de7 <malloc>
c000e08a:	83 c4 0c             	add    esp,0xc
c000e08d:	89 c3                	mov    ebx,eax
c000e08f:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c000e095:	68 8c 54 02 c0       	push   0xc002548c
c000e09a:	50                   	push   eax
c000e09b:	e8 92 f5 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c000e0a0:	58                   	pop    eax
c000e0a1:	5a                   	pop    edx
c000e0a2:	6a 01                	push   0x1
c000e0a4:	53                   	push   ebx
c000e0a5:	e8 62 f6 ff ff       	call   c000d70c <File::open(FileOpenMode)>
c000e0aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0ad:	e8 b8 f6 ff ff       	call   c000d76a <File::close()>
c000e0b2:	83 c4 10             	add    esp,0x10
c000e0b5:	85 db                	test   ebx,ebx
c000e0b7:	74 0f                	je     c000e0c8 <User::loadClockSettings(int)+0x4c>
c000e0b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e0bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e0c2:	83 c4 08             	add    esp,0x8
c000e0c5:	5b                   	pop    ebx
c000e0c6:	ff e0                	jmp    eax
c000e0c8:	83 c4 08             	add    esp,0x8
c000e0cb:	5b                   	pop    ebx
c000e0cc:	c3                   	ret    
c000e0cd:	90                   	nop

c000e0ce <Clock::Clock(char const*)>:
c000e0ce:	83 ec 0c             	sub    esp,0xc
c000e0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0d5:	83 ec 08             	sub    esp,0x8
c000e0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0dc:	50                   	push   eax
c000e0dd:	e8 5c 07 00 00       	call   c000e83e <Device::Device(char const*)>
c000e0e2:	83 c4 10             	add    esp,0x10
c000e0e5:	ba b4 54 02 c0       	mov    edx,0xc00254b4
c000e0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ee:	89 10                	mov    DWORD PTR [eax],edx
c000e0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0f4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e0fe:	90                   	nop
c000e0ff:	83 c4 0c             	add    esp,0xc
c000e102:	c3                   	ret    
c000e103:	90                   	nop

c000e104 <Clock::~Clock()>:
c000e104:	83 ec 0c             	sub    esp,0xc
c000e107:	ba b4 54 02 c0       	mov    edx,0xc00254b4
c000e10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e110:	89 10                	mov    DWORD PTR [eax],edx
c000e112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e116:	83 ec 0c             	sub    esp,0xc
c000e119:	50                   	push   eax
c000e11a:	e8 e9 03 00 00       	call   c000e508 <Device::~Device()>
c000e11f:	83 c4 10             	add    esp,0x10
c000e122:	90                   	nop
c000e123:	83 c4 0c             	add    esp,0xc
c000e126:	c3                   	ret    
c000e127:	90                   	nop

c000e128 <Clock::~Clock()>:
c000e128:	83 ec 0c             	sub    esp,0xc
c000e12b:	83 ec 0c             	sub    esp,0xc
c000e12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e132:	e8 cd ff ff ff       	call   c000e104 <Clock::~Clock()>
c000e137:	83 c4 10             	add    esp,0x10
c000e13a:	83 ec 08             	sub    esp,0x8
c000e13d:	68 58 01 00 00       	push   0x158
c000e142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e146:	e8 9b ee ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000e14b:	83 c4 10             	add    esp,0x10
c000e14e:	83 c4 0c             	add    esp,0xc
c000e151:	c3                   	ret    

c000e152 <Clock::timeInSecondsLocal()>:
c000e152:	53                   	push   ebx
c000e153:	83 ec 14             	sub    esp,0x14
c000e156:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e15a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e15c:	50                   	push   eax
c000e15d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e160:	0f b6 0d fc 8c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028cfc
c000e167:	03 0d 00 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d00
c000e16d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e173:	89 cb                	mov    ebx,ecx
c000e175:	c1 fb 1f             	sar    ebx,0x1f
c000e178:	01 c8                	add    eax,ecx
c000e17a:	11 da                	adc    edx,ebx
c000e17c:	83 c4 10             	add    esp,0x10
c000e17f:	31 c9                	xor    ecx,ecx
c000e181:	80 3d fd 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028cfd,0x0
c000e188:	74 05                	je     c000e18f <Clock::timeInSecondsLocal()+0x3d>
c000e18a:	b9 08 07 00 00       	mov    ecx,0x708
c000e18f:	31 db                	xor    ebx,ebx
c000e191:	01 c8                	add    eax,ecx
c000e193:	11 da                	adc    edx,ebx
c000e195:	83 c4 08             	add    esp,0x8
c000e198:	5b                   	pop    ebx
c000e199:	c3                   	ret    

c000e19a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e19a:	57                   	push   edi
c000e19b:	56                   	push   esi
c000e19c:	53                   	push   ebx
c000e19d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e1a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e1a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1ab:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e1ae:	0f b6 05 fc 8c 02 c0 	movzx  eax,BYTE PTR ds:0xc0028cfc
c000e1b5:	03 05 00 8d 02 c0    	add    eax,DWORD PTR ds:0xc0028d00
c000e1bb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e1c1:	99                   	cdq    
c000e1c2:	29 c6                	sub    esi,eax
c000e1c4:	19 d7                	sbb    edi,edx
c000e1c6:	89 f0                	mov    eax,esi
c000e1c8:	89 fa                	mov    edx,edi
c000e1ca:	31 f6                	xor    esi,esi
c000e1cc:	80 3d fd 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028cfd,0x0
c000e1d3:	74 05                	je     c000e1da <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e1d5:	be 08 07 00 00       	mov    esi,0x708
c000e1da:	31 ff                	xor    edi,edi
c000e1dc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e1e0:	29 f0                	sub    eax,esi
c000e1e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e1e6:	19 fa                	sbb    edx,edi
c000e1e8:	89 d8                	mov    eax,ebx
c000e1ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e1ee:	5b                   	pop    ebx
c000e1ef:	5e                   	pop    esi
c000e1f0:	5f                   	pop    edi
c000e1f1:	ff e0                	jmp    eax

c000e1f3 <datetimeToSeconds(datetime_t)>:
c000e1f3:	55                   	push   ebp
c000e1f4:	57                   	push   edi
c000e1f5:	56                   	push   esi
c000e1f6:	53                   	push   ebx
c000e1f7:	83 ec 14             	sub    esp,0x14
c000e1fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e1fe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e202:	89 d3                	mov    ebx,edx
c000e204:	0f b6 c6             	movzx  eax,dh
c000e207:	c1 eb 10             	shr    ebx,0x10
c000e20a:	48                   	dec    eax
c000e20b:	66 81 eb 6c 07       	sub    bx,0x76c
c000e210:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e214:	0f b6 f5             	movzx  esi,ch
c000e217:	89 cf                	mov    edi,ecx
c000e219:	6b f6 3c             	imul   esi,esi,0x3c
c000e21c:	c1 ef 10             	shr    edi,0x10
c000e21f:	0f b6 c9             	movzx  ecx,cl
c000e222:	89 f8                	mov    eax,edi
c000e224:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e22a:	0f b6 f8             	movzx  edi,al
c000e22d:	0f b6 d2             	movzx  edx,dl
c000e230:	01 fe                	add    esi,edi
c000e232:	01 f1                	add    ecx,esi
c000e234:	0f b7 f3             	movzx  esi,bx
c000e237:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e23b:	c1 f9 1f             	sar    ecx,0x1f
c000e23e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e243:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e247:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e24c:	8b 0c 8d 00 55 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdab00]
c000e253:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e257:	76 29                	jbe    c000e282 <datetimeToSeconds(datetime_t)+0x8f>
c000e259:	f6 c3 03             	test   bl,0x3
c000e25c:	75 24                	jne    c000e282 <datetimeToSeconds(datetime_t)+0x8f>
c000e25e:	31 d2                	xor    edx,edx
c000e260:	bf 64 00 00 00       	mov    edi,0x64
c000e265:	89 d8                	mov    eax,ebx
c000e267:	66 f7 f7             	div    di
c000e26a:	66 85 d2             	test   dx,dx
c000e26d:	75 12                	jne    c000e281 <datetimeToSeconds(datetime_t)+0x8e>
c000e26f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e275:	bf 90 01 00 00       	mov    edi,0x190
c000e27a:	99                   	cdq    
c000e27b:	f7 ff                	idiv   edi
c000e27d:	85 d2                	test   edx,edx
c000e27f:	75 01                	jne    c000e282 <datetimeToSeconds(datetime_t)+0x8f>
c000e281:	41                   	inc    ecx
c000e282:	66 83 fb 46          	cmp    bx,0x46
c000e286:	76 45                	jbe    c000e2cd <datetimeToSeconds(datetime_t)+0xda>
c000e288:	bb 46 00 00 00       	mov    ebx,0x46
c000e28d:	bf 64 00 00 00       	mov    edi,0x64
c000e292:	bd 90 01 00 00       	mov    ebp,0x190
c000e297:	b8 6d 01 00 00       	mov    eax,0x16d
c000e29c:	f6 c3 03             	test   bl,0x3
c000e29f:	75 23                	jne    c000e2c4 <datetimeToSeconds(datetime_t)+0xd1>
c000e2a1:	89 d8                	mov    eax,ebx
c000e2a3:	99                   	cdq    
c000e2a4:	f7 ff                	idiv   edi
c000e2a6:	b8 6e 01 00 00       	mov    eax,0x16e
c000e2ab:	85 d2                	test   edx,edx
c000e2ad:	75 15                	jne    c000e2c4 <datetimeToSeconds(datetime_t)+0xd1>
c000e2af:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e2b5:	99                   	cdq    
c000e2b6:	f7 fd                	idiv   ebp
c000e2b8:	83 fa 01             	cmp    edx,0x1
c000e2bb:	19 c0                	sbb    eax,eax
c000e2bd:	f7 d0                	not    eax
c000e2bf:	05 6e 01 00 00       	add    eax,0x16e
c000e2c4:	01 c1                	add    ecx,eax
c000e2c6:	43                   	inc    ebx
c000e2c7:	39 f3                	cmp    ebx,esi
c000e2c9:	7c cc                	jl     c000e297 <datetimeToSeconds(datetime_t)+0xa4>
c000e2cb:	eb 35                	jmp    c000e302 <datetimeToSeconds(datetime_t)+0x10f>
c000e2cd:	74 33                	je     c000e302 <datetimeToSeconds(datetime_t)+0x10f>
c000e2cf:	b8 45 00 00 00       	mov    eax,0x45
c000e2d4:	89 c2                	mov    edx,eax
c000e2d6:	83 e2 03             	and    edx,0x3
c000e2d9:	39 f0                	cmp    eax,esi
c000e2db:	7e 0f                	jle    c000e2ec <datetimeToSeconds(datetime_t)+0xf9>
c000e2dd:	83 fa 01             	cmp    edx,0x1
c000e2e0:	19 d2                	sbb    edx,edx
c000e2e2:	48                   	dec    eax
c000e2e3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e2ea:	eb e8                	jmp    c000e2d4 <datetimeToSeconds(datetime_t)+0xe1>
c000e2ec:	b8 6d 01 00 00       	mov    eax,0x16d
c000e2f1:	85 d2                	test   edx,edx
c000e2f3:	75 0b                	jne    c000e300 <datetimeToSeconds(datetime_t)+0x10d>
c000e2f5:	66 83 fb 01          	cmp    bx,0x1
c000e2f9:	19 c0                	sbb    eax,eax
c000e2fb:	05 6e 01 00 00       	add    eax,0x16e
c000e300:	29 c1                	sub    ecx,eax
c000e302:	b8 80 51 01 00       	mov    eax,0x15180
c000e307:	f7 e9                	imul   ecx
c000e309:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e30d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e311:	83 c4 14             	add    esp,0x14
c000e314:	5b                   	pop    ebx
c000e315:	5e                   	pop    esi
c000e316:	5f                   	pop    edi
c000e317:	5d                   	pop    ebp
c000e318:	c3                   	ret    
c000e319:	90                   	nop

c000e31a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e31a:	57                   	push   edi
c000e31b:	56                   	push   esi
c000e31c:	53                   	push   ebx
c000e31d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e321:	8b 06                	mov    eax,DWORD PTR [esi]
c000e323:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e32a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e32e:	e8 c0 fe ff ff       	call   c000e1f3 <datetimeToSeconds(datetime_t)>
c000e333:	59                   	pop    ecx
c000e334:	0f b6 0d fc 8c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028cfc
c000e33b:	5b                   	pop    ebx
c000e33c:	03 0d 00 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028d00
c000e342:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e348:	89 cb                	mov    ebx,ecx
c000e34a:	c1 fb 1f             	sar    ebx,0x1f
c000e34d:	29 c8                	sub    eax,ecx
c000e34f:	19 da                	sbb    edx,ebx
c000e351:	31 c9                	xor    ecx,ecx
c000e353:	80 3d fd 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028cfd,0x0
c000e35a:	74 05                	je     c000e361 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e35c:	b9 08 07 00 00       	mov    ecx,0x708
c000e361:	31 db                	xor    ebx,ebx
c000e363:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e367:	29 c8                	sub    eax,ecx
c000e369:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e36d:	19 da                	sbb    edx,ebx
c000e36f:	89 f8                	mov    eax,edi
c000e371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e375:	5b                   	pop    ebx
c000e376:	5e                   	pop    esi
c000e377:	5f                   	pop    edi
c000e378:	ff e0                	jmp    eax

c000e37a <secondsToDatetime(unsigned long long)>:
c000e37a:	55                   	push   ebp
c000e37b:	57                   	push   edi
c000e37c:	56                   	push   esi
c000e37d:	53                   	push   ebx
c000e37e:	83 ec 1c             	sub    esp,0x1c
c000e381:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e385:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e389:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e38d:	6a 00                	push   0x0
c000e38f:	68 80 51 01 00       	push   0x15180
c000e394:	55                   	push   ebp
c000e395:	57                   	push   edi
c000e396:	e8 05 4c 01 00       	call   c0022fa0 <__udivdi3>
c000e39b:	83 c4 10             	add    esp,0x10
c000e39e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e3a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3a8:	6a 00                	push   0x0
c000e3aa:	68 80 51 01 00       	push   0x15180
c000e3af:	55                   	push   ebp
c000e3b0:	57                   	push   edi
c000e3b1:	bf 10 0e 00 00       	mov    edi,0xe10
c000e3b6:	e8 e5 4c 01 00       	call   c00230a0 <__umoddi3>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	99                   	cdq    
c000e3bf:	f7 ff                	idiv   edi
c000e3c1:	bf 3c 00 00 00       	mov    edi,0x3c
c000e3c6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e3c9:	89 d0                	mov    eax,edx
c000e3cb:	99                   	cdq    
c000e3cc:	f7 ff                	idiv   edi
c000e3ce:	85 db                	test   ebx,ebx
c000e3d0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e3d3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e3d6:	79 11                	jns    c000e3e9 <secondsToDatetime(unsigned long long)+0x6f>
c000e3d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e3dc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e3e2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e3e7:	eb 07                	jmp    c000e3f0 <secondsToDatetime(unsigned long long)+0x76>
c000e3e9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e3ee:	89 d8                	mov    eax,ebx
c000e3f0:	bf b4 05 00 00       	mov    edi,0x5b4
c000e3f5:	99                   	cdq    
c000e3f6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e3fb:	f7 f9                	idiv   ecx
c000e3fd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e402:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e406:	31 d2                	xor    edx,edx
c000e408:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e410:	01 c3                	add    ebx,eax
c000e412:	89 d8                	mov    eax,ebx
c000e414:	f7 f1                	div    ecx
c000e416:	31 d2                	xor    edx,edx
c000e418:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e41b:	89 d8                	mov    eax,ebx
c000e41d:	f7 f7                	div    edi
c000e41f:	31 d2                	xor    edx,edx
c000e421:	29 c1                	sub    ecx,eax
c000e423:	89 d8                	mov    eax,ebx
c000e425:	f7 f5                	div    ebp
c000e427:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e42c:	29 c1                	sub    ecx,eax
c000e42e:	31 d2                	xor    edx,edx
c000e430:	89 c8                	mov    eax,ecx
c000e432:	f7 f5                	div    ebp
c000e434:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e439:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e43d:	31 d2                	xor    edx,edx
c000e43f:	89 c8                	mov    eax,ecx
c000e441:	f7 f5                	div    ebp
c000e443:	31 d2                	xor    edx,edx
c000e445:	01 c3                	add    ebx,eax
c000e447:	89 c8                	mov    eax,ecx
c000e449:	f7 f7                	div    edi
c000e44b:	bf 99 00 00 00       	mov    edi,0x99
c000e450:	29 c3                	sub    ebx,eax
c000e452:	31 d2                	xor    edx,edx
c000e454:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e45c:	29 c3                	sub    ebx,eax
c000e45e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e461:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e464:	bb 05 00 00 00       	mov    ebx,0x5
c000e469:	83 c1 02             	add    ecx,0x2
c000e46c:	89 c8                	mov    eax,ecx
c000e46e:	f7 f7                	div    edi
c000e470:	31 d2                	xor    edx,edx
c000e472:	89 c7                	mov    edi,eax
c000e474:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e47a:	83 c0 02             	add    eax,0x2
c000e47d:	f7 f3                	div    ebx
c000e47f:	89 eb                	mov    ebx,ebp
c000e481:	29 c3                	sub    ebx,eax
c000e483:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e489:	88 1e                	mov    BYTE PTR [esi],bl
c000e48b:	19 c0                	sbb    eax,eax
c000e48d:	31 d2                	xor    edx,edx
c000e48f:	83 e0 0c             	and    eax,0xc
c000e492:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e496:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e49e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e4a2:	83 f9 01             	cmp    ecx,0x1
c000e4a5:	0f 96 c2             	setbe  dl
c000e4a8:	41                   	inc    ecx
c000e4a9:	01 d0                	add    eax,edx
c000e4ab:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e4ae:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e4b2:	83 c4 1c             	add    esp,0x1c
c000e4b5:	89 f0                	mov    eax,esi
c000e4b7:	5b                   	pop    ebx
c000e4b8:	5e                   	pop    esi
c000e4b9:	5f                   	pop    edi
c000e4ba:	5d                   	pop    ebp
c000e4bb:	c2 04 00             	ret    0x4

c000e4be <Clock::timeInDatetimeLocal()>:
c000e4be:	53                   	push   ebx
c000e4bf:	83 ec 14             	sub    esp,0x14
c000e4c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e4c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e4ca:	e8 83 fc ff ff       	call   c000e152 <Clock::timeInSecondsLocal()>
c000e4cf:	83 c4 0c             	add    esp,0xc
c000e4d2:	52                   	push   edx
c000e4d3:	50                   	push   eax
c000e4d4:	53                   	push   ebx
c000e4d5:	e8 a0 fe ff ff       	call   c000e37a <secondsToDatetime(unsigned long long)>
c000e4da:	89 d8                	mov    eax,ebx
c000e4dc:	83 c4 14             	add    esp,0x14
c000e4df:	5b                   	pop    ebx
c000e4e0:	c2 04 00             	ret    0x4
c000e4e3:	90                   	nop

c000e4e4 <Device::hibernate()>:
c000e4e4:	c3                   	ret    
c000e4e5:	90                   	nop

c000e4e6 <Device::wake()>:
c000e4e6:	c3                   	ret    
c000e4e7:	90                   	nop

c000e4e8 <Device::detect()>:
c000e4e8:	c3                   	ret    
c000e4e9:	90                   	nop

c000e4ea <Device::disableLegacy()>:
c000e4ea:	c3                   	ret    
c000e4eb:	90                   	nop

c000e4ec <Device::powerSaving(PowerSavingLevel)>:
c000e4ec:	c3                   	ret    
c000e4ed:	90                   	nop

c000e4ee <DriverlessDevice::close(int, int, void*)>:
c000e4ee:	31 c0                	xor    eax,eax
c000e4f0:	c3                   	ret    
c000e4f1:	90                   	nop

c000e4f2 <DriverlessDevice::detect()>:
c000e4f2:	c3                   	ret    
c000e4f3:	90                   	nop

c000e4f4 <DriverlessDevice::open(int, int, void*)>:
c000e4f4:	83 ec 18             	sub    esp,0x18
c000e4f7:	68 30 55 02 c0       	push   0xc0025530
c000e4fc:	e8 a8 6c 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000e501:	83 c8 ff             	or     eax,0xffffffff
c000e504:	83 c4 1c             	add    esp,0x1c
c000e507:	c3                   	ret    

c000e508 <Device::~Device()>:
c000e508:	ba 90 55 02 c0       	mov    edx,0xc0025590
c000e50d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e511:	89 10                	mov    DWORD PTR [eax],edx
c000e513:	90                   	nop
c000e514:	c3                   	ret    
c000e515:	90                   	nop

c000e516 <Device::~Device()>:
c000e516:	83 ec 0c             	sub    esp,0xc
c000e519:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e51d:	e8 e6 ff ff ff       	call   c000e508 <Device::~Device()>
c000e522:	83 c4 04             	add    esp,0x4
c000e525:	83 ec 08             	sub    esp,0x8
c000e528:	68 58 01 00 00       	push   0x158
c000e52d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e531:	e8 b0 ea ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000e536:	83 c4 10             	add    esp,0x10
c000e539:	83 c4 0c             	add    esp,0xc
c000e53c:	c3                   	ret    
c000e53d:	90                   	nop

c000e53e <Device::findAndLoadDriver()>:
c000e53e:	c7 44 24 04 4e 55 02 c0 	mov    DWORD PTR [esp+0x4],0xc002554e
c000e546:	e9 7c eb ff ff       	jmp    c000d0c7 <Dbg::kprintf(char const*, ...)>
c000e54b:	90                   	nop

c000e54c <Device::preOpenPCI(PCIDeviceInfo)>:
c000e54c:	57                   	push   edi
c000e54d:	b9 09 00 00 00       	mov    ecx,0x9
c000e552:	56                   	push   esi
c000e553:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e557:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e55b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e565:	81 c7 18 01 00 00    	add    edi,0x118
c000e56b:	fc                   	cld    
c000e56c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e56e:	5e                   	pop    esi
c000e56f:	5f                   	pop    edi
c000e570:	c3                   	ret    
c000e571:	90                   	nop

c000e572 <Device::preOpenACPI(void*, char*, char*)>:
c000e572:	57                   	push   edi
c000e573:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e578:	56                   	push   esi
c000e579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e57d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e581:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e58b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e591:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e597:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e59b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e59d:	b9 0e 00 00 00       	mov    ecx,0xe
c000e5a2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e5a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5ae:	5e                   	pop    esi
c000e5af:	5f                   	pop    edi
c000e5b0:	c3                   	ret    
c000e5b1:	90                   	nop

c000e5b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e5bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e5c2:	75 0b                	jne    c000e5cf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e5c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e5cd:	eb 1e                	jmp    c000e5ed <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e5cf:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000e5d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e5da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e5e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5ea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e5ed:	ff e0                	jmp    eax
c000e5ef:	90                   	nop

c000e5f0 <Device::getParent()>:
c000e5f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5f4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e5fa:	c3                   	ret    
c000e5fb:	90                   	nop

c000e5fc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e600:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e605:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e60c:	75 0b                	jne    c000e619 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e60e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e610:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e614:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e617:	eb 1e                	jmp    c000e637 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e619:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000e61e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e624:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e62a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e62c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e630:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e634:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e637:	ff e0                	jmp    eax
c000e639:	90                   	nop

c000e63a <Device::addChild(Device*)>:
c000e63a:	53                   	push   ebx
c000e63b:	83 ec 08             	sub    esp,0x8
c000e63e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e646:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e64c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e652:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e654:	85 d2                	test   edx,edx
c000e656:	74 04                	je     c000e65c <Device::addChild(Device*)+0x22>
c000e658:	89 d3                	mov    ebx,edx
c000e65a:	eb f6                	jmp    c000e652 <Device::addChild(Device*)+0x18>
c000e65c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	6a 08                	push   0x8
c000e664:	e8 7e b7 ff ff       	call   c0009de7 <malloc>
c000e669:	89 03                	mov    DWORD PTR [ebx],eax
c000e66b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e671:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e678:	83 c4 18             	add    esp,0x18
c000e67b:	5b                   	pop    ebx
c000e67c:	c3                   	ret    
c000e67d:	90                   	nop

c000e67e <Device::removeAllChildren()>:
c000e67e:	56                   	push   esi
c000e67f:	53                   	push   ebx
c000e680:	52                   	push   edx
c000e681:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e685:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e68b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e68e:	74 17                	je     c000e6a7 <Device::removeAllChildren()+0x29>
c000e690:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e693:	85 c0                	test   eax,eax
c000e695:	74 0c                	je     c000e6a3 <Device::removeAllChildren()+0x25>
c000e697:	83 ec 0c             	sub    esp,0xc
c000e69a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e69c:	50                   	push   eax
c000e69d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6a5:	eb e4                	jmp    c000e68b <Device::removeAllChildren()+0xd>
c000e6a7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e6ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e6b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6c0:	58                   	pop    eax
c000e6c1:	5b                   	pop    ebx
c000e6c2:	5e                   	pop    esi
c000e6c3:	c3                   	ret    

c000e6c4 <Device::hibernateAll()>:
c000e6c4:	53                   	push   ebx
c000e6c5:	83 ec 14             	sub    esp,0x14
c000e6c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6ce:	53                   	push   ebx
c000e6cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e6d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6d8:	83 c4 10             	add    esp,0x10
c000e6db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6de:	74 0f                	je     c000e6ef <Device::hibernateAll()+0x2b>
c000e6e0:	83 ec 0c             	sub    esp,0xc
c000e6e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6e6:	e8 d9 ff ff ff       	call   c000e6c4 <Device::hibernateAll()>
c000e6eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6ed:	eb e9                	jmp    c000e6d8 <Device::hibernateAll()+0x14>
c000e6ef:	83 c4 08             	add    esp,0x8
c000e6f2:	5b                   	pop    ebx
c000e6f3:	c3                   	ret    

c000e6f4 <Device::wakeAll()>:
c000e6f4:	53                   	push   ebx
c000e6f5:	83 ec 14             	sub    esp,0x14
c000e6f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6fe:	53                   	push   ebx
c000e6ff:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e702:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e708:	83 c4 10             	add    esp,0x10
c000e70b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e70e:	74 0f                	je     c000e71f <Device::wakeAll()+0x2b>
c000e710:	83 ec 0c             	sub    esp,0xc
c000e713:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e716:	e8 d9 ff ff ff       	call   c000e6f4 <Device::wakeAll()>
c000e71b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e71d:	eb e9                	jmp    c000e708 <Device::wakeAll()+0x14>
c000e71f:	83 c4 08             	add    esp,0x8
c000e722:	5b                   	pop    ebx
c000e723:	c3                   	ret    

c000e724 <Device::detectAll()>:
c000e724:	53                   	push   ebx
c000e725:	83 ec 14             	sub    esp,0x14
c000e728:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e72c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e72e:	53                   	push   ebx
c000e72f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e732:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e738:	83 c4 10             	add    esp,0x10
c000e73b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e73e:	74 0f                	je     c000e74f <Device::detectAll()+0x2b>
c000e740:	83 ec 0c             	sub    esp,0xc
c000e743:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e746:	e8 d9 ff ff ff       	call   c000e724 <Device::detectAll()>
c000e74b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e74d:	eb e9                	jmp    c000e738 <Device::detectAll()+0x14>
c000e74f:	83 c4 08             	add    esp,0x8
c000e752:	5b                   	pop    ebx
c000e753:	c3                   	ret    

c000e754 <Device::disableLegacyAll()>:
c000e754:	53                   	push   ebx
c000e755:	83 ec 14             	sub    esp,0x14
c000e758:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e75c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e75e:	53                   	push   ebx
c000e75f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e762:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e768:	83 c4 10             	add    esp,0x10
c000e76b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e76e:	74 0f                	je     c000e77f <Device::disableLegacyAll()+0x2b>
c000e770:	83 ec 0c             	sub    esp,0xc
c000e773:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e776:	e8 d9 ff ff ff       	call   c000e754 <Device::disableLegacyAll()>
c000e77b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e77d:	eb e9                	jmp    c000e768 <Device::disableLegacyAll()+0x14>
c000e77f:	83 c4 08             	add    esp,0x8
c000e782:	5b                   	pop    ebx
c000e783:	c3                   	ret    

c000e784 <Device::loadDriversForAll()>:
c000e784:	53                   	push   ebx
c000e785:	83 ec 08             	sub    esp,0x8
c000e788:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e78c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e793:	75 0c                	jne    c000e7a1 <Device::loadDriversForAll()+0x1d>
c000e795:	83 ec 0c             	sub    esp,0xc
c000e798:	53                   	push   ebx
c000e799:	e8 a0 fd ff ff       	call   c000e53e <Device::findAndLoadDriver()>
c000e79e:	83 c4 10             	add    esp,0x10
c000e7a1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7aa:	74 12                	je     c000e7be <Device::loadDriversForAll()+0x3a>
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7b2:	e8 cd ff ff ff       	call   c000e784 <Device::loadDriversForAll()>
c000e7b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7b9:	83 c4 10             	add    esp,0x10
c000e7bc:	eb e9                	jmp    c000e7a7 <Device::loadDriversForAll()+0x23>
c000e7be:	83 c4 08             	add    esp,0x8
c000e7c1:	5b                   	pop    ebx
c000e7c2:	c3                   	ret    
c000e7c3:	90                   	nop

c000e7c4 <Device::closeAll()>:
c000e7c4:	53                   	push   ebx
c000e7c5:	83 ec 08             	sub    esp,0x8
c000e7c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e7ce:	6a 00                	push   0x0
c000e7d0:	6a 00                	push   0x0
c000e7d2:	6a 00                	push   0x0
c000e7d4:	53                   	push   ebx
c000e7d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e7d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7de:	83 c4 10             	add    esp,0x10
c000e7e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7e4:	74 0f                	je     c000e7f5 <Device::closeAll()+0x31>
c000e7e6:	83 ec 0c             	sub    esp,0xc
c000e7e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7ec:	e8 d3 ff ff ff       	call   c000e7c4 <Device::closeAll()>
c000e7f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7f3:	eb e9                	jmp    c000e7de <Device::closeAll()+0x1a>
c000e7f5:	83 c4 08             	add    esp,0x8
c000e7f8:	5b                   	pop    ebx
c000e7f9:	c3                   	ret    

c000e7fa <Device::powerSavingAll(PowerSavingLevel)>:
c000e7fa:	56                   	push   esi
c000e7fb:	53                   	push   ebx
c000e7fc:	83 ec 0c             	sub    esp,0xc
c000e7ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e803:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e807:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e809:	56                   	push   esi
c000e80a:	53                   	push   ebx
c000e80b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e80e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e814:	83 c4 10             	add    esp,0x10
c000e817:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e81a:	74 0f                	je     c000e82b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e81c:	52                   	push   edx
c000e81d:	52                   	push   edx
c000e81e:	56                   	push   esi
c000e81f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e822:	e8 d3 ff ff ff       	call   c000e7fa <Device::powerSavingAll(PowerSavingLevel)>
c000e827:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e829:	eb e9                	jmp    c000e814 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e82b:	58                   	pop    eax
c000e82c:	5b                   	pop    ebx
c000e82d:	5e                   	pop    esi
c000e82e:	c3                   	ret    
c000e82f:	90                   	nop

c000e830 <Device::setName(char const*)>:
c000e830:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e838:	e9 13 1f ff ff       	jmp    c0000750 <strcpy>
c000e83d:	90                   	nop

c000e83e <Device::Device(char const*)>:
c000e83e:	83 ec 1c             	sub    esp,0x1c
c000e841:	ba 90 55 02 c0       	mov    edx,0xc0025590
c000e846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e84a:	89 10                	mov    DWORD PTR [eax],edx
c000e84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e850:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e85a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e85e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e86c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e87a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e884:	83 ec 08             	sub    esp,0x8
c000e887:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e88b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e88f:	e8 9c ff ff ff       	call   c000e830 <Device::setName(char const*)>
c000e894:	83 c4 10             	add    esp,0x10
c000e897:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e89f:	83 ec 0c             	sub    esp,0xc
c000e8a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8a6:	e8 3c b5 ff ff       	call   c0009de7 <malloc>
c000e8ab:	83 c4 10             	add    esp,0x10
c000e8ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e8b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e8bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8bf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8c9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e8cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e8d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8d9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e8df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e8e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8ea:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e900:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e90a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e90e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e91c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e92a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e934:	90                   	nop
c000e935:	83 c4 1c             	add    esp,0x1c
c000e938:	c3                   	ret    
c000e939:	90                   	nop

c000e93a <Device::getName()>:
c000e93a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e93e:	05 d0 00 00 00       	add    eax,0xd0
c000e943:	c3                   	ret    

c000e944 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e94b:	83 ec 08             	sub    esp,0x8
c000e94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e952:	50                   	push   eax
c000e953:	e8 e6 fe ff ff       	call   c000e83e <Device::Device(char const*)>
c000e958:	83 c4 10             	add    esp,0x10
c000e95b:	ba bc 55 02 c0       	mov    edx,0xc00255bc
c000e960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e964:	89 10                	mov    DWORD PTR [eax],edx
c000e966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e96a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e974:	90                   	nop
c000e975:	83 c4 0c             	add    esp,0xc
c000e978:	c3                   	ret    
c000e979:	90                   	nop

c000e97a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e97a:	57                   	push   edi
c000e97b:	56                   	push   esi
c000e97c:	53                   	push   ebx
c000e97d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e981:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e985:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e989:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e98f:	75 0c                	jne    c000e99d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e991:	52                   	push   edx
c000e992:	52                   	push   edx
c000e993:	53                   	push   ebx
c000e994:	56                   	push   esi
c000e995:	e8 b8 4a 01 00       	call   c0023452 <LinkedList<Device>::addElement(Device*)>
c000e99a:	83 c4 10             	add    esp,0x10
c000e99d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e9a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e9a6:	74 12                	je     c000e9ba <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e9a8:	50                   	push   eax
c000e9a9:	57                   	push   edi
c000e9aa:	56                   	push   esi
c000e9ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e9ae:	e8 c7 ff ff ff       	call   c000e97a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e9b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e9b5:	83 c4 10             	add    esp,0x10
c000e9b8:	eb e9                	jmp    c000e9a3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e9ba:	5b                   	pop    ebx
c000e9bb:	5e                   	pop    esi
c000e9bc:	5f                   	pop    edi
c000e9bd:	c3                   	ret    

c000e9be <getDevicesOfType(DeviceType)>:
c000e9be:	53                   	push   ebx
c000e9bf:	83 ec 14             	sub    esp,0x14
c000e9c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e9c6:	53                   	push   ebx
c000e9c7:	e8 62 4b 01 00       	call   c002352e <LinkedList<Device>::LinkedList()>
c000e9cc:	83 c4 0c             	add    esp,0xc
c000e9cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9d3:	53                   	push   ebx
c000e9d4:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c000e9da:	e8 9b ff ff ff       	call   c000e97a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e9df:	89 d8                	mov    eax,ebx
c000e9e1:	83 c4 18             	add    esp,0x18
c000e9e4:	5b                   	pop    ebx
c000e9e5:	c2 04 00             	ret    0x4

c000e9e8 <HardDiskController::HardDiskController(char const*)>:
c000e9e8:	83 ec 0c             	sub    esp,0xc
c000e9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ef:	83 ec 08             	sub    esp,0x8
c000e9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9f6:	50                   	push   eax
c000e9f7:	e8 42 fe ff ff       	call   c000e83e <Device::Device(char const*)>
c000e9fc:	83 c4 10             	add    esp,0x10
c000e9ff:	ba e8 55 02 c0       	mov    edx,0xc00255e8
c000ea04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea08:	89 10                	mov    DWORD PTR [eax],edx
c000ea0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea0e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ea18:	90                   	nop
c000ea19:	83 c4 0c             	add    esp,0xc
c000ea1c:	c3                   	ret    
c000ea1d:	90                   	nop
c000ea1e:	66 90                	xchg   ax,ax

c000ea20 <HardDiskController::~HardDiskController()>:
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	ba e8 55 02 c0       	mov    edx,0xc00255e8
c000ea28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea2c:	89 10                	mov    DWORD PTR [eax],edx
c000ea2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea32:	83 ec 0c             	sub    esp,0xc
c000ea35:	50                   	push   eax
c000ea36:	e8 cd fa ff ff       	call   c000e508 <Device::~Device()>
c000ea3b:	83 c4 10             	add    esp,0x10
c000ea3e:	90                   	nop
c000ea3f:	83 c4 0c             	add    esp,0xc
c000ea42:	c3                   	ret    
c000ea43:	90                   	nop

c000ea44 <HardDiskController::~HardDiskController()>:
c000ea44:	83 ec 0c             	sub    esp,0xc
c000ea47:	83 ec 0c             	sub    esp,0xc
c000ea4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea4e:	e8 cd ff ff ff       	call   c000ea20 <HardDiskController::~HardDiskController()>
c000ea53:	83 c4 10             	add    esp,0x10
c000ea56:	83 ec 08             	sub    esp,0x8
c000ea59:	68 58 01 00 00       	push   0x158
c000ea5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea62:	e8 7f e5 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000ea67:	83 c4 10             	add    esp,0x10
c000ea6a:	83 c4 0c             	add    esp,0xc
c000ea6d:	c3                   	ret    

c000ea6e <PhysicalDisk::eject()>:
c000ea6e:	83 c8 ff             	or     eax,0xffffffff
c000ea71:	c3                   	ret    

c000ea72 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea79:	83 ec 08             	sub    esp,0x8
c000ea7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea80:	50                   	push   eax
c000ea81:	e8 b8 fd ff ff       	call   c000e83e <Device::Device(char const*)>
c000ea86:	83 c4 10             	add    esp,0x10
c000ea89:	ba 14 56 02 c0       	mov    edx,0xc0025614
c000ea8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea92:	89 10                	mov    DWORD PTR [eax],edx
c000ea94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea98:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ea9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaa3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaae:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000eab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eabc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eac0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000eac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ead4:	90                   	nop
c000ead5:	83 c4 0c             	add    esp,0xc
c000ead8:	c3                   	ret    
c000ead9:	90                   	nop

c000eada <PhysicalDisk::startCache()>:
c000eada:	56                   	push   esi
c000eadb:	53                   	push   ebx
c000eadc:	83 ec 10             	sub    esp,0x10
c000eadf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eae3:	6a 44                	push   0x44
c000eae5:	e8 fd b2 ff ff       	call   c0009de7 <malloc>
c000eaea:	89 c6                	mov    esi,eax
c000eaec:	58                   	pop    eax
c000eaed:	5a                   	pop    edx
c000eaee:	53                   	push   ebx
c000eaef:	56                   	push   esi
c000eaf0:	e8 6b 27 00 00       	call   c0011260 <VCache::VCache(PhysicalDisk*)>
c000eaf5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000eafb:	83 c4 14             	add    esp,0x14
c000eafe:	5b                   	pop    ebx
c000eaff:	5e                   	pop    esi
c000eb00:	c3                   	ret    
c000eb01:	90                   	nop

c000eb02 <PhysicalDisk::~PhysicalDisk()>:
c000eb02:	83 ec 0c             	sub    esp,0xc
c000eb05:	ba 14 56 02 c0       	mov    edx,0xc0025614
c000eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0e:	89 10                	mov    DWORD PTR [eax],edx
c000eb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb14:	83 ec 0c             	sub    esp,0xc
c000eb17:	50                   	push   eax
c000eb18:	e8 eb f9 ff ff       	call   c000e508 <Device::~Device()>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	90                   	nop
c000eb21:	83 c4 0c             	add    esp,0xc
c000eb24:	c3                   	ret    
c000eb25:	90                   	nop

c000eb26 <PhysicalDisk::~PhysicalDisk()>:
c000eb26:	83 ec 0c             	sub    esp,0xc
c000eb29:	83 ec 0c             	sub    esp,0xc
c000eb2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb30:	e8 cd ff ff ff       	call   c000eb02 <PhysicalDisk::~PhysicalDisk()>
c000eb35:	83 c4 10             	add    esp,0x10
c000eb38:	83 ec 08             	sub    esp,0x8
c000eb3b:	68 6c 01 00 00       	push   0x16c
c000eb40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb44:	e8 9d e4 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000eb49:	83 c4 10             	add    esp,0x10
c000eb4c:	83 c4 0c             	add    esp,0xc
c000eb4f:	c3                   	ret    

c000eb50 <FPU::FPU(char const*)>:
c000eb50:	83 ec 0c             	sub    esp,0xc
c000eb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb57:	83 ec 08             	sub    esp,0x8
c000eb5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb5e:	50                   	push   eax
c000eb5f:	e8 da fc ff ff       	call   c000e83e <Device::Device(char const*)>
c000eb64:	83 c4 10             	add    esp,0x10
c000eb67:	ba 74 56 02 c0       	mov    edx,0xc0025674
c000eb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb70:	89 10                	mov    DWORD PTR [eax],edx
c000eb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb76:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000eb80:	90                   	nop
c000eb81:	83 c4 0c             	add    esp,0xc
c000eb84:	c3                   	ret    
c000eb85:	90                   	nop
c000eb86:	66 90                	xchg   ax,ax

c000eb88 <FPU::~FPU()>:
c000eb88:	83 ec 0c             	sub    esp,0xc
c000eb8b:	ba 74 56 02 c0       	mov    edx,0xc0025674
c000eb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb94:	89 10                	mov    DWORD PTR [eax],edx
c000eb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb9a:	83 ec 0c             	sub    esp,0xc
c000eb9d:	50                   	push   eax
c000eb9e:	e8 65 f9 ff ff       	call   c000e508 <Device::~Device()>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	90                   	nop
c000eba7:	83 c4 0c             	add    esp,0xc
c000ebaa:	c3                   	ret    
c000ebab:	90                   	nop

c000ebac <FPU::~FPU()>:
c000ebac:	83 ec 0c             	sub    esp,0xc
c000ebaf:	83 ec 0c             	sub    esp,0xc
c000ebb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebb6:	e8 cd ff ff ff       	call   c000eb88 <FPU::~FPU()>
c000ebbb:	83 c4 10             	add    esp,0x10
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	68 58 01 00 00       	push   0x158
c000ebc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebca:	e8 17 e4 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000ebcf:	83 c4 10             	add    esp,0x10
c000ebd2:	83 c4 0c             	add    esp,0xc
c000ebd5:	c3                   	ret    

c000ebd6 <setupFPU()>:
c000ebd6:	53                   	push   ebx
c000ebd7:	83 ec 14             	sub    esp,0x14
c000ebda:	68 44 56 02 c0       	push   0xc0025644
c000ebdf:	e8 e3 e4 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000ebe4:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c000ebea:	83 c4 10             	add    esp,0x10
c000ebed:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000ebf4:	74 1a                	je     c000ec10 <setupFPU()+0x3a>
c000ebf6:	83 ec 0c             	sub    esp,0xc
c000ebf9:	68 58 01 00 00       	push   0x158
c000ebfe:	e8 e4 b1 ff ff       	call   c0009de7 <malloc>
c000ec03:	89 c3                	mov    ebx,eax
c000ec05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec08:	e8 c3 2e 01 00       	call   c0021ad0 <AVX::AVX()>
c000ec0d:	eb 6d                	jmp    c000ec7c <setupFPU()+0xa6>
c000ec0f:	90                   	nop
c000ec10:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000ec16:	84 c0                	test   al,al
c000ec18:	79 1a                	jns    c000ec34 <setupFPU()+0x5e>
c000ec1a:	83 ec 0c             	sub    esp,0xc
c000ec1d:	68 58 01 00 00       	push   0x158
c000ec22:	e8 c0 b1 ff ff       	call   c0009de7 <malloc>
c000ec27:	89 c3                	mov    ebx,eax
c000ec29:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec2c:	e8 cf 2f 01 00       	call   c0021c00 <SSE::SSE()>
c000ec31:	eb 49                	jmp    c000ec7c <setupFPU()+0xa6>
c000ec33:	90                   	nop
c000ec34:	a8 20                	test   al,0x20
c000ec36:	74 1c                	je     c000ec54 <setupFPU()+0x7e>
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	68 58 01 00 00       	push   0x158
c000ec40:	e8 a2 b1 ff ff       	call   c0009de7 <malloc>
c000ec45:	89 c3                	mov    ebx,eax
c000ec47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec4a:	e8 15 2f 01 00       	call   c0021b64 <MMX::MMX()>
c000ec4f:	eb 2b                	jmp    c000ec7c <setupFPU()+0xa6>
c000ec51:	8d 76 00             	lea    esi,[esi+0x0]
c000ec54:	a8 10                	test   al,0x10
c000ec56:	74 2c                	je     c000ec84 <setupFPU()+0xae>
c000ec58:	83 ec 0c             	sub    esp,0xc
c000ec5b:	68 57 56 02 c0       	push   0xc0025657
c000ec60:	e8 62 e4 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000ec65:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000ec6c:	e8 76 b1 ff ff       	call   c0009de7 <malloc>
c000ec71:	89 c3                	mov    ebx,eax
c000ec73:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec76:	e8 13 30 01 00       	call   c0021c8e <x87::x87()>
c000ec7b:	90                   	nop
c000ec7c:	83 c4 10             	add    esp,0x10
c000ec7f:	eb 27                	jmp    c000eca8 <setupFPU()+0xd2>
c000ec81:	8d 76 00             	lea    esi,[esi+0x0]
c000ec84:	83 e0 ef             	and    eax,0xffffffef
c000ec87:	83 ec 0c             	sub    esp,0xc
c000ec8a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000ec90:	68 61 56 02 c0       	push   0xc0025661
c000ec95:	e8 2d e4 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000ec9a:	0f 20 c0             	mov    eax,cr0
c000ec9d:	83 c8 04             	or     eax,0x4
c000eca0:	0f 22 c0             	mov    cr0,eax
c000eca3:	31 db                	xor    ebx,ebx
c000eca5:	83 c4 10             	add    esp,0x10
c000eca8:	89 d8                	mov    eax,ebx
c000ecaa:	83 c4 08             	add    esp,0x8
c000ecad:	5b                   	pop    ebx
c000ecae:	c3                   	ret    
c000ecaf:	90                   	nop

c000ecb0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ecb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecb8:	c1 e0 04             	shl    eax,0x4
c000ecbb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ecbf:	8d 50 10             	lea    edx,[eax+0x10]
c000ecc2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ecc8:	74 08                	je     c000ecd2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ecca:	83 c0 04             	add    eax,0x4
c000eccd:	39 d0                	cmp    eax,edx
c000eccf:	75 f1                	jne    c000ecc2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ecd1:	c3                   	ret    
c000ecd2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ecdc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ece6:	eb e2                	jmp    c000ecca <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ece8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ece8:	57                   	push   edi
c000ece9:	31 c0                	xor    eax,eax
c000eceb:	56                   	push   esi
c000ecec:	53                   	push   ebx
c000eced:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ecf1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ecf5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ecf9:	89 da                	mov    edx,ebx
c000ecfb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ecff:	c1 e2 04             	shl    edx,0x4
c000ed02:	01 ca                	add    edx,ecx
c000ed04:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ed0c:	74 16                	je     c000ed24 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ed0e:	40                   	inc    eax
c000ed0f:	83 f8 04             	cmp    eax,0x4
c000ed12:	75 f0                	jne    c000ed04 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ed14:	c7 44 24 10 a4 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc00256a4
c000ed1c:	5b                   	pop    ebx
c000ed1d:	5e                   	pop    esi
c000ed1e:	5f                   	pop    edi
c000ed1f:	e9 85 64 00 00       	jmp    c00151a9 <Krnl::panic(char const*)>
c000ed24:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ed27:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ed2a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ed30:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ed36:	5b                   	pop    ebx
c000ed37:	5e                   	pop    esi
c000ed38:	5f                   	pop    edi
c000ed39:	c3                   	ret    

c000ed3a <doubleFault(regs*, void*)>:
c000ed3a:	55                   	push   ebp
c000ed3b:	89 e5                	mov    ebp,esp
c000ed3d:	83 ec 08             	sub    esp,0x8
c000ed40:	83 ec 0c             	sub    esp,0xc
c000ed43:	68 b1 56 02 c0       	push   0xc00256b1
c000ed48:	e8 5c 64 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000ed4d:	83 c4 10             	add    esp,0x10
c000ed50:	90                   	nop
c000ed51:	c9                   	leave  
c000ed52:	c3                   	ret    
c000ed53:	90                   	nop

c000ed54 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ed54:	56                   	push   esi
c000ed55:	53                   	push   ebx
c000ed56:	50                   	push   eax
c000ed57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ed5b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed5f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ed64:	75 35                	jne    c000ed9b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ed66:	8d 43 20             	lea    eax,[ebx+0x20]
c000ed69:	31 d2                	xor    edx,edx
c000ed6b:	89 c1                	mov    ecx,eax
c000ed6d:	c1 e1 04             	shl    ecx,0x4
c000ed70:	01 f1                	add    ecx,esi
c000ed72:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ed7a:	74 3e                	je     c000edba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ed7c:	42                   	inc    edx
c000ed7d:	83 fa 04             	cmp    edx,0x4
c000ed80:	75 f0                	jne    c000ed72 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ed82:	83 ec 0c             	sub    esp,0xc
c000ed85:	68 cb 56 02 c0       	push   0xc00256cb
c000ed8a:	e8 1a 64 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000ed8f:	83 c4 10             	add    esp,0x10
c000ed92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed97:	5a                   	pop    edx
c000ed98:	5b                   	pop    ebx
c000ed99:	5e                   	pop    esi
c000ed9a:	c3                   	ret    
c000ed9b:	83 ec 0c             	sub    esp,0xc
c000ed9e:	56                   	push   esi
c000ed9f:	e8 96 fb ff ff       	call   c000e93a <Device::getName()>
c000eda4:	83 c4 10             	add    esp,0x10
c000eda7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000edaa:	75 ba                	jne    c000ed66 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000edac:	83 fb 0f             	cmp    ebx,0xf
c000edaf:	7f 29                	jg     c000edda <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000edb1:	0f b6 9b c0 82 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7d40]
c000edb8:	eb ac                	jmp    c000ed66 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000edba:	8d 04 82             	lea    eax,[edx+eax*4]
c000edbd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc1:	8d 04 86             	lea    eax,[esi+eax*4]
c000edc4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000edca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000edce:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000edd4:	89 d8                	mov    eax,ebx
c000edd6:	5a                   	pop    edx
c000edd7:	5b                   	pop    ebx
c000edd8:	5e                   	pop    esi
c000edd9:	c3                   	ret    
c000edda:	83 ec 0c             	sub    esp,0xc
c000eddd:	68 be 56 02 c0       	push   0xc00256be
c000ede2:	e8 c2 63 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000ede7:	83 c4 10             	add    esp,0x10
c000edea:	e9 77 ff ff ff       	jmp    c000ed66 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000edef:	90                   	nop

c000edf0 <InterruptController::clearAllHandlers(int, bool)>:
c000edf0:	56                   	push   esi
c000edf1:	53                   	push   ebx
c000edf2:	52                   	push   edx
c000edf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000edfb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ee00:	75 61                	jne    c000ee63 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ee02:	8d 46 20             	lea    eax,[esi+0x20]
c000ee05:	c1 e6 04             	shl    esi,0x4
c000ee08:	c1 e0 04             	shl    eax,0x4
c000ee0b:	01 de                	add    esi,ebx
c000ee0d:	01 d8                	add    eax,ebx
c000ee0f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ee19:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ee23:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ee2d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ee37:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ee41:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ee4b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ee55:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ee5f:	58                   	pop    eax
c000ee60:	5b                   	pop    ebx
c000ee61:	5e                   	pop    esi
c000ee62:	c3                   	ret    
c000ee63:	83 ec 0c             	sub    esp,0xc
c000ee66:	53                   	push   ebx
c000ee67:	e8 ce fa ff ff       	call   c000e93a <Device::getName()>
c000ee6c:	83 c4 10             	add    esp,0x10
c000ee6f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee72:	75 8e                	jne    c000ee02 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee74:	83 fe 0f             	cmp    esi,0xf
c000ee77:	7f 09                	jg     c000ee82 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ee79:	0f b6 b6 c0 82 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7d40]
c000ee80:	eb 80                	jmp    c000ee02 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee82:	83 ec 0c             	sub    esp,0xc
c000ee85:	68 d8 56 02 c0       	push   0xc00256d8
c000ee8a:	e8 1a 63 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000ee8f:	83 c4 10             	add    esp,0x10
c000ee92:	e9 6b ff ff ff       	jmp    c000ee02 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee97:	90                   	nop

c000ee98 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ee98:	56                   	push   esi
c000ee99:	53                   	push   ebx
c000ee9a:	52                   	push   edx
c000ee9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eea3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000eea8:	75 3a                	jne    c000eee4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000eeaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eeae:	8d 50 20             	lea    edx,[eax+0x20]
c000eeb1:	c1 e2 04             	shl    edx,0x4
c000eeb4:	8d 04 16             	lea    eax,[esi+edx*1]
c000eeb7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000eebb:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eec1:	74 0b                	je     c000eece <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eec3:	83 c0 04             	add    eax,0x4
c000eec6:	39 d0                	cmp    eax,edx
c000eec8:	75 f1                	jne    c000eebb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000eeca:	58                   	pop    eax
c000eecb:	5b                   	pop    ebx
c000eecc:	5e                   	pop    esi
c000eecd:	c3                   	ret    
c000eece:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eed8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000eee2:	eb df                	jmp    c000eec3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000eee4:	83 ec 0c             	sub    esp,0xc
c000eee7:	56                   	push   esi
c000eee8:	e8 4d fa ff ff       	call   c000e93a <Device::getName()>
c000eeed:	83 c4 10             	add    esp,0x10
c000eef0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eef3:	75 b5                	jne    c000eeaa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eef5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000eefa:	7f 11                	jg     c000ef0d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000eefc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef00:	0f b6 80 c0 82 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7d40]
c000ef07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ef0b:	eb 9d                	jmp    c000eeaa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ef0d:	83 ec 0c             	sub    esp,0xc
c000ef10:	68 e5 56 02 c0       	push   0xc00256e5
c000ef15:	e8 8f 62 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000ef1a:	83 c4 10             	add    esp,0x10
c000ef1d:	eb 8b                	jmp    c000eeaa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ef1f <nmiHandler(regs*, void*)>:
c000ef1f:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ef24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef28:	e9 0f a6 ff ff       	jmp    c000953c <Computer::handleNMI()>

c000ef2d <int_handler>:
c000ef2d:	55                   	push   ebp
c000ef2e:	57                   	push   edi
c000ef2f:	56                   	push   esi
c000ef30:	53                   	push   ebx
c000ef31:	83 ec 0c             	sub    esp,0xc
c000ef34:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ef38:	80 3d a4 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296a4,0x0
c000ef3f:	74 0b                	je     c000ef4c <int_handler+0x1f>
c000ef41:	fa                   	cli    
c000ef42:	f4                   	hlt    
c000ef43:	80 3d a4 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296a4,0x0
c000ef4a:	75 f5                	jne    c000ef41 <int_handler+0x14>
c000ef4c:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ef51:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ef54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ef5a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ef60:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ef63:	83 f8 17             	cmp    eax,0x17
c000ef66:	77 13                	ja     c000ef7b <int_handler+0x4e>
c000ef68:	83 ec 08             	sub    esp,0x8
c000ef6b:	8b 17                	mov    edx,DWORD PTR [edi]
c000ef6d:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ef70:	0f b6 c0             	movzx  eax,al
c000ef73:	50                   	push   eax
c000ef74:	57                   	push   edi
c000ef75:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ef78:	83 c4 10             	add    esp,0x10
c000ef7b:	83 c3 15             	add    ebx,0x15
c000ef7e:	c1 e3 04             	shl    ebx,0x4
c000ef81:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ef85:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000ef8c:	31 db                	xor    ebx,ebx
c000ef8e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ef92:	85 c0                	test   eax,eax
c000ef94:	74 13                	je     c000efa9 <int_handler+0x7c>
c000ef96:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ef99:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ef9d:	74 1c                	je     c000efbb <int_handler+0x8e>
c000ef9f:	83 ec 08             	sub    esp,0x8
c000efa2:	52                   	push   edx
c000efa3:	56                   	push   esi
c000efa4:	ff d0                	call   eax
c000efa6:	83 c4 10             	add    esp,0x10
c000efa9:	43                   	inc    ebx
c000efaa:	83 fb 04             	cmp    ebx,0x4
c000efad:	75 df                	jne    c000ef8e <int_handler+0x61>
c000efaf:	83 c4 0c             	add    esp,0xc
c000efb2:	31 c0                	xor    eax,eax
c000efb4:	5b                   	pop    ebx
c000efb5:	31 d2                	xor    edx,edx
c000efb7:	5e                   	pop    esi
c000efb8:	5f                   	pop    edi
c000efb9:	5d                   	pop    ebp
c000efba:	c3                   	ret    
c000efbb:	83 ec 08             	sub    esp,0x8
c000efbe:	52                   	push   edx
c000efbf:	56                   	push   esi
c000efc0:	ff d0                	call   eax
c000efc2:	83 c4 10             	add    esp,0x10
c000efc5:	83 c4 0c             	add    esp,0xc
c000efc8:	5b                   	pop    ebx
c000efc9:	5e                   	pop    esi
c000efca:	5f                   	pop    edi
c000efcb:	5d                   	pop    ebp
c000efcc:	c3                   	ret    
c000efcd:	90                   	nop

c000efce <InterruptController::InterruptController(char const*)>:
c000efce:	83 ec 1c             	sub    esp,0x1c
c000efd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efd5:	83 ec 08             	sub    esp,0x8
c000efd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efdc:	50                   	push   eax
c000efdd:	e8 5c f8 ff ff       	call   c000e83e <Device::Device(char const*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	ba 1c 5a 02 c0       	mov    edx,0xc0025a1c
c000efea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efee:	89 10                	mov    DWORD PTR [eax],edx
c000eff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eff4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000effe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f006:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000f00e:	7f 5e                	jg     c000f06e <InterruptController::InterruptController(char const*)+0xa0>
c000f010:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f018:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000f01d:	7f 49                	jg     c000f068 <InterruptController::InterruptController(char const*)+0x9a>
c000f01f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f023:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f027:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f02e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f032:	01 ca                	add    edx,ecx
c000f034:	83 c2 54             	add    edx,0x54
c000f037:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f03f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f043:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f047:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000f04e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f052:	01 ca                	add    edx,ecx
c000f054:	81 c2 54 04 00 00    	add    edx,0x454
c000f05a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000f062:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000f066:	eb b0                	jmp    c000f018 <InterruptController::InterruptController(char const*)+0x4a>
c000f068:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000f06c:	eb 98                	jmp    c000f006 <InterruptController::InterruptController(char const*)+0x38>
c000f06e:	90                   	nop
c000f06f:	83 c4 1c             	add    esp,0x1c
c000f072:	c3                   	ret    
c000f073:	90                   	nop

c000f074 <InterruptController::~InterruptController()>:
c000f074:	83 ec 0c             	sub    esp,0xc
c000f077:	ba 1c 5a 02 c0       	mov    edx,0xc0025a1c
c000f07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f080:	89 10                	mov    DWORD PTR [eax],edx
c000f082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f086:	83 ec 0c             	sub    esp,0xc
c000f089:	50                   	push   eax
c000f08a:	e8 79 f4 ff ff       	call   c000e508 <Device::~Device()>
c000f08f:	83 c4 10             	add    esp,0x10
c000f092:	90                   	nop
c000f093:	83 c4 0c             	add    esp,0xc
c000f096:	c3                   	ret    
c000f097:	90                   	nop

c000f098 <InterruptController::~InterruptController()>:
c000f098:	83 ec 0c             	sub    esp,0xc
c000f09b:	83 ec 0c             	sub    esp,0xc
c000f09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0a2:	e8 cd ff ff ff       	call   c000f074 <InterruptController::~InterruptController()>
c000f0a7:	83 c4 10             	add    esp,0x10
c000f0aa:	83 ec 08             	sub    esp,0x8
c000f0ad:	68 58 21 00 00       	push   0x2158
c000f0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0b6:	e8 2b df ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c000f0bb:	83 c4 10             	add    esp,0x10
c000f0be:	83 c4 0c             	add    esp,0xc
c000f0c1:	c3                   	ret    

c000f0c2 <displayDebugInfo(regs*)>:
c000f0c2:	55                   	push   ebp
c000f0c3:	57                   	push   edi
c000f0c4:	56                   	push   esi
c000f0c5:	53                   	push   ebx
c000f0c6:	83 ec 24             	sub    esp,0x24
c000f0c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f0cd:	0f 20 c2             	mov    edx,cr0
c000f0d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f0d4:	0f 20 d7             	mov    edi,cr2
c000f0d7:	0f 20 de             	mov    esi,cr3
c000f0da:	0f 20 e5             	mov    ebp,cr4
c000f0dd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000f0e0:	68 f2 56 02 c0       	push   0xc00256f2
c000f0e5:	e8 dd df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f0ea:	59                   	pop    ecx
c000f0eb:	58                   	pop    eax
c000f0ec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f0ef:	68 fd 56 02 c0       	push   0xc00256fd
c000f0f4:	e8 ce df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f0f9:	58                   	pop    eax
c000f0fa:	5a                   	pop    edx
c000f0fb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f0fe:	68 08 57 02 c0       	push   0xc0025708
c000f103:	e8 bf df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f108:	59                   	pop    ecx
c000f109:	58                   	pop    eax
c000f10a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f10d:	68 13 57 02 c0       	push   0xc0025713
c000f112:	e8 b0 df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f117:	58                   	pop    eax
c000f118:	5a                   	pop    edx
c000f119:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f11c:	68 1e 57 02 c0       	push   0xc002571e
c000f121:	e8 a1 df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f126:	59                   	pop    ecx
c000f127:	58                   	pop    eax
c000f128:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f12b:	68 29 57 02 c0       	push   0xc0025729
c000f130:	e8 92 df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f135:	58                   	pop    eax
c000f136:	5a                   	pop    edx
c000f137:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f13a:	68 34 57 02 c0       	push   0xc0025734
c000f13f:	e8 83 df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f144:	59                   	pop    ecx
c000f145:	58                   	pop    eax
c000f146:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f149:	68 3f 57 02 c0       	push   0xc002573f
c000f14e:	e8 74 df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f153:	58                   	pop    eax
c000f154:	5a                   	pop    edx
c000f155:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f158:	68 4a 57 02 c0       	push   0xc002574a
c000f15d:	e8 65 df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f162:	59                   	pop    ecx
c000f163:	58                   	pop    eax
c000f164:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f167:	68 59 57 02 c0       	push   0xc0025759
c000f16c:	e8 56 df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f171:	58                   	pop    eax
c000f172:	5a                   	pop    edx
c000f173:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f176:	68 64 57 02 c0       	push   0xc0025764
c000f17b:	e8 47 df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f180:	59                   	pop    ecx
c000f181:	58                   	pop    eax
c000f182:	57                   	push   edi
c000f183:	68 6f 57 02 c0       	push   0xc002576f
c000f188:	e8 3a df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f18d:	58                   	pop    eax
c000f18e:	5a                   	pop    edx
c000f18f:	56                   	push   esi
c000f190:	68 7a 57 02 c0       	push   0xc002577a
c000f195:	e8 2d df ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f19a:	59                   	pop    ecx
c000f19b:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f1a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1a6:	e8 2a bd ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c000f1ab:	58                   	pop    eax
c000f1ac:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f1af:	5a                   	pop    edx
c000f1b0:	c1 e0 05             	shl    eax,0x5
c000f1b3:	05 20 80 02 c0       	add    eax,0xc0028020
c000f1b8:	50                   	push   eax
c000f1b9:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f1be:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1c4:	e8 19 c2 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f1c9:	59                   	pop    ecx
c000f1ca:	58                   	pop    eax
c000f1cb:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f1d0:	68 85 57 02 c0       	push   0xc0025785
c000f1d5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1db:	e8 02 c2 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f1e0:	58                   	pop    eax
c000f1e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f1e6:	5a                   	pop    edx
c000f1e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1ea:	83 c0 0c             	add    eax,0xc
c000f1ed:	50                   	push   eax
c000f1ee:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f1f3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1f9:	e8 e4 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f1fe:	59                   	pop    ecx
c000f1ff:	58                   	pop    eax
c000f200:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f205:	68 8e 57 02 c0       	push   0xc002578e
c000f20a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f210:	e8 cd c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f215:	58                   	pop    eax
c000f216:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f21b:	5a                   	pop    edx
c000f21c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f21f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f225:	e8 72 c1 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f22a:	59                   	pop    ecx
c000f22b:	58                   	pop    eax
c000f22c:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f231:	68 96 57 02 c0       	push   0xc0025796
c000f236:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f23c:	e8 a1 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f241:	58                   	pop    eax
c000f242:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f247:	5a                   	pop    edx
c000f248:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f24b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f251:	e8 46 c1 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f256:	59                   	pop    ecx
c000f257:	58                   	pop    eax
c000f258:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f25d:	68 9e 57 02 c0       	push   0xc002579e
c000f262:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f268:	e8 75 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f26d:	58                   	pop    eax
c000f26e:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f273:	5a                   	pop    edx
c000f274:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f277:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f27d:	e8 1a c1 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f282:	59                   	pop    ecx
c000f283:	58                   	pop    eax
c000f284:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f289:	68 a6 57 02 c0       	push   0xc00257a6
c000f28e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f294:	e8 49 c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f299:	58                   	pop    eax
c000f29a:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f29f:	5a                   	pop    edx
c000f2a0:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f2a3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2a9:	e8 ee c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f2ae:	59                   	pop    ecx
c000f2af:	58                   	pop    eax
c000f2b0:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f2b5:	68 ae 57 02 c0       	push   0xc00257ae
c000f2ba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2c0:	e8 1d c1 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f2c5:	58                   	pop    eax
c000f2c6:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f2cb:	5a                   	pop    edx
c000f2cc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f2cf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2d5:	e8 c2 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f2da:	59                   	pop    ecx
c000f2db:	58                   	pop    eax
c000f2dc:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f2e1:	68 b6 57 02 c0       	push   0xc00257b6
c000f2e6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2ec:	e8 f1 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f2f1:	58                   	pop    eax
c000f2f2:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f2f7:	5a                   	pop    edx
c000f2f8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f2fb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f301:	e8 96 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f306:	59                   	pop    ecx
c000f307:	58                   	pop    eax
c000f308:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f30d:	68 be 57 02 c0       	push   0xc00257be
c000f312:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f318:	e8 c5 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f31d:	58                   	pop    eax
c000f31e:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f323:	5a                   	pop    edx
c000f324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f328:	52                   	push   edx
c000f329:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f32f:	e8 68 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f334:	59                   	pop    ecx
c000f335:	58                   	pop    eax
c000f336:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f33b:	68 c7 57 02 c0       	push   0xc00257c7
c000f340:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f346:	e8 97 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f34b:	58                   	pop    eax
c000f34c:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f351:	5a                   	pop    edx
c000f352:	57                   	push   edi
c000f353:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f359:	e8 3e c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f35e:	59                   	pop    ecx
c000f35f:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f364:	5f                   	pop    edi
c000f365:	68 cf 57 02 c0       	push   0xc00257cf
c000f36a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f370:	e8 6d c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f375:	58                   	pop    eax
c000f376:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f37b:	5a                   	pop    edx
c000f37c:	56                   	push   esi
c000f37d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f383:	e8 14 c0 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f388:	59                   	pop    ecx
c000f389:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f38e:	5e                   	pop    esi
c000f38f:	68 d7 57 02 c0       	push   0xc00257d7
c000f394:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f39a:	e8 43 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f39f:	5f                   	pop    edi
c000f3a0:	58                   	pop    eax
c000f3a1:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f3a6:	55                   	push   ebp
c000f3a7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3ad:	e8 ea bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f3b2:	58                   	pop    eax
c000f3b3:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f3b8:	5a                   	pop    edx
c000f3b9:	68 df 57 02 c0       	push   0xc00257df
c000f3be:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3c4:	e8 19 c0 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f3c9:	0f 21 c0             	mov    eax,db0
c000f3cc:	59                   	pop    ecx
c000f3cd:	5e                   	pop    esi
c000f3ce:	50                   	push   eax
c000f3cf:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f3d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3da:	e8 bd bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f3df:	5f                   	pop    edi
c000f3e0:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f3e5:	5d                   	pop    ebp
c000f3e6:	68 e8 57 02 c0       	push   0xc00257e8
c000f3eb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3f1:	e8 ec bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f3f6:	0f 21 c8             	mov    eax,db1
c000f3f9:	5a                   	pop    edx
c000f3fa:	59                   	pop    ecx
c000f3fb:	50                   	push   eax
c000f3fc:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f401:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f407:	e8 90 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f40c:	5e                   	pop    esi
c000f40d:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f412:	5f                   	pop    edi
c000f413:	68 f0 57 02 c0       	push   0xc00257f0
c000f418:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f41e:	e8 bf bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f423:	0f 21 d0             	mov    eax,db2
c000f426:	5d                   	pop    ebp
c000f427:	5a                   	pop    edx
c000f428:	50                   	push   eax
c000f429:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f42e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f434:	e8 63 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f439:	59                   	pop    ecx
c000f43a:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f43f:	5e                   	pop    esi
c000f440:	68 f8 57 02 c0       	push   0xc00257f8
c000f445:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f44b:	e8 92 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f450:	0f 21 d8             	mov    eax,db3
c000f453:	5f                   	pop    edi
c000f454:	5d                   	pop    ebp
c000f455:	50                   	push   eax
c000f456:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f45b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f461:	e8 36 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f466:	58                   	pop    eax
c000f467:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f46c:	5a                   	pop    edx
c000f46d:	68 00 58 02 c0       	push   0xc0025800
c000f472:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f478:	e8 65 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f47d:	0f 21 f0             	mov    eax,db6
c000f480:	59                   	pop    ecx
c000f481:	5e                   	pop    esi
c000f482:	50                   	push   eax
c000f483:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f488:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f48e:	e8 09 bf ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f493:	5f                   	pop    edi
c000f494:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f499:	5d                   	pop    ebp
c000f49a:	68 08 58 02 c0       	push   0xc0025808
c000f49f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4a5:	e8 38 bf ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4aa:	0f 21 f8             	mov    eax,db7
c000f4ad:	5a                   	pop    edx
c000f4ae:	59                   	pop    ecx
c000f4af:	50                   	push   eax
c000f4b0:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f4b5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4bb:	e8 dc be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f4c0:	5e                   	pop    esi
c000f4c1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f4c4:	e8 10 90 00 00       	call   c00184d9 <Thr::getDriverNameFromAddress(unsigned long)>
c000f4c9:	83 c4 10             	add    esp,0x10
c000f4cc:	85 c0                	test   eax,eax
c000f4ce:	74 7d                	je     c000f54d <displayDebugInfo(regs*)+0x48b>
c000f4d0:	89 c6                	mov    esi,eax
c000f4d2:	50                   	push   eax
c000f4d3:	50                   	push   eax
c000f4d4:	56                   	push   esi
c000f4d5:	68 10 58 02 c0       	push   0xc0025810
c000f4da:	e8 e8 db ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f4df:	5a                   	pop    edx
c000f4e0:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f4e5:	59                   	pop    ecx
c000f4e6:	68 1e 58 02 c0       	push   0xc002581e
c000f4eb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4f1:	e8 ec be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f4f6:	5f                   	pop    edi
c000f4f7:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f4fc:	5d                   	pop    ebp
c000f4fd:	56                   	push   esi
c000f4fe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f504:	e8 d9 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f509:	58                   	pop    eax
c000f50a:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f50f:	5a                   	pop    edx
c000f510:	68 2a 58 02 c0       	push   0xc002582a
c000f515:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f51b:	e8 c2 be ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c000f520:	59                   	pop    ecx
c000f521:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c000f526:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f52c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f52f:	e8 dc 8f 00 00       	call   c0018510 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f534:	5b                   	pop    ebx
c000f535:	5d                   	pop    ebp
c000f536:	50                   	push   eax
c000f537:	57                   	push   edi
c000f538:	e8 5f be ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c000f53d:	58                   	pop    eax
c000f53e:	5a                   	pop    edx
c000f53f:	56                   	push   esi
c000f540:	68 36 58 02 c0       	push   0xc0025836
c000f545:	e8 7d db ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f54a:	83 c4 10             	add    esp,0x10
c000f54d:	fa                   	cli    
c000f54e:	f4                   	hlt    
c000f54f:	eb fe                	jmp    c000f54f <displayDebugInfo(regs*)+0x48d>

c000f551 <x87EmulHandler(regs*, void*)>:
c000f551:	53                   	push   ebx
c000f552:	83 ec 14             	sub    esp,0x14
c000f555:	68 46 58 02 c0       	push   0xc0025846
c000f55a:	e8 68 db ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f55f:	0f 20 c2             	mov    edx,cr0
c000f562:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f567:	83 c4 10             	add    esp,0x10
c000f56a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f56e:	0f 85 0f 01 00 00    	jne    c000f683 <x87EmulHandler(regs*, void*)+0x132>
c000f574:	f6 05 e1 8b 02 c0 40 	test   BYTE PTR ds:0xc0028be1,0x40
c000f57b:	75 30                	jne    c000f5ad <x87EmulHandler(regs*, void*)+0x5c>
c000f57d:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000f582:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f588:	85 c0                	test   eax,eax
c000f58a:	74 05                	je     c000f591 <x87EmulHandler(regs*, void*)+0x40>
c000f58c:	83 e2 08             	and    edx,0x8
c000f58f:	75 23                	jne    c000f5b4 <x87EmulHandler(regs*, void*)+0x63>
c000f591:	83 ec 0c             	sub    esp,0xc
c000f594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f598:	e8 a1 b4 00 00       	call   c001aa3e <Vm::x87Handler(regs*)>
c000f59d:	83 c4 10             	add    esp,0x10
c000f5a0:	84 c0                	test   al,al
c000f5a2:	0f 84 db 00 00 00    	je     c000f683 <x87EmulHandler(regs*, void*)+0x132>
c000f5a8:	83 c4 08             	add    esp,0x8
c000f5ab:	5b                   	pop    ebx
c000f5ac:	c3                   	ret    
c000f5ad:	0f 06                	clts   
c000f5af:	83 c4 08             	add    esp,0x8
c000f5b2:	5b                   	pop    ebx
c000f5b3:	c3                   	ret    
c000f5b4:	83 ec 0c             	sub    esp,0xc
c000f5b7:	68 76 58 02 c0       	push   0xc0025876
c000f5bc:	e8 06 db ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f5c1:	0f 06                	clts   
c000f5c3:	a1 08 8d 02 c0       	mov    eax,ds:0xc0028d08
c000f5c8:	83 c4 10             	add    esp,0x10
c000f5cb:	85 c0                	test   eax,eax
c000f5cd:	74 33                	je     c000f602 <x87EmulHandler(regs*, void*)+0xb1>
c000f5cf:	83 ec 0c             	sub    esp,0xc
c000f5d2:	68 83 58 02 c0       	push   0xc0025883
c000f5d7:	e8 eb da ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f5dc:	59                   	pop    ecx
c000f5dd:	a1 08 8d 02 c0       	mov    eax,ds:0xc0028d08
c000f5e2:	5b                   	pop    ebx
c000f5e3:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f5e6:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c000f5ec:	83 c0 3f             	add    eax,0x3f
c000f5ef:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f5f5:	83 e0 c0             	and    eax,0xffffffc0
c000f5f8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f5fa:	50                   	push   eax
c000f5fb:	52                   	push   edx
c000f5fc:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f5ff:	83 c4 10             	add    esp,0x10
c000f602:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f607:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f60a:	85 c0                	test   eax,eax
c000f60c:	74 4e                	je     c000f65c <x87EmulHandler(regs*, void*)+0x10b>
c000f60e:	83 ec 0c             	sub    esp,0xc
c000f611:	68 af 58 02 c0       	push   0xc00258af
c000f616:	e8 ac da ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f61b:	59                   	pop    ecx
c000f61c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f621:	5b                   	pop    ebx
c000f622:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f625:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c000f62b:	83 c0 3f             	add    eax,0x3f
c000f62e:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f634:	83 e0 c0             	and    eax,0xffffffc0
c000f637:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f639:	50                   	push   eax
c000f63a:	52                   	push   edx
c000f63b:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f63e:	c7 04 24 c5 58 02 c0 	mov    DWORD PTR [esp],0xc00258c5
c000f645:	e8 7d da ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f64a:	83 c4 10             	add    esp,0x10
c000f64d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f652:	a3 08 8d 02 c0       	mov    ds:0xc0028d08,eax
c000f657:	83 c4 08             	add    esp,0x8
c000f65a:	5b                   	pop    ebx
c000f65b:	c3                   	ret    
c000f65c:	83 ec 0c             	sub    esp,0xc
c000f65f:	68 96 58 02 c0       	push   0xc0025896
c000f664:	e8 5e da ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f669:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c000f66f:	c7 04 24 40 02 00 00 	mov    DWORD PTR [esp],0x240
c000f676:	e8 6c a7 ff ff       	call   c0009de7 <malloc>
c000f67b:	83 c4 10             	add    esp,0x10
c000f67e:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c000f681:	eb ca                	jmp    c000f64d <x87EmulHandler(regs*, void*)+0xfc>
c000f683:	83 ec 0c             	sub    esp,0xc
c000f686:	68 60 58 02 c0       	push   0xc0025860
c000f68b:	e8 37 da ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f690:	58                   	pop    eax
c000f691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f695:	e8 28 fa ff ff       	call   c000f0c2 <displayDebugInfo(regs*)>

c000f69a <gpFault(regs*, void*)>:
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 14             	sub    esp,0x14
c000f69e:	c7 05 04 8d 02 c0 fb 9e 01 c0 	mov    DWORD PTR ds:0xc0028d04,0xc0019efb
c000f6a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f6ac:	53                   	push   ebx
c000f6ad:	e8 49 a8 00 00       	call   c0019efb <Vm::faultHandler(regs*)>
c000f6b2:	83 c4 10             	add    esp,0x10
c000f6b5:	84 c0                	test   al,al
c000f6b7:	74 05                	je     c000f6be <gpFault(regs*, void*)+0x24>
c000f6b9:	83 c4 08             	add    esp,0x8
c000f6bc:	5b                   	pop    ebx
c000f6bd:	c3                   	ret    
c000f6be:	83 ec 0c             	sub    esp,0xc
c000f6c1:	68 da 58 02 c0       	push   0xc00258da
c000f6c6:	e8 fc d9 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f6cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6ce:	e8 ef f9 ff ff       	call   c000f0c2 <displayDebugInfo(regs*)>

c000f6d3 <pgFault(regs*, void*)>:
c000f6d3:	53                   	push   ebx
c000f6d4:	83 ec 10             	sub    esp,0x10
c000f6d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f6db:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f6de:	68 f5 58 02 c0       	push   0xc00258f5
c000f6e3:	e8 df d9 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f6e8:	0f 20 d0             	mov    eax,cr2
c000f6eb:	5a                   	pop    edx
c000f6ec:	59                   	pop    ecx
c000f6ed:	50                   	push   eax
c000f6ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f6f6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f6fc:	e8 41 d5 ff ff       	call   c000cc42 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	84 c0                	test   al,al
c000f706:	74 05                	je     c000f70d <pgFault(regs*, void*)+0x3a>
c000f708:	83 c4 08             	add    esp,0x8
c000f70b:	5b                   	pop    ebx
c000f70c:	c3                   	ret    
c000f70d:	83 ec 0c             	sub    esp,0xc
c000f710:	68 0a 59 02 c0       	push   0xc002590a
c000f715:	e8 ad d9 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f71a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f71d:	e8 a0 f9 ff ff       	call   c000f0c2 <displayDebugInfo(regs*)>

c000f722 <otherISRHandler(regs*, void*)>:
c000f722:	53                   	push   ebx
c000f723:	83 ec 0c             	sub    esp,0xc
c000f726:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f72a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f72d:	50                   	push   eax
c000f72e:	50                   	push   eax
c000f72f:	68 17 59 02 c0       	push   0xc0025917
c000f734:	e8 8e d9 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f739:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f73c:	e8 81 f9 ff ff       	call   c000f0c2 <displayDebugInfo(regs*)>

c000f741 <opcodeFault(regs*, void*)>:
c000f741:	55                   	push   ebp
c000f742:	89 e5                	mov    ebp,esp
c000f744:	56                   	push   esi
c000f745:	53                   	push   ebx
c000f746:	83 ec 30             	sub    esp,0x30
c000f749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f74c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f74f:	83 ec 08             	sub    esp,0x8
c000f752:	50                   	push   eax
c000f753:	68 34 59 02 c0       	push   0xc0025934
c000f758:	e8 6a d9 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f75d:	83 c4 10             	add    esp,0x10
c000f760:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000f765:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f76b:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f771:	84 c0                	test   al,al
c000f773:	74 24                	je     c000f799 <opcodeFault(regs*, void*)+0x58>
c000f775:	83 ec 0c             	sub    esp,0xc
c000f778:	68 44 59 02 c0       	push   0xc0025944
c000f77d:	e8 45 d9 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000f782:	83 c4 10             	add    esp,0x10
c000f785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f788:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f78b:	8d 50 19             	lea    edx,[eax+0x19]
c000f78e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f791:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f794:	e9 7b 03 00 00       	jmp    c000fb14 <opcodeFault(regs*, void*)+0x3d3>
c000f799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f79c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f79f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f7a2:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f7a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7ac:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f7af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7b2:	8a 00                	mov    al,BYTE PTR [eax]
c000f7b4:	3c f0                	cmp    al,0xf0
c000f7b6:	75 17                	jne    c000f7cf <opcodeFault(regs*, void*)+0x8e>
c000f7b8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7c1:	8d 50 01             	lea    edx,[eax+0x1]
c000f7c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7c7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7ca:	e9 d6 00 00 00       	jmp    c000f8a5 <opcodeFault(regs*, void*)+0x164>
c000f7cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7d2:	8a 00                	mov    al,BYTE PTR [eax]
c000f7d4:	3c f2                	cmp    al,0xf2
c000f7d6:	74 09                	je     c000f7e1 <opcodeFault(regs*, void*)+0xa0>
c000f7d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7db:	8a 00                	mov    al,BYTE PTR [eax]
c000f7dd:	3c f3                	cmp    al,0xf3
c000f7df:	75 1b                	jne    c000f7fc <opcodeFault(regs*, void*)+0xbb>
c000f7e1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f7e5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7ee:	8d 50 01             	lea    edx,[eax+0x1]
c000f7f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7f7:	e9 a9 00 00 00       	jmp    c000f8a5 <opcodeFault(regs*, void*)+0x164>
c000f7fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ff:	8a 00                	mov    al,BYTE PTR [eax]
c000f801:	3c 66                	cmp    al,0x66
c000f803:	75 1b                	jne    c000f820 <opcodeFault(regs*, void*)+0xdf>
c000f805:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f809:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f80c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f80f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f812:	8d 50 01             	lea    edx,[eax+0x1]
c000f815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f818:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f81b:	e9 85 00 00 00       	jmp    c000f8a5 <opcodeFault(regs*, void*)+0x164>
c000f820:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f823:	8a 00                	mov    al,BYTE PTR [eax]
c000f825:	3c 67                	cmp    al,0x67
c000f827:	75 18                	jne    c000f841 <opcodeFault(regs*, void*)+0x100>
c000f829:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f82d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f833:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f836:	8d 50 01             	lea    edx,[eax+0x1]
c000f839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f83c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f83f:	eb 64                	jmp    c000f8a5 <opcodeFault(regs*, void*)+0x164>
c000f841:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f844:	8a 00                	mov    al,BYTE PTR [eax]
c000f846:	3c 2e                	cmp    al,0x2e
c000f848:	74 09                	je     c000f853 <opcodeFault(regs*, void*)+0x112>
c000f84a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f84d:	8a 00                	mov    al,BYTE PTR [eax]
c000f84f:	3c 3e                	cmp    al,0x3e
c000f851:	75 18                	jne    c000f86b <opcodeFault(regs*, void*)+0x12a>
c000f853:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f857:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f85a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f85d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f860:	8d 50 01             	lea    edx,[eax+0x1]
c000f863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f866:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f869:	eb 3a                	jmp    c000f8a5 <opcodeFault(regs*, void*)+0x164>
c000f86b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f86e:	8a 00                	mov    al,BYTE PTR [eax]
c000f870:	3c 36                	cmp    al,0x36
c000f872:	74 1b                	je     c000f88f <opcodeFault(regs*, void*)+0x14e>
c000f874:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f877:	8a 00                	mov    al,BYTE PTR [eax]
c000f879:	3c 26                	cmp    al,0x26
c000f87b:	74 12                	je     c000f88f <opcodeFault(regs*, void*)+0x14e>
c000f87d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f880:	8a 00                	mov    al,BYTE PTR [eax]
c000f882:	3c 64                	cmp    al,0x64
c000f884:	74 09                	je     c000f88f <opcodeFault(regs*, void*)+0x14e>
c000f886:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f889:	8a 00                	mov    al,BYTE PTR [eax]
c000f88b:	3c 65                	cmp    al,0x65
c000f88d:	75 16                	jne    c000f8a5 <opcodeFault(regs*, void*)+0x164>
c000f88f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f893:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f899:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f89c:	8d 50 01             	lea    edx,[eax+0x1]
c000f89f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8a8:	8a 00                	mov    al,BYTE PTR [eax]
c000f8aa:	3c 0f                	cmp    al,0xf
c000f8ac:	0f 85 8d 01 00 00    	jne    c000fa3f <opcodeFault(regs*, void*)+0x2fe>
c000f8b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b5:	40                   	inc    eax
c000f8b6:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b8:	3c c7                	cmp    al,0xc7
c000f8ba:	0f 85 7f 01 00 00    	jne    c000fa3f <opcodeFault(regs*, void*)+0x2fe>
c000f8c0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f8c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f8c9:	8d 50 01             	lea    edx,[eax+0x1]
c000f8cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8cf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f8d2:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f8d5:	50                   	push   eax
c000f8d6:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f8d9:	50                   	push   eax
c000f8da:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f8dd:	50                   	push   eax
c000f8de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f8e1:	e8 dc 4f 00 00       	call   c00148c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f8e6:	83 c4 10             	add    esp,0x10
c000f8e9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f8ec:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f8ef:	83 f0 01             	xor    eax,0x1
c000f8f2:	84 c0                	test   al,al
c000f8f4:	0f 84 45 01 00 00    	je     c000fa3f <opcodeFault(regs*, void*)+0x2fe>
c000f8fa:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f8fd:	3c 01                	cmp    al,0x1
c000f8ff:	0f 85 3a 01 00 00    	jne    c000fa3f <opcodeFault(regs*, void*)+0x2fe>
c000f905:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f908:	83 f0 01             	xor    eax,0x1
c000f90b:	84 c0                	test   al,al
c000f90d:	0f 84 2c 01 00 00    	je     c000fa3f <opcodeFault(regs*, void*)+0x2fe>
c000f913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f916:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f919:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f91c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f923:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f926:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f929:	89 c2                	mov    edx,eax
c000f92b:	b8 00 00 00 00       	mov    eax,0x0
c000f930:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f933:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f939:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f93c:	ba 00 00 00 00       	mov    edx,0x0
c000f941:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f944:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f94a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f94d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f950:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f957:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f95a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f95d:	89 c2                	mov    edx,eax
c000f95f:	b8 00 00 00 00       	mov    eax,0x0
c000f964:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f967:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f96d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f970:	ba 00 00 00 00       	mov    edx,0x0
c000f975:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f978:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f97b:	fa                   	cli    
c000f97c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000f981:	40                   	inc    eax
c000f982:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000f987:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f98a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f98d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f98f:	89 c1                	mov    ecx,eax
c000f991:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f994:	89 cb                	mov    ebx,ecx
c000f996:	89 d0                	mov    eax,edx
c000f998:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f99b:	89 c6                	mov    esi,eax
c000f99d:	89 f0                	mov    eax,esi
c000f99f:	09 d8                	or     eax,ebx
c000f9a1:	85 c0                	test   eax,eax
c000f9a3:	75 21                	jne    c000f9c6 <opcodeFault(regs*, void*)+0x285>
c000f9a5:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f9a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f9ab:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f9ae:	89 01                	mov    DWORD PTR [ecx],eax
c000f9b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f9b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9b9:	83 c8 40             	or     eax,0x40
c000f9bc:	89 c2                	mov    edx,eax
c000f9be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f9c4:	eb 3e                	jmp    c000fa04 <opcodeFault(regs*, void*)+0x2c3>
c000f9c6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f9c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f9cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ce:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f9d1:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f9d4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f9d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9da:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f9dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f9e0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f9e3:	89 d0                	mov    eax,edx
c000f9e5:	31 d2                	xor    edx,edx
c000f9e7:	89 c3                	mov    ebx,eax
c000f9e9:	89 d6                	mov    esi,edx
c000f9eb:	89 da                	mov    edx,ebx
c000f9ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f9f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9f9:	83 e0 bf             	and    eax,0xffffffbf
c000f9fc:	89 c2                	mov    edx,eax
c000f9fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa01:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fa04:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000fa09:	48                   	dec    eax
c000fa0a:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000fa0f:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000fa14:	85 c0                	test   eax,eax
c000fa16:	75 01                	jne    c000fa19 <opcodeFault(regs*, void*)+0x2d8>
c000fa18:	fb                   	sti    
c000fa19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa1c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa1f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000fa22:	01 c2                	add    edx,eax
c000fa24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa27:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000fa2a:	83 ec 0c             	sub    esp,0xc
c000fa2d:	68 67 59 02 c0       	push   0xc0025967
c000fa32:	e8 90 d6 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000fa37:	83 c4 10             	add    esp,0x10
c000fa3a:	e9 d5 00 00 00       	jmp    c000fb14 <opcodeFault(regs*, void*)+0x3d3>
c000fa3f:	83 ec 0c             	sub    esp,0xc
c000fa42:	68 7a 59 02 c0       	push   0xc002597a
c000fa47:	e8 7b d6 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000fa4c:	83 c4 10             	add    esp,0x10
c000fa4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa52:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fa55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa5b:	c1 e0 04             	shl    eax,0x4
c000fa5e:	01 d0                	add    eax,edx
c000fa60:	83 c0 03             	add    eax,0x3
c000fa63:	8a 00                	mov    al,BYTE PTR [eax]
c000fa65:	0f b6 d8             	movzx  ebx,al
c000fa68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa6b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fa6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa74:	c1 e0 04             	shl    eax,0x4
c000fa77:	01 d0                	add    eax,edx
c000fa79:	83 c0 02             	add    eax,0x2
c000fa7c:	8a 00                	mov    al,BYTE PTR [eax]
c000fa7e:	0f b6 c8             	movzx  ecx,al
c000fa81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa84:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fa87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa8d:	c1 e0 04             	shl    eax,0x4
c000fa90:	01 d0                	add    eax,edx
c000fa92:	40                   	inc    eax
c000fa93:	8a 00                	mov    al,BYTE PTR [eax]
c000fa95:	0f b6 d0             	movzx  edx,al
c000fa98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa9b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000fa9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000faa4:	c1 e0 04             	shl    eax,0x4
c000faa7:	01 f0                	add    eax,esi
c000faa9:	8a 00                	mov    al,BYTE PTR [eax]
c000faab:	0f b6 c0             	movzx  eax,al
c000faae:	83 ec 0c             	sub    esp,0xc
c000fab1:	53                   	push   ebx
c000fab2:	51                   	push   ecx
c000fab3:	52                   	push   edx
c000fab4:	50                   	push   eax
c000fab5:	68 8c 59 02 c0       	push   0xc002598c
c000faba:	e8 08 d6 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000fabf:	83 c4 20             	add    esp,0x20
c000fac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fac5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fac8:	83 c0 03             	add    eax,0x3
c000facb:	8a 00                	mov    al,BYTE PTR [eax]
c000facd:	0f b6 d8             	movzx  ebx,al
c000fad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fad3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fad6:	83 c0 02             	add    eax,0x2
c000fad9:	8a 00                	mov    al,BYTE PTR [eax]
c000fadb:	0f b6 c8             	movzx  ecx,al
c000fade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fae1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fae4:	40                   	inc    eax
c000fae5:	8a 00                	mov    al,BYTE PTR [eax]
c000fae7:	0f b6 d0             	movzx  edx,al
c000faea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000faf0:	8a 00                	mov    al,BYTE PTR [eax]
c000faf2:	0f b6 c0             	movzx  eax,al
c000faf5:	83 ec 0c             	sub    esp,0xc
c000faf8:	53                   	push   ebx
c000faf9:	51                   	push   ecx
c000fafa:	52                   	push   edx
c000fafb:	50                   	push   eax
c000fafc:	68 b4 59 02 c0       	push   0xc00259b4
c000fb01:	e8 c1 d5 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c000fb06:	83 c4 20             	add    esp,0x20
c000fb09:	83 ec 0c             	sub    esp,0xc
c000fb0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fb0f:	e8 ae f5 ff ff       	call   c000f0c2 <displayDebugInfo(regs*)>
c000fb14:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fb17:	5b                   	pop    ebx
c000fb18:	5e                   	pop    esi
c000fb19:	5d                   	pop    ebp
c000fb1a:	c3                   	ret    

c000fb1b <displayProgramFault(char const*)>:
c000fb1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fb23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000fb29:	85 c0                	test   eax,eax
c000fb2b:	74 15                	je     c000fb42 <displayProgramFault(char const*)+0x27>
c000fb2d:	83 ec 0c             	sub    esp,0xc
c000fb30:	6a 04                	push   0x4
c000fb32:	6a 0f                	push   0xf
c000fb34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb38:	50                   	push   eax
c000fb39:	e8 a0 b5 ff ff       	call   c000b0de <VgaText::puts(char const*, VgaColour, VgaColour)>
c000fb3e:	83 c4 1c             	add    esp,0x1c
c000fb41:	c3                   	ret    
c000fb42:	c3                   	ret    

c000fb43 <setupInterruptController()>:
c000fb43:	55                   	push   ebp
c000fb44:	89 e5                	mov    ebp,esp
c000fb46:	53                   	push   ebx
c000fb47:	83 ec 24             	sub    esp,0x24
c000fb4a:	b8 00 00 00 00       	mov    eax,0x0
c000fb4f:	85 c0                	test   eax,eax
c000fb51:	0f 95 c0             	setne  al
c000fb54:	84 c0                	test   al,al
c000fb56:	74 5b                	je     c000fbb3 <setupInterruptController()+0x70>
c000fb58:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000fb5f:	83 ec 0c             	sub    esp,0xc
c000fb62:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fb65:	e8 7d a2 ff ff       	call   c0009de7 <malloc>
c000fb6a:	83 c4 10             	add    esp,0x10
c000fb6d:	89 c3                	mov    ebx,eax
c000fb6f:	83 ec 0c             	sub    esp,0xc
c000fb72:	53                   	push   ebx
c000fb73:	e8 54 23 01 00       	call   c0021ecc <APIC::APIC()>
c000fb78:	83 c4 10             	add    esp,0x10
c000fb7b:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fb7e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000fb81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb84:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb86:	83 c0 08             	add    eax,0x8
c000fb89:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8b:	6a 00                	push   0x0
c000fb8d:	6a 00                	push   0x0
c000fb8f:	6a 00                	push   0x0
c000fb91:	52                   	push   edx
c000fb92:	ff d0                	call   eax
c000fb94:	83 c4 10             	add    esp,0x10
c000fb97:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000fb9c:	83 ec 08             	sub    esp,0x8
c000fb9f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fba2:	50                   	push   eax
c000fba3:	e8 92 ea ff ff       	call   c000e63a <Device::addChild(Device*)>
c000fba8:	83 c4 10             	add    esp,0x10
c000fbab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbae:	e9 79 03 00 00       	jmp    c000ff2c <setupInterruptController()+0x3e9>
c000fbb3:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c000fbb8:	84 c0                	test   al,al
c000fbba:	75 14                	jne    c000fbd0 <setupInterruptController()+0x8d>
c000fbbc:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000fbc1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fbc7:	83 e2 fe             	and    edx,0xfffffffe
c000fbca:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fbd0:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000fbd5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fbdb:	83 e0 01             	and    eax,0x1
c000fbde:	84 c0                	test   al,al
c000fbe0:	0f 95 c0             	setne  al
c000fbe3:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fbe6:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fbed:	83 ec 0c             	sub    esp,0xc
c000fbf0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fbf3:	e8 ef a1 ff ff       	call   c0009de7 <malloc>
c000fbf8:	83 c4 10             	add    esp,0x10
c000fbfb:	89 c3                	mov    ebx,eax
c000fbfd:	83 ec 0c             	sub    esp,0xc
c000fc00:	53                   	push   ebx
c000fc01:	e8 1e 28 01 00       	call   c0022424 <PIC::PIC()>
c000fc06:	83 c4 10             	add    esp,0x10
c000fc09:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fc0c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc12:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc14:	83 c0 08             	add    eax,0x8
c000fc17:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc19:	6a 00                	push   0x0
c000fc1b:	6a 00                	push   0x0
c000fc1d:	6a 00                	push   0x0
c000fc1f:	52                   	push   edx
c000fc20:	ff d0                	call   eax
c000fc22:	83 c4 10             	add    esp,0x10
c000fc25:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fc29:	74 73                	je     c000fc9e <setupInterruptController()+0x15b>
c000fc2b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc31:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc33:	83 c0 0c             	add    eax,0xc
c000fc36:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc38:	6a 00                	push   0x0
c000fc3a:	6a 00                	push   0x0
c000fc3c:	6a 00                	push   0x0
c000fc3e:	52                   	push   edx
c000fc3f:	ff d0                	call   eax
c000fc41:	83 c4 10             	add    esp,0x10
c000fc44:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fc48:	74 15                	je     c000fc5f <setupInterruptController()+0x11c>
c000fc4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc4f:	83 c0 04             	add    eax,0x4
c000fc52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc54:	83 ec 0c             	sub    esp,0xc
c000fc57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc5a:	ff d0                	call   eax
c000fc5c:	83 c4 10             	add    esp,0x10
c000fc5f:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fc66:	83 ec 0c             	sub    esp,0xc
c000fc69:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fc6c:	e8 76 a1 ff ff       	call   c0009de7 <malloc>
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	89 c3                	mov    ebx,eax
c000fc76:	83 ec 0c             	sub    esp,0xc
c000fc79:	53                   	push   ebx
c000fc7a:	e8 4d 22 01 00       	call   c0021ecc <APIC::APIC()>
c000fc7f:	83 c4 10             	add    esp,0x10
c000fc82:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fc85:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc8d:	83 c0 08             	add    eax,0x8
c000fc90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc92:	6a 00                	push   0x0
c000fc94:	6a 00                	push   0x0
c000fc96:	6a 00                	push   0x0
c000fc98:	52                   	push   edx
c000fc99:	ff d0                	call   eax
c000fc9b:	83 c4 10             	add    esp,0x10
c000fc9e:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000fca3:	83 ec 08             	sub    esp,0x8
c000fca6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fca9:	50                   	push   eax
c000fcaa:	e8 8b e9 ff ff       	call   c000e63a <Device::addChild(Device*)>
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	c7 05 08 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d08,0x0
c000fcbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc1:	83 c0 24             	add    eax,0x24
c000fcc4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc6:	6a 00                	push   0x0
c000fcc8:	68 22 f7 00 c0       	push   0xc000f722
c000fccd:	6a 00                	push   0x0
c000fccf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcd2:	ff d0                	call   eax
c000fcd4:	83 c4 10             	add    esp,0x10
c000fcd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcda:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcdc:	83 c0 24             	add    eax,0x24
c000fcdf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fce1:	6a 00                	push   0x0
c000fce3:	68 22 f7 00 c0       	push   0xc000f722
c000fce8:	6a 01                	push   0x1
c000fcea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fced:	ff d0                	call   eax
c000fcef:	83 c4 10             	add    esp,0x10
c000fcf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcf5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf7:	83 c0 24             	add    eax,0x24
c000fcfa:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcfc:	6a 00                	push   0x0
c000fcfe:	68 1f ef 00 c0       	push   0xc000ef1f
c000fd03:	6a 02                	push   0x2
c000fd05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd08:	ff d0                	call   eax
c000fd0a:	83 c4 10             	add    esp,0x10
c000fd0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd10:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd12:	83 c0 24             	add    eax,0x24
c000fd15:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd17:	6a 00                	push   0x0
c000fd19:	68 22 f7 00 c0       	push   0xc000f722
c000fd1e:	6a 03                	push   0x3
c000fd20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd23:	ff d0                	call   eax
c000fd25:	83 c4 10             	add    esp,0x10
c000fd28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd2d:	83 c0 24             	add    eax,0x24
c000fd30:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd32:	6a 00                	push   0x0
c000fd34:	68 22 f7 00 c0       	push   0xc000f722
c000fd39:	6a 04                	push   0x4
c000fd3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd3e:	ff d0                	call   eax
c000fd40:	83 c4 10             	add    esp,0x10
c000fd43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd46:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd48:	83 c0 24             	add    eax,0x24
c000fd4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd4d:	6a 00                	push   0x0
c000fd4f:	68 22 f7 00 c0       	push   0xc000f722
c000fd54:	6a 05                	push   0x5
c000fd56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd59:	ff d0                	call   eax
c000fd5b:	83 c4 10             	add    esp,0x10
c000fd5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd61:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd63:	83 c0 24             	add    eax,0x24
c000fd66:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd68:	6a 00                	push   0x0
c000fd6a:	68 41 f7 00 c0       	push   0xc000f741
c000fd6f:	6a 06                	push   0x6
c000fd71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd74:	ff d0                	call   eax
c000fd76:	83 c4 10             	add    esp,0x10
c000fd79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd7e:	83 c0 24             	add    eax,0x24
c000fd81:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd83:	6a 00                	push   0x0
c000fd85:	68 51 f5 00 c0       	push   0xc000f551
c000fd8a:	6a 07                	push   0x7
c000fd8c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd8f:	ff d0                	call   eax
c000fd91:	83 c4 10             	add    esp,0x10
c000fd94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd97:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd99:	83 c0 24             	add    eax,0x24
c000fd9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd9e:	6a 00                	push   0x0
c000fda0:	68 3a ed 00 c0       	push   0xc000ed3a
c000fda5:	6a 08                	push   0x8
c000fda7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdaa:	ff d0                	call   eax
c000fdac:	83 c4 10             	add    esp,0x10
c000fdaf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb4:	83 c0 24             	add    eax,0x24
c000fdb7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdb9:	6a 00                	push   0x0
c000fdbb:	68 22 f7 00 c0       	push   0xc000f722
c000fdc0:	6a 09                	push   0x9
c000fdc2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdc5:	ff d0                	call   eax
c000fdc7:	83 c4 10             	add    esp,0x10
c000fdca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdcd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdcf:	83 c0 24             	add    eax,0x24
c000fdd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdd4:	6a 00                	push   0x0
c000fdd6:	68 22 f7 00 c0       	push   0xc000f722
c000fddb:	6a 0a                	push   0xa
c000fddd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fde0:	ff d0                	call   eax
c000fde2:	83 c4 10             	add    esp,0x10
c000fde5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fde8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdea:	83 c0 24             	add    eax,0x24
c000fded:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdef:	6a 00                	push   0x0
c000fdf1:	68 22 f7 00 c0       	push   0xc000f722
c000fdf6:	6a 0b                	push   0xb
c000fdf8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdfb:	ff d0                	call   eax
c000fdfd:	83 c4 10             	add    esp,0x10
c000fe00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe03:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe05:	83 c0 24             	add    eax,0x24
c000fe08:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe0a:	6a 00                	push   0x0
c000fe0c:	68 22 f7 00 c0       	push   0xc000f722
c000fe11:	6a 0c                	push   0xc
c000fe13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe16:	ff d0                	call   eax
c000fe18:	83 c4 10             	add    esp,0x10
c000fe1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe20:	83 c0 24             	add    eax,0x24
c000fe23:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe25:	6a 00                	push   0x0
c000fe27:	68 9a f6 00 c0       	push   0xc000f69a
c000fe2c:	6a 0d                	push   0xd
c000fe2e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe31:	ff d0                	call   eax
c000fe33:	83 c4 10             	add    esp,0x10
c000fe36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe39:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe3b:	83 c0 24             	add    eax,0x24
c000fe3e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe40:	6a 00                	push   0x0
c000fe42:	68 d3 f6 00 c0       	push   0xc000f6d3
c000fe47:	6a 0e                	push   0xe
c000fe49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe4c:	ff d0                	call   eax
c000fe4e:	83 c4 10             	add    esp,0x10
c000fe51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe54:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe56:	83 c0 24             	add    eax,0x24
c000fe59:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe5b:	6a 00                	push   0x0
c000fe5d:	68 22 f7 00 c0       	push   0xc000f722
c000fe62:	6a 0f                	push   0xf
c000fe64:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe67:	ff d0                	call   eax
c000fe69:	83 c4 10             	add    esp,0x10
c000fe6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe6f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe71:	83 c0 24             	add    eax,0x24
c000fe74:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe76:	6a 00                	push   0x0
c000fe78:	68 22 f7 00 c0       	push   0xc000f722
c000fe7d:	6a 10                	push   0x10
c000fe7f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe82:	ff d0                	call   eax
c000fe84:	83 c4 10             	add    esp,0x10
c000fe87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe8a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe8c:	83 c0 24             	add    eax,0x24
c000fe8f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe91:	6a 00                	push   0x0
c000fe93:	68 22 f7 00 c0       	push   0xc000f722
c000fe98:	6a 11                	push   0x11
c000fe9a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe9d:	ff d0                	call   eax
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fea5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fea7:	83 c0 24             	add    eax,0x24
c000feaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000feac:	6a 00                	push   0x0
c000feae:	68 22 f7 00 c0       	push   0xc000f722
c000feb3:	6a 12                	push   0x12
c000feb5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000feb8:	ff d0                	call   eax
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fec0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec2:	83 c0 24             	add    eax,0x24
c000fec5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec7:	6a 00                	push   0x0
c000fec9:	68 22 f7 00 c0       	push   0xc000f722
c000fece:	6a 13                	push   0x13
c000fed0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fed3:	ff d0                	call   eax
c000fed5:	83 c4 10             	add    esp,0x10
c000fed8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fedb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fedd:	83 c0 24             	add    eax,0x24
c000fee0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fee2:	6a 00                	push   0x0
c000fee4:	68 22 f7 00 c0       	push   0xc000f722
c000fee9:	6a 14                	push   0x14
c000feeb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000feee:	ff d0                	call   eax
c000fef0:	83 c4 10             	add    esp,0x10
c000fef3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fef6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef8:	83 c0 24             	add    eax,0x24
c000fefb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fefd:	6a 00                	push   0x0
c000feff:	68 22 f7 00 c0       	push   0xc000f722
c000ff04:	6a 1e                	push   0x1e
c000ff06:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff09:	ff d0                	call   eax
c000ff0b:	83 c4 10             	add    esp,0x10
c000ff0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff11:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff13:	83 c0 24             	add    eax,0x24
c000ff16:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff18:	6a 00                	push   0x0
c000ff1a:	68 4f 75 01 c0       	push   0xc001754f
c000ff1f:	6a 60                	push   0x60
c000ff21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000ff24:	ff d0                	call   eax
c000ff26:	83 c4 10             	add    esp,0x10
c000ff29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff2c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff2f:	c9                   	leave  
c000ff30:	c3                   	ret    
c000ff31:	90                   	nop

c000ff32 <InterruptController::convertLegacyIRQNumber(int)>:
c000ff32:	55                   	push   ebp
c000ff33:	89 e5                	mov    ebp,esp
c000ff35:	83 ec 08             	sub    esp,0x8
c000ff38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff3b:	83 ec 0c             	sub    esp,0xc
c000ff3e:	50                   	push   eax
c000ff3f:	e8 f6 e9 ff ff       	call   c000e93a <Device::getName()>
c000ff44:	83 c4 10             	add    esp,0x10
c000ff47:	8a 00                	mov    al,BYTE PTR [eax]
c000ff49:	3c 41                	cmp    al,0x41
c000ff4b:	0f 94 c0             	sete   al
c000ff4e:	84 c0                	test   al,al
c000ff50:	74 28                	je     c000ff7a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ff52:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000ff56:	7f 12                	jg     c000ff6a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000ff58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ff5b:	05 c0 82 02 c0       	add    eax,0xc00282c0
c000ff60:	8a 00                	mov    al,BYTE PTR [eax]
c000ff62:	0f b6 c0             	movzx  eax,al
c000ff65:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000ff68:	eb 10                	jmp    c000ff7a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	68 dc 59 02 c0       	push   0xc00259dc
c000ff72:	e8 32 52 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c000ff77:	83 c4 10             	add    esp,0x10
c000ff7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ff7d:	c9                   	leave  
c000ff7e:	c3                   	ret    
c000ff7f:	90                   	nop

c000ff80 <startGUI(void*)>:
c000ff80:	55                   	push   ebp
c000ff81:	89 e5                	mov    ebp,esp
c000ff83:	53                   	push   ebx
c000ff84:	83 ec 04             	sub    esp,0x4
c000ff87:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000ff8c:	48                   	dec    eax
c000ff8d:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000ff92:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000ff97:	85 c0                	test   eax,eax
c000ff99:	75 01                	jne    c000ff9c <startGUI(void*)+0x1c>
c000ff9b:	fb                   	sti    
c000ff9c:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c000ffa2:	83 ec 08             	sub    esp,0x8
c000ffa5:	6a 01                	push   0x1
c000ffa7:	68 5c 5a 02 c0       	push   0xc0025a5c
c000ffac:	e8 79 85 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c000ffb1:	83 c4 10             	add    esp,0x10
c000ffb4:	83 ec 08             	sub    esp,0x8
c000ffb7:	53                   	push   ebx
c000ffb8:	50                   	push   eax
c000ffb9:	e8 9d 87 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c000ffbe:	83 c4 10             	add    esp,0x10
c000ffc1:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c000ffc7:	83 ec 08             	sub    esp,0x8
c000ffca:	6a 01                	push   0x1
c000ffcc:	68 76 5a 02 c0       	push   0xc0025a76
c000ffd1:	e8 54 85 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c000ffd6:	83 c4 10             	add    esp,0x10
c000ffd9:	83 ec 08             	sub    esp,0x8
c000ffdc:	53                   	push   ebx
c000ffdd:	50                   	push   eax
c000ffde:	e8 78 87 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	90                   	nop
c000ffe7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ffea:	c9                   	leave  
c000ffeb:	c3                   	ret    

c000ffec <startGUIVESA(void*)>:
c000ffec:	55                   	push   ebp
c000ffed:	89 e5                	mov    ebp,esp
c000ffef:	53                   	push   ebx
c000fff0:	83 ec 04             	sub    esp,0x4
c000fff3:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c000fff8:	48                   	dec    eax
c000fff9:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c000fffe:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0010003:	85 c0                	test   eax,eax
c0010005:	75 01                	jne    c0010008 <startGUIVESA(void*)+0x1c>
c0010007:	fb                   	sti    
c0010008:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c001000e:	83 ec 08             	sub    esp,0x8
c0010011:	6a 01                	push   0x1
c0010013:	68 94 5a 02 c0       	push   0xc0025a94
c0010018:	e8 0d 85 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 ec 08             	sub    esp,0x8
c0010023:	53                   	push   ebx
c0010024:	50                   	push   eax
c0010025:	e8 31 87 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c001002a:	83 c4 10             	add    esp,0x10
c001002d:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c0010033:	83 ec 08             	sub    esp,0x8
c0010036:	6a 01                	push   0x1
c0010038:	68 76 5a 02 c0       	push   0xc0025a76
c001003d:	e8 e8 84 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c0010042:	83 c4 10             	add    esp,0x10
c0010045:	83 ec 08             	sub    esp,0x8
c0010048:	53                   	push   ebx
c0010049:	50                   	push   eax
c001004a:	e8 0c 87 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c001004f:	83 c4 10             	add    esp,0x10
c0010052:	90                   	nop
c0010053:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010056:	c9                   	leave  
c0010057:	c3                   	ret    

c0010058 <sendKeyToTerminal(unsigned char)>:
c0010058:	55                   	push   ebp
c0010059:	89 e5                	mov    ebp,esp
c001005b:	83 ec 28             	sub    esp,0x28
c001005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010061:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0010064:	a1 44 8c 02 c0       	mov    eax,ds:0xc0028c44
c0010069:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001006d:	83 ec 08             	sub    esp,0x8
c0010070:	52                   	push   edx
c0010071:	50                   	push   eax
c0010072:	e8 0d b5 ff ff       	call   c000b584 <VgaText::receiveKey(unsigned char)>
c0010077:	83 c4 10             	add    esp,0x10
c001007a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001007e:	0f 85 8f 00 00 00    	jne    c0010113 <sendKeyToTerminal(unsigned char)+0xbb>
c0010084:	fa                   	cli    
c0010085:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001008a:	40                   	inc    eax
c001008b:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0010090:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c0010095:	40                   	inc    eax
c0010096:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c001009b:	a1 20 8d 02 c0       	mov    eax,ds:0xc0028d20
c00100a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00100a3:	c7 05 20 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028d20,0x0
c00100ad:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00100b1:	74 1f                	je     c00100d2 <sendKeyToTerminal(unsigned char)+0x7a>
c00100b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00100b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00100b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00100bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00100bf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00100c2:	83 ec 0c             	sub    esp,0xc
c00100c5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00100c8:	e8 ff 92 00 00       	call   c00193cc <unblockTask(ThreadControlBlock*)>
c00100cd:	83 c4 10             	add    esp,0x10
c00100d0:	eb db                	jmp    c00100ad <sendKeyToTerminal(unsigned char)+0x55>
c00100d2:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00100d7:	48                   	dec    eax
c00100d8:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00100dd:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00100e2:	85 c0                	test   eax,eax
c00100e4:	75 18                	jne    c00100fe <sendKeyToTerminal(unsigned char)+0xa6>
c00100e6:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c00100eb:	85 c0                	test   eax,eax
c00100ed:	74 0f                	je     c00100fe <sendKeyToTerminal(unsigned char)+0xa6>
c00100ef:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00100f9:	e8 12 8e 00 00       	call   c0018f10 <schedule()>
c00100fe:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0010103:	48                   	dec    eax
c0010104:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0010109:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001010e:	85 c0                	test   eax,eax
c0010110:	75 01                	jne    c0010113 <sendKeyToTerminal(unsigned char)+0xbb>
c0010112:	fb                   	sti    
c0010113:	90                   	nop
c0010114:	c9                   	leave  
c0010115:	c3                   	ret    

c0010116 <sendKeyboardToken(KeyboardToken)>:
c0010116:	55                   	push   ebp
c0010117:	89 e5                	mov    ebp,esp
c0010119:	83 ec 18             	sub    esp,0x18
c001011c:	e8 83 53 00 00       	call   c00154a4 <Krnl::userIOReceived()>
c0010121:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0010124:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010127:	0f b7 c0             	movzx  eax,ax
c001012a:	83 f2 01             	xor    edx,0x1
c001012d:	88 90 40 8d 02 c0    	mov    BYTE PTR [eax-0x3ffd72c0],dl
c0010133:	a1 28 8d 02 c0       	mov    eax,ds:0xc0028d28
c0010138:	85 c0                	test   eax,eax
c001013a:	74 24                	je     c0010160 <sendKeyboardToken(KeyboardToken)+0x4a>
c001013c:	8b 0d 28 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d28
c0010142:	83 ec 04             	sub    esp,0x4
c0010145:	68 40 8d 02 c0       	push   0xc0028d40
c001014a:	83 ec 08             	sub    esp,0x8
c001014d:	89 e2                	mov    edx,esp
c001014f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010152:	89 02                	mov    DWORD PTR [edx],eax
c0010154:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010157:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001015b:	ff d1                	call   ecx
c001015d:	83 c4 10             	add    esp,0x10
c0010160:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0010164:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0010167:	a0 48 91 02 c0       	mov    al,ds:0xc0029148
c001016c:	38 c2                	cmp    dl,al
c001016e:	74 1c                	je     c001018c <sendKeyboardToken(KeyboardToken)+0x76>
c0010170:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0010173:	a2 48 91 02 c0       	mov    ds:0xc0029148,al
c0010178:	a0 48 91 02 c0       	mov    al,ds:0xc0029148
c001017d:	0f b6 c0             	movzx  eax,al
c0010180:	83 ec 0c             	sub    esp,0xc
c0010183:	50                   	push   eax
c0010184:	e8 3d aa ff ff       	call   c000abc6 <setTerminalScrollLock(bool)>
c0010189:	83 c4 10             	add    esp,0x10
c001018c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001018f:	84 c0                	test   al,al
c0010191:	0f 84 ae 00 00 00    	je     c0010245 <sendKeyboardToken(KeyboardToken)+0x12f>
c0010197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001019a:	66 3d 10 03          	cmp    ax,0x310
c001019e:	75 06                	jne    c00101a6 <sendKeyboardToken(KeyboardToken)+0x90>
c00101a0:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00101a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101a9:	66 3d 11 03          	cmp    ax,0x311
c00101ad:	75 06                	jne    c00101b5 <sendKeyboardToken(KeyboardToken)+0x9f>
c00101af:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00101b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101b8:	66 3d 12 03          	cmp    ax,0x312
c00101bc:	75 06                	jne    c00101c4 <sendKeyboardToken(KeyboardToken)+0xae>
c00101be:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00101c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101c7:	66 3d 13 03          	cmp    ax,0x313
c00101cb:	75 06                	jne    c00101d3 <sendKeyboardToken(KeyboardToken)+0xbd>
c00101cd:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00101d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101d6:	66 3d 14 03          	cmp    ax,0x314
c00101da:	75 06                	jne    c00101e2 <sendKeyboardToken(KeyboardToken)+0xcc>
c00101dc:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00101e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101e5:	66 3d 15 03          	cmp    ax,0x315
c00101e9:	75 06                	jne    c00101f1 <sendKeyboardToken(KeyboardToken)+0xdb>
c00101eb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00101f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101f4:	66 3d 16 03          	cmp    ax,0x316
c00101f8:	75 06                	jne    c0010200 <sendKeyboardToken(KeyboardToken)+0xea>
c00101fa:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0010200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010203:	66 3d 17 03          	cmp    ax,0x317
c0010207:	75 06                	jne    c001020f <sendKeyboardToken(KeyboardToken)+0xf9>
c0010209:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001020f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010212:	66 3d 18 03          	cmp    ax,0x318
c0010216:	75 06                	jne    c001021e <sendKeyboardToken(KeyboardToken)+0x108>
c0010218:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001021e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010221:	66 3d 19 03          	cmp    ax,0x319
c0010225:	75 06                	jne    c001022d <sendKeyboardToken(KeyboardToken)+0x117>
c0010227:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001022d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010230:	66 3d 1a 03          	cmp    ax,0x31a
c0010234:	0f 85 c9 00 00 00    	jne    c0010303 <sendKeyboardToken(KeyboardToken)+0x1ed>
c001023a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0010240:	e9 be 00 00 00       	jmp    c0010303 <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010248:	66 3d 10 03          	cmp    ax,0x310
c001024c:	75 0a                	jne    c0010258 <sendKeyboardToken(KeyboardToken)+0x142>
c001024e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0010254:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001025b:	66 3d 11 03          	cmp    ax,0x311
c001025f:	75 0a                	jne    c001026b <sendKeyboardToken(KeyboardToken)+0x155>
c0010261:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0010267:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001026e:	66 3d 12 03          	cmp    ax,0x312
c0010272:	75 0a                	jne    c001027e <sendKeyboardToken(KeyboardToken)+0x168>
c0010274:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001027a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001027e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010281:	66 3d 13 03          	cmp    ax,0x313
c0010285:	75 0a                	jne    c0010291 <sendKeyboardToken(KeyboardToken)+0x17b>
c0010287:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001028d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010294:	66 3d 14 03          	cmp    ax,0x314
c0010298:	75 0a                	jne    c00102a4 <sendKeyboardToken(KeyboardToken)+0x18e>
c001029a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00102a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102a7:	66 3d 15 03          	cmp    ax,0x315
c00102ab:	75 0a                	jne    c00102b7 <sendKeyboardToken(KeyboardToken)+0x1a1>
c00102ad:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00102b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102ba:	66 3d 16 03          	cmp    ax,0x316
c00102be:	75 0a                	jne    c00102ca <sendKeyboardToken(KeyboardToken)+0x1b4>
c00102c0:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00102c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102cd:	66 3d 17 03          	cmp    ax,0x317
c00102d1:	75 0a                	jne    c00102dd <sendKeyboardToken(KeyboardToken)+0x1c7>
c00102d3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00102d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102e0:	66 3d 18 03          	cmp    ax,0x318
c00102e4:	75 0a                	jne    c00102f0 <sendKeyboardToken(KeyboardToken)+0x1da>
c00102e6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00102ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00102f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102f3:	66 3d 19 03          	cmp    ax,0x319
c00102f7:	75 0a                	jne    c0010303 <sendKeyboardToken(KeyboardToken)+0x1ed>
c00102f9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00102ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010306:	66 3d 00 02          	cmp    ax,0x200
c001030a:	75 2c                	jne    c0010338 <sendKeyboardToken(KeyboardToken)+0x222>
c001030c:	a0 40 91 02 c0       	mov    al,ds:0xc0029140
c0010311:	83 f0 01             	xor    eax,0x1
c0010314:	84 c0                	test   al,al
c0010316:	74 20                	je     c0010338 <sendKeyboardToken(KeyboardToken)+0x222>
c0010318:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c001031d:	6a 01                	push   0x1
c001031f:	6a 00                	push   0x0
c0010321:	68 80 ff 00 c0       	push   0xc000ff80
c0010326:	50                   	push   eax
c0010327:	e8 c8 89 00 00       	call   c0018cf4 <Process::createThread(void (*)(void*), void*, int)>
c001032c:	83 c4 10             	add    esp,0x10
c001032f:	c6 05 40 91 02 c0 01 	mov    BYTE PTR ds:0xc0029140,0x1
c0010336:	eb 33                	jmp    c001036b <sendKeyboardToken(KeyboardToken)+0x255>
c0010338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001033b:	66 3d 01 02          	cmp    ax,0x201
c001033f:	75 2a                	jne    c001036b <sendKeyboardToken(KeyboardToken)+0x255>
c0010341:	a0 40 91 02 c0       	mov    al,ds:0xc0029140
c0010346:	83 f0 01             	xor    eax,0x1
c0010349:	84 c0                	test   al,al
c001034b:	74 1e                	je     c001036b <sendKeyboardToken(KeyboardToken)+0x255>
c001034d:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c0010352:	6a 01                	push   0x1
c0010354:	6a 00                	push   0x0
c0010356:	68 ec ff 00 c0       	push   0xc000ffec
c001035b:	50                   	push   eax
c001035c:	e8 93 89 00 00       	call   c0018cf4 <Process::createThread(void (*)(void*), void*, int)>
c0010361:	83 c4 10             	add    esp,0x10
c0010364:	c6 05 40 91 02 c0 01 	mov    BYTE PTR ds:0xc0029140,0x1
c001036b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001036e:	66 3d 1d 03          	cmp    ax,0x31d
c0010372:	75 06                	jne    c001037a <sendKeyboardToken(KeyboardToken)+0x264>
c0010374:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001037a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001037d:	66 3d 1c 03          	cmp    ax,0x31c
c0010381:	75 06                	jne    c0010389 <sendKeyboardToken(KeyboardToken)+0x273>
c0010383:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0010389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001038c:	66 3d 1b 03          	cmp    ax,0x31b
c0010390:	75 06                	jne    c0010398 <sendKeyboardToken(KeyboardToken)+0x282>
c0010392:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0010398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001039b:	66 3d 1e 03          	cmp    ax,0x31e
c001039f:	75 06                	jne    c00103a7 <sendKeyboardToken(KeyboardToken)+0x291>
c00103a1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00103a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103aa:	66 3d 1f 03          	cmp    ax,0x31f
c00103ae:	75 06                	jne    c00103b6 <sendKeyboardToken(KeyboardToken)+0x2a0>
c00103b0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00103b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103b9:	66 3d 1a 03          	cmp    ax,0x31a
c00103bd:	75 06                	jne    c00103c5 <sendKeyboardToken(KeyboardToken)+0x2af>
c00103bf:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00103c5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00103c9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00103cc:	83 f0 01             	xor    eax,0x1
c00103cf:	84 c0                	test   al,al
c00103d1:	74 77                	je     c001044a <sendKeyboardToken(KeyboardToken)+0x334>
c00103d3:	a0 41 8e 02 c0       	mov    al,ds:0xc0028e41
c00103d8:	84 c0                	test   al,al
c00103da:	74 41                	je     c001041d <sendKeyboardToken(KeyboardToken)+0x307>
c00103dc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00103e0:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00103e4:	74 2b                	je     c0010411 <sendKeyboardToken(KeyboardToken)+0x2fb>
c00103e6:	8b 15 44 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029144
c00103ec:	89 d0                	mov    eax,edx
c00103ee:	c1 e0 02             	shl    eax,0x2
c00103f1:	01 d0                	add    eax,edx
c00103f3:	01 c0                	add    eax,eax
c00103f5:	a3 44 91 02 c0       	mov    ds:0xc0029144,eax
c00103fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103fd:	0f b7 c0             	movzx  eax,ax
c0010400:	8d 50 d0             	lea    edx,[eax-0x30]
c0010403:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c0010408:	01 d0                	add    eax,edx
c001040a:	a3 44 91 02 c0       	mov    ds:0xc0029144,eax
c001040f:	eb 6d                	jmp    c001047e <sendKeyboardToken(KeyboardToken)+0x368>
c0010411:	c7 05 44 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029144,0x0
c001041b:	eb 61                	jmp    c001047e <sendKeyboardToken(KeyboardToken)+0x368>
c001041d:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c0010422:	85 c0                	test   eax,eax
c0010424:	74 18                	je     c001043e <sendKeyboardToken(KeyboardToken)+0x328>
c0010426:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c001042b:	0f b6 c0             	movzx  eax,al
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	50                   	push   eax
c0010432:	e8 21 fc ff ff       	call   c0010058 <sendKeyToTerminal(unsigned char)>
c0010437:	83 c4 10             	add    esp,0x10
c001043a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001043e:	c7 05 44 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029144,0x0
c0010448:	eb 34                	jmp    c001047e <sendKeyboardToken(KeyboardToken)+0x368>
c001044a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001044d:	66 3d 01 01          	cmp    ax,0x101
c0010451:	75 2b                	jne    c001047e <sendKeyboardToken(KeyboardToken)+0x368>
c0010453:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c0010458:	85 c0                	test   eax,eax
c001045a:	74 18                	je     c0010474 <sendKeyboardToken(KeyboardToken)+0x35e>
c001045c:	a1 44 91 02 c0       	mov    eax,ds:0xc0029144
c0010461:	0f b6 c0             	movzx  eax,al
c0010464:	83 ec 0c             	sub    esp,0xc
c0010467:	50                   	push   eax
c0010468:	e8 eb fb ff ff       	call   c0010058 <sendKeyToTerminal(unsigned char)>
c001046d:	83 c4 10             	add    esp,0x10
c0010470:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010474:	c7 05 44 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029144,0x0
c001047e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010481:	83 f0 01             	xor    eax,0x1
c0010484:	84 c0                	test   al,al
c0010486:	74 4c                	je     c00104d4 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010488:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001048b:	83 f0 01             	xor    eax,0x1
c001048e:	84 c0                	test   al,al
c0010490:	74 42                	je     c00104d4 <sendKeyboardToken(KeyboardToken)+0x3be>
c0010492:	a0 40 8e 02 c0       	mov    al,ds:0xc0028e40
c0010497:	83 f0 01             	xor    eax,0x1
c001049a:	84 c0                	test   al,al
c001049c:	74 36                	je     c00104d4 <sendKeyboardToken(KeyboardToken)+0x3be>
c001049e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104a1:	66 83 f8 1f          	cmp    ax,0x1f
c00104a5:	76 09                	jbe    c00104b0 <sendKeyboardToken(KeyboardToken)+0x39a>
c00104a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104aa:	66 83 f8 7e          	cmp    ax,0x7e
c00104ae:	76 12                	jbe    c00104c2 <sendKeyboardToken(KeyboardToken)+0x3ac>
c00104b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104b3:	66 83 f8 0a          	cmp    ax,0xa
c00104b7:	74 09                	je     c00104c2 <sendKeyboardToken(KeyboardToken)+0x3ac>
c00104b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104bc:	66 83 f8 08          	cmp    ax,0x8
c00104c0:	75 12                	jne    c00104d4 <sendKeyboardToken(KeyboardToken)+0x3be>
c00104c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104c5:	0f b6 c0             	movzx  eax,al
c00104c8:	83 ec 0c             	sub    esp,0xc
c00104cb:	50                   	push   eax
c00104cc:	e8 87 fb ff ff       	call   c0010058 <sendKeyToTerminal(unsigned char)>
c00104d1:	83 c4 10             	add    esp,0x10
c00104d4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00104d7:	83 f0 01             	xor    eax,0x1
c00104da:	84 c0                	test   al,al
c00104dc:	74 4f                	je     c001052d <sendKeyboardToken(KeyboardToken)+0x417>
c00104de:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00104e1:	83 f0 01             	xor    eax,0x1
c00104e4:	84 c0                	test   al,al
c00104e6:	74 45                	je     c001052d <sendKeyboardToken(KeyboardToken)+0x417>
c00104e8:	a0 40 8e 02 c0       	mov    al,ds:0xc0028e40
c00104ed:	84 c0                	test   al,al
c00104ef:	74 3c                	je     c001052d <sendKeyboardToken(KeyboardToken)+0x417>
c00104f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104f4:	66 83 f8 3f          	cmp    ax,0x3f
c00104f8:	76 33                	jbe    c001052d <sendKeyboardToken(KeyboardToken)+0x417>
c00104fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104fd:	66 83 f8 7f          	cmp    ax,0x7f
c0010501:	77 2a                	ja     c001052d <sendKeyboardToken(KeyboardToken)+0x417>
c0010503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010506:	88 c2                	mov    dl,al
c0010508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001050b:	66 83 f8 5f          	cmp    ax,0x5f
c001050f:	76 04                	jbe    c0010515 <sendKeyboardToken(KeyboardToken)+0x3ff>
c0010511:	b0 20                	mov    al,0x20
c0010513:	eb 02                	jmp    c0010517 <sendKeyboardToken(KeyboardToken)+0x401>
c0010515:	b0 00                	mov    al,0x0
c0010517:	29 c2                	sub    edx,eax
c0010519:	88 d0                	mov    al,dl
c001051b:	83 e8 40             	sub    eax,0x40
c001051e:	0f b6 c0             	movzx  eax,al
c0010521:	83 ec 0c             	sub    esp,0xc
c0010524:	50                   	push   eax
c0010525:	e8 2e fb ff ff       	call   c0010058 <sendKeyToTerminal(unsigned char)>
c001052a:	83 c4 10             	add    esp,0x10
c001052d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010530:	66 3d 00 03          	cmp    ax,0x300
c0010534:	75 0f                	jne    c0010545 <sendKeyboardToken(KeyboardToken)+0x42f>
c0010536:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010539:	83 f0 01             	xor    eax,0x1
c001053c:	84 c0                	test   al,al
c001053e:	74 05                	je     c0010545 <sendKeyboardToken(KeyboardToken)+0x42f>
c0010540:	e8 f2 a9 ff ff       	call   c000af37 <doTerminalCycle()>
c0010545:	90                   	nop
c0010546:	c9                   	leave  
c0010547:	c3                   	ret    

c0010548 <clearInternalKeybuffer(VgaText*)>:
c0010548:	55                   	push   ebp
c0010549:	89 e5                	mov    ebp,esp
c001054b:	83 ec 08             	sub    esp,0x8
c001054e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010551:	05 32 01 00 00       	add    eax,0x132
c0010556:	83 ec 0c             	sub    esp,0xc
c0010559:	50                   	push   eax
c001055a:	e8 51 01 ff ff       	call   c00006b0 <strlen>
c001055f:	83 c4 10             	add    esp,0x10
c0010562:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010565:	81 c2 32 01 00 00    	add    edx,0x132
c001056b:	83 ec 04             	sub    esp,0x4
c001056e:	50                   	push   eax
c001056f:	6a 00                	push   0x0
c0010571:	52                   	push   edx
c0010572:	e8 1d 01 ff ff       	call   c0000694 <memset>
c0010577:	83 c4 10             	add    esp,0x10
c001057a:	90                   	nop
c001057b:	c9                   	leave  
c001057c:	c3                   	ret    

c001057d <readKeyboard(VgaText*, char*, unsigned long)>:
c001057d:	55                   	push   ebp
c001057e:	89 e5                	mov    ebp,esp
c0010580:	83 ec 18             	sub    esp,0x18
c0010583:	a1 28 8d 02 c0       	mov    eax,ds:0xc0028d28
c0010588:	85 c0                	test   eax,eax
c001058a:	74 2a                	je     c00105b6 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001058c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0010592:	8b 0d 28 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d28
c0010598:	83 ec 04             	sub    esp,0x4
c001059b:	68 40 8d 02 c0       	push   0xc0028d40
c00105a0:	83 ec 08             	sub    esp,0x8
c00105a3:	89 e2                	mov    edx,esp
c00105a5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00105a8:	89 02                	mov    DWORD PTR [edx],eax
c00105aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00105ad:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00105b1:	ff d1                	call   ecx
c00105b3:	83 c4 10             	add    esp,0x10
c00105b6:	fb                   	sti    
c00105b7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00105be:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00105c2:	0f 84 a1 00 00 00    	je     c0010669 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c00105c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00105cb:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c00105d1:	84 c0                	test   al,al
c00105d3:	75 28                	jne    c00105fd <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c00105d5:	fa                   	cli    
c00105d6:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00105db:	40                   	inc    eax
c00105dc:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00105e1:	e8 2a 89 00 00       	call   c0018f10 <schedule()>
c00105e6:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00105eb:	48                   	dec    eax
c00105ec:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00105f1:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00105f6:	85 c0                	test   eax,eax
c00105f8:	75 ce                	jne    c00105c8 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c00105fa:	fb                   	sti    
c00105fb:	eb cb                	jmp    c00105c8 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c00105fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010600:	8d 50 01             	lea    edx,[eax+0x1]
c0010603:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010606:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010609:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c001060f:	88 10                	mov    BYTE PTR [eax],dl
c0010611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010614:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001061a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001061d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010620:	05 32 01 00 00       	add    eax,0x132
c0010625:	83 ec 0c             	sub    esp,0xc
c0010628:	50                   	push   eax
c0010629:	e8 82 00 ff ff       	call   c00006b0 <strlen>
c001062e:	83 c4 10             	add    esp,0x10
c0010631:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010634:	81 c2 32 01 00 00    	add    edx,0x132
c001063a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001063d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010640:	81 c2 32 01 00 00    	add    edx,0x132
c0010646:	83 ec 04             	sub    esp,0x4
c0010649:	50                   	push   eax
c001064a:	51                   	push   ecx
c001064b:	52                   	push   edx
c001064c:	e8 7b ff fe ff       	call   c00005cc <memmove>
c0010651:	83 c4 10             	add    esp,0x10
c0010654:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010657:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001065a:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001065e:	0f 85 5a ff ff ff    	jne    c00105be <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0010664:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010667:	eb 03                	jmp    c001066c <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0010669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001066c:	c9                   	leave  
c001066d:	c3                   	ret    

c001066e <Keyboard::Keyboard(char const*)>:
c001066e:	83 ec 0c             	sub    esp,0xc
c0010671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010675:	83 ec 08             	sub    esp,0x8
c0010678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001067c:	50                   	push   eax
c001067d:	e8 bc e1 ff ff       	call   c000e83e <Device::Device(char const*)>
c0010682:	83 c4 10             	add    esp,0x10
c0010685:	ba b8 5a 02 c0       	mov    edx,0xc0025ab8
c001068a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068e:	89 10                	mov    DWORD PTR [eax],edx
c0010690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010694:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001069e:	c6 05 24 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d24,0x1
c00106a5:	90                   	nop
c00106a6:	83 c4 0c             	add    esp,0xc
c00106a9:	c3                   	ret    

c00106aa <Keyboard::~Keyboard()>:
c00106aa:	83 ec 0c             	sub    esp,0xc
c00106ad:	ba b8 5a 02 c0       	mov    edx,0xc0025ab8
c00106b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b6:	89 10                	mov    DWORD PTR [eax],edx
c00106b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106bc:	83 ec 0c             	sub    esp,0xc
c00106bf:	50                   	push   eax
c00106c0:	e8 43 de ff ff       	call   c000e508 <Device::~Device()>
c00106c5:	83 c4 10             	add    esp,0x10
c00106c8:	90                   	nop
c00106c9:	83 c4 0c             	add    esp,0xc
c00106cc:	c3                   	ret    
c00106cd:	90                   	nop

c00106ce <Keyboard::~Keyboard()>:
c00106ce:	83 ec 0c             	sub    esp,0xc
c00106d1:	83 ec 0c             	sub    esp,0xc
c00106d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106d8:	e8 cd ff ff ff       	call   c00106aa <Keyboard::~Keyboard()>
c00106dd:	83 c4 10             	add    esp,0x10
c00106e0:	83 ec 08             	sub    esp,0x8
c00106e3:	68 5c 01 00 00       	push   0x15c
c00106e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ec:	e8 f5 c8 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c00106f1:	83 c4 10             	add    esp,0x10
c00106f4:	83 c4 0c             	add    esp,0xc
c00106f7:	c3                   	ret    

c00106f8 <LogicalDisk::close(int, int, void*)>:
c00106f8:	83 c8 ff             	or     eax,0xffffffff
c00106fb:	c3                   	ret    

c00106fc <LogicalDisk::~LogicalDisk()>:
c00106fc:	83 ec 0c             	sub    esp,0xc
c00106ff:	ba 88 5b 02 c0       	mov    edx,0xc0025b88
c0010704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010708:	89 10                	mov    DWORD PTR [eax],edx
c001070a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070e:	83 ec 0c             	sub    esp,0xc
c0010711:	50                   	push   eax
c0010712:	e8 f1 dd ff ff       	call   c000e508 <Device::~Device()>
c0010717:	83 c4 10             	add    esp,0x10
c001071a:	90                   	nop
c001071b:	83 c4 0c             	add    esp,0xc
c001071e:	c3                   	ret    
c001071f:	90                   	nop

c0010720 <LogicalDisk::~LogicalDisk()>:
c0010720:	83 ec 0c             	sub    esp,0xc
c0010723:	83 ec 0c             	sub    esp,0xc
c0010726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001072a:	e8 cd ff ff ff       	call   c00106fc <LogicalDisk::~LogicalDisk()>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	83 ec 08             	sub    esp,0x8
c0010735:	68 74 01 00 00       	push   0x174
c001073a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001073e:	e8 a3 c8 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0010743:	83 c4 10             	add    esp,0x10
c0010746:	83 c4 0c             	add    esp,0xc
c0010749:	c3                   	ret    

c001074a <LogicalDisk::open(int, int, void*)>:
c001074a:	83 ec 18             	sub    esp,0x18
c001074d:	68 e4 5a 02 c0       	push   0xc0025ae4
c0010752:	e8 52 4a 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c0010757:	83 c8 ff             	or     eax,0xffffffff
c001075a:	83 c4 1c             	add    esp,0x1c
c001075d:	c3                   	ret    

c001075e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001075e:	53                   	push   ebx
c001075f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010763:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010767:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001076b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0010771:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0010777:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001077d:	77 10                	ja     c001078f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001077f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0010785:	89 d3                	mov    ebx,edx
c0010787:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001078d:	72 05                	jb     c0010794 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001078f:	83 c8 ff             	or     eax,0xffffffff
c0010792:	89 c2                	mov    edx,eax
c0010794:	5b                   	pop    ebx
c0010795:	c3                   	ret    

c0010796 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0010796:	56                   	push   esi
c0010797:	83 c8 ff             	or     eax,0xffffffff
c001079a:	53                   	push   ebx
c001079b:	89 c2                	mov    edx,eax
c001079d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107a1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00107a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107a9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00107af:	77 27                	ja     c00107d8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00107b1:	89 d8                	mov    eax,ebx
c00107b3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00107b9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00107bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107c4:	89 c2                	mov    edx,eax
c00107c6:	73 10                	jae    c00107d8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00107c8:	89 c8                	mov    eax,ecx
c00107ca:	89 da                	mov    edx,ebx
c00107cc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00107d2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00107d8:	5b                   	pop    ebx
c00107d9:	5e                   	pop    esi
c00107da:	c3                   	ret    
c00107db:	90                   	nop

c00107dc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00107dc:	83 ec 1c             	sub    esp,0x1c
c00107df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00107f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00107f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00107fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00107fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010802:	83 ec 08             	sub    esp,0x8
c0010805:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010809:	50                   	push   eax
c001080a:	e8 2f e0 ff ff       	call   c000e83e <Device::Device(char const*)>
c001080f:	83 c4 10             	add    esp,0x10
c0010812:	ba 88 5b 02 c0       	mov    edx,0xc0025b88
c0010817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001081b:	89 10                	mov    DWORD PTR [eax],edx
c001081d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010821:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001082c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010837:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010841:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010849:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001084d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010853:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010859:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001085d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010860:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010864:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001086a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0010870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010874:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010878:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001087e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010882:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001088c:	90                   	nop
c001088d:	83 c4 1c             	add    esp,0x1c
c0010890:	c3                   	ret    
c0010891:	90                   	nop

c0010892 <LogicalDisk::assignDriveLetter()>:
c0010892:	55                   	push   ebp
c0010893:	57                   	push   edi
c0010894:	56                   	push   esi
c0010895:	53                   	push   ebx
c0010896:	83 ec 14             	sub    esp,0x14
c0010899:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001089d:	8b 3d 60 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029160
c00108a3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00108a9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00108ad:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00108b3:	8b 3d 64 91 02 c0    	mov    edi,DWORD PTR ds:0xc0029164
c00108b9:	3c 01                	cmp    al,0x1
c00108bb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00108bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00108c3:	19 c0                	sbb    eax,eax
c00108c5:	83 e0 02             	and    eax,0x2
c00108c8:	83 c0 41             	add    eax,0x41
c00108cb:	0f be e8             	movsx  ebp,al
c00108ce:	3c 43                	cmp    al,0x43
c00108d0:	75 10                	jne    c00108e2 <LogicalDisk::assignDriveLetter()+0x50>
c00108d2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00108d9:	75 5d                	jne    c0010938 <LogicalDisk::assignDriveLetter()+0xa6>
c00108db:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00108e0:	75 56                	jne    c0010938 <LogicalDisk::assignDriveLetter()+0xa6>
c00108e2:	8d 75 bf             	lea    esi,[ebp-0x41]
c00108e5:	ba 01 00 00 00       	mov    edx,0x1
c00108ea:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00108ee:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00108f2:	d3 e2                	shl    edx,cl
c00108f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00108f8:	89 d7                	mov    edi,edx
c00108fa:	89 d6                	mov    esi,edx
c00108fc:	c1 ff 1f             	sar    edi,0x1f
c00108ff:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010903:	21 f9                	and    ecx,edi
c0010905:	09 d1                	or     ecx,edx
c0010907:	75 2f                	jne    c0010938 <LogicalDisk::assignDriveLetter()+0xa6>
c0010909:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001090d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010911:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010917:	09 f2                	or     edx,esi
c0010919:	89 15 60 91 02 c0    	mov    DWORD PTR ds:0xc0029160,edx
c001091f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010923:	09 fa                	or     edx,edi
c0010925:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010929:	89 15 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,edx
c001092f:	89 1c bd 80 91 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6e80],ebx
c0010936:	eb 08                	jmp    c0010940 <LogicalDisk::assignDriveLetter()+0xae>
c0010938:	45                   	inc    ebp
c0010939:	40                   	inc    eax
c001093a:	3c 5b                	cmp    al,0x5b
c001093c:	75 90                	jne    c00108ce <LogicalDisk::assignDriveLetter()+0x3c>
c001093e:	31 c0                	xor    eax,eax
c0010940:	83 c4 14             	add    esp,0x14
c0010943:	5b                   	pop    ebx
c0010944:	5e                   	pop    esi
c0010945:	5f                   	pop    edi
c0010946:	5d                   	pop    ebp
c0010947:	c3                   	ret    

c0010948 <LogicalDisk::mount()>:
c0010948:	56                   	push   esi
c0010949:	53                   	push   ebx
c001094a:	83 ec 1c             	sub    esp,0x1c
c001094d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0010951:	8b 1d f4 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf4
c0010957:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001095e:	50                   	push   eax
c001095f:	68 08 5b 02 c0       	push   0xc0025b08
c0010964:	e8 5e c7 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0010969:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010973:	83 c4 10             	add    esp,0x10
c0010976:	85 db                	test   ebx,ebx
c0010978:	74 4e                	je     c00109c8 <LogicalDisk::mount()+0x80>
c001097a:	83 ec 0c             	sub    esp,0xc
c001097d:	68 29 5b 02 c0       	push   0xc0025b29
c0010982:	e8 40 c7 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0010987:	83 c4 0c             	add    esp,0xc
c001098a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010991:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010993:	83 e8 41             	sub    eax,0x41
c0010996:	50                   	push   eax
c0010997:	56                   	push   esi
c0010998:	53                   	push   ebx
c0010999:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	84 c0                	test   al,al
c00109a1:	74 20                	je     c00109c3 <LogicalDisk::mount()+0x7b>
c00109a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00109a7:	83 ec 0c             	sub    esp,0xc
c00109aa:	68 45 5b 02 c0       	push   0xc0025b45
c00109af:	e8 13 c7 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00109b4:	83 c4 10             	add    esp,0x10
c00109b7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00109bd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00109c1:	eb 07                	jmp    c00109ca <LogicalDisk::mount()+0x82>
c00109c3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00109c6:	eb ae                	jmp    c0010976 <LogicalDisk::mount()+0x2e>
c00109c8:	31 c0                	xor    eax,eax
c00109ca:	83 c4 14             	add    esp,0x14
c00109cd:	5b                   	pop    ebx
c00109ce:	5e                   	pop    esi
c00109cf:	c3                   	ret    

c00109d0 <LogicalDisk::unmount()>:
c00109d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109d4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00109de:	c3                   	ret    
c00109df:	90                   	nop

c00109e0 <LogicalDisk::eject()>:
c00109e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109e4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00109ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00109ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00109f0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00109f3:	90                   	nop

c00109f4 <LogicalDisk::unassignDriveLetter()>:
c00109f4:	57                   	push   edi
c00109f5:	56                   	push   esi
c00109f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00109fa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010a01:	84 c9                	test   cl,cl
c0010a03:	75 0f                	jne    c0010a14 <LogicalDisk::unassignDriveLetter()+0x20>
c0010a05:	c7 44 24 0c 5e 5b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025b5e
c0010a0d:	5e                   	pop    esi
c0010a0e:	5f                   	pop    edi
c0010a0f:	e9 95 47 00 00       	jmp    c00151a9 <Krnl::panic(char const*)>
c0010a14:	83 e9 41             	sub    ecx,0x41
c0010a17:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010a1e:	b8 01 00 00 00       	mov    eax,0x1
c0010a23:	c7 04 8d 80 91 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6e80],0x0
c0010a2e:	d3 e0                	shl    eax,cl
c0010a30:	89 c7                	mov    edi,eax
c0010a32:	f7 d0                	not    eax
c0010a34:	c1 ff 1f             	sar    edi,0x1f
c0010a37:	21 05 60 91 02 c0    	and    DWORD PTR ds:0xc0029160,eax
c0010a3d:	89 fe                	mov    esi,edi
c0010a3f:	f7 d6                	not    esi
c0010a41:	21 35 64 91 02 c0    	and    DWORD PTR ds:0xc0029164,esi
c0010a47:	5e                   	pop    esi
c0010a48:	5f                   	pop    edi
c0010a49:	c3                   	ret    

c0010a4a <LogicalDisk::read(unsigned long long, int, void*)>:
c0010a4a:	57                   	push   edi
c0010a4b:	56                   	push   esi
c0010a4c:	53                   	push   ebx
c0010a4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a55:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010a59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010a63:	77 41                	ja     c0010aa6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010a65:	99                   	cdq    
c0010a66:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010a6c:	01 c8                	add    eax,ecx
c0010a6e:	11 da                	adc    edx,ebx
c0010a70:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010a76:	19 d7                	sbb    edi,edx
c0010a78:	72 33                	jb     c0010aad <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010a7a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010a80:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010a86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010a8a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010a8e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010a94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010a9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a9e:	5b                   	pop    ebx
c0010a9f:	5e                   	pop    esi
c0010aa0:	5f                   	pop    edi
c0010aa1:	e9 f4 0a 00 00       	jmp    c001159a <VCache::read(unsigned long long, int, void*)>
c0010aa6:	b8 05 00 00 00       	mov    eax,0x5
c0010aab:	eb 05                	jmp    c0010ab2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010aad:	b8 07 00 00 00       	mov    eax,0x7
c0010ab2:	5b                   	pop    ebx
c0010ab3:	5e                   	pop    esi
c0010ab4:	5f                   	pop    edi
c0010ab5:	c3                   	ret    

c0010ab6 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010ab6:	57                   	push   edi
c0010ab7:	56                   	push   esi
c0010ab8:	53                   	push   ebx
c0010ab9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010abd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ac1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010ac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ac9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010acf:	77 41                	ja     c0010b12 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010ad1:	99                   	cdq    
c0010ad2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010ad8:	01 c8                	add    eax,ecx
c0010ada:	11 da                	adc    edx,ebx
c0010adc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010ae2:	19 d7                	sbb    edi,edx
c0010ae4:	72 33                	jb     c0010b19 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010ae6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010aec:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010af2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010af6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010afa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010b00:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b0a:	5b                   	pop    ebx
c0010b0b:	5e                   	pop    esi
c0010b0c:	5f                   	pop    edi
c0010b0d:	e9 8e 09 00 00       	jmp    c00114a0 <VCache::write(unsigned long long, int, void*)>
c0010b12:	b8 05 00 00 00       	mov    eax,0x5
c0010b17:	eb 05                	jmp    c0010b1e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010b19:	b8 07 00 00 00       	mov    eax,0x7
c0010b1e:	5b                   	pop    ebx
c0010b1f:	5e                   	pop    esi
c0010b20:	5f                   	pop    edi
c0010b21:	c3                   	ret    
c0010b22:	66 90                	xchg   ax,ax

c0010b24 <Mouse::Mouse(char const*)>:
c0010b24:	83 ec 0c             	sub    esp,0xc
c0010b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2b:	83 ec 08             	sub    esp,0x8
c0010b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b32:	50                   	push   eax
c0010b33:	e8 06 dd ff ff       	call   c000e83e <Device::Device(char const*)>
c0010b38:	83 c4 10             	add    esp,0x10
c0010b3b:	ba b4 5b 02 c0       	mov    edx,0xc0025bb4
c0010b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b44:	89 10                	mov    DWORD PTR [eax],edx
c0010b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010b54:	90                   	nop
c0010b55:	83 c4 0c             	add    esp,0xc
c0010b58:	c3                   	ret    
c0010b59:	90                   	nop
c0010b5a:	66 90                	xchg   ax,ax

c0010b5c <Mouse::~Mouse()>:
c0010b5c:	83 ec 0c             	sub    esp,0xc
c0010b5f:	ba b4 5b 02 c0       	mov    edx,0xc0025bb4
c0010b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b68:	89 10                	mov    DWORD PTR [eax],edx
c0010b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6e:	83 ec 0c             	sub    esp,0xc
c0010b71:	50                   	push   eax
c0010b72:	e8 91 d9 ff ff       	call   c000e508 <Device::~Device()>
c0010b77:	83 c4 10             	add    esp,0x10
c0010b7a:	90                   	nop
c0010b7b:	83 c4 0c             	add    esp,0xc
c0010b7e:	c3                   	ret    
c0010b7f:	90                   	nop

c0010b80 <Mouse::~Mouse()>:
c0010b80:	83 ec 0c             	sub    esp,0xc
c0010b83:	83 ec 0c             	sub    esp,0xc
c0010b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b8a:	e8 cd ff ff ff       	call   c0010b5c <Mouse::~Mouse()>
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	83 ec 08             	sub    esp,0x8
c0010b95:	68 58 01 00 00       	push   0x158
c0010b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b9e:	e8 43 c4 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0010ba3:	83 c4 10             	add    esp,0x10
c0010ba6:	83 c4 0c             	add    esp,0xc
c0010ba9:	c3                   	ret    

c0010baa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010baa:	55                   	push   ebp
c0010bab:	57                   	push   edi
c0010bac:	56                   	push   esi
c0010bad:	53                   	push   ebx
c0010bae:	81 ec 28 01 00 00    	sub    esp,0x128
c0010bb4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010bbb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010bc2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010bc9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010bd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010bd4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010bd8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010bdf:	e8 56 dd ff ff       	call   c000e93a <Device::getName()>
c0010be4:	5a                   	pop    edx
c0010be5:	59                   	pop    ecx
c0010be6:	50                   	push   eax
c0010be7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010beb:	55                   	push   ebp
c0010bec:	e8 5f fb fe ff       	call   c0000750 <strcpy>
c0010bf1:	5b                   	pop    ebx
c0010bf2:	58                   	pop    eax
c0010bf3:	68 d8 5b 02 c0       	push   0xc0025bd8
c0010bf8:	55                   	push   ebp
c0010bf9:	e8 92 fc fe ff       	call   c0000890 <strcat>
c0010bfe:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010c05:	e8 dd 91 ff ff       	call   c0009de7 <malloc>
c0010c0a:	83 c4 0c             	add    esp,0xc
c0010c0d:	89 c3                	mov    ebx,eax
c0010c0f:	57                   	push   edi
c0010c10:	56                   	push   esi
c0010c11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c19:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010c20:	55                   	push   ebp
c0010c21:	50                   	push   eax
c0010c22:	e8 b5 fb ff ff       	call   c00107dc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010c27:	83 c4 14             	add    esp,0x14
c0010c2a:	53                   	push   ebx
c0010c2b:	e8 62 fc ff ff       	call   c0010892 <LogicalDisk::assignDriveLetter()>
c0010c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c33:	e8 10 fd ff ff       	call   c0010948 <LogicalDisk::mount()>
c0010c38:	58                   	pop    eax
c0010c39:	5a                   	pop    edx
c0010c3a:	53                   	push   ebx
c0010c3b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010c42:	e8 f3 d9 ff ff       	call   c000e63a <Device::addChild(Device*)>
c0010c47:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010c4d:	5b                   	pop    ebx
c0010c4e:	5e                   	pop    esi
c0010c4f:	5f                   	pop    edi
c0010c50:	5d                   	pop    ebp
c0010c51:	c3                   	ret    

c0010c52 <createPartitionsForDisk(PhysicalDisk*)>:
c0010c52:	55                   	push   ebp
c0010c53:	57                   	push   edi
c0010c54:	56                   	push   esi
c0010c55:	53                   	push   ebx
c0010c56:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010c5c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010c63:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010c69:	3d 00 02 00 00       	cmp    eax,0x200
c0010c6e:	74 27                	je     c0010c97 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010c70:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010c76:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010c7c:	83 ec 10             	sub    esp,0x10
c0010c7f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010c83:	99                   	cdq    
c0010c84:	c1 e6 0a             	shl    esi,0xa
c0010c87:	52                   	push   edx
c0010c88:	89 fd                	mov    ebp,edi
c0010c8a:	50                   	push   eax
c0010c8b:	55                   	push   ebp
c0010c8c:	56                   	push   esi
c0010c8d:	e8 0e 23 01 00       	call   c0022fa0 <__udivdi3>
c0010c92:	e9 b1 00 00 00       	jmp    c0010d48 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010c97:	83 ec 0c             	sub    esp,0xc
c0010c9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c9c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010ca0:	56                   	push   esi
c0010ca1:	6a 01                	push   0x1
c0010ca3:	6a 00                	push   0x0
c0010ca5:	6a 00                	push   0x0
c0010ca7:	53                   	push   ebx
c0010ca8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010cab:	83 c4 20             	add    esp,0x20
c0010cae:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010cb6:	75 0a                	jne    c0010cc2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010cb8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010cc0:	74 2c                	je     c0010cee <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010cc2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010cc8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010cce:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010cd4:	83 ec 10             	sub    esp,0x10
c0010cd7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010cdb:	89 f7                	mov    edi,esi
c0010cdd:	c1 e0 0a             	shl    eax,0xa
c0010ce0:	c1 ff 1f             	sar    edi,0x1f
c0010ce3:	57                   	push   edi
c0010ce4:	56                   	push   esi
c0010ce5:	52                   	push   edx
c0010ce6:	50                   	push   eax
c0010ce7:	e8 b4 22 01 00       	call   c0022fa0 <__udivdi3>
c0010cec:	eb 5a                	jmp    c0010d48 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010cee:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010cf5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010cfc:	83 e1 7f             	and    ecx,0x7f
c0010cff:	83 e0 7f             	and    eax,0x7f
c0010d02:	01 c1                	add    ecx,eax
c0010d04:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010d0b:	83 e0 7f             	and    eax,0x7f
c0010d0e:	01 c1                	add    ecx,eax
c0010d10:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010d17:	83 e0 7f             	and    eax,0x7f
c0010d1a:	00 c1                	add    cl,al
c0010d1c:	74 41                	je     c0010d5f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010d1e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010d24:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010d2a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010d30:	83 ec 10             	sub    esp,0x10
c0010d33:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010d37:	89 f7                	mov    edi,esi
c0010d39:	c1 e0 0a             	shl    eax,0xa
c0010d3c:	c1 ff 1f             	sar    edi,0x1f
c0010d3f:	57                   	push   edi
c0010d40:	56                   	push   esi
c0010d41:	52                   	push   edx
c0010d42:	50                   	push   eax
c0010d43:	e8 58 22 01 00       	call   c0022fa0 <__udivdi3>
c0010d48:	83 c4 14             	add    esp,0x14
c0010d4b:	52                   	push   edx
c0010d4c:	50                   	push   eax
c0010d4d:	6a 00                	push   0x0
c0010d4f:	6a 00                	push   0x0
c0010d51:	53                   	push   ebx
c0010d52:	e8 53 fe ff ff       	call   c0010baa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010d57:	83 c4 20             	add    esp,0x20
c0010d5a:	e9 79 01 00 00       	jmp    c0010ed8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010d5f:	89 f0                	mov    eax,esi
c0010d61:	31 f6                	xor    esi,esi
c0010d63:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010d6a:	75 02                	jne    c0010d6e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010d6c:	89 f1                	mov    ecx,esi
c0010d6e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010d75:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010d7c:	c1 e2 08             	shl    edx,0x8
c0010d7f:	c1 e7 10             	shl    edi,0x10
c0010d82:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010d8a:	09 fa                	or     edx,edi
c0010d8c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010d94:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010d9b:	83 c0 10             	add    eax,0x10
c0010d9e:	09 fa                	or     edx,edi
c0010da0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010da7:	c1 e7 18             	shl    edi,0x18
c0010daa:	09 fa                	or     edx,edi
c0010dac:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010db3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010db7:	c1 e7 10             	shl    edi,0x10
c0010dba:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010dc1:	c1 e2 08             	shl    edx,0x8
c0010dc4:	09 fa                	or     edx,edi
c0010dc6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010dcd:	09 fa                	or     edx,edi
c0010dcf:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010dd6:	c1 e7 18             	shl    edi,0x18
c0010dd9:	09 fa                	or     edx,edi
c0010ddb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010ddf:	46                   	inc    esi
c0010de0:	83 fe 04             	cmp    esi,0x4
c0010de3:	0f 85 7a ff ff ff    	jne    c0010d63 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ded:	83 f0 01             	xor    eax,0x1
c0010df0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010df4:	75 57                	jne    c0010e4d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010df6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dfa:	83 f0 01             	xor    eax,0x1
c0010dfd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010e01:	75 4a                	jne    c0010e4d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010e03:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010e07:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010e0f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e17:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010e1d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010e23:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010e29:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010e2d:	89 f7                	mov    edi,esi
c0010e2f:	c1 e0 0a             	shl    eax,0xa
c0010e32:	c1 ff 1f             	sar    edi,0x1f
c0010e35:	57                   	push   edi
c0010e36:	56                   	push   esi
c0010e37:	52                   	push   edx
c0010e38:	50                   	push   eax
c0010e39:	e8 62 21 01 00       	call   c0022fa0 <__udivdi3>
c0010e3e:	83 c4 10             	add    esp,0x10
c0010e41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010e45:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010e49:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010e4d:	84 c9                	test   cl,cl
c0010e4f:	74 53                	je     c0010ea4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010e51:	0f b6 c9             	movzx  ecx,cl
c0010e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e5c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e60:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010e64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010e6c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010e70:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010e74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010e78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010e7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010e84:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010e88:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010e8c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010e90:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010e94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010e98:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010e9c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010ea0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010ea4:	31 ed                	xor    ebp,ebp
c0010ea6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010eaa:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010eae:	89 f8                	mov    eax,edi
c0010eb0:	09 f0                	or     eax,esi
c0010eb2:	74 1e                	je     c0010ed2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010eb4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010eb8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010ebc:	89 d1                	mov    ecx,edx
c0010ebe:	09 c1                	or     ecx,eax
c0010ec0:	74 10                	je     c0010ed2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010ec2:	83 ec 0c             	sub    esp,0xc
c0010ec5:	57                   	push   edi
c0010ec6:	56                   	push   esi
c0010ec7:	52                   	push   edx
c0010ec8:	50                   	push   eax
c0010ec9:	53                   	push   ebx
c0010eca:	e8 db fc ff ff       	call   c0010baa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010ecf:	83 c4 20             	add    esp,0x20
c0010ed2:	45                   	inc    ebp
c0010ed3:	83 fd 04             	cmp    ebp,0x4
c0010ed6:	75 ce                	jne    c0010ea6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010ed8:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010ede:	5b                   	pop    ebx
c0010edf:	5e                   	pop    esi
c0010ee0:	5f                   	pop    edi
c0010ee1:	5d                   	pop    ebp
c0010ee2:	c3                   	ret    
c0010ee3:	90                   	nop

c0010ee4 <Serial::Serial(char const*)>:
c0010ee4:	83 ec 0c             	sub    esp,0xc
c0010ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eeb:	83 ec 08             	sub    esp,0x8
c0010eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ef2:	50                   	push   eax
c0010ef3:	e8 46 d9 ff ff       	call   c000e83e <Device::Device(char const*)>
c0010ef8:	83 c4 10             	add    esp,0x10
c0010efb:	ba ec 5b 02 c0       	mov    edx,0xc0025bec
c0010f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f04:	89 10                	mov    DWORD PTR [eax],edx
c0010f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010f14:	90                   	nop
c0010f15:	83 c4 0c             	add    esp,0xc
c0010f18:	c3                   	ret    
c0010f19:	90                   	nop
c0010f1a:	66 90                	xchg   ax,ax

c0010f1c <Serial::~Serial()>:
c0010f1c:	83 ec 0c             	sub    esp,0xc
c0010f1f:	ba ec 5b 02 c0       	mov    edx,0xc0025bec
c0010f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f28:	89 10                	mov    DWORD PTR [eax],edx
c0010f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2e:	83 ec 0c             	sub    esp,0xc
c0010f31:	50                   	push   eax
c0010f32:	e8 d1 d5 ff ff       	call   c000e508 <Device::~Device()>
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	90                   	nop
c0010f3b:	83 c4 0c             	add    esp,0xc
c0010f3e:	c3                   	ret    
c0010f3f:	90                   	nop

c0010f40 <Serial::~Serial()>:
c0010f40:	83 ec 0c             	sub    esp,0xc
c0010f43:	83 ec 0c             	sub    esp,0xc
c0010f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f4a:	e8 cd ff ff ff       	call   c0010f1c <Serial::~Serial()>
c0010f4f:	83 c4 10             	add    esp,0x10
c0010f52:	83 ec 08             	sub    esp,0x8
c0010f55:	68 58 01 00 00       	push   0x158
c0010f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f5e:	e8 83 c0 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0010f63:	83 c4 10             	add    esp,0x10
c0010f66:	83 c4 0c             	add    esp,0xc
c0010f69:	c3                   	ret    
c0010f6a:	66 90                	xchg   ax,ax

c0010f6c <Timer::Timer(char const*)>:
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f73:	83 ec 08             	sub    esp,0x8
c0010f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7a:	50                   	push   eax
c0010f7b:	e8 be d8 ff ff       	call   c000e83e <Device::Device(char const*)>
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	ba 30 5c 02 c0       	mov    edx,0xc0025c30
c0010f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8c:	89 10                	mov    DWORD PTR [eax],edx
c0010f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f92:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010f9c:	90                   	nop
c0010f9d:	83 c4 0c             	add    esp,0xc
c0010fa0:	c3                   	ret    
c0010fa1:	90                   	nop
c0010fa2:	66 90                	xchg   ax,ax

c0010fa4 <Timer::~Timer()>:
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	ba 30 5c 02 c0       	mov    edx,0xc0025c30
c0010fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb0:	89 10                	mov    DWORD PTR [eax],edx
c0010fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb6:	83 ec 0c             	sub    esp,0xc
c0010fb9:	50                   	push   eax
c0010fba:	e8 49 d5 ff ff       	call   c000e508 <Device::~Device()>
c0010fbf:	83 c4 10             	add    esp,0x10
c0010fc2:	90                   	nop
c0010fc3:	83 c4 0c             	add    esp,0xc
c0010fc6:	c3                   	ret    
c0010fc7:	90                   	nop

c0010fc8 <Timer::~Timer()>:
c0010fc8:	83 ec 0c             	sub    esp,0xc
c0010fcb:	83 ec 0c             	sub    esp,0xc
c0010fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd2:	e8 cd ff ff ff       	call   c0010fa4 <Timer::~Timer()>
c0010fd7:	83 c4 10             	add    esp,0x10
c0010fda:	83 ec 08             	sub    esp,0x8
c0010fdd:	68 5c 01 00 00       	push   0x15c
c0010fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe6:	e8 fb bf ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0010feb:	83 c4 10             	add    esp,0x10
c0010fee:	83 c4 0c             	add    esp,0xc
c0010ff1:	c3                   	ret    

c0010ff2 <Timer::read()>:
c0010ff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ff6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010ffc:	c3                   	ret    

c0010ffd <timerHandler(unsigned int)>:
c0010ffd:	56                   	push   esi
c0010ffe:	53                   	push   ebx
c0010fff:	51                   	push   ecx
c0011000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011004:	01 05 ec 91 02 c0    	add    DWORD PTR ds:0xc00291ec,eax
c001100a:	80 3d cd 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028bcd,0x0
c0011011:	0f 84 49 01 00 00    	je     c0011160 <timerHandler(unsigned int)+0x163>
c0011017:	fa                   	cli    
c0011018:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001101e:	83 ec 0c             	sub    esp,0xc
c0011021:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c0011027:	68 f8 a0 02 c0       	push   0xc002a0f8
c001102c:	e8 3f 25 01 00       	call   c0023570 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0011031:	83 c4 10             	add    esp,0x10
c0011034:	84 c0                	test   al,al
c0011036:	0f 85 a0 00 00 00    	jne    c00110dc <timerHandler(unsigned int)+0xdf>
c001103c:	83 ec 0c             	sub    esp,0xc
c001103f:	68 f8 a0 02 c0       	push   0xc002a0f8
c0011044:	e8 43 25 01 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011049:	83 c4 10             	add    esp,0x10
c001104c:	89 c6                	mov    esi,eax
c001104e:	66 90                	xchg   ax,ax
c0011050:	83 ec 0c             	sub    esp,0xc
c0011053:	68 f8 a0 02 c0       	push   0xc002a0f8
c0011058:	e8 2f 25 01 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001105d:	c7 04 24 f8 a0 02 c0 	mov    DWORD PTR [esp],0xc002a0f8
c0011064:	89 c3                	mov    ebx,eax
c0011066:	e8 29 25 01 00       	call   c0023594 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001106b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001106e:	83 c4 10             	add    esp,0x10
c0011071:	3b 05 ec 91 02 c0    	cmp    eax,DWORD PTR ds:0xc00291ec
c0011077:	77 23                	ja     c001109c <timerHandler(unsigned int)+0x9f>
c0011079:	83 ec 0c             	sub    esp,0xc
c001107c:	53                   	push   ebx
c001107d:	e8 4a 83 00 00       	call   c00193cc <unblockTask(ThreadControlBlock*)>
c0011082:	83 c4 10             	add    esp,0x10
c0011085:	39 de                	cmp    esi,ebx
c0011087:	75 27                	jne    c00110b0 <timerHandler(unsigned int)+0xb3>
c0011089:	83 ec 0c             	sub    esp,0xc
c001108c:	68 f8 a0 02 c0       	push   0xc002a0f8
c0011091:	e8 f6 24 01 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011096:	89 c6                	mov    esi,eax
c0011098:	eb 12                	jmp    c00110ac <timerHandler(unsigned int)+0xaf>
c001109a:	66 90                	xchg   ax,ax
c001109c:	52                   	push   edx
c001109d:	52                   	push   edx
c001109e:	53                   	push   ebx
c001109f:	68 f8 a0 02 c0       	push   0xc002a0f8
c00110a4:	e8 a3 25 01 00       	call   c002364c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00110a9:	8d 76 00             	lea    esi,[esi+0x0]
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	90                   	nop
c00110b0:	83 ec 0c             	sub    esp,0xc
c00110b3:	68 f8 a0 02 c0       	push   0xc002a0f8
c00110b8:	e8 b3 24 01 00       	call   c0023570 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00110bd:	83 c4 10             	add    esp,0x10
c00110c0:	84 c0                	test   al,al
c00110c2:	75 18                	jne    c00110dc <timerHandler(unsigned int)+0xdf>
c00110c4:	83 ec 0c             	sub    esp,0xc
c00110c7:	68 f8 a0 02 c0       	push   0xc002a0f8
c00110cc:	e8 bb 24 01 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00110d1:	83 c4 10             	add    esp,0x10
c00110d4:	39 f0                	cmp    eax,esi
c00110d6:	0f 85 74 ff ff ff    	jne    c0011050 <timerHandler(unsigned int)+0x53>
c00110dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110e1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c00110e5:	74 41                	je     c0011128 <timerHandler(unsigned int)+0x12b>
c00110e7:	80 3d cc 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028bcc,0x0
c00110ee:	74 38                	je     c0011128 <timerHandler(unsigned int)+0x12b>
c00110f0:	fa                   	cli    
c00110f1:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00110f7:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c00110fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011102:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0011105:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001110b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001110e:	72 08                	jb     c0011118 <timerHandler(unsigned int)+0x11b>
c0011110:	e8 fb 7d 00 00       	call   c0018f10 <schedule()>
c0011115:	8d 76 00             	lea    esi,[esi+0x0]
c0011118:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001111d:	48                   	dec    eax
c001111e:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0011123:	75 03                	jne    c0011128 <timerHandler(unsigned int)+0x12b>
c0011125:	fb                   	sti    
c0011126:	66 90                	xchg   ax,ax
c0011128:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c001112d:	48                   	dec    eax
c001112e:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c0011133:	75 1b                	jne    c0011150 <timerHandler(unsigned int)+0x153>
c0011135:	83 3d e0 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a0e0,0x0
c001113c:	74 12                	je     c0011150 <timerHandler(unsigned int)+0x153>
c001113e:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c0011148:	e8 c3 7d 00 00       	call   c0018f10 <schedule()>
c001114d:	8d 76 00             	lea    esi,[esi+0x0]
c0011150:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0011155:	48                   	dec    eax
c0011156:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001115b:	75 03                	jne    c0011160 <timerHandler(unsigned int)+0x163>
c001115d:	fb                   	sti    
c001115e:	66 90                	xchg   ax,ax
c0011160:	58                   	pop    eax
c0011161:	5b                   	pop    ebx
c0011162:	5e                   	pop    esi
c0011163:	c3                   	ret    

c0011164 <setupTimer(int)>:
c0011164:	57                   	push   edi
c0011165:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001116a:	56                   	push   esi
c001116b:	53                   	push   ebx
c001116c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011170:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011176:	83 ec 0c             	sub    esp,0xc
c0011179:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001117f:	e8 b6 d7 ff ff       	call   c000e93a <Device::getName()>
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001118a:	0f 85 94 00 00 00    	jne    c0011224 <setupTimer(int)+0xc0>
c0011190:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011195:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001119c:	0f 84 82 00 00 00    	je     c0011224 <setupTimer(int)+0xc0>
c00111a2:	83 ec 0c             	sub    esp,0xc
c00111a5:	68 5c 01 00 00       	push   0x15c
c00111aa:	e8 38 8c ff ff       	call   c0009de7 <malloc>
c00111af:	89 04 24             	mov    DWORD PTR [esp],eax
c00111b2:	89 c3                	mov    ebx,eax
c00111b4:	e8 53 19 01 00       	call   c0022b0c <PIT::PIT()>
c00111b9:	59                   	pop    ecx
c00111ba:	5f                   	pop    edi
c00111bb:	53                   	push   ebx
c00111bc:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c00111c2:	e8 73 d4 ff ff       	call   c000e63a <Device::addChild(Device*)>
c00111c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111c9:	6a 00                	push   0x0
c00111cb:	6a 00                	push   0x0
c00111cd:	56                   	push   esi
c00111ce:	53                   	push   ebx
c00111cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00111d2:	83 c4 14             	add    esp,0x14
c00111d5:	68 60 01 00 00       	push   0x160
c00111da:	e8 08 8c ff ff       	call   c0009de7 <malloc>
c00111df:	89 04 24             	mov    DWORD PTR [esp],eax
c00111e2:	89 c7                	mov    edi,eax
c00111e4:	e8 d7 17 01 00       	call   c00229c0 <APICTimer::APICTimer()>
c00111e9:	6a 00                	push   0x0
c00111eb:	6a 00                	push   0x0
c00111ed:	56                   	push   esi
c00111ee:	57                   	push   edi
c00111ef:	e8 cc 16 01 00       	call   c00228c0 <APICTimer::open(int, int, void*)>
c00111f4:	83 c4 20             	add    esp,0x20
c00111f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111f9:	6a 00                	push   0x0
c00111fb:	6a 00                	push   0x0
c00111fd:	6a 00                	push   0x0
c00111ff:	53                   	push   ebx
c0011200:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011203:	58                   	pop    eax
c0011204:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011209:	5a                   	pop    edx
c001120a:	57                   	push   edi
c001120b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011211:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011217:	e8 1e d4 ff ff       	call   c000e63a <Device::addChild(Device*)>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	eb 37                	jmp    c0011258 <setupTimer(int)+0xf4>
c0011221:	8d 76 00             	lea    esi,[esi+0x0]
c0011224:	83 ec 0c             	sub    esp,0xc
c0011227:	68 5c 01 00 00       	push   0x15c
c001122c:	e8 b6 8b ff ff       	call   c0009de7 <malloc>
c0011231:	89 04 24             	mov    DWORD PTR [esp],eax
c0011234:	89 c3                	mov    ebx,eax
c0011236:	e8 d1 18 01 00       	call   c0022b0c <PIT::PIT()>
c001123b:	58                   	pop    eax
c001123c:	5a                   	pop    edx
c001123d:	53                   	push   ebx
c001123e:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c0011244:	e8 f1 d3 ff ff       	call   c000e63a <Device::addChild(Device*)>
c0011249:	8b 03                	mov    eax,DWORD PTR [ebx]
c001124b:	6a 00                	push   0x0
c001124d:	6a 00                	push   0x0
c001124f:	56                   	push   esi
c0011250:	53                   	push   ebx
c0011251:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011254:	83 c4 20             	add    esp,0x20
c0011257:	90                   	nop
c0011258:	89 d8                	mov    eax,ebx
c001125a:	5b                   	pop    ebx
c001125b:	5e                   	pop    esi
c001125c:	5f                   	pop    edi
c001125d:	c3                   	ret    
c001125e:	66 90                	xchg   ax,ax

c0011260 <VCache::VCache(PhysicalDisk*)>:
c0011260:	53                   	push   ebx
c0011261:	83 ec 18             	sub    esp,0x18
c0011264:	ba 60 5c 02 c0       	mov    edx,0xc0025c60
c0011269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001126d:	89 10                	mov    DWORD PTR [eax],edx
c001126f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011273:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001127a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001127e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0011285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011289:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0011290:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0011297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001129b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00112a2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00112a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112ad:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00112b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112b8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00112bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112c0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00112c7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00112ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112d2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00112d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112da:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00112de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112e2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00112e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112ea:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00112f1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00112f9:	83 ec 0c             	sub    esp,0xc
c00112fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011300:	e8 e2 8a ff ff       	call   c0009de7 <malloc>
c0011305:	83 c4 10             	add    esp,0x10
c0011308:	89 c3                	mov    ebx,eax
c001130a:	83 ec 0c             	sub    esp,0xc
c001130d:	53                   	push   ebx
c001130e:	e8 cd 79 00 00       	call   c0018ce0 <Mutex::Mutex()>
c0011313:	83 c4 10             	add    esp,0x10
c0011316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001131a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001131d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011321:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011325:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001132c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0011333:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011337:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001133d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011341:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011344:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011348:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001134e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011354:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011358:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001135b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001135e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011362:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0011366:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001136a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011370:	05 00 01 00 00       	add    eax,0x100
c0011375:	c1 e0 04             	shl    eax,0x4
c0011378:	83 ec 0c             	sub    esp,0xc
c001137b:	50                   	push   eax
c001137c:	e8 66 8a ff ff       	call   c0009de7 <malloc>
c0011381:	83 c4 10             	add    esp,0x10
c0011384:	89 c2                	mov    edx,eax
c0011386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001138a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001138d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011391:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001139c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00113a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00113a4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113aa:	c1 e0 06             	shl    eax,0x6
c00113ad:	83 ec 0c             	sub    esp,0xc
c00113b0:	50                   	push   eax
c00113b1:	e8 31 8a ff ff       	call   c0009de7 <malloc>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	89 c2                	mov    edx,eax
c00113bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00113bf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00113c2:	90                   	nop
c00113c3:	83 c4 18             	add    esp,0x18
c00113c6:	5b                   	pop    ebx
c00113c7:	c3                   	ret    

c00113c8 <VCache::invalidateReadBuffer()>:
c00113c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113cc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00113d2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00113d6:	c3                   	ret    
c00113d7:	90                   	nop

c00113d8 <VCache::writeWriteBuffer()>:
c00113d8:	53                   	push   ebx
c00113d9:	83 ec 08             	sub    esp,0x8
c00113dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113e0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00113e4:	74 1e                	je     c0011404 <VCache::writeWriteBuffer()+0x2c>
c00113e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00113e9:	83 ec 0c             	sub    esp,0xc
c00113ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00113ee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00113f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00113f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00113f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00113fa:	50                   	push   eax
c00113fb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00113fe:	83 c4 20             	add    esp,0x20
c0011401:	8d 76 00             	lea    esi,[esi+0x0]
c0011404:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001140b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0011412:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0011416:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001141d:	83 c4 08             	add    esp,0x8
c0011420:	5b                   	pop    ebx
c0011421:	c3                   	ret    
c0011422:	66 90                	xchg   ax,ax

c0011424 <VCache::~VCache()>:
c0011424:	83 ec 0c             	sub    esp,0xc
c0011427:	ba 60 5c 02 c0       	mov    edx,0xc0025c60
c001142c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011430:	89 10                	mov    DWORD PTR [eax],edx
c0011432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011436:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0011439:	84 c0                	test   al,al
c001143b:	74 0f                	je     c001144c <VCache::~VCache()+0x28>
c001143d:	83 ec 0c             	sub    esp,0xc
c0011440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011444:	e8 8f ff ff ff       	call   c00113d8 <VCache::writeWriteBuffer()>
c0011449:	83 c4 10             	add    esp,0x10
c001144c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011450:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011453:	83 ec 0c             	sub    esp,0xc
c0011456:	50                   	push   eax
c0011457:	e8 9b 89 ff ff       	call   c0009df7 <free>
c001145c:	83 c4 10             	add    esp,0x10
c001145f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011466:	83 ec 0c             	sub    esp,0xc
c0011469:	50                   	push   eax
c001146a:	e8 88 89 ff ff       	call   c0009df7 <free>
c001146f:	83 c4 10             	add    esp,0x10
c0011472:	90                   	nop
c0011473:	83 c4 0c             	add    esp,0xc
c0011476:	c3                   	ret    
c0011477:	90                   	nop

c0011478 <VCache::~VCache()>:
c0011478:	83 ec 0c             	sub    esp,0xc
c001147b:	83 ec 0c             	sub    esp,0xc
c001147e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011482:	e8 9d ff ff ff       	call   c0011424 <VCache::~VCache()>
c0011487:	83 c4 10             	add    esp,0x10
c001148a:	83 ec 08             	sub    esp,0x8
c001148d:	6a 44                	push   0x44
c001148f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011493:	e8 4e bb ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0011498:	83 c4 10             	add    esp,0x10
c001149b:	83 c4 0c             	add    esp,0xc
c001149e:	c3                   	ret    
c001149f:	90                   	nop

c00114a0 <VCache::write(unsigned long long, int, void*)>:
c00114a0:	55                   	push   ebp
c00114a1:	31 c0                	xor    eax,eax
c00114a3:	57                   	push   edi
c00114a4:	56                   	push   esi
c00114a5:	53                   	push   ebx
c00114a6:	83 ec 0c             	sub    esp,0xc
c00114a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114ad:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00114b1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00114b5:	8d 76 00             	lea    esi,[esi+0x0]
c00114b8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00114bc:	7d 1a                	jge    c00114d8 <VCache::write(unsigned long long, int, void*)+0x38>
c00114be:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00114c1:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00114c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114cb:	0f af c8             	imul   ecx,eax
c00114ce:	01 ca                	add    edx,ecx
c00114d0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00114d2:	40                   	inc    eax
c00114d3:	eb e3                	jmp    c00114b8 <VCache::write(unsigned long long, int, void*)+0x18>
c00114d5:	8d 76 00             	lea    esi,[esi+0x0]
c00114d8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00114dc:	74 0a                	je     c00114e8 <VCache::write(unsigned long long, int, void*)+0x48>
c00114de:	53                   	push   ebx
c00114df:	e8 e4 fe ff ff       	call   c00113c8 <VCache::invalidateReadBuffer()>
c00114e4:	58                   	pop    eax
c00114e5:	8d 76 00             	lea    esi,[esi+0x0]
c00114e8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00114ec:	74 5e                	je     c001154c <VCache::write(unsigned long long, int, void*)+0xac>
c00114ee:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00114f1:	89 e8                	mov    eax,ebp
c00114f3:	99                   	cdq    
c00114f4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00114f7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00114fa:	89 c1                	mov    ecx,eax
c00114fc:	89 d0                	mov    eax,edx
c00114fe:	31 f1                	xor    ecx,esi
c0011500:	31 f8                	xor    eax,edi
c0011502:	09 c1                	or     ecx,eax
c0011504:	75 3a                	jne    c0011540 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011506:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001150b:	75 33                	jne    c0011540 <VCache::write(unsigned long long, int, void*)+0xa0>
c001150d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011510:	89 ef                	mov    edi,ebp
c0011512:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011518:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001151c:	0f af f9             	imul   edi,ecx
c001151f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0011522:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011524:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011527:	40                   	inc    eax
c0011528:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001152b:	83 f8 40             	cmp    eax,0x40
c001152e:	75 60                	jne    c0011590 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011530:	83 ec 0c             	sub    esp,0xc
c0011533:	53                   	push   ebx
c0011534:	e8 9f fe ff ff       	call   c00113d8 <VCache::writeWriteBuffer()>
c0011539:	83 c4 10             	add    esp,0x10
c001153c:	eb 52                	jmp    c0011590 <VCache::write(unsigned long long, int, void*)+0xf0>
c001153e:	66 90                	xchg   ax,ax
c0011540:	83 ec 0c             	sub    esp,0xc
c0011543:	53                   	push   ebx
c0011544:	e8 8f fe ff ff       	call   c00113d8 <VCache::writeWriteBuffer()>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001154f:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0011554:	7f 22                	jg     c0011578 <VCache::write(unsigned long long, int, void*)+0xd8>
c0011556:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011559:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001155c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011560:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0011564:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0011567:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001156a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011570:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011574:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011576:	eb 18                	jmp    c0011590 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011578:	83 ec 0c             	sub    esp,0xc
c001157b:	8b 10                	mov    edx,DWORD PTR [eax]
c001157d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011581:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011585:	57                   	push   edi
c0011586:	56                   	push   esi
c0011587:	50                   	push   eax
c0011588:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001158b:	83 c4 20             	add    esp,0x20
c001158e:	66 90                	xchg   ax,ax
c0011590:	83 c4 0c             	add    esp,0xc
c0011593:	31 c0                	xor    eax,eax
c0011595:	5b                   	pop    ebx
c0011596:	5e                   	pop    esi
c0011597:	5f                   	pop    edi
c0011598:	5d                   	pop    ebp
c0011599:	c3                   	ret    

c001159a <VCache::read(unsigned long long, int, void*)>:
c001159a:	55                   	push   ebp
c001159b:	31 c0                	xor    eax,eax
c001159d:	57                   	push   edi
c001159e:	56                   	push   esi
c001159f:	53                   	push   ebx
c00115a0:	83 ec 1c             	sub    esp,0x1c
c00115a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00115a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00115ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00115af:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00115b3:	90                   	nop
c00115b4:	39 e8                	cmp    eax,ebp
c00115b6:	7d 18                	jge    c00115d0 <VCache::read(unsigned long long, int, void*)+0x36>
c00115b8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00115bb:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00115c1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00115c5:	0f af c8             	imul   ecx,eax
c00115c8:	01 ca                	add    edx,ecx
c00115ca:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00115cc:	40                   	inc    eax
c00115cd:	eb e5                	jmp    c00115b4 <VCache::read(unsigned long long, int, void*)+0x1a>
c00115cf:	90                   	nop
c00115d0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00115d4:	74 0e                	je     c00115e4 <VCache::read(unsigned long long, int, void*)+0x4a>
c00115d6:	83 ec 0c             	sub    esp,0xc
c00115d9:	53                   	push   ebx
c00115da:	e8 f9 fd ff ff       	call   c00113d8 <VCache::writeWriteBuffer()>
c00115df:	83 c4 10             	add    esp,0x10
c00115e2:	66 90                	xchg   ax,ax
c00115e4:	83 fd 01             	cmp    ebp,0x1
c00115e7:	0f 85 87 00 00 00    	jne    c0011674 <VCache::read(unsigned long long, int, void*)+0xda>
c00115ed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00115f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115f4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00115fb:	75 77                	jne    c0011674 <VCache::read(unsigned long long, int, void*)+0xda>
c00115fd:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011600:	89 e9                	mov    ecx,ebp
c0011602:	f7 d9                	neg    ecx
c0011604:	89 c8                	mov    eax,ecx
c0011606:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001160a:	c1 f8 1f             	sar    eax,0x1f
c001160d:	21 f1                	and    ecx,esi
c001160f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011613:	89 c8                	mov    eax,ecx
c0011615:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011619:	21 f9                	and    ecx,edi
c001161b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001161f:	89 ca                	mov    edx,ecx
c0011621:	74 0d                	je     c0011630 <VCache::read(unsigned long long, int, void*)+0x96>
c0011623:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011626:	75 08                	jne    c0011630 <VCache::read(unsigned long long, int, void*)+0x96>
c0011628:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001162b:	74 27                	je     c0011654 <VCache::read(unsigned long long, int, void*)+0xba>
c001162d:	8d 76 00             	lea    esi,[esi+0x0]
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0011637:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001163b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001163e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011641:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0011643:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011646:	55                   	push   ebp
c0011647:	52                   	push   edx
c0011648:	50                   	push   eax
c0011649:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001164d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011650:	83 c4 20             	add    esp,0x20
c0011653:	90                   	nop
c0011654:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011657:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001165b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011661:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011664:	48                   	dec    eax
c0011665:	21 c6                	and    esi,eax
c0011667:	0f af f1             	imul   esi,ecx
c001166a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001166d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001166f:	eb 23                	jmp    c0011694 <VCache::read(unsigned long long, int, void*)+0xfa>
c0011671:	8d 76 00             	lea    esi,[esi+0x0]
c0011674:	83 ec 0c             	sub    esp,0xc
c0011677:	53                   	push   ebx
c0011678:	e8 4b fd ff ff       	call   c00113c8 <VCache::invalidateReadBuffer()>
c001167d:	5a                   	pop    edx
c001167e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011681:	8b 10                	mov    edx,DWORD PTR [eax]
c0011683:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011687:	55                   	push   ebp
c0011688:	57                   	push   edi
c0011689:	56                   	push   esi
c001168a:	50                   	push   eax
c001168b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001168e:	83 c4 20             	add    esp,0x20
c0011691:	8d 76 00             	lea    esi,[esi+0x0]
c0011694:	83 c4 1c             	add    esp,0x1c
c0011697:	31 c0                	xor    eax,eax
c0011699:	5b                   	pop    ebx
c001169a:	5e                   	pop    esi
c001169b:	5f                   	pop    edi
c001169c:	5d                   	pop    ebp
c001169d:	c3                   	ret    

c001169e <Video::putrect(int, int, int, int, unsigned int)>:
c001169e:	55                   	push   ebp
c001169f:	57                   	push   edi
c00116a0:	56                   	push   esi
c00116a1:	53                   	push   ebx
c00116a2:	83 ec 1c             	sub    esp,0x1c
c00116a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00116a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116ad:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00116b1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00116b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00116bd:	01 df                	add    edi,ebx
c00116bf:	39 fb                	cmp    ebx,edi
c00116c1:	7d 1f                	jge    c00116e2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00116c3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00116c7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00116cb:	7d 12                	jge    c00116df <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00116cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00116cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00116d3:	53                   	push   ebx
c00116d4:	55                   	push   ebp
c00116d5:	45                   	inc    ebp
c00116d6:	56                   	push   esi
c00116d7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00116da:	83 c4 10             	add    esp,0x10
c00116dd:	eb e8                	jmp    c00116c7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00116df:	43                   	inc    ebx
c00116e0:	eb dd                	jmp    c00116bf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00116e2:	83 c4 1c             	add    esp,0x1c
c00116e5:	5b                   	pop    ebx
c00116e6:	5e                   	pop    esi
c00116e7:	5f                   	pop    edi
c00116e8:	5d                   	pop    ebp
c00116e9:	c3                   	ret    

c00116ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00116ea:	55                   	push   ebp
c00116eb:	57                   	push   edi
c00116ec:	31 ff                	xor    edi,edi
c00116ee:	56                   	push   esi
c00116ef:	53                   	push   ebx
c00116f0:	83 ec 1c             	sub    esp,0x1c
c00116f3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00116f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00116fb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011702:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011707:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001170b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001170f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011713:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011716:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001171a:	01 f9                	add    ecx,edi
c001171c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011720:	7d 2f                	jge    c0011751 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011722:	31 f6                	xor    esi,esi
c0011724:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011728:	01 f2                	add    edx,esi
c001172a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001172e:	7d 1a                	jge    c001174a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011730:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011733:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011736:	46                   	inc    esi
c0011737:	51                   	push   ecx
c0011738:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001173c:	52                   	push   edx
c001173d:	55                   	push   ebp
c001173e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011741:	83 c4 10             	add    esp,0x10
c0011744:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011748:	eb da                	jmp    c0011724 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001174a:	47                   	inc    edi
c001174b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001174f:	eb c5                	jmp    c0011716 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011751:	83 c4 1c             	add    esp,0x1c
c0011754:	5b                   	pop    ebx
c0011755:	5e                   	pop    esi
c0011756:	5f                   	pop    edi
c0011757:	5d                   	pop    ebp
c0011758:	c3                   	ret    
c0011759:	90                   	nop

c001175a <Video::blit(unsigned int*, int, int, int, int)>:
c001175a:	55                   	push   ebp
c001175b:	57                   	push   edi
c001175c:	56                   	push   esi
c001175d:	53                   	push   ebx
c001175e:	83 ec 1c             	sub    esp,0x1c
c0011761:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011765:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011769:	85 c0                	test   eax,eax
c001176b:	79 02                	jns    c001176f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001176d:	31 c0                	xor    eax,eax
c001176f:	c1 e0 02             	shl    eax,0x2
c0011772:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001177a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001177e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0011782:	39 d8                	cmp    eax,ebx
c0011784:	7e 49                	jle    c00117cf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011786:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001178c:	7c 41                	jl     c00117cf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001178e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011792:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011796:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001179a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001179e:	39 f9                	cmp    ecx,edi
c00117a0:	7e 22                	jle    c00117c4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00117a2:	83 c5 04             	add    ebp,0x4
c00117a5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00117ab:	7c 14                	jl     c00117c1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00117ad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00117af:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00117b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00117b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00117ba:	56                   	push   esi
c00117bb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00117be:	83 c4 10             	add    esp,0x10
c00117c1:	47                   	inc    edi
c00117c2:	eb d2                	jmp    c0011796 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00117c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117c8:	43                   	inc    ebx
c00117c9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00117cd:	eb ab                	jmp    c001177a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00117cf:	83 c4 1c             	add    esp,0x1c
c00117d2:	5b                   	pop    ebx
c00117d3:	5e                   	pop    esi
c00117d4:	5f                   	pop    edi
c00117d5:	5d                   	pop    ebp
c00117d6:	c3                   	ret    
c00117d7:	90                   	nop

c00117d8 <Video::clearScreen(unsigned int)>:
c00117d8:	57                   	push   edi
c00117d9:	56                   	push   esi
c00117da:	53                   	push   ebx
c00117db:	31 db                	xor    ebx,ebx
c00117dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00117e1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00117e7:	7e 1f                	jle    c0011808 <Video::clearScreen(unsigned int)+0x30>
c00117e9:	31 ff                	xor    edi,edi
c00117eb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00117f1:	7e 12                	jle    c0011805 <Video::clearScreen(unsigned int)+0x2d>
c00117f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00117f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117f9:	53                   	push   ebx
c00117fa:	57                   	push   edi
c00117fb:	47                   	inc    edi
c00117fc:	56                   	push   esi
c00117fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011800:	83 c4 10             	add    esp,0x10
c0011803:	eb e6                	jmp    c00117eb <Video::clearScreen(unsigned int)+0x13>
c0011805:	43                   	inc    ebx
c0011806:	eb d9                	jmp    c00117e1 <Video::clearScreen(unsigned int)+0x9>
c0011808:	5b                   	pop    ebx
c0011809:	5e                   	pop    esi
c001180a:	5f                   	pop    edi
c001180b:	c3                   	ret    

c001180c <Video::putpixel(int, int, unsigned int)>:
c001180c:	c7 44 24 04 68 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025c68
c0011814:	e9 90 39 00 00       	jmp    c00151a9 <Krnl::panic(char const*)>
c0011819:	90                   	nop

c001181a <Video::Video(char const*)>:
c001181a:	83 ec 0c             	sub    esp,0xc
c001181d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011821:	83 ec 08             	sub    esp,0x8
c0011824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011828:	50                   	push   eax
c0011829:	e8 10 d0 ff ff       	call   c000e83e <Device::Device(char const*)>
c001182e:	83 c4 10             	add    esp,0x10
c0011831:	ba d8 5c 02 c0       	mov    edx,0xc0025cd8
c0011836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001183a:	89 10                	mov    DWORD PTR [eax],edx
c001183c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011840:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001184a:	90                   	nop
c001184b:	83 c4 0c             	add    esp,0xc
c001184e:	c3                   	ret    
c001184f:	90                   	nop

c0011850 <Video::~Video()>:
c0011850:	83 ec 0c             	sub    esp,0xc
c0011853:	ba d8 5c 02 c0       	mov    edx,0xc0025cd8
c0011858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001185c:	89 10                	mov    DWORD PTR [eax],edx
c001185e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011862:	83 ec 0c             	sub    esp,0xc
c0011865:	50                   	push   eax
c0011866:	e8 9d cc ff ff       	call   c000e508 <Device::~Device()>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	90                   	nop
c001186f:	83 c4 0c             	add    esp,0xc
c0011872:	c3                   	ret    
c0011873:	90                   	nop

c0011874 <Video::~Video()>:
c0011874:	83 ec 0c             	sub    esp,0xc
c0011877:	83 ec 0c             	sub    esp,0xc
c001187a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187e:	e8 cd ff ff ff       	call   c0011850 <Video::~Video()>
c0011883:	83 c4 10             	add    esp,0x10
c0011886:	83 ec 08             	sub    esp,0x8
c0011889:	68 64 01 00 00       	push   0x164
c001188e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011892:	e8 4f b7 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	83 c4 0c             	add    esp,0xc
c001189d:	c3                   	ret    

c001189e <Video::isMonochrome()>:
c001189e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118a2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00118a8:	c3                   	ret    
c00118a9:	90                   	nop

c00118aa <Video::getWidth()>:
c00118aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00118b4:	c3                   	ret    
c00118b5:	90                   	nop

c00118b6 <Video::getHeight()>:
c00118b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118c0:	c3                   	ret    
c00118c1:	90                   	nop

c00118c2 <Video::drawCursor(int, int, unsigned char*, int)>:
c00118c2:	55                   	push   ebp
c00118c3:	57                   	push   edi
c00118c4:	56                   	push   esi
c00118c5:	53                   	push   ebx
c00118c6:	83 ec 2c             	sub    esp,0x2c
c00118c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00118cd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00118d1:	83 f8 01             	cmp    eax,0x1
c00118d4:	19 c9                	sbb    ecx,ecx
c00118d6:	31 db                	xor    ebx,ebx
c00118d8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00118dc:	89 cd                	mov    ebp,ecx
c00118de:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00118e6:	f7 d5                	not    ebp
c00118e8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00118ee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00118f2:	01 d8                	add    eax,ebx
c00118f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118f8:	56                   	push   esi
c00118f9:	e8 b8 ff ff ff       	call   c00118b6 <Video::getHeight()>
c00118fe:	59                   	pop    ecx
c00118ff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011903:	7e 70                	jle    c0011975 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011905:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011909:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001190d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011910:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011914:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011918:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001191f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011923:	89 f8                	mov    eax,edi
c0011925:	83 c0 20             	add    eax,0x20
c0011928:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001192c:	56                   	push   esi
c001192d:	e8 78 ff ff ff       	call   c00118aa <Video::getWidth()>
c0011932:	5a                   	pop    edx
c0011933:	39 c7                	cmp    edi,eax
c0011935:	7d 34                	jge    c001196b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011937:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001193c:	74 05                	je     c0011943 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001193e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011940:	55                   	push   ebp
c0011941:	eb 0d                	jmp    c0011950 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011943:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011948:	74 12                	je     c001195c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001194a:	8b 06                	mov    eax,DWORD PTR [esi]
c001194c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011950:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011954:	57                   	push   edi
c0011955:	56                   	push   esi
c0011956:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011959:	83 c4 10             	add    esp,0x10
c001195c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011960:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011964:	47                   	inc    edi
c0011965:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011969:	75 c1                	jne    c001192c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001196b:	43                   	inc    ebx
c001196c:	83 fb 20             	cmp    ebx,0x20
c001196f:	0f 85 79 ff ff ff    	jne    c00118ee <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011975:	83 c4 2c             	add    esp,0x2c
c0011978:	5b                   	pop    ebx
c0011979:	5e                   	pop    esi
c001197a:	5f                   	pop    edi
c001197b:	5d                   	pop    ebp
c001197c:	c3                   	ret    
c001197d:	90                   	nop

c001197e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001197e:	55                   	push   ebp
c001197f:	57                   	push   edi
c0011980:	56                   	push   esi
c0011981:	53                   	push   ebx
c0011982:	83 ec 28             	sub    esp,0x28
c0011985:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011989:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001198d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011991:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011995:	c1 e6 08             	shl    esi,0x8
c0011998:	01 c6                	add    esi,eax
c001199a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001199e:	c1 e0 08             	shl    eax,0x8
c00119a1:	01 d0                	add    eax,edx
c00119a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ab:	0f af c6             	imul   eax,esi
c00119ae:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00119b5:	50                   	push   eax
c00119b6:	e8 2c 84 ff ff       	call   c0009de7 <malloc>
c00119bb:	83 c4 10             	add    esp,0x10
c00119be:	89 c7                	mov    edi,eax
c00119c0:	85 c0                	test   eax,eax
c00119c2:	75 10                	jne    c00119d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	68 89 5c 02 c0       	push   0xc0025c89
c00119cc:	e8 d8 37 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00119d7:	ba 12 00 00 00       	mov    edx,0x12
c00119dc:	84 c0                	test   al,al
c00119de:	74 11                	je     c00119f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00119e0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00119e4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00119e8:	c1 fa 03             	sar    edx,0x3
c00119eb:	0f af d1             	imul   edx,ecx
c00119ee:	83 c2 12             	add    edx,0x12
c00119f1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00119f5:	74 04                	je     c00119fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00119f7:	85 f6                	test   esi,esi
c00119f9:	75 12                	jne    c0011a0d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00119fb:	83 ec 0c             	sub    esp,0xc
c00119fe:	68 99 5c 02 c0       	push   0xc0025c99
c0011a03:	e8 bf b6 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0011a08:	e9 b8 00 00 00       	jmp    c0011ac5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011a0d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011a11:	80 f9 02             	cmp    cl,0x2
c0011a14:	0f 85 96 00 00 00    	jne    c0011ab0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011a1a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011a1f:	75 0e                	jne    c0011a2f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011a21:	84 c0                	test   al,al
c0011a23:	75 0a                	jne    c0011a2f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011a25:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011a28:	83 e8 18             	sub    eax,0x18
c0011a2b:	a8 f7                	test   al,0xf7
c0011a2d:	74 0a                	je     c0011a39 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011a2f:	83 ec 0c             	sub    esp,0xc
c0011a32:	68 ae 5c 02 c0       	push   0xc0025cae
c0011a37:	eb 7f                	jmp    c0011ab8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011a39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a41:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011a49:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011a4d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011a55:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011a59:	75 0c                	jne    c0011a67 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011a5b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011a60:	c1 e0 18             	shl    eax,0x18
c0011a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a67:	45                   	inc    ebp
c0011a68:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011a6d:	c1 e1 10             	shl    ecx,0x10
c0011a70:	89 c8                	mov    eax,ecx
c0011a72:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011a77:	c1 e1 08             	shl    ecx,0x8
c0011a7a:	09 c1                	or     ecx,eax
c0011a7c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011a80:	09 c1                	or     ecx,eax
c0011a82:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011a86:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011a8a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011a8e:	c1 f8 03             	sar    eax,0x3
c0011a91:	01 c2                	add    edx,eax
c0011a93:	89 e8                	mov    eax,ebp
c0011a95:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011a99:	39 c6                	cmp    esi,eax
c0011a9b:	7f b0                	jg     c0011a4d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011a9d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011aa1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011aa5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011aa8:	7e 22                	jle    c0011acc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011aaa:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011aae:	eb 99                	jmp    c0011a49 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011ab0:	50                   	push   eax
c0011ab1:	50                   	push   eax
c0011ab2:	51                   	push   ecx
c0011ab3:	68 bc 5c 02 c0       	push   0xc0025cbc
c0011ab8:	e8 0a b6 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0011abd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ac0:	e8 32 83 ff ff       	call   c0009df7 <free>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	31 ff                	xor    edi,edi
c0011aca:	eb 0f                	jmp    c0011adb <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011acc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ad0:	89 30                	mov    DWORD PTR [eax],esi
c0011ad2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ad6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011ad9:	89 30                	mov    DWORD PTR [eax],esi
c0011adb:	83 c4 1c             	add    esp,0x1c
c0011ade:	89 f8                	mov    eax,edi
c0011ae0:	5b                   	pop    ebx
c0011ae1:	5e                   	pop    esi
c0011ae2:	5f                   	pop    edi
c0011ae3:	5d                   	pop    ebp
c0011ae4:	c3                   	ret    
c0011ae5:	90                   	nop

c0011ae6 <Video::putTGA(int, int, unsigned char*, int)>:
c0011ae6:	55                   	push   ebp
c0011ae7:	57                   	push   edi
c0011ae8:	56                   	push   esi
c0011ae9:	53                   	push   ebx
c0011aea:	83 ec 28             	sub    esp,0x28
c0011aed:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011af1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011af5:	50                   	push   eax
c0011af6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011afa:	50                   	push   eax
c0011afb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011aff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011b03:	56                   	push   esi
c0011b04:	e8 75 fe ff ff       	call   c001197e <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011b09:	83 c4 20             	add    esp,0x20
c0011b0c:	85 c0                	test   eax,eax
c0011b0e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011b12:	74 35                	je     c0011b49 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011b14:	89 c7                	mov    edi,eax
c0011b16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011b1a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011b1e:	39 d8                	cmp    eax,ebx
c0011b20:	7e 27                	jle    c0011b49 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011b22:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b2a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011b2e:	39 e8                	cmp    eax,ebp
c0011b30:	7e 14                	jle    c0011b46 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011b32:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b34:	83 c7 04             	add    edi,0x4
c0011b37:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011b3a:	53                   	push   ebx
c0011b3b:	55                   	push   ebp
c0011b3c:	45                   	inc    ebp
c0011b3d:	56                   	push   esi
c0011b3e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011b41:	83 c4 10             	add    esp,0x10
c0011b44:	eb e0                	jmp    c0011b26 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011b46:	43                   	inc    ebx
c0011b47:	eb cd                	jmp    c0011b16 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011b49:	83 c4 1c             	add    esp,0x1c
c0011b4c:	5b                   	pop    ebx
c0011b4d:	5e                   	pop    esi
c0011b4e:	5f                   	pop    edi
c0011b4f:	5d                   	pop    ebp
c0011b50:	c3                   	ret    
c0011b51:	66 90                	xchg   ax,ax
c0011b53:	90                   	nop

c0011b54 <ACPI::close(int, int, void*)>:
c0011b54:	83 ec 1c             	sub    esp,0x1c
c0011b57:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011b5f:	74 0b                	je     c0011b6c <ACPI::close(int, int, void*)+0x18>
c0011b61:	b8 00 00 00 00       	mov    eax,0x0
c0011b66:	e9 99 00 00 00       	jmp    c0011c04 <ACPI::close(int, int, void*)+0xb0>
c0011b6b:	90                   	nop
c0011b6c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011b71:	75 29                	jne    c0011b9c <ACPI::close(int, int, void*)+0x48>
c0011b73:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c0011b78:	85 c0                	test   eax,eax
c0011b7a:	74 08                	je     c0011b84 <ACPI::close(int, int, void*)+0x30>
c0011b7c:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c0011b81:	ff d0                	call   eax
c0011b83:	90                   	nop
c0011b84:	83 ec 0c             	sub    esp,0xc
c0011b87:	68 18 5d 02 c0       	push   0xc0025d18
c0011b8c:	e8 18 36 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c0011b91:	83 c4 10             	add    esp,0x10
c0011b94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b99:	eb 69                	jmp    c0011c04 <ACPI::close(int, int, void*)+0xb0>
c0011b9b:	90                   	nop
c0011b9c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011ba1:	75 59                	jne    c0011bfc <ACPI::close(int, int, void*)+0xa8>
c0011ba3:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c0011ba8:	85 c0                	test   eax,eax
c0011baa:	74 08                	je     c0011bb4 <ACPI::close(int, int, void*)+0x60>
c0011bac:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c0011bb1:	ff d0                	call   eax
c0011bb3:	90                   	nop
c0011bb4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0011bbc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bc1:	83 e0 02             	and    eax,0x2
c0011bc4:	74 1e                	je     c0011be4 <ACPI::close(int, int, void*)+0x90>
c0011bc6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bd1:	89 c2                	mov    edx,eax
c0011bd3:	ec                   	in     al,dx
c0011bd4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011bd8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011bdc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011be0:	eb da                	jmp    c0011bbc <ACPI::close(int, int, void*)+0x68>
c0011be2:	66 90                	xchg   ax,ax
c0011be4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011beb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011bf0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011bf4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011bf8:	ee                   	out    dx,al
c0011bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0011bfc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c01:	8d 76 00             	lea    esi,[esi+0x0]
c0011c04:	83 c4 1c             	add    esp,0x1c
c0011c07:	c3                   	ret    

c0011c08 <findRSDP()>:
c0011c08:	83 ec 1c             	sub    esp,0x1c
c0011c0b:	83 ec 0c             	sub    esp,0xc
c0011c0e:	68 3b 5e 02 c0       	push   0xc0025e3b
c0011c13:	e8 29 82 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011c18:	83 c4 10             	add    esp,0x10
c0011c1b:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011c20:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c26:	83 e0 04             	and    eax,0x4
c0011c29:	84 c0                	test   al,al
c0011c2b:	75 0b                	jne    c0011c38 <findRSDP()+0x30>
c0011c2d:	b8 00 00 00 00       	mov    eax,0x0
c0011c32:	e9 a1 00 00 00       	jmp    c0011cd8 <findRSDP()+0xd0>
c0011c37:	90                   	nop
c0011c38:	a1 f8 8b 02 c0       	mov    eax,ds:0xc0028bf8
c0011c3d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011c42:	7f 1c                	jg     c0011c60 <findRSDP()+0x58>
c0011c44:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011c49:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c4f:	83 e2 fb             	and    edx,0xfffffffb
c0011c52:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c58:	b8 00 00 00 00       	mov    eax,0x0
c0011c5d:	eb 79                	jmp    c0011cd8 <findRSDP()+0xd0>
c0011c5f:	90                   	nop
c0011c60:	83 ec 0c             	sub    esp,0xc
c0011c63:	68 4b 5e 02 c0       	push   0xc0025e4b
c0011c68:	e8 d4 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011c6d:	83 c4 10             	add    esp,0x10
c0011c70:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011c78:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011c80:	77 3e                	ja     c0011cc0 <findRSDP()+0xb8>
c0011c82:	83 ec 04             	sub    esp,0x4
c0011c85:	6a 08                	push   0x8
c0011c87:	68 64 5e 02 c0       	push   0xc0025e64
c0011c8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c90:	e8 fb e8 fe ff       	call   c0000590 <memcmp>
c0011c95:	83 c4 10             	add    esp,0x10
c0011c98:	85 c0                	test   eax,eax
c0011c9a:	0f 94 c0             	sete   al
c0011c9d:	84 c0                	test   al,al
c0011c9f:	74 17                	je     c0011cb8 <findRSDP()+0xb0>
c0011ca1:	83 ec 0c             	sub    esp,0xc
c0011ca4:	68 6d 5e 02 c0       	push   0xc0025e6d
c0011ca9:	e8 93 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011cae:	83 c4 10             	add    esp,0x10
c0011cb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cb5:	eb 21                	jmp    c0011cd8 <findRSDP()+0xd0>
c0011cb7:	90                   	nop
c0011cb8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011cbd:	eb b9                	jmp    c0011c78 <findRSDP()+0x70>
c0011cbf:	90                   	nop
c0011cc0:	83 ec 0c             	sub    esp,0xc
c0011cc3:	68 7b 5e 02 c0       	push   0xc0025e7b
c0011cc8:	e8 74 81 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011ccd:	83 c4 10             	add    esp,0x10
c0011cd0:	b8 00 00 00 00       	mov    eax,0x0
c0011cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd8:	83 c4 1c             	add    esp,0x1c
c0011cdb:	c3                   	ret    

c0011cdc <loadACPITables(unsigned char*)>:
c0011cdc:	57                   	push   edi
c0011cdd:	56                   	push   esi
c0011cde:	53                   	push   ebx
c0011cdf:	83 ec 60             	sub    esp,0x60
c0011ce2:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011ce7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ced:	83 e0 04             	and    eax,0x4
c0011cf0:	84 c0                	test   al,al
c0011cf2:	0f 84 3c 02 00 00    	je     c0011f34 <loadACPITables(unsigned char*)+0x258>
c0011cf8:	a0 20 94 02 c0       	mov    al,ds:0xc0029420
c0011cfd:	84 c0                	test   al,al
c0011cff:	74 77                	je     c0011d78 <loadACPITables(unsigned char*)+0x9c>
c0011d01:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d05:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011d09:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011d0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d10:	83 e8 24             	sub    eax,0x24
c0011d13:	c1 e8 03             	shr    eax,0x3
c0011d16:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011d1a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011d22:	66 90                	xchg   ax,ax
c0011d24:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011d28:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011d2c:	0f 8d b6 00 00 00    	jge    c0011de8 <loadACPITables(unsigned char*)+0x10c>
c0011d32:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d36:	83 c0 24             	add    eax,0x24
c0011d39:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011d3d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011d41:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011d45:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011d49:	c1 e0 03             	shl    eax,0x3
c0011d4c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011d50:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d54:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d59:	89 c1                	mov    ecx,eax
c0011d5b:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c0011d60:	8d 50 01             	lea    edx,[eax+0x1]
c0011d63:	89 15 0c 92 02 c0    	mov    DWORD PTR ds:0xc002920c,edx
c0011d69:	89 ca                	mov    edx,ecx
c0011d6b:	89 14 c5 24 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6ddc],edx
c0011d72:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011d76:	eb ac                	jmp    c0011d24 <loadACPITables(unsigned char*)+0x48>
c0011d78:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d7c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011d80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d87:	83 e8 24             	sub    eax,0x24
c0011d8a:	c1 e8 02             	shr    eax,0x2
c0011d8d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011d91:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011d99:	8d 76 00             	lea    esi,[esi+0x0]
c0011d9c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011da0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011da4:	7d 42                	jge    c0011de8 <loadACPITables(unsigned char*)+0x10c>
c0011da6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011daa:	83 c0 24             	add    eax,0x24
c0011dad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011db1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011db5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011db9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011dbd:	c1 e0 02             	shl    eax,0x2
c0011dc0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011dc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dc8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011dca:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c0011dcf:	8d 50 01             	lea    edx,[eax+0x1]
c0011dd2:	89 15 0c 92 02 c0    	mov    DWORD PTR ds:0xc002920c,edx
c0011dd8:	89 ca                	mov    edx,ecx
c0011dda:	89 14 c5 24 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6ddc],edx
c0011de1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011de5:	eb b5                	jmp    c0011d9c <loadACPITables(unsigned char*)+0xc0>
c0011de7:	90                   	nop
c0011de8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011df0:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c0011df5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011df9:	0f 8d 39 01 00 00    	jge    c0011f38 <loadACPITables(unsigned char*)+0x25c>
c0011dff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e03:	8b 04 c5 24 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6ddc]
c0011e0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e12:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e1a:	25 ff 0f 00 00       	and    eax,0xfff
c0011e1f:	89 c6                	mov    esi,eax
c0011e21:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c0011e27:	83 ec 0c             	sub    esp,0xc
c0011e2a:	6a 01                	push   0x1
c0011e2c:	e8 70 9f ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0011e31:	83 c4 10             	add    esp,0x10
c0011e34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e38:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	6a 01                	push   0x1
c0011e43:	6a 01                	push   0x1
c0011e45:	50                   	push   eax
c0011e46:	52                   	push   edx
c0011e47:	53                   	push   ebx
c0011e48:	e8 f1 a8 ff ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e4d:	83 c4 20             	add    esp,0x20
c0011e50:	09 f0                	or     eax,esi
c0011e52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e56:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011e5a:	c1 e0 03             	shl    eax,0x3
c0011e5d:	05 20 92 02 c0       	add    eax,0xc0029220
c0011e62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e6e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011e76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011e8a:	89 c6                	mov    esi,eax
c0011e8c:	89 d7                	mov    edi,edx
c0011e8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e90:	89 c8                	mov    eax,ecx
c0011e92:	89 fa                	mov    edx,edi
c0011e94:	89 f3                	mov    ebx,esi
c0011e96:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011e9a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ea9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011ead:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011eb1:	05 00 10 00 00       	add    eax,0x1000
c0011eb6:	c1 e8 0c             	shr    eax,0xc
c0011eb9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ebd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ec1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011ec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ec9:	25 ff 0f 00 00       	and    eax,0xfff
c0011ece:	89 c6                	mov    esi,eax
c0011ed0:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c0011ed6:	83 ec 0c             	sub    esp,0xc
c0011ed9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011edd:	e8 bf 9e ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0011ee2:	83 c4 10             	add    esp,0x10
c0011ee5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ee9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	6a 01                	push   0x1
c0011ef4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ef8:	50                   	push   eax
c0011ef9:	52                   	push   edx
c0011efa:	53                   	push   ebx
c0011efb:	e8 3e a8 ff ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f00:	83 c4 20             	add    esp,0x20
c0011f03:	09 f0                	or     eax,esi
c0011f05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f0d:	83 ec 0c             	sub    esp,0xc
c0011f10:	50                   	push   eax
c0011f11:	e8 bb a1 ff ff       	call   c000c0d1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f16:	83 c4 10             	add    esp,0x10
c0011f19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f1d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f21:	89 14 c5 24 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6ddc],edx
c0011f28:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011f2c:	e9 bf fe ff ff       	jmp    c0011df0 <loadACPITables(unsigned char*)+0x114>
c0011f31:	8d 76 00             	lea    esi,[esi+0x0]
c0011f34:	90                   	nop
c0011f35:	8d 76 00             	lea    esi,[esi+0x0]
c0011f38:	83 c4 60             	add    esp,0x60
c0011f3b:	5b                   	pop    ebx
c0011f3c:	5e                   	pop    esi
c0011f3d:	5f                   	pop    edi
c0011f3e:	c3                   	ret    
c0011f3f:	90                   	nop

c0011f40 <findRSDT(unsigned char*)>:
c0011f40:	57                   	push   edi
c0011f41:	56                   	push   esi
c0011f42:	53                   	push   ebx
c0011f43:	83 ec 50             	sub    esp,0x50
c0011f46:	83 ec 0c             	sub    esp,0xc
c0011f49:	68 8f 5e 02 c0       	push   0xc0025e8f
c0011f4e:	e8 ee 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0011f5b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011f61:	83 e0 04             	and    eax,0x4
c0011f64:	84 c0                	test   al,al
c0011f66:	75 0c                	jne    c0011f74 <findRSDT(unsigned char*)+0x34>
c0011f68:	b8 00 00 00 00       	mov    eax,0x0
c0011f6d:	e9 86 01 00 00       	jmp    c00120f8 <findRSDT(unsigned char*)+0x1b8>
c0011f72:	66 90                	xchg   ax,ax
c0011f74:	83 ec 0c             	sub    esp,0xc
c0011f77:	68 a1 5e 02 c0       	push   0xc0025ea1
c0011f7c:	e8 c0 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011f81:	83 c4 10             	add    esp,0x10
c0011f84:	89 e0                	mov    eax,esp
c0011f86:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011f8a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011f8e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011f92:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011f9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011fa2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011fa6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011faa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011fae:	89 c6                	mov    esi,eax
c0011fb0:	89 d7                	mov    edi,edx
c0011fb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fb4:	89 c8                	mov    eax,ecx
c0011fb6:	89 fa                	mov    edx,edi
c0011fb8:	89 f3                	mov    ebx,esi
c0011fba:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011fbe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011fc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011fc6:	83 ec 0c             	sub    esp,0xc
c0011fc9:	68 b3 5e 02 c0       	push   0xc0025eb3
c0011fce:	e8 6e 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011fd3:	83 c4 10             	add    esp,0x10
c0011fd6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011fda:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011fde:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011fe6:	83 ec 0c             	sub    esp,0xc
c0011fe9:	68 c5 5e 02 c0       	push   0xc0025ec5
c0011fee:	e8 4e 7e ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0011ff3:	83 c4 10             	add    esp,0x10
c0011ff6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ffa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ffe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012006:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001200a:	83 ec 04             	sub    esp,0x4
c001200d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012011:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012015:	68 3c 5d 02 c0       	push   0xc0025d3c
c001201a:	e8 a8 b0 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001201f:	83 c4 10             	add    esp,0x10
c0012022:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0012026:	25 ff 0f 00 00       	and    eax,0xfff
c001202b:	89 c6                	mov    esi,eax
c001202d:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c0012033:	83 ec 0c             	sub    esp,0xc
c0012036:	6a 02                	push   0x2
c0012038:	e8 64 9d ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c001203d:	83 c4 10             	add    esp,0x10
c0012040:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012044:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001204a:	83 ec 0c             	sub    esp,0xc
c001204d:	6a 01                	push   0x1
c001204f:	6a 02                	push   0x2
c0012051:	50                   	push   eax
c0012052:	52                   	push   edx
c0012053:	53                   	push   ebx
c0012054:	e8 e5 a6 ff ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012059:	83 c4 20             	add    esp,0x20
c001205c:	09 f0                	or     eax,esi
c001205e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012062:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012066:	25 ff 0f 00 00       	and    eax,0xfff
c001206b:	89 c6                	mov    esi,eax
c001206d:	8b 1d f0 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf0
c0012073:	83 ec 0c             	sub    esp,0xc
c0012076:	6a 02                	push   0x2
c0012078:	e8 24 9d ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012084:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001208a:	83 ec 0c             	sub    esp,0xc
c001208d:	6a 01                	push   0x1
c001208f:	6a 02                	push   0x2
c0012091:	50                   	push   eax
c0012092:	52                   	push   edx
c0012093:	53                   	push   ebx
c0012094:	e8 a5 a6 ff ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012099:	83 c4 20             	add    esp,0x20
c001209c:	09 f0                	or     eax,esi
c001209e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00120a2:	83 ec 04             	sub    esp,0x4
c00120a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00120a9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00120ad:	68 5c 5d 02 c0       	push   0xc0025d5c
c00120b2:	e8 10 b0 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00120bf:	75 13                	jne    c00120d4 <findRSDT(unsigned char*)+0x194>
c00120c1:	c6 05 20 94 02 c0 00 	mov    BYTE PTR ds:0xc0029420,0x0
c00120c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00120d0:	eb 22                	jmp    c00120f4 <findRSDT(unsigned char*)+0x1b4>
c00120d2:	66 90                	xchg   ax,ax
c00120d4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00120d9:	75 11                	jne    c00120ec <findRSDT(unsigned char*)+0x1ac>
c00120db:	c6 05 20 94 02 c0 01 	mov    BYTE PTR ds:0xc0029420,0x1
c00120e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00120e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00120ea:	eb 08                	jmp    c00120f4 <findRSDT(unsigned char*)+0x1b4>
c00120ec:	b8 00 00 00 00       	mov    eax,0x0
c00120f1:	eb 05                	jmp    c00120f8 <findRSDT(unsigned char*)+0x1b8>
c00120f3:	90                   	nop
c00120f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00120f8:	83 c4 50             	add    esp,0x50
c00120fb:	5b                   	pop    ebx
c00120fc:	5e                   	pop    esi
c00120fd:	5f                   	pop    edi
c00120fe:	c3                   	ret    
c00120ff:	90                   	nop

c0012100 <findDataTable(unsigned char*, char*)>:
c0012100:	83 ec 1c             	sub    esp,0x1c
c0012103:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0012108:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001210e:	83 e0 04             	and    eax,0x4
c0012111:	84 c0                	test   al,al
c0012113:	75 07                	jne    c001211c <findDataTable(unsigned char*, char*)+0x1c>
c0012115:	b8 00 00 00 00       	mov    eax,0x0
c001211a:	eb 58                	jmp    c0012174 <findDataTable(unsigned char*, char*)+0x74>
c001211c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012124:	a1 0c 92 02 c0       	mov    eax,ds:0xc002920c
c0012129:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001212d:	7d 3d                	jge    c001216c <findDataTable(unsigned char*, char*)+0x6c>
c001212f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012133:	c1 e0 03             	shl    eax,0x3
c0012136:	05 20 92 02 c0       	add    eax,0xc0029220
c001213b:	83 ec 04             	sub    esp,0x4
c001213e:	6a 04                	push   0x4
c0012140:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012144:	50                   	push   eax
c0012145:	e8 46 e4 fe ff       	call   c0000590 <memcmp>
c001214a:	83 c4 10             	add    esp,0x10
c001214d:	85 c0                	test   eax,eax
c001214f:	0f 94 c0             	sete   al
c0012152:	84 c0                	test   al,al
c0012154:	74 0e                	je     c0012164 <findDataTable(unsigned char*, char*)+0x64>
c0012156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001215a:	8b 04 c5 24 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6ddc]
c0012161:	eb 11                	jmp    c0012174 <findDataTable(unsigned char*, char*)+0x74>
c0012163:	90                   	nop
c0012164:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012168:	eb ba                	jmp    c0012124 <findDataTable(unsigned char*, char*)+0x24>
c001216a:	66 90                	xchg   ax,ax
c001216c:	b8 00 00 00 00       	mov    eax,0x0
c0012171:	8d 76 00             	lea    esi,[esi+0x0]
c0012174:	83 c4 1c             	add    esp,0x1c
c0012177:	c3                   	ret    

c0012178 <scanMADT()>:
c0012178:	53                   	push   ebx
c0012179:	83 ec 38             	sub    esp,0x38
c001217c:	83 ec 0c             	sub    esp,0xc
c001217f:	68 d7 5e 02 c0       	push   0xc0025ed7
c0012184:	e8 b8 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012189:	83 c4 10             	add    esp,0x10
c001218c:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012191:	25 00 04 00 00       	and    eax,0x400
c0012196:	74 14                	je     c00121ac <scanMADT()+0x34>
c0012198:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001219d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00121a3:	83 e2 fb             	and    edx,0xfffffffb
c00121a6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00121ac:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00121b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00121b7:	83 e0 04             	and    eax,0x4
c00121ba:	84 c0                	test   al,al
c00121bc:	0f 84 82 04 00 00    	je     c0012644 <scanMADT()+0x4cc>
c00121c2:	83 ec 0c             	sub    esp,0xc
c00121c5:	68 e4 5e 02 c0       	push   0xc0025ee4
c00121ca:	e8 72 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00121cf:	83 c4 10             	add    esp,0x10
c00121d2:	e8 31 fa ff ff       	call   c0011c08 <findRSDP()>
c00121d7:	a3 2c 94 02 c0       	mov    ds:0xc002942c,eax
c00121dc:	a1 2c 94 02 c0       	mov    eax,ds:0xc002942c
c00121e1:	85 c0                	test   eax,eax
c00121e3:	75 1b                	jne    c0012200 <scanMADT()+0x88>
c00121e5:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00121ea:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00121f0:	83 e2 fb             	and    edx,0xfffffffb
c00121f3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00121f9:	e9 4e 04 00 00       	jmp    c001264c <scanMADT()+0x4d4>
c00121fe:	66 90                	xchg   ax,ax
c0012200:	83 ec 0c             	sub    esp,0xc
c0012203:	68 f6 5e 02 c0       	push   0xc0025ef6
c0012208:	e8 34 7c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001220d:	83 c4 10             	add    esp,0x10
c0012210:	a1 2c 94 02 c0       	mov    eax,ds:0xc002942c
c0012215:	83 ec 0c             	sub    esp,0xc
c0012218:	50                   	push   eax
c0012219:	e8 22 fd ff ff       	call   c0011f40 <findRSDT(unsigned char*)>
c001221e:	83 c4 10             	add    esp,0x10
c0012221:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0012226:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001222b:	85 c0                	test   eax,eax
c001222d:	75 19                	jne    c0012248 <scanMADT()+0xd0>
c001222f:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0012234:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001223a:	83 e2 fb             	and    edx,0xfffffffb
c001223d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012243:	e9 04 04 00 00       	jmp    c001264c <scanMADT()+0x4d4>
c0012248:	83 ec 0c             	sub    esp,0xc
c001224b:	68 06 5f 02 c0       	push   0xc0025f06
c0012250:	e8 ec 7b ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012255:	83 c4 10             	add    esp,0x10
c0012258:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001225d:	83 ec 0c             	sub    esp,0xc
c0012260:	50                   	push   eax
c0012261:	e8 76 fa ff ff       	call   c0011cdc <loadACPITables(unsigned char*)>
c0012266:	83 c4 10             	add    esp,0x10
c0012269:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001226e:	83 ec 08             	sub    esp,0x8
c0012271:	68 1e 5f 02 c0       	push   0xc0025f1e
c0012276:	50                   	push   eax
c0012277:	e8 84 fe ff ff       	call   c0012100 <findDataTable(unsigned char*, char*)>
c001227c:	83 c4 10             	add    esp,0x10
c001227f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012283:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012288:	75 1a                	jne    c00122a4 <scanMADT()+0x12c>
c001228a:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001228f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012295:	83 e2 fe             	and    edx,0xfffffffe
c0012298:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001229e:	e9 a9 03 00 00       	jmp    c001264c <scanMADT()+0x4d4>
c00122a3:	90                   	nop
c00122a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00122ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122b3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00122b7:	0f 87 8f 03 00 00    	ja     c001264c <scanMADT()+0x4d4>
c00122bd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00122c5:	0f 87 81 03 00 00    	ja     c001264c <scanMADT()+0x4d4>
c00122cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00122d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122d7:	8d 50 01             	lea    edx,[eax+0x1]
c00122da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00122e6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00122ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122ee:	8d 50 01             	lea    edx,[eax+0x1]
c00122f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00122fd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0012301:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0012306:	0f 86 3c 03 00 00    	jbe    c0012648 <scanMADT()+0x4d0>
c001230c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0012311:	75 59                	jne    c001236c <scanMADT()+0x1f4>
c0012313:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012317:	8d 50 01             	lea    edx,[eax+0x1]
c001231a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001231e:	8a 15 20 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029620
c0012324:	0f b6 d2             	movzx  edx,dl
c0012327:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001232b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001232f:	88 82 60 96 02 c0    	mov    BYTE PTR [edx-0x3ffd69a0],al
c0012335:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012339:	8d 50 01             	lea    edx,[eax+0x1]
c001233c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012340:	8a 15 20 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029620
c0012346:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012349:	88 0d 20 96 02 c0    	mov    BYTE PTR ds:0xc0029620,cl
c001234f:	0f b6 d2             	movzx  edx,dl
c0012352:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012356:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001235a:	88 82 40 96 02 c0    	mov    BYTE PTR [edx-0x3ffd69c0],al
c0012360:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012365:	e9 c6 02 00 00       	jmp    c0012630 <scanMADT()+0x4b8>
c001236a:	66 90                	xchg   ax,ax
c001236c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0012371:	0f 85 15 01 00 00    	jne    c001248c <scanMADT()+0x314>
c0012377:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001237b:	8d 50 01             	lea    edx,[eax+0x1]
c001237e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012382:	8a 15 e0 94 02 c0    	mov    dl,BYTE PTR ds:0xc00294e0
c0012388:	0f b6 d2             	movzx  edx,dl
c001238b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001238f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012393:	88 82 00 95 02 c0    	mov    BYTE PTR [edx-0x3ffd6b00],al
c0012399:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001239d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123a5:	01 d0                	add    eax,edx
c00123a7:	83 c0 2c             	add    eax,0x2c
c00123aa:	8a 00                	mov    al,BYTE PTR [eax]
c00123ac:	0f b6 d0             	movzx  edx,al
c00123af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123b3:	8d 48 01             	lea    ecx,[eax+0x1]
c00123b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123ba:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00123be:	0f b6 c0             	movzx  eax,al
c00123c1:	c1 e0 08             	shl    eax,0x8
c00123c4:	89 d1                	mov    ecx,edx
c00123c6:	09 c1                	or     ecx,eax
c00123c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123cc:	8d 50 02             	lea    edx,[eax+0x2]
c00123cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123d3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123d7:	0f b6 c0             	movzx  eax,al
c00123da:	c1 e0 10             	shl    eax,0x10
c00123dd:	09 c1                	or     ecx,eax
c00123df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123e3:	8d 50 03             	lea    edx,[eax+0x3]
c00123e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123ea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123ee:	0f b6 c0             	movzx  eax,al
c00123f1:	c1 e0 18             	shl    eax,0x18
c00123f4:	09 c1                	or     ecx,eax
c00123f6:	89 ca                	mov    edx,ecx
c00123f8:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c00123fd:	0f b6 c0             	movzx  eax,al
c0012400:	89 14 85 20 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ae0],edx
c0012407:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001240c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012410:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012414:	01 d0                	add    eax,edx
c0012416:	83 c0 2c             	add    eax,0x2c
c0012419:	8a 00                	mov    al,BYTE PTR [eax]
c001241b:	0f b6 d0             	movzx  edx,al
c001241e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012422:	8d 48 01             	lea    ecx,[eax+0x1]
c0012425:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012429:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001242d:	0f b6 c0             	movzx  eax,al
c0012430:	c1 e0 08             	shl    eax,0x8
c0012433:	89 d1                	mov    ecx,edx
c0012435:	09 c1                	or     ecx,eax
c0012437:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001243b:	8d 50 02             	lea    edx,[eax+0x2]
c001243e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012442:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012446:	0f b6 c0             	movzx  eax,al
c0012449:	c1 e0 10             	shl    eax,0x10
c001244c:	09 c1                	or     ecx,eax
c001244e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012452:	8d 50 03             	lea    edx,[eax+0x3]
c0012455:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012459:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001245d:	0f b6 c0             	movzx  eax,al
c0012460:	c1 e0 18             	shl    eax,0x18
c0012463:	09 c1                	or     ecx,eax
c0012465:	89 ca                	mov    edx,ecx
c0012467:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c001246c:	0f b6 c0             	movzx  eax,al
c001246f:	89 14 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],edx
c0012476:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001247b:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c0012480:	40                   	inc    eax
c0012481:	a2 e0 94 02 c0       	mov    ds:0xc00294e0,al
c0012486:	e9 a5 01 00 00       	jmp    c0012630 <scanMADT()+0x4b8>
c001248b:	90                   	nop
c001248c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0012491:	0f 85 e9 00 00 00    	jne    c0012580 <scanMADT()+0x408>
c0012497:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001249b:	8d 50 01             	lea    edx,[eax+0x1]
c001249e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00124aa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00124ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124b2:	8d 50 01             	lea    edx,[eax+0x1]
c00124b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00124b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00124c1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00124c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124cd:	01 d0                	add    eax,edx
c00124cf:	83 c0 2c             	add    eax,0x2c
c00124d2:	8a 00                	mov    al,BYTE PTR [eax]
c00124d4:	0f b6 d0             	movzx  edx,al
c00124d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124db:	8d 48 01             	lea    ecx,[eax+0x1]
c00124de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124e2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00124e6:	0f b6 c0             	movzx  eax,al
c00124e9:	c1 e0 08             	shl    eax,0x8
c00124ec:	89 d1                	mov    ecx,edx
c00124ee:	09 c1                	or     ecx,eax
c00124f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124f4:	8d 50 02             	lea    edx,[eax+0x2]
c00124f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124fb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00124ff:	0f b6 c0             	movzx  eax,al
c0012502:	c1 e0 10             	shl    eax,0x10
c0012505:	09 c1                	or     ecx,eax
c0012507:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001250b:	8d 50 03             	lea    edx,[eax+0x3]
c001250e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012512:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012516:	0f b6 c0             	movzx  eax,al
c0012519:	c1 e0 18             	shl    eax,0x18
c001251c:	09 c8                	or     eax,ecx
c001251e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012522:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012527:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001252b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001252f:	01 d0                	add    eax,edx
c0012531:	83 c0 2c             	add    eax,0x2c
c0012534:	8a 00                	mov    al,BYTE PTR [eax]
c0012536:	0f b6 c0             	movzx  eax,al
c0012539:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001253d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012540:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012544:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012548:	0f b6 d2             	movzx  edx,dl
c001254b:	c1 e2 08             	shl    edx,0x8
c001254e:	09 d0                	or     eax,edx
c0012550:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0012555:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001255a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001255f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012563:	88 90 c0 82 02 c0    	mov    BYTE PTR [eax-0x3ffd7d40],dl
c0012569:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001256e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012573:	66 89 84 12 c0 94 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6b40],ax
c001257b:	e9 b0 00 00 00       	jmp    c0012630 <scanMADT()+0x4b8>
c0012580:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0012585:	0f 85 99 00 00 00    	jne    c0012624 <scanMADT()+0x4ac>
c001258b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001258f:	8d 50 01             	lea    edx,[eax+0x1]
c0012592:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012596:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001259a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001259e:	0f b6 c0             	movzx  eax,al
c00125a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00125a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125ad:	01 d0                	add    eax,edx
c00125af:	83 c0 2c             	add    eax,0x2c
c00125b2:	8a 00                	mov    al,BYTE PTR [eax]
c00125b4:	0f b6 d0             	movzx  edx,al
c00125b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125bb:	8d 48 01             	lea    ecx,[eax+0x1]
c00125be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125c2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00125c6:	0f b6 c0             	movzx  eax,al
c00125c9:	c1 e0 08             	shl    eax,0x8
c00125cc:	09 d0                	or     eax,edx
c00125ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00125d2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00125d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125db:	8d 50 01             	lea    edx,[eax+0x1]
c00125de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00125e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125e6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00125ea:	0f b6 c0             	movzx  eax,al
c00125ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125f5:	c1 e0 08             	shl    eax,0x8
c00125f8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00125fc:	89 c1                	mov    ecx,eax
c00125fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012602:	c1 e0 18             	shl    eax,0x18
c0012605:	89 c3                	mov    ebx,eax
c0012607:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c001260c:	8d 50 01             	lea    edx,[eax+0x1]
c001260f:	89 15 30 94 02 c0    	mov    DWORD PTR ds:0xc0029430,edx
c0012615:	09 d9                	or     ecx,ebx
c0012617:	89 ca                	mov    edx,ecx
c0012619:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c0012620:	eb 0e                	jmp    c0012630 <scanMADT()+0x4b8>
c0012622:	66 90                	xchg   ax,ax
c0012624:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012629:	75 05                	jne    c0012630 <scanMADT()+0x4b8>
c001262b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012630:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012635:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012639:	01 d0                	add    eax,edx
c001263b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001263f:	e9 68 fc ff ff       	jmp    c00122ac <scanMADT()+0x134>
c0012644:	90                   	nop
c0012645:	eb 05                	jmp    c001264c <scanMADT()+0x4d4>
c0012647:	90                   	nop
c0012648:	90                   	nop
c0012649:	8d 76 00             	lea    esi,[esi+0x0]
c001264c:	83 c4 38             	add    esp,0x38
c001264f:	5b                   	pop    ebx
c0012650:	c3                   	ret    
c0012651:	90                   	nop
c0012652:	66 90                	xchg   ax,ax

c0012654 <ACPI::ACPI()>:
c0012654:	83 ec 0c             	sub    esp,0xc
c0012657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001265b:	83 ec 08             	sub    esp,0x8
c001265e:	68 23 5f 02 c0       	push   0xc0025f23
c0012663:	50                   	push   eax
c0012664:	e8 d5 c1 ff ff       	call   c000e83e <Device::Device(char const*)>
c0012669:	83 c4 10             	add    esp,0x10
c001266c:	ba e4 60 02 c0       	mov    edx,0xc00260e4
c0012671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012675:	89 10                	mov    DWORD PTR [eax],edx
c0012677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001267b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0012682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012686:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012694:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001269e:	83 ec 0c             	sub    esp,0xc
c00126a1:	68 28 5f 02 c0       	push   0xc0025f28
c00126a6:	e8 96 77 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00126ab:	83 c4 10             	add    esp,0x10
c00126ae:	e8 c5 fa ff ff       	call   c0012178 <scanMADT()>
c00126b3:	90                   	nop
c00126b4:	83 c4 0c             	add    esp,0xc
c00126b7:	c3                   	ret    

c00126b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00126b8:	83 ec 2c             	sub    esp,0x2c
c00126bb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00126bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00126c7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00126cb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00126d0:	88 d0                	mov    al,dl
c00126d2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00126d6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00126db:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00126e3:	90                   	nop
c00126e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126e8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00126ee:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00126f2:	0f 8d 9c 00 00 00    	jge    c0012794 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00126f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012700:	83 c2 2a             	add    edx,0x2a
c0012703:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012707:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001270c:	75 7a                	jne    c0012788 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001270e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012712:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012716:	83 c2 2a             	add    edx,0x2a
c0012719:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001271d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012721:	75 65                	jne    c0012788 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012723:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012728:	74 3a                	je     c0012764 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001272a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001272e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012732:	83 c2 2a             	add    edx,0x2a
c0012735:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012739:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001273d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012740:	39 c2                	cmp    edx,eax
c0012742:	74 10                	je     c0012754 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012744:	83 ec 0c             	sub    esp,0xc
c0012747:	68 7c 5d 02 c0       	push   0xc0025d7c
c001274c:	e8 58 2a 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c0012751:	83 c4 10             	add    esp,0x10
c0012754:	83 ec 0c             	sub    esp,0xc
c0012757:	68 36 5f 02 c0       	push   0xc0025f36
c001275c:	e8 48 2a 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c0012761:	83 c4 10             	add    esp,0x10
c0012764:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012768:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001276c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012770:	83 c2 2a             	add    edx,0x2a
c0012773:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0012777:	8b 02                	mov    eax,DWORD PTR [edx]
c0012779:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001277c:	89 01                	mov    DWORD PTR [ecx],eax
c001277e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012781:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012786:	66 90                	xchg   ax,ax
c0012788:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001278c:	e9 53 ff ff ff       	jmp    c00126e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012791:	8d 76 00             	lea    esi,[esi+0x0]
c0012794:	90                   	nop
c0012795:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012799:	83 c4 2c             	add    esp,0x2c
c001279c:	c2 04 00             	ret    0x4
c001279f:	90                   	nop

c00127a0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00127a0:	83 ec 1c             	sub    esp,0x1c
c00127a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00127ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00127b4:	88 c8                	mov    al,cl
c00127b6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00127ba:	88 d0                	mov    al,dl
c00127bc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00127c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127c4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00127ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127ce:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00127d1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00127d5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00127d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127dd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00127e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00127e7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00127ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127ee:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00127f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127f7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00127fd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012801:	8d 48 01             	lea    ecx,[eax+0x1]
c0012804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012808:	83 c2 2a             	add    edx,0x2a
c001280b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001280f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012813:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001281d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012820:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012824:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001282c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012832:	8d 50 01             	lea    edx,[eax+0x1]
c0012835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012839:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001283f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012843:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012849:	3d 00 02 00 00       	cmp    eax,0x200
c001284e:	75 10                	jne    c0012860 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012850:	83 ec 0c             	sub    esp,0xc
c0012853:	68 45 5f 02 c0       	push   0xc0025f45
c0012858:	e8 4c 29 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c001285d:	83 c4 10             	add    esp,0x10
c0012860:	90                   	nop
c0012861:	83 c4 1c             	add    esp,0x1c
c0012864:	c3                   	ret    
c0012865:	90                   	nop
c0012866:	66 90                	xchg   ax,ax

c0012868 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012868:	b8 00 00 00 00       	mov    eax,0x0
c001286d:	c3                   	ret    
c001286e:	66 90                	xchg   ax,ax

c0012870 <ACPI::detectPCI()>:
c0012870:	53                   	push   ebx
c0012871:	83 ec 68             	sub    esp,0x68
c0012874:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012879:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c001287e:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0012883:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012889:	83 e0 04             	and    eax,0x4
c001288c:	84 c0                	test   al,al
c001288e:	74 2c                	je     c00128bc <ACPI::detectPCI()+0x4c>
c0012890:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0012895:	83 ec 08             	sub    esp,0x8
c0012898:	68 62 5f 02 c0       	push   0xc0025f62
c001289d:	50                   	push   eax
c001289e:	e8 5d f8 ff ff       	call   c0012100 <findDataTable(unsigned char*, char*)>
c00128a3:	83 c4 10             	add    esp,0x10
c00128a6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00128aa:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00128af:	74 0b                	je     c00128bc <ACPI::detectPCI()+0x4c>
c00128b1:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128b6:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00128bb:	90                   	nop
c00128bc:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00128c4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00128c8:	8a 00                	mov    al,BYTE PTR [eax]
c00128ca:	3c 01                	cmp    al,0x1
c00128cc:	75 0e                	jne    c00128dc <ACPI::detectPCI()+0x6c>
c00128ce:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128d3:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00128d8:	eb 2a                	jmp    c0012904 <ACPI::detectPCI()+0x94>
c00128da:	66 90                	xchg   ax,ax
c00128dc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00128e0:	8a 00                	mov    al,BYTE PTR [eax]
c00128e2:	3c 02                	cmp    al,0x2
c00128e4:	75 1e                	jne    c0012904 <ACPI::detectPCI()+0x94>
c00128e6:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128eb:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00128f0:	74 12                	je     c0012904 <ACPI::detectPCI()+0x94>
c00128f2:	83 ec 0c             	sub    esp,0xc
c00128f5:	68 ac 5d 02 c0       	push   0xc0025dac
c00128fa:	e8 aa 28 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c00128ff:	83 c4 10             	add    esp,0x10
c0012902:	66 90                	xchg   ax,ax
c0012904:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012908:	83 f0 01             	xor    eax,0x1
c001290b:	84 c0                	test   al,al
c001290d:	74 41                	je     c0012950 <ACPI::detectPCI()+0xe0>
c001290f:	e8 3c d8 fe ff       	call   c0000150 <manualPCIProbe>
c0012914:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012918:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c001291d:	75 0d                	jne    c001292c <ACPI::detectPCI()+0xbc>
c001291f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012924:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012929:	eb 25                	jmp    c0012950 <ACPI::detectPCI()+0xe0>
c001292b:	90                   	nop
c001292c:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012931:	75 1d                	jne    c0012950 <ACPI::detectPCI()+0xe0>
c0012933:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012938:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001293d:	74 11                	je     c0012950 <ACPI::detectPCI()+0xe0>
c001293f:	83 ec 0c             	sub    esp,0xc
c0012942:	68 ac 5d 02 c0       	push   0xc0025dac
c0012947:	e8 5d 28 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c001294c:	83 c4 10             	add    esp,0x10
c001294f:	90                   	nop
c0012950:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012955:	0f 84 49 03 00 00    	je     c0012ca4 <ACPI::detectPCI()+0x434>
c001295b:	83 ec 0c             	sub    esp,0xc
c001295e:	68 67 5f 02 c0       	push   0xc0025f67
c0012963:	e8 d9 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012968:	83 c4 10             	add    esp,0x10
c001296b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012970:	0f 84 8e 00 00 00    	je     c0012a04 <ACPI::detectPCI()+0x194>
c0012976:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c001297b:	25 00 08 00 00       	and    eax,0x800
c0012980:	0f 84 16 01 00 00    	je     c0012a9c <ACPI::detectPCI()+0x22c>
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	68 d4 5d 02 c0       	push   0xc0025dd4
c001298e:	e8 ae 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012993:	83 c4 10             	add    esp,0x10
c0012996:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c001299b:	25 80 00 00 00       	and    eax,0x80
c00129a0:	0f 85 f6 00 00 00    	jne    c0012a9c <ACPI::detectPCI()+0x22c>
c00129a6:	66 90                	xchg   ax,ax
c00129a8:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00129af:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00129b4:	89 c2                	mov    edx,eax
c00129b6:	ec                   	in     al,dx
c00129b7:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00129bb:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00129bf:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00129c3:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00129c8:	74 0a                	je     c00129d4 <ACPI::detectPCI()+0x164>
c00129ca:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00129cf:	74 03                	je     c00129d4 <ACPI::detectPCI()+0x164>
c00129d1:	eb d5                	jmp    c00129a8 <ACPI::detectPCI()+0x138>
c00129d3:	90                   	nop
c00129d4:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00129db:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00129e0:	89 c2                	mov    edx,eax
c00129e2:	ec                   	in     al,dx
c00129e3:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00129e7:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00129eb:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00129ef:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00129f4:	74 de                	je     c00129d4 <ACPI::detectPCI()+0x164>
c00129f6:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00129fb:	0f 85 93 00 00 00    	jne    c0012a94 <ACPI::detectPCI()+0x224>
c0012a01:	eb d1                	jmp    c00129d4 <ACPI::detectPCI()+0x164>
c0012a03:	90                   	nop
c0012a04:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012a08:	83 f0 01             	xor    eax,0x1
c0012a0b:	84 c0                	test   al,al
c0012a0d:	0f 84 89 00 00 00    	je     c0012a9c <ACPI::detectPCI()+0x22c>
c0012a13:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012a18:	25 00 08 00 00       	and    eax,0x800
c0012a1d:	74 7d                	je     c0012a9c <ACPI::detectPCI()+0x22c>
c0012a1f:	83 ec 0c             	sub    esp,0xc
c0012a22:	68 f8 5d 02 c0       	push   0xc0025df8
c0012a27:	e8 15 74 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012a2c:	83 c4 10             	add    esp,0x10
c0012a2f:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012a34:	25 80 00 00 00       	and    eax,0x80
c0012a39:	75 61                	jne    c0012a9c <ACPI::detectPCI()+0x22c>
c0012a3b:	90                   	nop
c0012a3c:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012a43:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012a48:	89 c2                	mov    edx,eax
c0012a4a:	ec                   	in     al,dx
c0012a4b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012a4f:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012a53:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012a57:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012a5c:	74 0a                	je     c0012a68 <ACPI::detectPCI()+0x1f8>
c0012a5e:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012a63:	74 03                	je     c0012a68 <ACPI::detectPCI()+0x1f8>
c0012a65:	eb d5                	jmp    c0012a3c <ACPI::detectPCI()+0x1cc>
c0012a67:	90                   	nop
c0012a68:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012a6f:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012a74:	89 c2                	mov    edx,eax
c0012a76:	ec                   	in     al,dx
c0012a77:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012a7b:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012a7f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012a83:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012a88:	74 de                	je     c0012a68 <ACPI::detectPCI()+0x1f8>
c0012a8a:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012a8f:	75 07                	jne    c0012a98 <ACPI::detectPCI()+0x228>
c0012a91:	eb d5                	jmp    c0012a68 <ACPI::detectPCI()+0x1f8>
c0012a93:	90                   	nop
c0012a94:	90                   	nop
c0012a95:	eb 05                	jmp    c0012a9c <ACPI::detectPCI()+0x22c>
c0012a97:	90                   	nop
c0012a98:	90                   	nop
c0012a99:	8d 76 00             	lea    esi,[esi+0x0]
c0012a9c:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012aa4:	83 ec 0c             	sub    esp,0xc
c0012aa7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012aab:	e8 37 73 ff ff       	call   c0009de7 <malloc>
c0012ab0:	83 c4 10             	add    esp,0x10
c0012ab3:	89 c3                	mov    ebx,eax
c0012ab5:	83 ec 0c             	sub    esp,0xc
c0012ab8:	53                   	push   ebx
c0012ab9:	e8 f8 b0 00 00       	call   c001dbb6 <PCI::PCI()>
c0012abe:	83 c4 10             	add    esp,0x10
c0012ac1:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012ac5:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012aca:	25 00 08 00 00       	and    eax,0x800
c0012acf:	74 7b                	je     c0012b4c <ACPI::detectPCI()+0x2dc>
c0012ad1:	83 ec 0c             	sub    esp,0xc
c0012ad4:	68 7f 5f 02 c0       	push   0xc0025f7f
c0012ad9:	e8 63 73 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012ade:	83 c4 10             	add    esp,0x10
c0012ae1:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012ae6:	25 80 00 00 00       	and    eax,0x80
c0012aeb:	75 5f                	jne    c0012b4c <ACPI::detectPCI()+0x2dc>
c0012aed:	8d 76 00             	lea    esi,[esi+0x0]
c0012af0:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012af7:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012afc:	89 c2                	mov    edx,eax
c0012afe:	ec                   	in     al,dx
c0012aff:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012b03:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012b07:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012b0b:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012b10:	74 0a                	je     c0012b1c <ACPI::detectPCI()+0x2ac>
c0012b12:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012b17:	74 03                	je     c0012b1c <ACPI::detectPCI()+0x2ac>
c0012b19:	eb d5                	jmp    c0012af0 <ACPI::detectPCI()+0x280>
c0012b1b:	90                   	nop
c0012b1c:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012b23:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012b28:	89 c2                	mov    edx,eax
c0012b2a:	ec                   	in     al,dx
c0012b2b:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012b2f:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012b33:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012b37:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012b3c:	74 de                	je     c0012b1c <ACPI::detectPCI()+0x2ac>
c0012b3e:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012b43:	75 03                	jne    c0012b48 <ACPI::detectPCI()+0x2d8>
c0012b45:	eb d5                	jmp    c0012b1c <ACPI::detectPCI()+0x2ac>
c0012b47:	90                   	nop
c0012b48:	90                   	nop
c0012b49:	8d 76 00             	lea    esi,[esi+0x0]
c0012b4c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012b50:	83 ec 08             	sub    esp,0x8
c0012b53:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012b57:	50                   	push   eax
c0012b58:	e8 dd ba ff ff       	call   c000e63a <Device::addChild(Device*)>
c0012b5d:	83 c4 10             	add    esp,0x10
c0012b60:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012b65:	25 00 08 00 00       	and    eax,0x800
c0012b6a:	74 78                	je     c0012be4 <ACPI::detectPCI()+0x374>
c0012b6c:	83 ec 0c             	sub    esp,0xc
c0012b6f:	68 85 5f 02 c0       	push   0xc0025f85
c0012b74:	e8 c8 72 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012b79:	83 c4 10             	add    esp,0x10
c0012b7c:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012b81:	25 80 00 00 00       	and    eax,0x80
c0012b86:	75 5c                	jne    c0012be4 <ACPI::detectPCI()+0x374>
c0012b88:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012b8f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012b94:	89 c2                	mov    edx,eax
c0012b96:	ec                   	in     al,dx
c0012b97:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012b9b:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012b9f:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012ba3:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012ba8:	74 0a                	je     c0012bb4 <ACPI::detectPCI()+0x344>
c0012baa:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012baf:	74 03                	je     c0012bb4 <ACPI::detectPCI()+0x344>
c0012bb1:	eb d5                	jmp    c0012b88 <ACPI::detectPCI()+0x318>
c0012bb3:	90                   	nop
c0012bb4:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012bbb:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012bc0:	89 c2                	mov    edx,eax
c0012bc2:	ec                   	in     al,dx
c0012bc3:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012bc7:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012bcb:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012bcf:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012bd4:	74 de                	je     c0012bb4 <ACPI::detectPCI()+0x344>
c0012bd6:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012bdb:	75 03                	jne    c0012be0 <ACPI::detectPCI()+0x370>
c0012bdd:	eb d5                	jmp    c0012bb4 <ACPI::detectPCI()+0x344>
c0012bdf:	90                   	nop
c0012be0:	90                   	nop
c0012be1:	8d 76 00             	lea    esi,[esi+0x0]
c0012be4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012be8:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bea:	83 c0 08             	add    eax,0x8
c0012bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bef:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012bf4:	74 0a                	je     c0012c00 <ACPI::detectPCI()+0x390>
c0012bf6:	ba 01 00 00 00       	mov    edx,0x1
c0012bfb:	eb 0b                	jmp    c0012c08 <ACPI::detectPCI()+0x398>
c0012bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012c00:	ba 02 00 00 00       	mov    edx,0x2
c0012c05:	8d 76 00             	lea    esi,[esi+0x0]
c0012c08:	6a 00                	push   0x0
c0012c0a:	6a 00                	push   0x0
c0012c0c:	52                   	push   edx
c0012c0d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012c11:	ff d0                	call   eax
c0012c13:	83 c4 10             	add    esp,0x10
c0012c16:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012c1b:	25 00 08 00 00       	and    eax,0x800
c0012c20:	0f 84 26 01 00 00    	je     c0012d4c <ACPI::detectPCI()+0x4dc>
c0012c26:	83 ec 0c             	sub    esp,0xc
c0012c29:	68 8b 5f 02 c0       	push   0xc0025f8b
c0012c2e:	e8 0e 72 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012c33:	83 c4 10             	add    esp,0x10
c0012c36:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0012c3b:	25 80 00 00 00       	and    eax,0x80
c0012c40:	0f 85 06 01 00 00    	jne    c0012d4c <ACPI::detectPCI()+0x4dc>
c0012c46:	66 90                	xchg   ax,ax
c0012c48:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012c4f:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c54:	89 c2                	mov    edx,eax
c0012c56:	ec                   	in     al,dx
c0012c57:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012c5b:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012c5f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012c63:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012c68:	74 0a                	je     c0012c74 <ACPI::detectPCI()+0x404>
c0012c6a:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012c6f:	74 03                	je     c0012c74 <ACPI::detectPCI()+0x404>
c0012c71:	eb d5                	jmp    c0012c48 <ACPI::detectPCI()+0x3d8>
c0012c73:	90                   	nop
c0012c74:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012c7b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012c80:	89 c2                	mov    edx,eax
c0012c82:	ec                   	in     al,dx
c0012c83:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012c87:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012c8b:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012c8f:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012c94:	74 de                	je     c0012c74 <ACPI::detectPCI()+0x404>
c0012c96:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012c9b:	0f 85 a7 00 00 00    	jne    c0012d48 <ACPI::detectPCI()+0x4d8>
c0012ca1:	eb d1                	jmp    c0012c74 <ACPI::detectPCI()+0x404>
c0012ca3:	90                   	nop
c0012ca4:	83 ec 0c             	sub    esp,0xc
c0012ca7:	68 91 5f 02 c0       	push   0xc0025f91
c0012cac:	e8 16 a4 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0012cb1:	83 c4 10             	add    esp,0x10
c0012cb4:	83 ec 0c             	sub    esp,0xc
c0012cb7:	68 9c 5f 02 c0       	push   0xc0025f9c
c0012cbc:	e8 80 71 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012ccc:	83 ec 0c             	sub    esp,0xc
c0012ccf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cd3:	e8 0f 71 ff ff       	call   c0009de7 <malloc>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	89 c3                	mov    ebx,eax
c0012cdd:	83 ec 0c             	sub    esp,0xc
c0012ce0:	53                   	push   ebx
c0012ce1:	e8 3a c0 00 00       	call   c001ed20 <IDE::IDE()>
c0012ce6:	83 c4 10             	add    esp,0x10
c0012ce9:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012ced:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012cf1:	83 ec 08             	sub    esp,0x8
c0012cf4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012cf8:	50                   	push   eax
c0012cf9:	e8 3c b9 ff ff       	call   c000e63a <Device::addChild(Device*)>
c0012cfe:	83 c4 10             	add    esp,0x10
c0012d01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d05:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012d0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d13:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012d1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d20:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012d29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d2f:	83 c0 08             	add    eax,0x8
c0012d32:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d34:	6a 00                	push   0x0
c0012d36:	6a 00                	push   0x0
c0012d38:	6a 00                	push   0x0
c0012d3a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012d3e:	ff d0                	call   eax
c0012d40:	83 c4 10             	add    esp,0x10
c0012d43:	eb 07                	jmp    c0012d4c <ACPI::detectPCI()+0x4dc>
c0012d45:	8d 76 00             	lea    esi,[esi+0x0]
c0012d48:	90                   	nop
c0012d49:	8d 76 00             	lea    esi,[esi+0x0]
c0012d4c:	90                   	nop
c0012d4d:	83 c4 68             	add    esp,0x68
c0012d50:	5b                   	pop    ebx
c0012d51:	c3                   	ret    
c0012d52:	66 90                	xchg   ax,ax

c0012d54 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012d54:	83 ec 1c             	sub    esp,0x1c
c0012d57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d5b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012d5e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012d62:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0012d67:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012d6c:	83 ec 08             	sub    esp,0x8
c0012d6f:	52                   	push   edx
c0012d70:	50                   	push   eax
c0012d71:	e8 bc 65 ff ff       	call   c0009332 <Computer::readCMOS(unsigned char)>
c0012d76:	83 c4 10             	add    esp,0x10
c0012d79:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012d7d:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0012d82:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012d87:	83 ec 04             	sub    esp,0x4
c0012d8a:	6a 01                	push   0x1
c0012d8c:	52                   	push   edx
c0012d8d:	50                   	push   eax
c0012d8e:	e8 8b 67 ff ff       	call   c000951e <Computer::writeCMOS(unsigned char, unsigned char)>
c0012d93:	83 c4 10             	add    esp,0x10
c0012d96:	90                   	nop
c0012d97:	83 c4 1c             	add    esp,0x1c
c0012d9a:	c3                   	ret    
c0012d9b:	90                   	nop

c0012d9c <ACPI::sleep()>:
c0012d9c:	83 ec 0c             	sub    esp,0xc
c0012d9f:	83 ec 0c             	sub    esp,0xc
c0012da2:	68 b1 5f 02 c0       	push   0xc0025fb1
c0012da7:	e8 1b a3 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0012dac:	83 c4 10             	add    esp,0x10
c0012daf:	a1 00 92 02 c0       	mov    eax,ds:0xc0029200
c0012db4:	85 c0                	test   eax,eax
c0012db6:	74 18                	je     c0012dd0 <ACPI::sleep()+0x34>
c0012db8:	83 ec 0c             	sub    esp,0xc
c0012dbb:	68 be 5f 02 c0       	push   0xc0025fbe
c0012dc0:	e8 02 a3 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0012dc5:	83 c4 10             	add    esp,0x10
c0012dc8:	a1 00 92 02 c0       	mov    eax,ds:0xc0029200
c0012dcd:	ff d0                	call   eax
c0012dcf:	90                   	nop
c0012dd0:	90                   	nop
c0012dd1:	83 c4 0c             	add    esp,0xc
c0012dd4:	c3                   	ret    
c0012dd5:	90                   	nop
c0012dd6:	66 90                	xchg   ax,ax

c0012dd8 <ACPI::open(int, int, void*)>:
c0012dd8:	57                   	push   edi
c0012dd9:	56                   	push   esi
c0012dda:	53                   	push   ebx
c0012ddb:	81 ec 70 01 00 00    	sub    esp,0x170
c0012de1:	83 ec 0c             	sub    esp,0xc
c0012de4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012deb:	e8 80 fa ff ff       	call   c0012870 <ACPI::detectPCI()>
c0012df0:	83 c4 10             	add    esp,0x10
c0012df3:	83 ec 0c             	sub    esp,0xc
c0012df6:	68 1c 5e 02 c0       	push   0xc0025e1c
c0012dfb:	e8 41 70 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012e00:	83 c4 10             	add    esp,0x10
c0012e03:	83 ec 0c             	sub    esp,0xc
c0012e06:	68 d8 5f 02 c0       	push   0xc0025fd8
c0012e0b:	e8 a3 4c 00 00       	call   c0017ab3 <Thr::loadKernelSymbolTable(char const*)>
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012e1b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012e26:	83 ec 0c             	sub    esp,0xc
c0012e29:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012e30:	e8 b2 6f ff ff       	call   c0009de7 <malloc>
c0012e35:	83 c4 10             	add    esp,0x10
c0012e38:	89 c3                	mov    ebx,eax
c0012e3a:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c0012e3f:	83 ec 04             	sub    esp,0x4
c0012e42:	50                   	push   eax
c0012e43:	68 f6 5f 02 c0       	push   0xc0025ff6
c0012e48:	53                   	push   ebx
c0012e49:	e8 e4 a7 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c0012e4e:	83 c4 10             	add    esp,0x10
c0012e51:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012e58:	83 ec 08             	sub    esp,0x8
c0012e5b:	6a 01                	push   0x1
c0012e5d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012e64:	e8 a3 a8 ff ff       	call   c000d70c <File::open(FileOpenMode)>
c0012e69:	83 c4 10             	add    esp,0x10
c0012e6c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012e73:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012e7b:	75 17                	jne    c0012e94 <ACPI::open(int, int, void*)+0xbc>
c0012e7d:	83 ec 0c             	sub    esp,0xc
c0012e80:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012e87:	e8 de a8 ff ff       	call   c000d76a <File::close()>
c0012e8c:	83 c4 10             	add    esp,0x10
c0012e8f:	eb 0b                	jmp    c0012e9c <ACPI::open(int, int, void*)+0xc4>
c0012e91:	8d 76 00             	lea    esi,[esi+0x0]
c0012e94:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012e9c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012ea4:	74 1e                	je     c0012ec4 <ACPI::open(int, int, void*)+0xec>
c0012ea6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012ead:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eaf:	83 c0 08             	add    eax,0x8
c0012eb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012eb4:	83 ec 0c             	sub    esp,0xc
c0012eb7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012ebe:	ff d0                	call   eax
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	90                   	nop
c0012ec4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012ecb:	83 f0 01             	xor    eax,0x1
c0012ece:	84 c0                	test   al,al
c0012ed0:	74 42                	je     c0012f14 <ACPI::open(int, int, void*)+0x13c>
c0012ed2:	83 ec 0c             	sub    esp,0xc
c0012ed5:	68 14 60 02 c0       	push   0xc0026014
c0012eda:	e8 62 6f ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012edf:	83 c4 10             	add    esp,0x10
c0012ee2:	83 ec 04             	sub    esp,0x4
c0012ee5:	6a 0c                	push   0xc
c0012ee7:	68 2f 60 02 c0       	push   0xc002602f
c0012eec:	68 40 60 02 c0       	push   0xc0026040
c0012ef1:	e8 27 32 00 00       	call   c001611d <Reg::readIntWithDefault(char*, char*, int)>
c0012ef6:	83 c4 10             	add    esp,0x10
c0012ef9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012f00:	83 ec 0c             	sub    esp,0xc
c0012f03:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012f0a:	e8 9c 90 ff ff       	call   c000bfab <Virt::setupPageSwapping(int)>
c0012f0f:	83 c4 10             	add    esp,0x10
c0012f12:	66 90                	xchg   ax,ax
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	68 86 45 02 c0       	push   0xc0024586
c0012f1c:	e8 20 6f ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c0012f2a:	83 ec 08             	sub    esp,0x8
c0012f2d:	6a 01                	push   0x1
c0012f2f:	68 47 60 02 c0       	push   0xc0026047
c0012f34:	e8 f1 55 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c0012f39:	83 c4 10             	add    esp,0x10
c0012f3c:	83 ec 08             	sub    esp,0x8
c0012f3f:	53                   	push   ebx
c0012f40:	50                   	push   eax
c0012f41:	e8 15 58 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c0012f46:	83 c4 10             	add    esp,0x10
c0012f49:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012f50:	83 ec 08             	sub    esp,0x8
c0012f53:	6a 12                	push   0x12
c0012f55:	50                   	push   eax
c0012f56:	e8 63 ba ff ff       	call   c000e9be <getDevicesOfType(DeviceType)>
c0012f5b:	83 c4 0c             	add    esp,0xc
c0012f5e:	66 90                	xchg   ax,ax
c0012f60:	83 ec 0c             	sub    esp,0xc
c0012f63:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f6a:	50                   	push   eax
c0012f6b:	e8 0c 08 01 00       	call   c002377c <LinkedList<Device>::isEmpty()>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	83 f0 01             	xor    eax,0x1
c0012f76:	84 c0                	test   al,al
c0012f78:	0f 84 46 01 00 00    	je     c00130c4 <ACPI::open(int, int, void*)+0x2ec>
c0012f7e:	83 ec 0c             	sub    esp,0xc
c0012f81:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f88:	50                   	push   eax
c0012f89:	e8 0a 08 01 00       	call   c0023798 <LinkedList<Device>::getFirstElement()>
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012f98:	83 ec 0c             	sub    esp,0xc
c0012f9b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012fa2:	50                   	push   eax
c0012fa3:	e8 f8 07 01 00       	call   c00237a0 <LinkedList<Device>::removeFirst()>
c0012fa8:	83 c4 10             	add    esp,0x10
c0012fab:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012fb2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012fb9:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012fc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012fc4:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012fca:	ba 09 00 00 00       	mov    edx,0x9
c0012fcf:	fc                   	cld    
c0012fd0:	89 c7                	mov    edi,eax
c0012fd2:	89 de                	mov    esi,ebx
c0012fd4:	89 d1                	mov    ecx,edx
c0012fd6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012fd8:	83 ec 08             	sub    esp,0x8
c0012fdb:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012fdf:	50                   	push   eax
c0012fe0:	83 ec 24             	sub    esp,0x24
c0012fe3:	89 e0                	mov    eax,esp
c0012fe5:	89 c3                	mov    ebx,eax
c0012fe7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012feb:	ba 09 00 00 00       	mov    edx,0x9
c0012ff0:	89 df                	mov    edi,ebx
c0012ff2:	89 c6                	mov    esi,eax
c0012ff4:	89 d1                	mov    ecx,edx
c0012ff6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ff8:	e8 97 b0 00 00       	call   c001e094 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012ffd:	83 c4 30             	add    esp,0x30
c0013000:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0013007:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001300f:	0f 84 4b ff ff ff    	je     c0012f60 <ACPI::open(int, int, void*)+0x188>
c0013015:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0013020:	83 ec 0c             	sub    esp,0xc
c0013023:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001302a:	e8 b8 6d ff ff       	call   c0009de7 <malloc>
c001302f:	83 c4 10             	add    esp,0x10
c0013032:	89 c3                	mov    ebx,eax
c0013034:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c0013039:	83 ec 04             	sub    esp,0x4
c001303c:	50                   	push   eax
c001303d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0013044:	53                   	push   ebx
c0013045:	e8 e8 a5 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c001304a:	83 c4 10             	add    esp,0x10
c001304d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0013054:	83 ec 0c             	sub    esp,0xc
c0013057:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001305e:	e8 17 a9 ff ff       	call   c000d97a <File::exists()>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	84 c0                	test   al,al
c0013068:	74 2a                	je     c0013094 <ACPI::open(int, int, void*)+0x2bc>
c001306a:	83 ec 08             	sub    esp,0x8
c001306d:	6a 01                	push   0x1
c001306f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0013076:	e8 af 54 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c001307b:	83 c4 10             	add    esp,0x10
c001307e:	83 ec 08             	sub    esp,0x8
c0013081:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0013088:	50                   	push   eax
c0013089:	e8 cd 56 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c001308e:	83 c4 10             	add    esp,0x10
c0013091:	8d 76 00             	lea    esi,[esi+0x0]
c0013094:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001309c:	0f 84 be fe ff ff    	je     c0012f60 <ACPI::open(int, int, void*)+0x188>
c00130a2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00130a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00130ab:	83 c0 08             	add    eax,0x8
c00130ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00130b0:	83 ec 0c             	sub    esp,0xc
c00130b3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00130ba:	ff d0                	call   eax
c00130bc:	83 c4 10             	add    esp,0x10
c00130bf:	e9 9c fe ff ff       	jmp    c0012f60 <ACPI::open(int, int, void*)+0x188>
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00130ce:	50                   	push   eax
c00130cf:	e8 a4 06 01 00       	call   c0023778 <LinkedList<Device>::~LinkedList()>
c00130d4:	83 c4 10             	add    esp,0x10
c00130d7:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c00130dd:	83 ec 08             	sub    esp,0x8
c00130e0:	6a 01                	push   0x1
c00130e2:	68 62 60 02 c0       	push   0xc0026062
c00130e7:	e8 3e 54 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c00130ec:	83 c4 10             	add    esp,0x10
c00130ef:	83 ec 08             	sub    esp,0x8
c00130f2:	53                   	push   ebx
c00130f3:	50                   	push   eax
c00130f4:	e8 62 56 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c00130f9:	83 c4 10             	add    esp,0x10
c00130fc:	8b 1d c8 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bc8
c0013102:	83 ec 08             	sub    esp,0x8
c0013105:	6a 01                	push   0x1
c0013107:	68 7f 60 02 c0       	push   0xc002607f
c001310c:	e8 19 54 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c0013111:	83 c4 10             	add    esp,0x10
c0013114:	83 ec 08             	sub    esp,0x8
c0013117:	53                   	push   ebx
c0013118:	50                   	push   eax
c0013119:	e8 3d 56 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c001311e:	83 c4 10             	add    esp,0x10
c0013121:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0013126:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001312c:	83 e0 04             	and    eax,0x4
c001312f:	84 c0                	test   al,al
c0013131:	0f 84 15 01 00 00    	je     c001324c <ACPI::open(int, int, void*)+0x474>
c0013137:	83 ec 0c             	sub    esp,0xc
c001313a:	68 9c 60 02 c0       	push   0xc002609c
c001313f:	e8 fd 6c ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0013152:	83 ec 0c             	sub    esp,0xc
c0013155:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001315c:	e8 86 6c ff ff       	call   c0009de7 <malloc>
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	89 c3                	mov    ebx,eax
c0013166:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c001316b:	83 ec 04             	sub    esp,0x4
c001316e:	50                   	push   eax
c001316f:	68 b9 60 02 c0       	push   0xc00260b9
c0013174:	53                   	push   ebx
c0013175:	e8 b8 a4 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c001317a:	83 c4 10             	add    esp,0x10
c001317d:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0013184:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001318c:	74 1a                	je     c00131a8 <ACPI::open(int, int, void*)+0x3d0>
c001318e:	83 ec 0c             	sub    esp,0xc
c0013191:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013198:	e8 dd a7 ff ff       	call   c000d97a <File::exists()>
c001319d:	83 c4 10             	add    esp,0x10
c00131a0:	84 c0                	test   al,al
c00131a2:	74 04                	je     c00131a8 <ACPI::open(int, int, void*)+0x3d0>
c00131a4:	b0 01                	mov    al,0x1
c00131a6:	eb 04                	jmp    c00131ac <ACPI::open(int, int, void*)+0x3d4>
c00131a8:	b0 00                	mov    al,0x0
c00131aa:	66 90                	xchg   ax,ax
c00131ac:	84 c0                	test   al,al
c00131ae:	74 28                	je     c00131d8 <ACPI::open(int, int, void*)+0x400>
c00131b0:	83 ec 08             	sub    esp,0x8
c00131b3:	6a 01                	push   0x1
c00131b5:	68 b9 60 02 c0       	push   0xc00260b9
c00131ba:	e8 6b 53 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c00131bf:	83 c4 10             	add    esp,0x10
c00131c2:	83 ec 08             	sub    esp,0x8
c00131c5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00131cc:	50                   	push   eax
c00131cd:	e8 89 55 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c00131d2:	83 c4 10             	add    esp,0x10
c00131d5:	8d 76 00             	lea    esi,[esi+0x0]
c00131d8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00131e0:	74 2a                	je     c001320c <ACPI::open(int, int, void*)+0x434>
c00131e2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00131ea:	74 20                	je     c001320c <ACPI::open(int, int, void*)+0x434>
c00131ec:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00131f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00131f5:	83 c0 08             	add    eax,0x8
c00131f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00131fa:	83 ec 0c             	sub    esp,0xc
c00131fd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013204:	ff d0                	call   eax
c0013206:	83 c4 10             	add    esp,0x10
c0013209:	8d 76 00             	lea    esi,[esi+0x0]
c001320c:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0013211:	83 ec 08             	sub    esp,0x8
c0013214:	68 d6 60 02 c0       	push   0xc00260d6
c0013219:	50                   	push   eax
c001321a:	e8 e1 ee ff ff       	call   c0012100 <findDataTable(unsigned char*, char*)>
c001321f:	83 c4 10             	add    esp,0x10
c0013222:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0013229:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0013231:	74 19                	je     c001324c <ACPI::open(int, int, void*)+0x474>
c0013233:	83 ec 08             	sub    esp,0x8
c0013236:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001323d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0013244:	e8 0b fb ff ff       	call   c0012d54 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013249:	83 c4 10             	add    esp,0x10
c001324c:	b8 00 00 00 00       	mov    eax,0x0
c0013251:	81 c4 70 01 00 00    	add    esp,0x170
c0013257:	5b                   	pop    ebx
c0013258:	5e                   	pop    esi
c0013259:	5f                   	pop    edi
c001325a:	c3                   	ret    
c001325b:	90                   	nop

c001325c <CPU::close(int, int, void*)>:
c001325c:	31 c0                	xor    eax,eax
c001325e:	c3                   	ret    
c001325f:	90                   	nop

c0013260 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0013260:	55                   	push   ebp
c0013261:	57                   	push   edi
c0013262:	56                   	push   esi
c0013263:	53                   	push   ebx
c0013264:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013268:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001326c:	89 ce                	mov    esi,ecx
c001326e:	89 d5                	mov    ebp,edx
c0013270:	80 f9 04             	cmp    cl,0x4
c0013273:	75 28                	jne    c001329d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0013275:	8d 42 f9             	lea    eax,[edx-0x7]
c0013278:	3c 03                	cmp    al,0x3
c001327a:	0f 86 63 01 00 00    	jbe    c00133e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013280:	80 fa 03             	cmp    dl,0x3
c0013283:	0f 84 5a 01 00 00    	je     c00133e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013289:	8d 7a f2             	lea    edi,[edx-0xe]
c001328c:	b8 90 84 02 c0       	mov    eax,0xc0028490
c0013291:	89 fb                	mov    ebx,edi
c0013293:	80 fb 01             	cmp    bl,0x1
c0013296:	77 4e                	ja     c00132e6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0013298:	e9 52 01 00 00       	jmp    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001329d:	80 f9 05             	cmp    cl,0x5
c00132a0:	75 4d                	jne    c00132ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00132a2:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c00132a7:	80 fa 03             	cmp    dl,0x3
c00132aa:	0f 86 3f 01 00 00    	jbe    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132b0:	8d 7a fa             	lea    edi,[edx-0x6]
c00132b3:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c00132b8:	89 fb                	mov    ebx,edi
c00132ba:	80 fb 01             	cmp    bl,0x1
c00132bd:	0f 86 2c 01 00 00    	jbe    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132c3:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c00132c8:	80 fa 08             	cmp    dl,0x8
c00132cb:	0f 84 1e 01 00 00    	je     c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132d1:	89 d7                	mov    edi,edx
c00132d3:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c00132d8:	83 e7 fb             	and    edi,0xfffffffb
c00132db:	89 fb                	mov    ebx,edi
c00132dd:	80 fb 09             	cmp    bl,0x9
c00132e0:	0f 84 09 01 00 00    	je     c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132e6:	31 c0                	xor    eax,eax
c00132e8:	89 eb                	mov    ebx,ebp
c00132ea:	0f b6 fb             	movzx  edi,bl
c00132ed:	eb 30                	jmp    c001331f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00132ef:	31 c0                	xor    eax,eax
c00132f1:	80 f9 06             	cmp    cl,0x6
c00132f4:	75 f2                	jne    c00132e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00132f6:	80 fa 0a             	cmp    dl,0xa
c00132f9:	77 ed                	ja     c00132e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00132fb:	bf de 05 00 00       	mov    edi,0x5de
c0013300:	0f a3 d7             	bt     edi,edx
c0013303:	73 e3                	jae    c00132e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013305:	b8 e0 84 02 c0       	mov    eax,0xc00284e0
c001330a:	e9 e0 00 00 00       	jmp    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001330f:	39 c7                	cmp    edi,eax
c0013311:	0f 84 d3 00 00 00    	je     c00133ea <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013317:	40                   	inc    eax
c0013318:	3d d0 00 00 00       	cmp    eax,0xd0
c001331d:	74 09                	je     c0013328 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001331f:	89 f3                	mov    ebx,esi
c0013321:	80 fb 0f             	cmp    bl,0xf
c0013324:	75 f1                	jne    c0013317 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0013326:	eb e7                	jmp    c001330f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0013328:	80 f9 10             	cmp    cl,0x10
c001332b:	75 14                	jne    c0013341 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001332d:	8d 42 fc             	lea    eax,[edx-0x4]
c0013330:	83 e0 fb             	and    eax,0xfffffffb
c0013333:	3c 02                	cmp    al,0x2
c0013335:	76 34                	jbe    c001336b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0013337:	b8 11 64 02 c0       	mov    eax,0xc0026411
c001333c:	80 fa 02             	cmp    dl,0x2
c001333f:	eb 24                	jmp    c0013365 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0013341:	80 f9 11             	cmp    cl,0x11
c0013344:	75 13                	jne    c0013359 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0013346:	b8 11 64 02 c0       	mov    eax,0xc0026411
c001334b:	80 fa 03             	cmp    dl,0x3
c001334e:	0f 85 9b 00 00 00    	jne    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013354:	e9 91 00 00 00       	jmp    c00133ea <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013359:	80 f9 12             	cmp    cl,0x12
c001335c:	75 14                	jne    c0013372 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001335e:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013363:	fe ca                	dec    dl
c0013365:	0f 85 84 00 00 00    	jne    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001336b:	b8 00 85 02 c0       	mov    eax,0xc0028500
c0013370:	eb 7d                	jmp    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013372:	80 f9 14             	cmp    cl,0x14
c0013375:	75 12                	jne    c0013389 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0013377:	4a                   	dec    edx
c0013378:	b8 11 64 02 c0       	mov    eax,0xc0026411
c001337d:	80 fa 01             	cmp    dl,0x1
c0013380:	77 6d                	ja     c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013382:	b8 10 85 02 c0       	mov    eax,0xc0028510
c0013387:	eb 66                	jmp    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013389:	80 f9 15             	cmp    cl,0x15
c001338c:	75 31                	jne    c00133bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001338e:	b8 20 85 02 c0       	mov    eax,0xc0028520
c0013393:	80 fa 01             	cmp    dl,0x1
c0013396:	74 57                	je     c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013398:	b8 11 64 02 c0       	mov    eax,0xc0026411
c001339d:	80 fa 13             	cmp    dl,0x13
c00133a0:	76 0c                	jbe    c00133ae <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00133a2:	80 fa 30             	cmp    dl,0x30
c00133a5:	75 48                	jne    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133a7:	b8 40 85 02 c0       	mov    eax,0xc0028540
c00133ac:	eb 41                	jmp    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133ae:	b9 04 00 09 00       	mov    ecx,0x90004
c00133b3:	0f a3 d1             	bt     ecx,edx
c00133b6:	73 37                	jae    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133b8:	b8 30 85 02 c0       	mov    eax,0xc0028530
c00133bd:	eb 30                	jmp    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133bf:	b8 11 64 02 c0       	mov    eax,0xc0026411
c00133c4:	80 f9 16             	cmp    cl,0x16
c00133c7:	75 26                	jne    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133c9:	b8 50 85 02 c0       	mov    eax,0xc0028550
c00133ce:	84 d2                	test   dl,dl
c00133d0:	74 1d                	je     c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133d2:	b8 11 64 02 c0       	mov    eax,0xc0026411
c00133d7:	80 fa 30             	cmp    dl,0x30
c00133da:	75 13                	jne    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133dc:	b8 60 85 02 c0       	mov    eax,0xc0028560
c00133e1:	eb 0c                	jmp    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133e3:	b8 80 84 02 c0       	mov    eax,0xc0028480
c00133e8:	eb 05                	jmp    c00133ef <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00133ea:	b8 f0 84 02 c0       	mov    eax,0xc00284f0
c00133ef:	5b                   	pop    ebx
c00133f0:	5e                   	pop    esi
c00133f1:	5f                   	pop    edi
c00133f2:	5d                   	pop    ebp
c00133f3:	c3                   	ret    

c00133f4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00133f4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00133f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00133fc:	80 f9 04             	cmp    cl,0x4
c00133ff:	75 6b                	jne    c001346c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0013401:	b8 e0 82 02 c0       	mov    eax,0xc00282e0
c0013406:	80 fa 01             	cmp    dl,0x1
c0013409:	0f 86 92 02 00 00    	jbe    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001340f:	b8 f0 82 02 c0       	mov    eax,0xc00282f0
c0013414:	80 fa 02             	cmp    dl,0x2
c0013417:	0f 84 84 02 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001341d:	b8 00 83 02 c0       	mov    eax,0xc0028300
c0013422:	80 fa 03             	cmp    dl,0x3
c0013425:	0f 84 76 02 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001342b:	b8 10 83 02 c0       	mov    eax,0xc0028310
c0013430:	80 fa 04             	cmp    dl,0x4
c0013433:	0f 84 68 02 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013439:	b8 20 83 02 c0       	mov    eax,0xc0028320
c001343e:	80 fa 05             	cmp    dl,0x5
c0013441:	0f 84 5a 02 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013447:	b8 00 83 02 c0       	mov    eax,0xc0028300
c001344c:	80 fa 07             	cmp    dl,0x7
c001344f:	0f 84 4c 02 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013455:	83 ea 08             	sub    edx,0x8
c0013458:	b8 11 64 02 c0       	mov    eax,0xc0026411
c001345d:	80 fa 01             	cmp    dl,0x1
c0013460:	0f 87 3b 02 00 00    	ja     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013466:	b8 30 83 02 c0       	mov    eax,0xc0028330
c001346b:	c3                   	ret    
c001346c:	80 f9 05             	cmp    cl,0x5
c001346f:	75 45                	jne    c00134b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0013471:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013474:	b8 40 83 02 c0       	mov    eax,0xc0028340
c0013479:	80 f9 02             	cmp    cl,0x2
c001347c:	0f 86 1f 02 00 00    	jbe    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013482:	80 fa 04             	cmp    dl,0x4
c0013485:	0f 84 f3 01 00 00    	je     c001367e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001348b:	80 fa 07             	cmp    dl,0x7
c001348e:	0f 84 0d 02 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013494:	b8 50 83 02 c0       	mov    eax,0xc0028350
c0013499:	80 fa 08             	cmp    dl,0x8
c001349c:	0f 84 ff 01 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134a2:	b8 11 64 02 c0       	mov    eax,0xc0026411
c00134a7:	80 fa 09             	cmp    dl,0x9
c00134aa:	0f 85 f1 01 00 00    	jne    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b0:	b8 60 83 02 c0       	mov    eax,0xc0028360
c00134b5:	c3                   	ret    
c00134b6:	80 f9 06             	cmp    cl,0x6
c00134b9:	0f 85 85 01 00 00    	jne    c0013644 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00134bf:	b8 70 83 02 c0       	mov    eax,0xc0028370
c00134c4:	80 fa 01             	cmp    dl,0x1
c00134c7:	0f 84 d4 01 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134cd:	8d 42 fb             	lea    eax,[edx-0x5]
c00134d0:	3c 01                	cmp    al,0x1
c00134d2:	0f 86 ac 01 00 00    	jbe    c0013684 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00134d8:	80 fa 03             	cmp    dl,0x3
c00134db:	0f 84 a3 01 00 00    	je     c0013684 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00134e1:	8d 4a f9             	lea    ecx,[edx-0x7]
c00134e4:	b8 90 83 02 c0       	mov    eax,0xc0028390
c00134e9:	80 f9 01             	cmp    cl,0x1
c00134ec:	0f 86 af 01 00 00    	jbe    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134f2:	80 fa 09             	cmp    dl,0x9
c00134f5:	0f 84 8f 01 00 00    	je     c001368a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00134fb:	8d 4a f6             	lea    ecx,[edx-0xa]
c00134fe:	80 f9 01             	cmp    cl,0x1
c0013501:	0f 86 9a 01 00 00    	jbe    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013507:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c001350c:	80 fa 0d             	cmp    dl,0xd
c001350f:	0f 84 8c 01 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013515:	b8 b0 83 02 c0       	mov    eax,0xc00283b0
c001351a:	80 fa 0e             	cmp    dl,0xe
c001351d:	0f 84 7e 01 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013523:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c0013528:	80 fa 0f             	cmp    dl,0xf
c001352b:	0f 84 70 01 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013531:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c0013536:	80 fa 15             	cmp    dl,0x15
c0013539:	0f 84 62 01 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001353f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013542:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c0013547:	80 f9 01             	cmp    cl,0x1
c001354a:	0f 86 51 01 00 00    	jbe    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013550:	80 fa 1a             	cmp    dl,0x1a
c0013553:	0f 84 37 01 00 00    	je     c0013690 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013559:	80 fa 1c             	cmp    dl,0x1c
c001355c:	0f 84 34 01 00 00    	je     c0013696 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0013562:	80 fa 1d             	cmp    dl,0x1d
c0013565:	0f 84 36 01 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001356b:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c0013570:	80 fa 25             	cmp    dl,0x25
c0013573:	0f 84 28 01 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013579:	8d 4a da             	lea    ecx,[edx-0x26]
c001357c:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c0013581:	80 f9 01             	cmp    cl,0x1
c0013584:	0f 86 17 01 00 00    	jbe    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001358a:	b8 00 84 02 c0       	mov    eax,0xc0028400
c001358f:	80 fa 2a             	cmp    dl,0x2a
c0013592:	0f 84 09 01 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013598:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c001359d:	80 fa 2c             	cmp    dl,0x2c
c00135a0:	0f 84 fb 00 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135a6:	b8 00 84 02 c0       	mov    eax,0xc0028400
c00135ab:	80 fa 2d             	cmp    dl,0x2d
c00135ae:	0f 84 ed 00 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135b4:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c00135b9:	80 fa 2e             	cmp    dl,0x2e
c00135bc:	0f 84 df 00 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135c2:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c00135c7:	80 fa 2f             	cmp    dl,0x2f
c00135ca:	0f 84 d1 00 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135d0:	8d 4a cb             	lea    ecx,[edx-0x35]
c00135d3:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c00135d8:	80 f9 01             	cmp    cl,0x1
c00135db:	0f 86 c0 00 00 00    	jbe    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135e1:	b8 10 84 02 c0       	mov    eax,0xc0028410
c00135e6:	80 fa 37             	cmp    dl,0x37
c00135e9:	0f 84 b2 00 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135ef:	b8 20 84 02 c0       	mov    eax,0xc0028420
c00135f4:	80 fa 3a             	cmp    dl,0x3a
c00135f7:	0f 84 a4 00 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135fd:	b8 30 84 02 c0       	mov    eax,0xc0028430
c0013602:	80 fa 3c             	cmp    dl,0x3c
c0013605:	0f 84 96 00 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001360b:	b8 40 84 02 c0       	mov    eax,0xc0028440
c0013610:	80 fa 3d             	cmp    dl,0x3d
c0013613:	0f 84 88 00 00 00    	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013619:	b8 20 84 02 c0       	mov    eax,0xc0028420
c001361e:	80 fa 3e             	cmp    dl,0x3e
c0013621:	74 7e                	je     c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013623:	8d 42 bb             	lea    eax,[edx-0x45]
c0013626:	3c 01                	cmp    al,0x1
c0013628:	76 72                	jbe    c001369c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001362a:	80 fa 3f             	cmp    dl,0x3f
c001362d:	74 6d                	je     c001369c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001362f:	80 fa 4a             	cmp    dl,0x4a
c0013632:	74 0a                	je     c001363e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013634:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013639:	80 fa 4d             	cmp    dl,0x4d
c001363c:	75 63                	jne    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001363e:	b8 10 84 02 c0       	mov    eax,0xc0028410
c0013643:	c3                   	ret    
c0013644:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013649:	80 f9 0b             	cmp    cl,0xb
c001364c:	75 0a                	jne    c0013658 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001364e:	fe ca                	dec    dl
c0013650:	75 4f                	jne    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013652:	b8 50 84 02 c0       	mov    eax,0xc0028450
c0013657:	c3                   	ret    
c0013658:	80 f9 0f             	cmp    cl,0xf
c001365b:	75 44                	jne    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001365d:	b8 60 84 02 c0       	mov    eax,0xc0028460
c0013662:	80 fa 02             	cmp    dl,0x2
c0013665:	76 3a                	jbe    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013667:	8d 42 fd             	lea    eax,[edx-0x3]
c001366a:	3c 01                	cmp    al,0x1
c001366c:	76 0a                	jbe    c0013678 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001366e:	b8 11 64 02 c0       	mov    eax,0xc0026411
c0013673:	80 fa 06             	cmp    dl,0x6
c0013676:	75 29                	jne    c00136a1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013678:	b8 70 84 02 c0       	mov    eax,0xc0028470
c001367d:	c3                   	ret    
c001367e:	b8 50 83 02 c0       	mov    eax,0xc0028350
c0013683:	c3                   	ret    
c0013684:	b8 80 83 02 c0       	mov    eax,0xc0028380
c0013689:	c3                   	ret    
c001368a:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c001368f:	c3                   	ret    
c0013690:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c0013695:	c3                   	ret    
c0013696:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c001369b:	c3                   	ret    
c001369c:	b8 30 84 02 c0       	mov    eax,0xc0028430
c00136a1:	c3                   	ret    

c00136a2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00136a2:	60                   	pusha  
c00136a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00136a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136af:	9c                   	pushf  
c00136b0:	fa                   	cli    
c00136b1:	0f 09                	wbinvd 
c00136b3:	0f 30                	wrmsr  
c00136b5:	9d                   	popf   
c00136b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ba:	89 02                	mov    DWORD PTR [edx],eax
c00136bc:	61                   	popa   
c00136bd:	c3                   	ret    

c00136be <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00136be:	60                   	pusha  
c00136bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00136c3:	9c                   	pushf  
c00136c4:	fa                   	cli    
c00136c5:	0f 09                	wbinvd 
c00136c7:	31 c0                	xor    eax,eax
c00136c9:	31 d2                	xor    edx,edx
c00136cb:	0f 32                	rdmsr  
c00136cd:	9d                   	popf   
c00136ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136d2:	89 02                	mov    DWORD PTR [edx],eax
c00136d4:	61                   	popa   
c00136d5:	c3                   	ret    

c00136d6 <CPU::AMD_K6_writeback(int, int, int)>:
c00136d6:	56                   	push   esi
c00136d7:	53                   	push   ebx
c00136d8:	83 ec 10             	sub    esp,0x10
c00136db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136df:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00136e4:	75 5d                	jne    c0013743 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00136e6:	83 f8 08             	cmp    eax,0x8
c00136e9:	75 09                	jne    c00136f4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00136eb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00136f0:	7e 13                	jle    c0013705 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00136f2:	eb 30                	jmp    c0013724 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00136f4:	83 f8 06             	cmp    eax,0x6
c00136f7:	7c 4a                	jl     c0013743 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00136f9:	83 f8 07             	cmp    eax,0x7
c00136fc:	7e 07                	jle    c0013705 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00136fe:	83 f8 09             	cmp    eax,0x9
c0013701:	74 21                	je     c0013724 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013703:	eb 3e                	jmp    c0013743 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013705:	89 e6                	mov    esi,esp
c0013707:	8b 1d ec 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bec
c001370d:	56                   	push   esi
c001370e:	c1 eb 15             	shr    ebx,0x15
c0013711:	68 82 00 00 c0       	push   0xc0000082
c0013716:	83 e3 7e             	and    ebx,0x7e
c0013719:	e8 a0 ff ff ff       	call   c00136be <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001371e:	56                   	push   esi
c001371f:	6a 00                	push   0x0
c0013721:	53                   	push   ebx
c0013722:	eb 12                	jmp    c0013736 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013724:	89 e3                	mov    ebx,esp
c0013726:	53                   	push   ebx
c0013727:	68 82 00 00 c0       	push   0xc0000082
c001372c:	e8 8d ff ff ff       	call   c00136be <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013731:	53                   	push   ebx
c0013732:	6a 00                	push   0x0
c0013734:	6a 00                	push   0x0
c0013736:	68 82 00 00 c0       	push   0xc0000082
c001373b:	e8 62 ff ff ff       	call   c00136a2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013740:	83 c4 18             	add    esp,0x18
c0013743:	83 c4 10             	add    esp,0x10
c0013746:	5b                   	pop    ebx
c0013747:	5e                   	pop    esi
c0013748:	c3                   	ret    
c0013749:	90                   	nop

c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001374a:	55                   	push   ebp
c001374b:	57                   	push   edi
c001374c:	56                   	push   esi
c001374d:	53                   	push   ebx
c001374e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013752:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013756:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001375a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001375e:	39 05 80 85 02 c0    	cmp    DWORD PTR ds:0xc0028580,eax
c0013764:	75 23                	jne    c0013789 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013766:	a1 8c 96 02 c0       	mov    eax,ds:0xc002968c
c001376b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001376f:	89 06                	mov    DWORD PTR [esi],eax
c0013771:	a1 88 96 02 c0       	mov    eax,ds:0xc0029688
c0013776:	89 07                	mov    DWORD PTR [edi],eax
c0013778:	a1 84 96 02 c0       	mov    eax,ds:0xc0029684
c001377d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013780:	a1 80 96 02 c0       	mov    eax,ds:0xc0029680
c0013785:	89 02                	mov    DWORD PTR [edx],eax
c0013787:	eb 3f                	jmp    c00137c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013789:	31 c9                	xor    ecx,ecx
c001378b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001378f:	0f a2                	cpuid  
c0013791:	89 06                	mov    DWORD PTR [esi],eax
c0013793:	89 1f                	mov    DWORD PTR [edi],ebx
c0013795:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013799:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001379c:	89 10                	mov    DWORD PTR [eax],edx
c001379e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137a2:	a3 80 85 02 c0       	mov    ds:0xc0028580,eax
c00137a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00137a9:	a3 8c 96 02 c0       	mov    ds:0xc002968c,eax
c00137ae:	8b 07                	mov    eax,DWORD PTR [edi]
c00137b0:	a3 88 96 02 c0       	mov    ds:0xc0029688,eax
c00137b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00137b8:	a3 84 96 02 c0       	mov    ds:0xc0029684,eax
c00137bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00137c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00137c3:	a3 80 96 02 c0       	mov    ds:0xc0029680,eax
c00137c8:	5b                   	pop    ebx
c00137c9:	5e                   	pop    esi
c00137ca:	5f                   	pop    edi
c00137cb:	5d                   	pop    ebp
c00137cc:	c3                   	ret    
c00137cd:	90                   	nop

c00137ce <CPU::cpuidCheckEDX(unsigned int)>:
c00137ce:	83 ec 10             	sub    esp,0x10
c00137d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137d5:	50                   	push   eax
c00137d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137da:	50                   	push   eax
c00137db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137df:	50                   	push   eax
c00137e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137e4:	50                   	push   eax
c00137e5:	6a 01                	push   0x1
c00137e7:	e8 5e ff ff ff       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137f0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00137f4:	0f 95 c0             	setne  al
c00137f7:	83 c4 24             	add    esp,0x24
c00137fa:	c3                   	ret    
c00137fb:	90                   	nop

c00137fc <CPU::cpuidCheckECX(unsigned int)>:
c00137fc:	83 ec 10             	sub    esp,0x10
c00137ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013803:	50                   	push   eax
c0013804:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013808:	50                   	push   eax
c0013809:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001380d:	50                   	push   eax
c001380e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013812:	50                   	push   eax
c0013813:	6a 01                	push   0x1
c0013815:	e8 30 ff ff ff       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001381a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001381e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013822:	0f 95 c0             	setne  al
c0013825:	83 c4 24             	add    esp,0x24
c0013828:	c3                   	ret    
c0013829:	90                   	nop

c001382a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001382a:	83 ec 10             	sub    esp,0x10
c001382d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013831:	50                   	push   eax
c0013832:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013836:	50                   	push   eax
c0013837:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001383b:	50                   	push   eax
c001383c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013840:	50                   	push   eax
c0013841:	6a 07                	push   0x7
c0013843:	e8 02 ff ff ff       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013848:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001384c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013850:	0f 95 c0             	setne  al
c0013853:	83 c4 24             	add    esp,0x24
c0013856:	c3                   	ret    
c0013857:	90                   	nop

c0013858 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013858:	83 ec 10             	sub    esp,0x10
c001385b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001385f:	50                   	push   eax
c0013860:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013864:	50                   	push   eax
c0013865:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013869:	50                   	push   eax
c001386a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001386e:	50                   	push   eax
c001386f:	6a 07                	push   0x7
c0013871:	e8 d4 fe ff ff       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013876:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001387a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001387e:	0f 95 c0             	setne  al
c0013881:	83 c4 24             	add    esp,0x24
c0013884:	c3                   	ret    
c0013885:	90                   	nop

c0013886 <CPU::CPU()>:
c0013886:	83 ec 0c             	sub    esp,0xc
c0013889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388d:	83 ec 08             	sub    esp,0x8
c0013890:	68 11 64 02 c0       	push   0xc0026411
c0013895:	50                   	push   eax
c0013896:	e8 a3 af ff ff       	call   c000e83e <Device::Device(char const*)>
c001389b:	83 c4 10             	add    esp,0x10
c001389e:	ba 74 66 02 c0       	mov    edx,0xc0026674
c00138a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a7:	89 10                	mov    DWORD PTR [eax],edx
c00138a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ad:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00138b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138bb:	05 78 01 00 00       	add    eax,0x178
c00138c0:	83 ec 0c             	sub    esp,0xc
c00138c3:	50                   	push   eax
c00138c4:	e8 3f 5d ff ff       	call   c0009608 <GDT::GDT()>
c00138c9:	83 c4 10             	add    esp,0x10
c00138cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d0:	05 7c 09 00 00       	add    eax,0x97c
c00138d5:	83 ec 0c             	sub    esp,0xc
c00138d8:	50                   	push   eax
c00138d9:	e8 f6 5f ff ff       	call   c00098d4 <IDT::IDT()>
c00138de:	83 c4 10             	add    esp,0x10
c00138e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e5:	05 7c 11 00 00       	add    eax,0x117c
c00138ea:	83 ec 0c             	sub    esp,0xc
c00138ed:	50                   	push   eax
c00138ee:	e8 f1 7d ff ff       	call   c000b6e4 <TSS::TSS()>
c00138f3:	83 c4 10             	add    esp,0x10
c00138f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fa:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013905:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001390f:	90                   	nop
c0013910:	83 c4 0c             	add    esp,0xc
c0013913:	c3                   	ret    

c0013914 <CPU::displayFeatures()>:
c0013914:	53                   	push   ebx
c0013915:	83 ec 10             	sub    esp,0x10
c0013918:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001391c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0013922:	68 08 61 02 c0       	push   0xc0026108
c0013927:	e8 9b 97 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001392c:	58                   	pop    eax
c001392d:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0013933:	5a                   	pop    edx
c0013934:	50                   	push   eax
c0013935:	68 19 61 02 c0       	push   0xc0026119
c001393a:	e8 88 97 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001393f:	59                   	pop    ecx
c0013940:	58                   	pop    eax
c0013941:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013947:	c1 e8 0e             	shr    eax,0xe
c001394a:	0f b6 c0             	movzx  eax,al
c001394d:	50                   	push   eax
c001394e:	68 2a 61 02 c0       	push   0xc002612a
c0013953:	e8 6f 97 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013958:	58                   	pop    eax
c0013959:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001395f:	5a                   	pop    edx
c0013960:	66 c1 e8 06          	shr    ax,0x6
c0013964:	0f b6 c0             	movzx  eax,al
c0013967:	50                   	push   eax
c0013968:	68 3b 61 02 c0       	push   0xc002613b
c001396d:	e8 55 97 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013972:	c7 04 24 3b 67 02 c0 	mov    DWORD PTR [esp],0xc002673b
c0013979:	e8 49 97 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001397e:	83 c4 10             	add    esp,0x10
c0013981:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013986:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001398d:	74 05                	je     c0013994 <CPU::displayFeatures()+0x80>
c001398f:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013994:	51                   	push   ecx
c0013995:	51                   	push   ecx
c0013996:	50                   	push   eax
c0013997:	68 4c 61 02 c0       	push   0xc002614c
c001399c:	e8 26 97 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00139a9:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00139b0:	78 05                	js     c00139b7 <CPU::displayFeatures()+0xa3>
c00139b2:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00139b7:	52                   	push   edx
c00139b8:	52                   	push   edx
c00139b9:	50                   	push   eax
c00139ba:	68 63 61 02 c0       	push   0xc0026163
c00139bf:	e8 03 97 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00139c4:	83 c4 10             	add    esp,0x10
c00139c7:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00139cc:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00139d3:	75 05                	jne    c00139da <CPU::displayFeatures()+0xc6>
c00139d5:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00139da:	51                   	push   ecx
c00139db:	51                   	push   ecx
c00139dc:	50                   	push   eax
c00139dd:	68 7a 61 02 c0       	push   0xc002617a
c00139e2:	e8 e0 96 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00139e7:	83 c4 10             	add    esp,0x10
c00139ea:	b8 01 46 02 c0       	mov    eax,0xc0024601
c00139ef:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00139f6:	75 05                	jne    c00139fd <CPU::displayFeatures()+0xe9>
c00139f8:	b8 05 46 02 c0       	mov    eax,0xc0024605
c00139fd:	52                   	push   edx
c00139fe:	52                   	push   edx
c00139ff:	50                   	push   eax
c0013a00:	68 91 61 02 c0       	push   0xc0026191
c0013a05:	e8 bd 96 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013a0a:	83 c4 10             	add    esp,0x10
c0013a0d:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013a12:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013a19:	75 05                	jne    c0013a20 <CPU::displayFeatures()+0x10c>
c0013a1b:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013a20:	51                   	push   ecx
c0013a21:	51                   	push   ecx
c0013a22:	50                   	push   eax
c0013a23:	68 a8 61 02 c0       	push   0xc00261a8
c0013a28:	e8 9a 96 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013a35:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013a3c:	75 05                	jne    c0013a43 <CPU::displayFeatures()+0x12f>
c0013a3e:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013a43:	52                   	push   edx
c0013a44:	52                   	push   edx
c0013a45:	50                   	push   eax
c0013a46:	68 bf 61 02 c0       	push   0xc00261bf
c0013a4b:	e8 77 96 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013a50:	83 c4 10             	add    esp,0x10
c0013a53:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013a58:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013a5f:	75 05                	jne    c0013a66 <CPU::displayFeatures()+0x152>
c0013a61:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013a66:	51                   	push   ecx
c0013a67:	51                   	push   ecx
c0013a68:	50                   	push   eax
c0013a69:	68 d6 61 02 c0       	push   0xc00261d6
c0013a6e:	e8 54 96 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013a73:	83 c4 10             	add    esp,0x10
c0013a76:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013a7b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0013a82:	75 05                	jne    c0013a89 <CPU::displayFeatures()+0x175>
c0013a84:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013a89:	52                   	push   edx
c0013a8a:	52                   	push   edx
c0013a8b:	50                   	push   eax
c0013a8c:	68 ed 61 02 c0       	push   0xc00261ed
c0013a91:	e8 31 96 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013a96:	83 c4 10             	add    esp,0x10
c0013a99:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013a9e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0013aa5:	75 05                	jne    c0013aac <CPU::displayFeatures()+0x198>
c0013aa7:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013aac:	51                   	push   ecx
c0013aad:	51                   	push   ecx
c0013aae:	50                   	push   eax
c0013aaf:	68 04 62 02 c0       	push   0xc0026204
c0013ab4:	e8 0e 96 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013ab9:	83 c4 10             	add    esp,0x10
c0013abc:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013ac1:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013ac8:	75 05                	jne    c0013acf <CPU::displayFeatures()+0x1bb>
c0013aca:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013acf:	52                   	push   edx
c0013ad0:	52                   	push   edx
c0013ad1:	50                   	push   eax
c0013ad2:	68 1b 62 02 c0       	push   0xc002621b
c0013ad7:	e8 eb 95 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013adc:	83 c4 10             	add    esp,0x10
c0013adf:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013ae4:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013aeb:	75 05                	jne    c0013af2 <CPU::displayFeatures()+0x1de>
c0013aed:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013af2:	51                   	push   ecx
c0013af3:	51                   	push   ecx
c0013af4:	50                   	push   eax
c0013af5:	68 32 62 02 c0       	push   0xc0026232
c0013afa:	e8 c8 95 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013aff:	83 c4 10             	add    esp,0x10
c0013b02:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b07:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013b0e:	75 05                	jne    c0013b15 <CPU::displayFeatures()+0x201>
c0013b10:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013b15:	52                   	push   edx
c0013b16:	52                   	push   edx
c0013b17:	50                   	push   eax
c0013b18:	68 49 62 02 c0       	push   0xc0026249
c0013b1d:	e8 a5 95 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013b22:	83 c4 10             	add    esp,0x10
c0013b25:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b2a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0013b31:	75 05                	jne    c0013b38 <CPU::displayFeatures()+0x224>
c0013b33:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013b38:	51                   	push   ecx
c0013b39:	51                   	push   ecx
c0013b3a:	50                   	push   eax
c0013b3b:	68 60 62 02 c0       	push   0xc0026260
c0013b40:	e8 82 95 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013b45:	83 c4 10             	add    esp,0x10
c0013b48:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b4d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013b54:	78 05                	js     c0013b5b <CPU::displayFeatures()+0x247>
c0013b56:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013b5b:	52                   	push   edx
c0013b5c:	52                   	push   edx
c0013b5d:	50                   	push   eax
c0013b5e:	68 77 62 02 c0       	push   0xc0026277
c0013b63:	e8 5f 95 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013b68:	83 c4 10             	add    esp,0x10
c0013b6b:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b70:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0013b77:	75 05                	jne    c0013b7e <CPU::displayFeatures()+0x26a>
c0013b79:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013b7e:	51                   	push   ecx
c0013b7f:	51                   	push   ecx
c0013b80:	50                   	push   eax
c0013b81:	68 8e 62 02 c0       	push   0xc002628e
c0013b86:	e8 3c 95 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013b8b:	83 c4 10             	add    esp,0x10
c0013b8e:	b8 01 46 02 c0       	mov    eax,0xc0024601
c0013b93:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013b9a:	75 05                	jne    c0013ba1 <CPU::displayFeatures()+0x28d>
c0013b9c:	b8 05 46 02 c0       	mov    eax,0xc0024605
c0013ba1:	52                   	push   edx
c0013ba2:	52                   	push   edx
c0013ba3:	50                   	push   eax
c0013ba4:	68 a5 62 02 c0       	push   0xc00262a5
c0013ba9:	e8 19 95 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0013bae:	83 c4 18             	add    esp,0x18
c0013bb1:	5b                   	pop    ebx
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop

c0013bb4 <CPU::detectFeatures()>:
c0013bb4:	55                   	push   ebp
c0013bb5:	57                   	push   edi
c0013bb6:	56                   	push   esi
c0013bb7:	53                   	push   ebx
c0013bb8:	83 ec 50             	sub    esp,0x50
c0013bbb:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013bbf:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013bc9:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013bd0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013bd6:	6a 0d                	push   0xd
c0013bd8:	6a 00                	push   0x0
c0013bda:	55                   	push   ebp
c0013bdb:	e8 b4 ca fe ff       	call   c0000694 <memset>
c0013be0:	83 c4 10             	add    esp,0x10
c0013be3:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0013be8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013bef:	0f 84 22 09 00 00    	je     c0014517 <CPU::detectFeatures()+0x963>
c0013bf5:	83 ec 0c             	sub    esp,0xc
c0013bf8:	89 ef                	mov    edi,ebp
c0013bfa:	6a 10                	push   0x10
c0013bfc:	e8 cd fb ff ff       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0013c01:	83 e0 01             	and    eax,0x1
c0013c04:	8d 14 00             	lea    edx,[eax+eax*1]
c0013c07:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c0d:	83 e0 fd             	and    eax,0xfffffffd
c0013c10:	09 d0                	or     eax,edx
c0013c12:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c18:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013c1f:	e8 aa fb ff ff       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0013c24:	83 e0 01             	and    eax,0x1
c0013c27:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013c2e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c34:	83 e0 fb             	and    eax,0xfffffffb
c0013c37:	09 d0                	or     eax,edx
c0013c39:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c3f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013c46:	e8 83 fb ff ff       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0013c4b:	83 e0 01             	and    eax,0x1
c0013c4e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013c55:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c5b:	83 e0 f7             	and    eax,0xfffffff7
c0013c5e:	09 d0                	or     eax,edx
c0013c60:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c66:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013c6d:	e8 5c fb ff ff       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0013c72:	83 e0 01             	and    eax,0x1
c0013c75:	c1 e0 04             	shl    eax,0x4
c0013c78:	88 c2                	mov    dl,al
c0013c7a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c80:	83 e0 ef             	and    eax,0xffffffef
c0013c83:	09 d0                	or     eax,edx
c0013c85:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c8b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013c92:	e8 37 fb ff ff       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0013c97:	83 e0 01             	and    eax,0x1
c0013c9a:	c1 e0 05             	shl    eax,0x5
c0013c9d:	88 c2                	mov    dl,al
c0013c9f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ca5:	83 e0 df             	and    eax,0xffffffdf
c0013ca8:	09 d0                	or     eax,edx
c0013caa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013cb0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013cb7:	e8 12 fb ff ff       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0013cbc:	83 e0 01             	and    eax,0x1
c0013cbf:	8d 14 00             	lea    edx,[eax+eax*1]
c0013cc2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013cc8:	83 e0 fd             	and    eax,0xfffffffd
c0013ccb:	09 d0                	or     eax,edx
c0013ccd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013cd3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013cda:	e8 ef fa ff ff       	call   c00137ce <CPU::cpuidCheckEDX(unsigned int)>
c0013cdf:	83 e0 01             	and    eax,0x1
c0013ce2:	c1 e0 06             	shl    eax,0x6
c0013ce5:	88 c2                	mov    dl,al
c0013ce7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013ced:	83 e0 bf             	and    eax,0xffffffbf
c0013cf0:	09 d0                	or     eax,edx
c0013cf2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013cf8:	58                   	pop    eax
c0013cf9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013cfd:	50                   	push   eax
c0013cfe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d02:	50                   	push   eax
c0013d03:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013d07:	56                   	push   esi
c0013d08:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d0c:	50                   	push   eax
c0013d0d:	6a 00                	push   0x0
c0013d0f:	e8 36 fa ff ff       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013d14:	b8 04 00 00 00       	mov    eax,0x4
c0013d19:	89 c1                	mov    ecx,eax
c0013d1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d1d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013d23:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013d27:	89 c1                	mov    ecx,eax
c0013d29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d2b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013d31:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013d35:	89 c1                	mov    ecx,eax
c0013d37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d39:	83 c4 18             	add    esp,0x18
c0013d3c:	68 bc 62 02 c0       	push   0xc00262bc
c0013d41:	55                   	push   ebp
c0013d42:	e8 95 ca fe ff       	call   c00007dc <strcmp>
c0013d47:	83 c4 10             	add    esp,0x10
c0013d4a:	85 c0                	test   eax,eax
c0013d4c:	75 0f                	jne    c0013d5d <CPU::detectFeatures()+0x1a9>
c0013d4e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013d58:	e9 22 02 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013d5d:	50                   	push   eax
c0013d5e:	50                   	push   eax
c0013d5f:	68 c9 62 02 c0       	push   0xc00262c9
c0013d64:	55                   	push   ebp
c0013d65:	e8 72 ca fe ff       	call   c00007dc <strcmp>
c0013d6a:	83 c4 10             	add    esp,0x10
c0013d6d:	85 c0                	test   eax,eax
c0013d6f:	74 dd                	je     c0013d4e <CPU::detectFeatures()+0x19a>
c0013d71:	50                   	push   eax
c0013d72:	50                   	push   eax
c0013d73:	68 d6 62 02 c0       	push   0xc00262d6
c0013d78:	55                   	push   ebp
c0013d79:	e8 5e ca fe ff       	call   c00007dc <strcmp>
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	85 c0                	test   eax,eax
c0013d83:	74 2a                	je     c0013daf <CPU::detectFeatures()+0x1fb>
c0013d85:	50                   	push   eax
c0013d86:	50                   	push   eax
c0013d87:	68 e3 62 02 c0       	push   0xc00262e3
c0013d8c:	55                   	push   ebp
c0013d8d:	e8 4a ca fe ff       	call   c00007dc <strcmp>
c0013d92:	83 c4 10             	add    esp,0x10
c0013d95:	85 c0                	test   eax,eax
c0013d97:	74 16                	je     c0013daf <CPU::detectFeatures()+0x1fb>
c0013d99:	50                   	push   eax
c0013d9a:	50                   	push   eax
c0013d9b:	68 f0 62 02 c0       	push   0xc00262f0
c0013da0:	55                   	push   ebp
c0013da1:	e8 36 ca fe ff       	call   c00007dc <strcmp>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	85 c0                	test   eax,eax
c0013dab:	74 48                	je     c0013df5 <CPU::detectFeatures()+0x241>
c0013dad:	eb 0f                	jmp    c0013dbe <CPU::detectFeatures()+0x20a>
c0013daf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013db9:	e9 c1 01 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013dbe:	50                   	push   eax
c0013dbf:	50                   	push   eax
c0013dc0:	68 fd 62 02 c0       	push   0xc00262fd
c0013dc5:	55                   	push   ebp
c0013dc6:	e8 11 ca fe ff       	call   c00007dc <strcmp>
c0013dcb:	83 c4 10             	add    esp,0x10
c0013dce:	85 c0                	test   eax,eax
c0013dd0:	74 23                	je     c0013df5 <CPU::detectFeatures()+0x241>
c0013dd2:	57                   	push   edi
c0013dd3:	57                   	push   edi
c0013dd4:	68 0a 63 02 c0       	push   0xc002630a
c0013dd9:	55                   	push   ebp
c0013dda:	e8 fd c9 fe ff       	call   c00007dc <strcmp>
c0013ddf:	83 c4 10             	add    esp,0x10
c0013de2:	85 c0                	test   eax,eax
c0013de4:	75 1e                	jne    c0013e04 <CPU::detectFeatures()+0x250>
c0013de6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013df0:	e9 8a 01 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013df5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013dff:	e9 7b 01 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013e04:	56                   	push   esi
c0013e05:	56                   	push   esi
c0013e06:	68 17 63 02 c0       	push   0xc0026317
c0013e0b:	55                   	push   ebp
c0013e0c:	e8 cb c9 fe ff       	call   c00007dc <strcmp>
c0013e11:	83 c4 10             	add    esp,0x10
c0013e14:	85 c0                	test   eax,eax
c0013e16:	75 0f                	jne    c0013e27 <CPU::detectFeatures()+0x273>
c0013e18:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013e22:	e9 58 01 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013e27:	51                   	push   ecx
c0013e28:	51                   	push   ecx
c0013e29:	68 d6 62 02 c0       	push   0xc00262d6
c0013e2e:	55                   	push   ebp
c0013e2f:	e8 a8 c9 fe ff       	call   c00007dc <strcmp>
c0013e34:	83 c4 10             	add    esp,0x10
c0013e37:	85 c0                	test   eax,eax
c0013e39:	75 0f                	jne    c0013e4a <CPU::detectFeatures()+0x296>
c0013e3b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013e45:	e9 35 01 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013e4a:	52                   	push   edx
c0013e4b:	52                   	push   edx
c0013e4c:	68 24 63 02 c0       	push   0xc0026324
c0013e51:	55                   	push   ebp
c0013e52:	e8 85 c9 fe ff       	call   c00007dc <strcmp>
c0013e57:	83 c4 10             	add    esp,0x10
c0013e5a:	85 c0                	test   eax,eax
c0013e5c:	75 0f                	jne    c0013e6d <CPU::detectFeatures()+0x2b9>
c0013e5e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013e68:	e9 12 01 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013e6d:	50                   	push   eax
c0013e6e:	50                   	push   eax
c0013e6f:	68 31 63 02 c0       	push   0xc0026331
c0013e74:	55                   	push   ebp
c0013e75:	e8 62 c9 fe ff       	call   c00007dc <strcmp>
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	85 c0                	test   eax,eax
c0013e7f:	75 0f                	jne    c0013e90 <CPU::detectFeatures()+0x2dc>
c0013e81:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013e8b:	e9 ef 00 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013e90:	50                   	push   eax
c0013e91:	50                   	push   eax
c0013e92:	68 3e 63 02 c0       	push   0xc002633e
c0013e97:	55                   	push   ebp
c0013e98:	e8 3f c9 fe ff       	call   c00007dc <strcmp>
c0013e9d:	83 c4 10             	add    esp,0x10
c0013ea0:	85 c0                	test   eax,eax
c0013ea2:	75 0f                	jne    c0013eb3 <CPU::detectFeatures()+0x2ff>
c0013ea4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013eae:	e9 cc 00 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013eb3:	50                   	push   eax
c0013eb4:	50                   	push   eax
c0013eb5:	68 4b 63 02 c0       	push   0xc002634b
c0013eba:	55                   	push   ebp
c0013ebb:	e8 1c c9 fe ff       	call   c00007dc <strcmp>
c0013ec0:	83 c4 10             	add    esp,0x10
c0013ec3:	85 c0                	test   eax,eax
c0013ec5:	75 0f                	jne    c0013ed6 <CPU::detectFeatures()+0x322>
c0013ec7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013ed1:	e9 a9 00 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013ed6:	50                   	push   eax
c0013ed7:	50                   	push   eax
c0013ed8:	68 58 63 02 c0       	push   0xc0026358
c0013edd:	55                   	push   ebp
c0013ede:	e8 f9 c8 fe ff       	call   c00007dc <strcmp>
c0013ee3:	83 c4 10             	add    esp,0x10
c0013ee6:	85 c0                	test   eax,eax
c0013ee8:	75 0f                	jne    c0013ef9 <CPU::detectFeatures()+0x345>
c0013eea:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013ef4:	e9 86 00 00 00       	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013ef9:	50                   	push   eax
c0013efa:	50                   	push   eax
c0013efb:	68 65 63 02 c0       	push   0xc0026365
c0013f00:	55                   	push   ebp
c0013f01:	e8 d6 c8 fe ff       	call   c00007dc <strcmp>
c0013f06:	83 c4 10             	add    esp,0x10
c0013f09:	85 c0                	test   eax,eax
c0013f0b:	75 0c                	jne    c0013f19 <CPU::detectFeatures()+0x365>
c0013f0d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013f17:	eb 66                	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013f19:	50                   	push   eax
c0013f1a:	50                   	push   eax
c0013f1b:	68 72 63 02 c0       	push   0xc0026372
c0013f20:	55                   	push   ebp
c0013f21:	e8 b6 c8 fe ff       	call   c00007dc <strcmp>
c0013f26:	83 c4 10             	add    esp,0x10
c0013f29:	85 c0                	test   eax,eax
c0013f2b:	75 0c                	jne    c0013f39 <CPU::detectFeatures()+0x385>
c0013f2d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013f37:	eb 46                	jmp    c0013f7f <CPU::detectFeatures()+0x3cb>
c0013f39:	57                   	push   edi
c0013f3a:	57                   	push   edi
c0013f3b:	68 7f 63 02 c0       	push   0xc002637f
c0013f40:	55                   	push   ebp
c0013f41:	e8 96 c8 fe ff       	call   c00007dc <strcmp>
c0013f46:	83 c4 10             	add    esp,0x10
c0013f49:	85 c0                	test   eax,eax
c0013f4b:	74 e0                	je     c0013f2d <CPU::detectFeatures()+0x379>
c0013f4d:	56                   	push   esi
c0013f4e:	56                   	push   esi
c0013f4f:	68 8c 63 02 c0       	push   0xc002638c
c0013f54:	55                   	push   ebp
c0013f55:	e8 82 c8 fe ff       	call   c00007dc <strcmp>
c0013f5a:	83 c4 10             	add    esp,0x10
c0013f5d:	85 c0                	test   eax,eax
c0013f5f:	74 cc                	je     c0013f2d <CPU::detectFeatures()+0x379>
c0013f61:	51                   	push   ecx
c0013f62:	51                   	push   ecx
c0013f63:	68 99 63 02 c0       	push   0xc0026399
c0013f68:	55                   	push   ebp
c0013f69:	e8 6e c8 fe ff       	call   c00007dc <strcmp>
c0013f6e:	83 c4 10             	add    esp,0x10
c0013f71:	85 c0                	test   eax,eax
c0013f73:	74 b8                	je     c0013f2d <CPU::detectFeatures()+0x379>
c0013f75:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013f7f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013f84:	0f 86 be 00 00 00    	jbe    c0014048 <CPU::detectFeatures()+0x494>
c0013f8a:	83 ec 0c             	sub    esp,0xc
c0013f8d:	68 80 00 00 00       	push   0x80
c0013f92:	e8 93 f8 ff ff       	call   c001382a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013f97:	83 e0 01             	and    eax,0x1
c0013f9a:	c1 e0 06             	shl    eax,0x6
c0013f9d:	88 c2                	mov    dl,al
c0013f9f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013fa5:	83 e0 bf             	and    eax,0xffffffbf
c0013fa8:	09 d0                	or     eax,edx
c0013faa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013fb0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013fb7:	e8 6e f8 ff ff       	call   c001382a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013fbc:	83 e0 01             	and    eax,0x1
c0013fbf:	c1 e0 04             	shl    eax,0x4
c0013fc2:	88 c2                	mov    dl,al
c0013fc4:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013fca:	83 e0 ef             	and    eax,0xffffffef
c0013fcd:	09 d0                	or     eax,edx
c0013fcf:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013fd5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013fdc:	e8 49 f8 ff ff       	call   c001382a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013fe1:	c1 e0 07             	shl    eax,0x7
c0013fe4:	88 c2                	mov    dl,al
c0013fe6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013fec:	83 e0 7f             	and    eax,0x7f
c0013fef:	09 d0                	or     eax,edx
c0013ff1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ff7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013ffe:	e8 55 f8 ff ff       	call   c0013858 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0014003:	83 e0 01             	and    eax,0x1
c0014006:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001400d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014013:	83 e0 f7             	and    eax,0xfffffff7
c0014016:	09 d0                	or     eax,edx
c0014018:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001401e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014025:	e8 2e f8 ff ff       	call   c0013858 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001402a:	83 c4 10             	add    esp,0x10
c001402d:	83 e0 01             	and    eax,0x1
c0014030:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014037:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001403d:	83 e0 fb             	and    eax,0xfffffffb
c0014040:	09 d0                	or     eax,edx
c0014042:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001404f:	50                   	push   eax
c0014050:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014054:	50                   	push   eax
c0014055:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014059:	56                   	push   esi
c001405a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001405e:	50                   	push   eax
c001405f:	6a 01                	push   0x1
c0014061:	e8 e4 f6 ff ff       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014066:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001406a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014070:	88 ca                	mov    dl,cl
c0014072:	83 e0 f0             	and    eax,0xfffffff0
c0014075:	83 e2 0f             	and    edx,0xf
c0014078:	09 d0                	or     eax,edx
c001407a:	88 ca                	mov    dl,cl
c001407c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014082:	c0 ea 04             	shr    dl,0x4
c0014085:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014089:	0f b6 c2             	movzx  eax,dl
c001408c:	83 c4 20             	add    esp,0x20
c001408f:	c1 e0 06             	shl    eax,0x6
c0014092:	89 c7                	mov    edi,eax
c0014094:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001409a:	66 25 3f c0          	and    ax,0xc03f
c001409e:	09 f8                	or     eax,edi
c00140a0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00140a7:	89 c8                	mov    eax,ecx
c00140a9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00140b0:	c1 e8 08             	shr    eax,0x8
c00140b3:	83 e5 3f             	and    ebp,0x3f
c00140b6:	83 e0 0f             	and    eax,0xf
c00140b9:	89 c7                	mov    edi,eax
c00140bb:	c1 e7 06             	shl    edi,0x6
c00140be:	09 ef                	or     edi,ebp
c00140c0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00140c7:	89 fa                	mov    edx,edi
c00140c9:	83 e5 c0             	and    ebp,0xffffffc0
c00140cc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00140d2:	88 c2                	mov    dl,al
c00140d4:	c0 ea 02             	shr    dl,0x2
c00140d7:	89 d7                	mov    edi,edx
c00140d9:	09 ef                	or     edi,ebp
c00140db:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00140e1:	89 fa                	mov    edx,edi
c00140e3:	83 e5 cf             	and    ebp,0xffffffcf
c00140e6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00140ec:	89 cf                	mov    edi,ecx
c00140ee:	c1 ef 0c             	shr    edi,0xc
c00140f1:	83 e7 03             	and    edi,0x3
c00140f4:	c1 e7 04             	shl    edi,0x4
c00140f7:	09 ef                	or     edi,ebp
c00140f9:	3c 06                	cmp    al,0x6
c00140fb:	89 fa                	mov    edx,edi
c00140fd:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014103:	74 04                	je     c0014109 <CPU::detectFeatures()+0x555>
c0014105:	3c 0f                	cmp    al,0xf
c0014107:	75 5c                	jne    c0014165 <CPU::detectFeatures()+0x5b1>
c0014109:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001410d:	89 cf                	mov    edi,ecx
c001410f:	c1 ef 10             	shr    edi,0x10
c0014112:	c1 e7 04             	shl    edi,0x4
c0014115:	09 fa                	or     edx,edi
c0014117:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001411d:	0f b6 d2             	movzx  edx,dl
c0014120:	66 81 e7 3f c0       	and    di,0xc03f
c0014125:	c1 e2 06             	shl    edx,0x6
c0014128:	09 fa                	or     edx,edi
c001412a:	3c 0f                	cmp    al,0xf
c001412c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014133:	75 30                	jne    c0014165 <CPU::detectFeatures()+0x5b1>
c0014135:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001413b:	c1 e9 14             	shr    ecx,0x14
c001413e:	83 e0 3f             	and    eax,0x3f
c0014141:	83 c1 0f             	add    ecx,0xf
c0014144:	88 ca                	mov    dl,cl
c0014146:	c0 e9 02             	shr    cl,0x2
c0014149:	c1 e2 06             	shl    edx,0x6
c001414c:	09 d0                	or     eax,edx
c001414e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014154:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001415a:	83 e0 c0             	and    eax,0xffffffc0
c001415d:	09 c1                	or     ecx,eax
c001415f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014165:	83 ec 0c             	sub    esp,0xc
c0014168:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001416f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014173:	50                   	push   eax
c0014174:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014178:	55                   	push   ebp
c0014179:	56                   	push   esi
c001417a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001417e:	57                   	push   edi
c001417f:	68 00 00 00 80       	push   0x80000000
c0014184:	e8 c1 f5 ff ff       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014189:	83 c4 20             	add    esp,0x20
c001418c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0014194:	76 22                	jbe    c00141b8 <CPU::detectFeatures()+0x604>
c0014196:	83 ec 0c             	sub    esp,0xc
c0014199:	8d 44 24 28          	lea    eax,[esp+0x28]
c001419d:	50                   	push   eax
c001419e:	55                   	push   ebp
c001419f:	56                   	push   esi
c00141a0:	57                   	push   edi
c00141a1:	68 01 00 00 80       	push   0x80000001
c00141a6:	e8 9f f5 ff ff       	call   c001374a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141ab:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00141b5:	83 c4 20             	add    esp,0x20
c00141b8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00141be:	83 f8 01             	cmp    eax,0x1
c00141c1:	75 6f                	jne    c0014232 <CPU::detectFeatures()+0x67e>
c00141c3:	51                   	push   ecx
c00141c4:	51                   	push   ecx
c00141c5:	68 a5 63 02 c0       	push   0xc00263a5
c00141ca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00141ce:	56                   	push   esi
c00141cf:	e8 7c c5 fe ff       	call   c0000750 <strcpy>
c00141d4:	5f                   	pop    edi
c00141d5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141db:	5d                   	pop    ebp
c00141dc:	66 c1 e8 06          	shr    ax,0x6
c00141e0:	0f b6 c0             	movzx  eax,al
c00141e3:	50                   	push   eax
c00141e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141ea:	c1 e8 0e             	shr    eax,0xe
c00141ed:	0f b6 c0             	movzx  eax,al
c00141f0:	50                   	push   eax
c00141f1:	e8 fe f1 ff ff       	call   c00133f4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00141f6:	5a                   	pop    edx
c00141f7:	59                   	pop    ecx
c00141f8:	50                   	push   eax
c00141f9:	56                   	push   esi
c00141fa:	e8 91 c6 fe ff       	call   c0000890 <strcat>
c00141ff:	5f                   	pop    edi
c0014200:	5d                   	pop    ebp
c0014201:	56                   	push   esi
c0014202:	53                   	push   ebx
c0014203:	e8 28 a6 ff ff       	call   c000e830 <Device::setName(char const*)>
c0014208:	58                   	pop    eax
c0014209:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001420f:	5a                   	pop    edx
c0014210:	68 ac 63 02 c0       	push   0xc00263ac
c0014215:	50                   	push   eax
c0014216:	e8 c1 c5 fe ff       	call   c00007dc <strcmp>
c001421b:	83 c4 10             	add    esp,0x10
c001421e:	85 c0                	test   eax,eax
c0014220:	0f 85 71 03 00 00    	jne    c0014597 <CPU::detectFeatures()+0x9e3>
c0014226:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001422d:	e9 65 03 00 00       	jmp    c0014597 <CPU::detectFeatures()+0x9e3>
c0014232:	83 f8 02             	cmp    eax,0x2
c0014235:	0f 85 b5 00 00 00    	jne    c00142f0 <CPU::detectFeatures()+0x73c>
c001423b:	57                   	push   edi
c001423c:	57                   	push   edi
c001423d:	68 be 63 02 c0       	push   0xc00263be
c0014242:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014246:	56                   	push   esi
c0014247:	e8 04 c5 fe ff       	call   c0000750 <strcpy>
c001424c:	5d                   	pop    ebp
c001424d:	58                   	pop    eax
c001424e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014254:	66 c1 e8 06          	shr    ax,0x6
c0014258:	0f b6 c0             	movzx  eax,al
c001425b:	50                   	push   eax
c001425c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014262:	c1 e8 0e             	shr    eax,0xe
c0014265:	0f b6 c0             	movzx  eax,al
c0014268:	50                   	push   eax
c0014269:	e8 f2 ef ff ff       	call   c0013260 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001426e:	5a                   	pop    edx
c001426f:	59                   	pop    ecx
c0014270:	50                   	push   eax
c0014271:	56                   	push   esi
c0014272:	e8 19 c6 fe ff       	call   c0000890 <strcat>
c0014277:	5f                   	pop    edi
c0014278:	5d                   	pop    ebp
c0014279:	56                   	push   esi
c001427a:	53                   	push   ebx
c001427b:	e8 b0 a5 ff ff       	call   c000e830 <Device::setName(char const*)>
c0014280:	58                   	pop    eax
c0014281:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014287:	5a                   	pop    edx
c0014288:	68 c3 63 02 c0       	push   0xc00263c3
c001428d:	50                   	push   eax
c001428e:	e8 49 c5 fe ff       	call   c00007dc <strcmp>
c0014293:	83 c4 10             	add    esp,0x10
c0014296:	85 c0                	test   eax,eax
c0014298:	75 20                	jne    c00142ba <CPU::detectFeatures()+0x706>
c001429a:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c00142a0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142a6:	a8 01                	test   al,0x1
c00142a8:	74 10                	je     c00142ba <CPU::detectFeatures()+0x706>
c00142aa:	83 e0 fe             	and    eax,0xfffffffe
c00142ad:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00142b3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00142ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00142c0:	c1 e8 0e             	shr    eax,0xe
c00142c3:	3c 05                	cmp    al,0x5
c00142c5:	0f 85 cc 02 00 00    	jne    c0014597 <CPU::detectFeatures()+0x9e3>
c00142cb:	56                   	push   esi
c00142cc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00142d2:	83 e0 0f             	and    eax,0xf
c00142d5:	50                   	push   eax
c00142d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00142dc:	66 c1 e8 06          	shr    ax,0x6
c00142e0:	0f b6 c0             	movzx  eax,al
c00142e3:	50                   	push   eax
c00142e4:	6a 05                	push   0x5
c00142e6:	e8 eb f3 ff ff       	call   c00136d6 <CPU::AMD_K6_writeback(int, int, int)>
c00142eb:	e9 1f 02 00 00       	jmp    c001450f <CPU::detectFeatures()+0x95b>
c00142f0:	8d 50 fd             	lea    edx,[eax-0x3]
c00142f3:	83 fa 01             	cmp    edx,0x1
c00142f6:	76 09                	jbe    c0014301 <CPU::detectFeatures()+0x74d>
c00142f8:	83 f8 06             	cmp    eax,0x6
c00142fb:	0f 85 91 01 00 00    	jne    c0014492 <CPU::detectFeatures()+0x8de>
c0014301:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014307:	c1 ea 0e             	shr    edx,0xe
c001430a:	80 fa 05             	cmp    dl,0x5
c001430d:	75 7b                	jne    c001438a <CPU::detectFeatures()+0x7d6>
c001430f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014315:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001431a:	66 81 fa 00 01       	cmp    dx,0x100
c001431f:	75 0c                	jne    c001432d <CPU::detectFeatures()+0x779>
c0014321:	51                   	push   ecx
c0014322:	51                   	push   ecx
c0014323:	68 ca 63 02 c0       	push   0xc00263ca
c0014328:	e9 dc 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c001432d:	66 81 fa 00 02       	cmp    dx,0x200
c0014332:	75 0c                	jne    c0014340 <CPU::detectFeatures()+0x78c>
c0014334:	52                   	push   edx
c0014335:	52                   	push   edx
c0014336:	68 dd 63 02 c0       	push   0xc00263dd
c001433b:	e9 c9 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c0014340:	66 81 fa 40 02       	cmp    dx,0x240
c0014345:	75 0c                	jne    c0014353 <CPU::detectFeatures()+0x79f>
c0014347:	50                   	push   eax
c0014348:	50                   	push   eax
c0014349:	68 ef 63 02 c0       	push   0xc00263ef
c001434e:	e9 b6 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c0014353:	83 f8 06             	cmp    eax,0x6
c0014356:	75 0c                	jne    c0014364 <CPU::detectFeatures()+0x7b0>
c0014358:	50                   	push   eax
c0014359:	50                   	push   eax
c001435a:	68 01 64 02 c0       	push   0xc0026401
c001435f:	e9 a5 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c0014364:	83 f8 04             	cmp    eax,0x4
c0014367:	75 0c                	jne    c0014375 <CPU::detectFeatures()+0x7c1>
c0014369:	50                   	push   eax
c001436a:	50                   	push   eax
c001436b:	68 0d 64 02 c0       	push   0xc002640d
c0014370:	e9 94 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c0014375:	83 f8 03             	cmp    eax,0x3
c0014378:	0f 85 19 02 00 00    	jne    c0014597 <CPU::detectFeatures()+0x9e3>
c001437e:	50                   	push   eax
c001437f:	50                   	push   eax
c0014380:	68 15 64 02 c0       	push   0xc0026415
c0014385:	e9 7f 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c001438a:	80 fa 06             	cmp    dl,0x6
c001438d:	0f 85 db 00 00 00    	jne    c001446e <CPU::detectFeatures()+0x8ba>
c0014393:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014399:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001439e:	66 81 fa 80 01       	cmp    dx,0x180
c00143a3:	75 0c                	jne    c00143b1 <CPU::detectFeatures()+0x7fd>
c00143a5:	50                   	push   eax
c00143a6:	50                   	push   eax
c00143a7:	68 20 64 02 c0       	push   0xc0026420
c00143ac:	e9 58 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00143b1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00143b7:	66 f7 c1 80 ff       	test   cx,0xff80
c00143bc:	75 0c                	jne    c00143ca <CPU::detectFeatures()+0x816>
c00143be:	50                   	push   eax
c00143bf:	50                   	push   eax
c00143c0:	68 30 64 02 c0       	push   0xc0026430
c00143c5:	e9 3f 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00143ca:	66 81 fa 40 02       	cmp    dx,0x240
c00143cf:	75 0c                	jne    c00143dd <CPU::detectFeatures()+0x829>
c00143d1:	55                   	push   ebp
c00143d2:	55                   	push   ebp
c00143d3:	68 37 64 02 c0       	push   0xc0026437
c00143d8:	e9 2c 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00143dd:	66 81 fa 80 02       	cmp    dx,0x280
c00143e2:	75 0c                	jne    c00143f0 <CPU::detectFeatures()+0x83c>
c00143e4:	57                   	push   edi
c00143e5:	57                   	push   edi
c00143e6:	68 40 64 02 c0       	push   0xc0026440
c00143eb:	e9 19 01 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00143f0:	66 81 fa 40 03       	cmp    dx,0x340
c00143f5:	74 ed                	je     c00143e4 <CPU::detectFeatures()+0x830>
c00143f7:	66 81 fa c0 03       	cmp    dx,0x3c0
c00143fc:	75 0c                	jne    c001440a <CPU::detectFeatures()+0x856>
c00143fe:	56                   	push   esi
c00143ff:	56                   	push   esi
c0014400:	68 47 64 02 c0       	push   0xc0026447
c0014405:	e9 ff 00 00 00       	jmp    c0014509 <CPU::detectFeatures()+0x955>
c001440a:	83 f8 06             	cmp    eax,0x6
c001440d:	0f 84 45 ff ff ff    	je     c0014358 <CPU::detectFeatures()+0x7a4>
c0014413:	83 f8 04             	cmp    eax,0x4
c0014416:	0f 84 4d ff ff ff    	je     c0014369 <CPU::detectFeatures()+0x7b5>
c001441c:	83 f8 03             	cmp    eax,0x3
c001441f:	0f 85 72 01 00 00    	jne    c0014597 <CPU::detectFeatures()+0x9e3>
c0014425:	51                   	push   ecx
c0014426:	51                   	push   ecx
c0014427:	68 50 64 02 c0       	push   0xc0026450
c001442c:	53                   	push   ebx
c001442d:	e8 fe a3 ff ff       	call   c000e830 <Device::setName(char const*)>
c0014432:	b1 c1                	mov    cl,0xc1
c0014434:	88 c8                	mov    al,cl
c0014436:	e6 22                	out    0x22,al
c0014438:	e4 23                	in     al,0x23
c001443a:	88 c2                	mov    dl,al
c001443c:	88 c8                	mov    al,cl
c001443e:	e6 22                	out    0x22,al
c0014440:	88 d0                	mov    al,dl
c0014442:	83 c8 10             	or     eax,0x10
c0014445:	e6 23                	out    0x23,al
c0014447:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001444e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014451:	89 d0                	mov    eax,edx
c0014453:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014459:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001445d:	40                   	inc    eax
c001445e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014464:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014469:	e9 a1 00 00 00       	jmp    c001450f <CPU::detectFeatures()+0x95b>
c001446e:	83 f8 06             	cmp    eax,0x6
c0014471:	0f 84 e1 fe ff ff    	je     c0014358 <CPU::detectFeatures()+0x7a4>
c0014477:	83 f8 04             	cmp    eax,0x4
c001447a:	0f 84 e9 fe ff ff    	je     c0014369 <CPU::detectFeatures()+0x7b5>
c0014480:	83 f8 03             	cmp    eax,0x3
c0014483:	0f 85 0e 01 00 00    	jne    c0014597 <CPU::detectFeatures()+0x9e3>
c0014489:	52                   	push   edx
c001448a:	52                   	push   edx
c001448b:	68 5b 64 02 c0       	push   0xc002645b
c0014490:	eb 77                	jmp    c0014509 <CPU::detectFeatures()+0x955>
c0014492:	83 f8 07             	cmp    eax,0x7
c0014495:	75 09                	jne    c00144a0 <CPU::detectFeatures()+0x8ec>
c0014497:	50                   	push   eax
c0014498:	50                   	push   eax
c0014499:	68 65 64 02 c0       	push   0xc0026465
c001449e:	eb 69                	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00144a0:	83 f8 0a             	cmp    eax,0xa
c00144a3:	75 09                	jne    c00144ae <CPU::detectFeatures()+0x8fa>
c00144a5:	50                   	push   eax
c00144a6:	50                   	push   eax
c00144a7:	68 70 64 02 c0       	push   0xc0026470
c00144ac:	eb 5b                	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00144ae:	83 f8 0b             	cmp    eax,0xb
c00144b1:	75 09                	jne    c00144bc <CPU::detectFeatures()+0x908>
c00144b3:	50                   	push   eax
c00144b4:	50                   	push   eax
c00144b5:	68 78 64 02 c0       	push   0xc0026478
c00144ba:	eb 4d                	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00144bc:	83 f8 08             	cmp    eax,0x8
c00144bf:	75 09                	jne    c00144ca <CPU::detectFeatures()+0x916>
c00144c1:	50                   	push   eax
c00144c2:	50                   	push   eax
c00144c3:	68 81 64 02 c0       	push   0xc0026481
c00144c8:	eb 3f                	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00144ca:	83 f8 09             	cmp    eax,0x9
c00144cd:	75 09                	jne    c00144d8 <CPU::detectFeatures()+0x924>
c00144cf:	50                   	push   eax
c00144d0:	50                   	push   eax
c00144d1:	68 89 64 02 c0       	push   0xc0026489
c00144d6:	eb 31                	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00144d8:	83 f8 05             	cmp    eax,0x5
c00144db:	75 09                	jne    c00144e6 <CPU::detectFeatures()+0x932>
c00144dd:	50                   	push   eax
c00144de:	50                   	push   eax
c00144df:	68 91 64 02 c0       	push   0xc0026491
c00144e4:	eb 23                	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00144e6:	83 f8 0c             	cmp    eax,0xc
c00144e9:	75 09                	jne    c00144f4 <CPU::detectFeatures()+0x940>
c00144eb:	55                   	push   ebp
c00144ec:	55                   	push   ebp
c00144ed:	68 9f 64 02 c0       	push   0xc002649f
c00144f2:	eb 15                	jmp    c0014509 <CPU::detectFeatures()+0x955>
c00144f4:	83 f8 0d             	cmp    eax,0xd
c00144f7:	75 09                	jne    c0014502 <CPU::detectFeatures()+0x94e>
c00144f9:	57                   	push   edi
c00144fa:	57                   	push   edi
c00144fb:	68 aa 64 02 c0       	push   0xc00264aa
c0014500:	eb 07                	jmp    c0014509 <CPU::detectFeatures()+0x955>
c0014502:	56                   	push   esi
c0014503:	56                   	push   esi
c0014504:	68 be 64 02 c0       	push   0xc00264be
c0014509:	53                   	push   ebx
c001450a:	e8 21 a3 ff ff       	call   c000e830 <Device::setName(char const*)>
c001450f:	83 c4 10             	add    esp,0x10
c0014512:	e9 80 00 00 00       	jmp    c0014597 <CPU::detectFeatures()+0x9e3>
c0014517:	51                   	push   ecx
c0014518:	51                   	push   ecx
c0014519:	68 0a 63 02 c0       	push   0xc002630a
c001451e:	55                   	push   ebp
c001451f:	e8 2c c2 fe ff       	call   c0000750 <strcpy>
c0014524:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001452e:	e8 b0 bc fe ff       	call   c00001e3 <is486>
c0014533:	83 c4 10             	add    esp,0x10
c0014536:	85 c0                	test   eax,eax
c0014538:	74 2b                	je     c0014565 <CPU::detectFeatures()+0x9b1>
c001453a:	52                   	push   edx
c001453b:	52                   	push   edx
c001453c:	68 ca 64 02 c0       	push   0xc00264ca
c0014541:	53                   	push   ebx
c0014542:	e8 e9 a2 ff ff       	call   c000e830 <Device::setName(char const*)>
c0014547:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001454e:	0f 20 c0             	mov    eax,cr0
c0014551:	83 e0 14             	and    eax,0x14
c0014554:	83 c4 10             	add    esp,0x10
c0014557:	83 f8 04             	cmp    eax,0x4
c001455a:	75 1f                	jne    c001457b <CPU::detectFeatures()+0x9c7>
c001455c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014563:	eb 32                	jmp    c0014597 <CPU::detectFeatures()+0x9e3>
c0014565:	50                   	push   eax
c0014566:	50                   	push   eax
c0014567:	68 d5 64 02 c0       	push   0xc00264d5
c001456c:	53                   	push   ebx
c001456d:	e8 be a2 ff ff       	call   c000e830 <Device::setName(char const*)>
c0014572:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014579:	eb d3                	jmp    c001454e <CPU::detectFeatures()+0x99a>
c001457b:	e8 3e bc fe ff       	call   c00001be <hasLegacyFPU>
c0014580:	83 e0 01             	and    eax,0x1
c0014583:	8d 14 00             	lea    edx,[eax+eax*1]
c0014586:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001458c:	83 e0 fd             	and    eax,0xfffffffd
c001458f:	09 d0                	or     eax,edx
c0014591:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014597:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c001459e:	74 0e                	je     c00145ae <CPU::detectFeatures()+0x9fa>
c00145a0:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00145a5:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00145ac:	eb 20                	jmp    c00145ce <CPU::detectFeatures()+0xa1a>
c00145ae:	e8 0b bc fe ff       	call   c00001be <hasLegacyFPU>
c00145b3:	83 e0 01             	and    eax,0x1
c00145b6:	8d 14 00             	lea    edx,[eax+eax*1]
c00145b9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00145bf:	83 e0 fd             	and    eax,0xfffffffd
c00145c2:	09 d0                	or     eax,edx
c00145c4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00145ca:	a8 02                	test   al,0x2
c00145cc:	75 d2                	jne    c00145a0 <CPU::detectFeatures()+0x9ec>
c00145ce:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00145d5:	83 c4 4c             	add    esp,0x4c
c00145d8:	5b                   	pop    ebx
c00145d9:	5e                   	pop    esi
c00145da:	5f                   	pop    edi
c00145db:	5d                   	pop    ebp
c00145dc:	c3                   	ret    
c00145dd:	90                   	nop

c00145de <CPU::setupSMEP()>:
c00145de:	0f 20 e0             	mov    eax,cr4
c00145e1:	0d 00 00 10 00       	or     eax,0x100000
c00145e6:	0f 22 e0             	mov    cr4,eax
c00145e9:	c3                   	ret    

c00145ea <CPU::setupUMIP()>:
c00145ea:	0f 20 e0             	mov    eax,cr4
c00145ed:	80 cc 08             	or     ah,0x8
c00145f0:	0f 22 e0             	mov    cr4,eax
c00145f3:	c3                   	ret    

c00145f4 <CPU::setupTSC()>:
c00145f4:	0f 20 e0             	mov    eax,cr4
c00145f7:	83 c8 04             	or     eax,0x4
c00145fa:	0f 22 e0             	mov    cr4,eax
c00145fd:	c3                   	ret    

c00145fe <CPU::setupLargePages()>:
c00145fe:	0f 20 e0             	mov    eax,cr4
c0014601:	83 c8 10             	or     eax,0x10
c0014604:	0f 22 e0             	mov    cr4,eax
c0014607:	c3                   	ret    

c0014608 <CPU::setupPAT()>:
c0014608:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001460d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014614:	74 2c                	je     c0014642 <CPU::setupPAT()+0x3a>
c0014616:	53                   	push   ebx
c0014617:	83 ec 10             	sub    esp,0x10
c001461a:	68 77 02 00 00       	push   0x277
c001461f:	50                   	push   eax
c0014620:	e8 59 4c ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014625:	83 e2 f8             	and    edx,0xfffffff8
c0014628:	83 ca 01             	or     edx,0x1
c001462b:	52                   	push   edx
c001462c:	50                   	push   eax
c001462d:	68 77 02 00 00       	push   0x277
c0014632:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c0014638:	e8 6d 4c ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c001463d:	83 c4 28             	add    esp,0x28
c0014640:	5b                   	pop    ebx
c0014641:	c3                   	ret    
c0014642:	c3                   	ret    
c0014643:	90                   	nop

c0014644 <CPU::setupMTRR()>:
c0014644:	c3                   	ret    
c0014645:	90                   	nop

c0014646 <CPU::setupGlobalPages()>:
c0014646:	0f 20 e0             	mov    eax,cr4
c0014649:	0c 80                	or     al,0x80
c001464b:	0f 22 e0             	mov    cr4,eax
c001464e:	c3                   	ret    
c001464f:	90                   	nop

c0014650 <CPU::allowUsermodeDataAccess()>:
c0014650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014654:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001465b:	74 03                	je     c0014660 <CPU::allowUsermodeDataAccess()+0x10>
c001465d:	0f 01 cb             	stac   
c0014660:	c3                   	ret    
c0014661:	90                   	nop

c0014662 <CPU::prohibitUsermodeDataAccess()>:
c0014662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014666:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001466d:	74 03                	je     c0014672 <CPU::prohibitUsermodeDataAccess()+0x10>
c001466f:	0f 01 ca             	clac   
c0014672:	c3                   	ret    
c0014673:	90                   	nop

c0014674 <CPU::setupSMAP()>:
c0014674:	0f 20 e0             	mov    eax,cr4
c0014677:	0d 00 00 20 00       	or     eax,0x200000
c001467c:	0f 22 e0             	mov    cr4,eax
c001467f:	eb e1                	jmp    c0014662 <CPU::prohibitUsermodeDataAccess()>
c0014681:	90                   	nop

c0014682 <CPU::setupFeatures()>:
c0014682:	53                   	push   ebx
c0014683:	83 ec 08             	sub    esp,0x8
c0014686:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001468a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014691:	74 18                	je     c00146ab <CPU::setupFeatures()+0x29>
c0014693:	83 ec 0c             	sub    esp,0xc
c0014696:	68 e0 64 02 c0       	push   0xc00264e0
c001469b:	e8 27 8a ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00146a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146a3:	e8 42 ff ff ff       	call   c00145ea <CPU::setupUMIP()>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00146b2:	74 18                	je     c00146cc <CPU::setupFeatures()+0x4a>
c00146b4:	83 ec 0c             	sub    esp,0xc
c00146b7:	68 ea 64 02 c0       	push   0xc00264ea
c00146bc:	e8 06 8a ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00146c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146c4:	e8 2b ff ff ff       	call   c00145f4 <CPU::setupTSC()>
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00146d3:	74 18                	je     c00146ed <CPU::setupFeatures()+0x6b>
c00146d5:	83 ec 0c             	sub    esp,0xc
c00146d8:	68 f3 64 02 c0       	push   0xc00264f3
c00146dd:	e8 e5 89 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00146e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146e5:	e8 14 ff ff ff       	call   c00145fe <CPU::setupLargePages()>
c00146ea:	83 c4 10             	add    esp,0x10
c00146ed:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00146f4:	74 18                	je     c001470e <CPU::setupFeatures()+0x8c>
c00146f6:	83 ec 0c             	sub    esp,0xc
c00146f9:	68 fc 64 02 c0       	push   0xc00264fc
c00146fe:	e8 c4 89 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0014703:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014706:	e8 3b ff ff ff       	call   c0014646 <CPU::setupGlobalPages()>
c001470b:	83 c4 10             	add    esp,0x10
c001470e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014715:	74 18                	je     c001472f <CPU::setupFeatures()+0xad>
c0014717:	83 ec 0c             	sub    esp,0xc
c001471a:	68 0e 65 02 c0       	push   0xc002650e
c001471f:	e8 a3 89 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0014724:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014727:	e8 dc fe ff ff       	call   c0014608 <CPU::setupPAT()>
c001472c:	83 c4 10             	add    esp,0x10
c001472f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014736:	74 11                	je     c0014749 <CPU::setupFeatures()+0xc7>
c0014738:	c7 44 24 10 17 65 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026517
c0014740:	83 c4 08             	add    esp,0x8
c0014743:	5b                   	pop    ebx
c0014744:	e9 7e 89 ff ff       	jmp    c000d0c7 <Dbg::kprintf(char const*, ...)>
c0014749:	83 c4 08             	add    esp,0x8
c001474c:	5b                   	pop    ebx
c001474d:	c3                   	ret    

c001474e <CPU::open(int, int, void*)>:
c001474e:	57                   	push   edi
c001474f:	56                   	push   esi
c0014750:	53                   	push   ebx
c0014751:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014755:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014759:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001475f:	83 ec 0c             	sub    esp,0xc
c0014762:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014768:	68 21 65 02 c0       	push   0xc0026521
c001476d:	e8 cf 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014772:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014778:	89 04 24             	mov    DWORD PTR [esp],eax
c001477b:	e8 ea 4e ff ff       	call   c000966a <GDT::setup()>
c0014780:	c7 04 24 33 65 02 c0 	mov    DWORD PTR [esp],0xc0026533
c0014787:	e8 b5 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001478c:	83 c4 0c             	add    esp,0xc
c001478f:	6a 00                	push   0x0
c0014791:	68 ef be ad de       	push   0xdeadbeef
c0014796:	57                   	push   edi
c0014797:	e8 8c 6f ff ff       	call   c000b728 <TSS::setup(unsigned long, unsigned long)>
c001479c:	c7 04 24 45 65 02 c0 	mov    DWORD PTR [esp],0xc0026545
c00147a3:	e8 99 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147ab:	e8 58 6f ff ff       	call   c000b708 <TSS::flush()>
c00147b0:	c7 04 24 59 65 02 c0 	mov    DWORD PTR [esp],0xc0026559
c00147b7:	e8 85 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147bc:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00147c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00147c5:	e8 80 51 ff ff       	call   c000994a <IDT::setup()>
c00147ca:	c7 04 24 6b 65 02 c0 	mov    DWORD PTR [esp],0xc002656b
c00147d1:	e8 6b 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147d6:	b8 00 04 00 00       	mov    eax,0x400
c00147db:	0f 23 f8             	mov    db7,eax
c00147de:	c7 04 24 89 65 02 c0 	mov    DWORD PTR [esp],0xc0026589
c00147e5:	e8 57 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00147ea:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00147f4:	e8 a5 5c ff ff       	call   c000a49e <Phys::allocatePage()>
c00147f9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00147ff:	89 30                	mov    DWORD PTR [eax],esi
c0014801:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014807:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001480a:	c7 04 24 ab 65 02 c0 	mov    DWORD PTR [esp],0xc00265ab
c0014811:	e8 2b 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014816:	58                   	pop    eax
c0014817:	5a                   	pop    edx
c0014818:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001481e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014822:	e8 fb 7e ff ff       	call   c000c722 <VAS::setCPUSpecific(unsigned long)>
c0014827:	c7 04 24 d3 65 02 c0 	mov    DWORD PTR [esp],0xc00265d3
c001482e:	e8 0e 56 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014833:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014836:	e8 79 f3 ff ff       	call   c0013bb4 <CPU::detectFeatures()>
c001483b:	c7 04 24 f6 65 02 c0 	mov    DWORD PTR [esp],0xc00265f6
c0014842:	e8 fa 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014847:	e8 f7 b2 ff ff       	call   c000fb43 <setupInterruptController()>
c001484c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014852:	c7 04 24 1a 66 02 c0 	mov    DWORD PTR [esp],0xc002661a
c0014859:	e8 e3 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001485e:	a1 e0 8b 02 c0       	mov    eax,ds:0xc0028be0
c0014863:	83 e0 10             	and    eax,0x10
c0014866:	83 f8 01             	cmp    eax,0x1
c0014869:	19 c0                	sbb    eax,eax
c001486b:	83 e0 46             	and    eax,0x46
c001486e:	83 c0 1e             	add    eax,0x1e
c0014871:	89 04 24             	mov    DWORD PTR [esp],eax
c0014874:	e8 eb c8 ff ff       	call   c0011164 <setupTimer(int)>
c0014879:	83 c4 10             	add    esp,0x10
c001487c:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014882:	f6 05 e0 8b 02 c0 20 	test   BYTE PTR ds:0xc0028be0,0x20
c0014889:	74 18                	je     c00148a3 <CPU::open(int, int, void*)+0x155>
c001488b:	83 ec 0c             	sub    esp,0xc
c001488e:	68 35 66 02 c0       	push   0xc0026635
c0014893:	e8 a9 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0014898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001489b:	e8 e2 fd ff ff       	call   c0014682 <CPU::setupFeatures()>
c00148a0:	83 c4 10             	add    esp,0x10
c00148a3:	83 ec 0c             	sub    esp,0xc
c00148a6:	68 50 66 02 c0       	push   0xc0026650
c00148ab:	e8 91 55 ff ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00148b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148b3:	e8 5c f0 ff ff       	call   c0013914 <CPU::displayFeatures()>
c00148b8:	83 c4 10             	add    esp,0x10
c00148bb:	31 c0                	xor    eax,eax
c00148bd:	5b                   	pop    ebx
c00148be:	5e                   	pop    esi
c00148bf:	5f                   	pop    edi
c00148c0:	c3                   	ret    
c00148c1:	90                   	nop

c00148c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00148c2:	57                   	push   edi
c00148c3:	56                   	push   esi
c00148c4:	53                   	push   ebx
c00148c5:	51                   	push   ecx
c00148c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00148ca:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00148cd:	0f 02 c0             	lar    eax,ax
c00148d0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00148d3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00148d7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00148da:	88 ca                	mov    dl,cl
c00148dc:	c0 ea 06             	shr    dl,0x6
c00148df:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00148e3:	89 ca                	mov    edx,ecx
c00148e5:	66 c1 ea 03          	shr    dx,0x3
c00148e9:	83 e2 07             	and    edx,0x7
c00148ec:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00148f1:	88 17                	mov    BYTE PTR [edi],dl
c00148f3:	0f 84 a6 01 00 00    	je     c0014a9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00148f9:	83 e1 07             	and    ecx,0x7
c00148fc:	80 f9 04             	cmp    cl,0x4
c00148ff:	0f 84 98 00 00 00    	je     c001499d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014905:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001490a:	0f 95 c0             	setne  al
c001490d:	80 f9 05             	cmp    cl,0x5
c0014910:	0f 95 c2             	setne  dl
c0014913:	08 c2                	or     dl,al
c0014915:	74 79                	je     c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014917:	84 c9                	test   cl,cl
c0014919:	75 05                	jne    c0014920 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001491b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001491e:	eb 3c                	jmp    c001495c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014920:	80 f9 01             	cmp    cl,0x1
c0014923:	75 05                	jne    c001492a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014925:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014928:	eb 32                	jmp    c001495c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001492a:	80 f9 02             	cmp    cl,0x2
c001492d:	75 05                	jne    c0014934 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001492f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014932:	eb 28                	jmp    c001495c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014934:	31 c0                	xor    eax,eax
c0014936:	80 f9 03             	cmp    cl,0x3
c0014939:	75 05                	jne    c0014940 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001493b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001493e:	eb 1c                	jmp    c001495c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014940:	80 f9 05             	cmp    cl,0x5
c0014943:	75 05                	jne    c001494a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014945:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014948:	eb 12                	jmp    c001495c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001494a:	80 f9 06             	cmp    cl,0x6
c001494d:	75 05                	jne    c0014954 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001494f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014952:	eb 08                	jmp    c001495c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014954:	80 f9 07             	cmp    cl,0x7
c0014957:	75 03                	jne    c001495c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014959:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001495c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014961:	75 10                	jne    c0014973 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0014963:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0014967:	b9 03 00 00 00       	mov    ecx,0x3
c001496c:	01 d0                	add    eax,edx
c001496e:	e9 37 01 00 00       	jmp    c0014aaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014973:	b9 02 00 00 00       	mov    ecx,0x2
c0014978:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001497d:	0f 85 27 01 00 00    	jne    c0014aaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014983:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0014986:	b9 06 00 00 00       	mov    ecx,0x6
c001498b:	e9 1a 01 00 00       	jmp    c0014aaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014990:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0014993:	b9 06 00 00 00       	mov    ecx,0x6
c0014998:	e9 0f 01 00 00       	jmp    c0014aac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001499d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00149a0:	88 ca                	mov    dl,cl
c00149a2:	c0 ea 06             	shr    dl,0x6
c00149a5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00149a9:	89 ca                	mov    edx,ecx
c00149ab:	66 c1 ea 03          	shr    dx,0x3
c00149af:	83 e2 07             	and    edx,0x7
c00149b2:	80 e1 07             	and    cl,0x7
c00149b5:	75 05                	jne    c00149bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00149b7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00149ba:	eb 4c                	jmp    c0014a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149bc:	80 f9 01             	cmp    cl,0x1
c00149bf:	75 05                	jne    c00149c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00149c1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00149c4:	eb 42                	jmp    c0014a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149c6:	80 f9 02             	cmp    cl,0x2
c00149c9:	75 05                	jne    c00149d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00149cb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00149ce:	eb 38                	jmp    c0014a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149d0:	80 f9 03             	cmp    cl,0x3
c00149d3:	75 05                	jne    c00149da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00149d5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00149d8:	eb 2e                	jmp    c0014a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149da:	80 f9 04             	cmp    cl,0x4
c00149dd:	75 12                	jne    c00149f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00149df:	f6 c4 60             	test   ah,0x60
c00149e2:	75 08                	jne    c00149ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00149e4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00149e7:	8d 78 14             	lea    edi,[eax+0x14]
c00149ea:	eb 1c                	jmp    c0014a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149ec:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00149ef:	eb 17                	jmp    c0014a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149f1:	80 f9 05             	cmp    cl,0x5
c00149f4:	75 05                	jne    c00149fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00149f6:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00149f9:	eb 0d                	jmp    c0014a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00149fb:	80 f9 06             	cmp    cl,0x6
c00149fe:	75 05                	jne    c0014a05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014a00:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014a03:	eb 03                	jmp    c0014a08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014a05:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014a08:	84 d2                	test   dl,dl
c0014a0a:	75 05                	jne    c0014a11 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014a0c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014a0f:	eb 3c                	jmp    c0014a4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a11:	80 fa 01             	cmp    dl,0x1
c0014a14:	75 05                	jne    c0014a1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014a16:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014a19:	eb 32                	jmp    c0014a4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a1b:	80 fa 02             	cmp    dl,0x2
c0014a1e:	75 05                	jne    c0014a25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014a20:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014a23:	eb 28                	jmp    c0014a4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a25:	80 fa 03             	cmp    dl,0x3
c0014a28:	75 05                	jne    c0014a2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014a2a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014a2d:	eb 1e                	jmp    c0014a4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a2f:	31 c0                	xor    eax,eax
c0014a31:	80 fa 04             	cmp    dl,0x4
c0014a34:	74 17                	je     c0014a4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a36:	80 fa 05             	cmp    dl,0x5
c0014a39:	75 05                	jne    c0014a40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014a3b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014a3e:	eb 0d                	jmp    c0014a4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a40:	80 fa 06             	cmp    dl,0x6
c0014a43:	75 05                	jne    c0014a4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014a45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014a48:	eb 03                	jmp    c0014a4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014a4a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014a4d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014a52:	0f 94 c2             	sete   dl
c0014a55:	80 f9 05             	cmp    cl,0x5
c0014a58:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014a5c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014a61:	d3 e0                	shl    eax,cl
c0014a63:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014a67:	74 0a                	je     c0014a73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014a69:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014a6c:	b9 07 00 00 00       	mov    ecx,0x7
c0014a71:	eb 37                	jmp    c0014aaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014a73:	01 f8                	add    eax,edi
c0014a75:	b9 03 00 00 00       	mov    ecx,0x3
c0014a7a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014a7f:	74 2b                	je     c0014aac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a81:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014a86:	75 0d                	jne    c0014a95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014a88:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014a8c:	01 c8                	add    eax,ecx
c0014a8e:	b9 04 00 00 00       	mov    ecx,0x4
c0014a93:	eb 17                	jmp    c0014aac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a95:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014a98:	b9 07 00 00 00       	mov    ecx,0x7
c0014a9d:	eb 0d                	jmp    c0014aac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a9f:	b9 02 00 00 00       	mov    ecx,0x2
c0014aa4:	b2 01                	mov    dl,0x1
c0014aa6:	31 c0                	xor    eax,eax
c0014aa8:	eb 02                	jmp    c0014aac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014aaa:	31 d2                	xor    edx,edx
c0014aac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ab0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014ab2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014ab6:	88 11                	mov    BYTE PTR [ecx],dl
c0014ab8:	5a                   	pop    edx
c0014ab9:	5b                   	pop    ebx
c0014aba:	5e                   	pop    esi
c0014abb:	5f                   	pop    edi
c0014abc:	c3                   	ret    

c0014abd <Krnl::smpEntry()>:
c0014abd:	eb fe                	jmp    c0014abd <Krnl::smpEntry()>

c0014abf <Krnl::startCPU(int)>:
c0014abf:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0014ac4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014acb:	0f 84 36 01 00 00    	je     c0014c07 <Krnl::startCPU(int)+0x148>
c0014ad1:	53                   	push   ebx
c0014ad2:	83 ec 10             	sub    esp,0x10
c0014ad5:	fa                   	cli    
c0014ad6:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0014adc:	6a 1b                	push   0x1b
c0014ade:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c0014ae4:	e8 95 47 ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014ae9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014aee:	89 c3                	mov    ebx,eax
c0014af0:	58                   	pop    eax
c0014af1:	5a                   	pop    edx
c0014af2:	53                   	push   ebx
c0014af3:	68 98 66 02 c0       	push   0xc0026698
c0014af8:	e8 ca 85 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0014afd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b0b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b15:	c1 e0 18             	shl    eax,0x18
c0014b18:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014b1e:	83 c4 10             	add    esp,0x10
c0014b21:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014b27:	09 c2                	or     edx,eax
c0014b29:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014b2f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014b35:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014b3b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014b41:	80 cd c5             	or     ch,0xc5
c0014b44:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014b4a:	f3 90                	pause  
c0014b4c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b4e:	0f ba e1 0c          	bt     ecx,0xc
c0014b52:	72 f6                	jb     c0014b4a <Krnl::startCPU(int)+0x8b>
c0014b54:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014b5a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014b60:	09 c1                	or     ecx,eax
c0014b62:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014b68:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014b6e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014b74:	80 cd 85             	or     ch,0x85
c0014b77:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014b7d:	f3 90                	pause  
c0014b7f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b81:	0f ba e1 0c          	bt     ecx,0xc
c0014b85:	72 f6                	jb     c0014b7d <Krnl::startCPU(int)+0xbe>
c0014b87:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b91:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014b97:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014b9d:	09 c1                	or     ecx,eax
c0014b9f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014ba5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014bab:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014bb1:	81 c9 02 06 00 00    	or     ecx,0x602
c0014bb7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014bbd:	f3 90                	pause  
c0014bbf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014bc1:	0f ba e1 0c          	bt     ecx,0xc
c0014bc5:	72 f6                	jb     c0014bbd <Krnl::startCPU(int)+0xfe>
c0014bc7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014bd1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014bd7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014bdd:	09 c8                	or     eax,ecx
c0014bdf:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014be5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014beb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014bf0:	0d 02 06 00 00       	or     eax,0x602
c0014bf5:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014bfb:	f3 90                	pause  
c0014bfd:	8b 02                	mov    eax,DWORD PTR [edx]
c0014bff:	0f ba e0 0c          	bt     eax,0xc
c0014c03:	72 f6                	jb     c0014bfb <Krnl::startCPU(int)+0x13c>
c0014c05:	eb fe                	jmp    c0014c05 <Krnl::startCPU(int)+0x146>
c0014c07:	c3                   	ret    

c0014c08 <Krnl::startCPUs()>:
c0014c08:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0014c0d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014c13:	88 c2                	mov    dl,al
c0014c15:	83 e2 0a             	and    edx,0xa
c0014c18:	80 fa 0a             	cmp    dl,0xa
c0014c1b:	75 09                	jne    c0014c26 <Krnl::startCPUs()+0x1e>
c0014c1d:	a8 01                	test   al,0x1
c0014c1f:	74 05                	je     c0014c26 <Krnl::startCPUs()+0x1e>
c0014c21:	e9 75 b5 fe ff       	jmp    c000019b <prepareTramp>
c0014c26:	c3                   	ret    
c0014c27:	90                   	nop

c0014c28 <EnvVarContainer::getEnv(char const*)>:
c0014c28:	57                   	push   edi
c0014c29:	56                   	push   esi
c0014c2a:	53                   	push   ebx
c0014c2b:	31 db                	xor    ebx,ebx
c0014c2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c31:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014c33:	7e 2b                	jle    c0014c60 <EnvVarContainer::getEnv(char const*)+0x38>
c0014c35:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014c3c:	50                   	push   eax
c0014c3d:	50                   	push   eax
c0014c3e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c41:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014c44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c48:	e8 8f bb fe ff       	call   c00007dc <strcmp>
c0014c4d:	83 c4 10             	add    esp,0x10
c0014c50:	85 c0                	test   eax,eax
c0014c52:	75 09                	jne    c0014c5d <EnvVarContainer::getEnv(char const*)+0x35>
c0014c54:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c57:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014c5b:	eb 05                	jmp    c0014c62 <EnvVarContainer::getEnv(char const*)+0x3a>
c0014c5d:	43                   	inc    ebx
c0014c5e:	eb d1                	jmp    c0014c31 <EnvVarContainer::getEnv(char const*)+0x9>
c0014c60:	31 c0                	xor    eax,eax
c0014c62:	5b                   	pop    ebx
c0014c63:	5e                   	pop    esi
c0014c64:	5f                   	pop    edi
c0014c65:	c3                   	ret    

c0014c66 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014c66:	55                   	push   ebp
c0014c67:	57                   	push   edi
c0014c68:	56                   	push   esi
c0014c69:	53                   	push   ebx
c0014c6a:	83 ec 28             	sub    esp,0x28
c0014c6d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014c71:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014c75:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014c79:	56                   	push   esi
c0014c7a:	e8 31 ba fe ff       	call   c00006b0 <strlen>
c0014c7f:	40                   	inc    eax
c0014c80:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c83:	e8 5f 51 ff ff       	call   c0009de7 <malloc>
c0014c88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c8f:	e8 1c ba fe ff       	call   c00006b0 <strlen>
c0014c94:	40                   	inc    eax
c0014c95:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c98:	e8 4a 51 ff ff       	call   c0009de7 <malloc>
c0014c9d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ca0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ca4:	e8 07 ba fe ff       	call   c00006b0 <strlen>
c0014ca9:	83 c4 0c             	add    esp,0xc
c0014cac:	40                   	inc    eax
c0014cad:	50                   	push   eax
c0014cae:	6a 00                	push   0x0
c0014cb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014cb4:	e8 db b9 fe ff       	call   c0000694 <memset>
c0014cb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cbc:	e8 ef b9 fe ff       	call   c00006b0 <strlen>
c0014cc1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014cc5:	8d 48 01             	lea    ecx,[eax+0x1]
c0014cc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ccd:	89 de                	mov    esi,ebx
c0014ccf:	e8 dc b9 fe ff       	call   c00006b0 <strlen>
c0014cd4:	83 c4 0c             	add    esp,0xc
c0014cd7:	40                   	inc    eax
c0014cd8:	50                   	push   eax
c0014cd9:	6a 00                	push   0x0
c0014cdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cdf:	e8 b0 b9 fe ff       	call   c0000694 <memset>
c0014ce4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ce7:	e8 c4 b9 fe ff       	call   c00006b0 <strlen>
c0014cec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014cf0:	8d 48 01             	lea    ecx,[eax+0x1]
c0014cf3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cf5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014cf8:	40                   	inc    eax
c0014cf9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014cfc:	c1 e0 03             	shl    eax,0x3
c0014cff:	5a                   	pop    edx
c0014d00:	59                   	pop    ecx
c0014d01:	50                   	push   eax
c0014d02:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014d05:	e8 c9 50 ff ff       	call   c0009dd3 <realloc>
c0014d0a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014d0e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d11:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014d14:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014d18:	b9 08 00 00 00       	mov    ecx,0x8
c0014d1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d1f:	83 c4 2c             	add    esp,0x2c
c0014d22:	5b                   	pop    ebx
c0014d23:	5e                   	pop    esi
c0014d24:	5f                   	pop    edi
c0014d25:	5d                   	pop    ebp
c0014d26:	c3                   	ret    
c0014d27:	90                   	nop

c0014d28 <EnvVarContainer::deleteEnv(char const*)>:
c0014d28:	c3                   	ret    
c0014d29:	90                   	nop

c0014d2a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014d2a:	55                   	push   ebp
c0014d2b:	57                   	push   edi
c0014d2c:	56                   	push   esi
c0014d2d:	53                   	push   ebx
c0014d2e:	81 ec 38 01 00 00    	sub    esp,0x138
c0014d34:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014d3b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014d42:	68 14 01 00 00       	push   0x114
c0014d47:	e8 9b 50 ff ff       	call   c0009de7 <malloc>
c0014d4c:	83 c4 0c             	add    esp,0xc
c0014d4f:	89 c3                	mov    ebx,eax
c0014d51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d54:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014d5b:	50                   	push   eax
c0014d5c:	e8 d1 88 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c0014d61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d64:	e8 11 8c ff ff       	call   c000d97a <File::exists()>
c0014d69:	83 c4 10             	add    esp,0x10
c0014d6c:	84 c0                	test   al,al
c0014d6e:	75 31                	jne    c0014da1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014d70:	50                   	push   eax
c0014d71:	50                   	push   eax
c0014d72:	6a 12                	push   0x12
c0014d74:	53                   	push   ebx
c0014d75:	e8 92 89 ff ff       	call   c000d70c <File::open(FileOpenMode)>
c0014d7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d7c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014d7f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d82:	e8 29 b9 fe ff       	call   c00006b0 <strlen>
c0014d87:	5a                   	pop    edx
c0014d88:	31 d2                	xor    edx,edx
c0014d8a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014d8e:	51                   	push   ecx
c0014d8f:	56                   	push   esi
c0014d90:	52                   	push   edx
c0014d91:	50                   	push   eax
c0014d92:	53                   	push   ebx
c0014d93:	ff d7                	call   edi
c0014d95:	83 c4 14             	add    esp,0x14
c0014d98:	53                   	push   ebx
c0014d99:	e8 cc 89 ff ff       	call   c000d76a <File::close()>
c0014d9e:	83 c4 10             	add    esp,0x10
c0014da1:	56                   	push   esi
c0014da2:	31 f6                	xor    esi,esi
c0014da4:	68 00 01 00 00       	push   0x100
c0014da9:	6a 00                	push   0x0
c0014dab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014daf:	50                   	push   eax
c0014db0:	e8 df b8 fe ff       	call   c0000694 <memset>
c0014db5:	5f                   	pop    edi
c0014db6:	58                   	pop    eax
c0014db7:	6a 01                	push   0x1
c0014db9:	53                   	push   ebx
c0014dba:	e8 4d 89 ff ff       	call   c000d70c <File::open(FileOpenMode)>
c0014dbf:	83 c4 10             	add    esp,0x10
c0014dc2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014dca:	83 ec 0c             	sub    esp,0xc
c0014dcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dcf:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014dd3:	51                   	push   ecx
c0014dd4:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014dd8:	52                   	push   edx
c0014dd9:	6a 00                	push   0x0
c0014ddb:	6a 01                	push   0x1
c0014ddd:	53                   	push   ebx
c0014dde:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014de1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014de5:	83 c4 20             	add    esp,0x20
c0014de8:	3c 0d                	cmp    al,0xd
c0014dea:	0f 84 09 01 00 00    	je     c0014ef9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014df0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014df5:	0f 84 ef 00 00 00    	je     c0014eea <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014dfb:	3c 0a                	cmp    al,0xa
c0014dfd:	74 13                	je     c0014e12 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014dff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e04:	74 0c                	je     c0014e12 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014e06:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014e0c:	0f 8e d8 00 00 00    	jle    c0014eea <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014e12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e16:	83 ec 0c             	sub    esp,0xc
c0014e19:	8d 78 01             	lea    edi,[eax+0x1]
c0014e1c:	57                   	push   edi
c0014e1d:	e8 c5 4f ff ff       	call   c0009de7 <malloc>
c0014e22:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014e26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e2a:	8d 56 04             	lea    edx,[esi+0x4]
c0014e2d:	89 14 24             	mov    DWORD PTR [esp],edx
c0014e30:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014e34:	e8 ae 4f ff ff       	call   c0009de7 <malloc>
c0014e39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e3d:	83 c4 0c             	add    esp,0xc
c0014e40:	57                   	push   edi
c0014e41:	6a 00                	push   0x0
c0014e43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014e47:	e8 48 b8 fe ff       	call   c0000694 <memset>
c0014e4c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014e50:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014e54:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014e58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e5a:	83 c4 0c             	add    esp,0xc
c0014e5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e61:	52                   	push   edx
c0014e62:	6a 00                	push   0x0
c0014e64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014e68:	e8 27 b8 fe ff       	call   c0000694 <memset>
c0014e6d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014e71:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014e75:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e78:	e8 33 b8 fe ff       	call   c00006b0 <strlen>
c0014e7d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014e81:	89 c1                	mov    ecx,eax
c0014e83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e88:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014e8b:	40                   	inc    eax
c0014e8c:	83 c4 10             	add    esp,0x10
c0014e8f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014e92:	85 d2                	test   edx,edx
c0014e94:	75 0c                	jne    c0014ea2 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014e96:	83 ec 0c             	sub    esp,0xc
c0014e99:	6a 08                	push   0x8
c0014e9b:	e8 47 4f ff ff       	call   c0009de7 <malloc>
c0014ea0:	eb 0c                	jmp    c0014eae <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014ea2:	c1 e0 03             	shl    eax,0x3
c0014ea5:	51                   	push   ecx
c0014ea6:	51                   	push   ecx
c0014ea7:	50                   	push   eax
c0014ea8:	52                   	push   edx
c0014ea9:	e8 25 4f ff ff       	call   c0009dd3 <realloc>
c0014eae:	83 c4 10             	add    esp,0x10
c0014eb1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014eb4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014eb7:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014eba:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014ebe:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014ec2:	b9 08 00 00 00       	mov    ecx,0x8
c0014ec7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ec9:	31 f6                	xor    esi,esi
c0014ecb:	50                   	push   eax
c0014ecc:	68 00 01 00 00       	push   0x100
c0014ed1:	6a 00                	push   0x0
c0014ed3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014ed7:	50                   	push   eax
c0014ed8:	e8 b7 b7 fe ff       	call   c0000694 <memset>
c0014edd:	83 c4 10             	add    esp,0x10
c0014ee0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ee8:	eb 0f                	jmp    c0014ef9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014eea:	3c 3d                	cmp    al,0x3d
c0014eec:	74 07                	je     c0014ef5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014eee:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014ef2:	46                   	inc    esi
c0014ef3:	eb 04                	jmp    c0014ef9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014ef5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014ef9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014efe:	0f 85 c6 fe ff ff    	jne    c0014dca <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014f04:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014f0a:	5b                   	pop    ebx
c0014f0b:	5e                   	pop    esi
c0014f0c:	5f                   	pop    edi
c0014f0d:	5d                   	pop    ebp
c0014f0e:	c3                   	ret    
c0014f0f:	90                   	nop

c0014f10 <EnvVarContainer::__loadSystem()>:
c0014f10:	83 ec 10             	sub    esp,0x10
c0014f13:	68 a0 85 02 c0       	push   0xc00285a0
c0014f18:	68 a9 66 02 c0       	push   0xc00266a9
c0014f1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f21:	e8 04 fe ff ff       	call   c0014d2a <EnvVarContainer::loadFrom(char const*, char const*)>
c0014f26:	83 c4 1c             	add    esp,0x1c
c0014f29:	c3                   	ret    

c0014f2a <EnvVarContainer::__loadUser()>:
c0014f2a:	c3                   	ret    
c0014f2b:	90                   	nop

c0014f2c <EnvVarContainer::EnvVarContainer(Process*)>:
c0014f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014f36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014f3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014f41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014f4c:	90                   	nop
c0014f4d:	c3                   	ret    

c0014f4e <EnvVarContainer::~EnvVarContainer()>:
c0014f4e:	83 ec 0c             	sub    esp,0xc
c0014f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f58:	85 c0                	test   eax,eax
c0014f5a:	74 1d                	je     c0014f79 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f60:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f62:	85 c0                	test   eax,eax
c0014f64:	74 13                	je     c0014f79 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f6d:	83 ec 0c             	sub    esp,0xc
c0014f70:	50                   	push   eax
c0014f71:	e8 81 4e ff ff       	call   c0009df7 <free>
c0014f76:	83 c4 10             	add    esp,0x10
c0014f79:	90                   	nop
c0014f7a:	83 c4 0c             	add    esp,0xc
c0014f7d:	c3                   	ret    

c0014f7e <Krnl::getEnv(Process*, char const*)>:
c0014f7e:	53                   	push   ebx
c0014f7f:	83 ec 08             	sub    esp,0x8
c0014f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f86:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f8a:	39 05 10 a1 02 c0    	cmp    DWORD PTR ds:0xc002a110,eax
c0014f90:	74 04                	je     c0014f96 <Krnl::getEnv(Process*, char const*)+0x18>
c0014f92:	85 c0                	test   eax,eax
c0014f94:	75 0b                	jne    c0014fa1 <Krnl::getEnv(Process*, char const*)+0x23>
c0014f96:	a1 94 96 02 c0       	mov    eax,ds:0xc0029694
c0014f9b:	85 c0                	test   eax,eax
c0014f9d:	75 19                	jne    c0014fb8 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014f9f:	eb 27                	jmp    c0014fc8 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014fa1:	52                   	push   edx
c0014fa2:	52                   	push   edx
c0014fa3:	53                   	push   ebx
c0014fa4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014faa:	e8 79 fc ff ff       	call   c0014c28 <EnvVarContainer::getEnv(char const*)>
c0014faf:	83 c4 10             	add    esp,0x10
c0014fb2:	85 c0                	test   eax,eax
c0014fb4:	75 28                	jne    c0014fde <Krnl::getEnv(Process*, char const*)+0x60>
c0014fb6:	eb de                	jmp    c0014f96 <Krnl::getEnv(Process*, char const*)+0x18>
c0014fb8:	52                   	push   edx
c0014fb9:	52                   	push   edx
c0014fba:	53                   	push   ebx
c0014fbb:	50                   	push   eax
c0014fbc:	e8 67 fc ff ff       	call   c0014c28 <EnvVarContainer::getEnv(char const*)>
c0014fc1:	83 c4 10             	add    esp,0x10
c0014fc4:	85 c0                	test   eax,eax
c0014fc6:	75 16                	jne    c0014fde <Krnl::getEnv(Process*, char const*)+0x60>
c0014fc8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014fcc:	a1 98 96 02 c0       	mov    eax,ds:0xc0029698
c0014fd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fd5:	83 c4 08             	add    esp,0x8
c0014fd8:	5b                   	pop    ebx
c0014fd9:	e9 4a fc ff ff       	jmp    c0014c28 <EnvVarContainer::getEnv(char const*)>
c0014fde:	83 c4 08             	add    esp,0x8
c0014fe1:	5b                   	pop    ebx
c0014fe2:	c3                   	ret    

c0014fe3 <Krnl::setEnvSystem(char const*, char const*)>:
c0014fe3:	83 ec 10             	sub    esp,0x10
c0014fe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fee:	ff 35 98 96 02 c0    	push   DWORD PTR ds:0xc0029698
c0014ff4:	e8 6d fc ff ff       	call   c0014c66 <EnvVarContainer::setEnv(char const*, char const*)>
c0014ff9:	83 c4 1c             	add    esp,0x1c
c0014ffc:	c3                   	ret    

c0014ffd <Krnl::setEnvUser(char const*, char const*)>:
c0014ffd:	a1 94 96 02 c0       	mov    eax,ds:0xc0029694
c0015002:	85 c0                	test   eax,eax
c0015004:	74 15                	je     c001501b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0015006:	83 ec 10             	sub    esp,0x10
c0015009:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001500d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015011:	50                   	push   eax
c0015012:	e8 4f fc ff ff       	call   c0014c66 <EnvVarContainer::setEnv(char const*, char const*)>
c0015017:	83 c4 1c             	add    esp,0x1c
c001501a:	c3                   	ret    
c001501b:	c3                   	ret    

c001501c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001501c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015020:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0015026:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001502a:	e9 37 fc ff ff       	jmp    c0014c66 <EnvVarContainer::setEnv(char const*, char const*)>

c001502f <Krnl::deleteEnvSystem(char const*)>:
c001502f:	c3                   	ret    

c0015030 <Krnl::deleteEnvUser(char const*)>:
c0015030:	c3                   	ret    

c0015031 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0015031:	c3                   	ret    

c0015032 <Krnl::newProcessEnv(Process*)>:
c0015032:	83 ec 28             	sub    esp,0x28
c0015035:	6a 0c                	push   0xc
c0015037:	e8 ab 4d ff ff       	call   c0009de7 <malloc>
c001503c:	5a                   	pop    edx
c001503d:	59                   	pop    ecx
c001503e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015042:	50                   	push   eax
c0015043:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015047:	e8 e0 fe ff ff       	call   c0014f2c <EnvVarContainer::EnvVarContainer(Process*)>
c001504c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015050:	83 c4 2c             	add    esp,0x2c
c0015053:	c3                   	ret    

c0015054 <Krnl::copyProcessEnv(Process*, Process*)>:
c0015054:	57                   	push   edi
c0015055:	56                   	push   esi
c0015056:	53                   	push   ebx
c0015057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001505b:	83 ec 0c             	sub    esp,0xc
c001505e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0015064:	6a 0c                	push   0xc
c0015066:	e8 7c 4d ff ff       	call   c0009de7 <malloc>
c001506b:	89 c3                	mov    ebx,eax
c001506d:	58                   	pop    eax
c001506e:	5a                   	pop    edx
c001506f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015073:	53                   	push   ebx
c0015074:	e8 b3 fe ff ff       	call   c0014f2c <EnvVarContainer::EnvVarContainer(Process*)>
c0015079:	8b 07                	mov    eax,DWORD PTR [edi]
c001507b:	89 03                	mov    DWORD PTR [ebx],eax
c001507d:	c1 e0 03             	shl    eax,0x3
c0015080:	89 04 24             	mov    DWORD PTR [esp],eax
c0015083:	e8 5f 4d ff ff       	call   c0009de7 <malloc>
c0015088:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001508b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001508d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0015090:	c1 e1 03             	shl    ecx,0x3
c0015093:	89 c7                	mov    edi,eax
c0015095:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015097:	83 c4 10             	add    esp,0x10
c001509a:	89 d8                	mov    eax,ebx
c001509c:	5b                   	pop    ebx
c001509d:	5e                   	pop    esi
c001509e:	5f                   	pop    edi
c001509f:	c3                   	ret    

c00150a0 <Krnl::loadSystemEnv()>:
c00150a0:	53                   	push   ebx
c00150a1:	83 ec 14             	sub    esp,0x14
c00150a4:	6a 0c                	push   0xc
c00150a6:	e8 3c 4d ff ff       	call   c0009de7 <malloc>
c00150ab:	89 c3                	mov    ebx,eax
c00150ad:	58                   	pop    eax
c00150ae:	5a                   	pop    edx
c00150af:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c00150b5:	53                   	push   ebx
c00150b6:	e8 71 fe ff ff       	call   c0014f2c <EnvVarContainer::EnvVarContainer(Process*)>
c00150bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150be:	89 1d 98 96 02 c0    	mov    DWORD PTR ds:0xc0029698,ebx
c00150c4:	e8 47 fe ff ff       	call   c0014f10 <EnvVarContainer::__loadSystem()>
c00150c9:	83 c4 18             	add    esp,0x18
c00150cc:	5b                   	pop    ebx
c00150cd:	c3                   	ret    

c00150ce <Krnl::loadUserEnv()>:
c00150ce:	53                   	push   ebx
c00150cf:	83 ec 14             	sub    esp,0x14
c00150d2:	6a 0c                	push   0xc
c00150d4:	e8 0e 4d ff ff       	call   c0009de7 <malloc>
c00150d9:	89 c3                	mov    ebx,eax
c00150db:	58                   	pop    eax
c00150dc:	5a                   	pop    edx
c00150dd:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c00150e3:	53                   	push   ebx
c00150e4:	e8 43 fe ff ff       	call   c0014f2c <EnvVarContainer::EnvVarContainer(Process*)>
c00150e9:	89 1d 94 96 02 c0    	mov    DWORD PTR ds:0xc0029694,ebx
c00150ef:	83 c4 18             	add    esp,0x18
c00150f2:	5b                   	pop    ebx
c00150f3:	c3                   	ret    

c00150f4 <Krnl::flushEnv()>:
c00150f4:	c3                   	ret    

c00150f5 <Krnl::getProcessTotalEnvCount(Process*)>:
c00150f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150f9:	8b 15 94 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029694
c00150ff:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0015105:	a1 98 96 02 c0       	mov    eax,ds:0xc0029698
c001510a:	8b 00                	mov    eax,DWORD PTR [eax]
c001510c:	03 01                	add    eax,DWORD PTR [ecx]
c001510e:	85 d2                	test   edx,edx
c0015110:	74 02                	je     c0015114 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0015112:	03 02                	add    eax,DWORD PTR [edx]
c0015114:	c3                   	ret    

c0015115 <Krnl::getProcessEnvPair(Process*, int)>:
c0015115:	57                   	push   edi
c0015116:	56                   	push   esi
c0015117:	8b 35 94 96 02 c0    	mov    esi,DWORD PTR ds:0xc0029694
c001511d:	53                   	push   ebx
c001511e:	85 f6                	test   esi,esi
c0015120:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015124:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015128:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001512e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015132:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015134:	75 16                	jne    c001514c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0015136:	39 c2                	cmp    edx,eax
c0015138:	7c 16                	jl     c0015150 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001513a:	8b 0d 98 96 02 c0    	mov    ecx,DWORD PTR ds:0xc0029698
c0015140:	8b 31                	mov    esi,DWORD PTR [ecx]
c0015142:	01 c6                	add    esi,eax
c0015144:	39 d6                	cmp    esi,edx
c0015146:	7e 3c                	jle    c0015184 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0015148:	29 c2                	sub    edx,eax
c001514a:	eb 04                	jmp    c0015150 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001514c:	39 c2                	cmp    edx,eax
c001514e:	7d 05                	jge    c0015155 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0015150:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0015153:	eb 20                	jmp    c0015175 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0015155:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015157:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001515a:	39 d1                	cmp    ecx,edx
c001515c:	7e 04                	jle    c0015162 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001515e:	29 c2                	sub    edx,eax
c0015160:	eb 10                	jmp    c0015172 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0015162:	8b 35 98 96 02 c0    	mov    esi,DWORD PTR ds:0xc0029698
c0015168:	03 0e                	add    ecx,DWORD PTR [esi]
c001516a:	39 d1                	cmp    ecx,edx
c001516c:	7e 16                	jle    c0015184 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001516e:	29 c2                	sub    edx,eax
c0015170:	29 fa                	sub    edx,edi
c0015172:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015175:	8d 14 d0             	lea    edx,[eax+edx*8]
c0015178:	8b 02                	mov    eax,DWORD PTR [edx]
c001517a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001517d:	89 03                	mov    DWORD PTR [ebx],eax
c001517f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0015182:	eb 1d                	jmp    c00151a1 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0015184:	83 ec 0c             	sub    esp,0xc
c0015187:	68 cb 66 02 c0       	push   0xc00266cb
c001518c:	e8 18 00 00 00       	call   c00151a9 <Krnl::panic(char const*)>
c0015191:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0015197:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001519e:	83 c4 10             	add    esp,0x10
c00151a1:	89 d8                	mov    eax,ebx
c00151a3:	5b                   	pop    ebx
c00151a4:	5e                   	pop    esi
c00151a5:	5f                   	pop    edi
c00151a6:	c2 04 00             	ret    0x4

c00151a9 <Krnl::panic(char const*)>:
c00151a9:	53                   	push   ebx
c00151aa:	83 ec 10             	sub    esp,0x10
c00151ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00151b1:	fa                   	cli    
c00151b2:	c6 05 a4 96 02 c0 01 	mov    BYTE PTR ds:0xc00296a4,0x1
c00151b9:	53                   	push   ebx
c00151ba:	68 e5 66 02 c0       	push   0xc00266e5
c00151bf:	e8 03 7f ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	a1 e8 91 02 c0       	mov    eax,ds:0xc00291e8
c00151cc:	85 c0                	test   eax,eax
c00151ce:	74 18                	je     c00151e8 <Krnl::panic(char const*)+0x3f>
c00151d0:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c00151d5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00151db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00151de:	0f 22 d8             	mov    cr3,eax
c00151e1:	b8 00 50 00 00       	mov    eax,0x5000
c00151e6:	ff d0                	call   eax
c00151e8:	51                   	push   ecx
c00151e9:	6a 01                	push   0x1
c00151eb:	6a 0f                	push   0xf
c00151ed:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00151f3:	e8 3c 5b ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151f8:	58                   	pop    eax
c00151f9:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00151ff:	e8 52 60 ff ff       	call   c000b256 <VgaText::clearScreen()>
c0015204:	58                   	pop    eax
c0015205:	5a                   	pop    edx
c0015206:	68 3c 67 02 c0       	push   0xc002673c
c001520b:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015211:	e8 5e 5b ff ff       	call   c000ad74 <VgaText::setTitle(char*)>
c0015216:	83 c4 0c             	add    esp,0xc
c0015219:	6a 01                	push   0x1
c001521b:	6a 0f                	push   0xf
c001521d:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015223:	e8 0c 5b ff ff       	call   c000ad34 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015228:	59                   	pop    ecx
c0015229:	58                   	pop    eax
c001522a:	68 fe 66 02 c0       	push   0xc00266fe
c001522f:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015235:	e8 a8 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001523a:	58                   	pop    eax
c001523b:	5a                   	pop    edx
c001523c:	68 88 67 02 c0       	push   0xc0026788
c0015241:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015247:	e8 96 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001524c:	59                   	pop    ecx
c001524d:	58                   	pop    eax
c001524e:	68 1a 67 02 c0       	push   0xc002671a
c0015253:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015259:	e8 84 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001525e:	58                   	pop    eax
c001525f:	5a                   	pop    edx
c0015260:	53                   	push   ebx
c0015261:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015267:	e8 76 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001526c:	59                   	pop    ecx
c001526d:	5b                   	pop    ebx
c001526e:	68 3a 67 02 c0       	push   0xc002673a
c0015273:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015279:	e8 64 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001527e:	58                   	pop    eax
c001527f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015283:	e8 51 32 00 00       	call   c00184d9 <Thr::getDriverNameFromAddress(unsigned long)>
c0015288:	83 c4 10             	add    esp,0x10
c001528b:	89 c3                	mov    ebx,eax
c001528d:	85 c0                	test   eax,eax
c001528f:	0f 84 34 01 00 00    	je     c00153c9 <Krnl::panic(char const*)+0x220>
c0015295:	83 ec 08             	sub    esp,0x8
c0015298:	68 c4 67 02 c0       	push   0xc00267c4
c001529d:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152a3:	e8 3a 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152a8:	59                   	pop    ecx
c00152a9:	58                   	pop    eax
c00152aa:	68 1a 67 02 c0       	push   0xc002671a
c00152af:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152b5:	e8 28 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152ba:	58                   	pop    eax
c00152bb:	5a                   	pop    edx
c00152bc:	53                   	push   ebx
c00152bd:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152c3:	e8 1a 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	83 ec 08             	sub    esp,0x8
c00152ce:	68 39 67 02 c0       	push   0xc0026739
c00152d3:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152d9:	e8 04 61 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152de:	58                   	pop    eax
c00152df:	5a                   	pop    edx
c00152e0:	68 1c 68 02 c0       	push   0xc002681c
c00152e5:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152eb:	e8 f2 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00152f0:	59                   	pop    ecx
c00152f1:	5b                   	pop    ebx
c00152f2:	68 5c 68 02 c0       	push   0xc002685c
c00152f7:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00152fd:	e8 e0 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015302:	58                   	pop    eax
c0015303:	5a                   	pop    edx
c0015304:	68 25 67 02 c0       	push   0xc0026725
c0015309:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001530f:	e8 ce 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015314:	59                   	pop    ecx
c0015315:	5b                   	pop    ebx
c0015316:	68 a0 68 02 c0       	push   0xc00268a0
c001531b:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015321:	e8 bc 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015326:	58                   	pop    eax
c0015327:	5a                   	pop    edx
c0015328:	68 3d 67 02 c0       	push   0xc002673d
c001532d:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015333:	e8 aa 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015338:	0f 20 c0             	mov    eax,cr0
c001533b:	59                   	pop    ecx
c001533c:	5b                   	pop    ebx
c001533d:	50                   	push   eax
c001533e:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015344:	e8 53 60 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c0015349:	58                   	pop    eax
c001534a:	5a                   	pop    edx
c001534b:	68 47 67 02 c0       	push   0xc0026747
c0015350:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015356:	e8 87 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001535b:	0f 20 d0             	mov    eax,cr2
c001535e:	59                   	pop    ecx
c001535f:	5b                   	pop    ebx
c0015360:	50                   	push   eax
c0015361:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015367:	e8 30 60 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c001536c:	58                   	pop    eax
c001536d:	5a                   	pop    edx
c001536e:	68 51 67 02 c0       	push   0xc0026751
c0015373:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015379:	e8 64 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c001537e:	0f 20 d8             	mov    eax,cr3
c0015381:	59                   	pop    ecx
c0015382:	5b                   	pop    ebx
c0015383:	50                   	push   eax
c0015384:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001538a:	e8 0d 60 ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c001538f:	58                   	pop    eax
c0015390:	5a                   	pop    edx
c0015391:	68 64 67 02 c0       	push   0xc0026764
c0015396:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c001539c:	e8 41 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153a1:	0f 20 e0             	mov    eax,cr4
c00153a4:	59                   	pop    ecx
c00153a5:	5b                   	pop    ebx
c00153a6:	50                   	push   eax
c00153a7:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00153ad:	e8 ea 5f ff ff       	call   c000b39c <VgaText::putx(unsigned int)>
c00153b2:	58                   	pop    eax
c00153b3:	5a                   	pop    edx
c00153b4:	68 6e 67 02 c0       	push   0xc002676e
c00153b9:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00153bf:	e8 1e 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153c4:	83 c4 10             	add    esp,0x10
c00153c7:	eb fe                	jmp    c00153c7 <Krnl::panic(char const*)+0x21e>
c00153c9:	51                   	push   ecx
c00153ca:	51                   	push   ecx
c00153cb:	68 f0 67 02 c0       	push   0xc00267f0
c00153d0:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00153d6:	e8 07 60 ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153db:	5b                   	pop    ebx
c00153dc:	58                   	pop    eax
c00153dd:	68 1a 67 02 c0       	push   0xc002671a
c00153e2:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c00153e8:	e8 f5 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c00153ed:	58                   	pop    eax
c00153ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153f3:	5a                   	pop    edx
c00153f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153f7:	83 c0 0c             	add    eax,0xc
c00153fa:	50                   	push   eax
c00153fb:	ff 35 44 8c 02 c0    	push   DWORD PTR ds:0xc0028c44
c0015401:	e8 dc 5f ff ff       	call   c000b3e2 <VgaText::puts(char const*)>
c0015406:	83 c4 10             	add    esp,0x10
c0015409:	e9 bd fe ff ff       	jmp    c00152cb <Krnl::panic(char const*)+0x122>

c001540e <Krnl::powerThread(void*)>:
c001540e:	53                   	push   ebx
c001540f:	83 ec 08             	sub    esp,0x8
c0015412:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0015417:	48                   	dec    eax
c0015418:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001541d:	75 01                	jne    c0015420 <Krnl::powerThread(void*)+0x12>
c001541f:	fb                   	sti    
c0015420:	52                   	push   edx
c0015421:	52                   	push   edx
c0015422:	ff 35 04 97 02 c0    	push   DWORD PTR ds:0xc0029704
c0015428:	68 c6 68 02 c0       	push   0xc00268c6
c001542d:	e8 95 7c ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0015432:	59                   	pop    ecx
c0015433:	8b 1d f4 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f4
c0015439:	58                   	pop    eax
c001543a:	c6 05 c0 96 02 c0 00 	mov    BYTE PTR ds:0xc00296c0,0x0
c0015441:	53                   	push   ebx
c0015442:	68 d0 68 02 c0       	push   0xc00268d0
c0015447:	e8 7b 7c ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001544c:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0015453:	e8 c0 3d 00 00       	call   c0019218 <sleep(unsigned int)>
c0015458:	a1 04 97 02 c0       	mov    eax,ds:0xc0029704
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	83 c0 0a             	add    eax,0xa
c0015463:	85 db                	test   ebx,ebx
c0015465:	a3 04 97 02 c0       	mov    ds:0xc0029704,eax
c001546a:	74 b4                	je     c0015420 <Krnl::powerThread(void*)+0x12>
c001546c:	39 d8                	cmp    eax,ebx
c001546e:	7e b0                	jle    c0015420 <Krnl::powerThread(void*)+0x12>
c0015470:	83 ec 0c             	sub    esp,0xc
c0015473:	68 e8 68 02 c0       	push   0xc00268e8
c0015478:	e8 4a 7c ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001547d:	58                   	pop    eax
c001547e:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c0015484:	e8 89 3e ff ff       	call   c0009312 <Computer::sleep()>
c0015489:	83 c4 10             	add    esp,0x10
c001548c:	eb 92                	jmp    c0015420 <Krnl::powerThread(void*)+0x12>

c001548e <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001548e:	57                   	push   edi
c001548f:	b9 09 00 00 00       	mov    ecx,0x9
c0015494:	56                   	push   esi
c0015495:	bf e0 96 02 c0       	mov    edi,0xc00296e0
c001549a:	fc                   	cld    
c001549b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001549f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00154a1:	5e                   	pop    esi
c00154a2:	5f                   	pop    edi
c00154a3:	c3                   	ret    

c00154a4 <Krnl::userIOReceived()>:
c00154a4:	c7 05 04 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029704,0x0
c00154ae:	c3                   	ret    

c00154af <Krnl::handlePowerButton()>:
c00154af:	83 ec 0c             	sub    esp,0xc
c00154b2:	a1 e0 96 02 c0       	mov    eax,ds:0xc00296e0
c00154b7:	83 f8 02             	cmp    eax,0x2
c00154ba:	75 10                	jne    c00154cc <Krnl::handlePowerButton()+0x1d>
c00154bc:	83 ec 0c             	sub    esp,0xc
c00154bf:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c00154c5:	e8 18 3e ff ff       	call   c00092e2 <Computer::shutdown()>
c00154ca:	eb 11                	jmp    c00154dd <Krnl::handlePowerButton()+0x2e>
c00154cc:	48                   	dec    eax
c00154cd:	75 11                	jne    c00154e0 <Krnl::handlePowerButton()+0x31>
c00154cf:	83 ec 0c             	sub    esp,0xc
c00154d2:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c00154d8:	e8 35 3e ff ff       	call   c0009312 <Computer::sleep()>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	83 c4 0c             	add    esp,0xc
c00154e3:	c3                   	ret    

c00154e4 <Krnl::handleSleepButton()>:
c00154e4:	83 ec 0c             	sub    esp,0xc
c00154e7:	a1 e4 96 02 c0       	mov    eax,ds:0xc00296e4
c00154ec:	83 f8 02             	cmp    eax,0x2
c00154ef:	75 10                	jne    c0015501 <Krnl::handleSleepButton()+0x1d>
c00154f1:	83 ec 0c             	sub    esp,0xc
c00154f4:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c00154fa:	e8 e3 3d ff ff       	call   c00092e2 <Computer::shutdown()>
c00154ff:	eb 11                	jmp    c0015512 <Krnl::handleSleepButton()+0x2e>
c0015501:	48                   	dec    eax
c0015502:	75 11                	jne    c0015515 <Krnl::handleSleepButton()+0x31>
c0015504:	83 ec 0c             	sub    esp,0xc
c0015507:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c001550d:	e8 00 3e ff ff       	call   c0009312 <Computer::sleep()>
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	83 c4 0c             	add    esp,0xc
c0015518:	c3                   	ret    

c0015519 <Krnl::setupPowerManager()>:
c0015519:	83 ec 0c             	sub    esp,0xc
c001551c:	c7 05 04 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029704,0x0
c0015526:	68 f0 00 00 00       	push   0xf0
c001552b:	c6 05 c0 96 02 c0 00 	mov    BYTE PTR ds:0xc00296c0,0x0
c0015532:	6a 00                	push   0x0
c0015534:	68 0e 54 01 c0       	push   0xc001540e
c0015539:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c001553f:	e8 b0 37 00 00       	call   c0018cf4 <Process::createThread(void (*)(void*), void*, int)>
c0015544:	c7 05 e0 96 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00296e0,0x2
c001554e:	c7 05 e4 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296e4,0x1
c0015558:	c7 05 e8 96 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00296e8,0x3
c0015562:	c7 05 ec 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296ec,0x0
c001556c:	c7 05 f8 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296f8,0x0
c0015576:	c7 05 f0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296f0,0x0
c0015580:	c7 05 fc 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296fc,0x0
c001558a:	c7 05 f4 96 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00296f4,0x3c
c0015594:	c7 05 00 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029700,0x3c
c001559e:	83 c4 1c             	add    esp,0x1c
c00155a1:	c3                   	ret    

c00155a2 <Krnl::initRNG()>:
c00155a2:	56                   	push   esi
c00155a3:	53                   	push   ebx
c00155a4:	52                   	push   edx
c00155a5:	80 3d 10 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029710,0x0
c00155ac:	74 15                	je     c00155c3 <Krnl::initRNG()+0x21>
c00155ae:	83 ec 0c             	sub    esp,0xc
c00155b1:	68 f5 68 02 c0       	push   0xc00268f5
c00155b6:	e8 ee fb ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00155bb:	83 c4 10             	add    esp,0x10
c00155be:	e9 b4 00 00 00       	jmp    c0015677 <Krnl::initRNG()+0xd5>
c00155c3:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00155c8:	c7 05 08 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029708,0x0
c00155d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00155d8:	c7 05 0c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002970c,0x0
c00155e2:	f6 80 90 11 00 00 01 	test   BYTE PTR [eax+0x1190],0x1
c00155e9:	74 1f                	je     c001560a <Krnl::initRNG()+0x68>
c00155eb:	e8 29 ac fe ff       	call   c0000219 <getRDRAND>
c00155f0:	c7 05 08 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029708,0x0
c00155fa:	a3 0c 97 02 c0       	mov    ds:0xc002970c,eax
c00155ff:	e8 15 ac fe ff       	call   c0000219 <getRDRAND>
c0015604:	09 05 08 97 02 c0    	or     DWORD PTR ds:0xc0029708,eax
c001560a:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001560f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015615:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001561c:	74 10                	je     c001562e <Krnl::initRNG()+0x8c>
c001561e:	0f 31                	rdtsc  
c0015620:	89 c1                	mov    ecx,eax
c0015622:	31 15 0c 97 02 c0    	xor    DWORD PTR ds:0xc002970c,edx
c0015628:	31 0d 08 97 02 c0    	xor    DWORD PTR ds:0xc0029708,ecx
c001562e:	8b 0d 08 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029708
c0015634:	8b 1d 0c 97 02 c0    	mov    ebx,DWORD PTR ds:0xc002970c
c001563a:	89 c8                	mov    eax,ecx
c001563c:	8b 35 ec 91 02 c0    	mov    esi,DWORD PTR ds:0xc00291ec
c0015642:	0f a4 d9 11          	shld   ecx,ebx,0x11
c0015646:	c6 05 10 97 02 c0 01 	mov    BYTE PTR ds:0xc0029710,0x1
c001564d:	31 ce                	xor    esi,ecx
c001564f:	0f a4 c3 11          	shld   ebx,eax,0x11
c0015653:	89 f0                	mov    eax,esi
c0015655:	89 da                	mov    edx,ebx
c0015657:	0f ac d0 1b          	shrd   eax,edx,0x1b
c001565b:	0f ac f2 1b          	shrd   edx,esi,0x1b
c001565f:	35 f6 5d 72 45       	xor    eax,0x45725df6
c0015664:	89 d1                	mov    ecx,edx
c0015666:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c001566b:	89 c8                	mov    eax,ecx
c001566d:	35 89 c3 8d 30       	xor    eax,0x308dc389
c0015672:	a3 0c 97 02 c0       	mov    ds:0xc002970c,eax
c0015677:	58                   	pop    eax
c0015678:	5b                   	pop    ebx
c0015679:	5e                   	pop    esi
c001567a:	c3                   	ret    

c001567b <Krnl::rand()>:
c001567b:	53                   	push   ebx
c001567c:	83 ec 08             	sub    esp,0x8
c001567f:	80 3d 10 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029710,0x0
c0015686:	75 10                	jne    c0015698 <Krnl::rand()+0x1d>
c0015688:	83 ec 0c             	sub    esp,0xc
c001568b:	68 0c 69 02 c0       	push   0xc002690c
c0015690:	e8 14 fb ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0015695:	83 c4 10             	add    esp,0x10
c0015698:	69 05 08 97 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029708,0x2875
c00156a2:	69 0d 0c 97 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002970c,0xa2e7b175
c00156ac:	01 c1                	add    ecx,eax
c00156ae:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00156b3:	f7 25 08 97 02 c0    	mul    DWORD PTR ds:0xc0029708
c00156b9:	01 ca                	add    edx,ecx
c00156bb:	05 ef 04 b5 00       	add    eax,0xb504ef
c00156c0:	83 d2 00             	adc    edx,0x0
c00156c3:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00156c8:	0f b7 da             	movzx  ebx,dx
c00156cb:	89 1d 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,ebx
c00156d1:	89 da                	mov    edx,ebx
c00156d3:	83 c4 08             	add    esp,0x8
c00156d6:	0f ac d0 10          	shrd   eax,edx,0x10
c00156da:	5b                   	pop    ebx
c00156db:	c3                   	ret    

c00156dc <Net::switchEndian16(unsigned short)>:
c00156dc:	83 ec 04             	sub    esp,0x4
c00156df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156e3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00156e7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00156eb:	c1 f8 08             	sar    eax,0x8
c00156ee:	89 c2                	mov    edx,eax
c00156f0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00156f4:	c1 e0 08             	shl    eax,0x8
c00156f7:	09 d0                	or     eax,edx
c00156f9:	83 c4 04             	add    esp,0x4
c00156fc:	c3                   	ret    
c00156fd:	8d 76 00             	lea    esi,[esi+0x0]

c0015700 <Net::switchEndian32(unsigned int)>:
c0015700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015704:	c1 e8 18             	shr    eax,0x18
c0015707:	89 c2                	mov    edx,eax
c0015709:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001570d:	c1 e0 08             	shl    eax,0x8
c0015710:	25 00 00 ff 00       	and    eax,0xff0000
c0015715:	09 c2                	or     edx,eax
c0015717:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001571b:	c1 e8 08             	shr    eax,0x8
c001571e:	25 00 ff 00 00       	and    eax,0xff00
c0015723:	09 c2                	or     edx,eax
c0015725:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015729:	c1 e0 18             	shl    eax,0x18
c001572c:	09 d0                	or     eax,edx
c001572e:	c3                   	ret    
c001572f:	90                   	nop

c0015730 <Net::crc32Calc(unsigned char*, int)>:
c0015730:	83 ec 10             	sub    esp,0x10
c0015733:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015738:	75 0a                	jne    c0015744 <Net::crc32Calc(unsigned char*, int)+0x14>
c001573a:	b8 00 00 00 00       	mov    eax,0x0
c001573f:	e9 8c 00 00 00       	jmp    c00157d0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015744:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015749:	7f 09                	jg     c0015754 <Net::crc32Calc(unsigned char*, int)+0x24>
c001574b:	b8 00 00 00 00       	mov    eax,0x0
c0015750:	eb 7e                	jmp    c00157d0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015752:	66 90                	xchg   ax,ax
c0015754:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001575c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015768:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001576c:	7d 5a                	jge    c00157c8 <Net::crc32Calc(unsigned char*, int)+0x98>
c001576e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015772:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015776:	01 d0                	add    eax,edx
c0015778:	8a 00                	mov    al,BYTE PTR [eax]
c001577a:	0f b6 c0             	movzx  eax,al
c001577d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0015781:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015789:	8d 76 00             	lea    esi,[esi+0x0]
c001578c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0015791:	7f 2d                	jg     c00157c0 <Net::crc32Calc(unsigned char*, int)+0x90>
c0015793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015797:	83 e0 01             	and    eax,0x1
c001579a:	74 10                	je     c00157ac <Net::crc32Calc(unsigned char*, int)+0x7c>
c001579c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157a0:	d1 e8                	shr    eax,1
c00157a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00157a7:	eb 0b                	jmp    c00157b4 <Net::crc32Calc(unsigned char*, int)+0x84>
c00157a9:	8d 76 00             	lea    esi,[esi+0x0]
c00157ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157b0:	d1 e8                	shr    eax,1
c00157b2:	66 90                	xchg   ax,ax
c00157b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00157bc:	eb ce                	jmp    c001578c <Net::crc32Calc(unsigned char*, int)+0x5c>
c00157be:	66 90                	xchg   ax,ax
c00157c0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00157c4:	eb 9e                	jmp    c0015764 <Net::crc32Calc(unsigned char*, int)+0x34>
c00157c6:	66 90                	xchg   ax,ax
c00157c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157cc:	f7 d0                	not    eax
c00157ce:	66 90                	xchg   ax,ax
c00157d0:	83 c4 10             	add    esp,0x10
c00157d3:	c3                   	ret    

c00157d4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00157d4:	57                   	push   edi
c00157d5:	56                   	push   esi
c00157d6:	53                   	push   ebx
c00157d7:	83 ec 60             	sub    esp,0x60
c00157da:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00157e1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00157e5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00157ed:	8d 76 00             	lea    esi,[esi+0x0]
c00157f0:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00157f5:	7f 1d                	jg     c0015814 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00157f7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00157fe:	8d 50 01             	lea    edx,[eax+0x1]
c0015801:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015808:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001580b:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001580f:	eb df                	jmp    c00157f0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0015811:	8d 76 00             	lea    esi,[esi+0x0]
c0015814:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001581b:	8d 50 01             	lea    edx,[eax+0x1]
c001581e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015825:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0015828:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001582f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015833:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0015837:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001583b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0015843:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015847:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001584b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001584f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015853:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015857:	89 c6                	mov    esi,eax
c0015859:	89 d7                	mov    edi,edx
c001585b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001585d:	89 c8                	mov    eax,ecx
c001585f:	89 fa                	mov    edx,edi
c0015861:	89 f3                	mov    ebx,esi
c0015863:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015867:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001586b:	89 04 24             	mov    DWORD PTR [esp],eax
c001586e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015876:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001587d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015881:	8d 44 24 78          	lea    eax,[esp+0x78]
c0015885:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015889:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015891:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015895:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001589d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00158a1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00158a5:	89 c6                	mov    esi,eax
c00158a7:	89 d7                	mov    edi,edx
c00158a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158ab:	89 c8                	mov    eax,ecx
c00158ad:	89 fa                	mov    edx,edi
c00158af:	89 f3                	mov    ebx,esi
c00158b1:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00158b5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00158b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00158bd:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00158c5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158cc:	0f b7 c0             	movzx  eax,ax
c00158cf:	c1 f8 08             	sar    eax,0x8
c00158d2:	89 c1                	mov    ecx,eax
c00158d4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158db:	8d 50 01             	lea    edx,[eax+0x1]
c00158de:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00158e5:	88 ca                	mov    dl,cl
c00158e7:	88 10                	mov    BYTE PTR [eax],dl
c00158e9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00158f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00158fa:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0015901:	88 10                	mov    BYTE PTR [eax],dl
c0015903:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015907:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001590b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0015912:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0015916:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001591a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001591e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015922:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015926:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001592a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001592e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015932:	89 c6                	mov    esi,eax
c0015934:	89 d7                	mov    edi,edx
c0015936:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015938:	89 c8                	mov    eax,ecx
c001593a:	89 fa                	mov    edx,edi
c001593c:	89 f3                	mov    ebx,esi
c001593e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015942:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015946:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001594a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001594e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015955:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001595c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0015960:	50                   	push   eax
c0015961:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015965:	e8 c6 fd ff ff       	call   c0015730 <Net::crc32Calc(unsigned char*, int)>
c001596a:	83 c4 08             	add    esp,0x8
c001596d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015971:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015975:	c1 e8 18             	shr    eax,0x18
c0015978:	89 c1                	mov    ecx,eax
c001597a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015981:	8d 50 01             	lea    edx,[eax+0x1]
c0015984:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001598b:	88 ca                	mov    dl,cl
c001598d:	88 10                	mov    BYTE PTR [eax],dl
c001598f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015993:	c1 e8 10             	shr    eax,0x10
c0015996:	89 c1                	mov    ecx,eax
c0015998:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001599f:	8d 50 01             	lea    edx,[eax+0x1]
c00159a2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159a9:	88 ca                	mov    dl,cl
c00159ab:	88 10                	mov    BYTE PTR [eax],dl
c00159ad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00159b1:	c1 e8 08             	shr    eax,0x8
c00159b4:	89 c1                	mov    ecx,eax
c00159b6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159bd:	8d 50 01             	lea    edx,[eax+0x1]
c00159c0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159c7:	88 ca                	mov    dl,cl
c00159c9:	88 10                	mov    BYTE PTR [eax],dl
c00159cb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159d2:	8d 50 01             	lea    edx,[eax+0x1]
c00159d5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00159dc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00159e0:	88 10                	mov    BYTE PTR [eax],dl
c00159e2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00159e6:	83 c4 60             	add    esp,0x60
c00159e9:	5b                   	pop    ebx
c00159ea:	5e                   	pop    esi
c00159eb:	5f                   	pop    edi
c00159ec:	c3                   	ret    
c00159ed:	8d 76 00             	lea    esi,[esi+0x0]

c00159f0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00159f0:	57                   	push   edi
c00159f1:	56                   	push   esi
c00159f2:	53                   	push   ebx
c00159f3:	83 ec 70             	sub    esp,0x70
c00159f6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00159fd:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0015a01:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0015a09:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a10:	83 c0 0e             	add    eax,0xe
c0015a13:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015a17:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015a22:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015a2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015a32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a3a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015a3e:	89 c6                	mov    esi,eax
c0015a40:	89 d7                	mov    edi,edx
c0015a42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a44:	89 c8                	mov    eax,ecx
c0015a46:	89 fa                	mov    edx,edi
c0015a48:	89 f3                	mov    ebx,esi
c0015a4a:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015a4e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015a52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015a56:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015a5e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015a65:	83 c0 08             	add    eax,0x8
c0015a68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015a6c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a73:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015a77:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0015a7f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015a83:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015a87:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a8b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015a8f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015a93:	89 c6                	mov    esi,eax
c0015a95:	89 d7                	mov    edi,edx
c0015a97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a99:	89 c8                	mov    eax,ecx
c0015a9b:	89 fa                	mov    edx,edi
c0015a9d:	89 f3                	mov    ebx,esi
c0015a9f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015aa3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015aa7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015aab:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015ab3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015aba:	8d 50 01             	lea    edx,[eax+0x1]
c0015abd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015ac4:	8a 00                	mov    al,BYTE PTR [eax]
c0015ac6:	0f b6 c0             	movzx  eax,al
c0015ac9:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0015ace:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015ad5:	8d 50 01             	lea    edx,[eax+0x1]
c0015ad8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015adf:	8a 00                	mov    al,BYTE PTR [eax]
c0015ae1:	0f b6 c0             	movzx  eax,al
c0015ae4:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015ae9:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015aee:	c1 e0 08             	shl    eax,0x8
c0015af1:	89 c2                	mov    edx,eax
c0015af3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015af7:	09 d0                	or     eax,edx
c0015af9:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015b00:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015b04:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015b0c:	75 46                	jne    c0015b54 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015b0e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b15:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b18:	66 3d dc 05          	cmp    ax,0x5dc
c0015b1c:	77 16                	ja     c0015b34 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015b1e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b25:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015b28:	0f b7 c0             	movzx  eax,ax
c0015b2b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015b32:	eb 20                	jmp    c0015b54 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015b34:	83 ec 0c             	sub    esp,0xc
c0015b37:	68 28 69 02 c0       	push   0xc0026928
c0015b3c:	e8 86 75 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015b4b:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015b4f:	e9 18 01 00 00       	jmp    c0015c6c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015b54:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015b5b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015b62:	8b 12                	mov    edx,DWORD PTR [edx]
c0015b64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015b68:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015b6f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015b73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015b77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015b87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b8b:	89 c6                	mov    esi,eax
c0015b8d:	89 d7                	mov    edi,edx
c0015b8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015b91:	89 c8                	mov    eax,ecx
c0015b93:	89 fa                	mov    edx,edi
c0015b95:	89 f3                	mov    ebx,esi
c0015b97:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015b9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ba2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015ba9:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015bb0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0015bba:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015bc1:	8a 00                	mov    al,BYTE PTR [eax]
c0015bc3:	0f b6 c0             	movzx  eax,al
c0015bc6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0015bca:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015bd1:	8d 50 01             	lea    edx,[eax+0x1]
c0015bd4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015bdb:	8a 00                	mov    al,BYTE PTR [eax]
c0015bdd:	0f b6 c0             	movzx  eax,al
c0015be0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015be4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015beb:	8d 50 01             	lea    edx,[eax+0x1]
c0015bee:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015bf5:	8a 00                	mov    al,BYTE PTR [eax]
c0015bf7:	0f b6 c0             	movzx  eax,al
c0015bfa:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015bfe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c05:	8d 50 01             	lea    edx,[eax+0x1]
c0015c08:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c0f:	8a 00                	mov    al,BYTE PTR [eax]
c0015c11:	0f b6 c0             	movzx  eax,al
c0015c14:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015c18:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015c1c:	c1 e0 18             	shl    eax,0x18
c0015c1f:	89 c2                	mov    edx,eax
c0015c21:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015c25:	c1 e0 10             	shl    eax,0x10
c0015c28:	09 c2                	or     edx,eax
c0015c2a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015c2e:	c1 e0 08             	shl    eax,0x8
c0015c31:	09 d0                	or     eax,edx
c0015c33:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015c37:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015c3b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c42:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015c46:	83 e8 04             	sub    eax,0x4
c0015c49:	83 ec 08             	sub    esp,0x8
c0015c4c:	50                   	push   eax
c0015c4d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015c51:	e8 da fa ff ff       	call   c0015730 <Net::crc32Calc(unsigned char*, int)>
c0015c56:	83 c4 10             	add    esp,0x10
c0015c59:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015c5d:	0f 94 c2             	sete   dl
c0015c60:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015c67:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015c6a:	90                   	nop
c0015c6b:	90                   	nop
c0015c6c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015c73:	83 c4 70             	add    esp,0x70
c0015c76:	5b                   	pop    ebx
c0015c77:	5e                   	pop    esi
c0015c78:	5f                   	pop    edi
c0015c79:	c2 04 00             	ret    0x4

c0015c7c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015c7c:	55                   	push   ebp
c0015c7d:	57                   	push   edi
c0015c7e:	56                   	push   esi
c0015c7f:	53                   	push   ebx
c0015c80:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015c86:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015c8d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015c8f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015c92:	80 fb 40             	cmp    bl,0x40
c0015c95:	75 1b                	jne    c0015cb2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015c97:	8a 16                	mov    dl,BYTE PTR [esi]
c0015c99:	84 d2                	test   dl,dl
c0015c9b:	0f 84 f1 00 00 00    	je     c0015d92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015ca1:	8d 46 01             	lea    eax,[esi+0x1]
c0015ca4:	80 fa 3a             	cmp    dl,0x3a
c0015ca7:	74 04                	je     c0015cad <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015ca9:	89 c6                	mov    esi,eax
c0015cab:	eb ea                	jmp    c0015c97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015cad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015cb0:	89 c6                	mov    esi,eax
c0015cb2:	50                   	push   eax
c0015cb3:	6a 40                	push   0x40
c0015cb5:	6a 00                	push   0x0
c0015cb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015cbb:	50                   	push   eax
c0015cbc:	e8 d3 a9 fe ff       	call   c0000694 <memset>
c0015cc1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015cc8:	31 c0                	xor    eax,eax
c0015cca:	83 c4 10             	add    esp,0x10
c0015ccd:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015ccf:	84 c9                	test   cl,cl
c0015cd1:	0f 84 bb 00 00 00    	je     c0015d92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015cd7:	3d c7 00 00 00       	cmp    eax,0xc7
c0015cdc:	0f 8f b0 00 00 00    	jg     c0015d92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015ce2:	80 f9 0a             	cmp    cl,0xa
c0015ce5:	0f 85 98 00 00 00    	jne    c0015d83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015ceb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015cf0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015cf4:	a8 df                	test   al,0xdf
c0015cf6:	0f 94 c1             	sete   cl
c0015cf9:	3c 23                	cmp    al,0x23
c0015cfb:	0f 94 c2             	sete   dl
c0015cfe:	08 d1                	or     cl,dl
c0015d00:	75 4a                	jne    c0015d4c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d02:	8d 50 f7             	lea    edx,[eax-0x9]
c0015d05:	80 fa 01             	cmp    dl,0x1
c0015d08:	76 42                	jbe    c0015d4c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d0a:	3c 5b                	cmp    al,0x5b
c0015d0c:	75 42                	jne    c0015d50 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015d0e:	80 fb 40             	cmp    bl,0x40
c0015d11:	75 39                	jne    c0015d4c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d13:	83 ec 0c             	sub    esp,0xc
c0015d16:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015d1a:	52                   	push   edx
c0015d1b:	e8 90 a9 fe ff       	call   c00006b0 <strlen>
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	83 f8 3f             	cmp    eax,0x3f
c0015d26:	77 6a                	ja     c0015d92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d28:	50                   	push   eax
c0015d29:	50                   	push   eax
c0015d2a:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015d2e:	52                   	push   edx
c0015d2f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d33:	52                   	push   edx
c0015d34:	e8 17 aa fe ff       	call   c0000750 <strcpy>
c0015d39:	58                   	pop    eax
c0015d3a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d3e:	52                   	push   edx
c0015d3f:	e8 6c a9 fe ff       	call   c00006b0 <strlen>
c0015d44:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015d49:	83 c4 10             	add    esp,0x10
c0015d4c:	31 d2                	xor    edx,edx
c0015d4e:	eb 3a                	jmp    c0015d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015d50:	80 fb 40             	cmp    bl,0x40
c0015d53:	74 06                	je     c0015d5b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015d55:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015d59:	eb 20                	jmp    c0015d7b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015d5b:	50                   	push   eax
c0015d5c:	50                   	push   eax
c0015d5d:	55                   	push   ebp
c0015d5e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d62:	50                   	push   eax
c0015d63:	e8 74 aa fe ff       	call   c00007dc <strcmp>
c0015d68:	83 c4 10             	add    esp,0x10
c0015d6b:	85 c0                	test   eax,eax
c0015d6d:	75 dd                	jne    c0015d4c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d6f:	eb e4                	jmp    c0015d55 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015d71:	8d 50 01             	lea    edx,[eax+0x1]
c0015d74:	80 f9 3d             	cmp    cl,0x3d
c0015d77:	74 1d                	je     c0015d96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015d79:	89 d0                	mov    eax,edx
c0015d7b:	8a 08                	mov    cl,BYTE PTR [eax]
c0015d7d:	84 c9                	test   cl,cl
c0015d7f:	75 f0                	jne    c0015d71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015d81:	eb 0f                	jmp    c0015d92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d83:	8d 50 01             	lea    edx,[eax+0x1]
c0015d86:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015d8a:	47                   	inc    edi
c0015d8b:	89 d0                	mov    eax,edx
c0015d8d:	e9 3b ff ff ff       	jmp    c0015ccd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015d92:	31 c0                	xor    eax,eax
c0015d94:	eb 33                	jmp    c0015dc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015d96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015d9a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015d9d:	50                   	push   eax
c0015d9e:	50                   	push   eax
c0015d9f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015da3:	50                   	push   eax
c0015da4:	56                   	push   esi
c0015da5:	e8 32 aa fe ff       	call   c00007dc <strcmp>
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	85 c0                	test   eax,eax
c0015daf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015db3:	75 97                	jne    c0015d4c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015db5:	51                   	push   ecx
c0015db6:	51                   	push   ecx
c0015db7:	52                   	push   edx
c0015db8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015dbf:	e8 8c a9 fe ff       	call   c0000750 <strcpy>
c0015dc4:	83 c4 10             	add    esp,0x10
c0015dc7:	b0 01                	mov    al,0x1
c0015dc9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015dcf:	5b                   	pop    ebx
c0015dd0:	5e                   	pop    esi
c0015dd1:	5f                   	pop    edi
c0015dd2:	5d                   	pop    ebp
c0015dd3:	c3                   	ret    

c0015dd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015dd4:	57                   	push   edi
c0015dd5:	56                   	push   esi
c0015dd6:	53                   	push   ebx
c0015dd7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015ddd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015de4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015deb:	53                   	push   ebx
c0015dec:	e8 bf a8 fe ff       	call   c00006b0 <strlen>
c0015df1:	89 34 24             	mov    DWORD PTR [esp],esi
c0015df4:	89 c7                	mov    edi,eax
c0015df6:	e8 b5 a8 fe ff       	call   c00006b0 <strlen>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015e02:	3d ff 00 00 00       	cmp    eax,0xff
c0015e07:	0f 87 d3 00 00 00    	ja     c0015ee0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015e0d:	57                   	push   edi
c0015e0e:	57                   	push   edi
c0015e0f:	56                   	push   esi
c0015e10:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e14:	56                   	push   esi
c0015e15:	e8 36 a9 fe ff       	call   c0000750 <strcpy>
c0015e1a:	58                   	pop    eax
c0015e1b:	5a                   	pop    edx
c0015e1c:	68 ca 6c 02 c0       	push   0xc0026cca
c0015e21:	56                   	push   esi
c0015e22:	e8 69 aa fe ff       	call   c0000890 <strcat>
c0015e27:	59                   	pop    ecx
c0015e28:	5f                   	pop    edi
c0015e29:	53                   	push   ebx
c0015e2a:	56                   	push   esi
c0015e2b:	e8 60 aa fe ff       	call   c0000890 <strcat>
c0015e30:	58                   	pop    eax
c0015e31:	5a                   	pop    edx
c0015e32:	68 74 69 02 c0       	push   0xc0026974
c0015e37:	56                   	push   esi
c0015e38:	e8 53 aa fe ff       	call   c0000890 <strcat>
c0015e3d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e44:	e8 9e 3f ff ff       	call   c0009de7 <malloc>
c0015e49:	83 c4 0c             	add    esp,0xc
c0015e4c:	89 c3                	mov    ebx,eax
c0015e4e:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0015e54:	56                   	push   esi
c0015e55:	50                   	push   eax
c0015e56:	e8 d7 77 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c0015e5b:	83 c4 10             	add    esp,0x10
c0015e5e:	85 db                	test   ebx,ebx
c0015e60:	74 7e                	je     c0015ee0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015e62:	51                   	push   ecx
c0015e63:	51                   	push   ecx
c0015e64:	6a 01                	push   0x1
c0015e66:	53                   	push   ebx
c0015e67:	e8 a0 78 ff ff       	call   c000d70c <File::open(FileOpenMode)>
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	85 c0                	test   eax,eax
c0015e71:	74 08                	je     c0015e7b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015e73:	83 ec 0c             	sub    esp,0xc
c0015e76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e78:	53                   	push   ebx
c0015e79:	eb 5f                	jmp    c0015eda <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015e7b:	52                   	push   edx
c0015e7c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015e80:	50                   	push   eax
c0015e81:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015e85:	50                   	push   eax
c0015e86:	53                   	push   ebx
c0015e87:	e8 2c 7b ff ff       	call   c000d9b8 <File::stat(unsigned long long*, bool*)>
c0015e8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e90:	83 c4 10             	add    esp,0x10
c0015e93:	89 c1                	mov    ecx,eax
c0015e95:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015e99:	74 31                	je     c0015ecc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015e9b:	83 ec 0c             	sub    esp,0xc
c0015e9e:	50                   	push   eax
c0015e9f:	e8 43 3f ff ff       	call   c0009de7 <malloc>
c0015ea4:	89 c6                	mov    esi,eax
c0015ea6:	58                   	pop    eax
c0015ea7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ea9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015ead:	52                   	push   edx
c0015eae:	56                   	push   esi
c0015eaf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015eb3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015eb7:	53                   	push   ebx
c0015eb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ebb:	83 c4 20             	add    esp,0x20
c0015ebe:	85 c0                	test   eax,eax
c0015ec0:	75 0a                	jne    c0015ecc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015ec2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ec6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015eca:	74 18                	je     c0015ee4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015ecc:	83 ec 0c             	sub    esp,0xc
c0015ecf:	53                   	push   ebx
c0015ed0:	e8 95 78 ff ff       	call   c000d76a <File::close()>
c0015ed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ed7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015eda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015edd:	83 c4 10             	add    esp,0x10
c0015ee0:	31 c0                	xor    eax,eax
c0015ee2:	eb 3b                	jmp    c0015f1f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015ee4:	83 ec 0c             	sub    esp,0xc
c0015ee7:	53                   	push   ebx
c0015ee8:	e8 7d 78 ff ff       	call   c000d76a <File::close()>
c0015eed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015eef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ef2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ef5:	83 c4 0c             	add    esp,0xc
c0015ef8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015eff:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015f06:	56                   	push   esi
c0015f07:	e8 70 fd ff ff       	call   c0015c7c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f0c:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f0f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f13:	e8 df 3e ff ff       	call   c0009df7 <free>
c0015f18:	83 c4 10             	add    esp,0x10
c0015f1b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f1f:	81 c4 20 01 00 00    	add    esp,0x120
c0015f25:	5b                   	pop    ebx
c0015f26:	5e                   	pop    esi
c0015f27:	5f                   	pop    edi
c0015f28:	c3                   	ret    

c0015f29 <Reg::getLine(char*, char*, char*)>:
c0015f29:	57                   	push   edi
c0015f2a:	56                   	push   esi
c0015f2b:	53                   	push   ebx
c0015f2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f30:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015f34:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f38:	57                   	push   edi
c0015f39:	56                   	push   esi
c0015f3a:	53                   	push   ebx
c0015f3b:	68 79 69 02 c0       	push   0xc0026979
c0015f40:	e8 8f fe ff ff       	call   c0015dd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f45:	83 c4 10             	add    esp,0x10
c0015f48:	84 c0                	test   al,al
c0015f4a:	75 10                	jne    c0015f5c <Reg::getLine(char*, char*, char*)+0x33>
c0015f4c:	57                   	push   edi
c0015f4d:	56                   	push   esi
c0015f4e:	53                   	push   ebx
c0015f4f:	68 9e 69 02 c0       	push   0xc002699e
c0015f54:	e8 7b fe ff ff       	call   c0015dd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f59:	83 c4 10             	add    esp,0x10
c0015f5c:	5b                   	pop    ebx
c0015f5d:	5e                   	pop    esi
c0015f5e:	5f                   	pop    edi
c0015f5f:	c3                   	ret    

c0015f60 <Reg::readInt(char*, char*, int*)>:
c0015f60:	55                   	push   ebp
c0015f61:	57                   	push   edi
c0015f62:	56                   	push   esi
c0015f63:	53                   	push   ebx
c0015f64:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015f6a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015f6e:	57                   	push   edi
c0015f6f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f76:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f7d:	e8 a7 ff ff ff       	call   c0015f29 <Reg::getLine(char*, char*, char*)>
c0015f82:	83 c4 10             	add    esp,0x10
c0015f85:	84 c0                	test   al,al
c0015f87:	0f 84 b3 00 00 00    	je     c0016040 <Reg::readInt(char*, char*, int*)+0xe0>
c0015f8d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015f91:	80 fa 2b             	cmp    dl,0x2b
c0015f94:	74 0c                	je     c0015fa2 <Reg::readInt(char*, char*, int*)+0x42>
c0015f96:	80 fa 2d             	cmp    dl,0x2d
c0015f99:	75 0e                	jne    c0015fa9 <Reg::readInt(char*, char*, int*)+0x49>
c0015f9b:	ba 01 00 00 00       	mov    edx,0x1
c0015fa0:	eb 0b                	jmp    c0015fad <Reg::readInt(char*, char*, int*)+0x4d>
c0015fa2:	ba 01 00 00 00       	mov    edx,0x1
c0015fa7:	eb 02                	jmp    c0015fab <Reg::readInt(char*, char*, int*)+0x4b>
c0015fa9:	31 d2                	xor    edx,edx
c0015fab:	31 c0                	xor    eax,eax
c0015fad:	be 0a 00 00 00       	mov    esi,0xa
c0015fb2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015fb7:	75 20                	jne    c0015fd9 <Reg::readInt(char*, char*, int*)+0x79>
c0015fb9:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015fbd:	80 f9 78             	cmp    cl,0x78
c0015fc0:	75 0a                	jne    c0015fcc <Reg::readInt(char*, char*, int*)+0x6c>
c0015fc2:	83 c2 02             	add    edx,0x2
c0015fc5:	be 10 00 00 00       	mov    esi,0x10
c0015fca:	eb 0d                	jmp    c0015fd9 <Reg::readInt(char*, char*, int*)+0x79>
c0015fcc:	80 f9 62             	cmp    cl,0x62
c0015fcf:	75 08                	jne    c0015fd9 <Reg::readInt(char*, char*, int*)+0x79>
c0015fd1:	83 c2 02             	add    edx,0x2
c0015fd4:	be 02 00 00 00       	mov    esi,0x2
c0015fd9:	01 d7                	add    edi,edx
c0015fdb:	31 d2                	xor    edx,edx
c0015fdd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015fdf:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015fe3:	80 fb 0d             	cmp    bl,0xd
c0015fe6:	0f 94 c3             	sete   bl
c0015fe9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015fee:	0f 94 c1             	sete   cl
c0015ff1:	08 cb                	or     bl,cl
c0015ff3:	75 3a                	jne    c001602f <Reg::readInt(char*, char*, int*)+0xcf>
c0015ff5:	0f af d6             	imul   edx,esi
c0015ff8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015ffd:	83 fe 10             	cmp    esi,0x10
c0016000:	75 26                	jne    c0016028 <Reg::readInt(char*, char*, int*)+0xc8>
c0016002:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016006:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016009:	89 e9                	mov    ecx,ebp
c001600b:	80 f9 05             	cmp    cl,0x5
c001600e:	77 06                	ja     c0016016 <Reg::readInt(char*, char*, int*)+0xb6>
c0016010:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016014:	eb 16                	jmp    c001602c <Reg::readInt(char*, char*, int*)+0xcc>
c0016016:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001601a:	83 e9 61             	sub    ecx,0x61
c001601d:	80 f9 05             	cmp    cl,0x5
c0016020:	77 06                	ja     c0016028 <Reg::readInt(char*, char*, int*)+0xc8>
c0016022:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016026:	eb 04                	jmp    c001602c <Reg::readInt(char*, char*, int*)+0xcc>
c0016028:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001602c:	47                   	inc    edi
c001602d:	eb ae                	jmp    c0015fdd <Reg::readInt(char*, char*, int*)+0x7d>
c001602f:	84 c0                	test   al,al
c0016031:	74 02                	je     c0016035 <Reg::readInt(char*, char*, int*)+0xd5>
c0016033:	f7 da                	neg    edx
c0016035:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001603c:	89 10                	mov    DWORD PTR [eax],edx
c001603e:	88 d8                	mov    al,bl
c0016040:	81 c4 ec 00 00 00    	add    esp,0xec
c0016046:	5b                   	pop    ebx
c0016047:	5e                   	pop    esi
c0016048:	5f                   	pop    edi
c0016049:	5d                   	pop    ebp
c001604a:	c3                   	ret    

c001604b <Reg::readString(char*, char*, char*, int)>:
c001604b:	57                   	push   edi
c001604c:	56                   	push   esi
c001604d:	53                   	push   ebx
c001604e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016054:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001605b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001605f:	57                   	push   edi
c0016060:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016067:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001606e:	e8 b6 fe ff ff       	call   c0015f29 <Reg::getLine(char*, char*, char*)>
c0016073:	83 c4 10             	add    esp,0x10
c0016076:	89 c6                	mov    esi,eax
c0016078:	84 c0                	test   al,al
c001607a:	74 44                	je     c00160c0 <Reg::readString(char*, char*, char*, int)+0x75>
c001607c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0016083:	31 c0                	xor    eax,eax
c0016085:	4a                   	dec    edx
c0016086:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0016089:	84 c9                	test   cl,cl
c001608b:	74 0f                	je     c001609c <Reg::readString(char*, char*, char*, int)+0x51>
c001608d:	39 c2                	cmp    edx,eax
c001608f:	7e 0b                	jle    c001609c <Reg::readString(char*, char*, char*, int)+0x51>
c0016091:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0016094:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0016099:	40                   	inc    eax
c001609a:	eb ea                	jmp    c0016086 <Reg::readString(char*, char*, char*, int)+0x3b>
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	53                   	push   ebx
c00160a0:	e8 0b a6 fe ff       	call   c00006b0 <strlen>
c00160a5:	83 c4 10             	add    esp,0x10
c00160a8:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00160ad:	75 11                	jne    c00160c0 <Reg::readString(char*, char*, char*, int)+0x75>
c00160af:	83 ec 0c             	sub    esp,0xc
c00160b2:	53                   	push   ebx
c00160b3:	e8 f8 a5 fe ff       	call   c00006b0 <strlen>
c00160b8:	83 c4 10             	add    esp,0x10
c00160bb:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00160c0:	81 c4 d0 00 00 00    	add    esp,0xd0
c00160c6:	89 f0                	mov    eax,esi
c00160c8:	5b                   	pop    ebx
c00160c9:	5e                   	pop    esi
c00160ca:	5f                   	pop    edi
c00160cb:	c3                   	ret    

c00160cc <Reg::readBool(char*, char*, bool*)>:
c00160cc:	83 ec 20             	sub    esp,0x20
c00160cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00160d3:	50                   	push   eax
c00160d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160dc:	e8 7f fe ff ff       	call   c0015f60 <Reg::readInt(char*, char*, int*)>
c00160e1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00160e6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00160ea:	0f 95 02             	setne  BYTE PTR [edx]
c00160ed:	83 c4 2c             	add    esp,0x2c
c00160f0:	c3                   	ret    

c00160f1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00160f1:	53                   	push   ebx
c00160f2:	83 ec 1c             	sub    esp,0x1c
c00160f5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00160f9:	8d 44 24 13          	lea    eax,[esp+0x13]
c00160fd:	50                   	push   eax
c00160fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016102:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016106:	e8 c1 ff ff ff       	call   c00160cc <Reg::readBool(char*, char*, bool*)>
c001610b:	83 c4 10             	add    esp,0x10
c001610e:	84 c0                	test   al,al
c0016110:	74 04                	je     c0016116 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016112:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016116:	88 d8                	mov    al,bl
c0016118:	83 c4 18             	add    esp,0x18
c001611b:	5b                   	pop    ebx
c001611c:	c3                   	ret    

c001611d <Reg::readIntWithDefault(char*, char*, int)>:
c001611d:	53                   	push   ebx
c001611e:	83 ec 1c             	sub    esp,0x1c
c0016121:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016125:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016129:	50                   	push   eax
c001612a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001612e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016132:	e8 29 fe ff ff       	call   c0015f60 <Reg::readInt(char*, char*, int*)>
c0016137:	83 c4 10             	add    esp,0x10
c001613a:	84 c0                	test   al,al
c001613c:	74 04                	je     c0016142 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001613e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016142:	89 d8                	mov    eax,ebx
c0016144:	83 c4 18             	add    esp,0x18
c0016147:	5b                   	pop    ebx
c0016148:	c3                   	ret    

c0016149 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016149:	57                   	push   edi
c001614a:	56                   	push   esi
c001614b:	56                   	push   esi
c001614c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016150:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0016154:	56                   	push   esi
c0016155:	57                   	push   edi
c0016156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001615a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001615e:	e8 e8 fe ff ff       	call   c001604b <Reg::readString(char*, char*, char*, int)>
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	84 c0                	test   al,al
c0016168:	75 1a                	jne    c0016184 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001616a:	51                   	push   ecx
c001616b:	56                   	push   esi
c001616c:	6a 00                	push   0x0
c001616e:	57                   	push   edi
c001616f:	e8 20 a5 fe ff       	call   c0000694 <memset>
c0016174:	8d 4e ff             	lea    ecx,[esi-0x1]
c0016177:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001617b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001617d:	83 c4 10             	add    esp,0x10
c0016180:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0016184:	89 f8                	mov    eax,edi
c0016186:	5a                   	pop    edx
c0016187:	5e                   	pop    esi
c0016188:	5f                   	pop    edi
c0016189:	c3                   	ret    

c001618a <Sys::eject(regs*)>:
c001618a:	83 ec 0c             	sub    esp,0xc
c001618d:	83 ca ff             	or     edx,0xffffffff
c0016190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016194:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016197:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001619c:	83 e9 41             	sub    ecx,0x41
c001619f:	83 f9 19             	cmp    ecx,0x19
c00161a2:	77 18                	ja     c00161bc <Sys::eject(regs*)+0x32>
c00161a4:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c00161ab:	85 c9                	test   ecx,ecx
c00161ad:	74 0d                	je     c00161bc <Sys::eject(regs*)+0x32>
c00161af:	83 ec 0c             	sub    esp,0xc
c00161b2:	51                   	push   ecx
c00161b3:	e8 28 a8 ff ff       	call   c00109e0 <LogicalDisk::eject()>
c00161b8:	83 c4 10             	add    esp,0x10
c00161bb:	99                   	cdq    
c00161bc:	83 c4 0c             	add    esp,0xc
c00161bf:	c3                   	ret    

c00161c0 <Sys::exit(regs*)>:
c00161c0:	83 ec 18             	sub    esp,0x18
c00161c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161c7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161ca:	e8 59 36 00 00       	call   c0019828 <terminateTask(int)>
c00161cf:	83 c8 ff             	or     eax,0xffffffff
c00161d2:	83 c4 1c             	add    esp,0x1c
c00161d5:	89 c2                	mov    edx,eax
c00161d7:	c3                   	ret    

c00161d8 <Sys::getCwd(regs*)>:
c00161d8:	83 ec 10             	sub    esp,0x10
c00161db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00161df:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00161e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161ea:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161ed:	e8 42 72 ff ff       	call   c000d434 <Fs::getcwd(Process*, char*, int)>
c00161f2:	83 c4 1c             	add    esp,0x1c
c00161f5:	99                   	cdq    
c00161f6:	c3                   	ret    

c00161f7 <Sys::getPID(regs*)>:
c00161f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0016201:	99                   	cdq    
c0016202:	c3                   	ret    

c0016203 <Sys::getRAMData(regs*)>:
c0016203:	8b 0d f8 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028bf8
c0016209:	69 05 f4 8b 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028bf4,0xc8
c0016213:	99                   	cdq    
c0016214:	f7 f9                	idiv   ecx
c0016216:	c1 e0 18             	shl    eax,0x18
c0016219:	09 c8                	or     eax,ecx
c001621b:	99                   	cdq    
c001621c:	c3                   	ret    

c001621d <Sys::getVGAPtr(regs*)>:
c001621d:	55                   	push   ebp
c001621e:	57                   	push   edi
c001621f:	56                   	push   esi
c0016220:	53                   	push   ebx
c0016221:	83 ec 18             	sub    esp,0x18
c0016224:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0016228:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001622b:	e8 fc 30 00 00       	call   c001932c <Thr::processFromPID(int)>
c0016230:	83 c4 10             	add    esp,0x10
c0016233:	89 c1                	mov    ecx,eax
c0016235:	b8 01 00 00 00       	mov    eax,0x1
c001623a:	85 c9                	test   ecx,ecx
c001623c:	74 59                	je     c0016297 <Sys::getVGAPtr(regs*)+0x7a>
c001623e:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0016244:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0016248:	74 0c                	je     c0016256 <Sys::getVGAPtr(regs*)+0x39>
c001624a:	83 ec 0c             	sub    esp,0xc
c001624d:	53                   	push   ebx
c001624e:	e8 82 4c ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c0016253:	83 c4 10             	add    esp,0x10
c0016256:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016259:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001625c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0016261:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016263:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0016266:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016269:	81 c3 82 00 00 00    	add    ebx,0x82
c001626f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0016275:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016278:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001627b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0016281:	50                   	push   eax
c0016282:	50                   	push   eax
c0016283:	53                   	push   ebx
c0016284:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016287:	05 a8 0f 00 00       	add    eax,0xfa8
c001628c:	50                   	push   eax
c001628d:	e8 be a4 fe ff       	call   c0000750 <strcpy>
c0016292:	83 c4 10             	add    esp,0x10
c0016295:	31 c0                	xor    eax,eax
c0016297:	83 c4 0c             	add    esp,0xc
c001629a:	31 d2                	xor    edx,edx
c001629c:	5b                   	pop    ebx
c001629d:	5e                   	pop    esi
c001629e:	5f                   	pop    edi
c001629f:	5d                   	pop    ebp
c00162a0:	c3                   	ret    

c00162a1 <Sys::loadDLL(regs*)>:
c00162a1:	56                   	push   esi
c00162a2:	53                   	push   ebx
c00162a3:	31 d2                	xor    edx,edx
c00162a5:	51                   	push   ecx
c00162a6:	b8 01 00 00 00       	mov    eax,0x1
c00162ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162af:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162b3:	0f 84 8c 00 00 00    	je     c0016345 <Sys::loadDLL(regs*)+0xa4>
c00162b9:	83 ec 0c             	sub    esp,0xc
c00162bc:	68 14 01 00 00       	push   0x114
c00162c1:	e8 21 3b ff ff       	call   c0009de7 <malloc>
c00162c6:	83 c4 0c             	add    esp,0xc
c00162c9:	89 c3                	mov    ebx,eax
c00162cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00162d6:	53                   	push   ebx
c00162d7:	e8 56 73 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c00162dc:	83 c4 10             	add    esp,0x10
c00162df:	31 d2                	xor    edx,edx
c00162e1:	b8 02 00 00 00       	mov    eax,0x2
c00162e6:	85 db                	test   ebx,ebx
c00162e8:	74 5b                	je     c0016345 <Sys::loadDLL(regs*)+0xa4>
c00162ea:	83 ec 0c             	sub    esp,0xc
c00162ed:	53                   	push   ebx
c00162ee:	e8 87 76 ff ff       	call   c000d97a <File::exists()>
c00162f3:	83 c4 10             	add    esp,0x10
c00162f6:	84 c0                	test   al,al
c00162f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162fa:	75 11                	jne    c001630d <Sys::loadDLL(regs*)+0x6c>
c00162fc:	83 ec 0c             	sub    esp,0xc
c00162ff:	53                   	push   ebx
c0016300:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016303:	83 c4 10             	add    esp,0x10
c0016306:	b8 03 00 00 00       	mov    eax,0x3
c001630b:	eb 36                	jmp    c0016343 <Sys::loadDLL(regs*)+0xa2>
c001630d:	83 ec 0c             	sub    esp,0xc
c0016310:	53                   	push   ebx
c0016311:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016314:	58                   	pop    eax
c0016315:	5a                   	pop    edx
c0016316:	6a 00                	push   0x0
c0016318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001631b:	e8 0a 22 00 00       	call   c001852a <Thr::loadDLL(char const*, bool)>
c0016320:	83 c4 10             	add    esp,0x10
c0016323:	89 c1                	mov    ecx,eax
c0016325:	31 d2                	xor    edx,edx
c0016327:	b8 04 00 00 00       	mov    eax,0x4
c001632c:	85 c9                	test   ecx,ecx
c001632e:	74 15                	je     c0016345 <Sys::loadDLL(regs*)+0xa4>
c0016330:	53                   	push   ebx
c0016331:	53                   	push   ebx
c0016332:	ff 35 c8 8b 02 c0    	push   DWORD PTR ds:0xc0028bc8
c0016338:	51                   	push   ecx
c0016339:	e8 1d 24 00 00       	call   c001875b <Thr::executeDLL(unsigned long, void*)>
c001633e:	83 c4 10             	add    esp,0x10
c0016341:	31 c0                	xor    eax,eax
c0016343:	31 d2                	xor    edx,edx
c0016345:	59                   	pop    ecx
c0016346:	5b                   	pop    ebx
c0016347:	5e                   	pop    esi
c0016348:	c3                   	ret    

c0016349 <Sys::read(regs*)>:
c0016349:	57                   	push   edi
c001634a:	56                   	push   esi
c001634b:	53                   	push   ebx
c001634c:	83 ec 10             	sub    esp,0x10
c001634f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016353:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016356:	83 f8 02             	cmp    eax,0x2
c0016359:	77 10                	ja     c001636b <Sys::read(regs*)+0x22>
c001635b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016360:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016363:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016369:	eb 0e                	jmp    c0016379 <Sys::read(regs*)+0x30>
c001636b:	83 ec 0c             	sub    esp,0xc
c001636e:	50                   	push   eax
c001636f:	e8 d7 58 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016374:	83 c4 10             	add    esp,0x10
c0016377:	89 c1                	mov    ecx,eax
c0016379:	83 c8 ff             	or     eax,0xffffffff
c001637c:	85 c9                	test   ecx,ecx
c001637e:	89 c2                	mov    edx,eax
c0016380:	74 28                	je     c00163aa <Sys::read(regs*)+0x61>
c0016382:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001638a:	31 ff                	xor    edi,edi
c001638c:	83 ec 0c             	sub    esp,0xc
c001638f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016391:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016395:	52                   	push   edx
c0016396:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016399:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001639c:	57                   	push   edi
c001639d:	56                   	push   esi
c001639e:	51                   	push   ecx
c001639f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163a6:	83 c4 20             	add    esp,0x20
c00163a9:	99                   	cdq    
c00163aa:	83 c4 10             	add    esp,0x10
c00163ad:	5b                   	pop    ebx
c00163ae:	5e                   	pop    esi
c00163af:	5f                   	pop    edi
c00163b0:	c3                   	ret    

c00163b1 <Sys::sbrk(regs*)>:
c00163b1:	56                   	push   esi
c00163b2:	53                   	push   ebx
c00163b3:	50                   	push   eax
c00163b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163c0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163c3:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00163c9:	85 db                	test   ebx,ebx
c00163cb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163ce:	74 02                	je     c00163d2 <Sys::sbrk(regs*)+0x21>
c00163d0:	79 06                	jns    c00163d8 <Sys::sbrk(regs*)+0x27>
c00163d2:	89 f0                	mov    eax,esi
c00163d4:	31 d2                	xor    edx,edx
c00163d6:	eb 2a                	jmp    c0016402 <Sys::sbrk(regs*)+0x51>
c00163d8:	83 c8 ff             	or     eax,0xffffffff
c00163db:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163e1:	89 c2                	mov    edx,eax
c00163e3:	77 1d                	ja     c0016402 <Sys::sbrk(regs*)+0x51>
c00163e5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00163eb:	50                   	push   eax
c00163ec:	c1 ea 0c             	shr    edx,0xc
c00163ef:	68 07 0c 00 00       	push   0xc07
c00163f4:	52                   	push   edx
c00163f5:	51                   	push   ecx
c00163f6:	e8 4f 61 ff ff       	call   c000c54a <VAS::allocatePages(int, int)>
c00163fb:	89 f0                	mov    eax,esi
c00163fd:	31 d2                	xor    edx,edx
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	59                   	pop    ecx
c0016403:	5b                   	pop    ebx
c0016404:	5e                   	pop    esi
c0016405:	c3                   	ret    

c0016406 <Sys::setCwd(regs*)>:
c0016406:	83 ec 14             	sub    esp,0x14
c0016409:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001640d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016410:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016415:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016418:	e8 fc 75 ff ff       	call   c000da19 <Fs::setcwd(Process*, char*)>
c001641d:	83 c4 1c             	add    esp,0x1c
c0016420:	99                   	cdq    
c0016421:	c3                   	ret    

c0016422 <Sys::setTime(regs*)>:
c0016422:	55                   	push   ebp
c0016423:	31 c9                	xor    ecx,ecx
c0016425:	57                   	push   edi
c0016426:	bd 0c 00 00 00       	mov    ebp,0xc
c001642b:	56                   	push   esi
c001642c:	53                   	push   ebx
c001642d:	31 db                	xor    ebx,ebx
c001642f:	83 ec 10             	sub    esp,0x10
c0016432:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016436:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0016439:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001643c:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001643f:	89 c2                	mov    edx,eax
c0016441:	66 81 ef 6c 07       	sub    di,0x76c
c0016446:	83 e2 1f             	and    edx,0x1f
c0016449:	c1 e7 10             	shl    edi,0x10
c001644c:	42                   	inc    edx
c001644d:	c1 e8 05             	shr    eax,0x5
c0016450:	88 d1                	mov    cl,dl
c0016452:	31 d2                	xor    edx,edx
c0016454:	f7 f5                	div    ebp
c0016456:	89 dd                	mov    ebp,ebx
c0016458:	88 d5                	mov    ch,dl
c001645a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0016460:	0f b7 c1             	movzx  eax,cx
c0016463:	31 d2                	xor    edx,edx
c0016465:	09 f8                	or     eax,edi
c0016467:	bf 3c 00 00 00       	mov    edi,0x3c
c001646c:	89 c1                	mov    ecx,eax
c001646e:	89 f0                	mov    eax,esi
c0016470:	f7 f7                	div    edi
c0016472:	c1 e2 10             	shl    edx,0x10
c0016475:	09 d5                	or     ebp,edx
c0016477:	31 d2                	xor    edx,edx
c0016479:	89 eb                	mov    ebx,ebp
c001647b:	f7 f7                	div    edi
c001647d:	bf 10 0e 00 00       	mov    edi,0xe10
c0016482:	88 d7                	mov    bh,dl
c0016484:	89 f0                	mov    eax,esi
c0016486:	31 d2                	xor    edx,edx
c0016488:	f7 f7                	div    edi
c001648a:	bf 18 00 00 00       	mov    edi,0x18
c001648f:	31 d2                	xor    edx,edx
c0016491:	f7 f7                	div    edi
c0016493:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0016498:	88 d3                	mov    bl,dl
c001649a:	53                   	push   ebx
c001649b:	51                   	push   ecx
c001649c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00164a2:	e8 73 7e ff ff       	call   c000e31a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00164a7:	83 c4 1c             	add    esp,0x1c
c00164aa:	83 f0 01             	xor    eax,0x1
c00164ad:	5b                   	pop    ebx
c00164ae:	0f b6 c0             	movzx  eax,al
c00164b1:	5e                   	pop    esi
c00164b2:	31 d2                	xor    edx,edx
c00164b4:	5f                   	pop    edi
c00164b5:	5d                   	pop    ebp
c00164b6:	c3                   	ret    

c00164b7 <Sys::timezone(regs*)>:
c00164b7:	53                   	push   ebx
c00164b8:	83 ec 08             	sub    esp,0x8
c00164bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164bf:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00164c3:	75 17                	jne    c00164dc <Sys::timezone(regs*)+0x25>
c00164c5:	83 ec 0c             	sub    esp,0xc
c00164c8:	68 b9 69 02 c0       	push   0xc00269b9
c00164cd:	e8 f5 6b ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00164d2:	83 c8 ff             	or     eax,0xffffffff
c00164d5:	83 c4 10             	add    esp,0x10
c00164d8:	89 c2                	mov    edx,eax
c00164da:	eb 20                	jmp    c00164fc <Sys::timezone(regs*)+0x45>
c00164dc:	83 ec 0c             	sub    esp,0xc
c00164df:	68 ce 69 02 c0       	push   0xc00269ce
c00164e4:	e8 de 6b ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00164e9:	58                   	pop    eax
c00164ea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00164ed:	e8 8a 7b ff ff       	call   c000e07c <User::loadClockSettings(int)>
c00164f2:	83 c4 10             	add    esp,0x10
c00164f5:	b8 01 00 00 00       	mov    eax,0x1
c00164fa:	31 d2                	xor    edx,edx
c00164fc:	83 c4 08             	add    esp,0x8
c00164ff:	5b                   	pop    ebx
c0016500:	c3                   	ret    

c0016501 <Sys::write(regs*)>:
c0016501:	57                   	push   edi
c0016502:	56                   	push   esi
c0016503:	53                   	push   ebx
c0016504:	83 ec 10             	sub    esp,0x10
c0016507:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001650b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001650e:	83 f8 02             	cmp    eax,0x2
c0016511:	77 10                	ja     c0016523 <Sys::write(regs*)+0x22>
c0016513:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016518:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001651b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016521:	eb 0e                	jmp    c0016531 <Sys::write(regs*)+0x30>
c0016523:	83 ec 0c             	sub    esp,0xc
c0016526:	50                   	push   eax
c0016527:	e8 1f 57 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c001652c:	83 c4 10             	add    esp,0x10
c001652f:	89 c1                	mov    ecx,eax
c0016531:	83 c8 ff             	or     eax,0xffffffff
c0016534:	85 c9                	test   ecx,ecx
c0016536:	89 c2                	mov    edx,eax
c0016538:	74 28                	je     c0016562 <Sys::write(regs*)+0x61>
c001653a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016542:	31 ff                	xor    edi,edi
c0016544:	83 ec 0c             	sub    esp,0xc
c0016547:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016549:	8d 54 24 18          	lea    edx,[esp+0x18]
c001654d:	52                   	push   edx
c001654e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016551:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016554:	57                   	push   edi
c0016555:	56                   	push   esi
c0016556:	51                   	push   ecx
c0016557:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001655a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001655e:	83 c4 20             	add    esp,0x20
c0016561:	99                   	cdq    
c0016562:	83 c4 10             	add    esp,0x10
c0016565:	5b                   	pop    ebx
c0016566:	5e                   	pop    esi
c0016567:	5f                   	pop    edi
c0016568:	c3                   	ret    

c0016569 <Sys::wsbe(regs*)>:
c0016569:	57                   	push   edi
c001656a:	b9 0b 00 00 00       	mov    ecx,0xb
c001656f:	56                   	push   esi
c0016570:	be 0d 6a 02 c0       	mov    esi,0xc0026a0d
c0016575:	53                   	push   ebx
c0016576:	83 ec 30             	sub    esp,0x30
c0016579:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001657d:	fc                   	cld    
c001657e:	83 ec 0c             	sub    esp,0xc
c0016581:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0016583:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0016587:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001658c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001658f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0016595:	8b 06                	mov    eax,DWORD PTR [esi]
c0016597:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001659a:	57                   	push   edi
c001659b:	e8 10 a1 fe ff       	call   c00006b0 <strlen>
c00165a0:	5a                   	pop    edx
c00165a1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00165a5:	52                   	push   edx
c00165a6:	31 d2                	xor    edx,edx
c00165a8:	57                   	push   edi
c00165a9:	52                   	push   edx
c00165aa:	50                   	push   eax
c00165ab:	56                   	push   esi
c00165ac:	ff d3                	call   ebx
c00165ae:	83 c4 14             	add    esp,0x14
c00165b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00165b5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00165b8:	e8 6b 32 00 00       	call   c0019828 <terminateTask(int)>
c00165bd:	83 c4 40             	add    esp,0x40
c00165c0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00165c5:	5b                   	pop    ebx
c00165c6:	31 d2                	xor    edx,edx
c00165c8:	5e                   	pop    esi
c00165c9:	5f                   	pop    edi
c00165ca:	c3                   	ret    

c00165cb <Sys::yield(regs*)>:
c00165cb:	83 ec 0c             	sub    esp,0xc
c00165ce:	fa                   	cli    
c00165cf:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00165d5:	e8 36 29 00 00       	call   c0018f10 <schedule()>
c00165da:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00165df:	48                   	dec    eax
c00165e0:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00165e5:	75 01                	jne    c00165e8 <Sys::yield(regs*)+0x1d>
c00165e7:	fb                   	sti    
c00165e8:	8b 15 ec 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291ec
c00165ee:	83 c4 0c             	add    esp,0xc
c00165f1:	89 d0                	mov    eax,edx
c00165f3:	c1 ea 11             	shr    edx,0x11
c00165f6:	c1 e0 07             	shl    eax,0x7
c00165f9:	25 80 30 0f 00       	and    eax,0xf3080
c00165fe:	31 d0                	xor    eax,edx
c0016600:	31 d2                	xor    edx,edx
c0016602:	c3                   	ret    

c0016603 <sysCallSeekDir(regs*)>:
c0016603:	31 c0                	xor    eax,eax
c0016605:	31 d2                	xor    edx,edx
c0016607:	c3                   	ret    

c0016608 <sysCallTellDir(regs*)>:
c0016608:	31 c0                	xor    eax,eax
c001660a:	31 d2                	xor    edx,edx
c001660c:	c3                   	ret    

c001660d <sysCallVerify(regs*)>:
c001660d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016611:	31 d2                	xor    edx,edx
c0016613:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016616:	c3                   	ret    

c0016617 <sysCallGetArgc(regs*)>:
c0016617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001661c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001661f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0016625:	99                   	cdq    
c0016626:	c3                   	ret    

c0016627 <sysFormatDisk(regs*)>:
c0016627:	56                   	push   esi
c0016628:	53                   	push   ebx
c0016629:	53                   	push   ebx
c001662a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001662e:	8b 1d f4 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cf4
c0016634:	eb 25                	jmp    c001665b <sysFormatDisk(regs*)+0x34>
c0016636:	83 ec 0c             	sub    esp,0xc
c0016639:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001663c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001663e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016641:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016644:	50                   	push   eax
c0016645:	ff 34 85 80 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6e80]
c001664c:	53                   	push   ebx
c001664d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016650:	83 c4 20             	add    esp,0x20
c0016653:	83 f8 08             	cmp    eax,0x8
c0016656:	75 12                	jne    c001666a <sysFormatDisk(regs*)+0x43>
c0016658:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001665b:	85 db                	test   ebx,ebx
c001665d:	75 d7                	jne    c0016636 <sysFormatDisk(regs*)+0xf>
c001665f:	59                   	pop    ecx
c0016660:	b8 03 00 00 00       	mov    eax,0x3
c0016665:	31 d2                	xor    edx,edx
c0016667:	5b                   	pop    ebx
c0016668:	5e                   	pop    esi
c0016669:	c3                   	ret    
c001666a:	85 c0                	test   eax,eax
c001666c:	74 1b                	je     c0016689 <sysFormatDisk(regs*)+0x62>
c001666e:	83 f8 09             	cmp    eax,0x9
c0016671:	74 0b                	je     c001667e <sysFormatDisk(regs*)+0x57>
c0016673:	59                   	pop    ecx
c0016674:	b8 02 00 00 00       	mov    eax,0x2
c0016679:	31 d2                	xor    edx,edx
c001667b:	5b                   	pop    ebx
c001667c:	5e                   	pop    esi
c001667d:	c3                   	ret    
c001667e:	59                   	pop    ecx
c001667f:	b8 01 00 00 00       	mov    eax,0x1
c0016684:	31 d2                	xor    edx,edx
c0016686:	5b                   	pop    ebx
c0016687:	5e                   	pop    esi
c0016688:	c3                   	ret    
c0016689:	59                   	pop    ecx
c001668a:	31 c0                	xor    eax,eax
c001668c:	31 d2                	xor    edx,edx
c001668e:	5b                   	pop    ebx
c001668f:	5e                   	pop    esi
c0016690:	c3                   	ret    

c0016691 <sysSetDiskVolumeLabel(regs*)>:
c0016691:	56                   	push   esi
c0016692:	53                   	push   ebx
c0016693:	53                   	push   ebx
c0016694:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016698:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001669b:	83 f8 19             	cmp    eax,0x19
c001669e:	77 2d                	ja     c00166cd <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166a0:	8b 0c 85 80 91 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6e80]
c00166a7:	85 c9                	test   ecx,ecx
c00166a9:	74 22                	je     c00166cd <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166ab:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00166ae:	85 db                	test   ebx,ebx
c00166b0:	74 1b                	je     c00166cd <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166b2:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00166b8:	85 d2                	test   edx,edx
c00166ba:	74 11                	je     c00166cd <sysSetDiskVolumeLabel(regs*)+0x3c>
c00166bc:	8b 32                	mov    esi,DWORD PTR [edx]
c00166be:	53                   	push   ebx
c00166bf:	50                   	push   eax
c00166c0:	51                   	push   ecx
c00166c1:	52                   	push   edx
c00166c2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00166c5:	83 c4 10             	add    esp,0x10
c00166c8:	99                   	cdq    
c00166c9:	59                   	pop    ecx
c00166ca:	5b                   	pop    ebx
c00166cb:	5e                   	pop    esi
c00166cc:	c3                   	ret    
c00166cd:	59                   	pop    ecx
c00166ce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00166d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00166d8:	5b                   	pop    ebx
c00166d9:	5e                   	pop    esi
c00166da:	c3                   	ret    

c00166db <sysGetDiskVolumeLabel(regs*)>:
c00166db:	57                   	push   edi
c00166dc:	56                   	push   esi
c00166dd:	53                   	push   ebx
c00166de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166e2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00166e5:	83 fa 19             	cmp    edx,0x19
c00166e8:	77 38                	ja     c0016722 <sysGetDiskVolumeLabel(regs*)+0x47>
c00166ea:	8b 0c 95 80 91 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6e80]
c00166f1:	85 c9                	test   ecx,ecx
c00166f3:	74 2d                	je     c0016722 <sysGetDiskVolumeLabel(regs*)+0x47>
c00166f5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166f8:	85 db                	test   ebx,ebx
c00166fa:	74 26                	je     c0016722 <sysGetDiskVolumeLabel(regs*)+0x47>
c00166fc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00166ff:	85 f6                	test   esi,esi
c0016701:	74 1f                	je     c0016722 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016703:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0016709:	85 c0                	test   eax,eax
c001670b:	74 15                	je     c0016722 <sysGetDiskVolumeLabel(regs*)+0x47>
c001670d:	83 ec 0c             	sub    esp,0xc
c0016710:	8b 38                	mov    edi,DWORD PTR [eax]
c0016712:	56                   	push   esi
c0016713:	53                   	push   ebx
c0016714:	52                   	push   edx
c0016715:	51                   	push   ecx
c0016716:	50                   	push   eax
c0016717:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001671a:	83 c4 20             	add    esp,0x20
c001671d:	99                   	cdq    
c001671e:	5b                   	pop    ebx
c001671f:	5e                   	pop    esi
c0016720:	5f                   	pop    edi
c0016721:	c3                   	ret    
c0016722:	5b                   	pop    ebx
c0016723:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016728:	ba ff ff ff ff       	mov    edx,0xffffffff
c001672d:	5e                   	pop    esi
c001672e:	5f                   	pop    edi
c001672f:	c3                   	ret    

c0016730 <sysShutdown(regs*)>:
c0016730:	83 ec 0c             	sub    esp,0xc
c0016733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016737:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001673a:	85 c0                	test   eax,eax
c001673c:	74 18                	je     c0016756 <sysShutdown(regs*)+0x26>
c001673e:	83 f8 01             	cmp    eax,0x1
c0016741:	74 38                	je     c001677b <sysShutdown(regs*)+0x4b>
c0016743:	83 f8 02             	cmp    eax,0x2
c0016746:	74 24                	je     c001676c <sysShutdown(regs*)+0x3c>
c0016748:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001674d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016752:	83 c4 0c             	add    esp,0xc
c0016755:	c3                   	ret    
c0016756:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001675b:	8b 10                	mov    edx,DWORD PTR [eax]
c001675d:	6a 00                	push   0x0
c001675f:	6a 00                	push   0x0
c0016761:	6a 00                	push   0x0
c0016763:	50                   	push   eax
c0016764:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016767:	83 c4 10             	add    esp,0x10
c001676a:	eb dc                	jmp    c0016748 <sysShutdown(regs*)+0x18>
c001676c:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0016771:	8b 10                	mov    edx,DWORD PTR [eax]
c0016773:	6a 00                	push   0x0
c0016775:	6a 00                	push   0x0
c0016777:	6a 01                	push   0x1
c0016779:	eb e8                	jmp    c0016763 <sysShutdown(regs*)+0x33>
c001677b:	a1 00 92 02 c0       	mov    eax,ds:0xc0029200
c0016780:	85 c0                	test   eax,eax
c0016782:	74 02                	je     c0016786 <sysShutdown(regs*)+0x56>
c0016784:	ff d0                	call   eax
c0016786:	31 c0                	xor    eax,eax
c0016788:	31 d2                	xor    edx,edx
c001678a:	83 c4 0c             	add    esp,0xc
c001678d:	c3                   	ret    

c001678e <sysCallRealpath(regs*)>:
c001678e:	83 ec 0c             	sub    esp,0xc
c0016791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016795:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016798:	85 d2                	test   edx,edx
c001679a:	74 07                	je     c00167a3 <sysCallRealpath(regs*)+0x15>
c001679c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001679f:	85 c0                	test   eax,eax
c00167a1:	75 0b                	jne    c00167ae <sysCallRealpath(regs*)+0x20>
c00167a3:	b8 01 00 00 00       	mov    eax,0x1
c00167a8:	31 d2                	xor    edx,edx
c00167aa:	83 c4 0c             	add    esp,0xc
c00167ad:	c3                   	ret    
c00167ae:	51                   	push   ecx
c00167af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00167b5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00167b8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00167be:	51                   	push   ecx
c00167bf:	52                   	push   edx
c00167c0:	50                   	push   eax
c00167c1:	e8 c2 6c ff ff       	call   c000d488 <Fs::standardiseFiles(char*, char const*, char const*)>
c00167c6:	83 c4 10             	add    esp,0x10
c00167c9:	31 c0                	xor    eax,eax
c00167cb:	31 d2                	xor    edx,edx
c00167cd:	83 c4 0c             	add    esp,0xc
c00167d0:	c3                   	ret    

c00167d1 <sysCallReadDir(regs*)>:
c00167d1:	53                   	push   ebx
c00167d2:	83 ec 18             	sub    esp,0x18
c00167d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00167d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00167dc:	83 f8 02             	cmp    eax,0x2
c00167df:	76 60                	jbe    c0016841 <sysCallReadDir(regs*)+0x70>
c00167e1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00167e8:	77 48                	ja     c0016832 <sysCallReadDir(regs*)+0x61>
c00167ea:	83 ec 0c             	sub    esp,0xc
c00167ed:	50                   	push   eax
c00167ee:	e8 58 54 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	85 c0                	test   eax,eax
c00167f8:	74 38                	je     c0016832 <sysCallReadDir(regs*)+0x61>
c00167fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016802:	83 ec 0c             	sub    esp,0xc
c0016805:	8b 10                	mov    edx,DWORD PTR [eax]
c0016807:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001680b:	51                   	push   ecx
c001680c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001680f:	6a 00                	push   0x0
c0016811:	68 10 01 00 00       	push   0x110
c0016816:	50                   	push   eax
c0016817:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001681a:	83 c4 20             	add    esp,0x20
c001681d:	85 c0                	test   eax,eax
c001681f:	74 29                	je     c001684a <sysCallReadDir(regs*)+0x79>
c0016821:	83 f8 07             	cmp    eax,0x7
c0016824:	74 1b                	je     c0016841 <sysCallReadDir(regs*)+0x70>
c0016826:	b8 02 00 00 00       	mov    eax,0x2
c001682b:	31 d2                	xor    edx,edx
c001682d:	83 c4 18             	add    esp,0x18
c0016830:	5b                   	pop    ebx
c0016831:	c3                   	ret    
c0016832:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016837:	ba ff ff ff ff       	mov    edx,0xffffffff
c001683c:	83 c4 18             	add    esp,0x18
c001683f:	5b                   	pop    ebx
c0016840:	c3                   	ret    
c0016841:	b8 01 00 00 00       	mov    eax,0x1
c0016846:	31 d2                	xor    edx,edx
c0016848:	eb e3                	jmp    c001682d <sysCallReadDir(regs*)+0x5c>
c001684a:	31 c0                	xor    eax,eax
c001684c:	31 d2                	xor    edx,edx
c001684e:	eb dd                	jmp    c001682d <sysCallReadDir(regs*)+0x5c>

c0016850 <sysCallIsATTY(regs*)>:
c0016850:	83 ec 0c             	sub    esp,0xc
c0016853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016857:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001685a:	83 f8 02             	cmp    eax,0x2
c001685d:	76 07                	jbe    c0016866 <sysCallIsATTY(regs*)+0x16>
c001685f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016864:	75 26                	jne    c001688c <sysCallIsATTY(regs*)+0x3c>
c0016866:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001686b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001686e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016874:	85 c0                	test   eax,eax
c0016876:	74 24                	je     c001689c <sysCallIsATTY(regs*)+0x4c>
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	8b 10                	mov    edx,DWORD PTR [eax]
c001687d:	50                   	push   eax
c001687e:	ff 12                	call   DWORD PTR [edx]
c0016880:	31 d2                	xor    edx,edx
c0016882:	0f b6 c0             	movzx  eax,al
c0016885:	83 c4 10             	add    esp,0x10
c0016888:	83 c4 0c             	add    esp,0xc
c001688b:	c3                   	ret    
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	50                   	push   eax
c0016890:	e8 b6 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016895:	83 c4 10             	add    esp,0x10
c0016898:	85 c0                	test   eax,eax
c001689a:	75 dc                	jne    c0016878 <sysCallIsATTY(regs*)+0x28>
c001689c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168a6:	83 c4 0c             	add    esp,0xc
c00168a9:	c3                   	ret    

c00168aa <sysCallSeek(regs*)>:
c00168aa:	53                   	push   ebx
c00168ab:	83 ec 08             	sub    esp,0x8
c00168ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168b5:	8d 50 fd             	lea    edx,[eax-0x3]
c00168b8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00168be:	77 32                	ja     c00168f2 <sysCallSeek(regs*)+0x48>
c00168c0:	83 ec 0c             	sub    esp,0xc
c00168c3:	50                   	push   eax
c00168c4:	e8 82 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00168c9:	83 c4 0c             	add    esp,0xc
c00168cc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00168cf:	31 db                	xor    ebx,ebx
c00168d1:	53                   	push   ebx
c00168d2:	51                   	push   ecx
c00168d3:	50                   	push   eax
c00168d4:	e8 f1 6e ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c00168d9:	83 c4 10             	add    esp,0x10
c00168dc:	85 c0                	test   eax,eax
c00168de:	0f 95 c0             	setne  al
c00168e1:	31 d2                	xor    edx,edx
c00168e3:	0f b6 c0             	movzx  eax,al
c00168e6:	f7 d8                	neg    eax
c00168e8:	83 d2 00             	adc    edx,0x0
c00168eb:	83 c4 08             	add    esp,0x8
c00168ee:	f7 da                	neg    edx
c00168f0:	5b                   	pop    ebx
c00168f1:	c3                   	ret    
c00168f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168fc:	83 c4 08             	add    esp,0x8
c00168ff:	5b                   	pop    ebx
c0016900:	c3                   	ret    

c0016901 <sysCallTell(regs*)>:
c0016901:	53                   	push   ebx
c0016902:	83 ec 08             	sub    esp,0x8
c0016905:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016909:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001690c:	83 f8 02             	cmp    eax,0x2
c001690f:	76 4d                	jbe    c001695e <sysCallTell(regs*)+0x5d>
c0016911:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016916:	76 19                	jbe    c0016931 <sysCallTell(regs*)+0x30>
c0016918:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001691b:	31 d2                	xor    edx,edx
c001691d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016923:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001692a:	31 c0                	xor    eax,eax
c001692c:	83 c4 08             	add    esp,0x8
c001692f:	5b                   	pop    ebx
c0016930:	c3                   	ret    
c0016931:	83 ec 0c             	sub    esp,0xc
c0016934:	50                   	push   eax
c0016935:	e8 11 53 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c001693a:	5a                   	pop    edx
c001693b:	59                   	pop    ecx
c001693c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001693f:	50                   	push   eax
c0016940:	e8 db 6e ff ff       	call   c000d820 <File::tell(unsigned long long*)>
c0016945:	83 c4 10             	add    esp,0x10
c0016948:	85 c0                	test   eax,eax
c001694a:	0f 95 c0             	setne  al
c001694d:	31 d2                	xor    edx,edx
c001694f:	0f b6 c0             	movzx  eax,al
c0016952:	f7 d8                	neg    eax
c0016954:	83 d2 00             	adc    edx,0x0
c0016957:	83 c4 08             	add    esp,0x8
c001695a:	f7 da                	neg    edx
c001695c:	5b                   	pop    ebx
c001695d:	c3                   	ret    
c001695e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016963:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016968:	83 c4 08             	add    esp,0x8
c001696b:	5b                   	pop    ebx
c001696c:	c3                   	ret    

c001696d <sysCallSize(regs*)>:
c001696d:	53                   	push   ebx
c001696e:	83 ec 18             	sub    esp,0x18
c0016971:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016975:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016978:	83 f8 02             	cmp    eax,0x2
c001697b:	76 53                	jbe    c00169d0 <sysCallSize(regs*)+0x63>
c001697d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016982:	76 19                	jbe    c001699d <sysCallSize(regs*)+0x30>
c0016984:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016987:	31 d2                	xor    edx,edx
c0016989:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001698f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016996:	31 c0                	xor    eax,eax
c0016998:	83 c4 18             	add    esp,0x18
c001699b:	5b                   	pop    ebx
c001699c:	c3                   	ret    
c001699d:	83 ec 0c             	sub    esp,0xc
c00169a0:	50                   	push   eax
c00169a1:	e8 a5 52 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c00169a6:	83 c4 0c             	add    esp,0xc
c00169a9:	8d 54 24 13          	lea    edx,[esp+0x13]
c00169ad:	52                   	push   edx
c00169ae:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169b1:	50                   	push   eax
c00169b2:	e8 01 70 ff ff       	call   c000d9b8 <File::stat(unsigned long long*, bool*)>
c00169b7:	83 c4 10             	add    esp,0x10
c00169ba:	85 c0                	test   eax,eax
c00169bc:	0f 95 c0             	setne  al
c00169bf:	31 d2                	xor    edx,edx
c00169c1:	0f b6 c0             	movzx  eax,al
c00169c4:	f7 d8                	neg    eax
c00169c6:	83 d2 00             	adc    edx,0x0
c00169c9:	83 c4 18             	add    esp,0x18
c00169cc:	f7 da                	neg    edx
c00169ce:	5b                   	pop    ebx
c00169cf:	c3                   	ret    
c00169d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169da:	83 c4 18             	add    esp,0x18
c00169dd:	5b                   	pop    ebx
c00169de:	c3                   	ret    

c00169df <sysCallSizeFromFilename(regs*)>:
c00169df:	57                   	push   edi
c00169e0:	56                   	push   esi
c00169e1:	53                   	push   ebx
c00169e2:	83 ec 20             	sub    esp,0x20
c00169e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169e9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00169ec:	83 fb 02             	cmp    ebx,0x2
c00169ef:	0f 86 88 00 00 00    	jbe    c0016a7d <sysCallSizeFromFilename(regs*)+0x9e>
c00169f5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00169fb:	76 1b                	jbe    c0016a18 <sysCallSizeFromFilename(regs*)+0x39>
c00169fd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016a00:	31 d2                	xor    edx,edx
c0016a02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016a08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a0f:	83 c4 20             	add    esp,0x20
c0016a12:	31 c0                	xor    eax,eax
c0016a14:	5b                   	pop    ebx
c0016a15:	5e                   	pop    esi
c0016a16:	5f                   	pop    edi
c0016a17:	c3                   	ret    
c0016a18:	83 ec 0c             	sub    esp,0xc
c0016a1b:	68 14 01 00 00       	push   0x114
c0016a20:	e8 c2 33 ff ff       	call   c0009de7 <malloc>
c0016a25:	83 c4 0c             	add    esp,0xc
c0016a28:	89 c7                	mov    edi,eax
c0016a2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a2f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016a32:	53                   	push   ebx
c0016a33:	57                   	push   edi
c0016a34:	e8 f9 6b ff ff       	call   c000d632 <File::File(char const*, Process*)>
c0016a39:	83 c4 0c             	add    esp,0xc
c0016a3c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016a40:	50                   	push   eax
c0016a41:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016a44:	57                   	push   edi
c0016a45:	e8 6e 6f ff ff       	call   c000d9b8 <File::stat(unsigned long long*, bool*)>
c0016a4a:	83 c4 10             	add    esp,0x10
c0016a4d:	85 ff                	test   edi,edi
c0016a4f:	74 14                	je     c0016a65 <sysCallSizeFromFilename(regs*)+0x86>
c0016a51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a55:	8b 17                	mov    edx,DWORD PTR [edi]
c0016a57:	83 ec 0c             	sub    esp,0xc
c0016a5a:	57                   	push   edi
c0016a5b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016a5e:	83 c4 10             	add    esp,0x10
c0016a61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a65:	85 c0                	test   eax,eax
c0016a67:	0f 95 c0             	setne  al
c0016a6a:	31 d2                	xor    edx,edx
c0016a6c:	0f b6 c0             	movzx  eax,al
c0016a6f:	f7 d8                	neg    eax
c0016a71:	83 d2 00             	adc    edx,0x0
c0016a74:	83 c4 20             	add    esp,0x20
c0016a77:	f7 da                	neg    edx
c0016a79:	5b                   	pop    ebx
c0016a7a:	5e                   	pop    esi
c0016a7b:	5f                   	pop    edi
c0016a7c:	c3                   	ret    
c0016a7d:	83 c4 20             	add    esp,0x20
c0016a80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a85:	5b                   	pop    ebx
c0016a86:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a8b:	5e                   	pop    esi
c0016a8c:	5f                   	pop    edi
c0016a8d:	c3                   	ret    

c0016a8e <sysCallClose(regs*)>:
c0016a8e:	53                   	push   ebx
c0016a8f:	83 ec 08             	sub    esp,0x8
c0016a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a96:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a99:	83 f8 02             	cmp    eax,0x2
c0016a9c:	76 41                	jbe    c0016adf <sysCallClose(regs*)+0x51>
c0016a9e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016aa4:	83 fa 01             	cmp    edx,0x1
c0016aa7:	76 2d                	jbe    c0016ad6 <sysCallClose(regs*)+0x48>
c0016aa9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016aae:	77 2f                	ja     c0016adf <sysCallClose(regs*)+0x51>
c0016ab0:	83 ec 0c             	sub    esp,0xc
c0016ab3:	50                   	push   eax
c0016ab4:	e8 92 51 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016ab9:	89 c3                	mov    ebx,eax
c0016abb:	89 04 24             	mov    DWORD PTR [esp],eax
c0016abe:	e8 a7 6c ff ff       	call   c000d76a <File::close()>
c0016ac3:	83 c4 10             	add    esp,0x10
c0016ac6:	85 db                	test   ebx,ebx
c0016ac8:	74 0c                	je     c0016ad6 <sysCallClose(regs*)+0x48>
c0016aca:	83 ec 0c             	sub    esp,0xc
c0016acd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016acf:	53                   	push   ebx
c0016ad0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	31 c0                	xor    eax,eax
c0016ad8:	31 d2                	xor    edx,edx
c0016ada:	83 c4 08             	add    esp,0x8
c0016add:	5b                   	pop    ebx
c0016ade:	c3                   	ret    
c0016adf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ae4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016ae9:	83 c4 08             	add    esp,0x8
c0016aec:	5b                   	pop    ebx
c0016aed:	c3                   	ret    

c0016aee <sysCallOpenDir(regs*)>:
c0016aee:	56                   	push   esi
c0016aef:	53                   	push   ebx
c0016af0:	53                   	push   ebx
c0016af1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016af5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016af8:	85 f6                	test   esi,esi
c0016afa:	74 59                	je     c0016b55 <sysCallOpenDir(regs*)+0x67>
c0016afc:	83 ec 0c             	sub    esp,0xc
c0016aff:	68 14 01 00 00       	push   0x114
c0016b04:	e8 de 32 ff ff       	call   c0009de7 <malloc>
c0016b09:	83 c4 0c             	add    esp,0xc
c0016b0c:	89 c6                	mov    esi,eax
c0016b0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b13:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016b16:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b19:	56                   	push   esi
c0016b1a:	e8 73 70 ff ff       	call   c000db92 <Directory::Directory(char const*, Process*)>
c0016b1f:	83 c4 10             	add    esp,0x10
c0016b22:	85 f6                	test   esi,esi
c0016b24:	74 2f                	je     c0016b55 <sysCallOpenDir(regs*)+0x67>
c0016b26:	83 ec 0c             	sub    esp,0xc
c0016b29:	56                   	push   esi
c0016b2a:	e8 3d 71 ff ff       	call   c000dc6c <Directory::open()>
c0016b2f:	83 c4 10             	add    esp,0x10
c0016b32:	85 c0                	test   eax,eax
c0016b34:	75 1f                	jne    c0016b55 <sysCallOpenDir(regs*)+0x67>
c0016b36:	83 ec 0c             	sub    esp,0xc
c0016b39:	56                   	push   esi
c0016b3a:	e8 17 4e ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0016b3f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016b42:	83 c4 10             	add    esp,0x10
c0016b45:	89 02                	mov    DWORD PTR [edx],eax
c0016b47:	c1 f8 1f             	sar    eax,0x1f
c0016b4a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b4d:	31 c0                	xor    eax,eax
c0016b4f:	59                   	pop    ecx
c0016b50:	31 d2                	xor    edx,edx
c0016b52:	5b                   	pop    ebx
c0016b53:	5e                   	pop    esi
c0016b54:	c3                   	ret    
c0016b55:	59                   	pop    ecx
c0016b56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b60:	5b                   	pop    ebx
c0016b61:	5e                   	pop    esi
c0016b62:	c3                   	ret    

c0016b63 <sysCallCloseDir(regs*)>:
c0016b63:	53                   	push   ebx
c0016b64:	83 ec 08             	sub    esp,0x8
c0016b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b6e:	8d 50 fd             	lea    edx,[eax-0x3]
c0016b71:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016b77:	77 2f                	ja     c0016ba8 <sysCallCloseDir(regs*)+0x45>
c0016b79:	83 ec 0c             	sub    esp,0xc
c0016b7c:	50                   	push   eax
c0016b7d:	e8 c9 50 ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016b82:	89 c3                	mov    ebx,eax
c0016b84:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b87:	e8 3c 71 ff ff       	call   c000dcc8 <Directory::close()>
c0016b8c:	83 c4 10             	add    esp,0x10
c0016b8f:	85 db                	test   ebx,ebx
c0016b91:	74 0c                	je     c0016b9f <sysCallCloseDir(regs*)+0x3c>
c0016b93:	83 ec 0c             	sub    esp,0xc
c0016b96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b98:	53                   	push   ebx
c0016b99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b9c:	83 c4 10             	add    esp,0x10
c0016b9f:	31 c0                	xor    eax,eax
c0016ba1:	31 d2                	xor    edx,edx
c0016ba3:	83 c4 08             	add    esp,0x8
c0016ba6:	5b                   	pop    ebx
c0016ba7:	c3                   	ret    
c0016ba8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016bad:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016bb2:	83 c4 08             	add    esp,0x8
c0016bb5:	5b                   	pop    ebx
c0016bb6:	c3                   	ret    

c0016bb7 <sysCallMakeDir(regs*)>:
c0016bb7:	56                   	push   esi
c0016bb8:	53                   	push   ebx
c0016bb9:	83 ec 10             	sub    esp,0x10
c0016bbc:	68 14 01 00 00       	push   0x114
c0016bc1:	e8 21 32 ff ff       	call   c0009de7 <malloc>
c0016bc6:	83 c4 0c             	add    esp,0xc
c0016bc9:	89 c3                	mov    ebx,eax
c0016bcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bd0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016bd7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016bda:	53                   	push   ebx
c0016bdb:	e8 b2 6f ff ff       	call   c000db92 <Directory::Directory(char const*, Process*)>
c0016be0:	83 c4 10             	add    esp,0x10
c0016be3:	85 db                	test   ebx,ebx
c0016be5:	74 32                	je     c0016c19 <sysCallMakeDir(regs*)+0x62>
c0016be7:	83 ec 0c             	sub    esp,0xc
c0016bea:	53                   	push   ebx
c0016beb:	e8 5c 72 ff ff       	call   c000de4c <Directory::create()>
c0016bf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bf3:	89 c6                	mov    esi,eax
c0016bf5:	e8 ce 70 ff ff       	call   c000dcc8 <Directory::close()>
c0016bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c02:	83 c4 10             	add    esp,0x10
c0016c05:	31 c0                	xor    eax,eax
c0016c07:	59                   	pop    ecx
c0016c08:	85 f6                	test   esi,esi
c0016c0a:	5b                   	pop    ebx
c0016c0b:	0f 95 c0             	setne  al
c0016c0e:	5e                   	pop    esi
c0016c0f:	31 d2                	xor    edx,edx
c0016c11:	f7 d8                	neg    eax
c0016c13:	83 d2 00             	adc    edx,0x0
c0016c16:	f7 da                	neg    edx
c0016c18:	c3                   	ret    
c0016c19:	59                   	pop    ecx
c0016c1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c1f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c24:	5b                   	pop    ebx
c0016c25:	5e                   	pop    esi
c0016c26:	c3                   	ret    

c0016c27 <sysCallWait(regs*)>:
c0016c27:	83 ec 10             	sub    esp,0x10
c0016c2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c2e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016c31:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c34:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016c37:	e8 fc 24 00 00       	call   c0019138 <waitTask(int, int*, int)>
c0016c3c:	83 c4 1c             	add    esp,0x1c
c0016c3f:	99                   	cdq    
c0016c40:	c3                   	ret    

c0016c41 <sysCallNotImpl(regs*)>:
c0016c41:	83 ec 18             	sub    esp,0x18
c0016c44:	68 39 6a 02 c0       	push   0xc0026a39
c0016c49:	e8 5b e5 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0016c4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c58:	83 c4 1c             	add    esp,0x1c
c0016c5b:	c3                   	ret    

c0016c5c <sysPanic(regs*)>:
c0016c5c:	83 ec 18             	sub    esp,0x18
c0016c5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c63:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c66:	e8 3e e5 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0016c6b:	b8 01 00 00 00       	mov    eax,0x1
c0016c70:	31 d2                	xor    edx,edx
c0016c72:	83 c4 1c             	add    esp,0x1c
c0016c75:	c3                   	ret    

c0016c76 <sysCallRmdir(regs*)>:
c0016c76:	56                   	push   esi
c0016c77:	53                   	push   ebx
c0016c78:	83 ec 20             	sub    esp,0x20
c0016c7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c7f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c82:	68 14 01 00 00       	push   0x114
c0016c87:	e8 5b 31 ff ff       	call   c0009de7 <malloc>
c0016c8c:	83 c4 0c             	add    esp,0xc
c0016c8f:	89 c3                	mov    ebx,eax
c0016c91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c96:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016c99:	56                   	push   esi
c0016c9a:	53                   	push   ebx
c0016c9b:	e8 92 69 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c0016ca0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ca3:	e8 dc 6b ff ff       	call   c000d884 <File::unlink()>
c0016ca8:	83 c4 10             	add    esp,0x10
c0016cab:	85 db                	test   ebx,ebx
c0016cad:	74 14                	je     c0016cc3 <sysCallRmdir(regs*)+0x4d>
c0016caf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cb3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016cb5:	83 ec 0c             	sub    esp,0xc
c0016cb8:	53                   	push   ebx
c0016cb9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016cbc:	83 c4 10             	add    esp,0x10
c0016cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cc3:	85 c0                	test   eax,eax
c0016cc5:	0f 95 c0             	setne  al
c0016cc8:	31 d2                	xor    edx,edx
c0016cca:	0f b6 c0             	movzx  eax,al
c0016ccd:	f7 d8                	neg    eax
c0016ccf:	83 d2 00             	adc    edx,0x0
c0016cd2:	83 c4 14             	add    esp,0x14
c0016cd5:	f7 da                	neg    edx
c0016cd7:	5b                   	pop    ebx
c0016cd8:	5e                   	pop    esi
c0016cd9:	c3                   	ret    

c0016cda <sysCallUnlink(regs*)>:
c0016cda:	56                   	push   esi
c0016cdb:	53                   	push   ebx
c0016cdc:	83 ec 20             	sub    esp,0x20
c0016cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ce3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016ce6:	68 14 01 00 00       	push   0x114
c0016ceb:	e8 f7 30 ff ff       	call   c0009de7 <malloc>
c0016cf0:	83 c4 0c             	add    esp,0xc
c0016cf3:	89 c3                	mov    ebx,eax
c0016cf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cfa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016cfd:	56                   	push   esi
c0016cfe:	53                   	push   ebx
c0016cff:	e8 2e 69 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c0016d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d07:	e8 78 6b ff ff       	call   c000d884 <File::unlink()>
c0016d0c:	83 c4 10             	add    esp,0x10
c0016d0f:	85 db                	test   ebx,ebx
c0016d11:	74 14                	je     c0016d27 <sysCallUnlink(regs*)+0x4d>
c0016d13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d17:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016d19:	83 ec 0c             	sub    esp,0xc
c0016d1c:	53                   	push   ebx
c0016d1d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016d20:	83 c4 10             	add    esp,0x10
c0016d23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d27:	85 c0                	test   eax,eax
c0016d29:	0f 95 c0             	setne  al
c0016d2c:	31 d2                	xor    edx,edx
c0016d2e:	0f b6 c0             	movzx  eax,al
c0016d31:	f7 d8                	neg    eax
c0016d33:	83 d2 00             	adc    edx,0x0
c0016d36:	83 c4 14             	add    esp,0x14
c0016d39:	f7 da                	neg    edx
c0016d3b:	5b                   	pop    ebx
c0016d3c:	5e                   	pop    esi
c0016d3d:	c3                   	ret    

c0016d3e <sysCallGetArgv(regs*)>:
c0016d3e:	83 ec 0c             	sub    esp,0xc
c0016d41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016d45:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016d48:	85 c0                	test   eax,eax
c0016d4a:	78 2b                	js     c0016d77 <sysCallGetArgv(regs*)+0x39>
c0016d4c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016d52:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016d55:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016d5b:	7d 1a                	jge    c0016d77 <sysCallGetArgv(regs*)+0x39>
c0016d5d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016d64:	85 c0                	test   eax,eax
c0016d66:	74 17                	je     c0016d7f <sysCallGetArgv(regs*)+0x41>
c0016d68:	83 ec 08             	sub    esp,0x8
c0016d6b:	50                   	push   eax
c0016d6c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016d6f:	e8 dc 99 fe ff       	call   c0000750 <strcpy>
c0016d74:	83 c4 10             	add    esp,0x10
c0016d77:	31 c0                	xor    eax,eax
c0016d79:	31 d2                	xor    edx,edx
c0016d7b:	83 c4 0c             	add    esp,0xc
c0016d7e:	c3                   	ret    
c0016d7f:	b8 01 00 00 00       	mov    eax,0x1
c0016d84:	31 d2                	xor    edx,edx
c0016d86:	83 c4 0c             	add    esp,0xc
c0016d89:	c3                   	ret    

c0016d8a <sysCallTTYName(regs*)>:
c0016d8a:	56                   	push   esi
c0016d8b:	53                   	push   ebx
c0016d8c:	53                   	push   ebx
c0016d8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d91:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016d94:	85 c0                	test   eax,eax
c0016d96:	74 5f                	je     c0016df7 <sysCallTTYName(regs*)+0x6d>
c0016d98:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016d9b:	83 f8 02             	cmp    eax,0x2
c0016d9e:	77 3e                	ja     c0016dde <sysCallTTYName(regs*)+0x54>
c0016da0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016da5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016da8:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016dae:	85 db                	test   ebx,ebx
c0016db0:	74 45                	je     c0016df7 <sysCallTTYName(regs*)+0x6d>
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016db7:	53                   	push   ebx
c0016db8:	ff 10                	call   DWORD PTR [eax]
c0016dba:	83 c4 10             	add    esp,0x10
c0016dbd:	84 c0                	test   al,al
c0016dbf:	74 41                	je     c0016e02 <sysCallTTYName(regs*)+0x78>
c0016dc1:	83 ec 08             	sub    esp,0x8
c0016dc4:	81 c3 82 00 00 00    	add    ebx,0x82
c0016dca:	53                   	push   ebx
c0016dcb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016dce:	e8 7d 99 fe ff       	call   c0000750 <strcpy>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	31 c0                	xor    eax,eax
c0016dd8:	59                   	pop    ecx
c0016dd9:	31 d2                	xor    edx,edx
c0016ddb:	5b                   	pop    ebx
c0016ddc:	5e                   	pop    esi
c0016ddd:	c3                   	ret    
c0016dde:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016de3:	74 bb                	je     c0016da0 <sysCallTTYName(regs*)+0x16>
c0016de5:	83 ec 0c             	sub    esp,0xc
c0016de8:	50                   	push   eax
c0016de9:	e8 5d 4e ff ff       	call   c000bc4b <getFromFileDescriptor(int)>
c0016dee:	83 c4 10             	add    esp,0x10
c0016df1:	89 c3                	mov    ebx,eax
c0016df3:	85 db                	test   ebx,ebx
c0016df5:	75 bb                	jne    c0016db2 <sysCallTTYName(regs*)+0x28>
c0016df7:	59                   	pop    ecx
c0016df8:	b8 01 00 00 00       	mov    eax,0x1
c0016dfd:	31 d2                	xor    edx,edx
c0016dff:	5b                   	pop    ebx
c0016e00:	5e                   	pop    esi
c0016e01:	c3                   	ret    
c0016e02:	59                   	pop    ecx
c0016e03:	b8 02 00 00 00       	mov    eax,0x2
c0016e08:	31 d2                	xor    edx,edx
c0016e0a:	5b                   	pop    ebx
c0016e0b:	5e                   	pop    esi
c0016e0c:	c3                   	ret    

c0016e0d <sysCallUSleep(regs*)>:
c0016e0d:	83 ec 1c             	sub    esp,0x1c
c0016e10:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016e14:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016e17:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016e1a:	6a 00                	push   0x0
c0016e1c:	6a 64                	push   0x64
c0016e1e:	52                   	push   edx
c0016e1f:	50                   	push   eax
c0016e20:	e8 7b c1 00 00       	call   c0022fa0 <__udivdi3>
c0016e25:	83 c4 14             	add    esp,0x14
c0016e28:	50                   	push   eax
c0016e29:	e8 da 23 00 00       	call   c0019208 <milliTenthSleep(unsigned int)>
c0016e2e:	31 c0                	xor    eax,eax
c0016e30:	31 d2                	xor    edx,edx
c0016e32:	83 c4 1c             	add    esp,0x1c
c0016e35:	c3                   	ret    

c0016e36 <sysCallSpawn(regs*)>:
c0016e36:	56                   	push   esi
c0016e37:	53                   	push   ebx
c0016e38:	50                   	push   eax
c0016e39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e3d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e40:	85 c0                	test   eax,eax
c0016e42:	75 08                	jne    c0016e4c <sysCallSpawn(regs*)+0x16>
c0016e44:	59                   	pop    ecx
c0016e45:	31 c0                	xor    eax,eax
c0016e47:	31 d2                	xor    edx,edx
c0016e49:	5b                   	pop    ebx
c0016e4a:	5e                   	pop    esi
c0016e4b:	c3                   	ret    
c0016e4c:	83 ec 0c             	sub    esp,0xc
c0016e4f:	68 1f 07 00 00       	push   0x71f
c0016e54:	e8 8e 2f ff ff       	call   c0009de7 <malloc>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	89 c6                	mov    esi,eax
c0016e5e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016e61:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016e64:	85 c0                	test   eax,eax
c0016e66:	75 32                	jne    c0016e9a <sysCallSpawn(regs*)+0x64>
c0016e68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e6d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e70:	52                   	push   edx
c0016e71:	50                   	push   eax
c0016e72:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016e75:	56                   	push   esi
c0016e76:	e8 85 1a 00 00       	call   c0018900 <Process::Process(char const*, Process*, char**)>
c0016e7b:	83 c4 10             	add    esp,0x10
c0016e7e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016e85:	75 bd                	jne    c0016e44 <sysCallSpawn(regs*)+0xe>
c0016e87:	83 ec 0c             	sub    esp,0xc
c0016e8a:	56                   	push   esi
c0016e8b:	e8 5c 1f 00 00       	call   c0018dec <Process::createUserThread()>
c0016e90:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e92:	83 c4 10             	add    esp,0x10
c0016e95:	99                   	cdq    
c0016e96:	59                   	pop    ecx
c0016e97:	5b                   	pop    ebx
c0016e98:	5e                   	pop    esi
c0016e99:	c3                   	ret    
c0016e9a:	31 c0                	xor    eax,eax
c0016e9c:	eb d2                	jmp    c0016e70 <sysCallSpawn(regs*)+0x3a>

c0016e9e <sysCallGetEnv(regs*)>:
c0016e9e:	57                   	push   edi
c0016e9f:	56                   	push   esi
c0016ea0:	53                   	push   ebx
c0016ea1:	83 ec 1c             	sub    esp,0x1c
c0016ea4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ea8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ead:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016eb0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016eb3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016eb6:	e8 3a e2 ff ff       	call   c00150f5 <Krnl::getProcessTotalEnvCount(Process*)>
c0016ebb:	83 c4 10             	add    esp,0x10
c0016ebe:	39 c7                	cmp    edi,eax
c0016ec0:	7c 14                	jl     c0016ed6 <sysCallGetEnv(regs*)+0x38>
c0016ec2:	85 f6                	test   esi,esi
c0016ec4:	75 0b                	jne    c0016ed1 <sysCallGetEnv(regs*)+0x33>
c0016ec6:	83 c4 10             	add    esp,0x10
c0016ec9:	31 c0                	xor    eax,eax
c0016ecb:	5b                   	pop    ebx
c0016ecc:	31 d2                	xor    edx,edx
c0016ece:	5e                   	pop    esi
c0016ecf:	5f                   	pop    edi
c0016ed0:	c3                   	ret    
c0016ed1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016ed4:	eb f0                	jmp    c0016ec6 <sysCallGetEnv(regs*)+0x28>
c0016ed6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016eda:	52                   	push   edx
c0016edb:	57                   	push   edi
c0016edc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ee2:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016ee5:	50                   	push   eax
c0016ee6:	e8 2a e2 ff ff       	call   c0015115 <Krnl::getProcessEnvPair(Process*, int)>
c0016eeb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016eee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ef2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016ef6:	83 c4 0c             	add    esp,0xc
c0016ef9:	85 c9                	test   ecx,ecx
c0016efb:	75 23                	jne    c0016f20 <sysCallGetEnv(regs*)+0x82>
c0016efd:	83 ec 0c             	sub    esp,0xc
c0016f00:	50                   	push   eax
c0016f01:	e8 aa 97 fe ff       	call   c00006b0 <strlen>
c0016f06:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f09:	89 c3                	mov    ebx,eax
c0016f0b:	e8 a0 97 fe ff       	call   c00006b0 <strlen>
c0016f10:	83 c4 10             	add    esp,0x10
c0016f13:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016f17:	83 c4 10             	add    esp,0x10
c0016f1a:	31 d2                	xor    edx,edx
c0016f1c:	5b                   	pop    ebx
c0016f1d:	5e                   	pop    esi
c0016f1e:	5f                   	pop    edi
c0016f1f:	c3                   	ret    
c0016f20:	83 ec 08             	sub    esp,0x8
c0016f23:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016f26:	50                   	push   eax
c0016f27:	56                   	push   esi
c0016f28:	e8 23 98 fe ff       	call   c0000750 <strcpy>
c0016f2d:	58                   	pop    eax
c0016f2e:	5a                   	pop    edx
c0016f2f:	68 53 6a 02 c0       	push   0xc0026a53
c0016f34:	56                   	push   esi
c0016f35:	e8 56 99 fe ff       	call   c0000890 <strcat>
c0016f3a:	59                   	pop    ecx
c0016f3b:	5b                   	pop    ebx
c0016f3c:	57                   	push   edi
c0016f3d:	56                   	push   esi
c0016f3e:	e8 4d 99 fe ff       	call   c0000890 <strcat>
c0016f43:	83 c4 10             	add    esp,0x10
c0016f46:	e9 7b ff ff ff       	jmp    c0016ec6 <sysCallGetEnv(regs*)+0x28>

c0016f4b <sysAppSettings(regs*)>:
c0016f4b:	57                   	push   edi
c0016f4c:	56                   	push   esi
c0016f4d:	56                   	push   esi
c0016f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f52:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016f55:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016f5b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016f60:	66 3d c0 09          	cmp    ax,0x9c0
c0016f64:	75 2e                	jne    c0016f94 <sysAppSettings(regs*)+0x49>
c0016f66:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016f6c:	83 e0 1f             	and    eax,0x1f
c0016f6f:	3c 01                	cmp    al,0x1
c0016f71:	74 2c                	je     c0016f9f <sysAppSettings(regs*)+0x54>
c0016f73:	3c 07                	cmp    al,0x7
c0016f75:	0f 84 b3 00 00 00    	je     c001702e <sysAppSettings(regs*)+0xe3>
c0016f7b:	84 c0                	test   al,al
c0016f7d:	0f 84 d2 00 00 00    	je     c0017055 <sysAppSettings(regs*)+0x10a>
c0016f83:	3c 08                	cmp    al,0x8
c0016f85:	74 63                	je     c0016fea <sysAppSettings(regs*)+0x9f>
c0016f87:	59                   	pop    ecx
c0016f88:	0f b6 c0             	movzx  eax,al
c0016f8b:	5e                   	pop    esi
c0016f8c:	05 e8 03 00 00       	add    eax,0x3e8
c0016f91:	5f                   	pop    edi
c0016f92:	99                   	cdq    
c0016f93:	c3                   	ret    
c0016f94:	b8 01 00 00 00       	mov    eax,0x1
c0016f99:	59                   	pop    ecx
c0016f9a:	31 d2                	xor    edx,edx
c0016f9c:	5e                   	pop    esi
c0016f9d:	5f                   	pop    edi
c0016f9e:	c3                   	ret    
c0016f9f:	50                   	push   eax
c0016fa0:	68 00 01 00 00       	push   0x100
c0016fa5:	6a 00                	push   0x0
c0016fa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016faf:	83 c0 0c             	add    eax,0xc
c0016fb2:	50                   	push   eax
c0016fb3:	e8 dc 96 fe ff       	call   c0000694 <memset>
c0016fb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fbd:	b9 ff 00 00 00       	mov    ecx,0xff
c0016fc2:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016fc5:	83 c7 0c             	add    edi,0xc
c0016fc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fcf:	5a                   	pop    edx
c0016fd0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fd3:	59                   	pop    ecx
c0016fd4:	8d 50 0c             	lea    edx,[eax+0xc]
c0016fd7:	52                   	push   edx
c0016fd8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016fde:	e8 91 3d ff ff       	call   c000ad74 <VgaText::setTitle(char*)>
c0016fe3:	83 c4 10             	add    esp,0x10
c0016fe6:	31 c0                	xor    eax,eax
c0016fe8:	eb af                	jmp    c0016f99 <sysAppSettings(regs*)+0x4e>
c0016fea:	83 ec 08             	sub    esp,0x8
c0016fed:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016ff3:	83 e0 0f             	and    eax,0xf
c0016ff6:	50                   	push   eax
c0016ff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ffc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017005:	e8 5a 3d ff ff       	call   c000ad64 <VgaText::setTitleColour(VgaColour)>
c001700a:	5f                   	pop    edi
c001700b:	58                   	pop    eax
c001700c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0017012:	c1 e8 04             	shr    eax,0x4
c0017015:	83 e0 0f             	and    eax,0xf
c0017018:	50                   	push   eax
c0017019:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001701e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017021:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017027:	e8 28 3d ff ff       	call   c000ad54 <VgaText::setTitleTextColour(VgaColour)>
c001702c:	eb b5                	jmp    c0016fe3 <sysAppSettings(regs*)+0x98>
c001702e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017033:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017036:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001703c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0017042:	c0 e8 06             	shr    al,0x6
c0017045:	83 e0 01             	and    eax,0x1
c0017048:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001704e:	31 c0                	xor    eax,eax
c0017050:	e9 44 ff ff ff       	jmp    c0016f99 <sysAppSettings(regs*)+0x4e>
c0017055:	b8 02 00 00 00       	mov    eax,0x2
c001705a:	e9 3a ff ff ff       	jmp    c0016f99 <sysAppSettings(regs*)+0x4e>

c001705f <sysSetFatAttrib(regs*)>:
c001705f:	57                   	push   edi
c0017060:	56                   	push   esi
c0017061:	53                   	push   ebx
c0017062:	83 ec 1c             	sub    esp,0x1c
c0017065:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017069:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001706c:	68 14 01 00 00       	push   0x114
c0017071:	e8 71 2d ff ff       	call   c0009de7 <malloc>
c0017076:	83 c4 0c             	add    esp,0xc
c0017079:	89 c3                	mov    ebx,eax
c001707b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017080:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0017083:	57                   	push   edi
c0017084:	53                   	push   ebx
c0017085:	e8 a8 65 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c001708a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001708d:	83 c4 0c             	add    esp,0xc
c0017090:	0f b6 d4             	movzx  edx,ah
c0017093:	0f b6 c0             	movzx  eax,al
c0017096:	52                   	push   edx
c0017097:	50                   	push   eax
c0017098:	53                   	push   ebx
c0017099:	e8 80 68 ff ff       	call   c000d91e <File::chfatattr(unsigned char, unsigned char)>
c001709e:	83 c4 10             	add    esp,0x10
c00170a1:	85 db                	test   ebx,ebx
c00170a3:	74 14                	je     c00170b9 <sysSetFatAttrib(regs*)+0x5a>
c00170a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170a9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00170ab:	83 ec 0c             	sub    esp,0xc
c00170ae:	53                   	push   ebx
c00170af:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00170b2:	83 c4 10             	add    esp,0x10
c00170b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170b9:	85 c0                	test   eax,eax
c00170bb:	0f 95 c0             	setne  al
c00170be:	31 d2                	xor    edx,edx
c00170c0:	0f b6 c0             	movzx  eax,al
c00170c3:	f7 d8                	neg    eax
c00170c5:	83 d2 00             	adc    edx,0x0
c00170c8:	83 c4 10             	add    esp,0x10
c00170cb:	f7 da                	neg    edx
c00170cd:	5b                   	pop    ebx
c00170ce:	5e                   	pop    esi
c00170cf:	5f                   	pop    edi
c00170d0:	c3                   	ret    

c00170d1 <sysPipe(regs*)>:
c00170d1:	57                   	push   edi
c00170d2:	56                   	push   esi
c00170d3:	53                   	push   ebx
c00170d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170d8:	83 ec 0c             	sub    esp,0xc
c00170db:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00170de:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00170e1:	6a 20                	push   0x20
c00170e3:	e8 ff 2c ff ff       	call   c0009de7 <malloc>
c00170e8:	89 c3                	mov    ebx,eax
c00170ea:	58                   	pop    eax
c00170eb:	5a                   	pop    edx
c00170ec:	68 00 50 00 00       	push   0x5000
c00170f1:	53                   	push   ebx
c00170f2:	e8 f5 39 ff ff       	call   c000aaec <Pipe::Pipe(int)>
c00170f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00170fa:	e8 57 48 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c00170ff:	89 07                	mov    DWORD PTR [edi],eax
c0017101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017104:	e8 4d 48 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0017109:	83 c4 10             	add    esp,0x10
c001710c:	89 06                	mov    DWORD PTR [esi],eax
c001710e:	31 d2                	xor    edx,edx
c0017110:	5b                   	pop    ebx
c0017111:	31 c0                	xor    eax,eax
c0017113:	5e                   	pop    esi
c0017114:	5f                   	pop    edi
c0017115:	c3                   	ret    

c0017116 <sysGetUnixTime(regs*)>:
c0017116:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001711b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017121:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017125:	e9 28 70 ff ff       	jmp    c000e152 <Clock::timeInSecondsLocal()>

c001712a <string_ends_with(char const*, char const*)>:
c001712a:	57                   	push   edi
c001712b:	56                   	push   esi
c001712c:	53                   	push   ebx
c001712d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017131:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017135:	83 ec 0c             	sub    esp,0xc
c0017138:	53                   	push   ebx
c0017139:	e8 72 95 fe ff       	call   c00006b0 <strlen>
c001713e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017141:	89 c6                	mov    esi,eax
c0017143:	e8 68 95 fe ff       	call   c00006b0 <strlen>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	39 c6                	cmp    esi,eax
c001714d:	7d 06                	jge    c0017155 <string_ends_with(char const*, char const*)+0x2b>
c001714f:	5b                   	pop    ebx
c0017150:	31 c0                	xor    eax,eax
c0017152:	5e                   	pop    esi
c0017153:	5f                   	pop    edi
c0017154:	c3                   	ret    
c0017155:	83 ec 08             	sub    esp,0x8
c0017158:	29 c6                	sub    esi,eax
c001715a:	57                   	push   edi
c001715b:	01 f3                	add    ebx,esi
c001715d:	53                   	push   ebx
c001715e:	e8 79 96 fe ff       	call   c00007dc <strcmp>
c0017163:	83 c4 10             	add    esp,0x10
c0017166:	85 c0                	test   eax,eax
c0017168:	5b                   	pop    ebx
c0017169:	0f 94 c0             	sete   al
c001716c:	5e                   	pop    esi
c001716d:	0f b6 c0             	movzx  eax,al
c0017170:	5f                   	pop    edi
c0017171:	c3                   	ret    

c0017172 <sysCallOpen(regs*)>:
c0017172:	56                   	push   esi
c0017173:	53                   	push   ebx
c0017174:	81 ec 04 01 00 00    	sub    esp,0x104
c001717a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0017181:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0017184:	85 c9                	test   ecx,ecx
c0017186:	0f 84 ad 01 00 00    	je     c0017339 <sysCallOpen(regs*)+0x1c7>
c001718c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001718f:	85 c0                	test   eax,eax
c0017191:	0f 84 a2 01 00 00    	je     c0017339 <sysCallOpen(regs*)+0x1c7>
c0017197:	52                   	push   edx
c0017198:	68 55 6a 02 c0       	push   0xc0026a55
c001719d:	50                   	push   eax
c001719e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00171a2:	56                   	push   esi
c00171a3:	e8 e0 62 ff ff       	call   c000d488 <Fs::standardiseFiles(char*, char const*, char const*)>
c00171a8:	89 34 24             	mov    DWORD PTR [esp],esi
c00171ab:	e8 00 95 fe ff       	call   c00006b0 <strlen>
c00171b0:	83 c4 10             	add    esp,0x10
c00171b3:	48                   	dec    eax
c00171b4:	74 1d                	je     c00171d3 <sysCallOpen(regs*)+0x61>
c00171b6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00171b9:	eb 0f                	jmp    c00171ca <sysCallOpen(regs*)+0x58>
c00171bb:	80 fa 3a             	cmp    dl,0x3a
c00171be:	74 0f                	je     c00171cf <sysCallOpen(regs*)+0x5d>
c00171c0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00171c4:	48                   	dec    eax
c00171c5:	74 0c                	je     c00171d3 <sysCallOpen(regs*)+0x61>
c00171c7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00171ca:	80 fa 2e             	cmp    dl,0x2e
c00171cd:	75 ec                	jne    c00171bb <sysCallOpen(regs*)+0x49>
c00171cf:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00171d3:	83 ec 08             	sub    esp,0x8
c00171d6:	68 59 6a 02 c0       	push   0xc0026a59
c00171db:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171de:	e8 47 ff ff ff       	call   c001712a <string_ends_with(char const*, char const*)>
c00171e3:	83 c4 10             	add    esp,0x10
c00171e6:	85 c0                	test   eax,eax
c00171e8:	74 1d                	je     c0017207 <sysCallOpen(regs*)+0x95>
c00171ea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00171ed:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00171f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00171fa:	81 c4 04 01 00 00    	add    esp,0x104
c0017200:	31 c0                	xor    eax,eax
c0017202:	31 d2                	xor    edx,edx
c0017204:	5b                   	pop    ebx
c0017205:	5e                   	pop    esi
c0017206:	c3                   	ret    
c0017207:	83 ec 08             	sub    esp,0x8
c001720a:	68 5e 6a 02 c0       	push   0xc0026a5e
c001720f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017212:	e8 13 ff ff ff       	call   c001712a <string_ends_with(char const*, char const*)>
c0017217:	83 c4 10             	add    esp,0x10
c001721a:	85 c0                	test   eax,eax
c001721c:	75 cc                	jne    c00171ea <sysCallOpen(regs*)+0x78>
c001721e:	83 ec 08             	sub    esp,0x8
c0017221:	68 5a 6a 02 c0       	push   0xc0026a5a
c0017226:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017229:	e8 ae 95 fe ff       	call   c00007dc <strcmp>
c001722e:	83 c4 10             	add    esp,0x10
c0017231:	85 c0                	test   eax,eax
c0017233:	74 b5                	je     c00171ea <sysCallOpen(regs*)+0x78>
c0017235:	83 ec 08             	sub    esp,0x8
c0017238:	68 59 6a 02 c0       	push   0xc0026a59
c001723d:	56                   	push   esi
c001723e:	e8 e7 fe ff ff       	call   c001712a <string_ends_with(char const*, char const*)>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	85 c0                	test   eax,eax
c0017248:	75 a0                	jne    c00171ea <sysCallOpen(regs*)+0x78>
c001724a:	83 ec 08             	sub    esp,0x8
c001724d:	68 63 6a 02 c0       	push   0xc0026a63
c0017252:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017255:	e8 d0 fe ff ff       	call   c001712a <string_ends_with(char const*, char const*)>
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	85 c0                	test   eax,eax
c001725f:	0f 85 e7 00 00 00    	jne    c001734c <sysCallOpen(regs*)+0x1da>
c0017265:	83 ec 08             	sub    esp,0x8
c0017268:	68 68 6a 02 c0       	push   0xc0026a68
c001726d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017270:	e8 b5 fe ff ff       	call   c001712a <string_ends_with(char const*, char const*)>
c0017275:	83 c4 10             	add    esp,0x10
c0017278:	85 c0                	test   eax,eax
c001727a:	0f 85 cc 00 00 00    	jne    c001734c <sysCallOpen(regs*)+0x1da>
c0017280:	83 ec 08             	sub    esp,0x8
c0017283:	68 64 6a 02 c0       	push   0xc0026a64
c0017288:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001728b:	e8 4c 95 fe ff       	call   c00007dc <strcmp>
c0017290:	83 c4 10             	add    esp,0x10
c0017293:	85 c0                	test   eax,eax
c0017295:	0f 84 b1 00 00 00    	je     c001734c <sysCallOpen(regs*)+0x1da>
c001729b:	83 ec 08             	sub    esp,0x8
c001729e:	68 63 6a 02 c0       	push   0xc0026a63
c00172a3:	56                   	push   esi
c00172a4:	e8 81 fe ff ff       	call   c001712a <string_ends_with(char const*, char const*)>
c00172a9:	83 c4 10             	add    esp,0x10
c00172ac:	85 c0                	test   eax,eax
c00172ae:	0f 85 98 00 00 00    	jne    c001734c <sysCallOpen(regs*)+0x1da>
c00172b4:	83 ec 0c             	sub    esp,0xc
c00172b7:	68 14 01 00 00       	push   0x114
c00172bc:	e8 26 2b ff ff       	call   c0009de7 <malloc>
c00172c1:	83 c4 0c             	add    esp,0xc
c00172c4:	89 c6                	mov    esi,eax
c00172c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00172cb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00172ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172d1:	56                   	push   esi
c00172d2:	e8 5b 63 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c00172d7:	83 c4 10             	add    esp,0x10
c00172da:	85 f6                	test   esi,esi
c00172dc:	74 5b                	je     c0017339 <sysCallOpen(regs*)+0x1c7>
c00172de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00172e1:	0f b6 c2             	movzx  eax,dl
c00172e4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00172e7:	89 d0                	mov    eax,edx
c00172e9:	83 e0 01             	and    eax,0x1
c00172ec:	f6 c2 02             	test   dl,0x2
c00172ef:	74 03                	je     c00172f4 <sysCallOpen(regs*)+0x182>
c00172f1:	83 c8 02             	or     eax,0x2
c00172f4:	f6 c2 04             	test   dl,0x4
c00172f7:	74 03                	je     c00172fc <sysCallOpen(regs*)+0x18a>
c00172f9:	83 c8 04             	or     eax,0x4
c00172fc:	f6 c2 08             	test   dl,0x8
c00172ff:	74 03                	je     c0017304 <sysCallOpen(regs*)+0x192>
c0017301:	83 c8 0a             	or     eax,0xa
c0017304:	83 e2 10             	and    edx,0x10
c0017307:	74 03                	je     c001730c <sysCallOpen(regs*)+0x19a>
c0017309:	83 c8 12             	or     eax,0x12
c001730c:	83 ec 08             	sub    esp,0x8
c001730f:	50                   	push   eax
c0017310:	56                   	push   esi
c0017311:	e8 f6 63 ff ff       	call   c000d70c <File::open(FileOpenMode)>
c0017316:	83 c4 10             	add    esp,0x10
c0017319:	85 c0                	test   eax,eax
c001731b:	75 1c                	jne    c0017339 <sysCallOpen(regs*)+0x1c7>
c001731d:	83 ec 0c             	sub    esp,0xc
c0017320:	56                   	push   esi
c0017321:	e8 30 46 ff ff       	call   c000b956 <UnixFile::getFileDescriptor()>
c0017326:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017329:	83 c4 10             	add    esp,0x10
c001732c:	89 02                	mov    DWORD PTR [edx],eax
c001732e:	c1 f8 1f             	sar    eax,0x1f
c0017331:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017334:	e9 c1 fe ff ff       	jmp    c00171fa <sysCallOpen(regs*)+0x88>
c0017339:	81 c4 04 01 00 00    	add    esp,0x104
c001733f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017344:	ba ff ff ff ff       	mov    edx,0xffffffff
c0017349:	5b                   	pop    ebx
c001734a:	5e                   	pop    esi
c001734b:	c3                   	ret    
c001734c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001734f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017355:	e9 99 fe ff ff       	jmp    c00171f3 <sysCallOpen(regs*)+0x81>

c001735a <Sys::loadSyscalls()>:
c001735a:	c7 05 20 97 02 c0 cb 65 01 c0 	mov    DWORD PTR ds:0xc0029720,0xc00165cb
c0017364:	c7 05 24 97 02 c0 c0 61 01 c0 	mov    DWORD PTR ds:0xc0029724,0xc00161c0
c001736e:	c7 05 28 97 02 c0 b1 63 01 c0 	mov    DWORD PTR ds:0xc0029728,0xc00163b1
c0017378:	c7 05 2c 97 02 c0 01 65 01 c0 	mov    DWORD PTR ds:0xc002972c,0xc0016501
c0017382:	c7 05 30 97 02 c0 49 63 01 c0 	mov    DWORD PTR ds:0xc0029730,0xc0016349
c001738c:	c7 05 34 97 02 c0 f7 61 01 c0 	mov    DWORD PTR ds:0xc0029734,0xc00161f7
c0017396:	c7 05 38 97 02 c0 d8 61 01 c0 	mov    DWORD PTR ds:0xc0029738,0xc00161d8
c00173a0:	c7 05 3c 97 02 c0 06 64 01 c0 	mov    DWORD PTR ds:0xc002973c,0xc0016406
c00173aa:	c7 05 44 97 02 c0 8e 6a 01 c0 	mov    DWORD PTR ds:0xc0029744,0xc0016a8e
c00173b4:	c7 05 40 97 02 c0 72 71 01 c0 	mov    DWORD PTR ds:0xc0029740,0xc0017172
c00173be:	c7 05 48 97 02 c0 ee 6a 01 c0 	mov    DWORD PTR ds:0xc0029748,0xc0016aee
c00173c8:	c7 05 4c 97 02 c0 d1 67 01 c0 	mov    DWORD PTR ds:0xc002974c,0xc00167d1
c00173d2:	c7 05 50 97 02 c0 03 66 01 c0 	mov    DWORD PTR ds:0xc0029750,0xc0016603
c00173dc:	c7 05 54 97 02 c0 08 66 01 c0 	mov    DWORD PTR ds:0xc0029754,0xc0016608
c00173e6:	c7 05 58 97 02 c0 b7 6b 01 c0 	mov    DWORD PTR ds:0xc0029758,0xc0016bb7
c00173f0:	c7 05 5c 97 02 c0 63 6b 01 c0 	mov    DWORD PTR ds:0xc002975c,0xc0016b63
c00173fa:	c7 05 60 97 02 c0 aa 68 01 c0 	mov    DWORD PTR ds:0xc0029760,0xc00168aa
c0017404:	c7 05 64 97 02 c0 01 69 01 c0 	mov    DWORD PTR ds:0xc0029764,0xc0016901
c001740e:	c7 05 68 97 02 c0 6d 69 01 c0 	mov    DWORD PTR ds:0xc0029768,0xc001696d
c0017418:	c7 05 6c 97 02 c0 0d 66 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001660d
c0017422:	c7 05 70 97 02 c0 27 6c 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0016c27
c001742c:	c7 05 74 97 02 c0 41 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016c41
c0017436:	c7 05 78 97 02 c0 41 6c 01 c0 	mov    DWORD PTR ds:0xc0029778,0xc0016c41
c0017440:	c7 05 7c 97 02 c0 76 6c 01 c0 	mov    DWORD PTR ds:0xc002977c,0xc0016c76
c001744a:	c7 05 80 97 02 c0 da 6c 01 c0 	mov    DWORD PTR ds:0xc0029780,0xc0016cda
c0017454:	c7 05 84 97 02 c0 17 66 01 c0 	mov    DWORD PTR ds:0xc0029784,0xc0016617
c001745e:	c7 05 88 97 02 c0 3e 6d 01 c0 	mov    DWORD PTR ds:0xc0029788,0xc0016d3e
c0017468:	c7 05 8c 97 02 c0 8e 67 01 c0 	mov    DWORD PTR ds:0xc002978c,0xc001678e
c0017472:	c7 05 90 97 02 c0 8a 6d 01 c0 	mov    DWORD PTR ds:0xc0029790,0xc0016d8a
c001747c:	c7 05 94 97 02 c0 50 68 01 c0 	mov    DWORD PTR ds:0xc0029794,0xc0016850
c0017486:	c7 05 98 97 02 c0 0d 6e 01 c0 	mov    DWORD PTR ds:0xc0029798,0xc0016e0d
c0017490:	c7 05 9c 97 02 c0 df 69 01 c0 	mov    DWORD PTR ds:0xc002979c,0xc00169df
c001749a:	c7 05 a0 97 02 c0 36 6e 01 c0 	mov    DWORD PTR ds:0xc00297a0,0xc0016e36
c00174a4:	c7 05 a4 97 02 c0 9e 6e 01 c0 	mov    DWORD PTR ds:0xc00297a4,0xc0016e9e
c00174ae:	c7 05 a8 97 02 c0 4b 6f 01 c0 	mov    DWORD PTR ds:0xc00297a8,0xc0016f4b
c00174b8:	c7 05 ac 97 02 c0 27 66 01 c0 	mov    DWORD PTR ds:0xc00297ac,0xc0016627
c00174c2:	c7 05 b0 97 02 c0 91 66 01 c0 	mov    DWORD PTR ds:0xc00297b0,0xc0016691
c00174cc:	c7 05 b4 97 02 c0 db 66 01 c0 	mov    DWORD PTR ds:0xc00297b4,0xc00166db
c00174d6:	c7 05 b8 97 02 c0 5f 70 01 c0 	mov    DWORD PTR ds:0xc00297b8,0xc001705f
c00174e0:	c7 05 bc 97 02 c0 5c 6c 01 c0 	mov    DWORD PTR ds:0xc00297bc,0xc0016c5c
c00174ea:	c7 05 c0 97 02 c0 30 67 01 c0 	mov    DWORD PTR ds:0xc00297c0,0xc0016730
c00174f4:	c7 05 c4 97 02 c0 d1 70 01 c0 	mov    DWORD PTR ds:0xc00297c4,0xc00170d1
c00174fe:	c7 05 c8 97 02 c0 16 71 01 c0 	mov    DWORD PTR ds:0xc00297c8,0xc0017116
c0017508:	c7 05 cc 97 02 c0 a1 62 01 c0 	mov    DWORD PTR ds:0xc00297cc,0xc00162a1
c0017512:	c7 05 d0 97 02 c0 22 64 01 c0 	mov    DWORD PTR ds:0xc00297d0,0xc0016422
c001751c:	c7 05 d4 97 02 c0 b7 64 01 c0 	mov    DWORD PTR ds:0xc00297d4,0xc00164b7
c0017526:	c7 05 d8 97 02 c0 8a 61 01 c0 	mov    DWORD PTR ds:0xc00297d8,0xc001618a
c0017530:	c7 05 dc 97 02 c0 69 65 01 c0 	mov    DWORD PTR ds:0xc00297dc,0xc0016569
c001753a:	c7 05 e0 97 02 c0 03 62 01 c0 	mov    DWORD PTR ds:0xc00297e0,0xc0016203
c0017544:	c7 05 e4 97 02 c0 1d 62 01 c0 	mov    DWORD PTR ds:0xc00297e4,0xc001621d
c001754e:	c3                   	ret    

c001754f <Sys::systemCall(regs*, void*)>:
c001754f:	53                   	push   ebx
c0017550:	83 ec 08             	sub    esp,0x8
c0017553:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017557:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001755a:	83 f8 7f             	cmp    eax,0x7f
c001755d:	77 16                	ja     c0017575 <Sys::systemCall(regs*, void*)+0x26>
c001755f:	8b 14 85 20 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd68e0]
c0017566:	85 d2                	test   edx,edx
c0017568:	74 0b                	je     c0017575 <Sys::systemCall(regs*, void*)+0x26>
c001756a:	83 ec 0c             	sub    esp,0xc
c001756d:	53                   	push   ebx
c001756e:	ff d2                	call   edx
c0017570:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017573:	eb 0d                	jmp    c0017582 <Sys::systemCall(regs*, void*)+0x33>
c0017575:	52                   	push   edx
c0017576:	52                   	push   edx
c0017577:	50                   	push   eax
c0017578:	68 6d 6a 02 c0       	push   0xc0026a6d
c001757d:	e8 45 5b ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0017582:	83 c4 10             	add    esp,0x10
c0017585:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001758a:	31 d2                	xor    edx,edx
c001758c:	83 c4 08             	add    esp,0x8
c001758f:	5b                   	pop    ebx
c0017590:	c3                   	ret    

c0017591 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017591:	55                   	push   ebp
c0017592:	57                   	push   edi
c0017593:	56                   	push   esi
c0017594:	53                   	push   ebx
c0017595:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001759b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00175a2:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00175a9:	85 c0                	test   eax,eax
c00175ab:	0f 95 c1             	setne  cl
c00175ae:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00175b6:	0f 94 c2             	sete   dl
c00175b9:	84 d1                	test   cl,dl
c00175bb:	74 23                	je     c00175e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00175bd:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00175c3:	74 1b                	je     c00175e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00175c5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175cb:	89 da                	mov    edx,ebx
c00175cd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00175d3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00175d9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00175e0:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00175e7:	05 ff 0f 00 00       	add    eax,0xfff
c00175ec:	83 ec 0c             	sub    esp,0xc
c00175ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175f3:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00175f9:	c1 e8 0c             	shr    eax,0xc
c00175fc:	89 fe                	mov    esi,edi
c00175fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017602:	c1 ee 0c             	shr    esi,0xc
c0017605:	6a 01                	push   0x1
c0017607:	e8 95 47 ff ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c001760c:	89 c5                	mov    ebp,eax
c001760e:	58                   	pop    eax
c001760f:	5a                   	pop    edx
c0017610:	56                   	push   esi
c0017611:	68 81 6a 02 c0       	push   0xc0026a81
c0017616:	e8 ac 5a ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001761b:	59                   	pop    ecx
c001761c:	58                   	pop    eax
c001761d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017621:	68 93 6a 02 c0       	push   0xc0026a93
c0017626:	e8 9c 5a ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001762b:	83 c4 10             	add    esp,0x10
c001762e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0017634:	0f 86 31 01 00 00    	jbe    c001776b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001763a:	c1 e6 0c             	shl    esi,0xc
c001763d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017640:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0017643:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017647:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001764e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017651:	01 df                	add    edi,ebx
c0017653:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0017656:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001765a:	0f 84 08 01 00 00    	je     c0017768 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0017660:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0017666:	76 05                	jbe    c001766d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0017668:	bf 00 10 00 00       	mov    edi,0x1000
c001766d:	83 ec 0c             	sub    esp,0xc
c0017670:	31 d2                	xor    edx,edx
c0017672:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017679:	8b 08                	mov    ecx,DWORD PTR [eax]
c001767b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001767f:	50                   	push   eax
c0017680:	8d 74 24 30          	lea    esi,[esp+0x30]
c0017684:	56                   	push   esi
c0017685:	52                   	push   edx
c0017686:	57                   	push   edi
c0017687:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001768e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017691:	83 c4 20             	add    esp,0x20
c0017694:	85 c0                	test   eax,eax
c0017696:	74 0a                	je     c00176a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0017698:	53                   	push   ebx
c0017699:	53                   	push   ebx
c001769a:	50                   	push   eax
c001769b:	68 a5 6a 02 c0       	push   0xc0026aa5
c00176a0:	eb 0f                	jmp    c00176b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c00176a2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176a6:	74 20                	je     c00176c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00176a8:	51                   	push   ecx
c00176a9:	51                   	push   ecx
c00176aa:	6a 00                	push   0x0
c00176ac:	68 d0 6a 02 c0       	push   0xc0026ad0
c00176b1:	e8 11 5a ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00176b6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00176b9:	e8 13 4a ff ff       	call   c000c0d1 <Virt::freeKernelVirtualPages(unsigned long)>
c00176be:	83 c4 10             	add    esp,0x10
c00176c1:	31 c0                	xor    eax,eax
c00176c3:	e9 68 01 00 00       	jmp    c0017830 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00176c8:	fa                   	cli    
c00176c9:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00176cf:	e8 ca 2d ff ff       	call   c000a49e <Phys::allocatePage()>
c00176d4:	6a 07                	push   0x7
c00176d6:	89 c7                	mov    edi,eax
c00176d8:	55                   	push   ebp
c00176d9:	50                   	push   eax
c00176da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176e2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00176e8:	e8 5b 4d ff ff       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c00176ed:	83 c4 0c             	add    esp,0xc
c00176f0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00176f7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00176fd:	6a 00                	push   0x0
c00176ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017704:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017707:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001770d:	e8 90 4b ff ff       	call   c000c2a2 <VAS::mapOtherVASIn(bool, VAS*)>
c0017712:	58                   	pop    eax
c0017713:	5a                   	pop    edx
c0017714:	68 07 0c 00 00       	push   0xc07
c0017719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001771d:	57                   	push   edi
c001771e:	89 ef                	mov    edi,ebp
c0017720:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0017727:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001772d:	6a 00                	push   0x0
c001772f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017734:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017737:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001773d:	e8 c2 50 ff ff       	call   c000c804 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017742:	b9 00 10 00 00       	mov    ecx,0x1000
c0017747:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017749:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001774e:	83 c4 20             	add    esp,0x20
c0017751:	48                   	dec    eax
c0017752:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0017757:	85 c0                	test   eax,eax
c0017759:	75 01                	jne    c001775c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001775b:	fb                   	sti    
c001775c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0017763:	e9 df fe ff ff       	jmp    c0017647 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0017768:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001776b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0017773:	0f 86 a9 00 00 00    	jbe    c0017822 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017779:	fa                   	cli    
c001777a:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0017780:	51                   	push   ecx
c0017781:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0017788:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001778e:	6a 00                	push   0x0
c0017790:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017795:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017798:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001779e:	e8 ff 4a ff ff       	call   c000c2a2 <VAS::mapOtherVASIn(bool, VAS*)>
c00177a3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00177a7:	c1 e6 0c             	shl    esi,0xc
c00177aa:	01 de                	add    esi,ebx
c00177ac:	83 c4 10             	add    esp,0x10
c00177af:	39 de                	cmp    esi,ebx
c00177b1:	74 61                	je     c0017814 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00177b3:	e8 e6 2c ff ff       	call   c000a49e <Phys::allocatePage()>
c00177b8:	6a 07                	push   0x7
c00177ba:	89 c7                	mov    edi,eax
c00177bc:	55                   	push   ebp
c00177bd:	50                   	push   eax
c00177be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177c6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177cc:	e8 77 4c ff ff       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c00177d1:	58                   	pop    eax
c00177d2:	5a                   	pop    edx
c00177d3:	68 07 0c 00 00       	push   0xc07
c00177d8:	53                   	push   ebx
c00177d9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00177df:	57                   	push   edi
c00177e0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00177e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177ed:	6a 00                	push   0x0
c00177ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177f7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177fd:	e8 02 50 ff ff       	call   c000c804 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017802:	83 c4 1c             	add    esp,0x1c
c0017805:	68 00 10 00 00       	push   0x1000
c001780a:	6a 00                	push   0x0
c001780c:	55                   	push   ebp
c001780d:	e8 82 8e fe ff       	call   c0000694 <memset>
c0017812:	eb 98                	jmp    c00177ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017814:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0017819:	48                   	dec    eax
c001781a:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001781f:	75 01                	jne    c0017822 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017821:	fb                   	sti    
c0017822:	83 ec 0c             	sub    esp,0xc
c0017825:	55                   	push   ebp
c0017826:	e8 a6 48 ff ff       	call   c000c0d1 <Virt::freeKernelVirtualPages(unsigned long)>
c001782b:	83 c4 10             	add    esp,0x10
c001782e:	b0 01                	mov    al,0x1
c0017830:	81 c4 2c 10 00 00    	add    esp,0x102c
c0017836:	5b                   	pop    ebx
c0017837:	5e                   	pop    esi
c0017838:	5f                   	pop    edi
c0017839:	5d                   	pop    ebp
c001783a:	c3                   	ret    

c001783b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001783b:	55                   	push   ebp
c001783c:	57                   	push   edi
c001783d:	56                   	push   esi
c001783e:	53                   	push   ebx
c001783f:	83 ec 48             	sub    esp,0x48
c0017842:	68 14 01 00 00       	push   0x114
c0017847:	e8 9b 25 ff ff       	call   c0009de7 <malloc>
c001784c:	83 c4 0c             	add    esp,0xc
c001784f:	89 c6                	mov    esi,eax
c0017851:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017855:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017859:	50                   	push   eax
c001785a:	e8 d3 5d ff ff       	call   c000d632 <File::File(char const*, Process*)>
c001785f:	58                   	pop    eax
c0017860:	5a                   	pop    edx
c0017861:	6a 01                	push   0x1
c0017863:	56                   	push   esi
c0017864:	e8 a3 5e ff ff       	call   c000d70c <File::open(FileOpenMode)>
c0017869:	83 c4 10             	add    esp,0x10
c001786c:	85 c0                	test   eax,eax
c001786e:	0f 85 47 01 00 00    	jne    c00179bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017874:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001787c:	83 ec 0c             	sub    esp,0xc
c001787f:	6a 34                	push   0x34
c0017881:	e8 61 25 ff ff       	call   c0009de7 <malloc>
c0017886:	89 c3                	mov    ebx,eax
c0017888:	58                   	pop    eax
c0017889:	8b 06                	mov    eax,DWORD PTR [esi]
c001788b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001788f:	57                   	push   edi
c0017890:	53                   	push   ebx
c0017891:	6a 00                	push   0x0
c0017893:	6a 34                	push   0x34
c0017895:	56                   	push   esi
c0017896:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017899:	83 c4 20             	add    esp,0x20
c001789c:	85 c0                	test   eax,eax
c001789e:	0f 85 17 01 00 00    	jne    c00179bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178a4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00178aa:	0f 85 0b 01 00 00    	jne    c00179bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178b0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00178b3:	85 c0                	test   eax,eax
c00178b5:	0f 84 00 01 00 00    	je     c00179bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178bb:	31 d2                	xor    edx,edx
c00178bd:	55                   	push   ebp
c00178be:	52                   	push   edx
c00178bf:	50                   	push   eax
c00178c0:	56                   	push   esi
c00178c1:	e8 04 5f ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c00178c6:	83 c4 10             	add    esp,0x10
c00178c9:	85 c0                	test   eax,eax
c00178cb:	0f 85 ea 00 00 00    	jne    c00179bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00178d1:	83 ec 0c             	sub    esp,0xc
c00178d4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00178d7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00178db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00178df:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00178e3:	0f af c2             	imul   eax,edx
c00178e6:	50                   	push   eax
c00178e7:	e8 fb 24 ff ff       	call   c0009de7 <malloc>
c00178ec:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00178ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00178f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00178f9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00178fd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017901:	0f af c2             	imul   eax,edx
c0017904:	99                   	cdq    
c0017905:	52                   	push   edx
c0017906:	50                   	push   eax
c0017907:	56                   	push   esi
c0017908:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001790b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001790e:	83 c4 20             	add    esp,0x20
c0017911:	85 c0                	test   eax,eax
c0017913:	0f 84 a2 00 00 00    	je     c00179bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017919:	31 d2                	xor    edx,edx
c001791b:	51                   	push   ecx
c001791c:	52                   	push   edx
c001791d:	50                   	push   eax
c001791e:	56                   	push   esi
c001791f:	e8 a6 5e ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0017924:	83 c4 10             	add    esp,0x10
c0017927:	85 c0                	test   eax,eax
c0017929:	0f 85 8c 00 00 00    	jne    c00179bb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001792f:	83 ec 0c             	sub    esp,0xc
c0017932:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017936:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001793a:	31 ed                	xor    ebp,ebp
c001793c:	0f af c2             	imul   eax,edx
c001793f:	50                   	push   eax
c0017940:	e8 a2 24 ff ff       	call   c0009de7 <malloc>
c0017945:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017947:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001794b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001794e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017952:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017956:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001795a:	0f af c2             	imul   eax,edx
c001795d:	99                   	cdq    
c001795e:	52                   	push   edx
c001795f:	50                   	push   eax
c0017960:	56                   	push   esi
c0017961:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017964:	83 c4 20             	add    esp,0x20
c0017967:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001796f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017973:	0f 86 80 00 00 00    	jbe    c00179f9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017979:	0f b7 fd             	movzx  edi,bp
c001797c:	c1 e7 05             	shl    edi,0x5
c001797f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017983:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017986:	75 6b                	jne    c00179f3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017988:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001798b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001798f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017992:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017996:	52                   	push   edx
c0017997:	31 d2                	xor    edx,edx
c0017999:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001799c:	52                   	push   edx
c001799d:	50                   	push   eax
c001799e:	56                   	push   esi
c001799f:	e8 26 5e ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c00179a4:	83 c4 10             	add    esp,0x10
c00179a7:	85 c0                	test   eax,eax
c00179a9:	74 17                	je     c00179c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00179ab:	83 ec 0c             	sub    esp,0xc
c00179ae:	68 fc 6a 02 c0       	push   0xc0026afc
c00179b3:	e8 0f 57 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00179b8:	83 c4 10             	add    esp,0x10
c00179bb:	31 c0                	xor    eax,eax
c00179bd:	e9 87 00 00 00       	jmp    c0017a49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00179c2:	83 ec 0c             	sub    esp,0xc
c00179c5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00179c8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00179cb:	50                   	push   eax
c00179cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00179d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179d4:	56                   	push   esi
c00179d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00179d9:	e8 b3 fb ff ff       	call   c0017591 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00179de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179e2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00179e6:	83 c4 20             	add    esp,0x20
c00179e9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00179ed:	73 04                	jae    c00179f3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00179ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179f3:	45                   	inc    ebp
c00179f4:	e9 76 ff ff ff       	jmp    c001796f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00179f9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00179fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a05:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0017a0b:	83 ec 0c             	sub    esp,0xc
c0017a0e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017a14:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017a19:	05 00 10 00 00       	add    eax,0x1000
c0017a1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017a21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a25:	e8 cd 23 ff ff       	call   c0009df7 <free>
c0017a2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a2d:	e8 c5 23 ff ff       	call   c0009df7 <free>
c0017a32:	58                   	pop    eax
c0017a33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a37:	e8 bb 23 ff ff       	call   c0009df7 <free>
c0017a3c:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a3f:	e8 26 5d ff ff       	call   c000d76a <File::close()>
c0017a44:	83 c4 10             	add    esp,0x10
c0017a47:	b0 01                	mov    al,0x1
c0017a49:	83 c4 3c             	add    esp,0x3c
c0017a4c:	5b                   	pop    ebx
c0017a4d:	5e                   	pop    esi
c0017a4e:	5f                   	pop    edi
c0017a4f:	5d                   	pop    ebp
c0017a50:	c3                   	ret    

c0017a51 <Thr::runtimeReferenceHelper()>:
c0017a51:	83 ec 18             	sub    esp,0x18
c0017a54:	68 04 6b 02 c0       	push   0xc0026b04
c0017a59:	e8 69 56 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0017a5e:	fa                   	cli    
c0017a5f:	83 c4 10             	add    esp,0x10
c0017a62:	eb fe                	jmp    c0017a62 <Thr::runtimeReferenceHelper()+0x11>

c0017a64 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017a64:	57                   	push   edi
c0017a65:	56                   	push   esi
c0017a66:	53                   	push   ebx
c0017a67:	31 db                	xor    ebx,ebx
c0017a69:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c0017a6f:	7e 3c                	jle    c0017aad <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017a71:	8b 34 9d 40 a0 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5fc0]
c0017a78:	31 ff                	xor    edi,edi
c0017a7a:	39 3c 9d 40 9f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd60c0],edi
c0017a81:	7e 27                	jle    c0017aaa <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017a83:	50                   	push   eax
c0017a84:	50                   	push   eax
c0017a85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a89:	8b 06                	mov    eax,DWORD PTR [esi]
c0017a8b:	03 04 9d c0 9f 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6040]
c0017a92:	50                   	push   eax
c0017a93:	e8 44 8d fe ff       	call   c00007dc <strcmp>
c0017a98:	83 c4 10             	add    esp,0x10
c0017a9b:	85 c0                	test   eax,eax
c0017a9d:	75 05                	jne    c0017aa4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017a9f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017aa2:	eb 0b                	jmp    c0017aaf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017aa4:	83 c6 10             	add    esi,0x10
c0017aa7:	47                   	inc    edi
c0017aa8:	eb d0                	jmp    c0017a7a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017aaa:	43                   	inc    ebx
c0017aab:	eb bc                	jmp    c0017a69 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017aad:	31 c0                	xor    eax,eax
c0017aaf:	5b                   	pop    ebx
c0017ab0:	5e                   	pop    esi
c0017ab1:	5f                   	pop    edi
c0017ab2:	c3                   	ret    

c0017ab3 <Thr::loadKernelSymbolTable(char const*)>:
c0017ab3:	55                   	push   ebp
c0017ab4:	57                   	push   edi
c0017ab5:	56                   	push   esi
c0017ab6:	53                   	push   ebx
c0017ab7:	83 ec 68             	sub    esp,0x68
c0017aba:	8b 35 10 a1 02 c0    	mov    esi,DWORD PTR ds:0xc002a110
c0017ac0:	68 14 01 00 00       	push   0x114
c0017ac5:	e8 1d 23 ff ff       	call   c0009de7 <malloc>
c0017aca:	83 c4 0c             	add    esp,0xc
c0017acd:	89 c3                	mov    ebx,eax
c0017acf:	56                   	push   esi
c0017ad0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017ad4:	50                   	push   eax
c0017ad5:	e8 58 5b ff ff       	call   c000d632 <File::File(char const*, Process*)>
c0017ada:	5e                   	pop    esi
c0017adb:	5f                   	pop    edi
c0017adc:	6a 01                	push   0x1
c0017ade:	53                   	push   ebx
c0017adf:	e8 28 5c ff ff       	call   c000d70c <File::open(FileOpenMode)>
c0017ae4:	83 c4 10             	add    esp,0x10
c0017ae7:	85 c0                	test   eax,eax
c0017ae9:	74 0a                	je     c0017af5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0017aeb:	83 ec 0c             	sub    esp,0xc
c0017aee:	68 26 6b 02 c0       	push   0xc0026b26
c0017af3:	eb 34                	jmp    c0017b29 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017af5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017afd:	83 ec 0c             	sub    esp,0xc
c0017b00:	6a 34                	push   0x34
c0017b02:	e8 e0 22 ff ff       	call   c0009de7 <malloc>
c0017b07:	59                   	pop    ecx
c0017b08:	89 c7                	mov    edi,eax
c0017b0a:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017b0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b10:	56                   	push   esi
c0017b11:	57                   	push   edi
c0017b12:	6a 00                	push   0x0
c0017b14:	6a 34                	push   0x34
c0017b16:	53                   	push   ebx
c0017b17:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b1a:	83 c4 20             	add    esp,0x20
c0017b1d:	85 c0                	test   eax,eax
c0017b1f:	74 17                	je     c0017b38 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017b21:	83 ec 0c             	sub    esp,0xc
c0017b24:	68 3d 6b 02 c0       	push   0xc0026b3d
c0017b29:	e8 7b d6 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0017b2e:	83 c4 10             	add    esp,0x10
c0017b31:	31 c0                	xor    eax,eax
c0017b33:	e9 31 02 00 00       	jmp    c0017d69 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017b38:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017b3e:	75 e1                	jne    c0017b21 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b40:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017b43:	85 c0                	test   eax,eax
c0017b45:	74 da                	je     c0017b21 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b47:	52                   	push   edx
c0017b48:	31 d2                	xor    edx,edx
c0017b4a:	52                   	push   edx
c0017b4b:	50                   	push   eax
c0017b4c:	53                   	push   ebx
c0017b4d:	e8 78 5c ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0017b52:	83 c4 10             	add    esp,0x10
c0017b55:	85 c0                	test   eax,eax
c0017b57:	75 c8                	jne    c0017b21 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017b59:	83 ec 0c             	sub    esp,0xc
c0017b5c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b60:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b64:	31 ed                	xor    ebp,ebp
c0017b66:	0f af c2             	imul   eax,edx
c0017b69:	50                   	push   eax
c0017b6a:	e8 78 22 ff ff       	call   c0009de7 <malloc>
c0017b6f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017b71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b75:	89 34 24             	mov    DWORD PTR [esp],esi
c0017b78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b7c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b80:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b84:	0f af c2             	imul   eax,edx
c0017b87:	99                   	cdq    
c0017b88:	52                   	push   edx
c0017b89:	50                   	push   eax
c0017b8a:	53                   	push   ebx
c0017b8b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b8e:	83 c4 20             	add    esp,0x20
c0017b91:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017b99:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017ba1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017ba9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017bb1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017bb5:	0f 86 aa 00 00 00    	jbe    c0017c65 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017bbb:	0f b7 f5             	movzx  esi,bp
c0017bbe:	6b f6 28             	imul   esi,esi,0x28
c0017bc1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017bc5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017bc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bcc:	50                   	push   eax
c0017bcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017bd1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017bd5:	8b 16                	mov    edx,DWORD PTR [esi]
c0017bd7:	6b c0 28             	imul   eax,eax,0x28
c0017bda:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017bde:	89 d0                	mov    eax,edx
c0017be0:	31 d2                	xor    edx,edx
c0017be2:	52                   	push   edx
c0017be3:	50                   	push   eax
c0017be4:	53                   	push   ebx
c0017be5:	e8 e0 5b ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0017bea:	83 c4 0c             	add    esp,0xc
c0017bed:	6a 20                	push   0x20
c0017bef:	6a 00                	push   0x0
c0017bf1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017bf5:	52                   	push   edx
c0017bf6:	e8 99 8a fe ff       	call   c0000694 <memset>
c0017bfb:	58                   	pop    eax
c0017bfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bfe:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017c02:	51                   	push   ecx
c0017c03:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017c07:	52                   	push   edx
c0017c08:	6a 00                	push   0x0
c0017c0a:	6a 1f                	push   0x1f
c0017c0c:	53                   	push   ebx
c0017c0d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c10:	83 c4 18             	add    esp,0x18
c0017c13:	68 54 6b 02 c0       	push   0xc0026b54
c0017c18:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017c1c:	52                   	push   edx
c0017c1d:	e8 ba 8b fe ff       	call   c00007dc <strcmp>
c0017c22:	83 c4 10             	add    esp,0x10
c0017c25:	85 c0                	test   eax,eax
c0017c27:	75 0f                	jne    c0017c38 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017c29:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017c2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c38:	50                   	push   eax
c0017c39:	50                   	push   eax
c0017c3a:	68 5c 6b 02 c0       	push   0xc0026b5c
c0017c3f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017c43:	50                   	push   eax
c0017c44:	e8 93 8b fe ff       	call   c00007dc <strcmp>
c0017c49:	83 c4 10             	add    esp,0x10
c0017c4c:	85 c0                	test   eax,eax
c0017c4e:	75 0f                	jne    c0017c5f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017c50:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017c53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c5f:	45                   	inc    ebp
c0017c60:	e9 4c ff ff ff       	jmp    c0017bb1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017c65:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017c6a:	75 10                	jne    c0017c7c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017c6c:	83 ec 0c             	sub    esp,0xc
c0017c6f:	68 64 6b 02 c0       	push   0xc0026b64
c0017c74:	e8 30 d5 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0017c79:	83 c4 10             	add    esp,0x10
c0017c7c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017c81:	75 10                	jne    c0017c93 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017c83:	83 ec 0c             	sub    esp,0xc
c0017c86:	68 64 6b 02 c0       	push   0xc0026b64
c0017c8b:	e8 19 d5 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0017c90:	83 c4 10             	add    esp,0x10
c0017c93:	31 d2                	xor    edx,edx
c0017c95:	50                   	push   eax
c0017c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c9a:	52                   	push   edx
c0017c9b:	50                   	push   eax
c0017c9c:	53                   	push   ebx
c0017c9d:	e8 28 5b ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0017ca2:	5a                   	pop    edx
c0017ca3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ca7:	e8 3b 21 ff ff       	call   c0009de7 <malloc>
c0017cac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017cb4:	31 c9                	xor    ecx,ecx
c0017cb6:	5e                   	pop    esi
c0017cb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cb9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017cbd:	55                   	push   ebp
c0017cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cc2:	51                   	push   ecx
c0017cc3:	52                   	push   edx
c0017cc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017cc8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017ccc:	53                   	push   ebx
c0017ccd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cd0:	83 c4 14             	add    esp,0x14
c0017cd3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017cd7:	e8 0b 21 ff ff       	call   c0009de7 <malloc>
c0017cdc:	89 c6                	mov    esi,eax
c0017cde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ce0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ce3:	56                   	push   esi
c0017ce4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017ce8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cec:	51                   	push   ecx
c0017ced:	52                   	push   edx
c0017cee:	53                   	push   ebx
c0017cef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cf6:	8b 15 c0 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0c0
c0017cfc:	83 c4 1c             	add    esp,0x1c
c0017cff:	c1 e8 04             	shr    eax,0x4
c0017d02:	89 04 95 40 9f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd60c0],eax
c0017d09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d0d:	31 d2                	xor    edx,edx
c0017d0f:	52                   	push   edx
c0017d10:	50                   	push   eax
c0017d11:	53                   	push   ebx
c0017d12:	e8 b3 5a ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0017d17:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017d19:	31 d2                	xor    edx,edx
c0017d1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d1e:	56                   	push   esi
c0017d1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d23:	52                   	push   edx
c0017d24:	50                   	push   eax
c0017d25:	53                   	push   ebx
c0017d26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d29:	83 c4 14             	add    esp,0x14
c0017d2c:	53                   	push   ebx
c0017d2d:	e8 38 5a ff ff       	call   c000d76a <File::close()>
c0017d32:	5d                   	pop    ebp
c0017d33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d37:	e8 bb 20 ff ff       	call   c0009df7 <free>
c0017d3c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017d3f:	e8 b3 20 ff ff       	call   c0009df7 <free>
c0017d44:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c0017d49:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d4d:	8d 50 01             	lea    edx,[eax+0x1]
c0017d50:	89 0c 85 40 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5fc0],ecx
c0017d57:	89 34 85 c0 9f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6040],esi
c0017d5e:	89 15 c0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0c0,edx
c0017d64:	83 c4 10             	add    esp,0x10
c0017d67:	b0 01                	mov    al,0x1
c0017d69:	83 c4 5c             	add    esp,0x5c
c0017d6c:	5b                   	pop    ebx
c0017d6d:	5e                   	pop    esi
c0017d6e:	5f                   	pop    edi
c0017d6f:	5d                   	pop    ebp
c0017d70:	c3                   	ret    

c0017d71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017d71:	55                   	push   ebp
c0017d72:	57                   	push   edi
c0017d73:	56                   	push   esi
c0017d74:	53                   	push   ebx
c0017d75:	81 ec 68 03 00 00    	sub    esp,0x368
c0017d7b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017d82:	8b 1d 10 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a110
c0017d88:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017d8c:	68 14 01 00 00       	push   0x114
c0017d91:	e8 51 20 ff ff       	call   c0009de7 <malloc>
c0017d96:	83 c4 0c             	add    esp,0xc
c0017d99:	89 c5                	mov    ebp,eax
c0017d9b:	53                   	push   ebx
c0017d9c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017da3:	50                   	push   eax
c0017da4:	e8 89 58 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c0017da9:	5e                   	pop    esi
c0017daa:	5f                   	pop    edi
c0017dab:	6a 01                	push   0x1
c0017dad:	55                   	push   ebp
c0017dae:	e8 59 59 ff ff       	call   c000d70c <File::open(FileOpenMode)>
c0017db3:	83 c4 10             	add    esp,0x10
c0017db6:	85 c0                	test   eax,eax
c0017db8:	0f 85 a7 06 00 00    	jne    c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017dbe:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017dc6:	83 ec 0c             	sub    esp,0xc
c0017dc9:	6a 34                	push   0x34
c0017dcb:	e8 17 20 ff ff       	call   c0009de7 <malloc>
c0017dd0:	5b                   	pop    ebx
c0017dd1:	89 c7                	mov    edi,eax
c0017dd3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017dd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017dda:	53                   	push   ebx
c0017ddb:	57                   	push   edi
c0017ddc:	6a 00                	push   0x0
c0017dde:	6a 34                	push   0x34
c0017de0:	55                   	push   ebp
c0017de1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017de4:	83 c4 20             	add    esp,0x20
c0017de7:	85 c0                	test   eax,eax
c0017de9:	0f 85 76 06 00 00    	jne    c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017def:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017df5:	0f 85 6a 06 00 00    	jne    c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017dfb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017dfe:	85 c0                	test   eax,eax
c0017e00:	0f 84 5f 06 00 00    	je     c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e06:	31 d2                	xor    edx,edx
c0017e08:	51                   	push   ecx
c0017e09:	52                   	push   edx
c0017e0a:	50                   	push   eax
c0017e0b:	55                   	push   ebp
c0017e0c:	e8 b9 59 ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	85 c0                	test   eax,eax
c0017e16:	0f 85 49 06 00 00    	jne    c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e1c:	83 ec 0c             	sub    esp,0xc
c0017e1f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017e22:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017e26:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017e2a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017e2e:	0f af c2             	imul   eax,edx
c0017e31:	50                   	push   eax
c0017e32:	e8 b0 1f ff ff       	call   c0009de7 <malloc>
c0017e37:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e45:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017e49:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017e4d:	0f af c2             	imul   eax,edx
c0017e50:	99                   	cdq    
c0017e51:	52                   	push   edx
c0017e52:	50                   	push   eax
c0017e53:	55                   	push   ebp
c0017e54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e57:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017e5a:	83 c4 20             	add    esp,0x20
c0017e5d:	85 c0                	test   eax,eax
c0017e5f:	0f 84 00 06 00 00    	je     c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e65:	52                   	push   edx
c0017e66:	31 d2                	xor    edx,edx
c0017e68:	52                   	push   edx
c0017e69:	50                   	push   eax
c0017e6a:	55                   	push   ebp
c0017e6b:	e8 5a 59 ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0017e70:	83 c4 10             	add    esp,0x10
c0017e73:	85 c0                	test   eax,eax
c0017e75:	0f 85 ea 05 00 00    	jne    c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e7b:	83 ec 0c             	sub    esp,0xc
c0017e7e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017e82:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017e86:	31 f6                	xor    esi,esi
c0017e88:	0f af c2             	imul   eax,edx
c0017e8b:	50                   	push   eax
c0017e8c:	e8 56 1f ff ff       	call   c0009de7 <malloc>
c0017e91:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e94:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017e98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e9f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017ea3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017ea7:	0f af c2             	imul   eax,edx
c0017eaa:	99                   	cdq    
c0017eab:	52                   	push   edx
c0017eac:	50                   	push   eax
c0017ead:	55                   	push   ebp
c0017eae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017eb1:	83 c4 20             	add    esp,0x20
c0017eb4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017eb8:	0f 86 8a 00 00 00    	jbe    c0017f48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017ebe:	0f b7 de             	movzx  ebx,si
c0017ec1:	c1 e3 05             	shl    ebx,0x5
c0017ec4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017ec8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017ecb:	75 75                	jne    c0017f42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017ecd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017ed0:	31 d2                	xor    edx,edx
c0017ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ed6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017ed9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017edd:	50                   	push   eax
c0017ede:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017ee1:	52                   	push   edx
c0017ee2:	50                   	push   eax
c0017ee3:	55                   	push   ebp
c0017ee4:	e8 e1 58 ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0017ee9:	83 c4 10             	add    esp,0x10
c0017eec:	85 c0                	test   eax,eax
c0017eee:	0f 85 71 05 00 00    	jne    c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ef4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017efb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017efe:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017f02:	31 d2                	xor    edx,edx
c0017f04:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017f08:	83 ec 0c             	sub    esp,0xc
c0017f0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f0f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f16:	50                   	push   eax
c0017f17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1f:	52                   	push   edx
c0017f20:	50                   	push   eax
c0017f21:	55                   	push   ebp
c0017f22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f25:	83 c4 1c             	add    esp,0x1c
c0017f28:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017f2b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017f2e:	50                   	push   eax
c0017f2f:	6a 00                	push   0x0
c0017f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f35:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017f39:	50                   	push   eax
c0017f3a:	e8 55 87 fe ff       	call   c0000694 <memset>
c0017f3f:	83 c4 10             	add    esp,0x10
c0017f42:	46                   	inc    esi
c0017f43:	e9 6c ff ff ff       	jmp    c0017eb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017f48:	53                   	push   ebx
c0017f49:	31 db                	xor    ebx,ebx
c0017f4b:	68 00 01 00 00       	push   0x100
c0017f50:	6a 00                	push   0x0
c0017f52:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017f56:	50                   	push   eax
c0017f57:	e8 38 87 fe ff       	call   c0000694 <memset>
c0017f5c:	83 c4 0c             	add    esp,0xc
c0017f5f:	68 00 01 00 00       	push   0x100
c0017f64:	6a 00                	push   0x0
c0017f66:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017f6d:	50                   	push   eax
c0017f6e:	e8 21 87 fe ff       	call   c0000694 <memset>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017f7e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f86:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017f8e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017f96:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017f9e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017fa2:	0f 86 30 01 00 00    	jbe    c00180d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017fa8:	0f b7 f3             	movzx  esi,bx
c0017fab:	6b f6 28             	imul   esi,esi,0x28
c0017fae:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017fb2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017fb9:	52                   	push   edx
c0017fba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017fbe:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017fc2:	8b 06                	mov    eax,DWORD PTR [esi]
c0017fc4:	6b d2 28             	imul   edx,edx,0x28
c0017fc7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017fcb:	31 d2                	xor    edx,edx
c0017fcd:	52                   	push   edx
c0017fce:	50                   	push   eax
c0017fcf:	55                   	push   ebp
c0017fd0:	e8 f5 57 ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0017fd5:	83 c4 0c             	add    esp,0xc
c0017fd8:	6a 20                	push   0x20
c0017fda:	6a 00                	push   0x0
c0017fdc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017fe3:	51                   	push   ecx
c0017fe4:	e8 ab 86 fe ff       	call   c0000694 <memset>
c0017fe9:	59                   	pop    ecx
c0017fea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017fed:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ff1:	52                   	push   edx
c0017ff2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017ff9:	51                   	push   ecx
c0017ffa:	6a 00                	push   0x0
c0017ffc:	6a 1f                	push   0x1f
c0017ffe:	55                   	push   ebp
c0017fff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018002:	83 c4 1c             	add    esp,0x1c
c0018005:	6a 09                	push   0x9
c0018007:	68 7e 6b 02 c0       	push   0xc0026b7e
c001800c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0018013:	51                   	push   ecx
c0018014:	e8 77 85 fe ff       	call   c0000590 <memcmp>
c0018019:	83 c4 10             	add    esp,0x10
c001801c:	85 c0                	test   eax,eax
c001801e:	75 21                	jne    c0018041 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0018020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018024:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018028:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001802c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018030:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018033:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001803a:	89 d0                	mov    eax,edx
c001803c:	40                   	inc    eax
c001803d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018041:	50                   	push   eax
c0018042:	6a 09                	push   0x9
c0018044:	68 88 6b 02 c0       	push   0xc0026b88
c0018049:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018050:	50                   	push   eax
c0018051:	e8 3a 85 fe ff       	call   c0000590 <memcmp>
c0018056:	83 c4 10             	add    esp,0x10
c0018059:	85 c0                	test   eax,eax
c001805b:	75 21                	jne    c001807e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001805d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018061:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018065:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0018069:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001806d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018070:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0018077:	89 d0                	mov    eax,edx
c0018079:	40                   	inc    eax
c001807a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001807e:	50                   	push   eax
c001807f:	50                   	push   eax
c0018080:	68 54 6b 02 c0       	push   0xc0026b54
c0018085:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001808c:	50                   	push   eax
c001808d:	e8 4a 87 fe ff       	call   c00007dc <strcmp>
c0018092:	83 c4 10             	add    esp,0x10
c0018095:	85 c0                	test   eax,eax
c0018097:	75 0f                	jne    c00180a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0018099:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001809c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180a8:	50                   	push   eax
c00180a9:	50                   	push   eax
c00180aa:	68 5c 6b 02 c0       	push   0xc0026b5c
c00180af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180b6:	50                   	push   eax
c00180b7:	e8 20 87 fe ff       	call   c00007dc <strcmp>
c00180bc:	83 c4 10             	add    esp,0x10
c00180bf:	85 c0                	test   eax,eax
c00180c1:	75 0f                	jne    c00180d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00180c3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00180c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00180ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00180d2:	43                   	inc    ebx
c00180d3:	e9 c6 fe ff ff       	jmp    c0017f9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00180d8:	31 d2                	xor    edx,edx
c00180da:	50                   	push   eax
c00180db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180df:	52                   	push   edx
c00180e0:	50                   	push   eax
c00180e1:	55                   	push   ebp
c00180e2:	e8 e3 56 ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c00180e7:	58                   	pop    eax
c00180e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180ec:	e8 f6 1c ff ff       	call   c0009de7 <malloc>
c00180f1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00180f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00180f8:	31 d2                	xor    edx,edx
c00180fa:	58                   	pop    eax
c00180fb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00180ff:	53                   	push   ebx
c0018100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018104:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018108:	52                   	push   edx
c0018109:	50                   	push   eax
c001810a:	55                   	push   ebp
c001810b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001810e:	83 c4 14             	add    esp,0x14
c0018111:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018115:	e8 cd 1c ff ff       	call   c0009de7 <malloc>
c001811a:	31 d2                	xor    edx,edx
c001811c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018120:	83 c4 0c             	add    esp,0xc
c0018123:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018127:	52                   	push   edx
c0018128:	50                   	push   eax
c0018129:	55                   	push   ebp
c001812a:	e8 9b 56 ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c001812f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018132:	31 d2                	xor    edx,edx
c0018134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018137:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001813b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001813f:	52                   	push   edx
c0018140:	50                   	push   eax
c0018141:	55                   	push   ebp
c0018142:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018145:	83 c4 20             	add    esp,0x20
c0018148:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018150:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018154:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0018158:	0f 84 0b 03 00 00    	je     c0018469 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001815e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0018165:	31 d2                	xor    edx,edx
c0018167:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001816b:	c1 e8 03             	shr    eax,0x3
c001816e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0018172:	51                   	push   ecx
c0018173:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018177:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001817b:	52                   	push   edx
c001817c:	50                   	push   eax
c001817d:	55                   	push   ebp
c001817e:	e8 47 56 ff ff       	call   c000d7ca <File::seek(unsigned long long)>
c0018183:	5b                   	pop    ebx
c0018184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018188:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001818f:	e8 53 1c ff ff       	call   c0009de7 <malloc>
c0018194:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018197:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001819b:	31 d2                	xor    edx,edx
c001819d:	5e                   	pop    esi
c001819e:	8d 44 24 58          	lea    eax,[esp+0x58]
c00181a2:	50                   	push   eax
c00181a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181ab:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00181b2:	52                   	push   edx
c00181b3:	50                   	push   eax
c00181b4:	55                   	push   ebp
c00181b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00181b8:	83 c4 20             	add    esp,0x20
c00181bb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00181c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00181c7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00181cb:	0f 8d 7c 02 00 00    	jge    c001844d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00181d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00181d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181d9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00181de:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00181e1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181e9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00181ed:	89 d8                	mov    eax,ebx
c00181ef:	c1 e8 08             	shr    eax,0x8
c00181f2:	89 c6                	mov    esi,eax
c00181f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00181f8:	c1 e6 04             	shl    esi,0x4
c00181fb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00181ff:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0018202:	85 d2                	test   edx,edx
c0018204:	0f 85 bf 00 00 00    	jne    c00182c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001820a:	83 ec 0c             	sub    esp,0xc
c001820d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018211:	03 06                	add    eax,DWORD PTR [esi]
c0018213:	50                   	push   eax
c0018214:	e8 4b f8 ff ff       	call   c0017a64 <Thr::getAddressOfKernelSymbol(char const*)>
c0018219:	83 c4 10             	add    esp,0x10
c001821c:	89 c2                	mov    edx,eax
c001821e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0018223:	85 c0                	test   eax,eax
c0018225:	0f 85 9e 00 00 00    	jne    c00182c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001822b:	83 ec 0c             	sub    esp,0xc
c001822e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018232:	03 06                	add    eax,DWORD PTR [esi]
c0018234:	50                   	push   eax
c0018235:	e8 e6 06 ff ff       	call   c0008920 <Krnl::resolveCompatibilitySymbol(char*)>
c001823a:	83 c4 10             	add    esp,0x10
c001823d:	89 c2                	mov    edx,eax
c001823f:	85 c0                	test   eax,eax
c0018241:	0f 85 82 00 00 00    	jne    c00182c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0018247:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001824b:	50                   	push   eax
c001824c:	50                   	push   eax
c001824d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018251:	03 06                	add    eax,DWORD PTR [esi]
c0018253:	50                   	push   eax
c0018254:	68 92 6b 02 c0       	push   0xc0026b92
c0018259:	e8 69 4e ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001825e:	58                   	pop    eax
c001825f:	5a                   	pop    edx
c0018260:	68 ac 6b 02 c0       	push   0xc0026bac
c0018265:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001826c:	50                   	push   eax
c001826d:	e8 de 84 fe ff       	call   c0000750 <strcpy>
c0018272:	59                   	pop    ecx
c0018273:	58                   	pop    eax
c0018274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018278:	03 06                	add    eax,DWORD PTR [esi]
c001827a:	50                   	push   eax
c001827b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018282:	50                   	push   eax
c0018283:	e8 08 86 fe ff       	call   c0000890 <strcat>
c0018288:	58                   	pop    eax
c0018289:	5a                   	pop    edx
c001828a:	68 42 6c 02 c0       	push   0xc0026c42
c001828f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018296:	50                   	push   eax
c0018297:	e8 f4 85 fe ff       	call   c0000890 <strcat>
c001829c:	83 c4 10             	add    esp,0x10
c001829f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182a4:	0f 84 5d 01 00 00    	je     c0018407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00182aa:	83 ec 0c             	sub    esp,0xc
c00182ad:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182b4:	50                   	push   eax
c00182b5:	e8 ef ce ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00182ba:	83 c4 10             	add    esp,0x10
c00182bd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00182c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00182c5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00182c9:	80 fb 01             	cmp    bl,0x1
c00182cc:	0f 85 88 00 00 00    	jne    c001835a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00182d2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00182d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00182dd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00182e1:	01 ce                	add    esi,ecx
c00182e3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00182e9:	0f 94 c0             	sete   al
c00182ec:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00182f2:	0f 94 c3             	sete   bl
c00182f5:	09 c3                	or     ebx,eax
c00182f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00182f9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00182fe:	74 41                	je     c0018341 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0018300:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018303:	84 db                	test   bl,bl
c0018305:	75 15                	jne    c001831c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0018307:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001830b:	66 83 f8 0c          	cmp    ax,0xc
c001830f:	76 05                	jbe    c0018316 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0018311:	b8 0c 00 00 00       	mov    eax,0xc
c0018316:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001831a:	76 37                	jbe    c0018353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001831c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0018320:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018325:	0f 84 dc 00 00 00    	je     c0018407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001832b:	83 ec 0c             	sub    esp,0xc
c001832e:	68 c3 6b 02 c0       	push   0xc0026bc3
c0018333:	e8 71 ce ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0018338:	83 c4 10             	add    esp,0x10
c001833b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001833f:	eb 12                	jmp    c0018353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018341:	01 c1                	add    ecx,eax
c0018343:	84 db                	test   bl,bl
c0018345:	75 0c                	jne    c0018353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018347:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001834b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001834f:	77 02                	ja     c0018353 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018351:	01 d1                	add    ecx,edx
c0018353:	89 0e                	mov    DWORD PTR [esi],ecx
c0018355:	e9 ea 00 00 00       	jmp    c0018444 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001835a:	80 fb 02             	cmp    bl,0x2
c001835d:	75 7c                	jne    c00183db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001835f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018366:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001836a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001836e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018374:	74 20                	je     c0018396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0018376:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001837c:	74 18                	je     c0018396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001837e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018382:	b9 0a 00 00 00       	mov    ecx,0xa
c0018387:	66 83 f8 0e          	cmp    ax,0xe
c001838b:	77 03                	ja     c0018390 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001838d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0018390:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0018394:	76 1f                	jbe    c00183b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0018396:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001839a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001839f:	74 66                	je     c0018407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00183a1:	83 ec 0c             	sub    esp,0xc
c00183a4:	68 df 6b 02 c0       	push   0xc0026bdf
c00183a9:	e8 fb cd ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00183ae:	83 c4 10             	add    esp,0x10
c00183b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00183b7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00183bc:	74 13                	je     c00183d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00183be:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00183c2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00183c9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00183cd:	01 c8                	add    eax,ecx
c00183cf:	eb 04                	jmp    c00183d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00183d1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00183d5:	01 c2                	add    edx,eax
c00183d7:	89 16                	mov    DWORD PTR [esi],edx
c00183d9:	eb 69                	jmp    c0018444 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00183db:	0f b6 db             	movzx  ebx,bl
c00183de:	50                   	push   eax
c00183df:	50                   	push   eax
c00183e0:	53                   	push   ebx
c00183e1:	68 fb 6b 02 c0       	push   0xc0026bfb
c00183e6:	e8 dc 4c ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183f3:	74 12                	je     c0018407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00183f5:	83 ec 0c             	sub    esp,0xc
c00183f8:	68 06 6c 02 c0       	push   0xc0026c06
c00183fd:	e8 a7 cd ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0018402:	83 c4 10             	add    esp,0x10
c0018405:	eb 3d                	jmp    c0018444 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0018407:	83 ec 0c             	sub    esp,0xc
c001840a:	55                   	push   ebp
c001840b:	e8 5a 53 ff ff       	call   c000d76a <File::close()>
c0018410:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018413:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018416:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018419:	59                   	pop    ecx
c001841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001841e:	e8 d4 19 ff ff       	call   c0009df7 <free>
c0018423:	5b                   	pop    ebx
c0018424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018428:	e8 ca 19 ff ff       	call   c0009df7 <free>
c001842d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018430:	e8 c2 19 ff ff       	call   c0009df7 <free>
c0018435:	5e                   	pop    esi
c0018436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001843a:	e8 b8 19 ff ff       	call   c0009df7 <free>
c001843f:	83 c4 10             	add    esp,0x10
c0018442:	eb 21                	jmp    c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0018444:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0018448:	e9 76 fd ff ff       	jmp    c00181c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001844d:	83 ec 0c             	sub    esp,0xc
c0018450:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018454:	e8 9e 19 ff ff       	call   c0009df7 <free>
c0018459:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001845d:	83 c4 10             	add    esp,0x10
c0018460:	e9 eb fc ff ff       	jmp    c0018150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0018465:	31 c0                	xor    eax,eax
c0018467:	eb 33                	jmp    c001849c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0018469:	83 ec 0c             	sub    esp,0xc
c001846c:	55                   	push   ebp
c001846d:	e8 f8 52 ff ff       	call   c000d76a <File::close()>
c0018472:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018475:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018478:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001847b:	58                   	pop    eax
c001847c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018480:	e8 72 19 ff ff       	call   c0009df7 <free>
c0018485:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018488:	e8 6a 19 ff ff       	call   c0009df7 <free>
c001848d:	5a                   	pop    edx
c001848e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018492:	e8 60 19 ff ff       	call   c0009df7 <free>
c0018497:	83 c4 10             	add    esp,0x10
c001849a:	b0 01                	mov    al,0x1
c001849c:	81 c4 5c 03 00 00    	add    esp,0x35c
c00184a2:	5b                   	pop    ebx
c00184a3:	5e                   	pop    esi
c00184a4:	5f                   	pop    edi
c00184a5:	5d                   	pop    ebp
c00184a6:	c3                   	ret    

c00184a7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00184a7:	56                   	push   esi
c00184a8:	31 d2                	xor    edx,edx
c00184aa:	53                   	push   ebx
c00184ab:	8b 1d 20 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029920
c00184b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00184b5:	39 d3                	cmp    ebx,edx
c00184b7:	7e 1b                	jle    c00184d4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00184b9:	8b 04 95 40 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64c0]
c00184c0:	39 c8                	cmp    eax,ecx
c00184c2:	77 0d                	ja     c00184d1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00184c4:	8b 34 95 40 99 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd66c0]
c00184cb:	01 c6                	add    esi,eax
c00184cd:	39 ce                	cmp    esi,ecx
c00184cf:	77 05                	ja     c00184d6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00184d1:	42                   	inc    edx
c00184d2:	eb e1                	jmp    c00184b5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00184d4:	31 c0                	xor    eax,eax
c00184d6:	5b                   	pop    ebx
c00184d7:	5e                   	pop    esi
c00184d8:	c3                   	ret    

c00184d9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00184d9:	53                   	push   ebx
c00184da:	31 c0                	xor    eax,eax
c00184dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00184e0:	8b 1d 20 99 02 c0    	mov    ebx,DWORD PTR ds:0xc0029920
c00184e6:	39 c3                	cmp    ebx,eax
c00184e8:	7e 22                	jle    c001850c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00184ea:	8b 14 85 40 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64c0]
c00184f1:	39 ca                	cmp    edx,ecx
c00184f3:	77 14                	ja     c0018509 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00184f5:	03 14 85 40 99 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd66c0]
c00184fc:	39 ca                	cmp    edx,ecx
c00184fe:	76 09                	jbe    c0018509 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018500:	8b 04 85 40 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd62c0]
c0018507:	eb 05                	jmp    c001850e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018509:	40                   	inc    eax
c001850a:	eb da                	jmp    c00184e6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001850c:	31 c0                	xor    eax,eax
c001850e:	5b                   	pop    ebx
c001850f:	c3                   	ret    

c0018510 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018510:	53                   	push   ebx
c0018511:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018515:	53                   	push   ebx
c0018516:	e8 8c ff ff ff       	call   c00184a7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001851b:	5a                   	pop    edx
c001851c:	31 d2                	xor    edx,edx
c001851e:	85 c0                	test   eax,eax
c0018520:	74 04                	je     c0018526 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018522:	89 da                	mov    edx,ebx
c0018524:	29 c2                	sub    edx,eax
c0018526:	89 d0                	mov    eax,edx
c0018528:	5b                   	pop    ebx
c0018529:	c3                   	ret    

c001852a <Thr::loadDLL(char const*, bool)>:
c001852a:	55                   	push   ebp
c001852b:	57                   	push   edi
c001852c:	56                   	push   esi
c001852d:	53                   	push   ebx
c001852e:	81 ec 34 01 00 00    	sub    esp,0x134
c0018534:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001853b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0018542:	56                   	push   esi
c0018543:	68 1e 6c 02 c0       	push   0xc0026c1e
c0018548:	e8 7a 4b ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001854d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018554:	e8 8e 18 ff ff       	call   c0009de7 <malloc>
c0018559:	83 c4 0c             	add    esp,0xc
c001855c:	89 c3                	mov    ebx,eax
c001855e:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0018564:	56                   	push   esi
c0018565:	50                   	push   eax
c0018566:	e8 c7 50 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c001856b:	83 c4 10             	add    esp,0x10
c001856e:	85 db                	test   ebx,ebx
c0018570:	75 3c                	jne    c00185ae <Thr::loadDLL(char const*, bool)+0x84>
c0018572:	89 f8                	mov    eax,edi
c0018574:	84 c0                	test   al,al
c0018576:	0f 84 d2 01 00 00    	je     c001874e <Thr::loadDLL(char const*, bool)+0x224>
c001857c:	55                   	push   ebp
c001857d:	55                   	push   ebp
c001857e:	68 2f 6c 02 c0       	push   0xc0026c2f
c0018583:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0018587:	55                   	push   ebp
c0018588:	e8 c3 81 fe ff       	call   c0000750 <strcpy>
c001858d:	58                   	pop    eax
c001858e:	5a                   	pop    edx
c001858f:	56                   	push   esi
c0018590:	55                   	push   ebp
c0018591:	e8 fa 82 fe ff       	call   c0000890 <strcat>
c0018596:	59                   	pop    ecx
c0018597:	58                   	pop    eax
c0018598:	68 42 6c 02 c0       	push   0xc0026c42
c001859d:	55                   	push   ebp
c001859e:	e8 ed 82 fe ff       	call   c0000890 <strcat>
c00185a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00185a6:	e8 fe cb ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00185ab:	83 c4 10             	add    esp,0x10
c00185ae:	51                   	push   ecx
c00185af:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00185b3:	50                   	push   eax
c00185b4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00185b8:	50                   	push   eax
c00185b9:	53                   	push   ebx
c00185ba:	e8 f9 53 ff ff       	call   c000d9b8 <File::stat(unsigned long long*, bool*)>
c00185bf:	83 c4 10             	add    esp,0x10
c00185c2:	85 db                	test   ebx,ebx
c00185c4:	74 0c                	je     c00185d2 <Thr::loadDLL(char const*, bool)+0xa8>
c00185c6:	83 ec 0c             	sub    esp,0xc
c00185c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00185cb:	53                   	push   ebx
c00185cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185cf:	83 c4 10             	add    esp,0x10
c00185d2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00185d7:	75 0a                	jne    c00185e3 <Thr::loadDLL(char const*, bool)+0xb9>
c00185d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185dd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00185e1:	75 3c                	jne    c001861f <Thr::loadDLL(char const*, bool)+0xf5>
c00185e3:	89 f8                	mov    eax,edi
c00185e5:	84 c0                	test   al,al
c00185e7:	0f 84 49 01 00 00    	je     c0018736 <Thr::loadDLL(char const*, bool)+0x20c>
c00185ed:	51                   	push   ecx
c00185ee:	51                   	push   ecx
c00185ef:	68 2f 6c 02 c0       	push   0xc0026c2f
c00185f4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00185f8:	53                   	push   ebx
c00185f9:	e8 52 81 fe ff       	call   c0000750 <strcpy>
c00185fe:	5d                   	pop    ebp
c00185ff:	58                   	pop    eax
c0018600:	56                   	push   esi
c0018601:	53                   	push   ebx
c0018602:	e8 89 82 fe ff       	call   c0000890 <strcat>
c0018607:	58                   	pop    eax
c0018608:	5a                   	pop    edx
c0018609:	68 42 6c 02 c0       	push   0xc0026c42
c001860e:	53                   	push   ebx
c001860f:	e8 7c 82 fe ff       	call   c0000890 <strcat>
c0018614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018617:	e8 8d cb ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001861c:	83 c4 10             	add    esp,0x10
c001861f:	52                   	push   edx
c0018620:	6a 03                	push   0x3
c0018622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018626:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001862a:	05 ff 0f 00 00       	add    eax,0xfff
c001862f:	83 d2 00             	adc    edx,0x0
c0018632:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018636:	50                   	push   eax
c0018637:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c001863d:	e8 08 3f ff ff       	call   c000c54a <VAS::allocatePages(int, int)>
c0018642:	59                   	pop    ecx
c0018643:	89 c3                	mov    ebx,eax
c0018645:	5d                   	pop    ebp
c0018646:	50                   	push   eax
c0018647:	68 2e 4b 02 c0       	push   0xc0024b2e
c001864c:	e8 76 4a ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0018651:	89 34 24             	mov    DWORD PTR [esp],esi
c0018654:	e8 57 80 fe ff       	call   c00006b0 <strlen>
c0018659:	8b 2d 20 99 02 c0    	mov    ebp,DWORD PTR ds:0xc0029920
c001865f:	40                   	inc    eax
c0018660:	89 04 24             	mov    DWORD PTR [esp],eax
c0018663:	e8 7f 17 ff ff       	call   c0009de7 <malloc>
c0018668:	89 04 ad 40 9d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd62c0],eax
c001866f:	58                   	pop    eax
c0018670:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c0018675:	5a                   	pop    edx
c0018676:	56                   	push   esi
c0018677:	ff 34 85 40 9d 02 c0 	push   DWORD PTR [eax*4-0x3ffd62c0]
c001867e:	e8 cd 80 fe ff       	call   c0000750 <strcpy>
c0018683:	a1 20 99 02 c0       	mov    eax,ds:0xc0029920
c0018688:	8d 50 01             	lea    edx,[eax+0x1]
c001868b:	89 1c 85 40 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64c0],ebx
c0018692:	89 15 20 99 02 c0    	mov    DWORD PTR ds:0xc0029920,edx
c0018698:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001869c:	83 c4 0c             	add    esp,0xc
c001869f:	89 14 85 40 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66c0],edx
c00186a6:	6a 01                	push   0x1
c00186a8:	53                   	push   ebx
c00186a9:	56                   	push   esi
c00186aa:	e8 c2 f6 ff ff       	call   c0017d71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00186af:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00186b3:	83 c4 10             	add    esp,0x10
c00186b6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00186bb:	0f 85 89 00 00 00    	jne    c001874a <Thr::loadDLL(char const*, bool)+0x220>
c00186c1:	89 f8                	mov    eax,edi
c00186c3:	84 c0                	test   al,al
c00186c5:	74 73                	je     c001873a <Thr::loadDLL(char const*, bool)+0x210>
c00186c7:	83 ec 0c             	sub    esp,0xc
c00186ca:	68 44 6c 02 c0       	push   0xc0026c44
c00186cf:	e8 d5 ca ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00186d4:	83 c4 10             	add    esp,0x10
c00186d7:	eb 61                	jmp    c001873a <Thr::loadDLL(char const*, bool)+0x210>
c00186d9:	50                   	push   eax
c00186da:	50                   	push   eax
c00186db:	89 e8                	mov    eax,ebp
c00186dd:	c1 e0 0c             	shl    eax,0xc
c00186e0:	01 d8                	add    eax,ebx
c00186e2:	50                   	push   eax
c00186e3:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c00186e9:	e8 c4 39 ff ff       	call   c000c0b2 <VAS::getPageTableEntry(unsigned long)>
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00186f3:	a8 60                	test   al,0x60
c00186f5:	75 11                	jne    c0018708 <Thr::loadDLL(char const*, bool)+0x1de>
c00186f7:	83 ec 0c             	sub    esp,0xc
c00186fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00186ff:	50                   	push   eax
c0018700:	e8 16 1d ff ff       	call   c000a41b <Phys::freePage(unsigned long)>
c0018705:	83 c4 10             	add    esp,0x10
c0018708:	45                   	inc    ebp
c0018709:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001870d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018711:	05 ff 0f 00 00       	add    eax,0xfff
c0018716:	bf 00 00 00 00       	mov    edi,0x0
c001871b:	83 d2 00             	adc    edx,0x0
c001871e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018722:	c1 ea 0c             	shr    edx,0xc
c0018725:	39 c5                	cmp    ebp,eax
c0018727:	89 d1                	mov    ecx,edx
c0018729:	89 f8                	mov    eax,edi
c001872b:	19 c8                	sbb    eax,ecx
c001872d:	72 aa                	jb     c00186d9 <Thr::loadDLL(char const*, bool)+0x1af>
c001872f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018734:	75 18                	jne    c001874e <Thr::loadDLL(char const*, bool)+0x224>
c0018736:	31 db                	xor    ebx,ebx
c0018738:	eb 14                	jmp    c001874e <Thr::loadDLL(char const*, bool)+0x224>
c001873a:	83 ec 0c             	sub    esp,0xc
c001873d:	68 63 6c 02 c0       	push   0xc0026c63
c0018742:	e8 62 ca ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0018747:	83 c4 10             	add    esp,0x10
c001874a:	31 ed                	xor    ebp,ebp
c001874c:	eb bb                	jmp    c0018709 <Thr::loadDLL(char const*, bool)+0x1df>
c001874e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018754:	89 d8                	mov    eax,ebx
c0018756:	5b                   	pop    ebx
c0018757:	5e                   	pop    esi
c0018758:	5f                   	pop    edi
c0018759:	5d                   	pop    ebp
c001875a:	c3                   	ret    

c001875b <Thr::executeDLL(unsigned long, void*)>:
c001875b:	56                   	push   esi
c001875c:	53                   	push   ebx
c001875d:	52                   	push   edx
c001875e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018762:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018766:	85 db                	test   ebx,ebx
c0018768:	75 10                	jne    c001877a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001876a:	83 ec 0c             	sub    esp,0xc
c001876d:	68 7f 6c 02 c0       	push   0xc0026c7f
c0018772:	e8 32 ca ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0018777:	83 c4 10             	add    esp,0x10
c001877a:	50                   	push   eax
c001877b:	50                   	push   eax
c001877c:	53                   	push   ebx
c001877d:	68 a9 6c 02 c0       	push   0xc0026ca9
c0018782:	e8 40 49 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0018787:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001878b:	89 d8                	mov    eax,ebx
c001878d:	83 c4 14             	add    esp,0x14
c0018790:	5b                   	pop    ebx
c0018791:	5e                   	pop    esi
c0018792:	ff e0                	jmp    eax

c0018794 <userModeEntryPoint(void*)>:
c0018794:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0018799:	48                   	dec    eax
c001879a:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001879f:	75 03                	jne    c00187a4 <userModeEntryPoint(void*)+0x10>
c00187a1:	fb                   	sti    
c00187a2:	66 90                	xchg   ax,ax
c00187a4:	fb                   	sti    
c00187a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00187ad:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00187b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187b7:	e9 b3 7a fe ff       	jmp    c000026f <goToUsermode>

c00187bc <changeTSS>:
c00187bc:	83 ec 14             	sub    esp,0x14
c00187bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00187c7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00187cc:	c1 e2 15             	shl    edx,0x15
c00187cf:	29 d0                	sub    eax,edx
c00187d1:	50                   	push   eax
c00187d2:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00187d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00187dd:	05 7c 11 00 00       	add    eax,0x117c
c00187e2:	50                   	push   eax
c00187e3:	e8 0c 2f ff ff       	call   c000b6f4 <TSS::setESP(unsigned long)>
c00187e8:	83 c4 1c             	add    esp,0x1c
c00187eb:	c3                   	ret    

c00187ec <switchToThread(ThreadControlBlock*)>:
c00187ec:	57                   	push   edi
c00187ed:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00187f2:	56                   	push   esi
c00187f3:	85 c0                	test   eax,eax
c00187f5:	53                   	push   ebx
c00187f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00187fa:	0f 85 90 00 00 00    	jne    c0018890 <switchToThread(ThreadControlBlock*)+0xa4>
c0018800:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0018803:	3c ff                	cmp    al,0xff
c0018805:	0f 84 81 00 00 00    	je     c001888c <switchToThread(ThreadControlBlock*)+0xa0>
c001880b:	0f b6 d0             	movzx  edx,al
c001880e:	b8 00 04 00 00       	mov    eax,0x400
c0018813:	29 d0                	sub    eax,edx
c0018815:	d1 f8                	sar    eax,1
c0018817:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c001881a:	66 90                	xchg   ax,ax
c001881c:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c001881f:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0018824:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001882a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018831:	74 4d                	je     c0018880 <switchToThread(ThreadControlBlock*)+0x94>
c0018833:	0f 31                	rdtsc  
c0018835:	a3 28 a1 02 c0       	mov    ds:0xc002a128,eax
c001883a:	89 c6                	mov    esi,eax
c001883c:	89 d7                	mov    edi,edx
c001883e:	2b 35 18 a1 02 c0    	sub    esi,DWORD PTR ds:0xc002a118
c0018844:	89 15 2c a1 02 c0    	mov    DWORD PTR ds:0xc002a12c,edx
c001884a:	1b 3d 1c a1 02 c0    	sbb    edi,DWORD PTR ds:0xc002a11c
c0018850:	89 35 20 a1 02 c0    	mov    DWORD PTR ds:0xc002a120,esi
c0018856:	a3 18 a1 02 c0       	mov    ds:0xc002a118,eax
c001885b:	89 3d 24 a1 02 c0    	mov    DWORD PTR ds:0xc002a124,edi
c0018861:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018867:	89 15 1c a1 02 c0    	mov    DWORD PTR ds:0xc002a11c,edx
c001886d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018870:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0018873:	01 c6                	add    esi,eax
c0018875:	11 d7                	adc    edi,edx
c0018877:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001887a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001887d:	8d 76 00             	lea    esi,[esi+0x0]
c0018880:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018884:	5b                   	pop    ebx
c0018885:	5e                   	pop    esi
c0018886:	5f                   	pop    edi
c0018887:	e9 1b 7a fe ff       	jmp    c00002a7 <switchToThreadASM>
c001888c:	31 c0                	xor    eax,eax
c001888e:	eb 8c                	jmp    c001881c <switchToThread(ThreadControlBlock*)+0x30>
c0018890:	5b                   	pop    ebx
c0018891:	c7 05 e0 a0 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x1
c001889b:	5e                   	pop    esi
c001889c:	5f                   	pop    edi
c001889d:	c3                   	ret    
c001889e:	66 90                	xchg   ax,ax

c00188a0 <Process::addArgs(char**)>:
c00188a0:	57                   	push   edi
c00188a1:	56                   	push   esi
c00188a2:	53                   	push   ebx
c00188a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00188a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00188ab:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00188b5:	85 ff                	test   edi,edi
c00188b7:	74 43                	je     c00188fc <Process::addArgs(char**)+0x5c>
c00188b9:	8b 07                	mov    eax,DWORD PTR [edi]
c00188bb:	85 c0                	test   eax,eax
c00188bd:	74 3d                	je     c00188fc <Process::addArgs(char**)+0x5c>
c00188bf:	31 db                	xor    ebx,ebx
c00188c1:	8d 76 00             	lea    esi,[esi+0x0]
c00188c4:	83 ec 0c             	sub    esp,0xc
c00188c7:	50                   	push   eax
c00188c8:	e8 e3 7d fe ff       	call   c00006b0 <strlen>
c00188cd:	40                   	inc    eax
c00188ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00188d1:	e8 11 15 ff ff       	call   c0009de7 <malloc>
c00188d6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00188dd:	5a                   	pop    edx
c00188de:	59                   	pop    ecx
c00188df:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00188e2:	43                   	inc    ebx
c00188e3:	50                   	push   eax
c00188e4:	e8 67 7e fe ff       	call   c0000750 <strcpy>
c00188e9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00188ef:	83 c4 10             	add    esp,0x10
c00188f2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00188f5:	85 c0                	test   eax,eax
c00188f7:	75 cb                	jne    c00188c4 <Process::addArgs(char**)+0x24>
c00188f9:	8d 76 00             	lea    esi,[esi+0x0]
c00188fc:	5b                   	pop    ebx
c00188fd:	5e                   	pop    esi
c00188fe:	5f                   	pop    edi
c00188ff:	c3                   	ret    

c0018900 <Process::Process(char const*, Process*, char**)>:
c0018900:	56                   	push   esi
c0018901:	53                   	push   ebx
c0018902:	83 ec 14             	sub    esp,0x14
c0018905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018909:	05 0c 02 00 00       	add    eax,0x20c
c001890e:	bb 07 00 00 00       	mov    ebx,0x7
c0018913:	89 c6                	mov    esi,eax
c0018915:	8d 76 00             	lea    esi,[esi+0x0]
c0018918:	85 db                	test   ebx,ebx
c001891a:	78 14                	js     c0018930 <Process::Process(char const*, Process*, char**)+0x30>
c001891c:	83 ec 0c             	sub    esp,0xc
c001891f:	56                   	push   esi
c0018920:	e8 87 af 00 00       	call   c00238ac <ThreadControlBlock::ThreadControlBlock()>
c0018925:	83 c4 10             	add    esp,0x10
c0018928:	83 c6 5f             	add    esi,0x5f
c001892b:	4b                   	dec    ebx
c001892c:	eb ea                	jmp    c0018918 <Process::Process(char const*, Process*, char**)+0x18>
c001892e:	66 90                	xchg   ax,ax
c0018930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018934:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001893b:	83 ec 0c             	sub    esp,0xc
c001893e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018942:	e8 eb c6 ff ff       	call   c0015032 <Krnl::newProcessEnv(Process*)>
c0018947:	83 c4 10             	add    esp,0x10
c001894a:	89 c2                	mov    edx,eax
c001894c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018950:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001895a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018963:	a1 f0 85 02 c0       	mov    eax,ds:0xc00285f0
c0018968:	8d 50 01             	lea    edx,[eax+0x1]
c001896b:	89 15 f0 85 02 c0    	mov    DWORD PTR ds:0xc00285f0,edx
c0018971:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018975:	89 02                	mov    DWORD PTR [edx],eax
c0018977:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001897f:	83 ec 0c             	sub    esp,0xc
c0018982:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018986:	e8 5c 14 ff ff       	call   c0009de7 <malloc>
c001898b:	83 c4 10             	add    esp,0x10
c001898e:	89 c3                	mov    ebx,eax
c0018990:	83 ec 08             	sub    esp,0x8
c0018993:	6a 00                	push   0x0
c0018995:	53                   	push   ebx
c0018996:	e8 57 3f ff ff       	call   c000c8f2 <VAS::VAS(bool)>
c001899b:	83 c4 10             	add    esp,0x10
c001899e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189a2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00189a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ac:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00189b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189be:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00189c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189ce:	85 c0                	test   eax,eax
c00189d0:	74 42                	je     c0018a14 <Process::Process(char const*, Process*, char**)+0x114>
c00189d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189dc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00189e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00189ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189f6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00189fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a00:	05 0c 01 00 00       	add    eax,0x10c
c0018a05:	83 ec 08             	sub    esp,0x8
c0018a08:	52                   	push   edx
c0018a09:	50                   	push   eax
c0018a0a:	e8 41 7d fe ff       	call   c0000750 <strcpy>
c0018a0f:	83 c4 10             	add    esp,0x10
c0018a12:	eb 64                	jmp    c0018a78 <Process::Process(char const*, Process*, char**)+0x178>
c0018a14:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0018a1c:	83 ec 0c             	sub    esp,0xc
c0018a1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018a23:	e8 bf 13 ff ff       	call   c0009de7 <malloc>
c0018a28:	83 c4 10             	add    esp,0x10
c0018a2b:	89 c3                	mov    ebx,eax
c0018a2d:	83 ec 08             	sub    esp,0x8
c0018a30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a34:	53                   	push   ebx
c0018a35:	e8 ce 29 ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c0018a3a:	83 c4 10             	add    esp,0x10
c0018a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a41:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018a47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a51:	83 ec 0c             	sub    esp,0xc
c0018a54:	50                   	push   eax
c0018a55:	e8 6d 21 ff ff       	call   c000abc7 <addToTerminalCycle(VgaText*)>
c0018a5a:	83 c4 10             	add    esp,0x10
c0018a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a61:	05 0c 01 00 00       	add    eax,0x10c
c0018a66:	83 ec 08             	sub    esp,0x8
c0018a69:	68 c8 6c 02 c0       	push   0xc0026cc8
c0018a6e:	50                   	push   eax
c0018a6f:	e8 dc 7c fe ff       	call   c0000750 <strcpy>
c0018a74:	83 c4 10             	add    esp,0x10
c0018a77:	90                   	nop
c0018a78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a7c:	83 c0 0c             	add    eax,0xc
c0018a7f:	83 ec 08             	sub    esp,0x8
c0018a82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a86:	50                   	push   eax
c0018a87:	e8 c4 7c fe ff       	call   c0000750 <strcpy>
c0018a8c:	83 c4 10             	add    esp,0x10
c0018a8f:	83 ec 08             	sub    esp,0x8
c0018a92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a9a:	e8 01 fe ff ff       	call   c00188a0 <Process::addArgs(char**)>
c0018a9f:	83 c4 10             	add    esp,0x10
c0018aa2:	83 ec 08             	sub    esp,0x8
c0018aa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018aa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018aad:	e8 89 ed ff ff       	call   c001783b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018ab2:	83 c4 10             	add    esp,0x10
c0018ab5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018ab9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018abd:	83 f0 01             	xor    eax,0x1
c0018ac0:	88 c2                	mov    dl,al
c0018ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ac6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018acc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018ad1:	83 ec 08             	sub    esp,0x8
c0018ad4:	50                   	push   eax
c0018ad5:	68 20 6d 02 c0       	push   0xc0026d20
c0018ada:	e8 e8 45 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0018adf:	83 c4 10             	add    esp,0x10
c0018ae2:	90                   	nop
c0018ae3:	83 c4 14             	add    esp,0x14
c0018ae6:	5b                   	pop    ebx
c0018ae7:	5e                   	pop    esi
c0018ae8:	c3                   	ret    
c0018ae9:	90                   	nop
c0018aea:	66 90                	xchg   ax,ax

c0018aec <Process::Process(bool, char const*, Process*, char**)>:
c0018aec:	56                   	push   esi
c0018aed:	53                   	push   ebx
c0018aee:	83 ec 24             	sub    esp,0x24
c0018af1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018af5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018afd:	05 0c 02 00 00       	add    eax,0x20c
c0018b02:	bb 07 00 00 00       	mov    ebx,0x7
c0018b07:	89 c6                	mov    esi,eax
c0018b09:	8d 76 00             	lea    esi,[esi+0x0]
c0018b0c:	85 db                	test   ebx,ebx
c0018b0e:	78 14                	js     c0018b24 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018b10:	83 ec 0c             	sub    esp,0xc
c0018b13:	56                   	push   esi
c0018b14:	e8 93 ad 00 00       	call   c00238ac <ThreadControlBlock::ThreadControlBlock()>
c0018b19:	83 c4 10             	add    esp,0x10
c0018b1c:	83 c6 5f             	add    esi,0x5f
c0018b1f:	4b                   	dec    ebx
c0018b20:	eb ea                	jmp    c0018b0c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018b22:	66 90                	xchg   ax,ax
c0018b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b28:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018b2f:	83 ec 0c             	sub    esp,0xc
c0018b32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b36:	e8 f7 c4 ff ff       	call   c0015032 <Krnl::newProcessEnv(Process*)>
c0018b3b:	83 c4 10             	add    esp,0x10
c0018b3e:	89 c2                	mov    edx,eax
c0018b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b44:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018b4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b4e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018b57:	a1 f0 85 02 c0       	mov    eax,ds:0xc00285f0
c0018b5c:	8d 50 01             	lea    edx,[eax+0x1]
c0018b5f:	89 15 f0 85 02 c0    	mov    DWORD PTR ds:0xc00285f0,edx
c0018b65:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018b69:	89 02                	mov    DWORD PTR [edx],eax
c0018b6b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018b73:	83 ec 0c             	sub    esp,0xc
c0018b76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018b7a:	e8 68 12 ff ff       	call   c0009de7 <malloc>
c0018b7f:	83 c4 10             	add    esp,0x10
c0018b82:	89 c3                	mov    ebx,eax
c0018b84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b89:	83 ec 08             	sub    esp,0x8
c0018b8c:	50                   	push   eax
c0018b8d:	53                   	push   ebx
c0018b8e:	e8 5f 3d ff ff       	call   c000c8f2 <VAS::VAS(bool)>
c0018b93:	83 c4 10             	add    esp,0x10
c0018b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b9a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018ba0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ba4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018bae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018bb6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018bbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bc0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018bc6:	85 c0                	test   eax,eax
c0018bc8:	74 42                	je     c0018c0c <Process::Process(bool, char const*, Process*, char**)+0x120>
c0018bca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bce:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018bd4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018bda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bde:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018be8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018bee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018bf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bf8:	05 0c 01 00 00       	add    eax,0x10c
c0018bfd:	83 ec 08             	sub    esp,0x8
c0018c00:	52                   	push   edx
c0018c01:	50                   	push   eax
c0018c02:	e8 49 7b fe ff       	call   c0000750 <strcpy>
c0018c07:	83 c4 10             	add    esp,0x10
c0018c0a:	eb 64                	jmp    c0018c70 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018c0c:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018c14:	83 ec 0c             	sub    esp,0xc
c0018c17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018c1b:	e8 c7 11 ff ff       	call   c0009de7 <malloc>
c0018c20:	83 c4 10             	add    esp,0x10
c0018c23:	89 c3                	mov    ebx,eax
c0018c25:	83 ec 08             	sub    esp,0x8
c0018c28:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018c2c:	53                   	push   ebx
c0018c2d:	e8 d6 27 ff ff       	call   c000b408 <VgaText::VgaText(char const*)>
c0018c32:	83 c4 10             	add    esp,0x10
c0018c35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c39:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018c3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018c49:	83 ec 0c             	sub    esp,0xc
c0018c4c:	50                   	push   eax
c0018c4d:	e8 75 1f ff ff       	call   c000abc7 <addToTerminalCycle(VgaText*)>
c0018c52:	83 c4 10             	add    esp,0x10
c0018c55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c59:	05 0c 01 00 00       	add    eax,0x10c
c0018c5e:	83 ec 08             	sub    esp,0x8
c0018c61:	68 c8 6c 02 c0       	push   0xc0026cc8
c0018c66:	50                   	push   eax
c0018c67:	e8 e4 7a fe ff       	call   c0000750 <strcpy>
c0018c6c:	83 c4 10             	add    esp,0x10
c0018c6f:	90                   	nop
c0018c70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c74:	83 c0 0c             	add    eax,0xc
c0018c77:	83 ec 08             	sub    esp,0x8
c0018c7a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018c7e:	50                   	push   eax
c0018c7f:	e8 cc 7a fe ff       	call   c0000750 <strcpy>
c0018c84:	83 c4 10             	add    esp,0x10
c0018c87:	83 ec 08             	sub    esp,0x8
c0018c8a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018c92:	e8 09 fc ff ff       	call   c00188a0 <Process::addArgs(char**)>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	90                   	nop
c0018c9b:	83 c4 24             	add    esp,0x24
c0018c9e:	5b                   	pop    ebx
c0018c9f:	5e                   	pop    esi
c0018ca0:	c3                   	ret    
c0018ca1:	8d 76 00             	lea    esi,[esi+0x0]

c0018ca4 <taskStartupFunction>:
c0018ca4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ca9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018cac:	c3                   	ret    
c0018cad:	90                   	nop
c0018cae:	66 90                	xchg   ax,ax

c0018cb0 <Semaphore::Semaphore(int)>:
c0018cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cb8:	89 10                	mov    DWORD PTR [eax],edx
c0018cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cbe:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018cc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cd4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018cdb:	90                   	nop
c0018cdc:	c3                   	ret    
c0018cdd:	90                   	nop
c0018cde:	66 90                	xchg   ax,ax

c0018ce0 <Mutex::Mutex()>:
c0018ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ce4:	6a 01                	push   0x1
c0018ce6:	50                   	push   eax
c0018ce7:	e8 c4 ff ff ff       	call   c0018cb0 <Semaphore::Semaphore(int)>
c0018cec:	83 c4 08             	add    esp,0x8
c0018cef:	90                   	nop
c0018cf0:	c3                   	ret    
c0018cf1:	90                   	nop
c0018cf2:	66 90                	xchg   ax,ax

c0018cf4 <Process::createThread(void (*)(void*), void*, int)>:
c0018cf4:	57                   	push   edi
c0018cf5:	31 c9                	xor    ecx,ecx
c0018cf7:	56                   	push   esi
c0018cf8:	53                   	push   ebx
c0018cf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018cfd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018d04:	89 f2                	mov    edx,esi
c0018d06:	66 90                	xchg   ax,ax
c0018d08:	0f b7 c2             	movzx  eax,dx
c0018d0b:	83 e2 01             	and    edx,0x1
c0018d0e:	74 14                	je     c0018d24 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018d10:	d1 f8                	sar    eax,1
c0018d12:	41                   	inc    ecx
c0018d13:	89 c2                	mov    edx,eax
c0018d15:	83 f9 10             	cmp    ecx,0x10
c0018d18:	75 ee                	jne    c0018d08 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018d1a:	31 db                	xor    ebx,ebx
c0018d1c:	89 d8                	mov    eax,ebx
c0018d1e:	5b                   	pop    ebx
c0018d1f:	5e                   	pop    esi
c0018d20:	5f                   	pop    edi
c0018d21:	c3                   	ret    
c0018d22:	66 90                	xchg   ax,ax
c0018d24:	b8 01 00 00 00       	mov    eax,0x1
c0018d29:	d3 e0                	shl    eax,cl
c0018d2b:	09 c6                	or     esi,eax
c0018d2d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018d30:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018d37:	01 c0                	add    eax,eax
c0018d39:	01 c8                	add    eax,ecx
c0018d3b:	8d 04 80             	lea    eax,[eax+eax*4]
c0018d3e:	01 d8                	add    eax,ebx
c0018d40:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018d47:	75 0b                	jne    c0018d54 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018d49:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018d53:	90                   	nop
c0018d54:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018d5a:	83 ec 08             	sub    esp,0x8
c0018d5d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d60:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018d63:	01 c0                	add    eax,eax
c0018d65:	01 c8                	add    eax,ecx
c0018d67:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018d6a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018d6d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018d73:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018d79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d7d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018d83:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018d89:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018d90:	89 ca                	mov    edx,ecx
c0018d92:	f7 da                	neg    edx
c0018d94:	c1 e2 15             	shl    edx,0x15
c0018d97:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018d9d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018da3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018da7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018db1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018db7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018dbb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018dc1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018dcb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018dd5:	53                   	push   ebx
c0018dd6:	68 04 a1 02 c0       	push   0xc002a104
c0018ddb:	e8 6c a8 00 00       	call   c002364c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018de0:	83 c4 10             	add    esp,0x10
c0018de3:	89 d8                	mov    eax,ebx
c0018de5:	5b                   	pop    ebx
c0018de6:	5e                   	pop    esi
c0018de7:	5f                   	pop    edi
c0018de8:	c3                   	ret    
c0018de9:	90                   	nop
c0018dea:	66 90                	xchg   ax,ax

c0018dec <Process::createUserThread()>:
c0018dec:	83 ec 0c             	sub    esp,0xc
c0018def:	68 80 00 00 00       	push   0x80
c0018df4:	6a 00                	push   0x0
c0018df6:	68 94 87 01 c0       	push   0xc0018794
c0018dfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018dff:	e8 f0 fe ff ff       	call   c0018cf4 <Process::createThread(void (*)(void*), void*, int)>
c0018e04:	83 c4 1c             	add    esp,0x1c
c0018e07:	c3                   	ret    

c0018e08 <setupMultitasking(void (*)())>:
c0018e08:	56                   	push   esi
c0018e09:	53                   	push   ebx
c0018e0a:	51                   	push   ecx
c0018e0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018e0f:	eb 13                	jmp    c0018e24 <setupMultitasking(void (*)())+0x1c>
c0018e11:	8d 76 00             	lea    esi,[esi+0x0]
c0018e14:	83 ec 0c             	sub    esp,0xc
c0018e17:	68 04 a1 02 c0       	push   0xc002a104
c0018e1c:	e8 73 a7 00 00       	call   c0023594 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e21:	83 c4 10             	add    esp,0x10
c0018e24:	83 ec 0c             	sub    esp,0xc
c0018e27:	68 04 a1 02 c0       	push   0xc002a104
c0018e2c:	e8 3f a7 00 00       	call   c0023570 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018e31:	83 c4 10             	add    esp,0x10
c0018e34:	84 c0                	test   al,al
c0018e36:	74 dc                	je     c0018e14 <setupMultitasking(void (*)())+0xc>
c0018e38:	83 ec 0c             	sub    esp,0xc
c0018e3b:	68 1f 07 00 00       	push   0x71f
c0018e40:	e8 a2 0f ff ff       	call   c0009de7 <malloc>
c0018e45:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018e4c:	89 c3                	mov    ebx,eax
c0018e4e:	6a 00                	push   0x0
c0018e50:	68 cc 6c 02 c0       	push   0xc0026ccc
c0018e55:	6a 01                	push   0x1
c0018e57:	50                   	push   eax
c0018e58:	e8 8f fc ff ff       	call   c0018aec <Process::Process(bool, char const*, Process*, char**)>
c0018e5d:	83 c4 14             	add    esp,0x14
c0018e60:	89 1d 10 a1 02 c0    	mov    DWORD PTR ds:0xc002a110,ebx
c0018e66:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018e6c:	e8 64 20 ff ff       	call   c000aed5 <setActiveTerminal(VgaText*)>
c0018e71:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018e79:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018e83:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018e89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018e8c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018e96:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018e9c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018ea2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018eac:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018eb6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018ec0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018ec6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018ed0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018ed6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018ee0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018ee6:	58                   	pop    eax
c0018ee7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018eed:	5a                   	pop    edx
c0018eee:	68 c8 6c 02 c0       	push   0xc0026cc8
c0018ef3:	50                   	push   eax
c0018ef4:	e8 57 78 fe ff       	call   c0000750 <strcpy>
c0018ef9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018f00:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018f04:	83 c4 14             	add    esp,0x14
c0018f07:	5b                   	pop    ebx
c0018f08:	5e                   	pop    esi
c0018f09:	e9 8b 73 fe ff       	jmp    c0000299 <switchToThreadASMFirstTime>
c0018f0e:	66 90                	xchg   ax,ax

c0018f10 <schedule()>:
c0018f10:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c0018f15:	85 c0                	test   eax,eax
c0018f17:	74 0b                	je     c0018f24 <schedule()+0x14>
c0018f19:	c7 05 e0 a0 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x1
c0018f23:	c3                   	ret    
c0018f24:	53                   	push   ebx
c0018f25:	83 ec 14             	sub    esp,0x14
c0018f28:	68 04 a1 02 c0       	push   0xc002a104
c0018f2d:	e8 3e a6 00 00       	call   c0023570 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018f32:	83 c4 10             	add    esp,0x10
c0018f35:	84 c0                	test   al,al
c0018f37:	75 3b                	jne    c0018f74 <schedule()+0x64>
c0018f39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018f41:	4a                   	dec    edx
c0018f42:	74 38                	je     c0018f7c <schedule()+0x6c>
c0018f44:	83 ec 0c             	sub    esp,0xc
c0018f47:	68 04 a1 02 c0       	push   0xc002a104
c0018f4c:	e8 3b a6 00 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018f51:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c0018f58:	89 c3                	mov    ebx,eax
c0018f5a:	e8 35 a6 00 00       	call   c0023594 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018f5f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018f66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f69:	e8 7e f8 ff ff       	call   c00187ec <switchToThread(ThreadControlBlock*)>
c0018f6e:	83 c4 10             	add    esp,0x10
c0018f71:	8d 76 00             	lea    esi,[esi+0x0]
c0018f74:	83 c4 08             	add    esp,0x8
c0018f77:	5b                   	pop    ebx
c0018f78:	c3                   	ret    
c0018f79:	8d 76 00             	lea    esi,[esi+0x0]
c0018f7c:	83 ec 08             	sub    esp,0x8
c0018f7f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018f86:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018f8c:	68 04 a1 02 c0       	push   0xc002a104
c0018f91:	e8 b6 a6 00 00       	call   c002364c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f96:	83 c4 10             	add    esp,0x10
c0018f99:	eb a9                	jmp    c0018f44 <schedule()+0x34>
c0018f9b:	90                   	nop

c0018f9c <Semaphore::tryAcquire()>:
c0018f9c:	53                   	push   ebx
c0018f9d:	83 ec 08             	sub    esp,0x8
c0018fa0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018fa4:	fa                   	cli    
c0018fa5:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0018faa:	8d 50 01             	lea    edx,[eax+0x1]
c0018fad:	89 15 e8 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e8,edx
c0018fb3:	8b 15 e4 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0e4
c0018fb9:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018fbc:	89 1d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,ebx
c0018fc2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018fc5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018fc7:	7c 33                	jl     c0018ffc <Semaphore::tryAcquire()+0x60>
c0018fc9:	89 15 e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,edx
c0018fcf:	85 d2                	test   edx,edx
c0018fd1:	75 0d                	jne    c0018fe0 <Semaphore::tryAcquire()+0x44>
c0018fd3:	8b 15 e0 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0e0
c0018fd9:	85 d2                	test   edx,edx
c0018fdb:	75 6b                	jne    c0019048 <Semaphore::tryAcquire()+0xac>
c0018fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe0:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0018fe5:	85 c0                	test   eax,eax
c0018fe7:	74 0b                	je     c0018ff4 <Semaphore::tryAcquire()+0x58>
c0018fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fec:	31 c0                	xor    eax,eax
c0018fee:	83 c4 08             	add    esp,0x8
c0018ff1:	5b                   	pop    ebx
c0018ff2:	c3                   	ret    
c0018ff3:	90                   	nop
c0018ff4:	fb                   	sti    
c0018ff5:	83 c4 08             	add    esp,0x8
c0018ff8:	5b                   	pop    ebx
c0018ff9:	c3                   	ret    
c0018ffa:	66 90                	xchg   ax,ax
c0018ffc:	43                   	inc    ebx
c0018ffd:	89 15 e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,edx
c0019003:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0019006:	85 d2                	test   edx,edx
c0019008:	75 22                	jne    c001902c <Semaphore::tryAcquire()+0x90>
c001900a:	8b 0d e0 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a0e0
c0019010:	85 c9                	test   ecx,ecx
c0019012:	74 18                	je     c001902c <Semaphore::tryAcquire()+0x90>
c0019014:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c001901e:	e8 ed fe ff ff       	call   c0018f10 <schedule()>
c0019023:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019028:	48                   	dec    eax
c0019029:	8d 76 00             	lea    esi,[esi+0x0]
c001902c:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019031:	85 c0                	test   eax,eax
c0019033:	75 0b                	jne    c0019040 <Semaphore::tryAcquire()+0xa4>
c0019035:	fb                   	sti    
c0019036:	b0 01                	mov    al,0x1
c0019038:	83 c4 08             	add    esp,0x8
c001903b:	5b                   	pop    ebx
c001903c:	c3                   	ret    
c001903d:	8d 76 00             	lea    esi,[esi+0x0]
c0019040:	b0 01                	mov    al,0x1
c0019042:	83 c4 08             	add    esp,0x8
c0019045:	5b                   	pop    ebx
c0019046:	c3                   	ret    
c0019047:	90                   	nop
c0019048:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c0019052:	e8 b9 fe ff ff       	call   c0018f10 <schedule()>
c0019057:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001905c:	48                   	dec    eax
c001905d:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019062:	85 c0                	test   eax,eax
c0019064:	75 86                	jne    c0018fec <Semaphore::tryAcquire()+0x50>
c0019066:	eb 8c                	jmp    c0018ff4 <Semaphore::tryAcquire()+0x58>

c0019068 <Semaphore::assertLocked(char const*)>:
c0019068:	83 ec 0c             	sub    esp,0xc
c001906b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001906f:	fa                   	cli    
c0019070:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019076:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c001907b:	8d 48 01             	lea    ecx,[eax+0x1]
c001907e:	89 0d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,ecx
c0019084:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019086:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0019089:	7c 29                	jl     c00190b4 <Semaphore::assertLocked(char const*)+0x4c>
c001908b:	90                   	nop
c001908c:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c0019091:	85 c0                	test   eax,eax
c0019093:	75 0b                	jne    c00190a0 <Semaphore::assertLocked(char const*)+0x38>
c0019095:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c001909a:	85 c0                	test   eax,eax
c001909c:	75 2e                	jne    c00190cc <Semaphore::assertLocked(char const*)+0x64>
c001909e:	66 90                	xchg   ax,ax
c00190a0:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00190a5:	48                   	dec    eax
c00190a6:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00190ab:	75 03                	jne    c00190b0 <Semaphore::assertLocked(char const*)+0x48>
c00190ad:	fb                   	sti    
c00190ae:	66 90                	xchg   ax,ax
c00190b0:	83 c4 0c             	add    esp,0xc
c00190b3:	c3                   	ret    
c00190b4:	83 ec 0c             	sub    esp,0xc
c00190b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00190bb:	e8 e9 c0 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00190c0:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	48                   	dec    eax
c00190c9:	eb c1                	jmp    c001908c <Semaphore::assertLocked(char const*)+0x24>
c00190cb:	90                   	nop
c00190cc:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00190d6:	e8 35 fe ff ff       	call   c0018f10 <schedule()>
c00190db:	eb c3                	jmp    c00190a0 <Semaphore::assertLocked(char const*)+0x38>
c00190dd:	8d 76 00             	lea    esi,[esi+0x0]

c00190e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00190e0:	83 ec 0c             	sub    esp,0xc
c00190e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190ec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00190ef:	e8 1c fe ff ff       	call   c0018f10 <schedule()>
c00190f4:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00190f9:	48                   	dec    eax
c00190fa:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00190ff:	75 03                	jne    c0019104 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0019101:	fb                   	sti    
c0019102:	66 90                	xchg   ax,ax
c0019104:	83 c4 0c             	add    esp,0xc
c0019107:	c3                   	ret    

c0019108 <blockTask(TaskState)>:
c0019108:	83 ec 0c             	sub    esp,0xc
c001910b:	fa                   	cli    
c001910c:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019112:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001911b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001911e:	e8 ed fd ff ff       	call   c0018f10 <schedule()>
c0019123:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019128:	48                   	dec    eax
c0019129:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001912e:	75 04                	jne    c0019134 <blockTask(TaskState)+0x2c>
c0019130:	fb                   	sti    
c0019131:	8d 76 00             	lea    esi,[esi+0x0]
c0019134:	83 c4 0c             	add    esp,0xc
c0019137:	c3                   	ret    

c0019138 <waitTask(int, int*, int)>:
c0019138:	83 ec 18             	sub    esp,0x18
c001913b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019140:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019144:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0019147:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001914b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019150:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0019153:	6a 07                	push   0x7
c0019155:	e8 ae ff ff ff       	call   c0019108 <blockTask(TaskState)>
c001915a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001915f:	83 c4 10             	add    esp,0x10
c0019162:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0019165:	85 d2                	test   edx,edx
c0019167:	74 0b                	je     c0019174 <waitTask(int, int*, int)+0x3c>
c0019169:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001916c:	89 02                	mov    DWORD PTR [edx],eax
c001916e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019173:	90                   	nop
c0019174:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0019177:	83 c4 0c             	add    esp,0xc
c001917a:	c3                   	ret    
c001917b:	90                   	nop

c001917c <milliTenthSleepUntil(unsigned int)>:
c001917c:	83 ec 0c             	sub    esp,0xc
c001917f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019183:	39 05 ec 91 02 c0    	cmp    DWORD PTR ds:0xc00291ec,eax
c0019189:	76 05                	jbe    c0019190 <milliTenthSleepUntil(unsigned int)+0x14>
c001918b:	90                   	nop
c001918c:	83 c4 0c             	add    esp,0xc
c001918f:	c3                   	ret    
c0019190:	fa                   	cli    
c0019191:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019197:	83 ec 08             	sub    esp,0x8
c001919a:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c00191a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00191a6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00191a9:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00191af:	68 f8 a0 02 c0       	push   0xc002a0f8
c00191b4:	e8 93 a4 00 00       	call   c002364c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00191b9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00191c0:	e8 43 ff ff ff       	call   c0019108 <blockTask(TaskState)>
c00191c5:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00191ca:	83 c4 10             	add    esp,0x10
c00191cd:	48                   	dec    eax
c00191ce:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00191d3:	85 c0                	test   eax,eax
c00191d5:	75 09                	jne    c00191e0 <milliTenthSleepUntil(unsigned int)+0x64>
c00191d7:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c00191dc:	85 c0                	test   eax,eax
c00191de:	75 14                	jne    c00191f4 <milliTenthSleepUntil(unsigned int)+0x78>
c00191e0:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00191e5:	48                   	dec    eax
c00191e6:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00191eb:	75 9f                	jne    c001918c <milliTenthSleepUntil(unsigned int)+0x10>
c00191ed:	fb                   	sti    
c00191ee:	83 c4 0c             	add    esp,0xc
c00191f1:	c3                   	ret    
c00191f2:	66 90                	xchg   ax,ax
c00191f4:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00191fe:	e8 0d fd ff ff       	call   c0018f10 <schedule()>
c0019203:	eb db                	jmp    c00191e0 <milliTenthSleepUntil(unsigned int)+0x64>
c0019205:	8d 76 00             	lea    esi,[esi+0x0]

c0019208 <milliTenthSleep(unsigned int)>:
c0019208:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c001920d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0019211:	e9 66 ff ff ff       	jmp    c001917c <milliTenthSleepUntil(unsigned int)>
c0019216:	66 90                	xchg   ax,ax

c0019218 <sleep(unsigned int)>:
c0019218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001921c:	8d 04 80             	lea    eax,[eax+eax*4]
c001921f:	8d 04 80             	lea    eax,[eax+eax*4]
c0019222:	8d 04 80             	lea    eax,[eax+eax*4]
c0019225:	8d 04 80             	lea    eax,[eax+eax*4]
c0019228:	c1 e0 04             	shl    eax,0x4
c001922b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001922f:	eb d7                	jmp    c0019208 <milliTenthSleep(unsigned int)>
c0019231:	90                   	nop
c0019232:	66 90                	xchg   ax,ax

c0019234 <Semaphore::acquire()>:
c0019234:	83 ec 0c             	sub    esp,0xc
c0019237:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001923b:	fa                   	cli    
c001923c:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c0019241:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019247:	8d 48 01             	lea    ecx,[eax+0x1]
c001924a:	89 0d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,ecx
c0019250:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019253:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0019255:	7d 2d                	jge    c0019284 <Semaphore::acquire()+0x50>
c0019257:	41                   	inc    ecx
c0019258:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001925b:	90                   	nop
c001925c:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c0019261:	85 c0                	test   eax,eax
c0019263:	75 0b                	jne    c0019270 <Semaphore::acquire()+0x3c>
c0019265:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c001926a:	85 c0                	test   eax,eax
c001926c:	75 62                	jne    c00192d0 <Semaphore::acquire()+0x9c>
c001926e:	66 90                	xchg   ax,ax
c0019270:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019275:	48                   	dec    eax
c0019276:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001927b:	75 03                	jne    c0019280 <Semaphore::acquire()+0x4c>
c001927d:	fb                   	sti    
c001927e:	66 90                	xchg   ax,ax
c0019280:	83 c4 0c             	add    esp,0xc
c0019283:	c3                   	ret    
c0019284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019289:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019290:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019293:	85 c9                	test   ecx,ecx
c0019295:	74 4d                	je     c00192e4 <Semaphore::acquire()+0xb0>
c0019297:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001929a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00192a0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00192a3:	90                   	nop
c00192a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192a9:	83 ec 0c             	sub    esp,0xc
c00192ac:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00192af:	68 48 6d 02 c0       	push   0xc0026d48
c00192b4:	e8 0e 3e ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00192b9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00192c0:	e8 43 fe ff ff       	call   c0019108 <blockTask(TaskState)>
c00192c5:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00192ca:	83 c4 10             	add    esp,0x10
c00192cd:	48                   	dec    eax
c00192ce:	eb 8c                	jmp    c001925c <Semaphore::acquire()+0x28>
c00192d0:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00192da:	e8 31 fc ff ff       	call   c0018f10 <schedule()>
c00192df:	eb 8f                	jmp    c0019270 <Semaphore::acquire()+0x3c>
c00192e1:	8d 76 00             	lea    esi,[esi+0x0]
c00192e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192e9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00192ec:	eb b6                	jmp    c00192a4 <Semaphore::acquire()+0x70>
c00192ee:	66 90                	xchg   ax,ax

c00192f0 <taskReturned>:
c00192f0:	83 ec 18             	sub    esp,0x18
c00192f3:	68 68 6d 02 c0       	push   0xc0026d68
c00192f8:	e8 ac be ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	83 ec 0c             	sub    esp,0xc
c0019303:	6a 02                	push   0x2
c0019305:	e8 fe fd ff ff       	call   c0019108 <blockTask(TaskState)>
c001930a:	fa                   	cli    
c001930b:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019311:	e8 fa fb ff ff       	call   c0018f10 <schedule()>
c0019316:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001931b:	83 c4 10             	add    esp,0x10
c001931e:	48                   	dec    eax
c001931f:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019324:	85 c0                	test   eax,eax
c0019326:	75 d8                	jne    c0019300 <taskReturned+0x10>
c0019328:	fb                   	sti    
c0019329:	eb d5                	jmp    c0019300 <taskReturned+0x10>
c001932b:	90                   	nop

c001932c <Thr::processFromPID(int)>:
c001932c:	57                   	push   edi
c001932d:	56                   	push   esi
c001932e:	53                   	push   ebx
c001932f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019333:	fa                   	cli    
c0019334:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001933a:	83 ec 0c             	sub    esp,0xc
c001933d:	68 04 a1 02 c0       	push   0xc002a104
c0019342:	e8 45 a2 00 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019347:	83 c4 10             	add    esp,0x10
c001934a:	89 c7                	mov    edi,eax
c001934c:	eb 16                	jmp    c0019364 <Thr::processFromPID(int)+0x38>
c001934e:	66 90                	xchg   ax,ax
c0019350:	83 ec 0c             	sub    esp,0xc
c0019353:	68 04 a1 02 c0       	push   0xc002a104
c0019358:	e8 2f a2 00 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001935d:	83 c4 10             	add    esp,0x10
c0019360:	39 f8                	cmp    eax,edi
c0019362:	74 4c                	je     c00193b0 <Thr::processFromPID(int)+0x84>
c0019364:	83 ec 0c             	sub    esp,0xc
c0019367:	68 04 a1 02 c0       	push   0xc002a104
c001936c:	e8 1b a2 00 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019371:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c0019378:	89 c3                	mov    ebx,eax
c001937a:	e8 15 a2 00 00       	call   c0023594 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001937f:	58                   	pop    eax
c0019380:	5a                   	pop    edx
c0019381:	53                   	push   ebx
c0019382:	68 04 a1 02 c0       	push   0xc002a104
c0019387:	e8 c0 a2 00 00       	call   c002364c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001938c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001938f:	83 c4 10             	add    esp,0x10
c0019392:	39 30                	cmp    DWORD PTR [eax],esi
c0019394:	75 ba                	jne    c0019350 <Thr::processFromPID(int)+0x24>
c0019396:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c001939b:	48                   	dec    eax
c001939c:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00193a1:	74 09                	je     c00193ac <Thr::processFromPID(int)+0x80>
c00193a3:	90                   	nop
c00193a4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193a7:	5b                   	pop    ebx
c00193a8:	5e                   	pop    esi
c00193a9:	5f                   	pop    edi
c00193aa:	c3                   	ret    
c00193ab:	90                   	nop
c00193ac:	fb                   	sti    
c00193ad:	eb f5                	jmp    c00193a4 <Thr::processFromPID(int)+0x78>
c00193af:	90                   	nop
c00193b0:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00193b5:	48                   	dec    eax
c00193b6:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00193bb:	75 07                	jne    c00193c4 <Thr::processFromPID(int)+0x98>
c00193bd:	fb                   	sti    
c00193be:	5b                   	pop    ebx
c00193bf:	5e                   	pop    esi
c00193c0:	5f                   	pop    edi
c00193c1:	c3                   	ret    
c00193c2:	66 90                	xchg   ax,ax
c00193c4:	5b                   	pop    ebx
c00193c5:	31 c0                	xor    eax,eax
c00193c7:	5e                   	pop    esi
c00193c8:	5f                   	pop    edi
c00193c9:	c3                   	ret    
c00193ca:	66 90                	xchg   ax,ax

c00193cc <unblockTask(ThreadControlBlock*)>:
c00193cc:	53                   	push   ebx
c00193cd:	83 ec 08             	sub    esp,0x8
c00193d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00193d4:	fa                   	cli    
c00193d5:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00193db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00193de:	85 c0                	test   eax,eax
c00193e0:	74 66                	je     c0019448 <unblockTask(ThreadControlBlock*)+0x7c>
c00193e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00193e5:	48                   	dec    eax
c00193e6:	74 38                	je     c0019420 <unblockTask(ThreadControlBlock*)+0x54>
c00193e8:	83 ec 0c             	sub    esp,0xc
c00193eb:	68 04 a1 02 c0       	push   0xc002a104
c00193f0:	e8 97 a1 00 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193f5:	83 c4 10             	add    esp,0x10
c00193f8:	85 c0                	test   eax,eax
c00193fa:	75 1c                	jne    c0019418 <unblockTask(ThreadControlBlock*)+0x4c>
c00193fc:	eb 5e                	jmp    c001945c <unblockTask(ThreadControlBlock*)+0x90>
c00193fe:	66 90                	xchg   ax,ax
c0019400:	83 ec 08             	sub    esp,0x8
c0019403:	50                   	push   eax
c0019404:	68 04 a1 02 c0       	push   0xc002a104
c0019409:	e8 2e a5 00 00       	call   c002393c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001940e:	83 c4 10             	add    esp,0x10
c0019411:	85 c0                	test   eax,eax
c0019413:	74 47                	je     c001945c <unblockTask(ThreadControlBlock*)+0x90>
c0019415:	8d 76 00             	lea    esi,[esi+0x0]
c0019418:	39 c3                	cmp    ebx,eax
c001941a:	75 e4                	jne    c0019400 <unblockTask(ThreadControlBlock*)+0x34>
c001941c:	eb 12                	jmp    c0019430 <unblockTask(ThreadControlBlock*)+0x64>
c001941e:	66 90                	xchg   ax,ax
c0019420:	83 ec 0c             	sub    esp,0xc
c0019423:	68 ea 6c 02 c0       	push   0xc0026cea
c0019428:	e8 9a 3c ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001942d:	83 c4 10             	add    esp,0x10
c0019430:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019435:	48                   	dec    eax
c0019436:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001943b:	75 03                	jne    c0019440 <unblockTask(ThreadControlBlock*)+0x74>
c001943d:	fb                   	sti    
c001943e:	66 90                	xchg   ax,ax
c0019440:	83 c4 08             	add    esp,0x8
c0019443:	5b                   	pop    ebx
c0019444:	c3                   	ret    
c0019445:	8d 76 00             	lea    esi,[esi+0x0]
c0019448:	83 ec 0c             	sub    esp,0xc
c001944b:	68 d3 6c 02 c0       	push   0xc0026cd3
c0019450:	e8 72 3c ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0019455:	83 c4 10             	add    esp,0x10
c0019458:	eb d6                	jmp    c0019430 <unblockTask(ThreadControlBlock*)+0x64>
c001945a:	66 90                	xchg   ax,ax
c001945c:	83 ec 08             	sub    esp,0x8
c001945f:	53                   	push   ebx
c0019460:	68 04 a1 02 c0       	push   0xc002a104
c0019465:	e8 e2 a1 00 00       	call   c002364c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001946a:	83 c4 10             	add    esp,0x10
c001946d:	eb c1                	jmp    c0019430 <unblockTask(ThreadControlBlock*)+0x64>
c001946f:	90                   	nop

c0019470 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019470:	55                   	push   ebp
c0019471:	57                   	push   edi
c0019472:	56                   	push   esi
c0019473:	53                   	push   ebx
c0019474:	83 ec 1c             	sub    esp,0x1c
c0019477:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001947b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001947e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0019484:	85 ff                	test   edi,edi
c0019486:	7e 24                	jle    c00194ac <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0019488:	31 f6                	xor    esi,esi
c001948a:	66 90                	xchg   ax,ax
c001948c:	83 ec 0c             	sub    esp,0xc
c001948f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0019496:	46                   	inc    esi
c0019497:	e8 5b 09 ff ff       	call   c0009df7 <free>
c001949c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001949f:	83 c4 10             	add    esp,0x10
c00194a2:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00194a8:	7f e2                	jg     c001948c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00194aa:	66 90                	xchg   ax,ax
c00194ac:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00194b6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00194bb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00194be:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00194c1:	d3 c0                	rol    eax,cl
c00194c3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00194ca:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00194cd:	89 f7                	mov    edi,esi
c00194cf:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00194d7:	0f 85 73 01 00 00    	jne    c0019650 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00194dd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00194e3:	85 ed                	test   ebp,ebp
c00194e5:	74 1d                	je     c0019504 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00194e7:	83 ec 0c             	sub    esp,0xc
c00194ea:	55                   	push   ebp
c00194eb:	e8 5e ba ff ff       	call   c0014f4e <EnvVarContainer::~EnvVarContainer()>
c00194f0:	59                   	pop    ecx
c00194f1:	5e                   	pop    esi
c00194f2:	6a 0c                	push   0xc
c00194f4:	55                   	push   ebp
c00194f5:	e8 ec 3a ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c00194fa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00194fd:	83 c4 10             	add    esp,0x10
c0019500:	89 f7                	mov    edi,esi
c0019502:	66 90                	xchg   ax,ax
c0019504:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001950a:	85 c0                	test   eax,eax
c001950c:	0f 84 b2 00 00 00    	je     c00195c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0019512:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0019515:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019519:	31 c9                	xor    ecx,ecx
c001951b:	eb 17                	jmp    c0019534 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001951d:	8d 76 00             	lea    esi,[esi+0x0]
c0019520:	41                   	inc    ecx
c0019521:	83 f9 10             	cmp    ecx,0x10
c0019524:	0f 84 9a 00 00 00    	je     c00195c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001952a:	66 90                	xchg   ax,ax
c001952c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019532:	66 90                	xchg   ax,ax
c0019534:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001953b:	d3 fa                	sar    edx,cl
c001953d:	83 e2 01             	and    edx,0x1
c0019540:	74 de                	je     c0019520 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019542:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0019545:	01 d2                	add    edx,edx
c0019547:	01 ca                	add    edx,ecx
c0019549:	8d 14 92             	lea    edx,[edx+edx*4]
c001954c:	01 d0                	add    eax,edx
c001954e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019554:	83 fd 07             	cmp    ebp,0x7
c0019557:	75 c7                	jne    c0019520 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019559:	05 40 02 00 00       	add    eax,0x240
c001955e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0019561:	83 fd ff             	cmp    ebp,0xffffffff
c0019564:	0f 8c ee 00 00 00    	jl     c0019658 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001956a:	0f 84 ac 01 00 00    	je     c001971c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0019570:	85 ed                	test   ebp,ebp
c0019572:	0f 84 90 01 00 00    	je     c0019708 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0019578:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001957a:	75 a4                	jne    c0019520 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001957c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019582:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019586:	01 d0                	add    eax,edx
c0019588:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001958c:	83 ec 0c             	sub    esp,0xc
c001958f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0019595:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019598:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001959e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00195a5:	50                   	push   eax
c00195a6:	e8 21 fe ff ff       	call   c00193cc <unblockTask(ThreadControlBlock*)>
c00195ab:	83 c4 10             	add    esp,0x10
c00195ae:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00195b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00195b5:	89 f7                	mov    edi,esi
c00195b7:	41                   	inc    ecx
c00195b8:	83 f9 10             	cmp    ecx,0x10
c00195bb:	0f 85 6b ff ff ff    	jne    c001952c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00195c1:	8d 76 00             	lea    esi,[esi+0x0]
c00195c4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00195ca:	85 c0                	test   eax,eax
c00195cc:	74 62                	je     c0019630 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00195ce:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00195d4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00195da:	74 54                	je     c0019630 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00195dc:	83 ec 0c             	sub    esp,0xc
c00195df:	68 04 a1 02 c0       	push   0xc002a104
c00195e4:	e8 a3 9f 00 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00195e9:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c00195f0:	89 c7                	mov    edi,eax
c00195f2:	e8 79 9f 00 00       	call   c0023570 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00195f7:	83 c4 10             	add    esp,0x10
c00195fa:	84 c0                	test   al,al
c00195fc:	0f 84 ce 00 00 00    	je     c00196d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0019602:	66 90                	xchg   ax,ax
c0019604:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019607:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001960d:	85 d2                	test   edx,edx
c001960f:	74 0f                	je     c0019620 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0019611:	83 ec 0c             	sub    esp,0xc
c0019614:	8b 02                	mov    eax,DWORD PTR [edx]
c0019616:	52                   	push   edx
c0019617:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001961a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001961d:	83 c4 10             	add    esp,0x10
c0019620:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001962a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001962d:	8d 76 00             	lea    esi,[esi+0x0]
c0019630:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0019636:	85 db                	test   ebx,ebx
c0019638:	74 16                	je     c0019650 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001963a:	83 ec 0c             	sub    esp,0xc
c001963d:	53                   	push   ebx
c001963e:	e8 89 2c ff ff       	call   c000c2cc <VAS::~VAS()>
c0019643:	58                   	pop    eax
c0019644:	5a                   	pop    edx
c0019645:	6a 14                	push   0x14
c0019647:	53                   	push   ebx
c0019648:	e8 99 39 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c001964d:	83 c4 10             	add    esp,0x10
c0019650:	83 c4 1c             	add    esp,0x1c
c0019653:	5b                   	pop    ebx
c0019654:	5e                   	pop    esi
c0019655:	5f                   	pop    edi
c0019656:	5d                   	pop    ebp
c0019657:	c3                   	ret    
c0019658:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001965c:	83 ec 0c             	sub    esp,0xc
c001965f:	68 9c 6d 02 c0       	push   0xc0026d9c
c0019664:	e8 40 bb ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0019669:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001966c:	83 c4 10             	add    esp,0x10
c001966f:	89 f7                	mov    edi,esi
c0019671:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019675:	e9 a6 fe ff ff       	jmp    c0019520 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001967a:	66 90                	xchg   ax,ax
c001967c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019682:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0019688:	75 1e                	jne    c00196a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001968a:	83 ec 0c             	sub    esp,0xc
c001968d:	68 04 6e 02 c0       	push   0xc0026e04
c0019692:	e8 30 3a ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0019697:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001969e:	e8 65 fa ff ff       	call   c0019108 <blockTask(TaskState)>
c00196a3:	83 c4 10             	add    esp,0x10
c00196a6:	66 90                	xchg   ax,ax
c00196a8:	83 ec 08             	sub    esp,0x8
c00196ab:	56                   	push   esi
c00196ac:	68 04 a1 02 c0       	push   0xc002a104
c00196b1:	e8 96 9f 00 00       	call   c002364c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00196b6:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c00196bd:	e8 ca 9e 00 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00196c2:	83 c4 10             	add    esp,0x10
c00196c5:	39 f8                	cmp    eax,edi
c00196c7:	0f 84 37 ff ff ff    	je     c0019604 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00196cd:	8d 76 00             	lea    esi,[esi+0x0]
c00196d0:	83 ec 0c             	sub    esp,0xc
c00196d3:	68 04 a1 02 c0       	push   0xc002a104
c00196d8:	e8 af 9e 00 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00196dd:	c7 04 24 04 a1 02 c0 	mov    DWORD PTR [esp],0xc002a104
c00196e4:	89 c6                	mov    esi,eax
c00196e6:	e8 a9 9e 00 00       	call   c0023594 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00196eb:	83 c4 10             	add    esp,0x10
c00196ee:	39 f3                	cmp    ebx,esi
c00196f0:	74 b6                	je     c00196a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00196f2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00196f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00196f8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00196fe:	75 a8                	jne    c00196a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019700:	e9 77 ff ff ff       	jmp    c001967c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0019705:	8d 76 00             	lea    esi,[esi+0x0]
c0019708:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001970c:	83 ec 0c             	sub    esp,0xc
c001970f:	68 d0 6d 02 c0       	push   0xc0026dd0
c0019714:	e9 4b ff ff ff       	jmp    c0019664 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0019719:	8d 76 00             	lea    esi,[esi+0x0]
c001971c:	8b 36                	mov    esi,DWORD PTR [esi]
c001971e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019722:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0019725:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019728:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001972e:	01 d7                	add    edi,edx
c0019730:	89 f8                	mov    eax,edi
c0019732:	e9 51 fe ff ff       	jmp    c0019588 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0019737:	90                   	nop

c0019738 <cleanerTaskFunction(void*)>:
c0019738:	53                   	push   ebx
c0019739:	83 ec 08             	sub    esp,0x8
c001973c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019741:	48                   	dec    eax
c0019742:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019747:	75 03                	jne    c001974c <cleanerTaskFunction(void*)+0x14>
c0019749:	fb                   	sti    
c001974a:	66 90                	xchg   ax,ax
c001974c:	fa                   	cli    
c001974d:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019752:	80 3d cc a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0cc,0x0
c0019759:	8d 50 01             	lea    edx,[eax+0x1]
c001975c:	89 15 e8 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e8,edx
c0019762:	0f 84 ac 00 00 00    	je     c0019814 <cleanerTaskFunction(void*)+0xdc>
c0019768:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001976d:	85 c0                	test   eax,eax
c001976f:	75 03                	jne    c0019774 <cleanerTaskFunction(void*)+0x3c>
c0019771:	fb                   	sti    
c0019772:	66 90                	xchg   ax,ax
c0019774:	c6 05 cc a0 02 c0 00 	mov    BYTE PTR ds:0xc002a0cc,0x0
c001977b:	fa                   	cli    
c001977c:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019782:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c0019788:	fa                   	cli    
c0019789:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001978f:	eb 2b                	jmp    c00197bc <cleanerTaskFunction(void*)+0x84>
c0019791:	8d 76 00             	lea    esi,[esi+0x0]
c0019794:	83 ec 0c             	sub    esp,0xc
c0019797:	68 ec a0 02 c0       	push   0xc002a0ec
c001979c:	e8 eb 9d 00 00       	call   c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00197a1:	c7 04 24 ec a0 02 c0 	mov    DWORD PTR [esp],0xc002a0ec
c00197a8:	89 c3                	mov    ebx,eax
c00197aa:	e8 e5 9d 00 00       	call   c0023594 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00197af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197b2:	e8 b9 fc ff ff       	call   c0019470 <cleanupTerminatedTask(ThreadControlBlock*)>
c00197b7:	83 c4 10             	add    esp,0x10
c00197ba:	66 90                	xchg   ax,ax
c00197bc:	83 ec 0c             	sub    esp,0xc
c00197bf:	68 ec a0 02 c0       	push   0xc002a0ec
c00197c4:	e8 a7 9d 00 00       	call   c0023570 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00197c9:	83 c4 10             	add    esp,0x10
c00197cc:	84 c0                	test   al,al
c00197ce:	74 c4                	je     c0019794 <cleanerTaskFunction(void*)+0x5c>
c00197d0:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00197d5:	48                   	dec    eax
c00197d6:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00197db:	75 03                	jne    c00197e0 <cleanerTaskFunction(void*)+0xa8>
c00197dd:	fb                   	sti    
c00197de:	66 90                	xchg   ax,ax
c00197e0:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00197e5:	48                   	dec    eax
c00197e6:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00197eb:	0f 85 4b ff ff ff    	jne    c001973c <cleanerTaskFunction(void*)+0x4>
c00197f1:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c00197f6:	85 c0                	test   eax,eax
c00197f8:	0f 84 3e ff ff ff    	je     c001973c <cleanerTaskFunction(void*)+0x4>
c00197fe:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c0019808:	e8 03 f7 ff ff       	call   c0018f10 <schedule()>
c001980d:	e9 2a ff ff ff       	jmp    c001973c <cleanerTaskFunction(void*)+0x4>
c0019812:	66 90                	xchg   ax,ax
c0019814:	83 ec 0c             	sub    esp,0xc
c0019817:	6a 02                	push   0x2
c0019819:	e8 c2 f8 ff ff       	call   c00190e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001981e:	83 c4 10             	add    esp,0x10
c0019821:	e9 4e ff ff ff       	jmp    c0019774 <cleanerTaskFunction(void*)+0x3c>
c0019826:	66 90                	xchg   ax,ax

c0019828 <terminateTask(int)>:
c0019828:	83 ec 14             	sub    esp,0x14
c001982b:	fa                   	cli    
c001982c:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019832:	ff 05 e4 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e4
c0019838:	fa                   	cli    
c0019839:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c001983f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019848:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001984b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019850:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019853:	50                   	push   eax
c0019854:	68 ec a0 02 c0       	push   0xc002a0ec
c0019859:	e8 ee 9d 00 00       	call   c002364c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001985e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019863:	83 c4 10             	add    esp,0x10
c0019866:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001986d:	a1 c8 a0 02 c0       	mov    eax,ds:0xc002a0c8
c0019872:	85 c0                	test   eax,eax
c0019874:	74 5e                	je     c00198d4 <terminateTask(int)+0xac>
c0019876:	83 ec 0c             	sub    esp,0xc
c0019879:	c6 05 cc a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0cc,0x1
c0019880:	50                   	push   eax
c0019881:	e8 46 fb ff ff       	call   c00193cc <unblockTask(ThreadControlBlock*)>
c0019886:	83 c4 10             	add    esp,0x10
c0019889:	8d 76 00             	lea    esi,[esi+0x0]
c001988c:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019891:	48                   	dec    eax
c0019892:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019897:	75 03                	jne    c001989c <terminateTask(int)+0x74>
c0019899:	fb                   	sti    
c001989a:	66 90                	xchg   ax,ax
c001989c:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c00198a1:	48                   	dec    eax
c00198a2:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c00198a7:	75 0b                	jne    c00198b4 <terminateTask(int)+0x8c>
c00198a9:	83 3d e0 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a0e0,0x0
c00198b0:	75 36                	jne    c00198e8 <terminateTask(int)+0xc0>
c00198b2:	66 90                	xchg   ax,ax
c00198b4:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c00198b9:	48                   	dec    eax
c00198ba:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c00198bf:	75 03                	jne    c00198c4 <terminateTask(int)+0x9c>
c00198c1:	fb                   	sti    
c00198c2:	66 90                	xchg   ax,ax
c00198c4:	fa                   	cli    
c00198c5:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c00198cb:	90                   	nop
c00198cc:	e8 3f f6 ff ff       	call   c0018f10 <schedule()>
c00198d1:	eb e1                	jmp    c00198b4 <terminateTask(int)+0x8c>
c00198d3:	90                   	nop
c00198d4:	83 ec 0c             	sub    esp,0xc
c00198d7:	68 01 6d 02 c0       	push   0xc0026d01
c00198dc:	e8 e6 37 ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00198e1:	83 c4 10             	add    esp,0x10
c00198e4:	eb a6                	jmp    c001988c <terminateTask(int)+0x64>
c00198e6:	66 90                	xchg   ax,ax
c00198e8:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c00198f2:	eb d8                	jmp    c00198cc <terminateTask(int)+0xa4>

c00198f4 <Thr::terminateFromIRQ(int)>:
c00198f4:	83 ec 18             	sub    esp,0x18
c00198f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198fb:	e8 28 ff ff ff       	call   c0019828 <terminateTask(int)>

c0019900 <Semaphore::release()>:
c0019900:	83 ec 0c             	sub    esp,0xc
c0019903:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019907:	fa                   	cli    
c0019908:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c001990d:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019913:	8d 48 01             	lea    ecx,[eax+0x1]
c0019916:	89 0d e4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e4,ecx
c001991c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001991f:	85 c9                	test   ecx,ecx
c0019921:	74 41                	je     c0019964 <Semaphore::release()+0x64>
c0019923:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0019926:	83 ec 0c             	sub    esp,0xc
c0019929:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001992c:	51                   	push   ecx
c001992d:	e8 9a fa ff ff       	call   c00193cc <unblockTask(ThreadControlBlock*)>
c0019932:	a1 e4 a0 02 c0       	mov    eax,ds:0xc002a0e4
c0019937:	83 c4 10             	add    esp,0x10
c001993a:	48                   	dec    eax
c001993b:	90                   	nop
c001993c:	a3 e4 a0 02 c0       	mov    ds:0xc002a0e4,eax
c0019941:	85 c0                	test   eax,eax
c0019943:	75 0b                	jne    c0019950 <Semaphore::release()+0x50>
c0019945:	a1 e0 a0 02 c0       	mov    eax,ds:0xc002a0e0
c001994a:	85 c0                	test   eax,eax
c001994c:	75 1e                	jne    c001996c <Semaphore::release()+0x6c>
c001994e:	66 90                	xchg   ax,ax
c0019950:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019955:	48                   	dec    eax
c0019956:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c001995b:	75 03                	jne    c0019960 <Semaphore::release()+0x60>
c001995d:	fb                   	sti    
c001995e:	66 90                	xchg   ax,ax
c0019960:	83 c4 0c             	add    esp,0xc
c0019963:	c3                   	ret    
c0019964:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0019967:	eb d3                	jmp    c001993c <Semaphore::release()+0x3c>
c0019969:	8d 76 00             	lea    esi,[esi+0x0]
c001996c:	c7 05 e0 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a0e0,0x0
c0019976:	e8 95 f5 ff ff       	call   c0018f10 <schedule()>
c001997b:	eb d3                	jmp    c0019950 <Semaphore::release()+0x50>
c001997d:	8d 76 00             	lea    esi,[esi+0x0]

c0019980 <__static_initialization_and_destruction_0(int, int)>:
c0019980:	83 ec 0c             	sub    esp,0xc
c0019983:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019988:	0f 85 8e 00 00 00    	jne    c0019a1c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001998e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019996:	0f 85 80 00 00 00    	jne    c0019a1c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001999c:	83 ec 0c             	sub    esp,0xc
c001999f:	68 04 a1 02 c0       	push   0xc002a104
c00199a4:	e8 4f 9f 00 00       	call   c00238f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00199a9:	83 c4 10             	add    esp,0x10
c00199ac:	83 ec 04             	sub    esp,0x4
c00199af:	68 38 7e 02 c0       	push   0xc0027e38
c00199b4:	68 04 a1 02 c0       	push   0xc002a104
c00199b9:	68 a8 38 02 c0       	push   0xc00238a8
c00199be:	e8 9d 35 ff ff       	call   c000cf60 <__cxa_atexit>
c00199c3:	83 c4 10             	add    esp,0x10
c00199c6:	83 ec 0c             	sub    esp,0xc
c00199c9:	68 f8 a0 02 c0       	push   0xc002a0f8
c00199ce:	e8 25 9f 00 00       	call   c00238f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00199d3:	83 c4 10             	add    esp,0x10
c00199d6:	83 ec 04             	sub    esp,0x4
c00199d9:	68 38 7e 02 c0       	push   0xc0027e38
c00199de:	68 f8 a0 02 c0       	push   0xc002a0f8
c00199e3:	68 a8 38 02 c0       	push   0xc00238a8
c00199e8:	e8 73 35 ff ff       	call   c000cf60 <__cxa_atexit>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	83 ec 0c             	sub    esp,0xc
c00199f3:	68 ec a0 02 c0       	push   0xc002a0ec
c00199f8:	e8 fb 9e 00 00       	call   c00238f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00199fd:	83 c4 10             	add    esp,0x10
c0019a00:	83 ec 04             	sub    esp,0x4
c0019a03:	68 38 7e 02 c0       	push   0xc0027e38
c0019a08:	68 ec a0 02 c0       	push   0xc002a0ec
c0019a0d:	68 a8 38 02 c0       	push   0xc00238a8
c0019a12:	e8 49 35 ff ff       	call   c000cf60 <__cxa_atexit>
c0019a17:	83 c4 10             	add    esp,0x10
c0019a1a:	66 90                	xchg   ax,ax
c0019a1c:	90                   	nop
c0019a1d:	83 c4 0c             	add    esp,0xc
c0019a20:	c3                   	ret    
c0019a21:	8d 76 00             	lea    esi,[esi+0x0]

c0019a24 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019a24:	83 ec 0c             	sub    esp,0xc
c0019a27:	83 ec 08             	sub    esp,0x8
c0019a2a:	68 ff ff 00 00       	push   0xffff
c0019a2f:	6a 01                	push   0x1
c0019a31:	e8 4a ff ff ff       	call   c0019980 <__static_initialization_and_destruction_0(int, int)>
c0019a36:	83 c4 10             	add    esp,0x10
c0019a39:	83 c4 0c             	add    esp,0xc
c0019a3c:	c3                   	ret    

c0019a3d <Vm::inbv(unsigned short)>:
c0019a3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a41:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019a46:	75 06                	jne    c0019a4e <Vm::inbv(unsigned short)+0x11>
c0019a48:	a0 4c a1 02 c0       	mov    al,ds:0xc002a14c
c0019a4d:	c3                   	ret    
c0019a4e:	ec                   	in     al,dx
c0019a4f:	c3                   	ret    

c0019a50 <Vm::outbv(unsigned short, unsigned char)>:
c0019a50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a58:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019a5d:	75 25                	jne    c0019a84 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019a5f:	8b 0d 4c a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a14c
c0019a65:	8d 51 01             	lea    edx,[ecx+0x1]
c0019a68:	88 81 60 a1 02 c0    	mov    BYTE PTR [ecx-0x3ffd5ea0],al
c0019a6e:	89 15 4c a1 02 c0    	mov    DWORD PTR ds:0xc002a14c,edx
c0019a74:	83 fa 20             	cmp    edx,0x20
c0019a77:	75 0c                	jne    c0019a85 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019a79:	c7 05 4c a1 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a14c,0x1f
c0019a83:	c3                   	ret    
c0019a84:	ee                   	out    dx,al
c0019a85:	c3                   	ret    

c0019a86 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019a86:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019a8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019a90:	c1 e0 04             	shl    eax,0x4
c0019a93:	01 d0                	add    eax,edx
c0019a95:	c3                   	ret    

c0019a96 <Vm::getSegment(unsigned int)>:
c0019a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a9a:	c1 e8 10             	shr    eax,0x10
c0019a9d:	c3                   	ret    

c0019a9e <Vm::getOffset(unsigned int)>:
c0019a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019aa2:	c3                   	ret    

c0019aa3 <Vm::mainloop2()>:
c0019aa3:	83 ec 18             	sub    esp,0x18
c0019aa6:	fa                   	cli    
c0019aa7:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019aad:	6a 02                	push   0x2
c0019aaf:	c6 05 45 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a145,0x1
c0019ab6:	e8 25 f6 ff ff       	call   c00190e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019abb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ac0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019ac4:	52                   	push   edx
c0019ac5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019ac9:	52                   	push   edx
c0019aca:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0019ace:	52                   	push   edx
c0019acf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019ad3:	50                   	push   eax
c0019ad4:	e8 66 67 fe ff       	call   c000023f <goToVM86>
c0019ad9:	83 c4 2c             	add    esp,0x2c
c0019adc:	c3                   	ret    

c0019add <Vm::mainVm8086Loop(void*)>:
c0019add:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019ae2:	48                   	dec    eax
c0019ae3:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019ae8:	75 01                	jne    c0019aeb <Vm::mainVm8086Loop(void*)+0xe>
c0019aea:	fb                   	sti    
c0019aeb:	eb b6                	jmp    c0019aa3 <Vm::mainloop2()>

c0019aed <Vm::mainloop3(unsigned long)>:
c0019aed:	83 ec 18             	sub    esp,0x18
c0019af0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019af4:	fa                   	cli    
c0019af5:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019afb:	6a 02                	push   0x2
c0019afd:	c6 05 44 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a144,0x1
c0019b04:	a3 40 a1 02 c0       	mov    ds:0xc002a140,eax
c0019b09:	e8 d2 f5 ff ff       	call   c00190e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019b0e:	83 c4 1c             	add    esp,0x1c
c0019b11:	eb 90                	jmp    c0019aa3 <Vm::mainloop2()>

c0019b13 <Vm::initialise8086()>:
c0019b13:	83 ec 0c             	sub    esp,0xc
c0019b16:	68 80 00 00 00       	push   0x80
c0019b1b:	6a 00                	push   0x0
c0019b1d:	68 dd 9a 01 c0       	push   0xc0019add
c0019b22:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0019b28:	e8 c7 f1 ff ff       	call   c0018cf4 <Process::createThread(void (*)(void*), void*, int)>
c0019b2d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019b34:	a3 48 a1 02 c0       	mov    ds:0xc002a148,eax
c0019b39:	68 00 01 00 00       	push   0x100
c0019b3e:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c0019b43:	6a 00                	push   0x0
c0019b45:	6a 00                	push   0x0
c0019b47:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019b4d:	e8 ec 2b ff ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b52:	83 c4 2c             	add    esp,0x2c
c0019b55:	c3                   	ret    

c0019b56 <Vm::finish8086()>:
c0019b56:	53                   	push   ebx
c0019b57:	83 ec 08             	sub    esp,0x8
c0019b5a:	fa                   	cli    
c0019b5b:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019b61:	80 3d 44 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a144,0x0
c0019b68:	75 15                	jne    c0019b7f <Vm::finish8086()+0x29>
c0019b6a:	e8 a1 f3 ff ff       	call   c0018f10 <schedule()>
c0019b6f:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019b74:	48                   	dec    eax
c0019b75:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019b7a:	75 de                	jne    c0019b5a <Vm::finish8086()+0x4>
c0019b7c:	fb                   	sti    
c0019b7d:	eb db                	jmp    c0019b5a <Vm::finish8086()+0x4>
c0019b7f:	83 ec 0c             	sub    esp,0xc
c0019b82:	8b 1d 40 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a140
c0019b88:	ff 35 48 a1 02 c0    	push   DWORD PTR ds:0xc002a148
c0019b8e:	c6 05 44 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a144,0x0
c0019b95:	e8 32 f8 ff ff       	call   c00193cc <unblockTask(ThreadControlBlock*)>
c0019b9a:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019b9f:	83 c4 10             	add    esp,0x10
c0019ba2:	8d 50 ff             	lea    edx,[eax-0x1]
c0019ba5:	89 15 e8 a0 02 c0    	mov    DWORD PTR ds:0xc002a0e8,edx
c0019bab:	85 d2                	test   edx,edx
c0019bad:	75 01                	jne    c0019bb0 <Vm::finish8086()+0x5a>
c0019baf:	fb                   	sti    
c0019bb0:	89 d8                	mov    eax,ebx
c0019bb2:	83 c4 08             	add    esp,0x8
c0019bb5:	5b                   	pop    ebx
c0019bb6:	c3                   	ret    

c0019bb7 <Vm::getOutput8086(unsigned char*)>:
c0019bb7:	57                   	push   edi
c0019bb8:	8b 0d 4c a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a14c
c0019bbe:	56                   	push   esi
c0019bbf:	be 60 a1 02 c0       	mov    esi,0xc002a160
c0019bc4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019bc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019bca:	a1 4c a1 02 c0       	mov    eax,ds:0xc002a14c
c0019bcf:	5e                   	pop    esi
c0019bd0:	c7 05 4c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a14c,0x0
c0019bda:	5f                   	pop    edi
c0019bdb:	c3                   	ret    

c0019bdc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019bdc:	55                   	push   ebp
c0019bdd:	57                   	push   edi
c0019bde:	56                   	push   esi
c0019bdf:	53                   	push   ebx
c0019be0:	83 ec 0c             	sub    esp,0xc
c0019be3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019be7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019beb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019bef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019bf3:	fa                   	cli    
c0019bf4:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019bfa:	80 3d 45 a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a145,0x0
c0019c01:	75 15                	jne    c0019c18 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019c03:	e8 08 f3 ff ff       	call   c0018f10 <schedule()>
c0019c08:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019c0d:	48                   	dec    eax
c0019c0e:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019c13:	75 de                	jne    c0019bf3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c15:	fb                   	sti    
c0019c16:	eb db                	jmp    c0019bf3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019c18:	a1 48 a1 02 c0       	mov    eax,ds:0xc002a148
c0019c1d:	c7 05 4c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a14c,0x0
c0019c27:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0019c2b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0019c2f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019c33:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019c37:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019c3b:	0f b7 ff             	movzx  edi,di
c0019c3e:	0f b7 f6             	movzx  esi,si
c0019c41:	50                   	push   eax
c0019c42:	6a 20                	push   0x20
c0019c44:	6a 00                	push   0x0
c0019c46:	68 60 a1 02 c0       	push   0xc002a160
c0019c4b:	e8 44 6a fe ff       	call   c0000694 <memset>
c0019c50:	5a                   	pop    edx
c0019c51:	59                   	pop    ecx
c0019c52:	57                   	push   edi
c0019c53:	56                   	push   esi
c0019c54:	e8 2d fe ff ff       	call   c0019a86 <Vm::realToLinear(unsigned short, unsigned short)>
c0019c59:	83 c4 10             	add    esp,0x10
c0019c5c:	89 c7                	mov    edi,eax
c0019c5e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019c62:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019c66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c68:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019c6d:	c6 05 45 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a145,0x0
c0019c74:	48                   	dec    eax
c0019c75:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019c7a:	75 01                	jne    c0019c7d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019c7c:	fb                   	sti    
c0019c7d:	83 ec 0c             	sub    esp,0xc
c0019c80:	ff 35 48 a1 02 c0    	push   DWORD PTR ds:0xc002a148
c0019c86:	e8 41 f7 ff ff       	call   c00193cc <unblockTask(ThreadControlBlock*)>
c0019c8b:	83 c4 1c             	add    esp,0x1c
c0019c8e:	b0 01                	mov    al,0x1
c0019c90:	5b                   	pop    ebx
c0019c91:	5e                   	pop    esi
c0019c92:	5f                   	pop    edi
c0019c93:	5d                   	pop    ebp
c0019c94:	c3                   	ret    

c0019c95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019c95:	55                   	push   ebp
c0019c96:	57                   	push   edi
c0019c97:	56                   	push   esi
c0019c98:	53                   	push   ebx
c0019c99:	83 ec 2c             	sub    esp,0x2c
c0019c9c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019ca0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019ca4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019ca8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019cac:	fa                   	cli    
c0019cad:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c0019cb3:	0f b6 35 45 a1 02 c0 	movzx  esi,BYTE PTR ds:0xc002a145
c0019cba:	89 f0                	mov    eax,esi
c0019cbc:	84 c0                	test   al,al
c0019cbe:	75 1d                	jne    c0019cdd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019cc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019cc4:	e8 47 f2 ff ff       	call   c0018f10 <schedule()>
c0019cc9:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019cce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019cd2:	48                   	dec    eax
c0019cd3:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019cd8:	75 d2                	jne    c0019cac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019cda:	fb                   	sti    
c0019cdb:	eb cf                	jmp    c0019cac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019cdd:	a1 48 a1 02 c0       	mov    eax,ds:0xc002a148
c0019ce2:	c7 05 4c a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a14c,0x0
c0019cec:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019cf0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019cf4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019cf8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019cfc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019d00:	50                   	push   eax
c0019d01:	6a 20                	push   0x20
c0019d03:	6a 00                	push   0x0
c0019d05:	68 60 a1 02 c0       	push   0xc002a160
c0019d0a:	e8 85 69 fe ff       	call   c0000694 <memset>
c0019d0f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019d16:	e8 cc 00 ff ff       	call   c0009de7 <malloc>
c0019d1b:	83 c4 0c             	add    esp,0xc
c0019d1e:	89 c3                	mov    ebx,eax
c0019d20:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c0019d26:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019d2a:	50                   	push   eax
c0019d2b:	e8 02 39 ff ff       	call   c000d632 <File::File(char const*, Process*)>
c0019d30:	83 c4 10             	add    esp,0x10
c0019d33:	85 db                	test   ebx,ebx
c0019d35:	75 0a                	jne    c0019d41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019d37:	83 ec 0c             	sub    esp,0xc
c0019d3a:	68 2c 6e 02 c0       	push   0xc0026e2c
c0019d3f:	eb 3e                	jmp    c0019d7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019d41:	50                   	push   eax
c0019d42:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019d46:	50                   	push   eax
c0019d47:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d4b:	50                   	push   eax
c0019d4c:	53                   	push   ebx
c0019d4d:	e8 66 3c ff ff       	call   c000d9b8 <File::stat(unsigned long long*, bool*)>
c0019d52:	83 c4 10             	add    esp,0x10
c0019d55:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019d5a:	74 0a                	je     c0019d66 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019d5c:	83 ec 0c             	sub    esp,0xc
c0019d5f:	68 40 6e 02 c0       	push   0xc0026e40
c0019d64:	eb 19                	jmp    c0019d7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019d66:	51                   	push   ecx
c0019d67:	51                   	push   ecx
c0019d68:	6a 01                	push   0x1
c0019d6a:	53                   	push   ebx
c0019d6b:	e8 9c 39 ff ff       	call   c000d70c <File::open(FileOpenMode)>
c0019d70:	83 c4 10             	add    esp,0x10
c0019d73:	85 c0                	test   eax,eax
c0019d75:	74 24                	je     c0019d9b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019d77:	83 ec 0c             	sub    esp,0xc
c0019d7a:	68 59 6e 02 c0       	push   0xc0026e59
c0019d7f:	e8 25 b4 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0019d84:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019d89:	83 c4 10             	add    esp,0x10
c0019d8c:	48                   	dec    eax
c0019d8d:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019d92:	85 c0                	test   eax,eax
c0019d94:	75 01                	jne    c0019d97 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019d96:	fb                   	sti    
c0019d97:	31 f6                	xor    esi,esi
c0019d99:	eb 58                	jmp    c0019df3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019d9b:	0f b7 ed             	movzx  ebp,bp
c0019d9e:	50                   	push   eax
c0019d9f:	0f b7 ff             	movzx  edi,di
c0019da2:	50                   	push   eax
c0019da3:	55                   	push   ebp
c0019da4:	57                   	push   edi
c0019da5:	e8 dc fc ff ff       	call   c0019a86 <Vm::realToLinear(unsigned short, unsigned short)>
c0019daa:	5a                   	pop    edx
c0019dab:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019dad:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019db1:	51                   	push   ecx
c0019db2:	50                   	push   eax
c0019db3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019db7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019dbb:	53                   	push   ebx
c0019dbc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019dbf:	83 c4 14             	add    esp,0x14
c0019dc2:	53                   	push   ebx
c0019dc3:	e8 a2 39 ff ff       	call   c000d76a <File::close()>
c0019dc8:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0019dcd:	83 c4 10             	add    esp,0x10
c0019dd0:	48                   	dec    eax
c0019dd1:	c6 05 45 a1 02 c0 00 	mov    BYTE PTR ds:0xc002a145,0x0
c0019dd8:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c0019ddd:	85 c0                	test   eax,eax
c0019ddf:	75 01                	jne    c0019de2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019de1:	fb                   	sti    
c0019de2:	83 ec 0c             	sub    esp,0xc
c0019de5:	ff 35 48 a1 02 c0    	push   DWORD PTR ds:0xc002a148
c0019deb:	e8 dc f5 ff ff       	call   c00193cc <unblockTask(ThreadControlBlock*)>
c0019df0:	83 c4 10             	add    esp,0x10
c0019df3:	83 c4 2c             	add    esp,0x2c
c0019df6:	89 f0                	mov    eax,esi
c0019df8:	5b                   	pop    ebx
c0019df9:	5e                   	pop    esi
c0019dfa:	5f                   	pop    edi
c0019dfb:	5d                   	pop    ebp
c0019dfc:	c3                   	ret    

c0019dfd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019dfd:	57                   	push   edi
c0019dfe:	56                   	push   esi
c0019dff:	53                   	push   ebx
c0019e00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019e0c:	83 e8 06             	sub    eax,0x6
c0019e0f:	0f b7 c0             	movzx  eax,ax
c0019e12:	50                   	push   eax
c0019e13:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019e18:	50                   	push   eax
c0019e19:	e8 68 fc ff ff       	call   c0019a86 <Vm::realToLinear(unsigned short, unsigned short)>
c0019e1e:	5a                   	pop    edx
c0019e1f:	5e                   	pop    esi
c0019e20:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019e23:	8d 56 fa             	lea    edx,[esi-0x6]
c0019e26:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019e2c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019e2f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019e32:	83 c2 02             	add    edx,0x2
c0019e35:	66 89 10             	mov    WORD PTR [eax],dx
c0019e38:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019e3b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019e3f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019e42:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019e46:	89 d6                	mov    esi,edx
c0019e48:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019e4e:	66 81 e6 ff fd       	and    si,0xfdff
c0019e53:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019e57:	74 07                	je     c0019e60 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019e59:	89 d6                	mov    esi,edx
c0019e5b:	66 81 ce 00 02       	or     si,0x200
c0019e60:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019e64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e69:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019e6d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019e75:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019e78:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019e80:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019e83:	5b                   	pop    ebx
c0019e84:	5e                   	pop    esi
c0019e85:	5f                   	pop    edi
c0019e86:	c3                   	ret    

c0019e87 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019e87:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019e8c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019e91:	c1 e0 04             	shl    eax,0x4
c0019e94:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019e97:	c3                   	ret    

c0019e98 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019e98:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019e9d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ea2:	c1 e0 04             	shl    eax,0x4
c0019ea5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019ea9:	c3                   	ret    

c0019eaa <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019eaa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019eaf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019eb4:	c1 e0 04             	shl    eax,0x4
c0019eb7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019eba:	c3                   	ret    

c0019ebb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019ebb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ec0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ec5:	c1 e0 04             	shl    eax,0x4
c0019ec8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ecc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019ecf:	c3                   	ret    

c0019ed0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019ed0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ed5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019eda:	c1 e0 04             	shl    eax,0x4
c0019edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ee1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019ee5:	c3                   	ret    

c0019ee6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019ee6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019eeb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ef0:	c1 e0 04             	shl    eax,0x4
c0019ef3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ef7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019efa:	c3                   	ret    

c0019efb <Vm::faultHandler(regs*)>:
c0019efb:	55                   	push   ebp
c0019efc:	57                   	push   edi
c0019efd:	56                   	push   esi
c0019efe:	53                   	push   ebx
c0019eff:	83 ec 1c             	sub    esp,0x1c
c0019f02:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019f06:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019f09:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019f0d:	0f b7 f8             	movzx  edi,ax
c0019f10:	52                   	push   edx
c0019f11:	0f b7 c0             	movzx  eax,ax
c0019f14:	50                   	push   eax
c0019f15:	e8 6c fb ff ff       	call   c0019a86 <Vm::realToLinear(unsigned short, unsigned short)>
c0019f1a:	5a                   	pop    edx
c0019f1b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019f1e:	59                   	pop    ecx
c0019f1f:	89 c1                	mov    ecx,eax
c0019f21:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019f24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f28:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f31:	0f b7 c5             	movzx  eax,bp
c0019f34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f38:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019f3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019f40:	e8 41 fb ff ff       	call   c0019a86 <Vm::realToLinear(unsigned short, unsigned short)>
c0019f45:	5e                   	pop    esi
c0019f46:	be 06 00 00 00       	mov    esi,0x6
c0019f4b:	5a                   	pop    edx
c0019f4c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019f51:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019f56:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019f59:	80 fa 9d             	cmp    dl,0x9d
c0019f5c:	0f 84 2c 02 00 00    	je     c001a18e <Vm::faultHandler(regs*)+0x293>
c0019f62:	0f 87 91 00 00 00    	ja     c0019ff9 <Vm::faultHandler(regs*)+0xfe>
c0019f68:	80 fa 66             	cmp    dl,0x66
c0019f6b:	0f 84 98 01 00 00    	je     c001a109 <Vm::faultHandler(regs*)+0x20e>
c0019f71:	77 47                	ja     c0019fba <Vm::faultHandler(regs*)+0xbf>
c0019f73:	80 fa 36             	cmp    dl,0x36
c0019f76:	0f 84 80 01 00 00    	je     c001a0fc <Vm::faultHandler(regs*)+0x201>
c0019f7c:	77 1a                	ja     c0019f98 <Vm::faultHandler(regs*)+0x9d>
c0019f7e:	80 fa 26             	cmp    dl,0x26
c0019f81:	0f 84 4e 01 00 00    	je     c001a0d5 <Vm::faultHandler(regs*)+0x1da>
c0019f87:	80 fa 2e             	cmp    dl,0x2e
c0019f8a:	0f 85 e2 05 00 00    	jne    c001a572 <Vm::faultHandler(regs*)+0x677>
c0019f90:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f93:	31 f6                	xor    esi,esi
c0019f95:	41                   	inc    ecx
c0019f96:	eb be                	jmp    c0019f56 <Vm::faultHandler(regs*)+0x5b>
c0019f98:	80 fa 64             	cmp    dl,0x64
c0019f9b:	0f 84 41 01 00 00    	je     c001a0e2 <Vm::faultHandler(regs*)+0x1e7>
c0019fa1:	0f 87 48 01 00 00    	ja     c001a0ef <Vm::faultHandler(regs*)+0x1f4>
c0019fa7:	80 fa 3e             	cmp    dl,0x3e
c0019faa:	0f 85 c2 05 00 00    	jne    c001a572 <Vm::faultHandler(regs*)+0x677>
c0019fb0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019fb3:	be 01 00 00 00       	mov    esi,0x1
c0019fb8:	eb db                	jmp    c0019f95 <Vm::faultHandler(regs*)+0x9a>
c0019fba:	80 fa 6d             	cmp    dl,0x6d
c0019fbd:	0f 84 ec 02 00 00    	je     c001a2af <Vm::faultHandler(regs*)+0x3b4>
c0019fc3:	77 17                	ja     c0019fdc <Vm::faultHandler(regs*)+0xe1>
c0019fc5:	80 fa 67             	cmp    dl,0x67
c0019fc8:	0f 84 48 01 00 00    	je     c001a116 <Vm::faultHandler(regs*)+0x21b>
c0019fce:	80 fa 6c             	cmp    dl,0x6c
c0019fd1:	0f 84 69 02 00 00    	je     c001a240 <Vm::faultHandler(regs*)+0x345>
c0019fd7:	e9 96 05 00 00       	jmp    c001a572 <Vm::faultHandler(regs*)+0x677>
c0019fdc:	80 fa 6f             	cmp    dl,0x6f
c0019fdf:	0f 84 f4 03 00 00    	je     c001a3d9 <Vm::faultHandler(regs*)+0x4de>
c0019fe5:	0f 82 59 03 00 00    	jb     c001a344 <Vm::faultHandler(regs*)+0x449>
c0019feb:	80 fa 9c             	cmp    dl,0x9c
c0019fee:	0f 84 2f 01 00 00    	je     c001a123 <Vm::faultHandler(regs*)+0x228>
c0019ff4:	e9 79 05 00 00       	jmp    c001a572 <Vm::faultHandler(regs*)+0x677>
c0019ff9:	80 fa ec             	cmp    dl,0xec
c0019ffc:	0f 84 14 05 00 00    	je     c001a516 <Vm::faultHandler(regs*)+0x61b>
c001a002:	77 7b                	ja     c001a07f <Vm::faultHandler(regs*)+0x184>
c001a004:	80 fa e4             	cmp    dl,0xe4
c001a007:	0f 84 93 04 00 00    	je     c001a4a0 <Vm::faultHandler(regs*)+0x5a5>
c001a00d:	77 53                	ja     c001a062 <Vm::faultHandler(regs*)+0x167>
c001a00f:	80 fa cd             	cmp    dl,0xcd
c001a012:	0f 84 d9 01 00 00    	je     c001a1f1 <Vm::faultHandler(regs*)+0x2f6>
c001a018:	80 fa cf             	cmp    dl,0xcf
c001a01b:	0f 85 51 05 00 00    	jne    c001a572 <Vm::faultHandler(regs*)+0x677>
c001a021:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a024:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001a027:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001a02b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001a02e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001a032:	81 ca 00 02 02 00    	or     edx,0x20200
c001a038:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a03b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001a03f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a045:	66 c1 e8 09          	shr    ax,0x9
c001a049:	83 e0 01             	and    eax,0x1
c001a04c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a04f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a052:	83 c0 06             	add    eax,0x6
c001a055:	25 ff ff 00 00       	and    eax,0xffff
c001a05a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a05d:	e9 0c 05 00 00       	jmp    c001a56e <Vm::faultHandler(regs*)+0x673>
c001a062:	80 fa e6             	cmp    dl,0xe6
c001a065:	0f 84 7f 04 00 00    	je     c001a4ea <Vm::faultHandler(regs*)+0x5ef>
c001a06b:	0f 82 4b 04 00 00    	jb     c001a4bc <Vm::faultHandler(regs*)+0x5c1>
c001a071:	80 fa e7             	cmp    dl,0xe7
c001a074:	0f 84 87 04 00 00    	je     c001a501 <Vm::faultHandler(regs*)+0x606>
c001a07a:	e9 f3 04 00 00       	jmp    c001a572 <Vm::faultHandler(regs*)+0x677>
c001a07f:	80 fa ef             	cmp    dl,0xef
c001a082:	0f 84 d1 04 00 00    	je     c001a559 <Vm::faultHandler(regs*)+0x65e>
c001a088:	77 28                	ja     c001a0b2 <Vm::faultHandler(regs*)+0x1b7>
c001a08a:	80 fa ed             	cmp    dl,0xed
c001a08d:	0f 84 9f 04 00 00    	je     c001a532 <Vm::faultHandler(regs*)+0x637>
c001a093:	80 fa ee             	cmp    dl,0xee
c001a096:	0f 85 d6 04 00 00    	jne    c001a572 <Vm::faultHandler(regs*)+0x677>
c001a09c:	50                   	push   eax
c001a09d:	50                   	push   eax
c001a09e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a0a2:	50                   	push   eax
c001a0a3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a0a7:	50                   	push   eax
c001a0a8:	e8 a3 f9 ff ff       	call   c0019a50 <Vm::outbv(unsigned short, unsigned char)>
c001a0ad:	e9 9f 04 00 00       	jmp    c001a551 <Vm::faultHandler(regs*)+0x656>
c001a0b2:	80 fa fa             	cmp    dl,0xfa
c001a0b5:	0f 84 69 01 00 00    	je     c001a224 <Vm::faultHandler(regs*)+0x329>
c001a0bb:	80 fa fb             	cmp    dl,0xfb
c001a0be:	0f 84 6e 01 00 00    	je     c001a232 <Vm::faultHandler(regs*)+0x337>
c001a0c4:	80 fa f3             	cmp    dl,0xf3
c001a0c7:	0f 85 a5 04 00 00    	jne    c001a572 <Vm::faultHandler(regs*)+0x677>
c001a0cd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0d0:	e9 c0 fe ff ff       	jmp    c0019f95 <Vm::faultHandler(regs*)+0x9a>
c001a0d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0d8:	be 02 00 00 00       	mov    esi,0x2
c001a0dd:	e9 b3 fe ff ff       	jmp    c0019f95 <Vm::faultHandler(regs*)+0x9a>
c001a0e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0e5:	be 03 00 00 00       	mov    esi,0x3
c001a0ea:	e9 a6 fe ff ff       	jmp    c0019f95 <Vm::faultHandler(regs*)+0x9a>
c001a0ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0f2:	be 04 00 00 00       	mov    esi,0x4
c001a0f7:	e9 99 fe ff ff       	jmp    c0019f95 <Vm::faultHandler(regs*)+0x9a>
c001a0fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a0ff:	be 05 00 00 00       	mov    esi,0x5
c001a104:	e9 8c fe ff ff       	jmp    c0019f95 <Vm::faultHandler(regs*)+0x9a>
c001a109:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a10c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001a111:	e9 7f fe ff ff       	jmp    c0019f95 <Vm::faultHandler(regs*)+0x9a>
c001a116:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a119:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001a11e:	e9 72 fe ff ff       	jmp    c0019f95 <Vm::faultHandler(regs*)+0x9a>
c001a123:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001a126:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a12a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a12f:	74 30                	je     c001a161 <Vm::faultHandler(regs*)+0x266>
c001a131:	83 e9 04             	sub    ecx,0x4
c001a134:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a13a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a140:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a143:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a146:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a14c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a150:	0f 84 15 04 00 00    	je     c001a56b <Vm::faultHandler(regs*)+0x670>
c001a156:	80 ce 02             	or     dh,0x2
c001a159:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a15c:	e9 0a 04 00 00       	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a161:	83 e9 02             	sub    ecx,0x2
c001a164:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a16a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a16d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a171:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a177:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a17b:	74 05                	je     c001a182 <Vm::faultHandler(regs*)+0x287>
c001a17d:	80 ce 02             	or     dh,0x2
c001a180:	eb 03                	jmp    c001a185 <Vm::faultHandler(regs*)+0x28a>
c001a182:	80 e6 fd             	and    dh,0xfd
c001a185:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a189:	e9 dd 03 00 00       	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a18e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a193:	74 2a                	je     c001a1bf <Vm::faultHandler(regs*)+0x2c4>
c001a195:	8b 10                	mov    edx,DWORD PTR [eax]
c001a197:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a19d:	81 ca 00 02 02 00    	or     edx,0x20200
c001a1a3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a1a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a1ae:	c1 e8 09             	shr    eax,0x9
c001a1b1:	83 e0 01             	and    eax,0x1
c001a1b4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a1b7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a1ba:	83 c0 04             	add    eax,0x4
c001a1bd:	eb 25                	jmp    c001a1e4 <Vm::faultHandler(regs*)+0x2e9>
c001a1bf:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a1c2:	81 ca 00 02 02 00    	or     edx,0x20200
c001a1c8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a1cb:	66 8b 00             	mov    ax,WORD PTR [eax]
c001a1ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a1d4:	66 c1 e8 09          	shr    ax,0x9
c001a1d8:	83 e0 01             	and    eax,0x1
c001a1db:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a1de:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a1e1:	83 c0 02             	add    eax,0x2
c001a1e4:	25 ff ff 00 00       	and    eax,0xffff
c001a1e9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a1ec:	e9 7a 03 00 00       	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a1f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a1f5:	3c ee                	cmp    al,0xee
c001a1f7:	75 10                	jne    c001a209 <Vm::faultHandler(regs*)+0x30e>
c001a1f9:	83 ec 0c             	sub    esp,0xc
c001a1fc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001a1ff:	e8 e9 f8 ff ff       	call   c0019aed <Vm::mainloop3(unsigned long)>
c001a204:	e9 4b 03 00 00       	jmp    c001a554 <Vm::faultHandler(regs*)+0x659>
c001a209:	83 ec 0c             	sub    esp,0xc
c001a20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a214:	51                   	push   ecx
c001a215:	50                   	push   eax
c001a216:	53                   	push   ebx
c001a217:	e8 e1 fb ff ff       	call   c0019dfd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001a21c:	83 c4 20             	add    esp,0x20
c001a21f:	e9 4a 03 00 00       	jmp    c001a56e <Vm::faultHandler(regs*)+0x673>
c001a224:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a229:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001a22d:	e9 39 03 00 00       	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a232:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a237:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001a23b:	e9 2b 03 00 00       	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a240:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a243:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a248:	74 2b                	je     c001a275 <Vm::faultHandler(regs*)+0x37a>
c001a24a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a251:	76 22                	jbe    c001a275 <Vm::faultHandler(regs*)+0x37a>
c001a253:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a257:	50                   	push   eax
c001a258:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a25c:	50                   	push   eax
c001a25d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a261:	50                   	push   eax
c001a262:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a266:	50                   	push   eax
c001a267:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a26b:	50                   	push   eax
c001a26c:	6a 6c                	push   0x6c
c001a26e:	6a 6c                	push   0x6c
c001a270:	e9 b9 01 00 00       	jmp    c001a42e <Vm::faultHandler(regs*)+0x533>
c001a275:	83 ec 0c             	sub    esp,0xc
c001a278:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a27c:	0f b7 f6             	movzx  esi,si
c001a27f:	50                   	push   eax
c001a280:	e8 b8 f7 ff ff       	call   c0019a3d <Vm::inbv(unsigned short)>
c001a285:	83 c4 0c             	add    esp,0xc
c001a288:	0f b6 c0             	movzx  eax,al
c001a28b:	50                   	push   eax
c001a28c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a290:	50                   	push   eax
c001a291:	56                   	push   esi
c001a292:	e8 24 fc ff ff       	call   c0019ebb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a297:	83 c4 10             	add    esp,0x10
c001a29a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a29d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a2a1:	74 03                	je     c001a2a6 <Vm::faultHandler(regs*)+0x3ab>
c001a2a3:	48                   	dec    eax
c001a2a4:	eb 01                	jmp    c001a2a7 <Vm::faultHandler(regs*)+0x3ac>
c001a2a6:	40                   	inc    eax
c001a2a7:	0f b7 c0             	movzx  eax,ax
c001a2aa:	e9 8d 00 00 00       	jmp    c001a33c <Vm::faultHandler(regs*)+0x441>
c001a2af:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a2b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a2b5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a2ba:	74 29                	je     c001a2e5 <Vm::faultHandler(regs*)+0x3ea>
c001a2bc:	3d ff ff 00 00       	cmp    eax,0xffff
c001a2c1:	76 22                	jbe    c001a2e5 <Vm::faultHandler(regs*)+0x3ea>
c001a2c3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a2c7:	50                   	push   eax
c001a2c8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a2cc:	50                   	push   eax
c001a2cd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a2d1:	50                   	push   eax
c001a2d2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a2d6:	50                   	push   eax
c001a2d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a2db:	50                   	push   eax
c001a2dc:	6a 6d                	push   0x6d
c001a2de:	6a 6d                	push   0x6d
c001a2e0:	e9 49 01 00 00       	jmp    c001a42e <Vm::faultHandler(regs*)+0x533>
c001a2e5:	0f b7 c8             	movzx  ecx,ax
c001a2e8:	0f b7 f6             	movzx  esi,si
c001a2eb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a2ee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a2f3:	74 20                	je     c001a315 <Vm::faultHandler(regs*)+0x41a>
c001a2f5:	ed                   	in     eax,dx
c001a2f6:	55                   	push   ebp
c001a2f7:	50                   	push   eax
c001a2f8:	51                   	push   ecx
c001a2f9:	56                   	push   esi
c001a2fa:	e8 e7 fb ff ff       	call   c0019ee6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a2ff:	83 c4 10             	add    esp,0x10
c001a302:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a305:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a309:	74 05                	je     c001a310 <Vm::faultHandler(regs*)+0x415>
c001a30b:	83 e8 04             	sub    eax,0x4
c001a30e:	eb 27                	jmp    c001a337 <Vm::faultHandler(regs*)+0x43c>
c001a310:	83 c0 04             	add    eax,0x4
c001a313:	eb 22                	jmp    c001a337 <Vm::faultHandler(regs*)+0x43c>
c001a315:	66 ed                	in     ax,dx
c001a317:	0f b7 c0             	movzx  eax,ax
c001a31a:	57                   	push   edi
c001a31b:	50                   	push   eax
c001a31c:	51                   	push   ecx
c001a31d:	56                   	push   esi
c001a31e:	e8 ad fb ff ff       	call   c0019ed0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a323:	83 c4 10             	add    esp,0x10
c001a326:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a329:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a32d:	74 05                	je     c001a334 <Vm::faultHandler(regs*)+0x439>
c001a32f:	83 e8 02             	sub    eax,0x2
c001a332:	eb 03                	jmp    c001a337 <Vm::faultHandler(regs*)+0x43c>
c001a334:	83 c0 02             	add    eax,0x2
c001a337:	25 ff ff 00 00       	and    eax,0xffff
c001a33c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a33f:	e9 27 02 00 00       	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a344:	8d 46 ff             	lea    eax,[esi-0x1]
c001a347:	3c 05                	cmp    al,0x5
c001a349:	77 24                	ja     c001a36f <Vm::faultHandler(regs*)+0x474>
c001a34b:	0f b6 c0             	movzx  eax,al
c001a34e:	ff 24 85 cc 6e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9134]
c001a355:	0f b7 fd             	movzx  edi,bp
c001a358:	eb 15                	jmp    c001a36f <Vm::faultHandler(regs*)+0x474>
c001a35a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a35e:	eb 0f                	jmp    c001a36f <Vm::faultHandler(regs*)+0x474>
c001a360:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a364:	eb 09                	jmp    c001a36f <Vm::faultHandler(regs*)+0x474>
c001a366:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a36a:	eb 03                	jmp    c001a36f <Vm::faultHandler(regs*)+0x474>
c001a36c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a36f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a372:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a377:	74 29                	je     c001a3a2 <Vm::faultHandler(regs*)+0x4a7>
c001a379:	3d ff ff 00 00       	cmp    eax,0xffff
c001a37e:	76 22                	jbe    c001a3a2 <Vm::faultHandler(regs*)+0x4a7>
c001a380:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a384:	50                   	push   eax
c001a385:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a389:	50                   	push   eax
c001a38a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a38e:	50                   	push   eax
c001a38f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a393:	50                   	push   eax
c001a394:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a398:	50                   	push   eax
c001a399:	6a 6e                	push   0x6e
c001a39b:	6a 6e                	push   0x6e
c001a39d:	e9 8c 00 00 00       	jmp    c001a42e <Vm::faultHandler(regs*)+0x533>
c001a3a2:	0f b7 c0             	movzx  eax,ax
c001a3a5:	52                   	push   edx
c001a3a6:	52                   	push   edx
c001a3a7:	50                   	push   eax
c001a3a8:	57                   	push   edi
c001a3a9:	e8 d9 fa ff ff       	call   c0019e87 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a3ae:	59                   	pop    ecx
c001a3af:	0f b6 c0             	movzx  eax,al
c001a3b2:	5e                   	pop    esi
c001a3b3:	50                   	push   eax
c001a3b4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a3b8:	50                   	push   eax
c001a3b9:	e8 92 f6 ff ff       	call   c0019a50 <Vm::outbv(unsigned short, unsigned char)>
c001a3be:	83 c4 10             	add    esp,0x10
c001a3c1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a3c4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a3c8:	74 03                	je     c001a3cd <Vm::faultHandler(regs*)+0x4d2>
c001a3ca:	48                   	dec    eax
c001a3cb:	eb 01                	jmp    c001a3ce <Vm::faultHandler(regs*)+0x4d3>
c001a3cd:	40                   	inc    eax
c001a3ce:	0f b7 c0             	movzx  eax,ax
c001a3d1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a3d4:	e9 92 01 00 00       	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a3d9:	8d 46 ff             	lea    eax,[esi-0x1]
c001a3dc:	3c 05                	cmp    al,0x5
c001a3de:	77 1f                	ja     c001a3ff <Vm::faultHandler(regs*)+0x504>
c001a3e0:	0f b6 c0             	movzx  eax,al
c001a3e3:	ff 24 85 e4 6e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd911c]
c001a3ea:	89 ef                	mov    edi,ebp
c001a3ec:	eb 11                	jmp    c001a3ff <Vm::faultHandler(regs*)+0x504>
c001a3ee:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a3f1:	eb 0c                	jmp    c001a3ff <Vm::faultHandler(regs*)+0x504>
c001a3f3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a3f6:	eb 07                	jmp    c001a3ff <Vm::faultHandler(regs*)+0x504>
c001a3f8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a3fb:	eb 02                	jmp    c001a3ff <Vm::faultHandler(regs*)+0x504>
c001a3fd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a3ff:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a402:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a407:	74 37                	je     c001a440 <Vm::faultHandler(regs*)+0x545>
c001a409:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a40f:	76 2f                	jbe    c001a440 <Vm::faultHandler(regs*)+0x545>
c001a411:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a415:	50                   	push   eax
c001a416:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a41a:	50                   	push   eax
c001a41b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a41f:	50                   	push   eax
c001a420:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a424:	50                   	push   eax
c001a425:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a429:	50                   	push   eax
c001a42a:	6a 6f                	push   0x6f
c001a42c:	6a 6f                	push   0x6f
c001a42e:	68 72 6e 02 c0       	push   0xc0026e72
c001a433:	e8 8f 2c ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001a438:	83 c4 20             	add    esp,0x20
c001a43b:	e9 86 01 00 00       	jmp    c001a5c6 <Vm::faultHandler(regs*)+0x6cb>
c001a440:	0f b7 d7             	movzx  edx,di
c001a443:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a446:	0f b7 c6             	movzx  eax,si
c001a449:	81 e1 00 04 00 00    	and    ecx,0x400
c001a44f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a452:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a457:	74 1d                	je     c001a476 <Vm::faultHandler(regs*)+0x57b>
c001a459:	55                   	push   ebp
c001a45a:	55                   	push   ebp
c001a45b:	50                   	push   eax
c001a45c:	52                   	push   edx
c001a45d:	e8 48 fa ff ff       	call   c0019eaa <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a462:	83 c4 10             	add    esp,0x10
c001a465:	89 fa                	mov    edx,edi
c001a467:	ef                   	out    dx,eax
c001a468:	85 c9                	test   ecx,ecx
c001a46a:	74 05                	je     c001a471 <Vm::faultHandler(regs*)+0x576>
c001a46c:	83 ee 04             	sub    esi,0x4
c001a46f:	eb 21                	jmp    c001a492 <Vm::faultHandler(regs*)+0x597>
c001a471:	83 c6 04             	add    esi,0x4
c001a474:	eb 1c                	jmp    c001a492 <Vm::faultHandler(regs*)+0x597>
c001a476:	55                   	push   ebp
c001a477:	55                   	push   ebp
c001a478:	50                   	push   eax
c001a479:	52                   	push   edx
c001a47a:	e8 19 fa ff ff       	call   c0019e98 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a47f:	83 c4 10             	add    esp,0x10
c001a482:	89 fa                	mov    edx,edi
c001a484:	66 ef                	out    dx,ax
c001a486:	85 c9                	test   ecx,ecx
c001a488:	74 05                	je     c001a48f <Vm::faultHandler(regs*)+0x594>
c001a48a:	83 ee 02             	sub    esi,0x2
c001a48d:	eb 03                	jmp    c001a492 <Vm::faultHandler(regs*)+0x597>
c001a48f:	83 c6 02             	add    esi,0x2
c001a492:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a498:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a49b:	e9 cb 00 00 00       	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a4a0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a4a7:	83 ec 0c             	sub    esp,0xc
c001a4aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a4ae:	50                   	push   eax
c001a4af:	e8 89 f5 ff ff       	call   c0019a3d <Vm::inbv(unsigned short)>
c001a4b4:	0f b6 c0             	movzx  eax,al
c001a4b7:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a4ba:	eb 3f                	jmp    c001a4fb <Vm::faultHandler(regs*)+0x600>
c001a4bc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a4c1:	74 07                	je     c001a4ca <Vm::faultHandler(regs*)+0x5cf>
c001a4c3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a4c7:	ed                   	in     eax,dx
c001a4c8:	eb 14                	jmp    c001a4de <Vm::faultHandler(regs*)+0x5e3>
c001a4ca:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a4cd:	66 31 f6             	xor    si,si
c001a4d0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a4d3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a4d7:	66 ed                	in     ax,dx
c001a4d9:	0f b7 c0             	movzx  eax,ax
c001a4dc:	09 f0                	or     eax,esi
c001a4de:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a4e1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a4e5:	e9 84 00 00 00       	jmp    c001a56e <Vm::faultHandler(regs*)+0x673>
c001a4ea:	52                   	push   edx
c001a4eb:	52                   	push   edx
c001a4ec:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a4f0:	50                   	push   eax
c001a4f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a4f5:	50                   	push   eax
c001a4f6:	e8 55 f5 ff ff       	call   c0019a50 <Vm::outbv(unsigned short, unsigned char)>
c001a4fb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a4ff:	eb 53                	jmp    c001a554 <Vm::faultHandler(regs*)+0x659>
c001a501:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a504:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a508:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a50d:	74 03                	je     c001a512 <Vm::faultHandler(regs*)+0x617>
c001a50f:	ef                   	out    dx,eax
c001a510:	eb cf                	jmp    c001a4e1 <Vm::faultHandler(regs*)+0x5e6>
c001a512:	66 ef                	out    dx,ax
c001a514:	eb cb                	jmp    c001a4e1 <Vm::faultHandler(regs*)+0x5e6>
c001a516:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a51d:	83 ec 0c             	sub    esp,0xc
c001a520:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a524:	50                   	push   eax
c001a525:	e8 13 f5 ff ff       	call   c0019a3d <Vm::inbv(unsigned short)>
c001a52a:	0f b6 c0             	movzx  eax,al
c001a52d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a530:	eb 1f                	jmp    c001a551 <Vm::faultHandler(regs*)+0x656>
c001a532:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a535:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a53a:	74 03                	je     c001a53f <Vm::faultHandler(regs*)+0x644>
c001a53c:	ed                   	in     eax,dx
c001a53d:	eb 0d                	jmp    c001a54c <Vm::faultHandler(regs*)+0x651>
c001a53f:	66 ed                	in     ax,dx
c001a541:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a544:	0f b7 c0             	movzx  eax,ax
c001a547:	66 31 d2             	xor    dx,dx
c001a54a:	09 d0                	or     eax,edx
c001a54c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a54f:	eb 1a                	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a551:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a554:	83 c4 10             	add    esp,0x10
c001a557:	eb 15                	jmp    c001a56e <Vm::faultHandler(regs*)+0x673>
c001a559:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a55c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a55f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a564:	74 03                	je     c001a569 <Vm::faultHandler(regs*)+0x66e>
c001a566:	ef                   	out    dx,eax
c001a567:	eb 02                	jmp    c001a56b <Vm::faultHandler(regs*)+0x670>
c001a569:	66 ef                	out    dx,ax
c001a56b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a56e:	b0 01                	mov    al,0x1
c001a570:	eb 56                	jmp    c001a5c8 <Vm::faultHandler(regs*)+0x6cd>
c001a572:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a576:	50                   	push   eax
c001a577:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a57b:	50                   	push   eax
c001a57c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a580:	50                   	push   eax
c001a581:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a585:	50                   	push   eax
c001a586:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a58a:	50                   	push   eax
c001a58b:	52                   	push   edx
c001a58c:	52                   	push   edx
c001a58d:	68 9f 6e 02 c0       	push   0xc0026e9f
c001a592:	e8 30 2b ff ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001a597:	83 c4 20             	add    esp,0x20
c001a59a:	83 ec 0c             	sub    esp,0xc
c001a59d:	6a 60                	push   0x60
c001a59f:	e8 99 f4 ff ff       	call   c0019a3d <Vm::inbv(unsigned short)>
c001a5a4:	83 c4 10             	add    esp,0x10
c001a5a7:	3c 1c                	cmp    al,0x1c
c001a5a9:	74 04                	je     c001a5af <Vm::faultHandler(regs*)+0x6b4>
c001a5ab:	3c 5a                	cmp    al,0x5a
c001a5ad:	75 eb                	jne    c001a59a <Vm::faultHandler(regs*)+0x69f>
c001a5af:	3c 5a                	cmp    al,0x5a
c001a5b1:	74 04                	je     c001a5b7 <Vm::faultHandler(regs*)+0x6bc>
c001a5b3:	3c 1c                	cmp    al,0x1c
c001a5b5:	75 0f                	jne    c001a5c6 <Vm::faultHandler(regs*)+0x6cb>
c001a5b7:	83 ec 0c             	sub    esp,0xc
c001a5ba:	6a 60                	push   0x60
c001a5bc:	e8 7c f4 ff ff       	call   c0019a3d <Vm::inbv(unsigned short)>
c001a5c1:	83 c4 10             	add    esp,0x10
c001a5c4:	eb e9                	jmp    c001a5af <Vm::faultHandler(regs*)+0x6b4>
c001a5c6:	31 c0                	xor    eax,eax
c001a5c8:	83 c4 1c             	add    esp,0x1c
c001a5cb:	5b                   	pop    ebx
c001a5cc:	5e                   	pop    esi
c001a5cd:	5f                   	pop    edi
c001a5ce:	5d                   	pop    ebp
c001a5cf:	c3                   	ret    

c001a5d0 <Vm::fpuInternalTo32(unsigned long long)>:
c001a5d0:	57                   	push   edi
c001a5d1:	56                   	push   esi
c001a5d2:	53                   	push   ebx
c001a5d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5db:	89 d6                	mov    esi,edx
c001a5dd:	89 d7                	mov    edi,edx
c001a5df:	89 c1                	mov    ecx,eax
c001a5e1:	c1 ef 14             	shr    edi,0x14
c001a5e4:	89 d3                	mov    ebx,edx
c001a5e6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a5ec:	31 d2                	xor    edx,edx
c001a5ee:	89 f8                	mov    eax,edi
c001a5f0:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a5f6:	bf ff 00 00 00       	mov    edi,0xff
c001a5fb:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a600:	83 d2 ff             	adc    edx,0xffffffff
c001a603:	39 c7                	cmp    edi,eax
c001a605:	bf 00 00 00 00       	mov    edi,0x0
c001a60a:	19 d7                	sbb    edi,edx
c001a60c:	72 16                	jb     c001a624 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a60e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a612:	c1 e0 17             	shl    eax,0x17
c001a615:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a61b:	09 f1                	or     ecx,esi
c001a61d:	09 c1                	or     ecx,eax
c001a61f:	89 cf                	mov    edi,ecx
c001a621:	eb 05                	jmp    c001a628 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a623:	90                   	nop
c001a624:	31 ff                	xor    edi,edi
c001a626:	66 90                	xchg   ax,ax
c001a628:	89 f8                	mov    eax,edi
c001a62a:	5b                   	pop    ebx
c001a62b:	5e                   	pop    esi
c001a62c:	5f                   	pop    edi
c001a62d:	c3                   	ret    

c001a62e <Vm::fpuInternalTo64(unsigned long long)>:
c001a62e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a632:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a636:	c3                   	ret    

c001a637 <Vm::fpu32ToInternal(unsigned int)>:
c001a637:	57                   	push   edi
c001a638:	31 ff                	xor    edi,edi
c001a63a:	56                   	push   esi
c001a63b:	53                   	push   ebx
c001a63c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a640:	89 cb                	mov    ebx,ecx
c001a642:	89 ce                	mov    esi,ecx
c001a644:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a64a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a650:	c1 e9 17             	shr    ecx,0x17
c001a653:	89 f0                	mov    eax,esi
c001a655:	0f b6 d1             	movzx  edx,cl
c001a658:	81 c2 80 03 00 00    	add    edx,0x380
c001a65e:	89 d1                	mov    ecx,edx
c001a660:	89 fa                	mov    edx,edi
c001a662:	c1 e1 14             	shl    ecx,0x14
c001a665:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a669:	c1 e0 1d             	shl    eax,0x1d
c001a66c:	89 d7                	mov    edi,edx
c001a66e:	89 c6                	mov    esi,eax
c001a670:	89 ca                	mov    edx,ecx
c001a672:	89 f0                	mov    eax,esi
c001a674:	09 fa                	or     edx,edi
c001a676:	09 da                	or     edx,ebx
c001a678:	5b                   	pop    ebx
c001a679:	5e                   	pop    esi
c001a67a:	5f                   	pop    edi
c001a67b:	c3                   	ret    

c001a67c <Vm::fpu64ToInternal(unsigned long long)>:
c001a67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a680:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a684:	c3                   	ret    

c001a685 <Vm::fpuFloatToLong(unsigned long long)>:
c001a685:	57                   	push   edi
c001a686:	31 c0                	xor    eax,eax
c001a688:	56                   	push   esi
c001a689:	31 d2                	xor    edx,edx
c001a68b:	53                   	push   ebx
c001a68c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a690:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a694:	89 d9                	mov    ecx,ebx
c001a696:	c1 e9 14             	shr    ecx,0x14
c001a699:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a69f:	89 cf                	mov    edi,ecx
c001a6a1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a6a7:	78 37                	js     c001a6e0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a6a9:	89 d9                	mov    ecx,ebx
c001a6ab:	89 f0                	mov    eax,esi
c001a6ad:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a6b3:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a6b9:	89 ca                	mov    edx,ecx
c001a6bb:	b9 34 00 00 00       	mov    ecx,0x34
c001a6c0:	29 f9                	sub    ecx,edi
c001a6c2:	0f ad d0             	shrd   eax,edx,cl
c001a6c5:	d3 fa                	sar    edx,cl
c001a6c7:	f6 c1 20             	test   cl,0x20
c001a6ca:	74 08                	je     c001a6d4 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a6cc:	89 d0                	mov    eax,edx
c001a6ce:	c1 fa 1f             	sar    edx,0x1f
c001a6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6d4:	85 db                	test   ebx,ebx
c001a6d6:	79 08                	jns    c001a6e0 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a6d8:	f7 d8                	neg    eax
c001a6da:	83 d2 00             	adc    edx,0x0
c001a6dd:	f7 da                	neg    edx
c001a6df:	90                   	nop
c001a6e0:	5b                   	pop    ebx
c001a6e1:	5e                   	pop    esi
c001a6e2:	5f                   	pop    edi
c001a6e3:	c3                   	ret    

c001a6e4 <Vm::fpuULongToFloat(unsigned long long)>:
c001a6e4:	57                   	push   edi
c001a6e5:	31 c9                	xor    ecx,ecx
c001a6e7:	56                   	push   esi
c001a6e8:	53                   	push   ebx
c001a6e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a6ed:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6f4:	0f ba e7 14          	bt     edi,0x14
c001a6f8:	72 0a                	jb     c001a704 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a6fa:	01 f6                	add    esi,esi
c001a6fc:	11 ff                	adc    edi,edi
c001a6fe:	41                   	inc    ecx
c001a6ff:	eb f3                	jmp    c001a6f4 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a701:	8d 76 00             	lea    esi,[esi+0x0]
c001a704:	89 fa                	mov    edx,edi
c001a706:	89 f0                	mov    eax,esi
c001a708:	bb 33 04 00 00       	mov    ebx,0x433
c001a70d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a713:	29 cb                	sub    ebx,ecx
c001a715:	89 d9                	mov    ecx,ebx
c001a717:	5b                   	pop    ebx
c001a718:	c1 e1 14             	shl    ecx,0x14
c001a71b:	5e                   	pop    esi
c001a71c:	09 ca                	or     edx,ecx
c001a71e:	5f                   	pop    edi
c001a71f:	c3                   	ret    

c001a720 <Vm::fpuLongToFloat(long long)>:
c001a720:	56                   	push   esi
c001a721:	31 c0                	xor    eax,eax
c001a723:	53                   	push   ebx
c001a724:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a728:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a72c:	39 c8                	cmp    eax,ecx
c001a72e:	19 d8                	sbb    eax,ebx
c001a730:	7d 06                	jge    c001a738 <Vm::fpuLongToFloat(long long)+0x18>
c001a732:	31 f6                	xor    esi,esi
c001a734:	eb 0e                	jmp    c001a744 <Vm::fpuLongToFloat(long long)+0x24>
c001a736:	66 90                	xchg   ax,ax
c001a738:	f7 d9                	neg    ecx
c001a73a:	be 01 00 00 00       	mov    esi,0x1
c001a73f:	83 d3 00             	adc    ebx,0x0
c001a742:	f7 db                	neg    ebx
c001a744:	31 c0                	xor    eax,eax
c001a746:	66 90                	xchg   ax,ax
c001a748:	0f ba e3 14          	bt     ebx,0x14
c001a74c:	72 0a                	jb     c001a758 <Vm::fpuLongToFloat(long long)+0x38>
c001a74e:	01 c9                	add    ecx,ecx
c001a750:	11 db                	adc    ebx,ebx
c001a752:	40                   	inc    eax
c001a753:	eb f3                	jmp    c001a748 <Vm::fpuLongToFloat(long long)+0x28>
c001a755:	8d 76 00             	lea    esi,[esi+0x0]
c001a758:	ba 33 04 00 00       	mov    edx,0x433
c001a75d:	29 c2                	sub    edx,eax
c001a75f:	89 c8                	mov    eax,ecx
c001a761:	c1 e2 14             	shl    edx,0x14
c001a764:	89 d9                	mov    ecx,ebx
c001a766:	89 f3                	mov    ebx,esi
c001a768:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a76e:	09 ca                	or     edx,ecx
c001a770:	84 db                	test   bl,bl
c001a772:	74 08                	je     c001a77c <Vm::fpuLongToFloat(long long)+0x5c>
c001a774:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a77a:	66 90                	xchg   ax,ax
c001a77c:	5b                   	pop    ebx
c001a77d:	5e                   	pop    esi
c001a77e:	c3                   	ret    

c001a77f <Vm::fpuGet0()>:
c001a77f:	31 c0                	xor    eax,eax
c001a781:	31 d2                	xor    edx,edx
c001a783:	c3                   	ret    

c001a784 <Vm::fpuGet1()>:
c001a784:	b8 01 00 00 00       	mov    eax,0x1
c001a789:	31 d2                	xor    edx,edx
c001a78b:	c3                   	ret    

c001a78c <Vm::fpuGetPi()>:
c001a78c:	b8 03 00 00 00       	mov    eax,0x3
c001a791:	31 d2                	xor    edx,edx
c001a793:	c3                   	ret    

c001a794 <Vm::fpuGetLog2E()>:
c001a794:	83 ec 18             	sub    esp,0x18
c001a797:	68 fc 6e 02 c0       	push   0xc0026efc
c001a79c:	e8 08 aa ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001a7a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7a6:	31 d2                	xor    edx,edx
c001a7a8:	83 c4 1c             	add    esp,0x1c
c001a7ab:	c3                   	ret    

c001a7ac <Vm::fpuGetLogE2()>:
c001a7ac:	83 ec 18             	sub    esp,0x18
c001a7af:	68 08 6f 02 c0       	push   0xc0026f08
c001a7b4:	e8 f0 a9 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001a7b9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7be:	31 d2                	xor    edx,edx
c001a7c0:	83 c4 1c             	add    esp,0x1c
c001a7c3:	c3                   	ret    

c001a7c4 <Vm::fpuGetLog210()>:
c001a7c4:	83 ec 18             	sub    esp,0x18
c001a7c7:	68 14 6f 02 c0       	push   0xc0026f14
c001a7cc:	e8 d8 a9 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001a7d1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7d6:	31 d2                	xor    edx,edx
c001a7d8:	83 c4 1c             	add    esp,0x1c
c001a7db:	c3                   	ret    

c001a7dc <Vm::fpuGetLog102()>:
c001a7dc:	83 ec 18             	sub    esp,0x18
c001a7df:	68 21 6f 02 c0       	push   0xc0026f21
c001a7e4:	e8 c0 a9 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001a7e9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a7ee:	31 d2                	xor    edx,edx
c001a7f0:	83 c4 1c             	add    esp,0x1c
c001a7f3:	c3                   	ret    

c001a7f4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a7f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7f8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a7fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a800:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a804:	0f 92 c0             	setb   al
c001a807:	c3                   	ret    

c001a808 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a808:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a810:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a814:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a818:	09 c2                	or     edx,eax
c001a81a:	0f 94 c0             	sete   al
c001a81d:	c3                   	ret    

c001a81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a81e:	57                   	push   edi
c001a81f:	56                   	push   esi
c001a820:	53                   	push   ebx
c001a821:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a825:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a829:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a82d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a831:	57                   	push   edi
c001a832:	56                   	push   esi
c001a833:	53                   	push   ebx
c001a834:	51                   	push   ecx
c001a835:	e8 ce ff ff ff       	call   c001a808 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a83a:	83 c4 10             	add    esp,0x10
c001a83d:	88 c2                	mov    dl,al
c001a83f:	31 c0                	xor    eax,eax
c001a841:	84 d2                	test   dl,dl
c001a843:	75 0f                	jne    c001a854 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a845:	57                   	push   edi
c001a846:	56                   	push   esi
c001a847:	53                   	push   ebx
c001a848:	51                   	push   ecx
c001a849:	e8 a6 ff ff ff       	call   c001a7f4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a84e:	83 c4 10             	add    esp,0x10
c001a851:	8d 76 00             	lea    esi,[esi+0x0]
c001a854:	83 e0 01             	and    eax,0x1
c001a857:	5b                   	pop    ebx
c001a858:	88 c1                	mov    cl,al
c001a85a:	83 e2 01             	and    edx,0x1
c001a85d:	a0 81 a1 02 c0       	mov    al,ds:0xc002a181
c001a862:	c1 e2 06             	shl    edx,0x6
c001a865:	83 e0 ba             	and    eax,0xffffffba
c001a868:	5e                   	pop    esi
c001a869:	09 c8                	or     eax,ecx
c001a86b:	5f                   	pop    edi
c001a86c:	09 d0                	or     eax,edx
c001a86e:	a2 81 a1 02 c0       	mov    ds:0xc002a181,al
c001a873:	c3                   	ret    

c001a874 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a874:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a878:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a87c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a880:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a884:	c3                   	ret    

c001a885 <Vm::fpuAbs(unsigned long long)>:
c001a885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a889:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a88d:	c3                   	ret    

c001a88e <Vm::fpuChs(unsigned long long)>:
c001a88e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a892:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a896:	f7 d8                	neg    eax
c001a898:	83 d2 00             	adc    edx,0x0
c001a89b:	f7 da                	neg    edx
c001a89d:	c3                   	ret    

c001a89e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a89e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a8a2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a8a7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a8ab:	eb c7                	jmp    c001a874 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a8ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a8ad:	53                   	push   ebx
c001a8ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a8ba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8be:	0f af ca             	imul   ecx,edx
c001a8c1:	0f af d8             	imul   ebx,eax
c001a8c4:	f7 e2                	mul    edx
c001a8c6:	01 d9                	add    ecx,ebx
c001a8c8:	5b                   	pop    ebx
c001a8c9:	01 ca                	add    edx,ecx
c001a8cb:	c3                   	ret    

c001a8cc <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a8cc:	83 ec 0c             	sub    esp,0xc
c001a8cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8df:	e8 bc 86 00 00       	call   c0022fa0 <__udivdi3>
c001a8e4:	83 c4 1c             	add    esp,0x1c
c001a8e7:	c3                   	ret    

c001a8e8 <Vm::fpuSquare(unsigned long long)>:
c001a8e8:	50                   	push   eax
c001a8e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8f1:	52                   	push   edx
c001a8f2:	50                   	push   eax
c001a8f3:	52                   	push   edx
c001a8f4:	50                   	push   eax
c001a8f5:	e8 b3 ff ff ff       	call   c001a8ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a8fa:	83 c4 14             	add    esp,0x14
c001a8fd:	c3                   	ret    

c001a8fe <Vm::fpuGetReg(int)>:
c001a8fe:	83 ec 0c             	sub    esp,0xc
c001a901:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a906:	76 10                	jbe    c001a918 <Vm::fpuGetReg(int)+0x1a>
c001a908:	83 ec 0c             	sub    esp,0xc
c001a90b:	68 2e 6f 02 c0       	push   0xc0026f2e
c001a910:	e8 94 a8 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001a915:	83 c4 10             	add    esp,0x10
c001a918:	a0 81 a1 02 c0       	mov    al,ds:0xc002a181
c001a91d:	b9 08 00 00 00       	mov    ecx,0x8
c001a922:	c0 e8 03             	shr    al,0x3
c001a925:	83 e0 07             	and    eax,0x7
c001a928:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a92c:	99                   	cdq    
c001a92d:	f7 f9                	idiv   ecx
c001a92f:	8b 04 d5 84 a1 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd5e7c]
c001a936:	8b 14 d5 88 a1 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5e78]
c001a93d:	83 c4 0c             	add    esp,0xc
c001a940:	c3                   	ret    

c001a941 <Vm::fpuSetReg(int, unsigned long long)>:
c001a941:	57                   	push   edi
c001a942:	56                   	push   esi
c001a943:	52                   	push   edx
c001a944:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a948:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a94c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a951:	76 11                	jbe    c001a964 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a953:	83 ec 0c             	sub    esp,0xc
c001a956:	68 41 6f 02 c0       	push   0xc0026f41
c001a95b:	e8 49 a8 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001a960:	83 c4 10             	add    esp,0x10
c001a963:	90                   	nop
c001a964:	a0 81 a1 02 c0       	mov    al,ds:0xc002a181
c001a969:	b9 08 00 00 00       	mov    ecx,0x8
c001a96e:	c0 e8 03             	shr    al,0x3
c001a971:	83 e0 07             	and    eax,0x7
c001a974:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a978:	99                   	cdq    
c001a979:	f7 f9                	idiv   ecx
c001a97b:	89 34 d5 84 a1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5e7c],esi
c001a982:	89 3c d5 88 a1 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5e78],edi
c001a989:	58                   	pop    eax
c001a98a:	5e                   	pop    esi
c001a98b:	5f                   	pop    edi
c001a98c:	c3                   	ret    

c001a98d <Vm::fpuPush(unsigned long long)>:
c001a98d:	a0 81 a1 02 c0       	mov    al,ds:0xc002a181
c001a992:	c0 e8 03             	shr    al,0x3
c001a995:	83 e0 07             	and    eax,0x7
c001a998:	83 c0 07             	add    eax,0x7
c001a99b:	88 c2                	mov    dl,al
c001a99d:	83 e0 07             	and    eax,0x7
c001a9a0:	83 e2 07             	and    edx,0x7
c001a9a3:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a9aa:	8a 15 81 a1 02 c0    	mov    dl,BYTE PTR ds:0xc002a181
c001a9b0:	83 e2 c7             	and    edx,0xffffffc7
c001a9b3:	09 ca                	or     edx,ecx
c001a9b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a9b9:	88 15 81 a1 02 c0    	mov    BYTE PTR ds:0xc002a181,dl
c001a9bf:	89 0c c5 88 a1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5e78],ecx
c001a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a9ca:	89 14 c5 84 a1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5e7c],edx
c001a9d1:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c001a9d6:	83 f8 08             	cmp    eax,0x8
c001a9d9:	75 09                	jne    c001a9e4 <Vm::fpuPush(unsigned long long)+0x57>
c001a9db:	80 0d 80 a1 02 c0 40 	or     BYTE PTR ds:0xc002a180,0x40
c001a9e2:	c3                   	ret    
c001a9e3:	90                   	nop
c001a9e4:	40                   	inc    eax
c001a9e5:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c001a9ea:	c3                   	ret    

c001a9eb <Vm::fpuPop()>:
c001a9eb:	8a 0d 81 a1 02 c0    	mov    cl,BYTE PTR ds:0xc002a181
c001a9f1:	53                   	push   ebx
c001a9f2:	c0 e9 03             	shr    cl,0x3
c001a9f5:	8a 1d 81 a1 02 c0    	mov    bl,BYTE PTR ds:0xc002a181
c001a9fb:	83 e1 07             	and    ecx,0x7
c001a9fe:	83 e3 c7             	and    ebx,0xffffffc7
c001aa01:	8b 04 cd 84 a1 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd5e7c]
c001aa08:	8b 14 cd 88 a1 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5e78]
c001aa0f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001aa16:	83 e1 38             	and    ecx,0x38
c001aa19:	09 d9                	or     ecx,ebx
c001aa1b:	88 0d 81 a1 02 c0    	mov    BYTE PTR ds:0xc002a181,cl
c001aa21:	8b 0d c4 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a1c4
c001aa27:	85 c9                	test   ecx,ecx
c001aa29:	74 09                	je     c001aa34 <Vm::fpuPop()+0x49>
c001aa2b:	49                   	dec    ecx
c001aa2c:	89 0d c4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c4,ecx
c001aa32:	eb 08                	jmp    c001aa3c <Vm::fpuPop()+0x51>
c001aa34:	80 0d 80 a1 02 c0 40 	or     BYTE PTR ds:0xc002a180,0x40
c001aa3b:	90                   	nop
c001aa3c:	5b                   	pop    ebx
c001aa3d:	c3                   	ret    

c001aa3e <Vm::x87Handler(regs*)>:
c001aa3e:	55                   	push   ebp
c001aa3f:	57                   	push   edi
c001aa40:	56                   	push   esi
c001aa41:	53                   	push   ebx
c001aa42:	83 ec 1c             	sub    esp,0x1c
c001aa45:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa49:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001aa4e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001aa51:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001aa59:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aa5d:	50                   	push   eax
c001aa5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001aa62:	50                   	push   eax
c001aa63:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa67:	50                   	push   eax
c001aa68:	53                   	push   ebx
c001aa69:	e8 54 9e ff ff       	call   c00148c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001aa6e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001aa71:	83 c4 10             	add    esp,0x10
c001aa74:	89 c6                	mov    esi,eax
c001aa76:	80 fa d9             	cmp    dl,0xd9
c001aa79:	0f 85 79 01 00 00    	jne    c001abf8 <Vm::x87Handler(regs*)+0x1ba>
c001aa7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aa83:	8d 50 20             	lea    edx,[eax+0x20]
c001aa86:	80 fa 0e             	cmp    dl,0xe
c001aa89:	0f 87 a5 00 00 00    	ja     c001ab34 <Vm::x87Handler(regs*)+0xf6>
c001aa8f:	0f b6 d2             	movzx  edx,dl
c001aa92:	ff 24 95 54 6f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd90ac]
c001aa99:	8d 76 00             	lea    esi,[esi+0x0]
c001aa9c:	e8 de fc ff ff       	call   c001a77f <Vm::fpuGet0()>
c001aaa1:	eb 09                	jmp    c001aaac <Vm::x87Handler(regs*)+0x6e>
c001aaa3:	90                   	nop
c001aaa4:	e8 db fc ff ff       	call   c001a784 <Vm::fpuGet1()>
c001aaa9:	8d 76 00             	lea    esi,[esi+0x0]
c001aaac:	57                   	push   edi
c001aaad:	57                   	push   edi
c001aaae:	66 90                	xchg   ax,ax
c001aab0:	52                   	push   edx
c001aab1:	50                   	push   eax
c001aab2:	e8 d6 fe ff ff       	call   c001a98d <Vm::fpuPush(unsigned long long)>
c001aab7:	90                   	nop
c001aab8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001aabc:	83 c4 10             	add    esp,0x10
c001aabf:	90                   	nop
c001aac0:	b0 01                	mov    al,0x1
c001aac2:	e9 89 0a 00 00       	jmp    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001aac7:	90                   	nop
c001aac8:	83 ec 0c             	sub    esp,0xc
c001aacb:	6a 00                	push   0x0
c001aacd:	e8 2c fe ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001aad2:	59                   	pop    ecx
c001aad3:	5e                   	pop    esi
c001aad4:	52                   	push   edx
c001aad5:	50                   	push   eax
c001aad6:	e8 b3 fd ff ff       	call   c001a88e <Vm::fpuChs(unsigned long long)>
c001aadb:	eb 17                	jmp    c001aaf4 <Vm::x87Handler(regs*)+0xb6>
c001aadd:	8d 76 00             	lea    esi,[esi+0x0]
c001aae0:	83 ec 0c             	sub    esp,0xc
c001aae3:	6a 00                	push   0x0
c001aae5:	e8 14 fe ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001aaea:	5f                   	pop    edi
c001aaeb:	5d                   	pop    ebp
c001aaec:	52                   	push   edx
c001aaed:	50                   	push   eax
c001aaee:	e8 92 fd ff ff       	call   c001a885 <Vm::fpuAbs(unsigned long long)>
c001aaf3:	90                   	nop
c001aaf4:	83 c4 0c             	add    esp,0xc
c001aaf7:	90                   	nop
c001aaf8:	52                   	push   edx
c001aaf9:	50                   	push   eax
c001aafa:	66 90                	xchg   ax,ax
c001aafc:	6a 00                	push   0x0
c001aafe:	66 90                	xchg   ax,ax
c001ab00:	e8 3c fe ff ff       	call   c001a941 <Vm::fpuSetReg(int, unsigned long long)>
c001ab05:	eb b1                	jmp    c001aab8 <Vm::x87Handler(regs*)+0x7a>
c001ab07:	90                   	nop
c001ab08:	e8 b7 fc ff ff       	call   c001a7c4 <Vm::fpuGetLog210()>
c001ab0d:	eb 9d                	jmp    c001aaac <Vm::x87Handler(regs*)+0x6e>
c001ab0f:	90                   	nop
c001ab10:	e8 7f fc ff ff       	call   c001a794 <Vm::fpuGetLog2E()>
c001ab15:	eb 95                	jmp    c001aaac <Vm::x87Handler(regs*)+0x6e>
c001ab17:	90                   	nop
c001ab18:	e8 6f fc ff ff       	call   c001a78c <Vm::fpuGetPi()>
c001ab1d:	eb 8d                	jmp    c001aaac <Vm::x87Handler(regs*)+0x6e>
c001ab1f:	90                   	nop
c001ab20:	e8 b7 fc ff ff       	call   c001a7dc <Vm::fpuGetLog102()>
c001ab25:	eb 85                	jmp    c001aaac <Vm::x87Handler(regs*)+0x6e>
c001ab27:	90                   	nop
c001ab28:	e8 7f fc ff ff       	call   c001a7ac <Vm::fpuGetLogE2()>
c001ab2d:	e9 7a ff ff ff       	jmp    c001aaac <Vm::x87Handler(regs*)+0x6e>
c001ab32:	66 90                	xchg   ax,ax
c001ab34:	8d 50 40             	lea    edx,[eax+0x40]
c001ab37:	80 fa 07             	cmp    dl,0x7
c001ab3a:	77 18                	ja     c001ab54 <Vm::x87Handler(regs*)+0x116>
c001ab3c:	83 ec 0c             	sub    esp,0xc
c001ab3f:	2d c0 00 00 00       	sub    eax,0xc0
c001ab44:	50                   	push   eax
c001ab45:	e8 b4 fd ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ab4a:	59                   	pop    ecx
c001ab4b:	5e                   	pop    esi
c001ab4c:	e9 5f ff ff ff       	jmp    c001aab0 <Vm::x87Handler(regs*)+0x72>
c001ab51:	8d 76 00             	lea    esi,[esi+0x0]
c001ab54:	8d 50 38             	lea    edx,[eax+0x38]
c001ab57:	80 fa 07             	cmp    dl,0x7
c001ab5a:	77 3c                	ja     c001ab98 <Vm::x87Handler(regs*)+0x15a>
c001ab5c:	83 ec 0c             	sub    esp,0xc
c001ab5f:	2d c8 00 00 00       	sub    eax,0xc8
c001ab64:	50                   	push   eax
c001ab65:	e8 94 fd ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ab6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab71:	89 c6                	mov    esi,eax
c001ab73:	89 d7                	mov    edi,edx
c001ab75:	e8 84 fd ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ab7a:	83 c4 0c             	add    esp,0xc
c001ab7d:	52                   	push   edx
c001ab7e:	50                   	push   eax
c001ab7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ab83:	2d c8 00 00 00       	sub    eax,0xc8
c001ab88:	50                   	push   eax
c001ab89:	e8 b3 fd ff ff       	call   c001a941 <Vm::fpuSetReg(int, unsigned long long)>
c001ab8e:	83 c4 0c             	add    esp,0xc
c001ab91:	57                   	push   edi
c001ab92:	56                   	push   esi
c001ab93:	e9 64 ff ff ff       	jmp    c001aafc <Vm::x87Handler(regs*)+0xbe>
c001ab98:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ab9c:	84 d2                	test   dl,dl
c001ab9e:	75 10                	jne    c001abb0 <Vm::x87Handler(regs*)+0x172>
c001aba0:	83 ec 0c             	sub    esp,0xc
c001aba3:	ff 36                	push   DWORD PTR [esi]
c001aba5:	e8 8d fa ff ff       	call   c001a637 <Vm::fpu32ToInternal(unsigned int)>
c001abaa:	e9 c9 00 00 00       	jmp    c001ac78 <Vm::x87Handler(regs*)+0x23a>
c001abaf:	90                   	nop
c001abb0:	80 fa 03             	cmp    dl,0x3
c001abb3:	75 13                	jne    c001abc8 <Vm::x87Handler(regs*)+0x18a>
c001abb5:	e8 31 fe ff ff       	call   c001a9eb <Vm::fpuPop()>
c001abba:	55                   	push   ebp
c001abbb:	55                   	push   ebp
c001abbc:	52                   	push   edx
c001abbd:	50                   	push   eax
c001abbe:	e8 0d fa ff ff       	call   c001a5d0 <Vm::fpuInternalTo32(unsigned long long)>
c001abc3:	e9 90 00 00 00       	jmp    c001ac58 <Vm::x87Handler(regs*)+0x21a>
c001abc8:	80 fa 05             	cmp    dl,0x5
c001abcb:	75 0f                	jne    c001abdc <Vm::x87Handler(regs*)+0x19e>
c001abcd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001abd0:	66 a3 82 a1 02 c0    	mov    ds:0xc002a182,ax
c001abd6:	e9 ed 00 00 00       	jmp    c001acc8 <Vm::x87Handler(regs*)+0x28a>
c001abdb:	90                   	nop
c001abdc:	31 c0                	xor    eax,eax
c001abde:	80 fa 07             	cmp    dl,0x7
c001abe1:	0f 85 69 09 00 00    	jne    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001abe7:	66 a1 82 a1 02 c0    	mov    ax,ds:0xc002a182
c001abed:	66 89 06             	mov    WORD PTR [esi],ax
c001abf0:	e9 d3 00 00 00       	jmp    c001acc8 <Vm::x87Handler(regs*)+0x28a>
c001abf5:	8d 76 00             	lea    esi,[esi+0x0]
c001abf8:	80 fa d8             	cmp    dl,0xd8
c001abfb:	0f 84 d3 00 00 00    	je     c001acd4 <Vm::x87Handler(regs*)+0x296>
c001ac01:	80 fa dc             	cmp    dl,0xdc
c001ac04:	0f 84 2a 02 00 00    	je     c001ae34 <Vm::x87Handler(regs*)+0x3f6>
c001ac0a:	80 fa de             	cmp    dl,0xde
c001ac0d:	0f 84 f1 02 00 00    	je     c001af04 <Vm::x87Handler(regs*)+0x4c6>
c001ac13:	80 fa dd             	cmp    dl,0xdd
c001ac16:	0f 84 94 04 00 00    	je     c001b0b0 <Vm::x87Handler(regs*)+0x672>
c001ac1c:	80 fa da             	cmp    dl,0xda
c001ac1f:	0f 84 5f 05 00 00    	je     c001b184 <Vm::x87Handler(regs*)+0x746>
c001ac25:	80 fa df             	cmp    dl,0xdf
c001ac28:	0f 84 aa 05 00 00    	je     c001b1d8 <Vm::x87Handler(regs*)+0x79a>
c001ac2e:	31 c0                	xor    eax,eax
c001ac30:	80 fa db             	cmp    dl,0xdb
c001ac33:	0f 85 17 09 00 00    	jne    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001ac39:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac3d:	80 fa 03             	cmp    dl,0x3
c001ac40:	0f 85 c2 06 00 00    	jne    c001b308 <Vm::x87Handler(regs*)+0x8ca>
c001ac46:	e8 a0 fd ff ff       	call   c001a9eb <Vm::fpuPop()>
c001ac4b:	55                   	push   ebp
c001ac4c:	55                   	push   ebp
c001ac4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac50:	52                   	push   edx
c001ac51:	50                   	push   eax
c001ac52:	e8 2e fa ff ff       	call   c001a685 <Vm::fpuFloatToLong(unsigned long long)>
c001ac57:	90                   	nop
c001ac58:	83 c4 10             	add    esp,0x10
c001ac5b:	89 06                	mov    DWORD PTR [esi],eax
c001ac5d:	eb 69                	jmp    c001acc8 <Vm::x87Handler(regs*)+0x28a>
c001ac5f:	90                   	nop
c001ac60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac64:	84 d2                	test   dl,dl
c001ac66:	0f 85 2c 06 00 00    	jne    c001b298 <Vm::x87Handler(regs*)+0x85a>
c001ac6c:	57                   	push   edi
c001ac6d:	57                   	push   edi
c001ac6e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac71:	ff 36                	push   DWORD PTR [esi]
c001ac73:	e8 04 fa ff ff       	call   c001a67c <Vm::fpu64ToInternal(unsigned long long)>
c001ac78:	5e                   	pop    esi
c001ac79:	5f                   	pop    edi
c001ac7a:	52                   	push   edx
c001ac7b:	50                   	push   eax
c001ac7c:	e8 0c fd ff ff       	call   c001a98d <Vm::fpuPush(unsigned long long)>
c001ac81:	8d 76 00             	lea    esi,[esi+0x0]
c001ac84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac88:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ac8b:	e9 2c fe ff ff       	jmp    c001aabc <Vm::x87Handler(regs*)+0x7e>
c001ac90:	80 fa 03             	cmp    dl,0x3
c001ac93:	0f 85 2b 07 00 00    	jne    c001b3c4 <Vm::x87Handler(regs*)+0x986>
c001ac99:	57                   	push   edi
c001ac9a:	57                   	push   edi
c001ac9b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac9e:	ff 36                	push   DWORD PTR [esi]
c001aca0:	e8 d7 f9 ff ff       	call   c001a67c <Vm::fpu64ToInternal(unsigned long long)>
c001aca5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acac:	89 c6                	mov    esi,eax
c001acae:	89 d7                	mov    edi,edx
c001acb0:	e8 49 fc ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001acb5:	57                   	push   edi
c001acb6:	56                   	push   esi
c001acb7:	52                   	push   edx
c001acb8:	50                   	push   eax
c001acb9:	e8 60 fb ff ff       	call   c001a81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001acbe:	83 c4 20             	add    esp,0x20
c001acc1:	e8 25 fd ff ff       	call   c001a9eb <Vm::fpuPop()>
c001acc6:	66 90                	xchg   ax,ax
c001acc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001accc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001accf:	e9 ec fd ff ff       	jmp    c001aac0 <Vm::x87Handler(regs*)+0x82>
c001acd4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001acd8:	8d 50 40             	lea    edx,[eax+0x40]
c001acdb:	80 fa 07             	cmp    dl,0x7
c001acde:	77 2c                	ja     c001ad0c <Vm::x87Handler(regs*)+0x2ce>
c001ace0:	83 ec 0c             	sub    esp,0xc
c001ace3:	2d c0 00 00 00       	sub    eax,0xc0
c001ace8:	50                   	push   eax
c001ace9:	e8 10 fc ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001acee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acf5:	89 c6                	mov    esi,eax
c001acf7:	89 d7                	mov    edi,edx
c001acf9:	e8 00 fc ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001acfe:	57                   	push   edi
c001acff:	56                   	push   esi
c001ad00:	52                   	push   edx
c001ad01:	50                   	push   eax
c001ad02:	e8 6d fb ff ff       	call   c001a874 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ad07:	eb 33                	jmp    c001ad3c <Vm::x87Handler(regs*)+0x2fe>
c001ad09:	8d 76 00             	lea    esi,[esi+0x0]
c001ad0c:	8d 50 38             	lea    edx,[eax+0x38]
c001ad0f:	80 fa 07             	cmp    dl,0x7
c001ad12:	77 30                	ja     c001ad44 <Vm::x87Handler(regs*)+0x306>
c001ad14:	83 ec 0c             	sub    esp,0xc
c001ad17:	2d c8 00 00 00       	sub    eax,0xc8
c001ad1c:	50                   	push   eax
c001ad1d:	e8 dc fb ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ad22:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad29:	89 c6                	mov    esi,eax
c001ad2b:	89 d7                	mov    edi,edx
c001ad2d:	e8 cc fb ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ad32:	57                   	push   edi
c001ad33:	56                   	push   esi
c001ad34:	52                   	push   edx
c001ad35:	50                   	push   eax
c001ad36:	e8 72 fb ff ff       	call   c001a8ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ad3b:	90                   	nop
c001ad3c:	83 c4 1c             	add    esp,0x1c
c001ad3f:	e9 b4 fd ff ff       	jmp    c001aaf8 <Vm::x87Handler(regs*)+0xba>
c001ad44:	8d 50 30             	lea    edx,[eax+0x30]
c001ad47:	80 fa 07             	cmp    dl,0x7
c001ad4a:	77 10                	ja     c001ad5c <Vm::x87Handler(regs*)+0x31e>
c001ad4c:	83 ec 0c             	sub    esp,0xc
c001ad4f:	2d d0 00 00 00       	sub    eax,0xd0
c001ad54:	e9 c3 03 00 00       	jmp    c001b11c <Vm::x87Handler(regs*)+0x6de>
c001ad59:	8d 76 00             	lea    esi,[esi+0x0]
c001ad5c:	8d 50 28             	lea    edx,[eax+0x28]
c001ad5f:	80 fa 07             	cmp    dl,0x7
c001ad62:	77 10                	ja     c001ad74 <Vm::x87Handler(regs*)+0x336>
c001ad64:	83 ec 0c             	sub    esp,0xc
c001ad67:	2d d8 00 00 00       	sub    eax,0xd8
c001ad6c:	e9 e7 03 00 00       	jmp    c001b158 <Vm::x87Handler(regs*)+0x71a>
c001ad71:	8d 76 00             	lea    esi,[esi+0x0]
c001ad74:	8d 50 20             	lea    edx,[eax+0x20]
c001ad77:	80 fa 07             	cmp    dl,0x7
c001ad7a:	77 1c                	ja     c001ad98 <Vm::x87Handler(regs*)+0x35a>
c001ad7c:	83 ec 0c             	sub    esp,0xc
c001ad7f:	2d e0 00 00 00       	sub    eax,0xe0
c001ad84:	50                   	push   eax
c001ad85:	e8 74 fb ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ad8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad91:	89 c6                	mov    esi,eax
c001ad93:	89 d7                	mov    edi,edx
c001ad95:	eb 25                	jmp    c001adbc <Vm::x87Handler(regs*)+0x37e>
c001ad97:	90                   	nop
c001ad98:	8d 50 18             	lea    edx,[eax+0x18]
c001ad9b:	80 fa 07             	cmp    dl,0x7
c001ad9e:	77 30                	ja     c001add0 <Vm::x87Handler(regs*)+0x392>
c001ada0:	83 ec 0c             	sub    esp,0xc
c001ada3:	6a 00                	push   0x0
c001ada5:	e8 54 fb ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001adaa:	89 c6                	mov    esi,eax
c001adac:	89 d7                	mov    edi,edx
c001adae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adb2:	2d e8 00 00 00       	sub    eax,0xe8
c001adb7:	89 04 24             	mov    DWORD PTR [esp],eax
c001adba:	66 90                	xchg   ax,ax
c001adbc:	e8 3d fb ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001adc1:	57                   	push   edi
c001adc2:	56                   	push   esi
c001adc3:	52                   	push   edx
c001adc4:	50                   	push   eax
c001adc5:	e8 d4 fa ff ff       	call   c001a89e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001adca:	e9 6d ff ff ff       	jmp    c001ad3c <Vm::x87Handler(regs*)+0x2fe>
c001adcf:	90                   	nop
c001add0:	8d 50 10             	lea    edx,[eax+0x10]
c001add3:	80 fa 07             	cmp    dl,0x7
c001add6:	77 1c                	ja     c001adf4 <Vm::x87Handler(regs*)+0x3b6>
c001add8:	83 ec 0c             	sub    esp,0xc
c001addb:	2d f0 00 00 00       	sub    eax,0xf0
c001ade0:	50                   	push   eax
c001ade1:	e8 18 fb ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ade6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aded:	89 c6                	mov    esi,eax
c001adef:	89 d7                	mov    edi,edx
c001adf1:	eb 25                	jmp    c001ae18 <Vm::x87Handler(regs*)+0x3da>
c001adf3:	90                   	nop
c001adf4:	3c f7                	cmp    al,0xf7
c001adf6:	0f 86 00 04 00 00    	jbe    c001b1fc <Vm::x87Handler(regs*)+0x7be>
c001adfc:	83 ec 0c             	sub    esp,0xc
c001adff:	6a 00                	push   0x0
c001ae01:	e8 f8 fa ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ae06:	89 c6                	mov    esi,eax
c001ae08:	89 d7                	mov    edi,edx
c001ae0a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae0e:	2d f8 00 00 00       	sub    eax,0xf8
c001ae13:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae16:	66 90                	xchg   ax,ax
c001ae18:	e8 e1 fa ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ae1d:	57                   	push   edi
c001ae1e:	56                   	push   esi
c001ae1f:	52                   	push   edx
c001ae20:	50                   	push   eax
c001ae21:	e8 a6 fa ff ff       	call   c001a8cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae26:	83 c4 1c             	add    esp,0x1c
c001ae29:	52                   	push   edx
c001ae2a:	50                   	push   eax
c001ae2b:	6a 00                	push   0x0
c001ae2d:	e9 6a 02 00 00       	jmp    c001b09c <Vm::x87Handler(regs*)+0x65e>
c001ae32:	66 90                	xchg   ax,ax
c001ae34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae38:	8d 50 40             	lea    edx,[eax+0x40]
c001ae3b:	80 fa 07             	cmp    dl,0x7
c001ae3e:	77 38                	ja     c001ae78 <Vm::x87Handler(regs*)+0x43a>
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	2d c0 00 00 00       	sub    eax,0xc0
c001ae48:	50                   	push   eax
c001ae49:	e8 b0 fa ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ae4e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae55:	89 c6                	mov    esi,eax
c001ae57:	89 d7                	mov    edi,edx
c001ae59:	e8 a0 fa ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ae5e:	57                   	push   edi
c001ae5f:	56                   	push   esi
c001ae60:	52                   	push   edx
c001ae61:	50                   	push   eax
c001ae62:	e8 0d fa ff ff       	call   c001a874 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ae67:	83 c4 1c             	add    esp,0x1c
c001ae6a:	52                   	push   edx
c001ae6b:	50                   	push   eax
c001ae6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae70:	2d c0 00 00 00       	sub    eax,0xc0
c001ae75:	eb 41                	jmp    c001aeb8 <Vm::x87Handler(regs*)+0x47a>
c001ae77:	90                   	nop
c001ae78:	8d 50 38             	lea    edx,[eax+0x38]
c001ae7b:	80 fa 07             	cmp    dl,0x7
c001ae7e:	77 40                	ja     c001aec0 <Vm::x87Handler(regs*)+0x482>
c001ae80:	83 ec 0c             	sub    esp,0xc
c001ae83:	2d c8 00 00 00       	sub    eax,0xc8
c001ae88:	50                   	push   eax
c001ae89:	e8 70 fa ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ae8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae95:	89 c6                	mov    esi,eax
c001ae97:	89 d7                	mov    edi,edx
c001ae99:	e8 60 fa ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001ae9e:	57                   	push   edi
c001ae9f:	56                   	push   esi
c001aea0:	52                   	push   edx
c001aea1:	50                   	push   eax
c001aea2:	e8 06 fa ff ff       	call   c001a8ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001aea7:	83 c4 1c             	add    esp,0x1c
c001aeaa:	52                   	push   edx
c001aeab:	50                   	push   eax
c001aeac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aeb0:	2d c8 00 00 00       	sub    eax,0xc8
c001aeb5:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb8:	50                   	push   eax
c001aeb9:	e9 42 fc ff ff       	jmp    c001ab00 <Vm::x87Handler(regs*)+0xc2>
c001aebe:	66 90                	xchg   ax,ax
c001aec0:	83 c0 18             	add    eax,0x18
c001aec3:	3c 07                	cmp    al,0x7
c001aec5:	0f 87 6d 04 00 00    	ja     c001b338 <Vm::x87Handler(regs*)+0x8fa>
c001aecb:	83 ec 0c             	sub    esp,0xc
c001aece:	6a 00                	push   0x0
c001aed0:	e8 29 fa ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001aed5:	89 c6                	mov    esi,eax
c001aed7:	89 d7                	mov    edi,edx
c001aed9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aedd:	2d e8 00 00 00       	sub    eax,0xe8
c001aee2:	89 04 24             	mov    DWORD PTR [esp],eax
c001aee5:	e8 14 fa ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001aeea:	57                   	push   edi
c001aeeb:	56                   	push   esi
c001aeec:	52                   	push   edx
c001aeed:	50                   	push   eax
c001aeee:	e8 ab f9 ff ff       	call   c001a89e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aef3:	83 c4 1c             	add    esp,0x1c
c001aef6:	52                   	push   edx
c001aef7:	50                   	push   eax
c001aef8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aefc:	2d e8 00 00 00       	sub    eax,0xe8
c001af01:	eb b5                	jmp    c001aeb8 <Vm::x87Handler(regs*)+0x47a>
c001af03:	90                   	nop
c001af04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af08:	8d 50 40             	lea    edx,[eax+0x40]
c001af0b:	80 fa 07             	cmp    dl,0x7
c001af0e:	77 3c                	ja     c001af4c <Vm::x87Handler(regs*)+0x50e>
c001af10:	83 ec 0c             	sub    esp,0xc
c001af13:	2d c0 00 00 00       	sub    eax,0xc0
c001af18:	50                   	push   eax
c001af19:	e8 e0 f9 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001af1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af25:	89 c6                	mov    esi,eax
c001af27:	89 d7                	mov    edi,edx
c001af29:	e8 d0 f9 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001af2e:	57                   	push   edi
c001af2f:	56                   	push   esi
c001af30:	52                   	push   edx
c001af31:	50                   	push   eax
c001af32:	e8 3d f9 ff ff       	call   c001a874 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001af37:	83 c4 1c             	add    esp,0x1c
c001af3a:	52                   	push   edx
c001af3b:	50                   	push   eax
c001af3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af40:	2d c0 00 00 00       	sub    eax,0xc0
c001af45:	e9 b2 01 00 00       	jmp    c001b0fc <Vm::x87Handler(regs*)+0x6be>
c001af4a:	66 90                	xchg   ax,ax
c001af4c:	8d 50 20             	lea    edx,[eax+0x20]
c001af4f:	80 fa 07             	cmp    dl,0x7
c001af52:	77 3c                	ja     c001af90 <Vm::x87Handler(regs*)+0x552>
c001af54:	83 ec 0c             	sub    esp,0xc
c001af57:	2d e0 00 00 00       	sub    eax,0xe0
c001af5c:	50                   	push   eax
c001af5d:	e8 9c f9 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001af62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af69:	89 c6                	mov    esi,eax
c001af6b:	89 d7                	mov    edi,edx
c001af6d:	e8 8c f9 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001af72:	57                   	push   edi
c001af73:	56                   	push   esi
c001af74:	52                   	push   edx
c001af75:	50                   	push   eax
c001af76:	e8 23 f9 ff ff       	call   c001a89e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001af7b:	83 c4 1c             	add    esp,0x1c
c001af7e:	52                   	push   edx
c001af7f:	50                   	push   eax
c001af80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af84:	2d e0 00 00 00       	sub    eax,0xe0
c001af89:	e9 6e 01 00 00       	jmp    c001b0fc <Vm::x87Handler(regs*)+0x6be>
c001af8e:	66 90                	xchg   ax,ax
c001af90:	8d 50 18             	lea    edx,[eax+0x18]
c001af93:	80 fa 07             	cmp    dl,0x7
c001af96:	77 3c                	ja     c001afd4 <Vm::x87Handler(regs*)+0x596>
c001af98:	83 ec 0c             	sub    esp,0xc
c001af9b:	6a 00                	push   0x0
c001af9d:	e8 5c f9 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001afa2:	89 c6                	mov    esi,eax
c001afa4:	89 d7                	mov    edi,edx
c001afa6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001afaa:	2d e8 00 00 00       	sub    eax,0xe8
c001afaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001afb2:	e8 47 f9 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001afb7:	57                   	push   edi
c001afb8:	56                   	push   esi
c001afb9:	52                   	push   edx
c001afba:	50                   	push   eax
c001afbb:	e8 de f8 ff ff       	call   c001a89e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001afc0:	83 c4 1c             	add    esp,0x1c
c001afc3:	52                   	push   edx
c001afc4:	50                   	push   eax
c001afc5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001afc9:	2d e8 00 00 00       	sub    eax,0xe8
c001afce:	e9 29 01 00 00       	jmp    c001b0fc <Vm::x87Handler(regs*)+0x6be>
c001afd3:	90                   	nop
c001afd4:	8d 50 38             	lea    edx,[eax+0x38]
c001afd7:	80 fa 07             	cmp    dl,0x7
c001afda:	77 3c                	ja     c001b018 <Vm::x87Handler(regs*)+0x5da>
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	2d c8 00 00 00       	sub    eax,0xc8
c001afe4:	50                   	push   eax
c001afe5:	e8 14 f9 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001afea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aff1:	89 c6                	mov    esi,eax
c001aff3:	89 d7                	mov    edi,edx
c001aff5:	e8 04 f9 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001affa:	57                   	push   edi
c001affb:	56                   	push   esi
c001affc:	52                   	push   edx
c001affd:	50                   	push   eax
c001affe:	e8 aa f8 ff ff       	call   c001a8ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b003:	83 c4 1c             	add    esp,0x1c
c001b006:	52                   	push   edx
c001b007:	50                   	push   eax
c001b008:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b00c:	2d c8 00 00 00       	sub    eax,0xc8
c001b011:	e9 82 00 00 00       	jmp    c001b098 <Vm::x87Handler(regs*)+0x65a>
c001b016:	66 90                	xchg   ax,ax
c001b018:	3c f7                	cmp    al,0xf7
c001b01a:	76 38                	jbe    c001b054 <Vm::x87Handler(regs*)+0x616>
c001b01c:	83 ec 0c             	sub    esp,0xc
c001b01f:	6a 00                	push   0x0
c001b021:	e8 d8 f8 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b026:	89 c6                	mov    esi,eax
c001b028:	89 d7                	mov    edi,edx
c001b02a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b02e:	2d f8 00 00 00       	sub    eax,0xf8
c001b033:	89 04 24             	mov    DWORD PTR [esp],eax
c001b036:	e8 c3 f8 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b03b:	57                   	push   edi
c001b03c:	56                   	push   esi
c001b03d:	52                   	push   edx
c001b03e:	50                   	push   eax
c001b03f:	e8 88 f8 ff ff       	call   c001a8cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b044:	83 c4 1c             	add    esp,0x1c
c001b047:	52                   	push   edx
c001b048:	50                   	push   eax
c001b049:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b04d:	2d f8 00 00 00       	sub    eax,0xf8
c001b052:	eb 44                	jmp    c001b098 <Vm::x87Handler(regs*)+0x65a>
c001b054:	8d 50 10             	lea    edx,[eax+0x10]
c001b057:	80 fa 07             	cmp    dl,0x7
c001b05a:	0f 87 6c 01 00 00    	ja     c001b1cc <Vm::x87Handler(regs*)+0x78e>
c001b060:	83 ec 0c             	sub    esp,0xc
c001b063:	2d f0 00 00 00       	sub    eax,0xf0
c001b068:	50                   	push   eax
c001b069:	e8 90 f8 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b06e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b075:	89 c6                	mov    esi,eax
c001b077:	89 d7                	mov    edi,edx
c001b079:	e8 80 f8 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b07e:	57                   	push   edi
c001b07f:	56                   	push   esi
c001b080:	52                   	push   edx
c001b081:	50                   	push   eax
c001b082:	e8 45 f8 ff ff       	call   c001a8cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b087:	83 c4 1c             	add    esp,0x1c
c001b08a:	52                   	push   edx
c001b08b:	50                   	push   eax
c001b08c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b090:	2d f0 00 00 00       	sub    eax,0xf0
c001b095:	8d 76 00             	lea    esi,[esi+0x0]
c001b098:	50                   	push   eax
c001b099:	8d 76 00             	lea    esi,[esi+0x0]
c001b09c:	e8 a0 f8 ff ff       	call   c001a941 <Vm::fpuSetReg(int, unsigned long long)>
c001b0a1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b0a5:	e8 41 f9 ff ff       	call   c001a9eb <Vm::fpuPop()>
c001b0aa:	e9 0d fa ff ff       	jmp    c001aabc <Vm::x87Handler(regs*)+0x7e>
c001b0af:	90                   	nop
c001b0b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0b4:	8d 50 30             	lea    edx,[eax+0x30]
c001b0b7:	80 fa 07             	cmp    dl,0x7
c001b0ba:	77 20                	ja     c001b0dc <Vm::x87Handler(regs*)+0x69e>
c001b0bc:	83 ec 0c             	sub    esp,0xc
c001b0bf:	6a 00                	push   0x0
c001b0c1:	e8 38 f8 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b0c6:	83 c4 0c             	add    esp,0xc
c001b0c9:	52                   	push   edx
c001b0ca:	50                   	push   eax
c001b0cb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0cf:	2d d0 00 00 00       	sub    eax,0xd0
c001b0d4:	e9 df fd ff ff       	jmp    c001aeb8 <Vm::x87Handler(regs*)+0x47a>
c001b0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0dc:	8d 50 28             	lea    edx,[eax+0x28]
c001b0df:	80 fa 07             	cmp    dl,0x7
c001b0e2:	77 28                	ja     c001b10c <Vm::x87Handler(regs*)+0x6ce>
c001b0e4:	83 ec 0c             	sub    esp,0xc
c001b0e7:	6a 00                	push   0x0
c001b0e9:	e8 10 f8 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b0ee:	83 c4 0c             	add    esp,0xc
c001b0f1:	52                   	push   edx
c001b0f2:	50                   	push   eax
c001b0f3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0f7:	2d d8 00 00 00       	sub    eax,0xd8
c001b0fc:	50                   	push   eax
c001b0fd:	e8 3f f8 ff ff       	call   c001a941 <Vm::fpuSetReg(int, unsigned long long)>
c001b102:	e8 e4 f8 ff ff       	call   c001a9eb <Vm::fpuPop()>
c001b107:	e9 ac f9 ff ff       	jmp    c001aab8 <Vm::x87Handler(regs*)+0x7a>
c001b10c:	8d 50 20             	lea    edx,[eax+0x20]
c001b10f:	80 fa 07             	cmp    dl,0x7
c001b112:	77 30                	ja     c001b144 <Vm::x87Handler(regs*)+0x706>
c001b114:	83 ec 0c             	sub    esp,0xc
c001b117:	2d e0 00 00 00       	sub    eax,0xe0
c001b11c:	50                   	push   eax
c001b11d:	e8 dc f7 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b122:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b129:	89 c6                	mov    esi,eax
c001b12b:	89 d7                	mov    edi,edx
c001b12d:	e8 cc f7 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b132:	57                   	push   edi
c001b133:	56                   	push   esi
c001b134:	52                   	push   edx
c001b135:	50                   	push   eax
c001b136:	e8 e3 f6 ff ff       	call   c001a81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b13b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b13f:	e9 78 02 00 00       	jmp    c001b3bc <Vm::x87Handler(regs*)+0x97e>
c001b144:	8d 50 18             	lea    edx,[eax+0x18]
c001b147:	80 fa 07             	cmp    dl,0x7
c001b14a:	0f 87 10 fb ff ff    	ja     c001ac60 <Vm::x87Handler(regs*)+0x222>
c001b150:	83 ec 0c             	sub    esp,0xc
c001b153:	2d e8 00 00 00       	sub    eax,0xe8
c001b158:	50                   	push   eax
c001b159:	e8 a0 f7 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b15e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b165:	89 c6                	mov    esi,eax
c001b167:	89 d7                	mov    edi,edx
c001b169:	e8 90 f7 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b16e:	57                   	push   edi
c001b16f:	56                   	push   esi
c001b170:	52                   	push   edx
c001b171:	50                   	push   eax
c001b172:	e8 a7 f6 ff ff       	call   c001a81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b177:	83 c4 20             	add    esp,0x20
c001b17a:	e8 6c f8 ff ff       	call   c001a9eb <Vm::fpuPop()>
c001b17f:	eb 6f                	jmp    c001b1f0 <Vm::x87Handler(regs*)+0x7b2>
c001b181:	8d 76 00             	lea    esi,[esi+0x0]
c001b184:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001b188:	0f 85 22 01 00 00    	jne    c001b2b0 <Vm::x87Handler(regs*)+0x872>
c001b18e:	66 90                	xchg   ax,ax
c001b190:	83 ec 0c             	sub    esp,0xc
c001b193:	6a 01                	push   0x1
c001b195:	e8 64 f7 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b19a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1a1:	89 c6                	mov    esi,eax
c001b1a3:	89 d7                	mov    edi,edx
c001b1a5:	e8 54 f7 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b1aa:	57                   	push   edi
c001b1ab:	56                   	push   esi
c001b1ac:	52                   	push   edx
c001b1ad:	50                   	push   eax
c001b1ae:	e8 6b f6 ff ff       	call   c001a81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1b3:	83 c4 20             	add    esp,0x20
c001b1b6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b1ba:	e8 2c f8 ff ff       	call   c001a9eb <Vm::fpuPop()>
c001b1bf:	e8 27 f8 ff ff       	call   c001a9eb <Vm::fpuPop()>
c001b1c4:	e9 f7 f8 ff ff       	jmp    c001aac0 <Vm::x87Handler(regs*)+0x82>
c001b1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1cc:	3c d9                	cmp    al,0xd9
c001b1ce:	0f 85 e8 02 00 00    	jne    c001b4bc <Vm::x87Handler(regs*)+0xa7e>
c001b1d4:	eb ba                	jmp    c001b190 <Vm::x87Handler(regs*)+0x752>
c001b1d6:	66 90                	xchg   ax,ax
c001b1d8:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001b1dc:	0f 85 2a 03 00 00    	jne    c001b50c <Vm::x87Handler(regs*)+0xace>
c001b1e2:	0f b7 05 80 a1 02 c0 	movzx  eax,WORD PTR ds:0xc002a180
c001b1e9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b1f4:	e9 c7 f8 ff ff       	jmp    c001aac0 <Vm::x87Handler(regs*)+0x82>
c001b1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1fc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b200:	84 d2                	test   dl,dl
c001b202:	75 10                	jne    c001b214 <Vm::x87Handler(regs*)+0x7d6>
c001b204:	83 ec 0c             	sub    esp,0xc
c001b207:	ff 36                	push   DWORD PTR [esi]
c001b209:	e8 29 f4 ff ff       	call   c001a637 <Vm::fpu32ToInternal(unsigned int)>
c001b20e:	e9 39 01 00 00       	jmp    c001b34c <Vm::x87Handler(regs*)+0x90e>
c001b213:	90                   	nop
c001b214:	80 fa 01             	cmp    dl,0x1
c001b217:	75 0f                	jne    c001b228 <Vm::x87Handler(regs*)+0x7ea>
c001b219:	83 ec 0c             	sub    esp,0xc
c001b21c:	ff 36                	push   DWORD PTR [esi]
c001b21e:	e8 14 f4 ff ff       	call   c001a637 <Vm::fpu32ToInternal(unsigned int)>
c001b223:	e9 b4 02 00 00       	jmp    c001b4dc <Vm::x87Handler(regs*)+0xa9e>
c001b228:	80 fa 04             	cmp    dl,0x4
c001b22b:	75 0f                	jne    c001b23c <Vm::x87Handler(regs*)+0x7fe>
c001b22d:	83 ec 0c             	sub    esp,0xc
c001b230:	ff 36                	push   DWORD PTR [esi]
c001b232:	e8 00 f4 ff ff       	call   c001a637 <Vm::fpu32ToInternal(unsigned int)>
c001b237:	e9 9c 01 00 00       	jmp    c001b3d8 <Vm::x87Handler(regs*)+0x99a>
c001b23c:	80 fa 05             	cmp    dl,0x5
c001b23f:	75 1b                	jne    c001b25c <Vm::x87Handler(regs*)+0x81e>
c001b241:	83 ec 0c             	sub    esp,0xc
c001b244:	6a 00                	push   0x0
c001b246:	e8 b3 f6 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b24b:	89 c7                	mov    edi,eax
c001b24d:	89 d5                	mov    ebp,edx
c001b24f:	58                   	pop    eax
c001b250:	ff 36                	push   DWORD PTR [esi]
c001b252:	e8 e0 f3 ff ff       	call   c001a637 <Vm::fpu32ToInternal(unsigned int)>
c001b257:	e9 bc 01 00 00       	jmp    c001b418 <Vm::x87Handler(regs*)+0x9da>
c001b25c:	80 fa 06             	cmp    dl,0x6
c001b25f:	75 0f                	jne    c001b270 <Vm::x87Handler(regs*)+0x832>
c001b261:	83 ec 0c             	sub    esp,0xc
c001b264:	ff 36                	push   DWORD PTR [esi]
c001b266:	e8 cc f3 ff ff       	call   c001a637 <Vm::fpu32ToInternal(unsigned int)>
c001b26b:	e9 cc 01 00 00       	jmp    c001b43c <Vm::x87Handler(regs*)+0x9fe>
c001b270:	31 c0                	xor    eax,eax
c001b272:	80 fa 07             	cmp    dl,0x7
c001b275:	0f 85 d5 02 00 00    	jne    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001b27b:	83 ec 0c             	sub    esp,0xc
c001b27e:	6a 00                	push   0x0
c001b280:	e8 79 f6 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b285:	89 c7                	mov    edi,eax
c001b287:	89 d5                	mov    ebp,edx
c001b289:	58                   	pop    eax
c001b28a:	ff 36                	push   DWORD PTR [esi]
c001b28c:	e8 a6 f3 ff ff       	call   c001a637 <Vm::fpu32ToInternal(unsigned int)>
c001b291:	e9 ee 01 00 00       	jmp    c001b484 <Vm::x87Handler(regs*)+0xa46>
c001b296:	66 90                	xchg   ax,ax
c001b298:	80 fa 03             	cmp    dl,0x3
c001b29b:	0f 85 f7 01 00 00    	jne    c001b498 <Vm::x87Handler(regs*)+0xa5a>
c001b2a1:	e8 45 f7 ff ff       	call   c001a9eb <Vm::fpuPop()>
c001b2a6:	51                   	push   ecx
c001b2a7:	51                   	push   ecx
c001b2a8:	e9 03 02 00 00       	jmp    c001b4b0 <Vm::x87Handler(regs*)+0xa72>
c001b2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b2b0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b2b4:	80 fa 01             	cmp    dl,0x1
c001b2b7:	75 0b                	jne    c001b2c4 <Vm::x87Handler(regs*)+0x886>
c001b2b9:	57                   	push   edi
c001b2ba:	57                   	push   edi
c001b2bb:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2bd:	e9 0e 02 00 00       	jmp    c001b4d0 <Vm::x87Handler(regs*)+0xa92>
c001b2c2:	66 90                	xchg   ax,ax
c001b2c4:	80 fa 04             	cmp    dl,0x4
c001b2c7:	75 13                	jne    c001b2dc <Vm::x87Handler(regs*)+0x89e>
c001b2c9:	31 d2                	xor    edx,edx
c001b2cb:	51                   	push   ecx
c001b2cc:	51                   	push   ecx
c001b2cd:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2cf:	52                   	push   edx
c001b2d0:	50                   	push   eax
c001b2d1:	e8 4a f4 ff ff       	call   c001a720 <Vm::fpuLongToFloat(long long)>
c001b2d6:	e9 fd 00 00 00       	jmp    c001b3d8 <Vm::x87Handler(regs*)+0x99a>
c001b2db:	90                   	nop
c001b2dc:	31 c0                	xor    eax,eax
c001b2de:	80 fa 07             	cmp    dl,0x7
c001b2e1:	0f 85 69 02 00 00    	jne    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001b2e7:	83 ec 0c             	sub    esp,0xc
c001b2ea:	6a 00                	push   0x0
c001b2ec:	e8 0d f6 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b2f1:	89 c7                	mov    edi,eax
c001b2f3:	89 d5                	mov    ebp,edx
c001b2f5:	58                   	pop    eax
c001b2f6:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2f8:	5a                   	pop    edx
c001b2f9:	31 d2                	xor    edx,edx
c001b2fb:	52                   	push   edx
c001b2fc:	50                   	push   eax
c001b2fd:	e8 1e f4 ff ff       	call   c001a720 <Vm::fpuLongToFloat(long long)>
c001b302:	e9 7d 01 00 00       	jmp    c001b484 <Vm::x87Handler(regs*)+0xa46>
c001b307:	90                   	nop
c001b308:	84 d2                	test   dl,dl
c001b30a:	75 10                	jne    c001b31c <Vm::x87Handler(regs*)+0x8de>
c001b30c:	31 d2                	xor    edx,edx
c001b30e:	55                   	push   ebp
c001b30f:	55                   	push   ebp
c001b310:	8b 06                	mov    eax,DWORD PTR [esi]
c001b312:	52                   	push   edx
c001b313:	50                   	push   eax
c001b314:	e9 03 02 00 00       	jmp    c001b51c <Vm::x87Handler(regs*)+0xade>
c001b319:	8d 76 00             	lea    esi,[esi+0x0]
c001b31c:	31 c0                	xor    eax,eax
c001b31e:	80 fa 02             	cmp    dl,0x2
c001b321:	0f 85 29 02 00 00    	jne    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001b327:	83 ec 0c             	sub    esp,0xc
c001b32a:	6a 00                	push   0x0
c001b32c:	e8 cd f5 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b331:	59                   	pop    ecx
c001b332:	5f                   	pop    edi
c001b333:	e9 18 f9 ff ff       	jmp    c001ac50 <Vm::x87Handler(regs*)+0x212>
c001b338:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b33c:	84 d2                	test   dl,dl
c001b33e:	75 2c                	jne    c001b36c <Vm::x87Handler(regs*)+0x92e>
c001b340:	50                   	push   eax
c001b341:	50                   	push   eax
c001b342:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b345:	ff 36                	push   DWORD PTR [esi]
c001b347:	e8 30 f3 ff ff       	call   c001a67c <Vm::fpu64ToInternal(unsigned long long)>
c001b34c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b353:	89 c6                	mov    esi,eax
c001b355:	89 d7                	mov    edi,edx
c001b357:	e8 a2 f5 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b35c:	57                   	push   edi
c001b35d:	56                   	push   esi
c001b35e:	52                   	push   edx
c001b35f:	50                   	push   eax
c001b360:	e8 0f f5 ff ff       	call   c001a874 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b365:	e9 8e 01 00 00       	jmp    c001b4f8 <Vm::x87Handler(regs*)+0xaba>
c001b36a:	66 90                	xchg   ax,ax
c001b36c:	80 fa 01             	cmp    dl,0x1
c001b36f:	75 13                	jne    c001b384 <Vm::x87Handler(regs*)+0x946>
c001b371:	50                   	push   eax
c001b372:	50                   	push   eax
c001b373:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b376:	ff 36                	push   DWORD PTR [esi]
c001b378:	e8 ff f2 ff ff       	call   c001a67c <Vm::fpu64ToInternal(unsigned long long)>
c001b37d:	e9 5a 01 00 00       	jmp    c001b4dc <Vm::x87Handler(regs*)+0xa9e>
c001b382:	66 90                	xchg   ax,ax
c001b384:	80 fa 02             	cmp    dl,0x2
c001b387:	0f 85 03 f9 ff ff    	jne    c001ac90 <Vm::x87Handler(regs*)+0x252>
c001b38d:	55                   	push   ebp
c001b38e:	55                   	push   ebp
c001b38f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b392:	ff 36                	push   DWORD PTR [esi]
c001b394:	e8 e3 f2 ff ff       	call   c001a67c <Vm::fpu64ToInternal(unsigned long long)>
c001b399:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b3a0:	89 c6                	mov    esi,eax
c001b3a2:	89 d7                	mov    edi,edx
c001b3a4:	e8 55 f5 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b3a9:	57                   	push   edi
c001b3aa:	56                   	push   esi
c001b3ab:	52                   	push   edx
c001b3ac:	50                   	push   eax
c001b3ad:	e8 6c f4 ff ff       	call   c001a81e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b3b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3b6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3bc:	83 c4 20             	add    esp,0x20
c001b3bf:	e9 fc f6 ff ff       	jmp    c001aac0 <Vm::x87Handler(regs*)+0x82>
c001b3c4:	80 fa 04             	cmp    dl,0x4
c001b3c7:	75 2f                	jne    c001b3f8 <Vm::x87Handler(regs*)+0x9ba>
c001b3c9:	51                   	push   ecx
c001b3ca:	51                   	push   ecx
c001b3cb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3ce:	ff 36                	push   DWORD PTR [esi]
c001b3d0:	e8 a7 f2 ff ff       	call   c001a67c <Vm::fpu64ToInternal(unsigned long long)>
c001b3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b3d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b3df:	89 c6                	mov    esi,eax
c001b3e1:	89 d7                	mov    edi,edx
c001b3e3:	e8 16 f5 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b3e8:	57                   	push   edi
c001b3e9:	56                   	push   esi
c001b3ea:	52                   	push   edx
c001b3eb:	50                   	push   eax
c001b3ec:	e8 ad f4 ff ff       	call   c001a89e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b3f1:	e9 02 01 00 00       	jmp    c001b4f8 <Vm::x87Handler(regs*)+0xaba>
c001b3f6:	66 90                	xchg   ax,ax
c001b3f8:	80 fa 05             	cmp    dl,0x5
c001b3fb:	75 2b                	jne    c001b428 <Vm::x87Handler(regs*)+0x9ea>
c001b3fd:	83 ec 0c             	sub    esp,0xc
c001b400:	6a 00                	push   0x0
c001b402:	e8 f7 f4 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b407:	89 c7                	mov    edi,eax
c001b409:	89 d5                	mov    ebp,edx
c001b40b:	58                   	pop    eax
c001b40c:	5a                   	pop    edx
c001b40d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b410:	ff 36                	push   DWORD PTR [esi]
c001b412:	e8 65 f2 ff ff       	call   c001a67c <Vm::fpu64ToInternal(unsigned long long)>
c001b417:	90                   	nop
c001b418:	83 c4 10             	add    esp,0x10
c001b41b:	55                   	push   ebp
c001b41c:	57                   	push   edi
c001b41d:	52                   	push   edx
c001b41e:	50                   	push   eax
c001b41f:	e8 7a f4 ff ff       	call   c001a89e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b424:	eb 6a                	jmp    c001b490 <Vm::x87Handler(regs*)+0xa52>
c001b426:	66 90                	xchg   ax,ax
c001b428:	80 fa 06             	cmp    dl,0x6
c001b42b:	75 2f                	jne    c001b45c <Vm::x87Handler(regs*)+0xa1e>
c001b42d:	51                   	push   ecx
c001b42e:	51                   	push   ecx
c001b42f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b432:	ff 36                	push   DWORD PTR [esi]
c001b434:	e8 43 f2 ff ff       	call   c001a67c <Vm::fpu64ToInternal(unsigned long long)>
c001b439:	8d 76 00             	lea    esi,[esi+0x0]
c001b43c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b443:	89 c6                	mov    esi,eax
c001b445:	89 d7                	mov    edi,edx
c001b447:	e8 b2 f4 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b44c:	57                   	push   edi
c001b44d:	56                   	push   esi
c001b44e:	52                   	push   edx
c001b44f:	50                   	push   eax
c001b450:	e8 77 f4 ff ff       	call   c001a8cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b455:	e9 9e 00 00 00       	jmp    c001b4f8 <Vm::x87Handler(regs*)+0xaba>
c001b45a:	66 90                	xchg   ax,ax
c001b45c:	31 c0                	xor    eax,eax
c001b45e:	80 fa 07             	cmp    dl,0x7
c001b461:	0f 85 e9 00 00 00    	jne    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001b467:	83 ec 0c             	sub    esp,0xc
c001b46a:	6a 00                	push   0x0
c001b46c:	e8 8d f4 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b471:	89 c7                	mov    edi,eax
c001b473:	89 d5                	mov    ebp,edx
c001b475:	58                   	pop    eax
c001b476:	5a                   	pop    edx
c001b477:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b47a:	ff 36                	push   DWORD PTR [esi]
c001b47c:	e8 fb f1 ff ff       	call   c001a67c <Vm::fpu64ToInternal(unsigned long long)>
c001b481:	8d 76 00             	lea    esi,[esi+0x0]
c001b484:	83 c4 10             	add    esp,0x10
c001b487:	55                   	push   ebp
c001b488:	57                   	push   edi
c001b489:	52                   	push   edx
c001b48a:	50                   	push   eax
c001b48b:	e8 3c f4 ff ff       	call   c001a8cc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b490:	83 c4 0c             	add    esp,0xc
c001b493:	eb 67                	jmp    c001b4fc <Vm::x87Handler(regs*)+0xabe>
c001b495:	8d 76 00             	lea    esi,[esi+0x0]
c001b498:	31 c0                	xor    eax,eax
c001b49a:	80 fa 02             	cmp    dl,0x2
c001b49d:	0f 85 ad 00 00 00    	jne    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001b4a3:	83 ec 0c             	sub    esp,0xc
c001b4a6:	6a 00                	push   0x0
c001b4a8:	e8 51 f4 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b4ad:	59                   	pop    ecx
c001b4ae:	5f                   	pop    edi
c001b4af:	90                   	nop
c001b4b0:	52                   	push   edx
c001b4b1:	50                   	push   eax
c001b4b2:	e8 77 f1 ff ff       	call   c001a62e <Vm::fpuInternalTo64(unsigned long long)>
c001b4b7:	e9 84 00 00 00       	jmp    c001b540 <Vm::x87Handler(regs*)+0xb02>
c001b4bc:	31 c0                	xor    eax,eax
c001b4be:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b4c3:	0f 85 87 00 00 00    	jne    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001b4c9:	50                   	push   eax
c001b4ca:	50                   	push   eax
c001b4cb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b4ce:	66 90                	xchg   ax,ax
c001b4d0:	31 d2                	xor    edx,edx
c001b4d2:	52                   	push   edx
c001b4d3:	50                   	push   eax
c001b4d4:	e8 47 f2 ff ff       	call   c001a720 <Vm::fpuLongToFloat(long long)>
c001b4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b4e3:	89 c6                	mov    esi,eax
c001b4e5:	89 d7                	mov    edi,edx
c001b4e7:	e8 12 f4 ff ff       	call   c001a8fe <Vm::fpuGetReg(int)>
c001b4ec:	57                   	push   edi
c001b4ed:	56                   	push   esi
c001b4ee:	52                   	push   edx
c001b4ef:	50                   	push   eax
c001b4f0:	e8 b8 f3 ff ff       	call   c001a8ad <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f8:	83 c4 1c             	add    esp,0x1c
c001b4fb:	90                   	nop
c001b4fc:	52                   	push   edx
c001b4fd:	50                   	push   eax
c001b4fe:	6a 00                	push   0x0
c001b500:	e8 3c f4 ff ff       	call   c001a941 <Vm::fpuSetReg(int, unsigned long long)>
c001b505:	e9 7a f7 ff ff       	jmp    c001ac84 <Vm::x87Handler(regs*)+0x246>
c001b50a:	66 90                	xchg   ax,ax
c001b50c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b510:	80 fa 05             	cmp    dl,0x5
c001b513:	75 13                	jne    c001b528 <Vm::x87Handler(regs*)+0xaea>
c001b515:	55                   	push   ebp
c001b516:	55                   	push   ebp
c001b517:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b51a:	ff 36                	push   DWORD PTR [esi]
c001b51c:	e8 c3 f1 ff ff       	call   c001a6e4 <Vm::fpuULongToFloat(unsigned long long)>
c001b521:	e9 52 f7 ff ff       	jmp    c001ac78 <Vm::x87Handler(regs*)+0x23a>
c001b526:	66 90                	xchg   ax,ax
c001b528:	31 c0                	xor    eax,eax
c001b52a:	80 fa 07             	cmp    dl,0x7
c001b52d:	75 21                	jne    c001b550 <Vm::x87Handler(regs*)+0xb12>
c001b52f:	e8 b7 f4 ff ff       	call   c001a9eb <Vm::fpuPop()>
c001b534:	51                   	push   ecx
c001b535:	51                   	push   ecx
c001b536:	52                   	push   edx
c001b537:	50                   	push   eax
c001b538:	e8 48 f1 ff ff       	call   c001a685 <Vm::fpuFloatToLong(unsigned long long)>
c001b53d:	8d 76 00             	lea    esi,[esi+0x0]
c001b540:	83 c4 10             	add    esp,0x10
c001b543:	89 06                	mov    DWORD PTR [esi],eax
c001b545:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b548:	e9 7b f7 ff ff       	jmp    c001acc8 <Vm::x87Handler(regs*)+0x28a>
c001b54d:	8d 76 00             	lea    esi,[esi+0x0]
c001b550:	83 c4 1c             	add    esp,0x1c
c001b553:	5b                   	pop    ebx
c001b554:	5e                   	pop    esi
c001b555:	5f                   	pop    edi
c001b556:	5d                   	pop    ebp
c001b557:	c3                   	ret    

c001b558 <__static_initialization_and_destruction_0(int, int)>:
c001b558:	83 ec 0c             	sub    esp,0xc
c001b55b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b560:	75 1a                	jne    c001b57c <__static_initialization_and_destruction_0(int, int)+0x24>
c001b562:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b56a:	75 10                	jne    c001b57c <__static_initialization_and_destruction_0(int, int)+0x24>
c001b56c:	83 ec 0c             	sub    esp,0xc
c001b56f:	68 80 a1 02 c0       	push   0xc002a180
c001b574:	e8 cb 83 00 00       	call   c0023944 <Vm::_FPUState::_FPUState()>
c001b579:	83 c4 10             	add    esp,0x10
c001b57c:	90                   	nop
c001b57d:	83 c4 0c             	add    esp,0xc
c001b580:	c3                   	ret    
c001b581:	8d 76 00             	lea    esi,[esi+0x0]

c001b584 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b584:	83 ec 0c             	sub    esp,0xc
c001b587:	83 ec 08             	sub    esp,0x8
c001b58a:	68 ff ff 00 00       	push   0xffff
c001b58f:	6a 01                	push   0x1
c001b591:	e8 c2 ff ff ff       	call   c001b558 <__static_initialization_and_destruction_0(int, int)>
c001b596:	83 c4 10             	add    esp,0x10
c001b599:	83 c4 0c             	add    esp,0xc
c001b59c:	c3                   	ret    
c001b59d:	66 90                	xchg   ax,ax
c001b59f:	90                   	nop

c001b5a0 <FAT::getName()>:
c001b5a0:	b8 90 6f 02 c0       	mov    eax,0xc0026f90
c001b5a5:	c3                   	ret    
c001b5a6:	66 90                	xchg   ax,ax

c001b5a8 <FAT::tell(void*, unsigned long long*)>:
c001b5a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b5ad:	75 09                	jne    c001b5b8 <FAT::tell(void*, unsigned long long*)+0x10>
c001b5af:	b8 04 00 00 00       	mov    eax,0x4
c001b5b4:	c3                   	ret    
c001b5b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b5bd:	75 09                	jne    c001b5c8 <FAT::tell(void*, unsigned long long*)+0x20>
c001b5bf:	b8 04 00 00 00       	mov    eax,0x4
c001b5c4:	c3                   	ret    
c001b5c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5cc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b5cf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b5d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b5d6:	89 01                	mov    DWORD PTR [ecx],eax
c001b5d8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b5db:	b8 00 00 00 00       	mov    eax,0x0
c001b5e0:	c3                   	ret    
c001b5e1:	90                   	nop
c001b5e2:	66 90                	xchg   ax,ax

c001b5e4 <FAT::stat(void*, unsigned long long*)>:
c001b5e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b5e9:	75 09                	jne    c001b5f4 <FAT::stat(void*, unsigned long long*)+0x10>
c001b5eb:	b8 04 00 00 00       	mov    eax,0x4
c001b5f0:	c3                   	ret    
c001b5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b5f9:	75 09                	jne    c001b604 <FAT::stat(void*, unsigned long long*)+0x20>
c001b5fb:	b8 04 00 00 00       	mov    eax,0x4
c001b600:	c3                   	ret    
c001b601:	8d 76 00             	lea    esi,[esi+0x0]
c001b604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b608:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b60b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b60e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b612:	89 01                	mov    DWORD PTR [ecx],eax
c001b614:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b617:	b8 00 00 00 00       	mov    eax,0x0
c001b61c:	c3                   	ret    
c001b61d:	90                   	nop
c001b61e:	66 90                	xchg   ax,ax

c001b620 <FAT::~FAT()>:
c001b620:	83 ec 0c             	sub    esp,0xc
c001b623:	ba dc 6f 02 c0       	mov    edx,0xc0026fdc
c001b628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62c:	89 10                	mov    DWORD PTR [eax],edx
c001b62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b632:	83 ec 0c             	sub    esp,0xc
c001b635:	50                   	push   eax
c001b636:	e8 c7 1d ff ff       	call   c000d402 <Filesystem::~Filesystem()>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	90                   	nop
c001b63f:	83 c4 0c             	add    esp,0xc
c001b642:	c3                   	ret    
c001b643:	90                   	nop

c001b644 <FAT::~FAT()>:
c001b644:	83 ec 0c             	sub    esp,0xc
c001b647:	83 ec 0c             	sub    esp,0xc
c001b64a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b64e:	e8 cd ff ff ff       	call   c001b620 <FAT::~FAT()>
c001b653:	83 c4 10             	add    esp,0x10
c001b656:	83 ec 08             	sub    esp,0x8
c001b659:	6a 08                	push   0x8
c001b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b65f:	e8 82 19 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c001b664:	83 c4 10             	add    esp,0x10
c001b667:	83 c4 0c             	add    esp,0xc
c001b66a:	c3                   	ret    
c001b66b:	90                   	nop

c001b66c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b66c:	83 ec 1c             	sub    esp,0x1c
c001b66f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b676:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b67b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b67f:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b686:	83 f8 ff             	cmp    eax,0xffffffff
c001b689:	75 35                	jne    c001b6c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b68b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b68f:	88 c2                	mov    dl,al
c001b691:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b696:	01 d0                	add    eax,edx
c001b698:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b69c:	8b 15 e0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e0
c001b6a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6a6:	89 14 85 00 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e00],edx
c001b6ad:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b6b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6b6:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001b6bd:	eb 19                	jmp    c001b6d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b6bf:	90                   	nop
c001b6c0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b6c4:	88 c2                	mov    dl,al
c001b6c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6ca:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b6d1:	01 d0                	add    eax,edx
c001b6d3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b6d7:	90                   	nop
c001b6d8:	83 ec 04             	sub    esp,0x4
c001b6db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b6df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b6e3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b6e7:	50                   	push   eax
c001b6e8:	e8 55 b5 fe ff       	call   c0006c42 <f_getlabel>
c001b6ed:	83 c4 10             	add    esp,0x10
c001b6f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b6f9:	75 09                	jne    c001b704 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b6fb:	b8 00 00 00 00       	mov    eax,0x0
c001b700:	eb 0a                	jmp    c001b70c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b702:	66 90                	xchg   ax,ax
c001b704:	b8 01 00 00 00       	mov    eax,0x1
c001b709:	8d 76 00             	lea    esi,[esi+0x0]
c001b70c:	83 c4 1c             	add    esp,0x1c
c001b70f:	c3                   	ret    

c001b710 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b710:	57                   	push   edi
c001b711:	83 ec 58             	sub    esp,0x58
c001b714:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b71c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b720:	b9 0f 00 00 00       	mov    ecx,0xf
c001b725:	b8 00 00 00 00       	mov    eax,0x0
c001b72a:	fc                   	cld    
c001b72b:	89 d7                	mov    edi,edx
c001b72d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b72f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b733:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b73a:	83 f8 ff             	cmp    eax,0xffffffff
c001b73d:	75 35                	jne    c001b774 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b73f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b743:	88 c2                	mov    dl,al
c001b745:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b74a:	01 d0                	add    eax,edx
c001b74c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b750:	8b 15 e0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e0
c001b756:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b75a:	89 14 85 00 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e00],edx
c001b761:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b766:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b76a:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001b771:	eb 19                	jmp    c001b78c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b773:	90                   	nop
c001b774:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b778:	88 c2                	mov    dl,al
c001b77a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b77e:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b785:	01 d0                	add    eax,edx
c001b787:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b78b:	90                   	nop
c001b78c:	83 ec 08             	sub    esp,0x8
c001b78f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b793:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b797:	50                   	push   eax
c001b798:	e8 f3 50 fe ff       	call   c0000890 <strcat>
c001b79d:	83 c4 10             	add    esp,0x10
c001b7a0:	83 ec 0c             	sub    esp,0xc
c001b7a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7a7:	50                   	push   eax
c001b7a8:	e8 83 b6 fe ff       	call   c0006e30 <f_setlabel>
c001b7ad:	83 c4 10             	add    esp,0x10
c001b7b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7b4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b7b9:	75 09                	jne    c001b7c4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b7bb:	b8 00 00 00 00       	mov    eax,0x0
c001b7c0:	eb 0a                	jmp    c001b7cc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b7c2:	66 90                	xchg   ax,ax
c001b7c4:	b8 01 00 00 00       	mov    eax,0x1
c001b7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7cc:	83 c4 58             	add    esp,0x58
c001b7cf:	5f                   	pop    edi
c001b7d0:	c3                   	ret    
c001b7d1:	90                   	nop
c001b7d2:	66 90                	xchg   ax,ax

c001b7d4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b7d4:	83 ec 2c             	sub    esp,0x2c
c001b7d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b7df:	83 ec 08             	sub    esp,0x8
c001b7e2:	68 b4 6f 02 c0       	push   0xc0026fb4
c001b7e7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b7eb:	e8 ec 4f fe ff       	call   c00007dc <strcmp>
c001b7f0:	83 c4 10             	add    esp,0x10
c001b7f3:	85 c0                	test   eax,eax
c001b7f5:	0f 94 c0             	sete   al
c001b7f8:	84 c0                	test   al,al
c001b7fa:	74 10                	je     c001b80c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b7fc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b804:	e9 b3 00 00 00       	jmp    c001b8bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b809:	8d 76 00             	lea    esi,[esi+0x0]
c001b80c:	83 ec 08             	sub    esp,0x8
c001b80f:	68 a6 6f 02 c0       	push   0xc0026fa6
c001b814:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b818:	e8 bf 4f fe ff       	call   c00007dc <strcmp>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	85 c0                	test   eax,eax
c001b822:	0f 94 c0             	sete   al
c001b825:	84 c0                	test   al,al
c001b827:	74 0f                	je     c001b838 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b829:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b831:	e9 86 00 00 00       	jmp    c001b8bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b836:	66 90                	xchg   ax,ax
c001b838:	83 ec 08             	sub    esp,0x8
c001b83b:	68 ac 6f 02 c0       	push   0xc0026fac
c001b840:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b844:	e8 93 4f fe ff       	call   c00007dc <strcmp>
c001b849:	83 c4 10             	add    esp,0x10
c001b84c:	85 c0                	test   eax,eax
c001b84e:	0f 94 c0             	sete   al
c001b851:	84 c0                	test   al,al
c001b853:	74 0b                	je     c001b860 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b855:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b85d:	eb 5d                	jmp    c001b8bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b85f:	90                   	nop
c001b860:	83 ec 08             	sub    esp,0x8
c001b863:	68 ac 40 02 c0       	push   0xc00240ac
c001b868:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b86c:	e8 6b 4f fe ff       	call   c00007dc <strcmp>
c001b871:	83 c4 10             	add    esp,0x10
c001b874:	85 c0                	test   eax,eax
c001b876:	0f 94 c0             	sete   al
c001b879:	84 c0                	test   al,al
c001b87b:	74 0b                	je     c001b888 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b87d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b885:	eb 35                	jmp    c001b8bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b887:	90                   	nop
c001b888:	83 ec 08             	sub    esp,0x8
c001b88b:	68 b2 6f 02 c0       	push   0xc0026fb2
c001b890:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b894:	e8 43 4f fe ff       	call   c00007dc <strcmp>
c001b899:	83 c4 10             	add    esp,0x10
c001b89c:	85 c0                	test   eax,eax
c001b89e:	0f 94 c0             	sete   al
c001b8a1:	84 c0                	test   al,al
c001b8a3:	74 0b                	je     c001b8b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b8a5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b8ad:	eb 0d                	jmp    c001b8bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8af:	90                   	nop
c001b8b0:	b8 08 00 00 00       	mov    eax,0x8
c001b8b5:	e9 ea 00 00 00       	jmp    c001b9a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b8ba:	66 90                	xchg   ax,ax
c001b8bc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b8c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b8c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8cc:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b8d3:	83 f8 ff             	cmp    eax,0xffffffff
c001b8d6:	75 34                	jne    c001b90c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b8d8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b8dc:	88 c2                	mov    dl,al
c001b8de:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b8e3:	01 d0                	add    eax,edx
c001b8e5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b8e9:	8b 15 e0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e0
c001b8ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8f3:	89 14 85 00 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e00],edx
c001b8fa:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b8ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b903:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001b90a:	eb 18                	jmp    c001b924 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b90c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b910:	88 c2                	mov    dl,al
c001b912:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b916:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001b91d:	01 d0                	add    eax,edx
c001b91f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b923:	90                   	nop
c001b924:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b928:	88 04 24             	mov    BYTE PTR [esp],al
c001b92b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b92f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b933:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b93b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b940:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	68 00 20 00 00       	push   0x2000
c001b950:	e8 92 e4 fe ff       	call   c0009de7 <malloc>
c001b955:	83 c4 10             	add    esp,0x10
c001b958:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b95c:	68 00 20 00 00       	push   0x2000
c001b961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b965:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b969:	50                   	push   eax
c001b96a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b96e:	50                   	push   eax
c001b96f:	e8 3d bb fe ff       	call   c00074b1 <f_mkfs>
c001b974:	83 c4 10             	add    esp,0x10
c001b977:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b97b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b980:	75 0a                	jne    c001b98c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b982:	b8 00 00 00 00       	mov    eax,0x0
c001b987:	eb 1b                	jmp    c001b9a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b989:	8d 76 00             	lea    esi,[esi+0x0]
c001b98c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b991:	75 09                	jne    c001b99c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b993:	b8 09 00 00 00       	mov    eax,0x9
c001b998:	eb 0a                	jmp    c001b9a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b99a:	66 90                	xchg   ax,ax
c001b99c:	b8 01 00 00 00       	mov    eax,0x1
c001b9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a4:	83 c4 2c             	add    esp,0x2c
c001b9a7:	c3                   	ret    

c001b9a8 <FAT::tryMount(LogicalDisk*, int)>:
c001b9a8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b9ae:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001b9b3:	83 f8 14             	cmp    eax,0x14
c001b9b6:	75 18                	jne    c001b9d0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b9b8:	83 ec 0c             	sub    esp,0xc
c001b9bb:	68 b8 6f 02 c0       	push   0xc0026fb8
c001b9c0:	e8 e4 97 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001b9c5:	83 c4 10             	add    esp,0x10
c001b9c8:	b0 00                	mov    al,0x0
c001b9ca:	e9 e9 01 00 00       	jmp    c001bbb8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b9cf:	90                   	nop
c001b9d0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b9d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b9dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b9e3:	3d 00 02 00 00       	cmp    eax,0x200
c001b9e8:	74 0a                	je     c001b9f4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b9ea:	b0 00                	mov    al,0x0
c001b9ec:	e9 c7 01 00 00       	jmp    c001bbb8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b9f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9f4:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b9fc:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ba03:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001ba0a:	83 f8 ff             	cmp    eax,0xffffffff
c001ba0d:	74 09                	je     c001ba18 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001ba0f:	b0 01                	mov    al,0x1
c001ba11:	e9 a2 01 00 00       	jmp    c001bbb8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba16:	66 90                	xchg   ax,ax
c001ba18:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ba22:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ba2a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ba31:	88 c2                	mov    dl,al
c001ba33:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001ba38:	01 d0                	add    eax,edx
c001ba3a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001ba41:	8b 15 e0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e0
c001ba47:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ba4e:	89 14 85 00 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e00],edx
c001ba55:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001ba5a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001ba61:	89 14 85 80 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d80],edx
c001ba68:	83 ec 0c             	sub    esp,0xc
c001ba6b:	68 54 02 00 00       	push   0x254
c001ba70:	e8 72 e3 fe ff       	call   c0009de7 <malloc>
c001ba75:	83 c4 10             	add    esp,0x10
c001ba78:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001ba7f:	83 ec 04             	sub    esp,0x4
c001ba82:	6a 00                	push   0x0
c001ba84:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ba8b:	50                   	push   eax
c001ba8c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ba93:	e8 a1 93 fe ff       	call   c0004e39 <f_mount>
c001ba98:	83 c4 10             	add    esp,0x10
c001ba9b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001baa2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001baaa:	74 1c                	je     c001bac8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001baac:	83 ec 0c             	sub    esp,0xc
c001baaf:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bab6:	e8 4c e3 fe ff       	call   c0009e07 <rfree>
c001babb:	83 c4 10             	add    esp,0x10
c001babe:	b0 00                	mov    al,0x0
c001bac0:	e9 f3 00 00 00       	jmp    c001bbb8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bac5:	8d 76 00             	lea    esi,[esi+0x0]
c001bac8:	83 ec 04             	sub    esp,0x4
c001bacb:	68 00 01 00 00       	push   0x100
c001bad0:	6a 00                	push   0x0
c001bad2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bad9:	50                   	push   eax
c001bada:	e8 b5 4b fe ff       	call   c0000694 <memset>
c001badf:	83 c4 10             	add    esp,0x10
c001bae2:	83 ec 08             	sub    esp,0x8
c001bae5:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001baec:	50                   	push   eax
c001baed:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001baf4:	50                   	push   eax
c001baf5:	e8 96 4d fe ff       	call   c0000890 <strcat>
c001bafa:	83 c4 10             	add    esp,0x10
c001bafd:	83 ec 08             	sub    esp,0x8
c001bb00:	68 c6 6f 02 c0       	push   0xc0026fc6
c001bb05:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb0c:	50                   	push   eax
c001bb0d:	e8 7e 4d fe ff       	call   c0000890 <strcat>
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	83 ec 04             	sub    esp,0x4
c001bb18:	6a 01                	push   0x1
c001bb1a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001bb21:	50                   	push   eax
c001bb22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb26:	50                   	push   eax
c001bb27:	e8 6f 93 fe ff       	call   c0004e9b <f_open>
c001bb2c:	83 c4 10             	add    esp,0x10
c001bb2f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bb36:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bb3d:	85 c0                	test   eax,eax
c001bb3f:	74 0b                	je     c001bb4c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bb41:	78 31                	js     c001bb74 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bb43:	83 e8 04             	sub    eax,0x4
c001bb46:	83 f8 01             	cmp    eax,0x1
c001bb49:	77 29                	ja     c001bb74 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bb4b:	90                   	nop
c001bb4c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001bb54:	83 ec 0c             	sub    esp,0xc
c001bb57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bb5b:	50                   	push   eax
c001bb5c:	e8 8c 9e fe ff       	call   c00059ed <f_close>
c001bb61:	83 c4 10             	add    esp,0x10
c001bb64:	90                   	nop
c001bb65:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001bb6d:	74 41                	je     c001bbb0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001bb6f:	eb 33                	jmp    c001bba4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bb71:	8d 76 00             	lea    esi,[esi+0x0]
c001bb74:	83 ec 0c             	sub    esp,0xc
c001bb77:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bb7e:	e8 84 e2 fe ff       	call   c0009e07 <rfree>
c001bb83:	83 c4 10             	add    esp,0x10
c001bb86:	83 ec 04             	sub    esp,0x4
c001bb89:	6a 00                	push   0x0
c001bb8b:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bb92:	50                   	push   eax
c001bb93:	6a 00                	push   0x0
c001bb95:	e8 9f 92 fe ff       	call   c0004e39 <f_mount>
c001bb9a:	83 c4 10             	add    esp,0x10
c001bb9d:	b0 00                	mov    al,0x0
c001bb9f:	eb 17                	jmp    c001bbb8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bba1:	8d 76 00             	lea    esi,[esi+0x0]
c001bba4:	a1 e0 a1 02 c0       	mov    eax,ds:0xc002a1e0
c001bba9:	40                   	inc    eax
c001bbaa:	a3 e0 a1 02 c0       	mov    ds:0xc002a1e0,eax
c001bbaf:	90                   	nop
c001bbb0:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001bbb7:	90                   	nop
c001bbb8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001bbbe:	c3                   	ret    
c001bbbf:	90                   	nop

c001bbc0 <FAT::allocateSwapfile(char const*, int)>:
c001bbc0:	55                   	push   ebp
c001bbc1:	57                   	push   edi
c001bbc2:	56                   	push   esi
c001bbc3:	53                   	push   ebx
c001bbc4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bbca:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bbd5:	83 ec 0c             	sub    esp,0xc
c001bbd8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bbdf:	e8 03 e2 fe ff       	call   c0009de7 <malloc>
c001bbe4:	83 c4 10             	add    esp,0x10
c001bbe7:	89 c7                	mov    edi,eax
c001bbe9:	a1 10 a1 02 c0       	mov    eax,ds:0xc002a110
c001bbee:	83 ec 04             	sub    esp,0x4
c001bbf1:	50                   	push   eax
c001bbf2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bbf9:	57                   	push   edi
c001bbfa:	e8 33 1a ff ff       	call   c000d632 <File::File(char const*, Process*)>
c001bbff:	83 c4 10             	add    esp,0x10
c001bc02:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bc09:	83 ec 04             	sub    esp,0x4
c001bc0c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bc10:	50                   	push   eax
c001bc11:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc15:	50                   	push   eax
c001bc16:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc1d:	e8 96 1d ff ff       	call   c000d9b8 <File::stat(unsigned long long*, bool*)>
c001bc22:	83 c4 10             	add    esp,0x10
c001bc25:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bc2c:	c1 e0 14             	shl    eax,0x14
c001bc2f:	89 c7                	mov    edi,eax
c001bc31:	89 c5                	mov    ebp,eax
c001bc33:	c1 fd 1f             	sar    ebp,0x1f
c001bc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc3e:	89 f9                	mov    ecx,edi
c001bc40:	31 c1                	xor    ecx,eax
c001bc42:	89 cb                	mov    ebx,ecx
c001bc44:	89 e9                	mov    ecx,ebp
c001bc46:	31 d1                	xor    ecx,edx
c001bc48:	89 ce                	mov    esi,ecx
c001bc4a:	89 f0                	mov    eax,esi
c001bc4c:	09 d8                	or     eax,ebx
c001bc4e:	0f 84 98 00 00 00    	je     c001bcec <FAT::allocateSwapfile(char const*, int)+0x12c>
c001bc54:	83 ec 0c             	sub    esp,0xc
c001bc57:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc5e:	e8 21 1c ff ff       	call   c000d884 <File::unlink()>
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	83 ec 08             	sub    esp,0x8
c001bc69:	6a 12                	push   0x12
c001bc6b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bc72:	e8 95 1a ff ff       	call   c000d70c <File::open(FileOpenMode)>
c001bc77:	83 c4 10             	add    esp,0x10
c001bc7a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bc81:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bc87:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bc8e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bc95:	c1 e0 14             	shl    eax,0x14
c001bc98:	99                   	cdq    
c001bc99:	6a 01                	push   0x1
c001bc9b:	52                   	push   edx
c001bc9c:	50                   	push   eax
c001bc9d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bca4:	e8 f4 b3 fe ff       	call   c000709d <f_expand>
c001bca9:	83 c4 10             	add    esp,0x10
c001bcac:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bcb3:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcb5:	83 c0 10             	add    eax,0x10
c001bcb8:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcba:	83 ec 0c             	sub    esp,0xc
c001bcbd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bcc1:	52                   	push   edx
c001bcc2:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bcc6:	52                   	push   edx
c001bcc7:	6a 00                	push   0x0
c001bcc9:	68 00 04 00 00       	push   0x400
c001bcce:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bcd5:	ff d0                	call   eax
c001bcd7:	83 c4 20             	add    esp,0x20
c001bcda:	83 ec 0c             	sub    esp,0xc
c001bcdd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bce4:	e8 81 1a ff ff       	call   c000d76a <File::close()>
c001bce9:	83 c4 10             	add    esp,0x10
c001bcec:	83 ec 08             	sub    esp,0x8
c001bcef:	6a 01                	push   0x1
c001bcf1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bcf8:	e8 0f 1a ff ff       	call   c000d70c <File::open(FileOpenMode)>
c001bcfd:	83 c4 10             	add    esp,0x10
c001bd00:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd07:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd09:	83 c0 0c             	add    eax,0xc
c001bd0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd0e:	83 ec 0c             	sub    esp,0xc
c001bd11:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd15:	52                   	push   edx
c001bd16:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bd1a:	52                   	push   edx
c001bd1b:	6a 00                	push   0x0
c001bd1d:	6a 04                	push   0x4
c001bd1f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd26:	ff d0                	call   eax
c001bd28:	83 c4 20             	add    esp,0x20
c001bd2b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd32:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bd38:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bd3f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bd46:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bd49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bd4c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bd53:	83 ec 0c             	sub    esp,0xc
c001bd56:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd5d:	e8 08 1a ff ff       	call   c000d76a <File::close()>
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bd6c:	ba 00 00 00 00       	mov    edx,0x0
c001bd71:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bd77:	5b                   	pop    ebx
c001bd78:	5e                   	pop    esi
c001bd79:	5f                   	pop    edi
c001bd7a:	5d                   	pop    ebp
c001bd7b:	c3                   	ret    

c001bd7c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bd7c:	57                   	push   edi
c001bd7d:	56                   	push   esi
c001bd7e:	53                   	push   ebx
c001bd7f:	81 ec 50 02 00 00    	sub    esp,0x250
c001bd85:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bd8d:	74 0d                	je     c001bd9c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bd8f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bd97:	75 0f                	jne    c001bda8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bd99:	8d 76 00             	lea    esi,[esi+0x0]
c001bd9c:	b8 04 00 00 00       	mov    eax,0x4
c001bda1:	e9 36 01 00 00       	jmp    c001bedc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bda6:	66 90                	xchg   ax,ax
c001bda8:	83 ec 08             	sub    esp,0x8
c001bdab:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bdb2:	50                   	push   eax
c001bdb3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bdba:	e8 38 a2 fe ff       	call   c0005ff7 <f_readdir>
c001bdbf:	83 c4 10             	add    esp,0x10
c001bdc2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bdc9:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001bdd0:	83 ec 0c             	sub    esp,0xc
c001bdd3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bdda:	83 c0 1a             	add    eax,0x1a
c001bddd:	50                   	push   eax
c001bdde:	e8 cd 48 fe ff       	call   c00006b0 <strlen>
c001bde3:	83 c4 10             	add    esp,0x10
c001bde6:	ba 00 00 00 00       	mov    edx,0x0
c001bdeb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bdef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bdf3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bdfa:	0f b6 c0             	movzx  eax,al
c001bdfd:	83 e0 10             	and    eax,0x10
c001be00:	74 0a                	je     c001be0c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001be02:	b8 02 00 00 00       	mov    eax,0x2
c001be07:	eb 0b                	jmp    c001be14 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001be09:	8d 76 00             	lea    esi,[esi+0x0]
c001be0c:	b8 01 00 00 00       	mov    eax,0x1
c001be11:	8d 76 00             	lea    esi,[esi+0x0]
c001be14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be18:	83 ec 08             	sub    esp,0x8
c001be1b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001be22:	83 c0 1a             	add    eax,0x1a
c001be25:	50                   	push   eax
c001be26:	8d 44 24 10          	lea    eax,[esp+0x10]
c001be2a:	83 c0 10             	add    eax,0x10
c001be2d:	50                   	push   eax
c001be2e:	e8 1d 49 fe ff       	call   c0000750 <strcpy>
c001be33:	83 c4 10             	add    esp,0x10
c001be36:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001be3d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001be44:	8d 44 24 04          	lea    eax,[esp+0x4]
c001be48:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001be4f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001be56:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001be5d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001be64:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001be6b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001be72:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001be79:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001be80:	89 c6                	mov    esi,eax
c001be82:	89 d7                	mov    edi,edx
c001be84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be86:	89 c8                	mov    eax,ecx
c001be88:	89 fa                	mov    edx,edi
c001be8a:	89 f3                	mov    ebx,esi
c001be8c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001be93:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001be9a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bea1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bea8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001beae:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001beb5:	84 c0                	test   al,al
c001beb7:	75 07                	jne    c001bec0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001beb9:	b8 07 00 00 00       	mov    eax,0x7
c001bebe:	eb 1c                	jmp    c001bedc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bec0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bec7:	85 c0                	test   eax,eax
c001bec9:	75 09                	jne    c001bed4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001becb:	b8 00 00 00 00       	mov    eax,0x0
c001bed0:	eb 0a                	jmp    c001bedc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bed2:	66 90                	xchg   ax,ax
c001bed4:	b8 01 00 00 00       	mov    eax,0x1
c001bed9:	8d 76 00             	lea    esi,[esi+0x0]
c001bedc:	81 c4 50 02 00 00    	add    esp,0x250
c001bee2:	5b                   	pop    ebx
c001bee3:	5e                   	pop    esi
c001bee4:	5f                   	pop    edi
c001bee5:	c3                   	ret    
c001bee6:	66 90                	xchg   ax,ax

c001bee8 <FAT::read(void*, unsigned long, void*, int*)>:
c001bee8:	83 ec 1c             	sub    esp,0x1c
c001beeb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bef0:	74 0a                	je     c001befc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bef2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bef7:	75 0b                	jne    c001bf04 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bef9:	8d 76 00             	lea    esi,[esi+0x0]
c001befc:	b8 04 00 00 00       	mov    eax,0x4
c001bf01:	eb 41                	jmp    c001bf44 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bf03:	90                   	nop
c001bf04:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf08:	50                   	push   eax
c001bf09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf15:	e8 bd 93 fe ff       	call   c00052d7 <f_read>
c001bf1a:	83 c4 10             	add    esp,0x10
c001bf1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf25:	89 c2                	mov    edx,eax
c001bf27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf2b:	89 10                	mov    DWORD PTR [eax],edx
c001bf2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf31:	85 c0                	test   eax,eax
c001bf33:	75 07                	jne    c001bf3c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bf35:	b8 00 00 00 00       	mov    eax,0x0
c001bf3a:	eb 08                	jmp    c001bf44 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bf3c:	b8 01 00 00 00       	mov    eax,0x1
c001bf41:	8d 76 00             	lea    esi,[esi+0x0]
c001bf44:	83 c4 1c             	add    esp,0x1c
c001bf47:	c3                   	ret    

c001bf48 <FAT::write(void*, unsigned long, void*, int*)>:
c001bf48:	83 ec 1c             	sub    esp,0x1c
c001bf4b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf50:	74 0a                	je     c001bf5c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bf52:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bf57:	75 0b                	jne    c001bf64 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bf59:	8d 76 00             	lea    esi,[esi+0x0]
c001bf5c:	b8 04 00 00 00       	mov    eax,0x4
c001bf61:	eb 41                	jmp    c001bfa4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bf63:	90                   	nop
c001bf64:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf68:	50                   	push   eax
c001bf69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf75:	e8 dd 95 fe ff       	call   c0005557 <f_write>
c001bf7a:	83 c4 10             	add    esp,0x10
c001bf7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf85:	89 c2                	mov    edx,eax
c001bf87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bf8b:	89 10                	mov    DWORD PTR [eax],edx
c001bf8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf91:	85 c0                	test   eax,eax
c001bf93:	75 07                	jne    c001bf9c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bf95:	b8 00 00 00 00       	mov    eax,0x0
c001bf9a:	eb 08                	jmp    c001bfa4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bf9c:	b8 01 00 00 00       	mov    eax,0x1
c001bfa1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfa4:	83 c4 1c             	add    esp,0x1c
c001bfa7:	c3                   	ret    

c001bfa8 <FAT::close(void*)>:
c001bfa8:	83 ec 1c             	sub    esp,0x1c
c001bfab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bfb0:	75 0a                	jne    c001bfbc <FAT::close(void*)+0x14>
c001bfb2:	b8 04 00 00 00       	mov    eax,0x4
c001bfb7:	eb 3f                	jmp    c001bff8 <FAT::close(void*)+0x50>
c001bfb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfbc:	83 ec 0c             	sub    esp,0xc
c001bfbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfc3:	e8 25 9a fe ff       	call   c00059ed <f_close>
c001bfc8:	83 c4 10             	add    esp,0x10
c001bfcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfcf:	83 ec 0c             	sub    esp,0xc
c001bfd2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfd6:	e8 1c de fe ff       	call   c0009df7 <free>
c001bfdb:	83 c4 10             	add    esp,0x10
c001bfde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfe2:	85 c0                	test   eax,eax
c001bfe4:	75 0a                	jne    c001bff0 <FAT::close(void*)+0x48>
c001bfe6:	b8 00 00 00 00       	mov    eax,0x0
c001bfeb:	eb 0b                	jmp    c001bff8 <FAT::close(void*)+0x50>
c001bfed:	8d 76 00             	lea    esi,[esi+0x0]
c001bff0:	b8 01 00 00 00       	mov    eax,0x1
c001bff5:	8d 76 00             	lea    esi,[esi+0x0]
c001bff8:	83 c4 1c             	add    esp,0x1c
c001bffb:	c3                   	ret    

c001bffc <FAT::closeDir(void*)>:
c001bffc:	83 ec 1c             	sub    esp,0x1c
c001bfff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c004:	75 0a                	jne    c001c010 <FAT::closeDir(void*)+0x14>
c001c006:	b8 04 00 00 00       	mov    eax,0x4
c001c00b:	eb 3f                	jmp    c001c04c <FAT::closeDir(void*)+0x50>
c001c00d:	8d 76 00             	lea    esi,[esi+0x0]
c001c010:	83 ec 0c             	sub    esp,0xc
c001c013:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c017:	e8 b9 9f fe ff       	call   c0005fd5 <f_closedir>
c001c01c:	83 c4 10             	add    esp,0x10
c001c01f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c023:	83 ec 0c             	sub    esp,0xc
c001c026:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c02a:	e8 c8 dd fe ff       	call   c0009df7 <free>
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c036:	85 c0                	test   eax,eax
c001c038:	75 0a                	jne    c001c044 <FAT::closeDir(void*)+0x48>
c001c03a:	b8 00 00 00 00       	mov    eax,0x0
c001c03f:	eb 0b                	jmp    c001c04c <FAT::closeDir(void*)+0x50>
c001c041:	8d 76 00             	lea    esi,[esi+0x0]
c001c044:	b8 01 00 00 00       	mov    eax,0x1
c001c049:	8d 76 00             	lea    esi,[esi+0x0]
c001c04c:	83 c4 1c             	add    esp,0x1c
c001c04f:	c3                   	ret    

c001c050 <FAT::seek(void*, unsigned long long)>:
c001c050:	83 ec 2c             	sub    esp,0x2c
c001c053:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c057:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c05b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c05f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c063:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c068:	75 0a                	jne    c001c074 <FAT::seek(void*, unsigned long long)+0x24>
c001c06a:	b8 04 00 00 00       	mov    eax,0x4
c001c06f:	eb 37                	jmp    c001c0a8 <FAT::seek(void*, unsigned long long)+0x58>
c001c071:	8d 76 00             	lea    esi,[esi+0x0]
c001c074:	83 ec 04             	sub    esp,0x4
c001c077:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c07b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c07f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c083:	e8 94 99 fe ff       	call   c0005a1c <f_lseek>
c001c088:	83 c4 10             	add    esp,0x10
c001c08b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c08f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c093:	85 c0                	test   eax,eax
c001c095:	75 09                	jne    c001c0a0 <FAT::seek(void*, unsigned long long)+0x50>
c001c097:	b8 00 00 00 00       	mov    eax,0x0
c001c09c:	eb 0a                	jmp    c001c0a8 <FAT::seek(void*, unsigned long long)+0x58>
c001c09e:	66 90                	xchg   ax,ax
c001c0a0:	b8 01 00 00 00       	mov    eax,0x1
c001c0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c0a8:	83 c4 2c             	add    esp,0x2c
c001c0ab:	c3                   	ret    

c001c0ac <fatWrapperReadDisk>:
c001c0ac:	83 ec 1c             	sub    esp,0x1c
c001c0af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0b3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c0b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c0bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c0c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c0c6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0cb:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c001c0d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c0d6:	83 ec 0c             	sub    esp,0xc
c001c0d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0dd:	52                   	push   edx
c001c0de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0e6:	50                   	push   eax
c001c0e7:	e8 5e 49 ff ff       	call   c0010a4a <LogicalDisk::read(unsigned long long, int, void*)>
c001c0ec:	83 c4 20             	add    esp,0x20
c001c0ef:	83 c4 1c             	add    esp,0x1c
c001c0f2:	c3                   	ret    
c001c0f3:	90                   	nop

c001c0f4 <fatWrapperWriteDisk>:
c001c0f4:	83 ec 1c             	sub    esp,0x1c
c001c0f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c0ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c103:	89 04 24             	mov    DWORD PTR [esp],eax
c001c106:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c10a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c10e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c113:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c001c11a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c11e:	83 ec 0c             	sub    esp,0xc
c001c121:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c125:	52                   	push   edx
c001c126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c12a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c12e:	50                   	push   eax
c001c12f:	e8 82 49 ff ff       	call   c0010ab6 <LogicalDisk::write(unsigned long long, int, void*)>
c001c134:	83 c4 20             	add    esp,0x20
c001c137:	83 c4 1c             	add    esp,0x1c
c001c13a:	c3                   	ret    
c001c13b:	90                   	nop

c001c13c <fatWrapperIoctl>:
c001c13c:	53                   	push   ebx
c001c13d:	83 ec 28             	sub    esp,0x28
c001c140:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c144:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c148:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c14c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c150:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001c155:	75 31                	jne    c001c188 <fatWrapperIoctl+0x4c>
c001c157:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c15b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c15f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c164:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c001c16b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c171:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c177:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c17b:	66 89 02             	mov    WORD PTR [edx],ax
c001c17e:	b8 00 00 00 00       	mov    eax,0x0
c001c183:	e9 bc 00 00 00       	jmp    c001c244 <fatWrapperIoctl+0x108>
c001c188:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001c18d:	75 6d                	jne    c001c1fc <fatWrapperIoctl+0xc0>
c001c18f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c193:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c197:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c19c:	8b 04 85 80 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e80]
c001c1a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c1a9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c1af:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c1b5:	89 c8                	mov    eax,ecx
c001c1b7:	89 da                	mov    edx,ebx
c001c1b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c1bd:	c1 e0 0a             	shl    eax,0xa
c001c1c0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c1c5:	8b 0c 8d 80 91 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6e80]
c001c1cc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c1d2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c1d8:	89 cb                	mov    ebx,ecx
c001c1da:	c1 fb 1f             	sar    ebx,0x1f
c001c1dd:	53                   	push   ebx
c001c1de:	51                   	push   ecx
c001c1df:	52                   	push   edx
c001c1e0:	50                   	push   eax
c001c1e1:	e8 ba 6d 00 00       	call   c0022fa0 <__udivdi3>
c001c1e6:	83 c4 10             	add    esp,0x10
c001c1e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c1ed:	89 01                	mov    DWORD PTR [ecx],eax
c001c1ef:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c1f2:	b8 00 00 00 00       	mov    eax,0x0
c001c1f7:	eb 4b                	jmp    c001c244 <fatWrapperIoctl+0x108>
c001c1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c1fc:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001c201:	75 09                	jne    c001c20c <fatWrapperIoctl+0xd0>
c001c203:	b8 00 00 00 00       	mov    eax,0x0
c001c208:	eb 3a                	jmp    c001c244 <fatWrapperIoctl+0x108>
c001c20a:	66 90                	xchg   ax,ax
c001c20c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001c211:	75 19                	jne    c001c22c <fatWrapperIoctl+0xf0>
c001c213:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c217:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c21b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c21f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c225:	b8 00 00 00 00       	mov    eax,0x0
c001c22a:	eb 18                	jmp    c001c244 <fatWrapperIoctl+0x108>
c001c22c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001c231:	75 09                	jne    c001c23c <fatWrapperIoctl+0x100>
c001c233:	b8 00 00 00 00       	mov    eax,0x0
c001c238:	eb 0a                	jmp    c001c244 <fatWrapperIoctl+0x108>
c001c23a:	66 90                	xchg   ax,ax
c001c23c:	b8 04 00 00 00       	mov    eax,0x4
c001c241:	8d 76 00             	lea    esi,[esi+0x0]
c001c244:	83 c4 28             	add    esp,0x28
c001c247:	5b                   	pop    ebx
c001c248:	c3                   	ret    
c001c249:	90                   	nop
c001c24a:	66 90                	xchg   ax,ax

c001c24c <FAT::FAT()>:
c001c24c:	83 ec 1c             	sub    esp,0x1c
c001c24f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c253:	83 ec 0c             	sub    esp,0xc
c001c256:	50                   	push   eax
c001c257:	e8 82 11 ff ff       	call   c000d3de <Filesystem::Filesystem()>
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	ba dc 6f 02 c0       	mov    edx,0xc0026fdc
c001c264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c268:	89 10                	mov    DWORD PTR [eax],edx
c001c26a:	c7 05 e0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1e0,0x0
c001c274:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c27c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c281:	7f 15                	jg     c001c298 <FAT::FAT()+0x4c>
c001c283:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c287:	c7 04 85 00 a2 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5e00],0xffffffff
c001c292:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c296:	eb e4                	jmp    c001c27c <FAT::FAT()+0x30>
c001c298:	90                   	nop
c001c299:	83 c4 1c             	add    esp,0x1c
c001c29c:	c3                   	ret    
c001c29d:	90                   	nop
c001c29e:	66 90                	xchg   ax,ax

c001c2a0 <FAT::fixFilepath(char*)>:
c001c2a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2a4:	8a 00                	mov    al,BYTE PTR [eax]
c001c2a6:	3c 40                	cmp    al,0x40
c001c2a8:	7e 2e                	jle    c001c2d8 <FAT::fixFilepath(char*)+0x38>
c001c2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2ae:	8a 00                	mov    al,BYTE PTR [eax]
c001c2b0:	83 e8 41             	sub    eax,0x41
c001c2b3:	88 c2                	mov    dl,al
c001c2b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2b9:	88 10                	mov    BYTE PTR [eax],dl
c001c2bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2bf:	8a 00                	mov    al,BYTE PTR [eax]
c001c2c1:	0f be c0             	movsx  eax,al
c001c2c4:	8b 04 85 00 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5e00]
c001c2cb:	83 c0 30             	add    eax,0x30
c001c2ce:	88 c2                	mov    dl,al
c001c2d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2d4:	88 10                	mov    BYTE PTR [eax],dl
c001c2d6:	66 90                	xchg   ax,ax
c001c2d8:	90                   	nop
c001c2d9:	c3                   	ret    
c001c2da:	66 90                	xchg   ax,ax

c001c2dc <FAT::open(char const*, void**, FileOpenMode)>:
c001c2dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c2e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c2ea:	74 0c                	je     c001c2f8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c2ec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c2f4:	75 0e                	jne    c001c304 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c2f6:	66 90                	xchg   ax,ax
c001c2f8:	b8 04 00 00 00       	mov    eax,0x4
c001c2fd:	e9 06 01 00 00       	jmp    c001c408 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c302:	66 90                	xchg   ax,ax
c001c304:	83 ec 08             	sub    esp,0x8
c001c307:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c30e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c312:	50                   	push   eax
c001c313:	e8 38 44 fe ff       	call   c0000750 <strcpy>
c001c318:	83 c4 10             	add    esp,0x10
c001c31b:	83 ec 08             	sub    esp,0x8
c001c31e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c322:	50                   	push   eax
c001c323:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c32a:	e8 71 ff ff ff       	call   c001c2a0 <FAT::fixFilepath(char*)>
c001c32f:	83 c4 10             	add    esp,0x10
c001c332:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c33a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c341:	83 e0 01             	and    eax,0x1
c001c344:	74 0a                	je     c001c350 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c346:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c34e:	66 90                	xchg   ax,ax
c001c350:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c357:	83 e0 04             	and    eax,0x4
c001c35a:	74 10                	je     c001c36c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c35c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c364:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c36c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c373:	83 e0 02             	and    eax,0x2
c001c376:	74 08                	je     c001c380 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c378:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c380:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c387:	83 e0 08             	and    eax,0x8
c001c38a:	74 08                	je     c001c394 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c38c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c394:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c39b:	83 e0 10             	and    eax,0x10
c001c39e:	74 08                	je     c001c3a8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c3a0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c3a8:	83 ec 0c             	sub    esp,0xc
c001c3ab:	68 50 02 00 00       	push   0x250
c001c3b0:	e8 32 da fe ff       	call   c0009de7 <malloc>
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	89 c2                	mov    edx,eax
c001c3ba:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c3c1:	89 10                	mov    DWORD PTR [eax],edx
c001c3c3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c3cb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c3d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3d4:	83 ec 04             	sub    esp,0x4
c001c3d7:	52                   	push   edx
c001c3d8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c3dc:	52                   	push   edx
c001c3dd:	50                   	push   eax
c001c3de:	e8 b8 8a fe ff       	call   c0004e9b <f_open>
c001c3e3:	83 c4 10             	add    esp,0x10
c001c3e6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c3ed:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c3f5:	74 09                	je     c001c400 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c3f7:	b8 01 00 00 00       	mov    eax,0x1
c001c3fc:	eb 0a                	jmp    c001c408 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c3fe:	66 90                	xchg   ax,ax
c001c400:	b8 00 00 00 00       	mov    eax,0x0
c001c405:	8d 76 00             	lea    esi,[esi+0x0]
c001c408:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c40e:	c3                   	ret    
c001c40f:	90                   	nop

c001c410 <FAT::openDir(char const*, void**)>:
c001c410:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c416:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c41e:	74 0c                	je     c001c42c <FAT::openDir(char const*, void**)+0x1c>
c001c420:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c428:	75 0e                	jne    c001c438 <FAT::openDir(char const*, void**)+0x28>
c001c42a:	66 90                	xchg   ax,ax
c001c42c:	b8 04 00 00 00       	mov    eax,0x4
c001c431:	e9 82 00 00 00       	jmp    c001c4b8 <FAT::openDir(char const*, void**)+0xa8>
c001c436:	66 90                	xchg   ax,ax
c001c438:	83 ec 08             	sub    esp,0x8
c001c43b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c442:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c446:	50                   	push   eax
c001c447:	e8 04 43 fe ff       	call   c0000750 <strcpy>
c001c44c:	83 c4 10             	add    esp,0x10
c001c44f:	83 ec 08             	sub    esp,0x8
c001c452:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c456:	50                   	push   eax
c001c457:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c45e:	e8 3d fe ff ff       	call   c001c2a0 <FAT::fixFilepath(char*)>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	83 ec 0c             	sub    esp,0xc
c001c469:	6a 4c                	push   0x4c
c001c46b:	e8 77 d9 fe ff       	call   c0009de7 <malloc>
c001c470:	83 c4 10             	add    esp,0x10
c001c473:	89 c2                	mov    edx,eax
c001c475:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c47c:	89 10                	mov    DWORD PTR [eax],edx
c001c47e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c485:	8b 00                	mov    eax,DWORD PTR [eax]
c001c487:	83 ec 08             	sub    esp,0x8
c001c48a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c48e:	52                   	push   edx
c001c48f:	50                   	push   eax
c001c490:	e8 3e 9a fe ff       	call   c0005ed3 <f_opendir>
c001c495:	83 c4 10             	add    esp,0x10
c001c498:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c49f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c4a7:	74 07                	je     c001c4b0 <FAT::openDir(char const*, void**)+0xa0>
c001c4a9:	b8 01 00 00 00       	mov    eax,0x1
c001c4ae:	eb 08                	jmp    c001c4b8 <FAT::openDir(char const*, void**)+0xa8>
c001c4b0:	b8 00 00 00 00       	mov    eax,0x0
c001c4b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c4b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c4be:	c3                   	ret    
c001c4bf:	90                   	nop

c001c4c0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c4c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c4c6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c4ce:	75 0c                	jne    c001c4dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c4d0:	b8 04 00 00 00       	mov    eax,0x4
c001c4d5:	e9 d2 00 00 00       	jmp    c001c5ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c4da:	66 90                	xchg   ax,ax
c001c4dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c4e4:	75 0a                	jne    c001c4f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c4e6:	b8 04 00 00 00       	mov    eax,0x4
c001c4eb:	e9 bc 00 00 00       	jmp    c001c5ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c4f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c4f8:	75 0a                	jne    c001c504 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c4fa:	b8 04 00 00 00       	mov    eax,0x4
c001c4ff:	e9 a8 00 00 00       	jmp    c001c5ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c504:	83 ec 08             	sub    esp,0x8
c001c507:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c50e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c515:	50                   	push   eax
c001c516:	e8 35 42 fe ff       	call   c0000750 <strcpy>
c001c51b:	83 c4 10             	add    esp,0x10
c001c51e:	83 ec 08             	sub    esp,0x8
c001c521:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c528:	50                   	push   eax
c001c529:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c530:	e8 6b fd ff ff       	call   c001c2a0 <FAT::fixFilepath(char*)>
c001c535:	83 c4 10             	add    esp,0x10
c001c538:	83 ec 08             	sub    esp,0x8
c001c53b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c53f:	50                   	push   eax
c001c540:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c547:	50                   	push   eax
c001c548:	e8 45 9b fe ff       	call   c0006092 <f_stat>
c001c54d:	83 c4 10             	add    esp,0x10
c001c550:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c557:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c55e:	85 c0                	test   eax,eax
c001c560:	74 0a                	je     c001c56c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c562:	83 f8 04             	cmp    eax,0x4
c001c565:	74 35                	je     c001c59c <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c567:	eb 3b                	jmp    c001c5a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c569:	8d 76 00             	lea    esi,[esi+0x0]
c001c56c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c570:	0f b6 c0             	movzx  eax,al
c001c573:	83 e0 10             	and    eax,0x10
c001c576:	0f 95 c2             	setne  dl
c001c579:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c580:	88 10                	mov    BYTE PTR [eax],dl
c001c582:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c585:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c589:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c590:	89 01                	mov    DWORD PTR [ecx],eax
c001c592:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c595:	b8 00 00 00 00       	mov    eax,0x0
c001c59a:	eb 10                	jmp    c001c5ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c59c:	b8 02 00 00 00       	mov    eax,0x2
c001c5a1:	eb 09                	jmp    c001c5ac <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c5a3:	90                   	nop
c001c5a4:	b8 01 00 00 00       	mov    eax,0x1
c001c5a9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5ac:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c5b2:	c3                   	ret    
c001c5b3:	90                   	nop

c001c5b4 <FAT::unlink(char const*)>:
c001c5b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c5ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c5c2:	75 08                	jne    c001c5cc <FAT::unlink(char const*)+0x18>
c001c5c4:	b8 04 00 00 00       	mov    eax,0x4
c001c5c9:	eb 61                	jmp    c001c62c <FAT::unlink(char const*)+0x78>
c001c5cb:	90                   	nop
c001c5cc:	83 ec 08             	sub    esp,0x8
c001c5cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c5da:	50                   	push   eax
c001c5db:	e8 70 41 fe ff       	call   c0000750 <strcpy>
c001c5e0:	83 c4 10             	add    esp,0x10
c001c5e3:	83 ec 08             	sub    esp,0x8
c001c5e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5ea:	50                   	push   eax
c001c5eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5f2:	e8 a9 fc ff ff       	call   c001c2a0 <FAT::fixFilepath(char*)>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	83 ec 0c             	sub    esp,0xc
c001c5fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c601:	50                   	push   eax
c001c602:	e8 dd 9d fe ff       	call   c00063e4 <f_unlink>
c001c607:	83 c4 10             	add    esp,0x10
c001c60a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c611:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c618:	85 c0                	test   eax,eax
c001c61a:	75 08                	jne    c001c624 <FAT::unlink(char const*)+0x70>
c001c61c:	b8 00 00 00 00       	mov    eax,0x0
c001c621:	eb 09                	jmp    c001c62c <FAT::unlink(char const*)+0x78>
c001c623:	90                   	nop
c001c624:	b8 01 00 00 00       	mov    eax,0x1
c001c629:	8d 76 00             	lea    esi,[esi+0x0]
c001c62c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c632:	c3                   	ret    
c001c633:	90                   	nop

c001c634 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c634:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c63a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c641:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c648:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c64c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c650:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c658:	75 0a                	jne    c001c664 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c65a:	b8 04 00 00 00       	mov    eax,0x4
c001c65f:	e9 30 01 00 00       	jmp    c001c794 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c664:	83 ec 08             	sub    esp,0x8
c001c667:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c66e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c672:	50                   	push   eax
c001c673:	e8 d8 40 fe ff       	call   c0000750 <strcpy>
c001c678:	83 c4 10             	add    esp,0x10
c001c67b:	83 ec 08             	sub    esp,0x8
c001c67e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c682:	50                   	push   eax
c001c683:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c68a:	e8 11 fc ff ff       	call   c001c2a0 <FAT::fixFilepath(char*)>
c001c68f:	83 c4 10             	add    esp,0x10
c001c692:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c69a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c6a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6a7:	83 e0 01             	and    eax,0x1
c001c6aa:	74 08                	je     c001c6b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c6ac:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c6b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6b9:	83 e0 02             	and    eax,0x2
c001c6bc:	74 0a                	je     c001c6c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c6be:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c6c6:	66 90                	xchg   ax,ax
c001c6c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6cd:	83 e0 04             	and    eax,0x4
c001c6d0:	74 0a                	je     c001c6dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c6d2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c6da:	66 90                	xchg   ax,ax
c001c6dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6e1:	83 e0 08             	and    eax,0x8
c001c6e4:	74 0a                	je     c001c6f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c6e6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c6ee:	66 90                	xchg   ax,ax
c001c6f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6f5:	83 e0 01             	and    eax,0x1
c001c6f8:	74 0a                	je     c001c704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c6fa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c702:	66 90                	xchg   ax,ax
c001c704:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c709:	83 e0 02             	and    eax,0x2
c001c70c:	74 0a                	je     c001c718 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c70e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c716:	66 90                	xchg   ax,ax
c001c718:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c71d:	83 e0 04             	and    eax,0x4
c001c720:	74 0a                	je     c001c72c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c722:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c72a:	66 90                	xchg   ax,ax
c001c72c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c731:	83 e0 08             	and    eax,0x8
c001c734:	74 0a                	je     c001c740 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c736:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c73e:	66 90                	xchg   ax,ax
c001c740:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c747:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c74e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c756:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c75e:	83 ec 04             	sub    esp,0x4
c001c761:	52                   	push   edx
c001c762:	50                   	push   eax
c001c763:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c767:	50                   	push   eax
c001c768:	e8 19 a3 fe ff       	call   c0006a86 <f_chmod>
c001c76d:	83 c4 10             	add    esp,0x10
c001c770:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c777:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c77e:	85 c0                	test   eax,eax
c001c780:	75 0a                	jne    c001c78c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c782:	b8 00 00 00 00       	mov    eax,0x0
c001c787:	eb 0b                	jmp    c001c794 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c789:	8d 76 00             	lea    esi,[esi+0x0]
c001c78c:	b8 01 00 00 00       	mov    eax,0x1
c001c791:	8d 76 00             	lea    esi,[esi+0x0]
c001c794:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c79a:	c3                   	ret    
c001c79b:	90                   	nop

c001c79c <FAT::rename(char const*, char const*)>:
c001c79c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c7a2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c7aa:	74 0c                	je     c001c7b8 <FAT::rename(char const*, char const*)+0x1c>
c001c7ac:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c7b4:	75 0e                	jne    c001c7c4 <FAT::rename(char const*, char const*)+0x28>
c001c7b6:	66 90                	xchg   ax,ax
c001c7b8:	b8 04 00 00 00       	mov    eax,0x4
c001c7bd:	e9 9e 00 00 00       	jmp    c001c860 <FAT::rename(char const*, char const*)+0xc4>
c001c7c2:	66 90                	xchg   ax,ax
c001c7c4:	83 ec 08             	sub    esp,0x8
c001c7c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c7ce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c7d5:	50                   	push   eax
c001c7d6:	e8 75 3f fe ff       	call   c0000750 <strcpy>
c001c7db:	83 c4 10             	add    esp,0x10
c001c7de:	83 ec 08             	sub    esp,0x8
c001c7e1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c7e8:	50                   	push   eax
c001c7e9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c7f0:	e8 ab fa ff ff       	call   c001c2a0 <FAT::fixFilepath(char*)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	83 ec 08             	sub    esp,0x8
c001c7fb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c802:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c806:	50                   	push   eax
c001c807:	e8 44 3f fe ff       	call   c0000750 <strcpy>
c001c80c:	83 c4 10             	add    esp,0x10
c001c80f:	83 ec 08             	sub    esp,0x8
c001c812:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c816:	50                   	push   eax
c001c817:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c81e:	e8 7d fa ff ff       	call   c001c2a0 <FAT::fixFilepath(char*)>
c001c823:	83 c4 10             	add    esp,0x10
c001c826:	83 ec 08             	sub    esp,0x8
c001c829:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c82d:	50                   	push   eax
c001c82e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c835:	50                   	push   eax
c001c836:	e8 58 9f fe ff       	call   c0006793 <f_rename>
c001c83b:	83 c4 10             	add    esp,0x10
c001c83e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c845:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c84c:	85 c0                	test   eax,eax
c001c84e:	75 08                	jne    c001c858 <FAT::rename(char const*, char const*)+0xbc>
c001c850:	b8 00 00 00 00       	mov    eax,0x0
c001c855:	eb 09                	jmp    c001c860 <FAT::rename(char const*, char const*)+0xc4>
c001c857:	90                   	nop
c001c858:	b8 01 00 00 00       	mov    eax,0x1
c001c85d:	8d 76 00             	lea    esi,[esi+0x0]
c001c860:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c866:	c3                   	ret    
c001c867:	90                   	nop

c001c868 <FAT::mkdir(char const*)>:
c001c868:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c86e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c876:	75 08                	jne    c001c880 <FAT::mkdir(char const*)+0x18>
c001c878:	b8 04 00 00 00       	mov    eax,0x4
c001c87d:	eb 61                	jmp    c001c8e0 <FAT::mkdir(char const*)+0x78>
c001c87f:	90                   	nop
c001c880:	83 ec 08             	sub    esp,0x8
c001c883:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c88a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c88e:	50                   	push   eax
c001c88f:	e8 bc 3e fe ff       	call   c0000750 <strcpy>
c001c894:	83 c4 10             	add    esp,0x10
c001c897:	83 ec 08             	sub    esp,0x8
c001c89a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c89e:	50                   	push   eax
c001c89f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8a6:	e8 f5 f9 ff ff       	call   c001c2a0 <FAT::fixFilepath(char*)>
c001c8ab:	83 c4 10             	add    esp,0x10
c001c8ae:	83 ec 0c             	sub    esp,0xc
c001c8b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8b5:	50                   	push   eax
c001c8b6:	e8 ac 9c fe ff       	call   c0006567 <f_mkdir>
c001c8bb:	83 c4 10             	add    esp,0x10
c001c8be:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c8c5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c8cc:	85 c0                	test   eax,eax
c001c8ce:	75 08                	jne    c001c8d8 <FAT::mkdir(char const*)+0x70>
c001c8d0:	b8 00 00 00 00       	mov    eax,0x0
c001c8d5:	eb 09                	jmp    c001c8e0 <FAT::mkdir(char const*)+0x78>
c001c8d7:	90                   	nop
c001c8d8:	b8 01 00 00 00       	mov    eax,0x1
c001c8dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c8e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c8e6:	c3                   	ret    
c001c8e7:	90                   	nop

c001c8e8 <FAT::exists(char const*)>:
c001c8e8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c8ee:	83 ec 08             	sub    esp,0x8
c001c8f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c8f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c8fc:	50                   	push   eax
c001c8fd:	e8 4e 3e fe ff       	call   c0000750 <strcpy>
c001c902:	83 c4 10             	add    esp,0x10
c001c905:	83 ec 08             	sub    esp,0x8
c001c908:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c90c:	50                   	push   eax
c001c90d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c914:	e8 87 f9 ff ff       	call   c001c2a0 <FAT::fixFilepath(char*)>
c001c919:	83 c4 10             	add    esp,0x10
c001c91c:	83 ec 08             	sub    esp,0x8
c001c91f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c926:	50                   	push   eax
c001c927:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c92b:	50                   	push   eax
c001c92c:	e8 61 97 fe ff       	call   c0006092 <f_stat>
c001c931:	83 c4 10             	add    esp,0x10
c001c934:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c93b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c942:	85 c0                	test   eax,eax
c001c944:	75 06                	jne    c001c94c <FAT::exists(char const*)+0x64>
c001c946:	b0 01                	mov    al,0x1
c001c948:	eb 06                	jmp    c001c950 <FAT::exists(char const*)+0x68>
c001c94a:	66 90                	xchg   ax,ax
c001c94c:	b0 00                	mov    al,0x0
c001c94e:	66 90                	xchg   ax,ax
c001c950:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c956:	c3                   	ret    
c001c957:	90                   	nop

c001c958 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c958:	b8 08 00 00 00       	mov    eax,0x8
c001c95d:	c3                   	ret    

c001c95e <ISO9660::seek(void*, unsigned long long)>:
c001c95e:	53                   	push   ebx
c001c95f:	b8 04 00 00 00       	mov    eax,0x4
c001c964:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c968:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c96c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c970:	85 d2                	test   edx,edx
c001c972:	74 17                	je     c001c98b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c974:	89 c8                	mov    eax,ecx
c001c976:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c979:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c97c:	b8 01 00 00 00       	mov    eax,0x1
c001c981:	73 08                	jae    c001c98b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c983:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c986:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c989:	31 c0                	xor    eax,eax
c001c98b:	5b                   	pop    ebx
c001c98c:	c3                   	ret    
c001c98d:	90                   	nop

c001c98e <ISO9660::tell(void*, unsigned long long*)>:
c001c98e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c992:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c996:	85 d2                	test   edx,edx
c001c998:	74 12                	je     c001c9ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c99a:	85 c0                	test   eax,eax
c001c99c:	74 0e                	je     c001c9ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c99e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c9a1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c9a4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c9a7:	89 10                	mov    DWORD PTR [eax],edx
c001c9a9:	31 c0                	xor    eax,eax
c001c9ab:	c3                   	ret    
c001c9ac:	b8 04 00 00 00       	mov    eax,0x4
c001c9b1:	c3                   	ret    

c001c9b2 <ISO9660::getName()>:
c001c9b2:	b8 3c 70 02 c0       	mov    eax,0xc002703c
c001c9b7:	c3                   	ret    

c001c9b8 <ISO9660::stat(void*, unsigned long long*)>:
c001c9b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c9bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9c0:	85 d2                	test   edx,edx
c001c9c2:	74 12                	je     c001c9d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c9c4:	85 c0                	test   eax,eax
c001c9c6:	74 0e                	je     c001c9d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c9c8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c9cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c9ce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c9d1:	89 10                	mov    DWORD PTR [eax],edx
c001c9d3:	31 c0                	xor    eax,eax
c001c9d5:	c3                   	ret    
c001c9d6:	b8 04 00 00 00       	mov    eax,0x4
c001c9db:	c3                   	ret    

c001c9dc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c9dc:	b8 01 00 00 00       	mov    eax,0x1
c001c9e1:	c3                   	ret    

c001c9e2 <ISO9660::unlink(char const*)>:
c001c9e2:	b8 01 00 00 00       	mov    eax,0x1
c001c9e7:	c3                   	ret    

c001c9e8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c9e8:	b8 01 00 00 00       	mov    eax,0x1
c001c9ed:	c3                   	ret    

c001c9ee <ISO9660::rename(char const*, char const*)>:
c001c9ee:	b8 01 00 00 00       	mov    eax,0x1
c001c9f3:	c3                   	ret    

c001c9f4 <ISO9660::mkdir(char const*)>:
c001c9f4:	b8 01 00 00 00       	mov    eax,0x1
c001c9f9:	c3                   	ret    

c001c9fa <ISO9660::close(void*)>:
c001c9fa:	83 ec 0c             	sub    esp,0xc
c001c9fd:	b8 04 00 00 00       	mov    eax,0x4
c001ca02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca06:	85 d2                	test   edx,edx
c001ca08:	74 0e                	je     c001ca18 <ISO9660::close(void*)+0x1e>
c001ca0a:	83 ec 0c             	sub    esp,0xc
c001ca0d:	52                   	push   edx
c001ca0e:	e8 e4 d3 fe ff       	call   c0009df7 <free>
c001ca13:	83 c4 10             	add    esp,0x10
c001ca16:	31 c0                	xor    eax,eax
c001ca18:	83 c4 0c             	add    esp,0xc
c001ca1b:	c3                   	ret    

c001ca1c <ISO9660::closeDir(void*)>:
c001ca1c:	83 ec 0c             	sub    esp,0xc
c001ca1f:	b8 04 00 00 00       	mov    eax,0x4
c001ca24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca28:	85 d2                	test   edx,edx
c001ca2a:	74 0e                	je     c001ca3a <ISO9660::closeDir(void*)+0x1e>
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	52                   	push   edx
c001ca30:	e8 c2 d3 fe ff       	call   c0009df7 <free>
c001ca35:	83 c4 10             	add    esp,0x10
c001ca38:	31 c0                	xor    eax,eax
c001ca3a:	83 c4 0c             	add    esp,0xc
c001ca3d:	c3                   	ret    

c001ca3e <ISO9660::~ISO9660()>:
c001ca3e:	83 ec 0c             	sub    esp,0xc
c001ca41:	ba 60 70 02 c0       	mov    edx,0xc0027060
c001ca46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4a:	89 10                	mov    DWORD PTR [eax],edx
c001ca4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca50:	83 ec 0c             	sub    esp,0xc
c001ca53:	50                   	push   eax
c001ca54:	e8 a9 09 ff ff       	call   c000d402 <Filesystem::~Filesystem()>
c001ca59:	83 c4 10             	add    esp,0x10
c001ca5c:	90                   	nop
c001ca5d:	83 c4 0c             	add    esp,0xc
c001ca60:	c3                   	ret    
c001ca61:	90                   	nop

c001ca62 <ISO9660::~ISO9660()>:
c001ca62:	83 ec 0c             	sub    esp,0xc
c001ca65:	83 ec 0c             	sub    esp,0xc
c001ca68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca6c:	e8 cd ff ff ff       	call   c001ca3e <ISO9660::~ISO9660()>
c001ca71:	83 c4 10             	add    esp,0x10
c001ca74:	83 ec 08             	sub    esp,0x8
c001ca77:	6a 08                	push   0x8
c001ca79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca7d:	e8 64 05 ff ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c001ca82:	83 c4 10             	add    esp,0x10
c001ca85:	83 c4 0c             	add    esp,0xc
c001ca88:	c3                   	ret    

c001ca89 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ca89:	55                   	push   ebp
c001ca8a:	31 c9                	xor    ecx,ecx
c001ca8c:	57                   	push   edi
c001ca8d:	56                   	push   esi
c001ca8e:	53                   	push   ebx
c001ca8f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ca93:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ca97:	89 eb                	mov    ebx,ebp
c001ca99:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ca9d:	39 ce                	cmp    esi,ecx
c001ca9f:	7e 17                	jle    c001cab8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001caa1:	31 d2                	xor    edx,edx
c001caa3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001caa7:	7d 13                	jge    c001cabc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001caa9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001caad:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001cab0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001cab3:	75 0d                	jne    c001cac2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001cab5:	42                   	inc    edx
c001cab6:	eb eb                	jmp    c001caa3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001cab8:	31 c0                	xor    eax,eax
c001caba:	eb 0a                	jmp    c001cac6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001cabc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001cac0:	eb 04                	jmp    c001cac6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001cac2:	41                   	inc    ecx
c001cac3:	43                   	inc    ebx
c001cac4:	eb d7                	jmp    c001ca9d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001cac6:	5b                   	pop    ebx
c001cac7:	5e                   	pop    esi
c001cac8:	5f                   	pop    edi
c001cac9:	5d                   	pop    ebp
c001caca:	c3                   	ret    

c001cacb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cacb:	57                   	push   edi
c001cacc:	56                   	push   esi
c001cacd:	53                   	push   ebx
c001cace:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cad2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cad6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cada:	39 35 e0 a2 02 c0    	cmp    DWORD PTR ds:0xc002a2e0,esi
c001cae0:	75 08                	jne    c001caea <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001cae2:	38 1d f4 85 02 c0    	cmp    BYTE PTR ds:0xc00285f4,bl
c001cae8:	74 4a                	je     c001cb34 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001caea:	83 ec 0c             	sub    esp,0xc
c001caed:	31 d2                	xor    edx,edx
c001caef:	68 00 a3 02 c0       	push   0xc002a300
c001caf4:	0f be c3             	movsx  eax,bl
c001caf7:	6a 01                	push   0x1
c001caf9:	52                   	push   edx
c001cafa:	56                   	push   esi
c001cafb:	ff 34 85 7c 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f84]
c001cb02:	e8 43 3f ff ff       	call   c0010a4a <LogicalDisk::read(unsigned long long, int, void*)>
c001cb07:	83 c4 20             	add    esp,0x20
c001cb0a:	85 c0                	test   eax,eax
c001cb0c:	75 0e                	jne    c001cb1c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001cb0e:	89 35 e0 a2 02 c0    	mov    DWORD PTR ds:0xc002a2e0,esi
c001cb14:	88 1d f4 85 02 c0    	mov    BYTE PTR ds:0xc00285f4,bl
c001cb1a:	eb 18                	jmp    c001cb34 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cb1c:	50                   	push   eax
c001cb1d:	68 00 08 00 00       	push   0x800
c001cb22:	6a 00                	push   0x0
c001cb24:	57                   	push   edi
c001cb25:	e8 6a 3b fe ff       	call   c0000694 <memset>
c001cb2a:	83 c4 10             	add    esp,0x10
c001cb2d:	b8 01 00 00 00       	mov    eax,0x1
c001cb32:	eb 0e                	jmp    c001cb42 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001cb34:	be 00 a3 02 c0       	mov    esi,0xc002a300
c001cb39:	b9 00 08 00 00       	mov    ecx,0x800
c001cb3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb40:	31 c0                	xor    eax,eax
c001cb42:	5b                   	pop    ebx
c001cb43:	5e                   	pop    esi
c001cb44:	5f                   	pop    edi
c001cb45:	c3                   	ret    

c001cb46 <ISO9660::tryMount(LogicalDisk*, int)>:
c001cb46:	81 ec 10 08 00 00    	sub    esp,0x810
c001cb4c:	c7 05 e0 a2 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a2e0,0xdeadbeef
c001cb56:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001cb5d:	83 c0 41             	add    eax,0x41
c001cb60:	0f be c0             	movsx  eax,al
c001cb63:	50                   	push   eax
c001cb64:	8d 44 24 08          	lea    eax,[esp+0x8]
c001cb68:	50                   	push   eax
c001cb69:	6a 10                	push   0x10
c001cb6b:	e8 5b ff ff ff       	call   c001cacb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb70:	83 c4 10             	add    esp,0x10
c001cb73:	31 d2                	xor    edx,edx
c001cb75:	85 c0                	test   eax,eax
c001cb77:	75 24                	jne    c001cb9d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb79:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001cb7e:	75 1d                	jne    c001cb9d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb80:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001cb85:	75 16                	jne    c001cb9d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb87:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001cb8c:	75 0f                	jne    c001cb9d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb8e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001cb93:	75 08                	jne    c001cb9d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cb95:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001cb9a:	0f 94 c2             	sete   dl
c001cb9d:	88 d0                	mov    al,dl
c001cb9f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001cba5:	c3                   	ret    

c001cba6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cba6:	55                   	push   ebp
c001cba7:	57                   	push   edi
c001cba8:	56                   	push   esi
c001cba9:	53                   	push   ebx
c001cbaa:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001cbb0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001cbb7:	85 ed                	test   ebp,ebp
c001cbb9:	0f 84 da 01 00 00    	je     c001cd99 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cbbf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001cbc7:	0f 84 cc 01 00 00    	je     c001cd99 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cbcd:	b8 01 00 00 00       	mov    eax,0x1
c001cbd2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001cbd6:	0f 85 c2 01 00 00    	jne    c001cd9e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cbdc:	31 d2                	xor    edx,edx
c001cbde:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001cbe5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cbe8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001cbeb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001cbee:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbf1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cbf5:	01 c8                	add    eax,ecx
c001cbf7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cbfa:	11 da                	adc    edx,ebx
c001cbfc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001cc00:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cc04:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc08:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc0c:	19 d7                	sbb    edi,edx
c001cc0e:	72 11                	jb     c001cc21 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001cc10:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001cc13:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001cc17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cc1f:	eb 0c                	jmp    c001cc2d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001cc21:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001cc25:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc29:	29 ce                	sub    esi,ecx
c001cc2b:	19 df                	sbb    edi,ebx
c001cc2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc30:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001cc33:	0f a4 c2 0b          	shld   edx,eax,0xb
c001cc37:	c1 e0 0b             	shl    eax,0xb
c001cc3a:	01 c8                	add    eax,ecx
c001cc3c:	11 da                	adc    edx,ebx
c001cc3e:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc45:	51                   	push   ecx
c001cc46:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cc4a:	50                   	push   eax
c001cc4b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001cc4f:	53                   	push   ebx
c001cc50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cc54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc58:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cc5c:	50                   	push   eax
c001cc5d:	e8 69 fe ff ff       	call   c001cacb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cc62:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001cc65:	b8 00 08 00 00       	mov    eax,0x800
c001cc6a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001cc70:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001cc74:	29 d0                	sub    eax,edx
c001cc76:	83 c4 10             	add    esp,0x10
c001cc79:	89 f9                	mov    ecx,edi
c001cc7b:	39 c6                	cmp    esi,eax
c001cc7d:	83 d9 00             	sbb    ecx,0x0
c001cc80:	7d 1b                	jge    c001cc9d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001cc82:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cc87:	75 12                	jne    c001cc9b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001cc89:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cc90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cc96:	e9 fa 00 00 00       	jmp    c001cd95 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001cc9b:	89 f0                	mov    eax,esi
c001cc9d:	01 d3                	add    ebx,edx
c001cc9f:	31 d2                	xor    edx,edx
c001cca1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cca5:	39 c2                	cmp    edx,eax
c001cca7:	7d 14                	jge    c001ccbd <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001cca9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001ccb0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ccb4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001ccb7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001ccba:	42                   	inc    edx
c001ccbb:	eb e8                	jmp    c001cca5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001ccbd:	89 c2                	mov    edx,eax
c001ccbf:	85 c0                	test   eax,eax
c001ccc1:	79 02                	jns    c001ccc5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001ccc3:	31 d2                	xor    edx,edx
c001ccc5:	01 c2                	add    edx,eax
c001ccc7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001ccca:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001ccd1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001ccd5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ccd9:	99                   	cdq    
c001ccda:	01 c1                	add    ecx,eax
c001ccdc:	11 d3                	adc    ebx,edx
c001ccde:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001cce2:	29 c6                	sub    esi,eax
c001cce4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001cce8:	19 d7                	sbb    edi,edx
c001ccea:	89 34 24             	mov    DWORD PTR [esp],esi
c001cced:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001ccf1:	b8 ff 07 00 00       	mov    eax,0x7ff
c001ccf6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001ccf9:	b8 00 00 00 00       	mov    eax,0x0
c001ccfe:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001cd02:	7d 43                	jge    c001cd47 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001cd04:	52                   	push   edx
c001cd05:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cd09:	50                   	push   eax
c001cd0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cd12:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cd16:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cd1a:	50                   	push   eax
c001cd1b:	e8 ab fd ff ff       	call   c001cacb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cd20:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cd28:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001cd2d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001cd35:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cd3d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cd42:	83 c4 10             	add    esp,0x10
c001cd45:	eb aa                	jmp    c001ccf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cd47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd4b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cd4e:	74 2a                	je     c001cd7a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cd50:	50                   	push   eax
c001cd51:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cd55:	50                   	push   eax
c001cd56:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cd5a:	56                   	push   esi
c001cd5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd63:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cd67:	51                   	push   ecx
c001cd68:	e8 5e fd ff ff       	call   c001cacb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cd6d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cd71:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cd75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd77:	83 c4 10             	add    esp,0x10
c001cd7a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cd81:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cd85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cd89:	89 18                	mov    DWORD PTR [eax],ebx
c001cd8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd8f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cd92:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cd95:	31 c0                	xor    eax,eax
c001cd97:	eb 05                	jmp    c001cd9e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cd99:	b8 04 00 00 00       	mov    eax,0x4
c001cd9e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001cda4:	5b                   	pop    ebx
c001cda5:	5e                   	pop    esi
c001cda6:	5f                   	pop    edi
c001cda7:	5d                   	pop    ebp
c001cda8:	c3                   	ret    
c001cda9:	90                   	nop

c001cdaa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cdaa:	55                   	push   ebp
c001cdab:	57                   	push   edi
c001cdac:	56                   	push   esi
c001cdad:	53                   	push   ebx
c001cdae:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001cdb4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001cdbb:	85 ed                	test   ebp,ebp
c001cdbd:	0f 84 51 02 00 00    	je     c001d014 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cdc3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001cdcb:	0f 84 43 02 00 00    	je     c001d014 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cdd1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cdd4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001cdd7:	75 0a                	jne    c001cde3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001cdd9:	b8 07 00 00 00       	mov    eax,0x7
c001cdde:	e9 36 02 00 00       	jmp    c001d019 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001cde3:	50                   	push   eax
c001cde4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cde8:	50                   	push   eax
c001cde9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cdf0:	53                   	push   ebx
c001cdf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cdf4:	c1 e0 0b             	shl    eax,0xb
c001cdf7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001cdfa:	c1 e8 0b             	shr    eax,0xb
c001cdfd:	50                   	push   eax
c001cdfe:	e8 c8 fc ff ff       	call   c001cacb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce06:	83 c4 10             	add    esp,0x10
c001ce09:	89 c1                	mov    ecx,eax
c001ce0b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001ce0e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ce14:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001ce17:	84 db                	test   bl,bl
c001ce19:	0f 85 8b 00 00 00    	jne    c001ceaa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001ce1f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001ce25:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ce28:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001ce2e:	29 c6                	sub    esi,eax
c001ce30:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001ce34:	89 f3                	mov    ebx,esi
c001ce36:	89 f1                	mov    ecx,esi
c001ce38:	c1 fb 1f             	sar    ebx,0x1f
c001ce3b:	01 f0                	add    eax,esi
c001ce3d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ce40:	11 da                	adc    edx,ebx
c001ce42:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ce49:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001ce4c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ce4f:	89 d8                	mov    eax,ebx
c001ce51:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001ce55:	ba 00 00 00 00       	mov    edx,0x0
c001ce5a:	19 f8                	sbb    eax,edi
c001ce5c:	b8 00 00 00 00       	mov    eax,0x0
c001ce61:	73 08                	jae    c001ce6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001ce63:	89 f0                	mov    eax,esi
c001ce65:	89 fa                	mov    edx,edi
c001ce67:	29 c8                	sub    eax,ecx
c001ce69:	19 da                	sbb    edx,ebx
c001ce6b:	89 d7                	mov    edi,edx
c001ce6d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ce70:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ce73:	09 c7                	or     edi,eax
c001ce75:	0f 84 5e ff ff ff    	je     c001cdd9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001ce7b:	57                   	push   edi
c001ce7c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ce80:	50                   	push   eax
c001ce81:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ce88:	53                   	push   ebx
c001ce89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce8c:	c1 e0 0b             	shl    eax,0xb
c001ce8f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001ce93:	c1 e8 0b             	shr    eax,0xb
c001ce96:	50                   	push   eax
c001ce97:	e8 2f fc ff ff       	call   c001cacb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce9c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce9f:	83 c4 10             	add    esp,0x10
c001cea2:	25 ff 07 00 00       	and    eax,0x7ff
c001cea7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ceaa:	31 ff                	xor    edi,edi
c001ceac:	56                   	push   esi
c001cead:	6a 28                	push   0x28
c001ceaf:	6a 00                	push   0x0
c001ceb1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ceb5:	50                   	push   eax
c001ceb6:	e8 d9 37 fe ff       	call   c0000694 <memset>
c001cebb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cebe:	25 ff 07 00 00       	and    eax,0x7ff
c001cec3:	89 c6                	mov    esi,eax
c001cec5:	83 c6 21             	add    esi,0x21
c001cec8:	83 d7 00             	adc    edi,0x0
c001cecb:	83 c4 10             	add    esp,0x10
c001cece:	31 c9                	xor    ecx,ecx
c001ced0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001ced7:	83 f9 28             	cmp    ecx,0x28
c001ceda:	88 04 24             	mov    BYTE PTR [esp],al
c001cedd:	0f 94 c2             	sete   dl
c001cee0:	88 d0                	mov    al,dl
c001cee2:	ba ff 07 00 00       	mov    edx,0x7ff
c001cee7:	39 f2                	cmp    edx,esi
c001cee9:	ba 00 00 00 00       	mov    edx,0x0
c001ceee:	19 fa                	sbb    edx,edi
c001cef0:	0f 92 c2             	setb   dl
c001cef3:	09 c2                	or     edx,eax
c001cef5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cef9:	0f 94 c0             	sete   al
c001cefc:	08 d0                	or     al,dl
c001cefe:	75 16                	jne    c001cf16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf00:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cf04:	74 10                	je     c001cf16 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf06:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cf09:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cf0d:	41                   	inc    ecx
c001cf0e:	83 c6 01             	add    esi,0x1
c001cf11:	83 d7 00             	adc    edi,0x0
c001cf14:	eb ba                	jmp    c001ced0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cf16:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cf1d:	83 ec 0c             	sub    esp,0xc
c001cf20:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cf24:	56                   	push   esi
c001cf25:	e8 86 37 fe ff       	call   c00006b0 <strlen>
c001cf2a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cf31:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cf35:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cf3d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cf40:	5a                   	pop    edx
c001cf41:	25 ff 07 00 00       	and    eax,0x7ff
c001cf46:	59                   	pop    ecx
c001cf47:	01 f8                	add    eax,edi
c001cf49:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cf4f:	83 e0 02             	and    eax,0x2
c001cf52:	3c 01                	cmp    al,0x1
c001cf54:	19 c0                	sbb    eax,eax
c001cf56:	83 c0 02             	add    eax,0x2
c001cf59:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cf5d:	56                   	push   esi
c001cf5e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cf62:	50                   	push   eax
c001cf63:	e8 e8 37 fe ff       	call   c0000750 <strcpy>
c001cf68:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	84 c0                	test   al,al
c001cf71:	75 21                	jne    c001cf94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cf73:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cf7b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf83:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cf8b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001cf92:	eb 28                	jmp    c001cfbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cf94:	fe c8                	dec    al
c001cf96:	75 24                	jne    c001cfbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cf98:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001cfa0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cfa8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cfb0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001cfb7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001cfbc:	8d 74 24 40          	lea    esi,[esp+0x40]
c001cfc0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001cfc7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001cfce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cfd0:	0f b6 f3             	movzx  esi,bl
c001cfd3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001cfda:	31 db                	xor    ebx,ebx
c001cfdc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001cfe2:	89 df                	mov    edi,ebx
c001cfe4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001cfe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cfea:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001cfed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001cff0:	39 c6                	cmp    esi,eax
c001cff2:	19 d7                	sbb    edi,edx
c001cff4:	72 10                	jb     c001d006 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001cff6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001cffd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001d004:	eb 0a                	jmp    c001d010 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001d006:	29 f0                	sub    eax,esi
c001d008:	19 da                	sbb    edx,ebx
c001d00a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001d00d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001d010:	31 c0                	xor    eax,eax
c001d012:	eb 05                	jmp    c001d019 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001d014:	b8 04 00 00 00       	mov    eax,0x4
c001d019:	81 c4 5c 09 00 00    	add    esp,0x95c
c001d01f:	5b                   	pop    ebx
c001d020:	5e                   	pop    esi
c001d021:	5f                   	pop    edi
c001d022:	5d                   	pop    ebp
c001d023:	c3                   	ret    

c001d024 <readRoot(unsigned int*, unsigned int*, char)>:
c001d024:	57                   	push   edi
c001d025:	56                   	push   esi
c001d026:	81 ec 38 08 00 00    	sub    esp,0x838
c001d02c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001d034:	50                   	push   eax
c001d035:	8d 44 24 38          	lea    eax,[esp+0x38]
c001d039:	50                   	push   eax
c001d03a:	6a 10                	push   0x10
c001d03c:	e8 8a fa ff ff       	call   c001cacb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d041:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001d048:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001d04c:	b9 22 00 00 00       	mov    ecx,0x22
c001d051:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d053:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001d05a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d05e:	89 10                	mov    DWORD PTR [eax],edx
c001d060:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001d067:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d06b:	89 10                	mov    DWORD PTR [eax],edx
c001d06d:	81 c4 44 08 00 00    	add    esp,0x844
c001d073:	b0 01                	mov    al,0x1
c001d075:	5e                   	pop    esi
c001d076:	5f                   	pop    edi
c001d077:	c3                   	ret    

c001d078 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001d078:	55                   	push   ebp
c001d079:	57                   	push   edi
c001d07a:	56                   	push   esi
c001d07b:	53                   	push   ebx
c001d07c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d082:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d089:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001d090:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d094:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001d098:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d09c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d0a0:	75 03                	jne    c001d0a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d0a2:	83 c3 02             	add    ebx,0x2
c001d0a5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001d0a8:	75 03                	jne    c001d0ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001d0aa:	43                   	inc    ebx
c001d0ab:	eb f8                	jmp    c001d0a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d0ad:	52                   	push   edx
c001d0ae:	68 00 01 00 00       	push   0x100
c001d0b3:	6a 00                	push   0x0
c001d0b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0b9:	50                   	push   eax
c001d0ba:	e8 d5 35 fe ff       	call   c0000694 <memset>
c001d0bf:	83 c4 10             	add    esp,0x10
c001d0c2:	31 d2                	xor    edx,edx
c001d0c4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001d0c7:	84 c0                	test   al,al
c001d0c9:	74 21                	je     c001d0ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001d0cb:	3c 2f                	cmp    al,0x2f
c001d0cd:	75 0b                	jne    c001d0da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001d0cf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001d0d3:	bd 01 00 00 00       	mov    ebp,0x1
c001d0d8:	eb 14                	jmp    c001d0ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001d0da:	8d 48 9f             	lea    ecx,[eax-0x61]
c001d0dd:	80 f9 19             	cmp    cl,0x19
c001d0e0:	77 03                	ja     c001d0e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d0e2:	83 e8 20             	sub    eax,0x20
c001d0e5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001d0e9:	42                   	inc    edx
c001d0ea:	eb d8                	jmp    c001d0c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001d0ec:	31 ed                	xor    ebp,ebp
c001d0ee:	83 ec 0c             	sub    esp,0xc
c001d0f1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001d0f8:	e8 ea cc fe ff       	call   c0009de7 <malloc>
c001d0fd:	89 c6                	mov    esi,eax
c001d0ff:	89 c2                	mov    edx,eax
c001d101:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001d108:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001d10e:	c1 ef 0b             	shr    edi,0xb
c001d111:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001d118:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001d11c:	83 c4 10             	add    esp,0x10
c001d11f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001d124:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d128:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001d12f:	74 29                	je     c001d15a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001d131:	50                   	push   eax
c001d132:	57                   	push   edi
c001d133:	52                   	push   edx
c001d134:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d138:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001d13f:	e8 87 f9 ff ff       	call   c001cacb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d144:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d148:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001d14f:	81 c2 00 08 00 00    	add    edx,0x800
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	eb ca                	jmp    c001d124 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001d15a:	83 ec 0c             	sub    esp,0xc
c001d15d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d161:	57                   	push   edi
c001d162:	e8 49 35 fe ff       	call   c00006b0 <strlen>
c001d167:	50                   	push   eax
c001d168:	57                   	push   edi
c001d169:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001d170:	56                   	push   esi
c001d171:	e8 13 f9 ff ff       	call   c001ca89 <__memmem(unsigned char*, int, unsigned char*, int)>
c001d176:	83 c4 20             	add    esp,0x20
c001d179:	85 c0                	test   eax,eax
c001d17b:	75 13                	jne    c001d190 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001d17d:	83 ec 0c             	sub    esp,0xc
c001d180:	56                   	push   esi
c001d181:	e8 71 cc fe ff       	call   c0009df7 <free>
c001d186:	83 c4 10             	add    esp,0x10
c001d189:	31 c0                	xor    eax,eax
c001d18b:	e9 b3 00 00 00       	jmp    c001d243 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d190:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001d194:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001d198:	c1 e7 08             	shl    edi,0x8
c001d19b:	c1 e2 10             	shl    edx,0x10
c001d19e:	09 d7                	or     edi,edx
c001d1a0:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001d1a4:	09 d7                	or     edi,edx
c001d1a6:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001d1aa:	c1 e2 18             	shl    edx,0x18
c001d1ad:	09 d7                	or     edi,edx
c001d1af:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001d1b3:	89 d1                	mov    ecx,edx
c001d1b5:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001d1b9:	c1 e1 08             	shl    ecx,0x8
c001d1bc:	c1 e2 10             	shl    edx,0x10
c001d1bf:	09 ca                	or     edx,ecx
c001d1c1:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001d1c5:	09 ca                	or     edx,ecx
c001d1c7:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001d1cb:	c1 e1 18             	shl    ecx,0x18
c001d1ce:	09 ca                	or     edx,ecx
c001d1d0:	89 e9                	mov    ecx,ebp
c001d1d2:	84 c9                	test   cl,cl
c001d1d4:	74 3c                	je     c001d212 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001d1d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d1da:	83 ec 0c             	sub    esp,0xc
c001d1dd:	56                   	push   esi
c001d1de:	e8 14 cc fe ff       	call   c0009df7 <free>
c001d1e3:	83 c4 0c             	add    esp,0xc
c001d1e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d1ed:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d1f2:	50                   	push   eax
c001d1f3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d1fa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d201:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d205:	52                   	push   edx
c001d206:	57                   	push   edi
c001d207:	53                   	push   ebx
c001d208:	e8 6b fe ff ff       	call   c001d078 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d20d:	83 c4 20             	add    esp,0x20
c001d210:	eb 31                	jmp    c001d243 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d212:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001d215:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001d21c:	d0 e8                	shr    al,1
c001d21e:	89 3b                	mov    DWORD PTR [ebx],edi
c001d220:	83 e0 01             	and    eax,0x1
c001d223:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d22a:	83 ec 0c             	sub    esp,0xc
c001d22d:	89 13                	mov    DWORD PTR [ebx],edx
c001d22f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001d236:	89 03                	mov    DWORD PTR [ebx],eax
c001d238:	56                   	push   esi
c001d239:	e8 b9 cb fe ff       	call   c0009df7 <free>
c001d23e:	83 c4 10             	add    esp,0x10
c001d241:	b0 01                	mov    al,0x1
c001d243:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d249:	5b                   	pop    ebx
c001d24a:	5e                   	pop    esi
c001d24b:	5f                   	pop    edi
c001d24c:	5d                   	pop    ebp
c001d24d:	c3                   	ret    

c001d24e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d24e:	55                   	push   ebp
c001d24f:	57                   	push   edi
c001d250:	56                   	push   esi
c001d251:	53                   	push   ebx
c001d252:	83 ec 20             	sub    esp,0x20
c001d255:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d259:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d25d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d261:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d269:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d271:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d276:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d27c:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d282:	57                   	push   edi
c001d283:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d287:	50                   	push   eax
c001d288:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d28c:	50                   	push   eax
c001d28d:	e8 92 fd ff ff       	call   c001d024 <readRoot(unsigned int*, unsigned int*, char)>
c001d292:	5a                   	pop    edx
c001d293:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d297:	e8 14 34 fe ff       	call   c00006b0 <strlen>
c001d29c:	83 c4 10             	add    esp,0x10
c001d29f:	83 f8 03             	cmp    eax,0x3
c001d2a2:	77 17                	ja     c001d2bb <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d2a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2a8:	89 03                	mov    DWORD PTR [ebx],eax
c001d2aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ae:	89 06                	mov    DWORD PTR [esi],eax
c001d2b0:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d2b7:	b0 01                	mov    al,0x1
c001d2b9:	eb 19                	jmp    c001d2d4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d2bb:	50                   	push   eax
c001d2bc:	55                   	push   ebp
c001d2bd:	57                   	push   edi
c001d2be:	56                   	push   esi
c001d2bf:	53                   	push   ebx
c001d2c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2cc:	e8 a7 fd ff ff       	call   c001d078 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d2d1:	83 c4 20             	add    esp,0x20
c001d2d4:	83 c4 1c             	add    esp,0x1c
c001d2d7:	5b                   	pop    ebx
c001d2d8:	5e                   	pop    esi
c001d2d9:	5f                   	pop    edi
c001d2da:	5d                   	pop    ebp
c001d2db:	c3                   	ret    

c001d2dc <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d2dc:	57                   	push   edi
c001d2dd:	56                   	push   esi
c001d2de:	53                   	push   ebx
c001d2df:	83 ec 10             	sub    esp,0x10
c001d2e2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d2e6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d2ea:	85 ff                	test   edi,edi
c001d2ec:	0f 84 8b 00 00 00    	je     c001d37d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d2f2:	85 f6                	test   esi,esi
c001d2f4:	0f 84 83 00 00 00    	je     c001d37d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d2fa:	b8 03 00 00 00       	mov    eax,0x3
c001d2ff:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d304:	75 7c                	jne    c001d382 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d306:	83 ec 0c             	sub    esp,0xc
c001d309:	6a 1c                	push   0x1c
c001d30b:	e8 d7 ca fe ff       	call   c0009de7 <malloc>
c001d310:	89 07                	mov    DWORD PTR [edi],eax
c001d312:	89 c3                	mov    ebx,eax
c001d314:	58                   	pop    eax
c001d315:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d319:	50                   	push   eax
c001d31a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d31d:	50                   	push   eax
c001d31e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d322:	50                   	push   eax
c001d323:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d327:	50                   	push   eax
c001d328:	56                   	push   esi
c001d329:	e8 20 ff ff ff       	call   c001d24e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d32e:	83 c4 20             	add    esp,0x20
c001d331:	84 c0                	test   al,al
c001d333:	74 07                	je     c001d33c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d335:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d33a:	74 0b                	je     c001d347 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d33c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d340:	b8 01 00 00 00       	mov    eax,0x1
c001d345:	eb 3b                	jmp    c001d382 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d347:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d34b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d34f:	89 03                	mov    DWORD PTR [ebx],eax
c001d351:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d358:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d35c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d363:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d36a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d36d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d374:	8a 06                	mov    al,BYTE PTR [esi]
c001d376:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d379:	31 c0                	xor    eax,eax
c001d37b:	eb 05                	jmp    c001d382 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d37d:	b8 04 00 00 00       	mov    eax,0x4
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	5b                   	pop    ebx
c001d386:	5e                   	pop    esi
c001d387:	5f                   	pop    edi
c001d388:	c3                   	ret    
c001d389:	90                   	nop

c001d38a <ISO9660::exists(char const*)>:
c001d38a:	83 ec 28             	sub    esp,0x28
c001d38d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d391:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d395:	52                   	push   edx
c001d396:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d399:	52                   	push   edx
c001d39a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d39e:	52                   	push   edx
c001d39f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d3a3:	52                   	push   edx
c001d3a4:	50                   	push   eax
c001d3a5:	e8 a4 fe ff ff       	call   c001d24e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d3aa:	83 c4 3c             	add    esp,0x3c
c001d3ad:	c3                   	ret    

c001d3ae <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d3ae:	56                   	push   esi
c001d3af:	53                   	push   ebx
c001d3b0:	83 ec 14             	sub    esp,0x14
c001d3b3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d3b7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3bb:	85 db                	test   ebx,ebx
c001d3bd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d3c1:	0f 94 c2             	sete   dl
c001d3c4:	85 f6                	test   esi,esi
c001d3c6:	0f 94 c0             	sete   al
c001d3c9:	08 c2                	or     dl,al
c001d3cb:	75 68                	jne    c001d435 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d3cd:	85 c9                	test   ecx,ecx
c001d3cf:	74 64                	je     c001d435 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d3d1:	83 ec 0c             	sub    esp,0xc
c001d3d4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d3d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d3db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d3e1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d3e8:	50                   	push   eax
c001d3e9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d3ec:	50                   	push   eax
c001d3ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3f1:	50                   	push   eax
c001d3f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3f6:	50                   	push   eax
c001d3f7:	51                   	push   ecx
c001d3f8:	e8 51 fe ff ff       	call   c001d24e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d3fd:	83 c4 20             	add    esp,0x20
c001d400:	ba 01 00 00 00       	mov    edx,0x1
c001d405:	84 c0                	test   al,al
c001d407:	74 31                	je     c001d43a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d409:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d40d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d414:	89 03                	mov    DWORD PTR [ebx],eax
c001d416:	ba 00 00 00 00       	mov    edx,0x0
c001d41b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d41f:	85 c0                	test   eax,eax
c001d421:	0f 95 06             	setne  BYTE PTR [esi]
c001d424:	74 14                	je     c001d43a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d426:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d42c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d433:	eb 05                	jmp    c001d43a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d435:	ba 04 00 00 00       	mov    edx,0x4
c001d43a:	83 c4 14             	add    esp,0x14
c001d43d:	89 d0                	mov    eax,edx
c001d43f:	5b                   	pop    ebx
c001d440:	5e                   	pop    esi
c001d441:	c3                   	ret    

c001d442 <ISO9660::openDir(char const*, void**)>:
c001d442:	57                   	push   edi
c001d443:	56                   	push   esi
c001d444:	53                   	push   ebx
c001d445:	83 ec 10             	sub    esp,0x10
c001d448:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d44c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d450:	85 ff                	test   edi,edi
c001d452:	74 7b                	je     c001d4cf <ISO9660::openDir(char const*, void**)+0x8d>
c001d454:	85 f6                	test   esi,esi
c001d456:	74 77                	je     c001d4cf <ISO9660::openDir(char const*, void**)+0x8d>
c001d458:	83 ec 0c             	sub    esp,0xc
c001d45b:	6a 1c                	push   0x1c
c001d45d:	e8 85 c9 fe ff       	call   c0009de7 <malloc>
c001d462:	89 07                	mov    DWORD PTR [edi],eax
c001d464:	89 c3                	mov    ebx,eax
c001d466:	58                   	pop    eax
c001d467:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d46b:	50                   	push   eax
c001d46c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d46f:	50                   	push   eax
c001d470:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d474:	50                   	push   eax
c001d475:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d479:	50                   	push   eax
c001d47a:	56                   	push   esi
c001d47b:	e8 ce fd ff ff       	call   c001d24e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d480:	83 c4 20             	add    esp,0x20
c001d483:	84 c0                	test   al,al
c001d485:	74 07                	je     c001d48e <ISO9660::openDir(char const*, void**)+0x4c>
c001d487:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d48c:	75 0b                	jne    c001d499 <ISO9660::openDir(char const*, void**)+0x57>
c001d48e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d492:	b8 01 00 00 00       	mov    eax,0x1
c001d497:	eb 3b                	jmp    c001d4d4 <ISO9660::openDir(char const*, void**)+0x92>
c001d499:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d49d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d4a1:	89 03                	mov    DWORD PTR [ebx],eax
c001d4a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d4b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d4bc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d4bf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d4c6:	8a 06                	mov    al,BYTE PTR [esi]
c001d4c8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d4cb:	31 c0                	xor    eax,eax
c001d4cd:	eb 05                	jmp    c001d4d4 <ISO9660::openDir(char const*, void**)+0x92>
c001d4cf:	b8 04 00 00 00       	mov    eax,0x4
c001d4d4:	83 c4 10             	add    esp,0x10
c001d4d7:	5b                   	pop    ebx
c001d4d8:	5e                   	pop    esi
c001d4d9:	5f                   	pop    edi
c001d4da:	c3                   	ret    
c001d4db:	90                   	nop

c001d4dc <ISO9660::ISO9660()>:
c001d4dc:	83 ec 0c             	sub    esp,0xc
c001d4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e3:	83 ec 0c             	sub    esp,0xc
c001d4e6:	50                   	push   eax
c001d4e7:	e8 f2 fe fe ff       	call   c000d3de <Filesystem::Filesystem()>
c001d4ec:	83 c4 10             	add    esp,0x10
c001d4ef:	ba 60 70 02 c0       	mov    edx,0xc0027060
c001d4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4f8:	89 10                	mov    DWORD PTR [eax],edx
c001d4fa:	90                   	nop
c001d4fb:	83 c4 0c             	add    esp,0xc
c001d4fe:	c3                   	ret    
c001d4ff:	90                   	nop

c001d500 <SoundCard::beginPlayback()>:
c001d500:	c7 44 24 04 c0 70 02 c0 	mov    DWORD PTR [esp+0x4],0xc00270c0
c001d508:	e9 9c 7c ff ff       	jmp    c00151a9 <Krnl::panic(char const*)>
c001d50d:	90                   	nop

c001d50e <SoundCard::stopPlayback()>:
c001d50e:	c7 44 24 04 f4 70 02 c0 	mov    DWORD PTR [esp+0x4],0xc00270f4
c001d516:	e9 8e 7c ff ff       	jmp    c00151a9 <Krnl::panic(char const*)>
c001d51b:	90                   	nop

c001d51c <SoundCard::SoundCard(char const*)>:
c001d51c:	83 ec 1c             	sub    esp,0x1c
c001d51f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d523:	83 ec 08             	sub    esp,0x8
c001d526:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d52a:	50                   	push   eax
c001d52b:	e8 0e 13 ff ff       	call   c000e83e <Device::Device(char const*)>
c001d530:	83 c4 10             	add    esp,0x10
c001d533:	ba 8c 71 02 c0       	mov    edx,0xc002718c
c001d538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d53c:	89 10                	mov    DWORD PTR [eax],edx
c001d53e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d542:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d54d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d55b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d569:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d577:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d581:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d589:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d58e:	7f 19                	jg     c001d5a9 <SoundCard::SoundCard(char const*)+0x8d>
c001d590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d594:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d598:	83 c2 54             	add    edx,0x54
c001d59b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d5a3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d5a7:	eb e0                	jmp    c001d589 <SoundCard::SoundCard(char const*)+0x6d>
c001d5a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5ad:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d5b4:	90                   	nop
c001d5b5:	83 c4 1c             	add    esp,0x1c
c001d5b8:	c3                   	ret    
c001d5b9:	90                   	nop

c001d5ba <SoundCard::~SoundCard()>:
c001d5ba:	83 ec 0c             	sub    esp,0xc
c001d5bd:	ba 8c 71 02 c0       	mov    edx,0xc002718c
c001d5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c6:	89 10                	mov    DWORD PTR [eax],edx
c001d5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5cc:	83 ec 0c             	sub    esp,0xc
c001d5cf:	50                   	push   eax
c001d5d0:	e8 33 0f ff ff       	call   c000e508 <Device::~Device()>
c001d5d5:	83 c4 10             	add    esp,0x10
c001d5d8:	90                   	nop
c001d5d9:	83 c4 0c             	add    esp,0xc
c001d5dc:	c3                   	ret    
c001d5dd:	90                   	nop

c001d5de <SoundCard::~SoundCard()>:
c001d5de:	83 ec 0c             	sub    esp,0xc
c001d5e1:	83 ec 0c             	sub    esp,0xc
c001d5e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5e8:	e8 cd ff ff ff       	call   c001d5ba <SoundCard::~SoundCard()>
c001d5ed:	83 c4 10             	add    esp,0x10
c001d5f0:	83 ec 08             	sub    esp,0x8
c001d5f3:	68 e8 01 00 00       	push   0x1e8
c001d5f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5fc:	e8 e5 f9 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c001d601:	83 c4 10             	add    esp,0x10
c001d604:	83 c4 0c             	add    esp,0xc
c001d607:	c3                   	ret    

c001d608 <SoundCard::configureRates(int, int, int)>:
c001d608:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d60c:	31 c0                	xor    eax,eax
c001d60e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d615:	75 20                	jne    c001d637 <SoundCard::configureRates(int, int, int)+0x2f>
c001d617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d61b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d625:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d635:	b0 01                	mov    al,0x1
c001d637:	c3                   	ret    

c001d638 <SoundCard::getSamples16(int, short*)>:
c001d638:	55                   	push   ebp
c001d639:	57                   	push   edi
c001d63a:	31 ff                	xor    edi,edi
c001d63c:	56                   	push   esi
c001d63d:	53                   	push   ebx
c001d63e:	31 db                	xor    ebx,ebx
c001d640:	83 ec 18             	sub    esp,0x18
c001d643:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d647:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d64b:	68 27 71 02 c0       	push   0xc0027127
c001d650:	e8 72 fa fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001d655:	83 c4 0c             	add    esp,0xc
c001d658:	8d 04 36             	lea    eax,[esi+esi*1]
c001d65b:	50                   	push   eax
c001d65c:	6a 00                	push   0x0
c001d65e:	55                   	push   ebp
c001d65f:	e8 30 30 fe ff       	call   c0000694 <memset>
c001d664:	83 c4 10             	add    esp,0x10
c001d667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d66b:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d672:	85 c0                	test   eax,eax
c001d674:	74 1b                	je     c001d691 <SoundCard::getSamples16(int, short*)+0x59>
c001d676:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d67a:	75 15                	jne    c001d691 <SoundCard::getSamples16(int, short*)+0x59>
c001d67c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d680:	55                   	push   ebp
c001d681:	56                   	push   esi
c001d682:	50                   	push   eax
c001d683:	e8 58 03 00 00       	call   c001d9e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d688:	83 c4 10             	add    esp,0x10
c001d68b:	39 c7                	cmp    edi,eax
c001d68d:	7d 02                	jge    c001d691 <SoundCard::getSamples16(int, short*)+0x59>
c001d68f:	89 c7                	mov    edi,eax
c001d691:	43                   	inc    ebx
c001d692:	83 fb 20             	cmp    ebx,0x20
c001d695:	75 d0                	jne    c001d667 <SoundCard::getSamples16(int, short*)+0x2f>
c001d697:	83 c4 0c             	add    esp,0xc
c001d69a:	89 f8                	mov    eax,edi
c001d69c:	5b                   	pop    ebx
c001d69d:	5e                   	pop    esi
c001d69e:	5f                   	pop    edi
c001d69f:	5d                   	pop    ebp
c001d6a0:	c3                   	ret    
c001d6a1:	90                   	nop

c001d6a2 <SoundCard::getSamples32(int, int*)>:
c001d6a2:	55                   	push   ebp
c001d6a3:	57                   	push   edi
c001d6a4:	31 ff                	xor    edi,edi
c001d6a6:	56                   	push   esi
c001d6a7:	31 f6                	xor    esi,esi
c001d6a9:	53                   	push   ebx
c001d6aa:	83 ec 10             	sub    esp,0x10
c001d6ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6b1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6b5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d6b9:	c1 e0 02             	shl    eax,0x2
c001d6bc:	50                   	push   eax
c001d6bd:	6a 00                	push   0x0
c001d6bf:	55                   	push   ebp
c001d6c0:	e8 cf 2f fe ff       	call   c0000694 <memset>
c001d6c5:	83 c4 10             	add    esp,0x10
c001d6c8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d6cf:	85 c0                	test   eax,eax
c001d6d1:	74 1b                	je     c001d6ee <SoundCard::getSamples32(int, int*)+0x4c>
c001d6d3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d6d7:	75 15                	jne    c001d6ee <SoundCard::getSamples32(int, int*)+0x4c>
c001d6d9:	53                   	push   ebx
c001d6da:	55                   	push   ebp
c001d6db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6df:	50                   	push   eax
c001d6e0:	e8 f7 03 00 00       	call   c001dadc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d6e5:	83 c4 10             	add    esp,0x10
c001d6e8:	39 c6                	cmp    esi,eax
c001d6ea:	7d 02                	jge    c001d6ee <SoundCard::getSamples32(int, int*)+0x4c>
c001d6ec:	89 c6                	mov    esi,eax
c001d6ee:	47                   	inc    edi
c001d6ef:	83 ff 20             	cmp    edi,0x20
c001d6f2:	75 d4                	jne    c001d6c8 <SoundCard::getSamples32(int, int*)+0x26>
c001d6f4:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d6fa:	85 f6                	test   esi,esi
c001d6fc:	75 0f                	jne    c001d70d <SoundCard::getSamples32(int, int*)+0x6b>
c001d6fe:	84 c0                	test   al,al
c001d700:	74 1b                	je     c001d71d <SoundCard::getSamples32(int, int*)+0x7b>
c001d702:	83 ec 0c             	sub    esp,0xc
c001d705:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d707:	53                   	push   ebx
c001d708:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d70b:	eb 0d                	jmp    c001d71a <SoundCard::getSamples32(int, int*)+0x78>
c001d70d:	84 c0                	test   al,al
c001d70f:	75 0c                	jne    c001d71d <SoundCard::getSamples32(int, int*)+0x7b>
c001d711:	83 ec 0c             	sub    esp,0xc
c001d714:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d716:	53                   	push   ebx
c001d717:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d71a:	83 c4 10             	add    esp,0x10
c001d71d:	83 c4 0c             	add    esp,0xc
c001d720:	89 f0                	mov    eax,esi
c001d722:	5b                   	pop    ebx
c001d723:	5e                   	pop    esi
c001d724:	5f                   	pop    edi
c001d725:	5d                   	pop    ebp
c001d726:	c3                   	ret    
c001d727:	90                   	nop

c001d728 <SoundCard::addChannel(SoundPort*)>:
c001d728:	56                   	push   esi
c001d729:	53                   	push   ebx
c001d72a:	53                   	push   ebx
c001d72b:	31 db                	xor    ebx,ebx
c001d72d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d731:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d739:	74 27                	je     c001d762 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d73b:	43                   	inc    ebx
c001d73c:	83 fb 20             	cmp    ebx,0x20
c001d73f:	75 f0                	jne    c001d731 <SoundCard::addChannel(SoundPort*)+0x9>
c001d741:	83 ec 0c             	sub    esp,0xc
c001d744:	83 cb ff             	or     ebx,0xffffffff
c001d747:	68 4d 71 02 c0       	push   0xc002714d
c001d74c:	e8 76 f9 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001d751:	c7 04 24 46 71 02 c0 	mov    DWORD PTR [esp],0xc0027146
c001d758:	e8 4c 7a ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001d75d:	83 c4 10             	add    esp,0x10
c001d760:	eb 1b                	jmp    c001d77d <SoundCard::addChannel(SoundPort*)+0x55>
c001d762:	51                   	push   ecx
c001d763:	51                   	push   ecx
c001d764:	53                   	push   ebx
c001d765:	68 65 71 02 c0       	push   0xc0027165
c001d76a:	e8 58 f9 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001d76f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d773:	83 c4 10             	add    esp,0x10
c001d776:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d77d:	89 d8                	mov    eax,ebx
c001d77f:	5a                   	pop    edx
c001d780:	5b                   	pop    ebx
c001d781:	5e                   	pop    esi
c001d782:	c3                   	ret    
c001d783:	90                   	nop

c001d784 <SoundCard::removeChannel(int)>:
c001d784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d78c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d797:	c3                   	ret    

c001d798 <SoundPort::SoundPort(int, int, int, int)>:
c001d798:	83 ec 0c             	sub    esp,0xc
c001d79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d79f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7aa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d7b6:	89 10                	mov    DWORD PTR [eax],edx
c001d7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d7c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d7ce:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d7d3:	75 13                	jne    c001d7e8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7db:	05 a0 0f 00 00       	add    eax,0xfa0
c001d7e0:	01 c0                	add    eax,eax
c001d7e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d7e6:	66 90                	xchg   ax,ax
c001d7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d7f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7f7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d802:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d805:	c1 e0 02             	shl    eax,0x2
c001d808:	83 ec 0c             	sub    esp,0xc
c001d80b:	50                   	push   eax
c001d80c:	e8 d6 c5 fe ff       	call   c0009de7 <malloc>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	89 c2                	mov    edx,eax
c001d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d81a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d81d:	90                   	nop
c001d81e:	83 c4 0c             	add    esp,0xc
c001d821:	c3                   	ret    
c001d822:	66 90                	xchg   ax,ax

c001d824 <SoundPort::~SoundPort()>:
c001d824:	83 ec 0c             	sub    esp,0xc
c001d827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d82b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d82e:	85 c0                	test   eax,eax
c001d830:	74 1e                	je     c001d850 <SoundPort::~SoundPort()+0x2c>
c001d832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d836:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d839:	83 ec 0c             	sub    esp,0xc
c001d83c:	50                   	push   eax
c001d83d:	e8 b5 c5 fe ff       	call   c0009df7 <free>
c001d842:	83 c4 10             	add    esp,0x10
c001d845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d849:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d850:	90                   	nop
c001d851:	83 c4 0c             	add    esp,0xc
c001d854:	c3                   	ret    
c001d855:	90                   	nop
c001d856:	66 90                	xchg   ax,ax

c001d858 <SoundPort::unpause()>:
c001d858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d85c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d860:	c3                   	ret    
c001d861:	90                   	nop
c001d862:	66 90                	xchg   ax,ax

c001d864 <SoundPort::pause()>:
c001d864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d868:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d86c:	c3                   	ret    
c001d86d:	90                   	nop
c001d86e:	66 90                	xchg   ax,ax

c001d870 <SoundPort::getBufferUsed()>:
c001d870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d874:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d877:	c3                   	ret    

c001d878 <SoundPort::getBufferSize()>:
c001d878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d87c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d87f:	c3                   	ret    

c001d880 <SoundPort::buffer16(short*, int)>:
c001d880:	55                   	push   ebp
c001d881:	57                   	push   edi
c001d882:	56                   	push   esi
c001d883:	53                   	push   ebx
c001d884:	83 ec 1c             	sub    esp,0x1c
c001d887:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d88b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d88f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d892:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d895:	0f 84 85 00 00 00    	je     c001d920 <SoundPort::buffer16(short*, int)+0xa0>
c001d89b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d89f:	85 c9                	test   ecx,ecx
c001d8a1:	7e 7d                	jle    c001d920 <SoundPort::buffer16(short*, int)+0xa0>
c001d8a3:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d8a7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d8aa:	c1 e1 0f             	shl    ecx,0xf
c001d8ad:	8d 70 01             	lea    esi,[eax+0x1]
c001d8b0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d8b3:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d8b6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8b9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d8bc:	74 6e                	je     c001d92c <SoundPort::buffer16(short*, int)+0xac>
c001d8be:	31 f6                	xor    esi,esi
c001d8c0:	eb 22                	jmp    c001d8e4 <SoundPort::buffer16(short*, int)+0x64>
c001d8c2:	66 90                	xchg   ax,ax
c001d8c4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d8c9:	8d 79 01             	lea    edi,[ecx+0x1]
c001d8cc:	c1 e3 0f             	shl    ebx,0xf
c001d8cf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d8d2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d8d5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d8d8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8db:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d8de:	74 1c                	je     c001d8fc <SoundPort::buffer16(short*, int)+0x7c>
c001d8e0:	89 c6                	mov    esi,eax
c001d8e2:	66 90                	xchg   ax,ax
c001d8e4:	8d 46 01             	lea    eax,[esi+0x1]
c001d8e7:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d8eb:	75 d7                	jne    c001d8c4 <SoundPort::buffer16(short*, int)+0x44>
c001d8ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d8f1:	83 c4 1c             	add    esp,0x1c
c001d8f4:	5b                   	pop    ebx
c001d8f5:	5e                   	pop    esi
c001d8f6:	5f                   	pop    edi
c001d8f7:	5d                   	pop    ebp
c001d8f8:	c3                   	ret    
c001d8f9:	8d 76 00             	lea    esi,[esi+0x0]
c001d8fc:	8d 46 02             	lea    eax,[esi+0x2]
c001d8ff:	90                   	nop
c001d900:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d904:	83 ec 0c             	sub    esp,0xc
c001d907:	68 b8 71 02 c0       	push   0xc00271b8
c001d90c:	e8 b6 f7 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001d911:	83 c4 10             	add    esp,0x10
c001d914:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d918:	83 c4 1c             	add    esp,0x1c
c001d91b:	5b                   	pop    ebx
c001d91c:	5e                   	pop    esi
c001d91d:	5f                   	pop    edi
c001d91e:	5d                   	pop    ebp
c001d91f:	c3                   	ret    
c001d920:	83 c4 1c             	add    esp,0x1c
c001d923:	31 c0                	xor    eax,eax
c001d925:	5b                   	pop    ebx
c001d926:	5e                   	pop    esi
c001d927:	5f                   	pop    edi
c001d928:	5d                   	pop    ebp
c001d929:	c3                   	ret    
c001d92a:	66 90                	xchg   ax,ax
c001d92c:	b8 01 00 00 00       	mov    eax,0x1
c001d931:	eb cd                	jmp    c001d900 <SoundPort::buffer16(short*, int)+0x80>
c001d933:	90                   	nop

c001d934 <SoundPort::buffer32(int*, int)>:
c001d934:	55                   	push   ebp
c001d935:	57                   	push   edi
c001d936:	56                   	push   esi
c001d937:	53                   	push   ebx
c001d938:	83 ec 1c             	sub    esp,0x1c
c001d93b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d93f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d943:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d946:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d94a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d94e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d951:	74 79                	je     c001d9cc <SoundPort::buffer32(int*, int)+0x98>
c001d953:	85 c0                	test   eax,eax
c001d955:	7e 75                	jle    c001d9cc <SoundPort::buffer32(int*, int)+0x98>
c001d957:	8d 71 01             	lea    esi,[ecx+0x1]
c001d95a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d95d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d960:	8b 37                	mov    esi,DWORD PTR [edi]
c001d962:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d965:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d968:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d96b:	74 6b                	je     c001d9d8 <SoundPort::buffer32(int*, int)+0xa4>
c001d96d:	31 f6                	xor    esi,esi
c001d96f:	eb 1f                	jmp    c001d990 <SoundPort::buffer32(int*, int)+0x5c>
c001d971:	8d 76 00             	lea    esi,[esi+0x0]
c001d974:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d977:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d97a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d97d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d980:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d984:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d987:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d98a:	74 1c                	je     c001d9a8 <SoundPort::buffer32(int*, int)+0x74>
c001d98c:	89 de                	mov    esi,ebx
c001d98e:	66 90                	xchg   ax,ax
c001d990:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d993:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d997:	75 db                	jne    c001d974 <SoundPort::buffer32(int*, int)+0x40>
c001d999:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d99d:	83 c4 1c             	add    esp,0x1c
c001d9a0:	5b                   	pop    ebx
c001d9a1:	5e                   	pop    esi
c001d9a2:	5f                   	pop    edi
c001d9a3:	5d                   	pop    ebp
c001d9a4:	c3                   	ret    
c001d9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d9a8:	8d 46 02             	lea    eax,[esi+0x2]
c001d9ab:	90                   	nop
c001d9ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9b0:	83 ec 0c             	sub    esp,0xc
c001d9b3:	68 d3 71 02 c0       	push   0xc00271d3
c001d9b8:	e8 0a f7 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001d9bd:	83 c4 10             	add    esp,0x10
c001d9c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9c4:	83 c4 1c             	add    esp,0x1c
c001d9c7:	5b                   	pop    ebx
c001d9c8:	5e                   	pop    esi
c001d9c9:	5f                   	pop    edi
c001d9ca:	5d                   	pop    ebp
c001d9cb:	c3                   	ret    
c001d9cc:	83 c4 1c             	add    esp,0x1c
c001d9cf:	31 c0                	xor    eax,eax
c001d9d1:	5b                   	pop    ebx
c001d9d2:	5e                   	pop    esi
c001d9d3:	5f                   	pop    edi
c001d9d4:	5d                   	pop    ebp
c001d9d5:	c3                   	ret    
c001d9d6:	66 90                	xchg   ax,ax
c001d9d8:	b8 01 00 00 00       	mov    eax,0x1
c001d9dd:	eb cd                	jmp    c001d9ac <SoundPort::buffer32(int*, int)+0x78>
c001d9df:	90                   	nop

c001d9e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d9e0:	57                   	push   edi
c001d9e1:	56                   	push   esi
c001d9e2:	53                   	push   ebx
c001d9e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d9eb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d9f1:	39 03                	cmp    DWORD PTR [ebx],eax
c001d9f3:	74 13                	je     c001da08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d9f5:	83 ec 0c             	sub    esp,0xc
c001d9f8:	68 28 72 02 c0       	push   0xc0027228
c001d9fd:	e8 a7 77 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001da02:	83 c4 10             	add    esp,0x10
c001da05:	8d 76 00             	lea    esi,[esi+0x0]
c001da08:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001da0e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001da11:	74 11                	je     c001da24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001da13:	83 ec 0c             	sub    esp,0xc
c001da16:	68 ee 71 02 c0       	push   0xc00271ee
c001da1b:	e8 89 77 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001da20:	83 c4 10             	add    esp,0x10
c001da23:	90                   	nop
c001da24:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001da2a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001da2d:	74 11                	je     c001da40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001da2f:	83 ec 0c             	sub    esp,0xc
c001da32:	68 ee 71 02 c0       	push   0xc00271ee
c001da37:	e8 6d 77 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001da3c:	83 c4 10             	add    esp,0x10
c001da3f:	90                   	nop
c001da40:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001da43:	89 c6                	mov    esi,eax
c001da45:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001da49:	7e 05                	jle    c001da50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001da4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da4f:	90                   	nop
c001da50:	85 f6                	test   esi,esi
c001da52:	7e 30                	jle    c001da84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001da54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da58:	8d 3c 36             	lea    edi,[esi+esi*1]
c001da5b:	31 c9                	xor    ecx,ecx
c001da5d:	01 d7                	add    edi,edx
c001da5f:	90                   	nop
c001da60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001da63:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001da66:	85 c0                	test   eax,eax
c001da68:	79 06                	jns    c001da70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001da6a:	05 ff 7f 00 00       	add    eax,0x7fff
c001da6f:	90                   	nop
c001da70:	c1 f8 0f             	sar    eax,0xf
c001da73:	83 c1 04             	add    ecx,0x4
c001da76:	66 01 02             	add    WORD PTR [edx],ax
c001da79:	83 c2 02             	add    edx,0x2
c001da7c:	39 d7                	cmp    edi,edx
c001da7e:	75 e0                	jne    c001da60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001da80:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001da83:	90                   	nop
c001da84:	56                   	push   esi
c001da85:	89 c2                	mov    edx,eax
c001da87:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001da8e:	29 f2                	sub    edx,esi
c001da90:	52                   	push   edx
c001da91:	50                   	push   eax
c001da92:	68 48 72 02 c0       	push   0xc0027248
c001da97:	e8 2b f6 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001da9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001da9f:	50                   	push   eax
c001daa0:	01 f8                	add    eax,edi
c001daa2:	50                   	push   eax
c001daa3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001daa6:	29 f0                	sub    eax,esi
c001daa8:	c1 e0 02             	shl    eax,0x2
c001daab:	50                   	push   eax
c001daac:	68 78 72 02 c0       	push   0xc0027278
c001dab1:	e8 11 f6 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001dab6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dabc:	83 c4 1c             	add    esp,0x1c
c001dabf:	01 d7                	add    edi,edx
c001dac1:	29 f0                	sub    eax,esi
c001dac3:	c1 e0 02             	shl    eax,0x2
c001dac6:	50                   	push   eax
c001dac7:	57                   	push   edi
c001dac8:	52                   	push   edx
c001dac9:	e8 fe 2a fe ff       	call   c00005cc <memmove>
c001dace:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001dad1:	83 c4 10             	add    esp,0x10
c001dad4:	89 f0                	mov    eax,esi
c001dad6:	5b                   	pop    ebx
c001dad7:	5e                   	pop    esi
c001dad8:	5f                   	pop    edi
c001dad9:	c3                   	ret    
c001dada:	66 90                	xchg   ax,ax

c001dadc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001dadc:	57                   	push   edi
c001dadd:	56                   	push   esi
c001dade:	53                   	push   ebx
c001dadf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dae3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dae7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001daeb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001daf1:	39 06                	cmp    DWORD PTR [esi],eax
c001daf3:	74 13                	je     c001db08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001daf5:	83 ec 0c             	sub    esp,0xc
c001daf8:	68 9c 72 02 c0       	push   0xc002729c
c001dafd:	e8 a7 76 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	8d 76 00             	lea    esi,[esi+0x0]
c001db08:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001db0e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001db11:	74 11                	je     c001db24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001db13:	83 ec 0c             	sub    esp,0xc
c001db16:	68 0a 72 02 c0       	push   0xc002720a
c001db1b:	e8 89 76 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001db20:	83 c4 10             	add    esp,0x10
c001db23:	90                   	nop
c001db24:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001db2a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001db2d:	74 11                	je     c001db40 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001db2f:	83 ec 0c             	sub    esp,0xc
c001db32:	68 0a 72 02 c0       	push   0xc002720a
c001db37:	e8 6d 76 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001db3c:	83 c4 10             	add    esp,0x10
c001db3f:	90                   	nop
c001db40:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001db43:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001db47:	7e 07                	jle    c001db50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001db49:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001db4d:	8d 76 00             	lea    esi,[esi+0x0]
c001db50:	85 ff                	test   edi,edi
c001db52:	7e 1c                	jle    c001db70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001db54:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001db5b:	31 c0                	xor    eax,eax
c001db5d:	8d 76 00             	lea    esi,[esi+0x0]
c001db60:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001db63:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001db66:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001db69:	83 c0 04             	add    eax,0x4
c001db6c:	39 c1                	cmp    ecx,eax
c001db6e:	75 f0                	jne    c001db60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001db70:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001db73:	50                   	push   eax
c001db74:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001db77:	29 f8                	sub    eax,edi
c001db79:	c1 e0 02             	shl    eax,0x2
c001db7c:	50                   	push   eax
c001db7d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001db80:	50                   	push   eax
c001db81:	52                   	push   edx
c001db82:	e8 45 2a fe ff       	call   c00005cc <memmove>
c001db87:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001db8a:	83 c4 10             	add    esp,0x10
c001db8d:	89 f8                	mov    eax,edi
c001db8f:	5b                   	pop    ebx
c001db90:	5e                   	pop    esi
c001db91:	5f                   	pop    edi
c001db92:	c3                   	ret    
c001db93:	90                   	nop

c001db94 <PCI::open(int, int, void*)>:
c001db94:	83 ec 18             	sub    esp,0x18
c001db97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db9f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dba5:	8b 10                	mov    edx,DWORD PTR [eax]
c001dba7:	50                   	push   eax
c001dba8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001dbab:	31 c0                	xor    eax,eax
c001dbad:	83 c4 1c             	add    esp,0x1c
c001dbb0:	c3                   	ret    
c001dbb1:	90                   	nop

c001dbb2 <PCI::close(int, int, void*)>:
c001dbb2:	31 c0                	xor    eax,eax
c001dbb4:	c3                   	ret    
c001dbb5:	90                   	nop

c001dbb6 <PCI::PCI()>:
c001dbb6:	83 ec 0c             	sub    esp,0xc
c001dbb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbd:	83 ec 08             	sub    esp,0x8
c001dbc0:	68 bb 72 02 c0       	push   0xc00272bb
c001dbc5:	50                   	push   eax
c001dbc6:	e8 d5 02 ff ff       	call   c000dea0 <Bus::Bus(char const*)>
c001dbcb:	83 c4 10             	add    esp,0x10
c001dbce:	ba 90 74 02 c0       	mov    edx,0xc0027490
c001dbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbd7:	89 10                	mov    DWORD PTR [eax],edx
c001dbd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbdd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbeb:	a3 00 ab 02 c0       	mov    ds:0xc002ab00,eax
c001dbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbfa:	0f b6 d0             	movzx  edx,al
c001dbfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc01:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc12:	0f b6 d0             	movzx  edx,al
c001dc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc19:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc22:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc28:	8d 50 01             	lea    edx,[eax+0x1]
c001dc2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc2f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc35:	0f b6 d0             	movzx  edx,al
c001dc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc3c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc40:	83 c9 c0             	or     ecx,0xffffffc0
c001dc43:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc47:	90                   	nop
c001dc48:	83 c4 0c             	add    esp,0xc
c001dc4b:	c3                   	ret    

c001dc4c <PCI::readBAR8(unsigned int, int)>:
c001dc4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc54:	f6 c2 01             	test   dl,0x1
c001dc57:	74 07                	je     c001dc60 <PCI::readBAR8(unsigned int, int)+0x14>
c001dc59:	83 e2 fc             	and    edx,0xfffffffc
c001dc5c:	01 c2                	add    edx,eax
c001dc5e:	ec                   	in     al,dx
c001dc5f:	c3                   	ret    
c001dc60:	83 e2 f0             	and    edx,0xfffffff0
c001dc63:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dc66:	c3                   	ret    
c001dc67:	90                   	nop

c001dc68 <PCI::readBAR16(unsigned int, int)>:
c001dc68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc70:	f6 c2 01             	test   dl,0x1
c001dc73:	74 08                	je     c001dc7d <PCI::readBAR16(unsigned int, int)+0x15>
c001dc75:	83 e2 fc             	and    edx,0xfffffffc
c001dc78:	01 c2                	add    edx,eax
c001dc7a:	66 ed                	in     ax,dx
c001dc7c:	c3                   	ret    
c001dc7d:	83 e2 f0             	and    edx,0xfffffff0
c001dc80:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dc84:	c3                   	ret    
c001dc85:	90                   	nop

c001dc86 <PCI::readBAR32(unsigned int, int)>:
c001dc86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc8e:	f6 c2 01             	test   dl,0x1
c001dc91:	74 07                	je     c001dc9a <PCI::readBAR32(unsigned int, int)+0x14>
c001dc93:	83 e2 fc             	and    edx,0xfffffffc
c001dc96:	01 c2                	add    edx,eax
c001dc98:	ed                   	in     eax,dx
c001dc99:	c3                   	ret    
c001dc9a:	83 e2 f0             	and    edx,0xfffffff0
c001dc9d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dca0:	c3                   	ret    
c001dca1:	90                   	nop

c001dca2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dca2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcaa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcae:	f6 c2 01             	test   dl,0x1
c001dcb1:	74 07                	je     c001dcba <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dcb3:	83 e2 fc             	and    edx,0xfffffffc
c001dcb6:	01 ca                	add    edx,ecx
c001dcb8:	ee                   	out    dx,al
c001dcb9:	c3                   	ret    
c001dcba:	83 e2 f0             	and    edx,0xfffffff0
c001dcbd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dcc0:	c3                   	ret    
c001dcc1:	90                   	nop

c001dcc2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dcc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcce:	f6 c2 01             	test   dl,0x1
c001dcd1:	74 08                	je     c001dcdb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dcd3:	83 e2 fc             	and    edx,0xfffffffc
c001dcd6:	01 ca                	add    edx,ecx
c001dcd8:	66 ef                	out    dx,ax
c001dcda:	c3                   	ret    
c001dcdb:	83 e2 f0             	and    edx,0xfffffff0
c001dcde:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dce2:	c3                   	ret    
c001dce3:	90                   	nop

c001dce4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dce4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcf0:	f6 c2 01             	test   dl,0x1
c001dcf3:	74 07                	je     c001dcfc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dcf5:	83 e2 fc             	and    edx,0xfffffffc
c001dcf8:	01 ca                	add    edx,ecx
c001dcfa:	ef                   	out    dx,eax
c001dcfb:	c3                   	ret    
c001dcfc:	83 e2 f0             	and    edx,0xfffffff0
c001dcff:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dd02:	c3                   	ret    
c001dd03:	90                   	nop

c001dd04 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd04:	55                   	push   ebp
c001dd05:	57                   	push   edi
c001dd06:	56                   	push   esi
c001dd07:	53                   	push   ebx
c001dd08:	83 ec 0c             	sub    esp,0xc
c001dd0b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dd0f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dd13:	89 f0                	mov    eax,esi
c001dd15:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dd19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd1d:	3c 07                	cmp    al,0x7
c001dd1f:	76 10                	jbe    c001dd31 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dd21:	83 ec 0c             	sub    esp,0xc
c001dd24:	68 c3 72 02 c0       	push   0xc00272c3
c001dd29:	e8 7b 74 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001dd2e:	83 c4 10             	add    esp,0x10
c001dd31:	80 fb 0f             	cmp    bl,0xf
c001dd34:	76 10                	jbe    c001dd46 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001dd36:	83 ec 0c             	sub    esp,0xc
c001dd39:	68 f3 72 02 c0       	push   0xc00272f3
c001dd3e:	e8 66 74 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001dd43:	83 c4 10             	add    esp,0x10
c001dd46:	8d 04 36             	lea    eax,[esi+esi*1]
c001dd49:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dd4e:	83 c8 f0             	or     eax,0xfffffff0
c001dd51:	ee                   	out    dx,al
c001dd52:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dd57:	89 e8                	mov    eax,ebp
c001dd59:	ee                   	out    dx,al
c001dd5a:	83 c4 0c             	add    esp,0xc
c001dd5d:	89 d8                	mov    eax,ebx
c001dd5f:	66 81 e7 fc 00       	and    di,0xfc
c001dd64:	5b                   	pop    ebx
c001dd65:	c1 e0 08             	shl    eax,0x8
c001dd68:	5e                   	pop    esi
c001dd69:	09 f8                	or     eax,edi
c001dd6b:	5f                   	pop    edi
c001dd6c:	66 0d 00 c0          	or     ax,0xc000
c001dd70:	5d                   	pop    ebp
c001dd71:	c3                   	ret    

c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd72:	57                   	push   edi
c001dd73:	56                   	push   esi
c001dd74:	53                   	push   ebx
c001dd75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd7d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dd83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd87:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd8b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dd8f:	83 ff 01             	cmp    edi,0x1
c001dd92:	75 3e                	jne    c001ddd2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001dd94:	89 de                	mov    esi,ebx
c001dd96:	0f b6 c0             	movzx  eax,al
c001dd99:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dd9f:	c1 e0 10             	shl    eax,0x10
c001dda2:	0f b6 c9             	movzx  ecx,cl
c001dda5:	09 f0                	or     eax,esi
c001dda7:	c1 e1 08             	shl    ecx,0x8
c001ddaa:	0f b6 d2             	movzx  edx,dl
c001ddad:	09 c8                	or     eax,ecx
c001ddaf:	c1 e2 0b             	shl    edx,0xb
c001ddb2:	09 d0                	or     eax,edx
c001ddb4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ddb9:	0d 00 00 00 80       	or     eax,0x80000000
c001ddbe:	ef                   	out    dx,eax
c001ddbf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ddc4:	ed                   	in     eax,dx
c001ddc5:	83 e3 02             	and    ebx,0x2
c001ddc8:	0f b6 cb             	movzx  ecx,bl
c001ddcb:	c1 e1 03             	shl    ecx,0x3
c001ddce:	d3 e8                	shr    eax,cl
c001ddd0:	eb 43                	jmp    c001de15 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ddd2:	83 ff 02             	cmp    edi,0x2
c001ddd5:	75 2c                	jne    c001de03 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001ddd7:	83 ec 0c             	sub    esp,0xc
c001ddda:	0f b6 c9             	movzx  ecx,cl
c001dddd:	0f b6 d2             	movzx  edx,dl
c001dde0:	0f b6 fb             	movzx  edi,bl
c001dde3:	0f b6 c0             	movzx  eax,al
c001dde6:	57                   	push   edi
c001dde7:	51                   	push   ecx
c001dde8:	52                   	push   edx
c001dde9:	50                   	push   eax
c001ddea:	56                   	push   esi
c001ddeb:	e8 14 ff ff ff       	call   c001dd04 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddf0:	89 c2                	mov    edx,eax
c001ddf2:	ed                   	in     eax,dx
c001ddf3:	83 e3 02             	and    ebx,0x2
c001ddf6:	83 c4 20             	add    esp,0x20
c001ddf9:	0f b6 cb             	movzx  ecx,bl
c001ddfc:	c1 e1 03             	shl    ecx,0x3
c001ddff:	d3 e8                	shr    eax,cl
c001de01:	eb 12                	jmp    c001de15 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001de03:	83 ec 0c             	sub    esp,0xc
c001de06:	68 23 73 02 c0       	push   0xc0027323
c001de0b:	e8 99 73 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001de10:	83 c4 10             	add    esp,0x10
c001de13:	31 c0                	xor    eax,eax
c001de15:	5b                   	pop    ebx
c001de16:	5e                   	pop    esi
c001de17:	5f                   	pop    edi
c001de18:	c3                   	ret    
c001de19:	90                   	nop

c001de1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001de1a:	83 ec 18             	sub    esp,0x18
c001de1d:	6a 00                	push   0x0
c001de1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de24:	50                   	push   eax
c001de25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de2a:	50                   	push   eax
c001de2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de30:	50                   	push   eax
c001de31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de35:	e8 38 ff ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de3a:	83 c4 2c             	add    esp,0x2c
c001de3d:	c3                   	ret    

c001de3e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001de3e:	83 ec 18             	sub    esp,0x18
c001de41:	6a 0e                	push   0xe
c001de43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de48:	50                   	push   eax
c001de49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de4e:	50                   	push   eax
c001de4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de54:	50                   	push   eax
c001de55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de59:	e8 14 ff ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de5e:	83 c4 2c             	add    esp,0x2c
c001de61:	0f b6 c0             	movzx  eax,al
c001de64:	c3                   	ret    
c001de65:	90                   	nop

c001de66 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001de66:	55                   	push   ebp
c001de67:	57                   	push   edi
c001de68:	56                   	push   esi
c001de69:	53                   	push   ebx
c001de6a:	83 ec 18             	sub    esp,0x18
c001de6d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001de72:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001de77:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001de7c:	6a 0a                	push   0xa
c001de7e:	56                   	push   esi
c001de7f:	55                   	push   ebp
c001de80:	57                   	push   edi
c001de81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de85:	e8 e8 fe ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de8a:	83 c4 14             	add    esp,0x14
c001de8d:	89 c3                	mov    ebx,eax
c001de8f:	6a 0a                	push   0xa
c001de91:	0f b6 db             	movzx  ebx,bl
c001de94:	56                   	push   esi
c001de95:	55                   	push   ebp
c001de96:	57                   	push   edi
c001de97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de9b:	e8 d2 fe ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dea0:	83 c4 2c             	add    esp,0x2c
c001dea3:	25 00 ff 00 00       	and    eax,0xff00
c001dea8:	09 d8                	or     eax,ebx
c001deaa:	5b                   	pop    ebx
c001deab:	5e                   	pop    esi
c001deac:	5f                   	pop    edi
c001dead:	5d                   	pop    ebp
c001deae:	c3                   	ret    
c001deaf:	90                   	nop

c001deb0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001deb0:	83 ec 18             	sub    esp,0x18
c001deb3:	6a 08                	push   0x8
c001deb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deba:	50                   	push   eax
c001debb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dec0:	50                   	push   eax
c001dec1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dec6:	50                   	push   eax
c001dec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001decb:	e8 a2 fe ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ded0:	83 c4 2c             	add    esp,0x2c
c001ded3:	0f b6 c4             	movzx  eax,ah
c001ded6:	c3                   	ret    
c001ded7:	90                   	nop

c001ded8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ded8:	83 ec 18             	sub    esp,0x18
c001dedb:	6a 08                	push   0x8
c001dedd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dee2:	50                   	push   eax
c001dee3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dee8:	50                   	push   eax
c001dee9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deee:	50                   	push   eax
c001deef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001def3:	e8 7a fe ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001def8:	83 c4 2c             	add    esp,0x2c
c001defb:	c3                   	ret    

c001defc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001defc:	83 ec 18             	sub    esp,0x18
c001deff:	6a 3c                	push   0x3c
c001df01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df06:	50                   	push   eax
c001df07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df0c:	50                   	push   eax
c001df0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df12:	50                   	push   eax
c001df13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df17:	e8 56 fe ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df1c:	83 c4 2c             	add    esp,0x2c
c001df1f:	c3                   	ret    

c001df20 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001df20:	83 ec 18             	sub    esp,0x18
c001df23:	6a 18                	push   0x18
c001df25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df2a:	50                   	push   eax
c001df2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df30:	50                   	push   eax
c001df31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df36:	50                   	push   eax
c001df37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df3b:	e8 32 fe ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df40:	83 c4 2c             	add    esp,0x2c
c001df43:	0f b6 c4             	movzx  eax,ah
c001df46:	c3                   	ret    
c001df47:	90                   	nop

c001df48 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001df48:	55                   	push   ebp
c001df49:	57                   	push   edi
c001df4a:	56                   	push   esi
c001df4b:	53                   	push   ebx
c001df4c:	83 ec 28             	sub    esp,0x28
c001df4f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001df53:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001df58:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001df5d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001df62:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001df69:	8d 43 12             	lea    eax,[ebx+0x12]
c001df6c:	83 c3 10             	add    ebx,0x10
c001df6f:	0f b6 c0             	movzx  eax,al
c001df72:	0f b6 db             	movzx  ebx,bl
c001df75:	50                   	push   eax
c001df76:	51                   	push   ecx
c001df77:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001df7b:	57                   	push   edi
c001df7c:	55                   	push   ebp
c001df7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df81:	e8 ec fd ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df86:	83 c4 14             	add    esp,0x14
c001df89:	89 c6                	mov    esi,eax
c001df8b:	53                   	push   ebx
c001df8c:	c1 e6 10             	shl    esi,0x10
c001df8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001df93:	51                   	push   ecx
c001df94:	57                   	push   edi
c001df95:	55                   	push   ebp
c001df96:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df9a:	e8 d3 fd ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df9f:	83 c4 3c             	add    esp,0x3c
c001dfa2:	0f b7 c0             	movzx  eax,ax
c001dfa5:	5b                   	pop    ebx
c001dfa6:	09 f0                	or     eax,esi
c001dfa8:	5e                   	pop    esi
c001dfa9:	5f                   	pop    edi
c001dfaa:	5d                   	pop    ebp
c001dfab:	c3                   	ret    

c001dfac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001dfac:	55                   	push   ebp
c001dfad:	57                   	push   edi
c001dfae:	56                   	push   esi
c001dfaf:	53                   	push   ebx
c001dfb0:	83 ec 0c             	sub    esp,0xc
c001dfb3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dfb7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dfbb:	89 f5                	mov    ebp,esi
c001dfbd:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001dfc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dfc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dfcb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dfcf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dfd3:	83 f9 01             	cmp    ecx,0x1
c001dfd6:	75 5d                	jne    c001e035 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001dfd8:	0f b6 c8             	movzx  ecx,al
c001dfdb:	0f b6 d2             	movzx  edx,dl
c001dfde:	c1 e1 10             	shl    ecx,0x10
c001dfe1:	c1 e2 0b             	shl    edx,0xb
c001dfe4:	89 f0                	mov    eax,esi
c001dfe6:	25 fc 00 00 00       	and    eax,0xfc
c001dfeb:	09 c1                	or     ecx,eax
c001dfed:	89 e8                	mov    eax,ebp
c001dfef:	0f b6 c0             	movzx  eax,al
c001dff2:	c1 e0 08             	shl    eax,0x8
c001dff5:	09 c1                	or     ecx,eax
c001dff7:	09 d1                	or     ecx,edx
c001dff9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dffe:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e004:	89 c8                	mov    eax,ecx
c001e006:	ef                   	out    dx,eax
c001e007:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e00c:	ed                   	in     eax,dx
c001e00d:	0f b7 db             	movzx  ebx,bx
c001e010:	83 e6 02             	and    esi,0x2
c001e013:	74 0a                	je     c001e01f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e015:	0f b7 d0             	movzx  edx,ax
c001e018:	c1 e3 10             	shl    ebx,0x10
c001e01b:	09 d3                	or     ebx,edx
c001e01d:	eb 05                	jmp    c001e024 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e01f:	66 31 c0             	xor    ax,ax
c001e022:	09 c3                	or     ebx,eax
c001e024:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e029:	89 c8                	mov    eax,ecx
c001e02b:	ef                   	out    dx,eax
c001e02c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e031:	89 d8                	mov    eax,ebx
c001e033:	eb 41                	jmp    c001e076 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e035:	83 f9 02             	cmp    ecx,0x2
c001e038:	75 45                	jne    c001e07f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e03a:	83 ec 0c             	sub    esp,0xc
c001e03d:	0f b6 d2             	movzx  edx,dl
c001e040:	89 f1                	mov    ecx,esi
c001e042:	0f b6 c0             	movzx  eax,al
c001e045:	0f b6 f1             	movzx  esi,cl
c001e048:	89 e9                	mov    ecx,ebp
c001e04a:	56                   	push   esi
c001e04b:	0f b6 c9             	movzx  ecx,cl
c001e04e:	51                   	push   ecx
c001e04f:	52                   	push   edx
c001e050:	50                   	push   eax
c001e051:	57                   	push   edi
c001e052:	e8 ad fc ff ff       	call   c001dd04 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e057:	89 c2                	mov    edx,eax
c001e059:	ed                   	in     eax,dx
c001e05a:	83 c4 20             	add    esp,0x20
c001e05d:	0f b7 db             	movzx  ebx,bx
c001e060:	f6 c2 02             	test   dl,0x2
c001e063:	74 0c                	je     c001e071 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e065:	0f b7 c8             	movzx  ecx,ax
c001e068:	89 d8                	mov    eax,ebx
c001e06a:	c1 e0 10             	shl    eax,0x10
c001e06d:	09 c8                	or     eax,ecx
c001e06f:	eb 05                	jmp    c001e076 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e071:	66 31 c0             	xor    ax,ax
c001e074:	09 d8                	or     eax,ebx
c001e076:	ef                   	out    dx,eax
c001e077:	83 c4 0c             	add    esp,0xc
c001e07a:	5b                   	pop    ebx
c001e07b:	5e                   	pop    esi
c001e07c:	5f                   	pop    edi
c001e07d:	5d                   	pop    ebp
c001e07e:	c3                   	ret    
c001e07f:	c7 44 24 20 23 73 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027323
c001e087:	83 c4 0c             	add    esp,0xc
c001e08a:	5b                   	pop    ebx
c001e08b:	5e                   	pop    esi
c001e08c:	5f                   	pop    edi
c001e08d:	5d                   	pop    ebp
c001e08e:	e9 16 71 ff ff       	jmp    c00151a9 <Krnl::panic(char const*)>
c001e093:	90                   	nop

c001e094 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e094:	55                   	push   ebp
c001e095:	57                   	push   edi
c001e096:	56                   	push   esi
c001e097:	53                   	push   ebx
c001e098:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001e09e:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e0a5:	75 0f                	jne    c001e0b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001e0a7:	80 3d 0c ab 02 c0 00 	cmp    BYTE PTR ds:0xc002ab0c,0x0
c001e0ae:	0f 85 fa 00 00 00    	jne    c001e1ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e0b4:	eb 2f                	jmp    c001e0e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001e0b6:	83 ec 0c             	sub    esp,0xc
c001e0b9:	68 29 73 02 c0       	push   0xc0027329
c001e0be:	e8 7e bd fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e0c3:	83 c4 10             	add    esp,0x10
c001e0c6:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e0cd:	75 d8                	jne    c001e0a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e0cf:	e4 60                	in     al,0x60
c001e0d1:	3c 1c                	cmp    al,0x1c
c001e0d3:	74 04                	je     c001e0d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e0d5:	3c 5a                	cmp    al,0x5a
c001e0d7:	75 f6                	jne    c001e0cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001e0d9:	e4 60                	in     al,0x60
c001e0db:	3c 5a                	cmp    al,0x5a
c001e0dd:	74 fa                	je     c001e0d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e0df:	3c 1c                	cmp    al,0x1c
c001e0e1:	74 f6                	je     c001e0d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e0e3:	eb c2                	jmp    c001e0a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e0e5:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e0ec:	0f 85 86 00 00 00    	jne    c001e178 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001e0f2:	83 ec 0c             	sub    esp,0xc
c001e0f5:	68 14 01 00 00       	push   0x114
c001e0fa:	e8 e8 bc fe ff       	call   c0009de7 <malloc>
c001e0ff:	83 c4 0c             	add    esp,0xc
c001e102:	89 c3                	mov    ebx,eax
c001e104:	ff 35 10 a1 02 c0    	push   DWORD PTR ds:0xc002a110
c001e10a:	68 43 73 02 c0       	push   0xc0027343
c001e10f:	50                   	push   eax
c001e110:	e8 1d f5 fe ff       	call   c000d632 <File::File(char const*, Process*)>
c001e115:	5a                   	pop    edx
c001e116:	59                   	pop    ecx
c001e117:	6a 01                	push   0x1
c001e119:	53                   	push   ebx
c001e11a:	e8 ed f5 fe ff       	call   c000d70c <File::open(FileOpenMode)>
c001e11f:	83 c4 0c             	add    esp,0xc
c001e122:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001e126:	50                   	push   eax
c001e127:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e12b:	50                   	push   eax
c001e12c:	53                   	push   ebx
c001e12d:	e8 86 f8 fe ff       	call   c000d9b8 <File::stat(unsigned long long*, bool*)>
c001e132:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e136:	40                   	inc    eax
c001e137:	89 04 24             	mov    DWORD PTR [esp],eax
c001e13a:	e8 a8 bc fe ff       	call   c0009de7 <malloc>
c001e13f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e143:	a3 08 ab 02 c0       	mov    ds:0xc002ab08,eax
c001e148:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e14c:	5e                   	pop    esi
c001e14d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e14f:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001e153:	51                   	push   ecx
c001e154:	50                   	push   eax
c001e155:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e159:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e15d:	53                   	push   ebx
c001e15e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e161:	83 c4 14             	add    esp,0x14
c001e164:	53                   	push   ebx
c001e165:	e8 00 f6 fe ff       	call   c000d76a <File::close()>
c001e16a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e16e:	83 c4 10             	add    esp,0x10
c001e171:	a3 04 ab 02 c0       	mov    ds:0xc002ab04,eax
c001e176:	eb 36                	jmp    c001e1ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e178:	83 ec 0c             	sub    esp,0xc
c001e17b:	68 5c 73 02 c0       	push   0xc002735c
c001e180:	e8 bc bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e185:	83 c4 10             	add    esp,0x10
c001e188:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e18f:	0f 85 5d ff ff ff    	jne    c001e0f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e195:	e4 60                	in     al,0x60
c001e197:	3c 1c                	cmp    al,0x1c
c001e199:	74 04                	je     c001e19f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e19b:	3c 5a                	cmp    al,0x5a
c001e19d:	75 f6                	jne    c001e195 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001e19f:	e4 60                	in     al,0x60
c001e1a1:	3c 5a                	cmp    al,0x5a
c001e1a3:	74 fa                	je     c001e19f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e1a5:	3c 1c                	cmp    al,0x1c
c001e1a7:	74 f6                	je     c001e19f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e1a9:	e9 44 ff ff ff       	jmp    c001e0f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e1ae:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e1b5:	75 0b                	jne    c001e1c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001e1b7:	31 f6                	xor    esi,esi
c001e1b9:	31 db                	xor    ebx,ebx
c001e1bb:	31 ed                	xor    ebp,ebp
c001e1bd:	e9 a3 01 00 00       	jmp    c001e365 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e1c2:	83 ec 0c             	sub    esp,0xc
c001e1c5:	68 6e 73 02 c0       	push   0xc002736e
c001e1ca:	e8 72 bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e1cf:	8b 15 e0 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be0
c001e1d5:	83 c4 10             	add    esp,0x10
c001e1d8:	f6 c2 80             	test   dl,0x80
c001e1db:	74 0c                	je     c001e1e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001e1dd:	0f ba e2 0b          	bt     edx,0xb
c001e1e1:	72 1a                	jb     c001e1fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001e1e3:	eb d2                	jmp    c001e1b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e1e5:	3c 5a                	cmp    al,0x5a
c001e1e7:	74 0c                	je     c001e1f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e1e9:	e4 60                	in     al,0x60
c001e1eb:	3c 1c                	cmp    al,0x1c
c001e1ed:	75 f6                	jne    c001e1e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001e1ef:	eb 04                	jmp    c001e1f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e1f1:	3c 1c                	cmp    al,0x1c
c001e1f3:	75 e8                	jne    c001e1dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001e1f5:	e4 60                	in     al,0x60
c001e1f7:	3c 5a                	cmp    al,0x5a
c001e1f9:	74 fa                	je     c001e1f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e1fb:	eb f4                	jmp    c001e1f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001e1fd:	83 ec 0c             	sub    esp,0xc
c001e200:	68 73 73 02 c0       	push   0xc0027373
c001e205:	e8 37 bc fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e20a:	83 c4 10             	add    esp,0x10
c001e20d:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e214:	75 a1                	jne    c001e1b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e216:	e4 60                	in     al,0x60
c001e218:	3c 5a                	cmp    al,0x5a
c001e21a:	74 04                	je     c001e220 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e21c:	3c 1c                	cmp    al,0x1c
c001e21e:	75 f6                	jne    c001e216 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001e220:	e4 60                	in     al,0x60
c001e222:	3c 5a                	cmp    al,0x5a
c001e224:	74 fa                	je     c001e220 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e226:	3c 1c                	cmp    al,0x1c
c001e228:	74 f6                	je     c001e220 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e22a:	eb 8b                	jmp    c001e1b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e22c:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e233:	0f 85 3d 01 00 00    	jne    c001e376 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001e239:	a1 08 ab 02 c0       	mov    eax,ds:0xc002ab08
c001e23e:	8d 7e 01             	lea    edi,[esi+0x1]
c001e241:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e244:	d4 40                	aam    0x40
c001e246:	d5 39                	aad    0x39
c001e248:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e24f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e253:	0f 85 53 01 00 00    	jne    c001e3ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e259:	8b 15 08 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab08
c001e25f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e262:	d4 40                	aam    0x40
c001e264:	d5 39                	aad    0x39
c001e266:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e26a:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e26e:	d4 40                	aam    0x40
c001e270:	d5 39                	aad    0x39
c001e272:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e276:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e27a:	d4 40                	aam    0x40
c001e27c:	d5 39                	aad    0x39
c001e27e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e282:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e286:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e28a:	3c 56                	cmp    al,0x56
c001e28c:	74 49                	je     c001e2d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e28e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e292:	d4 40                	aam    0x40
c001e294:	d5 39                	aad    0x39
c001e296:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e299:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e29d:	0f b6 c9             	movzx  ecx,cl
c001e2a0:	c1 e1 04             	shl    ecx,0x4
c001e2a3:	d4 40                	aam    0x40
c001e2a5:	d5 39                	aad    0x39
c001e2a7:	83 e8 30             	sub    eax,0x30
c001e2aa:	0f b6 c0             	movzx  eax,al
c001e2ad:	09 c1                	or     ecx,eax
c001e2af:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e2b3:	c1 e1 04             	shl    ecx,0x4
c001e2b6:	d4 40                	aam    0x40
c001e2b8:	d5 39                	aad    0x39
c001e2ba:	83 e8 30             	sub    eax,0x30
c001e2bd:	0f b6 c0             	movzx  eax,al
c001e2c0:	09 c1                	or     ecx,eax
c001e2c2:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e2c6:	c1 e1 04             	shl    ecx,0x4
c001e2c9:	d4 40                	aam    0x40
c001e2cb:	d5 39                	aad    0x39
c001e2cd:	83 e8 30             	sub    eax,0x30
c001e2d0:	0f b6 c0             	movzx  eax,al
c001e2d3:	09 c8                	or     eax,ecx
c001e2d5:	89 c5                	mov    ebp,eax
c001e2d7:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e2db:	80 f9 44             	cmp    cl,0x44
c001e2de:	74 47                	je     c001e327 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e2e0:	88 c8                	mov    al,cl
c001e2e2:	d4 40                	aam    0x40
c001e2e4:	d5 39                	aad    0x39
c001e2e6:	83 e8 30             	sub    eax,0x30
c001e2e9:	0f b6 f8             	movzx  edi,al
c001e2ec:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e2f0:	c1 e7 04             	shl    edi,0x4
c001e2f3:	d4 40                	aam    0x40
c001e2f5:	d5 39                	aad    0x39
c001e2f7:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e2fa:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e2fe:	0f b6 db             	movzx  ebx,bl
c001e301:	09 fb                	or     ebx,edi
c001e303:	c1 e3 04             	shl    ebx,0x4
c001e306:	d4 40                	aam    0x40
c001e308:	d5 39                	aad    0x39
c001e30a:	83 e8 30             	sub    eax,0x30
c001e30d:	0f b6 f8             	movzx  edi,al
c001e310:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e314:	09 fb                	or     ebx,edi
c001e316:	89 df                	mov    edi,ebx
c001e318:	c1 e7 04             	shl    edi,0x4
c001e31b:	d4 40                	aam    0x40
c001e31d:	d5 39                	aad    0x39
c001e31f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e322:	0f b6 db             	movzx  ebx,bl
c001e325:	09 fb                	or     ebx,edi
c001e327:	a1 04 ab 02 c0       	mov    eax,ds:0xc002ab04
c001e32c:	83 c6 10             	add    esi,0x10
c001e32f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e333:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e337:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e33a:	3c 0a                	cmp    al,0xa
c001e33c:	0f 85 a0 00 00 00    	jne    c001e3e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e342:	3c 0a                	cmp    al,0xa
c001e344:	0f 94 c0             	sete   al
c001e347:	0f b6 c0             	movzx  eax,al
c001e34a:	01 c6                	add    esi,eax
c001e34c:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e351:	0f 84 a2 00 00 00    	je     c001e3f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e357:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e35f:	0f 84 94 00 00 00    	je     c001e3f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e365:	39 35 04 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab04,esi
c001e36b:	0f 8f bb fe ff ff    	jg     c001e22c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e371:	e9 e8 00 00 00       	jmp    c001e45e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e376:	83 ec 0c             	sub    esp,0xc
c001e379:	68 7a 73 02 c0       	push   0xc002737a
c001e37e:	e8 be ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e383:	83 c4 10             	add    esp,0x10
c001e386:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e38d:	0f 85 a6 fe ff ff    	jne    c001e239 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e393:	e4 60                	in     al,0x60
c001e395:	3c 5a                	cmp    al,0x5a
c001e397:	74 04                	je     c001e39d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e399:	3c 1c                	cmp    al,0x1c
c001e39b:	75 f6                	jne    c001e393 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e39d:	e4 60                	in     al,0x60
c001e39f:	3c 5a                	cmp    al,0x5a
c001e3a1:	74 fa                	je     c001e39d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e3a3:	3c 1c                	cmp    al,0x1c
c001e3a5:	74 f6                	je     c001e39d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e3a7:	e9 8d fe ff ff       	jmp    c001e239 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e3ac:	83 ec 0c             	sub    esp,0xc
c001e3af:	68 82 73 02 c0       	push   0xc0027382
c001e3b4:	e8 88 ba fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e3b9:	83 c4 10             	add    esp,0x10
c001e3bc:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e3c3:	0f 85 90 fe ff ff    	jne    c001e259 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e3c9:	e4 60                	in     al,0x60
c001e3cb:	3c 5a                	cmp    al,0x5a
c001e3cd:	74 04                	je     c001e3d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e3cf:	3c 1c                	cmp    al,0x1c
c001e3d1:	75 f6                	jne    c001e3c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e3d3:	e4 60                	in     al,0x60
c001e3d5:	3c 5a                	cmp    al,0x5a
c001e3d7:	74 fa                	je     c001e3d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e3d9:	3c 1c                	cmp    al,0x1c
c001e3db:	74 f6                	je     c001e3d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e3dd:	e9 77 fe ff ff       	jmp    c001e259 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e3e2:	47                   	inc    edi
c001e3e3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e3e7:	0f 84 55 ff ff ff    	je     c001e342 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e3ed:	46                   	inc    esi
c001e3ee:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e3f1:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e3f4:	e9 3e ff ff ff       	jmp    c001e337 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e3f9:	80 f9 44             	cmp    cl,0x44
c001e3fc:	74 0e                	je     c001e40c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e3fe:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e406:	0f 85 59 ff ff ff    	jne    c001e365 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e40c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e410:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e414:	c1 e0 04             	shl    eax,0x4
c001e417:	83 ea 30             	sub    edx,0x30
c001e41a:	09 d0                	or     eax,edx
c001e41c:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e423:	0f 85 3c ff ff ff    	jne    c001e365 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e429:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e42d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e431:	c1 e2 04             	shl    edx,0x4
c001e434:	83 e8 30             	sub    eax,0x30
c001e437:	09 d0                	or     eax,edx
c001e439:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e440:	0f 85 1f ff ff ff    	jne    c001e365 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e446:	50                   	push   eax
c001e447:	50                   	push   eax
c001e448:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e44c:	50                   	push   eax
c001e44d:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e454:	e8 f7 22 fe ff       	call   c0000750 <strcpy>
c001e459:	83 c4 10             	add    esp,0x10
c001e45c:	eb 15                	jmp    c001e473 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e45e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e465:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e470:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e473:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e47a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e480:	5b                   	pop    ebx
c001e481:	5e                   	pop    esi
c001e482:	5f                   	pop    edi
c001e483:	5d                   	pop    ebp
c001e484:	c3                   	ret    
c001e485:	90                   	nop

c001e486 <PCI::checkBus(unsigned char)>:
c001e486:	56                   	push   esi
c001e487:	53                   	push   ebx
c001e488:	31 db                	xor    ebx,ebx
c001e48a:	51                   	push   ecx
c001e48b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e490:	52                   	push   edx
c001e491:	53                   	push   ebx
c001e492:	43                   	inc    ebx
c001e493:	56                   	push   esi
c001e494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e498:	e8 bf 07 00 00       	call   c001ec5c <PCI::checkDevice(unsigned char, unsigned char)>
c001e49d:	83 c4 10             	add    esp,0x10
c001e4a0:	83 fb 20             	cmp    ebx,0x20
c001e4a3:	75 eb                	jne    c001e490 <PCI::checkBus(unsigned char)+0xa>
c001e4a5:	58                   	pop    eax
c001e4a6:	5b                   	pop    ebx
c001e4a7:	5e                   	pop    esi
c001e4a8:	c3                   	ret    
c001e4a9:	90                   	nop

c001e4aa <PCI::foundDevice(PCIDeviceInfo)>:
c001e4aa:	55                   	push   ebp
c001e4ab:	57                   	push   edi
c001e4ac:	56                   	push   esi
c001e4ad:	53                   	push   ebx
c001e4ae:	83 ec 1c             	sub    esp,0x1c
c001e4b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4b5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e4bb:	0f 84 20 04 00 00    	je     c001e8e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e4c1:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e4c8:	75 37                	jne    c001e501 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e4ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e4ce:	66 81 f9 06 04       	cmp    cx,0x406
c001e4d3:	75 5b                	jne    c001e530 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e4d5:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e4da:	50                   	push   eax
c001e4db:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e4e0:	50                   	push   eax
c001e4e1:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e4e6:	50                   	push   eax
c001e4e7:	53                   	push   ebx
c001e4e8:	e8 33 fa ff ff       	call   c001df20 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e4ed:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e4f1:	0f b6 c0             	movzx  eax,al
c001e4f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e4f8:	83 c4 2c             	add    esp,0x2c
c001e4fb:	5b                   	pop    ebx
c001e4fc:	5e                   	pop    esi
c001e4fd:	5f                   	pop    edi
c001e4fe:	5d                   	pop    ebp
c001e4ff:	eb 85                	jmp    c001e486 <PCI::checkBus(unsigned char)>
c001e501:	83 ec 0c             	sub    esp,0xc
c001e504:	68 8b 73 02 c0       	push   0xc002738b
c001e509:	e8 33 b9 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e50e:	83 c4 10             	add    esp,0x10
c001e511:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e518:	75 b0                	jne    c001e4ca <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e51a:	e4 60                	in     al,0x60
c001e51c:	3c 5a                	cmp    al,0x5a
c001e51e:	74 04                	je     c001e524 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e520:	3c 1c                	cmp    al,0x1c
c001e522:	75 f6                	jne    c001e51a <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e524:	e4 60                	in     al,0x60
c001e526:	3c 5a                	cmp    al,0x5a
c001e528:	74 fa                	je     c001e524 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e52a:	3c 1c                	cmp    al,0x1c
c001e52c:	74 f6                	je     c001e524 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e52e:	eb 9a                	jmp    c001e4ca <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e530:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e536:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e53a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e53e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e542:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e546:	88 d0                	mov    al,dl
c001e548:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e54d:	74 3b                	je     c001e58a <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e54f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e553:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e556:	85 d2                	test   edx,edx
c001e558:	74 24                	je     c001e57e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e55a:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e560:	31 ef                	xor    edi,ebp
c001e562:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e568:	75 14                	jne    c001e57e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e56a:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e570:	75 0c                	jne    c001e57e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e572:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e578:	0f 84 63 03 00 00    	je     c001e8e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e57e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e582:	8b 12                	mov    edx,DWORD PTR [edx]
c001e584:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e588:	eb be                	jmp    c001e548 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e58a:	66 81 f9 01 06       	cmp    cx,0x601
c001e58f:	0f 85 81 01 00 00    	jne    c001e716 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e595:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e59c:	75 25                	jne    c001e5c3 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e59e:	83 ec 0c             	sub    esp,0xc
c001e5a1:	68 64 01 00 00       	push   0x164
c001e5a6:	e8 3c b8 fe ff       	call   c0009de7 <malloc>
c001e5ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5ae:	89 c5                	mov    ebp,eax
c001e5b0:	e8 d3 12 00 00       	call   c001f888 <SATABus::SATABus()>
c001e5b5:	83 c4 10             	add    esp,0x10
c001e5b8:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e5bf:	74 4a                	je     c001e60b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e5c1:	eb 2f                	jmp    c001e5f2 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e5c3:	83 ec 0c             	sub    esp,0xc
c001e5c6:	68 9b 73 02 c0       	push   0xc002739b
c001e5cb:	e8 71 b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e5d0:	83 c4 10             	add    esp,0x10
c001e5d3:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e5da:	75 c2                	jne    c001e59e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e5dc:	e4 60                	in     al,0x60
c001e5de:	3c 1c                	cmp    al,0x1c
c001e5e0:	74 04                	je     c001e5e6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e5e2:	3c 5a                	cmp    al,0x5a
c001e5e4:	75 f6                	jne    c001e5dc <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e5e6:	e4 60                	in     al,0x60
c001e5e8:	3c 5a                	cmp    al,0x5a
c001e5ea:	74 fa                	je     c001e5e6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e5ec:	3c 1c                	cmp    al,0x1c
c001e5ee:	74 f6                	je     c001e5e6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e5f0:	eb ac                	jmp    c001e59e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e5f2:	83 ec 0c             	sub    esp,0xc
c001e5f5:	68 a1 73 02 c0       	push   0xc00273a1
c001e5fa:	e8 42 b8 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e5ff:	83 c4 10             	add    esp,0x10
c001e602:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e609:	74 1b                	je     c001e626 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e60b:	50                   	push   eax
c001e60c:	50                   	push   eax
c001e60d:	55                   	push   ebp
c001e60e:	53                   	push   ebx
c001e60f:	e8 26 00 ff ff       	call   c000e63a <Device::addChild(Device*)>
c001e614:	83 c4 10             	add    esp,0x10
c001e617:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e61e:	74 33                	je     c001e653 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e620:	eb 18                	jmp    c001e63a <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e622:	3c 1c                	cmp    al,0x1c
c001e624:	74 0c                	je     c001e632 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e626:	e4 60                	in     al,0x60
c001e628:	3c 5a                	cmp    al,0x5a
c001e62a:	75 f6                	jne    c001e622 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e62c:	eb 04                	jmp    c001e632 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e62e:	3c 1c                	cmp    al,0x1c
c001e630:	75 d9                	jne    c001e60b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e632:	e4 60                	in     al,0x60
c001e634:	3c 5a                	cmp    al,0x5a
c001e636:	74 fa                	je     c001e632 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e638:	eb f4                	jmp    c001e62e <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e63a:	83 ec 0c             	sub    esp,0xc
c001e63d:	68 a9 73 02 c0       	push   0xc00273a9
c001e642:	e8 fa b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e647:	83 c4 10             	add    esp,0x10
c001e64a:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e651:	74 29                	je     c001e67c <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e653:	83 ec 2c             	sub    esp,0x2c
c001e656:	b9 09 00 00 00       	mov    ecx,0x9
c001e65b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e65f:	fc                   	cld    
c001e660:	89 e7                	mov    edi,esp
c001e662:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e664:	55                   	push   ebp
c001e665:	e8 e2 fe fe ff       	call   c000e54c <Device::preOpenPCI(PCIDeviceInfo)>
c001e66a:	83 c4 30             	add    esp,0x30
c001e66d:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e674:	74 33                	je     c001e6a9 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e676:	eb 18                	jmp    c001e690 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e678:	3c 1c                	cmp    al,0x1c
c001e67a:	74 0c                	je     c001e688 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e67c:	e4 60                	in     al,0x60
c001e67e:	3c 5a                	cmp    al,0x5a
c001e680:	75 f6                	jne    c001e678 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e682:	eb 04                	jmp    c001e688 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e684:	3c 1c                	cmp    al,0x1c
c001e686:	75 cb                	jne    c001e653 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e688:	e4 60                	in     al,0x60
c001e68a:	3c 5a                	cmp    al,0x5a
c001e68c:	74 fa                	je     c001e688 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e68e:	eb f4                	jmp    c001e684 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e690:	83 ec 0c             	sub    esp,0xc
c001e693:	68 b1 73 02 c0       	push   0xc00273b1
c001e698:	e8 a4 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e69d:	83 c4 10             	add    esp,0x10
c001e6a0:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e6a7:	74 23                	je     c001e6cc <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e6a9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e6ac:	6a 00                	push   0x0
c001e6ae:	6a 00                	push   0x0
c001e6b0:	6a 00                	push   0x0
c001e6b2:	55                   	push   ebp
c001e6b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6b6:	83 c4 10             	add    esp,0x10
c001e6b9:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e6c0:	0f 84 1b 02 00 00    	je     c001e8e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6c6:	eb 18                	jmp    c001e6e0 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e6c8:	3c 1c                	cmp    al,0x1c
c001e6ca:	74 0c                	je     c001e6d8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e6cc:	e4 60                	in     al,0x60
c001e6ce:	3c 5a                	cmp    al,0x5a
c001e6d0:	75 f6                	jne    c001e6c8 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e6d2:	eb 04                	jmp    c001e6d8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e6d4:	3c 1c                	cmp    al,0x1c
c001e6d6:	75 d1                	jne    c001e6a9 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e6d8:	e4 60                	in     al,0x60
c001e6da:	3c 5a                	cmp    al,0x5a
c001e6dc:	74 fa                	je     c001e6d8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e6de:	eb f4                	jmp    c001e6d4 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e6e0:	83 ec 0c             	sub    esp,0xc
c001e6e3:	68 b9 73 02 c0       	push   0xc00273b9
c001e6e8:	e8 54 b7 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e6ed:	83 c4 10             	add    esp,0x10
c001e6f0:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e6f7:	0f 85 e4 01 00 00    	jne    c001e8e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6fd:	e4 60                	in     al,0x60
c001e6ff:	3c 5a                	cmp    al,0x5a
c001e701:	74 04                	je     c001e707 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e703:	3c 1c                	cmp    al,0x1c
c001e705:	75 f6                	jne    c001e6fd <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e707:	e4 60                	in     al,0x60
c001e709:	3c 5a                	cmp    al,0x5a
c001e70b:	74 fa                	je     c001e707 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e70d:	3c 1c                	cmp    al,0x1c
c001e70f:	74 f6                	je     c001e707 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e711:	e9 cb 01 00 00       	jmp    c001e8e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e716:	66 81 f9 01 01       	cmp    cx,0x101
c001e71b:	0f 85 7a 01 00 00    	jne    c001e89b <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e721:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e728:	75 25                	jne    c001e74f <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e72a:	83 ec 0c             	sub    esp,0xc
c001e72d:	68 70 02 00 00       	push   0x270
c001e732:	e8 b0 b6 fe ff       	call   c0009de7 <malloc>
c001e737:	89 04 24             	mov    DWORD PTR [esp],eax
c001e73a:	89 c5                	mov    ebp,eax
c001e73c:	e8 df 05 00 00       	call   c001ed20 <IDE::IDE()>
c001e741:	83 c4 10             	add    esp,0x10
c001e744:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e74b:	74 4a                	je     c001e797 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e74d:	eb 2f                	jmp    c001e77e <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e74f:	83 ec 0c             	sub    esp,0xc
c001e752:	68 c1 73 02 c0       	push   0xc00273c1
c001e757:	e8 e5 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e75c:	83 c4 10             	add    esp,0x10
c001e75f:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e766:	75 c2                	jne    c001e72a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e768:	e4 60                	in     al,0x60
c001e76a:	3c 5a                	cmp    al,0x5a
c001e76c:	74 04                	je     c001e772 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e76e:	3c 1c                	cmp    al,0x1c
c001e770:	75 f6                	jne    c001e768 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e772:	e4 60                	in     al,0x60
c001e774:	3c 5a                	cmp    al,0x5a
c001e776:	74 fa                	je     c001e772 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e778:	3c 1c                	cmp    al,0x1c
c001e77a:	74 f6                	je     c001e772 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e77c:	eb ac                	jmp    c001e72a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e77e:	83 ec 0c             	sub    esp,0xc
c001e781:	68 c8 73 02 c0       	push   0xc00273c8
c001e786:	e8 b6 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e78b:	83 c4 10             	add    esp,0x10
c001e78e:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e795:	74 1b                	je     c001e7b2 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e797:	57                   	push   edi
c001e798:	57                   	push   edi
c001e799:	55                   	push   ebp
c001e79a:	53                   	push   ebx
c001e79b:	e8 9a fe fe ff       	call   c000e63a <Device::addChild(Device*)>
c001e7a0:	83 c4 10             	add    esp,0x10
c001e7a3:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e7aa:	74 33                	je     c001e7df <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e7ac:	eb 18                	jmp    c001e7c6 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e7ae:	3c 1c                	cmp    al,0x1c
c001e7b0:	74 0c                	je     c001e7be <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7b2:	e4 60                	in     al,0x60
c001e7b4:	3c 5a                	cmp    al,0x5a
c001e7b6:	75 f6                	jne    c001e7ae <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e7b8:	eb 04                	jmp    c001e7be <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7ba:	3c 1c                	cmp    al,0x1c
c001e7bc:	75 d9                	jne    c001e797 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e7be:	e4 60                	in     al,0x60
c001e7c0:	3c 5a                	cmp    al,0x5a
c001e7c2:	74 fa                	je     c001e7be <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e7c4:	eb f4                	jmp    c001e7ba <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e7c6:	83 ec 0c             	sub    esp,0xc
c001e7c9:	68 cf 73 02 c0       	push   0xc00273cf
c001e7ce:	e8 6e b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e7d3:	83 c4 10             	add    esp,0x10
c001e7d6:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e7dd:	74 29                	je     c001e808 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e7df:	83 ec 2c             	sub    esp,0x2c
c001e7e2:	b9 09 00 00 00       	mov    ecx,0x9
c001e7e7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e7eb:	fc                   	cld    
c001e7ec:	89 e7                	mov    edi,esp
c001e7ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e7f0:	55                   	push   ebp
c001e7f1:	e8 56 fd fe ff       	call   c000e54c <Device::preOpenPCI(PCIDeviceInfo)>
c001e7f6:	83 c4 30             	add    esp,0x30
c001e7f9:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e800:	74 33                	je     c001e835 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e802:	eb 18                	jmp    c001e81c <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e804:	3c 1c                	cmp    al,0x1c
c001e806:	74 0c                	je     c001e814 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e808:	e4 60                	in     al,0x60
c001e80a:	3c 5a                	cmp    al,0x5a
c001e80c:	75 f6                	jne    c001e804 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e80e:	eb 04                	jmp    c001e814 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e810:	3c 1c                	cmp    al,0x1c
c001e812:	75 cb                	jne    c001e7df <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e814:	e4 60                	in     al,0x60
c001e816:	3c 5a                	cmp    al,0x5a
c001e818:	74 fa                	je     c001e814 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e81a:	eb f4                	jmp    c001e810 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e81c:	83 ec 0c             	sub    esp,0xc
c001e81f:	68 d6 73 02 c0       	push   0xc00273d6
c001e824:	e8 18 b6 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e829:	83 c4 10             	add    esp,0x10
c001e82c:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e833:	74 23                	je     c001e858 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e835:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e838:	6a 00                	push   0x0
c001e83a:	6a 00                	push   0x0
c001e83c:	6a 00                	push   0x0
c001e83e:	55                   	push   ebp
c001e83f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e842:	83 c4 10             	add    esp,0x10
c001e845:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e84c:	0f 84 8f 00 00 00    	je     c001e8e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e852:	eb 18                	jmp    c001e86c <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e854:	3c 1c                	cmp    al,0x1c
c001e856:	74 0c                	je     c001e864 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e858:	e4 60                	in     al,0x60
c001e85a:	3c 5a                	cmp    al,0x5a
c001e85c:	75 f6                	jne    c001e854 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e85e:	eb 04                	jmp    c001e864 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e860:	3c 1c                	cmp    al,0x1c
c001e862:	75 d1                	jne    c001e835 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e864:	e4 60                	in     al,0x60
c001e866:	3c 5a                	cmp    al,0x5a
c001e868:	74 fa                	je     c001e864 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e86a:	eb f4                	jmp    c001e860 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e86c:	83 ec 0c             	sub    esp,0xc
c001e86f:	68 dd 73 02 c0       	push   0xc00273dd
c001e874:	e8 c8 b5 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e879:	83 c4 10             	add    esp,0x10
c001e87c:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e883:	75 5c                	jne    c001e8e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e885:	e4 60                	in     al,0x60
c001e887:	3c 5a                	cmp    al,0x5a
c001e889:	74 04                	je     c001e88f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e88b:	3c 1c                	cmp    al,0x1c
c001e88d:	75 f6                	jne    c001e885 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e88f:	e4 60                	in     al,0x60
c001e891:	3c 5a                	cmp    al,0x5a
c001e893:	74 fa                	je     c001e88f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e895:	3c 1c                	cmp    al,0x1c
c001e897:	74 f6                	je     c001e88f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e899:	eb 46                	jmp    c001e8e1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e89b:	83 ec 0c             	sub    esp,0xc
c001e89e:	68 58 01 00 00       	push   0x158
c001e8a3:	e8 3f b5 fe ff       	call   c0009de7 <malloc>
c001e8a8:	89 c5                	mov    ebp,eax
c001e8aa:	58                   	pop    eax
c001e8ab:	5a                   	pop    edx
c001e8ac:	68 e4 73 02 c0       	push   0xc00273e4
c001e8b1:	55                   	push   ebp
c001e8b2:	e8 8d 00 ff ff       	call   c000e944 <DriverlessDevice::DriverlessDevice(char const*)>
c001e8b7:	59                   	pop    ecx
c001e8b8:	5e                   	pop    esi
c001e8b9:	55                   	push   ebp
c001e8ba:	53                   	push   ebx
c001e8bb:	e8 7a fd fe ff       	call   c000e63a <Device::addChild(Device*)>
c001e8c0:	83 c4 10             	add    esp,0x10
c001e8c3:	b9 09 00 00 00       	mov    ecx,0x9
c001e8c8:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e8cc:	fc                   	cld    
c001e8cd:	89 fe                	mov    esi,edi
c001e8cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e8d1:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e8d5:	83 c4 1c             	add    esp,0x1c
c001e8d8:	5b                   	pop    ebx
c001e8d9:	5e                   	pop    esi
c001e8da:	5f                   	pop    edi
c001e8db:	5d                   	pop    ebp
c001e8dc:	e9 6b fc fe ff       	jmp    c000e54c <Device::preOpenPCI(PCIDeviceInfo)>
c001e8e1:	83 c4 1c             	add    esp,0x1c
c001e8e4:	5b                   	pop    ebx
c001e8e5:	5e                   	pop    esi
c001e8e6:	5f                   	pop    edi
c001e8e7:	5d                   	pop    ebp
c001e8e8:	c3                   	ret    
c001e8e9:	90                   	nop

c001e8ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e8ea:	55                   	push   ebp
c001e8eb:	57                   	push   edi
c001e8ec:	56                   	push   esi
c001e8ed:	53                   	push   ebx
c001e8ee:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e8f4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e8fb:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e902:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e906:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e911:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e918:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e91c:	68 fe 73 02 c0       	push   0xc00273fe
c001e921:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e925:	53                   	push   ebx
c001e926:	e8 25 1e fe ff       	call   c0000750 <strcpy>
c001e92b:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e930:	b2 64                	mov    dl,0x64
c001e932:	89 c8                	mov    eax,ecx
c001e934:	f6 f2                	div    dl
c001e936:	b2 0a                	mov    dl,0xa
c001e938:	83 c0 30             	add    eax,0x30
c001e93b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e93f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	89 c8                	mov    eax,ecx
c001e948:	f6 f2                	div    dl
c001e94a:	89 c1                	mov    ecx,eax
c001e94c:	0f b6 c0             	movzx  eax,al
c001e94f:	88 e9                	mov    cl,ch
c001e951:	f6 f2                	div    dl
c001e953:	88 e0                	mov    al,ah
c001e955:	83 c0 30             	add    eax,0x30
c001e958:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e95c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e960:	8d 41 30             	lea    eax,[ecx+0x30]
c001e963:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e967:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e96b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e970:	f6 f2                	div    dl
c001e972:	89 c1                	mov    ecx,eax
c001e974:	0f b6 c0             	movzx  eax,al
c001e977:	88 e9                	mov    cl,ch
c001e979:	f6 f2                	div    dl
c001e97b:	88 e0                	mov    al,ah
c001e97d:	83 c0 30             	add    eax,0x30
c001e980:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e984:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e988:	8d 41 30             	lea    eax,[ecx+0x30]
c001e98b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e98f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e993:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e998:	f6 f2                	div    dl
c001e99a:	89 c1                	mov    ecx,eax
c001e99c:	0f b6 c0             	movzx  eax,al
c001e99f:	88 e9                	mov    cl,ch
c001e9a1:	f6 f2                	div    dl
c001e9a3:	88 e0                	mov    al,ah
c001e9a5:	83 c0 30             	add    eax,0x30
c001e9a8:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001e9af:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e9b3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e9b7:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9ba:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e9be:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e9c2:	74 29                	je     c001e9ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e9c4:	83 ec 0c             	sub    esp,0xc
c001e9c7:	53                   	push   ebx
c001e9c8:	e8 74 b4 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001e9cd:	83 c4 10             	add    esp,0x10
c001e9d0:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001e9d7:	75 14                	jne    c001e9ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e9d9:	e4 60                	in     al,0x60
c001e9db:	3c 1c                	cmp    al,0x1c
c001e9dd:	74 04                	je     c001e9e3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e9df:	3c 5a                	cmp    al,0x5a
c001e9e1:	75 f6                	jne    c001e9d9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e9e3:	e4 60                	in     al,0x60
c001e9e5:	3c 5a                	cmp    al,0x5a
c001e9e7:	74 fa                	je     c001e9e3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e9e9:	3c 1c                	cmp    al,0x1c
c001e9eb:	74 f6                	je     c001e9e3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e9ed:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e9f2:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e9f7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e9fc:	83 ec 0c             	sub    esp,0xc
c001e9ff:	6a 0c                	push   0xc
c001ea01:	56                   	push   esi
c001ea02:	53                   	push   ebx
c001ea03:	57                   	push   edi
c001ea04:	55                   	push   ebp
c001ea05:	e8 68 f3 ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea0a:	83 c4 20             	add    esp,0x20
c001ea0d:	56                   	push   esi
c001ea0e:	53                   	push   ebx
c001ea0f:	57                   	push   edi
c001ea10:	55                   	push   ebp
c001ea11:	e8 50 f4 ff ff       	call   c001de66 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ea16:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001ea1b:	56                   	push   esi
c001ea1c:	53                   	push   ebx
c001ea1d:	57                   	push   edi
c001ea1e:	55                   	push   ebp
c001ea1f:	e8 d8 f4 ff ff       	call   c001defc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ea24:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001ea28:	83 c4 14             	add    esp,0x14
c001ea2b:	6a 3c                	push   0x3c
c001ea2d:	56                   	push   esi
c001ea2e:	53                   	push   ebx
c001ea2f:	57                   	push   edi
c001ea30:	55                   	push   ebp
c001ea31:	e8 3c f3 ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea36:	0f b6 c4             	movzx  eax,ah
c001ea39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ea3d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ea41:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001ea48:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001ea4d:	83 c4 20             	add    esp,0x20
c001ea50:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ea56:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001ea5d:	0f 84 38 01 00 00    	je     c001eb9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001ea63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ea6b:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001ea70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea74:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ea7a:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001ea80:	0f 8e 15 01 00 00    	jle    c001eb9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001ea86:	50                   	push   eax
c001ea87:	50                   	push   eax
c001ea88:	68 19 74 02 c0       	push   0xc0027419
c001ea8d:	8d 44 24 68          	lea    eax,[esp+0x68]
c001ea91:	50                   	push   eax
c001ea92:	e8 b9 1c fe ff       	call   c0000750 <strcpy>
c001ea97:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001ea9b:	b9 0a 00 00 00       	mov    ecx,0xa
c001eaa0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001eaa4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001eaa8:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001eaac:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001eab0:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001eab4:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001eab8:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001eabc:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001eac0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001eac4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001eac8:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001eacc:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001ead0:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001ead4:	83 c4 10             	add    esp,0x10
c001ead7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eadb:	99                   	cdq    
c001eadc:	f7 f9                	idiv   ecx
c001eade:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001eae2:	99                   	cdq    
c001eae3:	f7 f9                	idiv   ecx
c001eae5:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001eae9:	83 c2 30             	add    edx,0x30
c001eaec:	83 c0 30             	add    eax,0x30
c001eaef:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001eaf3:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001eaf7:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001eafe:	74 2d                	je     c001eb2d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb00:	83 ec 0c             	sub    esp,0xc
c001eb03:	8d 44 24 68          	lea    eax,[esp+0x68]
c001eb07:	50                   	push   eax
c001eb08:	e8 34 b3 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001eb0d:	83 c4 10             	add    esp,0x10
c001eb10:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001eb17:	75 14                	jne    c001eb2d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb19:	e4 60                	in     al,0x60
c001eb1b:	3c 5a                	cmp    al,0x5a
c001eb1d:	74 04                	je     c001eb23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb1f:	3c 1c                	cmp    al,0x1c
c001eb21:	75 f6                	jne    c001eb19 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001eb23:	e4 60                	in     al,0x60
c001eb25:	3c 5a                	cmp    al,0x5a
c001eb27:	74 fa                	je     c001eb23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb29:	3c 1c                	cmp    al,0x1c
c001eb2b:	74 f6                	je     c001eb23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001eb2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eb31:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001eb36:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eb3c:	8d 04 d0             	lea    eax,[eax+edx*8]
c001eb3f:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001eb46:	39 d3                	cmp    ebx,edx
c001eb48:	75 48                	jne    c001eb92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001eb4a:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001eb51:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001eb55:	75 3b                	jne    c001eb92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001eb57:	83 ec 0c             	sub    esp,0xc
c001eb5a:	68 48 74 02 c0       	push   0xc0027448
c001eb5f:	e8 63 e5 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001eb64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb68:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c001eb6d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eb73:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001eb7b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001eb7f:	50                   	push   eax
c001eb80:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001eb84:	53                   	push   ebx
c001eb85:	68 6d 74 02 c0       	push   0xc002746d
c001eb8a:	e8 38 e5 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001eb8f:	83 c4 20             	add    esp,0x20
c001eb92:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001eb96:	e9 d0 fe ff ff       	jmp    c001ea6b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001eb9b:	31 d2                	xor    edx,edx
c001eb9d:	83 ec 0c             	sub    esp,0xc
c001eba0:	56                   	push   esi
c001eba1:	53                   	push   ebx
c001eba2:	57                   	push   edi
c001eba3:	52                   	push   edx
c001eba4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001eba8:	55                   	push   ebp
c001eba9:	e8 9a f3 ff ff       	call   c001df48 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ebae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ebb2:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001ebb9:	42                   	inc    edx
c001ebba:	83 c4 20             	add    esp,0x20
c001ebbd:	83 fa 06             	cmp    edx,0x6
c001ebc0:	75 db                	jne    c001eb9d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001ebc2:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001ebc7:	83 ec 0c             	sub    esp,0xc
c001ebca:	86 e0                	xchg   al,ah
c001ebcc:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001ebd4:	6a 02                	push   0x2
c001ebd6:	56                   	push   esi
c001ebd7:	53                   	push   ebx
c001ebd8:	57                   	push   edi
c001ebd9:	55                   	push   ebp
c001ebda:	e8 93 f1 ff ff       	call   c001dd72 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ebdf:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001ebe7:	83 c4 20             	add    esp,0x20
c001ebea:	56                   	push   esi
c001ebeb:	53                   	push   ebx
c001ebec:	57                   	push   edi
c001ebed:	55                   	push   ebp
c001ebee:	e8 bd f2 ff ff       	call   c001deb0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ebf3:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ebfa:	56                   	push   esi
c001ebfb:	53                   	push   ebx
c001ebfc:	57                   	push   edi
c001ebfd:	55                   	push   ebp
c001ebfe:	e8 17 f2 ff ff       	call   c001de1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec03:	b9 09 00 00 00       	mov    ecx,0x9
c001ec08:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001ec10:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001ec14:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001ec1b:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ec1f:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001ec26:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ec2a:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001ec31:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ec35:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001ec3c:	83 ec 0c             	sub    esp,0xc
c001ec3f:	fc                   	cld    
c001ec40:	89 e7                	mov    edi,esp
c001ec42:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ec49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ec4b:	55                   	push   ebp
c001ec4c:	e8 59 f8 ff ff       	call   c001e4aa <PCI::foundDevice(PCIDeviceInfo)>
c001ec51:	81 c4 dc 00 00 00    	add    esp,0xdc
c001ec57:	5b                   	pop    ebx
c001ec58:	5e                   	pop    esi
c001ec59:	5f                   	pop    edi
c001ec5a:	5d                   	pop    ebp
c001ec5b:	c3                   	ret    

c001ec5c <PCI::checkDevice(unsigned char, unsigned char)>:
c001ec5c:	55                   	push   ebp
c001ec5d:	57                   	push   edi
c001ec5e:	56                   	push   esi
c001ec5f:	53                   	push   ebx
c001ec60:	83 ec 0c             	sub    esp,0xc
c001ec63:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ec67:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ec6c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ec71:	6a 00                	push   0x0
c001ec73:	56                   	push   esi
c001ec74:	57                   	push   edi
c001ec75:	55                   	push   ebp
c001ec76:	e8 9f f1 ff ff       	call   c001de1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec7b:	6a 00                	push   0x0
c001ec7d:	56                   	push   esi
c001ec7e:	57                   	push   edi
c001ec7f:	55                   	push   ebp
c001ec80:	e8 65 fc ff ff       	call   c001e8ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ec85:	83 c4 20             	add    esp,0x20
c001ec88:	6a 00                	push   0x0
c001ec8a:	56                   	push   esi
c001ec8b:	57                   	push   edi
c001ec8c:	55                   	push   ebp
c001ec8d:	e8 ac f1 ff ff       	call   c001de3e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ec92:	83 c4 10             	add    esp,0x10
c001ec95:	84 c0                	test   al,al
c001ec97:	79 27                	jns    c001ecc0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ec99:	bb 01 00 00 00       	mov    ebx,0x1
c001ec9e:	53                   	push   ebx
c001ec9f:	56                   	push   esi
c001eca0:	57                   	push   edi
c001eca1:	55                   	push   ebp
c001eca2:	e8 73 f1 ff ff       	call   c001de1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eca7:	83 c4 10             	add    esp,0x10
c001ecaa:	66 40                	inc    ax
c001ecac:	74 0c                	je     c001ecba <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001ecae:	53                   	push   ebx
c001ecaf:	56                   	push   esi
c001ecb0:	57                   	push   edi
c001ecb1:	55                   	push   ebp
c001ecb2:	e8 33 fc ff ff       	call   c001e8ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ecb7:	83 c4 10             	add    esp,0x10
c001ecba:	43                   	inc    ebx
c001ecbb:	83 fb 08             	cmp    ebx,0x8
c001ecbe:	75 de                	jne    c001ec9e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ecc0:	83 c4 0c             	add    esp,0xc
c001ecc3:	5b                   	pop    ebx
c001ecc4:	5e                   	pop    esi
c001ecc5:	5f                   	pop    edi
c001ecc6:	5d                   	pop    ebp
c001ecc7:	c3                   	ret    

c001ecc8 <PCI::detect()>:
c001ecc8:	56                   	push   esi
c001ecc9:	53                   	push   ebx
c001ecca:	53                   	push   ebx
c001eccb:	31 db                	xor    ebx,ebx
c001eccd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ecd1:	6a 00                	push   0x0
c001ecd3:	6a 00                	push   0x0
c001ecd5:	6a 00                	push   0x0
c001ecd7:	56                   	push   esi
c001ecd8:	e8 61 f1 ff ff       	call   c001de3e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ecdd:	83 c4 10             	add    esp,0x10
c001ece0:	a8 80                	test   al,0x80
c001ece2:	75 21                	jne    c001ed05 <PCI::detect()+0x3d>
c001ece4:	51                   	push   ecx
c001ece5:	51                   	push   ecx
c001ece6:	6a 00                	push   0x0
c001ece8:	56                   	push   esi
c001ece9:	e8 98 f7 ff ff       	call   c001e486 <PCI::checkBus(unsigned char)>
c001ecee:	83 c4 10             	add    esp,0x10
c001ecf1:	eb 24                	jmp    c001ed17 <PCI::detect()+0x4f>
c001ecf3:	52                   	push   edx
c001ecf4:	52                   	push   edx
c001ecf5:	53                   	push   ebx
c001ecf6:	43                   	inc    ebx
c001ecf7:	56                   	push   esi
c001ecf8:	e8 89 f7 ff ff       	call   c001e486 <PCI::checkBus(unsigned char)>
c001ecfd:	83 c4 10             	add    esp,0x10
c001ed00:	83 fb 08             	cmp    ebx,0x8
c001ed03:	74 12                	je     c001ed17 <PCI::detect()+0x4f>
c001ed05:	53                   	push   ebx
c001ed06:	6a 00                	push   0x0
c001ed08:	6a 00                	push   0x0
c001ed0a:	56                   	push   esi
c001ed0b:	e8 0a f1 ff ff       	call   c001de1a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ed10:	83 c4 10             	add    esp,0x10
c001ed13:	66 40                	inc    ax
c001ed15:	74 dc                	je     c001ecf3 <PCI::detect()+0x2b>
c001ed17:	58                   	pop    eax
c001ed18:	5b                   	pop    ebx
c001ed19:	5e                   	pop    esi
c001ed1a:	c3                   	ret    
c001ed1b:	90                   	nop

c001ed1c <IDE::close(int, int, void*)>:
c001ed1c:	83 c8 ff             	or     eax,0xffffffff
c001ed1f:	c3                   	ret    

c001ed20 <IDE::IDE()>:
c001ed20:	83 ec 0c             	sub    esp,0xc
c001ed23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed27:	83 ec 08             	sub    esp,0x8
c001ed2a:	68 b4 74 02 c0       	push   0xc00274b4
c001ed2f:	50                   	push   eax
c001ed30:	e8 b3 fc fe ff       	call   c000e9e8 <HardDiskController::HardDiskController(char const*)>
c001ed35:	83 c4 10             	add    esp,0x10
c001ed38:	ba 60 75 02 c0       	mov    edx,0xc0027560
c001ed3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed41:	89 10                	mov    DWORD PTR [eax],edx
c001ed43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed47:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ed4e:	90                   	nop
c001ed4f:	83 c4 0c             	add    esp,0xc
c001ed52:	c3                   	ret    
c001ed53:	90                   	nop

c001ed54 <IDE::prepareInterrupt(unsigned char)>:
c001ed54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ed59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed5d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ed65:	c3                   	ret    

c001ed66 <selectDrive(unsigned char, unsigned char)>:
c001ed66:	c3                   	ret    
c001ed67:	90                   	nop

c001ed68 <IDE::getBase(unsigned char)>:
c001ed68:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ed6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed71:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ed79:	c3                   	ret    

c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ed7a:	55                   	push   ebp
c001ed7b:	57                   	push   edi
c001ed7c:	56                   	push   esi
c001ed7d:	53                   	push   ebx
c001ed7e:	83 ec 1c             	sub    esp,0x1c
c001ed81:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ed85:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed89:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ed8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ed90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ed94:	80 f9 03             	cmp    cl,0x3
c001ed97:	77 51                	ja     c001edea <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001ed99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed9d:	0f b6 f2             	movzx  esi,dl
c001eda0:	0f b6 db             	movzx  ebx,bl
c001eda3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001eda6:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001edaa:	83 ca 80             	or     edx,0xffffff80
c001edad:	0f b6 d2             	movzx  edx,dl
c001edb0:	52                   	push   edx
c001edb1:	6a 0c                	push   0xc
c001edb3:	56                   	push   esi
c001edb4:	57                   	push   edi
c001edb5:	e8 c0 ff ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edba:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001edbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edc3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001edc7:	ee                   	out    dx,al
c001edc8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001edcd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001edd1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001edd5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001edd9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ede1:	83 c4 2c             	add    esp,0x2c
c001ede4:	5b                   	pop    ebx
c001ede5:	5e                   	pop    esi
c001ede6:	5f                   	pop    edi
c001ede7:	5d                   	pop    ebp
c001ede8:	eb 90                	jmp    c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edea:	80 fb 07             	cmp    bl,0x7
c001eded:	77 12                	ja     c001ee01 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001edef:	0f b6 d2             	movzx  edx,dl
c001edf2:	0f b6 db             	movzx  ebx,bl
c001edf5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001edfd:	89 da                	mov    edx,ebx
c001edff:	eb 2f                	jmp    c001ee30 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee01:	80 fb 0d             	cmp    bl,0xd
c001ee04:	77 13                	ja     c001ee19 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ee06:	0f b6 d2             	movzx  edx,dl
c001ee09:	0f b6 db             	movzx  ebx,bl
c001ee0c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ee13:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ee17:	eb 17                	jmp    c001ee30 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee19:	80 fb 15             	cmp    bl,0x15
c001ee1c:	77 13                	ja     c001ee31 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ee1e:	0f b6 d2             	movzx  edx,dl
c001ee21:	0f b6 db             	movzx  ebx,bl
c001ee24:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ee2c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ee30:	ee                   	out    dx,al
c001ee31:	83 c4 1c             	add    esp,0x1c
c001ee34:	5b                   	pop    ebx
c001ee35:	5e                   	pop    esi
c001ee36:	5f                   	pop    edi
c001ee37:	5d                   	pop    ebp
c001ee38:	c3                   	ret    
c001ee39:	90                   	nop

c001ee3a <IDE::read(unsigned char, unsigned char)>:
c001ee3a:	55                   	push   ebp
c001ee3b:	57                   	push   edi
c001ee3c:	56                   	push   esi
c001ee3d:	53                   	push   ebx
c001ee3e:	83 ec 1c             	sub    esp,0x1c
c001ee41:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ee45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee49:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ee4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ee50:	3c 03                	cmp    al,0x3
c001ee52:	77 43                	ja     c001ee97 <IDE::read(unsigned char, unsigned char)+0x5d>
c001ee54:	0f b6 f2             	movzx  esi,dl
c001ee57:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ee5a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ee5e:	83 c8 80             	or     eax,0xffffff80
c001ee61:	0f b6 c0             	movzx  eax,al
c001ee64:	50                   	push   eax
c001ee65:	6a 0c                	push   0xc
c001ee67:	56                   	push   esi
c001ee68:	57                   	push   edi
c001ee69:	e8 0c ff ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee6e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001ee73:	0f b6 c3             	movzx  eax,bl
c001ee76:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001ee7a:	ec                   	in     al,dx
c001ee7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ee7f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ee84:	52                   	push   edx
c001ee85:	6a 0c                	push   0xc
c001ee87:	56                   	push   esi
c001ee88:	57                   	push   edi
c001ee89:	e8 ec fe ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee8e:	83 c4 20             	add    esp,0x20
c001ee91:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ee95:	eb 49                	jmp    c001eee0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ee97:	80 fb 07             	cmp    bl,0x7
c001ee9a:	77 12                	ja     c001eeae <IDE::read(unsigned char, unsigned char)+0x74>
c001ee9c:	0f b6 d2             	movzx  edx,dl
c001ee9f:	0f b6 c3             	movzx  eax,bl
c001eea2:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001eeaa:	89 c2                	mov    edx,eax
c001eeac:	eb 31                	jmp    c001eedf <IDE::read(unsigned char, unsigned char)+0xa5>
c001eeae:	80 fb 0d             	cmp    bl,0xd
c001eeb1:	77 13                	ja     c001eec6 <IDE::read(unsigned char, unsigned char)+0x8c>
c001eeb3:	0f b6 d2             	movzx  edx,dl
c001eeb6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001eebd:	0f b6 d3             	movzx  edx,bl
c001eec0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001eec4:	eb 19                	jmp    c001eedf <IDE::read(unsigned char, unsigned char)+0xa5>
c001eec6:	31 c0                	xor    eax,eax
c001eec8:	80 fb 15             	cmp    bl,0x15
c001eecb:	77 13                	ja     c001eee0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001eecd:	0f b6 d2             	movzx  edx,dl
c001eed0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001eed8:	0f b6 d3             	movzx  edx,bl
c001eedb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001eedf:	ec                   	in     al,dx
c001eee0:	83 c4 1c             	add    esp,0x1c
c001eee3:	5b                   	pop    ebx
c001eee4:	5e                   	pop    esi
c001eee5:	5f                   	pop    edi
c001eee6:	5d                   	pop    ebp
c001eee7:	c3                   	ret    

c001eee8 <IDE::waitInterrupt(unsigned char)>:
c001eee8:	55                   	push   ebp
c001eee9:	57                   	push   edi
c001eeea:	56                   	push   esi
c001eeeb:	53                   	push   ebx
c001eeec:	31 db                	xor    ebx,ebx
c001eeee:	83 ec 0c             	sub    esp,0xc
c001eef1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001eef5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001eefa:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ef02:	89 e8                	mov    eax,ebp
c001ef04:	84 c0                	test   al,al
c001ef06:	75 30                	jne    c001ef38 <IDE::waitInterrupt(unsigned char)+0x50>
c001ef08:	50                   	push   eax
c001ef09:	6a 0c                	push   0xc
c001ef0b:	56                   	push   esi
c001ef0c:	57                   	push   edi
c001ef0d:	e8 28 ff ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001ef12:	83 c4 10             	add    esp,0x10
c001ef15:	a8 01                	test   al,0x1
c001ef17:	75 27                	jne    c001ef40 <IDE::waitInterrupt(unsigned char)+0x58>
c001ef19:	f6 c3 04             	test   bl,0x4
c001ef1c:	75 12                	jne    c001ef30 <IDE::waitInterrupt(unsigned char)+0x48>
c001ef1e:	83 fb 32             	cmp    ebx,0x32
c001ef21:	7e 0d                	jle    c001ef30 <IDE::waitInterrupt(unsigned char)+0x48>
c001ef23:	83 ec 0c             	sub    esp,0xc
c001ef26:	6a 64                	push   0x64
c001ef28:	e8 db a2 ff ff       	call   c0019208 <milliTenthSleep(unsigned int)>
c001ef2d:	83 c4 10             	add    esp,0x10
c001ef30:	83 fb 3c             	cmp    ebx,0x3c
c001ef33:	74 0b                	je     c001ef40 <IDE::waitInterrupt(unsigned char)+0x58>
c001ef35:	43                   	inc    ebx
c001ef36:	eb c2                	jmp    c001eefa <IDE::waitInterrupt(unsigned char)+0x12>
c001ef38:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ef40:	83 c4 0c             	add    esp,0xc
c001ef43:	89 e8                	mov    eax,ebp
c001ef45:	5b                   	pop    ebx
c001ef46:	5e                   	pop    esi
c001ef47:	5f                   	pop    edi
c001ef48:	5d                   	pop    ebp
c001ef49:	c3                   	ret    

c001ef4a <ideChannel0IRQHandler(regs*, void*)>:
c001ef4a:	83 ec 10             	sub    esp,0x10
c001ef4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef51:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ef58:	6a 07                	push   0x7
c001ef5a:	6a 00                	push   0x0
c001ef5c:	50                   	push   eax
c001ef5d:	e8 d8 fe ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001ef62:	83 c4 1c             	add    esp,0x1c
c001ef65:	c3                   	ret    

c001ef66 <ideChannel1IRQHandler(regs*, void*)>:
c001ef66:	83 ec 10             	sub    esp,0x10
c001ef69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef6d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ef74:	6a 07                	push   0x7
c001ef76:	6a 01                	push   0x1
c001ef78:	50                   	push   eax
c001ef79:	e8 bc fe ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001ef7e:	83 c4 1c             	add    esp,0x1c
c001ef81:	c3                   	ret    

c001ef82 <IDE::enableIRQs(unsigned char, bool)>:
c001ef82:	57                   	push   edi
c001ef83:	56                   	push   esi
c001ef84:	be 04 00 00 00       	mov    esi,0x4
c001ef89:	53                   	push   ebx
c001ef8a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ef8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef93:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ef98:	0f 94 c0             	sete   al
c001ef9b:	d1 e0                	shl    eax,1
c001ef9d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001efa4:	0f b6 c0             	movzx  eax,al
c001efa7:	50                   	push   eax
c001efa8:	6a 0c                	push   0xc
c001efaa:	57                   	push   edi
c001efab:	53                   	push   ebx
c001efac:	e8 c9 fd ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efb1:	83 c4 10             	add    esp,0x10
c001efb4:	50                   	push   eax
c001efb5:	6a 0c                	push   0xc
c001efb7:	57                   	push   edi
c001efb8:	53                   	push   ebx
c001efb9:	e8 7c fe ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001efbe:	83 c4 10             	add    esp,0x10
c001efc1:	4e                   	dec    esi
c001efc2:	75 f0                	jne    c001efb4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001efc4:	5b                   	pop    ebx
c001efc5:	5e                   	pop    esi
c001efc6:	5f                   	pop    edi
c001efc7:	c3                   	ret    

c001efc8 <IDE::open(int, int, void*)>:
c001efc8:	55                   	push   ebp
c001efc9:	57                   	push   edi
c001efca:	56                   	push   esi
c001efcb:	53                   	push   ebx
c001efcc:	83 ec 1c             	sub    esp,0x1c
c001efcf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001efd3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001efdc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001efe5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001efec:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001eff3:	0f 85 cb 02 00 00    	jne    c001f2c4 <IDE::open(int, int, void*)+0x2fc>
c001eff9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001efff:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001f003:	83 e0 7f             	and    eax,0x7f
c001f006:	3c 05                	cmp    al,0x5
c001f008:	74 04                	je     c001f00e <IDE::open(int, int, void*)+0x46>
c001f00a:	3c 0f                	cmp    al,0xf
c001f00c:	75 32                	jne    c001f040 <IDE::open(int, int, void*)+0x78>
c001f00e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f014:	83 e0 fc             	and    eax,0xfffffffc
c001f017:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f01e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f024:	83 e0 fc             	and    eax,0xfffffffc
c001f027:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f02e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f034:	83 e0 fc             	and    eax,0xfffffffc
c001f037:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f03e:	eb 14                	jmp    c001f054 <IDE::open(int, int, void*)+0x8c>
c001f040:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f04a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f054:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f05b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001f062:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f066:	89 c6                	mov    esi,eax
c001f068:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f06d:	c1 e6 10             	shl    esi,0x10
c001f070:	89 e8                	mov    eax,ebp
c001f072:	89 fa                	mov    edx,edi
c001f074:	c1 e0 0b             	shl    eax,0xb
c001f077:	09 f0                	or     eax,esi
c001f079:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001f080:	c1 e6 08             	shl    esi,0x8
c001f083:	09 c6                	or     esi,eax
c001f085:	89 f0                	mov    eax,esi
c001f087:	0d 08 00 00 80       	or     eax,0x80000008
c001f08c:	ef                   	out    dx,eax
c001f08d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001f092:	89 ca                	mov    edx,ecx
c001f094:	ed                   	in     eax,dx
c001f095:	c1 e8 10             	shr    eax,0x10
c001f098:	3d ff ff 00 00       	cmp    eax,0xffff
c001f09d:	0f 84 f5 00 00 00    	je     c001f198 <IDE::open(int, int, void*)+0x1d0>
c001f0a3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001f0a9:	89 fa                	mov    edx,edi
c001f0ab:	89 f0                	mov    eax,esi
c001f0ad:	ef                   	out    dx,eax
c001f0ae:	b0 fe                	mov    al,0xfe
c001f0b0:	89 ca                	mov    edx,ecx
c001f0b2:	ee                   	out    dx,al
c001f0b3:	89 f0                	mov    eax,esi
c001f0b5:	89 fa                	mov    edx,edi
c001f0b7:	ef                   	out    dx,eax
c001f0b8:	89 ca                	mov    edx,ecx
c001f0ba:	ed                   	in     eax,dx
c001f0bb:	3c fe                	cmp    al,0xfe
c001f0bd:	0f 85 a9 00 00 00    	jne    c001f16c <IDE::open(int, int, void*)+0x1a4>
c001f0c3:	8b 15 c8 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bc8
c001f0c9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001f0d0:	74 33                	je     c001f105 <IDE::open(int, int, void*)+0x13d>
c001f0d2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001f0d8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001f0dc:	40                   	inc    eax
c001f0dd:	83 ec 0c             	sub    esp,0xc
c001f0e0:	0f b6 c0             	movzx  eax,al
c001f0e3:	50                   	push   eax
c001f0e4:	55                   	push   ebp
c001f0e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f0e9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001f0ef:	51                   	push   ecx
c001f0f0:	e8 c3 35 ff ff       	call   c00126b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001f0f5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001f0fa:	83 c4 1c             	add    esp,0x1c
c001f0fd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f103:	eb 0a                	jmp    c001f10f <IDE::open(int, int, void*)+0x147>
c001f105:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f10f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f116:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f11d:	c1 e1 10             	shl    ecx,0x10
c001f120:	c1 e0 08             	shl    eax,0x8
c001f123:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f128:	09 c1                	or     ecx,eax
c001f12a:	89 fa                	mov    edx,edi
c001f12c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f133:	c1 e0 0b             	shl    eax,0xb
c001f136:	09 c1                	or     ecx,eax
c001f138:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f13e:	89 c8                	mov    eax,ecx
c001f140:	ef                   	out    dx,eax
c001f141:	be fc 0c 00 00       	mov    esi,0xcfc
c001f146:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001f14c:	89 f2                	mov    edx,esi
c001f14e:	ee                   	out    dx,al
c001f14f:	89 c8                	mov    eax,ecx
c001f151:	89 fa                	mov    edx,edi
c001f153:	ef                   	out    dx,eax
c001f154:	89 f2                	mov    edx,esi
c001f156:	ed                   	in     eax,dx
c001f157:	0f b6 c0             	movzx  eax,al
c001f15a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f160:	74 46                	je     c001f1a8 <IDE::open(int, int, void*)+0x1e0>
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	68 cc 74 02 c0       	push   0xc00274cc
c001f16a:	eb 34                	jmp    c001f1a0 <IDE::open(int, int, void*)+0x1d8>
c001f16c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f175:	75 17                	jne    c001f18e <IDE::open(int, int, void*)+0x1c6>
c001f177:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001f17c:	74 07                	je     c001f185 <IDE::open(int, int, void*)+0x1bd>
c001f17e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001f183:	75 09                	jne    c001f18e <IDE::open(int, int, void*)+0x1c6>
c001f185:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f18c:	eb 1a                	jmp    c001f1a8 <IDE::open(int, int, void*)+0x1e0>
c001f18e:	83 ec 0c             	sub    esp,0xc
c001f191:	68 d4 74 02 c0       	push   0xc00274d4
c001f196:	eb 08                	jmp    c001f1a0 <IDE::open(int, int, void*)+0x1d8>
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	68 05 75 02 c0       	push   0xc0027505
c001f1a0:	e8 04 60 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c001f1a5:	83 c4 10             	add    esp,0x10
c001f1a8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001f1af:	79 1a                	jns    c001f1cb <IDE::open(int, int, void*)+0x203>
c001f1b1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f1b7:	83 e0 fc             	and    eax,0xfffffffc
c001f1ba:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f1c1:	83 c0 08             	add    eax,0x8
c001f1c4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f1cb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f1d1:	89 c2                	mov    edx,eax
c001f1d3:	83 e2 0f             	and    edx,0xf
c001f1d6:	66 83 fa 08          	cmp    dx,0x8
c001f1da:	75 0a                	jne    c001f1e6 <IDE::open(int, int, void*)+0x21e>
c001f1dc:	83 e8 02             	sub    eax,0x2
c001f1df:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f1e6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f1ec:	89 c2                	mov    edx,eax
c001f1ee:	83 e2 0f             	and    edx,0xf
c001f1f1:	66 83 fa 08          	cmp    dx,0x8
c001f1f5:	75 0a                	jne    c001f201 <IDE::open(int, int, void*)+0x239>
c001f1f7:	83 e8 02             	sub    eax,0x2
c001f1fa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f201:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001f208:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f20f:	89 c8                	mov    eax,ecx
c001f211:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f214:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f218:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f21c:	8d 51 01             	lea    edx,[ecx+0x1]
c001f21f:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f224:	0f b6 d2             	movzx  edx,dl
c001f227:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f22e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f231:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f235:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f239:	8d 48 02             	lea    ecx,[eax+0x2]
c001f23c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f241:	0f b6 c9             	movzx  ecx,cl
c001f244:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f24a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f24d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f251:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f255:	8d 50 03             	lea    edx,[eax+0x3]
c001f258:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f25d:	0f b6 d2             	movzx  edx,dl
c001f260:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f266:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f269:	83 c0 04             	add    eax,0x4
c001f26c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f270:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f274:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f27a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f27f:	56                   	push   esi
c001f280:	56                   	push   esi
c001f281:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001f288:	50                   	push   eax
c001f289:	68 2f 75 02 c0       	push   0xc002752f
c001f28e:	e8 34 de fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001f293:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f29a:	83 c4 10             	add    esp,0x10
c001f29d:	66 85 f6             	test   si,si
c001f2a0:	74 5f                	je     c001f301 <IDE::open(int, int, void*)+0x339>
c001f2a2:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f2a9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f2ac:	89 d0                	mov    eax,edx
c001f2ae:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f2b2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f2b6:	40                   	inc    eax
c001f2b7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f2bd:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f2c2:	eb 3d                	jmp    c001f301 <IDE::open(int, int, void*)+0x339>
c001f2c4:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f2ca:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f2d1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f2d8:	66 05 06 02          	add    ax,0x206
c001f2dc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f2e3:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f2ea:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f2f1:	66 05 06 02          	add    ax,0x206
c001f2f5:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f2fc:	e9 ca fe ff ff       	jmp    c001f1cb <IDE::open(int, int, void*)+0x203>
c001f301:	50                   	push   eax
c001f302:	50                   	push   eax
c001f303:	6a 00                	push   0x0
c001f305:	53                   	push   ebx
c001f306:	e8 49 fa ff ff       	call   c001ed54 <IDE::prepareInterrupt(unsigned char)>
c001f30b:	5a                   	pop    edx
c001f30c:	59                   	pop    ecx
c001f30d:	6a 01                	push   0x1
c001f30f:	53                   	push   ebx
c001f310:	e8 3f fa ff ff       	call   c001ed54 <IDE::prepareInterrupt(unsigned char)>
c001f315:	83 c4 0c             	add    esp,0xc
c001f318:	6a 00                	push   0x0
c001f31a:	6a 00                	push   0x0
c001f31c:	53                   	push   ebx
c001f31d:	e8 60 fc ff ff       	call   c001ef82 <IDE::enableIRQs(unsigned char, bool)>
c001f322:	83 c4 0c             	add    esp,0xc
c001f325:	6a 00                	push   0x0
c001f327:	6a 01                	push   0x1
c001f329:	53                   	push   ebx
c001f32a:	e8 53 fc ff ff       	call   c001ef82 <IDE::enableIRQs(unsigned char, bool)>
c001f32f:	83 c4 10             	add    esp,0x10
c001f332:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f339:	74 34                	je     c001f36f <IDE::open(int, int, void*)+0x3a7>
c001f33b:	83 ec 0c             	sub    esp,0xc
c001f33e:	53                   	push   ebx
c001f33f:	6a 01                	push   0x1
c001f341:	68 4a ef 01 c0       	push   0xc001ef4a
c001f346:	6a 0e                	push   0xe
c001f348:	53                   	push   ebx
c001f349:	e8 64 f2 fe ff       	call   c000e5b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f34e:	83 c4 14             	add    esp,0x14
c001f351:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f357:	53                   	push   ebx
c001f358:	6a 01                	push   0x1
c001f35a:	68 66 ef 01 c0       	push   0xc001ef66
c001f35f:	6a 0f                	push   0xf
c001f361:	53                   	push   ebx
c001f362:	e8 4b f2 fe ff       	call   c000e5b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f367:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f36d:	eb 38                	jmp    c001f3a7 <IDE::open(int, int, void*)+0x3df>
c001f36f:	83 ec 0c             	sub    esp,0xc
c001f372:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f37c:	53                   	push   ebx
c001f37d:	6a 00                	push   0x0
c001f37f:	68 4a ef 01 c0       	push   0xc001ef4a
c001f384:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f38a:	53                   	push   ebx
c001f38b:	e8 22 f2 fe ff       	call   c000e5b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f390:	83 c4 14             	add    esp,0x14
c001f393:	53                   	push   ebx
c001f394:	6a 00                	push   0x0
c001f396:	68 66 ef 01 c0       	push   0xc001ef66
c001f39b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f3a1:	53                   	push   ebx
c001f3a2:	e8 0b f2 fe ff       	call   c000e5b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3a9:	83 c4 20             	add    esp,0x20
c001f3ac:	83 ec 0c             	sub    esp,0xc
c001f3af:	53                   	push   ebx
c001f3b0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f3b3:	83 c4 0c             	add    esp,0xc
c001f3b6:	6a 07                	push   0x7
c001f3b8:	6a 00                	push   0x0
c001f3ba:	53                   	push   ebx
c001f3bb:	e8 7a fa ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f3c0:	83 c4 0c             	add    esp,0xc
c001f3c3:	6a 07                	push   0x7
c001f3c5:	6a 01                	push   0x1
c001f3c7:	53                   	push   ebx
c001f3c8:	e8 6d fa ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f3cd:	83 c4 0c             	add    esp,0xc
c001f3d0:	6a 01                	push   0x1
c001f3d2:	6a 00                	push   0x0
c001f3d4:	53                   	push   ebx
c001f3d5:	e8 a8 fb ff ff       	call   c001ef82 <IDE::enableIRQs(unsigned char, bool)>
c001f3da:	83 c4 0c             	add    esp,0xc
c001f3dd:	6a 01                	push   0x1
c001f3df:	6a 01                	push   0x1
c001f3e1:	53                   	push   ebx
c001f3e2:	e8 9b fb ff ff       	call   c001ef82 <IDE::enableIRQs(unsigned char, bool)>
c001f3e7:	83 c4 2c             	add    esp,0x2c
c001f3ea:	31 c0                	xor    eax,eax
c001f3ec:	5b                   	pop    ebx
c001f3ed:	5e                   	pop    esi
c001f3ee:	5f                   	pop    edi
c001f3ef:	5d                   	pop    ebp
c001f3f0:	c3                   	ret    
c001f3f1:	90                   	nop

c001f3f2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f3f2:	55                   	push   ebp
c001f3f3:	57                   	push   edi
c001f3f4:	56                   	push   esi
c001f3f5:	53                   	push   ebx
c001f3f6:	83 ec 1c             	sub    esp,0x1c
c001f3f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f3fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f401:	8d 50 f8             	lea    edx,[eax-0x8]
c001f404:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f408:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f40c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f410:	80 fa 03             	cmp    dl,0x3
c001f413:	77 5d                	ja     c001f472 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f415:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f419:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f41d:	0f b6 db             	movzx  ebx,bl
c001f420:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f423:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f427:	83 ca 80             	or     edx,0xffffff80
c001f42a:	0f b6 d2             	movzx  edx,dl
c001f42d:	52                   	push   edx
c001f42e:	6a 0c                	push   0xc
c001f430:	53                   	push   ebx
c001f431:	56                   	push   esi
c001f432:	e8 43 f9 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f437:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f43c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f440:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f444:	0f b6 c0             	movzx  eax,al
c001f447:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f44b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f44d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f452:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f456:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f45a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f45e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f466:	83 c4 2c             	add    esp,0x2c
c001f469:	5b                   	pop    ebx
c001f46a:	5e                   	pop    esi
c001f46b:	5f                   	pop    edi
c001f46c:	5d                   	pop    ebp
c001f46d:	e9 08 f9 ff ff       	jmp    c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f472:	3c 07                	cmp    al,0x7
c001f474:	77 10                	ja     c001f486 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f476:	0f b6 db             	movzx  ebx,bl
c001f479:	0f b6 d0             	movzx  edx,al
c001f47c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f484:	eb 2d                	jmp    c001f4b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f486:	3c 0d                	cmp    al,0xd
c001f488:	77 13                	ja     c001f49d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f48a:	0f b6 db             	movzx  ebx,bl
c001f48d:	0f b6 c0             	movzx  eax,al
c001f490:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f497:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f49b:	eb 16                	jmp    c001f4b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f49d:	3c 15                	cmp    al,0x15
c001f49f:	77 14                	ja     c001f4b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f4a1:	0f b6 db             	movzx  ebx,bl
c001f4a4:	0f b6 c0             	movzx  eax,al
c001f4a7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f4af:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f4b3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f4b5:	83 c4 1c             	add    esp,0x1c
c001f4b8:	5b                   	pop    ebx
c001f4b9:	5e                   	pop    esi
c001f4ba:	5f                   	pop    edi
c001f4bb:	5d                   	pop    ebp
c001f4bc:	c3                   	ret    
c001f4bd:	90                   	nop

c001f4be <IDE::detect()>:
c001f4be:	55                   	push   ebp
c001f4bf:	57                   	push   edi
c001f4c0:	56                   	push   esi
c001f4c1:	53                   	push   ebx
c001f4c2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f4c8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f4cf:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f4d6:	0f 85 97 02 00 00    	jne    c001f773 <IDE::detect()+0x2b5>
c001f4dc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f4e3:	31 f6                	xor    esi,esi
c001f4e5:	31 ed                	xor    ebp,ebp
c001f4e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f4ef:	89 e8                	mov    eax,ebp
c001f4f1:	c1 e0 06             	shl    eax,0x6
c001f4f4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f4fc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f500:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f504:	c1 e0 04             	shl    eax,0x4
c001f507:	83 c8 a0             	or     eax,0xffffffa0
c001f50a:	0f b6 c0             	movzx  eax,al
c001f50d:	50                   	push   eax
c001f50e:	6a 06                	push   0x6
c001f510:	56                   	push   esi
c001f511:	53                   	push   ebx
c001f512:	e8 63 f8 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f517:	83 c4 0c             	add    esp,0xc
c001f51a:	6a 0c                	push   0xc
c001f51c:	56                   	push   esi
c001f51d:	53                   	push   ebx
c001f51e:	e8 17 f9 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f523:	83 c4 0c             	add    esp,0xc
c001f526:	6a 0c                	push   0xc
c001f528:	56                   	push   esi
c001f529:	53                   	push   ebx
c001f52a:	e8 0b f9 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f52f:	83 c4 0c             	add    esp,0xc
c001f532:	6a 0c                	push   0xc
c001f534:	56                   	push   esi
c001f535:	53                   	push   ebx
c001f536:	e8 ff f8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f53b:	83 c4 0c             	add    esp,0xc
c001f53e:	6a 0c                	push   0xc
c001f540:	56                   	push   esi
c001f541:	53                   	push   ebx
c001f542:	e8 f3 f8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f547:	68 ec 00 00 00       	push   0xec
c001f54c:	6a 07                	push   0x7
c001f54e:	56                   	push   esi
c001f54f:	53                   	push   ebx
c001f550:	e8 25 f8 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f555:	83 c4 1c             	add    esp,0x1c
c001f558:	6a 0c                	push   0xc
c001f55a:	56                   	push   esi
c001f55b:	53                   	push   ebx
c001f55c:	e8 d9 f8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f561:	83 c4 0c             	add    esp,0xc
c001f564:	6a 0c                	push   0xc
c001f566:	56                   	push   esi
c001f567:	53                   	push   ebx
c001f568:	e8 cd f8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f56d:	83 c4 0c             	add    esp,0xc
c001f570:	6a 0c                	push   0xc
c001f572:	56                   	push   esi
c001f573:	53                   	push   ebx
c001f574:	e8 c1 f8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f579:	83 c4 0c             	add    esp,0xc
c001f57c:	6a 0c                	push   0xc
c001f57e:	56                   	push   esi
c001f57f:	53                   	push   ebx
c001f580:	e8 b5 f8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f585:	83 c4 0c             	add    esp,0xc
c001f588:	6a 0c                	push   0xc
c001f58a:	56                   	push   esi
c001f58b:	53                   	push   ebx
c001f58c:	e8 a9 f8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f591:	83 c4 10             	add    esp,0x10
c001f594:	84 c0                	test   al,al
c001f596:	0f 84 5f 01 00 00    	je     c001f6fb <IDE::detect()+0x23d>
c001f59c:	31 ff                	xor    edi,edi
c001f59e:	50                   	push   eax
c001f59f:	6a 0c                	push   0xc
c001f5a1:	56                   	push   esi
c001f5a2:	53                   	push   ebx
c001f5a3:	e8 92 f8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f5a8:	83 c4 10             	add    esp,0x10
c001f5ab:	a8 01                	test   al,0x1
c001f5ad:	0f 85 69 01 00 00    	jne    c001f71c <IDE::detect()+0x25e>
c001f5b3:	84 c0                	test   al,al
c001f5b5:	78 04                	js     c001f5bb <IDE::detect()+0xfd>
c001f5b7:	a8 08                	test   al,0x8
c001f5b9:	75 23                	jne    c001f5de <IDE::detect()+0x120>
c001f5bb:	47                   	inc    edi
c001f5bc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f5c2:	7e da                	jle    c001f59e <IDE::detect()+0xe0>
c001f5c4:	83 ec 0c             	sub    esp,0xc
c001f5c7:	6a 32                	push   0x32
c001f5c9:	e8 3a 9c ff ff       	call   c0019208 <milliTenthSleep(unsigned int)>
c001f5ce:	83 c4 10             	add    esp,0x10
c001f5d1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f5d7:	75 c5                	jne    c001f59e <IDE::detect()+0xe0>
c001f5d9:	e9 3e 01 00 00       	jmp    c001f71c <IDE::detect()+0x25e>
c001f5de:	31 c9                	xor    ecx,ecx
c001f5e0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f5e4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f5e8:	83 ec 0c             	sub    esp,0xc
c001f5eb:	68 80 00 00 00       	push   0x80
c001f5f0:	57                   	push   edi
c001f5f1:	6a 00                	push   0x0
c001f5f3:	56                   	push   esi
c001f5f4:	53                   	push   ebx
c001f5f5:	e8 f8 fd ff ff       	call   c001f3f2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f5fa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f5ff:	89 e8                	mov    eax,ebp
c001f601:	89 d1                	mov    ecx,edx
c001f603:	c1 e0 06             	shl    eax,0x6
c001f606:	01 d8                	add    eax,ebx
c001f608:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f60f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f616:	89 f2                	mov    edx,esi
c001f618:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f61e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f622:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f628:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f62c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f633:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f63b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f642:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f64a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f650:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f657:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f65d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f661:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f665:	83 c4 20             	add    esp,0x20
c001f668:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f66b:	83 c0 02             	add    eax,0x2
c001f66e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f674:	83 c7 02             	add    edi,0x2
c001f677:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f67a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f680:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f684:	75 e2                	jne    c001f668 <IDE::detect()+0x1aa>
c001f686:	89 e8                	mov    eax,ebp
c001f688:	c1 e0 06             	shl    eax,0x6
c001f68b:	01 d8                	add    eax,ebx
c001f68d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f693:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f69a:	66 c1 ea 09          	shr    dx,0x9
c001f69e:	83 e2 01             	and    edx,0x1
c001f6a1:	84 c9                	test   cl,cl
c001f6a3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f6a9:	75 22                	jne    c001f6cd <IDE::detect()+0x20f>
c001f6ab:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f6b2:	74 46                	je     c001f6fa <IDE::detect()+0x23c>
c001f6b4:	83 ec 0c             	sub    esp,0xc
c001f6b7:	68 7c 01 00 00       	push   0x17c
c001f6bc:	e8 26 a7 fe ff       	call   c0009de7 <malloc>
c001f6c1:	89 c7                	mov    edi,eax
c001f6c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6c6:	e8 49 06 00 00       	call   c001fd14 <ATA::ATA()>
c001f6cb:	eb 17                	jmp    c001f6e4 <IDE::detect()+0x226>
c001f6cd:	83 ec 0c             	sub    esp,0xc
c001f6d0:	68 84 01 00 00       	push   0x184
c001f6d5:	e8 0d a7 fe ff       	call   c0009de7 <malloc>
c001f6da:	89 c7                	mov    edi,eax
c001f6dc:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6df:	e8 b8 0c 00 00       	call   c002039c <ATAPI::ATAPI()>
c001f6e4:	5a                   	pop    edx
c001f6e5:	59                   	pop    ecx
c001f6e6:	57                   	push   edi
c001f6e7:	53                   	push   ebx
c001f6e8:	e8 4d ef fe ff       	call   c000e63a <Device::addChild(Device*)>
c001f6ed:	8b 07                	mov    eax,DWORD PTR [edi]
c001f6ef:	53                   	push   ebx
c001f6f0:	55                   	push   ebp
c001f6f1:	6a 00                	push   0x0
c001f6f3:	57                   	push   edi
c001f6f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f6f7:	83 c4 20             	add    esp,0x20
c001f6fa:	45                   	inc    ebp
c001f6fb:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f700:	74 0d                	je     c001f70f <IDE::detect()+0x251>
c001f702:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f70a:	e9 e0 fd ff ff       	jmp    c001f4ef <IDE::detect()+0x31>
c001f70f:	4e                   	dec    esi
c001f710:	74 61                	je     c001f773 <IDE::detect()+0x2b5>
c001f712:	be 01 00 00 00       	mov    esi,0x1
c001f717:	e9 cb fd ff ff       	jmp    c001f4e7 <IDE::detect()+0x29>
c001f71c:	50                   	push   eax
c001f71d:	6a 04                	push   0x4
c001f71f:	56                   	push   esi
c001f720:	53                   	push   ebx
c001f721:	e8 14 f7 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f726:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f72a:	83 c4 0c             	add    esp,0xc
c001f72d:	6a 05                	push   0x5
c001f72f:	56                   	push   esi
c001f730:	53                   	push   ebx
c001f731:	e8 04 f7 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f736:	83 c4 10             	add    esp,0x10
c001f739:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f73d:	80 fa 14             	cmp    dl,0x14
c001f740:	75 04                	jne    c001f746 <IDE::detect()+0x288>
c001f742:	3c eb                	cmp    al,0xeb
c001f744:	eb 07                	jmp    c001f74d <IDE::detect()+0x28f>
c001f746:	3c 96                	cmp    al,0x96
c001f748:	75 b1                	jne    c001f6fb <IDE::detect()+0x23d>
c001f74a:	80 fa 69             	cmp    dl,0x69
c001f74d:	75 ac                	jne    c001f6fb <IDE::detect()+0x23d>
c001f74f:	68 a1 00 00 00       	push   0xa1
c001f754:	6a 07                	push   0x7
c001f756:	56                   	push   esi
c001f757:	53                   	push   ebx
c001f758:	e8 1d f6 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f75d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f764:	e8 9f 9a ff ff       	call   c0019208 <milliTenthSleep(unsigned int)>
c001f769:	83 c4 10             	add    esp,0x10
c001f76c:	b1 01                	mov    cl,0x1
c001f76e:	e9 6d fe ff ff       	jmp    c001f5e0 <IDE::detect()+0x122>
c001f773:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f779:	5b                   	pop    ebx
c001f77a:	5e                   	pop    esi
c001f77b:	5f                   	pop    edi
c001f77c:	5d                   	pop    ebp
c001f77d:	c3                   	ret    

c001f77e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f77e:	55                   	push   ebp
c001f77f:	57                   	push   edi
c001f780:	56                   	push   esi
c001f781:	53                   	push   ebx
c001f782:	83 ec 1c             	sub    esp,0x1c
c001f785:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f789:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f78d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f791:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f795:	88 c3                	mov    bl,al
c001f797:	84 c0                	test   al,al
c001f799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f79d:	0f 84 81 00 00 00    	je     c001f824 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f7a3:	83 ec 0c             	sub    esp,0xc
c001f7a6:	68 4b 75 02 c0       	push   0xc002754b
c001f7ab:	e8 17 d9 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001f7b0:	83 c4 10             	add    esp,0x10
c001f7b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7b7:	3c 01                	cmp    al,0x1
c001f7b9:	74 63                	je     c001f81e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f7bb:	3c 02                	cmp    al,0x2
c001f7bd:	75 53                	jne    c001f812 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f7bf:	d1 e6                	shl    esi,1
c001f7c1:	09 ee                	or     esi,ebp
c001f7c3:	50                   	push   eax
c001f7c4:	89 f0                	mov    eax,esi
c001f7c6:	6a 01                	push   0x1
c001f7c8:	0f b6 f0             	movzx  esi,al
c001f7cb:	c1 e6 06             	shl    esi,0x6
c001f7ce:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f7d6:	50                   	push   eax
c001f7d7:	57                   	push   edi
c001f7d8:	e8 5d f6 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f7dd:	83 c4 10             	add    esp,0x10
c001f7e0:	a8 01                	test   al,0x1
c001f7e2:	74 02                	je     c001f7e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f7e4:	b3 07                	mov    bl,0x7
c001f7e6:	a8 02                	test   al,0x2
c001f7e8:	74 02                	je     c001f7ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f7ea:	b3 03                	mov    bl,0x3
c001f7ec:	a8 04                	test   al,0x4
c001f7ee:	74 02                	je     c001f7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f7f0:	b3 14                	mov    bl,0x14
c001f7f2:	a8 08                	test   al,0x8
c001f7f4:	74 02                	je     c001f7f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f7f6:	b3 03                	mov    bl,0x3
c001f7f8:	a8 10                	test   al,0x10
c001f7fa:	74 02                	je     c001f7fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f7fc:	b3 15                	mov    bl,0x15
c001f7fe:	a8 20                	test   al,0x20
c001f800:	74 02                	je     c001f804 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f802:	b3 03                	mov    bl,0x3
c001f804:	a8 40                	test   al,0x40
c001f806:	74 02                	je     c001f80a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f808:	b3 16                	mov    bl,0x16
c001f80a:	84 c0                	test   al,al
c001f80c:	79 16                	jns    c001f824 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f80e:	b3 0d                	mov    bl,0xd
c001f810:	eb 12                	jmp    c001f824 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f812:	3c 03                	cmp    al,0x3
c001f814:	74 0c                	je     c001f822 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f816:	3c 04                	cmp    al,0x4
c001f818:	75 0a                	jne    c001f824 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f81a:	b3 08                	mov    bl,0x8
c001f81c:	eb 06                	jmp    c001f824 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f81e:	b3 13                	mov    bl,0x13
c001f820:	eb 02                	jmp    c001f824 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f822:	b3 17                	mov    bl,0x17
c001f824:	83 c4 1c             	add    esp,0x1c
c001f827:	88 d8                	mov    al,bl
c001f829:	5b                   	pop    ebx
c001f82a:	5e                   	pop    esi
c001f82b:	5f                   	pop    edi
c001f82c:	5d                   	pop    ebp
c001f82d:	c3                   	ret    

c001f82e <IDE::polling(unsigned char, unsigned int)>:
c001f82e:	57                   	push   edi
c001f82f:	56                   	push   esi
c001f830:	53                   	push   ebx
c001f831:	bb 04 00 00 00       	mov    ebx,0x4
c001f836:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f83a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f83f:	52                   	push   edx
c001f840:	6a 0c                	push   0xc
c001f842:	56                   	push   esi
c001f843:	57                   	push   edi
c001f844:	e8 f1 f5 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f849:	83 c4 10             	add    esp,0x10
c001f84c:	4b                   	dec    ebx
c001f84d:	75 f0                	jne    c001f83f <IDE::polling(unsigned char, unsigned int)+0x11>
c001f84f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f854:	50                   	push   eax
c001f855:	6a 0c                	push   0xc
c001f857:	56                   	push   esi
c001f858:	57                   	push   edi
c001f859:	e8 dc f5 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001f85e:	83 c4 10             	add    esp,0x10
c001f861:	a8 01                	test   al,0x1
c001f863:	75 17                	jne    c001f87c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f865:	a8 20                	test   al,0x20
c001f867:	75 0f                	jne    c001f878 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f869:	4b                   	dec    ebx
c001f86a:	74 10                	je     c001f87c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f86c:	84 c0                	test   al,al
c001f86e:	78 e4                	js     c001f854 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f870:	a8 08                	test   al,0x8
c001f872:	74 e0                	je     c001f854 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f874:	31 c0                	xor    eax,eax
c001f876:	eb 06                	jmp    c001f87e <IDE::polling(unsigned char, unsigned int)+0x50>
c001f878:	b0 01                	mov    al,0x1
c001f87a:	eb 02                	jmp    c001f87e <IDE::polling(unsigned char, unsigned int)+0x50>
c001f87c:	b0 02                	mov    al,0x2
c001f87e:	5b                   	pop    ebx
c001f87f:	5e                   	pop    esi
c001f880:	5f                   	pop    edi
c001f881:	c3                   	ret    

c001f882 <SATABus::close(int, int, void*)>:
c001f882:	31 c0                	xor    eax,eax
c001f884:	c3                   	ret    
c001f885:	90                   	nop

c001f886 <SATABus::detect()>:
c001f886:	c3                   	ret    
c001f887:	90                   	nop

c001f888 <SATABus::SATABus()>:
c001f888:	83 ec 0c             	sub    esp,0xc
c001f88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88f:	83 ec 08             	sub    esp,0x8
c001f892:	68 84 75 02 c0       	push   0xc0027584
c001f897:	50                   	push   eax
c001f898:	e8 4b f1 fe ff       	call   c000e9e8 <HardDiskController::HardDiskController(char const*)>
c001f89d:	83 c4 10             	add    esp,0x10
c001f8a0:	ba 2c 76 02 c0       	mov    edx,0xc002762c
c001f8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a9:	89 10                	mov    DWORD PTR [eax],edx
c001f8ab:	83 ec 0c             	sub    esp,0xc
c001f8ae:	6a 50                	push   0x50
c001f8b0:	e8 d4 ac fe ff       	call   c000a589 <Phys::allocateContiguousPages(int)>
c001f8b5:	83 c4 10             	add    esp,0x10
c001f8b8:	89 c2                	mov    edx,eax
c001f8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8be:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f8c4:	83 ec 0c             	sub    esp,0xc
c001f8c7:	6a 50                	push   0x50
c001f8c9:	e8 d3 c4 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c001f8ce:	83 c4 10             	add    esp,0x10
c001f8d1:	89 c2                	mov    edx,eax
c001f8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f8dd:	a1 f0 8c 02 c0       	mov    eax,ds:0xc0028cf0
c001f8e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8e6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f8ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8f0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f8f6:	83 ec 0c             	sub    esp,0xc
c001f8f9:	6a 03                	push   0x3
c001f8fb:	6a 50                	push   0x50
c001f8fd:	51                   	push   ecx
c001f8fe:	52                   	push   edx
c001f8ff:	50                   	push   eax
c001f900:	e8 39 ce fe ff       	call   c000c73e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f905:	83 c4 20             	add    esp,0x20
c001f908:	90                   	nop
c001f909:	83 c4 0c             	add    esp,0xc
c001f90c:	c3                   	ret    
c001f90d:	90                   	nop

c001f90e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f90e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f912:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f915:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f918:	09 c2                	or     edx,eax
c001f91a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f91e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f924:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f926:	31 c0                	xor    eax,eax
c001f928:	c1 e9 08             	shr    ecx,0x8
c001f92b:	83 e1 0f             	and    ecx,0xf
c001f92e:	39 c8                	cmp    eax,ecx
c001f930:	74 0a                	je     c001f93c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f932:	f6 c2 01             	test   dl,0x1
c001f935:	74 08                	je     c001f93f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f937:	d1 ea                	shr    edx,1
c001f939:	40                   	inc    eax
c001f93a:	eb f2                	jmp    c001f92e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f93c:	83 c8 ff             	or     eax,0xffffffff
c001f93f:	c3                   	ret    

c001f940 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f940:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f944:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f947:	89 c2                	mov    edx,eax
c001f949:	c1 ea 08             	shr    edx,0x8
c001f94c:	83 e2 0f             	and    edx,0xf
c001f94f:	fe ca                	dec    dl
c001f951:	75 31                	jne    c001f984 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f953:	83 e0 0f             	and    eax,0xf
c001f956:	3c 03                	cmp    al,0x3
c001f958:	75 2a                	jne    c001f984 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f95a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f95d:	b8 02 00 00 00       	mov    eax,0x2
c001f962:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f968:	74 1c                	je     c001f986 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f96a:	b8 04 00 00 00       	mov    eax,0x4
c001f96f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f975:	74 0f                	je     c001f986 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f977:	31 c0                	xor    eax,eax
c001f979:	83 fa 03             	cmp    edx,0x3
c001f97c:	0f 94 c0             	sete   al
c001f97f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f983:	c3                   	ret    
c001f984:	31 c0                	xor    eax,eax
c001f986:	c3                   	ret    
c001f987:	90                   	nop

c001f988 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f98c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f98f:	0f ba e2 0f          	bt     edx,0xf
c001f993:	72 f7                	jb     c001f98c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f995:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f998:	83 ca 10             	or     edx,0x10
c001f99b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f99e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9a1:	83 ca 01             	or     edx,0x1
c001f9a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9a7:	c3                   	ret    

c001f9a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f9a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9af:	83 e2 fe             	and    edx,0xfffffffe
c001f9b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9b8:	83 e2 ef             	and    edx,0xffffffef
c001f9bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f9be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9c1:	0f ba e2 0e          	bt     edx,0xe
c001f9c5:	72 f7                	jb     c001f9be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f9c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f9ca:	0f ba e2 0f          	bt     edx,0xf
c001f9ce:	72 ee                	jb     c001f9be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f9d0:	c3                   	ret    
c001f9d1:	90                   	nop

c001f9d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f9d2:	55                   	push   ebp
c001f9d3:	57                   	push   edi
c001f9d4:	56                   	push   esi
c001f9d5:	53                   	push   ebx
c001f9d6:	83 ec 1c             	sub    esp,0x1c
c001f9d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f9dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f9e1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f9e5:	53                   	push   ebx
c001f9e6:	89 fd                	mov    ebp,edi
c001f9e8:	56                   	push   esi
c001f9e9:	c1 e5 0a             	shl    ebp,0xa
c001f9ec:	e8 b7 ff ff ff       	call   c001f9a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f9f1:	83 ec 0c             	sub    esp,0xc
c001f9f4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f9fa:	01 e8                	add    eax,ebp
c001f9fc:	89 03                	mov    DWORD PTR [ebx],eax
c001f9fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fa00:	68 00 04 00 00       	push   0x400
c001fa05:	6a 00                	push   0x0
c001fa07:	50                   	push   eax
c001fa08:	e8 87 0c fe ff       	call   c0000694 <memset>
c001fa0d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fa13:	89 fa                	mov    edx,edi
c001fa15:	01 e8                	add    eax,ebp
c001fa17:	c1 e7 0d             	shl    edi,0xd
c001fa1a:	89 03                	mov    DWORD PTR [ebx],eax
c001fa1c:	c1 e2 08             	shl    edx,0x8
c001fa1f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa26:	81 c2 00 80 00 00    	add    edx,0x8000
c001fa2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001fa30:	89 d0                	mov    eax,edx
c001fa32:	83 c4 1c             	add    esp,0x1c
c001fa35:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fa3b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fa3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fa41:	68 00 01 00 00       	push   0x100
c001fa46:	6a 00                	push   0x0
c001fa48:	50                   	push   eax
c001fa49:	e8 46 0c fe ff       	call   c0000694 <memset>
c001fa4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa52:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001fa58:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001fa5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fa62:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fa65:	83 c4 10             	add    esp,0x10
c001fa68:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fa6f:	31 ff                	xor    edi,edi
c001fa71:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001fa77:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001fa7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa81:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fa87:	83 c5 20             	add    ebp,0x20
c001fa8a:	01 f8                	add    eax,edi
c001fa8c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fa8f:	52                   	push   edx
c001fa90:	68 00 01 00 00       	push   0x100
c001fa95:	6a 00                	push   0x0
c001fa97:	50                   	push   eax
c001fa98:	e8 f7 0b fe ff       	call   c0000694 <memset>
c001fa9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001faa1:	83 c4 10             	add    esp,0x10
c001faa4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001faaa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001fab1:	01 f8                	add    eax,edi
c001fab3:	81 c7 00 01 00 00    	add    edi,0x100
c001fab9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fabc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001fac2:	75 b3                	jne    c001fa77 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001fac4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001fac8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001facc:	83 c4 1c             	add    esp,0x1c
c001facf:	5b                   	pop    ebx
c001fad0:	5e                   	pop    esi
c001fad1:	5f                   	pop    edi
c001fad2:	5d                   	pop    ebp
c001fad3:	e9 b0 fe ff ff       	jmp    c001f988 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001fad8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fad8:	55                   	push   ebp
c001fad9:	57                   	push   edi
c001fada:	56                   	push   esi
c001fadb:	53                   	push   ebx
c001fadc:	83 ec 0c             	sub    esp,0xc
c001fadf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fae3:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001faea:	74 2d                	je     c001fb19 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001faec:	83 ec 0c             	sub    esp,0xc
c001faef:	68 a8 75 02 c0       	push   0xc00275a8
c001faf4:	e8 48 a3 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001faf9:	83 c4 10             	add    esp,0x10
c001fafc:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001fb03:	75 14                	jne    c001fb19 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fb05:	e4 60                	in     al,0x60
c001fb07:	3c 1c                	cmp    al,0x1c
c001fb09:	74 04                	je     c001fb0f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb0b:	3c 5a                	cmp    al,0x5a
c001fb0d:	75 f6                	jne    c001fb05 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001fb0f:	e4 60                	in     al,0x60
c001fb11:	3c 5a                	cmp    al,0x5a
c001fb13:	74 fa                	je     c001fb0f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb15:	3c 1c                	cmp    al,0x1c
c001fb17:	74 f6                	je     c001fb0f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fb1d:	31 db                	xor    ebx,ebx
c001fb1f:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001fb22:	f7 c5 01 00 00 00    	test   ebp,0x1
c001fb28:	0f 84 78 01 00 00    	je     c001fca6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fb2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fb32:	89 d8                	mov    eax,ebx
c001fb34:	c1 e0 07             	shl    eax,0x7
c001fb37:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001fb3e:	50                   	push   eax
c001fb3f:	50                   	push   eax
c001fb40:	57                   	push   edi
c001fb41:	56                   	push   esi
c001fb42:	e8 f9 fd ff ff       	call   c001f940 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fb47:	83 c4 10             	add    esp,0x10
c001fb4a:	83 f8 01             	cmp    eax,0x1
c001fb4d:	0f 85 19 01 00 00    	jne    c001fc6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001fb53:	50                   	push   eax
c001fb54:	53                   	push   ebx
c001fb55:	57                   	push   edi
c001fb56:	56                   	push   esi
c001fb57:	e8 76 fe ff ff       	call   c001f9d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fb5c:	83 c4 10             	add    esp,0x10
c001fb5f:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001fb66:	74 2d                	je     c001fb95 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fb68:	83 ec 0c             	sub    esp,0xc
c001fb6b:	68 bd 75 02 c0       	push   0xc00275bd
c001fb70:	e8 cc a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fb75:	83 c4 10             	add    esp,0x10
c001fb78:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001fb7f:	75 14                	jne    c001fb95 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fb81:	e4 60                	in     al,0x60
c001fb83:	3c 1c                	cmp    al,0x1c
c001fb85:	74 04                	je     c001fb8b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fb87:	3c 5a                	cmp    al,0x5a
c001fb89:	75 f6                	jne    c001fb81 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001fb8b:	e4 60                	in     al,0x60
c001fb8d:	3c 5a                	cmp    al,0x5a
c001fb8f:	74 fa                	je     c001fb8b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fb91:	3c 1c                	cmp    al,0x1c
c001fb93:	74 f6                	je     c001fb8b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fb95:	83 ec 0c             	sub    esp,0xc
c001fb98:	68 7c 01 00 00       	push   0x17c
c001fb9d:	e8 45 a2 fe ff       	call   c0009de7 <malloc>
c001fba2:	89 04 24             	mov    DWORD PTR [esp],eax
c001fba5:	89 c7                	mov    edi,eax
c001fba7:	e8 28 10 00 00       	call   c0020bd4 <SATA::SATA()>
c001fbac:	83 c4 10             	add    esp,0x10
c001fbaf:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001fbb6:	74 2d                	je     c001fbe5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	68 d2 75 02 c0       	push   0xc00275d2
c001fbc0:	e8 7c a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fbc5:	83 c4 10             	add    esp,0x10
c001fbc8:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001fbcf:	75 14                	jne    c001fbe5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fbd1:	e4 60                	in     al,0x60
c001fbd3:	3c 5a                	cmp    al,0x5a
c001fbd5:	74 04                	je     c001fbdb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fbd7:	3c 1c                	cmp    al,0x1c
c001fbd9:	75 f6                	jne    c001fbd1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001fbdb:	e4 60                	in     al,0x60
c001fbdd:	3c 5a                	cmp    al,0x5a
c001fbdf:	74 fa                	je     c001fbdb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fbe1:	3c 1c                	cmp    al,0x1c
c001fbe3:	74 f6                	je     c001fbdb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fbe5:	50                   	push   eax
c001fbe6:	50                   	push   eax
c001fbe7:	57                   	push   edi
c001fbe8:	56                   	push   esi
c001fbe9:	e8 4c ea fe ff       	call   c000e63a <Device::addChild(Device*)>
c001fbee:	83 c4 10             	add    esp,0x10
c001fbf1:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001fbf8:	74 2d                	je     c001fc27 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fbfa:	83 ec 0c             	sub    esp,0xc
c001fbfd:	68 e7 75 02 c0       	push   0xc00275e7
c001fc02:	e8 3a a2 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc07:	83 c4 10             	add    esp,0x10
c001fc0a:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001fc11:	75 14                	jne    c001fc27 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fc13:	e4 60                	in     al,0x60
c001fc15:	3c 1c                	cmp    al,0x1c
c001fc17:	74 04                	je     c001fc1d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc19:	3c 5a                	cmp    al,0x5a
c001fc1b:	75 f6                	jne    c001fc13 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001fc1d:	e4 60                	in     al,0x60
c001fc1f:	3c 5a                	cmp    al,0x5a
c001fc21:	74 fa                	je     c001fc1d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc23:	3c 1c                	cmp    al,0x1c
c001fc25:	74 f6                	je     c001fc1d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc27:	8b 07                	mov    eax,DWORD PTR [edi]
c001fc29:	56                   	push   esi
c001fc2a:	6a 00                	push   0x0
c001fc2c:	53                   	push   ebx
c001fc2d:	57                   	push   edi
c001fc2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fc31:	83 c4 10             	add    esp,0x10
c001fc34:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c001fc3b:	74 69                	je     c001fca6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc3d:	83 ec 0c             	sub    esp,0xc
c001fc40:	68 fc 75 02 c0       	push   0xc00275fc
c001fc45:	e8 f7 a1 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c001fc4a:	83 c4 10             	add    esp,0x10
c001fc4d:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c001fc54:	75 50                	jne    c001fca6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc56:	e4 60                	in     al,0x60
c001fc58:	3c 1c                	cmp    al,0x1c
c001fc5a:	74 04                	je     c001fc60 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fc5c:	3c 5a                	cmp    al,0x5a
c001fc5e:	75 f6                	jne    c001fc56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fc60:	e4 60                	in     al,0x60
c001fc62:	3c 5a                	cmp    al,0x5a
c001fc64:	74 fa                	je     c001fc60 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fc66:	3c 1c                	cmp    al,0x1c
c001fc68:	74 f6                	je     c001fc60 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fc6a:	eb 3a                	jmp    c001fca6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc6c:	83 f8 04             	cmp    eax,0x4
c001fc6f:	75 35                	jne    c001fca6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fc71:	50                   	push   eax
c001fc72:	53                   	push   ebx
c001fc73:	57                   	push   edi
c001fc74:	56                   	push   esi
c001fc75:	e8 58 fd ff ff       	call   c001f9d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fc7a:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fc81:	e8 61 a1 fe ff       	call   c0009de7 <malloc>
c001fc86:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc89:	89 c7                	mov    edi,eax
c001fc8b:	e8 ba 17 00 00       	call   c002144a <SATAPI::SATAPI()>
c001fc90:	5a                   	pop    edx
c001fc91:	59                   	pop    ecx
c001fc92:	57                   	push   edi
c001fc93:	56                   	push   esi
c001fc94:	e8 a1 e9 fe ff       	call   c000e63a <Device::addChild(Device*)>
c001fc99:	8b 07                	mov    eax,DWORD PTR [edi]
c001fc9b:	56                   	push   esi
c001fc9c:	6a 00                	push   0x0
c001fc9e:	53                   	push   ebx
c001fc9f:	57                   	push   edi
c001fca0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fca3:	83 c4 20             	add    esp,0x20
c001fca6:	d1 ed                	shr    ebp,1
c001fca8:	43                   	inc    ebx
c001fca9:	83 fb 20             	cmp    ebx,0x20
c001fcac:	0f 85 70 fe ff ff    	jne    c001fb22 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001fcb2:	83 c4 0c             	add    esp,0xc
c001fcb5:	5b                   	pop    ebx
c001fcb6:	5e                   	pop    esi
c001fcb7:	5f                   	pop    edi
c001fcb8:	5d                   	pop    ebp
c001fcb9:	c3                   	ret    

c001fcba <SATABus::open(int, int, void*)>:
c001fcba:	53                   	push   ebx
c001fcbb:	83 ec 10             	sub    esp,0x10
c001fcbe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fcc2:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fcc8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fcce:	50                   	push   eax
c001fccf:	68 11 76 02 c0       	push   0xc0027611
c001fcd4:	e8 ee d3 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001fcd9:	58                   	pop    eax
c001fcda:	5a                   	pop    edx
c001fcdb:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fce1:	53                   	push   ebx
c001fce2:	e8 f1 fd ff ff       	call   c001fad8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fce7:	31 c0                	xor    eax,eax
c001fce9:	83 c4 18             	add    esp,0x18
c001fcec:	5b                   	pop    ebx
c001fced:	c3                   	ret    

c001fcee <ATA::close(int, int, void*)>:
c001fcee:	83 ec 0c             	sub    esp,0xc
c001fcf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fcfb:	85 c0                	test   eax,eax
c001fcfd:	74 0c                	je     c001fd0b <ATA::close(int, int, void*)+0x1d>
c001fcff:	83 ec 0c             	sub    esp,0xc
c001fd02:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd04:	50                   	push   eax
c001fd05:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd08:	83 c4 10             	add    esp,0x10
c001fd0b:	31 c0                	xor    eax,eax
c001fd0d:	83 c4 0c             	add    esp,0xc
c001fd10:	c3                   	ret    
c001fd11:	90                   	nop

c001fd12 <ATA::powerSaving(PowerSavingLevel)>:
c001fd12:	c3                   	ret    
c001fd13:	90                   	nop

c001fd14 <ATA::ATA()>:
c001fd14:	83 ec 0c             	sub    esp,0xc
c001fd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1b:	83 ec 04             	sub    esp,0x4
c001fd1e:	68 00 02 00 00       	push   0x200
c001fd23:	68 af 77 02 c0       	push   0xc00277af
c001fd28:	50                   	push   eax
c001fd29:	e8 44 ed fe ff       	call   c000ea72 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd2e:	83 c4 10             	add    esp,0x10
c001fd31:	ba a4 76 02 c0       	mov    edx,0xc00276a4
c001fd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3a:	89 10                	mov    DWORD PTR [eax],edx
c001fd3c:	90                   	nop
c001fd3d:	83 c4 0c             	add    esp,0xc
c001fd40:	c3                   	ret    
c001fd41:	90                   	nop

c001fd42 <ATA::flush(bool)>:
c001fd42:	53                   	push   ebx
c001fd43:	83 ec 08             	sub    esp,0x8
c001fd46:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fd4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd4f:	19 c0                	sbb    eax,eax
c001fd51:	83 e0 fd             	and    eax,0xfffffffd
c001fd54:	05 ea 00 00 00       	add    eax,0xea
c001fd59:	50                   	push   eax
c001fd5a:	6a 07                	push   0x7
c001fd5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd63:	50                   	push   eax
c001fd64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd6a:	e8 0b f0 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd6f:	83 c4 0c             	add    esp,0xc
c001fd72:	6a 00                	push   0x0
c001fd74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd7b:	50                   	push   eax
c001fd7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd82:	e8 a7 fa ff ff       	call   c001f82e <IDE::polling(unsigned char, unsigned int)>
c001fd87:	83 c4 18             	add    esp,0x18
c001fd8a:	5b                   	pop    ebx
c001fd8b:	c3                   	ret    

c001fd8c <ATA::readyForCommand()>:
c001fd8c:	56                   	push   esi
c001fd8d:	53                   	push   ebx
c001fd8e:	53                   	push   ebx
c001fd8f:	31 db                	xor    ebx,ebx
c001fd91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd95:	51                   	push   ecx
c001fd96:	6a 0c                	push   0xc
c001fd98:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fd9f:	50                   	push   eax
c001fda0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fda6:	e8 8f f0 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c001fdab:	83 c4 10             	add    esp,0x10
c001fdae:	a8 88                	test   al,0x88
c001fdb0:	74 1f                	je     c001fdd1 <ATA::readyForCommand()+0x45>
c001fdb2:	43                   	inc    ebx
c001fdb3:	83 fb 63             	cmp    ebx,0x63
c001fdb6:	7e dd                	jle    c001fd95 <ATA::readyForCommand()+0x9>
c001fdb8:	83 ec 0c             	sub    esp,0xc
c001fdbb:	6a 0a                	push   0xa
c001fdbd:	e8 46 94 ff ff       	call   c0019208 <milliTenthSleep(unsigned int)>
c001fdc2:	83 c4 10             	add    esp,0x10
c001fdc5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fdcb:	75 c8                	jne    c001fd95 <ATA::readyForCommand()+0x9>
c001fdcd:	31 c0                	xor    eax,eax
c001fdcf:	eb 02                	jmp    c001fdd3 <ATA::readyForCommand()+0x47>
c001fdd1:	b0 01                	mov    al,0x1
c001fdd3:	5a                   	pop    edx
c001fdd4:	5b                   	pop    ebx
c001fdd5:	5e                   	pop    esi
c001fdd6:	c3                   	ret    
c001fdd7:	90                   	nop

c001fdd8 <ATA::access(unsigned long long, int, void*, bool)>:
c001fdd8:	55                   	push   ebp
c001fdd9:	57                   	push   edi
c001fdda:	56                   	push   esi
c001fddb:	53                   	push   ebx
c001fddc:	83 ec 38             	sub    esp,0x38
c001fddf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fde3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fde7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fdeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fdef:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fdf3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fdf7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fdfb:	68 50 76 02 c0       	push   0xc0027650
c001fe00:	e8 c2 d2 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c001fe05:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fe0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe0f:	83 c4 10             	add    esp,0x10
c001fe12:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fe18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe1c:	c1 e0 06             	shl    eax,0x6
c001fe1f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fe27:	74 5d                	je     c001fe86 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fe29:	89 fa                	mov    edx,edi
c001fe2b:	89 f0                	mov    eax,esi
c001fe2d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fe31:	c1 ea 1c             	shr    edx,0x1c
c001fe34:	89 d1                	mov    ecx,edx
c001fe36:	09 c1                	or     ecx,eax
c001fe38:	74 25                	je     c001fe5f <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fe3a:	31 ed                	xor    ebp,ebp
c001fe3c:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fe43:	89 fa                	mov    edx,edi
c001fe45:	89 f0                	mov    eax,esi
c001fe47:	0f ad d0             	shrd   eax,edx,cl
c001fe4a:	d3 ea                	shr    edx,cl
c001fe4c:	f6 c1 20             	test   cl,0x20
c001fe4f:	74 02                	je     c001fe53 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fe51:	89 d0                	mov    eax,edx
c001fe53:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fe57:	45                   	inc    ebp
c001fe58:	83 fd 06             	cmp    ebp,0x6
c001fe5b:	75 df                	jne    c001fe3c <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fe5d:	eb 76                	jmp    c001fed5 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fe5f:	89 f0                	mov    eax,esi
c001fe61:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fe66:	89 fa                	mov    edx,edi
c001fe68:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fe6f:	0f ac d0 10          	shrd   eax,edx,0x10
c001fe73:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fe78:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fe7c:	c1 ee 18             	shr    esi,0x18
c001fe7f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fe84:	eb 56                	jmp    c001fedc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fe86:	6a 00                	push   0x0
c001fe88:	6a 3f                	push   0x3f
c001fe8a:	57                   	push   edi
c001fe8b:	56                   	push   esi
c001fe8c:	e8 0f 32 00 00       	call   c00230a0 <__umoddi3>
c001fe91:	83 c4 10             	add    esp,0x10
c001fe94:	40                   	inc    eax
c001fe95:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fe99:	6a 00                	push   0x0
c001fe9b:	68 f0 03 00 00       	push   0x3f0
c001fea0:	57                   	push   edi
c001fea1:	56                   	push   esi
c001fea2:	e8 f9 30 00 00       	call   c0022fa0 <__udivdi3>
c001fea7:	83 c4 10             	add    esp,0x10
c001feaa:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001feaf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001feb6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001febb:	6a 00                	push   0x0
c001febd:	6a 3f                	push   0x3f
c001febf:	57                   	push   edi
c001fec0:	56                   	push   esi
c001fec1:	e8 da 30 00 00       	call   c0022fa0 <__udivdi3>
c001fec6:	83 c4 10             	add    esp,0x10
c001fec9:	89 c6                	mov    esi,eax
c001fecb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fed0:	83 e6 0f             	and    esi,0xf
c001fed3:	eb 07                	jmp    c001fedc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fed5:	31 f6                	xor    esi,esi
c001fed7:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fedc:	bf 01 00 00 00       	mov    edi,0x1
c001fee1:	50                   	push   eax
c001fee2:	6a 00                	push   0x0
c001fee4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001feeb:	50                   	push   eax
c001feec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fef0:	e8 8d f0 ff ff       	call   c001ef82 <IDE::enableIRQs(unsigned char, bool)>
c001fef5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fef8:	e8 8f fe ff ff       	call   c001fd8c <ATA::readyForCommand()>
c001fefd:	83 c4 10             	add    esp,0x10
c001ff00:	84 c0                	test   al,al
c001ff02:	0f 84 bc 02 00 00    	je     c00201c4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ff08:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ff0e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ff14:	c1 e0 04             	shl    eax,0x4
c001ff17:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ff1e:	09 c6                	or     esi,eax
c001ff20:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ff25:	75 05                	jne    c001ff2c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ff27:	83 ce a0             	or     esi,0xffffffa0
c001ff2a:	eb 03                	jmp    c001ff2f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ff2c:	83 ce e0             	or     esi,0xffffffe0
c001ff2f:	89 f0                	mov    eax,esi
c001ff31:	0f b6 f0             	movzx  esi,al
c001ff34:	56                   	push   esi
c001ff35:	6a 06                	push   0x6
c001ff37:	51                   	push   ecx
c001ff38:	52                   	push   edx
c001ff39:	e8 3c ee ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff3e:	83 c4 10             	add    esp,0x10
c001ff41:	6a 00                	push   0x0
c001ff43:	6a 01                	push   0x1
c001ff45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff4c:	50                   	push   eax
c001ff4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff53:	e8 22 ee ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff58:	83 c4 10             	add    esp,0x10
c001ff5b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ff60:	75 6e                	jne    c001ffd0 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ff62:	6a 00                	push   0x0
c001ff64:	6a 08                	push   0x8
c001ff66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff6d:	50                   	push   eax
c001ff6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff74:	e8 01 ee ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff79:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ff7e:	50                   	push   eax
c001ff7f:	6a 09                	push   0x9
c001ff81:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff88:	50                   	push   eax
c001ff89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff8f:	e8 e6 ed ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff94:	83 c4 20             	add    esp,0x20
c001ff97:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ff9c:	50                   	push   eax
c001ff9d:	6a 0a                	push   0xa
c001ff9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffa6:	50                   	push   eax
c001ffa7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffad:	e8 c8 ed ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffb2:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ffb7:	50                   	push   eax
c001ffb8:	6a 0b                	push   0xb
c001ffba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffc1:	50                   	push   eax
c001ffc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffc8:	e8 ad ed ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffcd:	83 c4 20             	add    esp,0x20
c001ffd0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ffd5:	50                   	push   eax
c001ffd6:	6a 02                	push   0x2
c001ffd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffdf:	50                   	push   eax
c001ffe0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffe6:	e8 8f ed ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffeb:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fff0:	50                   	push   eax
c001fff1:	6a 03                	push   0x3
c001fff3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fffa:	50                   	push   eax
c001fffb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020001:	e8 74 ed ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020006:	83 c4 20             	add    esp,0x20
c0020009:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002000e:	50                   	push   eax
c002000f:	6a 04                	push   0x4
c0020011:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020018:	50                   	push   eax
c0020019:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002001f:	e8 56 ed ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020024:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020029:	50                   	push   eax
c002002a:	6a 05                	push   0x5
c002002c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020033:	50                   	push   eax
c0020034:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002003a:	e8 3b ed ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002003f:	83 c4 20             	add    esp,0x20
c0020042:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0020047:	0f 94 c0             	sete   al
c002004a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002004f:	74 09                	je     c002005a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c0020051:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0020058:	eb 07                	jmp    c0020061 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c002005a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0020061:	0f b6 c0             	movzx  eax,al
c0020064:	50                   	push   eax
c0020065:	6a 07                	push   0x7
c0020067:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002006e:	50                   	push   eax
c002006f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020075:	e8 00 ed ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002007a:	c7 04 24 5d 76 02 c0 	mov    DWORD PTR [esp],0xc002765d
c0020081:	e8 41 d0 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0020086:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002008a:	83 c4 10             	add    esp,0x10
c002008d:	85 f6                	test   esi,esi
c002008f:	0f 84 f7 00 00 00    	je     c002018c <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c0020095:	83 ec 0c             	sub    esp,0xc
c0020098:	68 60 76 02 c0       	push   0xc0027660
c002009d:	e8 25 d0 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00200a2:	83 c4 0c             	add    esp,0xc
c00200a5:	6a 01                	push   0x1
c00200a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200ae:	50                   	push   eax
c00200af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200b5:	e8 74 f7 ff ff       	call   c001f82e <IDE::polling(unsigned char, unsigned int)>
c00200ba:	c7 04 24 63 76 02 c0 	mov    DWORD PTR [esp],0xc0027663
c00200c1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00200c5:	e8 fd cf fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00200ca:	83 c4 10             	add    esp,0x10
c00200cd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00200d1:	84 c0                	test   al,al
c00200d3:	74 2b                	je     c0020100 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c00200d5:	0f b6 f8             	movzx  edi,al
c00200d8:	57                   	push   edi
c00200d9:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00200e0:	50                   	push   eax
c00200e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200e8:	50                   	push   eax
c00200e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200ef:	e8 8a f6 ff ff       	call   c001f77e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00200f4:	c7 04 24 66 76 02 c0 	mov    DWORD PTR [esp],0xc0027666
c00200fb:	e9 bc 00 00 00       	jmp    c00201bc <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0020100:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0020105:	74 50                	je     c0020157 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c0020107:	83 ec 0c             	sub    esp,0xc
c002010a:	31 ed                	xor    ebp,ebp
c002010c:	68 71 76 02 c0       	push   0xc0027671
c0020111:	e8 b1 cf fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0020116:	83 c4 10             	add    esp,0x10
c0020119:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002011d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0020121:	50                   	push   eax
c0020122:	50                   	push   eax
c0020123:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002012a:	50                   	push   eax
c002012b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020131:	e8 32 ec ff ff       	call   c001ed68 <IDE::getBase(unsigned char)>
c0020136:	89 c2                	mov    edx,eax
c0020138:	89 f8                	mov    eax,edi
c002013a:	66 ef                	out    dx,ax
c002013c:	45                   	inc    ebp
c002013d:	83 c4 10             	add    esp,0x10
c0020140:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0020146:	75 d1                	jne    c0020119 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c0020148:	83 ec 0c             	sub    esp,0xc
c002014b:	68 74 76 02 c0       	push   0xc0027674
c0020150:	e8 72 cf fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0020155:	eb 24                	jmp    c002017b <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c0020157:	51                   	push   ecx
c0020158:	51                   	push   ecx
c0020159:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020160:	50                   	push   eax
c0020161:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020167:	e8 fc eb ff ff       	call   c001ed68 <IDE::getBase(unsigned char)>
c002016c:	b9 00 01 00 00       	mov    ecx,0x100
c0020171:	89 c2                	mov    edx,eax
c0020173:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0020177:	fc                   	cld    
c0020178:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002017b:	83 c4 10             	add    esp,0x10
c002017e:	4e                   	dec    esi
c002017f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0020187:	e9 01 ff ff ff       	jmp    c002008d <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c002018c:	31 ff                	xor    edi,edi
c002018e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020193:	74 2f                	je     c00201c4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c0020195:	83 ec 0c             	sub    esp,0xc
c0020198:	68 77 76 02 c0       	push   0xc0027677
c002019d:	e8 25 cf fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00201a2:	58                   	pop    eax
c00201a3:	31 c0                	xor    eax,eax
c00201a5:	5a                   	pop    edx
c00201a6:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00201ab:	0f 94 c0             	sete   al
c00201ae:	50                   	push   eax
c00201af:	53                   	push   ebx
c00201b0:	e8 8d fb ff ff       	call   c001fd42 <ATA::flush(bool)>
c00201b5:	c7 04 24 7a 76 02 c0 	mov    DWORD PTR [esp],0xc002767a
c00201bc:	e8 06 cf fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00201c1:	83 c4 10             	add    esp,0x10
c00201c4:	83 c4 2c             	add    esp,0x2c
c00201c7:	89 f8                	mov    eax,edi
c00201c9:	5b                   	pop    ebx
c00201ca:	5e                   	pop    esi
c00201cb:	5f                   	pop    edi
c00201cc:	5d                   	pop    ebp
c00201cd:	c3                   	ret    

c00201ce <ATA::read(unsigned long long, int, void*)>:
c00201ce:	57                   	push   edi
c00201cf:	b8 04 00 00 00       	mov    eax,0x4
c00201d4:	56                   	push   esi
c00201d5:	53                   	push   ebx
c00201d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00201da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00201de:	8d 7a ff             	lea    edi,[edx-0x1]
c00201e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00201e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00201e9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00201ef:	77 25                	ja     c0020216 <ATA::read(unsigned long long, int, void*)+0x48>
c00201f1:	b8 06 00 00 00       	mov    eax,0x6
c00201f6:	85 f6                	test   esi,esi
c00201f8:	74 1c                	je     c0020216 <ATA::read(unsigned long long, int, void*)+0x48>
c00201fa:	50                   	push   eax
c00201fb:	50                   	push   eax
c00201fc:	6a 00                	push   0x0
c00201fe:	56                   	push   esi
c00201ff:	52                   	push   edx
c0020200:	53                   	push   ebx
c0020201:	51                   	push   ecx
c0020202:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020206:	e8 cd fb ff ff       	call   c001fdd8 <ATA::access(unsigned long long, int, void*, bool)>
c002020b:	83 c4 20             	add    esp,0x20
c002020e:	85 c0                	test   eax,eax
c0020210:	0f 95 c0             	setne  al
c0020213:	0f b6 c0             	movzx  eax,al
c0020216:	5b                   	pop    ebx
c0020217:	5e                   	pop    esi
c0020218:	5f                   	pop    edi
c0020219:	c3                   	ret    

c002021a <ATA::write(unsigned long long, int, void*)>:
c002021a:	55                   	push   ebp
c002021b:	57                   	push   edi
c002021c:	56                   	push   esi
c002021d:	53                   	push   ebx
c002021e:	83 ec 18             	sub    esp,0x18
c0020221:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020225:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020229:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002022d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020231:	68 7d 76 02 c0       	push   0xc002767d
c0020236:	e8 8c ce fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c002023b:	8d 53 ff             	lea    edx,[ebx-0x1]
c002023e:	83 c4 10             	add    esp,0x10
c0020241:	b8 04 00 00 00       	mov    eax,0x4
c0020246:	81 fa fe 00 00 00    	cmp    edx,0xfe
c002024c:	77 25                	ja     c0020273 <ATA::write(unsigned long long, int, void*)+0x59>
c002024e:	b8 06 00 00 00       	mov    eax,0x6
c0020253:	85 f6                	test   esi,esi
c0020255:	74 1c                	je     c0020273 <ATA::write(unsigned long long, int, void*)+0x59>
c0020257:	50                   	push   eax
c0020258:	50                   	push   eax
c0020259:	6a 01                	push   0x1
c002025b:	56                   	push   esi
c002025c:	53                   	push   ebx
c002025d:	55                   	push   ebp
c002025e:	57                   	push   edi
c002025f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020263:	e8 70 fb ff ff       	call   c001fdd8 <ATA::access(unsigned long long, int, void*, bool)>
c0020268:	83 c4 20             	add    esp,0x20
c002026b:	85 c0                	test   eax,eax
c002026d:	0f 95 c0             	setne  al
c0020270:	0f b6 c0             	movzx  eax,al
c0020273:	83 c4 0c             	add    esp,0xc
c0020276:	5b                   	pop    ebx
c0020277:	5e                   	pop    esi
c0020278:	5f                   	pop    edi
c0020279:	5d                   	pop    ebp
c002027a:	c3                   	ret    
c002027b:	90                   	nop

c002027c <ATA::detectCHS()>:
c002027c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020280:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0020286:	c1 e0 06             	shl    eax,0x6
c0020289:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002028f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0020299:	c7 44 24 04 89 76 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027689
c00202a1:	e9 03 4f ff ff       	jmp    c00151a9 <Krnl::panic(char const*)>

c00202a6 <ATA::open(int, int, void*)>:
c00202a6:	53                   	push   ebx
c00202a7:	83 ec 08             	sub    esp,0x8
c00202aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00202ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202b6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00202bc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00202c2:	c1 e0 06             	shl    eax,0x6
c00202c5:	01 d0                	add    eax,edx
c00202c7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00202ce:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00202d4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00202db:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00202e5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00202eb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00202f2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00202f9:	75 0c                	jne    c0020307 <ATA::open(int, int, void*)+0x61>
c00202fb:	83 ec 0c             	sub    esp,0xc
c00202fe:	53                   	push   ebx
c00202ff:	e8 78 ff ff ff       	call   c002027c <ATA::detectCHS()>
c0020304:	83 c4 10             	add    esp,0x10
c0020307:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002030d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020313:	c1 e0 06             	shl    eax,0x6
c0020316:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002031d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020327:	d1 e8                	shr    eax,1
c0020329:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002032f:	6a 04                	push   0x4
c0020331:	6a 0c                	push   0xc
c0020333:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002033a:	50                   	push   eax
c002033b:	52                   	push   edx
c002033c:	e8 39 ea ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020341:	90                   	nop
c0020342:	90                   	nop
c0020343:	6a 00                	push   0x0
c0020345:	6a 0c                	push   0xc
c0020347:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002034e:	50                   	push   eax
c002034f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020355:	e8 20 ea ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002035a:	83 c4 14             	add    esp,0x14
c002035d:	53                   	push   ebx
c002035e:	e8 77 e7 fe ff       	call   c000eada <PhysicalDisk::startCache()>
c0020363:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020366:	e8 e7 08 ff ff       	call   c0010c52 <createPartitionsForDisk(PhysicalDisk*)>
c002036b:	31 c0                	xor    eax,eax
c002036d:	83 c4 18             	add    esp,0x18
c0020370:	5b                   	pop    ebx
c0020371:	c3                   	ret    

c0020372 <ATAPI::write(unsigned long long, int, void*)>:
c0020372:	b8 03 00 00 00       	mov    eax,0x3
c0020377:	c3                   	ret    

c0020378 <ATAPI::close(int, int, void*)>:
c0020378:	83 ec 0c             	sub    esp,0xc
c002037b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020385:	85 c0                	test   eax,eax
c0020387:	74 0c                	je     c0020395 <ATAPI::close(int, int, void*)+0x1d>
c0020389:	83 ec 0c             	sub    esp,0xc
c002038c:	8b 10                	mov    edx,DWORD PTR [eax]
c002038e:	50                   	push   eax
c002038f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020392:	83 c4 10             	add    esp,0x10
c0020395:	31 c0                	xor    eax,eax
c0020397:	83 c4 0c             	add    esp,0xc
c002039a:	c3                   	ret    
c002039b:	90                   	nop

c002039c <ATAPI::ATAPI()>:
c002039c:	83 ec 0c             	sub    esp,0xc
c002039f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a3:	83 ec 04             	sub    esp,0x4
c00203a6:	68 00 08 00 00       	push   0x800
c00203ab:	68 89 79 02 c0       	push   0xc0027989
c00203b0:	50                   	push   eax
c00203b1:	e8 bc e6 fe ff       	call   c000ea72 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00203b6:	83 c4 10             	add    esp,0x10
c00203b9:	ba 1c 77 02 c0       	mov    edx,0xc002771c
c00203be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c2:	89 10                	mov    DWORD PTR [eax],edx
c00203c4:	90                   	nop
c00203c5:	83 c4 0c             	add    esp,0xc
c00203c8:	c3                   	ret    
c00203c9:	90                   	nop

c00203ca <ATAPI::readyForCommand()>:
c00203ca:	56                   	push   esi
c00203cb:	53                   	push   ebx
c00203cc:	53                   	push   ebx
c00203cd:	31 db                	xor    ebx,ebx
c00203cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00203d3:	51                   	push   ecx
c00203d4:	6a 0c                	push   0xc
c00203d6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00203dd:	50                   	push   eax
c00203de:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00203e4:	e8 51 ea ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c00203e9:	83 c4 10             	add    esp,0x10
c00203ec:	a8 88                	test   al,0x88
c00203ee:	74 25                	je     c0020415 <ATAPI::readyForCommand()+0x4b>
c00203f0:	43                   	inc    ebx
c00203f1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00203f7:	7e da                	jle    c00203d3 <ATAPI::readyForCommand()+0x9>
c00203f9:	83 ec 0c             	sub    esp,0xc
c00203fc:	68 5e 01 00 00       	push   0x15e
c0020401:	e8 02 8e ff ff       	call   c0019208 <milliTenthSleep(unsigned int)>
c0020406:	83 c4 10             	add    esp,0x10
c0020409:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002040f:	75 c2                	jne    c00203d3 <ATAPI::readyForCommand()+0x9>
c0020411:	31 c0                	xor    eax,eax
c0020413:	eb 02                	jmp    c0020417 <ATAPI::readyForCommand()+0x4d>
c0020415:	b0 01                	mov    al,0x1
c0020417:	5a                   	pop    edx
c0020418:	5b                   	pop    ebx
c0020419:	5e                   	pop    esi
c002041a:	c3                   	ret    
c002041b:	90                   	nop

c002041c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002041c:	55                   	push   ebp
c002041d:	57                   	push   edi
c002041e:	56                   	push   esi
c002041f:	53                   	push   ebx
c0020420:	83 ec 20             	sub    esp,0x20
c0020423:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020427:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002042b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002042f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020433:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020437:	6a 01                	push   0x1
c0020439:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020440:	50                   	push   eax
c0020441:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020447:	e8 36 eb ff ff       	call   c001ef82 <IDE::enableIRQs(unsigned char, bool)>
c002044c:	5e                   	pop    esi
c002044d:	58                   	pop    eax
c002044e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020455:	50                   	push   eax
c0020456:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002045c:	e8 f3 e8 ff ff       	call   c001ed54 <IDE::prepareInterrupt(unsigned char)>
c0020461:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020464:	e8 61 ff ff ff       	call   c00203ca <ATAPI::readyForCommand()>
c0020469:	83 c4 10             	add    esp,0x10
c002046c:	84 c0                	test   al,al
c002046e:	75 0a                	jne    c002047a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020470:	bb 01 00 00 00       	mov    ebx,0x1
c0020475:	e9 57 02 00 00       	jmp    c00206d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002047a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0020480:	c1 e0 04             	shl    eax,0x4
c0020483:	0f b6 c0             	movzx  eax,al
c0020486:	50                   	push   eax
c0020487:	6a 06                	push   0x6
c0020489:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020490:	50                   	push   eax
c0020491:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020497:	e8 de e8 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002049c:	6a 00                	push   0x0
c002049e:	6a 01                	push   0x1
c00204a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204a7:	50                   	push   eax
c00204a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204ae:	e8 c7 e8 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204b3:	83 c4 20             	add    esp,0x20
c00204b6:	0f b6 c3             	movzx  eax,bl
c00204b9:	0f b6 df             	movzx  ebx,bh
c00204bc:	50                   	push   eax
c00204bd:	6a 04                	push   0x4
c00204bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204c6:	50                   	push   eax
c00204c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204cd:	e8 a8 e8 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204d2:	53                   	push   ebx
c00204d3:	6a 05                	push   0x5
c00204d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204dc:	50                   	push   eax
c00204dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204e3:	e8 92 e8 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204e8:	83 c4 20             	add    esp,0x20
c00204eb:	68 a0 00 00 00       	push   0xa0
c00204f0:	6a 07                	push   0x7
c00204f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204f9:	50                   	push   eax
c00204fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020500:	e8 75 e8 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020505:	83 c4 0c             	add    esp,0xc
c0020508:	6a 01                	push   0x1
c002050a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020511:	50                   	push   eax
c0020512:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020518:	e8 11 f3 ff ff       	call   c001f82e <IDE::polling(unsigned char, unsigned int)>
c002051d:	83 c4 10             	add    esp,0x10
c0020520:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0020526:	84 c0                	test   al,al
c0020528:	74 23                	je     c002054d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002052a:	0f b6 d8             	movzx  ebx,al
c002052d:	0f b6 d2             	movzx  edx,dl
c0020530:	53                   	push   ebx
c0020531:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0020538:	50                   	push   eax
c0020539:	52                   	push   edx
c002053a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020540:	e8 39 f2 ff ff       	call   c001f77e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020545:	83 c4 10             	add    esp,0x10
c0020548:	e9 84 01 00 00       	jmp    c00206d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002054d:	0f b6 d2             	movzx  edx,dl
c0020550:	53                   	push   ebx
c0020551:	53                   	push   ebx
c0020552:	52                   	push   edx
c0020553:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020559:	e8 0a e8 ff ff       	call   c001ed68 <IDE::getBase(unsigned char)>
c002055e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020562:	b9 06 00 00 00       	mov    ecx,0x6
c0020567:	89 c2                	mov    edx,eax
c0020569:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002056c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020570:	83 c4 10             	add    esp,0x10
c0020573:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020579:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020580:	85 db                	test   ebx,ebx
c0020582:	0f 84 ec 00 00 00    	je     c0020674 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020588:	51                   	push   ecx
c0020589:	51                   	push   ecx
c002058a:	52                   	push   edx
c002058b:	50                   	push   eax
c002058c:	e8 57 e9 ff ff       	call   c001eee8 <IDE::waitInterrupt(unsigned char)>
c0020591:	83 c4 10             	add    esp,0x10
c0020594:	84 c0                	test   al,al
c0020596:	0f 84 d4 fe ff ff    	je     c0020470 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002059c:	56                   	push   esi
c002059d:	56                   	push   esi
c002059e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205a5:	50                   	push   eax
c00205a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205ac:	e8 a3 e7 ff ff       	call   c001ed54 <IDE::prepareInterrupt(unsigned char)>
c00205b1:	83 c4 0c             	add    esp,0xc
c00205b4:	6a 04                	push   0x4
c00205b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205bd:	50                   	push   eax
c00205be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205c4:	e8 71 e8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c00205c9:	83 c4 0c             	add    esp,0xc
c00205cc:	89 c6                	mov    esi,eax
c00205ce:	6a 05                	push   0x5
c00205d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00205d7:	50                   	push   eax
c00205d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205de:	e8 57 e8 ff ff       	call   c001ee3a <IDE::read(unsigned char, unsigned char)>
c00205e3:	89 f1                	mov    ecx,esi
c00205e5:	0f b6 c0             	movzx  eax,al
c00205e8:	0f b6 f1             	movzx  esi,cl
c00205eb:	c1 e0 08             	shl    eax,0x8
c00205ee:	09 c6                	or     esi,eax
c00205f0:	d1 fe                	sar    esi,1
c00205f2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00205f6:	83 c4 10             	add    esp,0x10
c00205f9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00205fe:	74 41                	je     c0020641 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0020600:	31 c9                	xor    ecx,ecx
c0020602:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020608:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002060f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020613:	75 0a                	jne    c002061f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0020615:	01 c9                	add    ecx,ecx
c0020617:	01 cd                	add    ebp,ecx
c0020619:	4b                   	dec    ebx
c002061a:	e9 54 ff ff ff       	jmp    c0020573 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002061f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020624:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020628:	51                   	push   ecx
c0020629:	51                   	push   ecx
c002062a:	52                   	push   edx
c002062b:	50                   	push   eax
c002062c:	e8 37 e7 ff ff       	call   c001ed68 <IDE::getBase(unsigned char)>
c0020631:	89 c2                	mov    edx,eax
c0020633:	89 f0                	mov    eax,esi
c0020635:	66 ef                	out    dx,ax
c0020637:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002063b:	83 c4 10             	add    esp,0x10
c002063e:	41                   	inc    ecx
c002063f:	eb c1                	jmp    c0020602 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0020641:	31 f6                	xor    esi,esi
c0020643:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020649:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020650:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020654:	75 06                	jne    c002065c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0020656:	01 f6                	add    esi,esi
c0020658:	01 f5                	add    ebp,esi
c002065a:	eb bd                	jmp    c0020619 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002065c:	51                   	push   ecx
c002065d:	51                   	push   ecx
c002065e:	52                   	push   edx
c002065f:	50                   	push   eax
c0020660:	e8 03 e7 ff ff       	call   c001ed68 <IDE::getBase(unsigned char)>
c0020665:	89 c2                	mov    edx,eax
c0020667:	66 ed                	in     ax,dx
c0020669:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002066e:	83 c4 10             	add    esp,0x10
c0020671:	46                   	inc    esi
c0020672:	eb cf                	jmp    c0020643 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020674:	51                   	push   ecx
c0020675:	51                   	push   ecx
c0020676:	52                   	push   edx
c0020677:	50                   	push   eax
c0020678:	e8 6b e8 ff ff       	call   c001eee8 <IDE::waitInterrupt(unsigned char)>
c002067d:	83 c4 10             	add    esp,0x10
c0020680:	84 c0                	test   al,al
c0020682:	0f 84 e8 fd ff ff    	je     c0020470 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020688:	bb a0 86 01 00       	mov    ebx,0x186a0
c002068d:	52                   	push   edx
c002068e:	52                   	push   edx
c002068f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020696:	50                   	push   eax
c0020697:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002069d:	e8 b2 e6 ff ff       	call   c001ed54 <IDE::prepareInterrupt(unsigned char)>
c00206a2:	83 c4 10             	add    esp,0x10
c00206a5:	50                   	push   eax
c00206a6:	50                   	push   eax
c00206a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206ae:	50                   	push   eax
c00206af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206b5:	e8 ae e6 ff ff       	call   c001ed68 <IDE::getBase(unsigned char)>
c00206ba:	8d 50 07             	lea    edx,[eax+0x7]
c00206bd:	ec                   	in     al,dx
c00206be:	83 c4 10             	add    esp,0x10
c00206c1:	a8 88                	test   al,0x88
c00206c3:	74 0a                	je     c00206cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00206c5:	4b                   	dec    ebx
c00206c6:	75 dd                	jne    c00206a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00206c8:	bb 02 00 00 00       	mov    ebx,0x2
c00206cd:	eb 02                	jmp    c00206d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00206cf:	31 db                	xor    ebx,ebx
c00206d1:	83 c4 1c             	add    esp,0x1c
c00206d4:	89 d8                	mov    eax,ebx
c00206d6:	5b                   	pop    ebx
c00206d7:	5e                   	pop    esi
c00206d8:	5f                   	pop    edi
c00206d9:	5d                   	pop    ebp
c00206da:	c3                   	ret    
c00206db:	90                   	nop

c00206dc <ATAPI::diskRemoved()>:
c00206dc:	53                   	push   ebx
c00206dd:	83 ec 14             	sub    esp,0x14
c00206e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00206e4:	68 d4 76 02 c0       	push   0xc00276d4
c00206e9:	e8 d9 c9 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00206ee:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00206f5:	c7 04 24 ea 76 02 c0 	mov    DWORD PTR [esp],0xc00276ea
c00206fc:	e8 c6 c9 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0020701:	58                   	pop    eax
c0020702:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020708:	e8 c3 02 ff ff       	call   c00109d0 <LogicalDisk::unmount()>
c002070d:	c7 04 24 f9 76 02 c0 	mov    DWORD PTR [esp],0xc00276f9
c0020714:	e8 ae c9 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0020719:	5a                   	pop    edx
c002071a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020720:	e8 b3 0c ff ff       	call   c00113d8 <VCache::writeWriteBuffer()>
c0020725:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002072b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002072f:	83 c4 18             	add    esp,0x18
c0020732:	5b                   	pop    ebx
c0020733:	e9 90 0c ff ff       	jmp    c00113c8 <VCache::invalidateReadBuffer()>

c0020738 <ATAPI::eject()>:
c0020738:	57                   	push   edi
c0020739:	b9 03 00 00 00       	mov    ecx,0x3
c002073e:	53                   	push   ebx
c002073f:	83 ec 14             	sub    esp,0x14
c0020742:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020746:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002074a:	fc                   	cld    
c002074b:	31 c0                	xor    eax,eax
c002074d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002074f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020754:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020759:	50                   	push   eax
c002075a:	50                   	push   eax
c002075b:	6a 00                	push   0x0
c002075d:	6a 00                	push   0x0
c002075f:	6a 00                	push   0x0
c0020761:	6a 02                	push   0x2
c0020763:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020767:	50                   	push   eax
c0020768:	53                   	push   ebx
c0020769:	e8 ae fc ff ff       	call   c002041c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002076e:	83 c4 14             	add    esp,0x14
c0020771:	53                   	push   ebx
c0020772:	e8 65 ff ff ff       	call   c00206dc <ATAPI::diskRemoved()>
c0020777:	83 c4 24             	add    esp,0x24
c002077a:	31 c0                	xor    eax,eax
c002077c:	5b                   	pop    ebx
c002077d:	5f                   	pop    edi
c002077e:	c3                   	ret    
c002077f:	90                   	nop

c0020780 <ATAPI::diskInserted()>:
c0020780:	83 ec 18             	sub    esp,0x18
c0020783:	68 95 79 02 c0       	push   0xc0027995
c0020788:	e8 3a c9 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c002078d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020791:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020798:	83 c4 1c             	add    esp,0x1c
c002079b:	c3                   	ret    

c002079c <ATAPI::detectMedia()>:
c002079c:	56                   	push   esi
c002079d:	53                   	push   ebx
c002079e:	83 ec 28             	sub    esp,0x28
c00207a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00207a5:	6a 0c                	push   0xc
c00207a7:	6a 00                	push   0x0
c00207a9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00207ad:	56                   	push   esi
c00207ae:	e8 e1 fe fd ff       	call   c0000694 <memset>
c00207b3:	58                   	pop    eax
c00207b4:	5a                   	pop    edx
c00207b5:	6a 00                	push   0x0
c00207b7:	6a 00                	push   0x0
c00207b9:	6a 00                	push   0x0
c00207bb:	6a 00                	push   0x0
c00207bd:	56                   	push   esi
c00207be:	53                   	push   ebx
c00207bf:	e8 58 fc ff ff       	call   c002041c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207c4:	83 c4 1c             	add    esp,0x1c
c00207c7:	6a 0c                	push   0xc
c00207c9:	6a 00                	push   0x0
c00207cb:	56                   	push   esi
c00207cc:	e8 c3 fe fd ff       	call   c0000694 <memset>
c00207d1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00207d6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00207db:	59                   	pop    ecx
c00207dc:	58                   	pop    eax
c00207dd:	6a 01                	push   0x1
c00207df:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00207e3:	50                   	push   eax
c00207e4:	6a 00                	push   0x0
c00207e6:	6a 12                	push   0x12
c00207e8:	56                   	push   esi
c00207e9:	53                   	push   ebx
c00207ea:	e8 2d fc ff ff       	call   c002041c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207ef:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00207f3:	83 c4 20             	add    esp,0x20
c00207f6:	83 e0 7f             	and    eax,0x7f
c00207f9:	3c 70                	cmp    al,0x70
c00207fb:	74 15                	je     c0020812 <ATAPI::detectMedia()+0x76>
c00207fd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020804:	75 0c                	jne    c0020812 <ATAPI::detectMedia()+0x76>
c0020806:	83 ec 0c             	sub    esp,0xc
c0020809:	53                   	push   ebx
c002080a:	e8 71 ff ff ff       	call   c0020780 <ATAPI::diskInserted()>
c002080f:	83 c4 10             	add    esp,0x10
c0020812:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020816:	83 e0 0f             	and    eax,0xf
c0020819:	3c 02                	cmp    al,0x2
c002081b:	75 1b                	jne    c0020838 <ATAPI::detectMedia()+0x9c>
c002081d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020822:	75 2d                	jne    c0020851 <ATAPI::detectMedia()+0xb5>
c0020824:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002082b:	74 24                	je     c0020851 <ATAPI::detectMedia()+0xb5>
c002082d:	83 ec 0c             	sub    esp,0xc
c0020830:	53                   	push   ebx
c0020831:	e8 a6 fe ff ff       	call   c00206dc <ATAPI::diskRemoved()>
c0020836:	eb 16                	jmp    c002084e <ATAPI::detectMedia()+0xb2>
c0020838:	84 c0                	test   al,al
c002083a:	75 15                	jne    c0020851 <ATAPI::detectMedia()+0xb5>
c002083c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020843:	75 0c                	jne    c0020851 <ATAPI::detectMedia()+0xb5>
c0020845:	83 ec 0c             	sub    esp,0xc
c0020848:	53                   	push   ebx
c0020849:	e8 32 ff ff ff       	call   c0020780 <ATAPI::diskInserted()>
c002084e:	83 c4 10             	add    esp,0x10
c0020851:	83 c4 24             	add    esp,0x24
c0020854:	5b                   	pop    ebx
c0020855:	5e                   	pop    esi
c0020856:	c3                   	ret    
c0020857:	90                   	nop

c0020858 <ATAPI::open(int, int, void*)>:
c0020858:	56                   	push   esi
c0020859:	53                   	push   ebx
c002085a:	50                   	push   eax
c002085b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002085f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020863:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020867:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002086d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020873:	c1 e0 06             	shl    eax,0x6
c0020876:	01 d0                	add    eax,edx
c0020878:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002087f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020885:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002088c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020896:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002089c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00208a3:	6a 04                	push   0x4
c00208a5:	6a 0c                	push   0xc
c00208a7:	51                   	push   ecx
c00208a8:	52                   	push   edx
c00208a9:	e8 cc e4 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208ae:	90                   	nop
c00208af:	90                   	nop
c00208b0:	6a 00                	push   0x0
c00208b2:	6a 0c                	push   0xc
c00208b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00208bb:	50                   	push   eax
c00208bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00208c2:	e8 b3 e4 ff ff       	call   c001ed7a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208c7:	83 c4 14             	add    esp,0x14
c00208ca:	68 74 01 00 00       	push   0x174
c00208cf:	e8 13 95 fe ff       	call   c0009de7 <malloc>
c00208d4:	83 c4 0c             	add    esp,0xc
c00208d7:	89 c6                	mov    esi,eax
c00208d9:	6a 00                	push   0x0
c00208db:	68 ff ff ff 7f       	push   0x7fffffff
c00208e0:	6a 00                	push   0x0
c00208e2:	6a 00                	push   0x0
c00208e4:	53                   	push   ebx
c00208e5:	68 72 7a 02 c0       	push   0xc0027a72
c00208ea:	50                   	push   eax
c00208eb:	e8 ec fe fe ff       	call   c00107dc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00208f0:	83 c4 14             	add    esp,0x14
c00208f3:	56                   	push   esi
c00208f4:	e8 99 ff fe ff       	call   c0010892 <LogicalDisk::assignDriveLetter()>
c00208f9:	5a                   	pop    edx
c00208fa:	0f be c0             	movsx  eax,al
c00208fd:	59                   	pop    ecx
c00208fe:	50                   	push   eax
c00208ff:	68 07 77 02 c0       	push   0xc0027707
c0020904:	e8 be c7 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0020909:	58                   	pop    eax
c002090a:	5a                   	pop    edx
c002090b:	56                   	push   esi
c002090c:	53                   	push   ebx
c002090d:	e8 28 dd fe ff       	call   c000e63a <Device::addChild(Device*)>
c0020912:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020918:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002091b:	e8 ba e1 fe ff       	call   c000eada <PhysicalDisk::startCache()>
c0020920:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020927:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002092a:	e8 6d fe ff ff       	call   c002079c <ATAPI::detectMedia()>
c002092f:	83 c4 14             	add    esp,0x14
c0020932:	31 c0                	xor    eax,eax
c0020934:	5b                   	pop    ebx
c0020935:	5e                   	pop    esi
c0020936:	c3                   	ret    
c0020937:	90                   	nop

c0020938 <ATAPI::read(unsigned long long, int, void*)>:
c0020938:	55                   	push   ebp
c0020939:	57                   	push   edi
c002093a:	56                   	push   esi
c002093b:	53                   	push   ebx
c002093c:	83 ec 1c             	sub    esp,0x1c
c002093f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020943:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020947:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002094b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020952:	74 41                	je     c0020995 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020954:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020958:	b9 03 00 00 00       	mov    ecx,0x3
c002095d:	fc                   	cld    
c002095e:	31 c0                	xor    eax,eax
c0020960:	86 fb                	xchg   bl,bh
c0020962:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020964:	c1 c3 10             	rol    ebx,0x10
c0020967:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002096c:	89 e8                	mov    eax,ebp
c002096e:	86 fb                	xchg   bl,bh
c0020970:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020974:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0020978:	50                   	push   eax
c0020979:	50                   	push   eax
c002097a:	55                   	push   ebp
c002097b:	c1 e5 0b             	shl    ebp,0xb
c002097e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020982:	6a 00                	push   0x0
c0020984:	55                   	push   ebp
c0020985:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020989:	50                   	push   eax
c002098a:	56                   	push   esi
c002098b:	e8 8c fa ff ff       	call   c002041c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020990:	83 c4 20             	add    esp,0x20
c0020993:	eb 1a                	jmp    c00209af <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020995:	83 ec 0c             	sub    esp,0xc
c0020998:	56                   	push   esi
c0020999:	e8 fe fd ff ff       	call   c002079c <ATAPI::detectMedia()>
c002099e:	83 c4 10             	add    esp,0x10
c00209a1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00209a8:	75 aa                	jne    c0020954 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00209aa:	b8 02 00 00 00       	mov    eax,0x2
c00209af:	83 c4 1c             	add    esp,0x1c
c00209b2:	5b                   	pop    ebx
c00209b3:	5e                   	pop    esi
c00209b4:	5f                   	pop    edi
c00209b5:	5d                   	pop    ebp
c00209b6:	c3                   	ret    
c00209b7:	90                   	nop

c00209b8 <SATA::close(int, int, void*)>:
c00209b8:	83 ec 0c             	sub    esp,0xc
c00209bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00209c5:	85 c0                	test   eax,eax
c00209c7:	74 0c                	je     c00209d5 <SATA::close(int, int, void*)+0x1d>
c00209c9:	83 ec 0c             	sub    esp,0xc
c00209cc:	8b 10                	mov    edx,DWORD PTR [eax]
c00209ce:	50                   	push   eax
c00209cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00209d2:	83 c4 10             	add    esp,0x10
c00209d5:	31 c0                	xor    eax,eax
c00209d7:	83 c4 0c             	add    esp,0xc
c00209da:	c3                   	ret    
c00209db:	90                   	nop

c00209dc <SATA::powerSaving(PowerSavingLevel)>:
c00209dc:	c3                   	ret    
c00209dd:	90                   	nop

c00209de <SATA::open(int, int, void*)>:
c00209de:	56                   	push   esi
c00209df:	53                   	push   ebx
c00209e0:	51                   	push   ecx
c00209e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209e5:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00209ec:	74 2d                	je     c0020a1b <SATA::open(int, int, void*)+0x3d>
c00209ee:	83 ec 0c             	sub    esp,0xc
c00209f1:	68 4c 77 02 c0       	push   0xc002774c
c00209f6:	e8 46 94 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00209fb:	83 c4 10             	add    esp,0x10
c00209fe:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020a05:	75 14                	jne    c0020a1b <SATA::open(int, int, void*)+0x3d>
c0020a07:	e4 60                	in     al,0x60
c0020a09:	3c 5a                	cmp    al,0x5a
c0020a0b:	74 04                	je     c0020a11 <SATA::open(int, int, void*)+0x33>
c0020a0d:	3c 1c                	cmp    al,0x1c
c0020a0f:	75 f6                	jne    c0020a07 <SATA::open(int, int, void*)+0x29>
c0020a11:	e4 60                	in     al,0x60
c0020a13:	3c 5a                	cmp    al,0x5a
c0020a15:	74 fa                	je     c0020a11 <SATA::open(int, int, void*)+0x33>
c0020a17:	3c 1c                	cmp    al,0x1c
c0020a19:	74 f6                	je     c0020a11 <SATA::open(int, int, void*)+0x33>
c0020a1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a1f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020a29:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020a2f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a3d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020a47:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020a4d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020a54:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020a5b:	74 2d                	je     c0020a8a <SATA::open(int, int, void*)+0xac>
c0020a5d:	83 ec 0c             	sub    esp,0xc
c0020a60:	68 59 77 02 c0       	push   0xc0027759
c0020a65:	e8 d7 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020a6a:	83 c4 10             	add    esp,0x10
c0020a6d:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020a74:	75 14                	jne    c0020a8a <SATA::open(int, int, void*)+0xac>
c0020a76:	e4 60                	in     al,0x60
c0020a78:	3c 1c                	cmp    al,0x1c
c0020a7a:	74 04                	je     c0020a80 <SATA::open(int, int, void*)+0xa2>
c0020a7c:	3c 5a                	cmp    al,0x5a
c0020a7e:	75 f6                	jne    c0020a76 <SATA::open(int, int, void*)+0x98>
c0020a80:	e4 60                	in     al,0x60
c0020a82:	3c 5a                	cmp    al,0x5a
c0020a84:	74 fa                	je     c0020a80 <SATA::open(int, int, void*)+0xa2>
c0020a86:	3c 1c                	cmp    al,0x1c
c0020a88:	74 f6                	je     c0020a80 <SATA::open(int, int, void*)+0xa2>
c0020a8a:	e8 0f 9a fe ff       	call   c000a49e <Phys::allocatePage()>
c0020a8f:	89 c6                	mov    esi,eax
c0020a91:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020a97:	81 c6 00 10 00 00    	add    esi,0x1000
c0020a9d:	e8 fc 99 fe ff       	call   c000a49e <Phys::allocatePage()>
c0020aa2:	39 c6                	cmp    esi,eax
c0020aa4:	74 10                	je     c0020ab6 <SATA::open(int, int, void*)+0xd8>
c0020aa6:	83 ec 0c             	sub    esp,0xc
c0020aa9:	68 66 77 02 c0       	push   0xc0027766
c0020aae:	e8 f6 46 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0020ab3:	83 c4 10             	add    esp,0x10
c0020ab6:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020abd:	74 2d                	je     c0020aec <SATA::open(int, int, void*)+0x10e>
c0020abf:	83 ec 0c             	sub    esp,0xc
c0020ac2:	68 7a 77 02 c0       	push   0xc002777a
c0020ac7:	e8 75 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020acc:	83 c4 10             	add    esp,0x10
c0020acf:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020ad6:	75 14                	jne    c0020aec <SATA::open(int, int, void*)+0x10e>
c0020ad8:	e4 60                	in     al,0x60
c0020ada:	3c 1c                	cmp    al,0x1c
c0020adc:	74 04                	je     c0020ae2 <SATA::open(int, int, void*)+0x104>
c0020ade:	3c 5a                	cmp    al,0x5a
c0020ae0:	75 f6                	jne    c0020ad8 <SATA::open(int, int, void*)+0xfa>
c0020ae2:	e4 60                	in     al,0x60
c0020ae4:	3c 5a                	cmp    al,0x5a
c0020ae6:	74 fa                	je     c0020ae2 <SATA::open(int, int, void*)+0x104>
c0020ae8:	3c 1c                	cmp    al,0x1c
c0020aea:	74 f6                	je     c0020ae2 <SATA::open(int, int, void*)+0x104>
c0020aec:	83 ec 0c             	sub    esp,0xc
c0020aef:	6a 02                	push   0x2
c0020af1:	e8 ab b2 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0020af6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020afc:	6a 03                	push   0x3
c0020afe:	50                   	push   eax
c0020aff:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020b05:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0020b0b:	e8 38 b9 fe ff       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020b10:	83 c4 20             	add    esp,0x20
c0020b13:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020b1a:	74 2d                	je     c0020b49 <SATA::open(int, int, void*)+0x16b>
c0020b1c:	83 ec 0c             	sub    esp,0xc
c0020b1f:	68 87 77 02 c0       	push   0xc0027787
c0020b24:	e8 18 93 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b29:	83 c4 10             	add    esp,0x10
c0020b2c:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020b33:	75 14                	jne    c0020b49 <SATA::open(int, int, void*)+0x16b>
c0020b35:	e4 60                	in     al,0x60
c0020b37:	3c 1c                	cmp    al,0x1c
c0020b39:	74 04                	je     c0020b3f <SATA::open(int, int, void*)+0x161>
c0020b3b:	3c 5a                	cmp    al,0x5a
c0020b3d:	75 f6                	jne    c0020b35 <SATA::open(int, int, void*)+0x157>
c0020b3f:	e4 60                	in     al,0x60
c0020b41:	3c 5a                	cmp    al,0x5a
c0020b43:	74 fa                	je     c0020b3f <SATA::open(int, int, void*)+0x161>
c0020b45:	3c 1c                	cmp    al,0x1c
c0020b47:	74 f6                	je     c0020b3f <SATA::open(int, int, void*)+0x161>
c0020b49:	83 ec 0c             	sub    esp,0xc
c0020b4c:	53                   	push   ebx
c0020b4d:	e8 88 df fe ff       	call   c000eada <PhysicalDisk::startCache()>
c0020b52:	83 c4 10             	add    esp,0x10
c0020b55:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020b5c:	74 2d                	je     c0020b8b <SATA::open(int, int, void*)+0x1ad>
c0020b5e:	83 ec 0c             	sub    esp,0xc
c0020b61:	68 94 77 02 c0       	push   0xc0027794
c0020b66:	e8 d6 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020b6b:	83 c4 10             	add    esp,0x10
c0020b6e:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020b75:	75 14                	jne    c0020b8b <SATA::open(int, int, void*)+0x1ad>
c0020b77:	e4 60                	in     al,0x60
c0020b79:	3c 1c                	cmp    al,0x1c
c0020b7b:	74 04                	je     c0020b81 <SATA::open(int, int, void*)+0x1a3>
c0020b7d:	3c 5a                	cmp    al,0x5a
c0020b7f:	75 f6                	jne    c0020b77 <SATA::open(int, int, void*)+0x199>
c0020b81:	e4 60                	in     al,0x60
c0020b83:	3c 5a                	cmp    al,0x5a
c0020b85:	74 fa                	je     c0020b81 <SATA::open(int, int, void*)+0x1a3>
c0020b87:	3c 1c                	cmp    al,0x1c
c0020b89:	74 f6                	je     c0020b81 <SATA::open(int, int, void*)+0x1a3>
c0020b8b:	83 ec 0c             	sub    esp,0xc
c0020b8e:	53                   	push   ebx
c0020b8f:	e8 be 00 ff ff       	call   c0010c52 <createPartitionsForDisk(PhysicalDisk*)>
c0020b94:	83 c4 10             	add    esp,0x10
c0020b97:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020b9e:	74 2d                	je     c0020bcd <SATA::open(int, int, void*)+0x1ef>
c0020ba0:	83 ec 0c             	sub    esp,0xc
c0020ba3:	68 a1 77 02 c0       	push   0xc00277a1
c0020ba8:	e8 94 92 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020bad:	83 c4 10             	add    esp,0x10
c0020bb0:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020bb7:	75 14                	jne    c0020bcd <SATA::open(int, int, void*)+0x1ef>
c0020bb9:	e4 60                	in     al,0x60
c0020bbb:	3c 1c                	cmp    al,0x1c
c0020bbd:	74 04                	je     c0020bc3 <SATA::open(int, int, void*)+0x1e5>
c0020bbf:	3c 5a                	cmp    al,0x5a
c0020bc1:	75 f6                	jne    c0020bb9 <SATA::open(int, int, void*)+0x1db>
c0020bc3:	e4 60                	in     al,0x60
c0020bc5:	3c 5a                	cmp    al,0x5a
c0020bc7:	74 fa                	je     c0020bc3 <SATA::open(int, int, void*)+0x1e5>
c0020bc9:	3c 1c                	cmp    al,0x1c
c0020bcb:	74 f6                	je     c0020bc3 <SATA::open(int, int, void*)+0x1e5>
c0020bcd:	5a                   	pop    edx
c0020bce:	31 c0                	xor    eax,eax
c0020bd0:	5b                   	pop    ebx
c0020bd1:	5e                   	pop    esi
c0020bd2:	c3                   	ret    
c0020bd3:	90                   	nop

c0020bd4 <SATA::SATA()>:
c0020bd4:	83 ec 0c             	sub    esp,0xc
c0020bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bdb:	83 ec 04             	sub    esp,0x4
c0020bde:	68 00 02 00 00       	push   0x200
c0020be3:	68 ae 77 02 c0       	push   0xc00277ae
c0020be8:	50                   	push   eax
c0020be9:	e8 84 de fe ff       	call   c000ea72 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020bee:	83 c4 10             	add    esp,0x10
c0020bf1:	ba 58 79 02 c0       	mov    edx,0xc0027958
c0020bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bfa:	89 10                	mov    DWORD PTR [eax],edx
c0020bfc:	90                   	nop
c0020bfd:	83 c4 0c             	add    esp,0xc
c0020c00:	c3                   	ret    
c0020c01:	90                   	nop

c0020c02 <SATA::access(unsigned long long, int, void*, bool)>:
c0020c02:	55                   	push   ebp
c0020c03:	57                   	push   edi
c0020c04:	56                   	push   esi
c0020c05:	53                   	push   ebx
c0020c06:	83 ec 2c             	sub    esp,0x2c
c0020c09:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020c0d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020c11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c15:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020c1c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c24:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c2c:	75 19                	jne    c0020c47 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020c2e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020c33:	7e 41                	jle    c0020c76 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020c35:	83 ec 0c             	sub    esp,0xc
c0020c38:	68 cd 77 02 c0       	push   0xc00277cd
c0020c3d:	e8 67 45 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0020c42:	83 c4 10             	add    esp,0x10
c0020c45:	eb 2f                	jmp    c0020c76 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020c47:	83 ec 0c             	sub    esp,0xc
c0020c4a:	68 be 77 02 c0       	push   0xc00277be
c0020c4f:	e8 ed 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020c54:	83 c4 10             	add    esp,0x10
c0020c57:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020c5e:	75 ce                	jne    c0020c2e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020c60:	e4 60                	in     al,0x60
c0020c62:	3c 1c                	cmp    al,0x1c
c0020c64:	74 04                	je     c0020c6a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020c66:	3c 5a                	cmp    al,0x5a
c0020c68:	75 f6                	jne    c0020c60 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020c6a:	e4 60                	in     al,0x60
c0020c6c:	3c 5a                	cmp    al,0x5a
c0020c6e:	74 fa                	je     c0020c6a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020c70:	3c 1c                	cmp    al,0x1c
c0020c72:	74 f6                	je     c0020c6a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020c74:	eb b8                	jmp    c0020c2e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020c76:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020c7d:	75 29                	jne    c0020ca8 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020c7f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020c85:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020c8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020c91:	8d 75 02             	lea    esi,[ebp+0x2]
c0020c94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c98:	c1 e6 07             	shl    esi,0x7
c0020c9b:	01 c6                	add    esi,eax
c0020c9d:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020ca4:	74 4a                	je     c0020cf0 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020ca6:	eb 2f                	jmp    c0020cd7 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020ca8:	83 ec 0c             	sub    esp,0xc
c0020cab:	68 06 78 02 c0       	push   0xc0027806
c0020cb0:	e8 8c 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020cb5:	83 c4 10             	add    esp,0x10
c0020cb8:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020cbf:	75 be                	jne    c0020c7f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020cc1:	e4 60                	in     al,0x60
c0020cc3:	3c 1c                	cmp    al,0x1c
c0020cc5:	74 04                	je     c0020ccb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020cc7:	3c 5a                	cmp    al,0x5a
c0020cc9:	75 f6                	jne    c0020cc1 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020ccb:	e4 60                	in     al,0x60
c0020ccd:	3c 5a                	cmp    al,0x5a
c0020ccf:	74 fa                	je     c0020ccb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020cd1:	3c 1c                	cmp    al,0x1c
c0020cd3:	74 f6                	je     c0020ccb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020cd5:	eb a8                	jmp    c0020c7f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020cd7:	83 ec 0c             	sub    esp,0xc
c0020cda:	68 15 78 02 c0       	push   0xc0027815
c0020cdf:	e8 5d 91 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020ce4:	83 c4 10             	add    esp,0x10
c0020ce7:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020cee:	74 3d                	je     c0020d2d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020cf0:	89 e8                	mov    eax,ebp
c0020cf2:	c1 e0 07             	shl    eax,0x7
c0020cf5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020cf9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d03:	52                   	push   edx
c0020d04:	52                   	push   edx
c0020d05:	56                   	push   esi
c0020d06:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020d0c:	e8 fd eb ff ff       	call   c001f90e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d15:	83 c4 10             	add    esp,0x10
c0020d18:	b8 01 00 00 00       	mov    eax,0x1
c0020d1d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d22:	75 1d                	jne    c0020d41 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020d24:	e9 c8 04 00 00       	jmp    c00211f1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020d29:	3c 5a                	cmp    al,0x5a
c0020d2b:	74 0c                	je     c0020d39 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d2d:	e4 60                	in     al,0x60
c0020d2f:	3c 1c                	cmp    al,0x1c
c0020d31:	75 f6                	jne    c0020d29 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020d33:	eb 04                	jmp    c0020d39 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d35:	3c 1c                	cmp    al,0x1c
c0020d37:	75 b7                	jne    c0020cf0 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020d39:	e4 60                	in     al,0x60
c0020d3b:	3c 5a                	cmp    al,0x5a
c0020d3d:	74 fa                	je     c0020d39 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d3f:	eb f4                	jmp    c0020d35 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020d41:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020d48:	74 3a                	je     c0020d84 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020d4a:	83 ec 0c             	sub    esp,0xc
c0020d4d:	68 24 78 02 c0       	push   0xc0027824
c0020d52:	e8 ea 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020d57:	83 c4 10             	add    esp,0x10
c0020d5a:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020d61:	74 0d                	je     c0020d70 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020d63:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020d68:	74 34                	je     c0020d9e <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020d6a:	eb 1f                	jmp    c0020d8b <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020d6c:	3c 1c                	cmp    al,0x1c
c0020d6e:	74 0c                	je     c0020d7c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020d70:	e4 60                	in     al,0x60
c0020d72:	3c 5a                	cmp    al,0x5a
c0020d74:	75 f6                	jne    c0020d6c <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020d76:	eb 04                	jmp    c0020d7c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020d78:	3c 1c                	cmp    al,0x1c
c0020d7a:	75 e7                	jne    c0020d63 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020d7c:	e4 60                	in     al,0x60
c0020d7e:	3c 5a                	cmp    al,0x5a
c0020d80:	74 fa                	je     c0020d7c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020d82:	eb f4                	jmp    c0020d78 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020d84:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020d89:	74 1c                	je     c0020da7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020d8b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020d8f:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020d95:	c1 e1 09             	shl    ecx,0x9
c0020d98:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020d9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020d9e:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020da5:	75 55                	jne    c0020dfc <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020da7:	8d 45 02             	lea    eax,[ebp+0x2]
c0020daa:	c1 e0 07             	shl    eax,0x7
c0020dad:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020db1:	8b 38                	mov    edi,DWORD PTR [eax]
c0020db3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020db9:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020dbf:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dc9:	c1 e0 05             	shl    eax,0x5
c0020dcc:	01 c7                	add    edi,eax
c0020dce:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020dd2:	83 e0 01             	and    eax,0x1
c0020dd5:	c1 e0 06             	shl    eax,0x6
c0020dd8:	88 c2                	mov    dl,al
c0020dda:	8a 07                	mov    al,BYTE PTR [edi]
c0020ddc:	83 e0 bf             	and    eax,0xffffffbf
c0020ddf:	09 d0                	or     eax,edx
c0020de1:	88 07                	mov    BYTE PTR [edi],al
c0020de3:	8b 07                	mov    eax,DWORD PTR [edi]
c0020de5:	25 e0 ff 00 00       	and    eax,0xffe0
c0020dea:	0d 05 00 01 00       	or     eax,0x10005
c0020def:	89 07                	mov    DWORD PTR [edi],eax
c0020df1:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020df8:	74 4d                	je     c0020e47 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020dfa:	eb 32                	jmp    c0020e2e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020dfc:	83 ec 0c             	sub    esp,0xc
c0020dff:	68 33 78 02 c0       	push   0xc0027833
c0020e04:	e8 38 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020e09:	83 c4 10             	add    esp,0x10
c0020e0c:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020e13:	75 92                	jne    c0020da7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e15:	e4 60                	in     al,0x60
c0020e17:	3c 1c                	cmp    al,0x1c
c0020e19:	74 04                	je     c0020e1f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e1b:	3c 5a                	cmp    al,0x5a
c0020e1d:	75 f6                	jne    c0020e15 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020e1f:	e4 60                	in     al,0x60
c0020e21:	3c 5a                	cmp    al,0x5a
c0020e23:	74 fa                	je     c0020e1f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e25:	3c 1c                	cmp    al,0x1c
c0020e27:	74 f6                	je     c0020e1f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e29:	e9 79 ff ff ff       	jmp    c0020da7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e2e:	83 ec 0c             	sub    esp,0xc
c0020e31:	68 42 78 02 c0       	push   0xc0027842
c0020e36:	e8 06 90 fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020e3b:	83 c4 10             	add    esp,0x10
c0020e3e:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020e45:	74 3b                	je     c0020e82 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020e47:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020e4d:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020e53:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020e59:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020e5c:	50                   	push   eax
c0020e5d:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020e61:	83 c0 08             	add    eax,0x8
c0020e64:	c1 e0 04             	shl    eax,0x4
c0020e67:	50                   	push   eax
c0020e68:	6a 00                	push   0x0
c0020e6a:	56                   	push   esi
c0020e6b:	e8 24 f8 fd ff       	call   c0000694 <memset>
c0020e70:	83 c4 10             	add    esp,0x10
c0020e73:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020e7a:	74 33                	je     c0020eaf <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020e7c:	eb 18                	jmp    c0020e96 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020e7e:	3c 1c                	cmp    al,0x1c
c0020e80:	74 0c                	je     c0020e8e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020e82:	e4 60                	in     al,0x60
c0020e84:	3c 5a                	cmp    al,0x5a
c0020e86:	75 f6                	jne    c0020e7e <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020e88:	eb 04                	jmp    c0020e8e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020e8a:	3c 1c                	cmp    al,0x1c
c0020e8c:	75 b9                	jne    c0020e47 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020e8e:	e4 60                	in     al,0x60
c0020e90:	3c 5a                	cmp    al,0x5a
c0020e92:	74 fa                	je     c0020e8e <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020e94:	eb f4                	jmp    c0020e8a <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020e96:	83 ec 0c             	sub    esp,0xc
c0020e99:	68 51 78 02 c0       	push   0xc0027851
c0020e9e:	e8 9e 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020ea3:	83 c4 10             	add    esp,0x10
c0020ea6:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020ead:	74 48                	je     c0020ef7 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020eaf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020eb5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020ebb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020ebf:	c1 e0 09             	shl    eax,0x9
c0020ec2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ec6:	48                   	dec    eax
c0020ec7:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020ecc:	89 c2                	mov    edx,eax
c0020ece:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020ed4:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020ed9:	09 d0                	or     eax,edx
c0020edb:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020ee1:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020ee8:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020eef:	74 33                	je     c0020f24 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020ef1:	eb 18                	jmp    c0020f0b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020ef3:	3c 1c                	cmp    al,0x1c
c0020ef5:	74 0c                	je     c0020f03 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020ef7:	e4 60                	in     al,0x60
c0020ef9:	3c 5a                	cmp    al,0x5a
c0020efb:	75 f6                	jne    c0020ef3 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020efd:	eb 04                	jmp    c0020f03 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020eff:	3c 1c                	cmp    al,0x1c
c0020f01:	75 ac                	jne    c0020eaf <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020f03:	e4 60                	in     al,0x60
c0020f05:	3c 5a                	cmp    al,0x5a
c0020f07:	74 fa                	je     c0020f03 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f09:	eb f4                	jmp    c0020eff <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020f0b:	83 ec 0c             	sub    esp,0xc
c0020f0e:	68 60 78 02 c0       	push   0xc0027860
c0020f13:	e8 29 8f fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020f18:	83 c4 10             	add    esp,0x10
c0020f1b:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020f22:	74 63                	je     c0020f87 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020f24:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020f27:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020f2b:	66 25 00 7f          	and    ax,0x7f00
c0020f2f:	66 0d 27 80          	or     ax,0x8027
c0020f33:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020f38:	66 89 06             	mov    WORD PTR [esi],ax
c0020f3b:	19 c0                	sbb    eax,eax
c0020f3d:	83 e0 f0             	and    eax,0xfffffff0
c0020f40:	83 c0 35             	add    eax,0x35
c0020f43:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020f46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f4a:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020f4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f52:	c1 e8 10             	shr    eax,0x10
c0020f55:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020f58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f5c:	c1 e8 18             	shr    eax,0x18
c0020f5f:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020f66:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020f69:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020f6d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f74:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020f77:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020f7b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020f7f:	74 33                	je     c0020fb4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020f81:	eb 18                	jmp    c0020f9b <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020f83:	3c 1c                	cmp    al,0x1c
c0020f85:	74 0c                	je     c0020f93 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020f87:	e4 60                	in     al,0x60
c0020f89:	3c 5a                	cmp    al,0x5a
c0020f8b:	75 f6                	jne    c0020f83 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020f8d:	eb 04                	jmp    c0020f93 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020f8f:	3c 1c                	cmp    al,0x1c
c0020f91:	75 91                	jne    c0020f24 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020f93:	e4 60                	in     al,0x60
c0020f95:	3c 5a                	cmp    al,0x5a
c0020f97:	74 fa                	je     c0020f93 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020f99:	eb f4                	jmp    c0020f8f <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020f9b:	83 ec 0c             	sub    esp,0xc
c0020f9e:	68 6f 78 02 c0       	push   0xc002786f
c0020fa3:	e8 99 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0020fa8:	83 c4 10             	add    esp,0x10
c0020fab:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0020fb2:	74 11                	je     c0020fc5 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020fb4:	89 e8                	mov    eax,ebp
c0020fb6:	31 f6                	xor    esi,esi
c0020fb8:	c1 e0 07             	shl    eax,0x7
c0020fbb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020fbf:	eb 21                	jmp    c0020fe2 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020fc1:	3c 1c                	cmp    al,0x1c
c0020fc3:	74 0c                	je     c0020fd1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020fc5:	e4 60                	in     al,0x60
c0020fc7:	3c 5a                	cmp    al,0x5a
c0020fc9:	75 f6                	jne    c0020fc1 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020fcb:	eb 04                	jmp    c0020fd1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020fcd:	3c 1c                	cmp    al,0x1c
c0020fcf:	75 e3                	jne    c0020fb4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020fd1:	e4 60                	in     al,0x60
c0020fd3:	3c 5a                	cmp    al,0x5a
c0020fd5:	74 fa                	je     c0020fd1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020fd7:	eb f4                	jmp    c0020fcd <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020fd9:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020fdf:	74 0c                	je     c0020fed <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020fe1:	46                   	inc    esi
c0020fe2:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020fe8:	80 e2 88             	and    dl,0x88
c0020feb:	75 ec                	jne    c0020fd9 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020fed:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0020ff4:	74 3d                	je     c0021033 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020ff6:	83 ec 0c             	sub    esp,0xc
c0020ff9:	68 7e 78 02 c0       	push   0xc002787e
c0020ffe:	e8 3e 8e fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021003:	8b 15 e0 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028be0
c0021009:	83 c4 10             	add    esp,0x10
c002100c:	f6 c2 80             	test   dl,0x80
c002100f:	74 0e                	je     c002101f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0021011:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021017:	75 2f                	jne    c0021048 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0021019:	eb 20                	jmp    c002103b <SATA::access(unsigned long long, int, void*, bool)+0x439>
c002101b:	3c 1c                	cmp    al,0x1c
c002101d:	74 0c                	je     c002102b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002101f:	e4 60                	in     al,0x60
c0021021:	3c 5a                	cmp    al,0x5a
c0021023:	75 f6                	jne    c002101b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0021025:	eb 04                	jmp    c002102b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0021027:	3c 1c                	cmp    al,0x1c
c0021029:	75 e6                	jne    c0021011 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002102b:	e4 60                	in     al,0x60
c002102d:	3c 5a                	cmp    al,0x5a
c002102f:	74 fa                	je     c002102b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0021031:	eb f4                	jmp    c0021027 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0021033:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021039:	75 13                	jne    c002104e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002103b:	83 ec 0c             	sub    esp,0xc
c002103e:	68 8e 78 02 c0       	push   0xc002788e
c0021043:	e9 d2 00 00 00       	jmp    c002111a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0021048:	0f ba e2 0b          	bt     edx,0xb
c002104c:	72 25                	jb     c0021073 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c002104e:	be 01 00 00 00       	mov    esi,0x1
c0021053:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021057:	89 e8                	mov    eax,ebp
c0021059:	d3 e6                	shl    esi,cl
c002105b:	c1 e0 07             	shl    eax,0x7
c002105e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021062:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0021069:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c002106f:	74 4a                	je     c00210bb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0021071:	eb 2f                	jmp    c00210a2 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0021073:	83 ec 0c             	sub    esp,0xc
c0021076:	68 9c 78 02 c0       	push   0xc002789c
c002107b:	e8 c1 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021080:	83 c4 10             	add    esp,0x10
c0021083:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c002108a:	75 c2                	jne    c002104e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002108c:	e4 60                	in     al,0x60
c002108e:	3c 5a                	cmp    al,0x5a
c0021090:	74 04                	je     c0021096 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0021092:	3c 1c                	cmp    al,0x1c
c0021094:	75 f6                	jne    c002108c <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0021096:	e4 60                	in     al,0x60
c0021098:	3c 5a                	cmp    al,0x5a
c002109a:	74 fa                	je     c0021096 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002109c:	3c 1c                	cmp    al,0x1c
c002109e:	74 f6                	je     c0021096 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00210a0:	eb ac                	jmp    c002104e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00210a2:	83 ec 0c             	sub    esp,0xc
c00210a5:	68 ac 78 02 c0       	push   0xc00278ac
c00210aa:	e8 92 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00210af:	83 c4 10             	add    esp,0x10
c00210b2:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c00210b9:	74 0f                	je     c00210ca <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c00210bb:	89 e8                	mov    eax,ebp
c00210bd:	c1 e0 07             	shl    eax,0x7
c00210c0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00210c4:	eb 24                	jmp    c00210ea <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c00210c6:	3c 1c                	cmp    al,0x1c
c00210c8:	74 0c                	je     c00210d6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00210ca:	e4 60                	in     al,0x60
c00210cc:	3c 5a                	cmp    al,0x5a
c00210ce:	75 f6                	jne    c00210c6 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c00210d0:	eb 04                	jmp    c00210d6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00210d2:	3c 1c                	cmp    al,0x1c
c00210d4:	75 e5                	jne    c00210bb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00210d6:	e4 60                	in     al,0x60
c00210d8:	3c 5a                	cmp    al,0x5a
c00210da:	74 fa                	je     c00210d6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c00210dc:	eb f4                	jmp    c00210d2 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c00210de:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c00210e4:	0f ba e2 1e          	bt     edx,0x1e
c00210e8:	72 28                	jb     c0021112 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c00210ea:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c00210f0:	85 d6                	test   esi,edx
c00210f2:	75 ea                	jne    c00210de <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c00210f4:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00210fb:	75 2f                	jne    c002112c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c00210fd:	89 e8                	mov    eax,ebp
c00210ff:	c1 e0 07             	shl    eax,0x7
c0021102:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021106:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002110c:	0f ba e0 1e          	bt     eax,0x1e
c0021110:	73 49                	jae    c002115b <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0021112:	83 ec 0c             	sub    esp,0xc
c0021115:	68 bc 78 02 c0       	push   0xc00278bc
c002111a:	e8 a8 bf fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c002111f:	83 c4 10             	add    esp,0x10
c0021122:	b8 01 00 00 00       	mov    eax,0x1
c0021127:	e9 c5 00 00 00       	jmp    c00211f1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002112c:	83 ec 0c             	sub    esp,0xc
c002112f:	68 cd 78 02 c0       	push   0xc00278cd
c0021134:	e8 08 8d fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021139:	83 c4 10             	add    esp,0x10
c002113c:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021143:	75 b8                	jne    c00210fd <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0021145:	e4 60                	in     al,0x60
c0021147:	3c 5a                	cmp    al,0x5a
c0021149:	74 04                	je     c002114f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002114b:	3c 1c                	cmp    al,0x1c
c002114d:	75 f6                	jne    c0021145 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c002114f:	e4 60                	in     al,0x60
c0021151:	3c 5a                	cmp    al,0x5a
c0021153:	74 fa                	je     c002114f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0021155:	3c 1c                	cmp    al,0x1c
c0021157:	74 f6                	je     c002114f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0021159:	eb a2                	jmp    c00210fd <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c002115b:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0021162:	74 3a                	je     c002119e <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0021164:	83 ec 0c             	sub    esp,0xc
c0021167:	68 dd 78 02 c0       	push   0xc00278dd
c002116c:	e8 d0 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021171:	83 c4 10             	add    esp,0x10
c0021174:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c002117b:	74 0d                	je     c002118a <SATA::access(unsigned long long, int, void*, bool)+0x588>
c002117d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0021182:	75 31                	jne    c00211b5 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0021184:	eb 1f                	jmp    c00211a5 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0021186:	3c 1c                	cmp    al,0x1c
c0021188:	74 0c                	je     c0021196 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002118a:	e4 60                	in     al,0x60
c002118c:	3c 5a                	cmp    al,0x5a
c002118e:	75 f6                	jne    c0021186 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0021190:	eb 04                	jmp    c0021196 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0021192:	3c 1c                	cmp    al,0x1c
c0021194:	75 e7                	jne    c002117d <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0021196:	e4 60                	in     al,0x60
c0021198:	3c 5a                	cmp    al,0x5a
c002119a:	74 fa                	je     c0021196 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002119c:	eb f4                	jmp    c0021192 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c002119e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00211a3:	75 19                	jne    c00211be <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00211a5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00211ab:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00211af:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00211b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00211b5:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00211bc:	75 04                	jne    c00211c2 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c00211be:	31 c0                	xor    eax,eax
c00211c0:	eb 2f                	jmp    c00211f1 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00211c2:	83 ec 0c             	sub    esp,0xc
c00211c5:	68 ed 78 02 c0       	push   0xc00278ed
c00211ca:	e8 72 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00211cf:	83 c4 10             	add    esp,0x10
c00211d2:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c00211d9:	75 e3                	jne    c00211be <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00211db:	e4 60                	in     al,0x60
c00211dd:	3c 1c                	cmp    al,0x1c
c00211df:	74 04                	je     c00211e5 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00211e1:	3c 5a                	cmp    al,0x5a
c00211e3:	75 f6                	jne    c00211db <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c00211e5:	e4 60                	in     al,0x60
c00211e7:	3c 5a                	cmp    al,0x5a
c00211e9:	74 fa                	je     c00211e5 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00211eb:	3c 1c                	cmp    al,0x1c
c00211ed:	74 f6                	je     c00211e5 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c00211ef:	eb cd                	jmp    c00211be <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00211f1:	83 c4 2c             	add    esp,0x2c
c00211f4:	5b                   	pop    ebx
c00211f5:	5e                   	pop    esi
c00211f6:	5f                   	pop    edi
c00211f7:	5d                   	pop    ebp
c00211f8:	c3                   	ret    
c00211f9:	90                   	nop

c00211fa <SATA::read(unsigned long long, int, void*)>:
c00211fa:	55                   	push   ebp
c00211fb:	57                   	push   edi
c00211fc:	56                   	push   esi
c00211fd:	53                   	push   ebx
c00211fe:	83 ec 0c             	sub    esp,0xc
c0021201:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021205:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021209:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002120d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021211:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0021218:	74 2d                	je     c0021247 <SATA::read(unsigned long long, int, void*)+0x4d>
c002121a:	83 ec 0c             	sub    esp,0xc
c002121d:	68 fd 78 02 c0       	push   0xc00278fd
c0021222:	e8 1a 8c fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021227:	83 c4 10             	add    esp,0x10
c002122a:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021231:	75 14                	jne    c0021247 <SATA::read(unsigned long long, int, void*)+0x4d>
c0021233:	e4 60                	in     al,0x60
c0021235:	3c 1c                	cmp    al,0x1c
c0021237:	74 04                	je     c002123d <SATA::read(unsigned long long, int, void*)+0x43>
c0021239:	3c 5a                	cmp    al,0x5a
c002123b:	75 f6                	jne    c0021233 <SATA::read(unsigned long long, int, void*)+0x39>
c002123d:	e4 60                	in     al,0x60
c002123f:	3c 5a                	cmp    al,0x5a
c0021241:	74 fa                	je     c002123d <SATA::read(unsigned long long, int, void*)+0x43>
c0021243:	3c 1c                	cmp    al,0x1c
c0021245:	74 f6                	je     c002123d <SATA::read(unsigned long long, int, void*)+0x43>
c0021247:	8d 53 ff             	lea    edx,[ebx-0x1]
c002124a:	b8 04 00 00 00       	mov    eax,0x4
c002124f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021255:	0f 87 96 00 00 00    	ja     c00212f1 <SATA::read(unsigned long long, int, void*)+0xf7>
c002125b:	b8 06 00 00 00       	mov    eax,0x6
c0021260:	85 ed                	test   ebp,ebp
c0021262:	0f 84 89 00 00 00    	je     c00212f1 <SATA::read(unsigned long long, int, void*)+0xf7>
c0021268:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c002126f:	74 2d                	je     c002129e <SATA::read(unsigned long long, int, void*)+0xa4>
c0021271:	83 ec 0c             	sub    esp,0xc
c0021274:	68 0a 79 02 c0       	push   0xc002790a
c0021279:	e8 c3 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002127e:	83 c4 10             	add    esp,0x10
c0021281:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021288:	75 14                	jne    c002129e <SATA::read(unsigned long long, int, void*)+0xa4>
c002128a:	e4 60                	in     al,0x60
c002128c:	3c 5a                	cmp    al,0x5a
c002128e:	74 04                	je     c0021294 <SATA::read(unsigned long long, int, void*)+0x9a>
c0021290:	3c 1c                	cmp    al,0x1c
c0021292:	75 f6                	jne    c002128a <SATA::read(unsigned long long, int, void*)+0x90>
c0021294:	e4 60                	in     al,0x60
c0021296:	3c 5a                	cmp    al,0x5a
c0021298:	74 fa                	je     c0021294 <SATA::read(unsigned long long, int, void*)+0x9a>
c002129a:	3c 1c                	cmp    al,0x1c
c002129c:	74 f6                	je     c0021294 <SATA::read(unsigned long long, int, void*)+0x9a>
c002129e:	50                   	push   eax
c002129f:	50                   	push   eax
c00212a0:	6a 00                	push   0x0
c00212a2:	55                   	push   ebp
c00212a3:	53                   	push   ebx
c00212a4:	57                   	push   edi
c00212a5:	56                   	push   esi
c00212a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00212aa:	e8 53 f9 ff ff       	call   c0020c02 <SATA::access(unsigned long long, int, void*, bool)>
c00212af:	83 c4 20             	add    esp,0x20
c00212b2:	89 c3                	mov    ebx,eax
c00212b4:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00212bb:	74 2d                	je     c00212ea <SATA::read(unsigned long long, int, void*)+0xf0>
c00212bd:	83 ec 0c             	sub    esp,0xc
c00212c0:	68 17 79 02 c0       	push   0xc0027917
c00212c5:	e8 77 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00212ca:	83 c4 10             	add    esp,0x10
c00212cd:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c00212d4:	75 14                	jne    c00212ea <SATA::read(unsigned long long, int, void*)+0xf0>
c00212d6:	e4 60                	in     al,0x60
c00212d8:	3c 5a                	cmp    al,0x5a
c00212da:	74 04                	je     c00212e0 <SATA::read(unsigned long long, int, void*)+0xe6>
c00212dc:	3c 1c                	cmp    al,0x1c
c00212de:	75 f6                	jne    c00212d6 <SATA::read(unsigned long long, int, void*)+0xdc>
c00212e0:	e4 60                	in     al,0x60
c00212e2:	3c 5a                	cmp    al,0x5a
c00212e4:	74 fa                	je     c00212e0 <SATA::read(unsigned long long, int, void*)+0xe6>
c00212e6:	3c 1c                	cmp    al,0x1c
c00212e8:	74 f6                	je     c00212e0 <SATA::read(unsigned long long, int, void*)+0xe6>
c00212ea:	31 c0                	xor    eax,eax
c00212ec:	85 db                	test   ebx,ebx
c00212ee:	0f 95 c0             	setne  al
c00212f1:	83 c4 0c             	add    esp,0xc
c00212f4:	5b                   	pop    ebx
c00212f5:	5e                   	pop    esi
c00212f6:	5f                   	pop    edi
c00212f7:	5d                   	pop    ebp
c00212f8:	c3                   	ret    
c00212f9:	90                   	nop

c00212fa <SATA::write(unsigned long long, int, void*)>:
c00212fa:	55                   	push   ebp
c00212fb:	57                   	push   edi
c00212fc:	56                   	push   esi
c00212fd:	53                   	push   ebx
c00212fe:	83 ec 1c             	sub    esp,0x1c
c0021301:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021305:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021309:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002130d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021311:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c0021318:	74 2d                	je     c0021347 <SATA::write(unsigned long long, int, void*)+0x4d>
c002131a:	83 ec 0c             	sub    esp,0xc
c002131d:	68 24 79 02 c0       	push   0xc0027924
c0021322:	e8 1a 8b fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c0021327:	83 c4 10             	add    esp,0x10
c002132a:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021331:	75 14                	jne    c0021347 <SATA::write(unsigned long long, int, void*)+0x4d>
c0021333:	e4 60                	in     al,0x60
c0021335:	3c 1c                	cmp    al,0x1c
c0021337:	74 04                	je     c002133d <SATA::write(unsigned long long, int, void*)+0x43>
c0021339:	3c 5a                	cmp    al,0x5a
c002133b:	75 f6                	jne    c0021333 <SATA::write(unsigned long long, int, void*)+0x39>
c002133d:	e4 60                	in     al,0x60
c002133f:	3c 5a                	cmp    al,0x5a
c0021341:	74 fa                	je     c002133d <SATA::write(unsigned long long, int, void*)+0x43>
c0021343:	3c 1c                	cmp    al,0x1c
c0021345:	74 f6                	je     c002133d <SATA::write(unsigned long long, int, void*)+0x43>
c0021347:	8d 55 ff             	lea    edx,[ebp-0x1]
c002134a:	b8 04 00 00 00       	mov    eax,0x4
c002134f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021355:	0f 87 bd 00 00 00    	ja     c0021418 <SATA::write(unsigned long long, int, void*)+0x11e>
c002135b:	b8 06 00 00 00       	mov    eax,0x6
c0021360:	85 db                	test   ebx,ebx
c0021362:	0f 84 b0 00 00 00    	je     c0021418 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021368:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c002136f:	74 2d                	je     c002139e <SATA::write(unsigned long long, int, void*)+0xa4>
c0021371:	83 ec 0c             	sub    esp,0xc
c0021374:	68 32 79 02 c0       	push   0xc0027932
c0021379:	e8 c3 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c002137e:	83 c4 10             	add    esp,0x10
c0021381:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021388:	75 14                	jne    c002139e <SATA::write(unsigned long long, int, void*)+0xa4>
c002138a:	e4 60                	in     al,0x60
c002138c:	3c 1c                	cmp    al,0x1c
c002138e:	74 04                	je     c0021394 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021390:	3c 5a                	cmp    al,0x5a
c0021392:	75 f6                	jne    c002138a <SATA::write(unsigned long long, int, void*)+0x90>
c0021394:	e4 60                	in     al,0x60
c0021396:	3c 5a                	cmp    al,0x5a
c0021398:	74 fa                	je     c0021394 <SATA::write(unsigned long long, int, void*)+0x9a>
c002139a:	3c 1c                	cmp    al,0x1c
c002139c:	74 f6                	je     c0021394 <SATA::write(unsigned long long, int, void*)+0x9a>
c002139e:	c1 e5 09             	shl    ebp,0x9
c00213a1:	01 dd                	add    ebp,ebx
c00213a3:	89 f0                	mov    eax,esi
c00213a5:	89 fa                	mov    edx,edi
c00213a7:	83 c0 01             	add    eax,0x1
c00213aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213ae:	83 d2 00             	adc    edx,0x0
c00213b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213b5:	50                   	push   eax
c00213b6:	50                   	push   eax
c00213b7:	6a 01                	push   0x1
c00213b9:	53                   	push   ebx
c00213ba:	81 c3 00 02 00 00    	add    ebx,0x200
c00213c0:	6a 01                	push   0x1
c00213c2:	57                   	push   edi
c00213c3:	56                   	push   esi
c00213c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00213c8:	e8 35 f8 ff ff       	call   c0020c02 <SATA::access(unsigned long long, int, void*, bool)>
c00213cd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00213d1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00213d5:	83 c4 20             	add    esp,0x20
c00213d8:	39 dd                	cmp    ebp,ebx
c00213da:	75 c7                	jne    c00213a3 <SATA::write(unsigned long long, int, void*)+0xa9>
c00213dc:	f6 05 e1 8b 02 c0 08 	test   BYTE PTR ds:0xc0028be1,0x8
c00213e3:	75 04                	jne    c00213e9 <SATA::write(unsigned long long, int, void*)+0xef>
c00213e5:	31 c0                	xor    eax,eax
c00213e7:	eb 2f                	jmp    c0021418 <SATA::write(unsigned long long, int, void*)+0x11e>
c00213e9:	83 ec 0c             	sub    esp,0xc
c00213ec:	68 40 79 02 c0       	push   0xc0027940
c00213f1:	e8 4b 8a fe ff       	call   c0009e41 <Krnl::setBootMessage(char const*)>
c00213f6:	83 c4 10             	add    esp,0x10
c00213f9:	f6 05 e0 8b 02 c0 80 	test   BYTE PTR ds:0xc0028be0,0x80
c0021400:	75 e3                	jne    c00213e5 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021402:	e4 60                	in     al,0x60
c0021404:	3c 5a                	cmp    al,0x5a
c0021406:	74 04                	je     c002140c <SATA::write(unsigned long long, int, void*)+0x112>
c0021408:	3c 1c                	cmp    al,0x1c
c002140a:	75 f6                	jne    c0021402 <SATA::write(unsigned long long, int, void*)+0x108>
c002140c:	e4 60                	in     al,0x60
c002140e:	3c 5a                	cmp    al,0x5a
c0021410:	74 fa                	je     c002140c <SATA::write(unsigned long long, int, void*)+0x112>
c0021412:	3c 1c                	cmp    al,0x1c
c0021414:	74 f6                	je     c002140c <SATA::write(unsigned long long, int, void*)+0x112>
c0021416:	eb cd                	jmp    c00213e5 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021418:	83 c4 1c             	add    esp,0x1c
c002141b:	5b                   	pop    ebx
c002141c:	5e                   	pop    esi
c002141d:	5f                   	pop    edi
c002141e:	5d                   	pop    ebp
c002141f:	c3                   	ret    

c0021420 <SATAPI::write(unsigned long long, int, void*)>:
c0021420:	b8 03 00 00 00       	mov    eax,0x3
c0021425:	c3                   	ret    

c0021426 <SATAPI::close(int, int, void*)>:
c0021426:	83 ec 0c             	sub    esp,0xc
c0021429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021433:	85 c0                	test   eax,eax
c0021435:	74 0c                	je     c0021443 <SATAPI::close(int, int, void*)+0x1d>
c0021437:	83 ec 0c             	sub    esp,0xc
c002143a:	8b 10                	mov    edx,DWORD PTR [eax]
c002143c:	50                   	push   eax
c002143d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021440:	83 c4 10             	add    esp,0x10
c0021443:	31 c0                	xor    eax,eax
c0021445:	83 c4 0c             	add    esp,0xc
c0021448:	c3                   	ret    
c0021449:	90                   	nop

c002144a <SATAPI::SATAPI()>:
c002144a:	83 ec 0c             	sub    esp,0xc
c002144d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021451:	83 ec 04             	sub    esp,0x4
c0021454:	68 00 08 00 00       	push   0x800
c0021459:	68 88 79 02 c0       	push   0xc0027988
c002145e:	50                   	push   eax
c002145f:	e8 0e d6 fe ff       	call   c000ea72 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021464:	83 c4 10             	add    esp,0x10
c0021467:	ba c4 7a 02 c0       	mov    edx,0xc0027ac4
c002146c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021470:	89 10                	mov    DWORD PTR [eax],edx
c0021472:	90                   	nop
c0021473:	83 c4 0c             	add    esp,0xc
c0021476:	c3                   	ret    
c0021477:	90                   	nop

c0021478 <SATAPI::diskRemoved()>:
c0021478:	c3                   	ret    
c0021479:	90                   	nop

c002147a <SATAPI::diskInserted()>:
c002147a:	83 ec 18             	sub    esp,0x18
c002147d:	68 94 79 02 c0       	push   0xc0027994
c0021482:	e8 40 bc fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0021487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002148b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0021492:	83 c4 1c             	add    esp,0x1c
c0021495:	c3                   	ret    

c0021496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021496:	55                   	push   ebp
c0021497:	57                   	push   edi
c0021498:	56                   	push   esi
c0021499:	53                   	push   ebx
c002149a:	83 ec 38             	sub    esp,0x38
c002149d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00214a1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00214a5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00214a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00214ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00214b1:	68 ac 79 02 c0       	push   0xc00279ac
c00214b6:	e8 0c bc fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00214bb:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00214c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00214c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214cb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00214d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00214d5:	c1 e0 07             	shl    eax,0x7
c00214d8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00214dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00214e0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00214ea:	5a                   	pop    edx
c00214eb:	59                   	pop    ecx
c00214ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214f0:	8d 58 02             	lea    ebx,[eax+0x2]
c00214f3:	c1 e3 07             	shl    ebx,0x7
c00214f6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00214fa:	53                   	push   ebx
c00214fb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021501:	e8 08 e4 ff ff       	call   c001f90e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021506:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002150a:	83 c4 10             	add    esp,0x10
c002150d:	b8 01 00 00 00       	mov    eax,0x1
c0021512:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021517:	0f 84 ff 01 00 00    	je     c002171c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c002151d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021523:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021525:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002152b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0021531:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021535:	c1 e1 05             	shl    ecx,0x5
c0021538:	01 c8                	add    eax,ecx
c002153a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002153c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0021542:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021548:	89 08                	mov    DWORD PTR [eax],ecx
c002154a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021550:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021556:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002155c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002155f:	8d 7b 40             	lea    edi,[ebx+0x40]
c0021562:	50                   	push   eax
c0021563:	68 90 00 00 00       	push   0x90
c0021568:	6a 00                	push   0x0
c002156a:	53                   	push   ebx
c002156b:	e8 24 f1 fd ff       	call   c0000694 <memset>
c0021570:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0021574:	b9 0c 00 00 00       	mov    ecx,0xc
c0021579:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002157b:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0021581:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0021585:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002158b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002158f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021593:	48                   	dec    eax
c0021594:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021599:	89 c1                	mov    ecx,eax
c002159b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00215a1:	25 00 00 c0 ff       	and    eax,0xffc00000
c00215a6:	09 c8                	or     eax,ecx
c00215a8:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00215ae:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00215b1:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00215b8:	66 25 00 7f          	and    ax,0x7f00
c00215bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00215c0:	66 0d 27 80          	or     ax,0x8027
c00215c4:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00215c8:	66 89 03             	mov    WORD PTR [ebx],ax
c00215cb:	89 d0                	mov    eax,edx
c00215cd:	c1 ea 18             	shr    edx,0x18
c00215d0:	c1 e8 10             	shr    eax,0x10
c00215d3:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00215d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00215d9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00215dd:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00215e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00215e4:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00215e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00215eb:	83 c4 10             	add    esp,0x10
c00215ee:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00215f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215f6:	31 c0                	xor    eax,eax
c00215f8:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00215fe:	80 e1 88             	and    cl,0x88
c0021601:	74 0a                	je     c002160d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0021603:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021608:	74 0a                	je     c0021614 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c002160a:	40                   	inc    eax
c002160b:	eb eb                	jmp    c00215f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c002160d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021612:	75 0a                	jne    c002161e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0021614:	83 ec 0c             	sub    esp,0xc
c0021617:	68 c6 79 02 c0       	push   0xc00279c6
c002161c:	eb 43                	jmp    c0021661 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c002161e:	be 01 00 00 00       	mov    esi,0x1
c0021623:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0021627:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002162b:	d3 e6                	shl    esi,cl
c002162d:	c1 e7 07             	shl    edi,0x7
c0021630:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021636:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c002163b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002163f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021645:	85 c6                	test   esi,eax
c0021647:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002164d:	0f 84 96 00 00 00    	je     c00216e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0021653:	0f ba e0 1e          	bt     eax,0x1e
c0021657:	73 1a                	jae    c0021673 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0021659:	83 ec 0c             	sub    esp,0xc
c002165c:	68 db 79 02 c0       	push   0xc00279db
c0021661:	e8 61 ba fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0021666:	83 c4 10             	add    esp,0x10
c0021669:	b8 01 00 00 00       	mov    eax,0x1
c002166e:	e9 a9 00 00 00       	jmp    c002171c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0021673:	83 fb 0d             	cmp    ebx,0xd
c0021676:	77 12                	ja     c002168a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0021678:	83 ec 0c             	sub    esp,0xc
c002167b:	68 c8 00 00 00       	push   0xc8
c0021680:	e8 83 7b ff ff       	call   c0019208 <milliTenthSleep(unsigned int)>
c0021685:	83 c4 10             	add    esp,0x10
c0021688:	eb 2a                	jmp    c00216b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c002168a:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0021690:	83 f8 0d             	cmp    eax,0xd
c0021693:	77 0a                	ja     c002169f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0021695:	83 ec 0c             	sub    esp,0xc
c0021698:	68 58 02 00 00       	push   0x258
c002169d:	eb 28                	jmp    c00216c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c002169f:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c00216a5:	83 f8 0d             	cmp    eax,0xd
c00216a8:	77 0a                	ja     c00216b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c00216aa:	83 ec 0c             	sub    esp,0xc
c00216ad:	68 dc 05 00 00       	push   0x5dc
c00216b2:	eb 13                	jmp    c00216c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c00216b4:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c00216ba:	83 f8 0d             	cmp    eax,0xd
c00216bd:	77 10                	ja     c00216cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c00216bf:	83 ec 0c             	sub    esp,0xc
c00216c2:	68 c4 09 00 00       	push   0x9c4
c00216c7:	e8 3c 7b ff ff       	call   c0019208 <milliTenthSleep(unsigned int)>
c00216cc:	83 c4 10             	add    esp,0x10
c00216cf:	43                   	inc    ebx
c00216d0:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c00216d6:	0f 85 63 ff ff ff    	jne    c002163f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c00216dc:	83 ec 0c             	sub    esp,0xc
c00216df:	68 ee 79 02 c0       	push   0xc00279ee
c00216e4:	e9 78 ff ff ff       	jmp    c0021661 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00216e9:	0f ba e0 1e          	bt     eax,0x1e
c00216ed:	73 0d                	jae    c00216fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c00216ef:	83 ec 0c             	sub    esp,0xc
c00216f2:	68 02 7a 02 c0       	push   0xc0027a02
c00216f7:	e9 65 ff ff ff       	jmp    c0021661 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00216fc:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021701:	74 17                	je     c002171a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0021703:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021708:	74 10                	je     c002171a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c002170a:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021710:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021714:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021718:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002171a:	31 c0                	xor    eax,eax
c002171c:	83 c4 2c             	add    esp,0x2c
c002171f:	5b                   	pop    ebx
c0021720:	5e                   	pop    esi
c0021721:	5f                   	pop    edi
c0021722:	5d                   	pop    ebp
c0021723:	c3                   	ret    

c0021724 <SATAPI::eject()>:
c0021724:	57                   	push   edi
c0021725:	b9 03 00 00 00       	mov    ecx,0x3
c002172a:	83 ec 18             	sub    esp,0x18
c002172d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021731:	fc                   	cld    
c0021732:	31 c0                	xor    eax,eax
c0021734:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021736:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002173b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021740:	50                   	push   eax
c0021741:	6a 00                	push   0x0
c0021743:	6a 00                	push   0x0
c0021745:	6a 00                	push   0x0
c0021747:	6a 00                	push   0x0
c0021749:	6a 02                	push   0x2
c002174b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002174f:	50                   	push   eax
c0021750:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021754:	e8 3d fd ff ff       	call   c0021496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021759:	31 c0                	xor    eax,eax
c002175b:	83 c4 38             	add    esp,0x38
c002175e:	5f                   	pop    edi
c002175f:	c3                   	ret    

c0021760 <SATAPI::detectMedia()>:
c0021760:	56                   	push   esi
c0021761:	53                   	push   ebx
c0021762:	83 ec 30             	sub    esp,0x30
c0021765:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021769:	68 17 7a 02 c0       	push   0xc0027a17
c002176e:	e8 54 b9 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0021773:	83 c4 0c             	add    esp,0xc
c0021776:	6a 0c                	push   0xc
c0021778:	6a 00                	push   0x0
c002177a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002177e:	56                   	push   esi
c002177f:	e8 10 ef fd ff       	call   c0000694 <memset>
c0021784:	83 c4 0c             	add    esp,0xc
c0021787:	6a 00                	push   0x0
c0021789:	6a 00                	push   0x0
c002178b:	6a 00                	push   0x0
c002178d:	6a 00                	push   0x0
c002178f:	6a 00                	push   0x0
c0021791:	56                   	push   esi
c0021792:	53                   	push   ebx
c0021793:	e8 fe fc ff ff       	call   c0021496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021798:	83 c4 20             	add    esp,0x20
c002179b:	48                   	dec    eax
c002179c:	74 34                	je     c00217d2 <SATAPI::detectMedia()+0x72>
c002179e:	50                   	push   eax
c002179f:	6a 0c                	push   0xc
c00217a1:	6a 00                	push   0x0
c00217a3:	56                   	push   esi
c00217a4:	e8 eb ee fd ff       	call   c0000694 <memset>
c00217a9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00217ae:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00217b3:	83 c4 0c             	add    esp,0xc
c00217b6:	6a 01                	push   0x1
c00217b8:	8d 44 24 16          	lea    eax,[esp+0x16]
c00217bc:	50                   	push   eax
c00217bd:	6a 00                	push   0x0
c00217bf:	6a 00                	push   0x0
c00217c1:	6a 12                	push   0x12
c00217c3:	56                   	push   esi
c00217c4:	53                   	push   ebx
c00217c5:	e8 cc fc ff ff       	call   c0021496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00217ca:	83 c4 20             	add    esp,0x20
c00217cd:	48                   	dec    eax
c00217ce:	75 39                	jne    c0021809 <SATAPI::detectMedia()+0xa9>
c00217d0:	eb 1e                	jmp    c00217f0 <SATAPI::detectMedia()+0x90>
c00217d2:	83 ec 0c             	sub    esp,0xc
c00217d5:	68 2b 7a 02 c0       	push   0xc0027a2b
c00217da:	e8 e8 b8 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00217df:	83 c4 10             	add    esp,0x10
c00217e2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00217e9:	74 b3                	je     c002179e <SATAPI::detectMedia()+0x3e>
c00217eb:	e9 93 00 00 00       	jmp    c0021883 <SATAPI::detectMedia()+0x123>
c00217f0:	83 ec 0c             	sub    esp,0xc
c00217f3:	68 35 7a 02 c0       	push   0xc0027a35
c00217f8:	e8 ca b8 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00217fd:	83 c4 10             	add    esp,0x10
c0021800:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021807:	75 7a                	jne    c0021883 <SATAPI::detectMedia()+0x123>
c0021809:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c002180d:	83 e0 7f             	and    eax,0x7f
c0021810:	3c 70                	cmp    al,0x70
c0021812:	74 25                	je     c0021839 <SATAPI::detectMedia()+0xd9>
c0021814:	83 ec 0c             	sub    esp,0xc
c0021817:	68 3f 7a 02 c0       	push   0xc0027a3f
c002181c:	e8 a6 b8 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0021821:	83 c4 10             	add    esp,0x10
c0021824:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002182b:	75 0c                	jne    c0021839 <SATAPI::detectMedia()+0xd9>
c002182d:	83 ec 0c             	sub    esp,0xc
c0021830:	53                   	push   ebx
c0021831:	e8 44 fc ff ff       	call   c002147a <SATAPI::diskInserted()>
c0021836:	83 c4 10             	add    esp,0x10
c0021839:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002183d:	83 e0 0f             	and    eax,0xf
c0021840:	3c 02                	cmp    al,0x2
c0021842:	75 16                	jne    c002185a <SATAPI::detectMedia()+0xfa>
c0021844:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021849:	75 38                	jne    c0021883 <SATAPI::detectMedia()+0x123>
c002184b:	83 ec 0c             	sub    esp,0xc
c002184e:	68 48 7a 02 c0       	push   0xc0027a48
c0021853:	e8 6f b8 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0021858:	eb 26                	jmp    c0021880 <SATAPI::detectMedia()+0x120>
c002185a:	84 c0                	test   al,al
c002185c:	75 25                	jne    c0021883 <SATAPI::detectMedia()+0x123>
c002185e:	83 ec 0c             	sub    esp,0xc
c0021861:	68 51 7a 02 c0       	push   0xc0027a51
c0021866:	e8 5c b8 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c002186b:	83 c4 10             	add    esp,0x10
c002186e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021875:	75 0c                	jne    c0021883 <SATAPI::detectMedia()+0x123>
c0021877:	83 ec 0c             	sub    esp,0xc
c002187a:	53                   	push   ebx
c002187b:	e8 fa fb ff ff       	call   c002147a <SATAPI::diskInserted()>
c0021880:	83 c4 10             	add    esp,0x10
c0021883:	83 c4 24             	add    esp,0x24
c0021886:	5b                   	pop    ebx
c0021887:	5e                   	pop    esi
c0021888:	c3                   	ret    
c0021889:	90                   	nop

c002188a <SATAPI::open(int, int, void*)>:
c002188a:	56                   	push   esi
c002188b:	53                   	push   ebx
c002188c:	51                   	push   ecx
c002188d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021891:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021895:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002189f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00218a5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00218af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00218b3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00218bd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00218c3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00218ca:	e8 cf 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c00218cf:	89 c6                	mov    esi,eax
c00218d1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00218d7:	81 c6 00 10 00 00    	add    esi,0x1000
c00218dd:	e8 bc 8b fe ff       	call   c000a49e <Phys::allocatePage()>
c00218e2:	39 c6                	cmp    esi,eax
c00218e4:	74 10                	je     c00218f6 <SATAPI::open(int, int, void*)+0x6c>
c00218e6:	83 ec 0c             	sub    esp,0xc
c00218e9:	68 5b 7a 02 c0       	push   0xc0027a5b
c00218ee:	e8 b6 38 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00218f3:	83 c4 10             	add    esp,0x10
c00218f6:	83 ec 0c             	sub    esp,0xc
c00218f9:	6a 02                	push   0x2
c00218fb:	e8 a1 a4 fe ff       	call   c000bda1 <Virt::allocateKernelVirtualPages(int)>
c0021900:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021906:	6a 03                	push   0x3
c0021908:	50                   	push   eax
c0021909:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002190f:	ff 35 f0 8c 02 c0    	push   DWORD PTR ds:0xc0028cf0
c0021915:	e8 2e ab fe ff       	call   c000c448 <VAS::mapPage(unsigned long, unsigned long, int)>
c002191a:	83 c4 14             	add    esp,0x14
c002191d:	68 74 01 00 00       	push   0x174
c0021922:	e8 c0 84 fe ff       	call   c0009de7 <malloc>
c0021927:	83 c4 0c             	add    esp,0xc
c002192a:	89 c6                	mov    esi,eax
c002192c:	6a 00                	push   0x0
c002192e:	68 ff ff ff 7f       	push   0x7fffffff
c0021933:	6a 00                	push   0x0
c0021935:	6a 00                	push   0x0
c0021937:	53                   	push   ebx
c0021938:	68 71 7a 02 c0       	push   0xc0027a71
c002193d:	50                   	push   eax
c002193e:	e8 99 ee fe ff       	call   c00107dc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021943:	83 c4 14             	add    esp,0x14
c0021946:	56                   	push   esi
c0021947:	e8 46 ef fe ff       	call   c0010892 <LogicalDisk::assignDriveLetter()>
c002194c:	5a                   	pop    edx
c002194d:	0f be c0             	movsx  eax,al
c0021950:	59                   	pop    ecx
c0021951:	50                   	push   eax
c0021952:	68 07 77 02 c0       	push   0xc0027707
c0021957:	e8 6b b7 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c002195c:	58                   	pop    eax
c002195d:	5a                   	pop    edx
c002195e:	56                   	push   esi
c002195f:	53                   	push   ebx
c0021960:	e8 d5 cc fe ff       	call   c000e63a <Device::addChild(Device*)>
c0021965:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002196b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002196e:	e8 67 d1 fe ff       	call   c000eada <PhysicalDisk::startCache()>
c0021973:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002197a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002197d:	e8 de fd ff ff       	call   c0021760 <SATAPI::detectMedia()>
c0021982:	83 c4 14             	add    esp,0x14
c0021985:	31 c0                	xor    eax,eax
c0021987:	5b                   	pop    ebx
c0021988:	5e                   	pop    esi
c0021989:	c3                   	ret    

c002198a <SATAPI::read(unsigned long long, int, void*)>:
c002198a:	55                   	push   ebp
c002198b:	57                   	push   edi
c002198c:	56                   	push   esi
c002198d:	53                   	push   ebx
c002198e:	83 ec 48             	sub    esp,0x48
c0021991:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0021995:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0021999:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c002199d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00219a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00219a5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00219a9:	68 7f 7a 02 c0       	push   0xc0027a7f
c00219ae:	e8 14 b7 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00219b3:	83 c4 10             	add    esp,0x10
c00219b6:	83 fb 04             	cmp    ebx,0x4
c00219b9:	7e 10                	jle    c00219cb <SATAPI::read(unsigned long long, int, void*)+0x41>
c00219bb:	83 ec 0c             	sub    esp,0xc
c00219be:	68 90 7a 02 c0       	push   0xc0027a90
c00219c3:	e8 e1 37 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00219c8:	83 c4 10             	add    esp,0x10
c00219cb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00219cf:	31 ed                	xor    ebp,ebp
c00219d1:	b9 03 00 00 00       	mov    ecx,0x3
c00219d6:	fc                   	cld    
c00219d7:	89 e8                	mov    eax,ebp
c00219d9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00219db:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c00219e0:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00219e5:	50                   	push   eax
c00219e6:	6a 00                	push   0x0
c00219e8:	6a 00                	push   0x0
c00219ea:	6a 00                	push   0x0
c00219ec:	6a 00                	push   0x0
c00219ee:	6a 02                	push   0x2
c00219f0:	8d 44 24 30          	lea    eax,[esp+0x30]
c00219f4:	50                   	push   eax
c00219f5:	56                   	push   esi
c00219f6:	e8 9b fa ff ff       	call   c0021496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00219fb:	8d 7c 24 44          	lea    edi,[esp+0x44]
c00219ff:	89 e8                	mov    eax,ebp
c0021a01:	b9 03 00 00 00       	mov    ecx,0x3
c0021a06:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021a08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021a0c:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021a10:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021a15:	86 e0                	xchg   al,ah
c0021a17:	c1 c0 10             	rol    eax,0x10
c0021a1a:	86 e0                	xchg   al,ah
c0021a1c:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021a20:	83 c4 1c             	add    esp,0x1c
c0021a23:	53                   	push   ebx
c0021a24:	c1 e3 0b             	shl    ebx,0xb
c0021a27:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021a2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a33:	53                   	push   ebx
c0021a34:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021a38:	50                   	push   eax
c0021a39:	56                   	push   esi
c0021a3a:	e8 57 fa ff ff       	call   c0021496 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021a3f:	83 c4 20             	add    esp,0x20
c0021a42:	85 c0                	test   eax,eax
c0021a44:	74 14                	je     c0021a5a <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021a46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a4a:	83 ec 0c             	sub    esp,0xc
c0021a4d:	56                   	push   esi
c0021a4e:	e8 0d fd ff ff       	call   c0021760 <SATAPI::detectMedia()>
c0021a53:	83 c4 10             	add    esp,0x10
c0021a56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a5a:	83 c4 3c             	add    esp,0x3c
c0021a5d:	5b                   	pop    ebx
c0021a5e:	5e                   	pop    esi
c0021a5f:	5f                   	pop    edi
c0021a60:	5d                   	pop    ebp
c0021a61:	c3                   	ret    
c0021a62:	66 90                	xchg   ax,ax

c0021a64 <AVX::open(int, int, void*)>:
c0021a64:	83 ec 0c             	sub    esp,0xc
c0021a67:	e8 70 11 00 00       	call   c0022bdc <avxInit>
c0021a6c:	b8 00 00 00 00       	mov    eax,0x0
c0021a71:	83 c4 0c             	add    esp,0xc
c0021a74:	c3                   	ret    
c0021a75:	90                   	nop
c0021a76:	66 90                	xchg   ax,ax

c0021a78 <AVX::close(int, int, void*)>:
c0021a78:	83 ec 0c             	sub    esp,0xc
c0021a7b:	e8 7e 11 00 00       	call   c0022bfe <avxClose>
c0021a80:	b8 00 00 00 00       	mov    eax,0x0
c0021a85:	83 c4 0c             	add    esp,0xc
c0021a88:	c3                   	ret    
c0021a89:	90                   	nop
c0021a8a:	66 90                	xchg   ax,ax

c0021a8c <AVX::available()>:
c0021a8c:	83 ec 0c             	sub    esp,0xc
c0021a8f:	e8 fc 10 00 00       	call   c0022b90 <avxDetect>
c0021a94:	85 c0                	test   eax,eax
c0021a96:	0f 95 c0             	setne  al
c0021a99:	83 c4 0c             	add    esp,0xc
c0021a9c:	c3                   	ret    
c0021a9d:	90                   	nop
c0021a9e:	66 90                	xchg   ax,ax

c0021aa0 <AVX::save(void*)>:
c0021aa0:	83 ec 0c             	sub    esp,0xc
c0021aa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021aa7:	83 ec 0c             	sub    esp,0xc
c0021aaa:	50                   	push   eax
c0021aab:	e8 0a 11 00 00       	call   c0022bba <avxSave>
c0021ab0:	83 c4 10             	add    esp,0x10
c0021ab3:	90                   	nop
c0021ab4:	83 c4 0c             	add    esp,0xc
c0021ab7:	c3                   	ret    

c0021ab8 <AVX::load(void*)>:
c0021ab8:	83 ec 0c             	sub    esp,0xc
c0021abb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021abf:	83 ec 0c             	sub    esp,0xc
c0021ac2:	50                   	push   eax
c0021ac3:	e8 03 11 00 00       	call   c0022bcb <avxLoad>
c0021ac8:	83 c4 10             	add    esp,0x10
c0021acb:	90                   	nop
c0021acc:	83 c4 0c             	add    esp,0xc
c0021acf:	c3                   	ret    

c0021ad0 <AVX::AVX()>:
c0021ad0:	83 ec 0c             	sub    esp,0xc
c0021ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad7:	83 ec 08             	sub    esp,0x8
c0021ada:	68 f4 7a 02 c0       	push   0xc0027af4
c0021adf:	50                   	push   eax
c0021ae0:	e8 6b d0 fe ff       	call   c000eb50 <FPU::FPU(char const*)>
c0021ae5:	83 c4 10             	add    esp,0x10
c0021ae8:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c0021aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af1:	89 10                	mov    DWORD PTR [eax],edx
c0021af3:	90                   	nop
c0021af4:	83 c4 0c             	add    esp,0xc
c0021af7:	c3                   	ret    

c0021af8 <MMX::available()>:
c0021af8:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0021afd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021b03:	83 e0 20             	and    eax,0x20
c0021b06:	84 c0                	test   al,al
c0021b08:	0f 95 c0             	setne  al
c0021b0b:	c3                   	ret    

c0021b0c <MMX::open(int, int, void*)>:
c0021b0c:	83 ec 0c             	sub    esp,0xc
c0021b0f:	e8 7b 11 00 00       	call   c0022c8f <x87Init>
c0021b14:	b8 00 00 00 00       	mov    eax,0x0
c0021b19:	83 c4 0c             	add    esp,0xc
c0021b1c:	c3                   	ret    
c0021b1d:	90                   	nop
c0021b1e:	66 90                	xchg   ax,ax

c0021b20 <MMX::close(int, int, void*)>:
c0021b20:	83 ec 0c             	sub    esp,0xc
c0021b23:	e8 80 11 00 00       	call   c0022ca8 <x87Close>
c0021b28:	b8 00 00 00 00       	mov    eax,0x0
c0021b2d:	83 c4 0c             	add    esp,0xc
c0021b30:	c3                   	ret    
c0021b31:	90                   	nop
c0021b32:	66 90                	xchg   ax,ax

c0021b34 <MMX::save(void*)>:
c0021b34:	83 ec 0c             	sub    esp,0xc
c0021b37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b3b:	83 ec 0c             	sub    esp,0xc
c0021b3e:	50                   	push   eax
c0021b3f:	e8 3d 11 00 00       	call   c0022c81 <x87Save>
c0021b44:	83 c4 10             	add    esp,0x10
c0021b47:	90                   	nop
c0021b48:	83 c4 0c             	add    esp,0xc
c0021b4b:	c3                   	ret    

c0021b4c <MMX::load(void*)>:
c0021b4c:	83 ec 0c             	sub    esp,0xc
c0021b4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b53:	83 ec 0c             	sub    esp,0xc
c0021b56:	50                   	push   eax
c0021b57:	e8 2c 11 00 00       	call   c0022c88 <x87Load>
c0021b5c:	83 c4 10             	add    esp,0x10
c0021b5f:	90                   	nop
c0021b60:	83 c4 0c             	add    esp,0xc
c0021b63:	c3                   	ret    

c0021b64 <MMX::MMX()>:
c0021b64:	83 ec 0c             	sub    esp,0xc
c0021b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6b:	83 ec 08             	sub    esp,0x8
c0021b6e:	68 34 7b 02 c0       	push   0xc0027b34
c0021b73:	50                   	push   eax
c0021b74:	e8 d7 cf fe ff       	call   c000eb50 <FPU::FPU(char const*)>
c0021b79:	83 c4 10             	add    esp,0x10
c0021b7c:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c0021b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b85:	89 10                	mov    DWORD PTR [eax],edx
c0021b87:	90                   	nop
c0021b88:	83 c4 0c             	add    esp,0xc
c0021b8b:	c3                   	ret    

c0021b8c <SSE::open(int, int, void*)>:
c0021b8c:	83 ec 0c             	sub    esp,0xc
c0021b8f:	e8 b4 10 00 00       	call   c0022c48 <sseInit>
c0021b94:	b8 00 00 00 00       	mov    eax,0x0
c0021b99:	83 c4 0c             	add    esp,0xc
c0021b9c:	c3                   	ret    
c0021b9d:	90                   	nop
c0021b9e:	66 90                	xchg   ax,ax

c0021ba0 <SSE::close(int, int, void*)>:
c0021ba0:	83 ec 0c             	sub    esp,0xc
c0021ba3:	e8 b0 10 00 00       	call   c0022c58 <sseClose>
c0021ba8:	b8 00 00 00 00       	mov    eax,0x0
c0021bad:	83 c4 0c             	add    esp,0xc
c0021bb0:	c3                   	ret    
c0021bb1:	90                   	nop
c0021bb2:	66 90                	xchg   ax,ax

c0021bb4 <SSE::available()>:
c0021bb4:	83 ec 1c             	sub    esp,0x1c
c0021bb7:	e8 64 10 00 00       	call   c0022c20 <absolutelyNoChanceInHell>
c0021bbc:	85 c0                	test   eax,eax
c0021bbe:	0f 95 c0             	setne  al
c0021bc1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021bc5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021bc9:	83 c4 1c             	add    esp,0x1c
c0021bcc:	c3                   	ret    
c0021bcd:	90                   	nop
c0021bce:	66 90                	xchg   ax,ax

c0021bd0 <SSE::save(void*)>:
c0021bd0:	83 ec 0c             	sub    esp,0xc
c0021bd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bd7:	83 ec 0c             	sub    esp,0xc
c0021bda:	50                   	push   eax
c0021bdb:	e8 58 10 00 00       	call   c0022c38 <sseSave>
c0021be0:	83 c4 10             	add    esp,0x10
c0021be3:	90                   	nop
c0021be4:	83 c4 0c             	add    esp,0xc
c0021be7:	c3                   	ret    

c0021be8 <SSE::load(void*)>:
c0021be8:	83 ec 0c             	sub    esp,0xc
c0021beb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021bef:	83 ec 0c             	sub    esp,0xc
c0021bf2:	50                   	push   eax
c0021bf3:	e8 48 10 00 00       	call   c0022c40 <sseLoad>
c0021bf8:	83 c4 10             	add    esp,0x10
c0021bfb:	90                   	nop
c0021bfc:	83 c4 0c             	add    esp,0xc
c0021bff:	c3                   	ret    

c0021c00 <SSE::SSE()>:
c0021c00:	83 ec 0c             	sub    esp,0xc
c0021c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c07:	83 ec 08             	sub    esp,0x8
c0021c0a:	68 74 7b 02 c0       	push   0xc0027b74
c0021c0f:	50                   	push   eax
c0021c10:	e8 3b cf fe ff       	call   c000eb50 <FPU::FPU(char const*)>
c0021c15:	83 c4 10             	add    esp,0x10
c0021c18:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0021c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c21:	89 10                	mov    DWORD PTR [eax],edx
c0021c23:	90                   	nop
c0021c24:	83 c4 0c             	add    esp,0xc
c0021c27:	c3                   	ret    

c0021c28 <x87::open(int, int, void*)>:
c0021c28:	55                   	push   ebp
c0021c29:	89 e5                	mov    ebp,esp
c0021c2b:	83 ec 08             	sub    esp,0x8
c0021c2e:	e8 5c 10 00 00       	call   c0022c8f <x87Init>
c0021c33:	b8 00 00 00 00       	mov    eax,0x0
c0021c38:	c9                   	leave  
c0021c39:	c3                   	ret    

c0021c3a <x87::close(int, int, void*)>:
c0021c3a:	55                   	push   ebp
c0021c3b:	89 e5                	mov    ebp,esp
c0021c3d:	83 ec 08             	sub    esp,0x8
c0021c40:	e8 63 10 00 00       	call   c0022ca8 <x87Close>
c0021c45:	b8 00 00 00 00       	mov    eax,0x0
c0021c4a:	c9                   	leave  
c0021c4b:	c3                   	ret    

c0021c4c <x87::available()>:
c0021c4c:	55                   	push   ebp
c0021c4d:	89 e5                	mov    ebp,esp
c0021c4f:	83 ec 08             	sub    esp,0x8
c0021c52:	e8 0f 10 00 00       	call   c0022c66 <x87Detect>
c0021c57:	85 c0                	test   eax,eax
c0021c59:	0f 95 c0             	setne  al
c0021c5c:	c9                   	leave  
c0021c5d:	c3                   	ret    

c0021c5e <x87::save(void*)>:
c0021c5e:	55                   	push   ebp
c0021c5f:	89 e5                	mov    ebp,esp
c0021c61:	83 ec 08             	sub    esp,0x8
c0021c64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c67:	83 ec 0c             	sub    esp,0xc
c0021c6a:	50                   	push   eax
c0021c6b:	e8 11 10 00 00       	call   c0022c81 <x87Save>
c0021c70:	83 c4 10             	add    esp,0x10
c0021c73:	90                   	nop
c0021c74:	c9                   	leave  
c0021c75:	c3                   	ret    

c0021c76 <x87::load(void*)>:
c0021c76:	55                   	push   ebp
c0021c77:	89 e5                	mov    ebp,esp
c0021c79:	83 ec 08             	sub    esp,0x8
c0021c7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c7f:	83 ec 0c             	sub    esp,0xc
c0021c82:	50                   	push   eax
c0021c83:	e8 00 10 00 00       	call   c0022c88 <x87Load>
c0021c88:	83 c4 10             	add    esp,0x10
c0021c8b:	90                   	nop
c0021c8c:	c9                   	leave  
c0021c8d:	c3                   	ret    

c0021c8e <x87::x87()>:
c0021c8e:	83 ec 0c             	sub    esp,0xc
c0021c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c95:	83 ec 08             	sub    esp,0x8
c0021c98:	68 b4 7b 02 c0       	push   0xc0027bb4
c0021c9d:	50                   	push   eax
c0021c9e:	e8 ad ce fe ff       	call   c000eb50 <FPU::FPU(char const*)>
c0021ca3:	83 c4 10             	add    esp,0x10
c0021ca6:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0021cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021caf:	89 10                	mov    DWORD PTR [eax],edx
c0021cb1:	90                   	nop
c0021cb2:	83 c4 0c             	add    esp,0xc
c0021cb5:	c3                   	ret    

c0021cb6 <APIC::disable()>:
c0021cb6:	90                   	nop
c0021cb7:	c3                   	ret    

c0021cb8 <APIC::close(int, int, void*)>:
c0021cb8:	55                   	push   ebp
c0021cb9:	89 e5                	mov    ebp,esp
c0021cbb:	83 ec 08             	sub    esp,0x8
c0021cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cc3:	83 c0 3c             	add    eax,0x3c
c0021cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cc8:	83 ec 0c             	sub    esp,0xc
c0021ccb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cce:	ff d0                	call   eax
c0021cd0:	83 c4 10             	add    esp,0x10
c0021cd3:	b8 00 00 00 00       	mov    eax,0x0
c0021cd8:	c9                   	leave  
c0021cd9:	c3                   	ret    

c0021cda <IOAPIC::close(int, int, void*)>:
c0021cda:	b8 00 00 00 00       	mov    eax,0x0
c0021cdf:	c3                   	ret    

c0021ce0 <APIC::io_wait()>:
c0021ce0:	eb 00                	jmp    c0021ce2 <APIC::io_wait()+0x2>
c0021ce2:	eb 00                	jmp    c0021ce4 <APIC::io_wait()+0x4>
c0021ce4:	90                   	nop
c0021ce5:	c3                   	ret    

c0021ce6 <APIC::getBase()>:
c0021ce6:	55                   	push   ebp
c0021ce7:	89 e5                	mov    ebp,esp
c0021ce9:	83 ec 18             	sub    esp,0x18
c0021cec:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0021cf1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021cf7:	83 e0 08             	and    eax,0x8
c0021cfa:	84 c0                	test   al,al
c0021cfc:	75 07                	jne    c0021d05 <APIC::getBase()+0x1f>
c0021cfe:	b8 00 00 00 00       	mov    eax,0x0
c0021d03:	eb 21                	jmp    c0021d26 <APIC::getBase()+0x40>
c0021d05:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0021d0a:	83 ec 08             	sub    esp,0x8
c0021d0d:	6a 1b                	push   0x1b
c0021d0f:	50                   	push   eax
c0021d10:	e8 69 75 fe ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0021d15:	83 c4 10             	add    esp,0x10
c0021d18:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021d1b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021d1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021d21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021d26:	c9                   	leave  
c0021d27:	c3                   	ret    

c0021d28 <APIC::eoi(unsigned char)>:
c0021d28:	55                   	push   ebp
c0021d29:	89 e5                	mov    ebp,esp
c0021d2b:	83 ec 28             	sub    esp,0x28
c0021d2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d31:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021d34:	83 ec 0c             	sub    esp,0xc
c0021d37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d3a:	e8 a7 ff ff ff       	call   c0021ce6 <APIC::getBase()>
c0021d3f:	83 c4 10             	add    esp,0x10
c0021d42:	05 b0 00 00 00       	add    eax,0xb0
c0021d47:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021d4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021d4d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021d53:	90                   	nop
c0021d54:	c9                   	leave  
c0021d55:	c3                   	ret    

c0021d56 <APIC::open(int, int, void*)>:
c0021d56:	55                   	push   ebp
c0021d57:	89 e5                	mov    ebp,esp
c0021d59:	57                   	push   edi
c0021d5a:	56                   	push   esi
c0021d5b:	53                   	push   ebx
c0021d5c:	83 ec 2c             	sub    esp,0x2c
c0021d5f:	83 ec 0c             	sub    esp,0xc
c0021d62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d65:	e8 7c ff ff ff       	call   c0021ce6 <APIC::getBase()>
c0021d6a:	83 c4 10             	add    esp,0x10
c0021d6d:	89 c2                	mov    edx,eax
c0021d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021d72:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021d78:	0f b6 f8             	movzx  edi,al
c0021d7b:	89 d0                	mov    eax,edx
c0021d7d:	ba 00 00 00 00       	mov    edx,0x0
c0021d82:	89 c1                	mov    ecx,eax
c0021d84:	80 e5 ff             	and    ch,0xff
c0021d87:	89 cb                	mov    ebx,ecx
c0021d89:	0f b6 f2             	movzx  esi,dl
c0021d8c:	89 d8                	mov    eax,ebx
c0021d8e:	89 f2                	mov    edx,esi
c0021d90:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021d93:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021d96:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021d9a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021d9e:	83 e0 00             	and    eax,0x0
c0021da1:	09 d0                	or     eax,edx
c0021da3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021da7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021daa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021db0:	8d 50 01             	lea    edx,[eax+0x1]
c0021db3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021db6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021dbc:	0f b6 d0             	movzx  edx,al
c0021dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021dc2:	83 c2 08             	add    edx,0x8
c0021dc5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021dc9:	0f b6 c9             	movzx  ecx,cl
c0021dcc:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021dd2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021dd6:	83 ec 0c             	sub    esp,0xc
c0021dd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ddc:	e8 05 ff ff ff       	call   c0021ce6 <APIC::getBase()>
c0021de1:	83 c4 10             	add    esp,0x10
c0021de4:	05 f0 00 00 00       	add    eax,0xf0
c0021de9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021dec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021def:	8b 00                	mov    eax,DWORD PTR [eax]
c0021df1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021df4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021dfb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021e02:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021e05:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e08:	89 10                	mov    DWORD PTR [eax],edx
c0021e0a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021e11:	a1 30 94 02 c0       	mov    eax,ds:0xc0029430
c0021e16:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021e19:	7d 7c                	jge    c0021e97 <APIC::open(int, int, void*)+0x141>
c0021e1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e1e:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c0021e25:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021e28:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e2b:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c0021e32:	c1 e8 08             	shr    eax,0x8
c0021e35:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021e39:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021e3c:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c0021e43:	c1 e8 18             	shr    eax,0x18
c0021e46:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021e49:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021e4d:	75 40                	jne    c0021e8f <APIC::open(int, int, void*)+0x139>
c0021e4f:	83 ec 0c             	sub    esp,0xc
c0021e52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e55:	e8 8c fe ff ff       	call   c0021ce6 <APIC::getBase()>
c0021e5a:	83 c4 10             	add    esp,0x10
c0021e5d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021e61:	75 07                	jne    c0021e6a <APIC::open(int, int, void*)+0x114>
c0021e63:	ba 60 03 00 00       	mov    edx,0x360
c0021e68:	eb 05                	jmp    c0021e6f <APIC::open(int, int, void*)+0x119>
c0021e6a:	ba 50 03 00 00       	mov    edx,0x350
c0021e6f:	01 d0                	add    eax,edx
c0021e71:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021e74:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021e77:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e79:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021e7c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021e83:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021e87:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021e8a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021e8d:	89 10                	mov    DWORD PTR [eax],edx
c0021e8f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021e92:	e9 7a ff ff ff       	jmp    c0021e11 <APIC::open(int, int, void*)+0xbb>
c0021e97:	b8 00 00 00 00       	mov    eax,0x0
c0021e9c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021e9f:	5b                   	pop    ebx
c0021ea0:	5e                   	pop    esi
c0021ea1:	5f                   	pop    edi
c0021ea2:	5d                   	pop    ebp
c0021ea3:	c3                   	ret    

c0021ea4 <IOAPIC::IOAPIC()>:
c0021ea4:	83 ec 0c             	sub    esp,0xc
c0021ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eab:	83 ec 08             	sub    esp,0x8
c0021eae:	68 f4 7b 02 c0       	push   0xc0027bf4
c0021eb3:	50                   	push   eax
c0021eb4:	e8 85 c9 fe ff       	call   c000e83e <Device::Device(char const*)>
c0021eb9:	83 c4 10             	add    esp,0x10
c0021ebc:	ba 1c 7d 02 c0       	mov    edx,0xc0027d1c
c0021ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ec5:	89 10                	mov    DWORD PTR [eax],edx
c0021ec7:	90                   	nop
c0021ec8:	83 c4 0c             	add    esp,0xc
c0021ecb:	c3                   	ret    

c0021ecc <APIC::APIC()>:
c0021ecc:	53                   	push   ebx
c0021ecd:	83 ec 18             	sub    esp,0x18
c0021ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ed4:	83 ec 08             	sub    esp,0x8
c0021ed7:	68 fc 7b 02 c0       	push   0xc0027bfc
c0021edc:	50                   	push   eax
c0021edd:	e8 ec d0 fe ff       	call   c000efce <InterruptController::InterruptController(char const*)>
c0021ee2:	83 c4 10             	add    esp,0x10
c0021ee5:	ba d4 7c 02 c0       	mov    edx,0xc0027cd4
c0021eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021eee:	89 10                	mov    DWORD PTR [eax],edx
c0021ef0:	a0 60 ab 02 c0       	mov    al,ds:0xc002ab60
c0021ef5:	83 f0 01             	xor    eax,0x1
c0021ef8:	84 c0                	test   al,al
c0021efa:	0f 84 a1 00 00 00    	je     c0021fa1 <APIC::APIC()+0xd5>
c0021f00:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021f05:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c0021f0a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021f0e:	0f 83 86 00 00 00    	jae    c0021f9a <APIC::APIC()+0xce>
c0021f14:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021f1c:	83 ec 0c             	sub    esp,0xc
c0021f1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f23:	e8 bf 7e fe ff       	call   c0009de7 <malloc>
c0021f28:	83 c4 10             	add    esp,0x10
c0021f2b:	89 c3                	mov    ebx,eax
c0021f2d:	83 ec 0c             	sub    esp,0xc
c0021f30:	53                   	push   ebx
c0021f31:	e8 6e ff ff ff       	call   c0021ea4 <IOAPIC::IOAPIC()>
c0021f36:	83 c4 10             	add    esp,0x10
c0021f39:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021f3d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021f42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f46:	89 14 85 40 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54c0],edx
c0021f4d:	a1 20 ab 02 c0       	mov    eax,ds:0xc002ab20
c0021f52:	40                   	inc    eax
c0021f53:	a3 20 ab 02 c0       	mov    ds:0xc002ab20,eax
c0021f58:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c0021f5d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021f63:	83 ec 08             	sub    esp,0x8
c0021f66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f6a:	50                   	push   eax
c0021f6b:	e8 ca c6 fe ff       	call   c000e63a <Device::addChild(Device*)>
c0021f70:	83 c4 10             	add    esp,0x10
c0021f73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f77:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f79:	83 c0 08             	add    eax,0x8
c0021f7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f7e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021f83:	6a 00                	push   0x0
c0021f85:	6a 00                	push   0x0
c0021f87:	52                   	push   edx
c0021f88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f8c:	ff d0                	call   eax
c0021f8e:	83 c4 10             	add    esp,0x10
c0021f91:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021f95:	e9 6b ff ff ff       	jmp    c0021f05 <APIC::APIC()+0x39>
c0021f9a:	c6 05 60 ab 02 c0 01 	mov    BYTE PTR ds:0xc002ab60,0x1
c0021fa1:	90                   	nop
c0021fa2:	83 c4 18             	add    esp,0x18
c0021fa5:	5b                   	pop    ebx
c0021fa6:	c3                   	ret    
c0021fa7:	90                   	nop

c0021fa8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021fa8:	55                   	push   ebp
c0021fa9:	89 e5                	mov    ebp,esp
c0021fab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021fb4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021fb7:	72 1d                	jb     c0021fd6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fbc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fc5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021fcb:	01 d0                	add    eax,edx
c0021fcd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021fd0:	73 04                	jae    c0021fd6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021fd2:	b0 01                	mov    al,0x1
c0021fd4:	eb 02                	jmp    c0021fd8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021fd6:	b0 00                	mov    al,0x0
c0021fd8:	5d                   	pop    ebp
c0021fd9:	c3                   	ret    

c0021fda <IOAPIC::read(int)>:
c0021fda:	55                   	push   ebp
c0021fdb:	89 e5                	mov    ebp,esp
c0021fdd:	83 ec 10             	sub    esp,0x10
c0021fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fe3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021fe9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021fec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021fef:	0f b6 d0             	movzx  edx,al
c0021ff2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021ff5:	89 10                	mov    DWORD PTR [eax],edx
c0021ff7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021ffa:	83 c0 10             	add    eax,0x10
c0021ffd:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fff:	c9                   	leave  
c0022000:	c3                   	ret    
c0022001:	90                   	nop

c0022002 <IOAPIC::open(int, int, void*)>:
c0022002:	55                   	push   ebp
c0022003:	89 e5                	mov    ebp,esp
c0022005:	57                   	push   edi
c0022006:	56                   	push   esi
c0022007:	53                   	push   ebx
c0022008:	83 ec 0c             	sub    esp,0xc
c002200b:	83 ec 0c             	sub    esp,0xc
c002200e:	68 27 7c 02 c0       	push   0xc0027c27
c0022013:	e8 af b0 fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c0022018:	83 c4 10             	add    esp,0x10
c002201b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002201e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022021:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002202a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022030:	8b 14 85 20 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ae0]
c0022037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002203a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022043:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022049:	8b 14 85 a0 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6a60]
c0022050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022053:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002205c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022065:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002206b:	0f b6 f8             	movzx  edi,al
c002206e:	89 d0                	mov    eax,edx
c0022070:	ba 00 00 00 00       	mov    edx,0x0
c0022075:	89 c1                	mov    ecx,eax
c0022077:	80 e5 ff             	and    ch,0xff
c002207a:	89 cb                	mov    ebx,ecx
c002207c:	0f b6 f2             	movzx  esi,dl
c002207f:	89 d8                	mov    eax,ebx
c0022081:	89 f2                	mov    edx,esi
c0022083:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022086:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022089:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002208d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022091:	83 e0 00             	and    eax,0x0
c0022094:	09 d0                	or     eax,edx
c0022096:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002209a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002209d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00220a3:	8d 50 01             	lea    edx,[eax+0x1]
c00220a6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00220a9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00220af:	0f b6 d0             	movzx  edx,al
c00220b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220b5:	83 c2 08             	add    edx,0x8
c00220b8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00220bc:	0f b6 c9             	movzx  ecx,cl
c00220bf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00220c5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00220c9:	83 ec 08             	sub    esp,0x8
c00220cc:	6a 01                	push   0x1
c00220ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00220d1:	e8 04 ff ff ff       	call   c0021fda <IOAPIC::read(int)>
c00220d6:	83 c4 10             	add    esp,0x10
c00220d9:	c1 f8 10             	sar    eax,0x10
c00220dc:	0f b6 c0             	movzx  eax,al
c00220df:	8d 50 01             	lea    edx,[eax+0x1]
c00220e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220e5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00220eb:	b8 00 00 00 00       	mov    eax,0x0
c00220f0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00220f3:	5b                   	pop    ebx
c00220f4:	5e                   	pop    esi
c00220f5:	5f                   	pop    edi
c00220f6:	5d                   	pop    ebp
c00220f7:	c3                   	ret    

c00220f8 <IOAPIC::write(int, int)>:
c00220f8:	55                   	push   ebp
c00220f9:	89 e5                	mov    ebp,esp
c00220fb:	83 ec 10             	sub    esp,0x10
c00220fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022101:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022107:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002210a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002210d:	0f b6 d0             	movzx  edx,al
c0022110:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022113:	89 10                	mov    DWORD PTR [eax],edx
c0022115:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022118:	8d 50 10             	lea    edx,[eax+0x10]
c002211b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002211e:	89 02                	mov    DWORD PTR [edx],eax
c0022120:	90                   	nop
c0022121:	c9                   	leave  
c0022122:	c3                   	ret    
c0022123:	90                   	nop

c0022124 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022124:	55                   	push   ebp
c0022125:	89 e5                	mov    ebp,esp
c0022127:	53                   	push   ebx
c0022128:	83 ec 2c             	sub    esp,0x2c
c002212b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002212e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022131:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022134:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022137:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002213a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002213d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0022140:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022143:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022146:	88 d8                	mov    al,bl
c0022148:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002214b:	88 c8                	mov    al,cl
c002214d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022150:	88 d0                	mov    al,dl
c0022152:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0022155:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022159:	83 c0 08             	add    eax,0x8
c002215c:	01 c0                	add    eax,eax
c002215e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022161:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022165:	83 c0 08             	add    eax,0x8
c0022168:	01 c0                	add    eax,eax
c002216a:	40                   	inc    eax
c002216b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002216e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022171:	50                   	push   eax
c0022172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022175:	e8 60 fe ff ff       	call   c0021fda <IOAPIC::read(int)>
c002217a:	83 c4 08             	add    esp,0x8
c002217d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022180:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0022187:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002218a:	c1 e0 18             	shl    eax,0x18
c002218d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022190:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022193:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022196:	52                   	push   edx
c0022197:	50                   	push   eax
c0022198:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002219b:	e8 58 ff ff ff       	call   c00220f8 <IOAPIC::write(int, int)>
c00221a0:	83 c4 0c             	add    esp,0xc
c00221a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00221a6:	50                   	push   eax
c00221a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221aa:	e8 2b fe ff ff       	call   c0021fda <IOAPIC::read(int)>
c00221af:	83 c4 08             	add    esp,0x8
c00221b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00221b5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00221bc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00221c3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00221ca:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00221ce:	74 09                	je     c00221d9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00221d0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00221d7:	eb 07                	jmp    c00221e0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00221d9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00221e0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00221e4:	74 09                	je     c00221ef <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00221e6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00221ed:	eb 07                	jmp    c00221f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00221ef:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00221f6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00221fd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022201:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022204:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022207:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002220a:	52                   	push   edx
c002220b:	50                   	push   eax
c002220c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002220f:	e8 e4 fe ff ff       	call   c00220f8 <IOAPIC::write(int, int)>
c0022214:	83 c4 0c             	add    esp,0xc
c0022217:	90                   	nop
c0022218:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002221b:	c9                   	leave  
c002221c:	c3                   	ret    
c002221d:	90                   	nop

c002221e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002221e:	55                   	push   ebp
c002221f:	89 e5                	mov    ebp,esp
c0022221:	57                   	push   edi
c0022222:	56                   	push   esi
c0022223:	53                   	push   ebx
c0022224:	83 ec 2c             	sub    esp,0x2c
c0022227:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002222a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002222d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022231:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022235:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022239:	74 5a                	je     c0022295 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002223b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002223f:	7f 44                	jg     c0022285 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022241:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022244:	05 c0 82 02 c0       	add    eax,0xc00282c0
c0022249:	8a 00                	mov    al,BYTE PTR [eax]
c002224b:	0f b6 c0             	movzx  eax,al
c002224e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022251:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022254:	66 8b 84 00 c0 94 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6b40]
c002225c:	0f b7 c0             	movzx  eax,ax
c002225f:	83 e0 02             	and    eax,0x2
c0022262:	85 c0                	test   eax,eax
c0022264:	74 04                	je     c002226a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022266:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002226a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002226d:	66 8b 84 00 c0 94 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6b40]
c0022275:	0f b7 c0             	movzx  eax,ax
c0022278:	83 e0 08             	and    eax,0x8
c002227b:	85 c0                	test   eax,eax
c002227d:	74 16                	je     c0022295 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002227f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022283:	eb 10                	jmp    c0022295 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022285:	83 ec 0c             	sub    esp,0xc
c0022288:	68 38 7c 02 c0       	push   0xc0027c38
c002228d:	e8 17 2f ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0022292:	83 c4 10             	add    esp,0x10
c0022295:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0022299:	a1 20 ab 02 c0       	mov    eax,ds:0xc002ab20
c002229e:	83 ec 08             	sub    esp,0x8
c00222a1:	50                   	push   eax
c00222a2:	68 70 7c 02 c0       	push   0xc0027c70
c00222a7:	e8 1b ae fe ff       	call   c000d0c7 <Dbg::kprintf(char const*, ...)>
c00222ac:	83 c4 10             	add    esp,0x10
c00222af:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00222b6:	a1 20 ab 02 c0       	mov    eax,ds:0xc002ab20
c00222bb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00222be:	7d 67                	jge    c0022327 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00222c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00222c3:	8b 04 85 40 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd54c0]
c00222ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00222cd:	83 ec 08             	sub    esp,0x8
c00222d0:	52                   	push   edx
c00222d1:	50                   	push   eax
c00222d2:	e8 d1 fc ff ff       	call   c0021fa8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00222d7:	83 c4 10             	add    esp,0x10
c00222da:	84 c0                	test   al,al
c00222dc:	74 44                	je     c0022322 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00222de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00222e1:	8b 1c 85 40 ab 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd54c0]
c00222e8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00222ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00222ef:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00222f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222f6:	83 c0 20             	add    eax,0x20
c00222f9:	0f b6 f0             	movzx  esi,al
c00222fc:	b8 00 00 00 00       	mov    eax,0x0
c0022301:	99                   	cdq    
c0022302:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022305:	0f b6 c9             	movzx  ecx,cl
c0022308:	83 ec 04             	sub    esp,0x4
c002230b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002230e:	57                   	push   edi
c002230f:	56                   	push   esi
c0022310:	52                   	push   edx
c0022311:	50                   	push   eax
c0022312:	51                   	push   ecx
c0022313:	53                   	push   ebx
c0022314:	e8 0b fe ff ff       	call   c0022124 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022319:	83 c4 20             	add    esp,0x20
c002231c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022320:	eb 05                	jmp    c0022327 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022322:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022325:	eb 8f                	jmp    c00222b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022327:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002232a:	83 f0 01             	xor    eax,0x1
c002232d:	84 c0                	test   al,al
c002232f:	74 10                	je     c0022341 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022331:	83 ec 0c             	sub    esp,0xc
c0022334:	68 87 7c 02 c0       	push   0xc0027c87
c0022339:	e8 6b 2e ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c002233e:	83 c4 10             	add    esp,0x10
c0022341:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022345:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002234c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022350:	7f 65                	jg     c00223b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0022352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022355:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022358:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002235f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022362:	01 ca                	add    edx,ecx
c0022364:	83 c2 54             	add    edx,0x54
c0022367:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002236b:	85 c0                	test   eax,eax
c002236d:	75 43                	jne    c00223b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002236f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022372:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022375:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002237c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002237f:	01 ca                	add    edx,ecx
c0022381:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022384:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022387:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002238b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002238e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022391:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022398:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002239b:	01 ca                	add    edx,ecx
c002239d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00223a3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00223a6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00223aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223ad:	83 e8 20             	sub    eax,0x20
c00223b0:	eb 1a                	jmp    c00223cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00223b2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00223b5:	eb 95                	jmp    c002234c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00223b7:	83 ec 0c             	sub    esp,0xc
c00223ba:	68 94 7c 02 c0       	push   0xc0027c94
c00223bf:	e8 e5 2d ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00223c4:	83 c4 10             	add    esp,0x10
c00223c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00223cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00223cf:	5b                   	pop    ebx
c00223d0:	5e                   	pop    esi
c00223d1:	5f                   	pop    edi
c00223d2:	5d                   	pop    ebp
c00223d3:	c3                   	ret    

c00223d4 <PIC::disable()>:
c00223d4:	55                   	push   ebp
c00223d5:	89 e5                	mov    ebp,esp
c00223d7:	83 ec 10             	sub    esp,0x10
c00223da:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00223e0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00223e4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00223e7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00223eb:	ee                   	out    dx,al
c00223ec:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00223f2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00223f6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00223f9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00223fd:	ee                   	out    dx,al
c00223fe:	90                   	nop
c00223ff:	c9                   	leave  
c0022400:	c3                   	ret    
c0022401:	90                   	nop

c0022402 <PIC::close(int, int, void*)>:
c0022402:	55                   	push   ebp
c0022403:	89 e5                	mov    ebp,esp
c0022405:	83 ec 08             	sub    esp,0x8
c0022408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002240b:	8b 00                	mov    eax,DWORD PTR [eax]
c002240d:	83 c0 3c             	add    eax,0x3c
c0022410:	8b 00                	mov    eax,DWORD PTR [eax]
c0022412:	83 ec 0c             	sub    esp,0xc
c0022415:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022418:	ff d0                	call   eax
c002241a:	83 c4 10             	add    esp,0x10
c002241d:	b8 00 00 00 00       	mov    eax,0x0
c0022422:	c9                   	leave  
c0022423:	c3                   	ret    

c0022424 <PIC::PIC()>:
c0022424:	83 ec 0c             	sub    esp,0xc
c0022427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002242b:	83 ec 08             	sub    esp,0x8
c002242e:	68 40 7d 02 c0       	push   0xc0027d40
c0022433:	50                   	push   eax
c0022434:	e8 95 cb fe ff       	call   c000efce <InterruptController::InterruptController(char const*)>
c0022439:	83 c4 10             	add    esp,0x10
c002243c:	ba 6c 7d 02 c0       	mov    edx,0xc0027d6c
c0022441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022445:	89 10                	mov    DWORD PTR [eax],edx
c0022447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022451:	0f b6 d0             	movzx  edx,al
c0022454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022458:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002245f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022463:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022469:	0f b6 d0             	movzx  edx,al
c002246c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022470:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022479:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002247f:	8d 50 01             	lea    edx,[eax+0x1]
c0022482:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022486:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002248c:	0f b6 d0             	movzx  edx,al
c002248f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022493:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022497:	83 e1 3f             	and    ecx,0x3f
c002249a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002249e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224a8:	0f b6 d0             	movzx  edx,al
c00224ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224af:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00224b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224c0:	0f b6 d0             	movzx  edx,al
c00224c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224c7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00224cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00224d6:	8d 50 01             	lea    edx,[eax+0x1]
c00224d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224dd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00224e3:	0f b6 d0             	movzx  edx,al
c00224e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00224ee:	83 e1 3f             	and    ecx,0x3f
c00224f1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00224f5:	90                   	nop
c00224f6:	83 c4 0c             	add    esp,0xc
c00224f9:	c3                   	ret    

c00224fa <PIC::ioWait()>:
c00224fa:	eb 00                	jmp    c00224fc <PIC::ioWait()+0x2>
c00224fc:	eb 00                	jmp    c00224fe <PIC::ioWait()+0x4>
c00224fe:	90                   	nop
c00224ff:	c3                   	ret    

c0022500 <PIC::getIRQReg(int)>:
c0022500:	55                   	push   ebp
c0022501:	89 e5                	mov    ebp,esp
c0022503:	83 ec 10             	sub    esp,0x10
c0022506:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022509:	0f b6 c0             	movzx  eax,al
c002250c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022512:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022515:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022518:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002251c:	ee                   	out    dx,al
c002251d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022520:	0f b6 c0             	movzx  eax,al
c0022523:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022529:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002252c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002252f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022533:	ee                   	out    dx,al
c0022534:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002253a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002253e:	89 c2                	mov    edx,eax
c0022540:	ec                   	in     al,dx
c0022541:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022544:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022547:	0f b6 c0             	movzx  eax,al
c002254a:	c1 e0 08             	shl    eax,0x8
c002254d:	89 c1                	mov    ecx,eax
c002254f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022555:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022559:	89 c2                	mov    edx,eax
c002255b:	ec                   	in     al,dx
c002255c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002255f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022562:	0f b6 c0             	movzx  eax,al
c0022565:	09 c8                	or     eax,ecx
c0022567:	c9                   	leave  
c0022568:	c3                   	ret    
c0022569:	90                   	nop

c002256a <PIC::eoi(unsigned char)>:
c002256a:	55                   	push   ebp
c002256b:	89 e5                	mov    ebp,esp
c002256d:	83 ec 14             	sub    esp,0x14
c0022570:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022573:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022576:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002257a:	75 1e                	jne    c002259a <PIC::eoi(unsigned char)+0x30>
c002257c:	6a 0b                	push   0xb
c002257e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022581:	e8 7a ff ff ff       	call   c0022500 <PIC::getIRQReg(int)>
c0022586:	83 c4 08             	add    esp,0x8
c0022589:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002258d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022591:	25 80 00 00 00       	and    eax,0x80
c0022596:	85 c0                	test   eax,eax
c0022598:	74 5f                	je     c00225f9 <PIC::eoi(unsigned char)+0x8f>
c002259a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002259e:	75 2d                	jne    c00225cd <PIC::eoi(unsigned char)+0x63>
c00225a0:	6a 0b                	push   0xb
c00225a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225a5:	e8 56 ff ff ff       	call   c0022500 <PIC::getIRQReg(int)>
c00225aa:	83 c4 08             	add    esp,0x8
c00225ad:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00225b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225b4:	66 85 c0             	test   ax,ax
c00225b7:	78 14                	js     c00225cd <PIC::eoi(unsigned char)+0x63>
c00225b9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00225bf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00225c3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00225c6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00225ca:	ee                   	out    dx,al
c00225cb:	eb 2d                	jmp    c00225fa <PIC::eoi(unsigned char)+0x90>
c00225cd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00225d1:	76 12                	jbe    c00225e5 <PIC::eoi(unsigned char)+0x7b>
c00225d3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00225d9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00225dd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00225e0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00225e4:	ee                   	out    dx,al
c00225e5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00225eb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00225ef:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00225f2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00225f6:	ee                   	out    dx,al
c00225f7:	eb 01                	jmp    c00225fa <PIC::eoi(unsigned char)+0x90>
c00225f9:	90                   	nop
c00225fa:	c9                   	leave  
c00225fb:	c3                   	ret    

c00225fc <PIC::remap()>:
c00225fc:	55                   	push   ebp
c00225fd:	89 e5                	mov    ebp,esp
c00225ff:	83 ec 48             	sub    esp,0x48
c0022602:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022609:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022610:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022616:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022619:	89 c2                	mov    edx,eax
c002261b:	ec                   	in     al,dx
c002261c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002261f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022622:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022625:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002262b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002262e:	89 c2                	mov    edx,eax
c0022630:	ec                   	in     al,dx
c0022631:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022634:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022637:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002263a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022640:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022644:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022647:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002264a:	ee                   	out    dx,al
c002264b:	83 ec 0c             	sub    esp,0xc
c002264e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022651:	e8 a4 fe ff ff       	call   c00224fa <PIC::ioWait()>
c0022656:	83 c4 10             	add    esp,0x10
c0022659:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002265f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022663:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022666:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022669:	ee                   	out    dx,al
c002266a:	83 ec 0c             	sub    esp,0xc
c002266d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022670:	e8 85 fe ff ff       	call   c00224fa <PIC::ioWait()>
c0022675:	83 c4 10             	add    esp,0x10
c0022678:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002267b:	0f b6 c0             	movzx  eax,al
c002267e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022684:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022687:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002268a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002268d:	ee                   	out    dx,al
c002268e:	83 ec 0c             	sub    esp,0xc
c0022691:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022694:	e8 61 fe ff ff       	call   c00224fa <PIC::ioWait()>
c0022699:	83 c4 10             	add    esp,0x10
c002269c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002269f:	0f b6 c0             	movzx  eax,al
c00226a2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00226a8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00226ab:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00226ae:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00226b1:	ee                   	out    dx,al
c00226b2:	83 ec 0c             	sub    esp,0xc
c00226b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226b8:	e8 3d fe ff ff       	call   c00224fa <PIC::ioWait()>
c00226bd:	83 c4 10             	add    esp,0x10
c00226c0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00226c6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00226ca:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00226cd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00226d0:	ee                   	out    dx,al
c00226d1:	83 ec 0c             	sub    esp,0xc
c00226d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226d7:	e8 1e fe ff ff       	call   c00224fa <PIC::ioWait()>
c00226dc:	83 c4 10             	add    esp,0x10
c00226df:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00226e5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00226e9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00226ec:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00226ef:	ee                   	out    dx,al
c00226f0:	83 ec 0c             	sub    esp,0xc
c00226f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226f6:	e8 ff fd ff ff       	call   c00224fa <PIC::ioWait()>
c00226fb:	83 c4 10             	add    esp,0x10
c00226fe:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022704:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022708:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002270b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002270e:	ee                   	out    dx,al
c002270f:	83 ec 0c             	sub    esp,0xc
c0022712:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022715:	e8 e0 fd ff ff       	call   c00224fa <PIC::ioWait()>
c002271a:	83 c4 10             	add    esp,0x10
c002271d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022723:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022727:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002272a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002272d:	ee                   	out    dx,al
c002272e:	83 ec 0c             	sub    esp,0xc
c0022731:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022734:	e8 c1 fd ff ff       	call   c00224fa <PIC::ioWait()>
c0022739:	83 c4 10             	add    esp,0x10
c002273c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022740:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022746:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022749:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002274c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002274f:	ee                   	out    dx,al
c0022750:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022754:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002275a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002275d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022760:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022763:	ee                   	out    dx,al
c0022764:	90                   	nop
c0022765:	c9                   	leave  
c0022766:	c3                   	ret    
c0022767:	90                   	nop

c0022768 <PIC::open(int, int, void*)>:
c0022768:	55                   	push   ebp
c0022769:	89 e5                	mov    ebp,esp
c002276b:	83 ec 18             	sub    esp,0x18
c002276e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022774:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022778:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002277b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002277f:	ee                   	out    dx,al
c0022780:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022786:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002278a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002278d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022791:	ee                   	out    dx,al
c0022792:	83 ec 0c             	sub    esp,0xc
c0022795:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022798:	e8 5f fe ff ff       	call   c00225fc <PIC::remap()>
c002279d:	83 c4 10             	add    esp,0x10
c00227a0:	b8 00 00 00 00       	mov    eax,0x0
c00227a5:	c9                   	leave  
c00227a6:	c3                   	ret    
c00227a7:	90                   	nop

c00227a8 <APICTimer::close(int, int, void*)>:
c00227a8:	b8 00 00 00 00       	mov    eax,0x0
c00227ad:	c3                   	ret    
c00227ae:	66 90                	xchg   ax,ax

c00227b0 <apicTimerHandler(regs*, void*)>:
c00227b0:	83 ec 0c             	sub    esp,0xc
c00227b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00227b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00227b9:	b8 10 27 00 00       	mov    eax,0x2710
c00227be:	ba 00 00 00 00       	mov    edx,0x0
c00227c3:	f7 f1                	div    ecx
c00227c5:	83 ec 0c             	sub    esp,0xc
c00227c8:	50                   	push   eax
c00227c9:	e8 2f e8 fe ff       	call   c0010ffd <timerHandler(unsigned int)>
c00227ce:	83 c4 10             	add    esp,0x10
c00227d1:	90                   	nop
c00227d2:	83 c4 0c             	add    esp,0xc
c00227d5:	c3                   	ret    
c00227d6:	66 90                	xchg   ax,ax

c00227d8 <APICTimer::write(int)>:
c00227d8:	83 ec 1c             	sub    esp,0x1c
c00227db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00227e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00227e9:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00227ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00227f4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00227fa:	83 ec 0c             	sub    esp,0xc
c00227fd:	50                   	push   eax
c00227fe:	e8 e3 f4 ff ff       	call   c0021ce6 <APIC::getBase()>
c0022803:	83 c4 10             	add    esp,0x10
c0022806:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002280a:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c002280f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022813:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022817:	05 e0 03 00 00       	add    eax,0x3e0
c002281c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022826:	05 80 03 00 00       	add    eax,0x380
c002282b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022831:	fb                   	sti    
c0022832:	66 90                	xchg   ax,ax
c0022834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022838:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002283e:	a1 ec 91 02 c0       	mov    eax,ds:0xc00291ec
c0022843:	39 c2                	cmp    edx,eax
c0022845:	76 05                	jbe    c002284c <APICTimer::write(int)+0x74>
c0022847:	eb eb                	jmp    c0022834 <APICTimer::write(int)+0x5c>
c0022849:	8d 76 00             	lea    esi,[esi+0x0]
c002284c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022850:	05 20 03 00 00       	add    eax,0x320
c0022855:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002285b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002285f:	05 90 03 00 00       	add    eax,0x390
c0022864:	8b 00                	mov    eax,DWORD PTR [eax]
c0022866:	f7 d0                	not    eax
c0022868:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002286c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022874:	ba 00 00 00 00       	mov    edx,0x0
c0022879:	f7 f1                	div    ecx
c002287b:	89 04 24             	mov    DWORD PTR [esp],eax
c002287e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022882:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022888:	0d 00 00 02 00       	or     eax,0x20000
c002288d:	89 c2                	mov    edx,eax
c002288f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022893:	05 20 03 00 00       	add    eax,0x320
c0022898:	89 10                	mov    DWORD PTR [eax],edx
c002289a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002289e:	05 e0 03 00 00       	add    eax,0x3e0
c00228a3:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00228a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228ad:	05 80 03 00 00       	add    eax,0x380
c00228b2:	89 c2                	mov    edx,eax
c00228b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00228b7:	89 02                	mov    DWORD PTR [edx],eax
c00228b9:	90                   	nop
c00228ba:	83 c4 1c             	add    esp,0x1c
c00228bd:	c3                   	ret    
c00228be:	66 90                	xchg   ax,ax

c00228c0 <APICTimer::open(int, int, void*)>:
c00228c0:	57                   	push   edi
c00228c1:	56                   	push   esi
c00228c2:	53                   	push   ebx
c00228c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00228c9:	83 c0 24             	add    eax,0x24
c00228cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00228ce:	83 ec 08             	sub    esp,0x8
c00228d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228d9:	ff d0                	call   eax
c00228db:	83 c4 10             	add    esp,0x10
c00228de:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00228e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00228e9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00228ef:	83 ec 0c             	sub    esp,0xc
c00228f2:	50                   	push   eax
c00228f3:	e8 ee f3 ff ff       	call   c0021ce6 <APIC::getBase()>
c00228f8:	83 c4 10             	add    esp,0x10
c00228fb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022905:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002290b:	0f b6 f8             	movzx  edi,al
c002290e:	89 d0                	mov    eax,edx
c0022910:	ba 00 00 00 00       	mov    edx,0x0
c0022915:	89 c1                	mov    ecx,eax
c0022917:	80 e5 ff             	and    ch,0xff
c002291a:	89 cb                	mov    ebx,ecx
c002291c:	0f b6 f2             	movzx  esi,dl
c002291f:	89 d8                	mov    eax,ebx
c0022921:	89 f2                	mov    edx,esi
c0022923:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022927:	8d 5f 08             	lea    ebx,[edi+0x8]
c002292a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002292e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022932:	83 e0 00             	and    eax,0x0
c0022935:	09 d0                	or     eax,edx
c0022937:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002293b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022945:	8d 50 01             	lea    edx,[eax+0x1]
c0022948:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002294c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022952:	0f b6 d0             	movzx  edx,al
c0022955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022959:	83 c2 08             	add    edx,0x8
c002295c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022960:	0f b6 c9             	movzx  ecx,cl
c0022963:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022969:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002296d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022971:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022975:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002297b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002297f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022983:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022989:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002298d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022993:	83 ec 0c             	sub    esp,0xc
c0022996:	51                   	push   ecx
c0022997:	6a 01                	push   0x1
c0022999:	68 b0 27 02 c0       	push   0xc00227b0
c002299e:	52                   	push   edx
c002299f:	50                   	push   eax
c00229a0:	e8 0d bc fe ff       	call   c000e5b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00229a5:	83 c4 20             	add    esp,0x20
c00229a8:	89 c2                	mov    edx,eax
c00229aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ae:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00229b4:	b8 00 00 00 00       	mov    eax,0x0
c00229b9:	5b                   	pop    ebx
c00229ba:	5e                   	pop    esi
c00229bb:	5f                   	pop    edi
c00229bc:	c3                   	ret    
c00229bd:	90                   	nop
c00229be:	66 90                	xchg   ax,ax

c00229c0 <APICTimer::APICTimer()>:
c00229c0:	83 ec 0c             	sub    esp,0xc
c00229c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c7:	83 ec 08             	sub    esp,0x8
c00229ca:	68 ac 7d 02 c0       	push   0xc0027dac
c00229cf:	50                   	push   eax
c00229d0:	e8 97 e5 fe ff       	call   c0010f6c <Timer::Timer(char const*)>
c00229d5:	83 c4 10             	add    esp,0x10
c00229d8:	ba c0 7d 02 c0       	mov    edx,0xc0027dc0
c00229dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e1:	89 10                	mov    DWORD PTR [eax],edx
c00229e3:	90                   	nop
c00229e4:	83 c4 0c             	add    esp,0xc
c00229e7:	c3                   	ret    

c00229e8 <PIT::write(int)>:
c00229e8:	83 ec 10             	sub    esp,0x10
c00229eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00229ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00229f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00229f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00229fd:	a3 64 ab 02 c0       	mov    ds:0xc002ab64,eax
c0022a02:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022a07:	99                   	cdq    
c0022a08:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022a0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022a10:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022a17:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022a1c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022a20:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022a25:	ee                   	out    dx,al
c0022a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a2a:	0f b6 c0             	movzx  eax,al
c0022a2d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022a34:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022a38:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022a3c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022a41:	ee                   	out    dx,al
c0022a42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a46:	c1 f8 08             	sar    eax,0x8
c0022a49:	0f b6 c0             	movzx  eax,al
c0022a4c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022a53:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022a57:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022a5b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022a60:	ee                   	out    dx,al
c0022a61:	90                   	nop
c0022a62:	83 c4 10             	add    esp,0x10
c0022a65:	c3                   	ret    
c0022a66:	66 90                	xchg   ax,ax

c0022a68 <pitHandler(regs*, void*)>:
c0022a68:	83 ec 0c             	sub    esp,0xc
c0022a6b:	8b 0d 64 ab 02 c0    	mov    ecx,DWORD PTR ds:0xc002ab64
c0022a71:	b8 10 27 00 00       	mov    eax,0x2710
c0022a76:	99                   	cdq    
c0022a77:	f7 f9                	idiv   ecx
c0022a79:	83 ec 0c             	sub    esp,0xc
c0022a7c:	50                   	push   eax
c0022a7d:	e8 7b e5 fe ff       	call   c0010ffd <timerHandler(unsigned int)>
c0022a82:	83 c4 10             	add    esp,0x10
c0022a85:	90                   	nop
c0022a86:	83 c4 0c             	add    esp,0xc
c0022a89:	c3                   	ret    
c0022a8a:	66 90                	xchg   ax,ax

c0022a8c <PIT::open(int, int, void*)>:
c0022a8c:	83 ec 0c             	sub    esp,0xc
c0022a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a95:	83 c0 24             	add    eax,0x24
c0022a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a9a:	83 ec 08             	sub    esp,0x8
c0022a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022aa5:	ff d0                	call   eax
c0022aa7:	83 c4 10             	add    esp,0x10
c0022aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aae:	83 ec 0c             	sub    esp,0xc
c0022ab1:	6a 00                	push   0x0
c0022ab3:	6a 01                	push   0x1
c0022ab5:	68 68 2a 02 c0       	push   0xc0022a68
c0022aba:	6a 00                	push   0x0
c0022abc:	50                   	push   eax
c0022abd:	e8 f0 ba fe ff       	call   c000e5b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022ac2:	83 c4 20             	add    esp,0x20
c0022ac5:	89 c2                	mov    edx,eax
c0022ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022acb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022ad1:	b8 00 00 00 00       	mov    eax,0x0
c0022ad6:	83 c4 0c             	add    esp,0xc
c0022ad9:	c3                   	ret    
c0022ada:	66 90                	xchg   ax,ax

c0022adc <PIT::close(int, int, void*)>:
c0022adc:	83 ec 0c             	sub    esp,0xc
c0022adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af1:	6a 01                	push   0x1
c0022af3:	68 68 2a 02 c0       	push   0xc0022a68
c0022af8:	6a 00                	push   0x0
c0022afa:	50                   	push   eax
c0022afb:	e8 fc ba fe ff       	call   c000e5fc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022b00:	83 c4 10             	add    esp,0x10
c0022b03:	b8 00 00 00 00       	mov    eax,0x0
c0022b08:	83 c4 0c             	add    esp,0xc
c0022b0b:	c3                   	ret    

c0022b0c <PIT::PIT()>:
c0022b0c:	83 ec 0c             	sub    esp,0xc
c0022b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b13:	83 ec 08             	sub    esp,0x8
c0022b16:	68 e8 7d 02 c0       	push   0xc0027de8
c0022b1b:	50                   	push   eax
c0022b1c:	e8 4b e4 fe ff       	call   c0010f6c <Timer::Timer(char const*)>
c0022b21:	83 c4 10             	add    esp,0x10
c0022b24:	ba 10 7e 02 c0       	mov    edx,0xc0027e10
c0022b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b2d:	89 10                	mov    DWORD PTR [eax],edx
c0022b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b39:	0f b6 d0             	movzx  edx,al
c0022b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b40:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b51:	0f b6 d0             	movzx  edx,al
c0022b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b58:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022b67:	8d 50 01             	lea    edx,[eax+0x1]
c0022b6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b6e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022b74:	0f b6 d0             	movzx  edx,al
c0022b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022b7f:	83 e1 3f             	and    ecx,0x3f
c0022b82:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022b86:	90                   	nop
c0022b87:	83 c4 0c             	add    esp,0xc
c0022b8a:	c3                   	ret    
c0022b8b:	66 90                	xchg   ax,ax
c0022b8d:	66 90                	xchg   ax,ax
c0022b8f:	90                   	nop

c0022b90 <avxDetect>:
c0022b90:	b8 01 00 00 00       	mov    eax,0x1
c0022b95:	0f a2                	cpuid  
c0022b97:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0022b9d:	74 15                	je     c0022bb4 <avxDetect.noAVX>
c0022b9f:	b8 01 00 00 00       	mov    eax,0x1
c0022ba4:	0f a2                	cpuid  
c0022ba6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0022bac:	74 06                	je     c0022bb4 <avxDetect.noAVX>
c0022bae:	b8 01 00 00 00       	mov    eax,0x1
c0022bb3:	c3                   	ret    

c0022bb4 <avxDetect.noAVX>:
c0022bb4:	b8 00 00 00 00       	mov    eax,0x0
c0022bb9:	c3                   	ret    

c0022bba <avxSave>:
c0022bba:	53                   	push   ebx
c0022bbb:	52                   	push   edx
c0022bbc:	31 c0                	xor    eax,eax
c0022bbe:	48                   	dec    eax
c0022bbf:	89 c2                	mov    edx,eax
c0022bc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022bc5:	0f ae 23             	xsave  [ebx]
c0022bc8:	5a                   	pop    edx
c0022bc9:	5b                   	pop    ebx
c0022bca:	c3                   	ret    

c0022bcb <avxLoad>:
c0022bcb:	53                   	push   ebx
c0022bcc:	52                   	push   edx
c0022bcd:	31 c0                	xor    eax,eax
c0022bcf:	48                   	dec    eax
c0022bd0:	89 c2                	mov    edx,eax
c0022bd2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022bd6:	0f ae 2b             	xrstor [ebx]
c0022bd9:	5a                   	pop    edx
c0022bda:	5b                   	pop    ebx
c0022bdb:	c3                   	ret    

c0022bdc <avxInit>:
c0022bdc:	e8 67 00 00 00       	call   c0022c48 <sseInit>
c0022be1:	50                   	push   eax
c0022be2:	51                   	push   ecx
c0022be3:	0f 20 e0             	mov    eax,cr4
c0022be6:	0d 00 00 04 00       	or     eax,0x40000
c0022beb:	0f 22 e0             	mov    cr4,eax
c0022bee:	31 c9                	xor    ecx,ecx
c0022bf0:	0f 01 d0             	xgetbv 
c0022bf3:	0d 07 00 00 00       	or     eax,0x7
c0022bf8:	0f 01 d1             	xsetbv 
c0022bfb:	59                   	pop    ecx
c0022bfc:	58                   	pop    eax
c0022bfd:	c3                   	ret    

c0022bfe <avxClose>:
c0022bfe:	c3                   	ret    

c0022bff <wouldSheSayYes>:
c0022bff:	c3                   	ret    
c0022c00:	49                   	dec    ecx
c0022c01:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022c05:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022c09:	75 20                	jne    c0022c2b <absolutelyNoChanceInHell+0xb>
c0022c0b:	4e                   	dec    esi
c0022c0c:	79 61                	jns    c0022c6f <x87Detect+0x9>
c0022c0e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022c13:	66 90                	xchg   ax,ax
c0022c15:	66 90                	xchg   ax,ax
c0022c17:	66 90                	xchg   ax,ax
c0022c19:	66 90                	xchg   ax,ax
c0022c1b:	66 90                	xchg   ax,ax
c0022c1d:	66 90                	xchg   ax,ax
c0022c1f:	90                   	nop

c0022c20 <absolutelyNoChanceInHell>:
c0022c20:	b8 01 00 00 00       	mov    eax,0x1
c0022c25:	0f a2                	cpuid  
c0022c27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022c2d:	74 06                	je     c0022c35 <sseDetect.noSSE>
c0022c2f:	b8 01 00 00 00       	mov    eax,0x1
c0022c34:	c3                   	ret    

c0022c35 <sseDetect.noSSE>:
c0022c35:	31 c0                	xor    eax,eax
c0022c37:	c3                   	ret    

c0022c38 <sseSave>:
c0022c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c3c:	0f ae 00             	fxsave [eax]
c0022c3f:	c3                   	ret    

c0022c40 <sseLoad>:
c0022c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c44:	0f ae 08             	fxrstor [eax]
c0022c47:	c3                   	ret    

c0022c48 <sseInit>:
c0022c48:	e8 42 00 00 00       	call   c0022c8f <x87Init>
c0022c4d:	0f 20 e0             	mov    eax,cr4
c0022c50:	66 0d 00 06          	or     ax,0x600
c0022c54:	0f 22 e0             	mov    cr4,eax
c0022c57:	c3                   	ret    

c0022c58 <sseClose>:
c0022c58:	c3                   	ret    
c0022c59:	66 90                	xchg   ax,ax
c0022c5b:	66 90                	xchg   ax,ax
c0022c5d:	66 90                	xchg   ax,ax
c0022c5f:	90                   	nop

c0022c60 <value_37F>:
c0022c60:	7f 03                	jg     c0022c65 <value_37A+0x1>

c0022c62 <value_37E>:
c0022c62:	7e 03                	jle    c0022c67 <x87Detect+0x1>

c0022c64 <value_37A>:
c0022c64:	7a 03                	jp     c0022c69 <x87Detect+0x3>

c0022c66 <x87Detect>:
c0022c66:	b8 01 00 00 00       	mov    eax,0x1
c0022c6b:	0f a2                	cpuid  
c0022c6d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022c73:	74 06                	je     c0022c7b <x87Detect.nox87>
c0022c75:	b8 01 00 00 00       	mov    eax,0x1
c0022c7a:	c3                   	ret    

c0022c7b <x87Detect.nox87>:
c0022c7b:	b8 00 00 00 00       	mov    eax,0x0
c0022c80:	c3                   	ret    

c0022c81 <x87Save>:
c0022c81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c85:	dd 30                	fnsave [eax]
c0022c87:	c3                   	ret    

c0022c88 <x87Load>:
c0022c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c8c:	dd 20                	frstor [eax]
c0022c8e:	c3                   	ret    

c0022c8f <x87Init>:
c0022c8f:	0f 20 c0             	mov    eax,cr0
c0022c92:	66 25 fb ff          	and    ax,0xfffb
c0022c96:	66 0d 22 00          	or     ax,0x22
c0022c9a:	0f 22 c0             	mov    cr0,eax
c0022c9d:	db e3                	fninit 
c0022c9f:	0f 06                	clts   
c0022ca1:	d9 2d 64 2c 02 c0    	fldcw  WORD PTR ds:0xc0022c64
c0022ca7:	c3                   	ret    

c0022ca8 <x87Close>:
c0022ca8:	c3                   	ret    
c0022ca9:	66 90                	xchg   ax,ax
c0022cab:	90                   	nop

c0022cac <__do_global_ctors_aux>:
c0022cac:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c0022cb1:	83 f8 ff             	cmp    eax,0xffffffff
c0022cb4:	74 1a                	je     c0022cd0 <__do_global_ctors_aux+0x24>
c0022cb6:	55                   	push   ebp
c0022cb7:	89 e5                	mov    ebp,esp
c0022cb9:	53                   	push   ebx
c0022cba:	52                   	push   edx
c0022cbb:	bb 48 3e 02 c0       	mov    ebx,0xc0023e48
c0022cc0:	ff d0                	call   eax
c0022cc2:	83 eb 04             	sub    ebx,0x4
c0022cc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022cc7:	83 f8 ff             	cmp    eax,0xffffffff
c0022cca:	75 f4                	jne    c0022cc0 <__do_global_ctors_aux+0x14>
c0022ccc:	58                   	pop    eax
c0022ccd:	5b                   	pop    ebx
c0022cce:	5d                   	pop    ebp
c0022ccf:	c3                   	ret    
c0022cd0:	c3                   	ret    
c0022cd1:	66 90                	xchg   ax,ax
c0022cd3:	90                   	nop

c0022cd4 <__divdi3>:
c0022cd4:	55                   	push   ebp
c0022cd5:	57                   	push   edi
c0022cd6:	56                   	push   esi
c0022cd7:	53                   	push   ebx
c0022cd8:	83 ec 1c             	sub    esp,0x1c
c0022cdb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022cdf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022ce3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022ce6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022cea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022cee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022cf2:	85 db                	test   ebx,ebx
c0022cf4:	0f 88 8e 00 00 00    	js     c0022d88 <__divdi3+0xb4>
c0022cfa:	89 dd                	mov    ebp,ebx
c0022cfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022d04:	89 d3                	mov    ebx,edx
c0022d06:	85 d2                	test   edx,edx
c0022d08:	79 0d                	jns    c0022d17 <__divdi3+0x43>
c0022d0a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022d0e:	f7 d8                	neg    eax
c0022d10:	83 d2 00             	adc    edx,0x0
c0022d13:	f7 da                	neg    edx
c0022d15:	89 d3                	mov    ebx,edx
c0022d17:	89 c7                	mov    edi,eax
c0022d19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022d1c:	85 db                	test   ebx,ebx
c0022d1e:	75 48                	jne    c0022d68 <__divdi3+0x94>
c0022d20:	39 ef                	cmp    edi,ebp
c0022d22:	76 24                	jbe    c0022d48 <__divdi3+0x74>
c0022d24:	89 ea                	mov    edx,ebp
c0022d26:	f7 f7                	div    edi
c0022d28:	89 c1                	mov    ecx,eax
c0022d2a:	31 f6                	xor    esi,esi
c0022d2c:	89 c8                	mov    eax,ecx
c0022d2e:	89 f2                	mov    edx,esi
c0022d30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022d34:	85 c9                	test   ecx,ecx
c0022d36:	74 07                	je     c0022d3f <__divdi3+0x6b>
c0022d38:	f7 d8                	neg    eax
c0022d3a:	83 d2 00             	adc    edx,0x0
c0022d3d:	f7 da                	neg    edx
c0022d3f:	83 c4 1c             	add    esp,0x1c
c0022d42:	5b                   	pop    ebx
c0022d43:	5e                   	pop    esi
c0022d44:	5f                   	pop    edi
c0022d45:	5d                   	pop    ebp
c0022d46:	c3                   	ret    
c0022d47:	90                   	nop
c0022d48:	85 ff                	test   edi,edi
c0022d4a:	75 0b                	jne    c0022d57 <__divdi3+0x83>
c0022d4c:	b8 01 00 00 00       	mov    eax,0x1
c0022d51:	31 d2                	xor    edx,edx
c0022d53:	f7 f3                	div    ebx
c0022d55:	89 c7                	mov    edi,eax
c0022d57:	31 d2                	xor    edx,edx
c0022d59:	89 e8                	mov    eax,ebp
c0022d5b:	f7 f7                	div    edi
c0022d5d:	89 c6                	mov    esi,eax
c0022d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022d62:	f7 f7                	div    edi
c0022d64:	89 c1                	mov    ecx,eax
c0022d66:	eb c4                	jmp    c0022d2c <__divdi3+0x58>
c0022d68:	39 eb                	cmp    ebx,ebp
c0022d6a:	77 3c                	ja     c0022da8 <__divdi3+0xd4>
c0022d6c:	0f bd f3             	bsr    esi,ebx
c0022d6f:	83 f6 1f             	xor    esi,0x1f
c0022d72:	75 40                	jne    c0022db4 <__divdi3+0xe0>
c0022d74:	39 eb                	cmp    ebx,ebp
c0022d76:	72 09                	jb     c0022d81 <__divdi3+0xad>
c0022d78:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022d7b:	0f 87 97 00 00 00    	ja     c0022e18 <__divdi3+0x144>
c0022d81:	b9 01 00 00 00       	mov    ecx,0x1
c0022d86:	eb a4                	jmp    c0022d2c <__divdi3+0x58>
c0022d88:	f7 d9                	neg    ecx
c0022d8a:	83 d3 00             	adc    ebx,0x0
c0022d8d:	f7 db                	neg    ebx
c0022d8f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022d92:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022d96:	89 dd                	mov    ebp,ebx
c0022d98:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022da0:	e9 5f ff ff ff       	jmp    c0022d04 <__divdi3+0x30>
c0022da5:	8d 76 00             	lea    esi,[esi+0x0]
c0022da8:	31 f6                	xor    esi,esi
c0022daa:	31 c9                	xor    ecx,ecx
c0022dac:	e9 7b ff ff ff       	jmp    c0022d2c <__divdi3+0x58>
c0022db1:	8d 76 00             	lea    esi,[esi+0x0]
c0022db4:	b8 20 00 00 00       	mov    eax,0x20
c0022db9:	29 f0                	sub    eax,esi
c0022dbb:	89 f1                	mov    ecx,esi
c0022dbd:	d3 e3                	shl    ebx,cl
c0022dbf:	89 fa                	mov    edx,edi
c0022dc1:	88 c1                	mov    cl,al
c0022dc3:	d3 ea                	shr    edx,cl
c0022dc5:	09 da                	or     edx,ebx
c0022dc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022dcb:	89 f1                	mov    ecx,esi
c0022dcd:	d3 e7                	shl    edi,cl
c0022dcf:	89 eb                	mov    ebx,ebp
c0022dd1:	88 c1                	mov    cl,al
c0022dd3:	d3 eb                	shr    ebx,cl
c0022dd5:	89 f1                	mov    ecx,esi
c0022dd7:	d3 e5                	shl    ebp,cl
c0022dd9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022ddc:	88 c1                	mov    cl,al
c0022dde:	d3 ea                	shr    edx,cl
c0022de0:	09 d5                	or     ebp,edx
c0022de2:	89 e8                	mov    eax,ebp
c0022de4:	89 da                	mov    edx,ebx
c0022de6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022dea:	89 d3                	mov    ebx,edx
c0022dec:	89 c5                	mov    ebp,eax
c0022dee:	f7 e7                	mul    edi
c0022df0:	39 d3                	cmp    ebx,edx
c0022df2:	72 18                	jb     c0022e0c <__divdi3+0x138>
c0022df4:	74 0a                	je     c0022e00 <__divdi3+0x12c>
c0022df6:	89 e9                	mov    ecx,ebp
c0022df8:	31 f6                	xor    esi,esi
c0022dfa:	e9 2d ff ff ff       	jmp    c0022d2c <__divdi3+0x58>
c0022dff:	90                   	nop
c0022e00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022e03:	89 f1                	mov    ecx,esi
c0022e05:	d3 e7                	shl    edi,cl
c0022e07:	39 c7                	cmp    edi,eax
c0022e09:	73 eb                	jae    c0022df6 <__divdi3+0x122>
c0022e0b:	90                   	nop
c0022e0c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022e0f:	31 f6                	xor    esi,esi
c0022e11:	e9 16 ff ff ff       	jmp    c0022d2c <__divdi3+0x58>
c0022e16:	66 90                	xchg   ax,ax
c0022e18:	31 c9                	xor    ecx,ecx
c0022e1a:	e9 0d ff ff ff       	jmp    c0022d2c <__divdi3+0x58>
c0022e1f:	90                   	nop

c0022e20 <__moddi3>:
c0022e20:	55                   	push   ebp
c0022e21:	57                   	push   edi
c0022e22:	56                   	push   esi
c0022e23:	53                   	push   ebx
c0022e24:	83 ec 2c             	sub    esp,0x2c
c0022e27:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022e2b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022e2f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022e33:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022e37:	85 db                	test   ebx,ebx
c0022e39:	0f 88 85 00 00 00    	js     c0022ec4 <__moddi3+0xa4>
c0022e3f:	89 de                	mov    esi,ebx
c0022e41:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022e49:	89 d7                	mov    edi,edx
c0022e4b:	85 d2                	test   edx,edx
c0022e4d:	79 09                	jns    c0022e58 <__moddi3+0x38>
c0022e4f:	f7 d8                	neg    eax
c0022e51:	83 d2 00             	adc    edx,0x0
c0022e54:	f7 da                	neg    edx
c0022e56:	89 d7                	mov    edi,edx
c0022e58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e5c:	89 cd                	mov    ebp,ecx
c0022e5e:	85 ff                	test   edi,edi
c0022e60:	75 52                	jne    c0022eb4 <__moddi3+0x94>
c0022e62:	89 c3                	mov    ebx,eax
c0022e64:	39 f0                	cmp    eax,esi
c0022e66:	76 24                	jbe    c0022e8c <__moddi3+0x6c>
c0022e68:	89 c8                	mov    eax,ecx
c0022e6a:	89 f2                	mov    edx,esi
c0022e6c:	f7 f3                	div    ebx
c0022e6e:	89 d6                	mov    esi,edx
c0022e70:	89 f0                	mov    eax,esi
c0022e72:	31 d2                	xor    edx,edx
c0022e74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e78:	85 c9                	test   ecx,ecx
c0022e7a:	74 07                	je     c0022e83 <__moddi3+0x63>
c0022e7c:	f7 d8                	neg    eax
c0022e7e:	83 d2 00             	adc    edx,0x0
c0022e81:	f7 da                	neg    edx
c0022e83:	83 c4 2c             	add    esp,0x2c
c0022e86:	5b                   	pop    ebx
c0022e87:	5e                   	pop    esi
c0022e88:	5f                   	pop    edi
c0022e89:	5d                   	pop    ebp
c0022e8a:	c3                   	ret    
c0022e8b:	90                   	nop
c0022e8c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022e90:	85 db                	test   ebx,ebx
c0022e92:	75 0d                	jne    c0022ea1 <__moddi3+0x81>
c0022e94:	b8 01 00 00 00       	mov    eax,0x1
c0022e99:	31 d2                	xor    edx,edx
c0022e9b:	f7 f7                	div    edi
c0022e9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ea1:	89 f0                	mov    eax,esi
c0022ea3:	31 d2                	xor    edx,edx
c0022ea5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ea9:	f7 f7                	div    edi
c0022eab:	89 e8                	mov    eax,ebp
c0022ead:	f7 f7                	div    edi
c0022eaf:	89 d6                	mov    esi,edx
c0022eb1:	eb bd                	jmp    c0022e70 <__moddi3+0x50>
c0022eb3:	90                   	nop
c0022eb4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022eb8:	39 f7                	cmp    edi,esi
c0022eba:	76 20                	jbe    c0022edc <__moddi3+0xbc>
c0022ebc:	89 c8                	mov    eax,ecx
c0022ebe:	89 f2                	mov    edx,esi
c0022ec0:	eb b2                	jmp    c0022e74 <__moddi3+0x54>
c0022ec2:	66 90                	xchg   ax,ax
c0022ec4:	f7 d9                	neg    ecx
c0022ec6:	83 d3 00             	adc    ebx,0x0
c0022ec9:	f7 db                	neg    ebx
c0022ecb:	89 de                	mov    esi,ebx
c0022ecd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022ed5:	e9 6f ff ff ff       	jmp    c0022e49 <__moddi3+0x29>
c0022eda:	66 90                	xchg   ax,ax
c0022edc:	0f bd c7             	bsr    eax,edi
c0022edf:	83 f0 1f             	xor    eax,0x1f
c0022ee2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022ee6:	75 24                	jne    c0022f0c <__moddi3+0xec>
c0022ee8:	39 f7                	cmp    edi,esi
c0022eea:	72 06                	jb     c0022ef2 <__moddi3+0xd2>
c0022eec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022ef0:	77 0c                	ja     c0022efe <__moddi3+0xde>
c0022ef2:	89 e9                	mov    ecx,ebp
c0022ef4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022ef8:	19 fe                	sbb    esi,edi
c0022efa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022efe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f02:	89 f2                	mov    edx,esi
c0022f04:	e9 6b ff ff ff       	jmp    c0022e74 <__moddi3+0x54>
c0022f09:	8d 76 00             	lea    esi,[esi+0x0]
c0022f0c:	b8 20 00 00 00       	mov    eax,0x20
c0022f11:	89 c2                	mov    edx,eax
c0022f13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022f17:	29 da                	sub    edx,ebx
c0022f19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022f1d:	88 d9                	mov    cl,bl
c0022f1f:	d3 e7                	shl    edi,cl
c0022f21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f25:	88 d1                	mov    cl,dl
c0022f27:	d3 e8                	shr    eax,cl
c0022f29:	09 c7                	or     edi,eax
c0022f2b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022f2f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022f33:	89 d8                	mov    eax,ebx
c0022f35:	88 d9                	mov    cl,bl
c0022f37:	d3 e7                	shl    edi,cl
c0022f39:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022f3d:	89 f3                	mov    ebx,esi
c0022f3f:	88 d1                	mov    cl,dl
c0022f41:	d3 eb                	shr    ebx,cl
c0022f43:	89 c7                	mov    edi,eax
c0022f45:	88 c1                	mov    cl,al
c0022f47:	d3 e6                	shl    esi,cl
c0022f49:	89 e8                	mov    eax,ebp
c0022f4b:	88 d1                	mov    cl,dl
c0022f4d:	d3 e8                	shr    eax,cl
c0022f4f:	09 f0                	or     eax,esi
c0022f51:	89 f9                	mov    ecx,edi
c0022f53:	d3 e5                	shl    ebp,cl
c0022f55:	89 da                	mov    edx,ebx
c0022f57:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022f5b:	89 d3                	mov    ebx,edx
c0022f5d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022f61:	89 c6                	mov    esi,eax
c0022f63:	89 d1                	mov    ecx,edx
c0022f65:	39 d3                	cmp    ebx,edx
c0022f67:	72 27                	jb     c0022f90 <__moddi3+0x170>
c0022f69:	74 21                	je     c0022f8c <__moddi3+0x16c>
c0022f6b:	29 f5                	sub    ebp,esi
c0022f6d:	19 cb                	sbb    ebx,ecx
c0022f6f:	89 de                	mov    esi,ebx
c0022f71:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022f75:	d3 e6                	shl    esi,cl
c0022f77:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022f7b:	89 f9                	mov    ecx,edi
c0022f7d:	d3 ed                	shr    ebp,cl
c0022f7f:	09 ee                	or     esi,ebp
c0022f81:	89 f0                	mov    eax,esi
c0022f83:	d3 eb                	shr    ebx,cl
c0022f85:	89 da                	mov    edx,ebx
c0022f87:	e9 e8 fe ff ff       	jmp    c0022e74 <__moddi3+0x54>
c0022f8c:	39 c5                	cmp    ebp,eax
c0022f8e:	73 db                	jae    c0022f6b <__moddi3+0x14b>
c0022f90:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022f94:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022f98:	89 d1                	mov    ecx,edx
c0022f9a:	89 c6                	mov    esi,eax
c0022f9c:	eb cd                	jmp    c0022f6b <__moddi3+0x14b>
c0022f9e:	66 90                	xchg   ax,ax

c0022fa0 <__udivdi3>:
c0022fa0:	55                   	push   ebp
c0022fa1:	57                   	push   edi
c0022fa2:	56                   	push   esi
c0022fa3:	53                   	push   ebx
c0022fa4:	83 ec 1c             	sub    esp,0x1c
c0022fa7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022fab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022faf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022fb3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022fb7:	85 d2                	test   edx,edx
c0022fb9:	75 41                	jne    c0022ffc <__udivdi3+0x5c>
c0022fbb:	39 f7                	cmp    edi,esi
c0022fbd:	76 15                	jbe    c0022fd4 <__udivdi3+0x34>
c0022fbf:	89 e8                	mov    eax,ebp
c0022fc1:	89 f2                	mov    edx,esi
c0022fc3:	f7 f7                	div    edi
c0022fc5:	31 db                	xor    ebx,ebx
c0022fc7:	89 da                	mov    edx,ebx
c0022fc9:	83 c4 1c             	add    esp,0x1c
c0022fcc:	5b                   	pop    ebx
c0022fcd:	5e                   	pop    esi
c0022fce:	5f                   	pop    edi
c0022fcf:	5d                   	pop    ebp
c0022fd0:	c3                   	ret    
c0022fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0022fd4:	89 f9                	mov    ecx,edi
c0022fd6:	85 ff                	test   edi,edi
c0022fd8:	75 0b                	jne    c0022fe5 <__udivdi3+0x45>
c0022fda:	b8 01 00 00 00       	mov    eax,0x1
c0022fdf:	31 d2                	xor    edx,edx
c0022fe1:	f7 f7                	div    edi
c0022fe3:	89 c1                	mov    ecx,eax
c0022fe5:	31 d2                	xor    edx,edx
c0022fe7:	89 f0                	mov    eax,esi
c0022fe9:	f7 f1                	div    ecx
c0022feb:	89 c3                	mov    ebx,eax
c0022fed:	89 e8                	mov    eax,ebp
c0022fef:	f7 f1                	div    ecx
c0022ff1:	89 da                	mov    edx,ebx
c0022ff3:	83 c4 1c             	add    esp,0x1c
c0022ff6:	5b                   	pop    ebx
c0022ff7:	5e                   	pop    esi
c0022ff8:	5f                   	pop    edi
c0022ff9:	5d                   	pop    ebp
c0022ffa:	c3                   	ret    
c0022ffb:	90                   	nop
c0022ffc:	39 f2                	cmp    edx,esi
c0022ffe:	77 1c                	ja     c002301c <__udivdi3+0x7c>
c0023000:	0f bd da             	bsr    ebx,edx
c0023003:	83 f3 1f             	xor    ebx,0x1f
c0023006:	75 24                	jne    c002302c <__udivdi3+0x8c>
c0023008:	39 f2                	cmp    edx,esi
c002300a:	72 08                	jb     c0023014 <__udivdi3+0x74>
c002300c:	39 ef                	cmp    edi,ebp
c002300e:	0f 87 84 00 00 00    	ja     c0023098 <__udivdi3+0xf8>
c0023014:	b8 01 00 00 00       	mov    eax,0x1
c0023019:	eb ac                	jmp    c0022fc7 <__udivdi3+0x27>
c002301b:	90                   	nop
c002301c:	31 db                	xor    ebx,ebx
c002301e:	31 c0                	xor    eax,eax
c0023020:	89 da                	mov    edx,ebx
c0023022:	83 c4 1c             	add    esp,0x1c
c0023025:	5b                   	pop    ebx
c0023026:	5e                   	pop    esi
c0023027:	5f                   	pop    edi
c0023028:	5d                   	pop    ebp
c0023029:	c3                   	ret    
c002302a:	66 90                	xchg   ax,ax
c002302c:	b8 20 00 00 00       	mov    eax,0x20
c0023031:	29 d8                	sub    eax,ebx
c0023033:	88 d9                	mov    cl,bl
c0023035:	d3 e2                	shl    edx,cl
c0023037:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002303b:	89 fa                	mov    edx,edi
c002303d:	88 c1                	mov    cl,al
c002303f:	d3 ea                	shr    edx,cl
c0023041:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023045:	09 d1                	or     ecx,edx
c0023047:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002304b:	88 d9                	mov    cl,bl
c002304d:	d3 e7                	shl    edi,cl
c002304f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023053:	89 f7                	mov    edi,esi
c0023055:	88 c1                	mov    cl,al
c0023057:	d3 ef                	shr    edi,cl
c0023059:	88 d9                	mov    cl,bl
c002305b:	d3 e6                	shl    esi,cl
c002305d:	89 ea                	mov    edx,ebp
c002305f:	88 c1                	mov    cl,al
c0023061:	d3 ea                	shr    edx,cl
c0023063:	09 d6                	or     esi,edx
c0023065:	89 f0                	mov    eax,esi
c0023067:	89 fa                	mov    edx,edi
c0023069:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002306d:	89 d7                	mov    edi,edx
c002306f:	89 c6                	mov    esi,eax
c0023071:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023075:	39 d7                	cmp    edi,edx
c0023077:	72 13                	jb     c002308c <__udivdi3+0xec>
c0023079:	74 09                	je     c0023084 <__udivdi3+0xe4>
c002307b:	89 f0                	mov    eax,esi
c002307d:	31 db                	xor    ebx,ebx
c002307f:	e9 43 ff ff ff       	jmp    c0022fc7 <__udivdi3+0x27>
c0023084:	88 d9                	mov    cl,bl
c0023086:	d3 e5                	shl    ebp,cl
c0023088:	39 c5                	cmp    ebp,eax
c002308a:	73 ef                	jae    c002307b <__udivdi3+0xdb>
c002308c:	8d 46 ff             	lea    eax,[esi-0x1]
c002308f:	31 db                	xor    ebx,ebx
c0023091:	e9 31 ff ff ff       	jmp    c0022fc7 <__udivdi3+0x27>
c0023096:	66 90                	xchg   ax,ax
c0023098:	31 c0                	xor    eax,eax
c002309a:	e9 28 ff ff ff       	jmp    c0022fc7 <__udivdi3+0x27>
c002309f:	90                   	nop

c00230a0 <__umoddi3>:
c00230a0:	55                   	push   ebp
c00230a1:	57                   	push   edi
c00230a2:	56                   	push   esi
c00230a3:	53                   	push   ebx
c00230a4:	83 ec 1c             	sub    esp,0x1c
c00230a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00230af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00230b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230b7:	89 da                	mov    edx,ebx
c00230b9:	85 c0                	test   eax,eax
c00230bb:	75 37                	jne    c00230f4 <__umoddi3+0x54>
c00230bd:	39 df                	cmp    edi,ebx
c00230bf:	76 13                	jbe    c00230d4 <__umoddi3+0x34>
c00230c1:	89 f0                	mov    eax,esi
c00230c3:	f7 f7                	div    edi
c00230c5:	89 d0                	mov    eax,edx
c00230c7:	31 d2                	xor    edx,edx
c00230c9:	83 c4 1c             	add    esp,0x1c
c00230cc:	5b                   	pop    ebx
c00230cd:	5e                   	pop    esi
c00230ce:	5f                   	pop    edi
c00230cf:	5d                   	pop    ebp
c00230d0:	c3                   	ret    
c00230d1:	8d 76 00             	lea    esi,[esi+0x0]
c00230d4:	89 fd                	mov    ebp,edi
c00230d6:	85 ff                	test   edi,edi
c00230d8:	75 0b                	jne    c00230e5 <__umoddi3+0x45>
c00230da:	b8 01 00 00 00       	mov    eax,0x1
c00230df:	31 d2                	xor    edx,edx
c00230e1:	f7 f7                	div    edi
c00230e3:	89 c5                	mov    ebp,eax
c00230e5:	89 d8                	mov    eax,ebx
c00230e7:	31 d2                	xor    edx,edx
c00230e9:	f7 f5                	div    ebp
c00230eb:	89 f0                	mov    eax,esi
c00230ed:	f7 f5                	div    ebp
c00230ef:	89 d0                	mov    eax,edx
c00230f1:	eb d4                	jmp    c00230c7 <__umoddi3+0x27>
c00230f3:	90                   	nop
c00230f4:	89 f1                	mov    ecx,esi
c00230f6:	39 d8                	cmp    eax,ebx
c00230f8:	76 0a                	jbe    c0023104 <__umoddi3+0x64>
c00230fa:	89 f0                	mov    eax,esi
c00230fc:	83 c4 1c             	add    esp,0x1c
c00230ff:	5b                   	pop    ebx
c0023100:	5e                   	pop    esi
c0023101:	5f                   	pop    edi
c0023102:	5d                   	pop    ebp
c0023103:	c3                   	ret    
c0023104:	0f bd e8             	bsr    ebp,eax
c0023107:	83 f5 1f             	xor    ebp,0x1f
c002310a:	75 1c                	jne    c0023128 <__umoddi3+0x88>
c002310c:	39 d8                	cmp    eax,ebx
c002310e:	72 04                	jb     c0023114 <__umoddi3+0x74>
c0023110:	39 f7                	cmp    edi,esi
c0023112:	77 08                	ja     c002311c <__umoddi3+0x7c>
c0023114:	89 da                	mov    edx,ebx
c0023116:	29 fe                	sub    esi,edi
c0023118:	19 c2                	sbb    edx,eax
c002311a:	89 f1                	mov    ecx,esi
c002311c:	89 c8                	mov    eax,ecx
c002311e:	83 c4 1c             	add    esp,0x1c
c0023121:	5b                   	pop    ebx
c0023122:	5e                   	pop    esi
c0023123:	5f                   	pop    edi
c0023124:	5d                   	pop    ebp
c0023125:	c3                   	ret    
c0023126:	66 90                	xchg   ax,ax
c0023128:	ba 20 00 00 00       	mov    edx,0x20
c002312d:	29 ea                	sub    edx,ebp
c002312f:	89 e9                	mov    ecx,ebp
c0023131:	d3 e0                	shl    eax,cl
c0023133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023137:	89 f8                	mov    eax,edi
c0023139:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002313d:	88 d1                	mov    cl,dl
c002313f:	d3 e8                	shr    eax,cl
c0023141:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023145:	09 c1                	or     ecx,eax
c0023147:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002314b:	89 e9                	mov    ecx,ebp
c002314d:	d3 e7                	shl    edi,cl
c002314f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023153:	89 d8                	mov    eax,ebx
c0023155:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023159:	88 d1                	mov    cl,dl
c002315b:	d3 e8                	shr    eax,cl
c002315d:	89 c7                	mov    edi,eax
c002315f:	89 e9                	mov    ecx,ebp
c0023161:	d3 e3                	shl    ebx,cl
c0023163:	89 f0                	mov    eax,esi
c0023165:	88 d1                	mov    cl,dl
c0023167:	d3 e8                	shr    eax,cl
c0023169:	09 d8                	or     eax,ebx
c002316b:	89 e9                	mov    ecx,ebp
c002316d:	d3 e6                	shl    esi,cl
c002316f:	89 f3                	mov    ebx,esi
c0023171:	89 fa                	mov    edx,edi
c0023173:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023177:	89 d1                	mov    ecx,edx
c0023179:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002317d:	89 c6                	mov    esi,eax
c002317f:	89 d7                	mov    edi,edx
c0023181:	39 d1                	cmp    ecx,edx
c0023183:	72 27                	jb     c00231ac <__umoddi3+0x10c>
c0023185:	74 21                	je     c00231a8 <__umoddi3+0x108>
c0023187:	89 ca                	mov    edx,ecx
c0023189:	29 f3                	sub    ebx,esi
c002318b:	19 fa                	sbb    edx,edi
c002318d:	89 d0                	mov    eax,edx
c002318f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0023193:	d3 e0                	shl    eax,cl
c0023195:	89 e9                	mov    ecx,ebp
c0023197:	d3 eb                	shr    ebx,cl
c0023199:	09 d8                	or     eax,ebx
c002319b:	d3 ea                	shr    edx,cl
c002319d:	83 c4 1c             	add    esp,0x1c
c00231a0:	5b                   	pop    ebx
c00231a1:	5e                   	pop    esi
c00231a2:	5f                   	pop    edi
c00231a3:	5d                   	pop    ebp
c00231a4:	c3                   	ret    
c00231a5:	8d 76 00             	lea    esi,[esi+0x0]
c00231a8:	39 c3                	cmp    ebx,eax
c00231aa:	73 db                	jae    c0023187 <__umoddi3+0xe7>
c00231ac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00231b0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00231b4:	89 d7                	mov    edi,edx
c00231b6:	89 c6                	mov    esi,eax
c00231b8:	eb cd                	jmp    c0023187 <__umoddi3+0xe7>

Disassembly of section .init:

c00231ba <_init>:
c00231ba:	55                   	push   ebp
c00231bb:	89 e5                	mov    ebp,esp
c00231bd:	e8 56 cf fd ff       	call   c0000118 <frame_dummy>
c00231c2:	e8 e5 fa ff ff       	call   c0022cac <__do_global_ctors_aux>
c00231c7:	5d                   	pop    ebp
c00231c8:	c3                   	ret    

Disassembly of section .fini:

c00231c9 <_fini>:
c00231c9:	55                   	push   ebp
c00231ca:	89 e5                	mov    ebp,esp
c00231cc:	e8 d7 ce fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00231d1:	5d                   	pop    ebp
c00231d2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00231d4 <Computer::~Computer()>:
c00231d4:	83 ec 0c             	sub    esp,0xc
c00231d7:	ba 40 49 02 c0       	mov    edx,0xc0024940
c00231dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e0:	89 10                	mov    DWORD PTR [eax],edx
c00231e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e6:	83 ec 0c             	sub    esp,0xc
c00231e9:	50                   	push   eax
c00231ea:	e8 19 b3 fe ff       	call   c000e508 <Device::~Device()>
c00231ef:	83 c4 10             	add    esp,0x10
c00231f2:	90                   	nop
c00231f3:	83 c4 0c             	add    esp,0xc
c00231f6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00231f8 <Computer::~Computer()>:
c00231f8:	83 ec 0c             	sub    esp,0xc
c00231fb:	83 ec 0c             	sub    esp,0xc
c00231fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023202:	e8 cd ff ff ff       	call   c00231d4 <Computer::~Computer()>
c0023207:	83 c4 10             	add    esp,0x10
c002320a:	83 ec 08             	sub    esp,0x8
c002320d:	68 ec 01 00 00       	push   0x1ec
c0023212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023216:	e8 cb 9d fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c002321b:	83 c4 10             	add    esp,0x10
c002321e:	83 c4 0c             	add    esp,0xc
c0023221:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0023222 <idleCommon()>:
c0023222:	83 ec 0c             	sub    esp,0xc
c0023225:	fa                   	cli    
c0023226:	ff 05 e8 a0 02 c0    	inc    DWORD PTR ds:0xc002a0e8
c002322c:	e8 df 5c ff ff       	call   c0018f10 <schedule()>
c0023231:	a1 e8 a0 02 c0       	mov    eax,ds:0xc002a0e8
c0023236:	48                   	dec    eax
c0023237:	a3 e8 a0 02 c0       	mov    ds:0xc002a0e8,eax
c002323c:	75 01                	jne    c002323f <idleCommon()+0x1d>
c002323e:	fb                   	sti    
c002323f:	83 c4 0c             	add    esp,0xc
c0023242:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0023244 <LinkedList<UnixFile>::~LinkedList()>:
c0023244:	90                   	nop
c0023245:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0023246 <LinkedList<UnixFile>::LinkedList()>:
c0023246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002324a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023254:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002325b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002325f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002326a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023274:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002327b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002327f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023286:	90                   	nop
c0023287:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0023288 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0023288:	83 ec 0c             	sub    esp,0xc
c002328b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023290:	75 10                	jne    c00232a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0023292:	83 ec 0c             	sub    esp,0xc
c0023295:	68 10 4d 02 c0       	push   0xc0024d10
c002329a:	e8 0a 1f ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c002329f:	83 c4 10             	add    esp,0x10
c00232a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00232a8:	85 c0                	test   eax,eax
c00232aa:	74 34                	je     c00232e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00232ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232b3:	85 c0                	test   eax,eax
c00232b5:	74 29                	je     c00232e0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00232b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00232c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00232d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00232de:	eb 65                	jmp    c0023345 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00232e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00232e6:	85 c0                	test   eax,eax
c00232e8:	75 4b                	jne    c0023335 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00232ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232f1:	85 c0                	test   eax,eax
c00232f3:	75 40                	jne    c0023335 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00232f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232fd:	89 10                	mov    DWORD PTR [eax],edx
c00232ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023303:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023307:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002330a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002330e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023311:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002331c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002331f:	85 c0                	test   eax,eax
c0023321:	74 22                	je     c0023345 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023323:	83 ec 0c             	sub    esp,0xc
c0023326:	68 32 4d 02 c0       	push   0xc0024d32
c002332b:	e8 79 1e ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0023330:	83 c4 10             	add    esp,0x10
c0023333:	eb 10                	jmp    c0023345 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023335:	83 ec 0c             	sub    esp,0xc
c0023338:	68 3c 4d 02 c0       	push   0xc0024d3c
c002333d:	e8 67 1e ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0023342:	83 c4 10             	add    esp,0x10
c0023345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023349:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002334c:	8d 50 01             	lea    edx,[eax+0x1]
c002334f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023353:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023356:	90                   	nop
c0023357:	83 c4 0c             	add    esp,0xc
c002335a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002335c <LinkedList<UnixFile>::getFirstElement()>:
c002335c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023360:	8b 00                	mov    eax,DWORD PTR [eax]
c0023362:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0023364 <LinkedList<UnixFile>::removeFirst()>:
c0023364:	83 ec 0c             	sub    esp,0xc
c0023367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002336b:	8b 00                	mov    eax,DWORD PTR [eax]
c002336d:	85 c0                	test   eax,eax
c002336f:	75 12                	jne    c0023383 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0023371:	83 ec 0c             	sub    esp,0xc
c0023374:	68 48 4d 02 c0       	push   0xc0024d48
c0023379:	e8 2b 1e ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c002337e:	83 c4 10             	add    esp,0x10
c0023381:	eb 7e                	jmp    c0023401 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0023383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023387:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002338a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002338d:	85 c0                	test   eax,eax
c002338f:	74 10                	je     c00233a1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0023391:	83 ec 0c             	sub    esp,0xc
c0023394:	68 93 4d 02 c0       	push   0xc0024d93
c0023399:	e8 0b 1e ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c002339e:	83 c4 10             	add    esp,0x10
c00233a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00233a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233aa:	85 c0                	test   eax,eax
c00233ac:	75 33                	jne    c00233e1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00233ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00233b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00233c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233ca:	83 f8 01             	cmp    eax,0x1
c00233cd:	74 21                	je     c00233f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00233cf:	83 ec 0c             	sub    esp,0xc
c00233d2:	68 6c 4d 02 c0       	push   0xc0024d6c
c00233d7:	e8 cd 1d ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00233dc:	83 c4 10             	add    esp,0x10
c00233df:	eb 0f                	jmp    c00233f0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00233e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00233e7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00233ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ee:	89 10                	mov    DWORD PTR [eax],edx
c00233f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233f7:	8d 50 ff             	lea    edx,[eax-0x1]
c00233fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023401:	83 c4 0c             	add    esp,0xc
c0023404:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0023406 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0023406:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002340a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002340d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002340e <DriverlessDevice::~DriverlessDevice()>:
c002340e:	ba bc 55 02 c0       	mov    edx,0xc00255bc
c0023413:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023417:	89 10                	mov    DWORD PTR [eax],edx
c0023419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002341d:	50                   	push   eax
c002341e:	e8 e5 b0 fe ff       	call   c000e508 <Device::~Device()>
c0023423:	83 c4 04             	add    esp,0x4
c0023426:	90                   	nop
c0023427:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0023428 <DriverlessDevice::~DriverlessDevice()>:
c0023428:	83 ec 0c             	sub    esp,0xc
c002342b:	83 ec 0c             	sub    esp,0xc
c002342e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023432:	e8 d7 ff ff ff       	call   c002340e <DriverlessDevice::~DriverlessDevice()>
c0023437:	83 c4 10             	add    esp,0x10
c002343a:	83 ec 08             	sub    esp,0x8
c002343d:	68 58 01 00 00       	push   0x158
c0023442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023446:	e8 9b 9b fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c002344b:	83 c4 10             	add    esp,0x10
c002344e:	83 c4 0c             	add    esp,0xc
c0023451:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0023452 <LinkedList<Device>::addElement(Device*)>:
c0023452:	83 ec 0c             	sub    esp,0xc
c0023455:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002345a:	75 10                	jne    c002346c <LinkedList<Device>::addElement(Device*)+0x1a>
c002345c:	83 ec 0c             	sub    esp,0xc
c002345f:	68 10 4d 02 c0       	push   0xc0024d10
c0023464:	e8 40 1d ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0023469:	83 c4 10             	add    esp,0x10
c002346c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023470:	8b 00                	mov    eax,DWORD PTR [eax]
c0023472:	85 c0                	test   eax,eax
c0023474:	74 3a                	je     c00234b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002347a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002347d:	85 c0                	test   eax,eax
c002347f:	74 2f                	je     c00234b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023485:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023488:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002348c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0023492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023496:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002349a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002349d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234a4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00234ae:	eb 68                	jmp    c0023518 <LinkedList<Device>::addElement(Device*)+0xc6>
c00234b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00234b6:	85 c0                	test   eax,eax
c00234b8:	75 4e                	jne    c0023508 <LinkedList<Device>::addElement(Device*)+0xb6>
c00234ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234c1:	85 c0                	test   eax,eax
c00234c3:	75 43                	jne    c0023508 <LinkedList<Device>::addElement(Device*)+0xb6>
c00234c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234cd:	89 10                	mov    DWORD PTR [eax],edx
c00234cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00234da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234e1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00234eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234f2:	85 c0                	test   eax,eax
c00234f4:	74 22                	je     c0023518 <LinkedList<Device>::addElement(Device*)+0xc6>
c00234f6:	83 ec 0c             	sub    esp,0xc
c00234f9:	68 32 4d 02 c0       	push   0xc0024d32
c00234fe:	e8 a6 1c ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0023503:	83 c4 10             	add    esp,0x10
c0023506:	eb 10                	jmp    c0023518 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023508:	83 ec 0c             	sub    esp,0xc
c002350b:	68 3c 4d 02 c0       	push   0xc0024d3c
c0023510:	e8 94 1c ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0023515:	83 c4 10             	add    esp,0x10
c0023518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002351c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002351f:	8d 50 01             	lea    edx,[eax+0x1]
c0023522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023526:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023529:	90                   	nop
c002352a:	83 c4 0c             	add    esp,0xc
c002352d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002352e <LinkedList<Device>::LinkedList()>:
c002352e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023532:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002353c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023547:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002354e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023552:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002355c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023567:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002356e:	90                   	nop
c002356f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0023570 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0023570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023574:	8b 00                	mov    eax,DWORD PTR [eax]
c0023576:	85 c0                	test   eax,eax
c0023578:	75 0e                	jne    c0023588 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002357a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002357e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023581:	85 c0                	test   eax,eax
c0023583:	75 03                	jne    c0023588 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0023585:	b0 01                	mov    al,0x1
c0023587:	c3                   	ret    
c0023588:	b0 00                	mov    al,0x0
c002358a:	90                   	nop
c002358b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002358c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002358c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023590:	8b 00                	mov    eax,DWORD PTR [eax]
c0023592:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0023594 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0023594:	83 ec 0c             	sub    esp,0xc
c0023597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002359b:	8b 00                	mov    eax,DWORD PTR [eax]
c002359d:	85 c0                	test   eax,eax
c002359f:	75 17                	jne    c00235b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00235a1:	83 ec 0c             	sub    esp,0xc
c00235a4:	68 48 4d 02 c0       	push   0xc0024d48
c00235a9:	e8 fb 1b ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00235ae:	83 c4 10             	add    esp,0x10
c00235b1:	e9 92 00 00 00       	jmp    c0023648 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00235b6:	66 90                	xchg   ax,ax
c00235b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00235c2:	85 c0                	test   eax,eax
c00235c4:	0f 95 c0             	setne  al
c00235c7:	84 c0                	test   al,al
c00235c9:	74 11                	je     c00235dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00235cb:	83 ec 0c             	sub    esp,0xc
c00235ce:	68 93 4d 02 c0       	push   0xc0024d93
c00235d3:	e8 d1 1b ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00235d8:	83 c4 10             	add    esp,0x10
c00235db:	90                   	nop
c00235dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00235e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00235e5:	85 c0                	test   eax,eax
c00235e7:	0f 94 c0             	sete   al
c00235ea:	84 c0                	test   al,al
c00235ec:	74 36                	je     c0023624 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c00235ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00235f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023607:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002360a:	83 f8 01             	cmp    eax,0x1
c002360d:	74 25                	je     c0023634 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c002360f:	83 ec 0c             	sub    esp,0xc
c0023612:	68 6c 4d 02 c0       	push   0xc0024d6c
c0023617:	e8 8d 1b ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c002361c:	83 c4 10             	add    esp,0x10
c002361f:	eb 13                	jmp    c0023634 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023621:	8d 76 00             	lea    esi,[esi+0x0]
c0023624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023628:	8b 00                	mov    eax,DWORD PTR [eax]
c002362a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002362d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023631:	89 10                	mov    DWORD PTR [eax],edx
c0023633:	90                   	nop
c0023634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023638:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002363b:	8d 50 ff             	lea    edx,[eax-0x1]
c002363e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023645:	8d 76 00             	lea    esi,[esi+0x0]
c0023648:	83 c4 0c             	add    esp,0xc
c002364b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002364c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002364c:	83 ec 0c             	sub    esp,0xc
c002364f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023654:	75 12                	jne    c0023668 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0023656:	83 ec 0c             	sub    esp,0xc
c0023659:	68 10 4d 02 c0       	push   0xc0024d10
c002365e:	e8 46 1b ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0023663:	83 c4 10             	add    esp,0x10
c0023666:	66 90                	xchg   ax,ax
c0023668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002366c:	8b 00                	mov    eax,DWORD PTR [eax]
c002366e:	85 c0                	test   eax,eax
c0023670:	74 36                	je     c00236a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0023672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023676:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023679:	85 c0                	test   eax,eax
c002367b:	74 2b                	je     c00236a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002367d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023681:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023684:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023688:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002368b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002368f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023693:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002369a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002369d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00236a4:	eb 6a                	jmp    c0023710 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00236a6:	66 90                	xchg   ax,ax
c00236a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00236ae:	85 c0                	test   eax,eax
c00236b0:	75 4e                	jne    c0023700 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00236b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236b9:	85 c0                	test   eax,eax
c00236bb:	75 43                	jne    c0023700 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00236bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236c5:	89 10                	mov    DWORD PTR [eax],edx
c00236c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00236cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00236d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00236e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00236e7:	85 c0                	test   eax,eax
c00236e9:	74 25                	je     c0023710 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00236eb:	83 ec 0c             	sub    esp,0xc
c00236ee:	68 32 4d 02 c0       	push   0xc0024d32
c00236f3:	e8 b1 1a ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00236f8:	83 c4 10             	add    esp,0x10
c00236fb:	eb 13                	jmp    c0023710 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00236fd:	8d 76 00             	lea    esi,[esi+0x0]
c0023700:	83 ec 0c             	sub    esp,0xc
c0023703:	68 3c 4d 02 c0       	push   0xc0024d3c
c0023708:	e8 9c 1a ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c002370d:	83 c4 10             	add    esp,0x10
c0023710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023714:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023717:	8d 50 01             	lea    edx,[eax+0x1]
c002371a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002371e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023721:	90                   	nop
c0023722:	83 c4 0c             	add    esp,0xc
c0023725:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0023728 <ACPI::~ACPI()>:
c0023728:	83 ec 0c             	sub    esp,0xc
c002372b:	ba e4 60 02 c0       	mov    edx,0xc00260e4
c0023730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023734:	89 10                	mov    DWORD PTR [eax],edx
c0023736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002373a:	83 ec 0c             	sub    esp,0xc
c002373d:	50                   	push   eax
c002373e:	e8 c5 ad fe ff       	call   c000e508 <Device::~Device()>
c0023743:	83 c4 10             	add    esp,0x10
c0023746:	90                   	nop
c0023747:	83 c4 0c             	add    esp,0xc
c002374a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002374c <ACPI::~ACPI()>:
c002374c:	83 ec 0c             	sub    esp,0xc
c002374f:	83 ec 0c             	sub    esp,0xc
c0023752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023756:	e8 cd ff ff ff       	call   c0023728 <ACPI::~ACPI()>
c002375b:	83 c4 10             	add    esp,0x10
c002375e:	83 ec 08             	sub    esp,0x8
c0023761:	68 64 12 00 00       	push   0x1264
c0023766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002376a:	e8 77 98 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c002376f:	83 c4 10             	add    esp,0x10
c0023772:	83 c4 0c             	add    esp,0xc
c0023775:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0023778 <LinkedList<Device>::~LinkedList()>:
c0023778:	90                   	nop
c0023779:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002377c <LinkedList<Device>::isEmpty()>:
c002377c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023780:	8b 00                	mov    eax,DWORD PTR [eax]
c0023782:	85 c0                	test   eax,eax
c0023784:	75 0e                	jne    c0023794 <LinkedList<Device>::isEmpty()+0x18>
c0023786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002378a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002378d:	85 c0                	test   eax,eax
c002378f:	75 03                	jne    c0023794 <LinkedList<Device>::isEmpty()+0x18>
c0023791:	b0 01                	mov    al,0x1
c0023793:	c3                   	ret    
c0023794:	b0 00                	mov    al,0x0
c0023796:	90                   	nop
c0023797:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0023798 <LinkedList<Device>::getFirstElement()>:
c0023798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002379c:	8b 00                	mov    eax,DWORD PTR [eax]
c002379e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00237a0 <LinkedList<Device>::removeFirst()>:
c00237a0:	83 ec 0c             	sub    esp,0xc
c00237a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00237a9:	85 c0                	test   eax,eax
c00237ab:	75 17                	jne    c00237c4 <LinkedList<Device>::removeFirst()+0x24>
c00237ad:	83 ec 0c             	sub    esp,0xc
c00237b0:	68 48 4d 02 c0       	push   0xc0024d48
c00237b5:	e8 ef 19 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00237ba:	83 c4 10             	add    esp,0x10
c00237bd:	e9 92 00 00 00       	jmp    c0023854 <LinkedList<Device>::removeFirst()+0xb4>
c00237c2:	66 90                	xchg   ax,ax
c00237c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00237cb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00237d1:	85 c0                	test   eax,eax
c00237d3:	74 13                	je     c00237e8 <LinkedList<Device>::removeFirst()+0x48>
c00237d5:	83 ec 0c             	sub    esp,0xc
c00237d8:	68 93 4d 02 c0       	push   0xc0024d93
c00237dd:	e8 c7 19 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c00237e2:	83 c4 10             	add    esp,0x10
c00237e5:	8d 76 00             	lea    esi,[esi+0x0]
c00237e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00237ee:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00237f4:	85 c0                	test   eax,eax
c00237f6:	75 34                	jne    c002382c <LinkedList<Device>::removeFirst()+0x8c>
c00237f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023806:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002380d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023811:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023814:	83 f8 01             	cmp    eax,0x1
c0023817:	74 27                	je     c0023840 <LinkedList<Device>::removeFirst()+0xa0>
c0023819:	83 ec 0c             	sub    esp,0xc
c002381c:	68 6c 4d 02 c0       	push   0xc0024d6c
c0023821:	e8 83 19 ff ff       	call   c00151a9 <Krnl::panic(char const*)>
c0023826:	83 c4 10             	add    esp,0x10
c0023829:	eb 15                	jmp    c0023840 <LinkedList<Device>::removeFirst()+0xa0>
c002382b:	90                   	nop
c002382c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023830:	8b 00                	mov    eax,DWORD PTR [eax]
c0023832:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0023838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002383c:	89 10                	mov    DWORD PTR [eax],edx
c002383e:	66 90                	xchg   ax,ax
c0023840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023844:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023847:	8d 50 ff             	lea    edx,[eax-0x1]
c002384a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002384e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023851:	8d 76 00             	lea    esi,[esi+0x0]
c0023854:	83 c4 0c             	add    esp,0xc
c0023857:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0023858 <CPU::~CPU()>:
c0023858:	83 ec 0c             	sub    esp,0xc
c002385b:	ba 74 66 02 c0       	mov    edx,0xc0026674
c0023860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023864:	89 10                	mov    DWORD PTR [eax],edx
c0023866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002386a:	83 ec 0c             	sub    esp,0xc
c002386d:	50                   	push   eax
c002386e:	e8 95 ac fe ff       	call   c000e508 <Device::~Device()>
c0023873:	83 c4 10             	add    esp,0x10
c0023876:	90                   	nop
c0023877:	83 c4 0c             	add    esp,0xc
c002387a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002387c <CPU::~CPU()>:
c002387c:	83 ec 0c             	sub    esp,0xc
c002387f:	83 ec 0c             	sub    esp,0xc
c0023882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023886:	e8 cd ff ff ff       	call   c0023858 <CPU::~CPU()>
c002388b:	83 c4 10             	add    esp,0x10
c002388e:	83 ec 08             	sub    esp,0x8
c0023891:	68 98 11 00 00       	push   0x1198
c0023896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002389a:	e8 47 97 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c002389f:	83 c4 10             	add    esp,0x10
c00238a2:	83 c4 0c             	add    esp,0xc
c00238a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00238a8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00238a8:	90                   	nop
c00238a9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00238ac <ThreadControlBlock::ThreadControlBlock()>:
c00238ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238b0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00238b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238bb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00238c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238c6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00238cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238d1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00238d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238dc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00238e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238e7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00238eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238ef:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00238f3:	90                   	nop
c00238f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00238f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00238f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023906:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002390d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023911:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002391c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023926:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002392d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023931:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023938:	90                   	nop
c0023939:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002393c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002393c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023940:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023943:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023944 <Vm::_FPUState::_FPUState()>:
c0023944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023948:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002394f:	90                   	nop
c0023950:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023952 <PCI::~PCI()>:
c0023952:	83 ec 0c             	sub    esp,0xc
c0023955:	ba 90 74 02 c0       	mov    edx,0xc0027490
c002395a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002395e:	89 10                	mov    DWORD PTR [eax],edx
c0023960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023964:	83 ec 0c             	sub    esp,0xc
c0023967:	50                   	push   eax
c0023968:	e8 6b a5 fe ff       	call   c000ded8 <Bus::~Bus()>
c002396d:	83 c4 10             	add    esp,0x10
c0023970:	90                   	nop
c0023971:	83 c4 0c             	add    esp,0xc
c0023974:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0023976 <PCI::~PCI()>:
c0023976:	83 ec 0c             	sub    esp,0xc
c0023979:	83 ec 0c             	sub    esp,0xc
c002397c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023980:	e8 cd ff ff ff       	call   c0023952 <PCI::~PCI()>
c0023985:	83 c4 10             	add    esp,0x10
c0023988:	83 ec 08             	sub    esp,0x8
c002398b:	68 5c 01 00 00       	push   0x15c
c0023990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023994:	e8 4d 96 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023999:	83 c4 10             	add    esp,0x10
c002399c:	83 c4 0c             	add    esp,0xc
c002399f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00239a0 <IDE::~IDE()>:
c00239a0:	83 ec 0c             	sub    esp,0xc
c00239a3:	ba 60 75 02 c0       	mov    edx,0xc0027560
c00239a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239ac:	89 10                	mov    DWORD PTR [eax],edx
c00239ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239b2:	83 ec 0c             	sub    esp,0xc
c00239b5:	50                   	push   eax
c00239b6:	e8 65 b0 fe ff       	call   c000ea20 <HardDiskController::~HardDiskController()>
c00239bb:	83 c4 10             	add    esp,0x10
c00239be:	90                   	nop
c00239bf:	83 c4 0c             	add    esp,0xc
c00239c2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00239c4 <IDE::~IDE()>:
c00239c4:	83 ec 0c             	sub    esp,0xc
c00239c7:	83 ec 0c             	sub    esp,0xc
c00239ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239ce:	e8 cd ff ff ff       	call   c00239a0 <IDE::~IDE()>
c00239d3:	83 c4 10             	add    esp,0x10
c00239d6:	83 ec 08             	sub    esp,0x8
c00239d9:	68 70 02 00 00       	push   0x270
c00239de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239e2:	e8 ff 95 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c00239e7:	83 c4 10             	add    esp,0x10
c00239ea:	83 c4 0c             	add    esp,0xc
c00239ed:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00239ee <SATABus::~SATABus()>:
c00239ee:	83 ec 0c             	sub    esp,0xc
c00239f1:	ba 2c 76 02 c0       	mov    edx,0xc002762c
c00239f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239fa:	89 10                	mov    DWORD PTR [eax],edx
c00239fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a00:	83 ec 0c             	sub    esp,0xc
c0023a03:	50                   	push   eax
c0023a04:	e8 17 b0 fe ff       	call   c000ea20 <HardDiskController::~HardDiskController()>
c0023a09:	83 c4 10             	add    esp,0x10
c0023a0c:	90                   	nop
c0023a0d:	83 c4 0c             	add    esp,0xc
c0023a10:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023a12 <SATABus::~SATABus()>:
c0023a12:	83 ec 0c             	sub    esp,0xc
c0023a15:	83 ec 0c             	sub    esp,0xc
c0023a18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a1c:	e8 cd ff ff ff       	call   c00239ee <SATABus::~SATABus()>
c0023a21:	83 c4 10             	add    esp,0x10
c0023a24:	83 ec 08             	sub    esp,0x8
c0023a27:	68 64 01 00 00       	push   0x164
c0023a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a30:	e8 b1 95 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023a35:	83 c4 10             	add    esp,0x10
c0023a38:	83 c4 0c             	add    esp,0xc
c0023a3b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023a3c <ATA::~ATA()>:
c0023a3c:	83 ec 0c             	sub    esp,0xc
c0023a3f:	ba a4 76 02 c0       	mov    edx,0xc00276a4
c0023a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a48:	89 10                	mov    DWORD PTR [eax],edx
c0023a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a4e:	83 ec 0c             	sub    esp,0xc
c0023a51:	50                   	push   eax
c0023a52:	e8 ab b0 fe ff       	call   c000eb02 <PhysicalDisk::~PhysicalDisk()>
c0023a57:	83 c4 10             	add    esp,0x10
c0023a5a:	90                   	nop
c0023a5b:	83 c4 0c             	add    esp,0xc
c0023a5e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023a60 <ATA::~ATA()>:
c0023a60:	83 ec 0c             	sub    esp,0xc
c0023a63:	83 ec 0c             	sub    esp,0xc
c0023a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a6a:	e8 cd ff ff ff       	call   c0023a3c <ATA::~ATA()>
c0023a6f:	83 c4 10             	add    esp,0x10
c0023a72:	83 ec 08             	sub    esp,0x8
c0023a75:	68 7c 01 00 00       	push   0x17c
c0023a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a7e:	e8 63 95 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023a83:	83 c4 10             	add    esp,0x10
c0023a86:	83 c4 0c             	add    esp,0xc
c0023a89:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0023a8a <ATAPI::~ATAPI()>:
c0023a8a:	83 ec 0c             	sub    esp,0xc
c0023a8d:	ba 1c 77 02 c0       	mov    edx,0xc002771c
c0023a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a96:	89 10                	mov    DWORD PTR [eax],edx
c0023a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a9c:	83 ec 0c             	sub    esp,0xc
c0023a9f:	50                   	push   eax
c0023aa0:	e8 5d b0 fe ff       	call   c000eb02 <PhysicalDisk::~PhysicalDisk()>
c0023aa5:	83 c4 10             	add    esp,0x10
c0023aa8:	90                   	nop
c0023aa9:	83 c4 0c             	add    esp,0xc
c0023aac:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023aae <ATAPI::~ATAPI()>:
c0023aae:	83 ec 0c             	sub    esp,0xc
c0023ab1:	83 ec 0c             	sub    esp,0xc
c0023ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ab8:	e8 cd ff ff ff       	call   c0023a8a <ATAPI::~ATAPI()>
c0023abd:	83 c4 10             	add    esp,0x10
c0023ac0:	83 ec 08             	sub    esp,0x8
c0023ac3:	68 84 01 00 00       	push   0x184
c0023ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023acc:	e8 15 95 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023ad1:	83 c4 10             	add    esp,0x10
c0023ad4:	83 c4 0c             	add    esp,0xc
c0023ad7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023ad8 <SATA::~SATA()>:
c0023ad8:	83 ec 0c             	sub    esp,0xc
c0023adb:	ba 58 79 02 c0       	mov    edx,0xc0027958
c0023ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ae4:	89 10                	mov    DWORD PTR [eax],edx
c0023ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aea:	83 ec 0c             	sub    esp,0xc
c0023aed:	50                   	push   eax
c0023aee:	e8 0f b0 fe ff       	call   c000eb02 <PhysicalDisk::~PhysicalDisk()>
c0023af3:	83 c4 10             	add    esp,0x10
c0023af6:	90                   	nop
c0023af7:	83 c4 0c             	add    esp,0xc
c0023afa:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023afc <SATA::~SATA()>:
c0023afc:	83 ec 0c             	sub    esp,0xc
c0023aff:	83 ec 0c             	sub    esp,0xc
c0023b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b06:	e8 cd ff ff ff       	call   c0023ad8 <SATA::~SATA()>
c0023b0b:	83 c4 10             	add    esp,0x10
c0023b0e:	83 ec 08             	sub    esp,0x8
c0023b11:	68 7c 01 00 00       	push   0x17c
c0023b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b1a:	e8 c7 94 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023b1f:	83 c4 10             	add    esp,0x10
c0023b22:	83 c4 0c             	add    esp,0xc
c0023b25:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023b26 <SATAPI::~SATAPI()>:
c0023b26:	83 ec 0c             	sub    esp,0xc
c0023b29:	ba c4 7a 02 c0       	mov    edx,0xc0027ac4
c0023b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b32:	89 10                	mov    DWORD PTR [eax],edx
c0023b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b38:	83 ec 0c             	sub    esp,0xc
c0023b3b:	50                   	push   eax
c0023b3c:	e8 c1 af fe ff       	call   c000eb02 <PhysicalDisk::~PhysicalDisk()>
c0023b41:	83 c4 10             	add    esp,0x10
c0023b44:	90                   	nop
c0023b45:	83 c4 0c             	add    esp,0xc
c0023b48:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0023b4a <SATAPI::~SATAPI()>:
c0023b4a:	83 ec 0c             	sub    esp,0xc
c0023b4d:	83 ec 0c             	sub    esp,0xc
c0023b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b54:	e8 cd ff ff ff       	call   c0023b26 <SATAPI::~SATAPI()>
c0023b59:	83 c4 10             	add    esp,0x10
c0023b5c:	83 ec 08             	sub    esp,0x8
c0023b5f:	68 84 01 00 00       	push   0x184
c0023b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b68:	e8 79 94 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023b6d:	83 c4 10             	add    esp,0x10
c0023b70:	83 c4 0c             	add    esp,0xc
c0023b73:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023b74 <AVX::~AVX()>:
c0023b74:	83 ec 0c             	sub    esp,0xc
c0023b77:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c0023b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b80:	89 10                	mov    DWORD PTR [eax],edx
c0023b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b86:	83 ec 0c             	sub    esp,0xc
c0023b89:	50                   	push   eax
c0023b8a:	e8 f9 af fe ff       	call   c000eb88 <FPU::~FPU()>
c0023b8f:	83 c4 10             	add    esp,0x10
c0023b92:	90                   	nop
c0023b93:	83 c4 0c             	add    esp,0xc
c0023b96:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023b98 <AVX::~AVX()>:
c0023b98:	83 ec 0c             	sub    esp,0xc
c0023b9b:	83 ec 0c             	sub    esp,0xc
c0023b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ba2:	e8 cd ff ff ff       	call   c0023b74 <AVX::~AVX()>
c0023ba7:	83 c4 10             	add    esp,0x10
c0023baa:	83 ec 08             	sub    esp,0x8
c0023bad:	68 58 01 00 00       	push   0x158
c0023bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bb6:	e8 2b 94 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023bbb:	83 c4 10             	add    esp,0x10
c0023bbe:	83 c4 0c             	add    esp,0xc
c0023bc1:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023bc4 <MMX::~MMX()>:
c0023bc4:	83 ec 0c             	sub    esp,0xc
c0023bc7:	ba 44 7b 02 c0       	mov    edx,0xc0027b44
c0023bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd0:	89 10                	mov    DWORD PTR [eax],edx
c0023bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd6:	83 ec 0c             	sub    esp,0xc
c0023bd9:	50                   	push   eax
c0023bda:	e8 a9 af fe ff       	call   c000eb88 <FPU::~FPU()>
c0023bdf:	83 c4 10             	add    esp,0x10
c0023be2:	90                   	nop
c0023be3:	83 c4 0c             	add    esp,0xc
c0023be6:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023be8 <MMX::~MMX()>:
c0023be8:	83 ec 0c             	sub    esp,0xc
c0023beb:	83 ec 0c             	sub    esp,0xc
c0023bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bf2:	e8 cd ff ff ff       	call   c0023bc4 <MMX::~MMX()>
c0023bf7:	83 c4 10             	add    esp,0x10
c0023bfa:	83 ec 08             	sub    esp,0x8
c0023bfd:	68 58 01 00 00       	push   0x158
c0023c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c06:	e8 db 93 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023c0b:	83 c4 10             	add    esp,0x10
c0023c0e:	83 c4 0c             	add    esp,0xc
c0023c11:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023c14 <SSE::~SSE()>:
c0023c14:	83 ec 0c             	sub    esp,0xc
c0023c17:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0023c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c20:	89 10                	mov    DWORD PTR [eax],edx
c0023c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c26:	83 ec 0c             	sub    esp,0xc
c0023c29:	50                   	push   eax
c0023c2a:	e8 59 af fe ff       	call   c000eb88 <FPU::~FPU()>
c0023c2f:	83 c4 10             	add    esp,0x10
c0023c32:	90                   	nop
c0023c33:	83 c4 0c             	add    esp,0xc
c0023c36:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023c38 <SSE::~SSE()>:
c0023c38:	83 ec 0c             	sub    esp,0xc
c0023c3b:	83 ec 0c             	sub    esp,0xc
c0023c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c42:	e8 cd ff ff ff       	call   c0023c14 <SSE::~SSE()>
c0023c47:	83 c4 10             	add    esp,0x10
c0023c4a:	83 ec 08             	sub    esp,0x8
c0023c4d:	68 58 01 00 00       	push   0x158
c0023c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c56:	e8 8b 93 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023c5b:	83 c4 10             	add    esp,0x10
c0023c5e:	83 c4 0c             	add    esp,0xc
c0023c61:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023c62 <x87::~x87()>:
c0023c62:	83 ec 0c             	sub    esp,0xc
c0023c65:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0023c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c6e:	89 10                	mov    DWORD PTR [eax],edx
c0023c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c74:	83 ec 0c             	sub    esp,0xc
c0023c77:	50                   	push   eax
c0023c78:	e8 0b af fe ff       	call   c000eb88 <FPU::~FPU()>
c0023c7d:	83 c4 10             	add    esp,0x10
c0023c80:	90                   	nop
c0023c81:	83 c4 0c             	add    esp,0xc
c0023c84:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023c86 <x87::~x87()>:
c0023c86:	83 ec 0c             	sub    esp,0xc
c0023c89:	83 ec 0c             	sub    esp,0xc
c0023c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c90:	e8 cd ff ff ff       	call   c0023c62 <x87::~x87()>
c0023c95:	83 c4 10             	add    esp,0x10
c0023c98:	83 ec 08             	sub    esp,0x8
c0023c9b:	68 58 01 00 00       	push   0x158
c0023ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ca4:	e8 3d 93 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023ca9:	83 c4 10             	add    esp,0x10
c0023cac:	83 c4 0c             	add    esp,0xc
c0023caf:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023cb0 <IOAPIC::~IOAPIC()>:
c0023cb0:	83 ec 0c             	sub    esp,0xc
c0023cb3:	ba 1c 7d 02 c0       	mov    edx,0xc0027d1c
c0023cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cbc:	89 10                	mov    DWORD PTR [eax],edx
c0023cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc2:	83 ec 0c             	sub    esp,0xc
c0023cc5:	50                   	push   eax
c0023cc6:	e8 3d a8 fe ff       	call   c000e508 <Device::~Device()>
c0023ccb:	83 c4 10             	add    esp,0x10
c0023cce:	90                   	nop
c0023ccf:	83 c4 0c             	add    esp,0xc
c0023cd2:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023cd4 <IOAPIC::~IOAPIC()>:
c0023cd4:	83 ec 0c             	sub    esp,0xc
c0023cd7:	83 ec 0c             	sub    esp,0xc
c0023cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cde:	e8 cd ff ff ff       	call   c0023cb0 <IOAPIC::~IOAPIC()>
c0023ce3:	83 c4 10             	add    esp,0x10
c0023ce6:	83 ec 08             	sub    esp,0x8
c0023ce9:	68 68 01 00 00       	push   0x168
c0023cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cf2:	e8 ef 92 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023cf7:	83 c4 10             	add    esp,0x10
c0023cfa:	83 c4 0c             	add    esp,0xc
c0023cfd:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023cfe <APIC::~APIC()>:
c0023cfe:	83 ec 0c             	sub    esp,0xc
c0023d01:	ba d4 7c 02 c0       	mov    edx,0xc0027cd4
c0023d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d0a:	89 10                	mov    DWORD PTR [eax],edx
c0023d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d10:	83 ec 0c             	sub    esp,0xc
c0023d13:	50                   	push   eax
c0023d14:	e8 5b b3 fe ff       	call   c000f074 <InterruptController::~InterruptController()>
c0023d19:	83 c4 10             	add    esp,0x10
c0023d1c:	90                   	nop
c0023d1d:	83 c4 0c             	add    esp,0xc
c0023d20:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023d22 <APIC::~APIC()>:
c0023d22:	83 ec 0c             	sub    esp,0xc
c0023d25:	83 ec 0c             	sub    esp,0xc
c0023d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d2c:	e8 cd ff ff ff       	call   c0023cfe <APIC::~APIC()>
c0023d31:	83 c4 10             	add    esp,0x10
c0023d34:	83 ec 08             	sub    esp,0x8
c0023d37:	68 58 21 00 00       	push   0x2158
c0023d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d40:	e8 a1 92 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023d45:	83 c4 10             	add    esp,0x10
c0023d48:	83 c4 0c             	add    esp,0xc
c0023d4b:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023d4c <PIC::~PIC()>:
c0023d4c:	83 ec 0c             	sub    esp,0xc
c0023d4f:	ba 6c 7d 02 c0       	mov    edx,0xc0027d6c
c0023d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d58:	89 10                	mov    DWORD PTR [eax],edx
c0023d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d5e:	83 ec 0c             	sub    esp,0xc
c0023d61:	50                   	push   eax
c0023d62:	e8 0d b3 fe ff       	call   c000f074 <InterruptController::~InterruptController()>
c0023d67:	83 c4 10             	add    esp,0x10
c0023d6a:	90                   	nop
c0023d6b:	83 c4 0c             	add    esp,0xc
c0023d6e:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023d70 <PIC::~PIC()>:
c0023d70:	83 ec 0c             	sub    esp,0xc
c0023d73:	83 ec 0c             	sub    esp,0xc
c0023d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d7a:	e8 cd ff ff ff       	call   c0023d4c <PIC::~PIC()>
c0023d7f:	83 c4 10             	add    esp,0x10
c0023d82:	83 ec 08             	sub    esp,0x8
c0023d85:	68 58 21 00 00       	push   0x2158
c0023d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d8e:	e8 53 92 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023d93:	83 c4 10             	add    esp,0x10
c0023d96:	83 c4 0c             	add    esp,0xc
c0023d99:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023d9c <APICTimer::~APICTimer()>:
c0023d9c:	83 ec 0c             	sub    esp,0xc
c0023d9f:	ba c0 7d 02 c0       	mov    edx,0xc0027dc0
c0023da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023da8:	89 10                	mov    DWORD PTR [eax],edx
c0023daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dae:	83 ec 0c             	sub    esp,0xc
c0023db1:	50                   	push   eax
c0023db2:	e8 ed d1 fe ff       	call   c0010fa4 <Timer::~Timer()>
c0023db7:	83 c4 10             	add    esp,0x10
c0023dba:	90                   	nop
c0023dbb:	83 c4 0c             	add    esp,0xc
c0023dbe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023dc0 <APICTimer::~APICTimer()>:
c0023dc0:	83 ec 0c             	sub    esp,0xc
c0023dc3:	83 ec 0c             	sub    esp,0xc
c0023dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dca:	e8 cd ff ff ff       	call   c0023d9c <APICTimer::~APICTimer()>
c0023dcf:	83 c4 10             	add    esp,0x10
c0023dd2:	83 ec 08             	sub    esp,0x8
c0023dd5:	68 60 01 00 00       	push   0x160
c0023dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dde:	e8 03 92 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023de3:	83 c4 10             	add    esp,0x10
c0023de6:	83 c4 0c             	add    esp,0xc
c0023de9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023dec <PIT::~PIT()>:
c0023dec:	83 ec 0c             	sub    esp,0xc
c0023def:	ba 10 7e 02 c0       	mov    edx,0xc0027e10
c0023df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023df8:	89 10                	mov    DWORD PTR [eax],edx
c0023dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dfe:	83 ec 0c             	sub    esp,0xc
c0023e01:	50                   	push   eax
c0023e02:	e8 9d d1 fe ff       	call   c0010fa4 <Timer::~Timer()>
c0023e07:	83 c4 10             	add    esp,0x10
c0023e0a:	90                   	nop
c0023e0b:	83 c4 0c             	add    esp,0xc
c0023e0e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023e10 <PIT::~PIT()>:
c0023e10:	83 ec 0c             	sub    esp,0xc
c0023e13:	83 ec 0c             	sub    esp,0xc
c0023e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e1a:	e8 cd ff ff ff       	call   c0023dec <PIT::~PIT()>
c0023e1f:	83 c4 10             	add    esp,0x10
c0023e22:	83 ec 08             	sub    esp,0x8
c0023e25:	68 5c 01 00 00       	push   0x15c
c0023e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e2e:	e8 b3 91 fe ff       	call   c000cfe6 <operator delete(void*, unsigned long)>
c0023e33:	83 c4 10             	add    esp,0x10
c0023e36:	83 c4 0c             	add    esp,0xc
c0023e39:	c3                   	ret    
