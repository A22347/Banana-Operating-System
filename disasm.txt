
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 59 fc 00 00       	call   c000fc79 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 90 02 00       	call   c0029038 <_init>
c0000025:	c3                   	ret    
c0000026:	bb ce 9c 02 c0       	mov    ebx,0xc0029cce
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb dc 9c 02 c0    	cmp    ebx,0xc0029cdc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 e6 02 c0       	mov    eax,0xc002e638
c0000049:	3d 38 e6 02 c0       	cmp    eax,0xc002e638
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 e6 02 c0       	push   0xc002e638
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 e6 02 c0       	mov    eax,0xc002e638
c0000075:	2d 38 e6 02 c0       	sub    eax,0xc002e638
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 e6 02 c0       	push   0xc002e638
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 ec 02 c0 00 	cmp    BYTE PTR ds:0xc002ec68,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e4 9c 02 c0       	mov    ebx,0xc0029ce4
c00000bb:	81 eb e0 9c 02 c0    	sub    ebx,0xc0029ce0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be e0 9c 02 c0       	mov    esi,0xc0029ce0
c00000ca:	a1 6c ec 02 c0       	mov    eax,ds:0xc002ec6c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c ec 02 c0       	mov    ds:0xc002ec6c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c ec 02 c0       	mov    eax,ds:0xc002ec6c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 e6 02 c0       	push   0xc002e638
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec68,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 ec 02 c0       	push   0xc002ec70
c000012c:	68 38 e6 02 c0       	push   0xc002e638
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 43 db 01 00       	call   c001dee6 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 c2 28 01 00       	call   c0012c7d <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 21 db 01 00       	call   c001dee6 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 c9 df 01 00       	call   c001e3ad <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 27 e6 01 00       	call   c001ea14 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 b0 f0 02 c0 	lgdtd  ds:0xc002f0b0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 a7 45 01 00       	call   c0014b89 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <hexStrToInt>:
c0000646:	56                   	push   esi
c0000647:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064b:	31 d2                	xor    edx,edx

c000064d <hexStrToInt.looping>:
c000064d:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064e:	84 c0                	test   al,al
c0000650:	74 0d                	je     c000065f <hexStrToInt.end>
c0000652:	d4 40                	aam    0x40
c0000654:	d5 39                	aad    0x39
c0000656:	2c 30                	sub    al,0x30
c0000658:	c1 e2 04             	shl    edx,0x4
c000065b:	08 c2                	or     dl,al
c000065d:	eb ee                	jmp    c000064d <hexStrToInt.looping>

c000065f <hexStrToInt.end>:
c000065f:	89 d0                	mov    eax,edx
c0000661:	5e                   	pop    esi
c0000662:	c3                   	ret    

c0000663 <memcpy>:
c0000663:	e9 de de 00 00       	jmp    c000e546 <__not_memcpy>

c0000668 <memcmp>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000676:	85 f6                	test   esi,esi
c0000678:	74 1d                	je     c0000697 <memcmp+0x2f>
c000067a:	8a 08                	mov    cl,BYTE PTR [eax]
c000067c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067f:	38 cb                	cmp    bl,cl
c0000681:	75 19                	jne    c000069c <memcmp+0x34>
c0000683:	01 c6                	add    esi,eax
c0000685:	eb 0a                	jmp    c0000691 <memcmp+0x29>
c0000687:	90                   	nop
c0000688:	8a 08                	mov    cl,BYTE PTR [eax]
c000068a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068d:	38 d9                	cmp    cl,bl
c000068f:	75 0b                	jne    c000069c <memcmp+0x34>
c0000691:	40                   	inc    eax
c0000692:	42                   	inc    edx
c0000693:	39 f0                	cmp    eax,esi
c0000695:	75 f1                	jne    c0000688 <memcmp+0x20>
c0000697:	31 c0                	xor    eax,eax
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    
c000069c:	0f b6 c1             	movzx  eax,cl
c000069f:	29 d8                	sub    eax,ebx
c00006a1:	5b                   	pop    ebx
c00006a2:	5e                   	pop    esi
c00006a3:	c3                   	ret    

c00006a4 <memmove>:
c00006a4:	55                   	push   ebp
c00006a5:	57                   	push   edi
c00006a6:	56                   	push   esi
c00006a7:	53                   	push   ebx
c00006a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b4:	39 dd                	cmp    ebp,ebx
c00006b6:	0f 83 80 00 00 00    	jae    c000073c <memmove+0x98>
c00006bc:	85 d2                	test   edx,edx
c00006be:	74 74                	je     c0000734 <memmove+0x90>
c00006c0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006c3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c6:	39 cd                	cmp    ebp,ecx
c00006c8:	0f 93 c1             	setae  cl
c00006cb:	39 f3                	cmp    ebx,esi
c00006cd:	0f 93 c0             	setae  al
c00006d0:	89 c6                	mov    esi,eax
c00006d2:	09 ce                	or     esi,ecx
c00006d4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d7:	89 f0                	mov    eax,esi
c00006d9:	83 f9 0c             	cmp    ecx,0xc
c00006dc:	0f 97 c1             	seta   cl
c00006df:	84 c8                	test   al,cl
c00006e1:	74 75                	je     c0000758 <memmove+0xb4>
c00006e3:	89 e9                	mov    ecx,ebp
c00006e5:	09 d9                	or     ecx,ebx
c00006e7:	83 e1 03             	and    ecx,0x3
c00006ea:	75 6c                	jne    c0000758 <memmove+0xb4>
c00006ec:	89 d7                	mov    edi,edx
c00006ee:	89 d9                	mov    ecx,ebx
c00006f0:	83 e7 fc             	and    edi,0xfffffffc
c00006f3:	89 ee                	mov    esi,ebp
c00006f5:	01 df                	add    edi,ebx
c00006f7:	90                   	nop
c00006f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006fa:	83 c6 04             	add    esi,0x4
c00006fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000700:	83 c1 04             	add    ecx,0x4
c0000703:	39 f9                	cmp    ecx,edi
c0000705:	75 f1                	jne    c00006f8 <memmove+0x54>
c0000707:	89 d1                	mov    ecx,edx
c0000709:	89 d7                	mov    edi,edx
c000070b:	83 e1 fc             	and    ecx,0xfffffffc
c000070e:	29 cf                	sub    edi,ecx
c0000710:	01 cb                	add    ebx,ecx
c0000712:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000716:	39 ca                	cmp    edx,ecx
c0000718:	74 1a                	je     c0000734 <memmove+0x90>
c000071a:	8a 03                	mov    al,BYTE PTR [ebx]
c000071c:	83 ff 01             	cmp    edi,0x1
c000071f:	88 06                	mov    BYTE PTR [esi],al
c0000721:	74 11                	je     c0000734 <memmove+0x90>
c0000723:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000726:	83 ff 02             	cmp    edi,0x2
c0000729:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000072c:	74 06                	je     c0000734 <memmove+0x90>
c000072e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000731:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000734:	5b                   	pop    ebx
c0000735:	89 e8                	mov    eax,ebp
c0000737:	5e                   	pop    esi
c0000738:	5f                   	pop    edi
c0000739:	5d                   	pop    ebp
c000073a:	c3                   	ret    
c000073b:	90                   	nop
c000073c:	76 f6                	jbe    c0000734 <memmove+0x90>
c000073e:	85 d2                	test   edx,edx
c0000740:	74 f2                	je     c0000734 <memmove+0x90>
c0000742:	4b                   	dec    ebx
c0000743:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000746:	66 90                	xchg   ax,ax
c0000748:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000074b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074e:	4a                   	dec    edx
c000074f:	75 f7                	jne    c0000748 <memmove+0xa4>
c0000751:	5b                   	pop    ebx
c0000752:	89 e8                	mov    eax,ebp
c0000754:	5e                   	pop    esi
c0000755:	5f                   	pop    edi
c0000756:	5d                   	pop    ebp
c0000757:	c3                   	ret    
c0000758:	01 ea                	add    edx,ebp
c000075a:	89 e9                	mov    ecx,ebp
c000075c:	8a 03                	mov    al,BYTE PTR [ebx]
c000075e:	41                   	inc    ecx
c000075f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000762:	43                   	inc    ebx
c0000763:	39 d1                	cmp    ecx,edx
c0000765:	75 f5                	jne    c000075c <memmove+0xb8>
c0000767:	eb cb                	jmp    c0000734 <memmove+0x90>
c0000769:	8d 76 00             	lea    esi,[esi+0x0]

c000076c <memset>:
c000076c:	57                   	push   edi
c000076d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000771:	85 c9                	test   ecx,ecx
c0000773:	74 0b                	je     c0000780 <memset+0x14>
c0000775:	fc                   	cld    
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000077e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax

c0000788 <strlen>:
c0000788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000078c:	31 c0                	xor    eax,eax
c000078e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000791:	74 09                	je     c000079c <strlen+0x14>
c0000793:	90                   	nop
c0000794:	40                   	inc    eax
c0000795:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000799:	75 f9                	jne    c0000794 <strlen+0xc>
c000079b:	c3                   	ret    
c000079c:	c3                   	ret    
c000079d:	8d 76 00             	lea    esi,[esi+0x0]

c00007a0 <strpbrk>:
c00007a0:	57                   	push   edi
c00007a1:	56                   	push   esi
c00007a2:	53                   	push   ebx
c00007a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ad:	84 db                	test   bl,bl
c00007af:	74 21                	je     c00007d2 <strpbrk+0x32>
c00007b1:	8a 07                	mov    al,BYTE PTR [edi]
c00007b3:	84 c0                	test   al,al
c00007b5:	74 14                	je     c00007cb <strpbrk+0x2b>
c00007b7:	38 d8                	cmp    al,bl
c00007b9:	74 19                	je     c00007d4 <strpbrk+0x34>
c00007bb:	89 fa                	mov    edx,edi
c00007bd:	eb 05                	jmp    c00007c4 <strpbrk+0x24>
c00007bf:	90                   	nop
c00007c0:	38 d9                	cmp    cl,bl
c00007c2:	74 10                	je     c00007d4 <strpbrk+0x34>
c00007c4:	42                   	inc    edx
c00007c5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007c7:	84 c9                	test   cl,cl
c00007c9:	75 f5                	jne    c00007c0 <strpbrk+0x20>
c00007cb:	46                   	inc    esi
c00007cc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ce:	84 db                	test   bl,bl
c00007d0:	75 e1                	jne    c00007b3 <strpbrk+0x13>
c00007d2:	31 f6                	xor    esi,esi
c00007d4:	89 f0                	mov    eax,esi
c00007d6:	5b                   	pop    ebx
c00007d7:	5e                   	pop    esi
c00007d8:	5f                   	pop    edi
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strtok>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007e6:	85 db                	test   ebx,ebx
c00007e8:	75 07                	jne    c00007f1 <strtok+0x15>
c00007ea:	eb 2c                	jmp    c0000818 <strtok+0x3c>
c00007ec:	43                   	inc    ebx
c00007ed:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007f1:	56                   	push   esi
c00007f2:	53                   	push   ebx
c00007f3:	e8 a8 ff ff ff       	call   c00007a0 <strpbrk>
c00007f8:	5a                   	pop    edx
c00007f9:	a3 88 ec 02 c0       	mov    ds:0xc002ec88,eax
c00007fe:	59                   	pop    ecx
c00007ff:	39 d8                	cmp    eax,ebx
c0000801:	74 e9                	je     c00007ec <strtok+0x10>
c0000803:	85 c0                	test   eax,eax
c0000805:	74 1b                	je     c0000822 <strtok+0x46>
c0000807:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000080a:	8d 50 01             	lea    edx,[eax+0x1]
c000080d:	89 d8                	mov    eax,ebx
c000080f:	89 15 88 ec 02 c0    	mov    DWORD PTR ds:0xc002ec88,edx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    
c0000818:	8b 1d 88 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec88
c000081e:	85 db                	test   ebx,ebx
c0000820:	75 cf                	jne    c00007f1 <strtok+0x15>
c0000822:	31 c0                	xor    eax,eax
c0000824:	5b                   	pop    ebx
c0000825:	5e                   	pop    esi
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strcpy>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000831:	89 c3                	mov    ebx,eax
c0000833:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000835:	84 d2                	test   dl,dl
c0000837:	74 0d                	je     c0000846 <strcpy+0x1e>
c0000839:	8d 76 00             	lea    esi,[esi+0x0]
c000083c:	88 13                	mov    BYTE PTR [ebx],dl
c000083e:	41                   	inc    ecx
c000083f:	43                   	inc    ebx
c0000840:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000842:	84 d2                	test   dl,dl
c0000844:	75 f6                	jne    c000083c <strcpy+0x14>
c0000846:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    
c000084b:	90                   	nop

c000084c <strncpy>:
c000084c:	55                   	push   ebp
c000084d:	57                   	push   edi
c000084e:	56                   	push   esi
c000084f:	53                   	push   ebx
c0000850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000854:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000858:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000085c:	85 c0                	test   eax,eax
c000085e:	74 39                	je     c0000899 <strncpy+0x4d>
c0000860:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000862:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000865:	8d 55 01             	lea    edx,[ebp+0x1]
c0000868:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 31                	je     c00008a0 <strncpy+0x54>
c000086f:	85 c9                	test   ecx,ecx
c0000871:	74 26                	je     c0000899 <strncpy+0x4d>
c0000873:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000876:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000879:	8d 55 02             	lea    edx,[ebp+0x2]
c000087c:	8d 46 02             	lea    eax,[esi+0x2]
c000087f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000882:	84 db                	test   bl,bl
c0000884:	75 0f                	jne    c0000895 <strncpy+0x49>
c0000886:	eb 18                	jmp    c00008a0 <strncpy+0x54>
c0000888:	40                   	inc    eax
c0000889:	42                   	inc    edx
c000088a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000088d:	49                   	dec    ecx
c000088e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000891:	84 db                	test   bl,bl
c0000893:	74 0b                	je     c00008a0 <strncpy+0x54>
c0000895:	85 c9                	test   ecx,ecx
c0000897:	75 ef                	jne    c0000888 <strncpy+0x3c>
c0000899:	5b                   	pop    ebx
c000089a:	89 e8                	mov    eax,ebp
c000089c:	5e                   	pop    esi
c000089d:	5f                   	pop    edi
c000089e:	5d                   	pop    ebp
c000089f:	c3                   	ret    
c00008a0:	85 c9                	test   ecx,ecx
c00008a2:	74 f5                	je     c0000899 <strncpy+0x4d>
c00008a4:	fc                   	cld    
c00008a5:	31 c0                	xor    eax,eax
c00008a7:	89 d7                	mov    edi,edx
c00008a9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008ab:	89 e8                	mov    eax,ebp
c00008ad:	5b                   	pop    ebx
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	5d                   	pop    ebp
c00008b1:	c3                   	ret    
c00008b2:	66 90                	xchg   ax,ax

c00008b4 <strcmp>:
c00008b4:	56                   	push   esi
c00008b5:	53                   	push   ebx
c00008b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008be:	8a 16                	mov    dl,BYTE PTR [esi]
c00008c0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008c3:	38 d1                	cmp    cl,dl
c00008c5:	75 1d                	jne    c00008e4 <strcmp+0x30>
c00008c7:	84 c9                	test   cl,cl
c00008c9:	74 21                	je     c00008ec <strcmp+0x38>
c00008cb:	b8 01 00 00 00       	mov    eax,0x1
c00008d0:	eb 07                	jmp    c00008d9 <strcmp+0x25>
c00008d2:	66 90                	xchg   ax,ax
c00008d4:	40                   	inc    eax
c00008d5:	84 d2                	test   dl,dl
c00008d7:	74 13                	je     c00008ec <strcmp+0x38>
c00008d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008dc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008e0:	38 ca                	cmp    dl,cl
c00008e2:	74 f0                	je     c00008d4 <strcmp+0x20>
c00008e4:	0f b6 c2             	movzx  eax,dl
c00008e7:	5b                   	pop    ebx
c00008e8:	29 c8                	sub    eax,ecx
c00008ea:	5e                   	pop    esi
c00008eb:	c3                   	ret    
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5b                   	pop    ebx
c00008ef:	5e                   	pop    esi
c00008f0:	c3                   	ret    
c00008f1:	8d 76 00             	lea    esi,[esi+0x0]

c00008f4 <strchr>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00008fa:	84 d2                	test   dl,dl
c00008fc:	74 15                	je     c0000913 <strchr+0x1f>
c00008fe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000902:	38 ca                	cmp    dl,cl
c0000904:	75 06                	jne    c000090c <strchr+0x18>
c0000906:	eb 0e                	jmp    c0000916 <strchr+0x22>
c0000908:	38 ca                	cmp    dl,cl
c000090a:	74 09                	je     c0000915 <strchr+0x21>
c000090c:	40                   	inc    eax
c000090d:	8a 10                	mov    dl,BYTE PTR [eax]
c000090f:	84 d2                	test   dl,dl
c0000911:	75 f5                	jne    c0000908 <strchr+0x14>
c0000913:	31 c0                	xor    eax,eax
c0000915:	c3                   	ret    
c0000916:	c3                   	ret    
c0000917:	90                   	nop

c0000918 <strncmp>:
c0000918:	57                   	push   edi
c0000919:	56                   	push   esi
c000091a:	53                   	push   ebx
c000091b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000091f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000927:	85 ff                	test   edi,edi
c0000929:	74 28                	je     c0000953 <strncmp+0x3b>
c000092b:	8a 16                	mov    dl,BYTE PTR [esi]
c000092d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000930:	38 d1                	cmp    cl,dl
c0000932:	75 28                	jne    c000095c <strncmp+0x44>
c0000934:	8d 46 01             	lea    eax,[esi+0x1]
c0000937:	84 c9                	test   cl,cl
c0000939:	74 18                	je     c0000953 <strncmp+0x3b>
c000093b:	01 fe                	add    esi,edi
c000093d:	eb 0f                	jmp    c000094e <strncmp+0x36>
c000093f:	90                   	nop
c0000940:	8a 10                	mov    dl,BYTE PTR [eax]
c0000942:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000945:	38 ca                	cmp    dl,cl
c0000947:	75 13                	jne    c000095c <strncmp+0x44>
c0000949:	40                   	inc    eax
c000094a:	84 d2                	test   dl,dl
c000094c:	74 05                	je     c0000953 <strncmp+0x3b>
c000094e:	43                   	inc    ebx
c000094f:	39 c6                	cmp    esi,eax
c0000951:	75 ed                	jne    c0000940 <strncmp+0x28>
c0000953:	5b                   	pop    ebx
c0000954:	31 c0                	xor    eax,eax
c0000956:	5e                   	pop    esi
c0000957:	5f                   	pop    edi
c0000958:	c3                   	ret    
c0000959:	8d 76 00             	lea    esi,[esi+0x0]
c000095c:	5b                   	pop    ebx
c000095d:	0f b6 c2             	movzx  eax,dl
c0000960:	5e                   	pop    esi
c0000961:	29 c8                	sub    eax,ecx
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]

c0000968 <strcat>:
c0000968:	56                   	push   esi
c0000969:	53                   	push   ebx
c000096a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000972:	89 c3                	mov    ebx,eax
c0000974:	eb 04                	jmp    c000097a <strcat+0x12>
c0000976:	66 90                	xchg   ax,ax
c0000978:	89 d3                	mov    ebx,edx
c000097a:	8d 53 01             	lea    edx,[ebx+0x1]
c000097d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000981:	75 f5                	jne    c0000978 <strcat+0x10>
c0000983:	31 d2                	xor    edx,edx
c0000985:	8d 76 00             	lea    esi,[esi+0x0]
c0000988:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000098b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000098e:	42                   	inc    edx
c000098f:	84 c9                	test   cl,cl
c0000991:	75 f5                	jne    c0000988 <strcat+0x20>
c0000993:	5b                   	pop    ebx
c0000994:	5e                   	pop    esi
c0000995:	c3                   	ret    
c0000996:	66 90                	xchg   ax,ax

c0000998 <strncat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000099e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009a6:	85 f6                	test   esi,esi
c00009a8:	74 1e                	je     c00009c8 <strncat+0x30>
c00009aa:	89 c2                	mov    edx,eax
c00009ac:	42                   	inc    edx
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f9                	jne    c00009ac <strncat+0x14>
c00009b3:	01 ce                	add    esi,ecx
c00009b5:	eb 06                	jmp    c00009bd <strncat+0x25>
c00009b7:	90                   	nop
c00009b8:	39 f1                	cmp    ecx,esi
c00009ba:	74 10                	je     c00009cc <strncat+0x34>
c00009bc:	42                   	inc    edx
c00009bd:	41                   	inc    ecx
c00009be:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009c1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009c4:	84 db                	test   bl,bl
c00009c6:	75 f0                	jne    c00009b8 <strncat+0x20>
c00009c8:	5b                   	pop    ebx
c00009c9:	5e                   	pop    esi
c00009ca:	c3                   	ret    
c00009cb:	90                   	nop
c00009cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009cf:	5b                   	pop    ebx
c00009d0:	5e                   	pop    esi
c00009d1:	c3                   	ret    
c00009d2:	66 90                	xchg   ax,ax

c00009d4 <strstr>:
c00009d4:	57                   	push   edi
c00009d5:	56                   	push   esi
c00009d6:	53                   	push   ebx
c00009d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009df:	57                   	push   edi
c00009e0:	e8 a3 fd ff ff       	call   c0000788 <strlen>
c00009e5:	59                   	pop    ecx
c00009e6:	85 c0                	test   eax,eax
c00009e8:	74 2a                	je     c0000a14 <strstr+0x40>
c00009ea:	89 c6                	mov    esi,eax
c00009ec:	eb 12                	jmp    c0000a00 <strstr+0x2c>
c00009ee:	66 90                	xchg   ax,ax
c00009f0:	56                   	push   esi
c00009f1:	57                   	push   edi
c00009f2:	53                   	push   ebx
c00009f3:	e8 70 fc ff ff       	call   c0000668 <memcmp>
c00009f8:	83 c4 0c             	add    esp,0xc
c00009fb:	85 c0                	test   eax,eax
c00009fd:	74 15                	je     c0000a14 <strstr+0x40>
c00009ff:	43                   	inc    ebx
c0000a00:	53                   	push   ebx
c0000a01:	e8 82 fd ff ff       	call   c0000788 <strlen>
c0000a06:	5a                   	pop    edx
c0000a07:	39 f0                	cmp    eax,esi
c0000a09:	73 e5                	jae    c00009f0 <strstr+0x1c>
c0000a0b:	5b                   	pop    ebx
c0000a0c:	31 c0                	xor    eax,eax
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	c3                   	ret    
c0000a11:	8d 76 00             	lea    esi,[esi+0x0]
c0000a14:	89 d8                	mov    eax,ebx
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	c3                   	ret    
c0000a1a:	66 90                	xchg   ax,ax

c0000a1c <toupper>:
c0000a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 00 9d 02 c0 02 	test   BYTE PTR [edx-0x3ffd6300],0x2
c0000a2a:	74 03                	je     c0000a2f <toupper+0x13>
c0000a2c:	83 e8 20             	sub    eax,0x20
c0000a2f:	c3                   	ret    

c0000a30 <tolower>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 00 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6300],0x1
c0000a3e:	74 03                	je     c0000a43 <tolower+0x13>
c0000a40:	83 c0 20             	add    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <simple_strtoul>:
c0000a44:	55                   	push   ebp
c0000a45:	57                   	push   edi
c0000a46:	56                   	push   esi
c0000a47:	53                   	push   ebx
c0000a48:	83 ec 08             	sub    esp,0x8
c0000a4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a53:	90                   	nop
c0000a54:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a57:	f6 82 00 9d 02 c0 08 	test   BYTE PTR [edx-0x3ffd6300],0x8
c0000a5e:	75 05                	jne    c0000a65 <simple_strtoul+0x21>
c0000a60:	80 fa 09             	cmp    dl,0x9
c0000a63:	75 03                	jne    c0000a68 <simple_strtoul+0x24>
c0000a65:	41                   	inc    ecx
c0000a66:	eb ec                	jmp    c0000a54 <simple_strtoul+0x10>
c0000a68:	80 fa 2d             	cmp    dl,0x2d
c0000a6b:	0f 84 1b 01 00 00    	je     c0000b8c <simple_strtoul+0x148>
c0000a71:	80 fa 2b             	cmp    dl,0x2b
c0000a74:	0f 84 c2 00 00 00    	je     c0000b3c <simple_strtoul+0xf8>
c0000a7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a82:	85 f6                	test   esi,esi
c0000a84:	0f 85 c3 00 00 00    	jne    c0000b4d <simple_strtoul+0x109>
c0000a8a:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a8c:	80 fa 30             	cmp    dl,0x30
c0000a8f:	0f 84 47 01 00 00    	je     c0000bdc <simple_strtoul+0x198>
c0000a95:	be 0a 00 00 00       	mov    esi,0xa
c0000a9a:	84 d2                	test   dl,dl
c0000a9c:	0f 84 6f 01 00 00    	je     c0000c11 <simple_strtoul+0x1cd>
c0000aa2:	31 ed                	xor    ebp,ebp
c0000aa4:	31 ff                	xor    edi,edi
c0000aa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000aad:	eb 2b                	jmp    c0000ada <simple_strtoul+0x96>
c0000aaf:	90                   	nop
c0000ab0:	83 eb 30             	sub    ebx,0x30
c0000ab3:	39 f3                	cmp    ebx,esi
c0000ab5:	73 4d                	jae    c0000b04 <simple_strtoul+0xc0>
c0000ab7:	31 d2                	xor    edx,edx
c0000ab9:	89 d8                	mov    eax,ebx
c0000abb:	f7 d0                	not    eax
c0000abd:	f7 f6                	div    esi
c0000abf:	39 f8                	cmp    eax,edi
c0000ac1:	0f 82 b1 00 00 00    	jb     c0000b78 <simple_strtoul+0x134>
c0000ac7:	0f af fe             	imul   edi,esi
c0000aca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ad1:	01 df                	add    edi,ebx
c0000ad3:	41                   	inc    ecx
c0000ad4:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ad6:	84 d2                	test   dl,dl
c0000ad8:	74 2a                	je     c0000b04 <simple_strtoul+0xc0>
c0000ada:	0f b6 da             	movzx  ebx,dl
c0000add:	f6 83 00 9d 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6300],0x4
c0000ae4:	75 ca                	jne    c0000ab0 <simple_strtoul+0x6c>
c0000ae6:	0f be d2             	movsx  edx,dl
c0000ae9:	52                   	push   edx
c0000aea:	e8 2d ff ff ff       	call   c0000a1c <toupper>
c0000aef:	5b                   	pop    ebx
c0000af0:	0f b6 d0             	movzx  edx,al
c0000af3:	f6 82 00 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6300],0x1
c0000afa:	74 08                	je     c0000b04 <simple_strtoul+0xc0>
c0000afc:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000aff:	39 f3                	cmp    ebx,esi
c0000b01:	72 b4                	jb     c0000ab7 <simple_strtoul+0x73>
c0000b03:	90                   	nop
c0000b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b08:	85 c0                	test   eax,eax
c0000b0a:	74 14                	je     c0000b20 <simple_strtoul+0xdc>
c0000b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b0f:	09 f8                	or     eax,edi
c0000b11:	75 71                	jne    c0000b84 <simple_strtoul+0x140>
c0000b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b1b:	31 ff                	xor    edi,edi
c0000b1d:	89 30                	mov    DWORD PTR [eax],esi
c0000b1f:	90                   	nop
c0000b20:	4d                   	dec    ebp
c0000b21:	75 05                	jne    c0000b28 <simple_strtoul+0xe4>
c0000b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b2d:	75 02                	jne    c0000b31 <simple_strtoul+0xed>
c0000b2f:	f7 df                	neg    edi
c0000b31:	83 c4 08             	add    esp,0x8
c0000b34:	89 f8                	mov    eax,edi
c0000b36:	5b                   	pop    ebx
c0000b37:	5e                   	pop    esi
c0000b38:	5f                   	pop    edi
c0000b39:	5d                   	pop    ebp
c0000b3a:	c3                   	ret    
c0000b3b:	90                   	nop
c0000b3c:	41                   	inc    ecx
c0000b3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b45:	85 f6                	test   esi,esi
c0000b47:	0f 84 3d ff ff ff    	je     c0000a8a <simple_strtoul+0x46>
c0000b4d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b50:	83 f8 22             	cmp    eax,0x22
c0000b53:	77 6a                	ja     c0000bbf <simple_strtoul+0x17b>
c0000b55:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b57:	83 fe 08             	cmp    esi,0x8
c0000b5a:	0f 84 a2 00 00 00    	je     c0000c02 <simple_strtoul+0x1be>
c0000b60:	83 fe 10             	cmp    esi,0x10
c0000b63:	0f 85 31 ff ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000b69:	80 fa 30             	cmp    dl,0x30
c0000b6c:	74 2c                	je     c0000b9a <simple_strtoul+0x156>
c0000b6e:	be 10 00 00 00       	mov    esi,0x10
c0000b73:	e9 22 ff ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000b78:	bd 01 00 00 00       	mov    ebp,0x1
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 4f ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x8f>
c0000b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b88:	89 08                	mov    DWORD PTR [eax],ecx
c0000b8a:	eb 94                	jmp    c0000b20 <simple_strtoul+0xdc>
c0000b8c:	41                   	inc    ecx
c0000b8d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b95:	e9 e8 fe ff ff       	jmp    c0000a82 <simple_strtoul+0x3e>
c0000b9a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0000ba1:	50                   	push   eax
c0000ba2:	e8 89 fe ff ff       	call   c0000a30 <tolower>
c0000ba7:	5e                   	pop    esi
c0000ba8:	83 f8 78             	cmp    eax,0x78
c0000bab:	0f 84 84 00 00 00    	je     c0000c35 <simple_strtoul+0x1f1>
c0000bb1:	41                   	inc    ecx
c0000bb2:	be 10 00 00 00       	mov    esi,0x10
c0000bb7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bba:	e9 db fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000bbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bc3:	85 ff                	test   edi,edi
c0000bc5:	74 5c                	je     c0000c23 <simple_strtoul+0x1df>
c0000bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bcb:	85 c9                	test   ecx,ecx
c0000bcd:	75 4e                	jne    c0000c1d <simple_strtoul+0x1d9>
c0000bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bd5:	31 ff                	xor    edi,edi
c0000bd7:	e9 4c ff ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000bdc:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000be0:	88 04 24             	mov    BYTE PTR [esp],al
c0000be3:	50                   	push   eax
c0000be4:	e8 47 fe ff ff       	call   c0000a30 <tolower>
c0000be9:	5d                   	pop    ebp
c0000bea:	83 f8 78             	cmp    eax,0x78
c0000bed:	74 3b                	je     c0000c2a <simple_strtoul+0x1e6>
c0000bef:	41                   	inc    ecx
c0000bf0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bf3:	80 fa 30             	cmp    dl,0x30
c0000bf6:	74 13                	je     c0000c0b <simple_strtoul+0x1c7>
c0000bf8:	be 08 00 00 00       	mov    esi,0x8
c0000bfd:	e9 98 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000c02:	80 fa 30             	cmp    dl,0x30
c0000c05:	0f 85 8f fe ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000c0b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c0e:	41                   	inc    ecx
c0000c0f:	eb e7                	jmp    c0000bf8 <simple_strtoul+0x1b4>
c0000c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c15:	85 d2                	test   edx,edx
c0000c17:	74 0a                	je     c0000c23 <simple_strtoul+0x1df>
c0000c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c21:	89 30                	mov    DWORD PTR [eax],esi
c0000c23:	31 ff                	xor    edi,edi
c0000c25:	e9 fe fe ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000c2a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c2d:	83 c1 02             	add    ecx,0x2
c0000c30:	e9 34 ff ff ff       	jmp    c0000b69 <simple_strtoul+0x125>
c0000c35:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c38:	be 10 00 00 00       	mov    esi,0x10
c0000c3d:	83 c1 02             	add    ecx,0x2
c0000c40:	e9 55 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>

c0000c45 <largebin_index>:
c0000c45:	89 c2                	mov    edx,eax
c0000c47:	c1 ea 08             	shr    edx,0x8
c0000c4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c50:	77 10                	ja     c0000c62 <largebin_index+0x1d>
c0000c52:	0f bd d2             	bsr    edx,edx
c0000c55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c58:	d3 e8                	shr    eax,cl
c0000c5a:	83 e0 03             	and    eax,0x3
c0000c5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c61:	c3                   	ret    
c0000c62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c67:	c3                   	ret    

c0000c68 <malloc_init_state>:
c0000c68:	53                   	push   ebx
c0000c69:	8d 50 34             	lea    edx,[eax+0x34]
c0000c6c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c72:	89 d1                	mov    ecx,edx
c0000c74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c7a:	83 c2 08             	add    edx,0x8
c0000c7d:	39 da                	cmp    edx,ebx
c0000c7f:	75 f3                	jne    c0000c74 <malloc_init_state+0xc>
c0000c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c8d:	83 e2 03             	and    edx,0x3
c0000c90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c9a:	83 ca 48             	or     edx,0x48
c0000c9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ca7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cb1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cbd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cc7:	5b                   	pop    ebx
c0000cc8:	c3                   	ret    

c0000cc9 <malloc_consolidate>:
c0000cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ccb:	85 d2                	test   edx,edx
c0000ccd:	0f 84 d8 00 00 00    	je     c0000dab <malloc_consolidate+0xe2>
c0000cd3:	55                   	push   ebp
c0000cd4:	83 e2 fd             	and    edx,0xfffffffd
c0000cd7:	57                   	push   edi
c0000cd8:	89 c5                	mov    ebp,eax
c0000cda:	56                   	push   esi
c0000cdb:	8d 78 34             	lea    edi,[eax+0x34]
c0000cde:	53                   	push   ebx
c0000cdf:	83 ec 10             	sub    esp,0x10
c0000ce2:	89 10                	mov    DWORD PTR [eax],edx
c0000ce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ce8:	c1 ea 03             	shr    edx,0x3
c0000ceb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cf3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cf6:	85 d2                	test   edx,edx
c0000cf8:	0f 84 98 00 00 00    	je     c0000d96 <malloc_consolidate+0xcd>
c0000cfe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d0f:	89 f9                	mov    ecx,edi
c0000d11:	83 e1 fe             	and    ecx,0xfffffffe
c0000d14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d1d:	83 e7 01             	and    edi,0x1
c0000d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d23:	75 14                	jne    c0000d39 <malloc_consolidate+0x70>
c0000d25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d27:	29 fa                	sub    edx,edi
c0000d29:	01 f9                	add    ecx,edi
c0000d2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d3c:	74 40                	je     c0000d7e <malloc_consolidate+0xb5>
c0000d3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d4b:	83 e7 01             	and    edi,0x1
c0000d4e:	75 0e                	jne    c0000d5e <malloc_consolidate+0x95>
c0000d50:	01 d9                	add    ecx,ebx
c0000d52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d61:	89 ce                	mov    esi,ecx
c0000d63:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d66:	83 ce 01             	or     esi,0x1
c0000d69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d6f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d72:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d7c:	eb 0c                	jmp    c0000d8a <malloc_consolidate+0xc1>
c0000d7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d8e:	85 d2                	test   edx,edx
c0000d90:	0f 85 6f ff ff ff    	jne    c0000d05 <malloc_consolidate+0x3c>
c0000d96:	83 c5 04             	add    ebp,0x4
c0000d99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d9d:	0f 85 50 ff ff ff    	jne    c0000cf3 <malloc_consolidate+0x2a>
c0000da3:	83 c4 10             	add    esp,0x10
c0000da6:	5b                   	pop    ebx
c0000da7:	5e                   	pop    esi
c0000da8:	5f                   	pop    edi
c0000da9:	5d                   	pop    ebp
c0000daa:	c3                   	ret    
c0000dab:	e9 b8 fe ff ff       	jmp    c0000c68 <malloc_init_state>

c0000db0 <dlfree>:
c0000db0:	57                   	push   edi
c0000db1:	56                   	push   esi
c0000db2:	53                   	push   ebx
c0000db3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000db7:	85 db                	test   ebx,ebx
c0000db9:	0f 84 e2 00 00 00    	je     c0000ea1 <dlfree+0xf1>
c0000dbf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dc2:	8b 0d a0 ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002eca0
c0000dc8:	89 f0                	mov    eax,esi
c0000dca:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dcd:	83 e0 fc             	and    eax,0xfffffffc
c0000dd0:	39 c1                	cmp    ecx,eax
c0000dd2:	72 24                	jb     c0000df8 <dlfree+0x48>
c0000dd4:	83 c9 03             	or     ecx,0x3
c0000dd7:	c1 e8 03             	shr    eax,0x3
c0000dda:	89 0d a0 ec 02 c0    	mov    DWORD PTR ds:0xc002eca0,ecx
c0000de0:	83 e8 02             	sub    eax,0x2
c0000de3:	8b 0c 85 a4 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd135c]
c0000dea:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dec:	89 14 85 a4 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd135c],edx
c0000df3:	e9 a9 00 00 00       	jmp    c0000ea1 <dlfree+0xf1>
c0000df8:	83 e6 02             	and    esi,0x2
c0000dfb:	0f 85 a0 00 00 00    	jne    c0000ea1 <dlfree+0xf1>
c0000e01:	83 c9 01             	or     ecx,0x1
c0000e04:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e07:	89 0d a0 ec 02 c0    	mov    DWORD PTR ds:0xc002eca0,ecx
c0000e0d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e10:	83 e1 fc             	and    ecx,0xfffffffc
c0000e13:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e17:	75 13                	jne    c0000e2c <dlfree+0x7c>
c0000e19:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e1c:	29 da                	sub    edx,ebx
c0000e1e:	01 d8                	add    eax,ebx
c0000e20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e26:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e29:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e2c:	39 35 cc ec 02 c0    	cmp    DWORD PTR ds:0xc002eccc,esi
c0000e32:	74 40                	je     c0000e74 <dlfree+0xc4>
c0000e34:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e38:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e3b:	80 e3 01             	and    bl,0x1
c0000e3e:	75 0e                	jne    c0000e4e <dlfree+0x9e>
c0000e40:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e43:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e46:	01 c8                	add    eax,ecx
c0000e48:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e4b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e4e:	8b 0d dc ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ecdc
c0000e54:	c7 42 0c d4 ec 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ecd4
c0000e5b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e5e:	89 15 dc ec 02 c0    	mov    DWORD PTR ds:0xc002ecdc,edx
c0000e64:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e67:	89 c1                	mov    ecx,eax
c0000e69:	83 c9 01             	or     ecx,0x1
c0000e6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e6f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e72:	eb 10                	jmp    c0000e84 <dlfree+0xd4>
c0000e74:	01 c8                	add    eax,ecx
c0000e76:	89 c1                	mov    ecx,eax
c0000e78:	83 c9 01             	or     ecx,0x1
c0000e7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7e:	89 15 cc ec 02 c0    	mov    DWORD PTR ds:0xc002eccc,edx
c0000e84:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e89:	76 16                	jbe    c0000ea1 <dlfree+0xf1>
c0000e8b:	f6 05 a0 ec 02 c0 02 	test   BYTE PTR ds:0xc002eca0,0x2
c0000e92:	74 0d                	je     c0000ea1 <dlfree+0xf1>
c0000e94:	5b                   	pop    ebx
c0000e95:	b8 a0 ec 02 c0       	mov    eax,0xc002eca0
c0000e9a:	5e                   	pop    esi
c0000e9b:	5f                   	pop    edi
c0000e9c:	e9 28 fe ff ff       	jmp    c0000cc9 <malloc_consolidate>
c0000ea1:	5b                   	pop    ebx
c0000ea2:	5e                   	pop    esi
c0000ea3:	5f                   	pop    edi
c0000ea4:	c3                   	ret    

c0000ea5 <sYSMALLOc>:
c0000ea5:	55                   	push   ebp
c0000ea6:	57                   	push   edi
c0000ea7:	56                   	push   esi
c0000ea8:	53                   	push   ebx
c0000ea9:	89 d3                	mov    ebx,edx
c0000eab:	83 ec 2c             	sub    esp,0x2c
c0000eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000eb2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000eb8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ebb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ec2:	74 1f                	je     c0000ee3 <sYSMALLOc+0x3e>
c0000ec4:	89 d8                	mov    eax,ebx
c0000ec6:	e8 fe fd ff ff       	call   c0000cc9 <malloc_consolidate>
c0000ecb:	83 ec 0c             	sub    esp,0xc
c0000ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ed2:	83 e8 07             	sub    eax,0x7
c0000ed5:	50                   	push   eax
c0000ed6:	e8 30 02 00 00       	call   c000110b <dlmalloc>
c0000edb:	83 c4 10             	add    esp,0x10
c0000ede:	e9 20 02 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000ee3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ee6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000eec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000eef:	83 e0 fc             	and    eax,0xfffffffc
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000efa:	83 c0 10             	add    eax,0x10
c0000efd:	01 c1                	add    ecx,eax
c0000eff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f03:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f0a:	74 04                	je     c0000f10 <sYSMALLOc+0x6b>
c0000f0c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f10:	f7 da                	neg    edx
c0000f12:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f1a:	21 d1                	and    ecx,edx
c0000f1c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f20:	7f 07                	jg     c0000f29 <sYSMALLOc+0x84>
c0000f22:	31 c0                	xor    eax,eax
c0000f24:	e9 da 01 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f30:	e8 1b e8 00 00       	call   c000f750 <sbrk>
c0000f35:	83 c4 10             	add    esp,0x10
c0000f38:	89 c6                	mov    esi,eax
c0000f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3d:	74 e3                	je     c0000f22 <sYSMALLOc+0x7d>
c0000f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f43:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f47:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f4a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f50:	39 f1                	cmp    ecx,esi
c0000f52:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f58:	75 13                	jne    c0000f6d <sYSMALLOc+0xc8>
c0000f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f5e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f62:	83 c8 01             	or     eax,0x1
c0000f65:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f68:	e9 3e 01 00 00       	jmp    c00010ab <sYSMALLOc+0x206>
c0000f6d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f73:	88 d0                	mov    al,dl
c0000f75:	83 e0 01             	and    eax,0x1
c0000f78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f7d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f81:	0f 95 c0             	setne  al
c0000f84:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f88:	39 f1                	cmp    ecx,esi
c0000f8a:	76 12                	jbe    c0000f9e <sYSMALLOc+0xf9>
c0000f8c:	84 c0                	test   al,al
c0000f8e:	74 0e                	je     c0000f9e <sYSMALLOc+0xf9>
c0000f90:	83 e2 fe             	and    edx,0xfffffffe
c0000f93:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f99:	e9 83 00 00 00       	jmp    c0001021 <sYSMALLOc+0x17c>
c0000f9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fa3:	74 7c                	je     c0001021 <sYSMALLOc+0x17c>
c0000fa5:	84 c0                	test   al,al
c0000fa7:	74 0c                	je     c0000fb5 <sYSMALLOc+0x110>
c0000fa9:	89 f0                	mov    eax,esi
c0000fab:	29 c8                	sub    eax,ecx
c0000fad:	01 e8                	add    eax,ebp
c0000faf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fb5:	89 f2                	mov    edx,esi
c0000fb7:	83 e2 07             	and    edx,0x7
c0000fba:	74 0c                	je     c0000fc8 <sYSMALLOc+0x123>
c0000fbc:	b8 08 00 00 00       	mov    eax,0x8
c0000fc1:	29 d0                	sub    eax,edx
c0000fc3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fc6:	eb 04                	jmp    c0000fcc <sYSMALLOc+0x127>
c0000fc8:	89 f5                	mov    ebp,esi
c0000fca:	31 c0                	xor    eax,eax
c0000fcc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fd8:	01 c1                	add    ecx,eax
c0000fda:	83 ec 0c             	sub    esp,0xc
c0000fdd:	01 f1                	add    ecx,esi
c0000fdf:	01 ca                	add    edx,ecx
c0000fe1:	29 c8                	sub    eax,ecx
c0000fe3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fe7:	01 c2                	add    edx,eax
c0000fe9:	52                   	push   edx
c0000fea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fee:	e8 5d e7 00 00       	call   c000f750 <sbrk>
c0000ff3:	83 c4 10             	add    esp,0x10
c0000ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ffd:	75 0f                	jne    c000100e <sYSMALLOc+0x169>
c0000fff:	83 ec 0c             	sub    esp,0xc
c0001002:	6a 00                	push   0x0
c0001004:	e8 47 e7 00 00       	call   c000f750 <sbrk>
c0001009:	83 c4 10             	add    esp,0x10
c000100c:	eb 30                	jmp    c000103e <sYSMALLOc+0x199>
c000100e:	39 c6                	cmp    esi,eax
c0001010:	76 33                	jbe    c0001045 <sYSMALLOc+0x1a0>
c0001012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001016:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000101d:	01 f0                	add    eax,esi
c000101f:	eb 1d                	jmp    c000103e <sYSMALLOc+0x199>
c0001021:	83 ec 0c             	sub    esp,0xc
c0001024:	89 f5                	mov    ebp,esi
c0001026:	6a 00                	push   0x0
c0001028:	e8 23 e7 00 00       	call   c000f750 <sbrk>
c000102d:	89 c2                	mov    edx,eax
c000102f:	29 f2                	sub    edx,esi
c0001031:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001035:	83 c4 10             	add    esp,0x10
c0001038:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103e:	31 d2                	xor    edx,edx
c0001040:	83 f8 ff             	cmp    eax,0xffffffff
c0001043:	74 66                	je     c00010ab <sYSMALLOc+0x206>
c0001045:	29 e8                	sub    eax,ebp
c0001047:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000104a:	01 d0                	add    eax,edx
c000104c:	83 c8 01             	or     eax,0x1
c000104f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001052:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001058:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000105d:	74 4c                	je     c00010ab <sYSMALLOc+0x206>
c000105f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001063:	83 e8 0c             	sub    eax,0xc
c0001066:	83 e0 f8             	and    eax,0xfffffff8
c0001069:	89 c2                	mov    edx,eax
c000106b:	83 ca 01             	or     edx,0x1
c000106e:	83 f8 0f             	cmp    eax,0xf
c0001071:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001074:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000107c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001084:	76 25                	jbe    c00010ab <sYSMALLOc+0x206>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001099:	83 c7 08             	add    edi,0x8
c000109c:	57                   	push   edi
c000109d:	e8 0e fd ff ff       	call   c0000db0 <dlfree>
c00010a2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010a8:	83 c4 10             	add    esp,0x10
c00010ab:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010b1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010b7:	73 06                	jae    c00010bf <sYSMALLOc+0x21a>
c00010b9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010bf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010c5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x22e>
c00010cd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010d9:	83 e2 fc             	and    edx,0xfffffffc
c00010dc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010e0:	0f 82 3c fe ff ff    	jb     c0000f22 <sYSMALLOc+0x7d>
c00010e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ea:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010ed:	29 fa                	sub    edx,edi
c00010ef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010f2:	83 ca 01             	or     edx,0x1
c00010f5:	89 fb                	mov    ebx,edi
c00010f7:	83 c0 08             	add    eax,0x8
c00010fa:	83 cb 01             	or     ebx,0x1
c00010fd:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001100:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001103:	83 c4 2c             	add    esp,0x2c
c0001106:	5b                   	pop    ebx
c0001107:	5e                   	pop    esi
c0001108:	5f                   	pop    edi
c0001109:	5d                   	pop    ebp
c000110a:	c3                   	ret    

c000110b <dlmalloc>:
c000110b:	55                   	push   ebp
c000110c:	57                   	push   edi
c000110d:	56                   	push   esi
c000110e:	53                   	push   ebx
c000110f:	83 ec 1c             	sub    esp,0x1c
c0001112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001116:	83 f8 df             	cmp    eax,0xffffffdf
c0001119:	0f 87 70 03 00 00    	ja     c000148f <dlmalloc+0x384>
c000111f:	83 c0 0b             	add    eax,0xb
c0001122:	be 10 00 00 00       	mov    esi,0x10
c0001127:	83 f8 0f             	cmp    eax,0xf
c000112a:	76 05                	jbe    c0001131 <dlmalloc+0x26>
c000112c:	83 e0 f8             	and    eax,0xfffffff8
c000112f:	89 c6                	mov    esi,eax
c0001131:	8b 3d a0 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002eca0
c0001137:	f7 c7 01 00 00 00    	test   edi,0x1
c000113d:	75 17                	jne    c0001156 <dlmalloc+0x4b>
c000113f:	85 ff                	test   edi,edi
c0001141:	0f 85 05 03 00 00    	jne    c000144c <dlmalloc+0x341>
c0001147:	b8 a0 ec 02 c0       	mov    eax,0xc002eca0
c000114c:	e8 78 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c0001151:	e9 f6 02 00 00       	jmp    c000144c <dlmalloc+0x341>
c0001156:	39 f7                	cmp    edi,esi
c0001158:	72 1f                	jb     c0001179 <dlmalloc+0x6e>
c000115a:	89 f2                	mov    edx,esi
c000115c:	c1 ea 03             	shr    edx,0x3
c000115f:	83 ea 02             	sub    edx,0x2
c0001162:	8b 04 95 a4 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd135c]
c0001169:	85 c0                	test   eax,eax
c000116b:	74 0c                	je     c0001179 <dlmalloc+0x6e>
c000116d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001170:	89 0c 95 a4 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd135c],ecx
c0001177:	eb 30                	jmp    c00011a9 <dlmalloc+0x9e>
c0001179:	89 f0                	mov    eax,esi
c000117b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001181:	77 2e                	ja     c00011b1 <dlmalloc+0xa6>
c0001183:	c1 e8 03             	shr    eax,0x3
c0001186:	8d 14 c5 d4 ec 02 c0 	lea    edx,[eax*8-0x3ffd132c]
c000118d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001191:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001194:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001197:	39 c3                	cmp    ebx,eax
c0001199:	74 2e                	je     c00011c9 <dlmalloc+0xbe>
c000119b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000119e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011a3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011a6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011a9:	83 c0 08             	add    eax,0x8
c00011ac:	e9 e0 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c00011b1:	e8 8f fa ff ff       	call   c0000c45 <largebin_index>
c00011b6:	83 e7 02             	and    edi,0x2
c00011b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011bd:	74 0a                	je     c00011c9 <dlmalloc+0xbe>
c00011bf:	b8 a0 ec 02 c0       	mov    eax,0xc002eca0
c00011c4:	e8 00 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c00011c9:	8d 46 10             	lea    eax,[esi+0x10]
c00011cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011d0:	8b 1d e0 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ece0
c00011d6:	81 fb d4 ec 02 c0    	cmp    ebx,0xc002ecd4
c00011dc:	0f 84 13 01 00 00    	je     c00012f5 <dlmalloc+0x1ea>
c00011e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011e5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011e8:	83 e7 fc             	and    edi,0xfffffffc
c00011eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f1:	77 4c                	ja     c000123f <dlmalloc+0x134>
c00011f3:	3d d4 ec 02 c0       	cmp    eax,0xc002ecd4
c00011f8:	75 45                	jne    c000123f <dlmalloc+0x134>
c00011fa:	39 1d d0 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecd0,ebx
c0001200:	75 3d                	jne    c000123f <dlmalloc+0x134>
c0001202:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001206:	73 37                	jae    c000123f <dlmalloc+0x134>
c0001208:	8d 04 33             	lea    eax,[ebx+esi*1]
c000120b:	89 fa                	mov    edx,edi
c000120d:	a3 dc ec 02 c0       	mov    ds:0xc002ecdc,eax
c0001212:	a3 e0 ec 02 c0       	mov    ds:0xc002ece0,eax
c0001217:	a3 d0 ec 02 c0       	mov    ds:0xc002ecd0,eax
c000121c:	29 f2                	sub    edx,esi
c000121e:	c7 40 08 d4 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ecd4
c0001225:	c7 40 0c d4 ec 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ecd4
c000122c:	83 ce 01             	or     esi,0x1
c000122f:	89 d1                	mov    ecx,edx
c0001231:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001234:	83 c9 01             	or     ecx,0x1
c0001237:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000123a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000123d:	eb 15                	jmp    c0001254 <dlmalloc+0x149>
c000123f:	a3 e0 ec 02 c0       	mov    ds:0xc002ece0,eax
c0001244:	39 fe                	cmp    esi,edi
c0001246:	c7 40 08 d4 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ecd4
c000124d:	75 0d                	jne    c000125c <dlmalloc+0x151>
c000124f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001254:	8d 43 08             	lea    eax,[ebx+0x8]
c0001257:	e9 35 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000125c:	89 f8                	mov    eax,edi
c000125e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001264:	77 19                	ja     c000127f <dlmalloc+0x174>
c0001266:	c1 e8 03             	shr    eax,0x3
c0001269:	8d 14 00             	lea    edx,[eax+eax*1]
c000126c:	83 c2 0d             	add    edx,0xd
c000126f:	8d 2c 95 98 ec 02 c0 	lea    ebp,[edx*4-0x3ffd1368]
c0001276:	8b 14 95 a0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1360]
c000127d:	eb 46                	jmp    c00012c5 <dlmalloc+0x1ba>
c000127f:	e8 c1 f9 ff ff       	call   c0000c45 <largebin_index>
c0001284:	8d 14 00             	lea    edx,[eax+eax*1]
c0001287:	83 c2 0d             	add    edx,0xd
c000128a:	8d 0c 95 a0 ec 02 c0 	lea    ecx,[edx*4-0x3ffd1360]
c0001291:	8b 14 95 a0 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1360]
c0001298:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000129b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000129f:	89 d5                	mov    ebp,edx
c00012a1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012a5:	74 1e                	je     c00012c5 <dlmalloc+0x1ba>
c00012a7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012aa:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012ad:	77 12                	ja     c00012c1 <dlmalloc+0x1b6>
c00012af:	83 cf 01             	or     edi,0x1
c00012b2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012b5:	76 05                	jbe    c00012bc <dlmalloc+0x1b1>
c00012b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ba:	eb f6                	jmp    c00012b2 <dlmalloc+0x1a7>
c00012bc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012bf:	eb 04                	jmp    c00012c5 <dlmalloc+0x1ba>
c00012c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012c5:	89 c7                	mov    edi,eax
c00012c7:	88 c1                	mov    cl,al
c00012c9:	c1 ff 05             	sar    edi,0x5
c00012cc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012d0:	bf 01 00 00 00       	mov    edi,0x1
c00012d5:	d3 e7                	shl    edi,cl
c00012d7:	89 f8                	mov    eax,edi
c00012d9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012dd:	09 04 bd d4 ef 02 c0 	or     DWORD PTR [edi*4-0x3ffd102c],eax
c00012e4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012e7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ea:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012ed:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012f0:	e9 db fe ff ff       	jmp    c00011d0 <dlmalloc+0xc5>
c00012f5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012fb:	76 78                	jbe    c0001375 <dlmalloc+0x26a>
c00012fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001301:	8d 04 c5 d4 ec 02 c0 	lea    eax,[eax*8-0x3ffd132c]
c0001308:	8d 48 f8             	lea    ecx,[eax-0x8]
c000130b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000130e:	39 ca                	cmp    edx,ecx
c0001310:	74 63                	je     c0001375 <dlmalloc+0x26a>
c0001312:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001315:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001318:	83 e3 fc             	and    ebx,0xfffffffc
c000131b:	39 de                	cmp    esi,ebx
c000131d:	77 52                	ja     c0001371 <dlmalloc+0x266>
c000131f:	89 df                	mov    edi,ebx
c0001321:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001324:	29 f7                	sub    edi,esi
c0001326:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001329:	01 d3                	add    ebx,edx
c000132b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000132e:	83 ff 0f             	cmp    edi,0xf
c0001331:	8d 42 08             	lea    eax,[edx+0x8]
c0001334:	77 09                	ja     c000133f <dlmalloc+0x234>
c0001336:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000133a:	e9 52 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000133f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001342:	83 ce 01             	or     esi,0x1
c0001345:	89 0d dc ec 02 c0    	mov    DWORD PTR ds:0xc002ecdc,ecx
c000134b:	89 0d e0 ec 02 c0    	mov    DWORD PTR ds:0xc002ece0,ecx
c0001351:	c7 41 08 d4 ec 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ecd4
c0001358:	c7 41 0c d4 ec 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ecd4
c000135f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001362:	89 fa                	mov    edx,edi
c0001364:	83 ca 01             	or     edx,0x1
c0001367:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136a:	89 3b                	mov    DWORD PTR [ebx],edi
c000136c:	e9 20 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c0001371:	89 c2                	mov    edx,eax
c0001373:	eb 99                	jmp    c000130e <dlmalloc+0x203>
c0001375:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001379:	b8 01 00 00 00       	mov    eax,0x1
c000137e:	41                   	inc    ecx
c000137f:	89 cb                	mov    ebx,ecx
c0001381:	8d 14 cd cc ec 02 c0 	lea    edx,[ecx*8-0x3ffd1334]
c0001388:	c1 eb 05             	shr    ebx,0x5
c000138b:	d3 e0                	shl    eax,cl
c000138d:	8b 3c 9d d4 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd102c]
c0001394:	39 f8                	cmp    eax,edi
c0001396:	77 04                	ja     c000139c <dlmalloc+0x291>
c0001398:	85 c0                	test   eax,eax
c000139a:	75 26                	jne    c00013c2 <dlmalloc+0x2b7>
c000139c:	43                   	inc    ebx
c000139d:	83 fb 02             	cmp    ebx,0x2
c00013a0:	0f 87 a6 00 00 00    	ja     c000144c <dlmalloc+0x341>
c00013a6:	8b 3c 9d d4 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd102c]
c00013ad:	85 ff                	test   edi,edi
c00013af:	74 eb                	je     c000139c <dlmalloc+0x291>
c00013b1:	89 d8                	mov    eax,ebx
c00013b3:	c1 e0 06             	shl    eax,0x6
c00013b6:	8d 14 85 cc ec 02 c0 	lea    edx,[eax*4-0x3ffd1334]
c00013bd:	b8 01 00 00 00       	mov    eax,0x1
c00013c2:	85 f8                	test   eax,edi
c00013c4:	75 07                	jne    c00013cd <dlmalloc+0x2c2>
c00013c6:	83 c2 08             	add    edx,0x8
c00013c9:	01 c0                	add    eax,eax
c00013cb:	eb f5                	jmp    c00013c2 <dlmalloc+0x2b7>
c00013cd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013d0:	39 ca                	cmp    edx,ecx
c00013d2:	75 14                	jne    c00013e8 <dlmalloc+0x2dd>
c00013d4:	89 c1                	mov    ecx,eax
c00013d6:	83 c2 08             	add    edx,0x8
c00013d9:	f7 d1                	not    ecx
c00013db:	01 c0                	add    eax,eax
c00013dd:	21 cf                	and    edi,ecx
c00013df:	89 3c 9d d4 ef 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd102c],edi
c00013e6:	eb ac                	jmp    c0001394 <dlmalloc+0x289>
c00013e8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013eb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013ee:	83 e0 fc             	and    eax,0xfffffffc
c00013f1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013f4:	89 c3                	mov    ebx,eax
c00013f6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013f9:	29 f3                	sub    ebx,esi
c00013fb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013fe:	83 fb 0f             	cmp    ebx,0xf
c0001401:	8d 41 08             	lea    eax,[ecx+0x8]
c0001404:	77 09                	ja     c000140f <dlmalloc+0x304>
c0001406:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000140a:	e9 82 00 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000140f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001412:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001418:	89 3d dc ec 02 c0    	mov    DWORD PTR ds:0xc002ecdc,edi
c000141e:	89 3d e0 ec 02 c0    	mov    DWORD PTR ds:0xc002ece0,edi
c0001424:	c7 47 08 d4 ec 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ecd4
c000142b:	c7 47 0c d4 ec 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ecd4
c0001432:	77 06                	ja     c000143a <dlmalloc+0x32f>
c0001434:	89 3d d0 ec 02 c0    	mov    DWORD PTR ds:0xc002ecd0,edi
c000143a:	83 ce 01             	or     esi,0x1
c000143d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001440:	89 d9                	mov    ecx,ebx
c0001442:	83 c9 01             	or     ecx,0x1
c0001445:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001448:	89 1a                	mov    DWORD PTR [edx],ebx
c000144a:	eb 45                	jmp    c0001491 <dlmalloc+0x386>
c000144c:	a1 cc ec 02 c0       	mov    eax,ds:0xc002eccc
c0001451:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001457:	83 e2 fc             	and    edx,0xfffffffc
c000145a:	39 d1                	cmp    ecx,edx
c000145c:	77 1e                	ja     c000147c <dlmalloc+0x371>
c000145e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001461:	89 f3                	mov    ebx,esi
c0001463:	89 0d cc ec 02 c0    	mov    DWORD PTR ds:0xc002eccc,ecx
c0001469:	83 cb 01             	or     ebx,0x1
c000146c:	29 f2                	sub    edx,esi
c000146e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001471:	83 ca 01             	or     edx,0x1
c0001474:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001477:	e9 2d fd ff ff       	jmp    c00011a9 <dlmalloc+0x9e>
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	89 f0                	mov    eax,esi
c0001481:	5b                   	pop    ebx
c0001482:	ba a0 ec 02 c0       	mov    edx,0xc002eca0
c0001487:	5e                   	pop    esi
c0001488:	5f                   	pop    edi
c0001489:	5d                   	pop    ebp
c000148a:	e9 16 fa ff ff       	jmp    c0000ea5 <sYSMALLOc>
c000148f:	31 c0                	xor    eax,eax
c0001491:	83 c4 1c             	add    esp,0x1c
c0001494:	5b                   	pop    ebx
c0001495:	5e                   	pop    esi
c0001496:	5f                   	pop    edi
c0001497:	5d                   	pop    ebp
c0001498:	c3                   	ret    

c0001499 <iALLOc>:
c0001499:	55                   	push   ebp
c000149a:	89 c5                	mov    ebp,eax
c000149c:	57                   	push   edi
c000149d:	56                   	push   esi
c000149e:	53                   	push   ebx
c000149f:	83 ec 2c             	sub    esp,0x2c
c00014a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ae:	83 3d a0 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002eca0,0x0
c00014b5:	75 12                	jne    c00014c9 <iALLOc+0x30>
c00014b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014bb:	b8 a0 ec 02 c0       	mov    eax,0xc002eca0
c00014c0:	e8 04 f8 ff ff       	call   c0000cc9 <malloc_consolidate>
c00014c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	74 12                	je     c00014e2 <iALLOc+0x49>
c00014d0:	85 ed                	test   ebp,ebp
c00014d2:	0f 84 64 01 00 00    	je     c000163c <iALLOc+0x1a3>
c00014d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014e0:	eb 33                	jmp    c0001515 <iALLOc+0x7c>
c00014e2:	85 ed                	test   ebp,ebp
c00014e4:	75 14                	jne    c00014fa <iALLOc+0x61>
c00014e6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014ee:	83 c4 2c             	add    esp,0x2c
c00014f1:	5b                   	pop    ebx
c00014f2:	5e                   	pop    esi
c00014f3:	5f                   	pop    edi
c00014f4:	5d                   	pop    ebp
c00014f5:	e9 11 fc ff ff       	jmp    c000110b <dlmalloc>
c00014fa:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001501:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001509:	83 f8 0f             	cmp    eax,0xf
c000150c:	76 07                	jbe    c0001515 <iALLOc+0x7c>
c000150e:	83 e0 f8             	and    eax,0xfffffff8
c0001511:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001515:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000151a:	75 09                	jne    c0001525 <iALLOc+0x8c>
c000151c:	89 d0                	mov    eax,edx
c000151e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001521:	31 f6                	xor    esi,esi
c0001523:	eb 3b                	jmp    c0001560 <iALLOc+0xc7>
c0001525:	8b 02                	mov    eax,DWORD PTR [edx]
c0001527:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000152f:	83 c0 0b             	add    eax,0xb
c0001532:	83 f8 0f             	cmp    eax,0xf
c0001535:	76 07                	jbe    c000153e <iALLOc+0xa5>
c0001537:	83 e0 f8             	and    eax,0xfffffff8
c000153a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000153e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001542:	0f af f5             	imul   esi,ebp
c0001545:	eb 25                	jmp    c000156c <iALLOc+0xd3>
c0001547:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001549:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000154c:	bb 10 00 00 00       	mov    ebx,0x10
c0001551:	83 f9 0f             	cmp    ecx,0xf
c0001554:	76 05                	jbe    c000155b <iALLOc+0xc2>
c0001556:	83 e1 f8             	and    ecx,0xfffffff8
c0001559:	89 cb                	mov    ebx,ecx
c000155b:	01 de                	add    esi,ebx
c000155d:	83 c0 04             	add    eax,0x4
c0001560:	39 c7                	cmp    edi,eax
c0001562:	75 e3                	jne    c0001547 <iALLOc+0xae>
c0001564:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000156c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001570:	8b 1d f4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff4
c0001576:	83 ec 0c             	sub    esp,0xc
c0001579:	c7 05 f4 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eff4,0x0
c0001583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001587:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000158b:	50                   	push   eax
c000158c:	e8 7a fb ff ff       	call   c000110b <dlmalloc>
c0001591:	83 c4 10             	add    esp,0x10
c0001594:	89 1d f4 ef 02 c0    	mov    DWORD PTR ds:0xc002eff4,ebx
c000159a:	85 c0                	test   eax,eax
c000159c:	0f 84 92 00 00 00    	je     c0001634 <iALLOc+0x19b>
c00015a2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015a5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015a8:	83 e3 fc             	and    ebx,0xfffffffc
c00015ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015af:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015b4:	74 1e                	je     c00015d4 <iALLOc+0x13b>
c00015b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ba:	89 d9                	mov    ecx,ebx
c00015bc:	52                   	push   edx
c00015bd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015c1:	83 e9 04             	sub    ecx,0x4
c00015c4:	51                   	push   ecx
c00015c5:	6a 00                	push   0x0
c00015c7:	50                   	push   eax
c00015c8:	e8 9f f1 ff ff       	call   c000076c <memset>
c00015cd:	83 c4 10             	add    esp,0x10
c00015d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015d9:	75 14                	jne    c00015ef <iALLOc+0x156>
c00015db:	8d 04 37             	lea    eax,[edi+esi*1]
c00015de:	29 f3                	sub    ebx,esi
c00015e0:	8d 48 08             	lea    ecx,[eax+0x8]
c00015e3:	83 cb 01             	or     ebx,0x1
c00015e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ed:	89 f3                	mov    ebx,esi
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	4d                   	dec    ebp
c00015f2:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015f9:	39 c5                	cmp    ebp,eax
c00015fb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015fe:	74 2c                	je     c000162c <iALLOc+0x193>
c0001600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001604:	85 c9                	test   ecx,ecx
c0001606:	75 15                	jne    c000161d <iALLOc+0x184>
c0001608:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000160b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000160e:	b9 10 00 00 00       	mov    ecx,0x10
c0001613:	83 fe 0f             	cmp    esi,0xf
c0001616:	76 05                	jbe    c000161d <iALLOc+0x184>
c0001618:	83 e6 f8             	and    esi,0xfffffff8
c000161b:	89 f1                	mov    ecx,esi
c000161d:	89 ce                	mov    esi,ecx
c000161f:	29 cb                	sub    ebx,ecx
c0001621:	83 ce 01             	or     esi,0x1
c0001624:	40                   	inc    eax
c0001625:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001628:	01 cf                	add    edi,ecx
c000162a:	eb c6                	jmp    c00015f2 <iALLOc+0x159>
c000162c:	83 cb 01             	or     ebx,0x1
c000162f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001632:	eb 08                	jmp    c000163c <iALLOc+0x1a3>
c0001634:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000163c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001640:	83 c4 2c             	add    esp,0x2c
c0001643:	5b                   	pop    ebx
c0001644:	5e                   	pop    esi
c0001645:	5f                   	pop    edi
c0001646:	5d                   	pop    ebp
c0001647:	c3                   	ret    

c0001648 <dlrealloc>:
c0001648:	55                   	push   ebp
c0001649:	57                   	push   edi
c000164a:	56                   	push   esi
c000164b:	53                   	push   ebx
c000164c:	83 ec 1c             	sub    esp,0x1c
c000164f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001657:	85 db                	test   ebx,ebx
c0001659:	75 10                	jne    c000166b <dlrealloc+0x23>
c000165b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000165f:	83 c4 1c             	add    esp,0x1c
c0001662:	5b                   	pop    ebx
c0001663:	5e                   	pop    esi
c0001664:	5f                   	pop    edi
c0001665:	5d                   	pop    ebp
c0001666:	e9 a0 fa ff ff       	jmp    c000110b <dlmalloc>
c000166b:	83 f8 df             	cmp    eax,0xffffffdf
c000166e:	76 07                	jbe    c0001677 <dlrealloc+0x2f>
c0001670:	31 db                	xor    ebx,ebx
c0001672:	e9 6a 01 00 00       	jmp    c00017e1 <dlrealloc+0x199>
c0001677:	83 c0 0b             	add    eax,0xb
c000167a:	bd 10 00 00 00       	mov    ebp,0x10
c000167f:	83 f8 0f             	cmp    eax,0xf
c0001682:	76 05                	jbe    c0001689 <dlrealloc+0x41>
c0001684:	83 e0 f8             	and    eax,0xfffffff8
c0001687:	89 c5                	mov    ebp,eax
c0001689:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000168c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000168f:	89 c6                	mov    esi,eax
c0001691:	83 e6 fc             	and    esi,0xfffffffc
c0001694:	a8 02                	test   al,0x2
c0001696:	75 d8                	jne    c0001670 <dlrealloc+0x28>
c0001698:	39 f5                	cmp    ebp,esi
c000169a:	0f 86 04 01 00 00    	jbe    c00017a4 <dlrealloc+0x15c>
c00016a0:	8d 14 37             	lea    edx,[edi+esi*1]
c00016a3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016a6:	39 15 cc ec 02 c0    	cmp    DWORD PTR ds:0xc002eccc,edx
c00016ac:	75 33                	jne    c00016e1 <dlrealloc+0x99>
c00016ae:	83 e1 fc             	and    ecx,0xfffffffc
c00016b1:	01 f1                	add    ecx,esi
c00016b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016b7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00016ba:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016be:	77 49                	ja     c0001709 <dlrealloc+0xc1>
c00016c0:	01 ef                	add    edi,ebp
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 e8                	or     eax,ebp
c00016c7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ca:	89 3d cc ec 02 c0    	mov    DWORD PTR ds:0xc002eccc,edi
c00016d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016d4:	29 e8                	sub    eax,ebp
c00016d6:	83 c8 01             	or     eax,0x1
c00016d9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016dc:	e9 00 01 00 00       	jmp    c00017e1 <dlrealloc+0x199>
c00016e1:	89 c8                	mov    eax,ecx
c00016e3:	83 e0 fe             	and    eax,0xfffffffe
c00016e6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016eb:	75 1c                	jne    c0001709 <dlrealloc+0xc1>
c00016ed:	83 e1 fc             	and    ecx,0xfffffffc
c00016f0:	01 f1                	add    ecx,esi
c00016f2:	39 cd                	cmp    ebp,ecx
c00016f4:	77 13                	ja     c0001709 <dlrealloc+0xc1>
c00016f6:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016fc:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016ff:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001702:	89 ce                	mov    esi,ecx
c0001704:	e9 9b 00 00 00       	jmp    c00017a4 <dlrealloc+0x15c>
c0001709:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000170d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001710:	83 ec 0c             	sub    esp,0xc
c0001713:	50                   	push   eax
c0001714:	e8 f2 f9 ff ff       	call   c000110b <dlmalloc>
c0001719:	83 c4 10             	add    esp,0x10
c000171c:	85 c0                	test   eax,eax
c000171e:	0f 84 4c ff ff ff    	je     c0001670 <dlrealloc+0x28>
c0001724:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001727:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000172b:	39 ca                	cmp    edx,ecx
c000172d:	75 0a                	jne    c0001739 <dlrealloc+0xf1>
c000172f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001732:	83 e0 fc             	and    eax,0xfffffffc
c0001735:	01 c6                	add    esi,eax
c0001737:	eb 6b                	jmp    c00017a4 <dlrealloc+0x15c>
c0001739:	8d 4e fc             	lea    ecx,[esi-0x4]
c000173c:	83 f9 27             	cmp    ecx,0x27
c000173f:	76 08                	jbe    c0001749 <dlrealloc+0x101>
c0001741:	89 de                	mov    esi,ebx
c0001743:	89 c7                	mov    edi,eax
c0001745:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001747:	eb 43                	jmp    c000178c <dlrealloc+0x144>
c0001749:	8b 13                	mov    edx,DWORD PTR [ebx]
c000174b:	83 f9 13             	cmp    ecx,0x13
c000174e:	89 10                	mov    DWORD PTR [eax],edx
c0001750:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001753:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001756:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001759:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000175c:	76 2e                	jbe    c000178c <dlrealloc+0x144>
c000175e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001761:	83 f9 1b             	cmp    ecx,0x1b
c0001764:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001767:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000176a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000176d:	76 1d                	jbe    c000178c <dlrealloc+0x144>
c000176f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001772:	83 f9 23             	cmp    ecx,0x23
c0001775:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001778:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000177b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000177e:	76 0c                	jbe    c000178c <dlrealloc+0x144>
c0001780:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001783:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001786:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001789:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000178c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	53                   	push   ebx
c0001794:	e8 17 f6 ff ff       	call   c0000db0 <dlfree>
c0001799:	83 c4 10             	add    esp,0x10
c000179c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017a0:	89 c3                	mov    ebx,eax
c00017a2:	eb 3d                	jmp    c00017e1 <dlrealloc+0x199>
c00017a4:	89 f2                	mov    edx,esi
c00017a6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017a9:	29 ea                	sub    edx,ebp
c00017ab:	83 e1 01             	and    ecx,0x1
c00017ae:	8d 04 37             	lea    eax,[edi+esi*1]
c00017b1:	83 fa 0f             	cmp    edx,0xf
c00017b4:	77 0b                	ja     c00017c1 <dlrealloc+0x179>
c00017b6:	09 ce                	or     esi,ecx
c00017b8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017bb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bf:	eb 20                	jmp    c00017e1 <dlrealloc+0x199>
c00017c1:	01 ef                	add    edi,ebp
c00017c3:	83 ec 0c             	sub    esp,0xc
c00017c6:	09 cd                	or     ebp,ecx
c00017c8:	83 ca 01             	or     edx,0x1
c00017cb:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017ce:	83 c7 08             	add    edi,0x8
c00017d1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017d4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017d8:	57                   	push   edi
c00017d9:	e8 d2 f5 ff ff       	call   c0000db0 <dlfree>
c00017de:	83 c4 10             	add    esp,0x10
c00017e1:	83 c4 1c             	add    esp,0x1c
c00017e4:	89 d8                	mov    eax,ebx
c00017e6:	5b                   	pop    ebx
c00017e7:	5e                   	pop    esi
c00017e8:	5f                   	pop    edi
c00017e9:	5d                   	pop    ebp
c00017ea:	c3                   	ret    

c00017eb <dlmemalign>:
c00017eb:	55                   	push   ebp
c00017ec:	57                   	push   edi
c00017ed:	56                   	push   esi
c00017ee:	53                   	push   ebx
c00017ef:	83 ec 0c             	sub    esp,0xc
c00017f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017fa:	83 fa 08             	cmp    edx,0x8
c00017fd:	77 10                	ja     c000180f <dlmemalign+0x24>
c00017ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001803:	83 c4 0c             	add    esp,0xc
c0001806:	5b                   	pop    ebx
c0001807:	5e                   	pop    esi
c0001808:	5f                   	pop    edi
c0001809:	5d                   	pop    ebp
c000180a:	e9 fc f8 ff ff       	jmp    c000110b <dlmalloc>
c000180f:	bf 10 00 00 00       	mov    edi,0x10
c0001814:	83 fa 0f             	cmp    edx,0xf
c0001817:	76 13                	jbe    c000182c <dlmemalign+0x41>
c0001819:	8d 4a ff             	lea    ecx,[edx-0x1]
c000181c:	85 d1                	test   ecx,edx
c000181e:	75 04                	jne    c0001824 <dlmemalign+0x39>
c0001820:	89 d7                	mov    edi,edx
c0001822:	eb 08                	jmp    c000182c <dlmemalign+0x41>
c0001824:	39 d7                	cmp    edi,edx
c0001826:	73 04                	jae    c000182c <dlmemalign+0x41>
c0001828:	01 ff                	add    edi,edi
c000182a:	eb f8                	jmp    c0001824 <dlmemalign+0x39>
c000182c:	83 f8 df             	cmp    eax,0xffffffdf
c000182f:	76 07                	jbe    c0001838 <dlmemalign+0x4d>
c0001831:	31 c0                	xor    eax,eax
c0001833:	e9 ce 00 00 00       	jmp    c0001906 <dlmemalign+0x11b>
c0001838:	83 c0 0b             	add    eax,0xb
c000183b:	bd 10 00 00 00       	mov    ebp,0x10
c0001840:	83 f8 0f             	cmp    eax,0xf
c0001843:	76 05                	jbe    c000184a <dlmemalign+0x5f>
c0001845:	83 e0 f8             	and    eax,0xfffffff8
c0001848:	89 c5                	mov    ebp,eax
c000184a:	83 ec 0c             	sub    esp,0xc
c000184d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001851:	50                   	push   eax
c0001852:	e8 b4 f8 ff ff       	call   c000110b <dlmalloc>
c0001857:	83 c4 10             	add    esp,0x10
c000185a:	89 c1                	mov    ecx,eax
c000185c:	85 c0                	test   eax,eax
c000185e:	74 d1                	je     c0001831 <dlmemalign+0x46>
c0001860:	31 d2                	xor    edx,edx
c0001862:	8d 70 f8             	lea    esi,[eax-0x8]
c0001865:	f7 f7                	div    edi
c0001867:	85 d2                	test   edx,edx
c0001869:	74 62                	je     c00018cd <dlmemalign+0xe2>
c000186b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000186f:	89 f8                	mov    eax,edi
c0001871:	f7 d8                	neg    eax
c0001873:	21 c3                	and    ebx,eax
c0001875:	83 eb 08             	sub    ebx,0x8
c0001878:	89 d8                	mov    eax,ebx
c000187a:	29 f0                	sub    eax,esi
c000187c:	83 f8 0f             	cmp    eax,0xf
c000187f:	77 02                	ja     c0001883 <dlmemalign+0x98>
c0001881:	01 fb                	add    ebx,edi
c0001883:	89 d8                	mov    eax,ebx
c0001885:	29 f0                	sub    eax,esi
c0001887:	89 c6                	mov    esi,eax
c0001889:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000188c:	89 c2                	mov    edx,eax
c000188e:	83 e2 fc             	and    edx,0xfffffffc
c0001891:	29 f2                	sub    edx,esi
c0001893:	a8 02                	test   al,0x2
c0001895:	74 10                	je     c00018a7 <dlmemalign+0xbc>
c0001897:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000189a:	83 ca 02             	or     edx,0x2
c000189d:	8d 43 08             	lea    eax,[ebx+0x8]
c00018a0:	89 33                	mov    DWORD PTR [ebx],esi
c00018a2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018a5:	eb 5f                	jmp    c0001906 <dlmemalign+0x11b>
c00018a7:	83 ec 0c             	sub    esp,0xc
c00018aa:	89 d0                	mov    eax,edx
c00018ac:	83 c8 01             	or     eax,0x1
c00018af:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018b2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018b7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ba:	83 e0 01             	and    eax,0x1
c00018bd:	09 f0                	or     eax,esi
c00018bf:	89 de                	mov    esi,ebx
c00018c1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018c4:	51                   	push   ecx
c00018c5:	e8 e6 f4 ff ff       	call   c0000db0 <dlfree>
c00018ca:	83 c4 10             	add    esp,0x10
c00018cd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d0:	a8 02                	test   al,0x2
c00018d2:	75 2f                	jne    c0001903 <dlmemalign+0x118>
c00018d4:	83 e0 fc             	and    eax,0xfffffffc
c00018d7:	8d 55 10             	lea    edx,[ebp+0x10]
c00018da:	39 c2                	cmp    edx,eax
c00018dc:	73 25                	jae    c0001903 <dlmemalign+0x118>
c00018de:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018e1:	83 ec 0c             	sub    esp,0xc
c00018e4:	29 e8                	sub    eax,ebp
c00018e6:	83 c2 08             	add    edx,0x8
c00018e9:	83 c8 01             	or     eax,0x1
c00018ec:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018ef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f2:	83 e0 01             	and    eax,0x1
c00018f5:	09 c5                	or     ebp,eax
c00018f7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018fa:	52                   	push   edx
c00018fb:	e8 b0 f4 ff ff       	call   c0000db0 <dlfree>
c0001900:	83 c4 10             	add    esp,0x10
c0001903:	8d 46 08             	lea    eax,[esi+0x8]
c0001906:	83 c4 0c             	add    esp,0xc
c0001909:	5b                   	pop    ebx
c000190a:	5e                   	pop    esi
c000190b:	5f                   	pop    edi
c000190c:	5d                   	pop    ebp
c000190d:	c3                   	ret    

c000190e <dlcalloc>:
c000190e:	53                   	push   ebx
c000190f:	83 ec 14             	sub    esp,0x14
c0001912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001916:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000191b:	50                   	push   eax
c000191c:	e8 ea f7 ff ff       	call   c000110b <dlmalloc>
c0001921:	83 c4 10             	add    esp,0x10
c0001924:	89 c3                	mov    ebx,eax
c0001926:	85 c0                	test   eax,eax
c0001928:	74 77                	je     c00019a1 <dlcalloc+0x93>
c000192a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000192d:	89 d0                	mov    eax,edx
c000192f:	83 e0 fc             	and    eax,0xfffffffc
c0001932:	80 e2 02             	and    dl,0x2
c0001935:	75 5a                	jne    c0001991 <dlcalloc+0x83>
c0001937:	83 e8 04             	sub    eax,0x4
c000193a:	83 f8 27             	cmp    eax,0x27
c000193d:	76 03                	jbe    c0001942 <dlcalloc+0x34>
c000193f:	51                   	push   ecx
c0001940:	eb 53                	jmp    c0001995 <dlcalloc+0x87>
c0001942:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001948:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000194f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001956:	83 f8 13             	cmp    eax,0x13
c0001959:	76 46                	jbe    c00019a1 <dlcalloc+0x93>
c000195b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001962:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001969:	83 f8 1b             	cmp    eax,0x1b
c000196c:	76 33                	jbe    c00019a1 <dlcalloc+0x93>
c000196e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001975:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000197c:	83 f8 23             	cmp    eax,0x23
c000197f:	76 20                	jbe    c00019a1 <dlcalloc+0x93>
c0001981:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001988:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000198f:	eb 10                	jmp    c00019a1 <dlcalloc+0x93>
c0001991:	83 e8 08             	sub    eax,0x8
c0001994:	52                   	push   edx
c0001995:	50                   	push   eax
c0001996:	6a 00                	push   0x0
c0001998:	53                   	push   ebx
c0001999:	e8 ce ed ff ff       	call   c000076c <memset>
c000199e:	83 c4 10             	add    esp,0x10
c00019a1:	89 d8                	mov    eax,ebx
c00019a3:	83 c4 08             	add    esp,0x8
c00019a6:	5b                   	pop    ebx
c00019a7:	c3                   	ret    

c00019a8 <dlcfree>:
c00019a8:	e9 03 f4 ff ff       	jmp    c0000db0 <dlfree>

c00019ad <dlindependent_calloc>:
c00019ad:	83 ec 28             	sub    esp,0x28
c00019b0:	b9 03 00 00 00       	mov    ecx,0x3
c00019b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019c9:	e8 cb fa ff ff       	call   c0001499 <iALLOc>
c00019ce:	83 c4 2c             	add    esp,0x2c
c00019d1:	c3                   	ret    

c00019d2 <dlindependent_comalloc>:
c00019d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019da:	31 c9                	xor    ecx,ecx
c00019dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019e4:	e9 b0 fa ff ff       	jmp    c0001499 <iALLOc>

c00019e9 <dlvalloc>:
c00019e9:	83 ec 0c             	sub    esp,0xc
c00019ec:	83 3d a0 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002eca0,0x0
c00019f3:	75 0a                	jne    c00019ff <dlvalloc+0x16>
c00019f5:	b8 a0 ec 02 c0       	mov    eax,0xc002eca0
c00019fa:	e8 ca f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c00019ff:	50                   	push   eax
c0001a00:	50                   	push   eax
c0001a01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a05:	ff 35 fc ef 02 c0    	push   DWORD PTR ds:0xc002effc
c0001a0b:	e8 db fd ff ff       	call   c00017eb <dlmemalign>
c0001a10:	83 c4 1c             	add    esp,0x1c
c0001a13:	c3                   	ret    

c0001a14 <dlpvalloc>:
c0001a14:	83 ec 0c             	sub    esp,0xc
c0001a17:	83 3d a0 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002eca0,0x0
c0001a1e:	75 0a                	jne    c0001a2a <dlpvalloc+0x16>
c0001a20:	b8 a0 ec 02 c0       	mov    eax,0xc002eca0
c0001a25:	e8 9f f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a2a:	a1 fc ef 02 c0       	mov    eax,ds:0xc002effc
c0001a2f:	89 c1                	mov    ecx,eax
c0001a31:	52                   	push   edx
c0001a32:	f7 d9                	neg    ecx
c0001a34:	52                   	push   edx
c0001a35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a39:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a3d:	21 ca                	and    edx,ecx
c0001a3f:	52                   	push   edx
c0001a40:	50                   	push   eax
c0001a41:	e8 a5 fd ff ff       	call   c00017eb <dlmemalign>
c0001a46:	83 c4 1c             	add    esp,0x1c
c0001a49:	c3                   	ret    

c0001a4a <dlmalloc_trim>:
c0001a4a:	b8 a0 ec 02 c0       	mov    eax,0xc002eca0
c0001a4f:	e8 75 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a54:	31 c0                	xor    eax,eax
c0001a56:	c3                   	ret    

c0001a57 <dlmalloc_usable_size>:
c0001a57:	53                   	push   ebx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a5e:	85 c9                	test   ecx,ecx
c0001a60:	74 24                	je     c0001a86 <dlmalloc_usable_size+0x2f>
c0001a62:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a65:	f6 c2 02             	test   dl,0x2
c0001a68:	74 08                	je     c0001a72 <dlmalloc_usable_size+0x1b>
c0001a6a:	83 e2 fc             	and    edx,0xfffffffc
c0001a6d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a70:	eb 14                	jmp    c0001a86 <dlmalloc_usable_size+0x2f>
c0001a72:	89 d3                	mov    ebx,edx
c0001a74:	31 c0                	xor    eax,eax
c0001a76:	83 e3 fe             	and    ebx,0xfffffffe
c0001a79:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a7e:	74 06                	je     c0001a86 <dlmalloc_usable_size+0x2f>
c0001a80:	83 e2 fc             	and    edx,0xfffffffc
c0001a83:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a86:	5b                   	pop    ebx
c0001a87:	c3                   	ret    

c0001a88 <dlmallinfo>:
c0001a88:	55                   	push   ebp
c0001a89:	57                   	push   edi
c0001a8a:	56                   	push   esi
c0001a8b:	53                   	push   ebx
c0001a8c:	83 ec 08             	sub    esp,0x8
c0001a8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a93:	83 3d cc ec 02 c0 00 	cmp    DWORD PTR ds:0xc002eccc,0x0
c0001a9a:	75 0a                	jne    c0001aa6 <dlmallinfo+0x1e>
c0001a9c:	b8 a0 ec 02 c0       	mov    eax,0xc002eca0
c0001aa1:	e8 23 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001aa6:	a1 cc ec 02 c0       	mov    eax,ds:0xc002eccc
c0001aab:	31 ed                	xor    ebp,ebp
c0001aad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ab0:	31 c9                	xor    ecx,ecx
c0001ab2:	83 e0 fc             	and    eax,0xfffffffc
c0001ab5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ab9:	31 c0                	xor    eax,eax
c0001abb:	8b 14 85 a4 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd135c]
c0001ac2:	85 d2                	test   edx,edx
c0001ac4:	74 0e                	je     c0001ad4 <dlmallinfo+0x4c>
c0001ac6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ac9:	45                   	inc    ebp
c0001aca:	83 e6 fc             	and    esi,0xfffffffc
c0001acd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ad0:	01 f1                	add    ecx,esi
c0001ad2:	eb ee                	jmp    c0001ac2 <dlmallinfo+0x3a>
c0001ad4:	40                   	inc    eax
c0001ad5:	83 f8 0a             	cmp    eax,0xa
c0001ad8:	75 e1                	jne    c0001abb <dlmallinfo+0x33>
c0001ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ae5:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ae8:	b8 d4 ec 02 c0       	mov    eax,0xc002ecd4
c0001aed:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001af0:	39 f0                	cmp    eax,esi
c0001af2:	74 10                	je     c0001b04 <dlmallinfo+0x7c>
c0001af4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001af7:	ff 04 24             	inc    DWORD PTR [esp]
c0001afa:	83 e7 fc             	and    edi,0xfffffffc
c0001afd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b00:	01 fa                	add    edx,edi
c0001b02:	eb ec                	jmp    c0001af0 <dlmallinfo+0x68>
c0001b04:	83 c0 08             	add    eax,0x8
c0001b07:	3d cc ef 02 c0       	cmp    eax,0xc002efcc
c0001b0c:	75 df                	jne    c0001aed <dlmallinfo+0x65>
c0001b0e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b11:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b14:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b17:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0001b1c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b1f:	89 03                	mov    DWORD PTR [ebx],eax
c0001b21:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b24:	8b 35 f0 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002eff0
c0001b2a:	29 d0                	sub    eax,edx
c0001b2c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b2f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b32:	8b 35 04 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f004
c0001b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b3c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b3f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b42:	8b 35 14 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f014
c0001b48:	89 d8                	mov    eax,ebx
c0001b4a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b4d:	83 c4 08             	add    esp,0x8
c0001b50:	5b                   	pop    ebx
c0001b51:	5e                   	pop    esi
c0001b52:	5f                   	pop    edi
c0001b53:	5d                   	pop    ebp
c0001b54:	c2 04 00             	ret    0x4

c0001b57 <dlmalloc_stats>:
c0001b57:	83 ec 30             	sub    esp,0x30
c0001b5a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b5e:	50                   	push   eax
c0001b5f:	e8 24 ff ff ff       	call   c0001a88 <dlmallinfo>
c0001b64:	83 c4 30             	add    esp,0x30
c0001b67:	c3                   	ret    

c0001b68 <dlmallopt>:
c0001b68:	56                   	push   esi
c0001b69:	b8 a0 ec 02 c0       	mov    eax,0xc002eca0
c0001b6e:	53                   	push   ebx
c0001b6f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b77:	e8 4d f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001b7c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b7f:	83 f8 05             	cmp    eax,0x5
c0001b82:	77 67                	ja     c0001beb <dlmallopt+0x83>
c0001b84:	ff 24 85 04 9e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd61fc]
c0001b8b:	83 fb 50             	cmp    ebx,0x50
c0001b8e:	77 5b                	ja     c0001beb <dlmallopt+0x83>
c0001b90:	ba 08 00 00 00       	mov    edx,0x8
c0001b95:	85 db                	test   ebx,ebx
c0001b97:	74 12                	je     c0001bab <dlmallopt+0x43>
c0001b99:	83 c3 0b             	add    ebx,0xb
c0001b9c:	ba 10 00 00 00       	mov    edx,0x10
c0001ba1:	83 fb 0f             	cmp    ebx,0xf
c0001ba4:	76 05                	jbe    c0001bab <dlmallopt+0x43>
c0001ba6:	89 da                	mov    edx,ebx
c0001ba8:	83 e2 f8             	and    edx,0xfffffff8
c0001bab:	a1 a0 ec 02 c0       	mov    eax,ds:0xc002eca0
c0001bb0:	83 e0 03             	and    eax,0x3
c0001bb3:	09 d0                	or     eax,edx
c0001bb5:	a3 a0 ec 02 c0       	mov    ds:0xc002eca0,eax
c0001bba:	eb 31                	jmp    c0001bed <dlmallopt+0x85>
c0001bbc:	89 1d e4 ef 02 c0    	mov    DWORD PTR ds:0xc002efe4,ebx
c0001bc2:	eb 06                	jmp    c0001bca <dlmallopt+0x62>
c0001bc4:	89 1d e8 ef 02 c0    	mov    DWORD PTR ds:0xc002efe8,ebx
c0001bca:	be 01 00 00 00       	mov    esi,0x1
c0001bcf:	eb 1c                	jmp    c0001bed <dlmallopt+0x85>
c0001bd1:	89 1d ec ef 02 c0    	mov    DWORD PTR ds:0xc002efec,ebx
c0001bd7:	eb f1                	jmp    c0001bca <dlmallopt+0x62>
c0001bd9:	31 f6                	xor    esi,esi
c0001bdb:	85 db                	test   ebx,ebx
c0001bdd:	75 0e                	jne    c0001bed <dlmallopt+0x85>
c0001bdf:	c7 05 f4 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eff4,0x0
c0001be9:	eb df                	jmp    c0001bca <dlmallopt+0x62>
c0001beb:	31 f6                	xor    esi,esi
c0001bed:	89 f0                	mov    eax,esi
c0001bef:	5b                   	pop    ebx
c0001bf0:	5e                   	pop    esi
c0001bf1:	c3                   	ret    

c0001bf2 <disk_status>:
c0001bf2:	31 c0                	xor    eax,eax
c0001bf4:	c3                   	ret    

c0001bf5 <disk_initialize>:
c0001bf5:	31 c0                	xor    eax,eax
c0001bf7:	c3                   	ret    

c0001bf8 <disk_read>:
c0001bf8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bfd:	0f b6 04 85 80 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd880]
c0001c05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c09:	e9 d0 fa 01 00       	jmp    c00216de <fatWrapperReadDisk>

c0001c0e <disk_write>:
c0001c0e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c13:	0f b6 04 85 80 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd880]
c0001c1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c1f:	e9 01 fb 01 00       	jmp    c0021725 <fatWrapperWriteDisk>

c0001c24 <disk_ioctl>:
c0001c24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c2d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c32:	0f b6 04 85 80 27 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd880]
c0001c3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3e:	e9 29 fb 01 00       	jmp    c002176c <fatWrapperIoctl>

c0001c43 <ld_word>:
c0001c43:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c47:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c4a:	c1 e2 08             	shl    edx,0x8
c0001c4d:	09 d0                	or     eax,edx
c0001c4f:	c3                   	ret    

c0001c50 <ld_dword>:
c0001c50:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c54:	89 d1                	mov    ecx,edx
c0001c56:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c5a:	c1 e1 08             	shl    ecx,0x8
c0001c5d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c60:	09 ca                	or     edx,ecx
c0001c62:	c1 e2 08             	shl    edx,0x8
c0001c65:	09 d0                	or     eax,edx
c0001c67:	c3                   	ret    

c0001c68 <ld_qword>:
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	53                   	push   ebx
c0001c6b:	31 db                	xor    ebx,ebx
c0001c6d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c70:	89 df                	mov    edi,ebx
c0001c72:	89 ce                	mov    esi,ecx
c0001c74:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c78:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7c:	c1 e6 08             	shl    esi,0x8
c0001c7f:	09 f2                	or     edx,esi
c0001c81:	89 d6                	mov    esi,edx
c0001c83:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c87:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c8b:	c1 e6 08             	shl    esi,0x8
c0001c8e:	09 f2                	or     edx,esi
c0001c90:	89 d6                	mov    esi,edx
c0001c92:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c9d:	c1 e6 08             	shl    esi,0x8
c0001ca0:	89 fb                	mov    ebx,edi
c0001ca2:	09 f2                	or     edx,esi
c0001ca4:	89 d1                	mov    ecx,edx
c0001ca6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001caa:	c1 e1 08             	shl    ecx,0x8
c0001cad:	89 da                	mov    edx,ebx
c0001caf:	09 c8                	or     eax,ecx
c0001cb1:	5b                   	pop    ebx
c0001cb2:	5e                   	pop    esi
c0001cb3:	5f                   	pop    edi
c0001cb4:	c3                   	ret    

c0001cb5 <st_word>:
c0001cb5:	66 89 10             	mov    WORD PTR [eax],dx
c0001cb8:	c3                   	ret    

c0001cb9 <st_dword>:
c0001cb9:	89 10                	mov    DWORD PTR [eax],edx
c0001cbb:	c3                   	ret    

c0001cbc <st_qword>:
c0001cbc:	89 10                	mov    DWORD PTR [eax],edx
c0001cbe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cc1:	c3                   	ret    

c0001cc2 <mem_cpy>:
c0001cc2:	85 c9                	test   ecx,ecx
c0001cc4:	74 10                	je     c0001cd6 <mem_cpy+0x14>
c0001cc6:	57                   	push   edi
c0001cc7:	01 c1                	add    ecx,eax
c0001cc9:	56                   	push   esi
c0001cca:	89 c7                	mov    edi,eax
c0001ccc:	89 d6                	mov    esi,edx
c0001cce:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ccf:	39 f9                	cmp    ecx,edi
c0001cd1:	75 fb                	jne    c0001cce <mem_cpy+0xc>
c0001cd3:	5e                   	pop    esi
c0001cd4:	5f                   	pop    edi
c0001cd5:	c3                   	ret    
c0001cd6:	c3                   	ret    

c0001cd7 <mem_set>:
c0001cd7:	01 c1                	add    ecx,eax
c0001cd9:	40                   	inc    eax
c0001cda:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cdd:	39 c8                	cmp    eax,ecx
c0001cdf:	75 f8                	jne    c0001cd9 <mem_set+0x2>
c0001ce1:	c3                   	ret    

c0001ce2 <mem_cmp>:
c0001ce2:	57                   	push   edi
c0001ce3:	56                   	push   esi
c0001ce4:	89 c6                	mov    esi,eax
c0001ce6:	53                   	push   ebx
c0001ce7:	46                   	inc    esi
c0001ce8:	42                   	inc    edx
c0001ce9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ced:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cf1:	29 fb                	sub    ebx,edi
c0001cf3:	89 cf                	mov    edi,ecx
c0001cf5:	29 f7                	sub    edi,esi
c0001cf7:	01 c7                	add    edi,eax
c0001cf9:	74 04                	je     c0001cff <mem_cmp+0x1d>
c0001cfb:	85 db                	test   ebx,ebx
c0001cfd:	74 e8                	je     c0001ce7 <mem_cmp+0x5>
c0001cff:	89 d8                	mov    eax,ebx
c0001d01:	5b                   	pop    ebx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <chk_chr>:
c0001d05:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d08:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d0b:	74 07                	je     c0001d14 <chk_chr+0xf>
c0001d0d:	39 d1                	cmp    ecx,edx
c0001d0f:	74 03                	je     c0001d14 <chk_chr+0xf>
c0001d11:	40                   	inc    eax
c0001d12:	eb f1                	jmp    c0001d05 <chk_chr>
c0001d14:	89 c8                	mov    eax,ecx
c0001d16:	c3                   	ret    

c0001d17 <dbc_1st>:
c0001d17:	31 c0                	xor    eax,eax
c0001d19:	c3                   	ret    

c0001d1a <dbc_2nd>:
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	c3                   	ret    

c0001d1d <tchar2uni>:
c0001d1d:	57                   	push   edi
c0001d1e:	89 c7                	mov    edi,eax
c0001d20:	56                   	push   esi
c0001d21:	53                   	push   ebx
c0001d22:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d24:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d26:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d29:	84 c9                	test   cl,cl
c0001d2b:	78 0a                	js     c0001d37 <tchar2uni+0x1a>
c0001d2d:	0f b6 d1             	movzx  edx,cl
c0001d30:	89 f3                	mov    ebx,esi
c0001d32:	e9 9f 00 00 00       	jmp    c0001dd6 <tchar2uni+0xb9>
c0001d37:	88 ca                	mov    dl,cl
c0001d39:	83 e2 e0             	and    edx,0xffffffe0
c0001d3c:	80 fa c0             	cmp    dl,0xc0
c0001d3f:	75 0c                	jne    c0001d4d <tchar2uni+0x30>
c0001d41:	89 ca                	mov    edx,ecx
c0001d43:	b9 01 00 00 00       	mov    ecx,0x1
c0001d48:	83 e2 1f             	and    edx,0x1f
c0001d4b:	eb 2e                	jmp    c0001d7b <tchar2uni+0x5e>
c0001d4d:	88 ca                	mov    dl,cl
c0001d4f:	83 e2 f0             	and    edx,0xfffffff0
c0001d52:	80 fa e0             	cmp    dl,0xe0
c0001d55:	75 0c                	jne    c0001d63 <tchar2uni+0x46>
c0001d57:	89 ca                	mov    edx,ecx
c0001d59:	b9 02 00 00 00       	mov    ecx,0x2
c0001d5e:	83 e2 0f             	and    edx,0xf
c0001d61:	eb 18                	jmp    c0001d7b <tchar2uni+0x5e>
c0001d63:	88 ca                	mov    dl,cl
c0001d65:	83 e2 f8             	and    edx,0xfffffff8
c0001d68:	88 d0                	mov    al,dl
c0001d6a:	83 ca ff             	or     edx,0xffffffff
c0001d6d:	3c f0                	cmp    al,0xf0
c0001d6f:	75 6c                	jne    c0001ddd <tchar2uni+0xc0>
c0001d71:	89 ca                	mov    edx,ecx
c0001d73:	b9 03 00 00 00       	mov    ecx,0x3
c0001d78:	83 e2 07             	and    edx,0x7
c0001d7b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d7f:	46                   	inc    esi
c0001d80:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d83:	88 c8                	mov    al,cl
c0001d85:	83 e0 c0             	and    eax,0xffffffc0
c0001d88:	3c 80                	cmp    al,0x80
c0001d8a:	75 4e                	jne    c0001dda <tchar2uni+0xbd>
c0001d8c:	c1 e2 06             	shl    edx,0x6
c0001d8f:	83 e1 3f             	and    ecx,0x3f
c0001d92:	09 ca                	or     edx,ecx
c0001d94:	39 de                	cmp    esi,ebx
c0001d96:	75 e7                	jne    c0001d7f <tchar2uni+0x62>
c0001d98:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d9b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001da1:	77 37                	ja     c0001dda <tchar2uni+0xbd>
c0001da3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001da9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001daf:	76 29                	jbe    c0001dda <tchar2uni+0xbd>
c0001db1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001db7:	76 1d                	jbe    c0001dd6 <tchar2uni+0xb9>
c0001db9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dbf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001dc5:	c1 e1 06             	shl    ecx,0x6
c0001dc8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dce:	09 ca                	or     edx,ecx
c0001dd0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dd6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dd8:	eb 03                	jmp    c0001ddd <tchar2uni+0xc0>
c0001dda:	83 ca ff             	or     edx,0xffffffff
c0001ddd:	5b                   	pop    ebx
c0001dde:	89 d0                	mov    eax,edx
c0001de0:	5e                   	pop    esi
c0001de1:	5f                   	pop    edi
c0001de2:	c3                   	ret    

c0001de3 <put_utf>:
c0001de3:	53                   	push   ebx
c0001de4:	83 f8 7f             	cmp    eax,0x7f
c0001de7:	89 c3                	mov    ebx,eax
c0001de9:	b0 00                	mov    al,0x0
c0001deb:	77 11                	ja     c0001dfe <put_utf+0x1b>
c0001ded:	85 c9                	test   ecx,ecx
c0001def:	0f 84 e5 00 00 00    	je     c0001eda <put_utf+0xf7>
c0001df5:	88 1a                	mov    BYTE PTR [edx],bl
c0001df7:	b0 01                	mov    al,0x1
c0001df9:	e9 dc 00 00 00       	jmp    c0001eda <put_utf+0xf7>
c0001dfe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e04:	77 23                	ja     c0001e29 <put_utf+0x46>
c0001e06:	83 f9 01             	cmp    ecx,0x1
c0001e09:	0f 86 cb 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e0f:	89 d8                	mov    eax,ebx
c0001e11:	83 e3 3f             	and    ebx,0x3f
c0001e14:	c1 e8 06             	shr    eax,0x6
c0001e17:	83 cb 80             	or     ebx,0xffffff80
c0001e1a:	83 c8 c0             	or     eax,0xffffffc0
c0001e1d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e20:	88 02                	mov    BYTE PTR [edx],al
c0001e22:	b0 02                	mov    al,0x2
c0001e24:	e9 b1 00 00 00       	jmp    c0001eda <put_utf+0xf7>
c0001e29:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e2f:	77 40                	ja     c0001e71 <put_utf+0x8e>
c0001e31:	83 f9 02             	cmp    ecx,0x2
c0001e34:	0f 86 a0 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e3a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e40:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e46:	0f 86 8e 00 00 00    	jbe    c0001eda <put_utf+0xf7>
c0001e4c:	89 d8                	mov    eax,ebx
c0001e4e:	c1 e8 0c             	shr    eax,0xc
c0001e51:	83 c8 e0             	or     eax,0xffffffe0
c0001e54:	88 02                	mov    BYTE PTR [edx],al
c0001e56:	89 d8                	mov    eax,ebx
c0001e58:	83 e3 3f             	and    ebx,0x3f
c0001e5b:	c1 e8 06             	shr    eax,0x6
c0001e5e:	83 cb 80             	or     ebx,0xffffff80
c0001e61:	83 e0 3f             	and    eax,0x3f
c0001e64:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e67:	83 c8 80             	or     eax,0xffffff80
c0001e6a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e6d:	b0 03                	mov    al,0x3
c0001e6f:	eb 69                	jmp    c0001eda <put_utf+0xf7>
c0001e71:	83 f9 03             	cmp    ecx,0x3
c0001e74:	76 64                	jbe    c0001eda <put_utf+0xf7>
c0001e76:	89 d9                	mov    ecx,ebx
c0001e78:	0f b7 c3             	movzx  eax,bx
c0001e7b:	66 31 c9             	xor    cx,cx
c0001e7e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e84:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e8a:	c1 e9 06             	shr    ecx,0x6
c0001e8d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e93:	77 43                	ja     c0001ed8 <put_utf+0xf5>
c0001e95:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e9b:	77 3b                	ja     c0001ed8 <put_utf+0xf5>
c0001e9d:	09 cb                	or     ebx,ecx
c0001e9f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ea5:	89 d8                	mov    eax,ebx
c0001ea7:	c1 e8 12             	shr    eax,0x12
c0001eaa:	83 c8 f0             	or     eax,0xfffffff0
c0001ead:	88 02                	mov    BYTE PTR [edx],al
c0001eaf:	89 d8                	mov    eax,ebx
c0001eb1:	c1 e8 0c             	shr    eax,0xc
c0001eb4:	83 e0 3f             	and    eax,0x3f
c0001eb7:	83 c8 80             	or     eax,0xffffff80
c0001eba:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ebd:	89 d8                	mov    eax,ebx
c0001ebf:	83 e3 3f             	and    ebx,0x3f
c0001ec2:	c1 e8 06             	shr    eax,0x6
c0001ec5:	83 cb 80             	or     ebx,0xffffff80
c0001ec8:	83 e0 3f             	and    eax,0x3f
c0001ecb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ece:	83 c8 80             	or     eax,0xffffff80
c0001ed1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ed4:	b0 04                	mov    al,0x4
c0001ed6:	eb 02                	jmp    c0001eda <put_utf+0xf7>
c0001ed8:	31 c0                	xor    eax,eax
c0001eda:	5b                   	pop    ebx
c0001edb:	c3                   	ret    

c0001edc <clst2sect>:
c0001edc:	89 c1                	mov    ecx,eax
c0001ede:	83 ea 02             	sub    edx,0x2
c0001ee1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ee4:	83 e8 02             	sub    eax,0x2
c0001ee7:	39 d0                	cmp    eax,edx
c0001ee9:	76 0d                	jbe    c0001ef8 <clst2sect+0x1c>
c0001eeb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001eef:	f7 e2                	mul    edx
c0001ef1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ef4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001ef7:	c3                   	ret    
c0001ef8:	31 c0                	xor    eax,eax
c0001efa:	31 d2                	xor    edx,edx
c0001efc:	c3                   	ret    

c0001efd <clmt_clust>:
c0001efd:	57                   	push   edi
c0001efe:	89 cf                	mov    edi,ecx
c0001f00:	56                   	push   esi
c0001f01:	89 d6                	mov    esi,edx
c0001f03:	53                   	push   ebx
c0001f04:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f08:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f0b:	89 f2                	mov    edx,esi
c0001f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f0f:	c1 ef 09             	shr    edi,0x9
c0001f12:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f16:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f19:	89 f9                	mov    ecx,edi
c0001f1b:	31 ff                	xor    edi,edi
c0001f1d:	57                   	push   edi
c0001f1e:	56                   	push   esi
c0001f1f:	51                   	push   ecx
c0001f20:	52                   	push   edx
c0001f21:	e8 6e 54 02 00       	call   c0027394 <__udivdi3>
c0001f26:	83 c4 10             	add    esp,0x10
c0001f29:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f2b:	85 d2                	test   edx,edx
c0001f2d:	74 10                	je     c0001f3f <clmt_clust+0x42>
c0001f2f:	39 d0                	cmp    eax,edx
c0001f31:	72 07                	jb     c0001f3a <clmt_clust+0x3d>
c0001f33:	29 d0                	sub    eax,edx
c0001f35:	83 c3 08             	add    ebx,0x8
c0001f38:	eb ef                	jmp    c0001f29 <clmt_clust+0x2c>
c0001f3a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f3d:	89 c2                	mov    edx,eax
c0001f3f:	5b                   	pop    ebx
c0001f40:	89 d0                	mov    eax,edx
c0001f42:	5e                   	pop    esi
c0001f43:	5f                   	pop    edi
c0001f44:	c3                   	ret    

c0001f45 <pick_lfn>:
c0001f45:	55                   	push   ebp
c0001f46:	57                   	push   edi
c0001f47:	56                   	push   esi
c0001f48:	89 d6                	mov    esi,edx
c0001f4a:	53                   	push   ebx
c0001f4b:	89 c3                	mov    ebx,eax
c0001f4d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f50:	e8 ee fc ff ff       	call   c0001c43 <ld_word>
c0001f55:	66 85 c0             	test   ax,ax
c0001f58:	74 04                	je     c0001f5e <pick_lfn+0x19>
c0001f5a:	31 c0                	xor    eax,eax
c0001f5c:	eb 5c                	jmp    c0001fba <pick_lfn+0x75>
c0001f5e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f61:	bd 01 00 00 00       	mov    ebp,0x1
c0001f66:	83 e1 bf             	and    ecx,0xffffffbf
c0001f69:	31 ff                	xor    edi,edi
c0001f6b:	49                   	dec    ecx
c0001f6c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f6f:	0f b6 87 20 9f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd60e0]
c0001f76:	01 f0                	add    eax,esi
c0001f78:	e8 c6 fc ff ff       	call   c0001c43 <ld_word>
c0001f7d:	66 85 ed             	test   bp,bp
c0001f80:	74 11                	je     c0001f93 <pick_lfn+0x4e>
c0001f82:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f88:	77 d0                	ja     c0001f5a <pick_lfn+0x15>
c0001f8a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f8e:	89 c5                	mov    ebp,eax
c0001f90:	41                   	inc    ecx
c0001f91:	eb 04                	jmp    c0001f97 <pick_lfn+0x52>
c0001f93:	66 40                	inc    ax
c0001f95:	75 c3                	jne    c0001f5a <pick_lfn+0x15>
c0001f97:	47                   	inc    edi
c0001f98:	83 ff 0d             	cmp    edi,0xd
c0001f9b:	75 d2                	jne    c0001f6f <pick_lfn+0x2a>
c0001f9d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fa0:	74 13                	je     c0001fb5 <pick_lfn+0x70>
c0001fa2:	66 85 ed             	test   bp,bp
c0001fa5:	74 0e                	je     c0001fb5 <pick_lfn+0x70>
c0001fa7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fad:	77 ab                	ja     c0001f5a <pick_lfn+0x15>
c0001faf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fb5:	b8 01 00 00 00       	mov    eax,0x1
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	5f                   	pop    edi
c0001fbd:	5d                   	pop    ebp
c0001fbe:	c3                   	ret    

c0001fbf <put_lfn>:
c0001fbf:	55                   	push   ebp
c0001fc0:	31 ed                	xor    ebp,ebp
c0001fc2:	57                   	push   edi
c0001fc3:	89 d7                	mov    edi,edx
c0001fc5:	56                   	push   esi
c0001fc6:	31 f6                	xor    esi,esi
c0001fc8:	53                   	push   ebx
c0001fc9:	83 ec 08             	sub    esp,0x8
c0001fcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fcf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fd7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fdd:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fe0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fe3:	31 d2                	xor    edx,edx
c0001fe5:	e8 cb fc ff ff       	call   c0001cb5 <st_word>
c0001fea:	0f b6 d9             	movzx  ebx,cl
c0001fed:	4b                   	dec    ebx
c0001fee:	6b db 0d             	imul   ebx,ebx,0xd
c0001ff1:	66 83 fe ff          	cmp    si,0xffff
c0001ff5:	74 08                	je     c0001fff <put_lfn+0x40>
c0001ff7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001ffa:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001ffe:	43                   	inc    ebx
c0001fff:	0f b6 85 20 9f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd60e0]
c0002006:	0f b7 d6             	movzx  edx,si
c0002009:	01 f8                	add    eax,edi
c000200b:	e8 a5 fc ff ff       	call   c0001cb5 <st_word>
c0002010:	66 85 f6             	test   si,si
c0002013:	75 03                	jne    c0002018 <put_lfn+0x59>
c0002015:	83 ce ff             	or     esi,0xffffffff
c0002018:	45                   	inc    ebp
c0002019:	83 fd 0d             	cmp    ebp,0xd
c000201c:	75 d3                	jne    c0001ff1 <put_lfn+0x32>
c000201e:	66 46                	inc    si
c0002020:	74 0a                	je     c000202c <put_lfn+0x6d>
c0002022:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002025:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000202a:	75 09                	jne    c0002035 <put_lfn+0x76>
c000202c:	88 c8                	mov    al,cl
c000202e:	83 c8 40             	or     eax,0x40
c0002031:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002035:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002039:	88 07                	mov    BYTE PTR [edi],al
c000203b:	83 c4 08             	add    esp,0x8
c000203e:	5b                   	pop    ebx
c000203f:	5e                   	pop    esi
c0002040:	5f                   	pop    edi
c0002041:	5d                   	pop    ebp
c0002042:	c3                   	ret    

c0002043 <gen_numname>:
c0002043:	57                   	push   edi
c0002044:	89 cf                	mov    edi,ecx
c0002046:	56                   	push   esi
c0002047:	b9 0b 00 00 00       	mov    ecx,0xb
c000204c:	53                   	push   ebx
c000204d:	89 c6                	mov    esi,eax
c000204f:	83 ec 10             	sub    esp,0x10
c0002052:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002056:	e8 67 fc ff ff       	call   c0001cc2 <mem_cpy>
c000205b:	83 fb 05             	cmp    ebx,0x5
c000205e:	76 2d                	jbe    c000208d <gen_numname+0x4a>
c0002060:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002063:	66 85 c0             	test   ax,ax
c0002066:	74 25                	je     c000208d <gen_numname+0x4a>
c0002068:	83 c7 02             	add    edi,0x2
c000206b:	ba 10 00 00 00       	mov    edx,0x10
c0002070:	01 db                	add    ebx,ebx
c0002072:	89 c1                	mov    ecx,eax
c0002074:	66 d1 e8             	shr    ax,1
c0002077:	83 e1 01             	and    ecx,0x1
c000207a:	01 cb                	add    ebx,ecx
c000207c:	0f ba e3 10          	bt     ebx,0x10
c0002080:	73 06                	jae    c0002088 <gen_numname+0x45>
c0002082:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002088:	4a                   	dec    edx
c0002089:	75 e5                	jne    c0002070 <gen_numname+0x2d>
c000208b:	eb d3                	jmp    c0002060 <gen_numname+0x1d>
c000208d:	b8 07 00 00 00       	mov    eax,0x7
c0002092:	88 d9                	mov    cl,bl
c0002094:	83 e1 0f             	and    ecx,0xf
c0002097:	8d 51 30             	lea    edx,[ecx+0x30]
c000209a:	80 fa 39             	cmp    dl,0x39
c000209d:	76 03                	jbe    c00020a2 <gen_numname+0x5f>
c000209f:	8d 51 37             	lea    edx,[ecx+0x37]
c00020a2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020a5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020a9:	89 da                	mov    edx,ebx
c00020ab:	c1 ea 04             	shr    edx,0x4
c00020ae:	83 fb 0f             	cmp    ebx,0xf
c00020b1:	76 06                	jbe    c00020b9 <gen_numname+0x76>
c00020b3:	89 c8                	mov    eax,ecx
c00020b5:	89 d3                	mov    ebx,edx
c00020b7:	eb d9                	jmp    c0002092 <gen_numname+0x4f>
c00020b9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020be:	31 d2                	xor    edx,edx
c00020c0:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020c3:	8d 04 16             	lea    eax,[esi+edx*1]
c00020c6:	39 ca                	cmp    edx,ecx
c00020c8:	73 18                	jae    c00020e2 <gen_numname+0x9f>
c00020ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020cd:	3c 20                	cmp    al,0x20
c00020cf:	74 11                	je     c00020e2 <gen_numname+0x9f>
c00020d1:	e8 41 fc ff ff       	call   c0001d17 <dbc_1st>
c00020d6:	85 c0                	test   eax,eax
c00020d8:	74 05                	je     c00020df <gen_numname+0x9c>
c00020da:	39 d3                	cmp    ebx,edx
c00020dc:	74 04                	je     c00020e2 <gen_numname+0x9f>
c00020de:	42                   	inc    edx
c00020df:	42                   	inc    edx
c00020e0:	eb e1                	jmp    c00020c3 <gen_numname+0x80>
c00020e2:	b0 20                	mov    al,0x20
c00020e4:	83 f9 07             	cmp    ecx,0x7
c00020e7:	77 05                	ja     c00020ee <gen_numname+0xab>
c00020e9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020ed:	41                   	inc    ecx
c00020ee:	42                   	inc    edx
c00020ef:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020f3:	83 fa 07             	cmp    edx,0x7
c00020f6:	76 ea                	jbe    c00020e2 <gen_numname+0x9f>
c00020f8:	83 c4 10             	add    esp,0x10
c00020fb:	5b                   	pop    ebx
c00020fc:	5e                   	pop    esi
c00020fd:	5f                   	pop    edi
c00020fe:	c3                   	ret    

c00020ff <sum_sfn>:
c00020ff:	31 c9                	xor    ecx,ecx
c0002101:	31 d2                	xor    edx,edx
c0002103:	d0 ca                	ror    dl,1
c0002105:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002108:	41                   	inc    ecx
c0002109:	83 f9 0b             	cmp    ecx,0xb
c000210c:	75 f5                	jne    c0002103 <sum_sfn+0x4>
c000210e:	88 d0                	mov    al,dl
c0002110:	c3                   	ret    

c0002111 <xdir_sum>:
c0002111:	56                   	push   esi
c0002112:	31 c9                	xor    ecx,ecx
c0002114:	53                   	push   ebx
c0002115:	31 d2                	xor    edx,edx
c0002117:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000211b:	43                   	inc    ebx
c000211c:	c1 e3 05             	shl    ebx,0x5
c000211f:	83 fa 02             	cmp    edx,0x2
c0002122:	74 0b                	je     c000212f <xdir_sum+0x1e>
c0002124:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002128:	66 d1 c9             	ror    cx,1
c000212b:	01 f1                	add    ecx,esi
c000212d:	eb 05                	jmp    c0002134 <xdir_sum+0x23>
c000212f:	ba 03 00 00 00       	mov    edx,0x3
c0002134:	42                   	inc    edx
c0002135:	39 d3                	cmp    ebx,edx
c0002137:	77 e6                	ja     c000211f <xdir_sum+0xe>
c0002139:	89 c8                	mov    eax,ecx
c000213b:	5b                   	pop    ebx
c000213c:	5e                   	pop    esi
c000213d:	c3                   	ret    

c000213e <xsum32>:
c000213e:	d1 ca                	ror    edx,1
c0002140:	0f b6 c0             	movzx  eax,al
c0002143:	01 d0                	add    eax,edx
c0002145:	c3                   	ret    

c0002146 <get_xfileinfo>:
c0002146:	55                   	push   ebp
c0002147:	31 c9                	xor    ecx,ecx
c0002149:	57                   	push   edi
c000214a:	bd 40 00 00 00       	mov    ebp,0x40
c000214f:	56                   	push   esi
c0002150:	31 ff                	xor    edi,edi
c0002152:	53                   	push   ebx
c0002153:	89 c6                	mov    esi,eax
c0002155:	83 ec 0c             	sub    esp,0xc
c0002158:	89 d3                	mov    ebx,edx
c000215a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002161:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002165:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002168:	76 6d                	jbe    c00021d7 <get_xfileinfo+0x91>
c000216a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002170:	76 0b                	jbe    c000217d <get_xfileinfo+0x37>
c0002172:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002176:	bf 01 00 00 00       	mov    edi,0x1
c000217b:	eb 63                	jmp    c00021e0 <get_xfileinfo+0x9a>
c000217d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002183:	75 03                	jne    c0002188 <get_xfileinfo+0x42>
c0002185:	83 c5 02             	add    ebp,0x2
c0002188:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000218b:	83 c5 02             	add    ebp,0x2
c000218e:	e8 b0 fa ff ff       	call   c0001c43 <ld_word>
c0002193:	ff 04 24             	inc    DWORD PTR [esp]
c0002196:	66 85 c9             	test   cx,cx
c0002199:	75 0d                	jne    c00021a8 <get_xfileinfo+0x62>
c000219b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021a1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021a6:	76 2b                	jbe    c00021d3 <get_xfileinfo+0x8d>
c00021a8:	c1 e1 10             	shl    ecx,0x10
c00021ab:	ba ff 00 00 00       	mov    edx,0xff
c00021b0:	0f b7 c0             	movzx  eax,ax
c00021b3:	29 fa                	sub    edx,edi
c00021b5:	09 c8                	or     eax,ecx
c00021b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021bb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021c3:	e8 1b fc ff ff       	call   c0001de3 <put_utf>
c00021c8:	84 c0                	test   al,al
c00021ca:	74 a6                	je     c0002172 <get_xfileinfo+0x2c>
c00021cc:	0f b6 c0             	movzx  eax,al
c00021cf:	01 c7                	add    edi,eax
c00021d1:	31 c0                	xor    eax,eax
c00021d3:	89 c1                	mov    ecx,eax
c00021d5:	eb 8a                	jmp    c0002161 <get_xfileinfo+0x1b>
c00021d7:	85 ff                	test   edi,edi
c00021d9:	74 97                	je     c0002172 <get_xfileinfo+0x2c>
c00021db:	66 85 c9             	test   cx,cx
c00021de:	75 92                	jne    c0002172 <get_xfileinfo+0x2c>
c00021e0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021e5:	31 c0                	xor    eax,eax
c00021e7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021eb:	31 d2                	xor    edx,edx
c00021ed:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021f0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021f3:	80 e1 10             	and    cl,0x10
c00021f6:	75 08                	jne    c0002200 <get_xfileinfo+0xba>
c00021f8:	8d 46 38             	lea    eax,[esi+0x38]
c00021fb:	e8 68 fa ff ff       	call   c0001c68 <ld_qword>
c0002200:	89 03                	mov    DWORD PTR [ebx],eax
c0002202:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002205:	8d 46 0c             	lea    eax,[esi+0xc]
c0002208:	e8 36 fa ff ff       	call   c0001c43 <ld_word>
c000220d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002211:	8d 46 0e             	lea    eax,[esi+0xe]
c0002214:	e8 2a fa ff ff       	call   c0001c43 <ld_word>
c0002219:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000221d:	83 c4 0c             	add    esp,0xc
c0002220:	5b                   	pop    ebx
c0002221:	5e                   	pop    esi
c0002222:	5f                   	pop    edi
c0002223:	5d                   	pop    ebp
c0002224:	c3                   	ret    

c0002225 <get_ldnumber>:
c0002225:	8b 10                	mov    edx,DWORD PTR [eax]
c0002227:	85 d2                	test   edx,edx
c0002229:	74 14                	je     c000223f <get_ldnumber+0x1a>
c000222b:	56                   	push   esi
c000222c:	53                   	push   ebx
c000222d:	89 d3                	mov    ebx,edx
c000222f:	43                   	inc    ebx
c0002230:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002233:	80 f9 1f             	cmp    cl,0x1f
c0002236:	76 0d                	jbe    c0002245 <get_ldnumber+0x20>
c0002238:	80 f9 3a             	cmp    cl,0x3a
c000223b:	75 f2                	jne    c000222f <get_ldnumber+0xa>
c000223d:	eb 0a                	jmp    c0002249 <get_ldnumber+0x24>
c000223f:	83 c9 ff             	or     ecx,0xffffffff
c0002242:	89 c8                	mov    eax,ecx
c0002244:	c3                   	ret    
c0002245:	31 c9                	xor    ecx,ecx
c0002247:	eb 24                	jmp    c000226d <get_ldnumber+0x48>
c0002249:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000224c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000224f:	80 f9 09             	cmp    cl,0x9
c0002252:	77 16                	ja     c000226a <get_ldnumber+0x45>
c0002254:	83 c2 02             	add    edx,0x2
c0002257:	83 c9 ff             	or     ecx,0xffffffff
c000225a:	39 d3                	cmp    ebx,edx
c000225c:	75 0f                	jne    c000226d <get_ldnumber+0x48>
c000225e:	89 f2                	mov    edx,esi
c0002260:	89 18                	mov    DWORD PTR [eax],ebx
c0002262:	0f be ca             	movsx  ecx,dl
c0002265:	83 e9 30             	sub    ecx,0x30
c0002268:	eb 03                	jmp    c000226d <get_ldnumber+0x48>
c000226a:	83 c9 ff             	or     ecx,0xffffffff
c000226d:	89 c8                	mov    eax,ecx
c000226f:	5b                   	pop    ebx
c0002270:	5e                   	pop    esi
c0002271:	c3                   	ret    

c0002272 <crc32>:
c0002272:	56                   	push   esi
c0002273:	89 d6                	mov    esi,edx
c0002275:	53                   	push   ebx
c0002276:	b2 01                	mov    dl,0x1
c0002278:	bb 08 00 00 00       	mov    ebx,0x8
c000227d:	89 f1                	mov    ecx,esi
c000227f:	84 d1                	test   cl,dl
c0002281:	0f 95 c1             	setne  cl
c0002284:	0f b6 c9             	movzx  ecx,cl
c0002287:	31 c1                	xor    ecx,eax
c0002289:	89 c8                	mov    eax,ecx
c000228b:	d1 e8                	shr    eax,1
c000228d:	80 e1 01             	and    cl,0x1
c0002290:	74 05                	je     c0002297 <crc32+0x25>
c0002292:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002297:	d1 e2                	shl    edx,1
c0002299:	4b                   	dec    ebx
c000229a:	75 e1                	jne    c000227d <crc32+0xb>
c000229c:	5b                   	pop    ebx
c000229d:	5e                   	pop    esi
c000229e:	c3                   	ret    

c000229f <test_gpt_header>:
c000229f:	55                   	push   ebp
c00022a0:	b9 10 00 00 00       	mov    ecx,0x10
c00022a5:	57                   	push   edi
c00022a6:	ba 20 9e 02 c0       	mov    edx,0xc0029e20
c00022ab:	56                   	push   esi
c00022ac:	31 ff                	xor    edi,edi
c00022ae:	53                   	push   ebx
c00022af:	89 c3                	mov    ebx,eax
c00022b1:	e8 2c fa ff ff       	call   c0001ce2 <mem_cmp>
c00022b6:	85 c0                	test   eax,eax
c00022b8:	75 55                	jne    c000230f <test_gpt_header+0x70>
c00022ba:	89 c7                	mov    edi,eax
c00022bc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022c1:	83 ce ff             	or     esi,0xffffffff
c00022c4:	31 d2                	xor    edx,edx
c00022c6:	83 fd 03             	cmp    ebp,0x3
c00022c9:	76 05                	jbe    c00022d0 <test_gpt_header+0x31>
c00022cb:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022d0:	89 f0                	mov    eax,esi
c00022d2:	45                   	inc    ebp
c00022d3:	e8 9a ff ff ff       	call   c0002272 <crc32>
c00022d8:	83 fd 4c             	cmp    ebp,0x4c
c00022db:	89 c6                	mov    esi,eax
c00022dd:	75 e5                	jne    c00022c4 <test_gpt_header+0x25>
c00022df:	8d 43 10             	lea    eax,[ebx+0x10]
c00022e2:	f7 d6                	not    esi
c00022e4:	e8 67 f9 ff ff       	call   c0001c50 <ld_dword>
c00022e9:	39 c6                	cmp    esi,eax
c00022eb:	75 22                	jne    c000230f <test_gpt_header+0x70>
c00022ed:	8d 43 54             	lea    eax,[ebx+0x54]
c00022f0:	e8 5b f9 ff ff       	call   c0001c50 <ld_dword>
c00022f5:	83 c0 80             	add    eax,0xffffff80
c00022f8:	75 15                	jne    c000230f <test_gpt_header+0x70>
c00022fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00022fd:	e8 4e f9 ff ff       	call   c0001c50 <ld_dword>
c0002302:	3d 80 00 00 00       	cmp    eax,0x80
c0002307:	0f 96 c0             	setbe  al
c000230a:	0f b6 c0             	movzx  eax,al
c000230d:	89 c7                	mov    edi,eax
c000230f:	5b                   	pop    ebx
c0002310:	89 f8                	mov    eax,edi
c0002312:	5e                   	pop    esi
c0002313:	5f                   	pop    edi
c0002314:	5d                   	pop    ebp
c0002315:	c3                   	ret    

c0002316 <make_rand>:
c0002316:	56                   	push   esi
c0002317:	85 c0                	test   eax,eax
c0002319:	53                   	push   ebx
c000231a:	75 05                	jne    c0002321 <make_rand+0xb>
c000231c:	b8 01 00 00 00       	mov    eax,0x1
c0002321:	01 d1                	add    ecx,edx
c0002323:	bb 08 00 00 00       	mov    ebx,0x8
c0002328:	89 c6                	mov    esi,eax
c000232a:	d1 e8                	shr    eax,1
c000232c:	83 e6 01             	and    esi,0x1
c000232f:	85 f6                	test   esi,esi
c0002331:	74 05                	je     c0002338 <make_rand+0x22>
c0002333:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002338:	4b                   	dec    ebx
c0002339:	75 ed                	jne    c0002328 <make_rand+0x12>
c000233b:	42                   	inc    edx
c000233c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000233f:	39 ca                	cmp    edx,ecx
c0002341:	75 e0                	jne    c0002323 <make_rand+0xd>
c0002343:	5b                   	pop    ebx
c0002344:	5e                   	pop    esi
c0002345:	c3                   	ret    

c0002346 <validate>:
c0002346:	56                   	push   esi
c0002347:	53                   	push   ebx
c0002348:	89 d6                	mov    esi,edx
c000234a:	51                   	push   ecx
c000234b:	85 c0                	test   eax,eax
c000234d:	75 09                	jne    c0002358 <validate+0x12>
c000234f:	b8 09 00 00 00       	mov    eax,0x9
c0002354:	31 c9                	xor    ecx,ecx
c0002356:	eb 2f                	jmp    c0002387 <validate+0x41>
c0002358:	89 c3                	mov    ebx,eax
c000235a:	8b 00                	mov    eax,DWORD PTR [eax]
c000235c:	85 c0                	test   eax,eax
c000235e:	74 ef                	je     c000234f <validate+0x9>
c0002360:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002363:	74 ea                	je     c000234f <validate+0x9>
c0002365:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002369:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000236d:	75 e0                	jne    c000234f <validate+0x9>
c000236f:	83 ec 0c             	sub    esp,0xc
c0002372:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002376:	50                   	push   eax
c0002377:	e8 76 f8 ff ff       	call   c0001bf2 <disk_status>
c000237c:	83 c4 10             	add    esp,0x10
c000237f:	a8 01                	test   al,0x1
c0002381:	75 cc                	jne    c000234f <validate+0x9>
c0002383:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002385:	31 c0                	xor    eax,eax
c0002387:	89 0e                	mov    DWORD PTR [esi],ecx
c0002389:	5a                   	pop    edx
c000238a:	5b                   	pop    ebx
c000238b:	5e                   	pop    esi
c000238c:	c3                   	ret    

c000238d <sync_window>:
c000238d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002391:	0f 84 85 00 00 00    	je     c000241c <sync_window+0x8f>
c0002397:	55                   	push   ebp
c0002398:	8d 68 54             	lea    ebp,[eax+0x54]
c000239b:	57                   	push   edi
c000239c:	56                   	push   esi
c000239d:	53                   	push   ebx
c000239e:	89 c3                	mov    ebx,eax
c00023a0:	83 ec 28             	sub    esp,0x28
c00023a3:	6a 01                	push   0x1
c00023a5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023a8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023ab:	55                   	push   ebp
c00023ac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023b0:	50                   	push   eax
c00023b1:	e8 58 f8 ff ff       	call   c0001c0e <disk_write>
c00023b6:	83 c4 20             	add    esp,0x20
c00023b9:	ba 01 00 00 00       	mov    edx,0x1
c00023be:	85 c0                	test   eax,eax
c00023c0:	75 50                	jne    c0002412 <sync_window+0x85>
c00023c2:	31 ff                	xor    edi,edi
c00023c4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023cb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023d2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023d5:	89 c6                	mov    esi,eax
c00023d7:	89 d7                	mov    edi,edx
c00023d9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023dc:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023e0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023e3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023e7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023eb:	73 23                	jae    c0002410 <sync_window+0x83>
c00023ed:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023f1:	75 1d                	jne    c0002410 <sync_window+0x83>
c00023f3:	83 ec 0c             	sub    esp,0xc
c00023f6:	6a 01                	push   0x1
c00023f8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023fc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002400:	52                   	push   edx
c0002401:	50                   	push   eax
c0002402:	55                   	push   ebp
c0002403:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 01 f8 ff ff       	call   c0001c0e <disk_write>
c000240d:	83 c4 20             	add    esp,0x20
c0002410:	31 d2                	xor    edx,edx
c0002412:	83 c4 1c             	add    esp,0x1c
c0002415:	89 d0                	mov    eax,edx
c0002417:	5b                   	pop    ebx
c0002418:	5e                   	pop    esi
c0002419:	5f                   	pop    edi
c000241a:	5d                   	pop    ebp
c000241b:	c3                   	ret    
c000241c:	31 d2                	xor    edx,edx
c000241e:	89 d0                	mov    eax,edx
c0002420:	c3                   	ret    

c0002421 <move_window>:
c0002421:	56                   	push   esi
c0002422:	53                   	push   ebx
c0002423:	89 c3                	mov    ebx,eax
c0002425:	83 ec 14             	sub    esp,0x14
c0002428:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000242b:	75 07                	jne    c0002434 <move_window+0x13>
c000242d:	31 f6                	xor    esi,esi
c000242f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002432:	74 59                	je     c000248d <move_window+0x6c>
c0002434:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002438:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000243c:	89 d8                	mov    eax,ebx
c000243e:	e8 4a ff ff ff       	call   c000238d <sync_window>
c0002443:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002447:	89 c6                	mov    esi,eax
c0002449:	85 c0                	test   eax,eax
c000244b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000244f:	75 3c                	jne    c000248d <move_window+0x6c>
c0002451:	83 ec 0c             	sub    esp,0xc
c0002454:	8d 43 54             	lea    eax,[ebx+0x54]
c0002457:	6a 01                	push   0x1
c0002459:	51                   	push   ecx
c000245a:	52                   	push   edx
c000245b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000245f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002463:	50                   	push   eax
c0002464:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002468:	50                   	push   eax
c0002469:	e8 8a f7 ff ff       	call   c0001bf8 <disk_read>
c000246e:	83 c4 20             	add    esp,0x20
c0002471:	85 c0                	test   eax,eax
c0002473:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002477:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000247b:	74 0a                	je     c0002487 <move_window+0x66>
c000247d:	83 ca ff             	or     edx,0xffffffff
c0002480:	be 01 00 00 00       	mov    esi,0x1
c0002485:	89 d1                	mov    ecx,edx
c0002487:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000248a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000248d:	89 f0                	mov    eax,esi
c000248f:	83 c4 14             	add    esp,0x14
c0002492:	5b                   	pop    ebx
c0002493:	5e                   	pop    esi
c0002494:	c3                   	ret    

c0002495 <check_fs>:
c0002495:	53                   	push   ebx
c0002496:	89 c3                	mov    ebx,eax
c0002498:	83 ec 08             	sub    esp,0x8
c000249b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000249f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024a6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ad:	e8 6f ff ff ff       	call   c0002421 <move_window>
c00024b2:	ba 04 00 00 00       	mov    edx,0x4
c00024b7:	85 c0                	test   eax,eax
c00024b9:	0f 85 89 00 00 00    	jne    c0002548 <check_fs+0xb3>
c00024bf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024c5:	e8 79 f7 ff ff       	call   c0001c43 <ld_word>
c00024ca:	ba 03 00 00 00       	mov    edx,0x3
c00024cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00024d3:	75 73                	jne    c0002548 <check_fs+0xb3>
c00024d5:	ba 40 9f 02 c0       	mov    edx,0xc0029f40
c00024da:	8d 43 54             	lea    eax,[ebx+0x54]
c00024dd:	b9 0b 00 00 00       	mov    ecx,0xb
c00024e2:	e8 fb f7 ff ff       	call   c0001ce2 <mem_cmp>
c00024e7:	ba 01 00 00 00       	mov    edx,0x1
c00024ec:	85 c0                	test   eax,eax
c00024ee:	74 58                	je     c0002548 <check_fs+0xb3>
c00024f0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024f3:	8d 50 18             	lea    edx,[eax+0x18]
c00024f6:	80 fa 01             	cmp    dl,0x1
c00024f9:	76 09                	jbe    c0002504 <check_fs+0x6f>
c00024fb:	ba 02 00 00 00       	mov    edx,0x2
c0002500:	3c eb                	cmp    al,0xeb
c0002502:	75 44                	jne    c0002548 <check_fs+0xb3>
c0002504:	ba 90 d4 02 c0       	mov    edx,0xc002d490
c0002509:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000250f:	b9 03 00 00 00       	mov    ecx,0x3
c0002514:	e8 c9 f7 ff ff       	call   c0001ce2 <mem_cmp>
c0002519:	31 d2                	xor    edx,edx
c000251b:	85 c0                	test   eax,eax
c000251d:	74 29                	je     c0002548 <check_fs+0xb3>
c000251f:	ba 4c 9f 02 c0       	mov    edx,0xc0029f4c
c0002524:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000252a:	b9 05 00 00 00       	mov    ecx,0x5
c000252f:	e8 ae f7 ff ff       	call   c0001ce2 <mem_cmp>
c0002534:	31 d2                	xor    edx,edx
c0002536:	85 c0                	test   eax,eax
c0002538:	74 0e                	je     c0002548 <check_fs+0xb3>
c000253a:	31 d2                	xor    edx,edx
c000253c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002543:	0f 95 c2             	setne  dl
c0002546:	01 d2                	add    edx,edx
c0002548:	89 d0                	mov    eax,edx
c000254a:	83 c4 08             	add    esp,0x8
c000254d:	5b                   	pop    ebx
c000254e:	c3                   	ret    

c000254f <find_volume>:
c000254f:	55                   	push   ebp
c0002550:	31 c9                	xor    ecx,ecx
c0002552:	57                   	push   edi
c0002553:	56                   	push   esi
c0002554:	89 d6                	mov    esi,edx
c0002556:	53                   	push   ebx
c0002557:	31 d2                	xor    edx,edx
c0002559:	83 ec 3c             	sub    esp,0x3c
c000255c:	89 c3                	mov    ebx,eax
c000255e:	e8 32 ff ff ff       	call   c0002495 <check_fs>
c0002563:	83 f8 02             	cmp    eax,0x2
c0002566:	74 0e                	je     c0002576 <find_volume+0x27>
c0002568:	0f 87 5d 01 00 00    	ja     c00026cb <find_volume+0x17c>
c000256e:	85 f6                	test   esi,esi
c0002570:	0f 84 55 01 00 00    	je     c00026cb <find_volume+0x17c>
c0002576:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000257d:	0f 85 dd 00 00 00    	jne    c0002660 <find_volume+0x111>
c0002583:	31 c9                	xor    ecx,ecx
c0002585:	ba 01 00 00 00       	mov    edx,0x1
c000258a:	89 d8                	mov    eax,ebx
c000258c:	e8 90 fe ff ff       	call   c0002421 <move_window>
c0002591:	85 c0                	test   eax,eax
c0002593:	74 0a                	je     c000259f <find_volume+0x50>
c0002595:	b8 04 00 00 00       	mov    eax,0x4
c000259a:	e9 2c 01 00 00       	jmp    c00026cb <find_volume+0x17c>
c000259f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025a2:	89 e8                	mov    eax,ebp
c00025a4:	e8 f6 fc ff ff       	call   c000229f <test_gpt_header>
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0a                	jne    c00025b7 <find_volume+0x68>
c00025ad:	b8 03 00 00 00       	mov    eax,0x3
c00025b2:	e9 14 01 00 00       	jmp    c00026cb <find_volume+0x17c>
c00025b7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025bd:	e8 8e f6 ff ff       	call   c0001c50 <ld_dword>
c00025c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025c6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025cc:	e8 97 f6 ff ff       	call   c0001c68 <ld_qword>
c00025d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025ed:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025f1:	74 ba                	je     c00025ad <find_volume+0x5e>
c00025f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025f7:	31 c9                	xor    ecx,ecx
c00025f9:	c1 e7 07             	shl    edi,0x7
c00025fc:	89 d8                	mov    eax,ebx
c00025fe:	89 fa                	mov    edx,edi
c0002600:	c1 ea 09             	shr    edx,0x9
c0002603:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002607:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000260b:	e8 11 fe ff ff       	call   c0002421 <move_window>
c0002610:	85 c0                	test   eax,eax
c0002612:	75 81                	jne    c0002595 <find_volume+0x46>
c0002614:	81 e7 80 01 00 00    	and    edi,0x180
c000261a:	b9 10 00 00 00       	mov    ecx,0x10
c000261f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002623:	ba 30 9f 02 c0       	mov    edx,0xc0029f30
c0002628:	e8 b5 f6 ff ff       	call   c0001ce2 <mem_cmp>
c000262d:	85 c0                	test   eax,eax
c000262f:	75 29                	jne    c000265a <find_volume+0x10b>
c0002631:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002635:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002639:	e8 2a f6 ff ff       	call   c0001c68 <ld_qword>
c000263e:	89 d1                	mov    ecx,edx
c0002640:	89 c2                	mov    edx,eax
c0002642:	89 d8                	mov    eax,ebx
c0002644:	e8 4c fe ff ff       	call   c0002495 <check_fs>
c0002649:	85 f6                	test   esi,esi
c000264b:	75 07                	jne    c0002654 <find_volume+0x105>
c000264d:	83 f8 01             	cmp    eax,0x1
c0002650:	77 08                	ja     c000265a <find_volume+0x10b>
c0002652:	eb 77                	jmp    c00026cb <find_volume+0x17c>
c0002654:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002658:	74 71                	je     c00026cb <find_volume+0x17c>
c000265a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000265e:	eb 89                	jmp    c00025e9 <find_volume+0x9a>
c0002660:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002664:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000266a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002670:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002674:	89 cd                	mov    ebp,ecx
c0002676:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000267a:	89 f8                	mov    eax,edi
c000267c:	83 c7 10             	add    edi,0x10
c000267f:	e8 cc f5 ff ff       	call   c0001c50 <ld_dword>
c0002684:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002688:	89 01                	mov    DWORD PTR [ecx],eax
c000268a:	83 c1 04             	add    ecx,0x4
c000268d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002691:	75 e3                	jne    c0002676 <find_volume+0x127>
c0002693:	31 ff                	xor    edi,edi
c0002695:	85 f6                	test   esi,esi
c0002697:	74 03                	je     c000269c <find_volume+0x14d>
c0002699:	8d 7e ff             	lea    edi,[esi-0x1]
c000269c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026a0:	85 d2                	test   edx,edx
c00026a2:	74 14                	je     c00026b8 <find_volume+0x169>
c00026a4:	31 c9                	xor    ecx,ecx
c00026a6:	89 d8                	mov    eax,ebx
c00026a8:	e8 e8 fd ff ff       	call   c0002495 <check_fs>
c00026ad:	83 f8 01             	cmp    eax,0x1
c00026b0:	76 19                	jbe    c00026cb <find_volume+0x17c>
c00026b2:	85 f6                	test   esi,esi
c00026b4:	74 0f                	je     c00026c5 <find_volume+0x176>
c00026b6:	eb 13                	jmp    c00026cb <find_volume+0x17c>
c00026b8:	85 f6                	test   esi,esi
c00026ba:	0f 85 ed fe ff ff    	jne    c00025ad <find_volume+0x5e>
c00026c0:	b8 03 00 00 00       	mov    eax,0x3
c00026c5:	47                   	inc    edi
c00026c6:	83 ff 03             	cmp    edi,0x3
c00026c9:	76 d1                	jbe    c000269c <find_volume+0x14d>
c00026cb:	83 c4 3c             	add    esp,0x3c
c00026ce:	5b                   	pop    ebx
c00026cf:	5e                   	pop    esi
c00026d0:	5f                   	pop    edi
c00026d1:	5d                   	pop    ebp
c00026d2:	c3                   	ret    

c00026d3 <mount_volume>:
c00026d3:	55                   	push   ebp
c00026d4:	57                   	push   edi
c00026d5:	89 cf                	mov    edi,ecx
c00026d7:	56                   	push   esi
c00026d8:	53                   	push   ebx
c00026d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00026de:	83 ec 3c             	sub    esp,0x3c
c00026e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026eb:	e8 35 fb ff ff       	call   c0002225 <get_ldnumber>
c00026f0:	85 c0                	test   eax,eax
c00026f2:	0f 88 3a 05 00 00    	js     c0002c32 <mount_volume+0x55f>
c00026f8:	8b 2c 85 40 f0 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0fc0]
c00026ff:	89 c6                	mov    esi,eax
c0002701:	bb 0c 00 00 00       	mov    ebx,0xc
c0002706:	85 ed                	test   ebp,ebp
c0002708:	0f 84 24 05 00 00    	je     c0002c32 <mount_volume+0x55f>
c000270e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002712:	83 e7 fe             	and    edi,0xfffffffe
c0002715:	89 2a                	mov    DWORD PTR [edx],ebp
c0002717:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000271b:	74 32                	je     c000274f <mount_volume+0x7c>
c000271d:	83 ec 0c             	sub    esp,0xc
c0002720:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002724:	50                   	push   eax
c0002725:	e8 c8 f4 ff ff       	call   c0001bf2 <disk_status>
c000272a:	83 c4 10             	add    esp,0x10
c000272d:	a8 01                	test   al,0x1
c000272f:	75 1e                	jne    c000274f <mount_volume+0x7c>
c0002731:	31 db                	xor    ebx,ebx
c0002733:	89 f9                	mov    ecx,edi
c0002735:	84 c9                	test   cl,cl
c0002737:	0f 84 f5 04 00 00    	je     c0002c32 <mount_volume+0x55f>
c000273d:	a8 04                	test   al,0x4
c000273f:	0f 84 ed 04 00 00    	je     c0002c32 <mount_volume+0x55f>
c0002745:	bb 0a 00 00 00       	mov    ebx,0xa
c000274a:	e9 e3 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c000274f:	83 ec 0c             	sub    esp,0xc
c0002752:	89 f0                	mov    eax,esi
c0002754:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002758:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000275b:	0f b6 f0             	movzx  esi,al
c000275e:	bb 03 00 00 00       	mov    ebx,0x3
c0002763:	56                   	push   esi
c0002764:	e8 8c f4 ff ff       	call   c0001bf5 <disk_initialize>
c0002769:	83 c4 10             	add    esp,0x10
c000276c:	a8 01                	test   al,0x1
c000276e:	0f 85 be 04 00 00    	jne    c0002c32 <mount_volume+0x55f>
c0002774:	89 f9                	mov    ecx,edi
c0002776:	84 c9                	test   cl,cl
c0002778:	74 04                	je     c000277e <mount_volume+0xab>
c000277a:	a8 04                	test   al,0x4
c000277c:	75 c7                	jne    c0002745 <mount_volume+0x72>
c000277e:	31 d2                	xor    edx,edx
c0002780:	89 e8                	mov    eax,ebp
c0002782:	e8 c8 fd ff ff       	call   c000254f <find_volume>
c0002787:	83 f8 04             	cmp    eax,0x4
c000278a:	75 0a                	jne    c0002796 <mount_volume+0xc3>
c000278c:	bb 01 00 00 00       	mov    ebx,0x1
c0002791:	e9 9c 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c0002796:	83 f8 01             	cmp    eax,0x1
c0002799:	76 0a                	jbe    c00027a5 <mount_volume+0xd2>
c000279b:	bb 0d 00 00 00       	mov    ebx,0xd
c00027a0:	e9 8d 04 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c00027a5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027a8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027b3:	75 17                	jne    c00027cc <mount_volume+0xf9>
c00027b5:	b8 0b 00 00 00       	mov    eax,0xb
c00027ba:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027bf:	75 da                	jne    c000279b <mount_volume+0xc8>
c00027c1:	40                   	inc    eax
c00027c2:	83 f8 40             	cmp    eax,0x40
c00027c5:	75 f3                	jne    c00027ba <mount_volume+0xe7>
c00027c7:	e9 5a 02 00 00       	jmp    c0002a26 <mount_volume+0x353>
c00027cc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027cf:	e8 6f f4 ff ff       	call   c0001c43 <ld_word>
c00027d4:	66 3d 00 02          	cmp    ax,0x200
c00027d8:	75 c1                	jne    c000279b <mount_volume+0xc8>
c00027da:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027dd:	e8 61 f4 ff ff       	call   c0001c43 <ld_word>
c00027e2:	0f b7 c0             	movzx  eax,ax
c00027e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027e9:	85 c0                	test   eax,eax
c00027eb:	75 0c                	jne    c00027f9 <mount_volume+0x126>
c00027ed:	8d 45 78             	lea    eax,[ebp+0x78]
c00027f0:	e8 5b f4 ff ff       	call   c0001c50 <ld_dword>
c00027f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027fd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002800:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002803:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002807:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000280a:	48                   	dec    eax
c000280b:	3c 01                	cmp    al,0x1
c000280d:	77 8c                	ja     c000279b <mount_volume+0xc8>
c000280f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002813:	89 c3                	mov    ebx,eax
c0002815:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002819:	66 85 c0             	test   ax,ax
c000281c:	0f 84 79 ff ff ff    	je     c000279b <mount_volume+0xc8>
c0002822:	8d 40 ff             	lea    eax,[eax-0x1]
c0002825:	85 d8                	test   eax,ebx
c0002827:	0f 85 6e ff ff ff    	jne    c000279b <mount_volume+0xc8>
c000282d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002830:	e8 0e f4 ff ff       	call   c0001c43 <ld_word>
c0002835:	89 c7                	mov    edi,eax
c0002837:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000283b:	a8 0f                	test   al,0xf
c000283d:	0f 85 58 ff ff ff    	jne    c000279b <mount_volume+0xc8>
c0002843:	8d 45 67             	lea    eax,[ebp+0x67]
c0002846:	e8 f8 f3 ff ff       	call   c0001c43 <ld_word>
c000284b:	0f b7 f0             	movzx  esi,ax
c000284e:	85 f6                	test   esi,esi
c0002850:	75 0a                	jne    c000285c <mount_volume+0x189>
c0002852:	8d 45 74             	lea    eax,[ebp+0x74]
c0002855:	e8 f6 f3 ff ff       	call   c0001c50 <ld_dword>
c000285a:	89 c6                	mov    esi,eax
c000285c:	8d 45 62             	lea    eax,[ebp+0x62]
c000285f:	e8 df f3 ff ff       	call   c0001c43 <ld_word>
c0002864:	66 85 c0             	test   ax,ax
c0002867:	0f 84 2e ff ff ff    	je     c000279b <mount_volume+0xc8>
c000286d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002872:	0f b7 c8             	movzx  ecx,ax
c0002875:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000287a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000287e:	89 fa                	mov    edx,edi
c0002880:	66 c1 ea 04          	shr    dx,0x4
c0002884:	0f b7 d2             	movzx  edx,dx
c0002887:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000288b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000288e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002892:	39 c6                	cmp    esi,eax
c0002894:	0f 82 01 ff ff ff    	jb     c000279b <mount_volume+0xc8>
c000289a:	29 c6                	sub    esi,eax
c000289c:	31 d2                	xor    edx,edx
c000289e:	89 f0                	mov    eax,esi
c00028a0:	f7 f3                	div    ebx
c00028a2:	39 de                	cmp    esi,ebx
c00028a4:	0f 82 f1 fe ff ff    	jb     c000279b <mount_volume+0xc8>
c00028aa:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028af:	0f 87 e6 fe ff ff    	ja     c000279b <mount_volume+0xc8>
c00028b5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028ba:	0f 86 63 03 00 00    	jbe    c0002c23 <mount_volume+0x550>
c00028c0:	bb 03 00 00 00       	mov    ebx,0x3
c00028c5:	8d 70 02             	lea    esi,[eax+0x2]
c00028c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028d0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028d3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d6:	31 d2                	xor    edx,edx
c00028d8:	89 c8                	mov    eax,ecx
c00028da:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028e9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028ed:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028f7:	31 d2                	xor    edx,edx
c00028f9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002901:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002904:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002907:	83 fb 03             	cmp    ebx,0x3
c000290a:	75 2b                	jne    c0002937 <mount_volume+0x264>
c000290c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000290f:	e8 2f f3 ff ff       	call   c0001c43 <ld_word>
c0002914:	66 09 c7             	or     di,ax
c0002917:	0f 85 7e fe ff ff    	jne    c000279b <mount_volume+0xc8>
c000291d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002923:	c1 e6 02             	shl    esi,0x2
c0002926:	e8 25 f3 ff ff       	call   c0001c50 <ld_dword>
c000292b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	eb 30                	jmp    c0002967 <mount_volume+0x294>
c0002937:	66 85 ff             	test   di,di
c000293a:	0f 84 5b fe ff ff    	je     c000279b <mount_volume+0xc8>
c0002940:	31 d2                	xor    edx,edx
c0002942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002946:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000294a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000294e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002951:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002954:	83 fb 02             	cmp    ebx,0x2
c0002957:	75 04                	jne    c000295d <mount_volume+0x28a>
c0002959:	01 f6                	add    esi,esi
c000295b:	eb 0a                	jmp    c0002967 <mount_volume+0x294>
c000295d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002960:	83 e6 01             	and    esi,0x1
c0002963:	d1 e8                	shr    eax,1
c0002965:	01 c6                	add    esi,eax
c0002967:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000296d:	c1 ee 09             	shr    esi,0x9
c0002970:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002974:	0f 87 21 fe ff ff    	ja     c000279b <mount_volume+0xc8>
c000297a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002981:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002988:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000298c:	83 fb 03             	cmp    ebx,0x3
c000298f:	75 7a                	jne    c0002a0b <mount_volume+0x338>
c0002991:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002997:	e8 a7 f2 ff ff       	call   c0001c43 <ld_word>
c000299c:	66 48                	dec    ax
c000299e:	75 6b                	jne    c0002a0b <mount_volume+0x338>
c00029a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029a8:	83 c2 01             	add    edx,0x1
c00029ab:	89 e8                	mov    eax,ebp
c00029ad:	83 d1 00             	adc    ecx,0x0
c00029b0:	e8 6c fa ff ff       	call   c0002421 <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	75 52                	jne    c0002a0b <mount_volume+0x338>
c00029b9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029bd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029c3:	e8 7b f2 ff ff       	call   c0001c43 <ld_word>
c00029c8:	66 3d 55 aa          	cmp    ax,0xaa55
c00029cc:	75 3d                	jne    c0002a0b <mount_volume+0x338>
c00029ce:	8d 45 54             	lea    eax,[ebp+0x54]
c00029d1:	e8 7a f2 ff ff       	call   c0001c50 <ld_dword>
c00029d6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029db:	75 2e                	jne    c0002a0b <mount_volume+0x338>
c00029dd:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029e3:	e8 68 f2 ff ff       	call   c0001c50 <ld_dword>
c00029e8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029ed:	75 1c                	jne    c0002a0b <mount_volume+0x338>
c00029ef:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029f5:	e8 56 f2 ff ff       	call   c0001c50 <ld_dword>
c00029fa:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029fd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a03:	e8 48 f2 ff ff       	call   c0001c50 <ld_dword>
c0002a08:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a0b:	66 a1 20 f0 02 c0    	mov    ax,ds:0xc002f020
c0002a11:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a14:	40                   	inc    eax
c0002a15:	31 db                	xor    ebx,ebx
c0002a17:	66 a3 20 f0 02 c0    	mov    ds:0xc002f020,ax
c0002a1d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a21:	e9 0c 02 00 00       	jmp    c0002c32 <mount_volume+0x55f>
c0002a26:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a2c:	e8 12 f2 ff ff       	call   c0001c43 <ld_word>
c0002a31:	66 3d 00 01          	cmp    ax,0x100
c0002a35:	0f 85 60 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a3b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a42:	0f 85 53 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a48:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a4e:	e8 15 f2 ff ff       	call   c0001c68 <ld_qword>
c0002a53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a5b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a61:	e8 ea f1 ff ff       	call   c0001c50 <ld_dword>
c0002a66:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a69:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a6f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a72:	fe c8                	dec    al
c0002a74:	0f 85 21 fd ff ff    	jne    c000279b <mount_volume+0xc8>
c0002a7a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a81:	bb 01 00 00 00       	mov    ebx,0x1
c0002a86:	d3 e3                	shl    ebx,cl
c0002a88:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a8c:	66 85 db             	test   bx,bx
c0002a8f:	0f 84 06 fd ff ff    	je     c000279b <mount_volume+0xc8>
c0002a95:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a9b:	e8 b0 f1 ff ff       	call   c0001c50 <ld_dword>
c0002aa0:	89 c6                	mov    esi,eax
c0002aa2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002aa7:	0f 87 ee fc ff ff    	ja     c000279b <mount_volume+0xc8>
c0002aad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ab1:	8d 40 02             	lea    eax,[eax+0x2]
c0002ab4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ab7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002aba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002abe:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ac1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ac7:	e8 84 f1 ff ff       	call   c0001c50 <ld_dword>
c0002acc:	31 d2                	xor    edx,edx
c0002ace:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ad2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ada:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ade:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ae1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ae4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002aea:	e8 61 f1 ff ff       	call   c0001c50 <ld_dword>
c0002aef:	31 d2                	xor    edx,edx
c0002af1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002af5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b00:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b03:	0f b7 c3             	movzx  eax,bx
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	0f af f0             	imul   esi,eax
c0002b0b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b0f:	89 f0                	mov    eax,esi
c0002b11:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b19:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b1d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b21:	39 c1                	cmp    ecx,eax
c0002b23:	89 df                	mov    edi,ebx
c0002b25:	19 d7                	sbb    edi,edx
c0002b27:	0f 82 6e fc ff ff    	jb     c000279b <mount_volume+0xc8>
c0002b2d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b33:	31 db                	xor    ebx,ebx
c0002b35:	e8 16 f1 ff ff       	call   c0001c50 <ld_dword>
c0002b3a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b41:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b4c:	85 db                	test   ebx,ebx
c0002b4e:	75 39                	jne    c0002b89 <mount_volume+0x4b6>
c0002b50:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b54:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b58:	0f 86 3d fc ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002b5e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b61:	31 ff                	xor    edi,edi
c0002b63:	89 e8                	mov    eax,ebp
c0002b65:	e8 72 f3 ff ff       	call   c0001edc <clst2sect>
c0002b6a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b6e:	01 c6                	add    esi,eax
c0002b70:	89 e8                	mov    eax,ebp
c0002b72:	11 d7                	adc    edi,edx
c0002b74:	89 f2                	mov    edx,esi
c0002b76:	89 f9                	mov    ecx,edi
c0002b78:	e8 a4 f8 ff ff       	call   c0002421 <move_window>
c0002b7d:	85 c0                	test   eax,eax
c0002b7f:	0f 85 07 fc ff ff    	jne    c000278c <mount_volume+0xb9>
c0002b85:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b89:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b8e:	74 0b                	je     c0002b9b <mount_volume+0x4c8>
c0002b90:	83 c3 20             	add    ebx,0x20
c0002b93:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b99:	eb b1                	jmp    c0002b4c <mount_volume+0x479>
c0002b9b:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b9e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ba2:	e8 a9 f0 ff ff       	call   c0001c50 <ld_dword>
c0002ba7:	89 c3                	mov    ebx,eax
c0002ba9:	83 f8 01             	cmp    eax,0x1
c0002bac:	0f 86 e9 fb ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002bb2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bb5:	0f 86 e0 fb ff ff    	jbe    c000279b <mount_volume+0xc8>
c0002bbb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bbe:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bc2:	0f af c2             	imul   eax,edx
c0002bc5:	31 d2                	xor    edx,edx
c0002bc7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bca:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bcd:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bd0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bd3:	31 c9                	xor    ecx,ecx
c0002bd5:	89 da                	mov    edx,ebx
c0002bd7:	89 e8                	mov    eax,ebp
c0002bd9:	c1 ea 07             	shr    edx,0x7
c0002bdc:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bdf:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002be2:	e8 3a f8 ff ff       	call   c0002421 <move_window>
c0002be7:	85 c0                	test   eax,eax
c0002be9:	0f 85 9d fb ff ff    	jne    c000278c <mount_volume+0xb9>
c0002bef:	89 d8                	mov    eax,ebx
c0002bf1:	83 e0 7f             	and    eax,0x7f
c0002bf4:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bf7:	e8 54 f0 ff ff       	call   c0001c50 <ld_dword>
c0002bfc:	83 f8 ff             	cmp    eax,0xffffffff
c0002bff:	74 0a                	je     c0002c0b <mount_volume+0x538>
c0002c01:	43                   	inc    ebx
c0002c02:	39 d8                	cmp    eax,ebx
c0002c04:	74 cd                	je     c0002bd3 <mount_volume+0x500>
c0002c06:	e9 90 fb ff ff       	jmp    c000279b <mount_volume+0xc8>
c0002c0b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c12:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c19:	bb 04 00 00 00       	mov    ebx,0x4
c0002c1e:	e9 e8 fd ff ff       	jmp    c0002a0b <mount_volume+0x338>
c0002c23:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c28:	19 db                	sbb    ebx,ebx
c0002c2a:	83 c3 02             	add    ebx,0x2
c0002c2d:	e9 93 fc ff ff       	jmp    c00028c5 <mount_volume+0x1f2>
c0002c32:	83 c4 3c             	add    esp,0x3c
c0002c35:	89 d8                	mov    eax,ebx
c0002c37:	5b                   	pop    ebx
c0002c38:	5e                   	pop    esi
c0002c39:	5f                   	pop    edi
c0002c3a:	5d                   	pop    ebp
c0002c3b:	c3                   	ret    

c0002c3c <find_bitmap>:
c0002c3c:	55                   	push   ebp
c0002c3d:	57                   	push   edi
c0002c3e:	89 c7                	mov    edi,eax
c0002c40:	56                   	push   esi
c0002c41:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c44:	53                   	push   ebx
c0002c45:	83 ec 1c             	sub    esp,0x1c
c0002c48:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c4b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c4f:	83 e8 02             	sub    eax,0x2
c0002c52:	39 f0                	cmp    eax,esi
c0002c54:	77 02                	ja     c0002c58 <find_bitmap+0x1c>
c0002c56:	31 f6                	xor    esi,esi
c0002c58:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c5c:	89 f3                	mov    ebx,esi
c0002c5e:	31 ed                	xor    ebp,ebp
c0002c60:	31 c9                	xor    ecx,ecx
c0002c62:	89 da                	mov    edx,ebx
c0002c64:	89 f8                	mov    eax,edi
c0002c66:	c1 ea 0c             	shr    edx,0xc
c0002c69:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c6c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c6f:	e8 ad f7 ff ff       	call   c0002421 <move_window>
c0002c74:	85 c0                	test   eax,eax
c0002c76:	75 68                	jne    c0002ce0 <find_bitmap+0xa4>
c0002c78:	89 da                	mov    edx,ebx
c0002c7a:	89 d9                	mov    ecx,ebx
c0002c7c:	c1 ea 03             	shr    edx,0x3
c0002c7f:	83 e1 07             	and    ecx,0x7
c0002c82:	b8 01 00 00 00       	mov    eax,0x1
c0002c87:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c8d:	d3 e0                	shl    eax,cl
c0002c8f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c92:	83 e9 02             	sub    ecx,0x2
c0002c95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c99:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c9d:	43                   	inc    ebx
c0002c9e:	21 c1                	and    ecx,eax
c0002ca0:	d1 e0                	shl    eax,1
c0002ca2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ca6:	77 09                	ja     c0002cb1 <find_bitmap+0x75>
c0002ca8:	31 db                	xor    ebx,ebx
c0002caa:	ba 00 02 00 00       	mov    edx,0x200
c0002caf:	31 c0                	xor    eax,eax
c0002cb1:	84 c9                	test   cl,cl
c0002cb3:	75 10                	jne    c0002cc5 <find_bitmap+0x89>
c0002cb5:	45                   	inc    ebp
c0002cb6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cba:	75 0f                	jne    c0002ccb <find_bitmap+0x8f>
c0002cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cc0:	83 c0 02             	add    eax,0x2
c0002cc3:	eb 22                	jmp    c0002ce7 <find_bitmap+0xab>
c0002cc5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cc9:	31 ed                	xor    ebp,ebp
c0002ccb:	39 de                	cmp    esi,ebx
c0002ccd:	74 16                	je     c0002ce5 <find_bitmap+0xa9>
c0002ccf:	84 c0                	test   al,al
c0002cd1:	75 c6                	jne    c0002c99 <find_bitmap+0x5d>
c0002cd3:	42                   	inc    edx
c0002cd4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cda:	77 84                	ja     c0002c60 <find_bitmap+0x24>
c0002cdc:	b0 01                	mov    al,0x1
c0002cde:	eb b9                	jmp    c0002c99 <find_bitmap+0x5d>
c0002ce0:	83 c8 ff             	or     eax,0xffffffff
c0002ce3:	eb 02                	jmp    c0002ce7 <find_bitmap+0xab>
c0002ce5:	31 c0                	xor    eax,eax
c0002ce7:	83 c4 1c             	add    esp,0x1c
c0002cea:	5b                   	pop    ebx
c0002ceb:	5e                   	pop    esi
c0002cec:	5f                   	pop    edi
c0002ced:	5d                   	pop    ebp
c0002cee:	c3                   	ret    

c0002cef <change_bitmap>:
c0002cef:	55                   	push   ebp
c0002cf0:	89 cd                	mov    ebp,ecx
c0002cf2:	57                   	push   edi
c0002cf3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cf6:	56                   	push   esi
c0002cf7:	89 c7                	mov    edi,eax
c0002cf9:	53                   	push   ebx
c0002cfa:	89 c8                	mov    eax,ecx
c0002cfc:	83 ec 1c             	sub    esp,0x1c
c0002cff:	31 d2                	xor    edx,edx
c0002d01:	89 ce                	mov    esi,ecx
c0002d03:	c1 e8 0c             	shr    eax,0xc
c0002d06:	bb 01 00 00 00       	mov    ebx,0x1
c0002d0b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d0e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d11:	c1 ee 03             	shr    esi,0x3
c0002d14:	83 e1 07             	and    ecx,0x7
c0002d17:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d1d:	d3 e3                	shl    ebx,cl
c0002d1f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d23:	89 c1                	mov    ecx,eax
c0002d25:	89 d3                	mov    ebx,edx
c0002d27:	83 c1 01             	add    ecx,0x1
c0002d2a:	83 d3 00             	adc    ebx,0x0
c0002d2d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d31:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d35:	89 d1                	mov    ecx,edx
c0002d37:	89 c2                	mov    edx,eax
c0002d39:	89 f8                	mov    eax,edi
c0002d3b:	e8 e1 f6 ff ff       	call   c0002421 <move_window>
c0002d40:	89 c1                	mov    ecx,eax
c0002d42:	85 c0                	test   eax,eax
c0002d44:	75 48                	jne    c0002d8e <change_bitmap+0x9f>
c0002d46:	31 d2                	xor    edx,edx
c0002d48:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d4c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d50:	0f 95 c2             	setne  dl
c0002d53:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d57:	74 3c                	je     c0002d95 <change_bitmap+0xa6>
c0002d59:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d5d:	4d                   	dec    ebp
c0002d5e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d62:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d66:	74 32                	je     c0002d9a <change_bitmap+0xab>
c0002d68:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d6c:	75 d8                	jne    c0002d46 <change_bitmap+0x57>
c0002d6e:	8d 46 01             	lea    eax,[esi+0x1]
c0002d71:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d76:	89 c3                	mov    ebx,eax
c0002d78:	31 f6                	xor    esi,esi
c0002d7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d82:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d88:	74 99                	je     c0002d23 <change_bitmap+0x34>
c0002d8a:	89 de                	mov    esi,ebx
c0002d8c:	eb b8                	jmp    c0002d46 <change_bitmap+0x57>
c0002d8e:	b9 01 00 00 00       	mov    ecx,0x1
c0002d93:	eb 05                	jmp    c0002d9a <change_bitmap+0xab>
c0002d95:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9a:	83 c4 1c             	add    esp,0x1c
c0002d9d:	89 c8                	mov    eax,ecx
c0002d9f:	5b                   	pop    ebx
c0002da0:	5e                   	pop    esi
c0002da1:	5f                   	pop    edi
c0002da2:	5d                   	pop    ebp
c0002da3:	c3                   	ret    

c0002da4 <put_fat>:
c0002da4:	83 fa 01             	cmp    edx,0x1
c0002da7:	0f 86 7b 01 00 00    	jbe    c0002f28 <put_fat+0x184>
c0002dad:	55                   	push   ebp
c0002dae:	57                   	push   edi
c0002daf:	89 cf                	mov    edi,ecx
c0002db1:	56                   	push   esi
c0002db2:	b9 02 00 00 00       	mov    ecx,0x2
c0002db7:	53                   	push   ebx
c0002db8:	89 c6                	mov    esi,eax
c0002dba:	83 ec 1c             	sub    esp,0x1c
c0002dbd:	89 d3                	mov    ebx,edx
c0002dbf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dc2:	0f 86 68 01 00 00    	jbe    c0002f30 <put_fat+0x18c>
c0002dc8:	8a 00                	mov    al,BYTE PTR [eax]
c0002dca:	3c 02                	cmp    al,0x2
c0002dcc:	0f 84 c7 00 00 00    	je     c0002e99 <put_fat+0xf5>
c0002dd2:	77 09                	ja     c0002ddd <put_fat+0x39>
c0002dd4:	fe c8                	dec    al
c0002dd6:	74 17                	je     c0002def <put_fat+0x4b>
c0002dd8:	e9 53 01 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002ddd:	b9 02 00 00 00       	mov    ecx,0x2
c0002de2:	3c 04                	cmp    al,0x4
c0002de4:	0f 86 e1 00 00 00    	jbe    c0002ecb <put_fat+0x127>
c0002dea:	e9 41 01 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002def:	89 d5                	mov    ebp,edx
c0002df1:	31 c9                	xor    ecx,ecx
c0002df3:	d1 ed                	shr    ebp,1
c0002df5:	89 f0                	mov    eax,esi
c0002df7:	01 d5                	add    ebp,edx
c0002df9:	89 ea                	mov    edx,ebp
c0002dfb:	c1 ea 09             	shr    edx,0x9
c0002dfe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e01:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e04:	e8 18 f6 ff ff       	call   c0002421 <move_window>
c0002e09:	89 c1                	mov    ecx,eax
c0002e0b:	85 c0                	test   eax,eax
c0002e0d:	0f 85 1d 01 00 00    	jne    c0002f30 <put_fat+0x18c>
c0002e13:	8d 46 54             	lea    eax,[esi+0x54]
c0002e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e1a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e1d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e27:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e2b:	89 f8                	mov    eax,edi
c0002e2d:	83 e3 01             	and    ebx,0x1
c0002e30:	74 0d                	je     c0002e3f <put_fat+0x9b>
c0002e32:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e35:	89 fa                	mov    edx,edi
c0002e37:	83 e0 0f             	and    eax,0xf
c0002e3a:	c1 e2 04             	shl    edx,0x4
c0002e3d:	09 d0                	or     eax,edx
c0002e3f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e46:	31 c9                	xor    ecx,ecx
c0002e48:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4c:	c1 ea 09             	shr    edx,0x9
c0002e4f:	89 f0                	mov    eax,esi
c0002e51:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e54:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e57:	e8 c5 f5 ff ff       	call   c0002421 <move_window>
c0002e5c:	89 c1                	mov    ecx,eax
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	0f 85 ca 00 00 00    	jne    c0002f30 <put_fat+0x18c>
c0002e66:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e6a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e70:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e74:	85 db                	test   ebx,ebx
c0002e76:	74 07                	je     c0002e7f <put_fat+0xdb>
c0002e78:	c1 ef 04             	shr    edi,0x4
c0002e7b:	89 fa                	mov    edx,edi
c0002e7d:	eb 0e                	jmp    c0002e8d <put_fat+0xe9>
c0002e7f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e82:	c1 ef 08             	shr    edi,0x8
c0002e85:	83 e2 f0             	and    edx,0xfffffff0
c0002e88:	83 e7 0f             	and    edi,0xf
c0002e8b:	09 fa                	or     edx,edi
c0002e8d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e90:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e94:	e9 97 00 00 00       	jmp    c0002f30 <put_fat+0x18c>
c0002e99:	31 c9                	xor    ecx,ecx
c0002e9b:	c1 ea 08             	shr    edx,0x8
c0002e9e:	89 f0                	mov    eax,esi
c0002ea0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ea3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ea6:	e8 76 f5 ff ff       	call   c0002421 <move_window>
c0002eab:	89 c1                	mov    ecx,eax
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	75 7f                	jne    c0002f30 <put_fat+0x18c>
c0002eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002eb5:	01 db                	add    ebx,ebx
c0002eb7:	0f b7 d7             	movzx  edx,di
c0002eba:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ec0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ec4:	e8 ec ed ff ff       	call   c0001cb5 <st_word>
c0002ec9:	eb 53                	jmp    c0002f1e <put_fat+0x17a>
c0002ecb:	31 c9                	xor    ecx,ecx
c0002ecd:	c1 ea 07             	shr    edx,0x7
c0002ed0:	89 f0                	mov    eax,esi
c0002ed2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ed5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ed8:	e8 44 f5 ff ff       	call   c0002421 <move_window>
c0002edd:	89 c1                	mov    ecx,eax
c0002edf:	85 c0                	test   eax,eax
c0002ee1:	75 4d                	jne    c0002f30 <put_fat+0x18c>
c0002ee3:	c1 e3 02             	shl    ebx,0x2
c0002ee6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002eec:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002eef:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ef3:	74 1c                	je     c0002f11 <put_fat+0x16d>
c0002ef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002eff:	89 d8                	mov    eax,ebx
c0002f01:	e8 4a ed ff ff       	call   c0001c50 <ld_dword>
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f0f:	09 c7                	or     edi,eax
c0002f11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f15:	89 fa                	mov    edx,edi
c0002f17:	89 d8                	mov    eax,ebx
c0002f19:	e8 9b ed ff ff       	call   c0001cb9 <st_dword>
c0002f1e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f26:	eb 08                	jmp    c0002f30 <put_fat+0x18c>
c0002f28:	b9 02 00 00 00       	mov    ecx,0x2
c0002f2d:	89 c8                	mov    eax,ecx
c0002f2f:	c3                   	ret    
c0002f30:	83 c4 1c             	add    esp,0x1c
c0002f33:	89 c8                	mov    eax,ecx
c0002f35:	5b                   	pop    ebx
c0002f36:	5e                   	pop    esi
c0002f37:	5f                   	pop    edi
c0002f38:	5d                   	pop    ebp
c0002f39:	c3                   	ret    

c0002f3a <fill_last_frag>:
c0002f3a:	57                   	push   edi
c0002f3b:	89 cf                	mov    edi,ecx
c0002f3d:	56                   	push   esi
c0002f3e:	89 d6                	mov    esi,edx
c0002f40:	53                   	push   ebx
c0002f41:	89 c3                	mov    ebx,eax
c0002f43:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f46:	85 c0                	test   eax,eax
c0002f48:	74 21                	je     c0002f6b <fill_last_frag+0x31>
c0002f4a:	89 f9                	mov    ecx,edi
c0002f4c:	83 f8 01             	cmp    eax,0x1
c0002f4f:	76 05                	jbe    c0002f56 <fill_last_frag+0x1c>
c0002f51:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f54:	29 c1                	sub    ecx,eax
c0002f56:	8d 56 01             	lea    edx,[esi+0x1]
c0002f59:	29 c2                	sub    edx,eax
c0002f5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f5d:	e8 42 fe ff ff       	call   c0002da4 <put_fat>
c0002f62:	85 c0                	test   eax,eax
c0002f64:	75 05                	jne    c0002f6b <fill_last_frag+0x31>
c0002f66:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f69:	eb d8                	jmp    c0002f43 <fill_last_frag+0x9>
c0002f6b:	5b                   	pop    ebx
c0002f6c:	5e                   	pop    esi
c0002f6d:	5f                   	pop    edi
c0002f6e:	c3                   	ret    

c0002f6f <fill_first_frag>:
c0002f6f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f73:	75 2d                	jne    c0002fa2 <fill_first_frag+0x33>
c0002f75:	57                   	push   edi
c0002f76:	56                   	push   esi
c0002f77:	53                   	push   ebx
c0002f78:	89 c3                	mov    ebx,eax
c0002f7a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f7d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f80:	01 d7                	add    edi,edx
c0002f82:	39 fa                	cmp    edx,edi
c0002f84:	74 14                	je     c0002f9a <fill_first_frag+0x2b>
c0002f86:	8d 72 01             	lea    esi,[edx+0x1]
c0002f89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f8b:	89 f1                	mov    ecx,esi
c0002f8d:	e8 12 fe ff ff       	call   c0002da4 <put_fat>
c0002f92:	89 f2                	mov    edx,esi
c0002f94:	85 c0                	test   eax,eax
c0002f96:	74 ea                	je     c0002f82 <fill_first_frag+0x13>
c0002f98:	eb 0b                	jmp    c0002fa5 <fill_first_frag+0x36>
c0002f9a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f9e:	31 c0                	xor    eax,eax
c0002fa0:	eb 03                	jmp    c0002fa5 <fill_first_frag+0x36>
c0002fa2:	31 c0                	xor    eax,eax
c0002fa4:	c3                   	ret    
c0002fa5:	5b                   	pop    ebx
c0002fa6:	5e                   	pop    esi
c0002fa7:	5f                   	pop    edi
c0002fa8:	c3                   	ret    

c0002fa9 <get_fat>:
c0002fa9:	83 fa 01             	cmp    edx,0x1
c0002fac:	0f 86 db 01 00 00    	jbe    c000318d <get_fat+0x1e4>
c0002fb2:	55                   	push   ebp
c0002fb3:	b9 01 00 00 00       	mov    ecx,0x1
c0002fb8:	57                   	push   edi
c0002fb9:	56                   	push   esi
c0002fba:	53                   	push   ebx
c0002fbb:	83 ec 1c             	sub    esp,0x1c
c0002fbe:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fc0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fc3:	0f 86 cc 01 00 00    	jbe    c0003195 <get_fat+0x1ec>
c0002fc9:	89 c3                	mov    ebx,eax
c0002fcb:	89 d6                	mov    esi,edx
c0002fcd:	8a 07                	mov    al,BYTE PTR [edi]
c0002fcf:	3c 02                	cmp    al,0x2
c0002fd1:	0f 84 99 00 00 00    	je     c0003070 <get_fat+0xc7>
c0002fd7:	77 09                	ja     c0002fe2 <get_fat+0x39>
c0002fd9:	fe c8                	dec    al
c0002fdb:	74 1a                	je     c0002ff7 <get_fat+0x4e>
c0002fdd:	e9 b3 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0002fe2:	3c 03                	cmp    al,0x3
c0002fe4:	0f 84 b5 00 00 00    	je     c000309f <get_fat+0xf6>
c0002fea:	3c 04                	cmp    al,0x4
c0002fec:	0f 84 e3 00 00 00    	je     c00030d5 <get_fat+0x12c>
c0002ff2:	e9 9e 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0002ff7:	89 d3                	mov    ebx,edx
c0002ff9:	31 c9                	xor    ecx,ecx
c0002ffb:	d1 eb                	shr    ebx,1
c0002ffd:	89 f8                	mov    eax,edi
c0002fff:	01 d3                	add    ebx,edx
c0003001:	89 da                	mov    edx,ebx
c0003003:	c1 ea 09             	shr    edx,0x9
c0003006:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003009:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000300c:	e8 10 f4 ff ff       	call   c0002421 <move_window>
c0003011:	85 c0                	test   eax,eax
c0003013:	74 08                	je     c000301d <get_fat+0x74>
c0003015:	83 c9 ff             	or     ecx,0xffffffff
c0003018:	e9 78 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c000301d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003020:	31 c9                	xor    ecx,ecx
c0003022:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003028:	89 ea                	mov    edx,ebp
c000302a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	89 f8                	mov    eax,edi
c0003033:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003036:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003039:	e8 e3 f3 ff ff       	call   c0002421 <move_window>
c000303e:	85 c0                	test   eax,eax
c0003040:	75 d3                	jne    c0003015 <get_fat+0x6c>
c0003042:	0f b6 c3             	movzx  eax,bl
c0003045:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000304b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003050:	c1 e3 08             	shl    ebx,0x8
c0003053:	09 c3                	or     ebx,eax
c0003055:	89 d9                	mov    ecx,ebx
c0003057:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000305d:	83 e6 01             	and    esi,0x1
c0003060:	0f 84 2f 01 00 00    	je     c0003195 <get_fat+0x1ec>
c0003066:	89 d9                	mov    ecx,ebx
c0003068:	c1 e9 04             	shr    ecx,0x4
c000306b:	e9 25 01 00 00       	jmp    c0003195 <get_fat+0x1ec>
c0003070:	31 c9                	xor    ecx,ecx
c0003072:	c1 ea 08             	shr    edx,0x8
c0003075:	89 f8                	mov    eax,edi
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 9f f3 ff ff       	call   c0002421 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	75 8f                	jne    c0003015 <get_fat+0x6c>
c0003086:	01 f6                	add    esi,esi
c0003088:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000308e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003092:	e8 ac eb ff ff       	call   c0001c43 <ld_word>
c0003097:	0f b7 c8             	movzx  ecx,ax
c000309a:	e9 f6 00 00 00       	jmp    c0003195 <get_fat+0x1ec>
c000309f:	31 c9                	xor    ecx,ecx
c00030a1:	c1 ea 07             	shr    edx,0x7
c00030a4:	89 f8                	mov    eax,edi
c00030a6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ac:	e8 70 f3 ff ff       	call   c0002421 <move_window>
c00030b1:	85 c0                	test   eax,eax
c00030b3:	0f 85 5c ff ff ff    	jne    c0003015 <get_fat+0x6c>
c00030b9:	c1 e6 02             	shl    esi,0x2
c00030bc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030c2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030c6:	e8 85 eb ff ff       	call   c0001c50 <ld_dword>
c00030cb:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030d0:	e9 b4 00 00 00       	jmp    c0003189 <get_fat+0x1e0>
c00030d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030d8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030db:	89 d1                	mov    ecx,edx
c00030dd:	09 c1                	or     ecx,eax
c00030df:	74 06                	je     c00030e7 <get_fat+0x13e>
c00030e1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030e5:	75 0f                	jne    c00030f6 <get_fat+0x14d>
c00030e7:	b9 01 00 00 00       	mov    ecx,0x1
c00030ec:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030f0:	0f 85 9f 00 00 00    	jne    c0003195 <get_fat+0x1ec>
c00030f6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030fa:	89 f5                	mov    ebp,esi
c00030fc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003101:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003104:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003107:	80 f9 02             	cmp    cl,0x2
c000310a:	75 35                	jne    c0003141 <get_fat+0x198>
c000310c:	83 c0 ff             	add    eax,0xffffffff
c000310f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003114:	83 d2 ff             	adc    edx,0xffffffff
c0003117:	31 db                	xor    ebx,ebx
c0003119:	0f ac d0 09          	shrd   eax,edx,0x9
c000311d:	53                   	push   ebx
c000311e:	c1 ea 09             	shr    edx,0x9
c0003121:	51                   	push   ecx
c0003122:	52                   	push   edx
c0003123:	50                   	push   eax
c0003124:	e8 6b 42 02 00       	call   c0027394 <__udivdi3>
c0003129:	83 c4 10             	add    esp,0x10
c000312c:	b9 01 00 00 00       	mov    ecx,0x1
c0003131:	39 c5                	cmp    ebp,eax
c0003133:	77 60                	ja     c0003195 <get_fat+0x1ec>
c0003135:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000313a:	74 59                	je     c0003195 <get_fat+0x1ec>
c000313c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000313f:	eb 54                	jmp    c0003195 <get_fat+0x1ec>
c0003141:	80 f9 03             	cmp    cl,0x3
c0003144:	75 05                	jne    c000314b <get_fat+0x1a2>
c0003146:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003149:	77 f1                	ja     c000313c <get_fat+0x193>
c000314b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003150:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003154:	75 3f                	jne    c0003195 <get_fat+0x1ec>
c0003156:	31 c9                	xor    ecx,ecx
c0003158:	89 f2                	mov    edx,esi
c000315a:	89 f8                	mov    eax,edi
c000315c:	c1 ea 07             	shr    edx,0x7
c000315f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003162:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003165:	e8 b7 f2 ff ff       	call   c0002421 <move_window>
c000316a:	85 c0                	test   eax,eax
c000316c:	0f 85 a3 fe ff ff    	jne    c0003015 <get_fat+0x6c>
c0003172:	c1 e6 02             	shl    esi,0x2
c0003175:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000317b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000317f:	e8 cc ea ff ff       	call   c0001c50 <ld_dword>
c0003184:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003189:	89 c1                	mov    ecx,eax
c000318b:	eb 08                	jmp    c0003195 <get_fat+0x1ec>
c000318d:	b9 01 00 00 00       	mov    ecx,0x1
c0003192:	89 c8                	mov    eax,ecx
c0003194:	c3                   	ret    
c0003195:	83 c4 1c             	add    esp,0x1c
c0003198:	89 c8                	mov    eax,ecx
c000319a:	5b                   	pop    ebx
c000319b:	5e                   	pop    esi
c000319c:	5f                   	pop    edi
c000319d:	5d                   	pop    ebp
c000319e:	c3                   	ret    

c000319f <dir_sdi>:
c000319f:	55                   	push   ebp
c00031a0:	57                   	push   edi
c00031a1:	56                   	push   esi
c00031a2:	53                   	push   ebx
c00031a3:	89 c3                	mov    ebx,eax
c00031a5:	83 ec 1c             	sub    esp,0x1c
c00031a8:	8b 38                	mov    edi,DWORD PTR [eax]
c00031aa:	31 c0                	xor    eax,eax
c00031ac:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031af:	0f 94 c0             	sete   al
c00031b2:	48                   	dec    eax
c00031b3:	25 00 00 20 f0       	and    eax,0xf0200000
c00031b8:	05 00 00 00 10       	add    eax,0x10000000
c00031bd:	39 d0                	cmp    eax,edx
c00031bf:	77 0a                	ja     c00031cb <dir_sdi+0x2c>
c00031c1:	b8 02 00 00 00       	mov    eax,0x2
c00031c6:	e9 c4 00 00 00       	jmp    c000328f <dir_sdi+0xf0>
c00031cb:	89 d6                	mov    esi,edx
c00031cd:	f6 c2 1f             	test   dl,0x1f
c00031d0:	75 ef                	jne    c00031c1 <dir_sdi+0x22>
c00031d2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031d5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031d8:	85 c9                	test   ecx,ecx
c00031da:	75 2d                	jne    c0003209 <dir_sdi+0x6a>
c00031dc:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031df:	77 1b                	ja     c00031fc <dir_sdi+0x5d>
c00031e1:	89 f2                	mov    edx,esi
c00031e3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031e7:	c1 ea 05             	shr    edx,0x5
c00031ea:	39 c2                	cmp    edx,eax
c00031ec:	73 d3                	jae    c00031c1 <dir_sdi+0x22>
c00031ee:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031f1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031f4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031f7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031fa:	eb 4b                	jmp    c0003247 <dir_sdi+0xa8>
c00031fc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031ff:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003203:	85 c0                	test   eax,eax
c0003205:	74 da                	je     c00031e1 <dir_sdi+0x42>
c0003207:	89 c1                	mov    ecx,eax
c0003209:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000320d:	c1 e5 09             	shl    ebp,0x9
c0003210:	89 ca                	mov    edx,ecx
c0003212:	39 ee                	cmp    esi,ebp
c0003214:	72 1c                	jb     c0003232 <dir_sdi+0x93>
c0003216:	89 d8                	mov    eax,ebx
c0003218:	e8 8c fd ff ff       	call   c0002fa9 <get_fat>
c000321d:	89 c1                	mov    ecx,eax
c000321f:	83 f8 ff             	cmp    eax,0xffffffff
c0003222:	74 66                	je     c000328a <dir_sdi+0xeb>
c0003224:	83 f8 01             	cmp    eax,0x1
c0003227:	76 98                	jbe    c00031c1 <dir_sdi+0x22>
c0003229:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000322c:	76 93                	jbe    c00031c1 <dir_sdi+0x22>
c000322e:	29 ee                	sub    esi,ebp
c0003230:	eb de                	jmp    c0003210 <dir_sdi+0x71>
c0003232:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003236:	89 f8                	mov    eax,edi
c0003238:	e8 9f ec ff ff       	call   c0001edc <clst2sect>
c000323d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003241:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003244:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003247:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000324a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000324d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003250:	89 d1                	mov    ecx,edx
c0003252:	09 c1                	or     ecx,eax
c0003254:	0f 84 67 ff ff ff    	je     c00031c1 <dir_sdi+0x22>
c000325a:	89 f1                	mov    ecx,esi
c000325c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003264:	c1 e9 09             	shr    ecx,0x9
c0003267:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000326b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000326f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003273:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003276:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000327c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000327f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003283:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003286:	31 c0                	xor    eax,eax
c0003288:	eb 05                	jmp    c000328f <dir_sdi+0xf0>
c000328a:	b8 01 00 00 00       	mov    eax,0x1
c000328f:	83 c4 1c             	add    esp,0x1c
c0003292:	5b                   	pop    ebx
c0003293:	5e                   	pop    esi
c0003294:	5f                   	pop    edi
c0003295:	5d                   	pop    ebp
c0003296:	c3                   	ret    

c0003297 <create_chain>:
c0003297:	55                   	push   ebp
c0003298:	89 c5                	mov    ebp,eax
c000329a:	57                   	push   edi
c000329b:	56                   	push   esi
c000329c:	53                   	push   ebx
c000329d:	83 ec 1c             	sub    esp,0x1c
c00032a0:	85 d2                	test   edx,edx
c00032a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032a6:	8b 30                	mov    esi,DWORD PTR [eax]
c00032a8:	75 0e                	jne    c00032b8 <create_chain+0x21>
c00032aa:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ad:	85 ff                	test   edi,edi
c00032af:	74 39                	je     c00032ea <create_chain+0x53>
c00032b1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032b4:	77 39                	ja     c00032ef <create_chain+0x58>
c00032b6:	eb 32                	jmp    c00032ea <create_chain+0x53>
c00032b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032bc:	e8 e8 fc ff ff       	call   c0002fa9 <get_fat>
c00032c1:	89 c3                	mov    ebx,eax
c00032c3:	83 f8 01             	cmp    eax,0x1
c00032c6:	77 0a                	ja     c00032d2 <create_chain+0x3b>
c00032c8:	bb 01 00 00 00       	mov    ebx,0x1
c00032cd:	e9 ba 01 00 00       	jmp    c000348c <create_chain+0x1f5>
c00032d2:	83 f8 ff             	cmp    eax,0xffffffff
c00032d5:	0f 84 62 01 00 00    	je     c000343d <create_chain+0x1a6>
c00032db:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032de:	0f 87 a8 01 00 00    	ja     c000348c <create_chain+0x1f5>
c00032e4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032e8:	eb 05                	jmp    c00032ef <create_chain+0x58>
c00032ea:	bf 01 00 00 00       	mov    edi,0x1
c00032ef:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032f3:	75 07                	jne    c00032fc <create_chain+0x65>
c00032f5:	31 db                	xor    ebx,ebx
c00032f7:	e9 90 01 00 00       	jmp    c000348c <create_chain+0x1f5>
c00032fc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032ff:	75 74                	jne    c0003375 <create_chain+0xde>
c0003301:	b9 01 00 00 00       	mov    ecx,0x1
c0003306:	89 fa                	mov    edx,edi
c0003308:	89 f0                	mov    eax,esi
c000330a:	e8 2d f9 ff ff       	call   c0002c3c <find_bitmap>
c000330f:	89 c3                	mov    ebx,eax
c0003311:	8d 40 ff             	lea    eax,[eax-0x1]
c0003314:	83 f8 fd             	cmp    eax,0xfffffffd
c0003317:	0f 87 6f 01 00 00    	ja     c000348c <create_chain+0x1f5>
c000331d:	83 ec 0c             	sub    esp,0xc
c0003320:	b9 01 00 00 00       	mov    ecx,0x1
c0003325:	6a 01                	push   0x1
c0003327:	89 da                	mov    edx,ebx
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 bf f9 ff ff       	call   c0002cef <change_bitmap>
c0003330:	83 c4 10             	add    esp,0x10
c0003333:	83 f8 02             	cmp    eax,0x2
c0003336:	74 90                	je     c00032c8 <create_chain+0x31>
c0003338:	83 f8 01             	cmp    eax,0x1
c000333b:	0f 84 fc 00 00 00    	je     c000343d <create_chain+0x1a6>
c0003341:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003346:	75 09                	jne    c0003351 <create_chain+0xba>
c0003348:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000334c:	e9 0c 01 00 00       	jmp    c000345d <create_chain+0x1c6>
c0003351:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003355:	0f 85 e7 00 00 00    	jne    c0003442 <create_chain+0x1ab>
c000335b:	8d 57 01             	lea    edx,[edi+0x1]
c000335e:	39 da                	cmp    edx,ebx
c0003360:	0f 84 f7 00 00 00    	je     c000345d <create_chain+0x1c6>
c0003366:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003369:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000336d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003370:	e9 cd 00 00 00       	jmp    c0003442 <create_chain+0x1ab>
c0003375:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003379:	75 41                	jne    c00033bc <create_chain+0x125>
c000337b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000337e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003381:	77 05                	ja     c0003388 <create_chain+0xf1>
c0003383:	bb 02 00 00 00       	mov    ebx,0x2
c0003388:	89 da                	mov    edx,ebx
c000338a:	89 e8                	mov    eax,ebp
c000338c:	e8 18 fc ff ff       	call   c0002fa9 <get_fat>
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	0f 84 2e ff ff ff    	je     c00032c8 <create_chain+0x31>
c000339a:	83 f8 ff             	cmp    eax,0xffffffff
c000339d:	0f 84 9a 00 00 00    	je     c000343d <create_chain+0x1a6>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 11                	je     c00033b8 <create_chain+0x121>
c00033a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033aa:	83 f8 01             	cmp    eax,0x1
c00033ad:	76 0d                	jbe    c00033bc <create_chain+0x125>
c00033af:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033b2:	76 08                	jbe    c00033bc <create_chain+0x125>
c00033b4:	89 c7                	mov    edi,eax
c00033b6:	eb 04                	jmp    c00033bc <create_chain+0x125>
c00033b8:	85 db                	test   ebx,ebx
c00033ba:	75 38                	jne    c00033f4 <create_chain+0x15d>
c00033bc:	89 fb                	mov    ebx,edi
c00033be:	43                   	inc    ebx
c00033bf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c2:	77 0e                	ja     c00033d2 <create_chain+0x13b>
c00033c4:	83 ff 01             	cmp    edi,0x1
c00033c7:	0f 86 28 ff ff ff    	jbe    c00032f5 <create_chain+0x5e>
c00033cd:	bb 02 00 00 00       	mov    ebx,0x2
c00033d2:	89 da                	mov    edx,ebx
c00033d4:	89 e8                	mov    eax,ebp
c00033d6:	e8 ce fb ff ff       	call   c0002fa9 <get_fat>
c00033db:	85 c0                	test   eax,eax
c00033dd:	74 15                	je     c00033f4 <create_chain+0x15d>
c00033df:	83 f8 01             	cmp    eax,0x1
c00033e2:	0f 84 e0 fe ff ff    	je     c00032c8 <create_chain+0x31>
c00033e8:	40                   	inc    eax
c00033e9:	74 52                	je     c000343d <create_chain+0x1a6>
c00033eb:	39 fb                	cmp    ebx,edi
c00033ed:	75 cf                	jne    c00033be <create_chain+0x127>
c00033ef:	e9 01 ff ff ff       	jmp    c00032f5 <create_chain+0x5e>
c00033f4:	83 c9 ff             	or     ecx,0xffffffff
c00033f7:	89 da                	mov    edx,ebx
c00033f9:	89 f0                	mov    eax,esi
c00033fb:	e8 a4 f9 ff ff       	call   c0002da4 <put_fat>
c0003400:	85 c0                	test   eax,eax
c0003402:	75 32                	jne    c0003436 <create_chain+0x19f>
c0003404:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003409:	74 11                	je     c000341c <create_chain+0x185>
c000340b:	89 d9                	mov    ecx,ebx
c000340d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003411:	89 f0                	mov    eax,esi
c0003413:	e8 8c f9 ff ff       	call   c0002da4 <put_fat>
c0003418:	85 c0                	test   eax,eax
c000341a:	75 1a                	jne    c0003436 <create_chain+0x19f>
c000341c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000341f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003422:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003425:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003428:	39 d0                	cmp    eax,edx
c000342a:	77 04                	ja     c0003430 <create_chain+0x199>
c000342c:	48                   	dec    eax
c000342d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003430:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003434:	eb 56                	jmp    c000348c <create_chain+0x1f5>
c0003436:	48                   	dec    eax
c0003437:	0f 85 8b fe ff ff    	jne    c00032c8 <create_chain+0x31>
c000343d:	83 cb ff             	or     ebx,0xffffffff
c0003440:	eb 4a                	jmp    c000348c <create_chain+0x1f5>
c0003442:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003446:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003449:	41                   	inc    ecx
c000344a:	39 d9                	cmp    ecx,ebx
c000344c:	75 19                	jne    c0003467 <create_chain+0x1d0>
c000344e:	b9 02 00 00 00       	mov    ecx,0x2
c0003453:	85 d2                	test   edx,edx
c0003455:	74 03                	je     c000345a <create_chain+0x1c3>
c0003457:	8d 4a 01             	lea    ecx,[edx+0x1]
c000345a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000345d:	85 c0                	test   eax,eax
c000345f:	0f 85 63 fe ff ff    	jne    c00032c8 <create_chain+0x31>
c0003465:	eb b5                	jmp    c000341c <create_chain+0x185>
c0003467:	85 d2                	test   edx,edx
c0003469:	75 07                	jne    c0003472 <create_chain+0x1db>
c000346b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003472:	89 d9                	mov    ecx,ebx
c0003474:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003478:	89 e8                	mov    eax,ebp
c000347a:	e8 bb fa ff ff       	call   c0002f3a <fill_last_frag>
c000347f:	85 c0                	test   eax,eax
c0003481:	75 b3                	jne    c0003436 <create_chain+0x19f>
c0003483:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000348a:	eb 90                	jmp    c000341c <create_chain+0x185>
c000348c:	83 c4 1c             	add    esp,0x1c
c000348f:	89 d8                	mov    eax,ebx
c0003491:	5b                   	pop    ebx
c0003492:	5e                   	pop    esi
c0003493:	5f                   	pop    edi
c0003494:	5d                   	pop    ebp
c0003495:	c3                   	ret    

c0003496 <remove_chain>:
c0003496:	55                   	push   ebp
c0003497:	57                   	push   edi
c0003498:	56                   	push   esi
c0003499:	53                   	push   ebx
c000349a:	83 ec 1c             	sub    esp,0x1c
c000349d:	83 fa 01             	cmp    edx,0x1
c00034a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034a4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034a6:	77 0a                	ja     c00034b2 <remove_chain+0x1c>
c00034a8:	b8 02 00 00 00       	mov    eax,0x2
c00034ad:	e9 24 01 00 00       	jmp    c00035d6 <remove_chain+0x140>
c00034b2:	89 d6                	mov    esi,edx
c00034b4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034b7:	76 ef                	jbe    c00034a8 <remove_chain+0x12>
c00034b9:	89 c7                	mov    edi,eax
c00034bb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034c0:	75 06                	jne    c00034c8 <remove_chain+0x32>
c00034c2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034c6:	eb 54                	jmp    c000351c <remove_chain+0x86>
c00034c8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034cb:	75 06                	jne    c00034d3 <remove_chain+0x3d>
c00034cd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034d1:	74 ef                	je     c00034c2 <remove_chain+0x2c>
c00034d3:	83 c9 ff             	or     ecx,0xffffffff
c00034d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034da:	89 d8                	mov    eax,ebx
c00034dc:	e8 c3 f8 ff ff       	call   c0002da4 <put_fat>
c00034e1:	85 c0                	test   eax,eax
c00034e3:	74 dd                	je     c00034c2 <remove_chain+0x2c>
c00034e5:	e9 ec 00 00 00       	jmp    c00035d6 <remove_chain+0x140>
c00034ea:	83 f8 01             	cmp    eax,0x1
c00034ed:	74 b9                	je     c00034a8 <remove_chain+0x12>
c00034ef:	83 f8 ff             	cmp    eax,0xffffffff
c00034f2:	74 6d                	je     c0003561 <remove_chain+0xcb>
c00034f4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f7:	75 6f                	jne    c0003568 <remove_chain+0xd2>
c00034f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034fc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034ff:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003502:	39 d0                	cmp    eax,edx
c0003504:	73 08                	jae    c000350e <remove_chain+0x78>
c0003506:	40                   	inc    eax
c0003507:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000350b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000350e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003511:	39 e9                	cmp    ecx,ebp
c0003513:	75 64                	jne    c0003579 <remove_chain+0xe3>
c0003515:	89 ee                	mov    esi,ebp
c0003517:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000351a:	76 0f                	jbe    c000352b <remove_chain+0x95>
c000351c:	89 f2                	mov    edx,esi
c000351e:	89 f8                	mov    eax,edi
c0003520:	e8 84 fa ff ff       	call   c0002fa9 <get_fat>
c0003525:	89 c5                	mov    ebp,eax
c0003527:	85 c0                	test   eax,eax
c0003529:	75 bf                	jne    c00034ea <remove_chain+0x54>
c000352b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000352e:	0f 85 a0 00 00 00    	jne    c00035d4 <remove_chain+0x13e>
c0003534:	eb 6c                	jmp    c00035a2 <remove_chain+0x10c>
c0003536:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003539:	84 c0                	test   al,al
c000353b:	75 7d                	jne    c00035ba <remove_chain+0x124>
c000353d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003540:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003544:	0f 84 86 00 00 00    	je     c00035d0 <remove_chain+0x13a>
c000354a:	89 da                	mov    edx,ebx
c000354c:	89 f8                	mov    eax,edi
c000354e:	e8 56 fa ff ff       	call   c0002fa9 <get_fat>
c0003553:	83 f8 01             	cmp    eax,0x1
c0003556:	0f 86 4c ff ff ff    	jbe    c00034a8 <remove_chain+0x12>
c000355c:	83 f8 ff             	cmp    eax,0xffffffff
c000355f:	75 4e                	jne    c00035af <remove_chain+0x119>
c0003561:	b8 01 00 00 00       	mov    eax,0x1
c0003566:	eb 6e                	jmp    c00035d6 <remove_chain+0x140>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 31 f8 ff ff       	call   c0002da4 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	74 82                	je     c00034f9 <remove_chain+0x63>
c0003577:	eb 5d                	jmp    c00035d6 <remove_chain+0x140>
c0003579:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000357c:	75 1b                	jne    c0003599 <remove_chain+0x103>
c000357e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003582:	89 d8                	mov    eax,ebx
c0003584:	83 ec 0c             	sub    esp,0xc
c0003587:	6a 00                	push   0x0
c0003589:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000358d:	e8 5d f7 ff ff       	call   c0002cef <change_bitmap>
c0003592:	83 c4 10             	add    esp,0x10
c0003595:	85 c0                	test   eax,eax
c0003597:	75 3d                	jne    c00035d6 <remove_chain+0x140>
c0003599:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000359d:	e9 73 ff ff ff       	jmp    c0003515 <remove_chain+0x7f>
c00035a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035a7:	75 8d                	jne    c0003536 <remove_chain+0xa0>
c00035a9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ad:	eb 25                	jmp    c00035d4 <remove_chain+0x13e>
c00035af:	8d 53 01             	lea    edx,[ebx+0x1]
c00035b2:	89 c3                	mov    ebx,eax
c00035b4:	39 c2                	cmp    edx,eax
c00035b6:	74 88                	je     c0003540 <remove_chain+0xaa>
c00035b8:	eb 1a                	jmp    c00035d4 <remove_chain+0x13e>
c00035ba:	3c 03                	cmp    al,0x3
c00035bc:	75 16                	jne    c00035d4 <remove_chain+0x13e>
c00035be:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035c5:	77 0d                	ja     c00035d4 <remove_chain+0x13e>
c00035c7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ca:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ce:	72 04                	jb     c00035d4 <remove_chain+0x13e>
c00035d0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035d4:	31 c0                	xor    eax,eax
c00035d6:	83 c4 1c             	add    esp,0x1c
c00035d9:	5b                   	pop    ebx
c00035da:	5e                   	pop    esi
c00035db:	5f                   	pop    edi
c00035dc:	5d                   	pop    ebp
c00035dd:	c3                   	ret    

c00035de <dir_clear>:
c00035de:	55                   	push   ebp
c00035df:	57                   	push   edi
c00035e0:	56                   	push   esi
c00035e1:	89 c6                	mov    esi,eax
c00035e3:	53                   	push   ebx
c00035e4:	83 ec 1c             	sub    esp,0x1c
c00035e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035eb:	e8 9d ed ff ff       	call   c000238d <sync_window>
c00035f0:	85 c0                	test   eax,eax
c00035f2:	0f 85 de 00 00 00    	jne    c00036d6 <dir_clear+0xf8>
c00035f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035fc:	89 f0                	mov    eax,esi
c00035fe:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003601:	e8 d6 e8 ff ff       	call   c0001edc <clst2sect>
c0003606:	b9 00 02 00 00       	mov    ecx,0x200
c000360b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000360f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003613:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003616:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003619:	89 e8                	mov    eax,ebp
c000361b:	31 d2                	xor    edx,edx
c000361d:	e8 b5 e6 ff ff       	call   c0001cd7 <mem_set>
c0003622:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003626:	c1 e3 09             	shl    ebx,0x9
c0003629:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000362f:	76 1f                	jbe    c0003650 <dir_clear+0x72>
c0003631:	bb 00 80 00 00       	mov    ebx,0x8000
c0003636:	eb 18                	jmp    c0003650 <dir_clear+0x72>
c0003638:	83 ec 0c             	sub    esp,0xc
c000363b:	53                   	push   ebx
c000363c:	e8 35 4e 00 00       	call   c0008476 <ff_memalloc>
c0003641:	83 c4 10             	add    esp,0x10
c0003644:	89 c7                	mov    edi,eax
c0003646:	85 c0                	test   eax,eax
c0003648:	0f 85 8f 00 00 00    	jne    c00036dd <dir_clear+0xff>
c000364e:	d1 eb                	shr    ebx,1
c0003650:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003656:	77 e0                	ja     c0003638 <dir_clear+0x5a>
c0003658:	31 db                	xor    ebx,ebx
c000365a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000365e:	39 d8                	cmp    eax,ebx
c0003660:	76 66                	jbe    c00036c8 <dir_clear+0xea>
c0003662:	83 ec 0c             	sub    esp,0xc
c0003665:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003669:	6a 01                	push   0x1
c000366b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000366f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003673:	55                   	push   ebp
c0003674:	50                   	push   eax
c0003675:	e8 94 e5 ff ff       	call   c0001c0e <disk_write>
c000367a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000367f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003684:	83 c4 20             	add    esp,0x20
c0003687:	85 c0                	test   eax,eax
c0003689:	75 3d                	jne    c00036c8 <dir_clear+0xea>
c000368b:	43                   	inc    ebx
c000368c:	eb cc                	jmp    c000365a <dir_clear+0x7c>
c000368e:	83 ec 0c             	sub    esp,0xc
c0003691:	31 d2                	xor    edx,edx
c0003693:	55                   	push   ebp
c0003694:	89 d8                	mov    eax,ebx
c0003696:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000369a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000369e:	52                   	push   edx
c000369f:	50                   	push   eax
c00036a0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036a4:	57                   	push   edi
c00036a5:	50                   	push   eax
c00036a6:	e8 63 e5 ff ff       	call   c0001c0e <disk_write>
c00036ab:	83 c4 20             	add    esp,0x20
c00036ae:	85 c0                	test   eax,eax
c00036b0:	75 0a                	jne    c00036bc <dir_clear+0xde>
c00036b2:	01 eb                	add    ebx,ebp
c00036b4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b8:	39 d8                	cmp    eax,ebx
c00036ba:	77 d2                	ja     c000368e <dir_clear+0xb0>
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	57                   	push   edi
c00036c0:	e8 c7 4d 00 00       	call   c000848c <ff_memfree>
c00036c5:	83 c4 10             	add    esp,0x10
c00036c8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036cc:	39 d8                	cmp    eax,ebx
c00036ce:	0f 95 c0             	setne  al
c00036d1:	0f b6 c0             	movzx  eax,al
c00036d4:	eb 19                	jmp    c00036ef <dir_clear+0x111>
c00036d6:	b8 01 00 00 00       	mov    eax,0x1
c00036db:	eb 12                	jmp    c00036ef <dir_clear+0x111>
c00036dd:	89 d9                	mov    ecx,ebx
c00036df:	31 d2                	xor    edx,edx
c00036e1:	c1 eb 09             	shr    ebx,0x9
c00036e4:	e8 ee e5 ff ff       	call   c0001cd7 <mem_set>
c00036e9:	89 dd                	mov    ebp,ebx
c00036eb:	31 db                	xor    ebx,ebx
c00036ed:	eb c5                	jmp    c00036b4 <dir_clear+0xd6>
c00036ef:	83 c4 1c             	add    esp,0x1c
c00036f2:	5b                   	pop    ebx
c00036f3:	5e                   	pop    esi
c00036f4:	5f                   	pop    edi
c00036f5:	5d                   	pop    ebp
c00036f6:	c3                   	ret    

c00036f7 <dir_next>:
c00036f7:	55                   	push   ebp
c00036f8:	57                   	push   edi
c00036f9:	56                   	push   esi
c00036fa:	53                   	push   ebx
c00036fb:	89 c3                	mov    ebx,eax
c00036fd:	83 ec 1c             	sub    esp,0x1c
c0003700:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003702:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003706:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003709:	8d 78 20             	lea    edi,[eax+0x20]
c000370c:	31 c0                	xor    eax,eax
c000370e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003712:	0f 94 c0             	sete   al
c0003715:	48                   	dec    eax
c0003716:	25 00 00 20 f0       	and    eax,0xf0200000
c000371b:	05 00 00 00 10       	add    eax,0x10000000
c0003720:	39 f8                	cmp    eax,edi
c0003722:	77 0e                	ja     c0003732 <dir_next+0x3b>
c0003724:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000372b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003732:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003735:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003738:	b8 04 00 00 00       	mov    eax,0x4
c000373d:	89 ce                	mov    esi,ecx
c000373f:	09 d6                	or     esi,edx
c0003741:	0f 84 da 00 00 00    	je     c0003821 <dir_next+0x12a>
c0003747:	89 f8                	mov    eax,edi
c0003749:	25 ff 01 00 00       	and    eax,0x1ff
c000374e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003752:	0f 85 b9 00 00 00    	jne    c0003811 <dir_next+0x11a>
c0003758:	83 c2 01             	add    edx,0x1
c000375b:	83 d1 00             	adc    ecx,0x0
c000375e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003761:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003764:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003767:	85 d2                	test   edx,edx
c0003769:	75 29                	jne    c0003794 <dir_next+0x9d>
c000376b:	89 fa                	mov    edx,edi
c000376d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003771:	c1 ea 05             	shr    edx,0x5
c0003774:	39 c2                	cmp    edx,eax
c0003776:	0f 82 95 00 00 00    	jb     c0003811 <dir_next+0x11a>
c000377c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003783:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000378a:	b8 04 00 00 00       	mov    eax,0x4
c000378f:	e9 8d 00 00 00       	jmp    c0003821 <dir_next+0x12a>
c0003794:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003798:	89 f9                	mov    ecx,edi
c000379a:	48                   	dec    eax
c000379b:	c1 e9 09             	shr    ecx,0x9
c000379e:	85 c8                	test   eax,ecx
c00037a0:	75 6f                	jne    c0003811 <dir_next+0x11a>
c00037a2:	89 d8                	mov    eax,ebx
c00037a4:	e8 00 f8 ff ff       	call   c0002fa9 <get_fat>
c00037a9:	89 c6                	mov    esi,eax
c00037ab:	83 f8 01             	cmp    eax,0x1
c00037ae:	77 07                	ja     c00037b7 <dir_next+0xc0>
c00037b0:	b8 02 00 00 00       	mov    eax,0x2
c00037b5:	eb 6a                	jmp    c0003821 <dir_next+0x12a>
c00037b7:	83 f8 ff             	cmp    eax,0xffffffff
c00037ba:	75 07                	jne    c00037c3 <dir_next+0xcc>
c00037bc:	b8 01 00 00 00       	mov    eax,0x1
c00037c1:	eb 5e                	jmp    c0003821 <dir_next+0x12a>
c00037c3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037c6:	77 37                	ja     c00037ff <dir_next+0x108>
c00037c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037cd:	74 ad                	je     c000377c <dir_next+0x85>
c00037cf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037d2:	89 d8                	mov    eax,ebx
c00037d4:	e8 be fa ff ff       	call   c0003297 <create_chain>
c00037d9:	89 c6                	mov    esi,eax
c00037db:	b8 07 00 00 00       	mov    eax,0x7
c00037e0:	85 f6                	test   esi,esi
c00037e2:	74 3d                	je     c0003821 <dir_next+0x12a>
c00037e4:	83 fe 01             	cmp    esi,0x1
c00037e7:	74 c7                	je     c00037b0 <dir_next+0xb9>
c00037e9:	83 fe ff             	cmp    esi,0xffffffff
c00037ec:	74 ce                	je     c00037bc <dir_next+0xc5>
c00037ee:	89 f2                	mov    edx,esi
c00037f0:	89 e8                	mov    eax,ebp
c00037f2:	e8 e7 fd ff ff       	call   c00035de <dir_clear>
c00037f7:	85 c0                	test   eax,eax
c00037f9:	75 c1                	jne    c00037bc <dir_next+0xc5>
c00037fb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037ff:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003802:	89 f2                	mov    edx,esi
c0003804:	89 e8                	mov    eax,ebp
c0003806:	e8 d1 e6 ff ff       	call   c0001edc <clst2sect>
c000380b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000380e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003815:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003818:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000381c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000381f:	31 c0                	xor    eax,eax
c0003821:	83 c4 1c             	add    esp,0x1c
c0003824:	5b                   	pop    ebx
c0003825:	5e                   	pop    esi
c0003826:	5f                   	pop    edi
c0003827:	5d                   	pop    ebp
c0003828:	c3                   	ret    

c0003829 <load_xdir>:
c0003829:	55                   	push   ebp
c000382a:	57                   	push   edi
c000382b:	56                   	push   esi
c000382c:	89 c6                	mov    esi,eax
c000382e:	53                   	push   ebx
c000382f:	83 ec 1c             	sub    esp,0x1c
c0003832:	8b 00                	mov    eax,DWORD PTR [eax]
c0003834:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003837:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000383a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000383d:	e8 df eb ff ff       	call   c0002421 <move_window>
c0003842:	89 c3                	mov    ebx,eax
c0003844:	85 c0                	test   eax,eax
c0003846:	0f 85 0c 01 00 00    	jne    c0003958 <load_xdir+0x12f>
c000384c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000384f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003852:	0f 85 fb 00 00 00    	jne    c0003953 <load_xdir+0x12a>
c0003858:	89 f8                	mov    eax,edi
c000385a:	b9 20 00 00 00       	mov    ecx,0x20
c000385f:	e8 5e e4 ff ff       	call   c0001cc2 <mem_cpy>
c0003864:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003868:	40                   	inc    eax
c0003869:	c1 e0 05             	shl    eax,0x5
c000386c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003870:	83 e8 60             	sub    eax,0x60
c0003873:	3d 00 02 00 00       	cmp    eax,0x200
c0003878:	0f 87 d5 00 00 00    	ja     c0003953 <load_xdir+0x12a>
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 f0                	mov    eax,esi
c0003882:	e8 70 fe ff ff       	call   c00036f7 <dir_next>
c0003887:	89 c3                	mov    ebx,eax
c0003889:	83 f8 04             	cmp    eax,0x4
c000388c:	0f 84 c1 00 00 00    	je     c0003953 <load_xdir+0x12a>
c0003892:	85 c0                	test   eax,eax
c0003894:	0f 85 be 00 00 00    	jne    c0003958 <load_xdir+0x12f>
c000389a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00038a2:	e8 7a eb ff ff       	call   c0002421 <move_window>
c00038a7:	89 c3                	mov    ebx,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 85 a7 00 00 00    	jne    c0003958 <load_xdir+0x12f>
c00038b1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038b7:	0f 85 96 00 00 00    	jne    c0003953 <load_xdir+0x12a>
c00038bd:	8d 47 20             	lea    eax,[edi+0x20]
c00038c0:	b9 20 00 00 00       	mov    ecx,0x20
c00038c5:	e8 f8 e3 ff ff       	call   c0001cc2 <mem_cpy>
c00038ca:	31 d2                	xor    edx,edx
c00038cc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038d0:	b9 0f 00 00 00       	mov    ecx,0xf
c00038d5:	83 c0 2c             	add    eax,0x2c
c00038d8:	f7 f1                	div    ecx
c00038da:	c1 e0 05             	shl    eax,0x5
c00038dd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038e1:	77 70                	ja     c0003953 <load_xdir+0x12a>
c00038e3:	bd 40 00 00 00       	mov    ebp,0x40
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	89 f0                	mov    eax,esi
c00038ec:	e8 06 fe ff ff       	call   c00036f7 <dir_next>
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 f8 04             	cmp    eax,0x4
c00038f6:	74 5b                	je     c0003953 <load_xdir+0x12a>
c00038f8:	85 c0                	test   eax,eax
c00038fa:	75 5c                	jne    c0003958 <load_xdir+0x12f>
c00038fc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038ff:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003902:	8b 06                	mov    eax,DWORD PTR [esi]
c0003904:	e8 18 eb ff ff       	call   c0002421 <move_window>
c0003909:	89 c3                	mov    ebx,eax
c000390b:	85 c0                	test   eax,eax
c000390d:	75 49                	jne    c0003958 <load_xdir+0x12f>
c000390f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003912:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003915:	75 3c                	jne    c0003953 <load_xdir+0x12a>
c0003917:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000391d:	77 0d                	ja     c000392c <load_xdir+0x103>
c000391f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003922:	b9 20 00 00 00       	mov    ecx,0x20
c0003927:	e8 96 e3 ff ff       	call   c0001cc2 <mem_cpy>
c000392c:	83 c5 20             	add    ebp,0x20
c000392f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003933:	77 b3                	ja     c00038e8 <load_xdir+0xbf>
c0003935:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000393b:	77 1b                	ja     c0003958 <load_xdir+0x12f>
c000393d:	89 f8                	mov    eax,edi
c000393f:	e8 cd e7 ff ff       	call   c0002111 <xdir_sum>
c0003944:	89 c1                	mov    ecx,eax
c0003946:	8d 47 02             	lea    eax,[edi+0x2]
c0003949:	e8 f5 e2 ff ff       	call   c0001c43 <ld_word>
c000394e:	66 39 c1             	cmp    cx,ax
c0003951:	74 05                	je     c0003958 <load_xdir+0x12f>
c0003953:	bb 02 00 00 00       	mov    ebx,0x2
c0003958:	83 c4 1c             	add    esp,0x1c
c000395b:	89 d8                	mov    eax,ebx
c000395d:	5b                   	pop    ebx
c000395e:	5e                   	pop    esi
c000395f:	5f                   	pop    edi
c0003960:	5d                   	pop    ebp
c0003961:	c3                   	ret    

c0003962 <load_obj_xdir>:
c0003962:	53                   	push   ebx
c0003963:	89 c3                	mov    ebx,eax
c0003965:	83 ec 08             	sub    esp,0x8
c0003968:	8b 02                	mov    eax,DWORD PTR [edx]
c000396a:	89 03                	mov    DWORD PTR [ebx],eax
c000396c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000396f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003972:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003975:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003978:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000397b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003982:	30 c0                	xor    al,al
c0003984:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000398b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000398e:	89 d8                	mov    eax,ebx
c0003990:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003993:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003996:	e8 04 f8 ff ff       	call   c000319f <dir_sdi>
c000399b:	85 c0                	test   eax,eax
c000399d:	75 0b                	jne    c00039aa <load_obj_xdir+0x48>
c000399f:	89 d8                	mov    eax,ebx
c00039a1:	83 c4 08             	add    esp,0x8
c00039a4:	5b                   	pop    ebx
c00039a5:	e9 7f fe ff ff       	jmp    c0003829 <load_xdir>
c00039aa:	83 c4 08             	add    esp,0x8
c00039ad:	5b                   	pop    ebx
c00039ae:	c3                   	ret    

c00039af <dir_read>:
c00039af:	55                   	push   ebp
c00039b0:	bd 04 00 00 00       	mov    ebp,0x4
c00039b5:	57                   	push   edi
c00039b6:	56                   	push   esi
c00039b7:	be ff ff ff ff       	mov    esi,0xffffffff
c00039bc:	53                   	push   ebx
c00039bd:	89 c3                	mov    ebx,eax
c00039bf:	83 ec 1c             	sub    esp,0x1c
c00039c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00039c8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039cd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039d0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039d3:	89 c8                	mov    eax,ecx
c00039d5:	09 d0                	or     eax,edx
c00039d7:	0f 84 25 01 00 00    	je     c0003b02 <dir_read+0x153>
c00039dd:	89 f8                	mov    eax,edi
c00039df:	e8 3d ea ff ff       	call   c0002421 <move_window>
c00039e4:	89 c5                	mov    ebp,eax
c00039e6:	85 c0                	test   eax,eax
c00039e8:	0f 85 23 01 00 00    	jne    c0003b11 <dir_read+0x162>
c00039ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039f1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039f3:	84 c9                	test   cl,cl
c00039f5:	0f 84 11 01 00 00    	je     c0003b0c <dir_read+0x15d>
c00039fb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039fe:	75 48                	jne    c0003a48 <dir_read+0x99>
c0003a00:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a05:	74 10                	je     c0003a17 <dir_read+0x68>
c0003a07:	80 f9 83             	cmp    cl,0x83
c0003a0a:	0f 85 dd 00 00 00    	jne    c0003aed <dir_read+0x13e>
c0003a10:	31 ed                	xor    ebp,ebp
c0003a12:	e9 08 01 00 00       	jmp    c0003b1f <dir_read+0x170>
c0003a17:	80 f9 85             	cmp    cl,0x85
c0003a1a:	0f 85 cd 00 00 00    	jne    c0003aed <dir_read+0x13e>
c0003a20:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a23:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a26:	89 d8                	mov    eax,ebx
c0003a28:	e8 fc fd ff ff       	call   c0003829 <load_xdir>
c0003a2d:	89 c5                	mov    ebp,eax
c0003a2f:	85 c0                	test   eax,eax
c0003a31:	0f 85 da 00 00 00    	jne    c0003b11 <dir_read+0x162>
c0003a37:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a3a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a3d:	83 e0 3f             	and    eax,0x3f
c0003a40:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a43:	e9 d7 00 00 00       	jmp    c0003b1f <dir_read+0x170>
c0003a48:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a4b:	83 e0 3f             	and    eax,0x3f
c0003a4e:	80 f9 2e             	cmp    cl,0x2e
c0003a51:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a55:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a58:	0f 84 8a 00 00 00    	je     c0003ae8 <dir_read+0x139>
c0003a5e:	80 f9 e5             	cmp    cl,0xe5
c0003a61:	0f 84 81 00 00 00    	je     c0003ae8 <dir_read+0x139>
c0003a67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a6b:	83 e0 1f             	and    eax,0x1f
c0003a6e:	83 f8 08             	cmp    eax,0x8
c0003a71:	0f 94 c0             	sete   al
c0003a74:	0f b6 c0             	movzx  eax,al
c0003a77:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a7b:	75 6b                	jne    c0003ae8 <dir_read+0x139>
c0003a7d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a82:	75 44                	jne    c0003ac8 <dir_read+0x119>
c0003a84:	f6 c1 40             	test   cl,0x40
c0003a87:	74 12                	je     c0003a9b <dir_read+0xec>
c0003a89:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a8c:	83 e1 bf             	and    ecx,0xffffffbf
c0003a8f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a93:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a96:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a99:	eb 06                	jmp    c0003aa1 <dir_read+0xf2>
c0003a9b:	89 f0                	mov    eax,esi
c0003a9d:	38 c8                	cmp    al,cl
c0003a9f:	75 47                	jne    c0003ae8 <dir_read+0x139>
c0003aa1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003aa5:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aaa:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aad:	75 3e                	jne    c0003aed <dir_read+0x13e>
c0003aaf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ab3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ab6:	e8 8a e4 ff ff       	call   c0001f45 <pick_lfn>
c0003abb:	85 c0                	test   eax,eax
c0003abd:	74 2e                	je     c0003aed <dir_read+0x13e>
c0003abf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ac3:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ac6:	eb 25                	jmp    c0003aed <dir_read+0x13e>
c0003ac8:	89 f0                	mov    eax,esi
c0003aca:	84 c0                	test   al,al
c0003acc:	75 11                	jne    c0003adf <dir_read+0x130>
c0003ace:	89 d0                	mov    eax,edx
c0003ad0:	e8 2a e6 ff ff       	call   c00020ff <sum_sfn>
c0003ad5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003ad9:	0f 84 31 ff ff ff    	je     c0003a10 <dir_read+0x61>
c0003adf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ae6:	eb 37                	jmp    c0003b1f <dir_read+0x170>
c0003ae8:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aed:	31 d2                	xor    edx,edx
c0003aef:	89 d8                	mov    eax,ebx
c0003af1:	e8 01 fc ff ff       	call   c00036f7 <dir_next>
c0003af6:	89 c5                	mov    ebp,eax
c0003af8:	85 c0                	test   eax,eax
c0003afa:	0f 84 cd fe ff ff    	je     c00039cd <dir_read+0x1e>
c0003b00:	eb 0f                	jmp    c0003b11 <dir_read+0x162>
c0003b02:	85 ed                	test   ebp,ebp
c0003b04:	0f 84 06 ff ff ff    	je     c0003a10 <dir_read+0x61>
c0003b0a:	eb 05                	jmp    c0003b11 <dir_read+0x162>
c0003b0c:	bd 04 00 00 00       	mov    ebp,0x4
c0003b11:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b18:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b1f:	83 c4 1c             	add    esp,0x1c
c0003b22:	89 e8                	mov    eax,ebp
c0003b24:	5b                   	pop    ebx
c0003b25:	5e                   	pop    esi
c0003b26:	5f                   	pop    edi
c0003b27:	5d                   	pop    ebp
c0003b28:	c3                   	ret    

c0003b29 <dir_alloc>:
c0003b29:	55                   	push   ebp
c0003b2a:	89 d5                	mov    ebp,edx
c0003b2c:	57                   	push   edi
c0003b2d:	31 d2                	xor    edx,edx
c0003b2f:	56                   	push   esi
c0003b30:	53                   	push   ebx
c0003b31:	89 c3                	mov    ebx,eax
c0003b33:	83 ec 0c             	sub    esp,0xc
c0003b36:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b38:	e8 62 f6 ff ff       	call   c000319f <dir_sdi>
c0003b3d:	85 c0                	test   eax,eax
c0003b3f:	75 4e                	jne    c0003b8f <dir_alloc+0x66>
c0003b41:	31 f6                	xor    esi,esi
c0003b43:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b46:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b49:	89 f8                	mov    eax,edi
c0003b4b:	e8 d1 e8 ff ff       	call   c0002421 <move_window>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	75 3b                	jne    c0003b8f <dir_alloc+0x66>
c0003b54:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b57:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b5a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b5c:	75 07                	jne    c0003b65 <dir_alloc+0x3c>
c0003b5e:	f7 d2                	not    edx
c0003b60:	c0 ea 07             	shr    dl,0x7
c0003b63:	eb 0d                	jmp    c0003b72 <dir_alloc+0x49>
c0003b65:	84 d2                	test   dl,dl
c0003b67:	0f 94 c1             	sete   cl
c0003b6a:	80 fa e5             	cmp    dl,0xe5
c0003b6d:	0f 94 c2             	sete   dl
c0003b70:	09 ca                	or     edx,ecx
c0003b72:	84 d2                	test   dl,dl
c0003b74:	74 07                	je     c0003b7d <dir_alloc+0x54>
c0003b76:	46                   	inc    esi
c0003b77:	39 ee                	cmp    esi,ebp
c0003b79:	75 04                	jne    c0003b7f <dir_alloc+0x56>
c0003b7b:	eb 1c                	jmp    c0003b99 <dir_alloc+0x70>
c0003b7d:	31 f6                	xor    esi,esi
c0003b7f:	ba 01 00 00 00       	mov    edx,0x1
c0003b84:	89 d8                	mov    eax,ebx
c0003b86:	e8 6c fb ff ff       	call   c00036f7 <dir_next>
c0003b8b:	85 c0                	test   eax,eax
c0003b8d:	74 b4                	je     c0003b43 <dir_alloc+0x1a>
c0003b8f:	83 f8 04             	cmp    eax,0x4
c0003b92:	75 05                	jne    c0003b99 <dir_alloc+0x70>
c0003b94:	b8 07 00 00 00       	mov    eax,0x7
c0003b99:	83 c4 0c             	add    esp,0xc
c0003b9c:	5b                   	pop    ebx
c0003b9d:	5e                   	pop    esi
c0003b9e:	5f                   	pop    edi
c0003b9f:	5d                   	pop    ebp
c0003ba0:	c3                   	ret    

c0003ba1 <store_xdir>:
c0003ba1:	55                   	push   ebp
c0003ba2:	57                   	push   edi
c0003ba3:	89 c7                	mov    edi,eax
c0003ba5:	56                   	push   esi
c0003ba6:	53                   	push   ebx
c0003ba7:	83 ec 0c             	sub    esp,0xc
c0003baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bac:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003baf:	89 e8                	mov    eax,ebp
c0003bb1:	e8 5b e5 ff ff       	call   c0002111 <xdir_sum>
c0003bb6:	0f b7 d0             	movzx  edx,ax
c0003bb9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bbc:	e8 f4 e0 ff ff       	call   c0001cb5 <st_word>
c0003bc1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bc5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bc8:	89 f8                	mov    eax,edi
c0003bca:	e8 d0 f5 ff ff       	call   c000319f <dir_sdi>
c0003bcf:	89 c6                	mov    esi,eax
c0003bd1:	85 f6                	test   esi,esi
c0003bd3:	75 3d                	jne    c0003c12 <store_xdir+0x71>
c0003bd5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bd8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	e8 3f e8 ff ff       	call   c0002421 <move_window>
c0003be2:	89 c6                	mov    esi,eax
c0003be4:	85 c0                	test   eax,eax
c0003be6:	75 2a                	jne    c0003c12 <store_xdir+0x71>
c0003be8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003beb:	b9 20 00 00 00       	mov    ecx,0x20
c0003bf0:	89 ea                	mov    edx,ebp
c0003bf2:	e8 cb e0 ff ff       	call   c0001cc2 <mem_cpy>
c0003bf7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bf9:	85 db                	test   ebx,ebx
c0003bfb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003bff:	74 11                	je     c0003c12 <store_xdir+0x71>
c0003c01:	31 d2                	xor    edx,edx
c0003c03:	89 f8                	mov    eax,edi
c0003c05:	83 c5 20             	add    ebp,0x20
c0003c08:	e8 ea fa ff ff       	call   c00036f7 <dir_next>
c0003c0d:	4b                   	dec    ebx
c0003c0e:	89 c6                	mov    esi,eax
c0003c10:	eb bf                	jmp    c0003bd1 <store_xdir+0x30>
c0003c12:	89 f0                	mov    eax,esi
c0003c14:	83 fe 02             	cmp    esi,0x2
c0003c17:	76 05                	jbe    c0003c1e <store_xdir+0x7d>
c0003c19:	b8 02 00 00 00       	mov    eax,0x2
c0003c1e:	83 c4 0c             	add    esp,0xc
c0003c21:	5b                   	pop    ebx
c0003c22:	5e                   	pop    esi
c0003c23:	5f                   	pop    edi
c0003c24:	5d                   	pop    ebp
c0003c25:	c3                   	ret    

c0003c26 <dir_remove>:
c0003c26:	57                   	push   edi
c0003c27:	56                   	push   esi
c0003c28:	53                   	push   ebx
c0003c29:	89 c3                	mov    ebx,eax
c0003c2b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c2e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c30:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c33:	83 fa ff             	cmp    edx,0xffffffff
c0003c36:	74 09                	je     c0003c41 <dir_remove+0x1b>
c0003c38:	e8 62 f5 ff ff       	call   c000319f <dir_sdi>
c0003c3d:	85 c0                	test   eax,eax
c0003c3f:	75 41                	jne    c0003c82 <dir_remove+0x5c>
c0003c41:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c44:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c47:	89 f0                	mov    eax,esi
c0003c49:	e8 d3 e7 ff ff       	call   c0002421 <move_window>
c0003c4e:	85 c0                	test   eax,eax
c0003c50:	75 26                	jne    c0003c78 <dir_remove+0x52>
c0003c52:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c55:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c58:	75 05                	jne    c0003c5f <dir_remove+0x39>
c0003c5a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c5d:	eb 03                	jmp    c0003c62 <dir_remove+0x3c>
c0003c5f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c62:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c66:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c69:	73 17                	jae    c0003c82 <dir_remove+0x5c>
c0003c6b:	31 d2                	xor    edx,edx
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 83 fa ff ff       	call   c00036f7 <dir_next>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c9                	je     c0003c41 <dir_remove+0x1b>
c0003c78:	83 f8 04             	cmp    eax,0x4
c0003c7b:	75 05                	jne    c0003c82 <dir_remove+0x5c>
c0003c7d:	b8 02 00 00 00       	mov    eax,0x2
c0003c82:	5b                   	pop    ebx
c0003c83:	5e                   	pop    esi
c0003c84:	5f                   	pop    edi
c0003c85:	c3                   	ret    

c0003c86 <create_name>:
c0003c86:	55                   	push   ebp
c0003c87:	89 d5                	mov    ebp,edx
c0003c89:	57                   	push   edi
c0003c8a:	89 c7                	mov    edi,eax
c0003c8c:	56                   	push   esi
c0003c8d:	31 f6                	xor    esi,esi
c0003c8f:	53                   	push   ebx
c0003c90:	83 ec 3c             	sub    esp,0x3c
c0003c93:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c99:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ca2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ca6:	e8 72 e0 ff ff       	call   c0001d1d <tchar2uni>
c0003cab:	89 c3                	mov    ebx,eax
c0003cad:	83 f8 ff             	cmp    eax,0xffffffff
c0003cb0:	75 0a                	jne    c0003cbc <create_name+0x36>
c0003cb2:	b8 06 00 00 00       	mov    eax,0x6
c0003cb7:	e9 9e 02 00 00       	jmp    c0003f5a <create_name+0x2d4>
c0003cbc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cc1:	76 0c                	jbe    c0003ccf <create_name+0x49>
c0003cc3:	c1 e8 10             	shr    eax,0x10
c0003cc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cca:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cce:	46                   	inc    esi
c0003ccf:	66 83 fb 1f          	cmp    bx,0x1f
c0003cd3:	76 4f                	jbe    c0003d24 <create_name+0x9e>
c0003cd5:	66 83 fb 5c          	cmp    bx,0x5c
c0003cd9:	74 35                	je     c0003d10 <create_name+0x8a>
c0003cdb:	66 83 fb 2f          	cmp    bx,0x2f
c0003cdf:	74 2f                	je     c0003d10 <create_name+0x8a>
c0003ce1:	66 83 fb 7f          	cmp    bx,0x7f
c0003ce5:	77 11                	ja     c0003cf8 <create_name+0x72>
c0003ce7:	0f b7 d3             	movzx  edx,bx
c0003cea:	b8 52 9f 02 c0       	mov    eax,0xc0029f52
c0003cef:	e8 11 e0 ff ff       	call   c0001d05 <chk_chr>
c0003cf4:	85 c0                	test   eax,eax
c0003cf6:	75 ba                	jne    c0003cb2 <create_name+0x2c>
c0003cf8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003cfe:	77 b2                	ja     c0003cb2 <create_name+0x2c>
c0003d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d04:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d08:	46                   	inc    esi
c0003d09:	eb 97                	jmp    c0003ca2 <create_name+0x1c>
c0003d0b:	40                   	inc    eax
c0003d0c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d14:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d16:	80 fa 2f             	cmp    dl,0x2f
c0003d19:	74 f0                	je     c0003d0b <create_name+0x85>
c0003d1b:	80 fa 5c             	cmp    dl,0x5c
c0003d1e:	74 eb                	je     c0003d0b <create_name+0x85>
c0003d20:	31 db                	xor    ebx,ebx
c0003d22:	eb 02                	jmp    c0003d26 <create_name+0xa0>
c0003d24:	b3 04                	mov    bl,0x4
c0003d26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d2a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d2d:	85 f6                	test   esi,esi
c0003d2f:	74 18                	je     c0003d49 <create_name+0xc3>
c0003d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d35:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d3a:	66 83 f8 20          	cmp    ax,0x20
c0003d3e:	74 06                	je     c0003d46 <create_name+0xc0>
c0003d40:	66 83 f8 2e          	cmp    ax,0x2e
c0003d44:	75 03                	jne    c0003d49 <create_name+0xc3>
c0003d46:	4e                   	dec    esi
c0003d47:	eb e4                	jmp    c0003d2d <create_name+0xa7>
c0003d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d4d:	31 ed                	xor    ebp,ebp
c0003d4f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d55:	85 f6                	test   esi,esi
c0003d57:	0f 84 55 ff ff ff    	je     c0003cb2 <create_name+0x2c>
c0003d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d61:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d64:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d68:	66 83 f8 20          	cmp    ax,0x20
c0003d6c:	75 04                	jne    c0003d72 <create_name+0xec>
c0003d6e:	89 d5                	mov    ebp,edx
c0003d70:	eb eb                	jmp    c0003d5d <create_name+0xd7>
c0003d72:	85 ed                	test   ebp,ebp
c0003d74:	75 06                	jne    c0003d7c <create_name+0xf6>
c0003d76:	66 83 f8 2e          	cmp    ax,0x2e
c0003d7a:	75 08                	jne    c0003d84 <create_name+0xfe>
c0003d7c:	83 cb 03             	or     ebx,0x3
c0003d7f:	eb 03                	jmp    c0003d84 <create_name+0xfe>
c0003d81:	4e                   	dec    esi
c0003d82:	74 0c                	je     c0003d90 <create_name+0x10a>
c0003d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d88:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d8e:	75 f1                	jne    c0003d81 <create_name+0xfb>
c0003d90:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d95:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d98:	ba 20 00 00 00       	mov    edx,0x20
c0003d9d:	e8 35 df ff ff       	call   c0001cd7 <mem_set>
c0003da2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003daa:	31 c9                	xor    ecx,ecx
c0003dac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003db1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003db4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dbc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dc0:	66 85 ed             	test   bp,bp
c0003dc3:	0f 84 30 01 00 00    	je     c0003ef9 <create_name+0x273>
c0003dc9:	66 83 fd 20          	cmp    bp,0x20
c0003dcd:	74 10                	je     c0003ddf <create_name+0x159>
c0003dcf:	66 83 fd 2e          	cmp    bp,0x2e
c0003dd3:	75 13                	jne    c0003de8 <create_name+0x162>
c0003dd5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd9:	0f 84 6b 01 00 00    	je     c0003f4a <create_name+0x2c4>
c0003ddf:	83 cb 03             	or     ebx,0x3
c0003de2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003de6:	eb c9                	jmp    c0003db1 <create_name+0x12b>
c0003de8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dec:	73 0b                	jae    c0003df9 <create_name+0x173>
c0003dee:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df2:	75 47                	jne    c0003e3b <create_name+0x1b5>
c0003df4:	e9 51 01 00 00       	jmp    c0003f4a <create_name+0x2c4>
c0003df9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003dfe:	75 10                	jne    c0003e10 <create_name+0x18a>
c0003e00:	83 cb 03             	or     ebx,0x3
c0003e03:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e0b:	e9 e9 00 00 00       	jmp    c0003ef9 <create_name+0x273>
c0003e10:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e14:	74 0d                	je     c0003e23 <create_name+0x19d>
c0003e16:	83 cb 03             	or     ebx,0x3
c0003e19:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1d:	0f 87 d6 00 00 00    	ja     c0003ef9 <create_name+0x273>
c0003e23:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e28:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e2c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e34:	b9 08 00 00 00       	mov    ecx,0x8
c0003e39:	eb a7                	jmp    c0003de2 <create_name+0x15c>
c0003e3b:	66 83 fd 7f          	cmp    bp,0x7f
c0003e3f:	76 68                	jbe    c0003ea9 <create_name+0x223>
c0003e41:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e45:	88 da                	mov    dl,bl
c0003e47:	83 ca 02             	or     edx,0x2
c0003e4a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e4e:	50                   	push   eax
c0003e4f:	50                   	push   eax
c0003e50:	68 b5 01 00 00       	push   0x1b5
c0003e55:	55                   	push   ebp
c0003e56:	e8 48 46 00 00       	call   c00084a3 <ff_uni2oem>
c0003e5b:	83 c4 10             	add    esp,0x10
c0003e5e:	89 c5                	mov    ebp,eax
c0003e60:	a8 80                	test   al,0x80
c0003e62:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e6a:	74 0c                	je     c0003e78 <create_name+0x1f2>
c0003e6c:	83 e5 7f             	and    ebp,0x7f
c0003e6f:	0f b6 ad a0 9e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6160]
c0003e76:	eb 2a                	jmp    c0003ea2 <create_name+0x21c>
c0003e78:	66 3d ff 00          	cmp    ax,0xff
c0003e7c:	76 24                	jbe    c0003ea2 <create_name+0x21c>
c0003e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e82:	48                   	dec    eax
c0003e83:	39 c8                	cmp    eax,ecx
c0003e85:	77 0c                	ja     c0003e93 <create_name+0x20d>
c0003e87:	83 cb 03             	or     ebx,0x3
c0003e8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e8e:	e9 4f ff ff ff       	jmp    c0003de2 <create_name+0x15c>
c0003e93:	89 e8                	mov    eax,ebp
c0003e95:	88 d3                	mov    bl,dl
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e9f:	41                   	inc    ecx
c0003ea0:	eb 4b                	jmp    c0003eed <create_name+0x267>
c0003ea2:	88 d3                	mov    bl,dl
c0003ea4:	66 85 ed             	test   bp,bp
c0003ea7:	74 19                	je     c0003ec2 <create_name+0x23c>
c0003ea9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ead:	0f b7 d5             	movzx  edx,bp
c0003eb0:	b8 5b 9f 02 c0       	mov    eax,0xc0029f5b
c0003eb5:	e8 4b de ff ff       	call   c0001d05 <chk_chr>
c0003eba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ebe:	85 c0                	test   eax,eax
c0003ec0:	74 0a                	je     c0003ecc <create_name+0x246>
c0003ec2:	83 cb 03             	or     ebx,0x3
c0003ec5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eca:	eb 21                	jmp    c0003eed <create_name+0x267>
c0003ecc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ecf:	66 83 f8 19          	cmp    ax,0x19
c0003ed3:	77 07                	ja     c0003edc <create_name+0x256>
c0003ed5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003eda:	eb 11                	jmp    c0003eed <create_name+0x267>
c0003edc:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003edf:	66 83 f8 19          	cmp    ax,0x19
c0003ee3:	77 08                	ja     c0003eed <create_name+0x267>
c0003ee5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003eea:	83 ed 20             	sub    ebp,0x20
c0003eed:	89 e8                	mov    eax,ebp
c0003eef:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ef3:	41                   	inc    ecx
c0003ef4:	e9 e9 fe ff ff       	jmp    c0003de2 <create_name+0x15c>
c0003ef9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003efd:	75 04                	jne    c0003f03 <create_name+0x27d>
c0003eff:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f03:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f08:	75 05                	jne    c0003f0f <create_name+0x289>
c0003f0a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f13:	83 e0 0c             	and    eax,0xc
c0003f16:	3c 0c                	cmp    al,0xc
c0003f18:	74 0b                	je     c0003f25 <create_name+0x29f>
c0003f1a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f1e:	83 e0 03             	and    eax,0x3
c0003f21:	3c 03                	cmp    al,0x3
c0003f23:	75 05                	jne    c0003f2a <create_name+0x2a4>
c0003f25:	83 cb 02             	or     ebx,0x2
c0003f28:	eb 19                	jmp    c0003f43 <create_name+0x2bd>
c0003f2a:	f6 c3 02             	test   bl,0x2
c0003f2d:	75 14                	jne    c0003f43 <create_name+0x2bd>
c0003f2f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f34:	74 03                	je     c0003f39 <create_name+0x2b3>
c0003f36:	83 cb 10             	or     ebx,0x10
c0003f39:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f3e:	74 03                	je     c0003f43 <create_name+0x2bd>
c0003f40:	83 cb 08             	or     ebx,0x8
c0003f43:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f46:	31 c0                	xor    eax,eax
c0003f48:	eb 10                	jmp    c0003f5a <create_name+0x2d4>
c0003f4a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f4f:	0f 85 ce fe ff ff    	jne    c0003e23 <create_name+0x19d>
c0003f55:	e9 a6 fe ff ff       	jmp    c0003e00 <create_name+0x17a>
c0003f5a:	83 c4 3c             	add    esp,0x3c
c0003f5d:	5b                   	pop    ebx
c0003f5e:	5e                   	pop    esi
c0003f5f:	5f                   	pop    edi
c0003f60:	5d                   	pop    ebp
c0003f61:	c3                   	ret    

c0003f62 <xname_sum>:
c0003f62:	56                   	push   esi
c0003f63:	53                   	push   ebx
c0003f64:	89 c6                	mov    esi,eax
c0003f66:	51                   	push   ecx
c0003f67:	31 db                	xor    ebx,ebx
c0003f69:	83 c6 02             	add    esi,0x2
c0003f6c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f70:	66 85 c0             	test   ax,ax
c0003f73:	74 1f                	je     c0003f94 <xname_sum+0x32>
c0003f75:	83 ec 0c             	sub    esp,0xc
c0003f78:	66 d1 cb             	ror    bx,1
c0003f7b:	50                   	push   eax
c0003f7c:	e8 1e 46 00 00       	call   c000859f <ff_wtoupper>
c0003f81:	83 c4 10             	add    esp,0x10
c0003f84:	0f b6 d0             	movzx  edx,al
c0003f87:	66 c1 e8 08          	shr    ax,0x8
c0003f8b:	01 d3                	add    ebx,edx
c0003f8d:	66 d1 cb             	ror    bx,1
c0003f90:	01 c3                	add    ebx,eax
c0003f92:	eb d5                	jmp    c0003f69 <xname_sum+0x7>
c0003f94:	89 d8                	mov    eax,ebx
c0003f96:	5a                   	pop    edx
c0003f97:	5b                   	pop    ebx
c0003f98:	5e                   	pop    esi
c0003f99:	c3                   	ret    

c0003f9a <create_xdir>:
c0003f9a:	55                   	push   ebp
c0003f9b:	b9 40 00 00 00       	mov    ecx,0x40
c0003fa0:	57                   	push   edi
c0003fa1:	bd 01 00 00 00       	mov    ebp,0x1
c0003fa6:	56                   	push   esi
c0003fa7:	31 ff                	xor    edi,edi
c0003fa9:	53                   	push   ebx
c0003faa:	be 40 00 00 00       	mov    esi,0x40
c0003faf:	89 c3                	mov    ebx,eax
c0003fb1:	83 ec 1c             	sub    esp,0x1c
c0003fb4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fb8:	31 d2                	xor    edx,edx
c0003fba:	e8 18 dd ff ff       	call   c0001cd7 <mem_set>
c0003fbf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fc2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fc6:	31 c9                	xor    ecx,ecx
c0003fc8:	8d 46 01             	lea    eax,[esi+0x1]
c0003fcb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fcf:	83 c6 02             	add    esi,0x2
c0003fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fd6:	66 85 ed             	test   bp,bp
c0003fd9:	74 12                	je     c0003fed <create_xdir+0x53>
c0003fdb:	0f b6 c1             	movzx  eax,cl
c0003fde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fe6:	66 83 fd 01          	cmp    bp,0x1
c0003fea:	80 d9 ff             	sbb    cl,0xff
c0003fed:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003ff0:	0f b7 d5             	movzx  edx,bp
c0003ff3:	83 c6 02             	add    esi,0x2
c0003ff6:	e8 ba dc ff ff       	call   c0001cb5 <st_word>
c0003ffb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004001:	75 d3                	jne    c0003fd6 <create_xdir+0x3c>
c0004003:	8d 47 01             	lea    eax,[edi+0x1]
c0004006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000400a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000400e:	0f b6 c1             	movzx  eax,cl
c0004011:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004016:	74 07                	je     c000401f <create_xdir+0x85>
c0004018:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000401d:	eb a9                	jmp    c0003fc8 <create_xdir+0x2e>
c000401f:	8d 47 02             	lea    eax,[edi+0x2]
c0004022:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004025:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004028:	89 d0                	mov    eax,edx
c000402a:	e8 33 ff ff ff       	call   c0003f62 <xname_sum>
c000402f:	83 c4 1c             	add    esp,0x1c
c0004032:	0f b7 d0             	movzx  edx,ax
c0004035:	8d 43 24             	lea    eax,[ebx+0x24]
c0004038:	5b                   	pop    ebx
c0004039:	5e                   	pop    esi
c000403a:	5f                   	pop    edi
c000403b:	5d                   	pop    ebp
c000403c:	e9 74 dc ff ff       	jmp    c0001cb5 <st_word>

c0004041 <cmp_lfn>:
c0004041:	55                   	push   ebp
c0004042:	57                   	push   edi
c0004043:	89 d7                	mov    edi,edx
c0004045:	56                   	push   esi
c0004046:	53                   	push   ebx
c0004047:	83 ec 1c             	sub    esp,0x1c
c000404a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000404e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004051:	e8 ed db ff ff       	call   c0001c43 <ld_word>
c0004056:	66 85 c0             	test   ax,ax
c0004059:	74 07                	je     c0004062 <cmp_lfn+0x21>
c000405b:	31 c0                	xor    eax,eax
c000405d:	e9 9a 00 00 00       	jmp    c00040fc <cmp_lfn+0xbb>
c0004062:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004064:	bd 01 00 00 00       	mov    ebp,0x1
c0004069:	83 e3 3f             	and    ebx,0x3f
c000406c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004074:	4b                   	dec    ebx
c0004075:	6b db 0d             	imul   ebx,ebx,0xd
c0004078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000407c:	0f b6 80 20 9f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd60e0]
c0004083:	01 f8                	add    eax,edi
c0004085:	e8 b9 db ff ff       	call   c0001c43 <ld_word>
c000408a:	66 85 ed             	test   bp,bp
c000408d:	89 c6                	mov    esi,eax
c000408f:	74 3c                	je     c00040cd <cmp_lfn+0x8c>
c0004091:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0004097:	77 c2                	ja     c000405b <cmp_lfn+0x1a>
c0004099:	83 ec 0c             	sub    esp,0xc
c000409c:	0f b7 c0             	movzx  eax,ax
c000409f:	50                   	push   eax
c00040a0:	e8 fa 44 00 00       	call   c000859f <ff_wtoupper>
c00040a5:	89 c5                	mov    ebp,eax
c00040a7:	8d 43 01             	lea    eax,[ebx+0x1]
c00040aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040b2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b9:	e8 e1 44 00 00       	call   c000859f <ff_wtoupper>
c00040be:	83 c4 10             	add    esp,0x10
c00040c1:	39 c5                	cmp    ebp,eax
c00040c3:	75 96                	jne    c000405b <cmp_lfn+0x1a>
c00040c5:	89 f5                	mov    ebp,esi
c00040c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040cb:	eb 04                	jmp    c00040d1 <cmp_lfn+0x90>
c00040cd:	66 46                	inc    si
c00040cf:	75 8a                	jne    c000405b <cmp_lfn+0x1a>
c00040d1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040d5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040da:	75 9c                	jne    c0004078 <cmp_lfn+0x37>
c00040dc:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040df:	74 16                	je     c00040f7 <cmp_lfn+0xb6>
c00040e1:	66 85 ed             	test   bp,bp
c00040e4:	74 11                	je     c00040f7 <cmp_lfn+0xb6>
c00040e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ea:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040ef:	0f 94 c0             	sete   al
c00040f2:	0f b6 c0             	movzx  eax,al
c00040f5:	eb 05                	jmp    c00040fc <cmp_lfn+0xbb>
c00040f7:	b8 01 00 00 00       	mov    eax,0x1
c00040fc:	83 c4 1c             	add    esp,0x1c
c00040ff:	5b                   	pop    ebx
c0004100:	5e                   	pop    esi
c0004101:	5f                   	pop    edi
c0004102:	5d                   	pop    ebp
c0004103:	c3                   	ret    

c0004104 <dir_find>:
c0004104:	55                   	push   ebp
c0004105:	31 d2                	xor    edx,edx
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	89 c3                	mov    ebx,eax
c000410c:	83 ec 1c             	sub    esp,0x1c
c000410f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004111:	e8 89 f0 ff ff       	call   c000319f <dir_sdi>
c0004116:	89 04 24             	mov    DWORD PTR [esp],eax
c0004119:	85 c0                	test   eax,eax
c000411b:	0f 85 9e 01 00 00    	jne    c00042bf <dir_find+0x1bb>
c0004121:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004124:	0f 85 8d 00 00 00    	jne    c00041b7 <dir_find+0xb3>
c000412a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000412d:	e8 30 fe ff ff       	call   c0003f62 <xname_sum>
c0004132:	89 c7                	mov    edi,eax
c0004134:	31 d2                	xor    edx,edx
c0004136:	89 d8                	mov    eax,ebx
c0004138:	e8 72 f8 ff ff       	call   c00039af <dir_read>
c000413d:	85 c0                	test   eax,eax
c000413f:	0f 85 5e 01 00 00    	jne    c00042a3 <dir_find+0x19f>
c0004145:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004148:	8d 41 24             	lea    eax,[ecx+0x24]
c000414b:	e8 f3 da ff ff       	call   c0001c43 <ld_word>
c0004150:	66 39 f8             	cmp    ax,di
c0004153:	75 df                	jne    c0004134 <dir_find+0x30>
c0004155:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004158:	31 ed                	xor    ebp,ebp
c000415a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000415e:	ba 40 00 00 00       	mov    edx,0x40
c0004163:	89 e9                	mov    ecx,ebp
c0004165:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004169:	0f 84 42 01 00 00    	je     c00042b1 <dir_find+0x1ad>
c000416f:	f6 c2 1f             	test   dl,0x1f
c0004172:	75 03                	jne    c0004177 <dir_find+0x73>
c0004174:	83 c2 02             	add    edx,0x2
c0004177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000417b:	89 d0                	mov    eax,edx
c000417d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004180:	e8 be da ff ff       	call   c0001c43 <ld_word>
c0004185:	83 ec 0c             	sub    esp,0xc
c0004188:	0f b7 c0             	movzx  eax,ax
c000418b:	50                   	push   eax
c000418c:	e8 0e 44 00 00       	call   c000859f <ff_wtoupper>
c0004191:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004195:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004198:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c000419c:	89 04 24             	mov    DWORD PTR [esp],eax
c000419f:	e8 fb 43 00 00       	call   c000859f <ff_wtoupper>
c00041a4:	83 c4 10             	add    esp,0x10
c00041a7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041ab:	75 87                	jne    c0004134 <dir_find+0x30>
c00041ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041b1:	45                   	inc    ebp
c00041b2:	83 c2 02             	add    edx,0x2
c00041b5:	eb ac                	jmp    c0004163 <dir_find+0x5f>
c00041b7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041be:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041c3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ce:	89 f0                	mov    eax,esi
c00041d0:	e8 4c e2 ff ff       	call   c0002421 <move_window>
c00041d5:	85 c0                	test   eax,eax
c00041d7:	0f 85 c6 00 00 00    	jne    c00042a3 <dir_find+0x19f>
c00041dd:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041e3:	84 c9                	test   cl,cl
c00041e5:	0f 84 bd 00 00 00    	je     c00042a8 <dir_find+0x1a4>
c00041eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041ee:	88 d0                	mov    al,dl
c00041f0:	83 e0 3f             	and    eax,0x3f
c00041f3:	80 f9 e5             	cmp    cl,0xe5
c00041f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041f9:	0f 84 87 00 00 00    	je     c0004286 <dir_find+0x182>
c00041ff:	80 e2 08             	and    dl,0x8
c0004202:	74 06                	je     c000420a <dir_find+0x106>
c0004204:	3c 0f                	cmp    al,0xf
c0004206:	75 7e                	jne    c0004286 <dir_find+0x182>
c0004208:	eb 04                	jmp    c000420e <dir_find+0x10a>
c000420a:	3c 0f                	cmp    al,0xf
c000420c:	75 4c                	jne    c000425a <dir_find+0x156>
c000420e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004212:	75 7e                	jne    c0004292 <dir_find+0x18e>
c0004214:	f6 c1 40             	test   cl,0x40
c0004217:	74 12                	je     c000422b <dir_find+0x127>
c0004219:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000421c:	83 e1 bf             	and    ecx,0xffffffbf
c000421f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004223:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004226:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004229:	eb 06                	jmp    c0004231 <dir_find+0x12d>
c000422b:	89 f8                	mov    eax,edi
c000422d:	38 c8                	cmp    al,cl
c000422f:	75 5c                	jne    c000428d <dir_find+0x189>
c0004231:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004235:	bf ff ff ff ff       	mov    edi,0xffffffff
c000423a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000423d:	75 53                	jne    c0004292 <dir_find+0x18e>
c000423f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004243:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004246:	89 ea                	mov    edx,ebp
c0004248:	e8 f4 fd ff ff       	call   c0004041 <cmp_lfn>
c000424d:	85 c0                	test   eax,eax
c000424f:	74 41                	je     c0004292 <dir_find+0x18e>
c0004251:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004255:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004258:	eb 38                	jmp    c0004292 <dir_find+0x18e>
c000425a:	89 f8                	mov    eax,edi
c000425c:	84 c0                	test   al,al
c000425e:	75 0d                	jne    c000426d <dir_find+0x169>
c0004260:	89 e8                	mov    eax,ebp
c0004262:	e8 98 de ff ff       	call   c00020ff <sum_sfn>
c0004267:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000426b:	74 52                	je     c00042bf <dir_find+0x1bb>
c000426d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004271:	75 13                	jne    c0004286 <dir_find+0x182>
c0004273:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004276:	b9 0b 00 00 00       	mov    ecx,0xb
c000427b:	89 e8                	mov    eax,ebp
c000427d:	e8 60 da ff ff       	call   c0001ce2 <mem_cmp>
c0004282:	85 c0                	test   eax,eax
c0004284:	74 39                	je     c00042bf <dir_find+0x1bb>
c0004286:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000428d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004292:	31 d2                	xor    edx,edx
c0004294:	89 d8                	mov    eax,ebx
c0004296:	e8 5c f4 ff ff       	call   c00036f7 <dir_next>
c000429b:	85 c0                	test   eax,eax
c000429d:	0f 84 25 ff ff ff    	je     c00041c8 <dir_find+0xc4>
c00042a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00042a6:	eb 17                	jmp    c00042bf <dir_find+0x1bb>
c00042a8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042af:	eb 0e                	jmp    c00042bf <dir_find+0x1bb>
c00042b1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042b4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042b9:	0f 85 75 fe ff ff    	jne    c0004134 <dir_find+0x30>
c00042bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042c2:	83 c4 1c             	add    esp,0x1c
c00042c5:	5b                   	pop    ebx
c00042c6:	5e                   	pop    esi
c00042c7:	5f                   	pop    edi
c00042c8:	5d                   	pop    ebp
c00042c9:	c3                   	ret    

c00042ca <dir_register>:
c00042ca:	55                   	push   ebp
c00042cb:	57                   	push   edi
c00042cc:	56                   	push   esi
c00042cd:	be 06 00 00 00       	mov    esi,0x6
c00042d2:	53                   	push   ebx
c00042d3:	83 ec 6c             	sub    esp,0x6c
c00042d6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042da:	0f 85 62 02 00 00    	jne    c0004542 <dir_register+0x278>
c00042e0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042e2:	31 ff                	xor    edi,edi
c00042e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042ec:	74 03                	je     c00042f1 <dir_register+0x27>
c00042ee:	47                   	inc    edi
c00042ef:	eb f6                	jmp    c00042e7 <dir_register+0x1d>
c00042f1:	89 c3                	mov    ebx,eax
c00042f3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042f7:	0f 85 e1 00 00 00    	jne    c00043de <dir_register+0x114>
c00042fd:	83 c7 0e             	add    edi,0xe
c0004300:	b9 0f 00 00 00       	mov    ecx,0xf
c0004305:	89 f8                	mov    eax,edi
c0004307:	31 d2                	xor    edx,edx
c0004309:	f7 f1                	div    ecx
c000430b:	8d 50 02             	lea    edx,[eax+0x2]
c000430e:	89 c7                	mov    edi,eax
c0004310:	89 d8                	mov    eax,ebx
c0004312:	e8 12 f8 ff ff       	call   c0003b29 <dir_alloc>
c0004317:	89 c6                	mov    esi,eax
c0004319:	85 c0                	test   eax,eax
c000431b:	0f 85 21 02 00 00    	jne    c0004542 <dir_register+0x278>
c0004321:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004327:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000432a:	c1 e7 05             	shl    edi,0x5
c000432d:	29 f8                	sub    eax,edi
c000432f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004332:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004335:	a8 04                	test   al,0x4
c0004337:	0f 84 91 00 00 00    	je     c00043ce <dir_register+0x104>
c000433d:	83 e0 fb             	and    eax,0xfffffffb
c0004340:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004343:	89 d8                	mov    eax,ebx
c0004345:	e8 25 ec ff ff       	call   c0002f6f <fill_first_frag>
c000434a:	85 c0                	test   eax,eax
c000434c:	0f 85 ee 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004352:	83 c9 ff             	or     ecx,0xffffffff
c0004355:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004358:	89 d8                	mov    eax,ebx
c000435a:	e8 db eb ff ff       	call   c0002f3a <fill_last_frag>
c000435f:	85 c0                	test   eax,eax
c0004361:	0f 85 d9 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004367:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000436b:	74 61                	je     c00043ce <dir_register+0x104>
c000436d:	89 da                	mov    edx,ebx
c000436f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004373:	e8 ea f5 ff ff       	call   c0003962 <load_obj_xdir>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 c0 01 00 00    	jne    c0004540 <dir_register+0x276>
c0004380:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004384:	31 c9                	xor    ecx,ecx
c0004386:	c1 e2 09             	shl    edx,0x9
c0004389:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000438c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000438f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004392:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004395:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004398:	83 c0 38             	add    eax,0x38
c000439b:	e8 1c d9 ff ff       	call   c0001cbc <st_qword>
c00043a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043a6:	83 c0 28             	add    eax,0x28
c00043a9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ac:	e8 0b d9 ff ff       	call   c0001cbc <st_qword>
c00043b1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043b4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043b7:	83 c8 01             	or     eax,0x1
c00043ba:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043c1:	e8 db f7 ff ff       	call   c0003ba1 <store_xdir>
c00043c6:	85 c0                	test   eax,eax
c00043c8:	0f 85 72 01 00 00    	jne    c0004540 <dir_register+0x276>
c00043ce:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043d4:	e8 c1 fb ff ff       	call   c0003f9a <create_xdir>
c00043d9:	e9 64 01 00 00       	jmp    c0004542 <dir_register+0x278>
c00043de:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043e1:	b9 0c 00 00 00       	mov    ecx,0xc
c00043e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ea:	89 c2                	mov    edx,eax
c00043ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043f0:	e8 cd d8 ff ff       	call   c0001cc2 <mem_cpy>
c00043f5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043fa:	74 58                	je     c0004454 <dir_register+0x18a>
c00043fc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004400:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004408:	83 ec 0c             	sub    esp,0xc
c000440b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000440e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004412:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004416:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000441a:	e8 24 dc ff ff       	call   c0002043 <gen_numname>
c000441f:	89 d8                	mov    eax,ebx
c0004421:	e8 de fc ff ff       	call   c0004104 <dir_find>
c0004426:	83 c4 10             	add    esp,0x10
c0004429:	89 c6                	mov    esi,eax
c000442b:	85 c0                	test   eax,eax
c000442d:	75 15                	jne    c0004444 <dir_register+0x17a>
c000442f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004433:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004438:	75 ce                	jne    c0004408 <dir_register+0x13e>
c000443a:	be 07 00 00 00       	mov    esi,0x7
c000443f:	e9 fe 00 00 00       	jmp    c0004542 <dir_register+0x278>
c0004444:	83 f8 04             	cmp    eax,0x4
c0004447:	0f 85 f5 00 00 00    	jne    c0004542 <dir_register+0x278>
c000444d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004451:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004454:	b9 01 00 00 00       	mov    ecx,0x1
c0004459:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000445e:	74 0f                	je     c000446f <dir_register+0x1a5>
c0004460:	b9 0d 00 00 00       	mov    ecx,0xd
c0004465:	8d 47 0c             	lea    eax,[edi+0xc]
c0004468:	31 d2                	xor    edx,edx
c000446a:	f7 f1                	div    ecx
c000446c:	8d 48 01             	lea    ecx,[eax+0x1]
c000446f:	89 ca                	mov    edx,ecx
c0004471:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004475:	89 d8                	mov    eax,ebx
c0004477:	e8 ad f6 ff ff       	call   c0003b29 <dir_alloc>
c000447c:	89 c6                	mov    esi,eax
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 bc 00 00 00    	jne    c0004542 <dir_register+0x278>
c0004486:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000448a:	49                   	dec    ecx
c000448b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000448f:	74 6a                	je     c00044fb <dir_register+0x231>
c0004491:	89 c8                	mov    eax,ecx
c0004493:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004496:	c1 e0 05             	shl    eax,0x5
c0004499:	29 c2                	sub    edx,eax
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 fd ec ff ff       	call   c000319f <dir_sdi>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 96 00 00 00    	jne    c0004542 <dir_register+0x278>
c00044ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044b0:	e8 4a dc ff ff       	call   c00020ff <sum_sfn>
c00044b5:	0f b6 f8             	movzx  edi,al
c00044b8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044bb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044be:	89 e8                	mov    eax,ebp
c00044c0:	e8 5c df ff ff       	call   c0002421 <move_window>
c00044c5:	89 c6                	mov    esi,eax
c00044c7:	85 c0                	test   eax,eax
c00044c9:	75 77                	jne    c0004542 <dir_register+0x278>
c00044cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044d0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044d3:	83 ec 0c             	sub    esp,0xc
c00044d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044d9:	57                   	push   edi
c00044da:	e8 e0 da ff ff       	call   c0001fbf <put_lfn>
c00044df:	31 d2                	xor    edx,edx
c00044e1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044e5:	89 d8                	mov    eax,ebx
c00044e7:	e8 0b f2 ff ff       	call   c00036f7 <dir_next>
c00044ec:	83 c4 10             	add    esp,0x10
c00044ef:	89 c6                	mov    esi,eax
c00044f1:	85 c0                	test   eax,eax
c00044f3:	75 4d                	jne    c0004542 <dir_register+0x278>
c00044f5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044f9:	75 bd                	jne    c00044b8 <dir_register+0x1ee>
c00044fb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fe:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004501:	89 e8                	mov    eax,ebp
c0004503:	e8 19 df ff ff       	call   c0002421 <move_window>
c0004508:	89 c6                	mov    esi,eax
c000450a:	85 c0                	test   eax,eax
c000450c:	75 34                	jne    c0004542 <dir_register+0x278>
c000450e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004511:	b9 20 00 00 00       	mov    ecx,0x20
c0004516:	31 d2                	xor    edx,edx
c0004518:	e8 ba d7 ff ff       	call   c0001cd7 <mem_set>
c000451d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004524:	b9 0b 00 00 00       	mov    ecx,0xb
c0004529:	e8 94 d7 ff ff       	call   c0001cc2 <mem_cpy>
c000452e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004531:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004534:	83 e0 18             	and    eax,0x18
c0004537:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000453a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000453e:	eb 02                	jmp    c0004542 <dir_register+0x278>
c0004540:	89 c6                	mov    esi,eax
c0004542:	83 c4 6c             	add    esp,0x6c
c0004545:	89 f0                	mov    eax,esi
c0004547:	5b                   	pop    ebx
c0004548:	5e                   	pop    esi
c0004549:	5f                   	pop    edi
c000454a:	5d                   	pop    ebp
c000454b:	c3                   	ret    

c000454c <sync_fs>:
c000454c:	56                   	push   esi
c000454d:	53                   	push   ebx
c000454e:	53                   	push   ebx
c000454f:	89 c3                	mov    ebx,eax
c0004551:	e8 37 de ff ff       	call   c000238d <sync_window>
c0004556:	85 c0                	test   eax,eax
c0004558:	0f 85 b1 00 00 00    	jne    c000460f <sync_fs+0xc3>
c000455e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004561:	0f 85 8e 00 00 00    	jne    c00045f5 <sync_fs+0xa9>
c0004567:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000456b:	0f 85 84 00 00 00    	jne    c00045f5 <sync_fs+0xa9>
c0004571:	b9 00 02 00 00       	mov    ecx,0x200
c0004576:	8d 73 54             	lea    esi,[ebx+0x54]
c0004579:	31 d2                	xor    edx,edx
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 55 d7 ff ff       	call   c0001cd7 <mem_set>
c0004582:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004588:	ba 55 aa 00 00       	mov    edx,0xaa55
c000458d:	e8 23 d7 ff ff       	call   c0001cb5 <st_word>
c0004592:	ba 52 52 61 41       	mov    edx,0x41615252
c0004597:	89 f0                	mov    eax,esi
c0004599:	e8 1b d7 ff ff       	call   c0001cb9 <st_dword>
c000459e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045a4:	ba 72 72 41 61       	mov    edx,0x61417272
c00045a9:	e8 0b d7 ff ff       	call   c0001cb9 <st_dword>
c00045ae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045b1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045b7:	e8 fd d6 ff ff       	call   c0001cb9 <st_dword>
c00045bc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045bf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045c5:	e8 ef d6 ff ff       	call   c0001cb9 <st_dword>
c00045ca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045cd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045d0:	83 c0 01             	add    eax,0x1
c00045d3:	83 d2 00             	adc    edx,0x0
c00045d6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045d9:	83 ec 0c             	sub    esp,0xc
c00045dc:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045df:	6a 01                	push   0x1
c00045e1:	52                   	push   edx
c00045e2:	50                   	push   eax
c00045e3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045e7:	56                   	push   esi
c00045e8:	50                   	push   eax
c00045e9:	e8 20 d6 ff ff       	call   c0001c0e <disk_write>
c00045ee:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045f2:	83 c4 20             	add    esp,0x20
c00045f5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045f9:	51                   	push   ecx
c00045fa:	6a 00                	push   0x0
c00045fc:	6a 00                	push   0x0
c00045fe:	50                   	push   eax
c00045ff:	e8 20 d6 ff ff       	call   c0001c24 <disk_ioctl>
c0004604:	83 c4 10             	add    esp,0x10
c0004607:	85 c0                	test   eax,eax
c0004609:	0f 95 c0             	setne  al
c000460c:	0f b6 c0             	movzx  eax,al
c000460f:	5a                   	pop    edx
c0004610:	5b                   	pop    ebx
c0004611:	5e                   	pop    esi
c0004612:	c3                   	ret    

c0004613 <create_partition>:
c0004613:	55                   	push   ebp
c0004614:	0f b6 c0             	movzx  eax,al
c0004617:	57                   	push   edi
c0004618:	56                   	push   esi
c0004619:	53                   	push   ebx
c000461a:	83 ec 60             	sub    esp,0x60
c000461d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004621:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004625:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004629:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000462d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004631:	50                   	push   eax
c0004632:	6a 01                	push   0x1
c0004634:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004638:	e8 e7 d5 ff ff       	call   c0001c24 <disk_ioctl>
c000463d:	83 c4 10             	add    esp,0x10
c0004640:	85 c0                	test   eax,eax
c0004642:	74 0a                	je     c000464e <create_partition+0x3b>
c0004644:	b8 01 00 00 00       	mov    eax,0x1
c0004649:	e9 67 05 00 00       	jmp    c0004bb5 <create_partition+0x5a2>
c000464e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004652:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000465a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000465e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004663:	0f 86 ed 03 00 00    	jbe    c0004a56 <create_partition+0x443>
c0004669:	83 c0 df             	add    eax,0xffffffdf
c000466c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004674:	83 d2 ff             	adc    edx,0xffffffff
c0004677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000467b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000467f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004683:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004687:	83 c0 bd             	add    eax,0xffffffbd
c000468a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004691:	83 d2 ff             	adc    edx,0xffffffff
c0004694:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004698:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000469c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046a4:	be 22 00 00 00       	mov    esi,0x22
c00046a9:	31 ff                	xor    edi,edi
c00046ab:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046b3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046bb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046c7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046cd:	75 0e                	jne    c00046dd <create_partition+0xca>
c00046cf:	b9 00 02 00 00       	mov    ecx,0x200
c00046d4:	31 d2                	xor    edx,edx
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 fa d5 ff ff       	call   c0001cd7 <mem_set>
c00046dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	0f 84 23 01 00 00    	je     c0004815 <create_partition+0x202>
c00046f2:	89 f0                	mov    eax,esi
c00046f4:	89 fa                	mov    edx,edi
c00046f6:	05 ff 07 00 00       	add    eax,0x7ff
c00046fb:	83 d2 00             	adc    edx,0x0
c00046fe:	89 c1                	mov    ecx,eax
c0004700:	89 d7                	mov    edi,edx
c0004702:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004708:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000470c:	89 ce                	mov    esi,ecx
c000470e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004712:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004716:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000471a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000471d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004721:	89 04 24             	mov    DWORD PTR [esp],eax
c0004724:	b8 64 00 00 00       	mov    eax,0x64
c0004729:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000472c:	b8 00 00 00 00       	mov    eax,0x0
c0004731:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004735:	72 41                	jb     c0004778 <create_partition+0x165>
c0004737:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000473b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000473f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004743:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004748:	01 c1                	add    ecx,eax
c000474a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000474e:	f7 24 24             	mul    DWORD PTR [esp]
c0004751:	6a 00                	push   0x0
c0004753:	01 ca                	add    edx,ecx
c0004755:	6a 64                	push   0x64
c0004757:	52                   	push   edx
c0004758:	50                   	push   eax
c0004759:	e8 36 2c 02 00       	call   c0027394 <__udivdi3>
c000475e:	83 c4 10             	add    esp,0x10
c0004761:	05 ff 07 00 00       	add    eax,0x7ff
c0004766:	83 d2 00             	adc    edx,0x0
c0004769:	89 c1                	mov    ecx,eax
c000476b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000476f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004775:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004778:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000477b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000477f:	01 f0                	add    eax,esi
c0004781:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004785:	11 fa                	adc    edx,edi
c0004787:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000478b:	19 d1                	sbb    ecx,edx
c000478d:	73 2e                	jae    c00047bd <create_partition+0x1aa>
c000478f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004793:	89 f8                	mov    eax,edi
c0004795:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000479c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047a0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047a8:	73 6b                	jae    c0004815 <create_partition+0x202>
c00047aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047b2:	29 f0                	sub    eax,esi
c00047b4:	19 fa                	sbb    edx,edi
c00047b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00047b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047c1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047c4:	74 4f                	je     c0004815 <create_partition+0x202>
c00047c6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047c9:	b9 10 00 00 00       	mov    ecx,0x10
c00047ce:	ba 30 9f 02 c0       	mov    edx,0xc0029f30
c00047d3:	e8 ea d4 ff ff       	call   c0001cc2 <mem_cpy>
c00047d8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047dc:	b9 10 00 00 00       	mov    ecx,0x10
c00047e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047e5:	e8 2c db ff ff       	call   c0002316 <make_rand>
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047f2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047f6:	e8 c1 d4 ff ff       	call   c0001cbc <st_qword>
c00047fb:	03 34 24             	add    esi,DWORD PTR [esp]
c00047fe:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004802:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004806:	89 f2                	mov    edx,esi
c0004808:	89 f9                	mov    ecx,edi
c000480a:	83 c2 ff             	add    edx,0xffffffff
c000480d:	83 d1 ff             	adc    ecx,0xffffffff
c0004810:	e8 a7 d4 ff ff       	call   c0001cbc <st_qword>
c0004815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004819:	83 e8 80             	sub    eax,0xffffff80
c000481c:	89 c5                	mov    ebp,eax
c000481e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004822:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004828:	75 6b                	jne    c0004895 <create_partition+0x282>
c000482a:	45                   	inc    ebp
c000482b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000482f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004834:	e8 39 da ff ff       	call   c0002272 <crc32>
c0004839:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000483f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004843:	75 e5                	jne    c000482a <create_partition+0x217>
c0004845:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004849:	31 d2                	xor    edx,edx
c000484b:	83 ec 0c             	sub    esp,0xc
c000484e:	c1 ed 09             	shr    ebp,0x9
c0004851:	6a 01                	push   0x1
c0004853:	8d 45 02             	lea    eax,[ebp+0x2]
c0004856:	52                   	push   edx
c0004857:	50                   	push   eax
c0004858:	53                   	push   ebx
c0004859:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000485d:	e8 ac d3 ff ff       	call   c0001c0e <disk_write>
c0004862:	83 c4 20             	add    esp,0x20
c0004865:	85 c0                	test   eax,eax
c0004867:	0f 85 d7 fd ff ff    	jne    c0004644 <create_partition+0x31>
c000486d:	83 ec 0c             	sub    esp,0xc
c0004870:	31 d2                	xor    edx,edx
c0004872:	6a 01                	push   0x1
c0004874:	89 e8                	mov    eax,ebp
c0004876:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000487a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000487e:	52                   	push   edx
c000487f:	50                   	push   eax
c0004880:	53                   	push   ebx
c0004881:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004885:	e8 84 d3 ff ff       	call   c0001c0e <disk_write>
c000488a:	83 c4 20             	add    esp,0x20
c000488d:	85 c0                	test   eax,eax
c000488f:	0f 85 af fd ff ff    	jne    c0004644 <create_partition+0x31>
c0004895:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004899:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000489d:	3d 00 40 00 00       	cmp    eax,0x4000
c00048a2:	74 0d                	je     c00048b1 <create_partition+0x29e>
c00048a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ac:	e9 12 fe ff ff       	jmp    c00046c3 <create_partition+0xb0>
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	b9 00 02 00 00       	mov    ecx,0x200
c00048b8:	89 d8                	mov    eax,ebx
c00048ba:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048bd:	e8 15 d4 ff ff       	call   c0001cd7 <mem_set>
c00048c2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048c5:	b9 10 00 00 00       	mov    ecx,0x10
c00048ca:	ba 20 9e 02 c0       	mov    edx,0xc0029e20
c00048cf:	89 d8                	mov    eax,ebx
c00048d1:	e8 ec d3 ff ff       	call   c0001cc2 <mem_cpy>
c00048d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048da:	8d 43 58             	lea    eax,[ebx+0x58]
c00048dd:	f7 d2                	not    edx
c00048df:	e8 d5 d3 ff ff       	call   c0001cb9 <st_dword>
c00048e4:	8d 43 18             	lea    eax,[ebx+0x18]
c00048e7:	31 c9                	xor    ecx,ecx
c00048e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00048ec:	ba 01 00 00 00       	mov    edx,0x1
c00048f1:	e8 c6 d3 ff ff       	call   c0001cbc <st_qword>
c00048f6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048fa:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048fe:	83 c2 ff             	add    edx,0xffffffff
c0004901:	89 e8                	mov    eax,ebp
c0004903:	83 d1 ff             	adc    ecx,0xffffffff
c0004906:	e8 b1 d3 ff ff       	call   c0001cbc <st_qword>
c000490b:	31 c9                	xor    ecx,ecx
c000490d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004910:	ba 22 00 00 00       	mov    edx,0x22
c0004915:	e8 a2 d3 ff ff       	call   c0001cbc <st_qword>
c000491a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000491e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004922:	83 c2 de             	add    edx,0xffffffde
c0004925:	8d 43 30             	lea    eax,[ebx+0x30]
c0004928:	83 d1 ff             	adc    ecx,0xffffffff
c000492b:	31 f6                	xor    esi,esi
c000492d:	e8 8a d3 ff ff       	call   c0001cbc <st_qword>
c0004932:	8d 43 54             	lea    eax,[ebx+0x54]
c0004935:	ba 80 00 00 00       	mov    edx,0x80
c000493a:	e8 7a d3 ff ff       	call   c0001cb9 <st_dword>
c000493f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004942:	ba 80 00 00 00       	mov    edx,0x80
c0004947:	e8 6d d3 ff ff       	call   c0001cb9 <st_dword>
c000494c:	ba 02 00 00 00       	mov    edx,0x2
c0004951:	89 f8                	mov    eax,edi
c0004953:	e8 61 d3 ff ff       	call   c0001cb9 <st_dword>
c0004958:	8d 53 38             	lea    edx,[ebx+0x38]
c000495b:	b9 10 00 00 00       	mov    ecx,0x10
c0004960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004964:	e8 ad d9 ff ff       	call   c0002316 <make_rand>
c0004969:	83 c8 ff             	or     eax,0xffffffff
c000496c:	46                   	inc    esi
c000496d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004972:	e8 fb d8 ff ff       	call   c0002272 <crc32>
c0004977:	83 fe 5c             	cmp    esi,0x5c
c000497a:	75 f0                	jne    c000496c <create_partition+0x359>
c000497c:	f7 d0                	not    eax
c000497e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004981:	89 c2                	mov    edx,eax
c0004983:	89 f0                	mov    eax,esi
c0004985:	e8 2f d3 ff ff       	call   c0001cb9 <st_dword>
c000498a:	83 ec 0c             	sub    esp,0xc
c000498d:	6a 01                	push   0x1
c000498f:	6a 00                	push   0x0
c0004991:	6a 01                	push   0x1
c0004993:	53                   	push   ebx
c0004994:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004998:	e8 71 d2 ff ff       	call   c0001c0e <disk_write>
c000499d:	83 c4 20             	add    esp,0x20
c00049a0:	85 c0                	test   eax,eax
c00049a2:	0f 85 9c fc ff ff    	jne    c0004644 <create_partition+0x31>
c00049a8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ac:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049b0:	83 c2 ff             	add    edx,0xffffffff
c00049b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b6:	83 d1 ff             	adc    ecx,0xffffffff
c00049b9:	e8 fe d2 ff ff       	call   c0001cbc <st_qword>
c00049be:	ba 01 00 00 00       	mov    edx,0x1
c00049c3:	31 c9                	xor    ecx,ecx
c00049c5:	89 e8                	mov    eax,ebp
c00049c7:	e8 f0 d2 ff ff       	call   c0001cbc <st_qword>
c00049cc:	89 f8                	mov    eax,edi
c00049ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049d6:	31 ff                	xor    edi,edi
c00049d8:	e8 df d2 ff ff       	call   c0001cbc <st_qword>
c00049dd:	89 f0                	mov    eax,esi
c00049df:	31 d2                	xor    edx,edx
c00049e1:	e8 d3 d2 ff ff       	call   c0001cb9 <st_dword>
c00049e6:	83 c8 ff             	or     eax,0xffffffff
c00049e9:	47                   	inc    edi
c00049ea:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049ef:	e8 7e d8 ff ff       	call   c0002272 <crc32>
c00049f4:	83 ff 5c             	cmp    edi,0x5c
c00049f7:	75 f0                	jne    c00049e9 <create_partition+0x3d6>
c00049f9:	f7 d0                	not    eax
c00049fb:	89 c2                	mov    edx,eax
c00049fd:	89 f0                	mov    eax,esi
c00049ff:	e8 b5 d2 ff ff       	call   c0001cb9 <st_dword>
c0004a04:	83 ec 0c             	sub    esp,0xc
c0004a07:	6a 01                	push   0x1
c0004a09:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a0d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a11:	83 c0 ff             	add    eax,0xffffffff
c0004a14:	83 d2 ff             	adc    edx,0xffffffff
c0004a17:	52                   	push   edx
c0004a18:	50                   	push   eax
c0004a19:	53                   	push   ebx
c0004a1a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a1e:	e8 eb d1 ff ff       	call   c0001c0e <disk_write>
c0004a23:	83 c4 20             	add    esp,0x20
c0004a26:	85 c0                	test   eax,eax
c0004a28:	0f 85 16 fc ff ff    	jne    c0004644 <create_partition+0x31>
c0004a2e:	31 d2                	xor    edx,edx
c0004a30:	89 d8                	mov    eax,ebx
c0004a32:	b9 00 02 00 00       	mov    ecx,0x200
c0004a37:	e8 9b d2 ff ff       	call   c0001cd7 <mem_set>
c0004a3c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a42:	b9 10 00 00 00       	mov    ecx,0x10
c0004a47:	ba 30 9e 02 c0       	mov    edx,0xc0029e30
c0004a4c:	e8 71 d2 ff ff       	call   c0001cc2 <mem_cpy>
c0004a51:	e9 21 01 00 00       	jmp    c0004b77 <create_partition+0x564>
c0004a56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a5a:	b9 05 00 00 00       	mov    ecx,0x5
c0004a5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a62:	bf 08 00 00 00       	mov    edi,0x8
c0004a67:	89 f8                	mov    eax,edi
c0004a69:	31 d2                	xor    edx,edx
c0004a6b:	0f b6 f0             	movzx  esi,al
c0004a6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a71:	f7 f6                	div    esi
c0004a73:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a78:	76 0a                	jbe    c0004a84 <create_partition+0x471>
c0004a7a:	d1 e7                	shl    edi,1
c0004a7c:	49                   	dec    ecx
c0004a7d:	75 e8                	jne    c0004a67 <create_partition+0x454>
c0004a7f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a84:	b9 00 02 00 00       	mov    ecx,0x200
c0004a89:	31 d2                	xor    edx,edx
c0004a8b:	89 d8                	mov    eax,ebx
c0004a8d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a93:	e8 3f d2 ff ff       	call   c0001cd7 <mem_set>
c0004a98:	b9 64 00 00 00       	mov    ecx,0x64
c0004a9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004aa0:	31 d2                	xor    edx,edx
c0004aa2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aaa:	f7 f1                	div    ecx
c0004aac:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ab1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ab5:	89 f8                	mov    eax,edi
c0004ab7:	0f b6 c0             	movzx  eax,al
c0004aba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004abe:	e9 80 00 00 00       	jmp    c0004b43 <create_partition+0x530>
c0004ac3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac6:	29 cf                	sub    edi,ecx
c0004ac8:	89 ca                	mov    edx,ecx
c0004aca:	89 f0                	mov    eax,esi
c0004acc:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ad1:	e8 e3 d1 ff ff       	call   c0001cb9 <st_dword>
c0004ad6:	8d 46 04             	lea    eax,[esi+0x4]
c0004ad9:	89 fa                	mov    edx,edi
c0004adb:	83 c6 10             	add    esi,0x10
c0004ade:	e8 d6 d1 ff ff       	call   c0001cb9 <st_dword>
c0004ae3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004ae7:	31 d2                	xor    edx,edx
c0004ae9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004aec:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004af0:	89 c8                	mov    eax,ecx
c0004af2:	01 f9                	add    ecx,edi
c0004af4:	f7 f5                	div    ebp
c0004af6:	89 d5                	mov    ebp,edx
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	45                   	inc    ebp
c0004afb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004aff:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b02:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b05:	89 c2                	mov    edx,eax
c0004b07:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b0a:	c1 ea 02             	shr    edx,0x2
c0004b0d:	83 e2 c0             	and    edx,0xffffffc0
c0004b10:	09 ea                	or     edx,ebp
c0004b12:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b17:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b1a:	31 d2                	xor    edx,edx
c0004b1c:	f7 f5                	div    ebp
c0004b1e:	89 d7                	mov    edi,edx
c0004b20:	31 d2                	xor    edx,edx
c0004b22:	47                   	inc    edi
c0004b23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b27:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b2a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b2d:	89 c5                	mov    ebp,eax
c0004b2f:	c1 ed 02             	shr    ebp,0x2
c0004b32:	83 e5 c0             	and    ebp,0xffffffc0
c0004b35:	09 ef                	or     edi,ebp
c0004b37:	89 fa                	mov    edx,edi
c0004b39:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b3c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b41:	74 34                	je     c0004b77 <create_partition+0x564>
c0004b43:	85 c9                	test   ecx,ecx
c0004b45:	74 30                	je     c0004b77 <create_partition+0x564>
c0004b47:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b4a:	76 2b                	jbe    c0004b77 <create_partition+0x564>
c0004b4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b50:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b54:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b57:	83 ff 64             	cmp    edi,0x64
c0004b5a:	76 4b                	jbe    c0004ba7 <create_partition+0x594>
c0004b5c:	89 f8                	mov    eax,edi
c0004b5e:	01 c8                	add    eax,ecx
c0004b60:	0f 82 5d ff ff ff    	jb     c0004ac3 <create_partition+0x4b0>
c0004b66:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b69:	0f 87 54 ff ff ff    	ja     c0004ac3 <create_partition+0x4b0>
c0004b6f:	85 ff                	test   edi,edi
c0004b71:	0f 85 51 ff ff ff    	jne    c0004ac8 <create_partition+0x4b5>
c0004b77:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b7d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b82:	e8 2e d1 ff ff       	call   c0001cb5 <st_word>
c0004b87:	83 ec 0c             	sub    esp,0xc
c0004b8a:	6a 01                	push   0x1
c0004b8c:	6a 00                	push   0x0
c0004b8e:	6a 00                	push   0x0
c0004b90:	53                   	push   ebx
c0004b91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b95:	e8 74 d0 ff ff       	call   c0001c0e <disk_write>
c0004b9a:	83 c4 20             	add    esp,0x20
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	0f 95 c0             	setne  al
c0004ba2:	0f b6 c0             	movzx  eax,al
c0004ba5:	eb 0e                	jmp    c0004bb5 <create_partition+0x5a2>
c0004ba7:	74 07                	je     c0004bb0 <create_partition+0x59d>
c0004ba9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bae:	eb ac                	jmp    c0004b5c <create_partition+0x549>
c0004bb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bb3:	eb a7                	jmp    c0004b5c <create_partition+0x549>
c0004bb5:	83 c4 5c             	add    esp,0x5c
c0004bb8:	5b                   	pop    ebx
c0004bb9:	5e                   	pop    esi
c0004bba:	5f                   	pop    edi
c0004bbb:	5d                   	pop    ebp
c0004bbc:	c3                   	ret    

c0004bbd <get_fileinfo>:
c0004bbd:	55                   	push   ebp
c0004bbe:	57                   	push   edi
c0004bbf:	56                   	push   esi
c0004bc0:	53                   	push   ebx
c0004bc1:	83 ec 1c             	sub    esp,0x1c
c0004bc4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bc6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bce:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bd1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bd4:	0f 84 dc 01 00 00    	je     c0004db6 <get_fileinfo+0x1f9>
c0004bda:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bdd:	75 0f                	jne    c0004bee <get_fileinfo+0x31>
c0004bdf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004be2:	83 c4 1c             	add    esp,0x1c
c0004be5:	5b                   	pop    ebx
c0004be6:	5e                   	pop    esi
c0004be7:	5f                   	pop    edi
c0004be8:	5d                   	pop    ebp
c0004be9:	e9 58 d5 ff ff       	jmp    c0002146 <get_xfileinfo>
c0004bee:	89 d3                	mov    ebx,edx
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bf6:	74 6a                	je     c0004c62 <get_fileinfo+0xa5>
c0004bf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c00:	31 ed                	xor    ebp,ebp
c0004c02:	31 ff                	xor    edi,edi
c0004c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c0f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c13:	66 85 d2             	test   dx,dx
c0004c16:	74 3e                	je     c0004c56 <get_fileinfo+0x99>
c0004c18:	66 85 ed             	test   bp,bp
c0004c1b:	75 0c                	jne    c0004c29 <get_fileinfo+0x6c>
c0004c1d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c23:	66 3d ff 07          	cmp    ax,0x7ff
c0004c27:	76 22                	jbe    c0004c4b <get_fileinfo+0x8e>
c0004c29:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c2e:	89 e8                	mov    eax,ebp
c0004c30:	29 f9                	sub    ecx,edi
c0004c32:	c1 e0 10             	shl    eax,0x10
c0004c35:	09 d0                	or     eax,edx
c0004c37:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c3b:	e8 a3 d1 ff ff       	call   c0001de3 <put_utf>
c0004c40:	84 c0                	test   al,al
c0004c42:	74 10                	je     c0004c54 <get_fileinfo+0x97>
c0004c44:	0f b6 c0             	movzx  eax,al
c0004c47:	31 d2                	xor    edx,edx
c0004c49:	01 c7                	add    edi,eax
c0004c4b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c50:	89 d5                	mov    ebp,edx
c0004c52:	eb b0                	jmp    c0004c04 <get_fileinfo+0x47>
c0004c54:	31 ff                	xor    edi,edi
c0004c56:	66 85 ed             	test   bp,bp
c0004c59:	74 02                	je     c0004c5d <get_fileinfo+0xa0>
c0004c5b:	31 ff                	xor    edi,edi
c0004c5d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c62:	31 ff                	xor    edi,edi
c0004c64:	31 c9                	xor    ecx,ecx
c0004c66:	83 f9 0a             	cmp    ecx,0xa
c0004c69:	0f 87 ad 00 00 00    	ja     c0004d1c <get_fileinfo+0x15f>
c0004c6f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c72:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c75:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c79:	66 83 fa 20          	cmp    dx,0x20
c0004c7d:	0f 84 92 00 00 00    	je     c0004d15 <get_fileinfo+0x158>
c0004c83:	66 83 fa 05          	cmp    dx,0x5
c0004c87:	75 05                	jne    c0004c8e <get_fileinfo+0xd1>
c0004c89:	ba e5 00 00 00       	mov    edx,0xe5
c0004c8e:	83 ff 0b             	cmp    edi,0xb
c0004c91:	77 0b                	ja     c0004c9e <get_fileinfo+0xe1>
c0004c93:	83 fd 09             	cmp    ebp,0x9
c0004c96:	75 06                	jne    c0004c9e <get_fileinfo+0xe1>
c0004c98:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c9d:	47                   	inc    edi
c0004c9e:	0f b7 c2             	movzx  eax,dx
c0004ca1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ca5:	e8 6d d0 ff ff       	call   c0001d17 <dbc_1st>
c0004caa:	85 c0                	test   eax,eax
c0004cac:	74 2f                	je     c0004cdd <get_fileinfo+0x120>
c0004cae:	83 fd 08             	cmp    ebp,0x8
c0004cb1:	74 2a                	je     c0004cdd <get_fileinfo+0x120>
c0004cb3:	83 fd 0b             	cmp    ebp,0xb
c0004cb6:	74 25                	je     c0004cdd <get_fileinfo+0x120>
c0004cb8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cbb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cbf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004cc3:	e8 52 d0 ff ff       	call   c0001d1a <dbc_2nd>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 11                	je     c0004cdd <get_fileinfo+0x120>
c0004ccc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cd5:	c1 e2 08             	shl    edx,0x8
c0004cd8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cdb:	09 c2                	or     edx,eax
c0004cdd:	0f b7 d2             	movzx  edx,dx
c0004ce0:	50                   	push   eax
c0004ce1:	50                   	push   eax
c0004ce2:	68 b5 01 00 00       	push   0x1b5
c0004ce7:	52                   	push   edx
c0004ce8:	e8 46 38 00 00       	call   c0008533 <ff_oem2uni>
c0004ced:	83 c4 10             	add    esp,0x10
c0004cf0:	66 85 c0             	test   ax,ax
c0004cf3:	75 04                	jne    c0004cf9 <get_fileinfo+0x13c>
c0004cf5:	31 ff                	xor    edi,edi
c0004cf7:	eb 23                	jmp    c0004d1c <get_fileinfo+0x15f>
c0004cf9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004cfe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d02:	29 f9                	sub    ecx,edi
c0004d04:	0f b7 c0             	movzx  eax,ax
c0004d07:	e8 d7 d0 ff ff       	call   c0001de3 <put_utf>
c0004d0c:	84 c0                	test   al,al
c0004d0e:	74 e5                	je     c0004cf5 <get_fileinfo+0x138>
c0004d10:	0f b6 c0             	movzx  eax,al
c0004d13:	01 c7                	add    edi,eax
c0004d15:	89 e9                	mov    ecx,ebp
c0004d17:	e9 4a ff ff ff       	jmp    c0004c66 <get_fileinfo+0xa9>
c0004d1c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d21:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d25:	75 54                	jne    c0004d7b <get_fileinfo+0x1be>
c0004d27:	85 ff                	test   edi,edi
c0004d29:	75 0b                	jne    c0004d36 <get_fileinfo+0x179>
c0004d2b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d2f:	ba 01 00 00 00       	mov    edx,0x1
c0004d34:	eb 33                	jmp    c0004d69 <get_fileinfo+0x1ac>
c0004d36:	b1 08                	mov    cl,0x8
c0004d38:	31 d2                	xor    edx,edx
c0004d3a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d40:	84 c0                	test   al,al
c0004d42:	74 25                	je     c0004d69 <get_fileinfo+0x1ac>
c0004d44:	66 83 f8 2e          	cmp    ax,0x2e
c0004d48:	74 16                	je     c0004d60 <get_fileinfo+0x1a3>
c0004d4a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d4d:	66 83 ff 19          	cmp    di,0x19
c0004d51:	77 0f                	ja     c0004d62 <get_fileinfo+0x1a5>
c0004d53:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d56:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d59:	74 07                	je     c0004d62 <get_fileinfo+0x1a5>
c0004d5b:	83 c0 20             	add    eax,0x20
c0004d5e:	eb 02                	jmp    c0004d62 <get_fileinfo+0x1a5>
c0004d60:	b1 10                	mov    cl,0x10
c0004d62:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d66:	42                   	inc    edx
c0004d67:	eb d1                	jmp    c0004d3a <get_fileinfo+0x17d>
c0004d69:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d71:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d75:	75 04                	jne    c0004d7b <get_fileinfo+0x1be>
c0004d77:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d7b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d81:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d84:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d87:	83 c0 1c             	add    eax,0x1c
c0004d8a:	e8 c1 ce ff ff       	call   c0001c50 <ld_dword>
c0004d8f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d96:	89 03                	mov    DWORD PTR [ebx],eax
c0004d98:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9b:	83 c0 16             	add    eax,0x16
c0004d9e:	e8 a0 ce ff ff       	call   c0001c43 <ld_word>
c0004da3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004da7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004daa:	83 c0 18             	add    eax,0x18
c0004dad:	e8 91 ce ff ff       	call   c0001c43 <ld_word>
c0004db2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004db6:	83 c4 1c             	add    esp,0x1c
c0004db9:	5b                   	pop    ebx
c0004dba:	5e                   	pop    esi
c0004dbb:	5f                   	pop    edi
c0004dbc:	5d                   	pop    ebp
c0004dbd:	c3                   	ret    

c0004dbe <ld_clust.isra.0>:
c0004dbe:	56                   	push   esi
c0004dbf:	89 c6                	mov    esi,eax
c0004dc1:	53                   	push   ebx
c0004dc2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004dc5:	89 d3                	mov    ebx,edx
c0004dc7:	e8 77 ce ff ff       	call   c0001c43 <ld_word>
c0004dcc:	0f b7 c8             	movzx  ecx,ax
c0004dcf:	89 f0                	mov    eax,esi
c0004dd1:	3c 03                	cmp    al,0x3
c0004dd3:	75 0d                	jne    c0004de2 <ld_clust.isra.0+0x24>
c0004dd5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dd8:	e8 66 ce ff ff       	call   c0001c43 <ld_word>
c0004ddd:	c1 e0 10             	shl    eax,0x10
c0004de0:	09 c1                	or     ecx,eax
c0004de2:	89 c8                	mov    eax,ecx
c0004de4:	5b                   	pop    ebx
c0004de5:	5e                   	pop    esi
c0004de6:	c3                   	ret    

c0004de7 <st_clust.isra.1>:
c0004de7:	56                   	push   esi
c0004de8:	89 c6                	mov    esi,eax
c0004dea:	53                   	push   ebx
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	0f b7 d1             	movzx  edx,cx
c0004df0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004df3:	e8 bd ce ff ff       	call   c0001cb5 <st_word>
c0004df8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004dfb:	75 0f                	jne    c0004e0c <st_clust.isra.1+0x25>
c0004dfd:	c1 e9 10             	shr    ecx,0x10
c0004e00:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e03:	89 ca                	mov    edx,ecx
c0004e05:	5b                   	pop    ebx
c0004e06:	5e                   	pop    esi
c0004e07:	e9 a9 ce ff ff       	jmp    c0001cb5 <st_word>
c0004e0c:	5b                   	pop    ebx
c0004e0d:	5e                   	pop    esi
c0004e0e:	c3                   	ret    

c0004e0f <init_alloc_info.isra.2>:
c0004e0f:	56                   	push   esi
c0004e10:	53                   	push   ebx
c0004e11:	89 c6                	mov    esi,eax
c0004e13:	89 d3                	mov    ebx,edx
c0004e15:	51                   	push   ecx
c0004e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e18:	83 c0 34             	add    eax,0x34
c0004e1b:	e8 30 ce ff ff       	call   c0001c50 <ld_dword>
c0004e20:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e23:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e25:	83 c0 38             	add    eax,0x38
c0004e28:	e8 3b ce ff ff       	call   c0001c68 <ld_qword>
c0004e2d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e30:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e35:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e38:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e3f:	83 e0 02             	and    eax,0x2
c0004e42:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e45:	5b                   	pop    ebx
c0004e46:	5b                   	pop    ebx
c0004e47:	5e                   	pop    esi
c0004e48:	c3                   	ret    

c0004e49 <follow_path>:
c0004e49:	56                   	push   esi
c0004e4a:	53                   	push   ebx
c0004e4b:	89 c3                	mov    ebx,eax
c0004e4d:	83 ec 14             	sub    esp,0x14
c0004e50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e54:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e5c:	80 fa 5c             	cmp    dl,0x5c
c0004e5f:	75 07                	jne    c0004e68 <follow_path+0x1f>
c0004e61:	40                   	inc    eax
c0004e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e66:	eb ee                	jmp    c0004e56 <follow_path+0xd>
c0004e68:	80 fa 2f             	cmp    dl,0x2f
c0004e6b:	74 f4                	je     c0004e61 <follow_path+0x18>
c0004e6d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e74:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e7b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e7e:	77 52                	ja     c0004ed2 <follow_path+0x89>
c0004e80:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e84:	31 d2                	xor    edx,edx
c0004e86:	89 d8                	mov    eax,ebx
c0004e88:	e8 12 e3 ff ff       	call   c000319f <dir_sdi>
c0004e8d:	eb 7c                	jmp    c0004f0b <follow_path+0xc2>
c0004e8f:	89 d8                	mov    eax,ebx
c0004e91:	e8 6e f2 ff ff       	call   c0004104 <dir_find>
c0004e96:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e99:	85 c0                	test   eax,eax
c0004e9b:	75 46                	jne    c0004ee3 <follow_path+0x9a>
c0004e9d:	80 e2 04             	and    dl,0x4
c0004ea0:	75 69                	jne    c0004f0b <follow_path+0xc2>
c0004ea2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ea6:	74 5e                	je     c0004f06 <follow_path+0xbd>
c0004ea8:	8a 06                	mov    al,BYTE PTR [esi]
c0004eaa:	3c 04                	cmp    al,0x4
c0004eac:	75 41                	jne    c0004eef <follow_path+0xa6>
c0004eae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004eb1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004eb5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004eb8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ebb:	30 c0                	xor    al,al
c0004ebd:	09 d0                	or     eax,edx
c0004ebf:	89 da                	mov    edx,ebx
c0004ec1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ec4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ec7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eca:	8d 46 10             	lea    eax,[esi+0x10]
c0004ecd:	e8 3d ff ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c0004ed2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ed6:	89 d8                	mov    eax,ebx
c0004ed8:	e8 a9 ed ff ff       	call   c0003c86 <create_name>
c0004edd:	85 c0                	test   eax,eax
c0004edf:	74 ae                	je     c0004e8f <follow_path+0x46>
c0004ee1:	eb 28                	jmp    c0004f0b <follow_path+0xc2>
c0004ee3:	83 f8 04             	cmp    eax,0x4
c0004ee6:	75 23                	jne    c0004f0b <follow_path+0xc2>
c0004ee8:	80 e2 04             	and    dl,0x4
c0004eeb:	74 19                	je     c0004f06 <follow_path+0xbd>
c0004eed:	eb 1c                	jmp    c0004f0b <follow_path+0xc2>
c0004eef:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ef2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ef8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004efc:	e8 bd fe ff ff       	call   c0004dbe <ld_clust.isra.0>
c0004f01:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f04:	eb cc                	jmp    c0004ed2 <follow_path+0x89>
c0004f06:	b8 05 00 00 00       	mov    eax,0x5
c0004f0b:	83 c4 14             	add    esp,0x14
c0004f0e:	5b                   	pop    ebx
c0004f0f:	5e                   	pop    esi
c0004f10:	c3                   	ret    

c0004f11 <f_mount>:
c0004f11:	53                   	push   ebx
c0004f12:	83 ec 18             	sub    esp,0x18
c0004f15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f19:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f25:	e8 fb d2 ff ff       	call   c0002225 <get_ldnumber>
c0004f2a:	89 c2                	mov    edx,eax
c0004f2c:	b8 0b 00 00 00       	mov    eax,0xb
c0004f31:	85 d2                	test   edx,edx
c0004f33:	78 39                	js     c0004f6e <f_mount+0x5d>
c0004f35:	8b 04 95 40 f0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0fc0]
c0004f3c:	85 c0                	test   eax,eax
c0004f3e:	74 03                	je     c0004f43 <f_mount+0x32>
c0004f40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 c0                	test   eax,eax
c0004f49:	74 03                	je     c0004f4e <f_mount+0x3d>
c0004f4b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f52:	89 04 95 40 f0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0fc0],eax
c0004f59:	31 c0                	xor    eax,eax
c0004f5b:	84 db                	test   bl,bl
c0004f5d:	74 0f                	je     c0004f6e <f_mount+0x5d>
c0004f5f:	31 c9                	xor    ecx,ecx
c0004f61:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f65:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f69:	e8 65 d7 ff ff       	call   c00026d3 <mount_volume>
c0004f6e:	83 c4 18             	add    esp,0x18
c0004f71:	5b                   	pop    ebx
c0004f72:	c3                   	ret    

c0004f73 <f_open>:
c0004f73:	55                   	push   ebp
c0004f74:	bd 09 00 00 00       	mov    ebp,0x9
c0004f79:	57                   	push   edi
c0004f7a:	56                   	push   esi
c0004f7b:	53                   	push   ebx
c0004f7c:	83 ec 7c             	sub    esp,0x7c
c0004f7f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f86:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f8d:	85 db                	test   ebx,ebx
c0004f8f:	0f 84 10 04 00 00    	je     c00053a5 <f_open+0x432>
c0004f95:	89 fe                	mov    esi,edi
c0004f97:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f9b:	83 e6 3f             	and    esi,0x3f
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	0f b6 c8             	movzx  ecx,al
c0004fa3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004faa:	e8 24 d7 ff ff       	call   c00026d3 <mount_volume>
c0004faf:	89 c5                	mov    ebp,eax
c0004fb1:	85 c0                	test   eax,eax
c0004fb3:	0f 85 e6 03 00 00    	jne    c000539f <f_open+0x42c>
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	bd 11 00 00 00       	mov    ebp,0x11
c0004fc2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fc6:	83 ec 0c             	sub    esp,0xc
c0004fc9:	68 60 04 00 00       	push   0x460
c0004fce:	e8 a3 34 00 00       	call   c0008476 <ff_memalloc>
c0004fd3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fd7:	83 c4 10             	add    esp,0x10
c0004fda:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fdf:	0f 84 c0 03 00 00    	je     c00053a5 <f_open+0x432>
c0004fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fed:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ff3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004ff6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004ff9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005000:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005004:	e8 40 fe ff ff       	call   c0004e49 <follow_path>
c0005009:	89 c5                	mov    ebp,eax
c000500b:	85 c0                	test   eax,eax
c000500d:	75 0c                	jne    c000501b <f_open+0xa8>
c000500f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005014:	79 05                	jns    c000501b <f_open+0xa8>
c0005016:	bd 06 00 00 00       	mov    ebp,0x6
c000501b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005021:	0f 84 84 01 00 00    	je     c00051ab <f_open+0x238>
c0005027:	85 ed                	test   ebp,ebp
c0005029:	74 20                	je     c000504b <f_open+0xd8>
c000502b:	83 fd 04             	cmp    ebp,0x4
c000502e:	0f 85 58 03 00 00    	jne    c000538c <f_open+0x419>
c0005034:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005038:	83 ce 08             	or     esi,0x8
c000503b:	e8 8a f2 ff ff       	call   c00042ca <dir_register>
c0005040:	89 c5                	mov    ebp,eax
c0005042:	85 c0                	test   eax,eax
c0005044:	74 2f                	je     c0005075 <f_open+0x102>
c0005046:	e9 41 03 00 00       	jmp    c000538c <f_open+0x419>
c000504b:	bd 07 00 00 00       	mov    ebp,0x7
c0005050:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005055:	0f 85 31 03 00 00    	jne    c000538c <f_open+0x419>
c000505b:	bd 08 00 00 00       	mov    ebp,0x8
c0005060:	f7 c7 04 00 00 00    	test   edi,0x4
c0005066:	0f 85 20 03 00 00    	jne    c000538c <f_open+0x419>
c000506c:	83 e7 08             	and    edi,0x8
c000506f:	0f 84 65 01 00 00    	je     c00051da <f_open+0x267>
c0005075:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005079:	8a 02                	mov    al,BYTE PTR [edx]
c000507b:	3c 04                	cmp    al,0x4
c000507d:	0f 85 97 00 00 00    	jne    c000511a <f_open+0x1a7>
c0005083:	8d 42 10             	lea    eax,[edx+0x10]
c0005086:	89 13                	mov    DWORD PTR [ebx],edx
c0005088:	89 da                	mov    edx,ebx
c000508a:	e8 80 fd ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000508f:	31 d2                	xor    edx,edx
c0005091:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005095:	b9 1e 00 00 00       	mov    ecx,0x1e
c000509a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000509d:	83 c0 02             	add    eax,0x2
c00050a0:	e8 32 cc ff ff       	call   c0001cd7 <mem_set>
c00050a5:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050aa:	31 d2                	xor    edx,edx
c00050ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b3:	83 c0 26             	add    eax,0x26
c00050b6:	e8 1c cc ff ff       	call   c0001cd7 <mem_set>
c00050bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050c2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00050cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ce:	83 c0 08             	add    eax,0x8
c00050d1:	e8 e3 cb ff ff       	call   c0001cb9 <st_dword>
c00050d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050dd:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050e5:	e8 b7 ea ff ff       	call   c0003ba1 <store_xdir>
c00050ea:	89 c5                	mov    ebp,eax
c00050ec:	85 c0                	test   eax,eax
c00050ee:	0f 85 98 02 00 00    	jne    c000538c <f_open+0x419>
c00050f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f7:	85 d2                	test   edx,edx
c00050f9:	0f 84 db 00 00 00    	je     c00051da <f_open+0x267>
c00050ff:	31 c9                	xor    ecx,ecx
c0005101:	89 d8                	mov    eax,ebx
c0005103:	e8 8e e3 ff ff       	call   c0003496 <remove_chain>
c0005108:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000510c:	89 c5                	mov    ebp,eax
c000510e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005111:	48                   	dec    eax
c0005112:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005115:	e9 b8 00 00 00       	jmp    c00051d2 <f_open+0x25f>
c000511a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000511e:	89 ea                	mov    edx,ebp
c0005120:	e8 99 fc ff ff       	call   c0004dbe <ld_clust.isra.0>
c0005125:	ba 00 00 21 50       	mov    edx,0x50210000
c000512a:	89 c7                	mov    edi,eax
c000512c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000512f:	e8 85 cb ff ff       	call   c0001cb9 <st_dword>
c0005134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005138:	31 c9                	xor    ecx,ecx
c000513a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005142:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005146:	e8 9c fc ff ff       	call   c0004de7 <st_clust.isra.1>
c000514b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000514f:	31 d2                	xor    edx,edx
c0005151:	83 c0 1c             	add    eax,0x1c
c0005154:	e8 60 cb ff ff       	call   c0001cb9 <st_dword>
c0005159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515d:	85 ff                	test   edi,edi
c000515f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005163:	74 75                	je     c00051da <f_open+0x267>
c0005165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005169:	31 c9                	xor    ecx,ecx
c000516b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000516e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005171:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005179:	89 fa                	mov    edx,edi
c000517b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000517f:	e8 12 e3 ff ff       	call   c0003496 <remove_chain>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	85 c0                	test   eax,eax
c0005188:	0f 85 fe 01 00 00    	jne    c000538c <f_open+0x419>
c000518e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000519a:	4f                   	dec    edi
c000519b:	e8 81 d2 ff ff       	call   c0002421 <move_window>
c00051a0:	89 c5                	mov    ebp,eax
c00051a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051a9:	eb 27                	jmp    c00051d2 <f_open+0x25f>
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 d9 01 00 00    	jne    c000538c <f_open+0x419>
c00051b3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051b7:	bd 04 00 00 00       	mov    ebp,0x4
c00051bc:	a8 10                	test   al,0x10
c00051be:	0f 85 c8 01 00 00    	jne    c000538c <f_open+0x419>
c00051c4:	83 e7 02             	and    edi,0x2
c00051c7:	74 11                	je     c00051da <f_open+0x267>
c00051c9:	bd 07 00 00 00       	mov    ebp,0x7
c00051ce:	a8 01                	test   al,0x1
c00051d0:	eb 02                	jmp    c00051d4 <f_open+0x261>
c00051d2:	85 ed                	test   ebp,ebp
c00051d4:	0f 85 b2 01 00 00    	jne    c000538c <f_open+0x419>
c00051da:	f7 c6 08 00 00 00    	test   esi,0x8
c00051e0:	74 03                	je     c00051e5 <f_open+0x272>
c00051e2:	83 ce 40             	or     esi,0x40
c00051e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051e9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051ec:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051ef:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051f2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051f5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051f9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051fc:	8a 02                	mov    al,BYTE PTR [edx]
c00051fe:	3c 04                	cmp    al,0x4
c0005200:	75 2a                	jne    c000522c <f_open+0x2b9>
c0005202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005206:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000520b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000520e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005212:	30 c0                	xor    al,al
c0005214:	09 c8                	or     eax,ecx
c0005216:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005219:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000521d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005220:	8d 42 10             	lea    eax,[edx+0x10]
c0005223:	89 da                	mov    edx,ebx
c0005225:	e8 e5 fb ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000522a:	eb 1c                	jmp    c0005248 <f_open+0x2d5>
c000522c:	89 fa                	mov    edx,edi
c000522e:	e8 8b fb ff ff       	call   c0004dbe <ld_clust.isra.0>
c0005233:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005236:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005239:	e8 12 ca ff ff       	call   c0001c50 <ld_dword>
c000523e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005245:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000524c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005253:	89 03                	mov    DWORD PTR [ebx],eax
c0005255:	31 d2                	xor    edx,edx
c0005257:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000525b:	b9 00 02 00 00       	mov    ecx,0x200
c0005260:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005264:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005268:	89 f0                	mov    eax,esi
c000526a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005271:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005274:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000527b:	8d 43 50             	lea    eax,[ebx+0x50]
c000527e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005285:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000528c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005290:	e8 42 ca ff ff       	call   c0001cd7 <mem_set>
c0005295:	83 e6 20             	and    esi,0x20
c0005298:	75 07                	jne    c00052a1 <f_open+0x32e>
c000529a:	31 ed                	xor    ebp,ebp
c000529c:	e9 eb 00 00 00       	jmp    c000538c <f_open+0x419>
c00052a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052a4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052b3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052b7:	74 e1                	je     c000529a <f_open+0x327>
c00052b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052c1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052c4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052cb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ce:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052d2:	31 ff                	xor    edi,edi
c00052d4:	c1 e5 09             	shl    ebp,0x9
c00052d7:	89 ee                	mov    esi,ebp
c00052d9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052dd:	89 f8                	mov    eax,edi
c00052df:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052e3:	73 22                	jae    c0005307 <f_open+0x394>
c00052e5:	89 d8                	mov    eax,ebx
c00052e7:	e8 bd dc ff ff       	call   c0002fa9 <get_fat>
c00052ec:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052f0:	89 c2                	mov    edx,eax
c00052f2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052f6:	83 f8 01             	cmp    eax,0x1
c00052f9:	76 10                	jbe    c000530b <f_open+0x398>
c00052fb:	83 f8 ff             	cmp    eax,0xffffffff
c00052fe:	75 d9                	jne    c00052d9 <f_open+0x366>
c0005300:	bd 01 00 00 00       	mov    ebp,0x1
c0005305:	eb 09                	jmp    c0005310 <f_open+0x39d>
c0005307:	31 ed                	xor    ebp,ebp
c0005309:	eb 05                	jmp    c0005310 <f_open+0x39d>
c000530b:	bd 02 00 00 00       	mov    ebp,0x2
c0005310:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005313:	85 ed                	test   ebp,ebp
c0005315:	75 75                	jne    c000538c <f_open+0x419>
c0005317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531b:	25 ff 01 00 00       	and    eax,0x1ff
c0005320:	0f 84 74 ff ff ff    	je     c000529a <f_open+0x327>
c0005326:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000532a:	bd 02 00 00 00       	mov    ebp,0x2
c000532f:	89 c8                	mov    eax,ecx
c0005331:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005335:	e8 a2 cb ff ff       	call   c0001edc <clst2sect>
c000533a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000533e:	89 d7                	mov    edi,edx
c0005340:	09 c7                	or     edi,eax
c0005342:	74 48                	je     c000538c <f_open+0x419>
c0005344:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005348:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000534c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005354:	0f ac fe 09          	shrd   esi,edi,0x9
c0005358:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000535c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005360:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005363:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005367:	83 ec 0c             	sub    esp,0xc
c000536a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000536d:	6a 01                	push   0x1
c000536f:	52                   	push   edx
c0005370:	50                   	push   eax
c0005371:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005375:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005379:	50                   	push   eax
c000537a:	e8 79 c8 ff ff       	call   c0001bf8 <disk_read>
c000537f:	83 c4 20             	add    esp,0x20
c0005382:	85 c0                	test   eax,eax
c0005384:	0f 95 c0             	setne  al
c0005387:	0f b6 c0             	movzx  eax,al
c000538a:	89 c5                	mov    ebp,eax
c000538c:	83 ec 0c             	sub    esp,0xc
c000538f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005393:	e8 f4 30 00 00       	call   c000848c <ff_memfree>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	85 ed                	test   ebp,ebp
c000539d:	74 06                	je     c00053a5 <f_open+0x432>
c000539f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053a5:	83 c4 7c             	add    esp,0x7c
c00053a8:	89 e8                	mov    eax,ebp
c00053aa:	5b                   	pop    ebx
c00053ab:	5e                   	pop    esi
c00053ac:	5f                   	pop    edi
c00053ad:	5d                   	pop    ebp
c00053ae:	c3                   	ret    

c00053af <f_read>:
c00053af:	55                   	push   ebp
c00053b0:	57                   	push   edi
c00053b1:	56                   	push   esi
c00053b2:	53                   	push   ebx
c00053b3:	83 ec 2c             	sub    esp,0x2c
c00053b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053ba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053c4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053c8:	89 d8                	mov    eax,ebx
c00053ca:	e8 77 cf ff ff       	call   c0002346 <validate>
c00053cf:	89 c5                	mov    ebp,eax
c00053d1:	85 c0                	test   eax,eax
c00053d3:	0f 85 4c 02 00 00    	jne    c0005625 <f_read+0x276>
c00053d9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053dd:	85 ed                	test   ebp,ebp
c00053df:	0f 85 40 02 00 00    	jne    c0005625 <f_read+0x276>
c00053e5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053e9:	0f 84 31 02 00 00    	je     c0005620 <f_read+0x271>
c00053ef:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053f2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053f5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053f8:	bf 00 00 00 00       	mov    edi,0x0
c00053fd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005400:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005404:	89 d1                	mov    ecx,edx
c0005406:	19 f9                	sbb    ecx,edi
c0005408:	0f 83 cf 00 00 00    	jae    c00054dd <f_read+0x12e>
c000540e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005412:	e9 c6 00 00 00       	jmp    c00054dd <f_read+0x12e>
c0005417:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000541a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000541d:	89 d0                	mov    eax,edx
c000541f:	25 ff 01 00 00       	and    eax,0x1ff
c0005424:	0f 85 c9 01 00 00    	jne    c00055f3 <f_read+0x244>
c000542a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000542e:	89 d6                	mov    esi,edx
c0005430:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005434:	89 cf                	mov    edi,ecx
c0005436:	48                   	dec    eax
c0005437:	0f ac fe 09          	shrd   esi,edi,0x9
c000543b:	21 f0                	and    eax,esi
c000543d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005441:	0f 84 a6 00 00 00    	je     c00054ed <f_read+0x13e>
c0005447:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000544b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000544e:	89 c8                	mov    eax,ecx
c0005450:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005453:	e8 84 ca ff ff       	call   c0001edc <clst2sect>
c0005458:	89 d7                	mov    edi,edx
c000545a:	09 c7                	or     edi,eax
c000545c:	0f 84 b4 00 00 00    	je     c0005516 <f_read+0x167>
c0005462:	31 ff                	xor    edi,edi
c0005464:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005468:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000546b:	01 c6                	add    esi,eax
c000546d:	11 d7                	adc    edi,edx
c000546f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005477:	0f 86 fd 00 00 00    	jbe    c000557a <f_read+0x1cb>
c000547d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005481:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005485:	c1 e8 09             	shr    eax,0x9
c0005488:	89 04 24             	mov    DWORD PTR [esp],eax
c000548b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000548f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005492:	39 c2                	cmp    edx,eax
c0005494:	76 07                	jbe    c000549d <f_read+0xee>
c0005496:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000549a:	89 04 24             	mov    DWORD PTR [esp],eax
c000549d:	83 ec 0c             	sub    esp,0xc
c00054a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054a4:	57                   	push   edi
c00054a5:	56                   	push   esi
c00054a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054ae:	50                   	push   eax
c00054af:	e8 44 c7 ff ff       	call   c0001bf8 <disk_read>
c00054b4:	83 c4 20             	add    esp,0x20
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 6e                	jne    c0005529 <f_read+0x17a>
c00054bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054bf:	78 7e                	js     c000553f <f_read+0x190>
c00054c1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054c4:	c1 e6 09             	shl    esi,0x9
c00054c7:	31 ff                	xor    edi,edi
c00054c9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054d1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d5:	01 30                	add    DWORD PTR [eax],esi
c00054d7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054da:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054e2:	0f 85 2f ff ff ff    	jne    c0005417 <f_read+0x68>
c00054e8:	e9 38 01 00 00       	jmp    c0005625 <f_read+0x276>
c00054ed:	89 c8                	mov    eax,ecx
c00054ef:	09 d0                	or     eax,edx
c00054f1:	75 05                	jne    c00054f8 <f_read+0x149>
c00054f3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054f6:	eb 19                	jmp    c0005511 <f_read+0x162>
c00054f8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054fc:	74 09                	je     c0005507 <f_read+0x158>
c00054fe:	89 d8                	mov    eax,ebx
c0005500:	e8 f8 c9 ff ff       	call   c0001efd <clmt_clust>
c0005505:	eb 0a                	jmp    c0005511 <f_read+0x162>
c0005507:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000550a:	89 d8                	mov    eax,ebx
c000550c:	e8 98 da ff ff       	call   c0002fa9 <get_fat>
c0005511:	83 f8 01             	cmp    eax,0x1
c0005514:	77 0e                	ja     c0005524 <f_read+0x175>
c0005516:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000551a:	bd 02 00 00 00       	mov    ebp,0x2
c000551f:	e9 01 01 00 00       	jmp    c0005625 <f_read+0x276>
c0005524:	83 f8 ff             	cmp    eax,0xffffffff
c0005527:	75 0e                	jne    c0005537 <f_read+0x188>
c0005529:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000552d:	bd 01 00 00 00       	mov    ebp,0x1
c0005532:	e9 ee 00 00 00       	jmp    c0005625 <f_read+0x276>
c0005537:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000553a:	e9 08 ff ff ff       	jmp    c0005447 <f_read+0x98>
c000553f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005542:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005545:	29 f0                	sub    eax,esi
c0005547:	19 fa                	sbb    edx,edi
c0005549:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000554c:	89 d7                	mov    edi,edx
c000554e:	ba 00 00 00 00       	mov    edx,0x0
c0005553:	89 f9                	mov    ecx,edi
c0005555:	19 d1                	sbb    ecx,edx
c0005557:	0f 83 64 ff ff ff    	jae    c00054c1 <f_read+0x112>
c000555d:	89 c7                	mov    edi,eax
c000555f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005562:	c1 e7 09             	shl    edi,0x9
c0005565:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005569:	b9 00 02 00 00       	mov    ecx,0x200
c000556e:	01 f8                	add    eax,edi
c0005570:	e8 4d c7 ff ff       	call   c0001cc2 <mem_cpy>
c0005575:	e9 47 ff ff ff       	jmp    c00054c1 <f_read+0x112>
c000557a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005580:	89 04 24             	mov    DWORD PTR [esp],eax
c0005583:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005587:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000558b:	75 05                	jne    c0005592 <f_read+0x1e3>
c000558d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005590:	74 5b                	je     c00055ed <f_read+0x23e>
c0005592:	8d 43 50             	lea    eax,[ebx+0x50]
c0005595:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000559d:	79 2a                	jns    c00055c9 <f_read+0x21a>
c000559f:	83 ec 0c             	sub    esp,0xc
c00055a2:	6a 01                	push   0x1
c00055a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055b4:	50                   	push   eax
c00055b5:	e8 54 c6 ff ff       	call   c0001c0e <disk_write>
c00055ba:	83 c4 20             	add    esp,0x20
c00055bd:	85 c0                	test   eax,eax
c00055bf:	0f 85 64 ff ff ff    	jne    c0005529 <f_read+0x17a>
c00055c5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055c9:	83 ec 0c             	sub    esp,0xc
c00055cc:	6a 01                	push   0x1
c00055ce:	57                   	push   edi
c00055cf:	56                   	push   esi
c00055d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055dc:	50                   	push   eax
c00055dd:	e8 16 c6 ff ff       	call   c0001bf8 <disk_read>
c00055e2:	83 c4 20             	add    esp,0x20
c00055e5:	85 c0                	test   eax,eax
c00055e7:	0f 85 3c ff ff ff    	jne    c0005529 <f_read+0x17a>
c00055ed:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f6:	ba 00 02 00 00       	mov    edx,0x200
c00055fb:	25 ff 01 00 00       	and    eax,0x1ff
c0005600:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005604:	29 c2                	sub    edx,eax
c0005606:	39 d6                	cmp    esi,edx
c0005608:	76 02                	jbe    c000560c <f_read+0x25d>
c000560a:	89 d6                	mov    esi,edx
c000560c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005610:	89 f1                	mov    ecx,esi
c0005612:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005616:	e8 a7 c6 ff ff       	call   c0001cc2 <mem_cpy>
c000561b:	e9 a7 fe ff ff       	jmp    c00054c7 <f_read+0x118>
c0005620:	bd 07 00 00 00       	mov    ebp,0x7
c0005625:	83 c4 2c             	add    esp,0x2c
c0005628:	89 e8                	mov    eax,ebp
c000562a:	5b                   	pop    ebx
c000562b:	5e                   	pop    esi
c000562c:	5f                   	pop    edi
c000562d:	5d                   	pop    ebp
c000562e:	c3                   	ret    

c000562f <f_write>:
c000562f:	55                   	push   ebp
c0005630:	57                   	push   edi
c0005631:	56                   	push   esi
c0005632:	53                   	push   ebx
c0005633:	83 ec 2c             	sub    esp,0x2c
c0005636:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000563a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000563e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005644:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005648:	89 d8                	mov    eax,ebx
c000564a:	e8 f7 cc ff ff       	call   c0002346 <validate>
c000564f:	89 c5                	mov    ebp,eax
c0005651:	85 c0                	test   eax,eax
c0005653:	0f 85 86 02 00 00    	jne    c00058df <f_write+0x2b0>
c0005659:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000565d:	85 ed                	test   ebp,ebp
c000565f:	0f 85 7a 02 00 00    	jne    c00058df <f_write+0x2b0>
c0005665:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005669:	0f 84 6b 02 00 00    	je     c00058da <f_write+0x2ab>
c000566f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005673:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005676:	0f 84 43 01 00 00    	je     c00057bf <f_write+0x190>
c000567c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567f:	89 c1                	mov    ecx,eax
c0005681:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005685:	0f 83 34 01 00 00    	jae    c00057bf <f_write+0x190>
c000568b:	f7 d0                	not    eax
c000568d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005691:	e9 29 01 00 00       	jmp    c00057bf <f_write+0x190>
c0005696:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005699:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000569c:	89 d0                	mov    eax,edx
c000569e:	25 ff 01 00 00       	and    eax,0x1ff
c00056a3:	0f 85 00 02 00 00    	jne    c00058a9 <f_write+0x27a>
c00056a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ad:	89 d6                	mov    esi,edx
c00056af:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056b3:	89 cf                	mov    edi,ecx
c00056b5:	48                   	dec    eax
c00056b6:	0f ac fe 09          	shrd   esi,edi,0x9
c00056ba:	21 f0                	and    eax,esi
c00056bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056c0:	0f 84 06 01 00 00    	je     c00057cc <f_write+0x19d>
c00056c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ca:	0f 88 6e 01 00 00    	js     c000583e <f_write+0x20f>
c00056d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056d4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056d7:	89 c8                	mov    eax,ecx
c00056d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056dd:	e8 fa c7 ff ff       	call   c0001edc <clst2sect>
c00056e2:	89 d1                	mov    ecx,edx
c00056e4:	09 c1                	or     ecx,eax
c00056e6:	0f 84 1c 01 00 00    	je     c0005808 <f_write+0x1d9>
c00056ec:	31 ff                	xor    edi,edi
c00056ee:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056f6:	01 c6                	add    esi,eax
c00056f8:	11 d7                	adc    edi,edx
c00056fa:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005702:	0f 86 63 01 00 00    	jbe    c000586b <f_write+0x23c>
c0005708:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000570c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005710:	c1 e8 09             	shr    eax,0x9
c0005713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005717:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000571b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000571f:	39 c2                	cmp    edx,eax
c0005721:	76 08                	jbe    c000572b <f_write+0xfc>
c0005723:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000572b:	83 ec 0c             	sub    esp,0xc
c000572e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005732:	57                   	push   edi
c0005733:	56                   	push   esi
c0005734:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005738:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000573c:	50                   	push   eax
c000573d:	e8 cc c4 ff ff       	call   c0001c0e <disk_write>
c0005742:	83 c4 20             	add    esp,0x20
c0005745:	85 c0                	test   eax,eax
c0005747:	0f 85 ce 00 00 00    	jne    c000581b <f_write+0x1ec>
c000574d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005750:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005753:	29 f0                	sub    eax,esi
c0005755:	19 fa                	sbb    edx,edi
c0005757:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000575b:	89 d7                	mov    edi,edx
c000575d:	ba 00 00 00 00       	mov    edx,0x0
c0005762:	89 f9                	mov    ecx,edi
c0005764:	19 d1                	sbb    ecx,edx
c0005766:	73 1c                	jae    c0005784 <f_write+0x155>
c0005768:	89 c7                	mov    edi,eax
c000576a:	b9 00 02 00 00       	mov    ecx,0x200
c000576f:	c1 e7 09             	shl    edi,0x9
c0005772:	8d 43 50             	lea    eax,[ebx+0x50]
c0005775:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005779:	89 fa                	mov    edx,edi
c000577b:	e8 42 c5 ff ff       	call   c0001cc2 <mem_cpy>
c0005780:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005784:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005788:	c1 e6 09             	shl    esi,0x9
c000578b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000578f:	31 ff                	xor    edi,edi
c0005791:	01 30                	add    DWORD PTR [eax],esi
c0005793:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005797:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000579b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000579e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057a4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057a7:	89 c1                	mov    ecx,eax
c00057a9:	39 f2                	cmp    edx,esi
c00057ab:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057ae:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057b1:	19 f9                	sbb    ecx,edi
c00057b3:	73 04                	jae    c00057b9 <f_write+0x18a>
c00057b5:	89 f2                	mov    edx,esi
c00057b7:	89 f8                	mov    eax,edi
c00057b9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057bc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057bf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057c4:	0f 85 cc fe ff ff    	jne    c0005696 <f_write+0x67>
c00057ca:	eb 2e                	jmp    c00057fa <f_write+0x1cb>
c00057cc:	89 c8                	mov    eax,ecx
c00057ce:	09 d0                	or     eax,edx
c00057d0:	75 0b                	jne    c00057dd <f_write+0x1ae>
c00057d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057d5:	31 d2                	xor    edx,edx
c00057d7:	85 c0                	test   eax,eax
c00057d9:	75 28                	jne    c0005803 <f_write+0x1d4>
c00057db:	eb 12                	jmp    c00057ef <f_write+0x1c0>
c00057dd:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057e1:	74 09                	je     c00057ec <f_write+0x1bd>
c00057e3:	89 d8                	mov    eax,ebx
c00057e5:	e8 13 c7 ff ff       	call   c0001efd <clmt_clust>
c00057ea:	eb 0a                	jmp    c00057f6 <f_write+0x1c7>
c00057ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057ef:	89 d8                	mov    eax,ebx
c00057f1:	e8 a1 da ff ff       	call   c0003297 <create_chain>
c00057f6:	85 c0                	test   eax,eax
c00057f8:	75 09                	jne    c0005803 <f_write+0x1d4>
c00057fa:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057fe:	e9 dc 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005803:	83 f8 01             	cmp    eax,0x1
c0005806:	75 0e                	jne    c0005816 <f_write+0x1e7>
c0005808:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000580c:	bd 02 00 00 00       	mov    ebp,0x2
c0005811:	e9 c9 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005816:	83 f8 ff             	cmp    eax,0xffffffff
c0005819:	75 0e                	jne    c0005829 <f_write+0x1fa>
c000581b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000581f:	bd 01 00 00 00       	mov    ebp,0x1
c0005824:	e9 b6 00 00 00       	jmp    c00058df <f_write+0x2b0>
c0005829:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000582c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005830:	0f 85 90 fe ff ff    	jne    c00056c6 <f_write+0x97>
c0005836:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005839:	e9 88 fe ff ff       	jmp    c00056c6 <f_write+0x97>
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	8d 43 50             	lea    eax,[ebx+0x50]
c0005844:	6a 01                	push   0x1
c0005846:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005849:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584c:	50                   	push   eax
c000584d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005851:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005855:	50                   	push   eax
c0005856:	e8 b3 c3 ff ff       	call   c0001c0e <disk_write>
c000585b:	83 c4 20             	add    esp,0x20
c000585e:	85 c0                	test   eax,eax
c0005860:	75 b9                	jne    c000581b <f_write+0x1ec>
c0005862:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005866:	e9 65 fe ff ff       	jmp    c00056d0 <f_write+0xa1>
c000586b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000586e:	75 05                	jne    c0005875 <f_write+0x246>
c0005870:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005873:	74 2e                	je     c00058a3 <f_write+0x274>
c0005875:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005878:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000587e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005881:	73 20                	jae    c00058a3 <f_write+0x274>
c0005883:	83 ec 0c             	sub    esp,0xc
c0005886:	8d 43 50             	lea    eax,[ebx+0x50]
c0005889:	6a 01                	push   0x1
c000588b:	57                   	push   edi
c000588c:	56                   	push   esi
c000588d:	50                   	push   eax
c000588e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005892:	50                   	push   eax
c0005893:	e8 60 c3 ff ff       	call   c0001bf8 <disk_read>
c0005898:	83 c4 20             	add    esp,0x20
c000589b:	85 c0                	test   eax,eax
c000589d:	0f 85 78 ff ff ff    	jne    c000581b <f_write+0x1ec>
c00058a3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058a6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ac:	ba 00 02 00 00       	mov    edx,0x200
c00058b1:	25 ff 01 00 00       	and    eax,0x1ff
c00058b6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058ba:	29 c2                	sub    edx,eax
c00058bc:	39 d6                	cmp    esi,edx
c00058be:	76 02                	jbe    c00058c2 <f_write+0x293>
c00058c0:	89 d6                	mov    esi,edx
c00058c2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058c6:	89 f1                	mov    ecx,esi
c00058c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058cc:	e8 f1 c3 ff ff       	call   c0001cc2 <mem_cpy>
c00058d1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058d5:	e9 b1 fe ff ff       	jmp    c000578b <f_write+0x15c>
c00058da:	bd 07 00 00 00       	mov    ebp,0x7
c00058df:	83 c4 2c             	add    esp,0x2c
c00058e2:	89 e8                	mov    eax,ebp
c00058e4:	5b                   	pop    ebx
c00058e5:	5e                   	pop    esi
c00058e6:	5f                   	pop    edi
c00058e7:	5d                   	pop    ebp
c00058e8:	c3                   	ret    

c00058e9 <f_sync>:
c00058e9:	56                   	push   esi
c00058ea:	53                   	push   ebx
c00058eb:	83 ec 64             	sub    esp,0x64
c00058ee:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058f2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058f6:	89 d8                	mov    eax,ebx
c00058f8:	e8 49 ca ff ff       	call   c0002346 <validate>
c00058fd:	85 c0                	test   eax,eax
c00058ff:	0f 85 ba 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005905:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005908:	f6 c2 40             	test   dl,0x40
c000590b:	0f 84 ae 01 00 00    	je     c0005abf <f_sync+0x1d6>
c0005911:	84 d2                	test   dl,dl
c0005913:	79 33                	jns    c0005948 <f_sync+0x5f>
c0005915:	83 ec 0c             	sub    esp,0xc
c0005918:	8d 43 50             	lea    eax,[ebx+0x50]
c000591b:	6a 01                	push   0x1
c000591d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005920:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005923:	50                   	push   eax
c0005924:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005928:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000592c:	50                   	push   eax
c000592d:	e8 dc c2 ff ff       	call   c0001c0e <disk_write>
c0005932:	83 c4 20             	add    esp,0x20
c0005935:	89 c2                	mov    edx,eax
c0005937:	b8 01 00 00 00       	mov    eax,0x1
c000593c:	85 d2                	test   edx,edx
c000593e:	0f 85 7b 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005944:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000594f:	0f 85 11 01 00 00    	jne    c0005a66 <f_sync+0x17d>
c0005955:	89 d8                	mov    eax,ebx
c0005957:	e8 13 d6 ff ff       	call   c0002f6f <fill_first_frag>
c000595c:	85 c0                	test   eax,eax
c000595e:	0f 85 5b 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005964:	83 c9 ff             	or     ecx,0xffffffff
c0005967:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000596a:	89 d8                	mov    eax,ebx
c000596c:	e8 c9 d5 ff ff       	call   c0002f3a <fill_last_frag>
c0005971:	85 c0                	test   eax,eax
c0005973:	0f 85 46 01 00 00    	jne    c0005abf <f_sync+0x1d6>
c0005979:	83 ec 0c             	sub    esp,0xc
c000597c:	68 60 04 00 00       	push   0x460
c0005981:	e8 f0 2a 00 00       	call   c0008476 <ff_memalloc>
c0005986:	83 c4 10             	add    esp,0x10
c0005989:	89 c6                	mov    esi,eax
c000598b:	b8 11 00 00 00       	mov    eax,0x11
c0005990:	85 f6                	test   esi,esi
c0005992:	0f 84 27 01 00 00    	je     c0005abf <f_sync+0x1d6>
c0005998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000599c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059a2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059a5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059a8:	89 da                	mov    edx,ebx
c00059aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059ae:	e8 af df ff ff       	call   c0003962 <load_obj_xdir>
c00059b3:	85 c0                	test   eax,eax
c00059b5:	0f 85 95 00 00 00    	jne    c0005a50 <f_sync+0x167>
c00059bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059c2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059c6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059c9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059cc:	83 ca 01             	or     edx,0x1
c00059cf:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059d8:	83 c0 34             	add    eax,0x34
c00059db:	e8 d9 c2 ff ff       	call   c0001cb9 <st_dword>
c00059e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ea:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059ed:	83 c0 38             	add    eax,0x38
c00059f0:	e8 c7 c2 ff ff       	call   c0001cbc <st_qword>
c00059f5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a02:	83 c0 28             	add    eax,0x28
c0005a05:	e8 b2 c2 ff ff       	call   c0001cbc <st_qword>
c0005a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a13:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a16:	83 c0 0c             	add    eax,0xc
c0005a19:	e8 9b c2 ff ff       	call   c0001cb9 <st_dword>
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a25:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a29:	31 d2                	xor    edx,edx
c0005a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2e:	83 c0 10             	add    eax,0x10
c0005a31:	e8 83 c2 ff ff       	call   c0001cb9 <st_dword>
c0005a36:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a3a:	e8 62 e1 ff ff       	call   c0003ba1 <store_xdir>
c0005a3f:	85 c0                	test   eax,eax
c0005a41:	75 0d                	jne    c0005a50 <f_sync+0x167>
c0005a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a47:	e8 00 eb ff ff       	call   c000454c <sync_fs>
c0005a4c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a54:	83 ec 0c             	sub    esp,0xc
c0005a57:	56                   	push   esi
c0005a58:	e8 2f 2a 00 00       	call   c000848c <ff_memfree>
c0005a5d:	83 c4 10             	add    esp,0x10
c0005a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a64:	eb 59                	jmp    c0005abf <f_sync+0x1d6>
c0005a66:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a69:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a6c:	e8 b0 c9 ff ff       	call   c0002421 <move_window>
c0005a71:	85 c0                	test   eax,eax
c0005a73:	75 4a                	jne    c0005abf <f_sync+0x1d6>
c0005a75:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a78:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a83:	e8 5f f3 ff ff       	call   c0004de7 <st_clust.isra.1>
c0005a88:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a8b:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a8e:	e8 26 c2 ff ff       	call   c0001cb9 <st_dword>
c0005a93:	8d 46 16             	lea    eax,[esi+0x16]
c0005a96:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a9b:	e8 19 c2 ff ff       	call   c0001cb9 <st_dword>
c0005aa0:	8d 46 12             	lea    eax,[esi+0x12]
c0005aa3:	31 d2                	xor    edx,edx
c0005aa5:	e8 0b c2 ff ff       	call   c0001cb5 <st_word>
c0005aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aae:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ab6:	e8 91 ea ff ff       	call   c000454c <sync_fs>
c0005abb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005abf:	83 c4 64             	add    esp,0x64
c0005ac2:	5b                   	pop    ebx
c0005ac3:	5e                   	pop    esi
c0005ac4:	c3                   	ret    

c0005ac5 <f_close>:
c0005ac5:	53                   	push   ebx
c0005ac6:	83 ec 24             	sub    esp,0x24
c0005ac9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005acd:	53                   	push   ebx
c0005ace:	e8 16 fe ff ff       	call   c00058e9 <f_sync>
c0005ad3:	83 c4 10             	add    esp,0x10
c0005ad6:	85 c0                	test   eax,eax
c0005ad8:	75 15                	jne    c0005aef <f_close+0x2a>
c0005ada:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ade:	89 d8                	mov    eax,ebx
c0005ae0:	e8 61 c8 ff ff       	call   c0002346 <validate>
c0005ae5:	85 c0                	test   eax,eax
c0005ae7:	75 06                	jne    c0005aef <f_close+0x2a>
c0005ae9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005aef:	83 c4 18             	add    esp,0x18
c0005af2:	5b                   	pop    ebx
c0005af3:	c3                   	ret    

c0005af4 <f_lseek>:
c0005af4:	55                   	push   ebp
c0005af5:	57                   	push   edi
c0005af6:	56                   	push   esi
c0005af7:	53                   	push   ebx
c0005af8:	83 ec 3c             	sub    esp,0x3c
c0005afb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005aff:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b03:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b07:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b0e:	89 d8                	mov    eax,ebx
c0005b10:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b14:	e8 2d c8 ff ff       	call   c0002346 <validate>
c0005b19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b1d:	85 c0                	test   eax,eax
c0005b1f:	0f 85 7a 04 00 00    	jne    c0005f9f <f_lseek+0x4ab>
c0005b25:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b2d:	85 c0                	test   eax,eax
c0005b2f:	0f 85 6a 04 00 00    	jne    c0005f9f <f_lseek+0x4ab>
c0005b35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b39:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b3c:	74 0c                	je     c0005b4a <f_lseek+0x56>
c0005b3e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b41:	85 c0                	test   eax,eax
c0005b43:	75 1f                	jne    c0005b64 <f_lseek+0x70>
c0005b45:	e9 b5 01 00 00       	jmp    c0005cff <f_lseek+0x20b>
c0005b4a:	83 c9 ff             	or     ecx,0xffffffff
c0005b4d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b50:	89 d8                	mov    eax,ebx
c0005b52:	e8 e3 d3 ff ff       	call   c0002f3a <fill_last_frag>
c0005b57:	85 c0                	test   eax,eax
c0005b59:	74 e3                	je     c0005b3e <f_lseek+0x4a>
c0005b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5f:	e9 3b 04 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005b64:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b69:	0f 85 ac 00 00 00    	jne    c0005c1b <f_lseek+0x127>
c0005b6f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b73:	0f 85 a2 00 00 00    	jne    c0005c1b <f_lseek+0x127>
c0005b79:	8d 78 04             	lea    edi,[eax+0x4]
c0005b7c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b81:	be 02 00 00 00       	mov    esi,0x2
c0005b86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b8a:	85 ed                	test   ebp,ebp
c0005b8c:	74 73                	je     c0005c01 <f_lseek+0x10d>
c0005b8e:	89 e9                	mov    ecx,ebp
c0005b90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b97:	ff 04 24             	inc    DWORD PTR [esp]
c0005b9a:	89 ca                	mov    edx,ecx
c0005b9c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba0:	89 d8                	mov    eax,ebx
c0005ba2:	e8 02 d4 ff ff       	call   c0002fa9 <get_fat>
c0005ba7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bab:	83 f8 01             	cmp    eax,0x1
c0005bae:	77 11                	ja     c0005bc1 <f_lseek+0xcd>
c0005bb0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bb4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bbc:	e9 de 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005bc1:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc4:	75 11                	jne    c0005bd7 <f_lseek+0xe3>
c0005bc6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bca:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bd2:	e9 c8 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005bd7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bda:	89 c1                	mov    ecx,eax
c0005bdc:	39 c2                	cmp    edx,eax
c0005bde:	74 b7                	je     c0005b97 <f_lseek+0xa3>
c0005be0:	83 c6 02             	add    esi,0x2
c0005be3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005be7:	72 0b                	jb     c0005bf4 <f_lseek+0x100>
c0005be9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bec:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bef:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bf1:	83 c7 08             	add    edi,0x8
c0005bf4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfb:	76 04                	jbe    c0005c01 <f_lseek+0x10d>
c0005bfd:	89 c5                	mov    ebp,eax
c0005bff:	eb 8d                	jmp    c0005b8e <f_lseek+0x9a>
c0005c01:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c04:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c08:	89 30                	mov    DWORD PTR [eax],esi
c0005c0a:	0f 87 87 03 00 00    	ja     c0005f97 <f_lseek+0x4a3>
c0005c10:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c16:	e9 84 03 00 00       	jmp    c0005f9f <f_lseek+0x4ab>
c0005c1b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c1e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c2d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c34:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c38:	73 0f                	jae    c0005c49 <f_lseek+0x155>
c0005c3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c3d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c51:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c54:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c5b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c5f:	0f 84 3a 03 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005c65:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6d:	83 c6 ff             	add    esi,0xffffffff
c0005c70:	89 d8                	mov    eax,ebx
c0005c72:	83 d7 ff             	adc    edi,0xffffffff
c0005c75:	89 f2                	mov    edx,esi
c0005c77:	89 f9                	mov    ecx,edi
c0005c79:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c80:	e8 78 c2 ff ff       	call   c0001efd <clmt_clust>
c0005c85:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c89:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c8c:	89 c2                	mov    edx,eax
c0005c8e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c92:	89 c8                	mov    eax,ecx
c0005c94:	e8 43 c2 ff ff       	call   c0001edc <clst2sect>
c0005c99:	89 d7                	mov    edi,edx
c0005c9b:	09 c7                	or     edi,eax
c0005c9d:	0f 84 0d ff ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005ca3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ca7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cad:	0f 84 ec 02 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005cb3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cbb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cbe:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cc2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc6:	4d                   	dec    ebp
c0005cc7:	31 ff                	xor    edi,edi
c0005cc9:	21 ee                	and    esi,ebp
c0005ccb:	01 c6                	add    esi,eax
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	11 d7                	adc    edi,edx
c0005cd2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd5:	39 fa                	cmp    edx,edi
c0005cd7:	75 08                	jne    c0005ce1 <f_lseek+0x1ed>
c0005cd9:	39 f0                	cmp    eax,esi
c0005cdb:	0f 84 be 02 00 00    	je     c0005f9f <f_lseek+0x4ab>
c0005ce1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce8:	0f 89 80 02 00 00    	jns    c0005f6e <f_lseek+0x47a>
c0005cee:	83 ec 0c             	sub    esp,0xc
c0005cf1:	6a 01                	push   0x1
c0005cf3:	52                   	push   edx
c0005cf4:	50                   	push   eax
c0005cf5:	55                   	push   ebp
c0005cf6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cfa:	e9 5a 02 00 00       	jmp    c0005f59 <f_lseek+0x465>
c0005cff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d03:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d06:	74 16                	je     c0005d1e <f_lseek+0x22a>
c0005d08:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d0d:	76 0f                	jbe    c0005d1e <f_lseek+0x22a>
c0005d0f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d16:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d1e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d24:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d27:	89 c7                	mov    edi,eax
c0005d29:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d2d:	73 0d                	jae    c0005d3c <f_lseek+0x248>
c0005d2f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d33:	75 07                	jne    c0005d3c <f_lseek+0x248>
c0005d35:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d3c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d42:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d46:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d4d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d54:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d57:	75 09                	jne    c0005d62 <f_lseek+0x26e>
c0005d59:	31 f6                	xor    esi,esi
c0005d5b:	31 ff                	xor    edi,edi
c0005d5d:	e9 af 01 00 00       	jmp    c0005f11 <f_lseek+0x41d>
c0005d62:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d66:	89 d7                	mov    edi,edx
c0005d68:	c1 e1 09             	shl    ecx,0x9
c0005d6b:	09 c7                	or     edi,eax
c0005d6d:	89 cd                	mov    ebp,ecx
c0005d6f:	74 6d                	je     c0005dde <f_lseek+0x2ea>
c0005d71:	83 c0 ff             	add    eax,0xffffffff
c0005d74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d78:	83 d2 ff             	adc    edx,0xffffffff
c0005d7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d82:	83 c0 ff             	add    eax,0xffffffff
c0005d85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d89:	83 d2 ff             	adc    edx,0xffffffff
c0005d8c:	31 ff                	xor    edi,edi
c0005d8e:	57                   	push   edi
c0005d8f:	51                   	push   ecx
c0005d90:	52                   	push   edx
c0005d91:	50                   	push   eax
c0005d92:	e8 fd 15 02 00       	call   c0027394 <__udivdi3>
c0005d97:	83 c4 10             	add    esp,0x10
c0005d9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005da2:	57                   	push   edi
c0005da3:	55                   	push   ebp
c0005da4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005da8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dac:	e8 e3 15 02 00       	call   c0027394 <__udivdi3>
c0005db1:	83 c4 10             	add    esp,0x10
c0005db4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005db8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dbc:	19 d1                	sbb    ecx,edx
c0005dbe:	72 1e                	jb     c0005dde <f_lseek+0x2ea>
c0005dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dc4:	89 e9                	mov    ecx,ebp
c0005dc6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dc9:	f7 d9                	neg    ecx
c0005dcb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dce:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005dd2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dd5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dd8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ddc:	eb 28                	jmp    c0005e06 <f_lseek+0x312>
c0005dde:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005de1:	85 c0                	test   eax,eax
c0005de3:	75 1e                	jne    c0005e03 <f_lseek+0x30f>
c0005de5:	31 d2                	xor    edx,edx
c0005de7:	89 d8                	mov    eax,ebx
c0005de9:	e8 a9 d4 ff ff       	call   c0003297 <create_chain>
c0005dee:	83 f8 01             	cmp    eax,0x1
c0005df1:	0f 84 b9 fd ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005df7:	83 f8 ff             	cmp    eax,0xffffffff
c0005dfa:	0f 84 c6 fd ff ff    	je     c0005bc6 <f_lseek+0xd2>
c0005e00:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e03:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e06:	85 c0                	test   eax,eax
c0005e08:	0f 84 4b ff ff ff    	je     c0005d59 <f_lseek+0x265>
c0005e0e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e12:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e1a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e21:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e24:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e27:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e2b:	0f 83 9d 00 00 00    	jae    c0005ece <f_lseek+0x3da>
c0005e31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e39:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e3c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e40:	01 f2                	add    edx,esi
c0005e42:	11 f9                	adc    ecx,edi
c0005e44:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e4c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e4f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e52:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e55:	f6 c1 02             	test   cl,0x2
c0005e58:	74 35                	je     c0005e8f <f_lseek+0x39b>
c0005e5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e5e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e61:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e64:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e68:	73 16                	jae    c0005e80 <f_lseek+0x38c>
c0005e6a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e6e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e72:	88 ca                	mov    dl,cl
c0005e74:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e77:	83 ca 40             	or     edx,0x40
c0005e7a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e7d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e80:	89 c2                	mov    edx,eax
c0005e82:	89 d8                	mov    eax,ebx
c0005e84:	e8 0e d4 ff ff       	call   c0003297 <create_chain>
c0005e89:	85 c0                	test   eax,eax
c0005e8b:	75 0b                	jne    c0005e98 <f_lseek+0x3a4>
c0005e8d:	eb 30                	jmp    c0005ebf <f_lseek+0x3cb>
c0005e8f:	89 c2                	mov    edx,eax
c0005e91:	89 d8                	mov    eax,ebx
c0005e93:	e8 11 d1 ff ff       	call   c0002fa9 <get_fat>
c0005e98:	83 f8 ff             	cmp    eax,0xffffffff
c0005e9b:	0f 84 25 fd ff ff    	je     c0005bc6 <f_lseek+0xd2>
c0005ea1:	83 f8 01             	cmp    eax,0x1
c0005ea4:	0f 86 06 fd ff ff    	jbe    c0005bb0 <f_lseek+0xbc>
c0005eaa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005eae:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005eb1:	0f 86 f9 fc ff ff    	jbe    c0005bb0 <f_lseek+0xbc>
c0005eb7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005eba:	e9 5b ff ff ff       	jmp    c0005e1a <f_lseek+0x326>
c0005ebf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ec6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ece:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ed1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ed5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ed8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005edb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ede:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ee4:	0f 84 6f fe ff ff    	je     c0005d59 <f_lseek+0x265>
c0005eea:	89 c2                	mov    edx,eax
c0005eec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ef0:	e8 e7 bf ff ff       	call   c0001edc <clst2sect>
c0005ef5:	89 d7                	mov    edi,edx
c0005ef7:	09 c7                	or     edi,eax
c0005ef9:	0f 84 b1 fc ff ff    	je     c0005bb0 <f_lseek+0xbc>
c0005eff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f03:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f06:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f0a:	c1 ef 09             	shr    edi,0x9
c0005f0d:	01 c6                	add    esi,eax
c0005f0f:	11 d7                	adc    edi,edx
c0005f11:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f14:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f17:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f1a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f1d:	19 d1                	sbb    ecx,edx
c0005f1f:	73 0a                	jae    c0005f2b <f_lseek+0x437>
c0005f21:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f24:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f27:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f2b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f30:	74 6d                	je     c0005f9f <f_lseek+0x4ab>
c0005f32:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f35:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f38:	39 fa                	cmp    edx,edi
c0005f3a:	75 04                	jne    c0005f40 <f_lseek+0x44c>
c0005f3c:	39 f0                	cmp    eax,esi
c0005f3e:	74 5f                	je     c0005f9f <f_lseek+0x4ab>
c0005f40:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f43:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f47:	79 25                	jns    c0005f6e <f_lseek+0x47a>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	6a 01                	push   0x1
c0005f4e:	52                   	push   edx
c0005f4f:	50                   	push   eax
c0005f50:	55                   	push   ebp
c0005f51:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f55:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f59:	50                   	push   eax
c0005f5a:	e8 af bc ff ff       	call   c0001c0e <disk_write>
c0005f5f:	83 c4 20             	add    esp,0x20
c0005f62:	85 c0                	test   eax,eax
c0005f64:	0f 85 5c fc ff ff    	jne    c0005bc6 <f_lseek+0xd2>
c0005f6a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f6e:	83 ec 0c             	sub    esp,0xc
c0005f71:	6a 01                	push   0x1
c0005f73:	57                   	push   edi
c0005f74:	56                   	push   esi
c0005f75:	55                   	push   ebp
c0005f76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7e:	50                   	push   eax
c0005f7f:	e8 74 bc ff ff       	call   c0001bf8 <disk_read>
c0005f84:	83 c4 20             	add    esp,0x20
c0005f87:	85 c0                	test   eax,eax
c0005f89:	0f 85 37 fc ff ff    	jne    c0005bc6 <f_lseek+0xd2>
c0005f8f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f92:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f95:	eb 08                	jmp    c0005f9f <f_lseek+0x4ab>
c0005f97:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fa3:	83 c4 3c             	add    esp,0x3c
c0005fa6:	5b                   	pop    ebx
c0005fa7:	5e                   	pop    esi
c0005fa8:	5f                   	pop    edi
c0005fa9:	5d                   	pop    ebp
c0005faa:	c3                   	ret    

c0005fab <f_opendir>:
c0005fab:	56                   	push   esi
c0005fac:	b8 09 00 00 00       	mov    eax,0x9
c0005fb1:	53                   	push   ebx
c0005fb2:	83 ec 24             	sub    esp,0x24
c0005fb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fb9:	85 db                	test   ebx,ebx
c0005fbb:	0f 84 e6 00 00 00    	je     c00060a7 <f_opendir+0xfc>
c0005fc1:	31 c9                	xor    ecx,ecx
c0005fc3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fc7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fcb:	e8 03 c7 ff ff       	call   c00026d3 <mount_volume>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	0f 85 c9 00 00 00    	jne    c00060a1 <f_opendir+0xf6>
c0005fd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fdc:	83 ec 0c             	sub    esp,0xc
c0005fdf:	89 03                	mov    DWORD PTR [ebx],eax
c0005fe1:	68 60 04 00 00       	push   0x460
c0005fe6:	e8 8b 24 00 00       	call   c0008476 <ff_memalloc>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	89 c6                	mov    esi,eax
c0005ff0:	b8 11 00 00 00       	mov    eax,0x11
c0005ff5:	85 f6                	test   esi,esi
c0005ff7:	0f 84 aa 00 00 00    	je     c00060a7 <f_opendir+0xfc>
c0005ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006001:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006007:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000600a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000600d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006011:	89 d8                	mov    eax,ebx
c0006013:	e8 31 ee ff ff       	call   c0004e49 <follow_path>
c0006018:	85 c0                	test   eax,eax
c000601a:	75 61                	jne    c000607d <f_opendir+0xd2>
c000601c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006020:	78 46                	js     c0006068 <f_opendir+0xbd>
c0006022:	b8 05 00 00 00       	mov    eax,0x5
c0006027:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000602b:	74 50                	je     c000607d <f_opendir+0xd2>
c000602d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006031:	8a 01                	mov    al,BYTE PTR [ecx]
c0006033:	3c 04                	cmp    al,0x4
c0006035:	75 26                	jne    c000605d <f_opendir+0xb2>
c0006037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000603a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000603d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006040:	30 d2                	xor    dl,dl
c0006042:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006046:	09 c2                	or     edx,eax
c0006048:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000604b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000604e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006051:	89 da                	mov    edx,ebx
c0006053:	8d 41 10             	lea    eax,[ecx+0x10]
c0006056:	e8 b4 ed ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000605b:	eb 0b                	jmp    c0006068 <f_opendir+0xbd>
c000605d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006060:	e8 59 ed ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006065:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006068:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000606c:	31 d2                	xor    edx,edx
c000606e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006072:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006076:	89 d8                	mov    eax,ebx
c0006078:	e8 22 d1 ff ff       	call   c000319f <dir_sdi>
c000607d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006081:	83 ec 0c             	sub    esp,0xc
c0006084:	56                   	push   esi
c0006085:	e8 02 24 00 00       	call   c000848c <ff_memfree>
c000608a:	83 c4 10             	add    esp,0x10
c000608d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006091:	83 f8 04             	cmp    eax,0x4
c0006094:	74 06                	je     c000609c <f_opendir+0xf1>
c0006096:	85 c0                	test   eax,eax
c0006098:	74 0d                	je     c00060a7 <f_opendir+0xfc>
c000609a:	eb 05                	jmp    c00060a1 <f_opendir+0xf6>
c000609c:	b8 05 00 00 00       	mov    eax,0x5
c00060a1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060a7:	83 c4 24             	add    esp,0x24
c00060aa:	5b                   	pop    ebx
c00060ab:	5e                   	pop    esi
c00060ac:	c3                   	ret    

c00060ad <f_closedir>:
c00060ad:	53                   	push   ebx
c00060ae:	83 ec 18             	sub    esp,0x18
c00060b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060b5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060b9:	89 d8                	mov    eax,ebx
c00060bb:	e8 86 c2 ff ff       	call   c0002346 <validate>
c00060c0:	85 c0                	test   eax,eax
c00060c2:	75 06                	jne    c00060ca <f_closedir+0x1d>
c00060c4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ca:	83 c4 18             	add    esp,0x18
c00060cd:	5b                   	pop    ebx
c00060ce:	c3                   	ret    

c00060cf <f_readdir>:
c00060cf:	57                   	push   edi
c00060d0:	56                   	push   esi
c00060d1:	53                   	push   ebx
c00060d2:	83 ec 20             	sub    esp,0x20
c00060d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060d9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060e1:	89 d8                	mov    eax,ebx
c00060e3:	e8 5e c2 ff ff       	call   c0002346 <validate>
c00060e8:	85 c0                	test   eax,eax
c00060ea:	75 77                	jne    c0006163 <f_readdir+0x94>
c00060ec:	85 ff                	test   edi,edi
c00060ee:	75 0b                	jne    c00060fb <f_readdir+0x2c>
c00060f0:	31 d2                	xor    edx,edx
c00060f2:	89 d8                	mov    eax,ebx
c00060f4:	e8 a6 d0 ff ff       	call   c000319f <dir_sdi>
c00060f9:	eb 68                	jmp    c0006163 <f_readdir+0x94>
c00060fb:	83 ec 0c             	sub    esp,0xc
c00060fe:	68 60 04 00 00       	push   0x460
c0006103:	e8 6e 23 00 00       	call   c0008476 <ff_memalloc>
c0006108:	83 c4 10             	add    esp,0x10
c000610b:	89 c6                	mov    esi,eax
c000610d:	b8 11 00 00 00       	mov    eax,0x11
c0006112:	85 f6                	test   esi,esi
c0006114:	74 4d                	je     c0006163 <f_readdir+0x94>
c0006116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000611a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006120:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006123:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006126:	31 d2                	xor    edx,edx
c0006128:	89 d8                	mov    eax,ebx
c000612a:	e8 80 d8 ff ff       	call   c00039af <dir_read>
c000612f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006134:	75 19                	jne    c000614f <f_readdir+0x80>
c0006136:	89 fa                	mov    edx,edi
c0006138:	89 d8                	mov    eax,ebx
c000613a:	e8 7e ea ff ff       	call   c0004bbd <get_fileinfo>
c000613f:	31 d2                	xor    edx,edx
c0006141:	89 d8                	mov    eax,ebx
c0006143:	e8 af d5 ff ff       	call   c00036f7 <dir_next>
c0006148:	83 f8 04             	cmp    eax,0x4
c000614b:	75 02                	jne    c000614f <f_readdir+0x80>
c000614d:	31 c0                	xor    eax,eax
c000614f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006153:	83 ec 0c             	sub    esp,0xc
c0006156:	56                   	push   esi
c0006157:	e8 30 23 00 00       	call   c000848c <ff_memfree>
c000615c:	83 c4 10             	add    esp,0x10
c000615f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006163:	83 c4 20             	add    esp,0x20
c0006166:	5b                   	pop    ebx
c0006167:	5e                   	pop    esi
c0006168:	5f                   	pop    edi
c0006169:	c3                   	ret    

c000616a <f_stat>:
c000616a:	57                   	push   edi
c000616b:	31 c9                	xor    ecx,ecx
c000616d:	56                   	push   esi
c000616e:	53                   	push   ebx
c000616f:	83 ec 50             	sub    esp,0x50
c0006172:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006176:	8d 54 24 04          	lea    edx,[esp+0x4]
c000617a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000617e:	e8 50 c5 ff ff       	call   c00026d3 <mount_volume>
c0006183:	89 c3                	mov    ebx,eax
c0006185:	85 c0                	test   eax,eax
c0006187:	75 67                	jne    c00061f0 <f_stat+0x86>
c0006189:	83 ec 0c             	sub    esp,0xc
c000618c:	bb 11 00 00 00       	mov    ebx,0x11
c0006191:	68 60 04 00 00       	push   0x460
c0006196:	e8 db 22 00 00       	call   c0008476 <ff_memalloc>
c000619b:	83 c4 10             	add    esp,0x10
c000619e:	89 c6                	mov    esi,eax
c00061a0:	85 c0                	test   eax,eax
c00061a2:	74 4c                	je     c00061f0 <f_stat+0x86>
c00061a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061a8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061ae:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061b1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061b4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 88 ec ff ff       	call   c0004e49 <follow_path>
c00061c1:	89 c3                	mov    ebx,eax
c00061c3:	85 c0                	test   eax,eax
c00061c5:	75 1d                	jne    c00061e4 <f_stat+0x7a>
c00061c7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061cc:	78 11                	js     c00061df <f_stat+0x75>
c00061ce:	85 ff                	test   edi,edi
c00061d0:	74 12                	je     c00061e4 <f_stat+0x7a>
c00061d2:	89 fa                	mov    edx,edi
c00061d4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061d8:	e8 e0 e9 ff ff       	call   c0004bbd <get_fileinfo>
c00061dd:	eb 05                	jmp    c00061e4 <f_stat+0x7a>
c00061df:	bb 06 00 00 00       	mov    ebx,0x6
c00061e4:	83 ec 0c             	sub    esp,0xc
c00061e7:	56                   	push   esi
c00061e8:	e8 9f 22 00 00       	call   c000848c <ff_memfree>
c00061ed:	83 c4 10             	add    esp,0x10
c00061f0:	83 c4 50             	add    esp,0x50
c00061f3:	89 d8                	mov    eax,ebx
c00061f5:	5b                   	pop    ebx
c00061f6:	5e                   	pop    esi
c00061f7:	5f                   	pop    edi
c00061f8:	c3                   	ret    

c00061f9 <f_getfree>:
c00061f9:	55                   	push   ebp
c00061fa:	31 c9                	xor    ecx,ecx
c00061fc:	57                   	push   edi
c00061fd:	56                   	push   esi
c00061fe:	53                   	push   ebx
c00061ff:	83 ec 5c             	sub    esp,0x5c
c0006202:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006206:	8d 44 24 70          	lea    eax,[esp+0x70]
c000620a:	e8 c4 c4 ff ff       	call   c00026d3 <mount_volume>
c000620f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006213:	85 c0                	test   eax,eax
c0006215:	0f 85 9d 01 00 00    	jne    c00063b8 <f_getfree+0x1bf>
c000621b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000621f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006223:	89 02                	mov    DWORD PTR [edx],eax
c0006225:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006228:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000622b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000622e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006232:	39 f2                	cmp    edx,esi
c0006234:	77 0b                	ja     c0006241 <f_getfree+0x48>
c0006236:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000623a:	89 10                	mov    DWORD PTR [eax],edx
c000623c:	e9 77 01 00 00       	jmp    c00063b8 <f_getfree+0x1bf>
c0006241:	8a 10                	mov    dl,BYTE PTR [eax]
c0006243:	80 fa 01             	cmp    dl,0x1
c0006246:	75 3a                	jne    c0006282 <f_getfree+0x89>
c0006248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000624c:	be 02 00 00 00       	mov    esi,0x2
c0006251:	31 db                	xor    ebx,ebx
c0006253:	89 f2                	mov    edx,esi
c0006255:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006259:	e8 4b cd ff ff       	call   c0002fa9 <get_fat>
c000625e:	83 f8 ff             	cmp    eax,0xffffffff
c0006261:	0f 84 28 01 00 00    	je     c000638f <f_getfree+0x196>
c0006267:	83 f8 01             	cmp    eax,0x1
c000626a:	0f 84 29 01 00 00    	je     c0006399 <f_getfree+0x1a0>
c0006270:	83 d3 00             	adc    ebx,0x0
c0006273:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006277:	46                   	inc    esi
c0006278:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000627b:	77 d6                	ja     c0006253 <f_getfree+0x5a>
c000627d:	e9 25 01 00 00       	jmp    c00063a7 <f_getfree+0x1ae>
c0006282:	80 fa 04             	cmp    dl,0x4
c0006285:	0f 85 88 00 00 00    	jne    c0006313 <f_getfree+0x11a>
c000628b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000628e:	31 ed                	xor    ebp,ebp
c0006290:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006293:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006297:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000629b:	31 db                	xor    ebx,ebx
c000629d:	85 ed                	test   ebp,ebp
c000629f:	75 3f                	jne    c00062e0 <f_getfree+0xe7>
c00062a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062a9:	83 c0 01             	add    eax,0x1
c00062ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062b0:	83 d2 00             	adc    edx,0x0
c00062b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062c3:	e8 59 c1 ff ff       	call   c0002421 <move_window>
c00062c8:	85 c0                	test   eax,eax
c00062ca:	0f 85 d3 00 00 00    	jne    c00063a3 <f_getfree+0x1aa>
c00062d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062e7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062eb:	89 cf                	mov    edi,ecx
c00062ed:	85 f6                	test   esi,esi
c00062ef:	74 12                	je     c0006303 <f_getfree+0x10a>
c00062f1:	88 c1                	mov    cl,al
c00062f3:	83 e1 01             	and    ecx,0x1
c00062f6:	80 f9 01             	cmp    cl,0x1
c00062f9:	83 d3 00             	adc    ebx,0x0
c00062fc:	d0 e8                	shr    al,1
c00062fe:	4e                   	dec    esi
c00062ff:	39 fe                	cmp    esi,edi
c0006301:	75 ea                	jne    c00062ed <f_getfree+0xf4>
c0006303:	45                   	inc    ebp
c0006304:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000630a:	85 f6                	test   esi,esi
c000630c:	75 8f                	jne    c000629d <f_getfree+0xa4>
c000630e:	e9 94 00 00 00       	jmp    c00063a7 <f_getfree+0x1ae>
c0006313:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006316:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006319:	31 f6                	xor    esi,esi
c000631b:	31 db                	xor    ebx,ebx
c000631d:	85 f6                	test   esi,esi
c000631f:	75 1b                	jne    c000633c <f_getfree+0x143>
c0006321:	89 d7                	mov    edi,edx
c0006323:	89 cd                	mov    ebp,ecx
c0006325:	83 c7 01             	add    edi,0x1
c0006328:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000632c:	83 d5 00             	adc    ebp,0x0
c000632f:	e8 ed c0 ff ff       	call   c0002421 <move_window>
c0006334:	85 c0                	test   eax,eax
c0006336:	75 6b                	jne    c00063a3 <f_getfree+0x1aa>
c0006338:	89 fa                	mov    edx,edi
c000633a:	89 e9                	mov    ecx,ebp
c000633c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006340:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006344:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006348:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000634b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000634f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006353:	75 11                	jne    c0006366 <f_getfree+0x16d>
c0006355:	e8 e9 b8 ff ff       	call   c0001c43 <ld_word>
c000635a:	66 83 f8 01          	cmp    ax,0x1
c000635e:	83 d3 00             	adc    ebx,0x0
c0006361:	83 c6 02             	add    esi,0x2
c0006364:	eb 13                	jmp    c0006379 <f_getfree+0x180>
c0006366:	e8 e5 b8 ff ff       	call   c0001c50 <ld_dword>
c000636b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006370:	83 f8 01             	cmp    eax,0x1
c0006373:	83 d3 00             	adc    ebx,0x0
c0006376:	83 c6 04             	add    esi,0x4
c0006379:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000637f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006383:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006387:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000638b:	75 90                	jne    c000631d <f_getfree+0x124>
c000638d:	eb 18                	jmp    c00063a7 <f_getfree+0x1ae>
c000638f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006397:	eb 0e                	jmp    c00063a7 <f_getfree+0x1ae>
c0006399:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063a1:	eb 04                	jmp    c00063a7 <f_getfree+0x1ae>
c00063a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063a7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063ab:	89 18                	mov    DWORD PTR [eax],ebx
c00063ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063b1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063b4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063bc:	83 c4 5c             	add    esp,0x5c
c00063bf:	5b                   	pop    ebx
c00063c0:	5e                   	pop    esi
c00063c1:	5f                   	pop    edi
c00063c2:	5d                   	pop    ebp
c00063c3:	c3                   	ret    

c00063c4 <f_truncate>:
c00063c4:	56                   	push   esi
c00063c5:	53                   	push   ebx
c00063c6:	83 ec 14             	sub    esp,0x14
c00063c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063cd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063d1:	89 d8                	mov    eax,ebx
c00063d3:	e8 6e bf ff ff       	call   c0002346 <validate>
c00063d8:	89 c6                	mov    esi,eax
c00063da:	85 c0                	test   eax,eax
c00063dc:	0f 85 d2 00 00 00    	jne    c00064b4 <f_truncate+0xf0>
c00063e2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063e6:	85 f6                	test   esi,esi
c00063e8:	0f 85 c6 00 00 00    	jne    c00064b4 <f_truncate+0xf0>
c00063ee:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063f2:	0f 84 b7 00 00 00    	je     c00064af <f_truncate+0xeb>
c00063f8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063fb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063fe:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006401:	89 d1                	mov    ecx,edx
c0006403:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006406:	0f 83 a8 00 00 00    	jae    c00064b4 <f_truncate+0xf0>
c000640c:	09 c2                	or     edx,eax
c000640e:	75 15                	jne    c0006425 <f_truncate+0x61>
c0006410:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006413:	31 c9                	xor    ecx,ecx
c0006415:	89 d8                	mov    eax,ebx
c0006417:	e8 7a d0 ff ff       	call   c0003496 <remove_chain>
c000641c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006423:	eb 35                	jmp    c000645a <f_truncate+0x96>
c0006425:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006428:	89 d8                	mov    eax,ebx
c000642a:	e8 7a cb ff ff       	call   c0002fa9 <get_fat>
c000642f:	89 c2                	mov    edx,eax
c0006431:	b8 01 00 00 00       	mov    eax,0x1
c0006436:	83 fa ff             	cmp    edx,0xffffffff
c0006439:	74 1f                	je     c000645a <f_truncate+0x96>
c000643b:	b8 02 00 00 00       	mov    eax,0x2
c0006440:	83 fa 01             	cmp    edx,0x1
c0006443:	74 15                	je     c000645a <f_truncate+0x96>
c0006445:	31 c0                	xor    eax,eax
c0006447:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000644b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000644e:	76 0a                	jbe    c000645a <f_truncate+0x96>
c0006450:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006453:	89 d8                	mov    eax,ebx
c0006455:	e8 3c d0 ff ff       	call   c0003496 <remove_chain>
c000645a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000645d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006460:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006463:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006466:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006469:	83 ca 40             	or     edx,0x40
c000646c:	85 c0                	test   eax,eax
c000646e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006471:	75 35                	jne    c00064a8 <f_truncate+0xe4>
c0006473:	84 d2                	test   dl,dl
c0006475:	79 3d                	jns    c00064b4 <f_truncate+0xf0>
c0006477:	83 ec 0c             	sub    esp,0xc
c000647a:	8d 43 50             	lea    eax,[ebx+0x50]
c000647d:	6a 01                	push   0x1
c000647f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006482:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006485:	50                   	push   eax
c0006486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000648a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000648e:	50                   	push   eax
c000648f:	e8 7a b7 ff ff       	call   c0001c0e <disk_write>
c0006494:	83 c4 20             	add    esp,0x20
c0006497:	85 c0                	test   eax,eax
c0006499:	75 08                	jne    c00064a3 <f_truncate+0xdf>
c000649b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000649f:	31 f6                	xor    esi,esi
c00064a1:	eb 11                	jmp    c00064b4 <f_truncate+0xf0>
c00064a3:	b8 01 00 00 00       	mov    eax,0x1
c00064a8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064ab:	89 c6                	mov    esi,eax
c00064ad:	eb 05                	jmp    c00064b4 <f_truncate+0xf0>
c00064af:	be 07 00 00 00       	mov    esi,0x7
c00064b4:	89 f0                	mov    eax,esi
c00064b6:	83 c4 14             	add    esp,0x14
c00064b9:	5b                   	pop    ebx
c00064ba:	5e                   	pop    esi
c00064bb:	c3                   	ret    

c00064bc <f_unlink>:
c00064bc:	56                   	push   esi
c00064bd:	b9 02 00 00 00       	mov    ecx,0x2
c00064c2:	53                   	push   ebx
c00064c3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064c9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064cd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064d4:	e8 fa c1 ff ff       	call   c00026d3 <mount_volume>
c00064d9:	85 c0                	test   eax,eax
c00064db:	0f 85 55 01 00 00    	jne    c0006636 <f_unlink+0x17a>
c00064e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064e5:	83 ec 0c             	sub    esp,0xc
c00064e8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064ec:	68 60 04 00 00       	push   0x460
c00064f1:	e8 80 1f 00 00       	call   c0008476 <ff_memalloc>
c00064f6:	83 c4 10             	add    esp,0x10
c00064f9:	89 c3                	mov    ebx,eax
c00064fb:	b8 11 00 00 00       	mov    eax,0x11
c0006500:	85 db                	test   ebx,ebx
c0006502:	0f 84 2e 01 00 00    	je     c0006636 <f_unlink+0x17a>
c0006508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006512:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006515:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006518:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000651f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006523:	e8 21 e9 ff ff       	call   c0004e49 <follow_path>
c0006528:	85 c0                	test   eax,eax
c000652a:	0f 85 f2 00 00 00    	jne    c0006622 <f_unlink+0x166>
c0006530:	b8 06 00 00 00       	mov    eax,0x6
c0006535:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000653d:	0f 88 df 00 00 00    	js     c0006622 <f_unlink+0x166>
c0006543:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006548:	74 0a                	je     c0006554 <f_unlink+0x98>
c000654a:	b8 07 00 00 00       	mov    eax,0x7
c000654f:	e9 ce 00 00 00       	jmp    c0006622 <f_unlink+0x166>
c0006554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006558:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000655c:	8a 02                	mov    al,BYTE PTR [edx]
c000655e:	3c 04                	cmp    al,0x4
c0006560:	75 12                	jne    c0006574 <f_unlink+0xb8>
c0006562:	8d 42 10             	lea    eax,[edx+0x10]
c0006565:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006569:	e8 a1 e8 ff ff       	call   c0004e0f <init_alloc_info.isra.2>
c000656e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006572:	eb 0e                	jmp    c0006582 <f_unlink+0xc6>
c0006574:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000657b:	e8 3e e8 ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006580:	89 c6                	mov    esi,eax
c0006582:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006587:	75 12                	jne    c000659b <f_unlink+0xdf>
c0006589:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658d:	e8 94 d6 ff ff       	call   c0003c26 <dir_remove>
c0006592:	85 c0                	test   eax,eax
c0006594:	74 6c                	je     c0006602 <f_unlink+0x146>
c0006596:	e9 87 00 00 00       	jmp    c0006622 <f_unlink+0x166>
c000659b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000659f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065a6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ad:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b0:	75 21                	jne    c00065d3 <f_unlink+0x117>
c00065b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065ba:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065c1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065c8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065cc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065d3:	31 d2                	xor    edx,edx
c00065d5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065dc:	e8 be cb ff ff       	call   c000319f <dir_sdi>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	75 3d                	jne    c0006622 <f_unlink+0x166>
c00065e5:	31 d2                	xor    edx,edx
c00065e7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065ee:	e8 bc d3 ff ff       	call   c00039af <dir_read>
c00065f3:	85 c0                	test   eax,eax
c00065f5:	0f 84 4f ff ff ff    	je     c000654a <f_unlink+0x8e>
c00065fb:	83 f8 04             	cmp    eax,0x4
c00065fe:	75 22                	jne    c0006622 <f_unlink+0x166>
c0006600:	eb 87                	jmp    c0006589 <f_unlink+0xcd>
c0006602:	85 f6                	test   esi,esi
c0006604:	75 0b                	jne    c0006611 <f_unlink+0x155>
c0006606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000660a:	e8 3d df ff ff       	call   c000454c <sync_fs>
c000660f:	eb 11                	jmp    c0006622 <f_unlink+0x166>
c0006611:	31 c9                	xor    ecx,ecx
c0006613:	89 f2                	mov    edx,esi
c0006615:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006619:	e8 78 ce ff ff       	call   c0003496 <remove_chain>
c000661e:	85 c0                	test   eax,eax
c0006620:	74 e4                	je     c0006606 <f_unlink+0x14a>
c0006622:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006626:	83 ec 0c             	sub    esp,0xc
c0006629:	53                   	push   ebx
c000662a:	e8 5d 1e 00 00       	call   c000848c <ff_memfree>
c000662f:	83 c4 10             	add    esp,0x10
c0006632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006636:	81 c4 e4 00 00 00    	add    esp,0xe4
c000663c:	5b                   	pop    ebx
c000663d:	5e                   	pop    esi
c000663e:	c3                   	ret    

c000663f <f_mkdir>:
c000663f:	57                   	push   edi
c0006640:	b9 02 00 00 00       	mov    ecx,0x2
c0006645:	56                   	push   esi
c0006646:	53                   	push   ebx
c0006647:	83 c4 80             	add    esp,0xffffff80
c000664a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000664e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006655:	e8 79 c0 ff ff       	call   c00026d3 <mount_volume>
c000665a:	89 c3                	mov    ebx,eax
c000665c:	85 c0                	test   eax,eax
c000665e:	0f 85 fe 01 00 00    	jne    c0006862 <f_mkdir+0x223>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	bb 11 00 00 00       	mov    ebx,0x11
c000666d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006671:	83 ec 0c             	sub    esp,0xc
c0006674:	68 60 04 00 00       	push   0x460
c0006679:	e8 f8 1d 00 00       	call   c0008476 <ff_memalloc>
c000667e:	83 c4 10             	add    esp,0x10
c0006681:	89 c7                	mov    edi,eax
c0006683:	85 c0                	test   eax,eax
c0006685:	0f 84 d7 01 00 00    	je     c0006862 <f_mkdir+0x223>
c000668b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006695:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006698:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000669b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 9e e7 ff ff       	call   c0004e49 <follow_path>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	74 3e                	je     c00066ef <f_mkdir+0xb0>
c00066b1:	83 f8 04             	cmp    eax,0x4
c00066b4:	75 3e                	jne    c00066f4 <f_mkdir+0xb5>
c00066b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ba:	31 d2                	xor    edx,edx
c00066bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066c4:	e8 ce cb ff ff       	call   c0003297 <create_chain>
c00066c9:	89 c6                	mov    esi,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 0c                	je     c00066db <f_mkdir+0x9c>
c00066cf:	bb 02 00 00 00       	mov    ebx,0x2
c00066d4:	83 f8 01             	cmp    eax,0x1
c00066d7:	74 07                	je     c00066e0 <f_mkdir+0xa1>
c00066d9:	eb 2a                	jmp    c0006705 <f_mkdir+0xc6>
c00066db:	bb 07 00 00 00       	mov    ebx,0x7
c00066e0:	31 c9                	xor    ecx,ecx
c00066e2:	89 f2                	mov    edx,esi
c00066e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e8:	e8 a9 cd ff ff       	call   c0003496 <remove_chain>
c00066ed:	eb 05                	jmp    c00066f4 <f_mkdir+0xb5>
c00066ef:	bb 08 00 00 00       	mov    ebx,0x8
c00066f4:	83 ec 0c             	sub    esp,0xc
c00066f7:	57                   	push   edi
c00066f8:	e8 8f 1d 00 00       	call   c000848c <ff_memfree>
c00066fd:	83 c4 10             	add    esp,0x10
c0006700:	e9 5d 01 00 00       	jmp    c0006862 <f_mkdir+0x223>
c0006705:	bb 01 00 00 00       	mov    ebx,0x1
c000670a:	83 f8 ff             	cmp    eax,0xffffffff
c000670d:	74 d1                	je     c00066e0 <f_mkdir+0xa1>
c000670f:	89 f2                	mov    edx,esi
c0006711:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006715:	e8 c4 ce ff ff       	call   c00035de <dir_clear>
c000671a:	89 c3                	mov    ebx,eax
c000671c:	85 c0                	test   eax,eax
c000671e:	75 c0                	jne    c00066e0 <f_mkdir+0xa1>
c0006720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006724:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006727:	74 69                	je     c0006792 <f_mkdir+0x153>
c0006729:	b9 0b 00 00 00       	mov    ecx,0xb
c000672e:	83 c0 54             	add    eax,0x54
c0006731:	ba 20 00 00 00       	mov    edx,0x20
c0006736:	e8 9c b5 ff ff       	call   c0001cd7 <mem_set>
c000673b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006744:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006748:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000674c:	83 c0 6a             	add    eax,0x6a
c000674f:	e8 65 b5 ff ff       	call   c0001cb9 <st_dword>
c0006754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006758:	89 f1                	mov    ecx,esi
c000675a:	8d 50 54             	lea    edx,[eax+0x54]
c000675d:	e8 85 e6 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	b9 20 00 00 00       	mov    ecx,0x20
c000676b:	8d 50 54             	lea    edx,[eax+0x54]
c000676e:	83 c0 74             	add    eax,0x74
c0006771:	e8 4c b5 ff ff       	call   c0001cc2 <mem_cpy>
c0006776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000677e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006782:	8d 50 74             	lea    edx,[eax+0x74]
c0006785:	e8 5d e6 ff ff       	call   c0004de7 <st_clust.isra.1>
c000678a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006792:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006796:	e8 2f db ff ff       	call   c00042ca <dir_register>
c000679b:	89 c3                	mov    ebx,eax
c000679d:	85 c0                	test   eax,eax
c000679f:	0f 85 3b ff ff ff    	jne    c00066e0 <f_mkdir+0xa1>
c00067a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ac:	75 74                	jne    c0006822 <f_mkdir+0x1e3>
c00067ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067b1:	ba 00 00 21 50       	mov    edx,0x50210000
c00067b6:	83 c0 0c             	add    eax,0xc
c00067b9:	e8 fb b4 ff ff       	call   c0001cb9 <st_dword>
c00067be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c2:	89 f2                	mov    edx,esi
c00067c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c7:	83 c0 34             	add    eax,0x34
c00067ca:	e8 ea b4 ff ff       	call   c0001cb9 <st_dword>
c00067cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067da:	c1 e2 09             	shl    edx,0x9
c00067dd:	83 c0 38             	add    eax,0x38
c00067e0:	e8 d4 b4 ff ff       	call   c0001cb9 <st_dword>
c00067e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f0:	c1 e2 09             	shl    edx,0x9
c00067f3:	83 c0 28             	add    eax,0x28
c00067f6:	e8 be b4 ff ff       	call   c0001cb9 <st_dword>
c00067fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ff:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006802:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006809:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000680d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006811:	e8 8b d3 ff ff       	call   c0003ba1 <store_xdir>
c0006816:	89 c3                	mov    ebx,eax
c0006818:	85 c0                	test   eax,eax
c000681a:	0f 85 d4 fe ff ff    	jne    c00066f4 <f_mkdir+0xb5>
c0006820:	eb 30                	jmp    c0006852 <f_mkdir+0x213>
c0006822:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006826:	ba 00 00 21 50       	mov    edx,0x50210000
c000682b:	83 c0 16             	add    eax,0x16
c000682e:	e8 86 b4 ff ff       	call   c0001cb9 <st_dword>
c0006833:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006837:	89 f1                	mov    ecx,esi
c0006839:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000683d:	e8 a5 e5 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006842:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006846:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000684a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000684e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006856:	e8 f1 dc ff ff       	call   c000454c <sync_fs>
c000685b:	89 c3                	mov    ebx,eax
c000685d:	e9 92 fe ff ff       	jmp    c00066f4 <f_mkdir+0xb5>
c0006862:	83 ec 80             	sub    esp,0xffffff80
c0006865:	89 d8                	mov    eax,ebx
c0006867:	5b                   	pop    ebx
c0006868:	5e                   	pop    esi
c0006869:	5f                   	pop    edi
c000686a:	c3                   	ret    

c000686b <f_rename>:
c000686b:	55                   	push   ebp
c000686c:	57                   	push   edi
c000686d:	56                   	push   esi
c000686e:	53                   	push   ebx
c000686f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006875:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000687c:	e8 a4 b9 ff ff       	call   c0002225 <get_ldnumber>
c0006881:	b9 02 00 00 00       	mov    ecx,0x2
c0006886:	8d 54 24 14          	lea    edx,[esp+0x14]
c000688a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006891:	e8 3d be ff ff       	call   c00026d3 <mount_volume>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 b5 02 00 00    	jne    c0006b53 <f_rename+0x2e8>
c000689e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a2:	83 ec 0c             	sub    esp,0xc
c00068a5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068a9:	68 60 04 00 00       	push   0x460
c00068ae:	e8 c3 1b 00 00       	call   c0008476 <ff_memalloc>
c00068b3:	83 c4 10             	add    esp,0x10
c00068b6:	89 c3                	mov    ebx,eax
c00068b8:	b8 11 00 00 00       	mov    eax,0x11
c00068bd:	85 db                	test   ebx,ebx
c00068bf:	0f 84 8e 02 00 00    	je     c0006b53 <f_rename+0x2e8>
c00068c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068cf:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068d2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068d5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 64 e5 ff ff       	call   c0004e49 <follow_path>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	0f 85 52 02 00 00    	jne    c0006b3f <f_rename+0x2d4>
c00068ed:	b8 06 00 00 00       	mov    eax,0x6
c00068f2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068fa:	0f 85 3f 02 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006900:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006904:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006907:	0f 85 05 01 00 00    	jne    c0006a12 <f_rename+0x1a7>
c000690d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006910:	b9 40 00 00 00       	mov    ecx,0x40
c0006915:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006919:	e8 a4 b3 ff ff       	call   c0001cc2 <mem_cpy>
c000691e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006923:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006927:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000692e:	e8 8f b3 ff ff       	call   c0001cc2 <mem_cpy>
c0006933:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000693a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006941:	e8 03 e5 ff ff       	call   c0004e49 <follow_path>
c0006946:	85 c0                	test   eax,eax
c0006948:	75 29                	jne    c0006973 <f_rename+0x108>
c000694a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000694e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006955:	74 0a                	je     c0006961 <f_rename+0xf6>
c0006957:	b8 08 00 00 00       	mov    eax,0x8
c000695c:	e9 de 01 00 00       	jmp    c0006b3f <f_rename+0x2d4>
c0006961:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006968:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000696f:	75 e6                	jne    c0006957 <f_rename+0xec>
c0006971:	eb 09                	jmp    c000697c <f_rename+0x111>
c0006973:	83 f8 04             	cmp    eax,0x4
c0006976:	0f 85 c3 01 00 00    	jne    c0006b3f <f_rename+0x2d4>
c000697c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006983:	e8 42 d9 ff ff       	call   c00042ca <dir_register>
c0006988:	85 c0                	test   eax,eax
c000698a:	0f 85 af 01 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006994:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006997:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000699a:	89 c5                	mov    ebp,eax
c000699c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000699f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069a3:	8d 46 24             	lea    eax,[esi+0x24]
c00069a6:	e8 98 b2 ff ff       	call   c0001c43 <ld_word>
c00069ab:	b9 40 00 00 00       	mov    ecx,0x40
c00069b0:	89 c7                	mov    edi,eax
c00069b2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069b6:	89 f0                	mov    eax,esi
c00069b8:	e8 05 b3 ff ff       	call   c0001cc2 <mem_cpy>
c00069bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069c1:	89 e9                	mov    ecx,ebp
c00069c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069c9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069d7:	0f b7 d7             	movzx  edx,di
c00069da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069dd:	83 c0 24             	add    eax,0x24
c00069e0:	e8 d0 b2 ff ff       	call   c0001cb5 <st_word>
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069ec:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069ef:	a8 10                	test   al,0x10
c00069f1:	75 06                	jne    c00069f9 <f_rename+0x18e>
c00069f3:	83 c8 20             	or     eax,0x20
c00069f6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069f9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a00:	e8 9c d1 ff ff       	call   c0003ba1 <store_xdir>
c0006a05:	85 c0                	test   eax,eax
c0006a07:	0f 84 1c 01 00 00    	je     c0006b29 <f_rename+0x2be>
c0006a0d:	e9 2d 01 00 00       	jmp    c0006b3f <f_rename+0x2d4>
c0006a12:	b9 20 00 00 00       	mov    ecx,0x20
c0006a17:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a22:	e8 9b b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006a27:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a2c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a30:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a37:	e8 86 b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006a3c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a43:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a4a:	e8 fa e3 ff ff       	call   c0004e49 <follow_path>
c0006a4f:	85 c0                	test   eax,eax
c0006a51:	75 27                	jne    c0006a7a <f_rename+0x20f>
c0006a53:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a57:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a5e:	0f 85 f3 fe ff ff    	jne    c0006957 <f_rename+0xec>
c0006a64:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a6b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a72:	0f 85 df fe ff ff    	jne    c0006957 <f_rename+0xec>
c0006a78:	eb 09                	jmp    c0006a83 <f_rename+0x218>
c0006a7a:	83 f8 04             	cmp    eax,0x4
c0006a7d:	0f 85 bc 00 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006a83:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a8a:	e8 3b d8 ff ff       	call   c00042ca <dir_register>
c0006a8f:	85 c0                	test   eax,eax
c0006a91:	0f 85 a8 00 00 00    	jne    c0006b3f <f_rename+0x2d4>
c0006a97:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a9e:	b9 13 00 00 00       	mov    ecx,0x13
c0006aa3:	8d 46 0d             	lea    eax,[esi+0xd]
c0006aa6:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aaa:	e8 13 b2 ff ff       	call   c0001cc2 <mem_cpy>
c0006aaf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ab3:	a8 10                	test   al,0x10
c0006ab5:	75 03                	jne    c0006aba <f_rename+0x24f>
c0006ab7:	83 c8 20             	or     eax,0x20
c0006aba:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006abd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ac9:	74 5e                	je     c0006b29 <f_rename+0x2be>
c0006acb:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ad2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006ad6:	74 51                	je     c0006b29 <f_rename+0x2be>
c0006ad8:	89 f2                	mov    edx,esi
c0006ada:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ade:	8a 07                	mov    al,BYTE PTR [edi]
c0006ae0:	e8 d9 e2 ff ff       	call   c0004dbe <ld_clust.isra.0>
c0006ae5:	89 c2                	mov    edx,eax
c0006ae7:	89 f8                	mov    eax,edi
c0006ae9:	e8 ee b3 ff ff       	call   c0001edc <clst2sect>
c0006aee:	89 c6                	mov    esi,eax
c0006af0:	89 d1                	mov    ecx,edx
c0006af2:	b8 02 00 00 00       	mov    eax,0x2
c0006af7:	09 f2                	or     edx,esi
c0006af9:	74 44                	je     c0006b3f <f_rename+0x2d4>
c0006afb:	89 f2                	mov    edx,esi
c0006afd:	89 f8                	mov    eax,edi
c0006aff:	e8 1d b9 ff ff       	call   c0002421 <move_window>
c0006b04:	85 c0                	test   eax,eax
c0006b06:	75 37                	jne    c0006b3f <f_rename+0x2d4>
c0006b08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b0c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b10:	75 17                	jne    c0006b29 <f_rename+0x2be>
c0006b12:	8d 50 74             	lea    edx,[eax+0x74]
c0006b15:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b1c:	e8 c6 e2 ff ff       	call   c0004de7 <st_clust.isra.1>
c0006b21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b25:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b29:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b2d:	e8 f4 d0 ff ff       	call   c0003c26 <dir_remove>
c0006b32:	85 c0                	test   eax,eax
c0006b34:	75 09                	jne    c0006b3f <f_rename+0x2d4>
c0006b36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b3a:	e8 0d da ff ff       	call   c000454c <sync_fs>
c0006b3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b43:	83 ec 0c             	sub    esp,0xc
c0006b46:	53                   	push   ebx
c0006b47:	e8 40 19 00 00       	call   c000848c <ff_memfree>
c0006b4c:	83 c4 10             	add    esp,0x10
c0006b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b53:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b59:	5b                   	pop    ebx
c0006b5a:	5e                   	pop    esi
c0006b5b:	5f                   	pop    edi
c0006b5c:	5d                   	pop    ebp
c0006b5d:	c3                   	ret    

c0006b5e <f_chmod>:
c0006b5e:	57                   	push   edi
c0006b5f:	b9 02 00 00 00       	mov    ecx,0x2
c0006b64:	56                   	push   esi
c0006b65:	53                   	push   ebx
c0006b66:	83 ec 60             	sub    esp,0x60
c0006b69:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b6d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b71:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b75:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b79:	e8 55 bb ff ff       	call   c00026d3 <mount_volume>
c0006b7e:	85 c0                	test   eax,eax
c0006b80:	0f 85 af 00 00 00    	jne    c0006c35 <f_chmod+0xd7>
c0006b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8a:	83 ec 0c             	sub    esp,0xc
c0006b8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b91:	68 60 04 00 00       	push   0x460
c0006b96:	e8 db 18 00 00       	call   c0008476 <ff_memalloc>
c0006b9b:	83 c4 10             	add    esp,0x10
c0006b9e:	89 c6                	mov    esi,eax
c0006ba0:	b8 11 00 00 00       	mov    eax,0x11
c0006ba5:	85 f6                	test   esi,esi
c0006ba7:	0f 84 88 00 00 00    	je     c0006c35 <f_chmod+0xd7>
c0006bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bb7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc5:	e8 7f e2 ff ff       	call   c0004e49 <follow_path>
c0006bca:	85 c0                	test   eax,eax
c0006bcc:	75 53                	jne    c0006c21 <f_chmod+0xc3>
c0006bce:	b8 06 00 00 00       	mov    eax,0x6
c0006bd3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd8:	75 47                	jne    c0006c21 <f_chmod+0xc3>
c0006bda:	89 f9                	mov    ecx,edi
c0006bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be0:	83 e1 27             	and    ecx,0x27
c0006be3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006be6:	75 1d                	jne    c0006c05 <f_chmod+0xa7>
c0006be8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006beb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bee:	21 cb                	and    ebx,ecx
c0006bf0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bf3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bf6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bfa:	e8 a2 cf ff ff       	call   c0003ba1 <store_xdir>
c0006bff:	85 c0                	test   eax,eax
c0006c01:	75 1e                	jne    c0006c21 <f_chmod+0xc3>
c0006c03:	eb 13                	jmp    c0006c18 <f_chmod+0xba>
c0006c05:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c09:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c11:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c14:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1c:	e8 2b d9 ff ff       	call   c000454c <sync_fs>
c0006c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c25:	83 ec 0c             	sub    esp,0xc
c0006c28:	56                   	push   esi
c0006c29:	e8 5e 18 00 00       	call   c000848c <ff_memfree>
c0006c2e:	83 c4 10             	add    esp,0x10
c0006c31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c35:	83 c4 60             	add    esp,0x60
c0006c38:	5b                   	pop    ebx
c0006c39:	5e                   	pop    esi
c0006c3a:	5f                   	pop    edi
c0006c3b:	c3                   	ret    

c0006c3c <f_utime>:
c0006c3c:	56                   	push   esi
c0006c3d:	b9 02 00 00 00       	mov    ecx,0x2
c0006c42:	53                   	push   ebx
c0006c43:	83 ec 64             	sub    esp,0x64
c0006c46:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c4a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c52:	e8 7c ba ff ff       	call   c00026d3 <mount_volume>
c0006c57:	85 c0                	test   eax,eax
c0006c59:	0f 85 b5 00 00 00    	jne    c0006d14 <f_utime+0xd8>
c0006c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c63:	83 ec 0c             	sub    esp,0xc
c0006c66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c6a:	68 60 04 00 00       	push   0x460
c0006c6f:	e8 02 18 00 00       	call   c0008476 <ff_memalloc>
c0006c74:	83 c4 10             	add    esp,0x10
c0006c77:	89 c3                	mov    ebx,eax
c0006c79:	b8 11 00 00 00       	mov    eax,0x11
c0006c7e:	85 db                	test   ebx,ebx
c0006c80:	0f 84 8e 00 00 00    	je     c0006d14 <f_utime+0xd8>
c0006c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c90:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c93:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c96:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9e:	e8 a6 e1 ff ff       	call   c0004e49 <follow_path>
c0006ca3:	85 c0                	test   eax,eax
c0006ca5:	75 59                	jne    c0006d00 <f_utime+0xc4>
c0006ca7:	b8 06 00 00 00       	mov    eax,0x6
c0006cac:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cb1:	75 4d                	jne    c0006d00 <f_utime+0xc4>
c0006cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cbb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cbf:	c1 e2 10             	shl    edx,0x10
c0006cc2:	09 ca                	or     edx,ecx
c0006cc4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cc7:	75 1a                	jne    c0006ce3 <f_utime+0xa7>
c0006cc9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ccc:	83 c0 0c             	add    eax,0xc
c0006ccf:	e8 e5 af ff ff       	call   c0001cb9 <st_dword>
c0006cd4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cd8:	e8 c4 ce ff ff       	call   c0003ba1 <store_xdir>
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	75 1f                	jne    c0006d00 <f_utime+0xc4>
c0006ce1:	eb 14                	jmp    c0006cf7 <f_utime+0xbb>
c0006ce3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ce7:	83 c0 16             	add    eax,0x16
c0006cea:	e8 ca af ff ff       	call   c0001cb9 <st_dword>
c0006cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cfb:	e8 4c d8 ff ff       	call   c000454c <sync_fs>
c0006d00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d04:	83 ec 0c             	sub    esp,0xc
c0006d07:	53                   	push   ebx
c0006d08:	e8 7f 17 00 00       	call   c000848c <ff_memfree>
c0006d0d:	83 c4 10             	add    esp,0x10
c0006d10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d14:	83 c4 64             	add    esp,0x64
c0006d17:	5b                   	pop    ebx
c0006d18:	5e                   	pop    esi
c0006d19:	c3                   	ret    

c0006d1a <f_getlabel>:
c0006d1a:	55                   	push   ebp
c0006d1b:	31 c9                	xor    ecx,ecx
c0006d1d:	57                   	push   edi
c0006d1e:	56                   	push   esi
c0006d1f:	53                   	push   ebx
c0006d20:	83 ec 6c             	sub    esp,0x6c
c0006d23:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d27:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2e:	e8 a0 b9 ff ff       	call   c00026d3 <mount_volume>
c0006d33:	89 c6                	mov    esi,eax
c0006d35:	85 c0                	test   eax,eax
c0006d37:	0f 85 c1 01 00 00    	jne    c0006efe <f_getlabel+0x1e4>
c0006d3d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d45:	0f 84 5f 01 00 00    	je     c0006eaa <f_getlabel+0x190>
c0006d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d4f:	31 d2                	xor    edx,edx
c0006d51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d55:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d61:	e8 39 c4 ff ff       	call   c000319f <dir_sdi>
c0006d66:	85 c0                	test   eax,eax
c0006d68:	0f 85 2d 01 00 00    	jne    c0006e9b <f_getlabel+0x181>
c0006d6e:	ba 01 00 00 00       	mov    edx,0x1
c0006d73:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d77:	e8 33 cc ff ff       	call   c00039af <dir_read>
c0006d7c:	85 c0                	test   eax,eax
c0006d7e:	0f 85 17 01 00 00    	jne    c0006e9b <f_getlabel+0x181>
c0006d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d88:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d8b:	74 09                	je     c0006d96 <f_getlabel+0x7c>
c0006d8d:	31 db                	xor    ebx,ebx
c0006d8f:	31 c9                	xor    ecx,ecx
c0006d91:	e9 c8 00 00 00       	jmp    c0006e5e <f_getlabel+0x144>
c0006d96:	31 ed                	xor    ebp,ebp
c0006d98:	31 db                	xor    ebx,ebx
c0006d9a:	31 ff                	xor    edi,edi
c0006d9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006da0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006da4:	39 fa                	cmp    edx,edi
c0006da6:	76 4b                	jbe    c0006df3 <f_getlabel+0xd9>
c0006da8:	47                   	inc    edi
c0006da9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dac:	01 d0                	add    eax,edx
c0006dae:	e8 90 ae ff ff       	call   c0001c43 <ld_word>
c0006db3:	66 85 ed             	test   bp,bp
c0006db6:	75 0d                	jne    c0006dc5 <f_getlabel+0xab>
c0006db8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dbe:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dc3:	76 28                	jbe    c0006ded <f_getlabel+0xd3>
c0006dc5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dcc:	89 e9                	mov    ecx,ebp
c0006dce:	01 da                	add    edx,ebx
c0006dd0:	c1 e1 10             	shl    ecx,0x10
c0006dd3:	0f b7 c0             	movzx  eax,ax
c0006dd6:	09 c8                	or     eax,ecx
c0006dd8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ddd:	e8 01 b0 ff ff       	call   c0001de3 <put_utf>
c0006de2:	84 c0                	test   al,al
c0006de4:	74 0b                	je     c0006df1 <f_getlabel+0xd7>
c0006de6:	0f b6 c0             	movzx  eax,al
c0006de9:	01 c3                	add    ebx,eax
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	89 c5                	mov    ebp,eax
c0006def:	eb ab                	jmp    c0006d9c <f_getlabel+0x82>
c0006df1:	31 db                	xor    ebx,ebx
c0006df3:	66 85 ed             	test   bp,bp
c0006df6:	74 02                	je     c0006dfa <f_getlabel+0xe0>
c0006df8:	31 db                	xor    ebx,ebx
c0006dfa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e01:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e05:	e9 a0 00 00 00       	jmp    c0006eaa <f_getlabel+0x190>
c0006e0a:	83 ff 0b             	cmp    edi,0xb
c0006e0d:	74 11                	je     c0006e20 <f_getlabel+0x106>
c0006e0f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e18:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e1b:	c1 e0 08             	shl    eax,0x8
c0006e1e:	09 c2                	or     edx,eax
c0006e20:	0f b7 d2             	movzx  edx,dx
c0006e23:	50                   	push   eax
c0006e24:	50                   	push   eax
c0006e25:	68 b5 01 00 00       	push   0x1b5
c0006e2a:	52                   	push   edx
c0006e2b:	e8 03 17 00 00       	call   c0008533 <ff_oem2uni>
c0006e30:	83 c4 10             	add    esp,0x10
c0006e33:	66 85 c0             	test   ax,ax
c0006e36:	74 46                	je     c0006e7e <f_getlabel+0x164>
c0006e38:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e3f:	0f b7 c0             	movzx  eax,ax
c0006e42:	01 da                	add    edx,ebx
c0006e44:	b9 04 00 00 00       	mov    ecx,0x4
c0006e49:	e8 95 af ff ff       	call   c0001de3 <put_utf>
c0006e4e:	84 c0                	test   al,al
c0006e50:	74 2c                	je     c0006e7e <f_getlabel+0x164>
c0006e52:	0f b6 c0             	movzx  eax,al
c0006e55:	01 c3                	add    ebx,eax
c0006e57:	83 ff 0b             	cmp    edi,0xb
c0006e5a:	74 24                	je     c0006e80 <f_getlabel+0x166>
c0006e5c:	89 f9                	mov    ecx,edi
c0006e5e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e62:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e65:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e6a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e73:	e8 9f ae ff ff       	call   c0001d17 <dbc_1st>
c0006e78:	85 c0                	test   eax,eax
c0006e7a:	74 a4                	je     c0006e20 <f_getlabel+0x106>
c0006e7c:	eb 8c                	jmp    c0006e0a <f_getlabel+0xf0>
c0006e7e:	31 db                	xor    ebx,ebx
c0006e80:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e87:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e8a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e91:	74 17                	je     c0006eaa <f_getlabel+0x190>
c0006e93:	4b                   	dec    ebx
c0006e94:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e97:	74 ee                	je     c0006e87 <f_getlabel+0x16d>
c0006e99:	eb 0f                	jmp    c0006eaa <f_getlabel+0x190>
c0006e9b:	83 f8 04             	cmp    eax,0x4
c0006e9e:	75 5c                	jne    c0006efc <f_getlabel+0x1e2>
c0006ea0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ea7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006eaa:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006eb2:	74 4a                	je     c0006efe <f_getlabel+0x1e4>
c0006eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ebb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ebe:	e8 5e b5 ff ff       	call   c0002421 <move_window>
c0006ec3:	89 c6                	mov    esi,eax
c0006ec5:	85 c0                	test   eax,eax
c0006ec7:	75 35                	jne    c0006efe <f_getlabel+0x1e4>
c0006ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ecd:	b8 43 00 00 00       	mov    eax,0x43
c0006ed2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ed4:	80 f9 03             	cmp    cl,0x3
c0006ed7:	74 0f                	je     c0006ee8 <f_getlabel+0x1ce>
c0006ed9:	31 c0                	xor    eax,eax
c0006edb:	80 f9 04             	cmp    cl,0x4
c0006ede:	0f 94 c0             	sete   al
c0006ee1:	48                   	dec    eax
c0006ee2:	83 e0 c3             	and    eax,0xffffffc3
c0006ee5:	83 c0 64             	add    eax,0x64
c0006ee8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006eec:	e8 5f ad ff ff       	call   c0001c50 <ld_dword>
c0006ef1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006ef8:	89 07                	mov    DWORD PTR [edi],eax
c0006efa:	eb 02                	jmp    c0006efe <f_getlabel+0x1e4>
c0006efc:	89 c6                	mov    esi,eax
c0006efe:	83 c4 6c             	add    esp,0x6c
c0006f01:	89 f0                	mov    eax,esi
c0006f03:	5b                   	pop    ebx
c0006f04:	5e                   	pop    esi
c0006f05:	5f                   	pop    edi
c0006f06:	5d                   	pop    ebp
c0006f07:	c3                   	ret    

c0006f08 <f_setlabel>:
c0006f08:	56                   	push   esi
c0006f09:	b9 02 00 00 00       	mov    ecx,0x2
c0006f0e:	53                   	push   ebx
c0006f0f:	83 ec 74             	sub    esp,0x74
c0006f12:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f16:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f1d:	e8 b1 b7 ff ff       	call   c00026d3 <mount_volume>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	85 c0                	test   eax,eax
c0006f26:	0f 85 41 02 00 00    	jne    c000716d <f_setlabel+0x265>
c0006f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f30:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f33:	0f 85 8e 00 00 00    	jne    c0006fc7 <f_setlabel+0xbf>
c0006f39:	b9 16 00 00 00       	mov    ecx,0x16
c0006f3e:	31 d2                	xor    edx,edx
c0006f40:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f44:	31 db                	xor    ebx,ebx
c0006f46:	e8 8c ad ff ff       	call   c0001cd7 <mem_set>
c0006f4b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f52:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f55:	0f 86 0a 01 00 00    	jbe    c0007065 <f_setlabel+0x15d>
c0006f5b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f62:	e8 b6 ad ff ff       	call   c0001d1d <tchar2uni>
c0006f67:	89 c6                	mov    esi,eax
c0006f69:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f6e:	76 2a                	jbe    c0006f9a <f_setlabel+0x92>
c0006f70:	83 f8 ff             	cmp    eax,0xffffffff
c0006f73:	74 05                	je     c0006f7a <f_setlabel+0x72>
c0006f75:	83 fb 09             	cmp    ebx,0x9
c0006f78:	76 0a                	jbe    c0006f84 <f_setlabel+0x7c>
c0006f7a:	be 06 00 00 00       	mov    esi,0x6
c0006f7f:	e9 e9 01 00 00       	jmp    c000716d <f_setlabel+0x265>
c0006f84:	89 c2                	mov    edx,eax
c0006f86:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f8a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f8d:	c1 ea 10             	shr    edx,0x10
c0006f90:	01 c8                	add    eax,ecx
c0006f92:	43                   	inc    ebx
c0006f93:	e8 1d ad ff ff       	call   c0001cb5 <st_word>
c0006f98:	eb 04                	jmp    c0006f9e <f_setlabel+0x96>
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	74 dc                	je     c0006f7a <f_setlabel+0x72>
c0006f9e:	89 f2                	mov    edx,esi
c0006fa0:	b8 77 9e 02 c0       	mov    eax,0xc0029e77
c0006fa5:	e8 5b ad ff ff       	call   c0001d05 <chk_chr>
c0006faa:	85 c0                	test   eax,eax
c0006fac:	75 cc                	jne    c0006f7a <f_setlabel+0x72>
c0006fae:	83 fb 0a             	cmp    ebx,0xa
c0006fb1:	77 c7                	ja     c0006f7a <f_setlabel+0x72>
c0006fb3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fba:	0f b7 d6             	movzx  edx,si
c0006fbd:	01 c8                	add    eax,ecx
c0006fbf:	43                   	inc    ebx
c0006fc0:	e8 f0 ac ff ff       	call   c0001cb5 <st_word>
c0006fc5:	eb 84                	jmp    c0006f4b <f_setlabel+0x43>
c0006fc7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fcc:	ba 20 00 00 00       	mov    edx,0x20
c0006fd1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fd5:	31 db                	xor    ebx,ebx
c0006fd7:	e8 fb ac ff ff       	call   c0001cd7 <mem_set>
c0006fdc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fe3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fe6:	76 60                	jbe    c0007048 <f_setlabel+0x140>
c0006fe8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fef:	e8 29 ad ff ff       	call   c0001d1d <tchar2uni>
c0006ff4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006ff9:	0f 87 7b ff ff ff    	ja     c0006f7a <f_setlabel+0x72>
c0006fff:	83 ec 0c             	sub    esp,0xc
c0007002:	50                   	push   eax
c0007003:	e8 97 15 00 00       	call   c000859f <ff_wtoupper>
c0007008:	5a                   	pop    edx
c0007009:	59                   	pop    ecx
c000700a:	68 b5 01 00 00       	push   0x1b5
c000700f:	50                   	push   eax
c0007010:	e8 8e 14 00 00       	call   c00084a3 <ff_uni2oem>
c0007015:	83 c4 10             	add    esp,0x10
c0007018:	89 c6                	mov    esi,eax
c000701a:	66 85 c0             	test   ax,ax
c000701d:	0f 84 57 ff ff ff    	je     c0006f7a <f_setlabel+0x72>
c0007023:	0f b7 d0             	movzx  edx,ax
c0007026:	b8 70 9e 02 c0       	mov    eax,0xc0029e70
c000702b:	e8 d5 ac ff ff       	call   c0001d05 <chk_chr>
c0007030:	85 c0                	test   eax,eax
c0007032:	0f 85 42 ff ff ff    	jne    c0006f7a <f_setlabel+0x72>
c0007038:	66 81 fe ff 00       	cmp    si,0xff
c000703d:	0f 87 14 01 00 00    	ja     c0007157 <f_setlabel+0x24f>
c0007043:	e9 fa 00 00 00       	jmp    c0007142 <f_setlabel+0x23a>
c0007048:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000704d:	0f 84 27 ff ff ff    	je     c0006f7a <f_setlabel+0x72>
c0007053:	85 db                	test   ebx,ebx
c0007055:	74 0e                	je     c0007065 <f_setlabel+0x15d>
c0007057:	8d 43 ff             	lea    eax,[ebx-0x1]
c000705a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000705f:	75 04                	jne    c0007065 <f_setlabel+0x15d>
c0007061:	89 c3                	mov    ebx,eax
c0007063:	eb ee                	jmp    c0007053 <f_setlabel+0x14b>
c0007065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007069:	31 d2                	xor    edx,edx
c000706b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000706f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007077:	8d 44 24 24          	lea    eax,[esp+0x24]
c000707b:	e8 1f c1 ff ff       	call   c000319f <dir_sdi>
c0007080:	89 c6                	mov    esi,eax
c0007082:	85 c0                	test   eax,eax
c0007084:	0f 85 e3 00 00 00    	jne    c000716d <f_setlabel+0x265>
c000708a:	ba 01 00 00 00       	mov    edx,0x1
c000708f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007093:	e8 17 c9 ff ff       	call   c00039af <dir_read>
c0007098:	85 c0                	test   eax,eax
c000709a:	75 21                	jne    c00070bd <f_setlabel+0x1b5>
c000709c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070a7:	74 5d                	je     c0007106 <f_setlabel+0x1fe>
c00070a9:	85 db                	test   ebx,ebx
c00070ab:	74 0b                	je     c00070b8 <f_setlabel+0x1b0>
c00070ad:	b9 0b 00 00 00       	mov    ecx,0xb
c00070b2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070b6:	eb 70                	jmp    c0007128 <f_setlabel+0x220>
c00070b8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070bb:	eb 70                	jmp    c000712d <f_setlabel+0x225>
c00070bd:	83 f8 04             	cmp    eax,0x4
c00070c0:	75 7c                	jne    c000713e <f_setlabel+0x236>
c00070c2:	85 db                	test   ebx,ebx
c00070c4:	0f 84 a3 00 00 00    	je     c000716d <f_setlabel+0x265>
c00070ca:	ba 01 00 00 00       	mov    edx,0x1
c00070cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d3:	e8 51 ca ff ff       	call   c0003b29 <dir_alloc>
c00070d8:	89 c6                	mov    esi,eax
c00070da:	85 c0                	test   eax,eax
c00070dc:	0f 85 8b 00 00 00    	jne    c000716d <f_setlabel+0x265>
c00070e2:	31 d2                	xor    edx,edx
c00070e4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e8:	b9 20 00 00 00       	mov    ecx,0x20
c00070ed:	e8 e5 ab ff ff       	call   c0001cd7 <mem_set>
c00070f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070f6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070f9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070fd:	75 18                	jne    c0007117 <f_setlabel+0x20f>
c00070ff:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007109:	b9 16 00 00 00       	mov    ecx,0x16
c000710e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007112:	83 c0 02             	add    eax,0x2
c0007115:	eb 9b                	jmp    c00070b2 <f_setlabel+0x1aa>
c0007117:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000711b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007120:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007124:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007128:	e8 95 ab ff ff       	call   c0001cc2 <mem_cpy>
c000712d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007131:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007135:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007139:	e8 0e d4 ff ff       	call   c000454c <sync_fs>
c000713e:	89 c6                	mov    esi,eax
c0007140:	eb 2b                	jmp    c000716d <f_setlabel+0x265>
c0007142:	83 fb 0a             	cmp    ebx,0xa
c0007145:	0f 87 2f fe ff ff    	ja     c0006f7a <f_setlabel+0x72>
c000714b:	89 f0                	mov    eax,esi
c000714d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007151:	43                   	inc    ebx
c0007152:	e9 85 fe ff ff       	jmp    c0006fdc <f_setlabel+0xd4>
c0007157:	83 fb 09             	cmp    ebx,0x9
c000715a:	0f 87 1a fe ff ff    	ja     c0006f7a <f_setlabel+0x72>
c0007160:	89 f0                	mov    eax,esi
c0007162:	66 c1 e8 08          	shr    ax,0x8
c0007166:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716a:	43                   	inc    ebx
c000716b:	eb de                	jmp    c000714b <f_setlabel+0x243>
c000716d:	89 f0                	mov    eax,esi
c000716f:	83 c4 74             	add    esp,0x74
c0007172:	5b                   	pop    ebx
c0007173:	5e                   	pop    esi
c0007174:	c3                   	ret    

c0007175 <f_forward>:
c0007175:	55                   	push   ebp
c0007176:	57                   	push   edi
c0007177:	56                   	push   esi
c0007178:	53                   	push   ebx
c0007179:	83 ec 2c             	sub    esp,0x2c
c000717c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007180:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007184:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000718a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000718e:	89 d8                	mov    eax,ebx
c0007190:	e8 b1 b1 ff ff       	call   c0002346 <validate>
c0007195:	89 c5                	mov    ebp,eax
c0007197:	85 c0                	test   eax,eax
c0007199:	0f 85 aa 01 00 00    	jne    c0007349 <f_forward+0x1d4>
c000719f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071a3:	85 ed                	test   ebp,ebp
c00071a5:	0f 85 9e 01 00 00    	jne    c0007349 <f_forward+0x1d4>
c00071ab:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071af:	0f 84 8f 01 00 00    	je     c0007344 <f_forward+0x1cf>
c00071b5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071b8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071bb:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071be:	bf 00 00 00 00       	mov    edi,0x0
c00071c3:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071c6:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ca:	89 d1                	mov    ecx,edx
c00071cc:	19 f9                	sbb    ecx,edi
c00071ce:	0f 83 cf 00 00 00    	jae    c00072a3 <f_forward+0x12e>
c00071d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071d8:	e9 c6 00 00 00       	jmp    c00072a3 <f_forward+0x12e>
c00071dd:	50                   	push   eax
c00071de:	50                   	push   eax
c00071df:	6a 00                	push   0x0
c00071e1:	6a 00                	push   0x0
c00071e3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	0f 84 57 01 00 00    	je     c0007349 <f_forward+0x1d4>
c00071f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071f9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071fc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007200:	89 d7                	mov    edi,edx
c0007202:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007205:	89 c6                	mov    esi,eax
c0007207:	0f ac fe 09          	shrd   esi,edi,0x9
c000720b:	21 ce                	and    esi,ecx
c000720d:	89 c1                	mov    ecx,eax
c000720f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007215:	0f 84 98 00 00 00    	je     c00072b3 <f_forward+0x13e>
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007222:	89 c8                	mov    eax,ecx
c0007224:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007228:	e8 af ac ff ff       	call   c0001edc <clst2sect>
c000722d:	89 d7                	mov    edi,edx
c000722f:	09 c7                	or     edi,eax
c0007231:	0f 84 9e 00 00 00    	je     c00072d5 <f_forward+0x160>
c0007237:	31 ff                	xor    edi,edi
c0007239:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000723c:	01 c6                	add    esi,eax
c000723e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007242:	11 d7                	adc    edi,edx
c0007244:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007247:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000724a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000724e:	39 fa                	cmp    edx,edi
c0007250:	0f 85 a2 00 00 00    	jne    c00072f8 <f_forward+0x183>
c0007256:	39 f0                	cmp    eax,esi
c0007258:	0f 85 9a 00 00 00    	jne    c00072f8 <f_forward+0x183>
c000725e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007261:	ba 00 02 00 00       	mov    edx,0x200
c0007266:	25 ff 01 00 00       	and    eax,0x1ff
c000726b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000726f:	29 c2                	sub    edx,eax
c0007271:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007274:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007277:	39 d1                	cmp    ecx,edx
c0007279:	76 02                	jbe    c000727d <f_forward+0x108>
c000727b:	89 d1                	mov    ecx,edx
c000727d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007280:	52                   	push   edx
c0007281:	01 c6                	add    esi,eax
c0007283:	52                   	push   edx
c0007284:	51                   	push   ecx
c0007285:	56                   	push   esi
c0007286:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000728a:	83 c4 10             	add    esp,0x10
c000728d:	85 c0                	test   eax,eax
c000728f:	74 44                	je     c00072d5 <f_forward+0x160>
c0007291:	31 ff                	xor    edi,edi
c0007293:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007296:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007299:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000729d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072a1:	01 07                	add    DWORD PTR [edi],eax
c00072a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072a8:	0f 85 2f ff ff ff    	jne    c00071dd <f_forward+0x68>
c00072ae:	e9 96 00 00 00       	jmp    c0007349 <f_forward+0x1d4>
c00072b3:	85 f6                	test   esi,esi
c00072b5:	0f 85 60 ff ff ff    	jne    c000721b <f_forward+0xa6>
c00072bb:	89 d7                	mov    edi,edx
c00072bd:	09 c7                	or     edi,eax
c00072bf:	75 05                	jne    c00072c6 <f_forward+0x151>
c00072c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072c4:	eb 0a                	jmp    c00072d0 <f_forward+0x15b>
c00072c6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072c9:	89 d8                	mov    eax,ebx
c00072cb:	e8 d9 bc ff ff       	call   c0002fa9 <get_fat>
c00072d0:	83 f8 01             	cmp    eax,0x1
c00072d3:	77 0b                	ja     c00072e0 <f_forward+0x16b>
c00072d5:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072d9:	bd 02 00 00 00       	mov    ebp,0x2
c00072de:	eb 69                	jmp    c0007349 <f_forward+0x1d4>
c00072e0:	83 f8 ff             	cmp    eax,0xffffffff
c00072e3:	75 0b                	jne    c00072f0 <f_forward+0x17b>
c00072e5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072e9:	bd 01 00 00 00       	mov    ebp,0x1
c00072ee:	eb 59                	jmp    c0007349 <f_forward+0x1d4>
c00072f0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072f3:	e9 23 ff ff ff       	jmp    c000721b <f_forward+0xa6>
c00072f8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072fc:	79 20                	jns    c000731e <f_forward+0x1a9>
c00072fe:	83 ec 0c             	sub    esp,0xc
c0007301:	6a 01                	push   0x1
c0007303:	52                   	push   edx
c0007304:	50                   	push   eax
c0007305:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007309:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000730d:	50                   	push   eax
c000730e:	e8 fb a8 ff ff       	call   c0001c0e <disk_write>
c0007313:	83 c4 20             	add    esp,0x20
c0007316:	85 c0                	test   eax,eax
c0007318:	75 cb                	jne    c00072e5 <f_forward+0x170>
c000731a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000731e:	83 ec 0c             	sub    esp,0xc
c0007321:	6a 01                	push   0x1
c0007323:	57                   	push   edi
c0007324:	56                   	push   esi
c0007325:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007329:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000732d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007331:	50                   	push   eax
c0007332:	e8 c1 a8 ff ff       	call   c0001bf8 <disk_read>
c0007337:	83 c4 20             	add    esp,0x20
c000733a:	85 c0                	test   eax,eax
c000733c:	0f 84 1c ff ff ff    	je     c000725e <f_forward+0xe9>
c0007342:	eb a1                	jmp    c00072e5 <f_forward+0x170>
c0007344:	bd 07 00 00 00       	mov    ebp,0x7
c0007349:	83 c4 2c             	add    esp,0x2c
c000734c:	89 e8                	mov    eax,ebp
c000734e:	5b                   	pop    ebx
c000734f:	5e                   	pop    esi
c0007350:	5f                   	pop    edi
c0007351:	5d                   	pop    ebp
c0007352:	c3                   	ret    

c0007353 <f_mkfs>:
c0007353:	55                   	push   ebp
c0007354:	57                   	push   edi
c0007355:	56                   	push   esi
c0007356:	53                   	push   ebx
c0007357:	bb 0b 00 00 00       	mov    ebx,0xb
c000735c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007362:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007369:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007370:	e8 b0 ae ff ff       	call   c0002225 <get_ldnumber>
c0007375:	85 c0                	test   eax,eax
c0007377:	0f 88 ec 10 00 00    	js     c0008469 <f_mkfs+0x1116>
c000737d:	8b 14 85 40 f0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0fc0]
c0007384:	85 d2                	test   edx,edx
c0007386:	74 03                	je     c000738b <f_mkfs+0x38>
c0007388:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000738b:	85 f6                	test   esi,esi
c000738d:	75 05                	jne    c0007394 <f_mkfs+0x41>
c000738f:	be 60 9e 02 c0       	mov    esi,0xc0029e60
c0007394:	83 ec 0c             	sub    esp,0xc
c0007397:	0f b6 c0             	movzx  eax,al
c000739a:	bb 03 00 00 00       	mov    ebx,0x3
c000739f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a7:	e8 49 a8 ff ff       	call   c0001bf5 <disk_initialize>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	a8 01                	test   al,0x1
c00073b1:	0f 85 b2 10 00 00    	jne    c0008469 <f_mkfs+0x1116>
c00073b7:	bb 0a 00 00 00       	mov    ebx,0xa
c00073bc:	a8 04                	test   al,0x4
c00073be:	0f 85 a5 10 00 00    	jne    c0008469 <f_mkfs+0x1116>
c00073c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073c7:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073cb:	85 c0                	test   eax,eax
c00073cd:	75 20                	jne    c00073ef <f_mkfs+0x9c>
c00073cf:	51                   	push   ecx
c00073d0:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073d4:	50                   	push   eax
c00073d5:	6a 03                	push   0x3
c00073d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073db:	e8 44 a8 ff ff       	call   c0001c24 <disk_ioctl>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 c0                	test   eax,eax
c00073e5:	74 08                	je     c00073ef <f_mkfs+0x9c>
c00073e7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ef:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073f3:	8d 42 ff             	lea    eax,[edx-0x1]
c00073f6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073fb:	77 04                	ja     c0007401 <f_mkfs+0xae>
c00073fd:	85 c2                	test   edx,eax
c00073ff:	74 08                	je     c0007409 <f_mkfs+0xb6>
c0007401:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007409:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000740c:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007410:	48                   	dec    eax
c0007411:	3c 01                	cmp    al,0x1
c0007413:	76 05                	jbe    c000741a <f_mkfs+0xc7>
c0007415:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000741a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000741d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007421:	48                   	dec    eax
c0007422:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007427:	77 07                	ja     c0007430 <f_mkfs+0xdd>
c0007429:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000742e:	74 08                	je     c0007438 <f_mkfs+0xe5>
c0007430:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007438:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000743b:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007441:	77 07                	ja     c000744a <f_mkfs+0xf7>
c0007443:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007446:	85 d8                	test   eax,ebx
c0007448:	74 02                	je     c000744c <f_mkfs+0xf9>
c000744a:	31 db                	xor    ebx,ebx
c000744c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007457:	77 0a                	ja     c0007463 <f_mkfs+0x110>
c0007459:	bb 11 00 00 00       	mov    ebx,0x11
c000745e:	e9 06 10 00 00       	jmp    c0008469 <f_mkfs+0x1116>
c0007463:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000746a:	8b 36                	mov    esi,DWORD PTR [esi]
c000746c:	85 ed                	test   ebp,ebp
c000746e:	75 1e                	jne    c000748e <f_mkfs+0x13b>
c0007470:	83 ec 0c             	sub    esp,0xc
c0007473:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000747a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000747f:	50                   	push   eax
c0007480:	e8 f1 0f 00 00       	call   c0008476 <ff_memalloc>
c0007485:	83 c4 10             	add    esp,0x10
c0007488:	89 c5                	mov    ebp,eax
c000748a:	85 c0                	test   eax,eax
c000748c:	74 cb                	je     c0007459 <f_mkfs+0x106>
c000748e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007496:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000749e:	52                   	push   edx
c000749f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074a3:	50                   	push   eax
c00074a4:	6a 01                	push   0x1
c00074a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074aa:	e8 75 a7 ff ff       	call   c0001c24 <disk_ioctl>
c00074af:	83 c4 10             	add    esp,0x10
c00074b2:	85 c0                	test   eax,eax
c00074b4:	0f 85 4a 0f 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c00074ba:	89 f1                	mov    ecx,esi
c00074bc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074c4:	83 e1 0f             	and    ecx,0xf
c00074c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074cf:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074d3:	83 e6 08             	and    esi,0x8
c00074d6:	75 56                	jne    c000752e <f_mkfs+0x1db>
c00074d8:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074dc:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074e0:	83 ff 00             	cmp    edi,0x0
c00074e3:	76 20                	jbe    c0007505 <f_mkfs+0x1b2>
c00074e5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ea:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074f2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074f8:	83 d7 ff             	adc    edi,0xffffffff
c00074fb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074ff:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007503:	eb 21                	jmp    c0007526 <f_mkfs+0x1d3>
c0007505:	ba 3f 00 00 00       	mov    edx,0x3f
c000750a:	39 f2                	cmp    edx,esi
c000750c:	19 f8                	sbb    eax,edi
c000750e:	73 1e                	jae    c000752e <f_mkfs+0x1db>
c0007510:	83 c6 c1             	add    esi,0xffffffc1
c0007513:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000751b:	83 d7 ff             	adc    edi,0xffffffff
c000751e:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007522:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007526:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000752e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007532:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007536:	89 04 24             	mov    DWORD PTR [esp],eax
c0007539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000753d:	31 c0                	xor    eax,eax
c000753f:	ba 7f 00 00 00       	mov    edx,0x7f
c0007544:	89 c7                	mov    edi,eax
c0007546:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007549:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000754d:	0f 83 c5 0a 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c0007553:	89 df                	mov    edi,ebx
c0007555:	c1 ef 09             	shr    edi,0x9
c0007558:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000755c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007563:	c1 ef 09             	shr    edi,0x9
c0007566:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000756b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000756f:	74 29                	je     c000759a <f_mkfs+0x247>
c0007571:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007577:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000757c:	0f 97 c2             	seta   dl
c000757f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007582:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007586:	0f 92 c0             	setb   al
c0007589:	08 c2                	or     dl,al
c000758b:	75 5b                	jne    c00075e8 <f_mkfs+0x295>
c000758d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007591:	83 e0 07             	and    eax,0x7
c0007594:	3c 04                	cmp    al,0x4
c0007596:	74 50                	je     c00075e8 <f_mkfs+0x295>
c0007598:	eb 1b                	jmp    c00075b5 <f_mkfs+0x262>
c000759a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000759f:	0f 87 73 0a 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c00075a5:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075ab:	76 08                	jbe    c00075b5 <f_mkfs+0x262>
c00075ad:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075b5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b9:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075bd:	83 e0 01             	and    eax,0x1
c00075c0:	80 e1 02             	and    cl,0x2
c00075c3:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075c7:	74 0d                	je     c00075d6 <f_mkfs+0x283>
c00075c9:	84 c0                	test   al,al
c00075cb:	0f 84 53 09 00 00    	je     c0007f24 <f_mkfs+0xbd1>
c00075d1:	e9 12 08 00 00       	jmp    c0007de8 <f_mkfs+0xa95>
c00075d6:	bb 13 00 00 00       	mov    ebx,0x13
c00075db:	84 c0                	test   al,al
c00075dd:	0f 85 05 08 00 00    	jne    c0007de8 <f_mkfs+0xa95>
c00075e3:	e9 39 0e 00 00       	jmp    c0008421 <f_mkfs+0x10ce>
c00075e8:	31 c0                	xor    eax,eax
c00075ea:	ba ff 0f 00 00       	mov    edx,0xfff
c00075ef:	89 c7                	mov    edi,eax
c00075f1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075f4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075f8:	0f 83 1a 0a 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c00075fe:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007604:	77 39                	ja     c000763f <f_mkfs+0x2ec>
c0007606:	ba ff ff 07 00       	mov    edx,0x7ffff
c000760b:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007613:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007616:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000761a:	73 08                	jae    c0007624 <f_mkfs+0x2d1>
c000761c:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007624:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007629:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000762c:	b8 00 00 00 00       	mov    eax,0x0
c0007631:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007635:	73 08                	jae    c000763f <f_mkfs+0x2ec>
c0007637:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000763f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007643:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007647:	83 c0 20             	add    eax,0x20
c000764a:	83 d2 00             	adc    edx,0x0
c000764d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007651:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007659:	31 d2                	xor    edx,edx
c000765b:	31 ff                	xor    edi,edi
c000765d:	52                   	push   edx
c000765e:	89 fb                	mov    ebx,edi
c0007660:	50                   	push   eax
c0007661:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007665:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007669:	e8 26 fd 01 00       	call   c0027394 <__udivdi3>
c000766e:	83 c4 10             	add    esp,0x10
c0007671:	c1 e0 02             	shl    eax,0x2
c0007674:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007678:	05 07 02 00 00       	add    eax,0x207
c000767d:	89 f1                	mov    ecx,esi
c000767f:	c1 e8 09             	shr    eax,0x9
c0007682:	83 c1 ff             	add    ecx,0xffffffff
c0007685:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007689:	83 d3 ff             	adc    ebx,0xffffffff
c000768c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007690:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007694:	31 d2                	xor    edx,edx
c0007696:	01 c8                	add    eax,ecx
c0007698:	11 da                	adc    edx,ebx
c000769a:	89 c1                	mov    ecx,eax
c000769c:	f7 de                	neg    esi
c000769e:	89 d0                	mov    eax,edx
c00076a0:	83 d7 00             	adc    edi,0x0
c00076a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076a7:	f7 df                	neg    edi
c00076a9:	21 f1                	and    ecx,esi
c00076ab:	21 f8                	and    eax,edi
c00076ad:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076b5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076b9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076bd:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076c1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076c4:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076c8:	0f ac d0 01          	shrd   eax,edx,0x1
c00076cc:	89 df                	mov    edi,ebx
c00076ce:	d1 ea                	shr    edx,1
c00076d0:	39 c1                	cmp    ecx,eax
c00076d2:	19 d7                	sbb    edi,edx
c00076d4:	0f 83 3e 09 00 00    	jae    c0008018 <f_mkfs+0xcc5>
c00076da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076de:	31 d2                	xor    edx,edx
c00076e0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ef:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076f3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076f7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076ff:	83 f8 0f             	cmp    eax,0xf
c0007702:	0f 86 10 09 00 00    	jbe    c0008018 <f_mkfs+0xcc5>
c0007708:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007710:	0f 87 02 09 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c0007716:	31 d2                	xor    edx,edx
c0007718:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000771c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007724:	83 c0 07             	add    eax,0x7
c0007727:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000772f:	c1 e8 03             	shr    eax,0x3
c0007732:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007739:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000773d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007741:	c1 e0 09             	shl    eax,0x9
c0007744:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007748:	48                   	dec    eax
c0007749:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000774d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007751:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007755:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007759:	31 d2                	xor    edx,edx
c000775b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000775f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000776a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000776f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007773:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007777:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000777b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000777f:	31 ff                	xor    edi,edi
c0007781:	31 f6                	xor    esi,esi
c0007783:	31 db                	xor    ebx,ebx
c0007785:	85 ff                	test   edi,edi
c0007787:	74 05                	je     c000778e <f_mkfs+0x43b>
c0007789:	4f                   	dec    edi
c000778a:	74 44                	je     c00077d0 <f_mkfs+0x47d>
c000778c:	eb 4f                	jmp    c00077dd <f_mkfs+0x48a>
c000778e:	83 ec 0c             	sub    esp,0xc
c0007791:	0f b7 c3             	movzx  eax,bx
c0007794:	50                   	push   eax
c0007795:	e8 05 0e 00 00       	call   c000859f <ff_wtoupper>
c000779a:	83 c4 10             	add    esp,0x10
c000779d:	89 c1                	mov    ecx,eax
c000779f:	8d 53 01             	lea    edx,[ebx+0x1]
c00077a2:	66 39 c3             	cmp    bx,ax
c00077a5:	75 3e                	jne    c00077e5 <f_mkfs+0x492>
c00077a7:	be 01 00 00 00       	mov    esi,0x1
c00077ac:	89 df                	mov    edi,ebx
c00077ae:	66 01 f7             	add    di,si
c00077b1:	75 07                	jne    c00077ba <f_mkfs+0x467>
c00077b3:	83 fe 7f             	cmp    esi,0x7f
c00077b6:	77 31                	ja     c00077e9 <f_mkfs+0x496>
c00077b8:	eb 16                	jmp    c00077d0 <f_mkfs+0x47d>
c00077ba:	83 ec 0c             	sub    esp,0xc
c00077bd:	0f b7 ff             	movzx  edi,di
c00077c0:	57                   	push   edi
c00077c1:	e8 d9 0d 00 00       	call   c000859f <ff_wtoupper>
c00077c6:	83 c4 10             	add    esp,0x10
c00077c9:	39 c7                	cmp    edi,eax
c00077cb:	75 e6                	jne    c00077b3 <f_mkfs+0x460>
c00077cd:	46                   	inc    esi
c00077ce:	eb dc                	jmp    c00077ac <f_mkfs+0x459>
c00077d0:	31 c0                	xor    eax,eax
c00077d2:	89 d9                	mov    ecx,ebx
c00077d4:	4e                   	dec    esi
c00077d5:	0f 95 c0             	setne  al
c00077d8:	43                   	inc    ebx
c00077d9:	89 c7                	mov    edi,eax
c00077db:	eb 14                	jmp    c00077f1 <f_mkfs+0x49e>
c00077dd:	89 f1                	mov    ecx,esi
c00077df:	01 f3                	add    ebx,esi
c00077e1:	31 ff                	xor    edi,edi
c00077e3:	eb 0c                	jmp    c00077f1 <f_mkfs+0x49e>
c00077e5:	89 d3                	mov    ebx,edx
c00077e7:	eb 08                	jmp    c00077f1 <f_mkfs+0x49e>
c00077e9:	bf 02 00 00 00       	mov    edi,0x2
c00077ee:	83 c9 ff             	or     ecx,0xffffffff
c00077f1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077fc:	0f b6 c1             	movzx  eax,cl
c00077ff:	e8 3a a9 ff ff       	call   c000213e <xsum32>
c0007804:	66 c1 e9 08          	shr    cx,0x8
c0007808:	89 c2                	mov    edx,eax
c000780a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780d:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007811:	0f b7 c1             	movzx  eax,cx
c0007814:	e8 25 a9 ff ff       	call   c000213e <xsum32>
c0007819:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000781e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007822:	66 85 db             	test   bx,bx
c0007825:	74 1f                	je     c0007846 <f_mkfs+0x4f3>
c0007827:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782a:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007831:	83 c0 02             	add    eax,0x2
c0007834:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000783a:	39 c2                	cmp    edx,eax
c000783c:	74 08                	je     c0007846 <f_mkfs+0x4f3>
c000783e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007841:	e9 3f ff ff ff       	jmp    c0007785 <f_mkfs+0x432>
c0007846:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007849:	83 ec 0c             	sub    esp,0xc
c000784c:	05 01 02 00 00       	add    eax,0x201
c0007851:	c1 e8 09             	shr    eax,0x9
c0007854:	50                   	push   eax
c0007855:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007859:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000785d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007861:	55                   	push   ebp
c0007862:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007866:	e8 a3 a3 ff ff       	call   c0001c0e <disk_write>
c000786b:	83 c4 20             	add    esp,0x20
c000786e:	85 c0                	test   eax,eax
c0007870:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007873:	0f 85 8b 0b 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007879:	89 d0                	mov    eax,edx
c000787b:	31 d2                	xor    edx,edx
c000787d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007881:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007885:	66 85 db             	test   bx,bx
c0007888:	74 04                	je     c000788e <f_mkfs+0x53b>
c000788a:	31 c0                	xor    eax,eax
c000788c:	eb b0                	jmp    c000783e <f_mkfs+0x4eb>
c000788e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007892:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007896:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000789a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078a0:	31 d2                	xor    edx,edx
c00078a2:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ad:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b1:	c1 eb 09             	shr    ebx,0x9
c00078b4:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bf:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078c7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078cb:	8d 70 01             	lea    esi,[eax+0x1]
c00078ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078d6:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078dd:	31 d2                	xor    edx,edx
c00078df:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e7:	89 c1                	mov    ecx,eax
c00078e9:	89 e8                	mov    eax,ebp
c00078eb:	e8 e7 a3 ff ff       	call   c0001cd7 <mem_set>
c00078f0:	31 c0                	xor    eax,eax
c00078f2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f5:	76 10                	jbe    c0007907 <f_mkfs+0x5b4>
c00078f7:	83 fe 07             	cmp    esi,0x7
c00078fa:	76 0b                	jbe    c0007907 <f_mkfs+0x5b4>
c00078fc:	40                   	inc    eax
c00078fd:	83 ee 08             	sub    esi,0x8
c0007900:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007905:	eb eb                	jmp    c00078f2 <f_mkfs+0x59f>
c0007907:	b2 01                	mov    dl,0x1
c0007909:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000790d:	85 f6                	test   esi,esi
c000790f:	74 0c                	je     c000791d <f_mkfs+0x5ca>
c0007911:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007914:	76 07                	jbe    c000791d <f_mkfs+0x5ca>
c0007916:	08 11                	or     BYTE PTR [ecx],dl
c0007918:	4e                   	dec    esi
c0007919:	d1 e2                	shl    edx,1
c000791b:	eb f0                	jmp    c000790d <f_mkfs+0x5ba>
c000791d:	89 df                	mov    edi,ebx
c000791f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007923:	76 04                	jbe    c0007929 <f_mkfs+0x5d6>
c0007925:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007929:	83 ec 0c             	sub    esp,0xc
c000792c:	57                   	push   edi
c000792d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007931:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007935:	55                   	push   ebp
c0007936:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000793a:	e8 cf a2 ff ff       	call   c0001c0e <disk_write>
c000793f:	83 c4 20             	add    esp,0x20
c0007942:	85 c0                	test   eax,eax
c0007944:	0f 85 ba 0a 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c000794a:	31 d2                	xor    edx,edx
c000794c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007950:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007954:	29 fb                	sub    ebx,edi
c0007956:	0f 85 7a ff ff ff    	jne    c00078d6 <f_mkfs+0x583>
c000795c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007960:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007968:	31 f6                	xor    esi,esi
c000796a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000796e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007971:	31 d2                	xor    edx,edx
c0007973:	89 e8                	mov    eax,ebp
c0007975:	e8 5d a3 ff ff       	call   c0001cd7 <mem_set>
c000797a:	31 c9                	xor    ecx,ecx
c000797c:	85 db                	test   ebx,ebx
c000797e:	75 40                	jne    c00079c0 <f_mkfs+0x66d>
c0007980:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007985:	89 e8                	mov    eax,ebp
c0007987:	bb 02 00 00 00       	mov    ebx,0x2
c000798c:	e8 28 a3 ff ff       	call   c0001cb9 <st_dword>
c0007991:	8d 45 04             	lea    eax,[ebp+0x4]
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	e8 1d a3 ff ff       	call   c0001cb9 <st_dword>
c000799c:	b9 08 00 00 00       	mov    ecx,0x8
c00079a1:	eb 1d                	jmp    c00079c0 <f_mkfs+0x66d>
c00079a3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079a6:	76 3b                	jbe    c00079e3 <f_mkfs+0x690>
c00079a8:	43                   	inc    ebx
c00079a9:	83 fe 01             	cmp    esi,0x1
c00079ac:	89 da                	mov    edx,ebx
c00079ae:	77 03                	ja     c00079b3 <f_mkfs+0x660>
c00079b0:	83 ca ff             	or     edx,0xffffffff
c00079b3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079b7:	4e                   	dec    esi
c00079b8:	e8 fc a2 ff ff       	call   c0001cb9 <st_dword>
c00079bd:	83 c1 04             	add    ecx,0x4
c00079c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079c4:	85 f6                	test   esi,esi
c00079c6:	75 db                	jne    c00079a3 <f_mkfs+0x650>
c00079c8:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079cd:	77 14                	ja     c00079e3 <f_mkfs+0x690>
c00079cf:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079d3:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079da:	85 f6                	test   esi,esi
c00079dc:	74 05                	je     c00079e3 <f_mkfs+0x690>
c00079de:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e1:	77 dd                	ja     c00079c0 <f_mkfs+0x66d>
c00079e3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079e7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079eb:	39 cf                	cmp    edi,ecx
c00079ed:	76 02                	jbe    c00079f1 <f_mkfs+0x69e>
c00079ef:	89 cf                	mov    edi,ecx
c00079f1:	83 ec 0c             	sub    esp,0xc
c00079f4:	57                   	push   edi
c00079f5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079fd:	55                   	push   ebp
c00079fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a02:	e8 07 a2 ff ff       	call   c0001c0e <disk_write>
c0007a07:	83 c4 20             	add    esp,0x20
c0007a0a:	85 c0                	test   eax,eax
c0007a0c:	0f 85 f2 09 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007a12:	31 d2                	xor    edx,edx
c0007a14:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a18:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a1c:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a20:	0f 85 48 ff ff ff    	jne    c000796e <f_mkfs+0x61b>
c0007a26:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a29:	31 d2                	xor    edx,edx
c0007a2b:	89 e8                	mov    eax,ebp
c0007a2d:	31 ff                	xor    edi,edi
c0007a2f:	e8 a3 a2 ff ff       	call   c0001cd7 <mem_set>
c0007a34:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a37:	ba 02 00 00 00       	mov    edx,0x2
c0007a3c:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a40:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a44:	e8 70 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a49:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a4c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a50:	e8 64 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a55:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a58:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a5c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a60:	e8 54 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a65:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a70:	83 c2 02             	add    edx,0x2
c0007a73:	e8 41 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a78:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a7b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a7f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a83:	e8 31 a2 ff ff       	call   c0001cb9 <st_dword>
c0007a88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a8c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a91:	89 c6                	mov    esi,eax
c0007a93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a97:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a9e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aa2:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007aa5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aa9:	39 cb                	cmp    ebx,ecx
c0007aab:	76 02                	jbe    c0007aaf <f_mkfs+0x75c>
c0007aad:	89 cb                	mov    ebx,ecx
c0007aaf:	83 ec 0c             	sub    esp,0xc
c0007ab2:	53                   	push   ebx
c0007ab3:	57                   	push   edi
c0007ab4:	56                   	push   esi
c0007ab5:	55                   	push   ebp
c0007ab6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aba:	e8 4f a1 ff ff       	call   c0001c0e <disk_write>
c0007abf:	83 c4 20             	add    esp,0x20
c0007ac2:	85 c0                	test   eax,eax
c0007ac4:	0f 85 3a 09 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007aca:	31 d2                	xor    edx,edx
c0007acc:	b9 00 02 00 00       	mov    ecx,0x200
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 ff a1 ff ff       	call   c0001cd7 <mem_set>
c0007ad8:	31 d2                	xor    edx,edx
c0007ada:	01 de                	add    esi,ebx
c0007adc:	11 d7                	adc    edi,edx
c0007ade:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ae1:	75 bf                	jne    c0007aa2 <f_mkfs+0x74f>
c0007ae3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ae7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007aeb:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007af3:	b9 00 02 00 00       	mov    ecx,0x200
c0007af8:	31 d2                	xor    edx,edx
c0007afa:	89 e8                	mov    eax,ebp
c0007afc:	e8 d6 a1 ff ff       	call   c0001cd7 <mem_set>
c0007b01:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b06:	ba 40 9f 02 c0       	mov    edx,0xc0029f40
c0007b0b:	89 e8                	mov    eax,ebp
c0007b0d:	e8 b0 a1 ff ff       	call   c0001cc2 <mem_cpy>
c0007b12:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b19:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b1d:	e8 9a a1 ff ff       	call   c0001cbc <st_qword>
c0007b22:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b26:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b29:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b2d:	e8 8a a1 ff ff       	call   c0001cbc <st_qword>
c0007b32:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b35:	ba 20 00 00 00       	mov    edx,0x20
c0007b3a:	e8 7a a1 ff ff       	call   c0001cb9 <st_dword>
c0007b3f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b47:	e8 6d a1 ff ff       	call   c0001cb9 <st_dword>
c0007b4c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b50:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b54:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b58:	e8 5c a1 ff ff       	call   c0001cb9 <st_dword>
c0007b5d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b60:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b64:	e8 50 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b69:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b6d:	8d 50 02             	lea    edx,[eax+0x2]
c0007b70:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b73:	e8 41 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b78:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b7b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b80:	e8 34 a1 ff ff       	call   c0001cb9 <st_dword>
c0007b85:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b88:	ba 00 01 00 00       	mov    edx,0x100
c0007b8d:	e8 23 a1 ff ff       	call   c0001cb5 <st_word>
c0007b92:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b96:	b8 0a 00 00 00       	mov    eax,0xa
c0007b9b:	48                   	dec    eax
c0007b9c:	74 05                	je     c0007ba3 <f_mkfs+0x850>
c0007b9e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ba1:	eb f8                	jmp    c0007b9b <f_mkfs+0x848>
c0007ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba7:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007baf:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bb3:	74 05                	je     c0007bba <f_mkfs+0x867>
c0007bb5:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bb8:	eb f5                	jmp    c0007baf <f_mkfs+0x85c>
c0007bba:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bbd:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bc2:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bc8:	31 db                	xor    ebx,ebx
c0007bca:	e8 e6 a0 ff ff       	call   c0001cb5 <st_word>
c0007bcf:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bd5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bda:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdd:	e8 d3 a0 ff ff       	call   c0001cb5 <st_word>
c0007be2:	31 c9                	xor    ecx,ecx
c0007be4:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007be7:	83 f8 01             	cmp    eax,0x1
c0007bea:	76 13                	jbe    c0007bff <f_mkfs+0x8ac>
c0007bec:	83 f9 70             	cmp    ecx,0x70
c0007bef:	74 0e                	je     c0007bff <f_mkfs+0x8ac>
c0007bf1:	89 da                	mov    edx,ebx
c0007bf3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bf8:	e8 41 a5 ff ff       	call   c000213e <xsum32>
c0007bfd:	89 c3                	mov    ebx,eax
c0007bff:	41                   	inc    ecx
c0007c00:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c06:	75 dc                	jne    c0007be4 <f_mkfs+0x891>
c0007c08:	89 f0                	mov    eax,esi
c0007c0a:	89 fa                	mov    edx,edi
c0007c0c:	83 c0 01             	add    eax,0x1
c0007c0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c13:	83 d2 00             	adc    edx,0x0
c0007c16:	83 ec 0c             	sub    esp,0xc
c0007c19:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c1d:	6a 01                	push   0x1
c0007c1f:	57                   	push   edi
c0007c20:	56                   	push   esi
c0007c21:	55                   	push   ebp
c0007c22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c26:	e8 e3 9f ff ff       	call   c0001c0e <disk_write>
c0007c2b:	83 c4 20             	add    esp,0x20
c0007c2e:	85 c0                	test   eax,eax
c0007c30:	0f 85 ce 07 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3d:	89 e8                	mov    eax,ebp
c0007c3f:	e8 93 a0 ff ff       	call   c0001cd7 <mem_set>
c0007c44:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c4c:	e8 64 a0 ff ff       	call   c0001cb5 <st_word>
c0007c51:	89 f0                	mov    eax,esi
c0007c53:	89 fa                	mov    edx,edi
c0007c55:	83 c0 09             	add    eax,0x9
c0007c58:	83 d2 00             	adc    edx,0x0
c0007c5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c62:	31 c9                	xor    ecx,ecx
c0007c64:	41                   	inc    ecx
c0007c65:	89 da                	mov    edx,ebx
c0007c67:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c6c:	e8 cd a4 ff ff       	call   c000213e <xsum32>
c0007c71:	89 c3                	mov    ebx,eax
c0007c73:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c79:	75 e9                	jne    c0007c64 <f_mkfs+0x911>
c0007c7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c7f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c83:	83 c0 01             	add    eax,0x1
c0007c86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c8a:	83 d2 00             	adc    edx,0x0
c0007c8d:	83 ec 0c             	sub    esp,0xc
c0007c90:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c94:	6a 01                	push   0x1
c0007c96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9e:	55                   	push   ebp
c0007c9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ca3:	e8 66 9f ff ff       	call   c0001c0e <disk_write>
c0007ca8:	83 c4 20             	add    esp,0x20
c0007cab:	85 c0                	test   eax,eax
c0007cad:	0f 85 51 07 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cb7:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cbb:	75 09                	jne    c0007cc6 <f_mkfs+0x973>
c0007cbd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cc0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cc4:	74 12                	je     c0007cd8 <f_mkfs+0x985>
c0007cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cd6:	eb 8a                	jmp    c0007c62 <f_mkfs+0x90f>
c0007cd8:	31 d2                	xor    edx,edx
c0007cda:	b9 00 02 00 00       	mov    ecx,0x200
c0007cdf:	89 e8                	mov    eax,ebp
c0007ce1:	e8 f1 9f ff ff       	call   c0001cd7 <mem_set>
c0007ce6:	83 c6 0b             	add    esi,0xb
c0007ce9:	83 d7 00             	adc    edi,0x0
c0007cec:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cf0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cf4:	31 c9                	xor    ecx,ecx
c0007cf6:	41                   	inc    ecx
c0007cf7:	89 da                	mov    edx,ebx
c0007cf9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cfe:	e8 3b a4 ff ff       	call   c000213e <xsum32>
c0007d03:	89 c3                	mov    ebx,eax
c0007d05:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d0b:	75 e9                	jne    c0007cf6 <f_mkfs+0x9a3>
c0007d0d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d14:	83 c6 01             	add    esi,0x1
c0007d17:	83 d7 00             	adc    edi,0x0
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	6a 01                	push   0x1
c0007d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d27:	55                   	push   ebp
c0007d28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d2c:	e8 dd 9e ff ff       	call   c0001c0e <disk_write>
c0007d31:	83 c4 20             	add    esp,0x20
c0007d34:	85 c0                	test   eax,eax
c0007d36:	0f 85 c8 06 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007d3c:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d40:	75 06                	jne    c0007d48 <f_mkfs+0x9f5>
c0007d42:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d46:	74 09                	je     c0007d51 <f_mkfs+0x9fe>
c0007d48:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d4b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d4f:	eb a3                	jmp    c0007cf4 <f_mkfs+0x9a1>
c0007d51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d55:	89 da                	mov    edx,ebx
c0007d57:	01 e8                	add    eax,ebp
c0007d59:	e8 5b 9f ff ff       	call   c0001cb9 <st_dword>
c0007d5e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d63:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d6b:	75 e4                	jne    c0007d51 <f_mkfs+0x9fe>
c0007d6d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d70:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d74:	83 c6 02             	add    esi,0x2
c0007d77:	83 d7 00             	adc    edi,0x0
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	6a 01                	push   0x1
c0007d7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d87:	55                   	push   ebp
c0007d88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d8c:	e8 7d 9e ff ff       	call   c0001c0e <disk_write>
c0007d91:	83 c4 20             	add    esp,0x20
c0007d94:	85 c0                	test   eax,eax
c0007d96:	0f 85 68 06 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0007d9c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007da1:	74 0d                	je     c0007db0 <f_mkfs+0xa5d>
c0007da3:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dab:	e9 43 fd ff ff       	jmp    c0007af3 <f_mkfs+0x7a0>
c0007db0:	b1 07                	mov    cl,0x7
c0007db2:	e9 e3 05 00 00       	jmp    c000839a <f_mkfs+0x1047>
c0007db7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dbc:	0f 85 4f 02 00 00    	jne    c0008011 <f_mkfs+0xcbe>
c0007dc2:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dc7:	0f 86 22 02 00 00    	jbe    c0007fef <f_mkfs+0xc9c>
c0007dcd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dd2:	0f 85 81 06 00 00    	jne    c0008459 <f_mkfs+0x1106>
c0007dd8:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ddb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ddf:	83 f8 40             	cmp    eax,0x40
c0007de2:	0f 87 51 06 00 00    	ja     c0008439 <f_mkfs+0x10e6>
c0007de8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dec:	85 ff                	test   edi,edi
c0007dee:	75 1c                	jne    c0007e0c <f_mkfs+0xab9>
c0007df0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007df3:	ba 40 9e 02 c0       	mov    edx,0xc0029e40
c0007df8:	c1 e9 0c             	shr    ecx,0xc
c0007dfb:	bf 01 00 00 00       	mov    edi,0x1
c0007e00:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e03:	66 85 c0             	test   ax,ax
c0007e06:	0f 85 95 01 00 00    	jne    c0007fa1 <f_mkfs+0xc4e>
c0007e0c:	31 d2                	xor    edx,edx
c0007e0e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e11:	f7 f7                	div    edi
c0007e13:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e18:	0f 86 95 01 00 00    	jbe    c0007fb3 <f_mkfs+0xc60>
c0007e1e:	83 c0 02             	add    eax,0x2
c0007e21:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e26:	01 c0                	add    eax,eax
c0007e28:	05 ff 01 00 00       	add    eax,0x1ff
c0007e2d:	be 01 00 00 00       	mov    esi,0x1
c0007e32:	c1 e8 09             	shr    eax,0x9
c0007e35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e3d:	c1 e0 05             	shl    eax,0x5
c0007e40:	c1 e8 09             	shr    eax,0x9
c0007e43:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e47:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e4c:	31 d2                	xor    edx,edx
c0007e4e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e52:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e56:	89 f0                	mov    eax,esi
c0007e58:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e5c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e6c:	31 d2                	xor    edx,edx
c0007e6e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e73:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e77:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e7b:	31 db                	xor    ebx,ebx
c0007e7d:	01 c8                	add    eax,ecx
c0007e7f:	11 da                	adc    edx,ebx
c0007e81:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e85:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e89:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e8d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e91:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e95:	f7 da                	neg    edx
c0007e97:	21 d1                	and    ecx,edx
c0007e99:	29 d9                	sub    ecx,ebx
c0007e9b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea0:	0f 85 20 01 00 00    	jne    c0007fc6 <f_mkfs+0xc73>
c0007ea6:	31 db                	xor    ebx,ebx
c0007ea8:	01 ce                	add    esi,ecx
c0007eaa:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007eae:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007eb2:	31 d2                	xor    edx,edx
c0007eb4:	89 f8                	mov    eax,edi
c0007eb6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007eba:	c1 e0 04             	shl    eax,0x4
c0007ebd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ec1:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ec5:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ec9:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ecd:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ed0:	19 d3                	sbb    ebx,edx
c0007ed2:	0f 82 40 01 00 00    	jb     c0008018 <f_mkfs+0xcc5>
c0007ed8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007edb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007edf:	89 c8                	mov    eax,ecx
c0007ee1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ee6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007eea:	29 f0                	sub    eax,esi
c0007eec:	29 d0                	sub    eax,edx
c0007eee:	31 d2                	xor    edx,edx
c0007ef0:	f7 f7                	div    edi
c0007ef2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ef7:	89 c3                	mov    ebx,eax
c0007ef9:	0f 85 b8 fe ff ff    	jne    c0007db7 <f_mkfs+0xa64>
c0007eff:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f04:	0f 87 1d 01 00 00    	ja     c0008027 <f_mkfs+0xcd4>
c0007f0a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f0f:	0f 85 03 01 00 00    	jne    c0008018 <f_mkfs+0xcc5>
c0007f15:	83 ff 01             	cmp    edi,0x1
c0007f18:	0f 86 fa 00 00 00    	jbe    c0008018 <f_mkfs+0xcc5>
c0007f1e:	d1 ef                	shr    edi,1
c0007f20:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f24:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f28:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f2b:	85 db                	test   ebx,ebx
c0007f2d:	75 2d                	jne    c0007f5c <f_mkfs+0xc09>
c0007f2f:	89 cb                	mov    ebx,ecx
c0007f31:	ba 50 9e 02 c0       	mov    edx,0xc0029e50
c0007f36:	c1 eb 11             	shr    ebx,0x11
c0007f39:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f41:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f44:	66 85 c0             	test   ax,ax
c0007f47:	74 11                	je     c0007f5a <f_mkfs+0xc07>
c0007f49:	83 c2 02             	add    edx,0x2
c0007f4c:	39 d8                	cmp    eax,ebx
c0007f4e:	77 0a                	ja     c0007f5a <f_mkfs+0xc07>
c0007f50:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f54:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f58:	eb e7                	jmp    c0007f41 <f_mkfs+0xbee>
c0007f5a:	31 db                	xor    ebx,ebx
c0007f5c:	31 d2                	xor    edx,edx
c0007f5e:	89 c8                	mov    eax,ecx
c0007f60:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f64:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f6b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f70:	c1 ea 09             	shr    edx,0x9
c0007f73:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f78:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f7c:	0f 87 96 00 00 00    	ja     c0008018 <f_mkfs+0xcc5>
c0007f82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f86:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f8e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f92:	be 20 00 00 00       	mov    esi,0x20
c0007f97:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f9c:	e9 a6 fe ff ff       	jmp    c0007e47 <f_mkfs+0xaf4>
c0007fa1:	83 c2 02             	add    edx,0x2
c0007fa4:	39 c8                	cmp    eax,ecx
c0007fa6:	0f 87 60 fe ff ff    	ja     c0007e0c <f_mkfs+0xab9>
c0007fac:	01 ff                	add    edi,edi
c0007fae:	e9 4d fe ff ff       	jmp    c0007e00 <f_mkfs+0xaad>
c0007fb3:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fb6:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fbb:	40                   	inc    eax
c0007fbc:	d1 e8                	shr    eax,1
c0007fbe:	83 c0 03             	add    eax,0x3
c0007fc1:	e9 62 fe ff ff       	jmp    c0007e28 <f_mkfs+0xad5>
c0007fc6:	31 d2                	xor    edx,edx
c0007fc8:	89 c8                	mov    eax,ecx
c0007fca:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fce:	85 d2                	test   edx,edx
c0007fd0:	74 0c                	je     c0007fde <f_mkfs+0xc8b>
c0007fd2:	49                   	dec    ecx
c0007fd3:	46                   	inc    esi
c0007fd4:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fd9:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fde:	89 c8                	mov    eax,ecx
c0007fe0:	31 d2                	xor    edx,edx
c0007fe2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fe6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fea:	e9 c3 fe ff ff       	jmp    c0007eb2 <f_mkfs+0xb5f>
c0007fef:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ff4:	77 31                	ja     c0008027 <f_mkfs+0xcd4>
c0007ff6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ffb:	75 1b                	jne    c0008018 <f_mkfs+0xcc5>
c0007ffd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008004:	3d 80 00 00 00       	cmp    eax,0x80
c0008009:	0f 86 d9 fd ff ff    	jbe    c0007de8 <f_mkfs+0xa95>
c000800f:	eb 07                	jmp    c0008018 <f_mkfs+0xcc5>
c0008011:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008016:	76 0a                	jbe    c0008022 <f_mkfs+0xccf>
c0008018:	bb 0e 00 00 00       	mov    ebx,0xe
c000801d:	e9 ff 03 00 00       	jmp    c0008421 <f_mkfs+0x10ce>
c0008022:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008027:	31 d2                	xor    edx,edx
c0008029:	b9 00 02 00 00       	mov    ecx,0x200
c000802e:	89 e8                	mov    eax,ebp
c0008030:	e8 a2 9c ff ff       	call   c0001cd7 <mem_set>
c0008035:	b9 0b 00 00 00       	mov    ecx,0xb
c000803a:	ba 62 9f 02 c0       	mov    edx,0xc0029f62
c000803f:	89 e8                	mov    eax,ebp
c0008041:	e8 7c 9c ff ff       	call   c0001cc2 <mem_cpy>
c0008046:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008049:	ba 00 02 00 00       	mov    edx,0x200
c000804e:	e8 62 9c ff ff       	call   c0001cb5 <st_word>
c0008053:	89 f8                	mov    eax,edi
c0008055:	0f b7 d6             	movzx  edx,si
c0008058:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000805b:	8d 45 0e             	lea    eax,[ebp+0xe]
c000805e:	e8 52 9c ff ff       	call   c0001cb5 <st_word>
c0008063:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008067:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000806c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000806f:	75 08                	jne    c0008079 <f_mkfs+0xd26>
c0008071:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008079:	8d 45 11             	lea    eax,[ebp+0x11]
c000807c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008080:	e8 30 9c ff ff       	call   c0001cb5 <st_word>
c0008085:	b8 ff ff 00 00       	mov    eax,0xffff
c000808a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000808e:	39 d0                	cmp    eax,edx
c0008090:	b8 00 00 00 00       	mov    eax,0x0
c0008095:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008099:	72 0a                	jb     c00080a5 <f_mkfs+0xd52>
c000809b:	8d 45 13             	lea    eax,[ebp+0x13]
c000809e:	e8 12 9c ff ff       	call   c0001cb5 <st_word>
c00080a3:	eb 08                	jmp    c00080ad <f_mkfs+0xd5a>
c00080a5:	8d 45 20             	lea    eax,[ebp+0x20]
c00080a8:	e8 0c 9c ff ff       	call   c0001cb9 <st_dword>
c00080ad:	8d 45 18             	lea    eax,[ebp+0x18]
c00080b0:	ba 3f 00 00 00       	mov    edx,0x3f
c00080b5:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080b9:	e8 f7 9b ff ff       	call   c0001cb5 <st_word>
c00080be:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080c1:	ba ff 00 00 00       	mov    edx,0xff
c00080c6:	e8 ea 9b ff ff       	call   c0001cb5 <st_word>
c00080cb:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080d2:	e8 e2 9b ff ff       	call   c0001cb9 <st_dword>
c00080d7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080dc:	75 57                	jne    c0008135 <f_mkfs+0xde2>
c00080de:	8d 45 43             	lea    eax,[ebp+0x43]
c00080e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00080e6:	e8 ce 9b ff ff       	call   c0001cb9 <st_dword>
c00080eb:	8d 45 24             	lea    eax,[ebp+0x24]
c00080ee:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f2:	e8 c2 9b ff ff       	call   c0001cb9 <st_dword>
c00080f7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080fa:	ba 02 00 00 00       	mov    edx,0x2
c00080ff:	e8 b5 9b ff ff       	call   c0001cb9 <st_dword>
c0008104:	8d 45 30             	lea    eax,[ebp+0x30]
c0008107:	ba 01 00 00 00       	mov    edx,0x1
c000810c:	e8 a4 9b ff ff       	call   c0001cb5 <st_word>
c0008111:	8d 45 32             	lea    eax,[ebp+0x32]
c0008114:	ba 06 00 00 00       	mov    edx,0x6
c0008119:	e8 97 9b ff ff       	call   c0001cb5 <st_word>
c000811e:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008122:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008126:	8d 45 47             	lea    eax,[ebp+0x47]
c0008129:	b9 13 00 00 00       	mov    ecx,0x13
c000812e:	ba 6e 9f 02 c0       	mov    edx,0xc0029f6e
c0008133:	eb 2f                	jmp    c0008164 <f_mkfs+0xe11>
c0008135:	8d 45 27             	lea    eax,[ebp+0x27]
c0008138:	ba 00 00 21 50       	mov    edx,0x50210000
c000813d:	e8 77 9b ff ff       	call   c0001cb9 <st_dword>
c0008142:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008147:	8d 45 16             	lea    eax,[ebp+0x16]
c000814a:	e8 66 9b ff ff       	call   c0001cb5 <st_word>
c000814f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008153:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008157:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000815a:	b9 13 00 00 00       	mov    ecx,0x13
c000815f:	ba 82 9f 02 c0       	mov    edx,0xc0029f82
c0008164:	e8 59 9b ff ff       	call   c0001cc2 <mem_cpy>
c0008169:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000816f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008174:	89 f0                	mov    eax,esi
c0008176:	e8 3a 9b ff ff       	call   c0001cb5 <st_word>
c000817b:	83 ec 0c             	sub    esp,0xc
c000817e:	6a 01                	push   0x1
c0008180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008188:	55                   	push   ebp
c0008189:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000818d:	e8 7c 9a ff ff       	call   c0001c0e <disk_write>
c0008192:	83 c4 20             	add    esp,0x20
c0008195:	85 c0                	test   eax,eax
c0008197:	0f 85 67 02 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c000819d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a2:	0f 85 b7 00 00 00    	jne    c000825f <f_mkfs+0xf0c>
c00081a8:	83 ec 0c             	sub    esp,0xc
c00081ab:	6a 01                	push   0x1
c00081ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081b5:	83 c0 06             	add    eax,0x6
c00081b8:	83 d2 00             	adc    edx,0x0
c00081bb:	52                   	push   edx
c00081bc:	50                   	push   eax
c00081bd:	55                   	push   ebp
c00081be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c2:	e8 47 9a ff ff       	call   c0001c0e <disk_write>
c00081c7:	83 c4 20             	add    esp,0x20
c00081ca:	b9 00 02 00 00       	mov    ecx,0x200
c00081cf:	31 d2                	xor    edx,edx
c00081d1:	89 e8                	mov    eax,ebp
c00081d3:	e8 ff 9a ff ff       	call   c0001cd7 <mem_set>
c00081d8:	ba 52 52 61 41       	mov    edx,0x41615252
c00081dd:	89 e8                	mov    eax,ebp
c00081df:	e8 d5 9a ff ff       	call   c0001cb9 <st_dword>
c00081e4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ea:	ba 72 72 41 61       	mov    edx,0x61417272
c00081ef:	e8 c5 9a ff ff       	call   c0001cb9 <st_dword>
c00081f4:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081f7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081fd:	e8 b7 9a ff ff       	call   c0001cb9 <st_dword>
c0008202:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008208:	ba 02 00 00 00       	mov    edx,0x2
c000820d:	e8 a7 9a ff ff       	call   c0001cb9 <st_dword>
c0008212:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008217:	89 f0                	mov    eax,esi
c0008219:	e8 97 9a ff ff       	call   c0001cb5 <st_word>
c000821e:	83 ec 0c             	sub    esp,0xc
c0008221:	6a 01                	push   0x1
c0008223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008227:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822b:	83 c0 07             	add    eax,0x7
c000822e:	83 d2 00             	adc    edx,0x0
c0008231:	52                   	push   edx
c0008232:	50                   	push   eax
c0008233:	55                   	push   ebp
c0008234:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008238:	e8 d1 99 ff ff       	call   c0001c0e <disk_write>
c000823d:	83 c4 14             	add    esp,0x14
c0008240:	6a 01                	push   0x1
c0008242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008246:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000824a:	83 c0 01             	add    eax,0x1
c000824d:	83 d2 00             	adc    edx,0x0
c0008250:	52                   	push   edx
c0008251:	50                   	push   eax
c0008252:	55                   	push   ebp
c0008253:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008257:	e8 b2 99 ff ff       	call   c0001c0e <disk_write>
c000825c:	83 c4 20             	add    esp,0x20
c000825f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008266:	31 d2                	xor    edx,edx
c0008268:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000826e:	31 db                	xor    ebx,ebx
c0008270:	89 e8                	mov    eax,ebp
c0008272:	e8 60 9a ff ff       	call   c0001cd7 <mem_set>
c0008277:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000827c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008283:	0f 94 c3             	sete   bl
c0008286:	4b                   	dec    ebx
c0008287:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000828d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008293:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008298:	75 21                	jne    c00082bb <f_mkfs+0xf68>
c000829a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000829f:	89 e8                	mov    eax,ebp
c00082a1:	e8 13 9a ff ff       	call   c0001cb9 <st_dword>
c00082a6:	8d 45 04             	lea    eax,[ebp+0x4]
c00082a9:	83 ca ff             	or     edx,0xffffffff
c00082ac:	e8 08 9a ff ff       	call   c0001cb9 <st_dword>
c00082b1:	8d 45 08             	lea    eax,[ebp+0x8]
c00082b4:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082b9:	eb 04                	jmp    c00082bf <f_mkfs+0xf6c>
c00082bb:	89 da                	mov    edx,ebx
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 f5 99 ff ff       	call   c0001cb9 <st_dword>
c00082c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082cc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082d4:	39 ce                	cmp    esi,ecx
c00082d6:	76 02                	jbe    c00082da <f_mkfs+0xf87>
c00082d8:	89 ce                	mov    esi,ecx
c00082da:	83 ec 0c             	sub    esp,0xc
c00082dd:	56                   	push   esi
c00082de:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 1e 99 ff ff       	call   c0001c0e <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 09 01 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c00082fb:	31 d2                	xor    edx,edx
c00082fd:	b9 00 02 00 00       	mov    ecx,0x200
c0008302:	89 e8                	mov    eax,ebp
c0008304:	e8 ce 99 ff ff       	call   c0001cd7 <mem_set>
c0008309:	31 d2                	xor    edx,edx
c000830b:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000830f:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008313:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008317:	75 b3                	jne    c00082cc <f_mkfs+0xf79>
c0008319:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000831c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008323:	40                   	inc    eax
c0008324:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008328:	0f 87 65 ff ff ff    	ja     c0008293 <f_mkfs+0xf40>
c000832e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008333:	74 04                	je     c0008339 <f_mkfs+0xfe6>
c0008335:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008339:	89 fb                	mov    ebx,edi
c000833b:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000833f:	76 04                	jbe    c0008345 <f_mkfs+0xff2>
c0008341:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008345:	83 ec 0c             	sub    esp,0xc
c0008348:	53                   	push   ebx
c0008349:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008351:	55                   	push   ebp
c0008352:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008356:	e8 b3 98 ff ff       	call   c0001c0e <disk_write>
c000835b:	83 c4 20             	add    esp,0x20
c000835e:	85 c0                	test   eax,eax
c0008360:	0f 85 9e 00 00 00    	jne    c0008404 <f_mkfs+0x10b1>
c0008366:	31 d2                	xor    edx,edx
c0008368:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000836c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008370:	29 df                	sub    edi,ebx
c0008372:	75 c5                	jne    c0008339 <f_mkfs+0xfe6>
c0008374:	b1 0c                	mov    cl,0xc
c0008376:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000837b:	74 1d                	je     c000839a <f_mkfs+0x1047>
c000837d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008382:	b1 06                	mov    cl,0x6
c0008384:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008388:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000838c:	72 0c                	jb     c000839a <f_mkfs+0x1047>
c000838e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008393:	0f 94 c1             	sete   cl
c0008396:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000839a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000839f:	75 4c                	jne    c00083ed <f_mkfs+0x109a>
c00083a1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083a5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083a9:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083b0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083b7:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083c2:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083cd:	0f b6 c9             	movzx  ecx,cl
c00083d0:	83 ec 0c             	sub    esp,0xc
c00083d3:	55                   	push   ebp
c00083d4:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083df:	e8 2f c2 ff ff       	call   c0004613 <create_partition>
c00083e4:	83 c4 10             	add    esp,0x10
c00083e7:	89 c3                	mov    ebx,eax
c00083e9:	85 c0                	test   eax,eax
c00083eb:	75 34                	jne    c0008421 <f_mkfs+0x10ce>
c00083ed:	31 db                	xor    ebx,ebx
c00083ef:	50                   	push   eax
c00083f0:	6a 00                	push   0x0
c00083f2:	6a 00                	push   0x0
c00083f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083f8:	e8 27 98 ff ff       	call   c0001c24 <disk_ioctl>
c00083fd:	83 c4 10             	add    esp,0x10
c0008400:	85 c0                	test   eax,eax
c0008402:	74 1d                	je     c0008421 <f_mkfs+0x10ce>
c0008404:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840c:	75 0c                	jne    c000841a <f_mkfs+0x10c7>
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	55                   	push   ebp
c0008412:	e8 75 00 00 00       	call   c000848c <ff_memfree>
c0008417:	83 c4 10             	add    esp,0x10
c000841a:	bb 01 00 00 00       	mov    ebx,0x1
c000841f:	eb 48                	jmp    c0008469 <f_mkfs+0x1116>
c0008421:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008429:	75 3e                	jne    c0008469 <f_mkfs+0x1116>
c000842b:	83 ec 0c             	sub    esp,0xc
c000842e:	55                   	push   ebp
c000842f:	e8 58 00 00 00       	call   c000848c <ff_memfree>
c0008434:	83 c4 10             	add    esp,0x10
c0008437:	eb 30                	jmp    c0008469 <f_mkfs+0x1116>
c0008439:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000843e:	0f 85 eb fa ff ff    	jne    c0007f2f <f_mkfs+0xbdc>
c0008444:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008448:	81 ff 80 00 00 00    	cmp    edi,0x80
c000844e:	0f 86 b8 f9 ff ff    	jbe    c0007e0c <f_mkfs+0xab9>
c0008454:	e9 bf fb ff ff       	jmp    c0008018 <f_mkfs+0xcc5>
c0008459:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845e:	0f 85 c0 fa ff ff    	jne    c0007f24 <f_mkfs+0xbd1>
c0008464:	e9 af fb ff ff       	jmp    c0008018 <f_mkfs+0xcc5>
c0008469:	81 c4 9c 00 00 00    	add    esp,0x9c
c000846f:	89 d8                	mov    eax,ebx
c0008471:	5b                   	pop    ebx
c0008472:	5e                   	pop    esi
c0008473:	5f                   	pop    edi
c0008474:	5d                   	pop    ebp
c0008475:	c3                   	ret    

c0008476 <ff_memalloc>:
c0008476:	83 ec 0c             	sub    esp,0xc
c0008479:	83 ec 0c             	sub    esp,0xc
c000847c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008480:	e8 6f 74 00 00       	call   c000f8f4 <malloc>
c0008485:	83 c4 10             	add    esp,0x10
c0008488:	83 c4 0c             	add    esp,0xc
c000848b:	c3                   	ret    

c000848c <ff_memfree>:
c000848c:	83 ec 0c             	sub    esp,0xc
c000848f:	83 ec 0c             	sub    esp,0xc
c0008492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008496:	e8 69 74 00 00       	call   c000f904 <free>
c000849b:	83 c4 10             	add    esp,0x10
c000849e:	90                   	nop
c000849f:	83 c4 0c             	add    esp,0xc
c00084a2:	c3                   	ret    

c00084a3 <ff_uni2oem>:
c00084a3:	83 ec 14             	sub    esp,0x14
c00084a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084aa:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084ae:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084b5:	c7 44 24 0c a0 a2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a2a0
c00084bd:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084c2:	77 0b                	ja     c00084cf <ff_uni2oem+0x2c>
c00084c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084c8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084cd:	eb 5b                	jmp    c000852a <ff_uni2oem+0x87>
c00084cf:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084d7:	77 51                	ja     c000852a <ff_uni2oem+0x87>
c00084d9:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084df:	75 49                	jne    c000852a <ff_uni2oem+0x87>
c00084e1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084e8:	eb 0b                	jmp    c00084f5 <ff_uni2oem+0x52>
c00084ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084ef:	40                   	inc    eax
c00084f0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084fb:	77 1b                	ja     c0008518 <ff_uni2oem+0x75>
c00084fd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008502:	01 c0                	add    eax,eax
c0008504:	89 c2                	mov    edx,eax
c0008506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000850a:	01 d0                	add    eax,edx
c000850c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000850f:	0f b7 c0             	movzx  eax,ax
c0008512:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008516:	75 d2                	jne    c00084ea <ff_uni2oem+0x47>
c0008518:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000851d:	83 e8 80             	sub    eax,0xffffff80
c0008520:	25 ff 00 00 00       	and    eax,0xff
c0008525:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000852a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000852f:	83 c4 14             	add    esp,0x14
c0008532:	c3                   	ret    

c0008533 <ff_oem2uni>:
c0008533:	83 ec 18             	sub    esp,0x18
c0008536:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000853a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000853e:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008543:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008547:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000854e:	c7 44 24 10 a0 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2a0
c0008556:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000855c:	77 0b                	ja     c0008569 <ff_oem2uni+0x36>
c000855e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008562:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008567:	eb 2d                	jmp    c0008596 <ff_oem2uni+0x63>
c0008569:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000856f:	75 25                	jne    c0008596 <ff_oem2uni+0x63>
c0008571:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008578:	77 1c                	ja     c0008596 <ff_oem2uni+0x63>
c000857a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000857f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008584:	01 c0                	add    eax,eax
c0008586:	89 c2                	mov    edx,eax
c0008588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000858c:	01 d0                	add    eax,edx
c000858e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008591:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008596:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000859b:	83 c4 18             	add    esp,0x18
c000859e:	c3                   	ret    

c000859f <ff_wtoupper>:
c000859f:	83 ec 10             	sub    esp,0x10
c00085a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085aa:	0f 87 3e 01 00 00    	ja     c00086ee <ff_wtoupper+0x14f>
c00085b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085b9:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085c0:	77 07                	ja     c00085c9 <ff_wtoupper+0x2a>
c00085c2:	b8 a0 a0 02 c0       	mov    eax,0xc002a0a0
c00085c7:	eb 05                	jmp    c00085ce <ff_wtoupper+0x2f>
c00085c9:	b8 e0 9f 02 c0       	mov    eax,0xc0029fe0
c00085ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085d6:	8d 50 02             	lea    edx,[eax+0x2]
c00085d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085dd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085e0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085e5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085eb:	0f 84 f4 00 00 00    	je     c00086e5 <ff_wtoupper+0x146>
c00085f1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085f6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085fb:	0f 82 e4 00 00 00    	jb     c00086e5 <ff_wtoupper+0x146>
c0008601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008605:	8d 50 02             	lea    edx,[eax+0x2]
c0008608:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000860c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000860f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008614:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008619:	66 c1 e8 08          	shr    ax,0x8
c000861d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008622:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008629:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000862e:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008633:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008638:	01 ca                	add    edx,ecx
c000863a:	39 d0                	cmp    eax,edx
c000863c:	0f 8d 86 00 00 00    	jge    c00086c8 <ff_wtoupper+0x129>
c0008642:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008647:	83 f8 08             	cmp    eax,0x8
c000864a:	0f 87 94 00 00 00    	ja     c00086e4 <ff_wtoupper+0x145>
c0008650:	8b 04 85 a0 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6060]
c0008657:	ff e0                	jmp    eax
c0008659:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000865e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008663:	29 c2                	sub    edx,eax
c0008665:	89 d0                	mov    eax,edx
c0008667:	01 c0                	add    eax,eax
c0008669:	89 c2                	mov    edx,eax
c000866b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866f:	01 d0                	add    eax,edx
c0008671:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008674:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008679:	eb 4b                	jmp    c00086c6 <ff_wtoupper+0x127>
c000867b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008680:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008684:	83 e0 01             	and    eax,0x1
c0008687:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000868c:	eb 38                	jmp    c00086c6 <ff_wtoupper+0x127>
c000868e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008694:	eb 30                	jmp    c00086c6 <ff_wtoupper+0x127>
c0008696:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000869c:	eb 28                	jmp    c00086c6 <ff_wtoupper+0x127>
c000869e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086a4:	eb 20                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086a6:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ac:	eb 18                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086ae:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086b4:	eb 10                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086b6:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086bc:	eb 08                	jmp    c00086c6 <ff_wtoupper+0x127>
c00086be:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086c5:	90                   	nop
c00086c6:	eb 1c                	jmp    c00086e4 <ff_wtoupper+0x145>
c00086c8:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ce:	0f 85 fe fe ff ff    	jne    c00085d2 <ff_wtoupper+0x33>
c00086d4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086d9:	01 c0                	add    eax,eax
c00086db:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086df:	e9 ee fe ff ff       	jmp    c00085d2 <ff_wtoupper+0x33>
c00086e4:	90                   	nop
c00086e5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086f2:	83 c4 10             	add    esp,0x10
c00086f5:	c3                   	ret    

c00086f6 <psrc_set_converter>:
c00086f6:	56                   	push   esi
c00086f7:	89 d6                	mov    esi,edx
c00086f9:	53                   	push   ebx
c00086fa:	89 c3                	mov    ebx,eax
c00086fc:	83 ec 0c             	sub    esp,0xc
c00086ff:	52                   	push   edx
c0008700:	50                   	push   eax
c0008701:	e8 6f 55 00 00       	call   c000dc75 <sinc_set_converter>
c0008706:	83 c4 10             	add    esp,0x10
c0008709:	85 c0                	test   eax,eax
c000870b:	74 25                	je     c0008732 <psrc_set_converter+0x3c>
c000870d:	50                   	push   eax
c000870e:	50                   	push   eax
c000870f:	56                   	push   esi
c0008710:	53                   	push   ebx
c0008711:	e8 17 5d 00 00       	call   c000e42d <zoh_set_converter>
c0008716:	83 c4 10             	add    esp,0x10
c0008719:	85 c0                	test   eax,eax
c000871b:	74 15                	je     c0008732 <psrc_set_converter+0x3c>
c000871d:	51                   	push   ecx
c000871e:	51                   	push   ecx
c000871f:	56                   	push   esi
c0008720:	53                   	push   ebx
c0008721:	e8 0f 11 00 00       	call   c0009835 <linear_set_converter>
c0008726:	83 c4 10             	add    esp,0x10
c0008729:	ba 0a 00 00 00       	mov    edx,0xa
c000872e:	85 c0                	test   eax,eax
c0008730:	75 02                	jne    c0008734 <psrc_set_converter+0x3e>
c0008732:	31 d2                	xor    edx,edx
c0008734:	89 d0                	mov    eax,edx
c0008736:	5a                   	pop    edx
c0008737:	5b                   	pop    ebx
c0008738:	5e                   	pop    esi
c0008739:	c3                   	ret    

c000873a <src_delete>:
c000873a:	53                   	push   ebx
c000873b:	83 ec 08             	sub    esp,0x8
c000873e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008742:	85 db                	test   ebx,ebx
c0008744:	74 29                	je     c000876f <src_delete+0x35>
c0008746:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008749:	85 c0                	test   eax,eax
c000874b:	74 0c                	je     c0008759 <src_delete+0x1f>
c000874d:	83 ec 0c             	sub    esp,0xc
c0008750:	50                   	push   eax
c0008751:	e8 ae 71 00 00       	call   c000f904 <free>
c0008756:	83 c4 10             	add    esp,0x10
c0008759:	50                   	push   eax
c000875a:	6a 3c                	push   0x3c
c000875c:	6a 00                	push   0x0
c000875e:	53                   	push   ebx
c000875f:	e8 08 80 ff ff       	call   c000076c <memset>
c0008764:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008767:	e8 98 71 00 00       	call   c000f904 <free>
c000876c:	83 c4 10             	add    esp,0x10
c000876f:	31 c0                	xor    eax,eax
c0008771:	83 c4 08             	add    esp,0x8
c0008774:	5b                   	pop    ebx
c0008775:	c3                   	ret    

c0008776 <src_process>:
c0008776:	55                   	push   ebp
c0008777:	57                   	push   edi
c0008778:	56                   	push   esi
c0008779:	53                   	push   ebx
c000877a:	83 ec 1c             	sub    esp,0x1c
c000877d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008781:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008785:	85 ed                	test   ebp,ebp
c0008787:	0f 84 6f 01 00 00    	je     c00088fc <src_process+0x186>
c000878d:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008791:	0f 84 6c 01 00 00    	je     c0008903 <src_process+0x18d>
c0008797:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000879b:	0f 84 62 01 00 00    	je     c0008903 <src_process+0x18d>
c00087a1:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087a8:	0f 85 5c 01 00 00    	jne    c000890a <src_process+0x194>
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	0f 84 5b 01 00 00    	je     c0008911 <src_process+0x19b>
c00087b6:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087b8:	85 f6                	test   esi,esi
c00087ba:	0f 84 58 01 00 00    	je     c0008918 <src_process+0x1a2>
c00087c0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087c3:	85 ff                	test   edi,edi
c00087c5:	0f 84 4d 01 00 00    	je     c0008918 <src_process+0x1a2>
c00087cb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ce:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087d9:	68 00 00 70 3f       	push   0x3f700000
c00087de:	6a 00                	push   0x0
c00087e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e8:	e8 7a 06 02 00       	call   c0028e67 <__ltdf2>
c00087ed:	83 c4 10             	add    esp,0x10
c00087f0:	85 c0                	test   eax,eax
c00087f2:	0f 88 27 01 00 00    	js     c000891f <src_process+0x1a9>
c00087f8:	68 00 00 70 40       	push   0x40700000
c00087fd:	6a 00                	push   0x0
c00087ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008807:	e8 3d 06 02 00       	call   c0028e49 <__gtdf2>
c000880c:	83 c4 10             	add    esp,0x10
c000880f:	85 c0                	test   eax,eax
c0008811:	0f 8f 08 01 00 00    	jg     c000891f <src_process+0x1a9>
c0008817:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000881b:	79 07                	jns    c0008824 <src_process+0xae>
c000881d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008824:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008827:	85 c0                	test   eax,eax
c0008829:	79 50                	jns    c000887b <src_process+0x105>
c000882b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008832:	39 fe                	cmp    esi,edi
c0008834:	72 37                	jb     c000886d <src_process+0xf7>
c0008836:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000883d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008844:	68 00 00 70 3f       	push   0x3f700000
c0008849:	6a 00                	push   0x0
c000884b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000884e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008851:	e8 11 06 02 00       	call   c0028e67 <__ltdf2>
c0008856:	83 c4 10             	add    esp,0x10
c0008859:	85 c0                	test   eax,eax
c000885b:	79 37                	jns    c0008894 <src_process+0x11e>
c000885d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008861:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008865:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008868:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000886b:	eb 27                	jmp    c0008894 <src_process+0x11e>
c000886d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008870:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008874:	8d 04 86             	lea    eax,[esi+eax*4]
c0008877:	39 c7                	cmp    edi,eax
c0008879:	eb 0d                	jmp    c0008888 <src_process+0x112>
c000887b:	39 fe                	cmp    esi,edi
c000887d:	72 ee                	jb     c000886d <src_process+0xf7>
c000887f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008883:	8d 04 87             	lea    eax,[edi+eax*4]
c0008886:	39 c6                	cmp    esi,eax
c0008888:	73 ac                	jae    c0008836 <src_process+0xc0>
c000888a:	b8 10 00 00 00       	mov    eax,0x10
c000888f:	e9 90 00 00 00       	jmp    c0008924 <src_process+0x1ae>
c0008894:	83 ec 10             	sub    esp,0x10
c0008897:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000889a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000889d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088a3:	e8 c4 fc 01 00       	call   c002856c <__subdf3>
c00088a8:	83 c4 18             	add    esp,0x18
c00088ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088b3:	52                   	push   edx
c00088b4:	50                   	push   eax
c00088b5:	e8 46 07 02 00       	call   c0029000 <fabs>
c00088ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088c2:	83 c4 10             	add    esp,0x10
c00088c5:	68 af 03 d2 3c       	push   0x3cd203af
c00088ca:	68 16 56 e7 9e       	push   0x9ee75616
c00088cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d7:	e8 8b 05 02 00       	call   c0028e67 <__ltdf2>
c00088dc:	83 c4 10             	add    esp,0x10
c00088df:	85 c0                	test   eax,eax
c00088e1:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088e5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088e9:	79 05                	jns    c00088f0 <src_process+0x17a>
c00088eb:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088ee:	eb 03                	jmp    c00088f3 <src_process+0x17d>
c00088f0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088f3:	83 c4 1c             	add    esp,0x1c
c00088f6:	5b                   	pop    ebx
c00088f7:	5e                   	pop    esi
c00088f8:	5f                   	pop    edi
c00088f9:	5d                   	pop    ebp
c00088fa:	ff e0                	jmp    eax
c00088fc:	b8 02 00 00 00       	mov    eax,0x2
c0008901:	eb 21                	jmp    c0008924 <src_process+0x1ae>
c0008903:	b8 07 00 00 00       	mov    eax,0x7
c0008908:	eb 1a                	jmp    c0008924 <src_process+0x1ae>
c000890a:	b8 12 00 00 00       	mov    eax,0x12
c000890f:	eb 13                	jmp    c0008924 <src_process+0x1ae>
c0008911:	b8 03 00 00 00       	mov    eax,0x3
c0008916:	eb 0c                	jmp    c0008924 <src_process+0x1ae>
c0008918:	b8 04 00 00 00       	mov    eax,0x4
c000891d:	eb 05                	jmp    c0008924 <src_process+0x1ae>
c000891f:	b8 06 00 00 00       	mov    eax,0x6
c0008924:	83 c4 1c             	add    esp,0x1c
c0008927:	5b                   	pop    ebx
c0008928:	5e                   	pop    esi
c0008929:	5f                   	pop    edi
c000892a:	5d                   	pop    ebp
c000892b:	c3                   	ret    

c000892c <src_callback_read>:
c000892c:	55                   	push   ebp
c000892d:	57                   	push   edi
c000892e:	56                   	push   esi
c000892f:	53                   	push   ebx
c0008930:	83 ec 3c             	sub    esp,0x3c
c0008933:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008937:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000893b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000893f:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008943:	85 ed                	test   ebp,ebp
c0008945:	0f 8e 52 01 00 00    	jle    c0008a9d <src_callback_read+0x171>
c000894b:	85 db                	test   ebx,ebx
c000894d:	0f 84 4a 01 00 00    	je     c0008a9d <src_callback_read+0x171>
c0008953:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000895a:	74 0c                	je     c0008968 <src_callback_read+0x3c>
c000895c:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008963:	e9 35 01 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c0008968:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000896c:	75 0c                	jne    c000897a <src_callback_read+0x4e>
c000896e:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008975:	e9 23 01 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c000897a:	51                   	push   ecx
c000897b:	6a 24                	push   0x24
c000897d:	6a 00                	push   0x0
c000897f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008983:	50                   	push   eax
c0008984:	e8 e3 7d ff ff       	call   c000076c <memset>
c0008989:	83 c4 10             	add    esp,0x10
c000898c:	68 00 00 70 3f       	push   0x3f700000
c0008991:	6a 00                	push   0x0
c0008993:	57                   	push   edi
c0008994:	56                   	push   esi
c0008995:	e8 cd 04 02 00       	call   c0028e67 <__ltdf2>
c000899a:	83 c4 10             	add    esp,0x10
c000899d:	85 c0                	test   eax,eax
c000899f:	78 3e                	js     c00089df <src_callback_read+0xb3>
c00089a1:	68 00 00 70 40       	push   0x40700000
c00089a6:	6a 00                	push   0x0
c00089a8:	57                   	push   edi
c00089a9:	56                   	push   esi
c00089aa:	e8 9a 04 02 00       	call   c0028e49 <__gtdf2>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	85 c0                	test   eax,eax
c00089b4:	7f 29                	jg     c00089df <src_callback_read+0xb3>
c00089b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089ba:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089c2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089c6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089c9:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089d1:	31 f6                	xor    esi,esi
c00089d3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089da:	e9 97 00 00 00       	jmp    c0008a76 <src_callback_read+0x14a>
c00089df:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089e6:	e9 b2 00 00 00       	jmp    c0008a9d <src_callback_read+0x171>
c00089eb:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089f3:	52                   	push   edx
c00089f4:	52                   	push   edx
c00089f5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f9:	50                   	push   eax
c00089fa:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089fd:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a08:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a0c:	83 c4 10             	add    esp,0x10
c0008a0f:	85 c0                	test   eax,eax
c0008a11:	75 08                	jne    c0008a1b <src_callback_read+0xef>
c0008a13:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a1b:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a22:	50                   	push   eax
c0008a23:	50                   	push   eax
c0008a24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a28:	50                   	push   eax
c0008a29:	53                   	push   ebx
c0008a2a:	e8 47 fd ff ff       	call   c0008776 <src_process>
c0008a2f:	83 c4 10             	add    esp,0x10
c0008a32:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a39:	85 c0                	test   eax,eax
c0008a3b:	75 49                	jne    c0008a86 <src_callback_read+0x15a>
c0008a3d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a41:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a44:	89 f9                	mov    ecx,edi
c0008a46:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a4a:	0f af ca             	imul   ecx,edx
c0008a4d:	c1 e1 02             	shl    ecx,0x2
c0008a50:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a58:	0f af d1             	imul   edx,ecx
c0008a5b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a5f:	c1 e2 02             	shl    edx,0x2
c0008a62:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a66:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a69:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a6e:	74 12                	je     c0008a82 <src_callback_read+0x156>
c0008a70:	39 d5                	cmp    ebp,edx
c0008a72:	7e 14                	jle    c0008a88 <src_callback_read+0x15c>
c0008a74:	89 d6                	mov    esi,edx
c0008a76:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a7b:	75 9e                	jne    c0008a1b <src_callback_read+0xef>
c0008a7d:	e9 69 ff ff ff       	jmp    c00089eb <src_callback_read+0xbf>
c0008a82:	85 c9                	test   ecx,ecx
c0008a84:	75 ea                	jne    c0008a70 <src_callback_read+0x144>
c0008a86:	89 f2                	mov    edx,esi
c0008a88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a8c:	85 c0                	test   eax,eax
c0008a8e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a95:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a98:	74 05                	je     c0008a9f <src_callback_read+0x173>
c0008a9a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9d:	31 d2                	xor    edx,edx
c0008a9f:	83 c4 3c             	add    esp,0x3c
c0008aa2:	89 d0                	mov    eax,edx
c0008aa4:	5b                   	pop    ebx
c0008aa5:	5e                   	pop    esi
c0008aa6:	5f                   	pop    edi
c0008aa7:	5d                   	pop    ebp
c0008aa8:	c3                   	ret    

c0008aa9 <src_set_ratio>:
c0008aa9:	57                   	push   edi
c0008aaa:	ba 02 00 00 00       	mov    edx,0x2
c0008aaf:	56                   	push   esi
c0008ab0:	53                   	push   ebx
c0008ab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ab9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008abd:	85 db                	test   ebx,ebx
c0008abf:	74 4c                	je     c0008b0d <src_set_ratio+0x64>
c0008ac1:	ba 07 00 00 00       	mov    edx,0x7
c0008ac6:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aca:	74 41                	je     c0008b0d <src_set_ratio+0x64>
c0008acc:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ad0:	74 3b                	je     c0008b0d <src_set_ratio+0x64>
c0008ad2:	68 00 00 70 3f       	push   0x3f700000
c0008ad7:	6a 00                	push   0x0
c0008ad9:	57                   	push   edi
c0008ada:	56                   	push   esi
c0008adb:	e8 87 03 02 00       	call   c0028e67 <__ltdf2>
c0008ae0:	83 c4 10             	add    esp,0x10
c0008ae3:	ba 06 00 00 00       	mov    edx,0x6
c0008ae8:	85 c0                	test   eax,eax
c0008aea:	78 21                	js     c0008b0d <src_set_ratio+0x64>
c0008aec:	68 00 00 70 40       	push   0x40700000
c0008af1:	6a 00                	push   0x0
c0008af3:	57                   	push   edi
c0008af4:	56                   	push   esi
c0008af5:	e8 4f 03 02 00       	call   c0028e49 <__gtdf2>
c0008afa:	83 c4 10             	add    esp,0x10
c0008afd:	ba 06 00 00 00       	mov    edx,0x6
c0008b02:	85 c0                	test   eax,eax
c0008b04:	7f 07                	jg     c0008b0d <src_set_ratio+0x64>
c0008b06:	89 33                	mov    DWORD PTR [ebx],esi
c0008b08:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b0b:	31 d2                	xor    edx,edx
c0008b0d:	5b                   	pop    ebx
c0008b0e:	89 d0                	mov    eax,edx
c0008b10:	5e                   	pop    esi
c0008b11:	5f                   	pop    edi
c0008b12:	c3                   	ret    

c0008b13 <src_get_channels>:
c0008b13:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b17:	b8 02 00 00 00       	mov    eax,0x2
c0008b1c:	85 d2                	test   edx,edx
c0008b1e:	74 14                	je     c0008b34 <src_get_channels+0x21>
c0008b20:	b8 07 00 00 00       	mov    eax,0x7
c0008b25:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b29:	74 09                	je     c0008b34 <src_get_channels+0x21>
c0008b2b:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b2f:	74 03                	je     c0008b34 <src_get_channels+0x21>
c0008b31:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b34:	c3                   	ret    

c0008b35 <src_reset>:
c0008b35:	53                   	push   ebx
c0008b36:	b8 02 00 00 00       	mov    eax,0x2
c0008b3b:	83 ec 08             	sub    esp,0x8
c0008b3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b42:	85 db                	test   ebx,ebx
c0008b44:	74 36                	je     c0008b7c <src_reset+0x47>
c0008b46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b49:	85 c0                	test   eax,eax
c0008b4b:	74 09                	je     c0008b56 <src_reset+0x21>
c0008b4d:	83 ec 0c             	sub    esp,0xc
c0008b50:	53                   	push   ebx
c0008b51:	ff d0                	call   eax
c0008b53:	83 c4 10             	add    esp,0x10
c0008b56:	31 c0                	xor    eax,eax
c0008b58:	31 d2                	xor    edx,edx
c0008b5a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b5d:	89 03                	mov    DWORD PTR [ebx],eax
c0008b5f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b62:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b65:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b6c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b73:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b7a:	31 c0                	xor    eax,eax
c0008b7c:	83 c4 08             	add    esp,0x8
c0008b7f:	5b                   	pop    ebx
c0008b80:	c3                   	ret    

c0008b81 <src_new>:
c0008b81:	57                   	push   edi
c0008b82:	56                   	push   esi
c0008b83:	53                   	push   ebx
c0008b84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b88:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b8c:	85 f6                	test   esi,esi
c0008b8e:	74 73                	je     c0008c03 <src_new+0x82>
c0008b90:	85 ff                	test   edi,edi
c0008b92:	7f 08                	jg     c0008b9c <src_new+0x1b>
c0008b94:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b9a:	eb 1e                	jmp    c0008bba <src_new+0x39>
c0008b9c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008ba2:	50                   	push   eax
c0008ba3:	50                   	push   eax
c0008ba4:	6a 3c                	push   0x3c
c0008ba6:	6a 01                	push   0x1
c0008ba8:	e8 77 6d 00 00       	call   c000f924 <calloc>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	89 c3                	mov    ebx,eax
c0008bb2:	85 c0                	test   eax,eax
c0008bb4:	75 10                	jne    c0008bc6 <src_new+0x45>
c0008bb6:	85 f6                	test   esi,esi
c0008bb8:	75 04                	jne    c0008bbe <src_new+0x3d>
c0008bba:	31 db                	xor    ebx,ebx
c0008bbc:	eb 4b                	jmp    c0008c09 <src_new+0x88>
c0008bbe:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bc4:	eb 43                	jmp    c0008c09 <src_new+0x88>
c0008bc6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bc9:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bd4:	e8 1d fb ff ff       	call   c00086f6 <psrc_set_converter>
c0008bd9:	85 c0                	test   eax,eax
c0008bdb:	74 18                	je     c0008bf5 <src_new+0x74>
c0008bdd:	85 f6                	test   esi,esi
c0008bdf:	74 06                	je     c0008be7 <src_new+0x66>
c0008be1:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008be7:	83 ec 0c             	sub    esp,0xc
c0008bea:	53                   	push   ebx
c0008beb:	31 db                	xor    ebx,ebx
c0008bed:	e8 12 6d 00 00       	call   c000f904 <free>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	53                   	push   ebx
c0008bf9:	e8 37 ff ff ff       	call   c0008b35 <src_reset>
c0008bfe:	83 c4 10             	add    esp,0x10
c0008c01:	eb 06                	jmp    c0008c09 <src_new+0x88>
c0008c03:	85 ff                	test   edi,edi
c0008c05:	7f 9b                	jg     c0008ba2 <src_new+0x21>
c0008c07:	eb b1                	jmp    c0008bba <src_new+0x39>
c0008c09:	89 d8                	mov    eax,ebx
c0008c0b:	5b                   	pop    ebx
c0008c0c:	5e                   	pop    esi
c0008c0d:	5f                   	pop    edi
c0008c0e:	c3                   	ret    

c0008c0f <src_callback_new>:
c0008c0f:	56                   	push   esi
c0008c10:	53                   	push   ebx
c0008c11:	53                   	push   ebx
c0008c12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c1a:	85 f6                	test   esi,esi
c0008c1c:	75 0e                	jne    c0008c2c <src_callback_new+0x1d>
c0008c1e:	31 db                	xor    ebx,ebx
c0008c20:	85 c0                	test   eax,eax
c0008c22:	74 47                	je     c0008c6b <src_callback_new+0x5c>
c0008c24:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c2a:	eb 3f                	jmp    c0008c6b <src_callback_new+0x5c>
c0008c2c:	85 c0                	test   eax,eax
c0008c2e:	74 06                	je     c0008c36 <src_callback_new+0x27>
c0008c30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c36:	51                   	push   ecx
c0008c37:	50                   	push   eax
c0008c38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c40:	e8 3c ff ff ff       	call   c0008b81 <src_new>
c0008c45:	83 c4 10             	add    esp,0x10
c0008c48:	89 c3                	mov    ebx,eax
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 1d                	je     c0008c6b <src_callback_new+0x5c>
c0008c4e:	83 ec 0c             	sub    esp,0xc
c0008c51:	50                   	push   eax
c0008c52:	e8 de fe ff ff       	call   c0008b35 <src_reset>
c0008c57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c5b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c62:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c65:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c68:	83 c4 10             	add    esp,0x10
c0008c6b:	89 d8                	mov    eax,ebx
c0008c6d:	5a                   	pop    edx
c0008c6e:	5b                   	pop    ebx
c0008c6f:	5e                   	pop    esi
c0008c70:	c3                   	ret    

c0008c71 <src_get_name>:
c0008c71:	53                   	push   ebx
c0008c72:	83 ec 14             	sub    esp,0x14
c0008c75:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c79:	53                   	push   ebx
c0008c7a:	e8 d0 4f 00 00       	call   c000dc4f <sinc_get_name>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	75 1d                	jne    c0008ca3 <src_get_name+0x32>
c0008c86:	83 ec 0c             	sub    esp,0xc
c0008c89:	53                   	push   ebx
c0008c8a:	e8 80 57 00 00       	call   c000e40f <zoh_get_name>
c0008c8f:	83 c4 10             	add    esp,0x10
c0008c92:	85 c0                	test   eax,eax
c0008c94:	75 0d                	jne    c0008ca3 <src_get_name+0x32>
c0008c96:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c9a:	83 c4 08             	add    esp,0x8
c0008c9d:	5b                   	pop    ebx
c0008c9e:	e9 74 0b 00 00       	jmp    c0009817 <linear_get_name>
c0008ca3:	83 c4 08             	add    esp,0x8
c0008ca6:	5b                   	pop    ebx
c0008ca7:	c3                   	ret    

c0008ca8 <src_get_description>:
c0008ca8:	53                   	push   ebx
c0008ca9:	83 ec 14             	sub    esp,0x14
c0008cac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cb0:	53                   	push   ebx
c0008cb1:	e8 ac 4f 00 00       	call   c000dc62 <sinc_get_description>
c0008cb6:	83 c4 10             	add    esp,0x10
c0008cb9:	85 c0                	test   eax,eax
c0008cbb:	75 1d                	jne    c0008cda <src_get_description+0x32>
c0008cbd:	83 ec 0c             	sub    esp,0xc
c0008cc0:	53                   	push   ebx
c0008cc1:	e8 58 57 00 00       	call   c000e41e <zoh_get_description>
c0008cc6:	83 c4 10             	add    esp,0x10
c0008cc9:	85 c0                	test   eax,eax
c0008ccb:	75 0d                	jne    c0008cda <src_get_description+0x32>
c0008ccd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cd1:	83 c4 08             	add    esp,0x8
c0008cd4:	5b                   	pop    ebx
c0008cd5:	e9 4c 0b 00 00       	jmp    c0009826 <linear_get_description>
c0008cda:	83 c4 08             	add    esp,0x8
c0008cdd:	5b                   	pop    ebx
c0008cde:	c3                   	ret    

c0008cdf <src_get_version>:
c0008cdf:	b8 a0 a3 02 c0       	mov    eax,0xc002a3a0
c0008ce4:	c3                   	ret    

c0008ce5 <src_is_valid_ratio>:
c0008ce5:	83 ec 1c             	sub    esp,0x1c
c0008ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cf8:	68 00 00 70 3f       	push   0x3f700000
c0008cfd:	6a 00                	push   0x0
c0008cff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d07:	e8 5b 01 02 00       	call   c0028e67 <__ltdf2>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	31 d2                	xor    edx,edx
c0008d11:	85 c0                	test   eax,eax
c0008d13:	78 1e                	js     c0008d33 <src_is_valid_ratio+0x4e>
c0008d15:	68 00 00 70 40       	push   0x40700000
c0008d1a:	6a 00                	push   0x0
c0008d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d24:	e8 20 01 02 00       	call   c0028e49 <__gtdf2>
c0008d29:	31 d2                	xor    edx,edx
c0008d2b:	83 c4 10             	add    esp,0x10
c0008d2e:	85 c0                	test   eax,eax
c0008d30:	0f 9e c2             	setle  dl
c0008d33:	89 d0                	mov    eax,edx
c0008d35:	83 c4 1c             	add    esp,0x1c
c0008d38:	c3                   	ret    

c0008d39 <src_error>:
c0008d39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d3d:	31 c0                	xor    eax,eax
c0008d3f:	85 d2                	test   edx,edx
c0008d41:	74 03                	je     c0008d46 <src_error+0xd>
c0008d43:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d46:	c3                   	ret    

c0008d47 <src_strerror>:
c0008d47:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d4b:	31 c0                	xor    eax,eax
c0008d4d:	83 fa 17             	cmp    edx,0x17
c0008d50:	77 07                	ja     c0008d59 <src_strerror+0x12>
c0008d52:	8b 04 95 00 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5800]
c0008d59:	c3                   	ret    

c0008d5a <src_simple>:
c0008d5a:	56                   	push   esi
c0008d5b:	53                   	push   ebx
c0008d5c:	83 ec 18             	sub    esp,0x18
c0008d5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d63:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d67:	50                   	push   eax
c0008d68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d70:	e8 0c fe ff ff       	call   c0008b81 <src_new>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	85 c0                	test   eax,eax
c0008d7a:	75 06                	jne    c0008d82 <src_simple+0x28>
c0008d7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d80:	eb 25                	jmp    c0008da7 <src_simple+0x4d>
c0008d82:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d89:	89 c3                	mov    ebx,eax
c0008d8b:	50                   	push   eax
c0008d8c:	50                   	push   eax
c0008d8d:	56                   	push   esi
c0008d8e:	53                   	push   ebx
c0008d8f:	e8 e2 f9 ff ff       	call   c0008776 <src_process>
c0008d94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d9b:	e8 9a f9 ff ff       	call   c000873a <src_delete>
c0008da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	83 c4 14             	add    esp,0x14
c0008daa:	5b                   	pop    ebx
c0008dab:	5e                   	pop    esi
c0008dac:	c3                   	ret    

c0008dad <src_short_to_float_array>:
c0008dad:	53                   	push   ebx
c0008dae:	83 ec 18             	sub    esp,0x18
c0008db1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008db5:	85 db                	test   ebx,ebx
c0008db7:	74 54                	je     c0008e0d <src_short_to_float_array+0x60>
c0008db9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dbd:	4b                   	dec    ebx
c0008dbe:	83 ec 0c             	sub    esp,0xc
c0008dc1:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008dc5:	50                   	push   eax
c0008dc6:	e8 30 fe 01 00       	call   c0028bfb <__floatsidf>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dd6:	68 00 00 00 3f       	push   0x3f000000
c0008ddb:	6a 00                	push   0x0
c0008ddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de5:	e8 ae f7 01 00       	call   c0028598 <__muldf3>
c0008dea:	59                   	pop    ecx
c0008deb:	59                   	pop    ecx
c0008dec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008df0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008df4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dfc:	e8 6a 00 02 00       	call   c0028e6b <__truncdfsf2>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e08:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e0b:	eb a8                	jmp    c0008db5 <src_short_to_float_array+0x8>
c0008e0d:	83 c4 18             	add    esp,0x18
c0008e10:	5b                   	pop    ebx
c0008e11:	c3                   	ret    

c0008e12 <src_float_to_short_array>:
c0008e12:	56                   	push   esi
c0008e13:	53                   	push   ebx
c0008e14:	83 ec 14             	sub    esp,0x14
c0008e17:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e1b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e1f:	85 db                	test   ebx,ebx
c0008e21:	0f 84 a4 00 00 00    	je     c0008ecb <src_float_to_short_array+0xb9>
c0008e27:	83 ec 0c             	sub    esp,0xc
c0008e2a:	4b                   	dec    ebx
c0008e2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e2f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e32:	e8 58 01 02 00       	call   c0028f8f <__extendsfdf2>
c0008e37:	83 c4 10             	add    esp,0x10
c0008e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e42:	68 00 00 e0 41       	push   0x41e00000
c0008e47:	6a 00                	push   0x0
c0008e49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e51:	e8 42 f7 01 00       	call   c0028598 <__muldf3>
c0008e56:	83 c4 10             	add    esp,0x10
c0008e59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e61:	68 ff ff df 41       	push   0x41dfffff
c0008e66:	68 00 00 c0 ff       	push   0xffc00000
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	e8 ed ff 01 00       	call   c0028e65 <__gedf2>
c0008e78:	83 c4 10             	add    esp,0x10
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	78 08                	js     c0008e87 <src_float_to_short_array+0x75>
c0008e7f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e85:	eb 98                	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008e87:	68 00 00 e0 c1       	push   0xc1e00000
c0008e8c:	6a 00                	push   0x0
c0008e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e96:	e8 ce ff 01 00       	call   c0028e69 <__ledf2>
c0008e9b:	83 c4 10             	add    esp,0x10
c0008e9e:	85 c0                	test   eax,eax
c0008ea0:	7f 0b                	jg     c0008ead <src_float_to_short_array+0x9b>
c0008ea2:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ea8:	e9 72 ff ff ff       	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008ead:	50                   	push   eax
c0008eae:	50                   	push   eax
c0008eaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb7:	e8 64 01 02 00       	call   c0029020 <lrint>
c0008ebc:	83 c4 10             	add    esp,0x10
c0008ebf:	c1 f8 10             	sar    eax,0x10
c0008ec2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ec6:	e9 54 ff ff ff       	jmp    c0008e1f <src_float_to_short_array+0xd>
c0008ecb:	83 c4 14             	add    esp,0x14
c0008ece:	5b                   	pop    ebx
c0008ecf:	5e                   	pop    esi
c0008ed0:	c3                   	ret    

c0008ed1 <src_int_to_float_array>:
c0008ed1:	53                   	push   ebx
c0008ed2:	83 ec 18             	sub    esp,0x18
c0008ed5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ed9:	85 db                	test   ebx,ebx
c0008edb:	74 52                	je     c0008f2f <src_int_to_float_array+0x5e>
c0008edd:	83 ec 0c             	sub    esp,0xc
c0008ee0:	4b                   	dec    ebx
c0008ee1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ee5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ee8:	e8 0e fd 01 00       	call   c0028bfb <__floatsidf>
c0008eed:	83 c4 10             	add    esp,0x10
c0008ef0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ef4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ef8:	68 00 00 00 3e       	push   0x3e000000
c0008efd:	6a 00                	push   0x0
c0008eff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f07:	e8 8c f6 01 00       	call   c0028598 <__muldf3>
c0008f0c:	59                   	pop    ecx
c0008f0d:	59                   	pop    ecx
c0008f0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1e:	e8 48 ff 01 00       	call   c0028e6b <__truncdfsf2>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f2a:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f2d:	eb aa                	jmp    c0008ed9 <src_int_to_float_array+0x8>
c0008f2f:	83 c4 18             	add    esp,0x18
c0008f32:	5b                   	pop    ebx
c0008f33:	c3                   	ret    

c0008f34 <src_float_to_int_array>:
c0008f34:	56                   	push   esi
c0008f35:	53                   	push   ebx
c0008f36:	83 ec 14             	sub    esp,0x14
c0008f39:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f3d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f41:	85 db                	test   ebx,ebx
c0008f43:	0f 84 a2 00 00 00    	je     c0008feb <src_float_to_int_array+0xb7>
c0008f49:	83 ec 0c             	sub    esp,0xc
c0008f4c:	4b                   	dec    ebx
c0008f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f51:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f54:	e8 36 00 02 00       	call   c0028f8f <__extendsfdf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f64:	68 00 00 e0 41       	push   0x41e00000
c0008f69:	6a 00                	push   0x0
c0008f6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f73:	e8 20 f6 01 00       	call   c0028598 <__muldf3>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f83:	68 ff ff df 41       	push   0x41dfffff
c0008f88:	68 00 00 c0 ff       	push   0xffc00000
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	e8 cb fe 01 00       	call   c0028e65 <__gedf2>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	85 c0                	test   eax,eax
c0008f9f:	78 09                	js     c0008faa <src_float_to_int_array+0x76>
c0008fa1:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fa8:	eb 97                	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008faa:	68 00 00 e0 c1       	push   0xc1e00000
c0008faf:	6a 00                	push   0x0
c0008fb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb9:	e8 ab fe 01 00       	call   c0028e69 <__ledf2>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	85 c0                	test   eax,eax
c0008fc3:	7f 0c                	jg     c0008fd1 <src_float_to_int_array+0x9d>
c0008fc5:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fcc:	e9 70 ff ff ff       	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008fd1:	50                   	push   eax
c0008fd2:	50                   	push   eax
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	e8 40 00 02 00       	call   c0029020 <lrint>
c0008fe0:	83 c4 10             	add    esp,0x10
c0008fe3:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fe6:	e9 56 ff ff ff       	jmp    c0008f41 <src_float_to_int_array+0xd>
c0008feb:	83 c4 14             	add    esp,0x14
c0008fee:	5b                   	pop    ebx
c0008fef:	5e                   	pop    esi
c0008ff0:	c3                   	ret    

c0008ff1 <linear_vari_process>:
c0008ff1:	55                   	push   ebp
c0008ff2:	31 d2                	xor    edx,edx
c0008ff4:	57                   	push   edi
c0008ff5:	56                   	push   esi
c0008ff6:	53                   	push   ebx
c0008ff7:	83 ec 3c             	sub    esp,0x3c
c0008ffa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ffe:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009002:	0f 8e d3 07 00 00    	jle    c00097db <linear_vari_process+0x7ea>
c0009008:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000900c:	ba 05 00 00 00       	mov    edx,0x5
c0009011:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009014:	85 db                	test   ebx,ebx
c0009016:	0f 84 bf 07 00 00    	je     c00097db <linear_vari_process+0x7ea>
c000901c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000901f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009023:	74 19                	je     c000903e <linear_vari_process+0x4d>
c0009025:	31 d2                	xor    edx,edx
c0009027:	39 c2                	cmp    edx,eax
c0009029:	7d 0c                	jge    c0009037 <linear_vari_process+0x46>
c000902b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000902d:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009030:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009034:	42                   	inc    edx
c0009035:	eb f0                	jmp    c0009027 <linear_vari_process+0x36>
c0009037:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000903e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009041:	0f af d0             	imul   edx,eax
c0009044:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009047:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000904b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009052:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009055:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000905c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009060:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009063:	8b 00                	mov    eax,DWORD PTR [eax]
c0009065:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009069:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906d:	68 00 00 70 3f       	push   0x3f700000
c0009072:	6a 00                	push   0x0
c0009074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907c:	e8 e6 fd 01 00       	call   c0028e67 <__ltdf2>
c0009081:	83 c4 10             	add    esp,0x10
c0009084:	ba 16 00 00 00       	mov    edx,0x16
c0009089:	85 c0                	test   eax,eax
c000908b:	0f 88 4a 07 00 00    	js     c00097db <linear_vari_process+0x7ea>
c0009091:	68 00 00 70 40       	push   0x40700000
c0009096:	6a 00                	push   0x0
c0009098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a0:	e8 a4 fd 01 00       	call   c0028e49 <__gtdf2>
c00090a5:	83 c4 10             	add    esp,0x10
c00090a8:	ba 16 00 00 00       	mov    edx,0x16
c00090ad:	85 c0                	test   eax,eax
c00090af:	0f 8f 26 07 00 00    	jg     c00097db <linear_vari_process+0x7ea>
c00090b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090b9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090c7:	68 00 00 f0 3f       	push   0x3ff00000
c00090cc:	6a 00                	push   0x0
c00090ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d6:	e8 8c fd 01 00       	call   c0028e67 <__ltdf2>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	85 c0                	test   eax,eax
c00090e0:	0f 89 89 02 00 00    	jns    c000936f <linear_vari_process+0x37e>
c00090e6:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090e9:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090ec:	0f 8d 7d 02 00 00    	jge    c000936f <linear_vari_process+0x37e>
c00090f2:	83 ec 0c             	sub    esp,0xc
c00090f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f8:	e8 fe fa 01 00       	call   c0028bfb <__floatsidf>
c00090fd:	83 c4 10             	add    esp,0x10
c0009100:	89 04 24             	mov    DWORD PTR [esp],eax
c0009103:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009107:	68 00 00 f0 3f       	push   0x3ff00000
c000910c:	6a 00                	push   0x0
c000910e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009116:	e8 00 ee 01 00       	call   c0027f1b <__adddf3>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009122:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009130:	e8 63 f4 01 00       	call   c0028598 <__muldf3>
c0009135:	5d                   	pop    ebp
c0009136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000913a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000913e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009141:	e8 b5 fa 01 00       	call   c0028bfb <__floatsidf>
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009151:	52                   	push   edx
c0009152:	50                   	push   eax
c0009153:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009157:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915b:	e8 bb ed 01 00       	call   c0027f1b <__adddf3>
c0009160:	59                   	pop    ecx
c0009161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009165:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009169:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000916c:	e8 8a fa 01 00       	call   c0028bfb <__floatsidf>
c0009171:	83 c4 10             	add    esp,0x10
c0009174:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009178:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917c:	52                   	push   edx
c000917d:	50                   	push   eax
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 da fc 01 00       	call   c0028e65 <__gedf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	0f 89 d9 01 00 00    	jns    c000936f <linear_vari_process+0x37e>
c0009196:	85 ff                	test   edi,edi
c0009198:	0f 8e f4 00 00 00    	jle    c0009292 <linear_vari_process+0x2a1>
c000919e:	83 ec 10             	sub    esp,0x10
c00091a1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091a4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091a7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091ae:	ff 30                	push   DWORD PTR [eax]
c00091b0:	e8 b7 f3 01 00       	call   c002856c <__subdf3>
c00091b5:	83 c4 18             	add    esp,0x18
c00091b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091c0:	52                   	push   edx
c00091c1:	50                   	push   eax
c00091c2:	e8 39 fe 01 00       	call   c0029000 <fabs>
c00091c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091cb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091d7:	68 23 42 92 0c       	push   0xc924223
c00091dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e4:	e8 60 fc 01 00       	call   c0028e49 <__gtdf2>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	85 c0                	test   eax,eax
c00091ee:	0f 8e 9e 00 00 00    	jle    c0009292 <linear_vari_process+0x2a1>
c00091f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009201:	89 04 24             	mov    DWORD PTR [esp],eax
c0009204:	52                   	push   edx
c0009205:	50                   	push   eax
c0009206:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009209:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000920c:	e8 5b f3 01 00       	call   c002856c <__subdf3>
c0009211:	59                   	pop    ecx
c0009212:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009216:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000921a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000921d:	e8 d9 f9 01 00       	call   c0028bfb <__floatsidf>
c0009222:	83 c4 10             	add    esp,0x10
c0009225:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009229:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000922d:	52                   	push   edx
c000922e:	50                   	push   eax
c000922f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009237:	e8 5c f3 01 00       	call   c0028598 <__muldf3>
c000923c:	5f                   	pop    edi
c000923d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009241:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009245:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009248:	e8 ae f9 01 00       	call   c0028bfb <__floatsidf>
c000924d:	83 c4 10             	add    esp,0x10
c0009250:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009254:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009258:	52                   	push   edx
c0009259:	50                   	push   eax
c000925a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	e8 15 f6 01 00       	call   c002887c <__divdf3>
c0009267:	83 c4 10             	add    esp,0x10
c000926a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000926e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009272:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009276:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000927a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009282:	e8 94 ec 01 00       	call   c0027f1b <__adddf3>
c0009287:	83 c4 10             	add    esp,0x10
c000928a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009292:	31 ff                	xor    edi,edi
c0009294:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009297:	0f 8e 9d 00 00 00    	jle    c000933a <linear_vari_process+0x349>
c000929d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092a0:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092a4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092a7:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00092b0:	52                   	push   edx
c00092b1:	52                   	push   edx
c00092b2:	55                   	push   ebp
c00092b3:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092b6:	47                   	inc    edi
c00092b7:	e8 f4 e5 01 00       	call   c00278b0 <__subsf3>
c00092bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00092bf:	e8 cb fc 01 00       	call   c0028f8f <__extendsfdf2>
c00092c4:	83 c4 10             	add    esp,0x10
c00092c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092df:	e8 b4 f2 01 00       	call   c0028598 <__muldf3>
c00092e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092ef:	e8 9b fc 01 00       	call   c0028f8f <__extendsfdf2>
c00092f4:	83 c4 10             	add    esp,0x10
c00092f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092ff:	52                   	push   edx
c0009300:	50                   	push   eax
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009309:	e8 0d ec 01 00       	call   c0027f1b <__adddf3>
c000930e:	59                   	pop    ecx
c000930f:	5d                   	pop    ebp
c0009310:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009314:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009318:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009320:	e8 46 fb 01 00       	call   c0028e6b <__truncdfsf2>
c0009325:	83 c4 10             	add    esp,0x10
c0009328:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000932b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000932f:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009332:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009335:	e9 5a ff ff ff       	jmp    c0009294 <linear_vari_process+0x2a3>
c000933a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	68 00 00 f0 3f       	push   0x3ff00000
c0009347:	6a 00                	push   0x0
c0009349:	e8 2e f5 01 00       	call   c002887c <__divdf3>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	89 04 24             	mov    DWORD PTR [esp],eax
c0009354:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009358:	52                   	push   edx
c0009359:	50                   	push   eax
c000935a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009362:	e8 b4 eb 01 00       	call   c0027f1b <__adddf3>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	e9 50 fd ff ff       	jmp    c00090bf <linear_vari_process+0xce>
c000936f:	50                   	push   eax
c0009370:	50                   	push   eax
c0009371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009379:	e8 a2 fc 01 00       	call   c0029020 <lrint>
c000937e:	83 ec 0c             	sub    esp,0xc
c0009381:	50                   	push   eax
c0009382:	e8 74 f8 01 00       	call   c0028bfb <__floatsidf>
c0009387:	83 c4 10             	add    esp,0x10
c000938a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000938e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009392:	52                   	push   edx
c0009393:	50                   	push   eax
c0009394:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009398:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000939c:	e8 cb f1 01 00       	call   c002856c <__subdf3>
c00093a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093a9:	83 c4 20             	add    esp,0x20
c00093ac:	6a 00                	push   0x0
c00093ae:	6a 00                	push   0x0
c00093b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b8:	e8 aa fa 01 00       	call   c0028e67 <__ltdf2>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	85 c0                	test   eax,eax
c00093c2:	79 1e                	jns    c00093e2 <linear_vari_process+0x3f1>
c00093c4:	68 00 00 f0 3f       	push   0x3ff00000
c00093c9:	6a 00                	push   0x0
c00093cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d3:	e8 43 eb 01 00       	call   c0027f1b <__adddf3>
c00093d8:	83 c4 10             	add    esp,0x10
c00093db:	89 04 24             	mov    DWORD PTR [esp],eax
c00093de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093e5:	83 ec 10             	sub    esp,0x10
c00093e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f8:	e8 6f f1 01 00       	call   c002856c <__subdf3>
c00093fd:	83 c4 18             	add    esp,0x18
c0009400:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009404:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009408:	52                   	push   edx
c0009409:	50                   	push   eax
c000940a:	e8 11 fc 01 00       	call   c0029020 <lrint>
c000940f:	83 c4 10             	add    esp,0x10
c0009412:	0f af f8             	imul   edi,eax
c0009415:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009418:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000941b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000941e:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009421:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009424:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009428:	0f 8d 13 03 00 00    	jge    c0009741 <linear_vari_process+0x750>
c000942e:	83 ec 0c             	sub    esp,0xc
c0009431:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009434:	e8 c2 f7 01 00       	call   c0028bfb <__floatsidf>
c0009439:	83 c4 10             	add    esp,0x10
c000943c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009444:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009448:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000944c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009454:	e8 3f f1 01 00       	call   c0028598 <__muldf3>
c0009459:	89 3c 24             	mov    DWORD PTR [esp],edi
c000945c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009460:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009464:	e8 92 f7 01 00       	call   c0028bfb <__floatsidf>
c0009469:	83 c4 10             	add    esp,0x10
c000946c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009470:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009474:	52                   	push   edx
c0009475:	50                   	push   eax
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947e:	e8 98 ea 01 00       	call   c0027f1b <__adddf3>
c0009483:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948e:	e8 68 f7 01 00       	call   c0028bfb <__floatsidf>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000949a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949e:	52                   	push   edx
c000949f:	50                   	push   eax
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 ba f9 01 00       	call   c0028e67 <__ltdf2>
c00094ad:	83 c4 10             	add    esp,0x10
c00094b0:	85 c0                	test   eax,eax
c00094b2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094b6:	0f 89 85 02 00 00    	jns    c0009741 <linear_vari_process+0x750>
c00094bc:	85 c9                	test   ecx,ecx
c00094be:	0f 8e f5 00 00 00    	jle    c00095b9 <linear_vari_process+0x5c8>
c00094c4:	83 ec 10             	sub    esp,0x10
c00094c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094d4:	ff 30                	push   DWORD PTR [eax]
c00094d6:	e8 91 f0 01 00       	call   c002856c <__subdf3>
c00094db:	83 c4 18             	add    esp,0x18
c00094de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e6:	52                   	push   edx
c00094e7:	50                   	push   eax
c00094e8:	e8 13 fb 01 00       	call   c0029000 <fabs>
c00094ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094f5:	83 c4 10             	add    esp,0x10
c00094f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094fd:	68 23 42 92 0c       	push   0xc924223
c0009502:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000950a:	e8 3a f9 01 00       	call   c0028e49 <__gtdf2>
c000950f:	83 c4 10             	add    esp,0x10
c0009512:	85 c0                	test   eax,eax
c0009514:	0f 8e 9f 00 00 00    	jle    c00095b9 <linear_vari_process+0x5c8>
c000951a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000951e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009521:	8b 00                	mov    eax,DWORD PTR [eax]
c0009523:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	52                   	push   edx
c000952c:	50                   	push   eax
c000952d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009530:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009533:	e8 34 f0 01 00       	call   c002856c <__subdf3>
c0009538:	5f                   	pop    edi
c0009539:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000953d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009541:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009544:	e8 b2 f6 01 00       	call   c0028bfb <__floatsidf>
c0009549:	83 c4 10             	add    esp,0x10
c000954c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009554:	52                   	push   edx
c0009555:	50                   	push   eax
c0009556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955e:	e8 35 f0 01 00       	call   c0028598 <__muldf3>
c0009563:	5d                   	pop    ebp
c0009564:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009568:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000956c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000956f:	e8 87 f6 01 00       	call   c0028bfb <__floatsidf>
c0009574:	83 c4 10             	add    esp,0x10
c0009577:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000957b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957f:	52                   	push   edx
c0009580:	50                   	push   eax
c0009581:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	e8 ee f2 01 00       	call   c002887c <__divdf3>
c000958e:	83 c4 10             	add    esp,0x10
c0009591:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009595:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009599:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000959d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a9:	e8 6d e9 01 00       	call   c0027f1b <__adddf3>
c00095ae:	83 c4 10             	add    esp,0x10
c00095b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b9:	31 ff                	xor    edi,edi
c00095bb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095be:	39 f8                	cmp    eax,edi
c00095c0:	0f 8e ac 00 00 00    	jle    c0009672 <linear_vari_process+0x681>
c00095c6:	8b 16                	mov    edx,DWORD PTR [esi]
c00095c8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095cb:	29 c1                	sub    ecx,eax
c00095cd:	89 c8                	mov    eax,ecx
c00095cf:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095d2:	01 f8                	add    eax,edi
c00095d4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095d8:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095e5:	51                   	push   ecx
c00095e6:	01 f8                	add    eax,edi
c00095e8:	51                   	push   ecx
c00095e9:	47                   	inc    edi
c00095ea:	55                   	push   ebp
c00095eb:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095ee:	e8 bd e2 01 00       	call   c00278b0 <__subsf3>
c00095f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f6:	e8 94 f9 01 00       	call   c0028f8f <__extendsfdf2>
c00095fb:	83 c4 10             	add    esp,0x10
c00095fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009602:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009606:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009612:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009616:	e8 7d ef 01 00       	call   c0028598 <__muldf3>
c000961b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000961e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009622:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009626:	e8 64 f9 01 00       	call   c0028f8f <__extendsfdf2>
c000962b:	83 c4 10             	add    esp,0x10
c000962e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009632:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009636:	52                   	push   edx
c0009637:	50                   	push   eax
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009640:	e8 d6 e8 01 00       	call   c0027f1b <__adddf3>
c0009645:	5d                   	pop    ebp
c0009646:	59                   	pop    ecx
c0009647:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000964b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000964f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009653:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009657:	e8 0f f8 01 00       	call   c0028e6b <__truncdfsf2>
c000965c:	83 c4 10             	add    esp,0x10
c000965f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009663:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009667:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000966a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000966d:	e9 49 ff ff ff       	jmp    c00095bb <linear_vari_process+0x5ca>
c0009672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000967a:	68 00 00 f0 3f       	push   0x3ff00000
c000967f:	6a 00                	push   0x0
c0009681:	e8 f6 f1 01 00       	call   c002887c <__divdf3>
c0009686:	83 c4 10             	add    esp,0x10
c0009689:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000968d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009691:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009695:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a1:	e8 75 e8 01 00       	call   c0027f1b <__adddf3>
c00096a6:	59                   	pop    ecx
c00096a7:	5f                   	pop    edi
c00096a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b8:	e8 63 f9 01 00       	call   c0029020 <lrint>
c00096bd:	83 ec 0c             	sub    esp,0xc
c00096c0:	50                   	push   eax
c00096c1:	e8 35 f5 01 00       	call   c0028bfb <__floatsidf>
c00096c6:	83 c4 10             	add    esp,0x10
c00096c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d1:	52                   	push   edx
c00096d2:	50                   	push   eax
c00096d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096db:	e8 8c ee 01 00       	call   c002856c <__subdf3>
c00096e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096e4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e8:	83 c4 20             	add    esp,0x20
c00096eb:	6a 00                	push   0x0
c00096ed:	6a 00                	push   0x0
c00096ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f7:	e8 6b f7 01 00       	call   c0028e67 <__ltdf2>
c00096fc:	83 c4 10             	add    esp,0x10
c00096ff:	85 c0                	test   eax,eax
c0009701:	79 1e                	jns    c0009721 <linear_vari_process+0x730>
c0009703:	68 00 00 f0 3f       	push   0x3ff00000
c0009708:	6a 00                	push   0x0
c000970a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000970e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009712:	e8 04 e8 01 00       	call   c0027f1b <__adddf3>
c0009717:	83 c4 10             	add    esp,0x10
c000971a:	89 04 24             	mov    DWORD PTR [esp],eax
c000971d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009721:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009724:	83 ec 10             	sub    esp,0x10
c0009727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009733:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009737:	e8 30 ee 01 00       	call   c002856c <__subdf3>
c000973c:	e9 bc fc ff ff       	jmp    c00093fd <linear_vari_process+0x40c>
c0009741:	39 fd                	cmp    ebp,edi
c0009743:	7d 38                	jge    c000977d <linear_vari_process+0x78c>
c0009745:	83 ec 0c             	sub    esp,0xc
c0009748:	89 f8                	mov    eax,edi
c000974a:	29 e8                	sub    eax,ebp
c000974c:	99                   	cdq    
c000974d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009750:	50                   	push   eax
c0009751:	e8 a5 f4 01 00       	call   c0028bfb <__floatsidf>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000975d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009761:	52                   	push   edx
c0009762:	50                   	push   eax
c0009763:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009767:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000976b:	e8 ab e7 01 00       	call   c0027f1b <__adddf3>
c0009770:	83 c4 10             	add    esp,0x10
c0009773:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009776:	89 04 24             	mov    DWORD PTR [esp],eax
c0009779:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009784:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009788:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000978b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000978e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009791:	85 c0                	test   eax,eax
c0009793:	7f 29                	jg     c00097be <linear_vari_process+0x7cd>
c0009795:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097a1:	89 01                	mov    DWORD PTR [ecx],eax
c00097a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097a9:	99                   	cdq    
c00097aa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ad:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097b3:	99                   	cdq    
c00097b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097b7:	31 d2                	xor    edx,edx
c00097b9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097bc:	eb 1d                	jmp    c00097db <linear_vari_process+0x7ea>
c00097be:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097c1:	31 d2                	xor    edx,edx
c00097c3:	29 c8                	sub    eax,ecx
c00097c5:	c1 e0 02             	shl    eax,0x2
c00097c8:	39 d1                	cmp    ecx,edx
c00097ca:	7e c9                	jle    c0009795 <linear_vari_process+0x7a4>
c00097cc:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ce:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097d1:	83 c0 04             	add    eax,0x4
c00097d4:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097d8:	42                   	inc    edx
c00097d9:	eb ed                	jmp    c00097c8 <linear_vari_process+0x7d7>
c00097db:	83 c4 3c             	add    esp,0x3c
c00097de:	89 d0                	mov    eax,edx
c00097e0:	5b                   	pop    ebx
c00097e1:	5e                   	pop    esi
c00097e2:	5f                   	pop    edi
c00097e3:	5d                   	pop    ebp
c00097e4:	c3                   	ret    

c00097e5 <linear_reset>:
c00097e5:	83 ec 0c             	sub    esp,0xc
c00097e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097ec:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097ef:	85 c0                	test   eax,eax
c00097f1:	74 20                	je     c0009813 <linear_reset+0x2e>
c00097f3:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097f6:	83 c0 1c             	add    eax,0x1c
c00097f9:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097fc:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009803:	c1 e2 02             	shl    edx,0x2
c0009806:	51                   	push   ecx
c0009807:	52                   	push   edx
c0009808:	6a 00                	push   0x0
c000980a:	50                   	push   eax
c000980b:	e8 5c 6f ff ff       	call   c000076c <memset>
c0009810:	83 c4 10             	add    esp,0x10
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	c3                   	ret    

c0009817 <linear_get_name>:
c0009817:	31 c0                	xor    eax,eax
c0009819:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000981e:	75 05                	jne    c0009825 <linear_get_name+0xe>
c0009820:	b8 60 a8 02 c0       	mov    eax,0xc002a860
c0009825:	c3                   	ret    

c0009826 <linear_get_description>:
c0009826:	31 c0                	xor    eax,eax
c0009828:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000982d:	75 05                	jne    c0009834 <linear_get_description+0xe>
c000982f:	b8 74 a8 02 c0       	mov    eax,0xc002a874
c0009834:	c3                   	ret    

c0009835 <linear_set_converter>:
c0009835:	53                   	push   ebx
c0009836:	b8 0a 00 00 00       	mov    eax,0xa
c000983b:	83 ec 08             	sub    esp,0x8
c000983e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009842:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009847:	75 6e                	jne    c00098b7 <linear_set_converter+0x82>
c0009849:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000984c:	85 c0                	test   eax,eax
c000984e:	74 13                	je     c0009863 <linear_set_converter+0x2e>
c0009850:	83 ec 0c             	sub    esp,0xc
c0009853:	50                   	push   eax
c0009854:	e8 ab 60 00 00       	call   c000f904 <free>
c0009859:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009860:	83 c4 10             	add    esp,0x10
c0009863:	50                   	push   eax
c0009864:	50                   	push   eax
c0009865:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009868:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000986f:	50                   	push   eax
c0009870:	6a 01                	push   0x1
c0009872:	e8 ad 60 00 00       	call   c000f924 <calloc>
c0009877:	83 c4 10             	add    esp,0x10
c000987a:	89 c2                	mov    edx,eax
c000987c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000987f:	85 d2                	test   edx,edx
c0009881:	b8 01 00 00 00       	mov    eax,0x1
c0009886:	74 2f                	je     c00098b7 <linear_set_converter+0x82>
c0009888:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988b:	83 ec 0c             	sub    esp,0xc
c000988e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009891:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009897:	c7 43 24 f1 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ff1
c000989e:	c7 43 20 f1 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ff1
c00098a5:	c7 43 28 e5 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097e5
c00098ac:	53                   	push   ebx
c00098ad:	e8 33 ff ff ff       	call   c00097e5 <linear_reset>
c00098b2:	83 c4 10             	add    esp,0x10
c00098b5:	31 c0                	xor    eax,eax
c00098b7:	83 c4 08             	add    esp,0x8
c00098ba:	5b                   	pop    ebx
c00098bb:	c3                   	ret    

c00098bc <int_to_fp>:
c00098bc:	c1 e0 0c             	shl    eax,0xc
c00098bf:	c3                   	ret    

c00098c0 <fp_to_int>:
c00098c0:	c1 f8 0c             	sar    eax,0xc
c00098c3:	c3                   	ret    

c00098c4 <fp_fraction_part>:
c00098c4:	25 ff 0f 00 00       	and    eax,0xfff
c00098c9:	c3                   	ret    

c00098ca <fp_to_double>:
c00098ca:	83 ec 1c             	sub    esp,0x1c
c00098cd:	e8 f2 ff ff ff       	call   c00098c4 <fp_fraction_part>
c00098d2:	83 ec 0c             	sub    esp,0xc
c00098d5:	50                   	push   eax
c00098d6:	e8 20 f3 01 00       	call   c0028bfb <__floatsidf>
c00098db:	83 c4 10             	add    esp,0x10
c00098de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098e6:	68 00 00 30 3f       	push   0x3f300000
c00098eb:	6a 00                	push   0x0
c00098ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f5:	e8 9e ec 01 00       	call   c0028598 <__muldf3>
c00098fa:	83 c4 2c             	add    esp,0x2c
c00098fd:	c3                   	ret    

c00098fe <calc_output_single>:
c00098fe:	55                   	push   ebp
c00098ff:	57                   	push   edi
c0009900:	56                   	push   esi
c0009901:	89 c6                	mov    esi,eax
c0009903:	53                   	push   ebx
c0009904:	89 d3                	mov    ebx,edx
c0009906:	83 ec 4c             	sub    esp,0x4c
c0009909:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000990d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009910:	e8 a7 ff ff ff       	call   c00098bc <int_to_fp>
c0009915:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009918:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000991c:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009920:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009924:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009927:	99                   	cdq    
c0009928:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009930:	f7 fb                	idiv   ebx
c0009932:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000993a:	89 da                	mov    edx,ebx
c000993c:	0f af d0             	imul   edx,eax
c000993f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009943:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009947:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000994b:	29 c2                	sub    edx,eax
c000994d:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009954:	83 c5 04             	add    ebp,0x4
c0009957:	e8 6e ff ff ff       	call   c00098ca <fp_to_double>
c000995c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009960:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009968:	e8 53 ff ff ff       	call   c00098c0 <fp_to_int>
c000996d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009970:	52                   	push   edx
c0009971:	52                   	push   edx
c0009972:	51                   	push   ecx
c0009973:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009977:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000997b:	e8 30 df 01 00       	call   c00278b0 <__subsf3>
c0009980:	89 04 24             	mov    DWORD PTR [esp],eax
c0009983:	e8 07 f6 01 00       	call   c0028f8f <__extendsfdf2>
c0009988:	83 c4 10             	add    esp,0x10
c000998b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000998f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009993:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009997:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000999b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000999f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099a3:	e8 f0 eb 01 00       	call   c0028598 <__muldf3>
c00099a8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099b7:	e8 d3 f5 01 00       	call   c0028f8f <__extendsfdf2>
c00099bc:	83 c4 10             	add    esp,0x10
c00099bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099c7:	52                   	push   edx
c00099c8:	50                   	push   eax
c00099c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099d1:	e8 45 e5 01 00       	call   c0027f1b <__adddf3>
c00099d6:	59                   	pop    ecx
c00099d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099df:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099e5:	e8 a5 f5 01 00       	call   c0028f8f <__extendsfdf2>
c00099ea:	83 c4 10             	add    esp,0x10
c00099ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099f5:	52                   	push   edx
c00099f6:	50                   	push   eax
c00099f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ff:	e8 94 eb 01 00       	call   c0028598 <__muldf3>
c0009a04:	83 c4 10             	add    esp,0x10
c0009a07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a0f:	52                   	push   edx
c0009a10:	50                   	push   eax
c0009a11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a19:	e8 fd e4 01 00       	call   c0027f1b <__adddf3>
c0009a1e:	83 c4 10             	add    esp,0x10
c0009a21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a29:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a2d:	0f 89 1d ff ff ff    	jns    c0009950 <calc_output_single+0x52>
c0009a33:	89 d9                	mov    ecx,ebx
c0009a35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a39:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a3d:	89 dd                	mov    ebp,ebx
c0009a3f:	29 c8                	sub    eax,ecx
c0009a41:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a49:	99                   	cdq    
c0009a4a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a52:	f7 fb                	idiv   ebx
c0009a54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a58:	0f af e8             	imul   ebp,eax
c0009a5b:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a5f:	01 cd                	add    ebp,ecx
c0009a61:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a64:	89 e8                	mov    eax,ebp
c0009a66:	83 ee 04             	sub    esi,0x4
c0009a69:	e8 5c fe ff ff       	call   c00098ca <fp_to_double>
c0009a6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a76:	89 e8                	mov    eax,ebp
c0009a78:	29 dd                	sub    ebp,ebx
c0009a7a:	e8 41 fe ff ff       	call   c00098c0 <fp_to_int>
c0009a7f:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a82:	52                   	push   edx
c0009a83:	52                   	push   edx
c0009a84:	51                   	push   ecx
c0009a85:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a89:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a8d:	e8 1e de 01 00       	call   c00278b0 <__subsf3>
c0009a92:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a95:	e8 f5 f4 01 00       	call   c0028f8f <__extendsfdf2>
c0009a9a:	83 c4 10             	add    esp,0x10
c0009a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009aa1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab5:	e8 de ea 01 00       	call   c0028598 <__muldf3>
c0009aba:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009abe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ac2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ac5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ac9:	e8 c1 f4 01 00       	call   c0028f8f <__extendsfdf2>
c0009ace:	83 c4 10             	add    esp,0x10
c0009ad1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ad9:	52                   	push   edx
c0009ada:	50                   	push   eax
c0009adb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009adf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae3:	e8 33 e4 01 00       	call   c0027f1b <__adddf3>
c0009ae8:	59                   	pop    ecx
c0009ae9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009aed:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009af1:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009af7:	e8 93 f4 01 00       	call   c0028f8f <__extendsfdf2>
c0009afc:	83 c4 10             	add    esp,0x10
c0009aff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b07:	52                   	push   edx
c0009b08:	50                   	push   eax
c0009b09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b11:	e8 82 ea 01 00       	call   c0028598 <__muldf3>
c0009b16:	83 c4 10             	add    esp,0x10
c0009b19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b21:	52                   	push   edx
c0009b22:	50                   	push   eax
c0009b23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b2b:	e8 eb e3 01 00       	call   c0027f1b <__adddf3>
c0009b30:	83 c4 10             	add    esp,0x10
c0009b33:	85 ed                	test   ebp,ebp
c0009b35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b39:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b3d:	0f 8f 21 ff ff ff    	jg     c0009a64 <calc_output_single+0x166>
c0009b43:	52                   	push   edx
c0009b44:	50                   	push   eax
c0009b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4d:	e8 c9 e3 01 00       	call   c0027f1b <__adddf3>
c0009b52:	83 c4 5c             	add    esp,0x5c
c0009b55:	5b                   	pop    ebx
c0009b56:	5e                   	pop    esi
c0009b57:	5f                   	pop    edi
c0009b58:	5d                   	pop    ebp
c0009b59:	c3                   	ret    

c0009b5a <calc_output_stereo>:
c0009b5a:	55                   	push   ebp
c0009b5b:	89 cd                	mov    ebp,ecx
c0009b5d:	57                   	push   edi
c0009b5e:	56                   	push   esi
c0009b5f:	53                   	push   ebx
c0009b60:	89 c3                	mov    ebx,eax
c0009b62:	83 ec 6c             	sub    esp,0x6c
c0009b65:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b70:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b77:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b82:	e8 35 fd ff ff       	call   c00098bc <int_to_fp>
c0009b87:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	99                   	cdq    
c0009b9e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ba2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ba6:	0f af d0             	imul   edx,eax
c0009ba9:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bac:	31 d2                	xor    edx,edx
c0009bae:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bb2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bb6:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bb9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bbd:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bc0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bc4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bc8:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bcb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bd0:	29 c1                	sub    ecx,eax
c0009bd2:	31 c0                	xor    eax,eax
c0009bd4:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bdf:	83 c7 08             	add    edi,0x8
c0009be2:	e8 e3 fc ff ff       	call   c00098ca <fp_to_double>
c0009be7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009beb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bf3:	e8 c8 fc ff ff       	call   c00098c0 <fp_to_int>
c0009bf8:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bfb:	52                   	push   edx
c0009bfc:	52                   	push   edx
c0009bfd:	51                   	push   ecx
c0009bfe:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c02:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c06:	e8 a5 dc 01 00       	call   c00278b0 <__subsf3>
c0009c0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c0e:	e8 7c f3 01 00       	call   c0028f8f <__extendsfdf2>
c0009c13:	83 c4 10             	add    esp,0x10
c0009c16:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c1a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c26:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2e:	e8 65 e9 01 00       	call   c0028598 <__muldf3>
c0009c33:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c37:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c3b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c42:	e8 48 f3 01 00       	call   c0028f8f <__extendsfdf2>
c0009c47:	83 c4 10             	add    esp,0x10
c0009c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c4e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c52:	52                   	push   edx
c0009c53:	50                   	push   eax
c0009c54:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c58:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c5c:	e8 ba e2 01 00       	call   c0027f1b <__adddf3>
c0009c61:	59                   	pop    ecx
c0009c62:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c66:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c6a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c70:	e8 1a f3 01 00       	call   c0028f8f <__extendsfdf2>
c0009c75:	83 c4 10             	add    esp,0x10
c0009c78:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c7c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c88:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c90:	e8 03 e9 01 00       	call   c0028598 <__muldf3>
c0009c95:	83 c4 10             	add    esp,0x10
c0009c98:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca0:	52                   	push   edx
c0009ca1:	50                   	push   eax
c0009ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009caa:	e8 6c e2 01 00       	call   c0027f1b <__adddf3>
c0009caf:	59                   	pop    ecx
c0009cb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cb4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cb8:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cbe:	e8 cc f2 01 00       	call   c0028f8f <__extendsfdf2>
c0009cc3:	83 c4 10             	add    esp,0x10
c0009cc6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cca:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cda:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cde:	e8 b5 e8 01 00       	call   c0028598 <__muldf3>
c0009ce3:	83 c4 10             	add    esp,0x10
c0009ce6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cea:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cee:	52                   	push   edx
c0009cef:	50                   	push   eax
c0009cf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf8:	e8 1e e2 01 00       	call   c0027f1b <__adddf3>
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d0c:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d10:	0f 89 c5 fe ff ff    	jns    c0009bdb <calc_output_stereo+0x81>
c0009d16:	29 e9                	sub    ecx,ebp
c0009d18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d1c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d20:	29 c8                	sub    eax,ecx
c0009d22:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d2a:	99                   	cdq    
c0009d2b:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d2f:	31 d2                	xor    edx,edx
c0009d31:	0f af f8             	imul   edi,eax
c0009d34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d38:	40                   	inc    eax
c0009d39:	01 cf                	add    edi,ecx
c0009d3b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d40:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d44:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d4c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d4f:	31 c0                	xor    eax,eax
c0009d51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d55:	89 f8                	mov    eax,edi
c0009d57:	83 eb 08             	sub    ebx,0x8
c0009d5a:	e8 6b fb ff ff       	call   c00098ca <fp_to_double>
c0009d5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d63:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d67:	89 f8                	mov    eax,edi
c0009d69:	e8 52 fb ff ff       	call   c00098c0 <fp_to_int>
c0009d6e:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d71:	52                   	push   edx
c0009d72:	52                   	push   edx
c0009d73:	55                   	push   ebp
c0009d74:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d78:	e8 33 db 01 00       	call   c00278b0 <__subsf3>
c0009d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d80:	e8 0a f2 01 00       	call   c0028f8f <__extendsfdf2>
c0009d85:	83 c4 10             	add    esp,0x10
c0009d88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d8c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009da0:	e8 f3 e7 01 00       	call   c0028598 <__muldf3>
c0009da5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009da8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009db0:	e8 da f1 01 00       	call   c0028f8f <__extendsfdf2>
c0009db5:	83 c4 10             	add    esp,0x10
c0009db8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc0:	52                   	push   edx
c0009dc1:	50                   	push   eax
c0009dc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dca:	e8 4c e1 01 00       	call   c0027f1b <__adddf3>
c0009dcf:	59                   	pop    ecx
c0009dd0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dd4:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dd8:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dde:	e8 ac f1 01 00       	call   c0028f8f <__extendsfdf2>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfe:	e8 95 e7 01 00       	call   c0028598 <__muldf3>
c0009e03:	83 c4 10             	add    esp,0x10
c0009e06:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e0a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0e:	52                   	push   edx
c0009e0f:	50                   	push   eax
c0009e10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e18:	e8 fe e0 01 00       	call   c0027f1b <__adddf3>
c0009e1d:	5d                   	pop    ebp
c0009e1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e22:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e26:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e2c:	e8 5e f1 01 00       	call   c0028f8f <__extendsfdf2>
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e48:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e4c:	e8 47 e7 01 00       	call   c0028598 <__muldf3>
c0009e51:	83 c4 10             	add    esp,0x10
c0009e54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e5c:	52                   	push   edx
c0009e5d:	50                   	push   eax
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	e8 b0 e0 01 00       	call   c0027f1b <__adddf3>
c0009e6b:	83 c4 10             	add    esp,0x10
c0009e6e:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e7a:	85 ff                	test   edi,edi
c0009e7c:	0f 8f d3 fe ff ff    	jg     c0009d55 <calc_output_stereo+0x1fb>
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e92:	e8 84 e0 01 00       	call   c0027f1b <__adddf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ea2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eb2:	e8 e1 e6 01 00       	call   c0028598 <__muldf3>
c0009eb7:	59                   	pop    ecx
c0009eb8:	5b                   	pop    ebx
c0009eb9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ebd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec9:	e8 9d ef 01 00       	call   c0028e6b <__truncdfsf2>
c0009ece:	83 c4 10             	add    esp,0x10
c0009ed1:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ed8:	89 03                	mov    DWORD PTR [ebx],eax
c0009eda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eea:	e8 2c e0 01 00       	call   c0027f1b <__adddf3>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ef6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009efa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009efe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f0a:	e8 89 e6 01 00       	call   c0028598 <__muldf3>
c0009f0f:	5e                   	pop    esi
c0009f10:	5f                   	pop    edi
c0009f11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f21:	e8 45 ef 01 00       	call   c0028e6b <__truncdfsf2>
c0009f26:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f2d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f30:	83 c4 7c             	add    esp,0x7c
c0009f33:	5b                   	pop    ebx
c0009f34:	5e                   	pop    esi
c0009f35:	5f                   	pop    edi
c0009f36:	5d                   	pop    ebp
c0009f37:	c3                   	ret    

c0009f38 <calc_output_quad>:
c0009f38:	55                   	push   ebp
c0009f39:	57                   	push   edi
c0009f3a:	56                   	push   esi
c0009f3b:	89 c6                	mov    esi,eax
c0009f3d:	53                   	push   ebx
c0009f3e:	83 ec 7c             	sub    esp,0x7c
c0009f41:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f45:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f49:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f50:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f5f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f62:	e8 55 f9 ff ff       	call   c00098bc <int_to_fp>
c0009f67:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f6a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f6d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f71:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f75:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f79:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f7d:	99                   	cdq    
c0009f7e:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f86:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f89:	31 d2                	xor    edx,edx
c0009f8b:	0f af d8             	imul   ebx,eax
c0009f8e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f96:	0f af c7             	imul   eax,edi
c0009f99:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f9d:	29 c1                	sub    ecx,eax
c0009f9f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fa7:	31 c0                	xor    eax,eax
c0009fa9:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fb0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fbc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fc0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fc4:	89 d8                	mov    eax,ebx
c0009fc6:	83 c7 10             	add    edi,0x10
c0009fc9:	e8 fc f8 ff ff       	call   c00098ca <fp_to_double>
c0009fce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fd6:	89 d8                	mov    eax,ebx
c0009fd8:	e8 e3 f8 ff ff       	call   c00098c0 <fp_to_int>
c0009fdd:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fe1:	52                   	push   edx
c0009fe2:	52                   	push   edx
c0009fe3:	51                   	push   ecx
c0009fe4:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fe8:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fec:	e8 bf d8 01 00       	call   c00278b0 <__subsf3>
c0009ff1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ff4:	e8 96 ef 01 00       	call   c0028f8f <__extendsfdf2>
c0009ff9:	83 c4 10             	add    esp,0x10
c0009ffc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a000:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a00c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a010:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a014:	e8 7f e5 01 00       	call   c0028598 <__muldf3>
c000a019:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a01d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a021:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a024:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a028:	e8 62 ef 01 00       	call   c0028f8f <__extendsfdf2>
c000a02d:	83 c4 10             	add    esp,0x10
c000a030:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a034:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a038:	52                   	push   edx
c000a039:	50                   	push   eax
c000a03a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a03e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a042:	e8 d4 de 01 00       	call   c0027f1b <__adddf3>
c000a047:	59                   	pop    ecx
c000a048:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a04c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a050:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a056:	e8 34 ef 01 00       	call   c0028f8f <__extendsfdf2>
c000a05b:	83 c4 10             	add    esp,0x10
c000a05e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a062:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a072:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a076:	e8 1d e5 01 00       	call   c0028598 <__muldf3>
c000a07b:	83 c4 10             	add    esp,0x10
c000a07e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a082:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a086:	52                   	push   edx
c000a087:	50                   	push   eax
c000a088:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a090:	e8 86 de 01 00       	call   c0027f1b <__adddf3>
c000a095:	59                   	pop    ecx
c000a096:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a09a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a09e:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0a4:	e8 e6 ee 01 00       	call   c0028f8f <__extendsfdf2>
c000a0a9:	83 c4 10             	add    esp,0x10
c000a0ac:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c4:	e8 cf e4 01 00       	call   c0028598 <__muldf3>
c000a0c9:	83 c4 10             	add    esp,0x10
c000a0cc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d4:	52                   	push   edx
c000a0d5:	50                   	push   eax
c000a0d6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0da:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0de:	e8 38 de 01 00       	call   c0027f1b <__adddf3>
c000a0e3:	59                   	pop    ecx
c000a0e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0e8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0ec:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0f2:	e8 98 ee 01 00       	call   c0028f8f <__extendsfdf2>
c000a0f7:	83 c4 10             	add    esp,0x10
c000a0fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a10e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a112:	e8 81 e4 01 00       	call   c0028598 <__muldf3>
c000a117:	83 c4 10             	add    esp,0x10
c000a11a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a122:	52                   	push   edx
c000a123:	50                   	push   eax
c000a124:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a128:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a12c:	e8 ea dd 01 00       	call   c0027f1b <__adddf3>
c000a131:	59                   	pop    ecx
c000a132:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a136:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a13a:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a140:	e8 4a ee 01 00       	call   c0028f8f <__extendsfdf2>
c000a145:	83 c4 10             	add    esp,0x10
c000a148:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a158:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a160:	e8 33 e4 01 00       	call   c0028598 <__muldf3>
c000a165:	83 c4 10             	add    esp,0x10
c000a168:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a16c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a170:	52                   	push   edx
c000a171:	50                   	push   eax
c000a172:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a176:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a17a:	e8 9c dd 01 00       	call   c0027f1b <__adddf3>
c000a17f:	83 c4 10             	add    esp,0x10
c000a182:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a186:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a18a:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a18e:	0f 89 30 fe ff ff    	jns    c0009fc4 <calc_output_quad+0x8c>
c000a194:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a198:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a19c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1a0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1a4:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ac:	29 c8                	sub    eax,ecx
c000a1ae:	99                   	cdq    
c000a1af:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1b3:	31 d2                	xor    edx,edx
c000a1b5:	0f af d8             	imul   ebx,eax
c000a1b8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1bc:	40                   	inc    eax
c000a1bd:	01 cb                	add    ebx,ecx
c000a1bf:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1c4:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1c8:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1d0:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1d3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1db:	31 c0                	xor    eax,eax
c000a1dd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1e1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1e9:	89 d8                	mov    eax,ebx
c000a1eb:	83 ee 10             	sub    esi,0x10
c000a1ee:	e8 d7 f6 ff ff       	call   c00098ca <fp_to_double>
c000a1f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1fb:	89 d8                	mov    eax,ebx
c000a1fd:	e8 be f6 ff ff       	call   c00098c0 <fp_to_int>
c000a202:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a206:	52                   	push   edx
c000a207:	52                   	push   edx
c000a208:	57                   	push   edi
c000a209:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a20d:	e8 9e d6 01 00       	call   c00278b0 <__subsf3>
c000a212:	89 04 24             	mov    DWORD PTR [esp],eax
c000a215:	e8 75 ed 01 00       	call   c0028f8f <__extendsfdf2>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a221:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a22d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a231:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a235:	e8 5e e3 01 00       	call   c0028598 <__muldf3>
c000a23a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a23d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a241:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a245:	e8 45 ed 01 00       	call   c0028f8f <__extendsfdf2>
c000a24a:	83 c4 10             	add    esp,0x10
c000a24d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a251:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a255:	52                   	push   edx
c000a256:	50                   	push   eax
c000a257:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25f:	e8 b7 dc 01 00       	call   c0027f1b <__adddf3>
c000a264:	59                   	pop    ecx
c000a265:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a269:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26d:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a273:	e8 17 ed 01 00       	call   c0028f8f <__extendsfdf2>
c000a278:	83 c4 10             	add    esp,0x10
c000a27b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a28b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a293:	e8 00 e3 01 00       	call   c0028598 <__muldf3>
c000a298:	83 c4 10             	add    esp,0x10
c000a29b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a3:	52                   	push   edx
c000a2a4:	50                   	push   eax
c000a2a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ad:	e8 69 dc 01 00       	call   c0027f1b <__adddf3>
c000a2b2:	5f                   	pop    edi
c000a2b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2bb:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2c1:	e8 c9 ec 01 00       	call   c0028f8f <__extendsfdf2>
c000a2c6:	83 c4 10             	add    esp,0x10
c000a2c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2e1:	e8 b2 e2 01 00       	call   c0028598 <__muldf3>
c000a2e6:	83 c4 10             	add    esp,0x10
c000a2e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f1:	52                   	push   edx
c000a2f2:	50                   	push   eax
c000a2f3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2f7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2fb:	e8 1b dc 01 00       	call   c0027f1b <__adddf3>
c000a300:	59                   	pop    ecx
c000a301:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a305:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a309:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a30f:	e8 7b ec 01 00       	call   c0028f8f <__extendsfdf2>
c000a314:	83 c4 10             	add    esp,0x10
c000a317:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a327:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32f:	e8 64 e2 01 00       	call   c0028598 <__muldf3>
c000a334:	83 c4 10             	add    esp,0x10
c000a337:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a33b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33f:	52                   	push   edx
c000a340:	50                   	push   eax
c000a341:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a345:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a349:	e8 cd db 01 00       	call   c0027f1b <__adddf3>
c000a34e:	5f                   	pop    edi
c000a34f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a353:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a357:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a35d:	e8 2d ec 01 00       	call   c0028f8f <__extendsfdf2>
c000a362:	83 c4 10             	add    esp,0x10
c000a365:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a369:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a375:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a379:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37d:	e8 16 e2 01 00       	call   c0028598 <__muldf3>
c000a382:	83 c4 10             	add    esp,0x10
c000a385:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38d:	52                   	push   edx
c000a38e:	50                   	push   eax
c000a38f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a393:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a397:	e8 7f db 01 00       	call   c0027f1b <__adddf3>
c000a39c:	83 c4 10             	add    esp,0x10
c000a39f:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3a7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3ab:	85 db                	test   ebx,ebx
c000a3ad:	0f 8f 36 fe ff ff    	jg     c000a1e9 <calc_output_quad+0x2b1>
c000a3b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c3:	e8 53 db 01 00       	call   c0027f1b <__adddf3>
c000a3c8:	83 c4 10             	add    esp,0x10
c000a3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e3:	e8 b0 e1 01 00       	call   c0028598 <__muldf3>
c000a3e8:	59                   	pop    ecx
c000a3e9:	5b                   	pop    ebx
c000a3ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fa:	e8 6c ea 01 00       	call   c0028e6b <__truncdfsf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a409:	89 06                	mov    DWORD PTR [esi],eax
c000a40b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a40f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a413:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a417:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a41b:	e8 fb da 01 00       	call   c0027f1b <__adddf3>
c000a420:	83 c4 10             	add    esp,0x10
c000a423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	e8 58 e1 01 00       	call   c0028598 <__muldf3>
c000a440:	5e                   	pop    esi
c000a441:	5f                   	pop    edi
c000a442:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a446:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a44a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a452:	e8 14 ea 01 00       	call   c0028e6b <__truncdfsf2>
c000a457:	83 c4 10             	add    esp,0x10
c000a45a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a461:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a464:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a468:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a470:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a474:	e8 a2 da 01 00       	call   c0027f1b <__adddf3>
c000a479:	83 c4 10             	add    esp,0x10
c000a47c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a480:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a494:	e8 ff e0 01 00       	call   c0028598 <__muldf3>
c000a499:	5d                   	pop    ebp
c000a49a:	59                   	pop    ecx
c000a49b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a49f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ab:	e8 bb e9 01 00       	call   c0028e6b <__truncdfsf2>
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4ba:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cd:	e8 49 da 01 00       	call   c0027f1b <__adddf3>
c000a4d2:	83 c4 10             	add    esp,0x10
c000a4d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	e8 a6 e0 01 00       	call   c0028598 <__muldf3>
c000a4f2:	5b                   	pop    ebx
c000a4f3:	5e                   	pop    esi
c000a4f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a504:	e8 62 e9 01 00       	call   c0028e6b <__truncdfsf2>
c000a509:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a510:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a513:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a519:	5b                   	pop    ebx
c000a51a:	5e                   	pop    esi
c000a51b:	5f                   	pop    edi
c000a51c:	5d                   	pop    ebp
c000a51d:	c3                   	ret    

c000a51e <calc_output_hex>:
c000a51e:	55                   	push   ebp
c000a51f:	89 cd                	mov    ebp,ecx
c000a521:	57                   	push   edi
c000a522:	56                   	push   esi
c000a523:	53                   	push   ebx
c000a524:	89 c3                	mov    ebx,eax
c000a526:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a52c:	89 14 24             	mov    DWORD PTR [esp],edx
c000a52f:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a536:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a53d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a548:	e8 6f f3 ff ff       	call   c00098bc <int_to_fp>
c000a54d:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a550:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a554:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a557:	29 c8                	sub    eax,ecx
c000a559:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a55d:	99                   	cdq    
c000a55e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a566:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a569:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a571:	0f af f8             	imul   edi,eax
c000a574:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a577:	01 cf                	add    edi,ecx
c000a579:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a57d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a580:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a584:	0f af c2             	imul   eax,edx
c000a587:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a58b:	29 c1                	sub    ecx,eax
c000a58d:	31 d2                	xor    edx,edx
c000a58f:	31 c0                	xor    eax,eax
c000a591:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a598:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a59c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5a4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5a8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5b0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5bc:	89 f8                	mov    eax,edi
c000a5be:	e8 07 f3 ff ff       	call   c00098ca <fp_to_double>
c000a5c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5cb:	89 f8                	mov    eax,edi
c000a5cd:	e8 ee f2 ff ff       	call   c00098c0 <fp_to_int>
c000a5d2:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5d6:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5d9:	52                   	push   edx
c000a5da:	52                   	push   edx
c000a5db:	51                   	push   ecx
c000a5dc:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5e0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5e7:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5eb:	e8 c0 d2 01 00       	call   c00278b0 <__subsf3>
c000a5f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5f3:	e8 97 e9 01 00       	call   c0028f8f <__extendsfdf2>
c000a5f8:	83 c4 10             	add    esp,0x10
c000a5fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a603:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a607:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a60b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a60f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a613:	e8 80 df 01 00       	call   c0028598 <__muldf3>
c000a618:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a61c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a620:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a623:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a627:	e8 63 e9 01 00       	call   c0028f8f <__extendsfdf2>
c000a62c:	83 c4 10             	add    esp,0x10
c000a62f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a633:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a637:	52                   	push   edx
c000a638:	50                   	push   eax
c000a639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a641:	e8 d5 d8 01 00       	call   c0027f1b <__adddf3>
c000a646:	59                   	pop    ecx
c000a647:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a64b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a64f:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a655:	e8 35 e9 01 00       	call   c0028f8f <__extendsfdf2>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a661:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a671:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a675:	e8 1e df 01 00       	call   c0028598 <__muldf3>
c000a67a:	83 c4 10             	add    esp,0x10
c000a67d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a681:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a685:	52                   	push   edx
c000a686:	50                   	push   eax
c000a687:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68f:	e8 87 d8 01 00       	call   c0027f1b <__adddf3>
c000a694:	59                   	pop    ecx
c000a695:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a699:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a69d:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6a3:	e8 e7 e8 01 00       	call   c0028f8f <__extendsfdf2>
c000a6a8:	83 c4 10             	add    esp,0x10
c000a6ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6af:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6bb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6c3:	e8 d0 de 01 00       	call   c0028598 <__muldf3>
c000a6c8:	83 c4 10             	add    esp,0x10
c000a6cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d3:	52                   	push   edx
c000a6d4:	50                   	push   eax
c000a6d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6dd:	e8 39 d8 01 00       	call   c0027f1b <__adddf3>
c000a6e2:	59                   	pop    ecx
c000a6e3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6e7:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6eb:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6f1:	e8 99 e8 01 00       	call   c0028f8f <__extendsfdf2>
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6fd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a705:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a709:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a70d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a711:	e8 82 de 01 00       	call   c0028598 <__muldf3>
c000a716:	83 c4 10             	add    esp,0x10
c000a719:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a721:	52                   	push   edx
c000a722:	50                   	push   eax
c000a723:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a727:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a72b:	e8 eb d7 01 00       	call   c0027f1b <__adddf3>
c000a730:	59                   	pop    ecx
c000a731:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a735:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a739:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a73f:	e8 4b e8 01 00       	call   c0028f8f <__extendsfdf2>
c000a744:	83 c4 10             	add    esp,0x10
c000a747:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a74f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a753:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a757:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75f:	e8 34 de 01 00       	call   c0028598 <__muldf3>
c000a764:	83 c4 10             	add    esp,0x10
c000a767:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a76b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76f:	52                   	push   edx
c000a770:	50                   	push   eax
c000a771:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a775:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a779:	e8 9d d7 01 00       	call   c0027f1b <__adddf3>
c000a77e:	59                   	pop    ecx
c000a77f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a783:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a787:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a78d:	e8 fd e7 01 00       	call   c0028f8f <__extendsfdf2>
c000a792:	83 c4 10             	add    esp,0x10
c000a795:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a799:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ad:	e8 e6 dd 01 00       	call   c0028598 <__muldf3>
c000a7b2:	83 c4 10             	add    esp,0x10
c000a7b5:	83 c6 18             	add    esi,0x18
c000a7b8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c0:	52                   	push   edx
c000a7c1:	50                   	push   eax
c000a7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ca:	e8 4c d7 01 00       	call   c0027f1b <__adddf3>
c000a7cf:	59                   	pop    ecx
c000a7d0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7d4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7d8:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7de:	e8 ac e7 01 00       	call   c0028f8f <__extendsfdf2>
c000a7e3:	83 c4 10             	add    esp,0x10
c000a7e6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ea:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fe:	e8 95 dd 01 00       	call   c0028598 <__muldf3>
c000a803:	83 c4 10             	add    esp,0x10
c000a806:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a80a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a80e:	52                   	push   edx
c000a80f:	50                   	push   eax
c000a810:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a814:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a818:	e8 fe d6 01 00       	call   c0027f1b <__adddf3>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a824:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a828:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a82b:	0f 89 8b fd ff ff    	jns    c000a5bc <calc_output_hex+0x9e>
c000a831:	31 f6                	xor    esi,esi
c000a833:	31 ff                	xor    edi,edi
c000a835:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a839:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a83c:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a840:	29 e9                	sub    ecx,ebp
c000a842:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a846:	29 c8                	sub    eax,ecx
c000a848:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a84b:	99                   	cdq    
c000a84c:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a850:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a853:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a857:	0f af e8             	imul   ebp,eax
c000a85a:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a85e:	40                   	inc    eax
c000a85f:	01 cd                	add    ebp,ecx
c000a861:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a866:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a86a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a86e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a872:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a875:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a879:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a87d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a881:	89 e8                	mov    eax,ebp
c000a883:	e8 42 f0 ff ff       	call   c00098ca <fp_to_double>
c000a888:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a88c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a890:	89 e8                	mov    eax,ebp
c000a892:	e8 29 f0 ff ff       	call   c00098c0 <fp_to_int>
c000a897:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a89b:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a89e:	52                   	push   edx
c000a89f:	52                   	push   edx
c000a8a0:	51                   	push   ecx
c000a8a1:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8a8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8af:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8b3:	e8 f8 cf 01 00       	call   c00278b0 <__subsf3>
c000a8b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8bb:	e8 cf e6 01 00       	call   c0028f8f <__extendsfdf2>
c000a8c0:	83 c4 10             	add    esp,0x10
c000a8c3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8db:	e8 b8 dc 01 00       	call   c0028598 <__muldf3>
c000a8e0:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8ee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8f2:	e8 98 e6 01 00       	call   c0028f8f <__extendsfdf2>
c000a8f7:	83 c4 10             	add    esp,0x10
c000a8fa:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8fe:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a902:	52                   	push   edx
c000a903:	50                   	push   eax
c000a904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90c:	e8 0a d6 01 00       	call   c0027f1b <__adddf3>
c000a911:	59                   	pop    ecx
c000a912:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a916:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a91a:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a920:	e8 6a e6 01 00       	call   c0028f8f <__extendsfdf2>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a92c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a938:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a940:	e8 53 dc 01 00       	call   c0028598 <__muldf3>
c000a945:	83 c4 10             	add    esp,0x10
c000a948:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a950:	52                   	push   edx
c000a951:	50                   	push   eax
c000a952:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a956:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a95a:	e8 bc d5 01 00       	call   c0027f1b <__adddf3>
c000a95f:	59                   	pop    ecx
c000a960:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a964:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a968:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a96e:	e8 1c e6 01 00       	call   c0028f8f <__extendsfdf2>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a97e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a982:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a986:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98e:	e8 05 dc 01 00       	call   c0028598 <__muldf3>
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a99a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99e:	52                   	push   edx
c000a99f:	50                   	push   eax
c000a9a0:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a4:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a8:	e8 6e d5 01 00       	call   c0027f1b <__adddf3>
c000a9ad:	59                   	pop    ecx
c000a9ae:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9b2:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9b6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9bc:	e8 ce e5 01 00       	call   c0028f8f <__extendsfdf2>
c000a9c1:	83 c4 10             	add    esp,0x10
c000a9c4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9dc:	e8 b7 db 01 00       	call   c0028598 <__muldf3>
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ec:	52                   	push   edx
c000a9ed:	50                   	push   eax
c000a9ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f6:	e8 20 d5 01 00       	call   c0027f1b <__adddf3>
c000a9fb:	59                   	pop    ecx
c000a9fc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa00:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa04:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa0a:	e8 80 e5 01 00       	call   c0028f8f <__extendsfdf2>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa16:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa22:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa26:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa2a:	e8 69 db 01 00       	call   c0028598 <__muldf3>
c000aa2f:	83 c4 10             	add    esp,0x10
c000aa32:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa36:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa3a:	52                   	push   edx
c000aa3b:	50                   	push   eax
c000aa3c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa40:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa44:	e8 d2 d4 01 00       	call   c0027f1b <__adddf3>
c000aa49:	59                   	pop    ecx
c000aa4a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa4e:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa52:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa58:	e8 32 e5 01 00       	call   c0028f8f <__extendsfdf2>
c000aa5d:	83 c4 10             	add    esp,0x10
c000aa60:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa64:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa70:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa74:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa78:	e8 1b db 01 00       	call   c0028598 <__muldf3>
c000aa7d:	83 c4 10             	add    esp,0x10
c000aa80:	83 eb 18             	sub    ebx,0x18
c000aa83:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa87:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8b:	52                   	push   edx
c000aa8c:	50                   	push   eax
c000aa8d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa91:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa95:	e8 81 d4 01 00       	call   c0027f1b <__adddf3>
c000aa9a:	59                   	pop    ecx
c000aa9b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa9f:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aaa3:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaa9:	e8 e1 e4 01 00       	call   c0028f8f <__extendsfdf2>
c000aaae:	83 c4 10             	add    esp,0x10
c000aab1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aab5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aabd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac9:	e8 ca da 01 00       	call   c0028598 <__muldf3>
c000aace:	83 c4 10             	add    esp,0x10
c000aad1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aad9:	52                   	push   edx
c000aada:	50                   	push   eax
c000aadb:	57                   	push   edi
c000aadc:	56                   	push   esi
c000aadd:	e8 39 d4 01 00       	call   c0027f1b <__adddf3>
c000aae2:	83 c4 10             	add    esp,0x10
c000aae5:	89 c6                	mov    esi,eax
c000aae7:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aaea:	89 d7                	mov    edi,edx
c000aaec:	85 ed                	test   ebp,ebp
c000aaee:	0f 8f 8d fd ff ff    	jg     c000a881 <calc_output_hex+0x363>
c000aaf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aaf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aafc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab04:	e8 12 d4 01 00       	call   c0027f1b <__adddf3>
c000ab09:	83 c4 10             	add    esp,0x10
c000ab0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab23:	e8 70 da 01 00       	call   c0028598 <__muldf3>
c000ab28:	59                   	pop    ecx
c000ab29:	5b                   	pop    ebx
c000ab2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3a:	e8 2c e3 01 00       	call   c0028e6b <__truncdfsf2>
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab49:	89 03                	mov    DWORD PTR [ebx],eax
c000ab4b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab4f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab5b:	e8 bb d3 01 00       	call   c0027f1b <__adddf3>
c000ab60:	83 c4 10             	add    esp,0x10
c000ab63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab6a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab6e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7a:	e8 19 da 01 00       	call   c0028598 <__muldf3>
c000ab7f:	5d                   	pop    ebp
c000ab80:	59                   	pop    ecx
c000ab81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab91:	e8 d5 e2 01 00       	call   c0028e6b <__truncdfsf2>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aba0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aba3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aba7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abaf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abb3:	e8 63 d3 01 00       	call   c0027f1b <__adddf3>
c000abb8:	83 c4 10             	add    esp,0x10
c000abbb:	89 04 24             	mov    DWORD PTR [esp],eax
c000abbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd2:	e8 c1 d9 01 00       	call   c0028598 <__muldf3>
c000abd7:	5b                   	pop    ebx
c000abd8:	5d                   	pop    ebp
c000abd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe9:	e8 7d e2 01 00       	call   c0028e6b <__truncdfsf2>
c000abee:	83 c4 10             	add    esp,0x10
c000abf1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abf8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abfb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac0b:	e8 0b d3 01 00       	call   c0027f1b <__adddf3>
c000ac10:	83 c4 10             	add    esp,0x10
c000ac13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2a:	e8 69 d9 01 00       	call   c0028598 <__muldf3>
c000ac2f:	59                   	pop    ecx
c000ac30:	5b                   	pop    ebx
c000ac31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac41:	e8 25 e2 01 00       	call   c0028e6b <__truncdfsf2>
c000ac46:	83 c4 10             	add    esp,0x10
c000ac49:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac50:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac63:	e8 b3 d2 01 00       	call   c0027f1b <__adddf3>
c000ac68:	83 c4 10             	add    esp,0x10
c000ac6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac82:	e8 11 d9 01 00       	call   c0028598 <__muldf3>
c000ac87:	5d                   	pop    ebp
c000ac88:	59                   	pop    ecx
c000ac89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac99:	e8 cd e1 01 00       	call   c0028e6b <__truncdfsf2>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aca8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acab:	57                   	push   edi
c000acac:	56                   	push   esi
c000acad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb5:	e8 61 d2 01 00       	call   c0027f1b <__adddf3>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 04 24             	mov    DWORD PTR [esp],eax
c000acc0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd4:	e8 bf d8 01 00       	call   c0028598 <__muldf3>
c000acd9:	5b                   	pop    ebx
c000acda:	5e                   	pop    esi
c000acdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ace3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aceb:	e8 7b e1 01 00       	call   c0028e6b <__truncdfsf2>
c000acf0:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acf7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acfa:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad00:	5b                   	pop    ebx
c000ad01:	5e                   	pop    esi
c000ad02:	5f                   	pop    edi
c000ad03:	5d                   	pop    ebp
c000ad04:	c3                   	ret    

c000ad05 <sinc_reset>:
c000ad05:	56                   	push   esi
c000ad06:	53                   	push   ebx
c000ad07:	51                   	push   ecx
c000ad08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad0c:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad0f:	85 db                	test   ebx,ebx
c000ad11:	74 59                	je     c000ad6c <sinc_reset+0x67>
c000ad13:	31 d2                	xor    edx,edx
c000ad15:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad1c:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad1f:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad22:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad29:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad30:	31 c0                	xor    eax,eax
c000ad32:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad38:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad3b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad3e:	52                   	push   edx
c000ad3f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad42:	c1 e0 02             	shl    eax,0x2
c000ad45:	50                   	push   eax
c000ad46:	6a 00                	push   0x0
c000ad48:	56                   	push   esi
c000ad49:	e8 1e 5a ff ff       	call   c000076c <memset>
c000ad4e:	83 c4 0c             	add    esp,0xc
c000ad51:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad54:	c1 e0 02             	shl    eax,0x2
c000ad57:	50                   	push   eax
c000ad58:	68 aa 00 00 00       	push   0xaa
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad63:	50                   	push   eax
c000ad64:	e8 03 5a ff ff       	call   c000076c <memset>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	58                   	pop    eax
c000ad6d:	5b                   	pop    ebx
c000ad6e:	5e                   	pop    esi
c000ad6f:	c3                   	ret    

c000ad70 <calc_output_multi>:
c000ad70:	55                   	push   ebp
c000ad71:	57                   	push   edi
c000ad72:	56                   	push   esi
c000ad73:	89 c6                	mov    esi,eax
c000ad75:	53                   	push   ebx
c000ad76:	83 ec 4c             	sub    esp,0x4c
c000ad79:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad7d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad81:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad85:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad89:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad95:	8d 46 44             	lea    eax,[esi+0x44]
c000ad98:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad9b:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ada1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ada5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ada8:	e8 0f eb ff ff       	call   c00098bc <int_to_fp>
c000adad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adb0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adb4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adb8:	99                   	cdq    
c000adb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adc1:	0f af d0             	imul   edx,eax
c000adc4:	0f af c3             	imul   eax,ebx
c000adc7:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adcb:	29 c1                	sub    ecx,eax
c000adcd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000add1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000add5:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000addc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ade0:	57                   	push   edi
c000ade1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ade5:	6a 00                	push   0x0
c000ade7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adeb:	e8 7c 59 ff ff       	call   c000076c <memset>
c000adf0:	83 c4 10             	add    esp,0x10
c000adf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adf7:	89 df                	mov    edi,ebx
c000adf9:	e8 cc ea ff ff       	call   c00098ca <fp_to_double>
c000adfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae0a:	e8 b1 ea ff ff       	call   c00098c0 <fp_to_int>
c000ae0f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae12:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae15:	51                   	push   ecx
c000ae16:	51                   	push   ecx
c000ae17:	55                   	push   ebp
c000ae18:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae1c:	e8 8f ca 01 00       	call   c00278b0 <__subsf3>
c000ae21:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae24:	e8 66 e1 01 00       	call   c0028f8f <__extendsfdf2>
c000ae29:	83 c4 10             	add    esp,0x10
c000ae2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae44:	e8 4f d7 01 00       	call   c0028598 <__muldf3>
c000ae49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae50:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae54:	e8 36 e1 01 00       	call   c0028f8f <__extendsfdf2>
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae60:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae64:	52                   	push   edx
c000ae65:	50                   	push   eax
c000ae66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6e:	e8 a8 d0 01 00       	call   c0027f1b <__adddf3>
c000ae73:	83 c4 10             	add    esp,0x10
c000ae76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae7a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae7e:	89 f8                	mov    eax,edi
c000ae80:	b9 08 00 00 00       	mov    ecx,0x8
c000ae85:	99                   	cdq    
c000ae86:	f7 f9                	idiv   ecx
c000ae88:	4a                   	dec    edx
c000ae89:	83 fa 06             	cmp    edx,0x6
c000ae8c:	77 07                	ja     c000ae95 <calc_output_multi+0x125>
c000ae8e:	ff 24 95 a4 a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd575c]
c000ae95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae98:	4f                   	dec    edi
c000ae99:	83 ec 0c             	sub    esp,0xc
c000ae9c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aea3:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeaa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeae:	e8 dc e0 01 00       	call   c0028f8f <__extendsfdf2>
c000aeb3:	83 c4 10             	add    esp,0x10
c000aeb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aebe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aece:	e8 c5 d6 01 00       	call   c0028598 <__muldf3>
c000aed3:	83 c4 10             	add    esp,0x10
c000aed6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aede:	52                   	push   edx
c000aedf:	50                   	push   eax
c000aee0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aee3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee6:	e8 30 d0 01 00       	call   c0027f1b <__adddf3>
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aef4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef7:	4f                   	dec    edi
c000aef8:	83 ec 0c             	sub    esp,0xc
c000aefb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aefe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af02:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af0d:	e8 7d e0 01 00       	call   c0028f8f <__extendsfdf2>
c000af12:	83 c4 10             	add    esp,0x10
c000af15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af25:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af29:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af2d:	e8 66 d6 01 00       	call   c0028598 <__muldf3>
c000af32:	83 c4 10             	add    esp,0x10
c000af35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af39:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3d:	52                   	push   edx
c000af3e:	50                   	push   eax
c000af3f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af42:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af45:	e8 d1 cf 01 00       	call   c0027f1b <__adddf3>
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af50:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af56:	4f                   	dec    edi
c000af57:	83 ec 0c             	sub    esp,0xc
c000af5a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af61:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af68:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af6c:	e8 1e e0 01 00       	call   c0028f8f <__extendsfdf2>
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af84:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af88:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af8c:	e8 07 d6 01 00       	call   c0028598 <__muldf3>
c000af91:	83 c4 10             	add    esp,0x10
c000af94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af98:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9c:	52                   	push   edx
c000af9d:	50                   	push   eax
c000af9e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afa1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afa4:	e8 72 cf 01 00       	call   c0027f1b <__adddf3>
c000afa9:	83 c4 10             	add    esp,0x10
c000afac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afaf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afb5:	4f                   	dec    edi
c000afb6:	83 ec 0c             	sub    esp,0xc
c000afb9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afc0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afc7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afcb:	e8 bf df 01 00       	call   c0028f8f <__extendsfdf2>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afd7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afe7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afeb:	e8 a8 d5 01 00       	call   c0028598 <__muldf3>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000affb:	52                   	push   edx
c000affc:	50                   	push   eax
c000affd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b000:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b003:	e8 13 cf 01 00       	call   c0027f1b <__adddf3>
c000b008:	83 c4 10             	add    esp,0x10
c000b00b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b00e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b011:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b014:	4f                   	dec    edi
c000b015:	83 ec 0c             	sub    esp,0xc
c000b018:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b01b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b01f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b026:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b02a:	e8 60 df 01 00       	call   c0028f8f <__extendsfdf2>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b036:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b042:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b046:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b04a:	e8 49 d5 01 00       	call   c0028598 <__muldf3>
c000b04f:	83 c4 10             	add    esp,0x10
c000b052:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b056:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b05a:	52                   	push   edx
c000b05b:	50                   	push   eax
c000b05c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b05f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b062:	e8 b4 ce 01 00       	call   c0027f1b <__adddf3>
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b06d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b070:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b073:	4f                   	dec    edi
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b07a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b07e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b085:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b089:	e8 01 df 01 00       	call   c0028f8f <__extendsfdf2>
c000b08e:	83 c4 10             	add    esp,0x10
c000b091:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b095:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b099:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a9:	e8 ea d4 01 00       	call   c0028598 <__muldf3>
c000b0ae:	83 c4 10             	add    esp,0x10
c000b0b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b9:	52                   	push   edx
c000b0ba:	50                   	push   eax
c000b0bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0c1:	e8 55 ce 01 00       	call   c0027f1b <__adddf3>
c000b0c6:	83 c4 10             	add    esp,0x10
c000b0c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0cc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0d2:	4f                   	dec    edi
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0dd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0e8:	e8 a2 de 01 00       	call   c0028f8f <__extendsfdf2>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b104:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b108:	e8 8b d4 01 00       	call   c0028598 <__muldf3>
c000b10d:	83 c4 10             	add    esp,0x10
c000b110:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b114:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b118:	52                   	push   edx
c000b119:	50                   	push   eax
c000b11a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b11d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b120:	e8 f6 cd 01 00       	call   c0027f1b <__adddf3>
c000b125:	83 c4 10             	add    esp,0x10
c000b128:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b12b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b12e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b131:	4f                   	dec    edi
c000b132:	83 ec 0c             	sub    esp,0xc
c000b135:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b138:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b13c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b143:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b147:	e8 43 de 01 00       	call   c0028f8f <__extendsfdf2>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b153:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b157:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b163:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b167:	e8 2c d4 01 00       	call   c0028598 <__muldf3>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b173:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b177:	52                   	push   edx
c000b178:	50                   	push   eax
c000b179:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b17c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b17f:	e8 97 cd 01 00       	call   c0027f1b <__adddf3>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b18a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b18d:	85 ff                	test   edi,edi
c000b18f:	0f 8f e9 fc ff ff    	jg     c000ae7e <calc_output_multi+0x10e>
c000b195:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b199:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b19d:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1a1:	0f 89 4c fc ff ff    	jns    c000adf3 <calc_output_multi+0x83>
c000b1a7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1af:	29 c8                	sub    eax,ecx
c000b1b1:	99                   	cdq    
c000b1b2:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1ba:	0f af d0             	imul   edx,eax
c000b1bd:	40                   	inc    eax
c000b1be:	01 d1                	add    ecx,edx
c000b1c0:	0f af c3             	imul   eax,ebx
c000b1c3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1c7:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ce:	55                   	push   ebp
c000b1cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d3:	6a 00                	push   0x0
c000b1d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d9:	e8 8e 55 ff ff       	call   c000076c <memset>
c000b1de:	83 c4 10             	add    esp,0x10
c000b1e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1e5:	e8 e0 e6 ff ff       	call   c00098ca <fp_to_double>
c000b1ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1f6:	e8 c5 e6 ff ff       	call   c00098c0 <fp_to_int>
c000b1fb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b201:	57                   	push   edi
c000b202:	57                   	push   edi
c000b203:	89 df                	mov    edi,ebx
c000b205:	55                   	push   ebp
c000b206:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b20a:	e8 a1 c6 01 00       	call   c00278b0 <__subsf3>
c000b20f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b212:	e8 78 dd 01 00       	call   c0028f8f <__extendsfdf2>
c000b217:	83 c4 10             	add    esp,0x10
c000b21a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b222:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b226:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b232:	e8 61 d3 01 00       	call   c0028598 <__muldf3>
c000b237:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b23a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b23e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b242:	e8 48 dd 01 00       	call   c0028f8f <__extendsfdf2>
c000b247:	83 c4 10             	add    esp,0x10
c000b24a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b24e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b252:	52                   	push   edx
c000b253:	50                   	push   eax
c000b254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b25c:	e8 ba cc 01 00       	call   c0027f1b <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b268:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b26c:	89 f8                	mov    eax,edi
c000b26e:	b9 08 00 00 00       	mov    ecx,0x8
c000b273:	99                   	cdq    
c000b274:	f7 f9                	idiv   ecx
c000b276:	4a                   	dec    edx
c000b277:	83 fa 06             	cmp    edx,0x6
c000b27a:	77 07                	ja     c000b283 <calc_output_multi+0x513>
c000b27c:	ff 24 95 c0 a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5740]
c000b283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b287:	4f                   	dec    edi
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b292:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b299:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29d:	e8 ed dc 01 00       	call   c0028f8f <__extendsfdf2>
c000b2a2:	83 c4 10             	add    esp,0x10
c000b2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bd:	e8 d6 d2 01 00       	call   c0028598 <__muldf3>
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cd:	52                   	push   edx
c000b2ce:	50                   	push   eax
c000b2cf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d5:	e8 41 cc 01 00       	call   c0027f1b <__adddf3>
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e7:	4f                   	dec    edi
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fd:	e8 8d dc 01 00       	call   c0028f8f <__extendsfdf2>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b315:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b319:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31d:	e8 76 d2 01 00       	call   c0028598 <__muldf3>
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b329:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32d:	52                   	push   edx
c000b32e:	50                   	push   eax
c000b32f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b332:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b335:	e8 e1 cb 01 00       	call   c0027f1b <__adddf3>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b340:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b347:	4f                   	dec    edi
c000b348:	83 ec 0c             	sub    esp,0xc
c000b34b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b34e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b352:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b359:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b35d:	e8 2d dc 01 00       	call   c0028f8f <__extendsfdf2>
c000b362:	83 c4 10             	add    esp,0x10
c000b365:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b369:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b375:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b379:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b37d:	e8 16 d2 01 00       	call   c0028598 <__muldf3>
c000b382:	83 c4 10             	add    esp,0x10
c000b385:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b389:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38d:	52                   	push   edx
c000b38e:	50                   	push   eax
c000b38f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b392:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b395:	e8 81 cb 01 00       	call   c0027f1b <__adddf3>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3a0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a7:	4f                   	dec    edi
c000b3a8:	83 ec 0c             	sub    esp,0xc
c000b3ab:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3b2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3b9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3bd:	e8 cd db 01 00       	call   c0028f8f <__extendsfdf2>
c000b3c2:	83 c4 10             	add    esp,0x10
c000b3c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3dd:	e8 b6 d1 01 00       	call   c0028598 <__muldf3>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ed:	52                   	push   edx
c000b3ee:	50                   	push   eax
c000b3ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3f5:	e8 21 cb 01 00       	call   c0027f1b <__adddf3>
c000b3fa:	83 c4 10             	add    esp,0x10
c000b3fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b400:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b407:	4f                   	dec    edi
c000b408:	83 ec 0c             	sub    esp,0xc
c000b40b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b40e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b412:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b419:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b41d:	e8 6d db 01 00       	call   c0028f8f <__extendsfdf2>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b431:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b435:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b439:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b43d:	e8 56 d1 01 00       	call   c0028598 <__muldf3>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b449:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44d:	52                   	push   edx
c000b44e:	50                   	push   eax
c000b44f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b452:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b455:	e8 c1 ca 01 00       	call   c0027f1b <__adddf3>
c000b45a:	83 c4 10             	add    esp,0x10
c000b45d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b460:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b463:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b467:	4f                   	dec    edi
c000b468:	83 ec 0c             	sub    esp,0xc
c000b46b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b46e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b472:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b479:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b47d:	e8 0d db 01 00       	call   c0028f8f <__extendsfdf2>
c000b482:	83 c4 10             	add    esp,0x10
c000b485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b495:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b499:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b49d:	e8 f6 d0 01 00       	call   c0028598 <__muldf3>
c000b4a2:	83 c4 10             	add    esp,0x10
c000b4a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ad:	52                   	push   edx
c000b4ae:	50                   	push   eax
c000b4af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4b5:	e8 61 ca 01 00       	call   c0027f1b <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c7:	4f                   	dec    edi
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4d2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4d9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4dd:	e8 ad da 01 00       	call   c0028f8f <__extendsfdf2>
c000b4e2:	83 c4 10             	add    esp,0x10
c000b4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4fd:	e8 96 d0 01 00       	call   c0028598 <__muldf3>
c000b502:	83 c4 10             	add    esp,0x10
c000b505:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50d:	52                   	push   edx
c000b50e:	50                   	push   eax
c000b50f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b512:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b515:	e8 01 ca 01 00       	call   c0027f1b <__adddf3>
c000b51a:	83 c4 10             	add    esp,0x10
c000b51d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b520:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b527:	4f                   	dec    edi
c000b528:	83 ec 0c             	sub    esp,0xc
c000b52b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b52e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b532:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b539:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b53d:	e8 4d da 01 00       	call   c0028f8f <__extendsfdf2>
c000b542:	83 c4 10             	add    esp,0x10
c000b545:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b549:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b551:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b555:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b559:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b55d:	e8 36 d0 01 00       	call   c0028598 <__muldf3>
c000b562:	83 c4 10             	add    esp,0x10
c000b565:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56d:	52                   	push   edx
c000b56e:	50                   	push   eax
c000b56f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b572:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b575:	e8 a1 c9 01 00       	call   c0027f1b <__adddf3>
c000b57a:	83 c4 10             	add    esp,0x10
c000b57d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b580:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b583:	85 ff                	test   edi,edi
c000b585:	0f 8f e1 fc ff ff    	jg     c000b26c <calc_output_multi+0x4fc>
c000b58b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b58f:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b593:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b597:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b59c:	0f 8f 3f fc ff ff    	jg     c000b1e1 <calc_output_multi+0x471>
c000b5a2:	be 08 00 00 00       	mov    esi,0x8
c000b5a7:	89 d8                	mov    eax,ebx
c000b5a9:	99                   	cdq    
c000b5aa:	f7 fe                	idiv   esi
c000b5ac:	4a                   	dec    edx
c000b5ad:	83 fa 06             	cmp    edx,0x6
c000b5b0:	77 07                	ja     c000b5b9 <calc_output_multi+0x849>
c000b5b2:	ff 24 95 dc a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5724]
c000b5b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5bd:	4b                   	dec    ebx
c000b5be:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5cd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d0:	e8 46 c9 01 00       	call   c0027f1b <__adddf3>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f0:	e8 a3 cf 01 00       	call   c0028598 <__muldf3>
c000b5f5:	5d                   	pop    ebp
c000b5f6:	59                   	pop    ecx
c000b5f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b607:	e8 5f d8 01 00       	call   c0028e6b <__truncdfsf2>
c000b60c:	83 c4 10             	add    esp,0x10
c000b60f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b613:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b61a:	4b                   	dec    ebx
c000b61b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b622:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b626:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b62a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b62d:	e8 e9 c8 01 00       	call   c0027f1b <__adddf3>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b639:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64d:	e8 46 cf 01 00       	call   c0028598 <__muldf3>
c000b652:	59                   	pop    ecx
c000b653:	5f                   	pop    edi
c000b654:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b658:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b664:	e8 02 d8 01 00       	call   c0028e6b <__truncdfsf2>
c000b669:	83 c4 10             	add    esp,0x10
c000b66c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b670:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b677:	4b                   	dec    ebx
c000b678:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b67c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b67f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b683:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b687:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b68a:	e8 8c c8 01 00       	call   c0027f1b <__adddf3>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b696:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6aa:	e8 e9 ce 01 00       	call   c0028598 <__muldf3>
c000b6af:	5f                   	pop    edi
c000b6b0:	5d                   	pop    ebp
c000b6b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c1:	e8 a5 d7 01 00       	call   c0028e6b <__truncdfsf2>
c000b6c6:	83 c4 10             	add    esp,0x10
c000b6c9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6cd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d4:	4b                   	dec    ebx
c000b6d5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6e0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6e4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6e7:	e8 2f c8 01 00       	call   c0027f1b <__adddf3>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b707:	e8 8c ce 01 00       	call   c0028598 <__muldf3>
c000b70c:	5d                   	pop    ebp
c000b70d:	59                   	pop    ecx
c000b70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b712:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71e:	e8 48 d7 01 00       	call   c0028e6b <__truncdfsf2>
c000b723:	83 c4 10             	add    esp,0x10
c000b726:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b72a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b72d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b731:	4b                   	dec    ebx
c000b732:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b736:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b73d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b741:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b744:	e8 d2 c7 01 00       	call   c0027f1b <__adddf3>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b750:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b764:	e8 2f ce 01 00       	call   c0028598 <__muldf3>
c000b769:	59                   	pop    ecx
c000b76a:	5f                   	pop    edi
c000b76b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b76f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77b:	e8 eb d6 01 00       	call   c0028e6b <__truncdfsf2>
c000b780:	83 c4 10             	add    esp,0x10
c000b783:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b787:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78e:	4b                   	dec    ebx
c000b78f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b793:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b79a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b79e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7a1:	e8 75 c7 01 00       	call   c0027f1b <__adddf3>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7c1:	e8 d2 cd 01 00       	call   c0028598 <__muldf3>
c000b7c6:	5f                   	pop    edi
c000b7c7:	5d                   	pop    ebp
c000b7c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d8:	e8 8e d6 01 00       	call   c0028e6b <__truncdfsf2>
c000b7dd:	83 c4 10             	add    esp,0x10
c000b7e0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7e4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7eb:	4b                   	dec    ebx
c000b7ec:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7f0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7f7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7fb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7fe:	e8 18 c7 01 00       	call   c0027f1b <__adddf3>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b80a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81e:	e8 75 cd 01 00       	call   c0028598 <__muldf3>
c000b823:	5d                   	pop    ebp
c000b824:	59                   	pop    ecx
c000b825:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b829:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b831:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b835:	e8 31 d6 01 00       	call   c0028e6b <__truncdfsf2>
c000b83a:	83 c4 10             	add    esp,0x10
c000b83d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b841:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b848:	4b                   	dec    ebx
c000b849:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b84d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b854:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b858:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b85b:	e8 bb c6 01 00       	call   c0027f1b <__adddf3>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b867:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b86b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b877:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87b:	e8 18 cd 01 00       	call   c0028598 <__muldf3>
c000b880:	59                   	pop    ecx
c000b881:	5f                   	pop    edi
c000b882:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b886:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b88a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b88e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b892:	e8 d4 d5 01 00       	call   c0028e6b <__truncdfsf2>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	85 db                	test   ebx,ebx
c000b89c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8a0:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8a3:	0f 8f fe fc ff ff    	jg     c000b5a7 <calc_output_multi+0x837>
c000b8a9:	83 c4 4c             	add    esp,0x4c
c000b8ac:	5b                   	pop    ebx
c000b8ad:	5e                   	pop    esi
c000b8ae:	5f                   	pop    edi
c000b8af:	5d                   	pop    ebp
c000b8b0:	c3                   	ret    

c000b8b1 <double_to_fp>:
c000b8b1:	83 ec 0c             	sub    esp,0xc
c000b8b4:	68 00 00 b0 40       	push   0x40b00000
c000b8b9:	6a 00                	push   0x0
c000b8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c3:	e8 d0 cc 01 00       	call   c0028598 <__muldf3>
c000b8c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8d0:	83 c4 1c             	add    esp,0x1c
c000b8d3:	e9 48 d7 01 00       	jmp    c0029020 <lrint>

c000b8d8 <prepare_data>:
c000b8d8:	55                   	push   ebp
c000b8d9:	57                   	push   edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8e7:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8eb:	0f 89 57 01 00 00    	jns    c000ba48 <prepare_data+0x170>
c000b8f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8f7:	85 d2                	test   edx,edx
c000b8f9:	75 0d                	jne    c000b908 <prepare_data+0x30>
c000b8fb:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8fe:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b901:	29 d0                	sub    eax,edx
c000b903:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b906:	eb 44                	jmp    c000b94c <prepare_data+0x74>
c000b908:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b90b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b90e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b911:	39 c1                	cmp    ecx,eax
c000b913:	7d 04                	jge    c000b919 <prepare_data+0x41>
c000b915:	29 d0                	sub    eax,edx
c000b917:	eb 2d                	jmp    c000b946 <prepare_data+0x6e>
c000b919:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b91f:	29 d7                	sub    edi,edx
c000b921:	01 f7                	add    edi,esi
c000b923:	51                   	push   ecx
c000b924:	29 f2                	sub    edx,esi
c000b926:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b92d:	8d 14 90             	lea    edx,[eax+edx*4]
c000b930:	51                   	push   ecx
c000b931:	52                   	push   edx
c000b932:	50                   	push   eax
c000b933:	e8 6c 4d ff ff       	call   c00006a4 <memmove>
c000b938:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b93b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b93e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b941:	29 f0                	sub    eax,esi
c000b943:	83 c4 10             	add    esp,0x10
c000b946:	29 f0                	sub    eax,esi
c000b948:	79 02                	jns    c000b94c <prepare_data+0x74>
c000b94a:	31 c0                	xor    eax,eax
c000b94c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b94f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b952:	29 ef                	sub    edi,ebp
c000b954:	39 c7                	cmp    edi,eax
c000b956:	7e 02                	jle    c000b95a <prepare_data+0x82>
c000b958:	89 c7                	mov    edi,eax
c000b95a:	89 f8                	mov    eax,edi
c000b95c:	99                   	cdq    
c000b95d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b960:	b8 15 00 00 00       	mov    eax,0x15
c000b965:	29 d7                	sub    edi,edx
c000b967:	0f 88 dd 00 00 00    	js     c000ba4a <prepare_data+0x172>
c000b96d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b970:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b973:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b976:	0f 8f ce 00 00 00    	jg     c000ba4a <prepare_data+0x172>
c000b97c:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b982:	50                   	push   eax
c000b983:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b98a:	50                   	push   eax
c000b98b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b98f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b991:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b994:	50                   	push   eax
c000b995:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b998:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b99c:	50                   	push   eax
c000b99d:	e8 c1 4c ff ff       	call   c0000663 <memcpy>
c000b9a2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9a5:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9a8:	01 fd                	add    ebp,edi
c000b9aa:	01 f9                	add    ecx,edi
c000b9ac:	83 c4 10             	add    esp,0x10
c000b9af:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9b2:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9b5:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9bc:	0f 85 86 00 00 00    	jne    c000ba48 <prepare_data+0x170>
c000b9c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9c5:	89 e8                	mov    eax,ebp
c000b9c7:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ca:	29 c8                	sub    eax,ecx
c000b9cc:	39 f8                	cmp    eax,edi
c000b9ce:	7d 78                	jge    c000ba48 <prepare_data+0x170>
c000b9d0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9d4:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9d8:	74 6e                	je     c000ba48 <prepare_data+0x170>
c000b9da:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9e1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9e4:	29 ef                	sub    edi,ebp
c000b9e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ea:	7c 29                	jl     c000ba15 <prepare_data+0x13d>
c000b9ec:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9ef:	29 f1                	sub    ecx,esi
c000b9f1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9f8:	55                   	push   ebp
c000b9f9:	50                   	push   eax
c000b9fa:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9fd:	50                   	push   eax
c000b9fe:	52                   	push   edx
c000b9ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba03:	e8 9c 4c ff ff       	call   c00006a4 <memmove>
c000ba08:	83 c4 10             	add    esp,0x10
c000ba0b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba0e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba15:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba1b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba1e:	83 c6 05             	add    esi,0x5
c000ba21:	78 07                	js     c000ba2a <prepare_data+0x152>
c000ba23:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba26:	39 cf                	cmp    edi,ecx
c000ba28:	7e 04                	jle    c000ba2e <prepare_data+0x156>
c000ba2a:	89 ce                	mov    esi,ecx
c000ba2c:	29 c6                	sub    esi,eax
c000ba2e:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba31:	51                   	push   ecx
c000ba32:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba39:	51                   	push   ecx
c000ba3a:	6a 00                	push   0x0
c000ba3c:	50                   	push   eax
c000ba3d:	e8 2a 4d ff ff       	call   c000076c <memset>
c000ba42:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba45:	83 c4 10             	add    esp,0x10
c000ba48:	31 c0                	xor    eax,eax
c000ba4a:	83 c4 1c             	add    esp,0x1c
c000ba4d:	5b                   	pop    ebx
c000ba4e:	5e                   	pop    esi
c000ba4f:	5f                   	pop    edi
c000ba50:	5d                   	pop    ebp
c000ba51:	c3                   	ret    

c000ba52 <sinc_multichan_vari_process>:
c000ba52:	55                   	push   ebp
c000ba53:	ba 05 00 00 00       	mov    edx,0x5
c000ba58:	57                   	push   edi
c000ba59:	56                   	push   esi
c000ba5a:	53                   	push   ebx
c000ba5b:	83 ec 4c             	sub    esp,0x4c
c000ba5e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba62:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba66:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba69:	85 db                	test   ebx,ebx
c000ba6b:	0f 84 9b 06 00 00    	je     c000c10c <sinc_multichan_vari_process+0x6ba>
c000ba71:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba74:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba77:	0f af c5             	imul   eax,ebp
c000ba7a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba7d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba80:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba87:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba8e:	0f af c5             	imul   eax,ebp
c000ba91:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba94:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba97:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa1:	68 00 00 70 3f       	push   0x3f700000
c000baa6:	6a 00                	push   0x0
c000baa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab0:	e8 b2 d3 01 00       	call   c0028e67 <__ltdf2>
c000bab5:	83 c4 10             	add    esp,0x10
c000bab8:	ba 16 00 00 00       	mov    edx,0x16
c000babd:	85 c0                	test   eax,eax
c000babf:	0f 88 47 06 00 00    	js     c000c10c <sinc_multichan_vari_process+0x6ba>
c000bac5:	68 00 00 70 40       	push   0x40700000
c000baca:	6a 00                	push   0x0
c000bacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad4:	e8 70 d3 01 00       	call   c0028e49 <__gtdf2>
c000bad9:	83 c4 10             	add    esp,0x10
c000badc:	ba 16 00 00 00       	mov    edx,0x16
c000bae1:	85 c0                	test   eax,eax
c000bae3:	0f 8f 23 06 00 00    	jg     c000c10c <sinc_multichan_vari_process+0x6ba>
c000bae9:	83 ec 0c             	sub    esp,0xc
c000baec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000baef:	e8 07 d1 01 00       	call   c0028bfb <__floatsidf>
c000baf4:	83 c4 10             	add    esp,0x10
c000baf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bafb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000baff:	68 00 00 00 40       	push   0x40000000
c000bb04:	6a 00                	push   0x0
c000bb06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0e:	e8 08 c4 01 00       	call   c0027f1b <__adddf3>
c000bb13:	59                   	pop    ecx
c000bb14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb1c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb1f:	e8 d7 d0 01 00       	call   c0028bfb <__floatsidf>
c000bb24:	83 c4 10             	add    esp,0x10
c000bb27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2f:	52                   	push   edx
c000bb30:	50                   	push   eax
c000bb31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb39:	e8 3e cd 01 00       	call   c002887c <__divdf3>
c000bb3e:	83 c4 10             	add    esp,0x10
c000bb41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb49:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb4c:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb67:	e8 dd d2 01 00       	call   c0028e49 <__gtdf2>
c000bb6c:	83 c4 10             	add    esp,0x10
c000bb6f:	85 c0                	test   eax,eax
c000bb71:	7e 2d                	jle    c000bba0 <sinc_multichan_vari_process+0x14e>
c000bb73:	68 00 00 f0 3f       	push   0x3ff00000
c000bb78:	6a 00                	push   0x0
c000bb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb82:	e8 e0 d2 01 00       	call   c0028e67 <__ltdf2>
c000bb87:	83 c4 10             	add    esp,0x10
c000bb8a:	85 c0                	test   eax,eax
c000bb8c:	79 4d                	jns    c000bbdb <sinc_multichan_vari_process+0x189>
c000bb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb9e:	eb 1b                	jmp    c000bbbb <sinc_multichan_vari_process+0x169>
c000bba0:	68 00 00 f0 3f       	push   0x3ff00000
c000bba5:	6a 00                	push   0x0
c000bba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbaf:	e8 b3 d2 01 00       	call   c0028e67 <__ltdf2>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	85 c0                	test   eax,eax
c000bbb9:	79 20                	jns    c000bbdb <sinc_multichan_vari_process+0x189>
c000bbbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbcb:	e8 ac cc 01 00       	call   c002887c <__divdf3>
c000bbd0:	83 c4 10             	add    esp,0x10
c000bbd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbdb:	50                   	push   eax
c000bbdc:	50                   	push   eax
c000bbdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	e8 36 d4 01 00       	call   c0029020 <lrint>
c000bbea:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbed:	40                   	inc    eax
c000bbee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbf2:	0f af c5             	imul   eax,ebp
c000bbf5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbf9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	58                   	pop    eax
c000bc01:	5a                   	pop    edx
c000bc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0a:	e8 11 d4 01 00       	call   c0029020 <lrint>
c000bc0f:	83 ec 0c             	sub    esp,0xc
c000bc12:	50                   	push   eax
c000bc13:	e8 e3 cf 01 00       	call   c0028bfb <__floatsidf>
c000bc18:	83 c4 10             	add    esp,0x10
c000bc1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc23:	52                   	push   edx
c000bc24:	50                   	push   eax
c000bc25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc2d:	e8 3a c9 01 00       	call   c002856c <__subdf3>
c000bc32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc3a:	83 c4 20             	add    esp,0x20
c000bc3d:	6a 00                	push   0x0
c000bc3f:	6a 00                	push   0x0
c000bc41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc49:	e8 19 d2 01 00       	call   c0028e67 <__ltdf2>
c000bc4e:	83 c4 10             	add    esp,0x10
c000bc51:	85 c0                	test   eax,eax
c000bc53:	79 1f                	jns    c000bc74 <sinc_multichan_vari_process+0x222>
c000bc55:	68 00 00 f0 3f       	push   0x3ff00000
c000bc5a:	6a 00                	push   0x0
c000bc5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc64:	e8 b2 c2 01 00       	call   c0027f1b <__adddf3>
c000bc69:	83 c4 10             	add    esp,0x10
c000bc6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc74:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc77:	83 ec 10             	sub    esp,0x10
c000bc7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc7e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc91:	e8 d6 c8 01 00       	call   c002856c <__subdf3>
c000bc96:	83 c4 18             	add    esp,0x18
c000bc99:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca1:	52                   	push   edx
c000bca2:	50                   	push   eax
c000bca3:	e8 78 d3 01 00       	call   c0029020 <lrint>
c000bca8:	0f af e8             	imul   ebp,eax
c000bcab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcaf:	01 e8                	add    eax,ebp
c000bcb1:	99                   	cdq    
c000bcb2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcb5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcc0:	68 00 00 f0 3f       	push   0x3ff00000
c000bcc5:	6a 00                	push   0x0
c000bcc7:	e8 b0 cb 01 00       	call   c002887c <__divdf3>
c000bccc:	83 c4 10             	add    esp,0x10
c000bccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcdc:	68 23 42 92 0c       	push   0xc924223
c000bce1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce9:	e8 2d c2 01 00       	call   c0027f1b <__adddf3>
c000bcee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcf2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcf6:	83 c4 20             	add    esp,0x20
c000bcf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd01:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd0c:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd0f:	7d 50                	jge    c000bd61 <sinc_multichan_vari_process+0x30f>
c000bd11:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd14:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd17:	01 c8                	add    eax,ecx
c000bd19:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd1c:	99                   	cdq    
c000bd1d:	f7 f9                	idiv   ecx
c000bd1f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd23:	7d 0c                	jge    c000bd31 <sinc_multichan_vari_process+0x2df>
c000bd25:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd28:	85 ed                	test   ebp,ebp
c000bd2a:	79 6b                	jns    c000bd97 <sinc_multichan_vari_process+0x345>
c000bd2c:	e9 e6 00 00 00       	jmp    c000be17 <sinc_multichan_vari_process+0x3c5>
c000bd31:	50                   	push   eax
c000bd32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd36:	57                   	push   edi
c000bd37:	53                   	push   ebx
c000bd38:	e8 9b fb ff ff       	call   c000b8d8 <prepare_data>
c000bd3d:	83 c4 10             	add    esp,0x10
c000bd40:	89 c2                	mov    edx,eax
c000bd42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd45:	85 c0                	test   eax,eax
c000bd47:	0f 85 bf 03 00 00    	jne    c000c10c <sinc_multichan_vari_process+0x6ba>
c000bd4d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd50:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd53:	01 c8                	add    eax,ecx
c000bd55:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd58:	99                   	cdq    
c000bd59:	f7 f9                	idiv   ecx
c000bd5b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd5f:	7c c4                	jl     c000bd25 <sinc_multichan_vari_process+0x2d3>
c000bd61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd69:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd6c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd77:	89 06                	mov    DWORD PTR [esi],eax
c000bd79:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd7c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd7f:	99                   	cdq    
c000bd80:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd83:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd86:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd89:	99                   	cdq    
c000bd8a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd8d:	31 d2                	xor    edx,edx
c000bd8f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd92:	e9 75 03 00 00       	jmp    c000c10c <sinc_multichan_vari_process+0x6ba>
c000bd97:	83 ec 0c             	sub    esp,0xc
c000bd9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd9d:	e8 59 ce 01 00       	call   c0028bfb <__floatsidf>
c000bda2:	83 c4 10             	add    esp,0x10
c000bda5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bda9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	e8 59 c1 01 00       	call   c0027f1b <__adddf3>
c000bdc2:	83 c4 10             	add    esp,0x10
c000bdc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddd:	e8 39 c1 01 00       	call   c0027f1b <__adddf3>
c000bde2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bde5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bde9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bded:	e8 09 ce 01 00       	call   c0028bfb <__floatsidf>
c000bdf2:	83 c4 10             	add    esp,0x10
c000bdf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdfd:	52                   	push   edx
c000bdfe:	50                   	push   eax
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be07:	e8 59 d0 01 00       	call   c0028e65 <__gedf2>
c000be0c:	83 c4 10             	add    esp,0x10
c000be0f:	85 c0                	test   eax,eax
c000be11:	0f 89 4a ff ff ff    	jns    c000bd61 <sinc_multichan_vari_process+0x30f>
c000be17:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be1b:	0f 8e ed 00 00 00    	jle    c000bf0e <sinc_multichan_vari_process+0x4bc>
c000be21:	83 ec 10             	sub    esp,0x10
c000be24:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be27:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be2a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be2d:	ff 36                	push   DWORD PTR [esi]
c000be2f:	e8 38 c7 01 00       	call   c002856c <__subdf3>
c000be34:	83 c4 18             	add    esp,0x18
c000be37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3f:	52                   	push   edx
c000be40:	50                   	push   eax
c000be41:	e8 ba d1 01 00       	call   c0029000 <fabs>
c000be46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be4a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be4e:	83 c4 10             	add    esp,0x10
c000be51:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be56:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be63:	e8 e1 cf 01 00       	call   c0028e49 <__gtdf2>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	85 c0                	test   eax,eax
c000be6d:	0f 8e 9b 00 00 00    	jle    c000bf0e <sinc_multichan_vari_process+0x4bc>
c000be73:	8b 06                	mov    eax,DWORD PTR [esi]
c000be75:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be7c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be80:	52                   	push   edx
c000be81:	50                   	push   eax
c000be82:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be85:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be88:	e8 df c6 01 00       	call   c002856c <__subdf3>
c000be8d:	59                   	pop    ecx
c000be8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be92:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be96:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be99:	e8 5d cd 01 00       	call   c0028bfb <__floatsidf>
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bea5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea9:	52                   	push   edx
c000beaa:	50                   	push   eax
c000beab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beb3:	e8 e0 c6 01 00       	call   c0028598 <__muldf3>
c000beb8:	5d                   	pop    ebp
c000beb9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bebd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bec1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bec4:	e8 32 cd 01 00       	call   c0028bfb <__floatsidf>
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bed0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bed4:	52                   	push   edx
c000bed5:	50                   	push   eax
c000bed6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	e8 99 c9 01 00       	call   c002887c <__divdf3>
c000bee3:	83 c4 10             	add    esp,0x10
c000bee6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000beea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befe:	e8 18 c0 01 00       	call   c0027f1b <__adddf3>
c000bf03:	83 c4 10             	add    esp,0x10
c000bf06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf0a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf0e:	83 ec 0c             	sub    esp,0xc
c000bf11:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf14:	e8 e2 cc 01 00       	call   c0028bfb <__floatsidf>
c000bf19:	83 c4 10             	add    esp,0x10
c000bf1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf34:	e8 2e cf 01 00       	call   c0028e67 <__ltdf2>
c000bf39:	83 c4 10             	add    esp,0x10
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf46:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf4a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf4e:	78 10                	js     c000bf60 <sinc_multichan_vari_process+0x50e>
c000bf50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf5c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf70:	e8 23 c6 01 00       	call   c0028598 <__muldf3>
c000bf75:	59                   	pop    ecx
c000bf76:	5d                   	pop    ebp
c000bf77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf87:	e8 25 f9 ff ff       	call   c000b8b1 <double_to_fp>
c000bf8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf90:	89 c5                	mov    ebp,eax
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9e:	e8 f5 c5 01 00       	call   c0028598 <__muldf3>
c000bfa3:	83 c4 18             	add    esp,0x18
c000bfa6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfae:	52                   	push   edx
c000bfaf:	50                   	push   eax
c000bfb0:	e8 fc f8 ff ff       	call   c000b8b1 <double_to_fp>
c000bfb5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfb8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfbc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfbf:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfc2:	50                   	push   eax
c000bfc3:	50                   	push   eax
c000bfc4:	50                   	push   eax
c000bfc5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfc8:	e8 2e cc 01 00       	call   c0028bfb <__floatsidf>
c000bfcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfd1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfd9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfdd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe5:	e8 92 c8 01 00       	call   c002887c <__divdf3>
c000bfea:	83 c4 1c             	add    esp,0x1c
c000bfed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bff1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bff5:	52                   	push   edx
c000bff6:	89 ea                	mov    edx,ebp
c000bff8:	50                   	push   eax
c000bff9:	89 d8                	mov    eax,ebx
c000bffb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bffe:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c002:	e8 69 ed ff ff       	call   c000ad70 <calc_output_multi>
c000c007:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c00a:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c00d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c011:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c015:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c019:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c01d:	e8 5a c8 01 00       	call   c002887c <__divdf3>
c000c022:	83 c4 10             	add    esp,0x10
c000c025:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c029:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c039:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c03d:	e8 d9 be 01 00       	call   c0027f1b <__adddf3>
c000c042:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c046:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c04a:	83 c4 28             	add    esp,0x28
c000c04d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c051:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c055:	e8 c6 cf 01 00       	call   c0029020 <lrint>
c000c05a:	83 ec 0c             	sub    esp,0xc
c000c05d:	50                   	push   eax
c000c05e:	e8 98 cb 01 00       	call   c0028bfb <__floatsidf>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	52                   	push   edx
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c074:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c078:	e8 ef c4 01 00       	call   c002856c <__subdf3>
c000c07d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	83 c4 20             	add    esp,0x20
c000c088:	6a 00                	push   0x0
c000c08a:	6a 00                	push   0x0
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 ce cd 01 00       	call   c0028e67 <__ltdf2>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	85 c0                	test   eax,eax
c000c09e:	79 20                	jns    c000c0c0 <sinc_multichan_vari_process+0x66e>
c000c0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b0:	e8 66 be 01 00       	call   c0027f1b <__adddf3>
c000c0b5:	83 c4 10             	add    esp,0x10
c000c0b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0c0:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0c3:	83 ec 10             	sub    esp,0x10
c000c0c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0dd:	e8 8a c4 01 00       	call   c002856c <__subdf3>
c000c0e2:	83 c4 18             	add    esp,0x18
c000c0e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ed:	52                   	push   edx
c000c0ee:	50                   	push   eax
c000c0ef:	e8 2c cf 01 00       	call   c0029020 <lrint>
c000c0f4:	0f af e8             	imul   ebp,eax
c000c0f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0fb:	83 c4 10             	add    esp,0x10
c000c0fe:	01 e8                	add    eax,ebp
c000c100:	99                   	cdq    
c000c101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c107:	e9 fd fb ff ff       	jmp    c000bd09 <sinc_multichan_vari_process+0x2b7>
c000c10c:	83 c4 4c             	add    esp,0x4c
c000c10f:	89 d0                	mov    eax,edx
c000c111:	5b                   	pop    ebx
c000c112:	5e                   	pop    esi
c000c113:	5f                   	pop    edi
c000c114:	5d                   	pop    ebp
c000c115:	c3                   	ret    

c000c116 <sinc_hex_vari_process>:
c000c116:	55                   	push   ebp
c000c117:	ba 05 00 00 00       	mov    edx,0x5
c000c11c:	57                   	push   edi
c000c11d:	56                   	push   esi
c000c11e:	53                   	push   ebx
c000c11f:	83 ec 4c             	sub    esp,0x4c
c000c122:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c126:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c12a:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c12d:	85 db                	test   ebx,ebx
c000c12f:	0f 84 9c 06 00 00    	je     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c135:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c138:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c13b:	0f af c7             	imul   eax,edi
c000c13e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c141:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c144:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c14b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c152:	0f af c7             	imul   eax,edi
c000c155:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c158:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c15b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c15e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c162:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c166:	68 00 00 70 3f       	push   0x3f700000
c000c16b:	6a 00                	push   0x0
c000c16d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c175:	e8 ed cc 01 00       	call   c0028e67 <__ltdf2>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	ba 16 00 00 00       	mov    edx,0x16
c000c182:	85 c0                	test   eax,eax
c000c184:	0f 88 47 06 00 00    	js     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c18a:	68 00 00 70 40       	push   0x40700000
c000c18f:	6a 00                	push   0x0
c000c191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c199:	e8 ab cc 01 00       	call   c0028e49 <__gtdf2>
c000c19e:	83 c4 10             	add    esp,0x10
c000c1a1:	ba 16 00 00 00       	mov    edx,0x16
c000c1a6:	85 c0                	test   eax,eax
c000c1a8:	0f 8f 23 06 00 00    	jg     c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c1ae:	83 ec 0c             	sub    esp,0xc
c000c1b1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1b4:	e8 42 ca 01 00       	call   c0028bfb <__floatsidf>
c000c1b9:	83 c4 10             	add    esp,0x10
c000c1bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1c4:	68 00 00 00 40       	push   0x40000000
c000c1c9:	6a 00                	push   0x0
c000c1cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1d3:	e8 43 bd 01 00       	call   c0027f1b <__adddf3>
c000c1d8:	59                   	pop    ecx
c000c1d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1dd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1e1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e4:	e8 12 ca 01 00       	call   c0028bfb <__floatsidf>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f4:	52                   	push   edx
c000c1f5:	50                   	push   eax
c000c1f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fe:	e8 79 c6 01 00       	call   c002887c <__divdf3>
c000c203:	83 c4 10             	add    esp,0x10
c000c206:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c20e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c211:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c214:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c218:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22c:	e8 18 cc 01 00       	call   c0028e49 <__gtdf2>
c000c231:	83 c4 10             	add    esp,0x10
c000c234:	85 c0                	test   eax,eax
c000c236:	7e 2d                	jle    c000c265 <sinc_hex_vari_process+0x14f>
c000c238:	68 00 00 f0 3f       	push   0x3ff00000
c000c23d:	6a 00                	push   0x0
c000c23f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c247:	e8 1b cc 01 00       	call   c0028e67 <__ltdf2>
c000c24c:	83 c4 10             	add    esp,0x10
c000c24f:	85 c0                	test   eax,eax
c000c251:	79 4d                	jns    c000c2a0 <sinc_hex_vari_process+0x18a>
c000c253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c257:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c25b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c263:	eb 1b                	jmp    c000c280 <sinc_hex_vari_process+0x16a>
c000c265:	68 00 00 f0 3f       	push   0x3ff00000
c000c26a:	6a 00                	push   0x0
c000c26c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c274:	e8 ee cb 01 00       	call   c0028e67 <__ltdf2>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	85 c0                	test   eax,eax
c000c27e:	79 20                	jns    c000c2a0 <sinc_hex_vari_process+0x18a>
c000c280:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c284:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c288:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c290:	e8 e7 c5 01 00       	call   c002887c <__divdf3>
c000c295:	83 c4 10             	add    esp,0x10
c000c298:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c29c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2a0:	50                   	push   eax
c000c2a1:	50                   	push   eax
c000c2a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	e8 71 cd 01 00       	call   c0029020 <lrint>
c000c2af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2b2:	40                   	inc    eax
c000c2b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b7:	0f af c7             	imul   eax,edi
c000c2ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c5:	58                   	pop    eax
c000c2c6:	5a                   	pop    edx
c000c2c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cf:	e8 4c cd 01 00       	call   c0029020 <lrint>
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	50                   	push   eax
c000c2d8:	e8 1e c9 01 00       	call   c0028bfb <__floatsidf>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e8:	52                   	push   edx
c000c2e9:	50                   	push   eax
c000c2ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f2:	e8 75 c2 01 00       	call   c002856c <__subdf3>
c000c2f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ff:	83 c4 20             	add    esp,0x20
c000c302:	6a 00                	push   0x0
c000c304:	6a 00                	push   0x0
c000c306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30e:	e8 54 cb 01 00       	call   c0028e67 <__ltdf2>
c000c313:	83 c4 10             	add    esp,0x10
c000c316:	85 c0                	test   eax,eax
c000c318:	79 1f                	jns    c000c339 <sinc_hex_vari_process+0x223>
c000c31a:	68 00 00 f0 3f       	push   0x3ff00000
c000c31f:	6a 00                	push   0x0
c000c321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c325:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c329:	e8 ed bb 01 00       	call   c0027f1b <__adddf3>
c000c32e:	83 c4 10             	add    esp,0x10
c000c331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c335:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c339:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c33c:	83 ec 10             	sub    esp,0x10
c000c33f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c343:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c352:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c356:	e8 11 c2 01 00       	call   c002856c <__subdf3>
c000c35b:	83 c4 18             	add    esp,0x18
c000c35e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c362:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c366:	52                   	push   edx
c000c367:	50                   	push   eax
c000c368:	e8 b3 cc 01 00       	call   c0029020 <lrint>
c000c36d:	0f af f8             	imul   edi,eax
c000c370:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c374:	01 f8                	add    eax,edi
c000c376:	99                   	cdq    
c000c377:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c37a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c37d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c381:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c385:	68 00 00 f0 3f       	push   0x3ff00000
c000c38a:	6a 00                	push   0x0
c000c38c:	e8 eb c4 01 00       	call   c002887c <__divdf3>
c000c391:	83 c4 10             	add    esp,0x10
c000c394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c39c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3a1:	68 23 42 92 0c       	push   0xc924223
c000c3a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ae:	e8 68 bb 01 00       	call   c0027f1b <__adddf3>
c000c3b3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3b7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3bb:	83 c4 20             	add    esp,0x20
c000c3be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3c6:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3d1:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3d4:	7d 50                	jge    c000c426 <sinc_hex_vari_process+0x310>
c000c3d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3dc:	01 c8                	add    eax,ecx
c000c3de:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3e1:	99                   	cdq    
c000c3e2:	f7 f9                	idiv   ecx
c000c3e4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3e8:	7d 0c                	jge    c000c3f6 <sinc_hex_vari_process+0x2e0>
c000c3ea:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3ed:	85 ff                	test   edi,edi
c000c3ef:	79 6c                	jns    c000c45d <sinc_hex_vari_process+0x347>
c000c3f1:	e9 e7 00 00 00       	jmp    c000c4dd <sinc_hex_vari_process+0x3c7>
c000c3f6:	50                   	push   eax
c000c3f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fb:	56                   	push   esi
c000c3fc:	53                   	push   ebx
c000c3fd:	e8 d6 f4 ff ff       	call   c000b8d8 <prepare_data>
c000c402:	83 c4 10             	add    esp,0x10
c000c405:	89 c2                	mov    edx,eax
c000c407:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c40a:	85 c0                	test   eax,eax
c000c40c:	0f 85 bf 03 00 00    	jne    c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c412:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c415:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c418:	01 c8                	add    eax,ecx
c000c41a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c41d:	99                   	cdq    
c000c41e:	f7 f9                	idiv   ecx
c000c420:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c424:	7c c4                	jl     c000c3ea <sinc_hex_vari_process+0x2d4>
c000c426:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c42a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c42e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c431:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c438:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c43c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c43f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c442:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c445:	99                   	cdq    
c000c446:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c449:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c44c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c44f:	99                   	cdq    
c000c450:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c453:	31 d2                	xor    edx,edx
c000c455:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c458:	e9 74 03 00 00       	jmp    c000c7d1 <sinc_hex_vari_process+0x6bb>
c000c45d:	83 ec 0c             	sub    esp,0xc
c000c460:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c463:	e8 93 c7 01 00       	call   c0028bfb <__floatsidf>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c46f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c473:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c477:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c47b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	e8 93 ba 01 00       	call   c0027f1b <__adddf3>
c000c488:	83 c4 10             	add    esp,0x10
c000c48b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c493:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c497:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a3:	e8 73 ba 01 00       	call   c0027f1b <__adddf3>
c000c4a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b3:	e8 43 c7 01 00       	call   c0028bfb <__floatsidf>
c000c4b8:	83 c4 10             	add    esp,0x10
c000c4bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c3:	52                   	push   edx
c000c4c4:	50                   	push   eax
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4cd:	e8 93 c9 01 00       	call   c0028e65 <__gedf2>
c000c4d2:	83 c4 10             	add    esp,0x10
c000c4d5:	85 c0                	test   eax,eax
c000c4d7:	0f 89 49 ff ff ff    	jns    c000c426 <sinc_hex_vari_process+0x310>
c000c4dd:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4e1:	0f 8e ef 00 00 00    	jle    c000c5d6 <sinc_hex_vari_process+0x4c0>
c000c4e7:	83 ec 10             	sub    esp,0x10
c000c4ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4f0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4f3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4f6:	e8 71 c0 01 00       	call   c002856c <__subdf3>
c000c4fb:	83 c4 18             	add    esp,0x18
c000c4fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c502:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c506:	52                   	push   edx
c000c507:	50                   	push   eax
c000c508:	e8 f3 ca 01 00       	call   c0029000 <fabs>
c000c50d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c511:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c515:	83 c4 10             	add    esp,0x10
c000c518:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c51d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c522:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c526:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c52a:	e8 1a c9 01 00       	call   c0028e49 <__gtdf2>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	85 c0                	test   eax,eax
c000c534:	0f 8e 9c 00 00 00    	jle    c000c5d6 <sinc_hex_vari_process+0x4c0>
c000c53a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c53d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c544:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c548:	52                   	push   edx
c000c549:	50                   	push   eax
c000c54a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c54d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c550:	e8 17 c0 01 00       	call   c002856c <__subdf3>
c000c555:	59                   	pop    ecx
c000c556:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c55a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c55e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c561:	e8 95 c6 01 00       	call   c0028bfb <__floatsidf>
c000c566:	83 c4 10             	add    esp,0x10
c000c569:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c56d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c571:	52                   	push   edx
c000c572:	50                   	push   eax
c000c573:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c577:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c57b:	e8 18 c0 01 00       	call   c0028598 <__muldf3>
c000c580:	5f                   	pop    edi
c000c581:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c585:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c589:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c58c:	e8 6a c6 01 00       	call   c0028bfb <__floatsidf>
c000c591:	83 c4 10             	add    esp,0x10
c000c594:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c598:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c59c:	52                   	push   edx
c000c59d:	50                   	push   eax
c000c59e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	e8 d1 c2 01 00       	call   c002887c <__divdf3>
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c6:	e8 50 b9 01 00       	call   c0027f1b <__adddf3>
c000c5cb:	83 c4 10             	add    esp,0x10
c000c5ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5d6:	83 ec 0c             	sub    esp,0xc
c000c5d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5dc:	e8 1a c6 01 00       	call   c0028bfb <__floatsidf>
c000c5e1:	83 c4 10             	add    esp,0x10
c000c5e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fc:	e8 66 c8 01 00       	call   c0028e67 <__ltdf2>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	85 c0                	test   eax,eax
c000c606:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c60a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c60e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c612:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c616:	78 10                	js     c000c628 <sinc_hex_vari_process+0x512>
c000c618:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c61c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c620:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c624:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c628:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c630:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c634:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c638:	e8 5b bf 01 00       	call   c0028598 <__muldf3>
c000c63d:	59                   	pop    ecx
c000c63e:	5f                   	pop    edi
c000c63f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c643:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64f:	e8 5d f2 ff ff       	call   c000b8b1 <double_to_fp>
c000c654:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c658:	89 c7                	mov    edi,eax
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c666:	e8 2d bf 01 00       	call   c0028598 <__muldf3>
c000c66b:	83 c4 18             	add    esp,0x18
c000c66e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c676:	52                   	push   edx
c000c677:	50                   	push   eax
c000c678:	e8 34 f2 ff ff       	call   c000b8b1 <double_to_fp>
c000c67d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c680:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c684:	83 c4 0c             	add    esp,0xc
c000c687:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c68a:	8d 04 90             	lea    eax,[eax+edx*4]
c000c68d:	50                   	push   eax
c000c68e:	50                   	push   eax
c000c68f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c692:	e8 64 c5 01 00       	call   c0028bfb <__floatsidf>
c000c697:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c69b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c69f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6af:	e8 c8 c1 01 00       	call   c002887c <__divdf3>
c000c6b4:	83 c4 18             	add    esp,0x18
c000c6b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6bb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6bf:	52                   	push   edx
c000c6c0:	89 fa                	mov    edx,edi
c000c6c2:	50                   	push   eax
c000c6c3:	89 d8                	mov    eax,ebx
c000c6c5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6c9:	e8 50 de ff ff       	call   c000a51e <calc_output_hex>
c000c6ce:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6e2:	e8 95 c1 01 00       	call   c002887c <__divdf3>
c000c6e7:	83 c4 10             	add    esp,0x10
c000c6ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c702:	e8 14 b8 01 00       	call   c0027f1b <__adddf3>
c000c707:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c70b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c70f:	83 c4 18             	add    esp,0x18
c000c712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c71a:	e8 01 c9 01 00       	call   c0029020 <lrint>
c000c71f:	83 ec 0c             	sub    esp,0xc
c000c722:	50                   	push   eax
c000c723:	e8 d3 c4 01 00       	call   c0028bfb <__floatsidf>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	52                   	push   edx
c000c734:	50                   	push   eax
c000c735:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c739:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c73d:	e8 2a be 01 00       	call   c002856c <__subdf3>
c000c742:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	83 c4 20             	add    esp,0x20
c000c74d:	6a 00                	push   0x0
c000c74f:	6a 00                	push   0x0
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 09 c7 01 00       	call   c0028e67 <__ltdf2>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	85 c0                	test   eax,eax
c000c763:	79 20                	jns    c000c785 <sinc_hex_vari_process+0x66f>
c000c765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c769:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c775:	e8 a1 b7 01 00       	call   c0027f1b <__adddf3>
c000c77a:	83 c4 10             	add    esp,0x10
c000c77d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c781:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c785:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c788:	83 ec 10             	sub    esp,0x10
c000c78b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c78f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c79a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c79e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7a2:	e8 c5 bd 01 00       	call   c002856c <__subdf3>
c000c7a7:	83 c4 18             	add    esp,0x18
c000c7aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b2:	52                   	push   edx
c000c7b3:	50                   	push   eax
c000c7b4:	e8 67 c8 01 00       	call   c0029020 <lrint>
c000c7b9:	0f af f8             	imul   edi,eax
c000c7bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7c0:	83 c4 10             	add    esp,0x10
c000c7c3:	01 f8                	add    eax,edi
c000c7c5:	99                   	cdq    
c000c7c6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7c9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7cc:	e9 fd fb ff ff       	jmp    c000c3ce <sinc_hex_vari_process+0x2b8>
c000c7d1:	83 c4 4c             	add    esp,0x4c
c000c7d4:	89 d0                	mov    eax,edx
c000c7d6:	5b                   	pop    ebx
c000c7d7:	5e                   	pop    esi
c000c7d8:	5f                   	pop    edi
c000c7d9:	5d                   	pop    ebp
c000c7da:	c3                   	ret    

c000c7db <sinc_quad_vari_process>:
c000c7db:	55                   	push   ebp
c000c7dc:	ba 05 00 00 00       	mov    edx,0x5
c000c7e1:	57                   	push   edi
c000c7e2:	56                   	push   esi
c000c7e3:	53                   	push   ebx
c000c7e4:	83 ec 4c             	sub    esp,0x4c
c000c7e7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7eb:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7ef:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7f2:	85 db                	test   ebx,ebx
c000c7f4:	0f 84 9c 06 00 00    	je     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c7fa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c800:	0f af c7             	imul   eax,edi
c000c803:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c806:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c809:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c810:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c817:	0f af c7             	imul   eax,edi
c000c81a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c81d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c820:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c823:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c82b:	68 00 00 70 3f       	push   0x3f700000
c000c830:	6a 00                	push   0x0
c000c832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83a:	e8 28 c6 01 00       	call   c0028e67 <__ltdf2>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	ba 16 00 00 00       	mov    edx,0x16
c000c847:	85 c0                	test   eax,eax
c000c849:	0f 88 47 06 00 00    	js     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c84f:	68 00 00 70 40       	push   0x40700000
c000c854:	6a 00                	push   0x0
c000c856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85e:	e8 e6 c5 01 00       	call   c0028e49 <__gtdf2>
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	ba 16 00 00 00       	mov    edx,0x16
c000c86b:	85 c0                	test   eax,eax
c000c86d:	0f 8f 23 06 00 00    	jg     c000ce96 <sinc_quad_vari_process+0x6bb>
c000c873:	83 ec 0c             	sub    esp,0xc
c000c876:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c879:	e8 7d c3 01 00       	call   c0028bfb <__floatsidf>
c000c87e:	83 c4 10             	add    esp,0x10
c000c881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c889:	68 00 00 00 40       	push   0x40000000
c000c88e:	6a 00                	push   0x0
c000c890:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c894:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c898:	e8 7e b6 01 00       	call   c0027f1b <__adddf3>
c000c89d:	59                   	pop    ecx
c000c89e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8a9:	e8 4d c3 01 00       	call   c0028bfb <__floatsidf>
c000c8ae:	83 c4 10             	add    esp,0x10
c000c8b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b9:	52                   	push   edx
c000c8ba:	50                   	push   eax
c000c8bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c3:	e8 b4 bf 01 00       	call   c002887c <__divdf3>
c000c8c8:	83 c4 10             	add    esp,0x10
c000c8cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8d6:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f1:	e8 53 c5 01 00       	call   c0028e49 <__gtdf2>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	85 c0                	test   eax,eax
c000c8fb:	7e 2d                	jle    c000c92a <sinc_quad_vari_process+0x14f>
c000c8fd:	68 00 00 f0 3f       	push   0x3ff00000
c000c902:	6a 00                	push   0x0
c000c904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90c:	e8 56 c5 01 00       	call   c0028e67 <__ltdf2>
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	85 c0                	test   eax,eax
c000c916:	79 4d                	jns    c000c965 <sinc_quad_vari_process+0x18a>
c000c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c928:	eb 1b                	jmp    c000c945 <sinc_quad_vari_process+0x16a>
c000c92a:	68 00 00 f0 3f       	push   0x3ff00000
c000c92f:	6a 00                	push   0x0
c000c931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c935:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c939:	e8 29 c5 01 00       	call   c0028e67 <__ltdf2>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	85 c0                	test   eax,eax
c000c943:	79 20                	jns    c000c965 <sinc_quad_vari_process+0x18a>
c000c945:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c94d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c951:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c955:	e8 22 bf 01 00       	call   c002887c <__divdf3>
c000c95a:	83 c4 10             	add    esp,0x10
c000c95d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c961:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c965:	50                   	push   eax
c000c966:	50                   	push   eax
c000c967:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	e8 ac c6 01 00       	call   c0029020 <lrint>
c000c974:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c977:	40                   	inc    eax
c000c978:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c97c:	0f af c7             	imul   eax,edi
c000c97f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98a:	58                   	pop    eax
c000c98b:	5a                   	pop    edx
c000c98c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c990:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c994:	e8 87 c6 01 00       	call   c0029020 <lrint>
c000c999:	83 ec 0c             	sub    esp,0xc
c000c99c:	50                   	push   eax
c000c99d:	e8 59 c2 01 00       	call   c0028bfb <__floatsidf>
c000c9a2:	83 c4 10             	add    esp,0x10
c000c9a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ad:	52                   	push   edx
c000c9ae:	50                   	push   eax
c000c9af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b7:	e8 b0 bb 01 00       	call   c002856c <__subdf3>
c000c9bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c4:	83 c4 20             	add    esp,0x20
c000c9c7:	6a 00                	push   0x0
c000c9c9:	6a 00                	push   0x0
c000c9cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d3:	e8 8f c4 01 00       	call   c0028e67 <__ltdf2>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	85 c0                	test   eax,eax
c000c9dd:	79 1f                	jns    c000c9fe <sinc_quad_vari_process+0x223>
c000c9df:	68 00 00 f0 3f       	push   0x3ff00000
c000c9e4:	6a 00                	push   0x0
c000c9e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ee:	e8 28 b5 01 00       	call   c0027f1b <__adddf3>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9fe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca01:	83 ec 10             	sub    esp,0x10
c000ca04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca08:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca1b:	e8 4c bb 01 00       	call   c002856c <__subdf3>
c000ca20:	83 c4 18             	add    esp,0x18
c000ca23:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca2b:	52                   	push   edx
c000ca2c:	50                   	push   eax
c000ca2d:	e8 ee c5 01 00       	call   c0029020 <lrint>
c000ca32:	0f af f8             	imul   edi,eax
c000ca35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca39:	01 f8                	add    eax,edi
c000ca3b:	99                   	cdq    
c000ca3c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca3f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca4a:	68 00 00 f0 3f       	push   0x3ff00000
c000ca4f:	6a 00                	push   0x0
c000ca51:	e8 26 be 01 00       	call   c002887c <__divdf3>
c000ca56:	83 c4 10             	add    esp,0x10
c000ca59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca61:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca66:	68 23 42 92 0c       	push   0xc924223
c000ca6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca73:	e8 a3 b4 01 00       	call   c0027f1b <__adddf3>
c000ca78:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca7c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca80:	83 c4 20             	add    esp,0x20
c000ca83:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca8b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca96:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca99:	7d 50                	jge    c000caeb <sinc_quad_vari_process+0x310>
c000ca9b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca9e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000caa1:	01 c8                	add    eax,ecx
c000caa3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caa6:	99                   	cdq    
c000caa7:	f7 f9                	idiv   ecx
c000caa9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caad:	7d 0c                	jge    c000cabb <sinc_quad_vari_process+0x2e0>
c000caaf:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cab2:	85 ff                	test   edi,edi
c000cab4:	79 6c                	jns    c000cb22 <sinc_quad_vari_process+0x347>
c000cab6:	e9 e7 00 00 00       	jmp    c000cba2 <sinc_quad_vari_process+0x3c7>
c000cabb:	50                   	push   eax
c000cabc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cac0:	56                   	push   esi
c000cac1:	53                   	push   ebx
c000cac2:	e8 11 ee ff ff       	call   c000b8d8 <prepare_data>
c000cac7:	83 c4 10             	add    esp,0x10
c000caca:	89 c2                	mov    edx,eax
c000cacc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cacf:	85 c0                	test   eax,eax
c000cad1:	0f 85 bf 03 00 00    	jne    c000ce96 <sinc_quad_vari_process+0x6bb>
c000cad7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cada:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cadd:	01 c8                	add    eax,ecx
c000cadf:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae2:	99                   	cdq    
c000cae3:	f7 f9                	idiv   ecx
c000cae5:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cae9:	7c c4                	jl     c000caaf <sinc_quad_vari_process+0x2d4>
c000caeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000caf6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000caf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb01:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb04:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb07:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb0a:	99                   	cdq    
c000cb0b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb0e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb11:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb14:	99                   	cdq    
c000cb15:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb18:	31 d2                	xor    edx,edx
c000cb1a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb1d:	e9 74 03 00 00       	jmp    c000ce96 <sinc_quad_vari_process+0x6bb>
c000cb22:	83 ec 0c             	sub    esp,0xc
c000cb25:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb28:	e8 ce c0 01 00       	call   c0028bfb <__floatsidf>
c000cb2d:	83 c4 10             	add    esp,0x10
c000cb30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	e8 ce b3 01 00       	call   c0027f1b <__adddf3>
c000cb4d:	83 c4 10             	add    esp,0x10
c000cb50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb54:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb68:	e8 ae b3 01 00       	call   c0027f1b <__adddf3>
c000cb6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb70:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb78:	e8 7e c0 01 00       	call   c0028bfb <__floatsidf>
c000cb7d:	83 c4 10             	add    esp,0x10
c000cb80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb84:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb88:	52                   	push   edx
c000cb89:	50                   	push   eax
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb92:	e8 ce c2 01 00       	call   c0028e65 <__gedf2>
c000cb97:	83 c4 10             	add    esp,0x10
c000cb9a:	85 c0                	test   eax,eax
c000cb9c:	0f 89 49 ff ff ff    	jns    c000caeb <sinc_quad_vari_process+0x310>
c000cba2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cba6:	0f 8e ef 00 00 00    	jle    c000cc9b <sinc_quad_vari_process+0x4c0>
c000cbac:	83 ec 10             	sub    esp,0x10
c000cbaf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbb2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbb5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbbb:	e8 ac b9 01 00       	call   c002856c <__subdf3>
c000cbc0:	83 c4 18             	add    esp,0x18
c000cbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcb:	52                   	push   edx
c000cbcc:	50                   	push   eax
c000cbcd:	e8 2e c4 01 00       	call   c0029000 <fabs>
c000cbd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbda:	83 c4 10             	add    esp,0x10
c000cbdd:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbe2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbef:	e8 55 c2 01 00       	call   c0028e49 <__gtdf2>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	0f 8e 9c 00 00 00    	jle    c000cc9b <sinc_quad_vari_process+0x4c0>
c000cbff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc02:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc0d:	52                   	push   edx
c000cc0e:	50                   	push   eax
c000cc0f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc12:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc15:	e8 52 b9 01 00       	call   c002856c <__subdf3>
c000cc1a:	59                   	pop    ecx
c000cc1b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc1f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc23:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc26:	e8 d0 bf 01 00       	call   c0028bfb <__floatsidf>
c000cc2b:	83 c4 10             	add    esp,0x10
c000cc2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc36:	52                   	push   edx
c000cc37:	50                   	push   eax
c000cc38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc40:	e8 53 b9 01 00       	call   c0028598 <__muldf3>
c000cc45:	5f                   	pop    edi
c000cc46:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc4a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc4e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc51:	e8 a5 bf 01 00       	call   c0028bfb <__floatsidf>
c000cc56:	83 c4 10             	add    esp,0x10
c000cc59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc61:	52                   	push   edx
c000cc62:	50                   	push   eax
c000cc63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	e8 0c bc 01 00       	call   c002887c <__divdf3>
c000cc70:	83 c4 10             	add    esp,0x10
c000cc73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8b:	e8 8b b2 01 00       	call   c0027f1b <__adddf3>
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc97:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc9b:	83 ec 0c             	sub    esp,0xc
c000cc9e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cca1:	e8 55 bf 01 00       	call   c0028bfb <__floatsidf>
c000cca6:	83 c4 10             	add    esp,0x10
c000cca9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc1:	e8 a1 c1 01 00       	call   c0028e67 <__ltdf2>
c000ccc6:	83 c4 10             	add    esp,0x10
c000ccc9:	85 c0                	test   eax,eax
c000cccb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cccf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccd3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccd7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccdb:	78 10                	js     c000cced <sinc_quad_vari_process+0x512>
c000ccdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cce1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cce5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cce9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cced:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccfd:	e8 96 b8 01 00       	call   c0028598 <__muldf3>
c000cd02:	59                   	pop    ecx
c000cd03:	5f                   	pop    edi
c000cd04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd08:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd14:	e8 98 eb ff ff       	call   c000b8b1 <double_to_fp>
c000cd19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1d:	89 c7                	mov    edi,eax
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd2b:	e8 68 b8 01 00       	call   c0028598 <__muldf3>
c000cd30:	83 c4 18             	add    esp,0x18
c000cd33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd37:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd3b:	52                   	push   edx
c000cd3c:	50                   	push   eax
c000cd3d:	e8 6f eb ff ff       	call   c000b8b1 <double_to_fp>
c000cd42:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd45:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd49:	83 c4 0c             	add    esp,0xc
c000cd4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd4f:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd52:	50                   	push   eax
c000cd53:	50                   	push   eax
c000cd54:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd57:	e8 9f be 01 00       	call   c0028bfb <__floatsidf>
c000cd5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd60:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd74:	e8 03 bb 01 00       	call   c002887c <__divdf3>
c000cd79:	83 c4 18             	add    esp,0x18
c000cd7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd84:	52                   	push   edx
c000cd85:	89 fa                	mov    edx,edi
c000cd87:	50                   	push   eax
c000cd88:	89 d8                	mov    eax,ebx
c000cd8a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd8e:	e8 a5 d1 ff ff       	call   c0009f38 <calc_output_quad>
c000cd93:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda7:	e8 d0 ba 01 00       	call   c002887c <__divdf3>
c000cdac:	83 c4 10             	add    esp,0x10
c000cdaf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdb3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc7:	e8 4f b1 01 00       	call   c0027f1b <__adddf3>
c000cdcc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdd0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdd4:	83 c4 18             	add    esp,0x18
c000cdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cddf:	e8 3c c2 01 00       	call   c0029020 <lrint>
c000cde4:	83 ec 0c             	sub    esp,0xc
c000cde7:	50                   	push   eax
c000cde8:	e8 0e be 01 00       	call   c0028bfb <__floatsidf>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	52                   	push   edx
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce02:	e8 65 b7 01 00       	call   c002856c <__subdf3>
c000ce07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	83 c4 20             	add    esp,0x20
c000ce12:	6a 00                	push   0x0
c000ce14:	6a 00                	push   0x0
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 44 c0 01 00       	call   c0028e67 <__ltdf2>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	85 c0                	test   eax,eax
c000ce28:	79 20                	jns    c000ce4a <sinc_quad_vari_process+0x66f>
c000ce2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3a:	e8 dc b0 01 00       	call   c0027f1b <__adddf3>
c000ce3f:	83 c4 10             	add    esp,0x10
c000ce42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce4a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce4d:	83 ec 10             	sub    esp,0x10
c000ce50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce54:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce67:	e8 00 b7 01 00       	call   c002856c <__subdf3>
c000ce6c:	83 c4 18             	add    esp,0x18
c000ce6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce77:	52                   	push   edx
c000ce78:	50                   	push   eax
c000ce79:	e8 a2 c1 01 00       	call   c0029020 <lrint>
c000ce7e:	0f af f8             	imul   edi,eax
c000ce81:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce85:	83 c4 10             	add    esp,0x10
c000ce88:	01 f8                	add    eax,edi
c000ce8a:	99                   	cdq    
c000ce8b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce8e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce91:	e9 fd fb ff ff       	jmp    c000ca93 <sinc_quad_vari_process+0x2b8>
c000ce96:	83 c4 4c             	add    esp,0x4c
c000ce99:	89 d0                	mov    eax,edx
c000ce9b:	5b                   	pop    ebx
c000ce9c:	5e                   	pop    esi
c000ce9d:	5f                   	pop    edi
c000ce9e:	5d                   	pop    ebp
c000ce9f:	c3                   	ret    

c000cea0 <sinc_stereo_vari_process>:
c000cea0:	55                   	push   ebp
c000cea1:	ba 05 00 00 00       	mov    edx,0x5
c000cea6:	57                   	push   edi
c000cea7:	56                   	push   esi
c000cea8:	53                   	push   ebx
c000cea9:	83 ec 4c             	sub    esp,0x4c
c000ceac:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ceb0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceb4:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ceb7:	85 db                	test   ebx,ebx
c000ceb9:	0f 84 9c 06 00 00    	je     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cebf:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cec2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cec5:	0f af c7             	imul   eax,edi
c000cec8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cecb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cece:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ced5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cedc:	0f af c7             	imul   eax,edi
c000cedf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cee2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cee5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cee8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cef0:	68 00 00 70 3f       	push   0x3f700000
c000cef5:	6a 00                	push   0x0
c000cef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceff:	e8 63 bf 01 00       	call   c0028e67 <__ltdf2>
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	ba 16 00 00 00       	mov    edx,0x16
c000cf0c:	85 c0                	test   eax,eax
c000cf0e:	0f 88 47 06 00 00    	js     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cf14:	68 00 00 70 40       	push   0x40700000
c000cf19:	6a 00                	push   0x0
c000cf1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf23:	e8 21 bf 01 00       	call   c0028e49 <__gtdf2>
c000cf28:	83 c4 10             	add    esp,0x10
c000cf2b:	ba 16 00 00 00       	mov    edx,0x16
c000cf30:	85 c0                	test   eax,eax
c000cf32:	0f 8f 23 06 00 00    	jg     c000d55b <sinc_stereo_vari_process+0x6bb>
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf3e:	e8 b8 bc 01 00       	call   c0028bfb <__floatsidf>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf4e:	68 00 00 00 40       	push   0x40000000
c000cf53:	6a 00                	push   0x0
c000cf55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf5d:	e8 b9 af 01 00       	call   c0027f1b <__adddf3>
c000cf62:	59                   	pop    ecx
c000cf63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf67:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf6b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf6e:	e8 88 bc 01 00       	call   c0028bfb <__floatsidf>
c000cf73:	83 c4 10             	add    esp,0x10
c000cf76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7e:	52                   	push   edx
c000cf7f:	50                   	push   eax
c000cf80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf88:	e8 ef b8 01 00       	call   c002887c <__divdf3>
c000cf8d:	83 c4 10             	add    esp,0x10
c000cf90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf9b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb6:	e8 8e be 01 00       	call   c0028e49 <__gtdf2>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	85 c0                	test   eax,eax
c000cfc0:	7e 2d                	jle    c000cfef <sinc_stereo_vari_process+0x14f>
c000cfc2:	68 00 00 f0 3f       	push   0x3ff00000
c000cfc7:	6a 00                	push   0x0
c000cfc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd1:	e8 91 be 01 00       	call   c0028e67 <__ltdf2>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	85 c0                	test   eax,eax
c000cfdb:	79 4d                	jns    c000d02a <sinc_stereo_vari_process+0x18a>
c000cfdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfed:	eb 1b                	jmp    c000d00a <sinc_stereo_vari_process+0x16a>
c000cfef:	68 00 00 f0 3f       	push   0x3ff00000
c000cff4:	6a 00                	push   0x0
c000cff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffe:	e8 64 be 01 00       	call   c0028e67 <__ltdf2>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	85 c0                	test   eax,eax
c000d008:	79 20                	jns    c000d02a <sinc_stereo_vari_process+0x18a>
c000d00a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d012:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d016:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d01a:	e8 5d b8 01 00       	call   c002887c <__divdf3>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d026:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d02a:	50                   	push   eax
c000d02b:	50                   	push   eax
c000d02c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	e8 e7 bf 01 00       	call   c0029020 <lrint>
c000d039:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d03c:	40                   	inc    eax
c000d03d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d041:	0f af c7             	imul   eax,edi
c000d044:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04f:	58                   	pop    eax
c000d050:	5a                   	pop    edx
c000d051:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d055:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d059:	e8 c2 bf 01 00       	call   c0029020 <lrint>
c000d05e:	83 ec 0c             	sub    esp,0xc
c000d061:	50                   	push   eax
c000d062:	e8 94 bb 01 00       	call   c0028bfb <__floatsidf>
c000d067:	83 c4 10             	add    esp,0x10
c000d06a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d06e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d072:	52                   	push   edx
c000d073:	50                   	push   eax
c000d074:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07c:	e8 eb b4 01 00       	call   c002856c <__subdf3>
c000d081:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d085:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d089:	83 c4 20             	add    esp,0x20
c000d08c:	6a 00                	push   0x0
c000d08e:	6a 00                	push   0x0
c000d090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d094:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d098:	e8 ca bd 01 00       	call   c0028e67 <__ltdf2>
c000d09d:	83 c4 10             	add    esp,0x10
c000d0a0:	85 c0                	test   eax,eax
c000d0a2:	79 1f                	jns    c000d0c3 <sinc_stereo_vari_process+0x223>
c000d0a4:	68 00 00 f0 3f       	push   0x3ff00000
c000d0a9:	6a 00                	push   0x0
c000d0ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b3:	e8 63 ae 01 00       	call   c0027f1b <__adddf3>
c000d0b8:	83 c4 10             	add    esp,0x10
c000d0bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0c3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0c6:	83 ec 10             	sub    esp,0x10
c000d0c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0cd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0e0:	e8 87 b4 01 00       	call   c002856c <__subdf3>
c000d0e5:	83 c4 18             	add    esp,0x18
c000d0e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0f0:	52                   	push   edx
c000d0f1:	50                   	push   eax
c000d0f2:	e8 29 bf 01 00       	call   c0029020 <lrint>
c000d0f7:	0f af f8             	imul   edi,eax
c000d0fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0fe:	01 f8                	add    eax,edi
c000d100:	99                   	cdq    
c000d101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d107:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10f:	68 00 00 f0 3f       	push   0x3ff00000
c000d114:	6a 00                	push   0x0
c000d116:	e8 61 b7 01 00       	call   c002887c <__divdf3>
c000d11b:	83 c4 10             	add    esp,0x10
c000d11e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d122:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d126:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d12b:	68 23 42 92 0c       	push   0xc924223
c000d130:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d134:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d138:	e8 de ad 01 00       	call   c0027f1b <__adddf3>
c000d13d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d141:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d145:	83 c4 20             	add    esp,0x20
c000d148:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d150:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d158:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d15b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d15e:	7d 50                	jge    c000d1b0 <sinc_stereo_vari_process+0x310>
c000d160:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d163:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d166:	01 c8                	add    eax,ecx
c000d168:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d16b:	99                   	cdq    
c000d16c:	f7 f9                	idiv   ecx
c000d16e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d172:	7d 0c                	jge    c000d180 <sinc_stereo_vari_process+0x2e0>
c000d174:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d177:	85 ff                	test   edi,edi
c000d179:	79 6c                	jns    c000d1e7 <sinc_stereo_vari_process+0x347>
c000d17b:	e9 e7 00 00 00       	jmp    c000d267 <sinc_stereo_vari_process+0x3c7>
c000d180:	50                   	push   eax
c000d181:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d185:	56                   	push   esi
c000d186:	53                   	push   ebx
c000d187:	e8 4c e7 ff ff       	call   c000b8d8 <prepare_data>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	89 c2                	mov    edx,eax
c000d191:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d194:	85 c0                	test   eax,eax
c000d196:	0f 85 bf 03 00 00    	jne    c000d55b <sinc_stereo_vari_process+0x6bb>
c000d19c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d19f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a2:	01 c8                	add    eax,ecx
c000d1a4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1a7:	99                   	cdq    
c000d1a8:	f7 f9                	idiv   ecx
c000d1aa:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1ae:	7c c4                	jl     c000d174 <sinc_stereo_vari_process+0x2d4>
c000d1b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1bb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1c9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1cc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1cf:	99                   	cdq    
c000d1d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1d9:	99                   	cdq    
c000d1da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1dd:	31 d2                	xor    edx,edx
c000d1df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1e2:	e9 74 03 00 00       	jmp    c000d55b <sinc_stereo_vari_process+0x6bb>
c000d1e7:	83 ec 0c             	sub    esp,0xc
c000d1ea:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1ed:	e8 09 ba 01 00       	call   c0028bfb <__floatsidf>
c000d1f2:	83 c4 10             	add    esp,0x10
c000d1f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d201:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d205:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	e8 09 ad 01 00       	call   c0027f1b <__adddf3>
c000d212:	83 c4 10             	add    esp,0x10
c000d215:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d219:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d221:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d225:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22d:	e8 e9 ac 01 00       	call   c0027f1b <__adddf3>
c000d232:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d235:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d239:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23d:	e8 b9 b9 01 00       	call   c0028bfb <__floatsidf>
c000d242:	83 c4 10             	add    esp,0x10
c000d245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d249:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d24d:	52                   	push   edx
c000d24e:	50                   	push   eax
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d257:	e8 09 bc 01 00       	call   c0028e65 <__gedf2>
c000d25c:	83 c4 10             	add    esp,0x10
c000d25f:	85 c0                	test   eax,eax
c000d261:	0f 89 49 ff ff ff    	jns    c000d1b0 <sinc_stereo_vari_process+0x310>
c000d267:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d26b:	0f 8e ef 00 00 00    	jle    c000d360 <sinc_stereo_vari_process+0x4c0>
c000d271:	83 ec 10             	sub    esp,0x10
c000d274:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d277:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d27a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d27d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d280:	e8 e7 b2 01 00       	call   c002856c <__subdf3>
c000d285:	83 c4 18             	add    esp,0x18
c000d288:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d290:	52                   	push   edx
c000d291:	50                   	push   eax
c000d292:	e8 69 bd 01 00       	call   c0029000 <fabs>
c000d297:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d29b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d29f:	83 c4 10             	add    esp,0x10
c000d2a2:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2a7:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b4:	e8 90 bb 01 00       	call   c0028e49 <__gtdf2>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	85 c0                	test   eax,eax
c000d2be:	0f 8e 9c 00 00 00    	jle    c000d360 <sinc_stereo_vari_process+0x4c0>
c000d2c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2c7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2d2:	52                   	push   edx
c000d2d3:	50                   	push   eax
c000d2d4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2d7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2da:	e8 8d b2 01 00       	call   c002856c <__subdf3>
c000d2df:	59                   	pop    ecx
c000d2e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2e4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2e8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2eb:	e8 0b b9 01 00       	call   c0028bfb <__floatsidf>
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2fb:	52                   	push   edx
c000d2fc:	50                   	push   eax
c000d2fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d301:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d305:	e8 8e b2 01 00       	call   c0028598 <__muldf3>
c000d30a:	5f                   	pop    edi
c000d30b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d313:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d316:	e8 e0 b8 01 00       	call   c0028bfb <__floatsidf>
c000d31b:	83 c4 10             	add    esp,0x10
c000d31e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d322:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d326:	52                   	push   edx
c000d327:	50                   	push   eax
c000d328:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	e8 47 b5 01 00       	call   c002887c <__divdf3>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d33c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d350:	e8 c6 ab 01 00       	call   c0027f1b <__adddf3>
c000d355:	83 c4 10             	add    esp,0x10
c000d358:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d35c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d360:	83 ec 0c             	sub    esp,0xc
c000d363:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d366:	e8 90 b8 01 00       	call   c0028bfb <__floatsidf>
c000d36b:	83 c4 10             	add    esp,0x10
c000d36e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d372:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d386:	e8 dc ba 01 00       	call   c0028e67 <__ltdf2>
c000d38b:	83 c4 10             	add    esp,0x10
c000d38e:	85 c0                	test   eax,eax
c000d390:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d394:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d398:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d39c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3a0:	78 10                	js     c000d3b2 <sinc_stereo_vari_process+0x512>
c000d3a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3ae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c2:	e8 d1 b1 01 00       	call   c0028598 <__muldf3>
c000d3c7:	59                   	pop    ecx
c000d3c8:	5f                   	pop    edi
c000d3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d9:	e8 d3 e4 ff ff       	call   c000b8b1 <double_to_fp>
c000d3de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e2:	89 c7                	mov    edi,eax
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f0:	e8 a3 b1 01 00       	call   c0028598 <__muldf3>
c000d3f5:	83 c4 18             	add    esp,0x18
c000d3f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d400:	52                   	push   edx
c000d401:	50                   	push   eax
c000d402:	e8 aa e4 ff ff       	call   c000b8b1 <double_to_fp>
c000d407:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d40a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d40e:	83 c4 0c             	add    esp,0xc
c000d411:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d414:	8d 04 90             	lea    eax,[eax+edx*4]
c000d417:	50                   	push   eax
c000d418:	50                   	push   eax
c000d419:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d41c:	e8 da b7 01 00       	call   c0028bfb <__floatsidf>
c000d421:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d425:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d429:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d42d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d431:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d435:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d439:	e8 3e b4 01 00       	call   c002887c <__divdf3>
c000d43e:	83 c4 18             	add    esp,0x18
c000d441:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d445:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d449:	52                   	push   edx
c000d44a:	89 fa                	mov    edx,edi
c000d44c:	50                   	push   eax
c000d44d:	89 d8                	mov    eax,ebx
c000d44f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d453:	e8 02 c7 ff ff       	call   c0009b5a <calc_output_stereo>
c000d458:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d45c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d460:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d464:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d468:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d46c:	e8 0b b4 01 00       	call   c002887c <__divdf3>
c000d471:	83 c4 10             	add    esp,0x10
c000d474:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d478:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d484:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d488:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d48c:	e8 8a aa 01 00       	call   c0027f1b <__adddf3>
c000d491:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d495:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d499:	83 c4 18             	add    esp,0x18
c000d49c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a4:	e8 77 bb 01 00       	call   c0029020 <lrint>
c000d4a9:	83 ec 0c             	sub    esp,0xc
c000d4ac:	50                   	push   eax
c000d4ad:	e8 49 b7 01 00       	call   c0028bfb <__floatsidf>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4bd:	52                   	push   edx
c000d4be:	50                   	push   eax
c000d4bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c7:	e8 a0 b0 01 00       	call   c002856c <__subdf3>
c000d4cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d4:	83 c4 20             	add    esp,0x20
c000d4d7:	6a 00                	push   0x0
c000d4d9:	6a 00                	push   0x0
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 7f b9 01 00       	call   c0028e67 <__ltdf2>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	85 c0                	test   eax,eax
c000d4ed:	79 20                	jns    c000d50f <sinc_stereo_vari_process+0x66f>
c000d4ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ff:	e8 17 aa 01 00       	call   c0027f1b <__adddf3>
c000d504:	83 c4 10             	add    esp,0x10
c000d507:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d50b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d50f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d512:	83 ec 10             	sub    esp,0x10
c000d515:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d519:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d524:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d528:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d52c:	e8 3b b0 01 00       	call   c002856c <__subdf3>
c000d531:	83 c4 18             	add    esp,0x18
c000d534:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d538:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53c:	52                   	push   edx
c000d53d:	50                   	push   eax
c000d53e:	e8 dd ba 01 00       	call   c0029020 <lrint>
c000d543:	0f af f8             	imul   edi,eax
c000d546:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d54a:	83 c4 10             	add    esp,0x10
c000d54d:	01 f8                	add    eax,edi
c000d54f:	99                   	cdq    
c000d550:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d553:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d556:	e9 fd fb ff ff       	jmp    c000d158 <sinc_stereo_vari_process+0x2b8>
c000d55b:	83 c4 4c             	add    esp,0x4c
c000d55e:	89 d0                	mov    eax,edx
c000d560:	5b                   	pop    ebx
c000d561:	5e                   	pop    esi
c000d562:	5f                   	pop    edi
c000d563:	5d                   	pop    ebp
c000d564:	c3                   	ret    

c000d565 <sinc_mono_vari_process>:
c000d565:	55                   	push   ebp
c000d566:	ba 05 00 00 00       	mov    edx,0x5
c000d56b:	57                   	push   edi
c000d56c:	56                   	push   esi
c000d56d:	53                   	push   ebx
c000d56e:	83 ec 4c             	sub    esp,0x4c
c000d571:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d575:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d579:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d57c:	85 db                	test   ebx,ebx
c000d57e:	0f 84 c1 06 00 00    	je     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d584:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d587:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d58a:	0f af c7             	imul   eax,edi
c000d58d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d590:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d593:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d59a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5a1:	0f af c7             	imul   eax,edi
c000d5a4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5b8:	68 00 00 70 3f       	push   0x3f700000
c000d5bd:	6a 00                	push   0x0
c000d5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c7:	e8 9b b8 01 00       	call   c0028e67 <__ltdf2>
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	ba 16 00 00 00       	mov    edx,0x16
c000d5d4:	85 c0                	test   eax,eax
c000d5d6:	0f 88 69 06 00 00    	js     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d5dc:	68 00 00 70 40       	push   0x40700000
c000d5e1:	6a 00                	push   0x0
c000d5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5eb:	e8 59 b8 01 00       	call   c0028e49 <__gtdf2>
c000d5f0:	83 c4 10             	add    esp,0x10
c000d5f3:	ba 16 00 00 00       	mov    edx,0x16
c000d5f8:	85 c0                	test   eax,eax
c000d5fa:	0f 8f 45 06 00 00    	jg     c000dc45 <sinc_mono_vari_process+0x6e0>
c000d600:	83 ec 0c             	sub    esp,0xc
c000d603:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d606:	e8 f0 b5 01 00       	call   c0028bfb <__floatsidf>
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d616:	68 00 00 00 40       	push   0x40000000
c000d61b:	6a 00                	push   0x0
c000d61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d625:	e8 f1 a8 01 00       	call   c0027f1b <__adddf3>
c000d62a:	59                   	pop    ecx
c000d62b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d62f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d633:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d636:	e8 c0 b5 01 00       	call   c0028bfb <__floatsidf>
c000d63b:	83 c4 10             	add    esp,0x10
c000d63e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d642:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d646:	52                   	push   edx
c000d647:	50                   	push   eax
c000d648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d650:	e8 27 b2 01 00       	call   c002887c <__divdf3>
c000d655:	83 c4 10             	add    esp,0x10
c000d658:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d65c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d660:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d663:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d66a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67e:	e8 c6 b7 01 00       	call   c0028e49 <__gtdf2>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	85 c0                	test   eax,eax
c000d688:	7e 2d                	jle    c000d6b7 <sinc_mono_vari_process+0x152>
c000d68a:	68 00 00 f0 3f       	push   0x3ff00000
c000d68f:	6a 00                	push   0x0
c000d691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d699:	e8 c9 b7 01 00       	call   c0028e67 <__ltdf2>
c000d69e:	83 c4 10             	add    esp,0x10
c000d6a1:	85 c0                	test   eax,eax
c000d6a3:	79 4d                	jns    c000d6f2 <sinc_mono_vari_process+0x18d>
c000d6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b5:	eb 1b                	jmp    c000d6d2 <sinc_mono_vari_process+0x16d>
c000d6b7:	68 00 00 f0 3f       	push   0x3ff00000
c000d6bc:	6a 00                	push   0x0
c000d6be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c6:	e8 9c b7 01 00       	call   c0028e67 <__ltdf2>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	85 c0                	test   eax,eax
c000d6d0:	79 20                	jns    c000d6f2 <sinc_mono_vari_process+0x18d>
c000d6d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e2:	e8 95 b1 01 00       	call   c002887c <__divdf3>
c000d6e7:	83 c4 10             	add    esp,0x10
c000d6ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6f2:	50                   	push   eax
c000d6f3:	50                   	push   eax
c000d6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	e8 1f b9 01 00       	call   c0029020 <lrint>
c000d701:	40                   	inc    eax
c000d702:	0f af c7             	imul   eax,edi
c000d705:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d709:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d70d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d713:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d717:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d71b:	58                   	pop    eax
c000d71c:	5a                   	pop    edx
c000d71d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d721:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d725:	e8 f6 b8 01 00       	call   c0029020 <lrint>
c000d72a:	83 ec 0c             	sub    esp,0xc
c000d72d:	50                   	push   eax
c000d72e:	e8 c8 b4 01 00       	call   c0028bfb <__floatsidf>
c000d733:	83 c4 10             	add    esp,0x10
c000d736:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d73a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d73e:	52                   	push   edx
c000d73f:	50                   	push   eax
c000d740:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d744:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d748:	e8 1f ae 01 00       	call   c002856c <__subdf3>
c000d74d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d751:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d755:	83 c4 20             	add    esp,0x20
c000d758:	6a 00                	push   0x0
c000d75a:	6a 00                	push   0x0
c000d75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d764:	e8 fe b6 01 00       	call   c0028e67 <__ltdf2>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	85 c0                	test   eax,eax
c000d76e:	79 1f                	jns    c000d78f <sinc_mono_vari_process+0x22a>
c000d770:	68 00 00 f0 3f       	push   0x3ff00000
c000d775:	6a 00                	push   0x0
c000d777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77f:	e8 97 a7 01 00       	call   c0027f1b <__adddf3>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d78f:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d792:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d795:	83 ec 10             	sub    esp,0x10
c000d798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a8:	e8 bf ad 01 00       	call   c002856c <__subdf3>
c000d7ad:	83 c4 18             	add    esp,0x18
c000d7b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7b8:	52                   	push   edx
c000d7b9:	50                   	push   eax
c000d7ba:	e8 61 b8 01 00       	call   c0029020 <lrint>
c000d7bf:	0f af f8             	imul   edi,eax
c000d7c2:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7c5:	31 ff                	xor    edi,edi
c000d7c7:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7cc:	99                   	cdq    
c000d7cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7db:	55                   	push   ebp
c000d7dc:	57                   	push   edi
c000d7dd:	e8 9a b0 01 00       	call   c002887c <__divdf3>
c000d7e2:	83 c4 10             	add    esp,0x10
c000d7e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7ed:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7f2:	68 23 42 92 0c       	push   0xc924223
c000d7f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	e8 17 a7 01 00       	call   c0027f1b <__adddf3>
c000d804:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d808:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d80c:	83 c4 20             	add    esp,0x20
c000d80f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d813:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d817:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d81a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d81d:	7d 54                	jge    c000d873 <sinc_mono_vari_process+0x30e>
c000d81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d822:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d825:	01 c8                	add    eax,ecx
c000d827:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d82a:	99                   	cdq    
c000d82b:	f7 f9                	idiv   ecx
c000d82d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d831:	7d 0c                	jge    c000d83f <sinc_mono_vari_process+0x2da>
c000d833:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d836:	85 ff                	test   edi,edi
c000d838:	79 73                	jns    c000d8ad <sinc_mono_vari_process+0x348>
c000d83a:	e9 ee 00 00 00       	jmp    c000d92d <sinc_mono_vari_process+0x3c8>
c000d83f:	50                   	push   eax
c000d840:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d844:	56                   	push   esi
c000d845:	53                   	push   ebx
c000d846:	e8 8d e0 ff ff       	call   c000b8d8 <prepare_data>
c000d84b:	89 c2                	mov    edx,eax
c000d84d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d857:	85 d2                	test   edx,edx
c000d859:	0f 85 e6 03 00 00    	jne    c000dc45 <sinc_mono_vari_process+0x6e0>
c000d85f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d862:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d865:	01 c8                	add    eax,ecx
c000d867:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d86a:	99                   	cdq    
c000d86b:	f7 f9                	idiv   ecx
c000d86d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d871:	7c c0                	jl     c000d833 <sinc_mono_vari_process+0x2ce>
c000d873:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d877:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d87b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d87f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d882:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d889:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d88d:	89 01                	mov    DWORD PTR [ecx],eax
c000d88f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d892:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d895:	99                   	cdq    
c000d896:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d899:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d89c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d89f:	99                   	cdq    
c000d8a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8a3:	31 d2                	xor    edx,edx
c000d8a5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8a8:	e9 98 03 00 00       	jmp    c000dc45 <sinc_mono_vari_process+0x6e0>
c000d8ad:	83 ec 0c             	sub    esp,0xc
c000d8b0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8b3:	e8 43 b3 01 00       	call   c0028bfb <__floatsidf>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	e8 43 a6 01 00       	call   c0027f1b <__adddf3>
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f3:	e8 23 a6 01 00       	call   c0027f1b <__adddf3>
c000d8f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8ff:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d903:	e8 f3 b2 01 00       	call   c0028bfb <__floatsidf>
c000d908:	83 c4 10             	add    esp,0x10
c000d90b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d90f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d913:	52                   	push   edx
c000d914:	50                   	push   eax
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91d:	e8 27 b5 01 00       	call   c0028e49 <__gtdf2>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	85 c0                	test   eax,eax
c000d927:	0f 8f 46 ff ff ff    	jg     c000d873 <sinc_mono_vari_process+0x30e>
c000d92d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d931:	0f 8e f5 00 00 00    	jle    c000da2c <sinc_mono_vari_process+0x4c7>
c000d937:	83 ec 10             	sub    esp,0x10
c000d93a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d93d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d940:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d944:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d947:	ff 30                	push   DWORD PTR [eax]
c000d949:	e8 1e ac 01 00       	call   c002856c <__subdf3>
c000d94e:	83 c4 18             	add    esp,0x18
c000d951:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d955:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d959:	52                   	push   edx
c000d95a:	50                   	push   eax
c000d95b:	e8 a0 b6 01 00       	call   c0029000 <fabs>
c000d960:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d964:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d968:	83 c4 10             	add    esp,0x10
c000d96b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d970:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d975:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d979:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d97d:	e8 c7 b4 01 00       	call   c0028e49 <__gtdf2>
c000d982:	83 c4 10             	add    esp,0x10
c000d985:	85 c0                	test   eax,eax
c000d987:	0f 8e 9f 00 00 00    	jle    c000da2c <sinc_mono_vari_process+0x4c7>
c000d98d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d991:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d994:	8b 00                	mov    eax,DWORD PTR [eax]
c000d996:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d99a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d99e:	52                   	push   edx
c000d99f:	50                   	push   eax
c000d9a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9a3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9a6:	e8 c1 ab 01 00       	call   c002856c <__subdf3>
c000d9ab:	5f                   	pop    edi
c000d9ac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9b0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9b4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9b7:	e8 3f b2 01 00       	call   c0028bfb <__floatsidf>
c000d9bc:	83 c4 10             	add    esp,0x10
c000d9bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9c7:	52                   	push   edx
c000d9c8:	50                   	push   eax
c000d9c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9d1:	e8 c2 ab 01 00       	call   c0028598 <__muldf3>
c000d9d6:	5d                   	pop    ebp
c000d9d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9df:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9e2:	e8 14 b2 01 00       	call   c0028bfb <__floatsidf>
c000d9e7:	83 c4 10             	add    esp,0x10
c000d9ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9ee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f2:	52                   	push   edx
c000d9f3:	50                   	push   eax
c000d9f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	e8 7b ae 01 00       	call   c002887c <__divdf3>
c000da01:	83 c4 10             	add    esp,0x10
c000da04:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1c:	e8 fa a4 01 00       	call   c0027f1b <__adddf3>
c000da21:	83 c4 10             	add    esp,0x10
c000da24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da2c:	83 ec 0c             	sub    esp,0xc
c000da2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da32:	e8 c4 b1 01 00       	call   c0028bfb <__floatsidf>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da3e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da52:	e8 10 b4 01 00       	call   c0028e67 <__ltdf2>
c000da57:	83 c4 10             	add    esp,0x10
c000da5a:	85 c0                	test   eax,eax
c000da5c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da60:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da64:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da68:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da6c:	78 10                	js     c000da7e <sinc_mono_vari_process+0x519>
c000da6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8e:	e8 05 ab 01 00       	call   c0028598 <__muldf3>
c000da93:	59                   	pop    ecx
c000da94:	5f                   	pop    edi
c000da95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa5:	e8 07 de ff ff       	call   c000b8b1 <double_to_fp>
c000daaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daae:	89 c7                	mov    edi,eax
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dabc:	e8 d7 aa 01 00       	call   c0028598 <__muldf3>
c000dac1:	83 c4 18             	add    esp,0x18
c000dac4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dac8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dacc:	52                   	push   edx
c000dacd:	50                   	push   eax
c000dace:	e8 de dd ff ff       	call   c000b8b1 <double_to_fp>
c000dad3:	83 ec 0c             	sub    esp,0xc
c000dad6:	89 c5                	mov    ebp,eax
c000dad8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dadb:	e8 1b b1 01 00       	call   c0028bfb <__floatsidf>
c000dae0:	83 c4 10             	add    esp,0x10
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	52                   	push   edx
c000daec:	50                   	push   eax
c000daed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf5:	e8 82 ad 01 00       	call   c002887c <__divdf3>
c000dafa:	83 c4 10             	add    esp,0x10
c000dafd:	89 e9                	mov    ecx,ebp
c000daff:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db03:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db07:	89 d8                	mov    eax,ebx
c000db09:	89 fa                	mov    edx,edi
c000db0b:	e8 ee bd ff ff       	call   c00098fe <calc_output_single>
c000db10:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db13:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db16:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db1a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1e:	52                   	push   edx
c000db1f:	50                   	push   eax
c000db20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db28:	e8 6b aa 01 00       	call   c0028598 <__muldf3>
c000db2d:	59                   	pop    ecx
c000db2e:	59                   	pop    ecx
c000db2f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db33:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3f:	e8 27 b3 01 00       	call   c0028e6b <__truncdfsf2>
c000db44:	83 c4 10             	add    esp,0x10
c000db47:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db4a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db5d:	e8 1a ad 01 00       	call   c002887c <__divdf3>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db69:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7d:	e8 99 a3 01 00       	call   c0027f1b <__adddf3>
c000db82:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db86:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db8a:	83 c4 18             	add    esp,0x18
c000db8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db95:	e8 86 b4 01 00       	call   c0029020 <lrint>
c000db9a:	83 ec 0c             	sub    esp,0xc
c000db9d:	50                   	push   eax
c000db9e:	e8 58 b0 01 00       	call   c0028bfb <__floatsidf>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbae:	52                   	push   edx
c000dbaf:	50                   	push   eax
c000dbb0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb8:	e8 af a9 01 00       	call   c002856c <__subdf3>
c000dbbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbc1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbc5:	83 c4 20             	add    esp,0x20
c000dbc8:	6a 00                	push   0x0
c000dbca:	6a 00                	push   0x0
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 8e b2 01 00       	call   c0028e67 <__ltdf2>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	85 c0                	test   eax,eax
c000dbde:	79 20                	jns    c000dc00 <sinc_mono_vari_process+0x69b>
c000dbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf0:	e8 26 a3 01 00       	call   c0027f1b <__adddf3>
c000dbf5:	83 c4 10             	add    esp,0x10
c000dbf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbfc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc00:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc03:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc06:	83 ec 10             	sub    esp,0x10
c000dc09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc11:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc19:	e8 4e a9 01 00       	call   c002856c <__subdf3>
c000dc1e:	83 c4 18             	add    esp,0x18
c000dc21:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc29:	52                   	push   edx
c000dc2a:	50                   	push   eax
c000dc2b:	e8 f0 b3 01 00       	call   c0029020 <lrint>
c000dc30:	83 c4 10             	add    esp,0x10
c000dc33:	0f af f8             	imul   edi,eax
c000dc36:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc39:	99                   	cdq    
c000dc3a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc3d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc40:	e9 d2 fb ff ff       	jmp    c000d817 <sinc_mono_vari_process+0x2b2>
c000dc45:	83 c4 4c             	add    esp,0x4c
c000dc48:	89 d0                	mov    eax,edx
c000dc4a:	5b                   	pop    ebx
c000dc4b:	5e                   	pop    esi
c000dc4c:	5f                   	pop    edi
c000dc4d:	5d                   	pop    ebp
c000dc4e:	c3                   	ret    

c000dc4f <sinc_get_name>:
c000dc4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc53:	31 c0                	xor    eax,eax
c000dc55:	83 fa 02             	cmp    edx,0x2
c000dc58:	77 07                	ja     c000dc61 <sinc_get_name+0x12>
c000dc5a:	8b 04 95 04 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd56fc]
c000dc61:	c3                   	ret    

c000dc62 <sinc_get_description>:
c000dc62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc66:	31 c0                	xor    eax,eax
c000dc68:	83 fa 02             	cmp    edx,0x2
c000dc6b:	77 07                	ja     c000dc74 <sinc_get_description+0x12>
c000dc6d:	8b 04 95 f8 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5708]
c000dc74:	c3                   	ret    

c000dc75 <sinc_set_converter>:
c000dc75:	53                   	push   ebx
c000dc76:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc7c:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc83:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc86:	85 c0                	test   eax,eax
c000dc88:	74 13                	je     c000dc9d <sinc_set_converter+0x28>
c000dc8a:	83 ec 0c             	sub    esp,0xc
c000dc8d:	50                   	push   eax
c000dc8e:	e8 71 1c 00 00       	call   c000f904 <free>
c000dc93:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc9a:	83 c4 10             	add    esp,0x10
c000dc9d:	50                   	push   eax
c000dc9e:	68 44 08 00 00       	push   0x844
c000dca3:	6a 00                	push   0x0
c000dca5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dca9:	50                   	push   eax
c000dcaa:	e8 bd 2a ff ff       	call   c000076c <memset>
c000dcaf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcb2:	83 c4 10             	add    esp,0x10
c000dcb5:	b8 0b 00 00 00       	mov    eax,0xb
c000dcba:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcc0:	7f 6e                	jg     c000dd30 <sinc_set_converter+0xbb>
c000dcc2:	83 fa 01             	cmp    edx,0x1
c000dcc5:	75 10                	jne    c000dcd7 <sinc_set_converter+0x62>
c000dcc7:	c7 43 24 65 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d565
c000dcce:	c7 43 20 65 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d565
c000dcd5:	eb 4d                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dcd7:	83 fa 02             	cmp    edx,0x2
c000dcda:	75 10                	jne    c000dcec <sinc_set_converter+0x77>
c000dcdc:	c7 43 24 a0 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cea0
c000dce3:	c7 43 20 a0 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cea0
c000dcea:	eb 38                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dcec:	83 fa 04             	cmp    edx,0x4
c000dcef:	75 10                	jne    c000dd01 <sinc_set_converter+0x8c>
c000dcf1:	c7 43 24 db c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7db
c000dcf8:	c7 43 20 db c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7db
c000dcff:	eb 23                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dd01:	83 fa 06             	cmp    edx,0x6
c000dd04:	75 10                	jne    c000dd16 <sinc_set_converter+0xa1>
c000dd06:	c7 43 24 16 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c116
c000dd0d:	c7 43 20 16 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c116
c000dd14:	eb 0e                	jmp    c000dd24 <sinc_set_converter+0xaf>
c000dd16:	c7 43 24 52 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba52
c000dd1d:	c7 43 20 52 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba52
c000dd24:	c7 43 28 05 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad05
c000dd2b:	b8 0a 00 00 00       	mov    eax,0xa
c000dd30:	81 c4 58 08 00 00    	add    esp,0x858
c000dd36:	5b                   	pop    ebx
c000dd37:	c3                   	ret    

c000dd38 <zoh_vari_process>:
c000dd38:	55                   	push   ebp
c000dd39:	31 d2                	xor    edx,edx
c000dd3b:	57                   	push   edi
c000dd3c:	56                   	push   esi
c000dd3d:	53                   	push   ebx
c000dd3e:	83 ec 3c             	sub    esp,0x3c
c000dd41:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd45:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd49:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd4d:	0f 8e 80 06 00 00    	jle    c000e3d3 <zoh_vari_process+0x69b>
c000dd53:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd56:	ba 05 00 00 00       	mov    edx,0x5
c000dd5b:	85 db                	test   ebx,ebx
c000dd5d:	0f 84 70 06 00 00    	je     c000e3d3 <zoh_vari_process+0x69b>
c000dd63:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd66:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd6a:	74 19                	je     c000dd85 <zoh_vari_process+0x4d>
c000dd6c:	31 d2                	xor    edx,edx
c000dd6e:	39 c2                	cmp    edx,eax
c000dd70:	7d 0c                	jge    c000dd7e <zoh_vari_process+0x46>
c000dd72:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd74:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd77:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd7b:	42                   	inc    edx
c000dd7c:	eb f0                	jmp    c000dd6e <zoh_vari_process+0x36>
c000dd7e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd85:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd88:	0f af d0             	imul   edx,eax
c000dd8b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd8e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd99:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd9c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dda3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dda6:	8b 07                	mov    eax,DWORD PTR [edi]
c000dda8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb0:	68 00 00 70 3f       	push   0x3f700000
c000ddb5:	6a 00                	push   0x0
c000ddb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbf:	e8 a3 b0 01 00       	call   c0028e67 <__ltdf2>
c000ddc4:	83 c4 10             	add    esp,0x10
c000ddc7:	ba 16 00 00 00       	mov    edx,0x16
c000ddcc:	85 c0                	test   eax,eax
c000ddce:	0f 88 ff 05 00 00    	js     c000e3d3 <zoh_vari_process+0x69b>
c000ddd4:	68 00 00 70 40       	push   0x40700000
c000ddd9:	6a 00                	push   0x0
c000dddb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde3:	e8 61 b0 01 00       	call   c0028e49 <__gtdf2>
c000dde8:	83 c4 10             	add    esp,0x10
c000ddeb:	ba 16 00 00 00       	mov    edx,0x16
c000ddf0:	85 c0                	test   eax,eax
c000ddf2:	0f 8f db 05 00 00    	jg     c000e3d3 <zoh_vari_process+0x69b>
c000ddf8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddfb:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000ddfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de06:	68 00 00 f0 3f       	push   0x3ff00000
c000de0b:	6a 00                	push   0x0
c000de0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de15:	e8 4d b0 01 00       	call   c0028e67 <__ltdf2>
c000de1a:	83 c4 10             	add    esp,0x10
c000de1d:	85 c0                	test   eax,eax
c000de1f:	0f 89 da 01 00 00    	jns    c000dfff <zoh_vari_process+0x2c7>
c000de25:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de28:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de2b:	0f 8d ce 01 00 00    	jge    c000dfff <zoh_vari_process+0x2c7>
c000de31:	83 ec 0c             	sub    esp,0xc
c000de34:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de37:	e8 bf ad 01 00       	call   c0028bfb <__floatsidf>
c000de3c:	83 c4 10             	add    esp,0x10
c000de3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000de42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de56:	e8 3d a7 01 00       	call   c0028598 <__muldf3>
c000de5b:	59                   	pop    ecx
c000de5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de60:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de64:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de67:	e8 8f ad 01 00       	call   c0028bfb <__floatsidf>
c000de6c:	83 c4 10             	add    esp,0x10
c000de6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de77:	52                   	push   edx
c000de78:	50                   	push   eax
c000de79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de81:	e8 95 a0 01 00       	call   c0027f1b <__adddf3>
c000de86:	59                   	pop    ecx
c000de87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de8b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de92:	e8 64 ad 01 00       	call   c0028bfb <__floatsidf>
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea2:	52                   	push   edx
c000dea3:	50                   	push   eax
c000dea4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deac:	e8 b4 af 01 00       	call   c0028e65 <__gedf2>
c000deb1:	83 c4 10             	add    esp,0x10
c000deb4:	85 c0                	test   eax,eax
c000deb6:	0f 89 43 01 00 00    	jns    c000dfff <zoh_vari_process+0x2c7>
c000debc:	85 ed                	test   ebp,ebp
c000debe:	0f 8e ec 00 00 00    	jle    c000dfb0 <zoh_vari_process+0x278>
c000dec4:	83 ec 10             	sub    esp,0x10
c000dec7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000decd:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000ded0:	ff 37                	push   DWORD PTR [edi]
c000ded2:	e8 95 a6 01 00       	call   c002856c <__subdf3>
c000ded7:	83 c4 18             	add    esp,0x18
c000deda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dede:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dee2:	52                   	push   edx
c000dee3:	50                   	push   eax
c000dee4:	e8 17 b1 01 00       	call   c0029000 <fabs>
c000dee9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000def1:	83 c4 10             	add    esp,0x10
c000def4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000def9:	68 23 42 92 0c       	push   0xc924223
c000defe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df06:	e8 3e af 01 00       	call   c0028e49 <__gtdf2>
c000df0b:	83 c4 10             	add    esp,0x10
c000df0e:	85 c0                	test   eax,eax
c000df10:	0f 8e 9a 00 00 00    	jle    c000dfb0 <zoh_vari_process+0x278>
c000df16:	8b 07                	mov    eax,DWORD PTR [edi]
c000df18:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000df1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df22:	52                   	push   edx
c000df23:	50                   	push   eax
c000df24:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df27:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df2a:	e8 3d a6 01 00       	call   c002856c <__subdf3>
c000df2f:	59                   	pop    ecx
c000df30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df38:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df3b:	e8 bb ac 01 00       	call   c0028bfb <__floatsidf>
c000df40:	83 c4 10             	add    esp,0x10
c000df43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df47:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df4b:	52                   	push   edx
c000df4c:	50                   	push   eax
c000df4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df55:	e8 3e a6 01 00       	call   c0028598 <__muldf3>
c000df5a:	5d                   	pop    ebp
c000df5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df63:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df66:	e8 90 ac 01 00       	call   c0028bfb <__floatsidf>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df76:	52                   	push   edx
c000df77:	50                   	push   eax
c000df78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	e8 f7 a8 01 00       	call   c002887c <__divdf3>
c000df85:	83 c4 10             	add    esp,0x10
c000df88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa0:	e8 76 9f 01 00       	call   c0027f1b <__adddf3>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb0:	31 c0                	xor    eax,eax
c000dfb2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfb5:	7e 13                	jle    c000dfca <zoh_vari_process+0x292>
c000dfb7:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfbb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfbe:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfc1:	40                   	inc    eax
c000dfc2:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfc5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfc8:	eb e8                	jmp    c000dfb2 <zoh_vari_process+0x27a>
c000dfca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfd2:	68 00 00 f0 3f       	push   0x3ff00000
c000dfd7:	6a 00                	push   0x0
c000dfd9:	e8 9e a8 01 00       	call   c002887c <__divdf3>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfe8:	52                   	push   edx
c000dfe9:	50                   	push   eax
c000dfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	e8 24 9f 01 00       	call   c0027f1b <__adddf3>
c000dff7:	83 c4 10             	add    esp,0x10
c000dffa:	e9 ff fd ff ff       	jmp    c000ddfe <zoh_vari_process+0xc6>
c000dfff:	55                   	push   ebp
c000e000:	55                   	push   ebp
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e009:	e8 12 b0 01 00       	call   c0029020 <lrint>
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	50                   	push   eax
c000e012:	e8 e4 ab 01 00       	call   c0028bfb <__floatsidf>
c000e017:	83 c4 10             	add    esp,0x10
c000e01a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e022:	52                   	push   edx
c000e023:	50                   	push   eax
c000e024:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e028:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e02c:	e8 3b a5 01 00       	call   c002856c <__subdf3>
c000e031:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e035:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e039:	83 c4 20             	add    esp,0x20
c000e03c:	6a 00                	push   0x0
c000e03e:	6a 00                	push   0x0
c000e040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e044:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e048:	e8 1a ae 01 00       	call   c0028e67 <__ltdf2>
c000e04d:	83 c4 10             	add    esp,0x10
c000e050:	85 c0                	test   eax,eax
c000e052:	79 1e                	jns    c000e072 <zoh_vari_process+0x33a>
c000e054:	68 00 00 f0 3f       	push   0x3ff00000
c000e059:	6a 00                	push   0x0
c000e05b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e05f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e063:	e8 b3 9e 01 00       	call   c0027f1b <__adddf3>
c000e068:	83 c4 10             	add    esp,0x10
c000e06b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e06e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e072:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e075:	83 ec 10             	sub    esp,0x10
c000e078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e080:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e084:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e088:	e8 df a4 01 00       	call   c002856c <__subdf3>
c000e08d:	83 c4 18             	add    esp,0x18
c000e090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e098:	52                   	push   edx
c000e099:	50                   	push   eax
c000e09a:	e8 81 af 01 00       	call   c0029020 <lrint>
c000e09f:	83 c4 10             	add    esp,0x10
c000e0a2:	0f af e8             	imul   ebp,eax
c000e0a5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0a8:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0ab:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0b2:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0b9:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0bc:	0f 8d 7a 02 00 00    	jge    c000e33c <zoh_vari_process+0x604>
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0c8:	e8 2e ab 01 00       	call   c0028bfb <__floatsidf>
c000e0cd:	83 c4 10             	add    esp,0x10
c000e0d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0dc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e8:	e8 ab a4 01 00       	call   c0028598 <__muldf3>
c000e0ed:	59                   	pop    ecx
c000e0ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0f2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0fa:	e8 fc aa 01 00       	call   c0028bfb <__floatsidf>
c000e0ff:	83 c4 10             	add    esp,0x10
c000e102:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e10a:	52                   	push   edx
c000e10b:	50                   	push   eax
c000e10c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e110:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e114:	e8 02 9e 01 00       	call   c0027f1b <__adddf3>
c000e119:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e11c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e120:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e124:	e8 d2 aa 01 00       	call   c0028bfb <__floatsidf>
c000e129:	83 c4 10             	add    esp,0x10
c000e12c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e130:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e134:	52                   	push   edx
c000e135:	50                   	push   eax
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13e:	e8 26 ad 01 00       	call   c0028e69 <__ledf2>
c000e143:	83 c4 10             	add    esp,0x10
c000e146:	85 c0                	test   eax,eax
c000e148:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e14c:	0f 8f ea 01 00 00    	jg     c000e33c <zoh_vari_process+0x604>
c000e152:	85 c9                	test   ecx,ecx
c000e154:	0f 8e ed 00 00 00    	jle    c000e247 <zoh_vari_process+0x50f>
c000e15a:	83 ec 10             	sub    esp,0x10
c000e15d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e160:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e163:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e166:	ff 37                	push   DWORD PTR [edi]
c000e168:	e8 ff a3 01 00       	call   c002856c <__subdf3>
c000e16d:	83 c4 18             	add    esp,0x18
c000e170:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e174:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e178:	52                   	push   edx
c000e179:	50                   	push   eax
c000e17a:	e8 81 ae 01 00       	call   c0029000 <fabs>
c000e17f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e183:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e18f:	68 23 42 92 0c       	push   0xc924223
c000e194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e19c:	e8 a8 ac 01 00       	call   c0028e49 <__gtdf2>
c000e1a1:	83 c4 10             	add    esp,0x10
c000e1a4:	85 c0                	test   eax,eax
c000e1a6:	0f 8e 9b 00 00 00    	jle    c000e247 <zoh_vari_process+0x50f>
c000e1ac:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1ae:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1b9:	52                   	push   edx
c000e1ba:	50                   	push   eax
c000e1bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1be:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1c1:	e8 a6 a3 01 00       	call   c002856c <__subdf3>
c000e1c6:	5d                   	pop    ebp
c000e1c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1cb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1d2:	e8 24 aa 01 00       	call   c0028bfb <__floatsidf>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1e2:	52                   	push   edx
c000e1e3:	50                   	push   eax
c000e1e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ec:	e8 a7 a3 01 00       	call   c0028598 <__muldf3>
c000e1f1:	59                   	pop    ecx
c000e1f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1fa:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1fd:	e8 f9 a9 01 00       	call   c0028bfb <__floatsidf>
c000e202:	83 c4 10             	add    esp,0x10
c000e205:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e209:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e20d:	52                   	push   edx
c000e20e:	50                   	push   eax
c000e20f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	e8 60 a6 01 00       	call   c002887c <__divdf3>
c000e21c:	83 c4 10             	add    esp,0x10
c000e21f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e223:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e237:	e8 df 9c 01 00       	call   c0027f1b <__adddf3>
c000e23c:	83 c4 10             	add    esp,0x10
c000e23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e247:	31 d2                	xor    edx,edx
c000e249:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e24c:	39 d0                	cmp    eax,edx
c000e24e:	7e 1d                	jle    c000e26d <zoh_vari_process+0x535>
c000e250:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e253:	29 c1                	sub    ecx,eax
c000e255:	89 c8                	mov    eax,ecx
c000e257:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e259:	01 d0                	add    eax,edx
c000e25b:	42                   	inc    edx
c000e25c:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e25f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e262:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e265:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e268:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e26b:	eb dc                	jmp    c000e249 <zoh_vari_process+0x511>
c000e26d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e271:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e275:	68 00 00 f0 3f       	push   0x3ff00000
c000e27a:	6a 00                	push   0x0
c000e27c:	e8 fb a5 01 00       	call   c002887c <__divdf3>
c000e281:	83 c4 10             	add    esp,0x10
c000e284:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e288:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e28c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29c:	e8 7a 9c 01 00       	call   c0027f1b <__adddf3>
c000e2a1:	5d                   	pop    ebp
c000e2a2:	59                   	pop    ecx
c000e2a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b3:	e8 68 ad 01 00       	call   c0029020 <lrint>
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	50                   	push   eax
c000e2bc:	e8 3a a9 01 00       	call   c0028bfb <__floatsidf>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2cc:	52                   	push   edx
c000e2cd:	50                   	push   eax
c000e2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d6:	e8 91 a2 01 00       	call   c002856c <__subdf3>
c000e2db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2e3:	83 c4 20             	add    esp,0x20
c000e2e6:	6a 00                	push   0x0
c000e2e8:	6a 00                	push   0x0
c000e2ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f2:	e8 70 ab 01 00       	call   c0028e67 <__ltdf2>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	85 c0                	test   eax,eax
c000e2fc:	79 1e                	jns    c000e31c <zoh_vari_process+0x5e4>
c000e2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000e303:	6a 00                	push   0x0
c000e305:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e309:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30d:	e8 09 9c 01 00       	call   c0027f1b <__adddf3>
c000e312:	83 c4 10             	add    esp,0x10
c000e315:	89 04 24             	mov    DWORD PTR [esp],eax
c000e318:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e31c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e31f:	83 ec 10             	sub    esp,0x10
c000e322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e32a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e32e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e332:	e8 35 a2 01 00       	call   c002856c <__subdf3>
c000e337:	e9 51 fd ff ff       	jmp    c000e08d <zoh_vari_process+0x355>
c000e33c:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e340:	7d 3a                	jge    c000e37c <zoh_vari_process+0x644>
c000e342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e346:	83 ec 0c             	sub    esp,0xc
c000e349:	29 e8                	sub    eax,ebp
c000e34b:	99                   	cdq    
c000e34c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e34f:	50                   	push   eax
c000e350:	e8 a6 a8 01 00       	call   c0028bfb <__floatsidf>
c000e355:	83 c4 10             	add    esp,0x10
c000e358:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e35c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e360:	52                   	push   edx
c000e361:	50                   	push   eax
c000e362:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e366:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e36a:	e8 ac 9b 01 00       	call   c0027f1b <__adddf3>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e375:	89 04 24             	mov    DWORD PTR [esp],eax
c000e378:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e37c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e37f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e383:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e386:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e389:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e38c:	85 c0                	test   eax,eax
c000e38e:	7f 25                	jg     c000e3b5 <zoh_vari_process+0x67d>
c000e390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e394:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e398:	89 07                	mov    DWORD PTR [edi],eax
c000e39a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e39d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3a0:	99                   	cdq    
c000e3a1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3a4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3aa:	99                   	cdq    
c000e3ab:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ae:	31 d2                	xor    edx,edx
c000e3b0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3b3:	eb 1e                	jmp    c000e3d3 <zoh_vari_process+0x69b>
c000e3b5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3b8:	31 d2                	xor    edx,edx
c000e3ba:	29 c8                	sub    eax,ecx
c000e3bc:	c1 e0 02             	shl    eax,0x2
c000e3bf:	39 d1                	cmp    ecx,edx
c000e3c1:	7e cd                	jle    c000e390 <zoh_vari_process+0x658>
c000e3c3:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3c5:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3c9:	83 c0 04             	add    eax,0x4
c000e3cc:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3d0:	42                   	inc    edx
c000e3d1:	eb ec                	jmp    c000e3bf <zoh_vari_process+0x687>
c000e3d3:	83 c4 3c             	add    esp,0x3c
c000e3d6:	89 d0                	mov    eax,edx
c000e3d8:	5b                   	pop    ebx
c000e3d9:	5e                   	pop    esi
c000e3da:	5f                   	pop    edi
c000e3db:	5d                   	pop    ebp
c000e3dc:	c3                   	ret    

c000e3dd <zoh_reset>:
c000e3dd:	83 ec 0c             	sub    esp,0xc
c000e3e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3e4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3e7:	85 c0                	test   eax,eax
c000e3e9:	74 20                	je     c000e40b <zoh_reset+0x2e>
c000e3eb:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3ee:	83 c0 1c             	add    eax,0x1c
c000e3f1:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3f4:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3fb:	c1 e2 02             	shl    edx,0x2
c000e3fe:	51                   	push   ecx
c000e3ff:	52                   	push   edx
c000e400:	6a 00                	push   0x0
c000e402:	50                   	push   eax
c000e403:	e8 64 23 ff ff       	call   c000076c <memset>
c000e408:	83 c4 10             	add    esp,0x10
c000e40b:	83 c4 0c             	add    esp,0xc
c000e40e:	c3                   	ret    

c000e40f <zoh_get_name>:
c000e40f:	31 c0                	xor    eax,eax
c000e411:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e416:	75 05                	jne    c000e41d <zoh_get_name+0xe>
c000e418:	b8 1e aa 02 c0       	mov    eax,0xc002aa1e
c000e41d:	c3                   	ret    

c000e41e <zoh_get_description>:
c000e41e:	31 c0                	xor    eax,eax
c000e420:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e425:	75 05                	jne    c000e42c <zoh_get_description+0xe>
c000e427:	b8 2f aa 02 c0       	mov    eax,0xc002aa2f
c000e42c:	c3                   	ret    

c000e42d <zoh_set_converter>:
c000e42d:	53                   	push   ebx
c000e42e:	b8 0a 00 00 00       	mov    eax,0xa
c000e433:	83 ec 08             	sub    esp,0x8
c000e436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e43a:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e43f:	75 6e                	jne    c000e4af <zoh_set_converter+0x82>
c000e441:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e444:	85 c0                	test   eax,eax
c000e446:	74 13                	je     c000e45b <zoh_set_converter+0x2e>
c000e448:	83 ec 0c             	sub    esp,0xc
c000e44b:	50                   	push   eax
c000e44c:	e8 b3 14 00 00       	call   c000f904 <free>
c000e451:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	50                   	push   eax
c000e45c:	50                   	push   eax
c000e45d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e460:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e467:	50                   	push   eax
c000e468:	6a 01                	push   0x1
c000e46a:	e8 b5 14 00 00       	call   c000f924 <calloc>
c000e46f:	83 c4 10             	add    esp,0x10
c000e472:	89 c2                	mov    edx,eax
c000e474:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e477:	85 d2                	test   edx,edx
c000e479:	b8 01 00 00 00       	mov    eax,0x1
c000e47e:	74 2f                	je     c000e4af <zoh_set_converter+0x82>
c000e480:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e483:	83 ec 0c             	sub    esp,0xc
c000e486:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e489:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e48f:	c7 43 24 38 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd38
c000e496:	c7 43 20 38 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd38
c000e49d:	c7 43 28 dd e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3dd
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 33 ff ff ff       	call   c000e3dd <zoh_reset>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	31 c0                	xor    eax,eax
c000e4af:	83 c4 08             	add    esp,0x8
c000e4b2:	5b                   	pop    ebx
c000e4b3:	c3                   	ret    

c000e4b4 <CPU::current()>:
c000e4b4:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c000e4b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4bf:	c3                   	ret    

c000e4c0 <operator new(unsigned long)>:
c000e4c0:	e9 2f 14 00 00       	jmp    c000f8f4 <malloc>

c000e4c5 <operator delete(void*)>:
c000e4c5:	e9 4a 14 00 00       	jmp    c000f914 <rfree>

c000e4ca <disableIRQs()>:
c000e4ca:	fa                   	cli    
c000e4cb:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c000e4d1:	c3                   	ret    

c000e4d2 <enableIRQs()>:
c000e4d2:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000e4d7:	48                   	dec    eax
c000e4d8:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000e4dd:	75 01                	jne    c000e4e0 <enableIRQs()+0xe>
c000e4df:	fb                   	sti    
c000e4e0:	c3                   	ret    

c000e4e1 <lockScheduler()>:
c000e4e1:	fa                   	cli    
c000e4e2:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c000e4e8:	c3                   	ret    

c000e4e9 <unlockScheduler()>:
c000e4e9:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000e4ee:	48                   	dec    eax
c000e4ef:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000e4f4:	75 01                	jne    c000e4f7 <unlockScheduler()+0xe>
c000e4f6:	fb                   	sti    
c000e4f7:	c3                   	ret    

c000e4f8 <lockStuff()>:
c000e4f8:	fa                   	cli    
c000e4f9:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c000e4ff:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c000e505:	c3                   	ret    

c000e506 <unlockStuff()>:
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c000e50e:	48                   	dec    eax
c000e50f:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c000e514:	75 18                	jne    c000e52e <unlockStuff()+0x28>
c000e516:	83 3d e0 25 03 c0 00 	cmp    DWORD PTR ds:0xc00325e0,0x0
c000e51d:	74 0f                	je     c000e52e <unlockStuff()+0x28>
c000e51f:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c000e529:	e8 0c 01 01 00       	call   c001e63a <schedule()>
c000e52e:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000e533:	48                   	dec    eax
c000e534:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000e539:	75 01                	jne    c000e53c <unlockStuff()+0x36>
c000e53b:	fb                   	sti    
c000e53c:	83 c4 0c             	add    esp,0xc
c000e53f:	c3                   	ret    

c000e540 <Virt::getAKernelVAS()>:
c000e540:	a1 30 f2 02 c0       	mov    eax,ds:0xc002f230
c000e545:	c3                   	ret    

c000e546 <__not_memcpy>:
c000e546:	57                   	push   edi
c000e547:	56                   	push   esi
c000e548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e550:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e554:	89 c7                	mov    edi,eax
c000e556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e558:	5e                   	pop    esi
c000e559:	5f                   	pop    edi
c000e55a:	c3                   	ret    

c000e55b <Krnl::resolveCompatibilitySymbol(char*)>:
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	83 ec 08             	sub    esp,0x8
c000e561:	68 66 aa 02 c0       	push   0xc002aa66
c000e566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e56a:	e8 45 23 ff ff       	call   c00008b4 <strcmp>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	85 c0                	test   eax,eax
c000e574:	0f 94 c0             	sete   al
c000e577:	84 c0                	test   al,al
c000e579:	74 0a                	je     c000e585 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e57b:	b8 a8 f0 02 c0       	mov    eax,0xc002f0a8
c000e580:	e9 e3 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e585:	83 ec 08             	sub    esp,0x8
c000e588:	68 6f aa 02 c0       	push   0xc002aa6f
c000e58d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e591:	e8 1e 23 ff ff       	call   c00008b4 <strcmp>
c000e596:	83 c4 10             	add    esp,0x10
c000e599:	85 c0                	test   eax,eax
c000e59b:	0f 94 c0             	sete   al
c000e59e:	84 c0                	test   al,al
c000e5a0:	74 0a                	je     c000e5ac <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e5a2:	b8 94 73 02 c0       	mov    eax,0xc0027394
c000e5a7:	e9 bc 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ac:	83 ec 08             	sub    esp,0x8
c000e5af:	68 79 aa 02 c0       	push   0xc002aa79
c000e5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5b8:	e8 f7 22 ff ff       	call   c00008b4 <strcmp>
c000e5bd:	83 c4 10             	add    esp,0x10
c000e5c0:	85 c0                	test   eax,eax
c000e5c2:	0f 94 c0             	sete   al
c000e5c5:	84 c0                	test   al,al
c000e5c7:	74 0a                	je     c000e5d3 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5c9:	b8 c8 70 02 c0       	mov    eax,0xc00270c8
c000e5ce:	e9 95 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d3:	83 ec 08             	sub    esp,0x8
c000e5d6:	68 82 aa 02 c0       	push   0xc002aa82
c000e5db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5df:	e8 d0 22 ff ff       	call   c00008b4 <strcmp>
c000e5e4:	83 c4 10             	add    esp,0x10
c000e5e7:	85 c0                	test   eax,eax
c000e5e9:	0f 94 c0             	sete   al
c000e5ec:	84 c0                	test   al,al
c000e5ee:	74 07                	je     c000e5f7 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5f0:	b8 94 74 02 c0       	mov    eax,0xc0027494
c000e5f5:	eb 71                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5f7:	83 ec 08             	sub    esp,0x8
c000e5fa:	68 8c aa 02 c0       	push   0xc002aa8c
c000e5ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e603:	e8 ac 22 ff ff       	call   c00008b4 <strcmp>
c000e608:	83 c4 10             	add    esp,0x10
c000e60b:	85 c0                	test   eax,eax
c000e60d:	0f 94 c0             	sete   al
c000e610:	84 c0                	test   al,al
c000e612:	74 07                	je     c000e61b <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e614:	b8 14 72 02 c0       	mov    eax,0xc0027214
c000e619:	eb 4d                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e61b:	83 ec 08             	sub    esp,0x8
c000e61e:	68 95 aa 02 c0       	push   0xc002aa95
c000e623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e627:	e8 88 22 ff ff       	call   c00008b4 <strcmp>
c000e62c:	83 c4 10             	add    esp,0x10
c000e62f:	85 c0                	test   eax,eax
c000e631:	0f 94 c0             	sete   al
c000e634:	84 c0                	test   al,al
c000e636:	74 07                	je     c000e63f <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e638:	b8 ac f0 02 c0       	mov    eax,0xc002f0ac
c000e63d:	eb 29                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e63f:	83 ec 08             	sub    esp,0x8
c000e642:	68 a2 aa 02 c0       	push   0xc002aaa2
c000e647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e64b:	e8 64 22 ff ff       	call   c00008b4 <strcmp>
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	85 c0                	test   eax,eax
c000e655:	0f 94 c0             	sete   al
c000e658:	84 c0                	test   al,al
c000e65a:	74 07                	je     c000e663 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e65c:	b8 ad f0 02 c0       	mov    eax,0xc002f0ad
c000e661:	eb 05                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e663:	b8 00 00 00 00       	mov    eax,0x0
c000e668:	83 c4 0c             	add    esp,0xc
c000e66b:	c3                   	ret    

c000e66c <Computer::close(int, int, void*)>:
c000e66c:	57                   	push   edi
c000e66d:	56                   	push   esi
c000e66e:	53                   	push   ebx
c000e66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e673:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e677:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e67b:	83 ec 0c             	sub    esp,0xc
c000e67e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e684:	e8 ad 5d 00 00       	call   c0014436 <Device::closeAll()>
c000e689:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e68f:	83 c4 10             	add    esp,0x10
c000e692:	8b 10                	mov    edx,DWORD PTR [eax]
c000e694:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e698:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e6a0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e6a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6a8:	5b                   	pop    ebx
c000e6a9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e6ac:	5e                   	pop    esi
c000e6ad:	5f                   	pop    edi
c000e6ae:	ff e0                	jmp    eax

c000e6b0 <Krnl::firstTask()>:
c000e6b0:	53                   	push   ebx
c000e6b1:	83 ec 14             	sub    esp,0x14
c000e6b4:	fb                   	sti    
c000e6b5:	68 3f 07 00 00       	push   0x73f
c000e6ba:	e8 35 12 00 00       	call   c000f8f4 <malloc>
c000e6bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6c6:	89 c3                	mov    ebx,eax
c000e6c8:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c000e6ce:	68 af aa 02 c0       	push   0xc002aaaf
c000e6d3:	6a 01                	push   0x1
c000e6d5:	50                   	push   eax
c000e6d6:	e8 23 fb 00 00       	call   c001e1fe <Process::Process(bool, char const*, Process*, char**)>
c000e6db:	83 c4 20             	add    esp,0x20
c000e6de:	68 ff 00 00 00       	push   0xff
c000e6e3:	6a 00                	push   0x0
c000e6e5:	68 87 f2 00 c0       	push   0xc000f287
c000e6ea:	53                   	push   ebx
c000e6eb:	e8 06 fd 00 00       	call   c001e3f6 <Process::createThread(void (*)(void*), void*, int)>
c000e6f0:	6a 7a                	push   0x7a
c000e6f2:	6a 00                	push   0x0
c000e6f4:	68 74 ee 01 c0       	push   0xc001ee74
c000e6f9:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c000e6ff:	e8 f2 fc 00 00       	call   c001e3f6 <Process::createThread(void (*)(void*), void*, int)>
c000e704:	83 c4 20             	add    esp,0x20
c000e707:	a3 c8 25 03 c0       	mov    ds:0xc00325c8,eax
c000e70c:	c6 05 ad f0 02 c0 01 	mov    BYTE PTR ds:0xc002f0ad,0x1
c000e713:	e8 b0 0b 01 00       	call   c001f2c8 <Vm::initialise8086()>
c000e718:	e8 0d 4b 00 00       	call   c001322a <Fs::initVFS()>
c000e71d:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c000e722:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e728:	8b 10                	mov    edx,DWORD PTR [eax]
c000e72a:	6a 00                	push   0x0
c000e72c:	6a 00                	push   0x0
c000e72e:	6a 00                	push   0x0
c000e730:	50                   	push   eax
c000e731:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e734:	e8 52 e3 00 00       	call   c001ca8b <Sys::loadSyscalls()>
c000e739:	e8 10 c0 00 00       	call   c001a74e <Krnl::loadSystemEnv()>
c000e73e:	83 c4 0c             	add    esp,0xc
c000e741:	6a 3a                	push   0x3a
c000e743:	68 bc aa 02 c0       	push   0xc002aabc
c000e748:	68 c5 aa 02 c0       	push   0xc002aac5
c000e74d:	e8 eb ce 00 00       	call   c001b63d <Reg::readIntWithDefault(char*, char*, int)>
c000e752:	89 04 24             	mov    DWORD PTR [esp],eax
c000e755:	e8 c0 55 00 00       	call   c0013d1a <User::loadClockSettings(int)>
c000e75a:	58                   	pop    eax
c000e75b:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c000e760:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e766:	e8 9f 5c 00 00       	call   c001440a <Device::loadDriversForAll()>
c000e76b:	e8 2a bb 00 00       	call   c001a29a <Krnl::startCPUs()>
c000e770:	5a                   	pop    edx
c000e771:	8b 1d a8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0a8
c000e777:	59                   	pop    ecx
c000e778:	6a 01                	push   0x1
c000e77a:	68 cd aa 02 c0       	push   0xc002aacd
c000e77f:	e8 d7 f4 00 00       	call   c001dc5b <Thr::loadDLL(char const*, bool)>
c000e784:	5a                   	pop    edx
c000e785:	59                   	pop    ecx
c000e786:	53                   	push   ebx
c000e787:	50                   	push   eax
c000e788:	e8 f9 f6 00 00       	call   c001de86 <Thr::executeDLL(unsigned long, void*)>
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	6a 02                	push   0x2
c000e795:	e8 9f 00 01 00       	call   c001e839 <blockTask(TaskState)>
c000e79a:	83 c4 10             	add    esp,0x10
c000e79d:	eb f1                	jmp    c000e790 <Krnl::firstTask()+0xe0>
c000e79f:	90                   	nop

c000e7a0 <Computer::Computer()>:
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a7:	83 ec 08             	sub    esp,0x8
c000e7aa:	68 e9 aa 02 c0       	push   0xc002aae9
c000e7af:	50                   	push   eax
c000e7b0:	e8 fb 5c 00 00       	call   c00144b0 <Device::Device(char const*)>
c000e7b5:	83 c4 10             	add    esp,0x10
c000e7b8:	ba 04 ad 02 c0       	mov    edx,0xc002ad04
c000e7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c1:	89 10                	mov    DWORD PTR [eax],edx
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7e9:	83 ca 04             	or     edx,0x4
c000e7ec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7fc:	0f b6 d0             	movzx  edx,al
c000e7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e803:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e814:	0f b6 d0             	movzx  edx,al
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e824:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e82a:	8d 50 01             	lea    edx,[eax+0x1]
c000e82d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e831:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e842:	83 e1 3f             	and    ecx,0x3f
c000e845:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e853:	0f b6 d0             	movzx  edx,al
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e86b:	0f b6 d0             	movzx  edx,al
c000e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e872:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e881:	8d 50 01             	lea    edx,[eax+0x1]
c000e884:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e888:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e899:	83 e1 3f             	and    ecx,0x3f
c000e89c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8aa:	0f b6 d0             	movzx  edx,al
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c2:	0f b6 d0             	movzx  edx,al
c000e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d8:	8d 50 01             	lea    edx,[eax+0x1]
c000e8db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8df:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8e5:	0f b6 d0             	movzx  edx,al
c000e8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8f0:	83 e1 3f             	and    ecx,0x3f
c000e8f3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8f7:	90                   	nop
c000e8f8:	83 c4 0c             	add    esp,0xc
c000e8fb:	c3                   	ret    

c000e8fc <Computer::setBootMessage(char const*)>:
c000e8fc:	c3                   	ret    
c000e8fd:	90                   	nop

c000e8fe <Computer::detectFeatures()>:
c000e8fe:	55                   	push   ebp
c000e8ff:	57                   	push   edi
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 1c             	sub    esp,0x1c
c000e905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e909:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e913:	e8 cc 19 ff ff       	call   c00002e4 <detectCPUID>
c000e918:	85 c0                	test   eax,eax
c000e91a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e920:	0f 95 c2             	setne  dl
c000e923:	83 e0 fd             	and    eax,0xfffffffd
c000e926:	d1 e2                	shl    edx,1
c000e928:	09 d0                	or     eax,edx
c000e92a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e930:	a8 02                	test   al,0x2
c000e932:	75 46                	jne    c000e97a <Computer::detectFeatures()+0x7c>
c000e934:	f6 05 c1 f0 02 c0 04 	test   BYTE PTR ds:0xc002f0c1,0x4
c000e93b:	74 07                	je     c000e944 <Computer::detectFeatures()+0x46>
c000e93d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e944:	e8 0d 87 01 00       	call   c0027056 <x87Detect>
c000e949:	83 e0 01             	and    eax,0x1
c000e94c:	c1 e0 04             	shl    eax,0x4
c000e94f:	88 c2                	mov    dl,al
c000e951:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e957:	83 e0 ef             	and    eax,0xffffffef
c000e95a:	09 d0                	or     eax,edx
c000e95c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e962:	a8 10                	test   al,0x10
c000e964:	0f 85 2a 01 00 00    	jne    c000ea94 <Computer::detectFeatures()+0x196>
c000e96a:	84 c0                	test   al,al
c000e96c:	0f 88 45 01 00 00    	js     c000eab7 <Computer::detectFeatures()+0x1b9>
c000e972:	83 c4 1c             	add    esp,0x1c
c000e975:	5b                   	pop    ebx
c000e976:	5e                   	pop    esi
c000e977:	5f                   	pop    edi
c000e978:	5d                   	pop    ebp
c000e979:	c3                   	ret    
c000e97a:	83 ec 0c             	sub    esp,0xc
c000e97d:	6a 20                	push   0x20
c000e97f:	e8 26 a6 00 00       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c000e984:	83 e0 01             	and    eax,0x1
c000e987:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e98e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e994:	83 e0 f7             	and    eax,0xfffffff7
c000e997:	09 d0                	or     eax,edx
c000e999:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e99f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9a6:	e8 ff a5 00 00       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c000e9ab:	83 e0 01             	and    eax,0x1
c000e9ae:	88 c2                	mov    dl,al
c000e9b0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9b6:	83 e0 fe             	and    eax,0xfffffffe
c000e9b9:	09 d0                	or     eax,edx
c000e9bb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9c8:	e8 dd a5 00 00       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c000e9cd:	c1 e0 07             	shl    eax,0x7
c000e9d0:	88 c2                	mov    dl,al
c000e9d2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9d8:	83 e0 7f             	and    eax,0x7f
c000e9db:	09 d0                	or     eax,edx
c000e9dd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9e3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ea:	e8 bb a5 00 00       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c000e9ef:	83 c4 10             	add    esp,0x10
c000e9f2:	83 e0 01             	and    eax,0x1
c000e9f5:	c1 e0 05             	shl    eax,0x5
c000e9f8:	88 c2                	mov    dl,al
c000e9fa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea00:	83 e0 df             	and    eax,0xffffffdf
c000ea03:	09 d0                	or     eax,edx
c000ea05:	f7 05 c0 f0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f0c0,0x401
c000ea0f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea15:	0f 84 c2 00 00 00    	je     c000eadd <Computer::detectFeatures()+0x1df>
c000ea1b:	83 e0 fe             	and    eax,0xfffffffe
c000ea1e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea24:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea2a:	88 c2                	mov    dl,al
c000ea2c:	83 e2 09             	and    edx,0x9
c000ea2f:	fe ca                	dec    dl
c000ea31:	75 09                	jne    c000ea3c <Computer::detectFeatures()+0x13e>
c000ea33:	83 e0 fe             	and    eax,0xfffffffe
c000ea36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea3c:	83 ec 0c             	sub    esp,0xc
c000ea3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea43:	50                   	push   eax
c000ea44:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea48:	55                   	push   ebp
c000ea49:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea4d:	57                   	push   edi
c000ea4e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea52:	56                   	push   esi
c000ea53:	68 00 00 00 80       	push   0x80000000
c000ea58:	e8 c9 a4 00 00       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea5d:	83 c4 20             	add    esp,0x20
c000ea60:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea6b:	0f 86 c3 fe ff ff    	jbe    c000e934 <Computer::detectFeatures()+0x36>
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	50                   	push   eax
c000ea75:	55                   	push   ebp
c000ea76:	57                   	push   edi
c000ea77:	56                   	push   esi
c000ea78:	68 01 00 00 80       	push   0x80000001
c000ea7d:	e8 a4 a4 00 00       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea82:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea8c:	83 c4 20             	add    esp,0x20
c000ea8f:	e9 a0 fe ff ff       	jmp    c000e934 <Computer::detectFeatures()+0x36>
c000ea94:	e8 77 85 01 00       	call   c0027010 <absolutelyNoChanceInHell>
c000ea99:	88 c2                	mov    dl,al
c000ea9b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaa1:	c1 e2 07             	shl    edx,0x7
c000eaa4:	83 e0 7f             	and    eax,0x7f
c000eaa7:	09 d0                	or     eax,edx
c000eaa9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaaf:	84 c0                	test   al,al
c000eab1:	0f 89 bb fe ff ff    	jns    c000e972 <Computer::detectFeatures()+0x74>
c000eab7:	e8 34 85 01 00       	call   c0026ff0 <avxDetect>
c000eabc:	83 e0 01             	and    eax,0x1
c000eabf:	c1 e0 05             	shl    eax,0x5
c000eac2:	88 c2                	mov    dl,al
c000eac4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaca:	83 e0 df             	and    eax,0xffffffdf
c000eacd:	09 d0                	or     eax,edx
c000eacf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ead5:	83 c4 1c             	add    esp,0x1c
c000ead8:	5b                   	pop    ebx
c000ead9:	5e                   	pop    esi
c000eada:	5f                   	pop    edi
c000eadb:	5d                   	pop    ebp
c000eadc:	c3                   	ret    
c000eadd:	83 ec 0c             	sub    esp,0xc
c000eae0:	68 00 02 00 00       	push   0x200
c000eae5:	e8 c0 a4 00 00       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c000eaea:	83 c4 10             	add    esp,0x10
c000eaed:	83 e0 01             	and    eax,0x1
c000eaf0:	88 c2                	mov    dl,al
c000eaf2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaf8:	83 e0 fe             	and    eax,0xfffffffe
c000eafb:	09 d0                	or     eax,edx
c000eafd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb03:	e9 1c ff ff ff       	jmp    c000ea24 <Computer::detectFeatures()+0x126>

c000eb08 <Computer::displayFeatures()>:
c000eb08:	53                   	push   ebx
c000eb09:	83 ec 14             	sub    esp,0x14
c000eb0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb10:	68 f9 aa 02 c0       	push   0xc002aaf9
c000eb15:	e8 2c 1b ff ff       	call   c0000646 <hexStrToInt>
c000eb1a:	5a                   	pop    edx
c000eb1b:	59                   	pop    ecx
c000eb1c:	50                   	push   eax
c000eb1d:	68 90 ac 02 c0       	push   0xc002ac90
c000eb22:	e8 78 43 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000eb27:	c7 04 24 fe aa 02 c0 	mov    DWORD PTR [esp],0xc002aafe
c000eb2e:	e8 13 1b ff ff       	call   c0000646 <hexStrToInt>
c000eb33:	5a                   	pop    edx
c000eb34:	59                   	pop    ecx
c000eb35:	50                   	push   eax
c000eb36:	68 b4 ac 02 c0       	push   0xc002acb4
c000eb3b:	e8 5f 43 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000eb40:	c7 04 24 03 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab03
c000eb47:	e8 fa 1a ff ff       	call   c0000646 <hexStrToInt>
c000eb4c:	5a                   	pop    edx
c000eb4d:	59                   	pop    ecx
c000eb4e:	50                   	push   eax
c000eb4f:	68 d8 ac 02 c0       	push   0xc002acd8
c000eb54:	e8 46 43 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000eb59:	c7 04 24 09 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab09
c000eb60:	e8 3a 43 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000eb65:	83 c4 10             	add    esp,0x10
c000eb68:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb6f:	0f 85 73 02 00 00    	jne    c000ede8 <Computer::displayFeatures()+0x2e0>
c000eb75:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000eb7a:	83 ec 08             	sub    esp,0x8
c000eb7d:	50                   	push   eax
c000eb7e:	68 1c ab 02 c0       	push   0xc002ab1c
c000eb83:	e8 17 43 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000eb88:	83 c4 10             	add    esp,0x10
c000eb8b:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb92:	0f 85 8c 02 00 00    	jne    c000ee24 <Computer::displayFeatures()+0x31c>
c000eb98:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000eb9d:	83 ec 08             	sub    esp,0x8
c000eba0:	50                   	push   eax
c000eba1:	68 2d ab 02 c0       	push   0xc002ab2d
c000eba6:	e8 f4 42 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ebab:	83 c4 10             	add    esp,0x10
c000ebae:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000ebb5:	0f 85 5f 02 00 00    	jne    c000ee1a <Computer::displayFeatures()+0x312>
c000ebbb:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ebc0:	83 ec 08             	sub    esp,0x8
c000ebc3:	50                   	push   eax
c000ebc4:	68 3e ab 02 c0       	push   0xc002ab3e
c000ebc9:	e8 d1 42 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ebce:	83 c4 10             	add    esp,0x10
c000ebd1:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ebd8:	0f 85 32 02 00 00    	jne    c000ee10 <Computer::displayFeatures()+0x308>
c000ebde:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ebe3:	83 ec 08             	sub    esp,0x8
c000ebe6:	50                   	push   eax
c000ebe7:	68 4f ab 02 c0       	push   0xc002ab4f
c000ebec:	e8 ae 42 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ebf1:	83 c4 10             	add    esp,0x10
c000ebf4:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebfb:	0f 85 05 02 00 00    	jne    c000ee06 <Computer::displayFeatures()+0x2fe>
c000ec01:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ec06:	83 ec 08             	sub    esp,0x8
c000ec09:	50                   	push   eax
c000ec0a:	68 60 ab 02 c0       	push   0xc002ab60
c000ec0f:	e8 8b 42 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ec14:	83 c4 10             	add    esp,0x10
c000ec17:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec1e:	0f 85 d8 01 00 00    	jne    c000edfc <Computer::displayFeatures()+0x2f4>
c000ec24:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ec29:	83 ec 08             	sub    esp,0x8
c000ec2c:	50                   	push   eax
c000ec2d:	68 71 ab 02 c0       	push   0xc002ab71
c000ec32:	e8 68 42 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec41:	0f 85 ab 01 00 00    	jne    c000edf2 <Computer::displayFeatures()+0x2ea>
c000ec47:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ec4c:	83 ec 08             	sub    esp,0x8
c000ec4f:	50                   	push   eax
c000ec50:	68 82 ab 02 c0       	push   0xc002ab82
c000ec55:	e8 45 42 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ec5a:	83 c4 10             	add    esp,0x10
c000ec5d:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec64:	0f 88 1b 02 00 00    	js     c000ee85 <Computer::displayFeatures()+0x37d>
c000ec6a:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ec6f:	83 ec 08             	sub    esp,0x8
c000ec72:	50                   	push   eax
c000ec73:	68 93 ab 02 c0       	push   0xc002ab93
c000ec78:	e8 22 42 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ec7d:	83 c4 10             	add    esp,0x10
c000ec80:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec87:	0f 85 a1 01 00 00    	jne    c000ee2e <Computer::displayFeatures()+0x326>
c000ec8d:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ec92:	83 ec 08             	sub    esp,0x8
c000ec95:	50                   	push   eax
c000ec96:	68 a4 ab 02 c0       	push   0xc002aba4
c000ec9b:	e8 ff 41 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000eca0:	83 c4 10             	add    esp,0x10
c000eca3:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ecaa:	0f 85 cb 01 00 00    	jne    c000ee7b <Computer::displayFeatures()+0x373>
c000ecb0:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ecb5:	83 ec 08             	sub    esp,0x8
c000ecb8:	50                   	push   eax
c000ecb9:	68 b5 ab 02 c0       	push   0xc002abb5
c000ecbe:	e8 dc 41 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ecc3:	83 c4 10             	add    esp,0x10
c000ecc6:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000eccd:	0f 85 9e 01 00 00    	jne    c000ee71 <Computer::displayFeatures()+0x369>
c000ecd3:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ecd8:	83 ec 08             	sub    esp,0x8
c000ecdb:	50                   	push   eax
c000ecdc:	68 c6 ab 02 c0       	push   0xc002abc6
c000ece1:	e8 b9 41 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ece6:	83 c4 10             	add    esp,0x10
c000ece9:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ecf0:	0f 85 71 01 00 00    	jne    c000ee67 <Computer::displayFeatures()+0x35f>
c000ecf6:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ecfb:	83 ec 08             	sub    esp,0x8
c000ecfe:	50                   	push   eax
c000ecff:	68 d7 ab 02 c0       	push   0xc002abd7
c000ed04:	e8 96 41 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ed09:	83 c4 10             	add    esp,0x10
c000ed0c:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ed13:	0f 85 44 01 00 00    	jne    c000ee5d <Computer::displayFeatures()+0x355>
c000ed19:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ed1e:	83 ec 08             	sub    esp,0x8
c000ed21:	50                   	push   eax
c000ed22:	68 e8 ab 02 c0       	push   0xc002abe8
c000ed27:	e8 73 41 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ed2c:	83 c4 10             	add    esp,0x10
c000ed2f:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed36:	0f 85 17 01 00 00    	jne    c000ee53 <Computer::displayFeatures()+0x34b>
c000ed3c:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ed41:	83 ec 08             	sub    esp,0x8
c000ed44:	50                   	push   eax
c000ed45:	68 f9 ab 02 c0       	push   0xc002abf9
c000ed4a:	e8 50 41 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ed4f:	83 c4 10             	add    esp,0x10
c000ed52:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed59:	0f 85 ea 00 00 00    	jne    c000ee49 <Computer::displayFeatures()+0x341>
c000ed5f:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ed64:	83 ec 08             	sub    esp,0x8
c000ed67:	50                   	push   eax
c000ed68:	68 0a ac 02 c0       	push   0xc002ac0a
c000ed6d:	e8 2d 41 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ed72:	83 c4 10             	add    esp,0x10
c000ed75:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed7c:	0f 88 0d 01 00 00    	js     c000ee8f <Computer::displayFeatures()+0x387>
c000ed82:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000ed87:	83 ec 08             	sub    esp,0x8
c000ed8a:	50                   	push   eax
c000ed8b:	68 1b ac 02 c0       	push   0xc002ac1b
c000ed90:	e8 0a 41 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ed95:	83 c4 10             	add    esp,0x10
c000ed98:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed9f:	0f 85 9a 00 00 00    	jne    c000ee3f <Computer::displayFeatures()+0x337>
c000eda5:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000edaa:	83 ec 08             	sub    esp,0x8
c000edad:	50                   	push   eax
c000edae:	68 2c ac 02 c0       	push   0xc002ac2c
c000edb3:	e8 e7 40 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000edb8:	83 c4 10             	add    esp,0x10
c000edbb:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edc2:	75 74                	jne    c000ee38 <Computer::displayFeatures()+0x330>
c000edc4:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c000edc9:	83 ec 08             	sub    esp,0x8
c000edcc:	50                   	push   eax
c000edcd:	68 3d ac 02 c0       	push   0xc002ac3d
c000edd2:	e8 c8 40 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000edd7:	c7 44 24 20 14 c7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c714
c000eddf:	83 c4 18             	add    esp,0x18
c000ede2:	5b                   	pop    ebx
c000ede3:	e9 b7 40 00 00       	jmp    c0012e9f <Dbg::kprintf(char const*, ...)>
c000ede8:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000eded:	e9 88 fd ff ff       	jmp    c000eb7a <Computer::displayFeatures()+0x72>
c000edf2:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000edf7:	e9 50 fe ff ff       	jmp    c000ec4c <Computer::displayFeatures()+0x144>
c000edfc:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee01:	e9 23 fe ff ff       	jmp    c000ec29 <Computer::displayFeatures()+0x121>
c000ee06:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee0b:	e9 f6 fd ff ff       	jmp    c000ec06 <Computer::displayFeatures()+0xfe>
c000ee10:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee15:	e9 c9 fd ff ff       	jmp    c000ebe3 <Computer::displayFeatures()+0xdb>
c000ee1a:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee1f:	e9 9c fd ff ff       	jmp    c000ebc0 <Computer::displayFeatures()+0xb8>
c000ee24:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee29:	e9 6f fd ff ff       	jmp    c000eb9d <Computer::displayFeatures()+0x95>
c000ee2e:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee33:	e9 5a fe ff ff       	jmp    c000ec92 <Computer::displayFeatures()+0x18a>
c000ee38:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee3d:	eb 8a                	jmp    c000edc9 <Computer::displayFeatures()+0x2c1>
c000ee3f:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee44:	e9 61 ff ff ff       	jmp    c000edaa <Computer::displayFeatures()+0x2a2>
c000ee49:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee4e:	e9 11 ff ff ff       	jmp    c000ed64 <Computer::displayFeatures()+0x25c>
c000ee53:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee58:	e9 e4 fe ff ff       	jmp    c000ed41 <Computer::displayFeatures()+0x239>
c000ee5d:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee62:	e9 b7 fe ff ff       	jmp    c000ed1e <Computer::displayFeatures()+0x216>
c000ee67:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee6c:	e9 8a fe ff ff       	jmp    c000ecfb <Computer::displayFeatures()+0x1f3>
c000ee71:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee76:	e9 5d fe ff ff       	jmp    c000ecd8 <Computer::displayFeatures()+0x1d0>
c000ee7b:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee80:	e9 30 fe ff ff       	jmp    c000ecb5 <Computer::displayFeatures()+0x1ad>
c000ee85:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee8a:	e9 e0 fd ff ff       	jmp    c000ec6f <Computer::displayFeatures()+0x167>
c000ee8f:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c000ee94:	e9 ee fe ff ff       	jmp    c000ed87 <Computer::displayFeatures()+0x27f>
c000ee99:	90                   	nop

c000ee9a <Computer::rdmsr(unsigned int)>:
c000ee9a:	83 ec 0c             	sub    esp,0xc
c000ee9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eea1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eea8:	74 0a                	je     c000eeb4 <Computer::rdmsr(unsigned int)+0x1a>
c000eeaa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eeae:	0f 32                	rdmsr  
c000eeb0:	83 c4 0c             	add    esp,0xc
c000eeb3:	c3                   	ret    
c000eeb4:	83 ec 0c             	sub    esp,0xc
c000eeb7:	68 4e ac 02 c0       	push   0xc002ac4e
c000eebc:	e8 c6 b9 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000eec1:	83 c4 10             	add    esp,0x10
c000eec4:	eb e4                	jmp    c000eeaa <Computer::rdmsr(unsigned int)+0x10>

c000eec6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eec6:	57                   	push   edi
c000eec7:	56                   	push   esi
c000eec8:	52                   	push   edx
c000eec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eecd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eed1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eed5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eedc:	74 0e                	je     c000eeec <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eede:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eee2:	89 f0                	mov    eax,esi
c000eee4:	89 fa                	mov    edx,edi
c000eee6:	0f 30                	wrmsr  
c000eee8:	58                   	pop    eax
c000eee9:	5e                   	pop    esi
c000eeea:	5f                   	pop    edi
c000eeeb:	c3                   	ret    
c000eeec:	83 ec 0c             	sub    esp,0xc
c000eeef:	68 54 ac 02 c0       	push   0xc002ac54
c000eef4:	e8 8e b9 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000eef9:	83 c4 10             	add    esp,0x10
c000eefc:	eb e0                	jmp    c000eede <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eefe <Computer::nmiEnabled()>:
c000eefe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef02:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ef08:	c3                   	ret    
c000ef09:	90                   	nop

c000ef0a <Computer::readCMOS(unsigned char)>:
c000ef0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef0e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef15:	19 c0                	sbb    eax,eax
c000ef17:	83 e0 80             	and    eax,0xffffff80
c000ef1a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef1e:	e6 70                	out    0x70,al
c000ef20:	e4 71                	in     al,0x71
c000ef22:	c3                   	ret    
c000ef23:	90                   	nop

c000ef24 <Computer::enableNMI(bool)>:
c000ef24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef2c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef32:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef3a:	eb ce                	jmp    c000ef0a <Computer::readCMOS(unsigned char)>

c000ef3c <Computer::open(int, int, void*)>:
c000ef3c:	56                   	push   esi
c000ef3d:	53                   	push   ebx
c000ef3e:	83 ec 10             	sub    esp,0x10
c000ef41:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef45:	f6 05 c0 f0 02 c0 04 	test   BYTE PTR ds:0xc002f0c0,0x4
c000ef4c:	68 68 12 00 00       	push   0x1268
c000ef51:	0f 94 05 e4 df 02 c0 	sete   BYTE PTR ds:0xc002dfe4
c000ef58:	e8 97 09 00 00       	call   c000f8f4 <malloc>
c000ef5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef60:	89 c6                	mov    esi,eax
c000ef62:	e8 c7 93 00 00       	call   c001832e <ACPI::ACPI()>
c000ef67:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef6d:	58                   	pop    eax
c000ef6e:	5a                   	pop    edx
c000ef6f:	56                   	push   esi
c000ef70:	53                   	push   ebx
c000ef71:	e8 4a 53 00 00       	call   c00142c0 <Device::addChild(Device*)>
c000ef76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef79:	e8 80 f9 ff ff       	call   c000e8fe <Computer::detectFeatures()>
c000ef7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef81:	e8 82 fb ff ff       	call   c000eb08 <Computer::displayFeatures()>
c000ef86:	59                   	pop    ecx
c000ef87:	5e                   	pop    esi
c000ef88:	6a 01                	push   0x1
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 94 ff ff ff       	call   c000ef24 <Computer::enableNMI(bool)>
c000ef90:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef97:	e8 58 09 00 00       	call   c000f8f4 <malloc>
c000ef9c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef9f:	89 c6                	mov    esi,eax
c000efa1:	e8 bc a0 00 00       	call   c0019062 <CPU::CPU()>
c000efa6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000efac:	58                   	pop    eax
c000efad:	5a                   	pop    edx
c000efae:	56                   	push   esi
c000efaf:	53                   	push   ebx
c000efb0:	e8 0b 53 00 00       	call   c00142c0 <Device::addChild(Device*)>
c000efb5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000efbb:	8b 10                	mov    edx,DWORD PTR [eax]
c000efbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efc1:	6a 00                	push   0x0
c000efc3:	6a 00                	push   0x0
c000efc5:	50                   	push   eax
c000efc6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efc9:	83 c4 20             	add    esp,0x20
c000efcc:	e8 83 58 00 00       	call   c0014854 <setupFPU()>
c000efd1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efd7:	85 c0                	test   eax,eax
c000efd9:	74 1f                	je     c000effa <Computer::open(int, int, void*)+0xbe>
c000efdb:	83 ec 08             	sub    esp,0x8
c000efde:	50                   	push   eax
c000efdf:	53                   	push   ebx
c000efe0:	e8 db 52 00 00       	call   c00142c0 <Device::addChild(Device*)>
c000efe5:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000efeb:	8b 10                	mov    edx,DWORD PTR [eax]
c000efed:	6a 00                	push   0x0
c000efef:	6a 00                	push   0x0
c000eff1:	6a 00                	push   0x0
c000eff3:	50                   	push   eax
c000eff4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eff7:	83 c4 20             	add    esp,0x20
c000effa:	83 ec 0c             	sub    esp,0xc
c000effd:	68 b0 e6 00 c0       	push   0xc000e6b0
c000f002:	e8 11 f5 00 00       	call   c001e518 <setupMultitasking(void (*)())>
c000f007:	83 c4 14             	add    esp,0x14
c000f00a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f00f:	5b                   	pop    ebx
c000f010:	5e                   	pop    esi
c000f011:	c3                   	ret    

c000f012 <Computer::disableNMI()>:
c000f012:	6a 00                	push   0x0
c000f014:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f018:	e8 07 ff ff ff       	call   c000ef24 <Computer::enableNMI(bool)>
c000f01d:	58                   	pop    eax
c000f01e:	5a                   	pop    edx
c000f01f:	c3                   	ret    

c000f020 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f024:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f02b:	19 c0                	sbb    eax,eax
c000f02d:	83 e0 80             	and    eax,0xffffff80
c000f030:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f034:	e6 70                	out    0x70,al
c000f036:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f03a:	e6 71                	out    0x71,al
c000f03c:	c3                   	ret    
c000f03d:	90                   	nop

c000f03e <Computer::handleNMI()>:
c000f03e:	56                   	push   esi
c000f03f:	53                   	push   ebx
c000f040:	83 ec 10             	sub    esp,0x10
c000f043:	e4 92                	in     al,0x92
c000f045:	89 c6                	mov    esi,eax
c000f047:	e4 61                	in     al,0x61
c000f049:	68 5a ac 02 c0       	push   0xc002ac5a
c000f04e:	88 c3                	mov    bl,al
c000f050:	e8 4a 3e 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000f055:	83 c4 10             	add    esp,0x10
c000f058:	83 e6 10             	and    esi,0x10
c000f05b:	75 0d                	jne    c000f06a <Computer::handleNMI()+0x2c>
c000f05d:	f6 c3 40             	test   bl,0x40
c000f060:	75 1d                	jne    c000f07f <Computer::handleNMI()+0x41>
c000f062:	84 db                	test   bl,bl
c000f064:	78 2d                	js     c000f093 <Computer::handleNMI()+0x55>
c000f066:	58                   	pop    eax
c000f067:	5b                   	pop    ebx
c000f068:	5e                   	pop    esi
c000f069:	c3                   	ret    
c000f06a:	83 ec 0c             	sub    esp,0xc
c000f06d:	68 6b ac 02 c0       	push   0xc002ac6b
c000f072:	e8 10 b8 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000f077:	83 c4 10             	add    esp,0x10
c000f07a:	f6 c3 40             	test   bl,0x40
c000f07d:	74 e3                	je     c000f062 <Computer::handleNMI()+0x24>
c000f07f:	83 ec 0c             	sub    esp,0xc
c000f082:	68 78 ac 02 c0       	push   0xc002ac78
c000f087:	e8 fb b7 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000f08c:	83 c4 10             	add    esp,0x10
c000f08f:	84 db                	test   bl,bl
c000f091:	79 d3                	jns    c000f066 <Computer::handleNMI()+0x28>
c000f093:	c7 44 24 10 82 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac82
c000f09b:	5a                   	pop    edx
c000f09c:	5b                   	pop    ebx
c000f09d:	5e                   	pop    esi
c000f09e:	e9 e4 b7 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c000f0a3:	90                   	nop

c000f0a4 <Computer::setDiskActivityLight(int, bool)>:
c000f0a4:	56                   	push   esi
c000f0a5:	53                   	push   ebx
c000f0a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0aa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0af:	77 1b                	ja     c000f0cc <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0b1:	e4 92                	in     al,0x92
c000f0b3:	bb 40 00 00 00       	mov    ebx,0x40
c000f0b8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0bc:	89 da                	mov    edx,ebx
c000f0be:	d3 e2                	shl    edx,cl
c000f0c0:	89 f1                	mov    ecx,esi
c000f0c2:	f7 d2                	not    edx
c000f0c4:	d3 e3                	shl    ebx,cl
c000f0c6:	21 d0                	and    eax,edx
c000f0c8:	09 d8                	or     eax,ebx
c000f0ca:	e6 92                	out    0x92,al
c000f0cc:	5b                   	pop    ebx
c000f0cd:	5e                   	pop    esi
c000f0ce:	c3                   	ret    
c000f0cf:	90                   	nop

c000f0d0 <GDTEntry::setBase(unsigned int)>:
c000f0d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0d8:	89 c1                	mov    ecx,eax
c000f0da:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0de:	c1 e9 10             	shr    ecx,0x10
c000f0e1:	c1 e8 18             	shr    eax,0x18
c000f0e4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0e7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0ea:	c3                   	ret    
c000f0eb:	90                   	nop

c000f0ec <GDTEntry::setLimit(unsigned int)>:
c000f0ec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0f4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0f7:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0fa:	83 e2 f0             	and    edx,0xfffffff0
c000f0fd:	c1 e8 10             	shr    eax,0x10
c000f100:	83 e0 0f             	and    eax,0xf
c000f103:	09 d0                	or     eax,edx
c000f105:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f108:	c3                   	ret    
c000f109:	90                   	nop

c000f10a <GDT::GDT()>:
c000f10a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f10e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f118:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f11e:	90                   	nop
c000f11f:	c3                   	ret    

c000f120 <GDT::addEntry(GDTEntry)>:
c000f120:	53                   	push   ebx
c000f121:	83 ec 0c             	sub    esp,0xc
c000f124:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f128:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f12a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f131:	52                   	push   edx
c000f132:	50                   	push   eax
c000f133:	68 28 ad 02 c0       	push   0xc002ad28
c000f138:	e8 62 3d 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000f13d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f13f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f143:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f147:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f14b:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f14f:	8d 50 01             	lea    edx,[eax+0x1]
c000f152:	c1 e0 03             	shl    eax,0x3
c000f155:	89 13                	mov    DWORD PTR [ebx],edx
c000f157:	83 c4 18             	add    esp,0x18
c000f15a:	5b                   	pop    ebx
c000f15b:	c3                   	ret    

c000f15c <GDT::getNumberOfEntries()>:
c000f15c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f160:	8b 00                	mov    eax,DWORD PTR [eax]
c000f162:	c3                   	ret    
c000f163:	90                   	nop

c000f164 <GDT::flush()>:
c000f164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f168:	8b 10                	mov    edx,DWORD PTR [eax]
c000f16a:	83 c0 04             	add    eax,0x4
c000f16d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f174:	a3 b2 f0 02 c0       	mov    ds:0xc002f0b2,eax
c000f179:	66 89 15 b0 f0 02 c0 	mov    WORD PTR ds:0xc002f0b0,dx
c000f180:	e9 cb 12 ff ff       	jmp    c0000450 <loadGDT>
c000f185:	90                   	nop

c000f186 <GDT::setup()>:
c000f186:	55                   	push   ebp
c000f187:	57                   	push   edi
c000f188:	56                   	push   esi
c000f189:	53                   	push   ebx
c000f18a:	83 ec 3c             	sub    esp,0x3c
c000f18d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f191:	6a 00                	push   0x0
c000f193:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f197:	53                   	push   ebx
c000f198:	e8 33 ff ff ff       	call   c000f0d0 <GDTEntry::setBase(unsigned int)>
c000f19d:	6a 00                	push   0x0
c000f19f:	53                   	push   ebx
c000f1a0:	e8 47 ff ff ff       	call   c000f0ec <GDTEntry::setLimit(unsigned int)>
c000f1a5:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f1ad:	6a 00                	push   0x0
c000f1af:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1b3:	53                   	push   ebx
c000f1b4:	e8 17 ff ff ff       	call   c000f0d0 <GDTEntry::setBase(unsigned int)>
c000f1b9:	68 ff ff ff 00       	push   0xffffff
c000f1be:	53                   	push   ebx
c000f1bf:	e8 28 ff ff ff       	call   c000f0ec <GDTEntry::setLimit(unsigned int)>
c000f1c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1c8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1cd:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f1d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1d6:	83 c4 20             	add    esp,0x20
c000f1d9:	6a 00                	push   0x0
c000f1db:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1df:	53                   	push   ebx
c000f1e0:	e8 eb fe ff ff       	call   c000f0d0 <GDTEntry::setBase(unsigned int)>
c000f1e5:	68 ff ff ff 00       	push   0xffffff
c000f1ea:	53                   	push   ebx
c000f1eb:	e8 fc fe ff ff       	call   c000f0ec <GDTEntry::setLimit(unsigned int)>
c000f1f0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1fc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f200:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f204:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f209:	0d 00 92 c0 00       	or     eax,0xc09200
c000f20e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f212:	89 d8                	mov    eax,ebx
c000f214:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f218:	80 cc 60             	or     ah,0x60
c000f21b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f21f:	83 c4 0c             	add    esp,0xc
c000f222:	89 f8                	mov    eax,edi
c000f224:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f228:	80 cc 60             	or     ah,0x60
c000f22b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f22f:	89 c7                	mov    edi,eax
c000f231:	55                   	push   ebp
c000f232:	e8 e9 fe ff ff       	call   c000f120 <GDT::addEntry(GDTEntry)>
c000f237:	83 c4 0c             	add    esp,0xc
c000f23a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f23e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f242:	55                   	push   ebp
c000f243:	e8 d8 fe ff ff       	call   c000f120 <GDT::addEntry(GDTEntry)>
c000f248:	83 c4 0c             	add    esp,0xc
c000f24b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f24f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f253:	55                   	push   ebp
c000f254:	e8 c7 fe ff ff       	call   c000f120 <GDT::addEntry(GDTEntry)>
c000f259:	83 c4 0c             	add    esp,0xc
c000f25c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f260:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f264:	53                   	push   ebx
c000f265:	51                   	push   ecx
c000f266:	55                   	push   ebp
c000f267:	e8 b4 fe ff ff       	call   c000f120 <GDT::addEntry(GDTEntry)>
c000f26c:	83 c4 0c             	add    esp,0xc
c000f26f:	57                   	push   edi
c000f270:	56                   	push   esi
c000f271:	55                   	push   ebp
c000f272:	e8 a9 fe ff ff       	call   c000f120 <GDT::addEntry(GDTEntry)>
c000f277:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f27a:	e8 e5 fe ff ff       	call   c000f164 <GDT::flush()>
c000f27f:	83 c4 4c             	add    esp,0x4c
c000f282:	5b                   	pop    ebx
c000f283:	5e                   	pop    esi
c000f284:	5f                   	pop    edi
c000f285:	5d                   	pop    ebp
c000f286:	c3                   	ret    

c000f287 <idleFunction(void*)>:
c000f287:	53                   	push   ebx
c000f288:	83 ec 08             	sub    esp,0x8
c000f28b:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000f290:	48                   	dec    eax
c000f291:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000f296:	75 01                	jne    c000f299 <idleFunction(void*)+0x12>
c000f298:	fb                   	sti    
c000f299:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c000f29e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f2a4:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f2ab:	74 3c                	je     c000f2e9 <idleFunction(void*)+0x62>
c000f2ad:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f2b4:	74 33                	je     c000f2e9 <idleFunction(void*)+0x62>
c000f2b6:	31 db                	xor    ebx,ebx
c000f2b8:	52                   	push   edx
c000f2b9:	52                   	push   edx
c000f2ba:	68 e1 00 00 00       	push   0xe1
c000f2bf:	50                   	push   eax
c000f2c0:	e8 d5 fb ff ff       	call   c000ee9a <Computer::rdmsr(unsigned int)>
c000f2c5:	53                   	push   ebx
c000f2c6:	83 e0 02             	and    eax,0x2
c000f2c9:	50                   	push   eax
c000f2ca:	68 e1 00 00 00       	push   0xe1
c000f2cf:	ff 35 a8 f0 02 c0    	push   DWORD PTR ds:0xc002f0a8
c000f2d5:	e8 ec fb ff ff       	call   c000eec6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2da:	83 c4 20             	add    esp,0x20
c000f2dd:	e8 9d 0f ff ff       	call   c000027f <doTPAUSE>
c000f2e2:	e8 b9 9d 01 00       	call   c00290a0 <idleCommon()>
c000f2e7:	eb f4                	jmp    c000f2dd <idleFunction(void*)+0x56>
c000f2e9:	fb                   	sti    
c000f2ea:	f4                   	hlt    
c000f2eb:	e8 b0 9d 01 00       	call   c00290a0 <idleCommon()>
c000f2f0:	eb f7                	jmp    c000f2e9 <idleFunction(void*)+0x62>

c000f2f2 <IDTEntry::IDTEntry(bool)>:
c000f2f2:	83 ec 04             	sub    esp,0x4
c000f2f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2f9:	88 04 24             	mov    BYTE PTR [esp],al
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f30a:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f30e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f312:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f315:	83 e2 f0             	and    edx,0xfffffff0
c000f318:	83 ca 0e             	or     edx,0xe
c000f31b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f31e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f322:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f325:	83 e2 ef             	and    edx,0xffffffef
c000f328:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f32b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f32f:	74 04                	je     c000f335 <IDTEntry::IDTEntry(bool)+0x43>
c000f331:	b2 03                	mov    dl,0x3
c000f333:	eb 02                	jmp    c000f337 <IDTEntry::IDTEntry(bool)+0x45>
c000f335:	b2 00                	mov    dl,0x0
c000f337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f33b:	83 e2 03             	and    edx,0x3
c000f33e:	88 d1                	mov    cl,dl
c000f340:	c1 e1 05             	shl    ecx,0x5
c000f343:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f346:	83 e2 9f             	and    edx,0xffffff9f
c000f349:	09 ca                	or     edx,ecx
c000f34b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f34e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f352:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f355:	83 ca 80             	or     edx,0xffffff80
c000f358:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f35b:	90                   	nop
c000f35c:	83 c4 04             	add    esp,0x4
c000f35f:	c3                   	ret    

c000f360 <IDTEntry::setOffset(unsigned int)>:
c000f360:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f364:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f368:	66 89 02             	mov    WORD PTR [edx],ax
c000f36b:	c1 e8 10             	shr    eax,0x10
c000f36e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f372:	c3                   	ret    
c000f373:	90                   	nop

c000f374 <IDT::IDT()>:
c000f374:	90                   	nop
c000f375:	c3                   	ret    

c000f376 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f37a:	83 c0 30             	add    eax,0x30
c000f37d:	c3                   	ret    

c000f37e <IDT::addEntry(IDTEntry, int)>:
c000f37e:	53                   	push   ebx
c000f37f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f383:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f38b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f38f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f392:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f396:	5b                   	pop    ebx
c000f397:	c3                   	ret    

c000f398 <IDT::addEntry(int, void (*)(), bool)>:
c000f398:	53                   	push   ebx
c000f399:	83 ec 10             	sub    esp,0x10
c000f39c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3a1:	50                   	push   eax
c000f3a2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 46 ff ff ff       	call   c000f2f2 <IDTEntry::IDTEntry(bool)>
c000f3ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3b0:	53                   	push   ebx
c000f3b1:	e8 aa ff ff ff       	call   c000f360 <IDTEntry::setOffset(unsigned int)>
c000f3b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3c6:	e8 b3 ff ff ff       	call   c000f37e <IDT::addEntry(IDTEntry, int)>
c000f3cb:	83 c4 30             	add    esp,0x30
c000f3ce:	5b                   	pop    ebx
c000f3cf:	c3                   	ret    

c000f3d0 <IDT::flush()>:
c000f3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3d4:	66 c7 05 b8 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f0b8,0x7ff
c000f3dd:	a3 ba f0 02 c0       	mov    ds:0xc002f0ba,eax
c000f3e2:	0f 01 1d b8 f0 02 c0 	lidtd  ds:0xc002f0b8
c000f3e9:	c3                   	ret    

c000f3ea <IDT::setup()>:
c000f3ea:	57                   	push   edi
c000f3eb:	56                   	push   esi
c000f3ec:	53                   	push   ebx
c000f3ed:	83 ec 10             	sub    esp,0x10
c000f3f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3f4:	6a 00                	push   0x0
c000f3f6:	68 70 04 00 c0       	push   0xc0000470
c000f3fb:	6a 00                	push   0x0
c000f3fd:	53                   	push   ebx
c000f3fe:	e8 95 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f403:	6a 00                	push   0x0
c000f405:	68 80 04 00 c0       	push   0xc0000480
c000f40a:	6a 01                	push   0x1
c000f40c:	53                   	push   ebx
c000f40d:	e8 86 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f412:	83 c4 20             	add    esp,0x20
c000f415:	6a 00                	push   0x0
c000f417:	68 8a 04 00 c0       	push   0xc000048a
c000f41c:	6a 02                	push   0x2
c000f41e:	53                   	push   ebx
c000f41f:	e8 74 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f424:	6a 00                	push   0x0
c000f426:	68 94 04 00 c0       	push   0xc0000494
c000f42b:	6a 03                	push   0x3
c000f42d:	53                   	push   ebx
c000f42e:	e8 65 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f433:	83 c4 20             	add    esp,0x20
c000f436:	6a 00                	push   0x0
c000f438:	68 9e 04 00 c0       	push   0xc000049e
c000f43d:	6a 04                	push   0x4
c000f43f:	53                   	push   ebx
c000f440:	e8 53 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f445:	6a 00                	push   0x0
c000f447:	68 a8 04 00 c0       	push   0xc00004a8
c000f44c:	6a 05                	push   0x5
c000f44e:	53                   	push   ebx
c000f44f:	e8 44 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f454:	83 c4 20             	add    esp,0x20
c000f457:	6a 00                	push   0x0
c000f459:	68 b2 04 00 c0       	push   0xc00004b2
c000f45e:	6a 06                	push   0x6
c000f460:	53                   	push   ebx
c000f461:	e8 32 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f466:	6a 00                	push   0x0
c000f468:	68 bc 04 00 c0       	push   0xc00004bc
c000f46d:	6a 07                	push   0x7
c000f46f:	53                   	push   ebx
c000f470:	e8 23 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f475:	83 c4 20             	add    esp,0x20
c000f478:	6a 00                	push   0x0
c000f47a:	68 c6 04 00 c0       	push   0xc00004c6
c000f47f:	6a 08                	push   0x8
c000f481:	53                   	push   ebx
c000f482:	e8 11 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f487:	6a 00                	push   0x0
c000f489:	68 ce 04 00 c0       	push   0xc00004ce
c000f48e:	6a 09                	push   0x9
c000f490:	53                   	push   ebx
c000f491:	e8 02 ff ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f496:	83 c4 20             	add    esp,0x20
c000f499:	6a 00                	push   0x0
c000f49b:	68 d8 04 00 c0       	push   0xc00004d8
c000f4a0:	6a 0a                	push   0xa
c000f4a2:	53                   	push   ebx
c000f4a3:	e8 f0 fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f4a8:	6a 00                	push   0x0
c000f4aa:	68 e0 04 00 c0       	push   0xc00004e0
c000f4af:	6a 0b                	push   0xb
c000f4b1:	53                   	push   ebx
c000f4b2:	e8 e1 fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f4b7:	83 c4 20             	add    esp,0x20
c000f4ba:	6a 00                	push   0x0
c000f4bc:	68 e8 04 00 c0       	push   0xc00004e8
c000f4c1:	6a 0c                	push   0xc
c000f4c3:	53                   	push   ebx
c000f4c4:	e8 cf fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f4c9:	6a 00                	push   0x0
c000f4cb:	68 f0 04 00 c0       	push   0xc00004f0
c000f4d0:	6a 0d                	push   0xd
c000f4d2:	53                   	push   ebx
c000f4d3:	e8 c0 fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f4d8:	83 c4 20             	add    esp,0x20
c000f4db:	6a 00                	push   0x0
c000f4dd:	68 f8 04 00 c0       	push   0xc00004f8
c000f4e2:	6a 0e                	push   0xe
c000f4e4:	53                   	push   ebx
c000f4e5:	e8 ae fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f4ea:	6a 00                	push   0x0
c000f4ec:	68 00 05 00 c0       	push   0xc0000500
c000f4f1:	6a 0f                	push   0xf
c000f4f3:	53                   	push   ebx
c000f4f4:	e8 9f fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f4f9:	83 c4 20             	add    esp,0x20
c000f4fc:	6a 00                	push   0x0
c000f4fe:	68 0a 05 00 c0       	push   0xc000050a
c000f503:	6a 10                	push   0x10
c000f505:	53                   	push   ebx
c000f506:	e8 8d fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f50b:	6a 00                	push   0x0
c000f50d:	68 14 05 00 c0       	push   0xc0000514
c000f512:	6a 11                	push   0x11
c000f514:	53                   	push   ebx
c000f515:	e8 7e fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f51a:	83 c4 20             	add    esp,0x20
c000f51d:	6a 00                	push   0x0
c000f51f:	68 1e 05 00 c0       	push   0xc000051e
c000f524:	6a 12                	push   0x12
c000f526:	53                   	push   ebx
c000f527:	e8 6c fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f52c:	6a 01                	push   0x1
c000f52e:	68 b8 05 00 c0       	push   0xc00005b8
c000f533:	6a 60                	push   0x60
c000f535:	53                   	push   ebx
c000f536:	e8 5d fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f53b:	83 c4 20             	add    esp,0x20
c000f53e:	6a 00                	push   0x0
c000f540:	68 bf 05 00 c0       	push   0xc00005bf
c000f545:	6a 20                	push   0x20
c000f547:	53                   	push   ebx
c000f548:	e8 4b fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f54d:	6a 00                	push   0x0
c000f54f:	68 aa 05 00 c0       	push   0xc00005aa
c000f554:	6a 21                	push   0x21
c000f556:	53                   	push   ebx
c000f557:	e8 3c fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f55c:	83 c4 20             	add    esp,0x20
c000f55f:	6a 00                	push   0x0
c000f561:	68 b1 05 00 c0       	push   0xc00005b1
c000f566:	6a 22                	push   0x22
c000f568:	53                   	push   ebx
c000f569:	e8 2a fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f56e:	6a 00                	push   0x0
c000f570:	68 28 05 00 c0       	push   0xc0000528
c000f575:	6a 23                	push   0x23
c000f577:	53                   	push   ebx
c000f578:	e8 1b fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f57d:	83 c4 20             	add    esp,0x20
c000f580:	6a 00                	push   0x0
c000f582:	68 32 05 00 c0       	push   0xc0000532
c000f587:	6a 24                	push   0x24
c000f589:	53                   	push   ebx
c000f58a:	e8 09 fe ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f58f:	6a 00                	push   0x0
c000f591:	68 3c 05 00 c0       	push   0xc000053c
c000f596:	6a 25                	push   0x25
c000f598:	53                   	push   ebx
c000f599:	e8 fa fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f59e:	83 c4 20             	add    esp,0x20
c000f5a1:	6a 00                	push   0x0
c000f5a3:	68 46 05 00 c0       	push   0xc0000546
c000f5a8:	6a 26                	push   0x26
c000f5aa:	53                   	push   ebx
c000f5ab:	e8 e8 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f5b0:	6a 00                	push   0x0
c000f5b2:	68 50 05 00 c0       	push   0xc0000550
c000f5b7:	6a 27                	push   0x27
c000f5b9:	53                   	push   ebx
c000f5ba:	e8 d9 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f5bf:	83 c4 20             	add    esp,0x20
c000f5c2:	6a 00                	push   0x0
c000f5c4:	68 5a 05 00 c0       	push   0xc000055a
c000f5c9:	6a 28                	push   0x28
c000f5cb:	53                   	push   ebx
c000f5cc:	e8 c7 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f5d1:	6a 00                	push   0x0
c000f5d3:	68 64 05 00 c0       	push   0xc0000564
c000f5d8:	6a 29                	push   0x29
c000f5da:	53                   	push   ebx
c000f5db:	e8 b8 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f5e0:	83 c4 20             	add    esp,0x20
c000f5e3:	6a 00                	push   0x0
c000f5e5:	68 6e 05 00 c0       	push   0xc000056e
c000f5ea:	6a 2a                	push   0x2a
c000f5ec:	53                   	push   ebx
c000f5ed:	e8 a6 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f5f2:	6a 00                	push   0x0
c000f5f4:	68 78 05 00 c0       	push   0xc0000578
c000f5f9:	6a 2b                	push   0x2b
c000f5fb:	53                   	push   ebx
c000f5fc:	e8 97 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f601:	83 c4 20             	add    esp,0x20
c000f604:	6a 00                	push   0x0
c000f606:	68 82 05 00 c0       	push   0xc0000582
c000f60b:	6a 2c                	push   0x2c
c000f60d:	53                   	push   ebx
c000f60e:	e8 85 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f613:	6a 00                	push   0x0
c000f615:	68 8c 05 00 c0       	push   0xc000058c
c000f61a:	6a 2d                	push   0x2d
c000f61c:	53                   	push   ebx
c000f61d:	e8 76 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f622:	83 c4 20             	add    esp,0x20
c000f625:	6a 00                	push   0x0
c000f627:	68 96 05 00 c0       	push   0xc0000596
c000f62c:	6a 2e                	push   0x2e
c000f62e:	53                   	push   ebx
c000f62f:	e8 64 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f634:	6a 00                	push   0x0
c000f636:	68 a0 05 00 c0       	push   0xc00005a0
c000f63b:	6a 2f                	push   0x2f
c000f63d:	53                   	push   ebx
c000f63e:	e8 55 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f643:	83 c4 20             	add    esp,0x20
c000f646:	6a 00                	push   0x0
c000f648:	68 f6 05 00 c0       	push   0xc00005f6
c000f64d:	6a 30                	push   0x30
c000f64f:	53                   	push   ebx
c000f650:	e8 43 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f655:	6a 00                	push   0x0
c000f657:	68 00 06 00 c0       	push   0xc0000600
c000f65c:	6a 31                	push   0x31
c000f65e:	53                   	push   ebx
c000f65f:	e8 34 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f664:	83 c4 20             	add    esp,0x20
c000f667:	6a 00                	push   0x0
c000f669:	68 0a 06 00 c0       	push   0xc000060a
c000f66e:	6a 32                	push   0x32
c000f670:	53                   	push   ebx
c000f671:	e8 22 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f676:	6a 00                	push   0x0
c000f678:	68 14 06 00 c0       	push   0xc0000614
c000f67d:	6a 33                	push   0x33
c000f67f:	53                   	push   ebx
c000f680:	e8 13 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f685:	83 c4 20             	add    esp,0x20
c000f688:	6a 00                	push   0x0
c000f68a:	68 1e 06 00 c0       	push   0xc000061e
c000f68f:	6a 34                	push   0x34
c000f691:	53                   	push   ebx
c000f692:	e8 01 fd ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f697:	6a 00                	push   0x0
c000f699:	68 28 06 00 c0       	push   0xc0000628
c000f69e:	6a 35                	push   0x35
c000f6a0:	53                   	push   ebx
c000f6a1:	e8 f2 fc ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f6a6:	83 c4 20             	add    esp,0x20
c000f6a9:	6a 00                	push   0x0
c000f6ab:	68 32 06 00 c0       	push   0xc0000632
c000f6b0:	6a 36                	push   0x36
c000f6b2:	53                   	push   ebx
c000f6b3:	e8 e0 fc ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f6b8:	6a 00                	push   0x0
c000f6ba:	68 3c 06 00 c0       	push   0xc000063c
c000f6bf:	6a 37                	push   0x37
c000f6c1:	53                   	push   ebx
c000f6c2:	e8 d1 fc ff ff       	call   c000f398 <IDT::addEntry(int, void (*)(), bool)>
c000f6c7:	83 c4 1c             	add    esp,0x1c
c000f6ca:	6a 03                	push   0x3
c000f6cc:	6a 02                	push   0x2
c000f6ce:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c000f6d4:	e8 f9 2c 00 00       	call   c00123d2 <VAS::allocatePages(int, int)>
c000f6d9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6e0:	89 c6                	mov    esi,eax
c000f6e2:	e8 0d 02 00 00       	call   c000f8f4 <malloc>
c000f6e7:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6f0:	89 c7                	mov    edi,eax
c000f6f2:	e8 d3 1c 00 00       	call   c00113ca <TSS::TSS()>
c000f6f7:	83 c4 0c             	add    esp,0xc
c000f6fa:	68 c6 04 00 c0       	push   0xc00004c6
c000f6ff:	56                   	push   esi
c000f700:	57                   	push   edi
c000f701:	e8 04 1d 00 00       	call   c001140a <TSS::setup(unsigned long, unsigned long)>
c000f706:	89 c6                	mov    esi,eax
c000f708:	58                   	pop    eax
c000f709:	5a                   	pop    edx
c000f70a:	6a 00                	push   0x0
c000f70c:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f710:	50                   	push   eax
c000f711:	e8 dc fb ff ff       	call   c000f2f2 <IDTEntry::IDTEntry(bool)>
c000f716:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f71a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f71f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f726:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f72c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f730:	80 ce 05             	or     dh,0x5
c000f733:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f736:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f73a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f73e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f741:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f744:	e8 87 fc ff ff       	call   c000f3d0 <IDT::flush()>
c000f749:	83 c4 20             	add    esp,0x20
c000f74c:	5b                   	pop    ebx
c000f74d:	5e                   	pop    esi
c000f74e:	5f                   	pop    edi
c000f74f:	c3                   	ret    

c000f750 <sbrk>:
c000f750:	55                   	push   ebp
c000f751:	57                   	push   edi
c000f752:	56                   	push   esi
c000f753:	53                   	push   ebx
c000f754:	83 ec 1c             	sub    esp,0x1c
c000f757:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f75b:	85 c0                	test   eax,eax
c000f75d:	74 3e                	je     c000f79d <sbrk+0x4d>
c000f75f:	78 43                	js     c000f7a4 <sbrk+0x54>
c000f761:	8b 15 a8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0a8
c000f767:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f76d:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f773:	83 e2 01             	and    edx,0x1
c000f776:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f77a:	8b 0d d4 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfd4
c000f780:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f784:	05 ff 0f 00 00       	add    eax,0xfff
c000f789:	89 c2                	mov    edx,eax
c000f78b:	78 2f                	js     c000f7bc <sbrk+0x6c>
c000f78d:	c1 fa 0c             	sar    edx,0xc
c000f790:	89 d7                	mov    edi,edx
c000f792:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f796:	be 00 00 00 00       	mov    esi,0x0
c000f79b:	eb 36                	jmp    c000f7d3 <sbrk+0x83>
c000f79d:	a1 d4 df 02 c0       	mov    eax,ds:0xc002dfd4
c000f7a2:	eb 73                	jmp    c000f817 <sbrk+0xc7>
c000f7a4:	83 ec 08             	sub    esp,0x8
c000f7a7:	50                   	push   eax
c000f7a8:	68 44 ad 02 c0       	push   0xc002ad44
c000f7ad:	e8 ed 36 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000f7b2:	83 c4 10             	add    esp,0x10
c000f7b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7ba:	eb 5b                	jmp    c000f817 <sbrk+0xc7>
c000f7bc:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7c2:	eb c9                	jmp    c000f78d <sbrk+0x3d>
c000f7c4:	81 05 d4 df 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dfd4,0x1000
c000f7ce:	46                   	inc    esi
c000f7cf:	39 f7                	cmp    edi,esi
c000f7d1:	74 33                	je     c000f806 <sbrk+0xb6>
c000f7d3:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c000f7d9:	8b 2d d4 df 02 c0    	mov    ebp,DWORD PTR ds:0xc002dfd4
c000f7df:	e8 7c 07 00 00       	call   c000ff60 <Phys::allocatePage()>
c000f7e4:	68 01 0c 00 00       	push   0xc01
c000f7e9:	55                   	push   ebp
c000f7ea:	50                   	push   eax
c000f7eb:	53                   	push   ebx
c000f7ec:	e8 df 2a 00 00       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7f1:	83 c4 10             	add    esp,0x10
c000f7f4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7f9:	74 c9                	je     c000f7c4 <sbrk+0x74>
c000f7fb:	8b 1d d4 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfd4
c000f801:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f804:	eb be                	jmp    c000f7c4 <sbrk+0x74>
c000f806:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f80b:	75 12                	jne    c000f81f <sbrk+0xcf>
c000f80d:	0f 20 d8             	mov    eax,cr3
c000f810:	0f 22 d8             	mov    cr3,eax
c000f813:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f817:	83 c4 1c             	add    esp,0x1c
c000f81a:	5b                   	pop    ebx
c000f81b:	5e                   	pop    esi
c000f81c:	5f                   	pop    edi
c000f81d:	5d                   	pop    ebp
c000f81e:	c3                   	ret    
c000f81f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f823:	89 cb                	mov    ebx,ecx
c000f825:	c1 eb 0a             	shr    ebx,0xa
c000f828:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f82e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f838:	c1 e0 0c             	shl    eax,0xc
c000f83b:	01 c8                	add    eax,ecx
c000f83d:	c1 e8 0a             	shr    eax,0xa
c000f840:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f845:	2d 00 00 40 00       	sub    eax,0x400000
c000f84a:	39 c3                	cmp    ebx,eax
c000f84c:	77 c5                	ja     c000f813 <sbrk+0xc3>
c000f84e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f851:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f857:	39 d8                	cmp    eax,ebx
c000f859:	73 f3                	jae    c000f84e <sbrk+0xfe>
c000f85b:	eb b6                	jmp    c000f813 <sbrk+0xc3>

c000f85d <mmap>:
c000f85d:	83 ec 18             	sub    esp,0x18
c000f860:	68 74 ad 02 c0       	push   0xc002ad74
c000f865:	e8 1d b0 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000f86a:	b8 00 00 00 00       	mov    eax,0x0
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <munmap>:
c000f873:	83 ec 18             	sub    esp,0x18
c000f876:	68 79 ad 02 c0       	push   0xc002ad79
c000f87b:	e8 07 b0 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000f880:	b8 00 00 00 00       	mov    eax,0x0
c000f885:	83 c4 1c             	add    esp,0x1c
c000f888:	c3                   	ret    

c000f889 <liballoc_lock()>:
c000f889:	fa                   	cli    
c000f88a:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c000f890:	b8 00 00 00 00       	mov    eax,0x0
c000f895:	c3                   	ret    

c000f896 <liballoc_unlock()>:
c000f896:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c000f89b:	48                   	dec    eax
c000f89c:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c000f8a1:	75 01                	jne    c000f8a4 <liballoc_unlock()+0xe>
c000f8a3:	fb                   	sti    
c000f8a4:	b8 00 00 00 00       	mov    eax,0x0
c000f8a9:	c3                   	ret    

c000f8aa <liballoc_alloc(int)>:
c000f8aa:	83 ec 10             	sub    esp,0x10
c000f8ad:	68 01 08 00 00       	push   0x801
c000f8b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8b6:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c000f8bc:	e8 11 2b 00 00       	call   c00123d2 <VAS::allocatePages(int, int)>
c000f8c1:	83 c4 1c             	add    esp,0x1c
c000f8c4:	c3                   	ret    

c000f8c5 <liballoc_free(void*, int)>:
c000f8c5:	83 ec 14             	sub    esp,0x14
c000f8c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8cc:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c000f8d2:	e8 a5 27 00 00       	call   c001207c <VAS::freeAllocatedPages(unsigned long)>
c000f8d7:	b8 00 00 00 00       	mov    eax,0x0
c000f8dc:	83 c4 1c             	add    esp,0x1c
c000f8df:	c3                   	ret    

c000f8e0 <realloc>:
c000f8e0:	83 ec 14             	sub    esp,0x14
c000f8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8eb:	e8 58 1d ff ff       	call   c0001648 <dlrealloc>
c000f8f0:	83 c4 1c             	add    esp,0x1c
c000f8f3:	c3                   	ret    

c000f8f4 <malloc>:
c000f8f4:	83 ec 18             	sub    esp,0x18
c000f8f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8fb:	e8 0b 18 ff ff       	call   c000110b <dlmalloc>
c000f900:	83 c4 1c             	add    esp,0x1c
c000f903:	c3                   	ret    

c000f904 <free>:
c000f904:	83 ec 18             	sub    esp,0x18
c000f907:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f90b:	e8 a0 14 ff ff       	call   c0000db0 <dlfree>
c000f910:	83 c4 1c             	add    esp,0x1c
c000f913:	c3                   	ret    

c000f914 <rfree>:
c000f914:	83 ec 18             	sub    esp,0x18
c000f917:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f91b:	e8 90 14 ff ff       	call   c0000db0 <dlfree>
c000f920:	83 c4 1c             	add    esp,0x1c
c000f923:	c3                   	ret    

c000f924 <calloc>:
c000f924:	56                   	push   esi
c000f925:	53                   	push   ebx
c000f926:	83 ec 10             	sub    esp,0x10
c000f929:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f92d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f932:	53                   	push   ebx
c000f933:	e8 bc ff ff ff       	call   c000f8f4 <malloc>
c000f938:	89 c6                	mov    esi,eax
c000f93a:	83 c4 0c             	add    esp,0xc
c000f93d:	53                   	push   ebx
c000f93e:	6a 00                	push   0x0
c000f940:	50                   	push   eax
c000f941:	e8 26 0e ff ff       	call   c000076c <memset>
c000f946:	89 f0                	mov    eax,esi
c000f948:	83 c4 14             	add    esp,0x14
c000f94b:	5b                   	pop    ebx
c000f94c:	5e                   	pop    esi
c000f94d:	c3                   	ret    

c000f94e <hwTextMode_loadInData(VgaText*)>:
c000f94e:	55                   	push   ebp
c000f94f:	a1 e0 df 02 c0       	mov    eax,ds:0xc002dfe0
c000f954:	57                   	push   edi
c000f955:	56                   	push   esi
c000f956:	53                   	push   ebx
c000f957:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f95b:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f95e:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f961:	85 d2                	test   edx,edx
c000f963:	7e 29                	jle    c000f98e <hwTextMode_loadInData(VgaText*)+0x40>
c000f965:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f96b:	31 f6                	xor    esi,esi
c000f96d:	29 cd                	sub    ebp,ecx
c000f96f:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f972:	31 c0                	xor    eax,eax
c000f974:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f978:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f97c:	40                   	inc    eax
c000f97d:	83 f8 50             	cmp    eax,0x50
c000f980:	75 f2                	jne    c000f974 <hwTextMode_loadInData(VgaText*)+0x26>
c000f982:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f988:	46                   	inc    esi
c000f989:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f98c:	7f e1                	jg     c000f96f <hwTextMode_loadInData(VgaText*)+0x21>
c000f98e:	5b                   	pop    ebx
c000f98f:	5e                   	pop    esi
c000f990:	5f                   	pop    edi
c000f991:	5d                   	pop    ebp
c000f992:	c3                   	ret    

c000f993 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f993:	55                   	push   ebp
c000f994:	80 3d 40 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f140,0x0
c000f99b:	57                   	push   edi
c000f99c:	56                   	push   esi
c000f99d:	53                   	push   ebx
c000f99e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9a2:	75 44                	jne    c000f9e8 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f9a4:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9a7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9aa:	8b 15 e0 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfe0
c000f9b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f9b4:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9ba:	eb 08                	jmp    c000f9c4 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f9bc:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9bf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9c2:	89 da                	mov    edx,ebx
c000f9c4:	83 e5 0f             	and    ebp,0xf
c000f9c7:	c1 e0 04             	shl    eax,0x4
c000f9ca:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f9cd:	0f b6 c0             	movzx  eax,al
c000f9d0:	41                   	inc    ecx
c000f9d1:	09 e8                	or     eax,ebp
c000f9d3:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f9d7:	c1 e0 08             	shl    eax,0x8
c000f9da:	09 e8                	or     eax,ebp
c000f9dc:	39 fb                	cmp    ebx,edi
c000f9de:	66 89 02             	mov    WORD PTR [edx],ax
c000f9e1:	75 d9                	jne    c000f9bc <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f9e3:	5b                   	pop    ebx
c000f9e4:	5e                   	pop    esi
c000f9e5:	5f                   	pop    edi
c000f9e6:	5d                   	pop    ebp
c000f9e7:	c3                   	ret    
c000f9e8:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f9ef:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f9f6:	31 c0                	xor    eax,eax
c000f9f8:	bd 02 00 00 00       	mov    ebp,0x2
c000f9fd:	eb ab                	jmp    c000f9aa <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f9ff <hwTextMode_showCursor(VgaText*, bool)>:
c000f9ff:	56                   	push   esi
c000fa00:	80 3d 40 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f140,0x0
c000fa07:	53                   	push   ebx
c000fa08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa0c:	75 36                	jne    c000fa44 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000fa0e:	84 c0                	test   al,al
c000fa10:	74 35                	je     c000fa47 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000fa12:	bb d4 03 00 00       	mov    ebx,0x3d4
c000fa17:	b0 0a                	mov    al,0xa
c000fa19:	89 da                	mov    edx,ebx
c000fa1b:	ee                   	out    dx,al
c000fa1c:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa21:	89 ca                	mov    edx,ecx
c000fa23:	ec                   	in     al,dx
c000fa24:	b2 0f                	mov    dl,0xf
c000fa26:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa2a:	83 e0 c0             	and    eax,0xffffffc0
c000fa2d:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000fa30:	09 d0                	or     eax,edx
c000fa32:	89 ca                	mov    edx,ecx
c000fa34:	ee                   	out    dx,al
c000fa35:	b0 0b                	mov    al,0xb
c000fa37:	89 da                	mov    edx,ebx
c000fa39:	ee                   	out    dx,al
c000fa3a:	89 ca                	mov    edx,ecx
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 e0 e0             	and    eax,0xffffffe0
c000fa40:	83 c8 0f             	or     eax,0xf
c000fa43:	ee                   	out    dx,al
c000fa44:	5b                   	pop    ebx
c000fa45:	5e                   	pop    esi
c000fa46:	c3                   	ret    
c000fa47:	b0 0a                	mov    al,0xa
c000fa49:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa4e:	ee                   	out    dx,al
c000fa4f:	b0 20                	mov    al,0x20
c000fa51:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa56:	ee                   	out    dx,al
c000fa57:	5b                   	pop    ebx
c000fa58:	5e                   	pop    esi
c000fa59:	c3                   	ret    

c000fa5a <hwTextMode_update(VgaText*)>:
c000fa5a:	c3                   	ret    

c000fa5b <hwTextMode_updateCursor(VgaText*)>:
c000fa5b:	56                   	push   esi
c000fa5c:	80 3d 40 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f140,0x0
c000fa63:	53                   	push   ebx
c000fa64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa68:	75 36                	jne    c000faa0 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa6a:	be d4 03 00 00       	mov    esi,0x3d4
c000fa6f:	b9 19 00 00 00       	mov    ecx,0x19
c000fa74:	89 f2                	mov    edx,esi
c000fa76:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa79:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa7c:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa7f:	c1 e1 04             	shl    ecx,0x4
c000fa82:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa85:	b0 0f                	mov    al,0xf
c000fa87:	ee                   	out    dx,al
c000fa88:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa8d:	88 c8                	mov    al,cl
c000fa8f:	89 da                	mov    edx,ebx
c000fa91:	ee                   	out    dx,al
c000fa92:	b0 0e                	mov    al,0xe
c000fa94:	89 f2                	mov    edx,esi
c000fa96:	ee                   	out    dx,al
c000fa97:	89 c8                	mov    eax,ecx
c000fa99:	89 da                	mov    edx,ebx
c000fa9b:	66 c1 e8 08          	shr    ax,0x8
c000fa9f:	ee                   	out    dx,al
c000faa0:	5b                   	pop    ebx
c000faa1:	5e                   	pop    esi
c000faa2:	c3                   	ret    

c000faa3 <hwTextMode_disableBlink(VgaText*, bool)>:
c000faa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000faa7:	80 3d 40 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f140,0x0
c000faae:	75 38                	jne    c000fae8 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fab0:	ba da 03 00 00       	mov    edx,0x3da
c000fab5:	84 c0                	test   al,al
c000fab7:	75 18                	jne    c000fad1 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fab9:	ec                   	in     al,dx
c000faba:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fabf:	b0 30                	mov    al,0x30
c000fac1:	89 ca                	mov    edx,ecx
c000fac3:	ee                   	out    dx,al
c000fac4:	ba c1 03 00 00       	mov    edx,0x3c1
c000fac9:	ec                   	in     al,dx
c000faca:	83 c8 08             	or     eax,0x8
c000facd:	89 ca                	mov    edx,ecx
c000facf:	ee                   	out    dx,al
c000fad0:	c3                   	ret    
c000fad1:	ec                   	in     al,dx
c000fad2:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fad7:	b0 30                	mov    al,0x30
c000fad9:	89 ca                	mov    edx,ecx
c000fadb:	ee                   	out    dx,al
c000fadc:	ba c1 03 00 00       	mov    edx,0x3c1
c000fae1:	ec                   	in     al,dx
c000fae2:	83 e0 f7             	and    eax,0xfffffff7
c000fae5:	89 ca                	mov    edx,ecx
c000fae7:	ee                   	out    dx,al
c000fae8:	c3                   	ret    

c000fae9 <hwTextMode_scrollScreen(VgaText*)>:
c000fae9:	55                   	push   ebp
c000faea:	57                   	push   edi
c000faeb:	56                   	push   esi
c000faec:	53                   	push   ebx
c000faed:	83 ec 1c             	sub    esp,0x1c
c000faf0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf4:	80 3d 40 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f140,0x0
c000fafb:	74 0e                	je     c000fb0b <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fafd:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fb04:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fb0b:	a1 e0 df 02 c0       	mov    eax,ds:0xc002dfe0
c000fb10:	bd 02 00 00 00       	mov    ebp,0x2
c000fb15:	05 a0 00 00 00       	add    eax,0xa0
c000fb1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb1e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb22:	31 c0                	xor    eax,eax
c000fb24:	eb 0b                	jmp    c000fb31 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fb26:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb2c:	74 51                	je     c000fb7f <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fb2e:	43                   	inc    ebx
c000fb2f:	89 f0                	mov    eax,esi
c000fb31:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb37:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb3d:	88 13                	mov    BYTE PTR [ebx],dl
c000fb3f:	8d 70 01             	lea    esi,[eax+0x1]
c000fb42:	83 fd 18             	cmp    ebp,0x18
c000fb45:	75 df                	jne    c000fb26 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb47:	a8 01                	test   al,0x1
c000fb49:	75 13                	jne    c000fb5e <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb4b:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb4e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb54:	75 d8                	jne    c000fb2e <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb56:	83 c4 1c             	add    esp,0x1c
c000fb59:	5b                   	pop    ebx
c000fb5a:	5e                   	pop    esi
c000fb5b:	5f                   	pop    edi
c000fb5c:	5d                   	pop    ebp
c000fb5d:	c3                   	ret    
c000fb5e:	83 ec 08             	sub    esp,0x8
c000fb61:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb65:	50                   	push   eax
c000fb66:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb6a:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb6e:	50                   	push   eax
c000fb6f:	e8 0c 0c 00 00       	call   c0010780 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb74:	83 c4 10             	add    esp,0x10
c000fb77:	88 07                	mov    BYTE PTR [edi],al
c000fb79:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb7d:	eb cf                	jmp    c000fb4e <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb7f:	45                   	inc    ebp
c000fb80:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb88:	eb 94                	jmp    c000fb1e <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb8a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb8a:	57                   	push   edi
c000fb8b:	80 3d 40 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f140,0x0
c000fb92:	56                   	push   esi
c000fb93:	53                   	push   ebx
c000fb94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb98:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb9c:	75 62                	jne    c000fc00 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb9e:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fba3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fba8:	83 ec 08             	sub    esp,0x8
c000fbab:	52                   	push   edx
c000fbac:	50                   	push   eax
c000fbad:	e8 ce 0b 00 00       	call   c0010780 <VgaText::combineColours(unsigned char, unsigned char)>
c000fbb2:	5a                   	pop    edx
c000fbb3:	0f b6 c0             	movzx  eax,al
c000fbb6:	59                   	pop    ecx
c000fbb7:	50                   	push   eax
c000fbb8:	0f be c3             	movsx  eax,bl
c000fbbb:	50                   	push   eax
c000fbbc:	e8 65 0c 00 00       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	8b 35 e0 df 02 c0    	mov    esi,DWORD PTR ds:0xc002dfe0
c000fbca:	80 3d 40 f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f140,0x0
c000fbd1:	74 07                	je     c000fbda <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fbd3:	66 0f be c3          	movsx  ax,bl
c000fbd7:	80 cc 02             	or     ah,0x2
c000fbda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbde:	ba 19 00 00 00       	mov    edx,0x19
c000fbe3:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fbe6:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fbe9:	8d 14 92             	lea    edx,[edx+edx*4]
c000fbec:	c1 e1 04             	shl    ecx,0x4
c000fbef:	c1 e2 04             	shl    edx,0x4
c000fbf2:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fbf6:	01 ca                	add    edx,ecx
c000fbf8:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fbfc:	5b                   	pop    ebx
c000fbfd:	5e                   	pop    esi
c000fbfe:	5f                   	pop    edi
c000fbff:	c3                   	ret    
c000fc00:	b8 02 00 00 00       	mov    eax,0x2
c000fc05:	31 d2                	xor    edx,edx
c000fc07:	eb 9f                	jmp    c000fba8 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fc09 <setupTextMode()>:
c000fc09:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fc0e:	83 e0 30             	and    eax,0x30
c000fc11:	66 83 f8 30          	cmp    ax,0x30
c000fc15:	75 11                	jne    c000fc28 <setupTextMode()+0x1f>
c000fc17:	81 2d e0 df 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dfe0,0x8000
c000fc21:	c6 05 40 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f140,0x1
c000fc28:	c7 05 78 f1 02 c0 a3 fa 00 c0 	mov    DWORD PTR ds:0xc002f178,0xc000faa3
c000fc32:	c7 05 64 f1 02 c0 4e f9 00 c0 	mov    DWORD PTR ds:0xc002f164,0xc000f94e
c000fc3c:	c7 05 60 f1 02 c0 93 f9 00 c0 	mov    DWORD PTR ds:0xc002f160,0xc000f993
c000fc46:	c7 05 6c f1 02 c0 e9 fa 00 c0 	mov    DWORD PTR ds:0xc002f16c,0xc000fae9
c000fc50:	c7 05 74 f1 02 c0 ff f9 00 c0 	mov    DWORD PTR ds:0xc002f174,0xc000f9ff
c000fc5a:	c7 05 68 f1 02 c0 5a fa 00 c0 	mov    DWORD PTR ds:0xc002f168,0xc000fa5a
c000fc64:	c7 05 70 f1 02 c0 5b fa 00 c0 	mov    DWORD PTR ds:0xc002f170,0xc000fa5b
c000fc6e:	c7 05 7c f1 02 c0 8a fb 00 c0 	mov    DWORD PTR ds:0xc002f17c,0xc000fb8a
c000fc78:	c3                   	ret    

c000fc79 <kernel_main>:
c000fc79:	57                   	push   edi
c000fc7a:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc7f:	56                   	push   esi
c000fc80:	89 fa                	mov    edx,edi
c000fc82:	53                   	push   ebx
c000fc83:	31 f6                	xor    esi,esi
c000fc85:	83 ec 2c             	sub    esp,0x2c
c000fc88:	89 f0                	mov    eax,esi
c000fc8a:	ee                   	out    dx,al
c000fc8b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc90:	b0 80                	mov    al,0x80
c000fc92:	89 da                	mov    edx,ebx
c000fc94:	ee                   	out    dx,al
c000fc95:	b1 03                	mov    cl,0x3
c000fc97:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc9c:	88 c8                	mov    al,cl
c000fc9e:	ee                   	out    dx,al
c000fc9f:	89 f0                	mov    eax,esi
c000fca1:	89 fa                	mov    edx,edi
c000fca3:	ee                   	out    dx,al
c000fca4:	88 c8                	mov    al,cl
c000fca6:	89 da                	mov    edx,ebx
c000fca8:	ee                   	out    dx,al
c000fca9:	b0 c7                	mov    al,0xc7
c000fcab:	ba fa 03 00 00       	mov    edx,0x3fa
c000fcb0:	ee                   	out    dx,al
c000fcb1:	b0 0b                	mov    al,0xb
c000fcb3:	ba fc 03 00 00       	mov    edx,0x3fc
c000fcb8:	ee                   	out    dx,al
c000fcb9:	68 80 ad 02 c0       	push   0xc002ad80
c000fcbe:	e8 dc 31 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000fcc3:	e8 4a 09 00 00       	call   c0010612 <installVgaTextImplementation()>
c000fcc8:	e8 3c ff ff ff       	call   c000fc09 <setupTextMode()>
c000fccd:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fcd2:	05 ff 0f 00 00       	add    eax,0xfff
c000fcd7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fcdc:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcdf:	e8 f5 03 00 00       	call   c00100d9 <Phys::physicalMemorySetup(unsigned int)>
c000fce4:	e8 6f 1f 00 00       	call   c0011c58 <Virt::virtualMemorySetup()>
c000fce9:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fcef:	83 c4 10             	add    esp,0x10
c000fcf2:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fcf8:	75 0e                	jne    c000fd08 <kernel_main+0x8f>
c000fcfa:	89 d8                	mov    eax,ebx
c000fcfc:	25 48 03 00 00       	and    eax,0x348
c000fd01:	3d 00 03 00 00       	cmp    eax,0x300
c000fd06:	74 10                	je     c000fd18 <kernel_main+0x9f>
c000fd08:	83 ec 0c             	sub    esp,0xc
c000fd0b:	68 15 c7 02 c0       	push   0xc002c715
c000fd10:	e8 72 ab 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	83 ec 0c             	sub    esp,0xc
c000fd1b:	89 1d c0 f0 02 c0    	mov    DWORD PTR ds:0xc002f0c0,ebx
c000fd21:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd25:	53                   	push   ebx
c000fd26:	e8 79 21 00 00       	call   c0011ea4 <VAS::VAS()>
c000fd2b:	89 1d 30 f2 02 c0    	mov    DWORD PTR ds:0xc002f230,ebx
c000fd31:	e8 ea 02 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd36:	c7 04 24 97 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad97
c000fd3d:	e8 5d 31 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000fd42:	e8 90 1f 00 00       	call   c0011cd7 <Virt::swappingSetup()>
c000fd47:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd4e:	e8 a1 fb ff ff       	call   c000f8f4 <malloc>
c000fd53:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd56:	89 c6                	mov    esi,eax
c000fd58:	e8 43 ea ff ff       	call   c000e7a0 <Computer::Computer()>
c000fd5d:	58                   	pop    eax
c000fd5e:	89 35 a8 f0 02 c0    	mov    DWORD PTR ds:0xc002f0a8,esi
c000fd64:	5a                   	pop    edx
c000fd65:	56                   	push   esi
c000fd66:	68 b4 ad 02 c0       	push   0xc002adb4
c000fd6b:	e8 2f 31 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000fd70:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c000fd75:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd77:	6a 00                	push   0x0
c000fd79:	6a 00                	push   0x0
c000fd7b:	6a 00                	push   0x0
c000fd7d:	50                   	push   eax
c000fd7e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd81:	83 c4 14             	add    esp,0x14
c000fd84:	53                   	push   ebx
c000fd85:	e8 ca 23 00 00       	call   c0012154 <VAS::~VAS()>
c000fd8a:	c7 04 24 c7 ad 02 c0 	mov    DWORD PTR [esp],0xc002adc7
c000fd91:	e8 f1 aa 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000fd96:	83 c4 30             	add    esp,0x30
c000fd99:	5b                   	pop    ebx
c000fd9a:	5e                   	pop    esi
c000fd9b:	5f                   	pop    edi
c000fd9c:	c3                   	ret    

c000fd9d <Phys::allocateDMA(unsigned long)>:
c000fd9d:	55                   	push   ebp
c000fd9e:	31 d2                	xor    edx,edx
c000fda0:	57                   	push   edi
c000fda1:	31 ed                	xor    ebp,ebp
c000fda3:	56                   	push   esi
c000fda4:	31 c9                	xor    ecx,ecx
c000fda6:	53                   	push   ebx
c000fda7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdab:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fdb1:	31 c0                	xor    eax,eax
c000fdb3:	c1 ee 0c             	shr    esi,0xc
c000fdb6:	eb 17                	jmp    c000fdcf <Phys::allocateDMA(unsigned long)+0x32>
c000fdb8:	85 c9                	test   ecx,ecx
c000fdba:	75 04                	jne    c000fdc0 <Phys::allocateDMA(unsigned long)+0x23>
c000fdbc:	89 d5                	mov    ebp,edx
c000fdbe:	89 d0                	mov    eax,edx
c000fdc0:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fdc3:	39 de                	cmp    esi,ebx
c000fdc5:	74 20                	je     c000fde7 <Phys::allocateDMA(unsigned long)+0x4a>
c000fdc7:	42                   	inc    edx
c000fdc8:	89 d9                	mov    ecx,ebx
c000fdca:	83 fa 2f             	cmp    edx,0x2f
c000fdcd:	7f 11                	jg     c000fde0 <Phys::allocateDMA(unsigned long)+0x43>
c000fdcf:	80 ba 00 f1 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0f00],0x0
c000fdd6:	74 e0                	je     c000fdb8 <Phys::allocateDMA(unsigned long)+0x1b>
c000fdd8:	31 c9                	xor    ecx,ecx
c000fdda:	42                   	inc    edx
c000fddb:	83 fa 2f             	cmp    edx,0x2f
c000fdde:	7e ef                	jle    c000fdcf <Phys::allocateDMA(unsigned long)+0x32>
c000fde0:	5b                   	pop    ebx
c000fde1:	31 c0                	xor    eax,eax
c000fde3:	5e                   	pop    esi
c000fde4:	5f                   	pop    edi
c000fde5:	5d                   	pop    ebp
c000fde6:	c3                   	ret    
c000fde7:	8d 14 30             	lea    edx,[eax+esi*1]
c000fdea:	89 d7                	mov    edi,edx
c000fdec:	4f                   	dec    edi
c000fded:	79 03                	jns    c000fdf2 <Phys::allocateDMA(unsigned long)+0x55>
c000fdef:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fdf2:	c1 ff 04             	sar    edi,0x4
c000fdf5:	89 c2                	mov    edx,eax
c000fdf7:	c1 fa 04             	sar    edx,0x4
c000fdfa:	39 fa                	cmp    edx,edi
c000fdfc:	75 2f                	jne    c000fe2d <Phys::allocateDMA(unsigned long)+0x90>
c000fdfe:	85 db                	test   ebx,ebx
c000fe00:	74 1a                	je     c000fe1c <Phys::allocateDMA(unsigned long)+0x7f>
c000fe02:	be 00 f1 02 c0       	mov    esi,0xc002f100
c000fe07:	8d 90 00 f1 02 c0    	lea    edx,[eax-0x3ffd0f00]
c000fe0d:	f7 d6                	not    esi
c000fe0f:	29 c6                	sub    esi,eax
c000fe11:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe14:	42                   	inc    edx
c000fe15:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fe18:	39 d9                	cmp    ecx,ebx
c000fe1a:	7f f5                	jg     c000fe11 <Phys::allocateDMA(unsigned long)+0x74>
c000fe1c:	85 ff                	test   edi,edi
c000fe1e:	74 13                	je     c000fe33 <Phys::allocateDMA(unsigned long)+0x96>
c000fe20:	5b                   	pop    ebx
c000fe21:	05 50 20 0c 00       	add    eax,0xc2050
c000fe26:	5e                   	pop    esi
c000fe27:	c1 e0 0c             	shl    eax,0xc
c000fe2a:	5f                   	pop    edi
c000fe2b:	5d                   	pop    ebp
c000fe2c:	c3                   	ret    
c000fe2d:	89 ea                	mov    edx,ebp
c000fe2f:	31 c9                	xor    ecx,ecx
c000fe31:	eb a7                	jmp    c000fdda <Phys::allocateDMA(unsigned long)+0x3d>
c000fe33:	5b                   	pop    ebx
c000fe34:	c1 e0 0c             	shl    eax,0xc
c000fe37:	5e                   	pop    esi
c000fe38:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe3d:	5f                   	pop    edi
c000fe3e:	5d                   	pop    ebp
c000fe3f:	c3                   	ret    

c000fe40 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe48:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe4e:	c1 e9 0c             	shr    ecx,0xc
c000fe51:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe56:	76 25                	jbe    c000fe7d <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe58:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe5d:	c1 e8 0c             	shr    eax,0xc
c000fe60:	8d 50 10             	lea    edx,[eax+0x10]
c000fe63:	85 c9                	test   ecx,ecx
c000fe65:	74 15                	je     c000fe7c <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe67:	8d 82 00 f1 02 c0    	lea    eax,[edx-0x3ffd0f00]
c000fe6d:	8d 94 11 00 f1 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0f00]
c000fe74:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe77:	40                   	inc    eax
c000fe78:	39 d0                	cmp    eax,edx
c000fe7a:	75 f8                	jne    c000fe74 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe7c:	c3                   	ret    
c000fe7d:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe83:	c1 ea 0c             	shr    edx,0xc
c000fe86:	eb db                	jmp    c000fe63 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe88 <Phys::setPageState(unsigned long, bool)>:
c000fe88:	56                   	push   esi
c000fe89:	ba 01 00 00 00       	mov    edx,0x1
c000fe8e:	53                   	push   ebx
c000fe8f:	8b 35 d8 df 02 c0    	mov    esi,DWORD PTR ds:0xc002dfd8
c000fe95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe9d:	89 c8                	mov    eax,ecx
c000fe9f:	83 e1 07             	and    ecx,0x7
c000fea2:	c1 e8 03             	shr    eax,0x3
c000fea5:	d3 e3                	shl    ebx,cl
c000fea7:	01 c6                	add    esi,eax
c000fea9:	d3 e2                	shl    edx,cl
c000feab:	f7 d2                	not    edx
c000fead:	20 16                	and    BYTE PTR [esi],dl
c000feaf:	03 05 d8 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfd8
c000feb5:	08 18                	or     BYTE PTR [eax],bl
c000feb7:	5b                   	pop    ebx
c000feb8:	5e                   	pop    esi
c000feb9:	c3                   	ret    

c000feba <Phys::getPageState(unsigned long)>:
c000feba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000febe:	8b 15 d8 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfd8
c000fec4:	89 c8                	mov    eax,ecx
c000fec6:	83 e1 07             	and    ecx,0x7
c000fec9:	c1 e8 03             	shr    eax,0x3
c000fecc:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fed0:	d3 f8                	sar    eax,cl
c000fed2:	83 e0 01             	and    eax,0x1
c000fed5:	c3                   	ret    

c000fed6 <Phys::freePage(unsigned long)>:
c000fed6:	53                   	push   ebx
c000fed7:	83 ec 08             	sub    esp,0x8
c000feda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fede:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fee4:	76 57                	jbe    c000ff3d <Phys::freePage(unsigned long)+0x67>
c000fee6:	c1 eb 0c             	shr    ebx,0xc
c000fee9:	53                   	push   ebx
c000feea:	e8 cb ff ff ff       	call   c000feba <Phys::getPageState(unsigned long)>
c000feef:	5a                   	pop    edx
c000fef0:	84 c0                	test   al,al
c000fef2:	74 5b                	je     c000ff4f <Phys::freePage(unsigned long)+0x79>
c000fef4:	a1 f0 f0 02 c0       	mov    eax,ds:0xc002f0f0
c000fef9:	48                   	dec    eax
c000fefa:	a3 f0 f0 02 c0       	mov    ds:0xc002f0f0,eax
c000feff:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff02:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff05:	c1 e0 02             	shl    eax,0x2
c000ff08:	99                   	cdq    
c000ff09:	f7 3d f4 f0 02 c0    	idiv   DWORD PTR ds:0xc002f0f4
c000ff0f:	39 05 ec f0 02 c0    	cmp    DWORD PTR ds:0xc002f0ec,eax
c000ff15:	75 13                	jne    c000ff2a <Phys::freePage(unsigned long)+0x54>
c000ff17:	83 ec 08             	sub    esp,0x8
c000ff1a:	6a 00                	push   0x0
c000ff1c:	53                   	push   ebx
c000ff1d:	e8 66 ff ff ff       	call   c000fe88 <Phys::setPageState(unsigned long, bool)>
c000ff22:	83 c4 10             	add    esp,0x10
c000ff25:	83 c4 08             	add    esp,0x8
c000ff28:	5b                   	pop    ebx
c000ff29:	c3                   	ret    
c000ff2a:	83 ec 0c             	sub    esp,0xc
c000ff2d:	a3 ec f0 02 c0       	mov    ds:0xc002f0ec,eax
c000ff32:	50                   	push   eax
c000ff33:	e8 08 0a 00 00       	call   c0010940 <VgaText::updateRAMUsageDisplay(int)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	eb da                	jmp    c000ff17 <Phys::freePage(unsigned long)+0x41>
c000ff3d:	68 00 10 00 00       	push   0x1000
c000ff42:	53                   	push   ebx
c000ff43:	e8 f8 fe ff ff       	call   c000fe40 <Phys::freeDMA(unsigned long, unsigned long)>
c000ff48:	59                   	pop    ecx
c000ff49:	5b                   	pop    ebx
c000ff4a:	83 c4 08             	add    esp,0x8
c000ff4d:	5b                   	pop    ebx
c000ff4e:	c3                   	ret    
c000ff4f:	c7 44 24 10 e2 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ade2
c000ff57:	83 c4 08             	add    esp,0x8
c000ff5a:	5b                   	pop    ebx
c000ff5b:	e9 27 a9 00 00       	jmp    c001a887 <Krnl::panic(char const*)>

c000ff60 <Phys::allocatePage()>:
c000ff60:	56                   	push   esi
c000ff61:	53                   	push   ebx
c000ff62:	51                   	push   ecx
c000ff63:	8b 35 e4 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0e4
c000ff69:	89 f3                	mov    ebx,esi
c000ff6b:	eb 0a                	jmp    c000ff77 <Phys::allocatePage()+0x17>
c000ff6d:	89 1d e4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e4,ebx
c000ff73:	39 de                	cmp    esi,ebx
c000ff75:	74 24                	je     c000ff9b <Phys::allocatePage()+0x3b>
c000ff77:	53                   	push   ebx
c000ff78:	e8 3d ff ff ff       	call   c000feba <Phys::getPageState(unsigned long)>
c000ff7d:	5a                   	pop    edx
c000ff7e:	84 c0                	test   al,al
c000ff80:	74 77                	je     c000fff9 <Phys::allocatePage()+0x99>
c000ff82:	43                   	inc    ebx
c000ff83:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff89:	75 e2                	jne    c000ff6d <Phys::allocatePage()+0xd>
c000ff8b:	31 db                	xor    ebx,ebx
c000ff8d:	c7 05 e4 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f0e4,0x0
c000ff97:	39 de                	cmp    esi,ebx
c000ff99:	75 dc                	jne    c000ff77 <Phys::allocatePage()+0x17>
c000ff9b:	83 ec 0c             	sub    esp,0xc
c000ff9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffa6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffac:	e8 1b 2c 00 00       	call   c0012bcc <VAS::scanForEviction()>
c000ffb1:	83 c4 10             	add    esp,0x10
c000ffb4:	85 c0                	test   eax,eax
c000ffb6:	75 76                	jne    c001002e <Phys::allocatePage()+0xce>
c000ffb8:	83 ec 0c             	sub    esp,0xc
c000ffbb:	68 f8 ad 02 c0       	push   0xc002adf8
c000ffc0:	e8 da 2e 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c000ffc5:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ffcc:	e8 cc fd ff ff       	call   c000fd9d <Phys::allocateDMA(unsigned long)>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	85 c0                	test   eax,eax
c000ffd6:	75 56                	jne    c001002e <Phys::allocatePage()+0xce>
c000ffd8:	83 ec 0c             	sub    esp,0xc
c000ffdb:	68 09 ae 02 c0       	push   0xc002ae09
c000ffe0:	e8 a2 a8 00 00       	call   c001a887 <Krnl::panic(char const*)>
c000ffe5:	83 c4 10             	add    esp,0x10
c000ffe8:	8b 1d e4 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e4
c000ffee:	53                   	push   ebx
c000ffef:	e8 c6 fe ff ff       	call   c000feba <Phys::getPageState(unsigned long)>
c000fff4:	5a                   	pop    edx
c000fff5:	84 c0                	test   al,al
c000fff7:	75 89                	jne    c000ff82 <Phys::allocatePage()+0x22>
c000fff9:	6a 01                	push   0x1
c000fffb:	53                   	push   ebx
c000fffc:	e8 87 fe ff ff       	call   c000fe88 <Phys::setPageState(unsigned long, bool)>
c0010001:	a1 f0 f0 02 c0       	mov    eax,ds:0xc002f0f0
c0010006:	59                   	pop    ecx
c0010007:	40                   	inc    eax
c0010008:	5b                   	pop    ebx
c0010009:	a3 f0 f0 02 c0       	mov    ds:0xc002f0f0,eax
c001000e:	8d 04 80             	lea    eax,[eax+eax*4]
c0010011:	8d 04 80             	lea    eax,[eax+eax*4]
c0010014:	c1 e0 02             	shl    eax,0x2
c0010017:	99                   	cdq    
c0010018:	f7 3d f4 f0 02 c0    	idiv   DWORD PTR ds:0xc002f0f4
c001001e:	39 05 ec f0 02 c0    	cmp    DWORD PTR ds:0xc002f0ec,eax
c0010024:	75 0c                	jne    c0010032 <Phys::allocatePage()+0xd2>
c0010026:	a1 e4 f0 02 c0       	mov    eax,ds:0xc002f0e4
c001002b:	c1 e0 0c             	shl    eax,0xc
c001002e:	5a                   	pop    edx
c001002f:	5b                   	pop    ebx
c0010030:	5e                   	pop    esi
c0010031:	c3                   	ret    
c0010032:	83 ec 0c             	sub    esp,0xc
c0010035:	a3 ec f0 02 c0       	mov    ds:0xc002f0ec,eax
c001003a:	50                   	push   eax
c001003b:	e8 00 09 00 00       	call   c0010940 <VgaText::updateRAMUsageDisplay(int)>
c0010040:	83 c4 10             	add    esp,0x10
c0010043:	eb e1                	jmp    c0010026 <Phys::allocatePage()+0xc6>

c0010045 <Phys::allocateContiguousPages(int)>:
c0010045:	57                   	push   edi
c0010046:	56                   	push   esi
c0010047:	53                   	push   ebx
c0010048:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001004c:	fa                   	cli    
c001004d:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c0010053:	31 db                	xor    ebx,ebx
c0010055:	85 db                	test   ebx,ebx
c0010057:	75 11                	jne    c001006a <Phys::allocateContiguousPages(int)+0x25>
c0010059:	e8 02 ff ff ff       	call   c000ff60 <Phys::allocatePage()>
c001005e:	83 fe 01             	cmp    esi,0x1
c0010061:	89 c7                	mov    edi,eax
c0010063:	74 21                	je     c0010086 <Phys::allocateContiguousPages(int)+0x41>
c0010065:	bb 01 00 00 00       	mov    ebx,0x1
c001006a:	e8 f1 fe ff ff       	call   c000ff60 <Phys::allocatePage()>
c001006f:	89 da                	mov    edx,ebx
c0010071:	c1 e2 0c             	shl    edx,0xc
c0010074:	01 fa                	add    edx,edi
c0010076:	39 c2                	cmp    edx,eax
c0010078:	74 20                	je     c001009a <Phys::allocateContiguousPages(int)+0x55>
c001007a:	bb 01 00 00 00       	mov    ebx,0x1
c001007f:	89 c7                	mov    edi,eax
c0010081:	83 fe 01             	cmp    esi,0x1
c0010084:	75 e4                	jne    c001006a <Phys::allocateContiguousPages(int)+0x25>
c0010086:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001008b:	48                   	dec    eax
c001008c:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0010091:	75 01                	jne    c0010094 <Phys::allocateContiguousPages(int)+0x4f>
c0010093:	fb                   	sti    
c0010094:	89 f8                	mov    eax,edi
c0010096:	5b                   	pop    ebx
c0010097:	5e                   	pop    esi
c0010098:	5f                   	pop    edi
c0010099:	c3                   	ret    
c001009a:	43                   	inc    ebx
c001009b:	39 f3                	cmp    ebx,esi
c001009d:	75 b6                	jne    c0010055 <Phys::allocateContiguousPages(int)+0x10>
c001009f:	eb e5                	jmp    c0010086 <Phys::allocateContiguousPages(int)+0x41>

c00100a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100a1:	56                   	push   esi
c00100a2:	53                   	push   ebx
c00100a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100a7:	39 1d e8 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e8,ebx
c00100ad:	73 06                	jae    c00100b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100af:	89 1d e8 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e8,ebx
c00100b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100b9:	c1 eb 0c             	shr    ebx,0xc
c00100bc:	c1 e8 0c             	shr    eax,0xc
c00100bf:	39 d8                	cmp    eax,ebx
c00100c1:	73 13                	jae    c00100d6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100c3:	6a 00                	push   0x0
c00100c5:	8d 70 01             	lea    esi,[eax+0x1]
c00100c8:	50                   	push   eax
c00100c9:	e8 ba fd ff ff       	call   c000fe88 <Phys::setPageState(unsigned long, bool)>
c00100ce:	5a                   	pop    edx
c00100cf:	89 f0                	mov    eax,esi
c00100d1:	59                   	pop    ecx
c00100d2:	39 f3                	cmp    ebx,esi
c00100d4:	75 ed                	jne    c00100c3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100d6:	5b                   	pop    ebx
c00100d7:	5e                   	pop    esi
c00100d8:	c3                   	ret    

c00100d9 <Phys::physicalMemorySetup(unsigned int)>:
c00100d9:	55                   	push   ebp
c00100da:	57                   	push   edi
c00100db:	56                   	push   esi
c00100dc:	53                   	push   ebx
c00100dd:	31 db                	xor    ebx,ebx
c00100df:	83 ec 40             	sub    esp,0x40
c00100e2:	6a 30                	push   0x30
c00100e4:	6a 00                	push   0x0
c00100e6:	68 00 f1 02 c0       	push   0xc002f100
c00100eb:	e8 7c 06 ff ff       	call   c000076c <memset>
c00100f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100f9:	05 00 10 00 00       	add    eax,0x1000
c00100fe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010102:	83 c4 10             	add    esp,0x10
c0010105:	83 ec 08             	sub    esp,0x8
c0010108:	6a 01                	push   0x1
c001010a:	53                   	push   ebx
c001010b:	43                   	inc    ebx
c001010c:	e8 77 fd ff ff       	call   c000fe88 <Phys::setPageState(unsigned long, bool)>
c0010111:	83 c4 10             	add    esp,0x10
c0010114:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001011a:	75 e9                	jne    c0010105 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001011c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010123:	66 85 c0             	test   ax,ax
c0010126:	0f 84 8e 01 00 00    	je     c00102ba <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001012c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010130:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010138:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001013c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010141:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010145:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001014d:	eb 15                	jmp    c0010164 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001014f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010153:	83 c3 18             	add    ebx,0x18
c0010156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001015a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001015e:	0f 84 66 01 00 00    	je     c00102ca <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010164:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010167:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001016a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001016d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010171:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010175:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010177:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001017a:	01 f0                	add    eax,esi
c001017c:	55                   	push   ebp
c001017d:	11 fa                	adc    edx,edi
c001017f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010187:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001018b:	56                   	push   esi
c001018c:	68 44 ae 02 c0       	push   0xc002ae44
c0010191:	e8 09 2d 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0010196:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001019a:	83 c4 10             	add    esp,0x10
c001019d:	09 f8                	or     eax,edi
c001019f:	0f 85 25 01 00 00    	jne    c00102ca <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101a5:	4d                   	dec    ebp
c00101a6:	75 a7                	jne    c001014f <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101a8:	ba 00 00 08 00       	mov    edx,0x80000
c00101ad:	89 c1                	mov    ecx,eax
c00101af:	39 f2                	cmp    edx,esi
c00101b1:	19 f9                	sbb    ecx,edi
c00101b3:	0f 82 a7 00 00 00    	jb     c0010260 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101b9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101bd:	89 c1                	mov    ecx,eax
c00101bf:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101c3:	0f 83 97 00 00 00    	jae    c0010260 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101c9:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101d2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101d6:	39 fa                	cmp    edx,edi
c00101d8:	19 e8                	sbb    eax,ebp
c00101da:	0f 82 14 01 00 00    	jb     c00102f4 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101e4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101e8:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101ee:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101f3:	83 d5 ff             	adc    ebp,0xffffffff
c00101f6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101fa:	31 c0                	xor    eax,eax
c00101fc:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010200:	39 fa                	cmp    edx,edi
c0010202:	89 c1                	mov    ecx,eax
c0010204:	19 e9                	sbb    ecx,ebp
c0010206:	0f 83 43 ff ff ff    	jae    c001014f <Phys::physicalMemorySetup(unsigned int)+0x76>
c001020c:	be 00 00 08 00       	mov    esi,0x80000
c0010211:	50                   	push   eax
c0010212:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010216:	57                   	push   edi
c0010217:	56                   	push   esi
c0010218:	68 68 ae 02 c0       	push   0xc002ae68
c001021d:	e8 7d 2c 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0010222:	5a                   	pop    edx
c0010223:	59                   	pop    ecx
c0010224:	57                   	push   edi
c0010225:	56                   	push   esi
c0010226:	e8 76 fe ff ff       	call   c00100a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001022b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001022f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010233:	83 c4 0c             	add    esp,0xc
c0010236:	0f ac d0 0c          	shrd   eax,edx,0xc
c001023a:	03 05 f4 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f0f4
c0010240:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010247:	a3 f4 f0 02 c0       	mov    ds:0xc002f0f4,eax
c001024c:	52                   	push   edx
c001024d:	50                   	push   eax
c001024e:	68 25 ae 02 c0       	push   0xc002ae25
c0010253:	e8 47 2c 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0010258:	83 c4 10             	add    esp,0x10
c001025b:	e9 ef fe ff ff       	jmp    c001014f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010260:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010264:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001026c:	39 ea                	cmp    edx,ebp
c001026e:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010272:	0f 82 d7 fe ff ff    	jb     c001014f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010278:	ba ff 1f 00 00       	mov    edx,0x1fff
c001027d:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010281:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010285:	0f 83 c4 fe ff ff    	jae    c001014f <Phys::physicalMemorySetup(unsigned int)+0x76>
c001028b:	39 ee                	cmp    esi,ebp
c001028d:	89 f8                	mov    eax,edi
c001028f:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010293:	0f 83 78 ff ff ff    	jae    c0010211 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010299:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001029d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102a1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102a5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102a9:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102b5:	e9 57 ff ff ff       	jmp    c0010211 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102ba:	83 ec 0c             	sub    esp,0xc
c00102bd:	68 17 ae 02 c0       	push   0xc002ae17
c00102c2:	e8 c0 a5 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00102c7:	83 c4 10             	add    esp,0x10
c00102ca:	bb 40 01 00 00       	mov    ebx,0x140
c00102cf:	83 ec 08             	sub    esp,0x8
c00102d2:	6a 00                	push   0x0
c00102d4:	53                   	push   ebx
c00102d5:	43                   	inc    ebx
c00102d6:	e8 ad fb ff ff       	call   c000fe88 <Phys::setPageState(unsigned long, bool)>
c00102db:	ff 05 f4 f0 02 c0    	inc    DWORD PTR ds:0xc002f0f4
c00102e1:	83 c4 10             	add    esp,0x10
c00102e4:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102ea:	75 e3                	jne    c00102cf <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ec:	83 c4 3c             	add    esp,0x3c
c00102ef:	5b                   	pop    ebx
c00102f0:	5e                   	pop    esi
c00102f1:	5f                   	pop    edi
c00102f2:	5d                   	pop    ebp
c00102f3:	c3                   	ret    
c00102f4:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010304:	e9 d7 fe ff ff       	jmp    c00101e0 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010309:	90                   	nop

c001030a <Pipe::isAtty()>:
c001030a:	31 c0                	xor    eax,eax
c001030c:	c3                   	ret    
c001030d:	90                   	nop

c001030e <Pipe::~Pipe()>:
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	ba d4 ae 02 c0       	mov    edx,0xc002aed4
c0010316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001031a:	89 10                	mov    DWORD PTR [eax],edx
c001031c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010320:	83 ec 0c             	sub    esp,0xc
c0010323:	50                   	push   eax
c0010324:	e8 0f 15 00 00       	call   c0011838 <UnixFile::~UnixFile()>
c0010329:	83 c4 10             	add    esp,0x10
c001032c:	90                   	nop
c001032d:	83 c4 0c             	add    esp,0xc
c0010330:	c3                   	ret    
c0010331:	90                   	nop

c0010332 <Pipe::~Pipe()>:
c0010332:	83 ec 0c             	sub    esp,0xc
c0010335:	83 ec 0c             	sub    esp,0xc
c0010338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001033c:	e8 cd ff ff ff       	call   c001030e <Pipe::~Pipe()>
c0010341:	83 c4 10             	add    esp,0x10
c0010344:	83 ec 08             	sub    esp,0x8
c0010347:	6a 20                	push   0x20
c0010349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001034d:	e8 6d 2a 00 00       	call   c0012dbf <operator delete(void*, unsigned long)>
c0010352:	83 c4 10             	add    esp,0x10
c0010355:	83 c4 0c             	add    esp,0xc
c0010358:	c3                   	ret    
c0010359:	90                   	nop

c001035a <Pipe::read(unsigned long long, void*, int*)>:
c001035a:	55                   	push   ebp
c001035b:	57                   	push   edi
c001035c:	56                   	push   esi
c001035d:	53                   	push   ebx
c001035e:	83 ec 1c             	sub    esp,0x1c
c0010361:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010365:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010369:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001036d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010370:	89 c8                	mov    eax,ecx
c0010372:	99                   	cdq    
c0010373:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010377:	74 24                	je     c001039d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010379:	39 f9                	cmp    ecx,edi
c001037b:	89 d1                	mov    ecx,edx
c001037d:	19 f1                	sbb    ecx,esi
c001037f:	73 1c                	jae    c001039d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010381:	fa                   	cli    
c0010382:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c0010388:	e8 ad e2 00 00       	call   c001e63a <schedule()>
c001038d:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0010392:	48                   	dec    eax
c0010393:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0010398:	75 d3                	jne    c001036d <Pipe::read(unsigned long long, void*, int*)+0x13>
c001039a:	fb                   	sti    
c001039b:	eb d0                	jmp    c001036d <Pipe::read(unsigned long long, void*, int*)+0x13>
c001039d:	39 f8                	cmp    eax,edi
c001039f:	89 d1                	mov    ecx,edx
c00103a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00103a4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00103a8:	19 f1                	sbb    ecx,esi
c00103aa:	73 07                	jae    c00103b3 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00103ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00103af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103b3:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00103b6:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00103b9:	29 f7                	sub    edi,esi
c00103bb:	89 f8                	mov    eax,edi
c00103bd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00103c1:	99                   	cdq    
c00103c2:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00103c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103c9:	19 d0                	sbb    eax,edx
c00103cb:	73 07                	jae    c00103d4 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00103cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00103d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103d4:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00103d7:	89 ea                	mov    edx,ebp
c00103d9:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00103dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00103e2:	74 0d                	je     c00103f1 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00103e4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00103e7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00103eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103f1:	85 d2                	test   edx,edx
c00103f3:	74 11                	je     c0010406 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00103f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103f9:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00103fc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010400:	89 d1                	mov    ecx,edx
c0010402:	89 c7                	mov    edi,eax
c0010404:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010406:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010409:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001040c:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001040f:	99                   	cdq    
c0010410:	89 f7                	mov    edi,esi
c0010412:	03 04 24             	add    eax,DWORD PTR [esp]
c0010415:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010419:	c1 ff 1f             	sar    edi,0x1f
c001041c:	57                   	push   edi
c001041d:	56                   	push   esi
c001041e:	52                   	push   edx
c001041f:	50                   	push   eax
c0010420:	e8 6f 70 01 00       	call   c0027494 <__umoddi3>
c0010425:	83 c4 10             	add    esp,0x10
c0010428:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001042b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010430:	75 10                	jne    c0010442 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010432:	83 ec 0c             	sub    esp,0xc
c0010435:	68 91 ae 02 c0       	push   0xc002ae91
c001043a:	e8 48 a4 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001043f:	83 c4 10             	add    esp,0x10
c0010442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010446:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010449:	89 10                	mov    DWORD PTR [eax],edx
c001044b:	83 c4 1c             	add    esp,0x1c
c001044e:	31 c0                	xor    eax,eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	5f                   	pop    edi
c0010453:	5d                   	pop    ebp
c0010454:	c3                   	ret    
c0010455:	90                   	nop

c0010456 <Pipe::write(unsigned long long, void*, int*)>:
c0010456:	55                   	push   ebp
c0010457:	57                   	push   edi
c0010458:	56                   	push   esi
c0010459:	53                   	push   ebx
c001045a:	83 ec 1c             	sub    esp,0x1c
c001045d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010461:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010465:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010468:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001046c:	89 04 24             	mov    DWORD PTR [esp],eax
c001046f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010473:	89 d8                	mov    eax,ebx
c0010475:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010478:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001047c:	89 d6                	mov    esi,edx
c001047e:	89 d7                	mov    edi,edx
c0010480:	c1 ff 1f             	sar    edi,0x1f
c0010483:	03 34 24             	add    esi,DWORD PTR [esp]
c0010486:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001048a:	c1 f8 1f             	sar    eax,0x1f
c001048d:	39 f3                	cmp    ebx,esi
c001048f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010493:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010497:	19 f8                	sbb    eax,edi
c0010499:	b8 01 00 00 00       	mov    eax,0x1
c001049e:	72 6e                	jb     c001050e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00104a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104a3:	01 d0                	add    eax,edx
c00104a5:	99                   	cdq    
c00104a6:	f7 fb                	idiv   ebx
c00104a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ac:	29 d3                	sub    ebx,edx
c00104ae:	89 d7                	mov    edi,edx
c00104b0:	89 de                	mov    esi,ebx
c00104b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00104b5:	c1 fb 1f             	sar    ebx,0x1f
c00104b8:	39 f2                	cmp    edx,esi
c00104ba:	19 d8                	sbb    eax,ebx
c00104bc:	b8 00 00 00 00       	mov    eax,0x0
c00104c1:	72 04                	jb     c00104c7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00104c3:	89 d0                	mov    eax,edx
c00104c5:	29 f0                	sub    eax,esi
c00104c7:	89 d3                	mov    ebx,edx
c00104c9:	29 c3                	sub    ebx,eax
c00104cb:	74 0b                	je     c00104d8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00104cd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104d0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00104d4:	89 d9                	mov    ecx,ebx
c00104d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104d8:	85 c0                	test   eax,eax
c00104da:	74 0d                	je     c00104e9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00104dc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00104e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00104e3:	89 de                	mov    esi,ebx
c00104e5:	89 c1                	mov    ecx,eax
c00104e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104e9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00104ec:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104f1:	75 10                	jne    c0010503 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00104f3:	83 ec 0c             	sub    esp,0xc
c00104f6:	68 ad ae 02 c0       	push   0xc002aead
c00104fb:	e8 87 a3 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010507:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001050a:	89 08                	mov    DWORD PTR [eax],ecx
c001050c:	31 c0                	xor    eax,eax
c001050e:	83 c4 1c             	add    esp,0x1c
c0010511:	5b                   	pop    ebx
c0010512:	5e                   	pop    esi
c0010513:	5f                   	pop    edi
c0010514:	5d                   	pop    ebp
c0010515:	c3                   	ret    

c0010516 <Pipe::Pipe(int)>:
c0010516:	83 ec 0c             	sub    esp,0xc
c0010519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051d:	83 ec 08             	sub    esp,0x8
c0010520:	6a 00                	push   0x0
c0010522:	50                   	push   eax
c0010523:	e8 2e 11 00 00       	call   c0011656 <UnixFile::UnixFile(int)>
c0010528:	83 c4 10             	add    esp,0x10
c001052b:	ba d4 ae 02 c0       	mov    edx,0xc002aed4
c0010530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010534:	89 10                	mov    DWORD PTR [eax],edx
c0010536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001053e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010545:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001054c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010550:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010557:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001055b:	83 ec 0c             	sub    esp,0xc
c001055e:	50                   	push   eax
c001055f:	e8 90 f3 ff ff       	call   c000f8f4 <malloc>
c0010564:	83 c4 10             	add    esp,0x10
c0010567:	89 c2                	mov    edx,eax
c0010569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010574:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010578:	90                   	nop
c0010579:	83 c4 0c             	add    esp,0xc
c001057c:	c3                   	ret    
c001057d:	90                   	nop

c001057e <VgaText::isAtty()>:
c001057e:	b0 01                	mov    al,0x1
c0010580:	c3                   	ret    
c0010581:	90                   	nop

c0010582 <VgaText::~VgaText()>:
c0010582:	83 ec 0c             	sub    esp,0xc
c0010585:	ba 90 af 02 c0       	mov    edx,0xc002af90
c001058a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058e:	89 10                	mov    DWORD PTR [eax],edx
c0010590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010594:	83 ec 0c             	sub    esp,0xc
c0010597:	50                   	push   eax
c0010598:	e8 9b 12 00 00       	call   c0011838 <UnixFile::~UnixFile()>
c001059d:	83 c4 10             	add    esp,0x10
c00105a0:	90                   	nop
c00105a1:	83 c4 0c             	add    esp,0xc
c00105a4:	c3                   	ret    
c00105a5:	90                   	nop

c00105a6 <VgaText::~VgaText()>:
c00105a6:	83 ec 0c             	sub    esp,0xc
c00105a9:	83 ec 0c             	sub    esp,0xc
c00105ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b0:	e8 cd ff ff ff       	call   c0010582 <VgaText::~VgaText()>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	83 ec 08             	sub    esp,0x8
c00105bb:	68 c4 02 00 00       	push   0x2c4
c00105c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c4:	e8 f6 27 00 00       	call   c0012dbf <operator delete(void*, unsigned long)>
c00105c9:	83 c4 10             	add    esp,0x10
c00105cc:	83 c4 0c             	add    esp,0xc
c00105cf:	c3                   	ret    

c00105d0 <VgaText::read(unsigned long long, void*, int*)>:
c00105d0:	83 ec 10             	sub    esp,0x10
c00105d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105df:	e8 6a 5d 00 00       	call   c001634e <readKeyboard(VgaText*, char*, unsigned long)>
c00105e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105e8:	89 02                	mov    DWORD PTR [edx],eax
c00105ea:	31 c0                	xor    eax,eax
c00105ec:	83 c4 1c             	add    esp,0x1c
c00105ef:	c3                   	ret    

c00105f0 <setTerminalScrollLock(bool)>:
c00105f0:	c3                   	ret    

c00105f1 <addToTerminalCycle(VgaText*)>:
c00105f1:	8b 15 80 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f180
c00105f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105fb:	85 d2                	test   edx,edx
c00105fd:	75 09                	jne    c0010608 <addToTerminalCycle(VgaText*)+0x17>
c00105ff:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010602:	a3 80 f1 02 c0       	mov    ds:0xc002f180,eax
c0010607:	c3                   	ret    
c0010608:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001060b:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001060e:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010611:	c3                   	ret    

c0010612 <installVgaTextImplementation()>:
c0010612:	83 ec 10             	sub    esp,0x10
c0010615:	6a 20                	push   0x20
c0010617:	6a 00                	push   0x0
c0010619:	68 60 f1 02 c0       	push   0xc002f160
c001061e:	e8 49 01 ff ff       	call   c000076c <memset>
c0010623:	83 c4 1c             	add    esp,0x1c
c0010626:	c3                   	ret    

c0010627 <scrollTerminalScrollLock(int)>:
c0010627:	c3                   	ret    

c0010628 <VgaText::load()>:
c0010628:	53                   	push   ebx
c0010629:	31 c0                	xor    eax,eax
c001062b:	83 ec 58             	sub    esp,0x58
c001062e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010632:	89 e2                	mov    edx,esp
c0010634:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010638:	40                   	inc    eax
c0010639:	83 f8 50             	cmp    eax,0x50
c001063c:	75 f6                	jne    c0010634 <VgaText::load()+0xc>
c001063e:	31 c0                	xor    eax,eax
c0010640:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010647:	84 c9                	test   cl,cl
c0010649:	74 06                	je     c0010651 <VgaText::load()+0x29>
c001064b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001064e:	40                   	inc    eax
c001064f:	eb ef                	jmp    c0010640 <VgaText::load()+0x18>
c0010651:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 09                	je     c0010661 <VgaText::load()+0x39>
c0010658:	51                   	push   ecx
c0010659:	51                   	push   ecx
c001065a:	52                   	push   edx
c001065b:	53                   	push   ebx
c001065c:	ff d0                	call   eax
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010664:	85 c0                	test   eax,eax
c0010666:	74 09                	je     c0010671 <VgaText::load()+0x49>
c0010668:	83 ec 0c             	sub    esp,0xc
c001066b:	53                   	push   ebx
c001066c:	ff d0                	call   eax
c001066e:	83 c4 10             	add    esp,0x10
c0010671:	83 c4 58             	add    esp,0x58
c0010674:	5b                   	pop    ebx
c0010675:	c3                   	ret    

c0010676 <VgaText::updateCursor()>:
c0010676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067a:	39 05 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,eax
c0010680:	75 09                	jne    c001068b <VgaText::updateCursor()+0x15>
c0010682:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010685:	85 c0                	test   eax,eax
c0010687:	74 02                	je     c001068b <VgaText::updateCursor()+0x15>
c0010689:	ff e0                	jmp    eax
c001068b:	c3                   	ret    

c001068c <VgaText::showCursor(bool)>:
c001068c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010690:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010694:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c0010697:	c3                   	ret    

c0010698 <VgaText::disableBlink(bool)>:
c0010698:	56                   	push   esi
c0010699:	53                   	push   ebx
c001069a:	51                   	push   ecx
c001069b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001069f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106a3:	39 1d 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,ebx
c00106a9:	75 15                	jne    c00106c0 <VgaText::disableBlink(bool)+0x28>
c00106ab:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00106ae:	85 c0                	test   eax,eax
c00106b0:	74 0e                	je     c00106c0 <VgaText::disableBlink(bool)+0x28>
c00106b2:	89 f1                	mov    ecx,esi
c00106b4:	52                   	push   edx
c00106b5:	52                   	push   edx
c00106b6:	0f b6 d1             	movzx  edx,cl
c00106b9:	52                   	push   edx
c00106ba:	53                   	push   ebx
c00106bb:	ff d0                	call   eax
c00106bd:	83 c4 10             	add    esp,0x10
c00106c0:	89 f0                	mov    eax,esi
c00106c2:	83 f0 01             	xor    eax,0x1
c00106c5:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00106c8:	58                   	pop    eax
c00106c9:	5b                   	pop    ebx
c00106ca:	5e                   	pop    esi
c00106cb:	c3                   	ret    

c00106cc <VgaText::doANSI_SGR(int)>:
c00106cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d4:	85 d2                	test   edx,edx
c00106d6:	75 0b                	jne    c00106e3 <VgaText::doANSI_SGR(int)+0x17>
c00106d8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00106db:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106de:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00106e1:	eb 59                	jmp    c001073c <VgaText::doANSI_SGR(int)+0x70>
c00106e3:	83 fa 07             	cmp    edx,0x7
c00106e6:	75 0b                	jne    c00106f3 <VgaText::doANSI_SGR(int)+0x27>
c00106e8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00106eb:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00106ee:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00106f1:	eb 49                	jmp    c001073c <VgaText::doANSI_SGR(int)+0x70>
c00106f3:	83 fa 1b             	cmp    edx,0x1b
c00106f6:	74 e0                	je     c00106d8 <VgaText::doANSI_SGR(int)+0xc>
c00106f8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106fb:	83 f9 07             	cmp    ecx,0x7
c00106fe:	77 09                	ja     c0010709 <VgaText::doANSI_SGR(int)+0x3d>
c0010700:	8b 14 8d 00 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2000]
c0010707:	eb 20                	jmp    c0010729 <VgaText::doANSI_SGR(int)+0x5d>
c0010709:	8d 4a d8             	lea    ecx,[edx-0x28]
c001070c:	83 f9 07             	cmp    ecx,0x7
c001070f:	77 09                	ja     c001071a <VgaText::doANSI_SGR(int)+0x4e>
c0010711:	8b 14 8d 00 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2000]
c0010718:	eb 22                	jmp    c001073c <VgaText::doANSI_SGR(int)+0x70>
c001071a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001071d:	83 f9 07             	cmp    ecx,0x7
c0010720:	77 0b                	ja     c001072d <VgaText::doANSI_SGR(int)+0x61>
c0010722:	8b 14 95 b8 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2148]
c0010729:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001072c:	c3                   	ret    
c001072d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010730:	83 f9 07             	cmp    ecx,0x7
c0010733:	77 0a                	ja     c001073f <VgaText::doANSI_SGR(int)+0x73>
c0010735:	8b 14 95 90 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2170]
c001073c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001073f:	c3                   	ret    

c0010740 <VgaText::setDefaultBgColour(VgaColour)>:
c0010740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010744:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010748:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001074b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001074e:	c3                   	ret    
c001074f:	90                   	nop

c0010750 <VgaText::setDefaultFgColour(VgaColour)>:
c0010750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010754:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010758:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001075b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001075e:	c3                   	ret    
c001075f:	90                   	nop

c0010760 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010760:	53                   	push   ebx
c0010761:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010765:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010769:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001076d:	51                   	push   ecx
c001076e:	e8 cd ff ff ff       	call   c0010740 <VgaText::setDefaultBgColour(VgaColour)>
c0010773:	58                   	pop    eax
c0010774:	5a                   	pop    edx
c0010775:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010779:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001077d:	5b                   	pop    ebx
c001077e:	eb d0                	jmp    c0010750 <VgaText::setDefaultFgColour(VgaColour)>

c0010780 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010780:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010784:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010789:	83 e0 0f             	and    eax,0xf
c001078c:	c1 e2 04             	shl    edx,0x4
c001078f:	09 d0                	or     eax,edx
c0010791:	c3                   	ret    

c0010792 <VgaText::scrollScreen()>:
c0010792:	55                   	push   ebp
c0010793:	b9 01 00 00 00       	mov    ecx,0x1
c0010798:	57                   	push   edi
c0010799:	56                   	push   esi
c001079a:	53                   	push   ebx
c001079b:	83 ec 0c             	sub    esp,0xc
c001079e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107a2:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00107a8:	31 ff                	xor    edi,edi
c00107aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00107ad:	83 f9 17             	cmp    ecx,0x17
c00107b0:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00107b3:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00107ba:	75 27                	jne    c00107e3 <VgaText::scrollScreen()+0x51>
c00107bc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00107bf:	01 f5                	add    ebp,esi
c00107c1:	f7 c7 01 00 00 00    	test   edi,0x1
c00107c7:	74 16                	je     c00107df <VgaText::scrollScreen()+0x4d>
c00107c9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00107cd:	50                   	push   eax
c00107ce:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00107d2:	50                   	push   eax
c00107d3:	e8 a8 ff ff ff       	call   c0010780 <VgaText::combineColours(unsigned char, unsigned char)>
c00107d8:	5a                   	pop    edx
c00107d9:	5a                   	pop    edx
c00107da:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00107dd:	eb 04                	jmp    c00107e3 <VgaText::scrollScreen()+0x51>
c00107df:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00107e3:	47                   	inc    edi
c00107e4:	46                   	inc    esi
c00107e5:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107eb:	75 bd                	jne    c00107aa <VgaText::scrollScreen()+0x18>
c00107ed:	41                   	inc    ecx
c00107ee:	83 f9 18             	cmp    ecx,0x18
c00107f1:	75 af                	jne    c00107a2 <VgaText::scrollScreen()+0x10>
c00107f3:	39 1d 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,ebx
c00107f9:	75 1b                	jne    c0010816 <VgaText::scrollScreen()+0x84>
c00107fb:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107ff:	74 05                	je     c0010806 <VgaText::scrollScreen()+0x74>
c0010801:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010804:	eb 10                	jmp    c0010816 <VgaText::scrollScreen()+0x84>
c0010806:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010809:	85 c0                	test   eax,eax
c001080b:	74 09                	je     c0010816 <VgaText::scrollScreen()+0x84>
c001080d:	83 ec 0c             	sub    esp,0xc
c0010810:	53                   	push   ebx
c0010811:	ff d0                	call   eax
c0010813:	83 c4 10             	add    esp,0x10
c0010816:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001081a:	83 c4 0c             	add    esp,0xc
c001081d:	5b                   	pop    ebx
c001081e:	5e                   	pop    esi
c001081f:	5f                   	pop    edi
c0010820:	5d                   	pop    ebp
c0010821:	e9 50 fe ff ff       	jmp    c0010676 <VgaText::updateCursor()>

c0010826 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010826:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001082b:	c1 e0 08             	shl    eax,0x8
c001082e:	89 c2                	mov    edx,eax
c0010830:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010835:	09 d0                	or     eax,edx
c0010837:	c3                   	ret    

c0010838 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010838:	56                   	push   esi
c0010839:	53                   	push   ebx
c001083a:	51                   	push   ecx
c001083b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001083f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010844:	50                   	push   eax
c0010845:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001084a:	50                   	push   eax
c001084b:	e8 30 ff ff ff       	call   c0010780 <VgaText::combineColours(unsigned char, unsigned char)>
c0010850:	5b                   	pop    ebx
c0010851:	0f b6 c0             	movzx  eax,al
c0010854:	5e                   	pop    esi
c0010855:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001085a:	50                   	push   eax
c001085b:	53                   	push   ebx
c001085c:	e8 c5 ff ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010861:	5a                   	pop    edx
c0010862:	5e                   	pop    esi
c0010863:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010866:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001086c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010870:	0f b7 d2             	movzx  edx,dx
c0010873:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010877:	39 0d 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,ecx
c001087d:	75 10                	jne    c001088f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001087f:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010882:	85 c0                	test   eax,eax
c0010884:	74 09                	je     c001088f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010886:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001088a:	5a                   	pop    edx
c001088b:	5b                   	pop    ebx
c001088c:	5e                   	pop    esi
c001088d:	ff e0                	jmp    eax
c001088f:	58                   	pop    eax
c0010890:	5b                   	pop    ebx
c0010891:	5e                   	pop    esi
c0010892:	c3                   	ret    
c0010893:	90                   	nop

c0010894 <VgaText::getCursorX()>:
c0010894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010898:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001089b:	c3                   	ret    

c001089c <VgaText::getCursorY()>:
c001089c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00108a3:	c3                   	ret    

c00108a4 <VgaText::setCursor(int, int)>:
c00108a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108ac:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00108af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00108b6:	e9 bb fd ff ff       	jmp    c0010676 <VgaText::updateCursor()>
c00108bb:	90                   	nop

c00108bc <VgaText::setCursorX(int)>:
c00108bc:	83 ec 10             	sub    esp,0x10
c00108bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108c3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00108c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ca:	50                   	push   eax
c00108cb:	e8 d4 ff ff ff       	call   c00108a4 <VgaText::setCursor(int, int)>
c00108d0:	83 c4 1c             	add    esp,0x1c
c00108d3:	c3                   	ret    

c00108d4 <VgaText::setCursorY(int)>:
c00108d4:	83 ec 10             	sub    esp,0x10
c00108d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108df:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00108e2:	50                   	push   eax
c00108e3:	e8 bc ff ff ff       	call   c00108a4 <VgaText::setCursor(int, int)>
c00108e8:	83 c4 1c             	add    esp,0x1c
c00108eb:	c3                   	ret    

c00108ec <VgaText::incrementCursor(bool)>:
c00108ec:	56                   	push   esi
c00108ed:	53                   	push   ebx
c00108ee:	51                   	push   ecx
c00108ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108f7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00108fa:	40                   	inc    eax
c00108fb:	83 f8 50             	cmp    eax,0x50
c00108fe:	74 05                	je     c0010905 <VgaText::incrementCursor(bool)+0x19>
c0010900:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010903:	eb 24                	jmp    c0010929 <VgaText::incrementCursor(bool)+0x3d>
c0010905:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010908:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001090f:	8d 50 01             	lea    edx,[eax+0x1]
c0010912:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010915:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010918:	75 0f                	jne    c0010929 <VgaText::incrementCursor(bool)+0x3d>
c001091a:	83 ec 0c             	sub    esp,0xc
c001091d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010920:	53                   	push   ebx
c0010921:	e8 6c fe ff ff       	call   c0010792 <VgaText::scrollScreen()>
c0010926:	83 c4 10             	add    esp,0x10
c0010929:	89 f0                	mov    eax,esi
c001092b:	84 c0                	test   al,al
c001092d:	74 0c                	je     c001093b <VgaText::incrementCursor(bool)+0x4f>
c001092f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010933:	5a                   	pop    edx
c0010934:	5b                   	pop    ebx
c0010935:	5e                   	pop    esi
c0010936:	e9 3b fd ff ff       	jmp    c0010676 <VgaText::updateCursor()>
c001093b:	58                   	pop    eax
c001093c:	5b                   	pop    ebx
c001093d:	5e                   	pop    esi
c001093e:	c3                   	ret    
c001093f:	90                   	nop

c0010940 <VgaText::updateRAMUsageDisplay(int)>:
c0010940:	56                   	push   esi
c0010941:	8b 35 e0 df 02 c0    	mov    esi,DWORD PTR ds:0xc002dfe0
c0010947:	53                   	push   ebx
c0010948:	bb 0a 00 00 00       	mov    ebx,0xa
c001094d:	6a 0f                	push   0xf
c001094f:	6a 00                	push   0x0
c0010951:	e8 2a fe ff ff       	call   c0010780 <VgaText::combineColours(unsigned char, unsigned char)>
c0010956:	5a                   	pop    edx
c0010957:	59                   	pop    ecx
c0010958:	0f b6 c8             	movzx  ecx,al
c001095b:	51                   	push   ecx
c001095c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010960:	99                   	cdq    
c0010961:	f7 fb                	idiv   ebx
c0010963:	89 d3                	mov    ebx,edx
c0010965:	83 c0 30             	add    eax,0x30
c0010968:	83 c3 30             	add    ebx,0x30
c001096b:	0f be c0             	movsx  eax,al
c001096e:	0f b6 db             	movzx  ebx,bl
c0010971:	50                   	push   eax
c0010972:	e8 af fe ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010977:	5a                   	pop    edx
c0010978:	5a                   	pop    edx
c0010979:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010980:	51                   	push   ecx
c0010981:	53                   	push   ebx
c0010982:	e8 9f fe ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010987:	5b                   	pop    ebx
c0010988:	5a                   	pop    edx
c0010989:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010990:	51                   	push   ecx
c0010991:	6a 25                	push   0x25
c0010993:	e8 8e fe ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010998:	59                   	pop    ecx
c0010999:	5b                   	pop    ebx
c001099a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109a1:	5b                   	pop    ebx
c00109a2:	5e                   	pop    esi
c00109a3:	c3                   	ret    

c00109a4 <VgaText::updateDiskUsage()>:
c00109a4:	55                   	push   ebp
c00109a5:	bd 10 27 00 00       	mov    ebp,0x2710
c00109aa:	57                   	push   edi
c00109ab:	8b 3d e0 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfe0
c00109b1:	56                   	push   esi
c00109b2:	53                   	push   ebx
c00109b3:	6a 0f                	push   0xf
c00109b5:	6a 00                	push   0x0
c00109b7:	e8 c4 fd ff ff       	call   c0010780 <VgaText::combineColours(unsigned char, unsigned char)>
c00109bc:	5a                   	pop    edx
c00109bd:	0f b6 d8             	movzx  ebx,al
c00109c0:	59                   	pop    ecx
c00109c1:	8b 35 08 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033408
c00109c7:	53                   	push   ebx
c00109c8:	b9 0a 00 00 00       	mov    ecx,0xa
c00109cd:	89 f0                	mov    eax,esi
c00109cf:	99                   	cdq    
c00109d0:	f7 fd                	idiv   ebp
c00109d2:	99                   	cdq    
c00109d3:	f7 f9                	idiv   ecx
c00109d5:	8d 42 30             	lea    eax,[edx+0x30]
c00109d8:	0f b6 c0             	movzx  eax,al
c00109db:	50                   	push   eax
c00109dc:	e8 45 fe ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e1:	5d                   	pop    ebp
c00109e2:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109e7:	5a                   	pop    edx
c00109e8:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109ec:	53                   	push   ebx
c00109ed:	89 f0                	mov    eax,esi
c00109ef:	99                   	cdq    
c00109f0:	f7 fd                	idiv   ebp
c00109f2:	99                   	cdq    
c00109f3:	f7 f9                	idiv   ecx
c00109f5:	8d 42 30             	lea    eax,[edx+0x30]
c00109f8:	0f b6 c0             	movzx  eax,al
c00109fb:	50                   	push   eax
c00109fc:	e8 25 fe ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a01:	5d                   	pop    ebp
c0010a02:	bd 64 00 00 00       	mov    ebp,0x64
c0010a07:	5a                   	pop    edx
c0010a08:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a0f:	53                   	push   ebx
c0010a10:	89 f0                	mov    eax,esi
c0010a12:	99                   	cdq    
c0010a13:	f7 fd                	idiv   ebp
c0010a15:	99                   	cdq    
c0010a16:	f7 f9                	idiv   ecx
c0010a18:	8d 42 30             	lea    eax,[edx+0x30]
c0010a1b:	0f b6 c0             	movzx  eax,al
c0010a1e:	50                   	push   eax
c0010a1f:	e8 02 fe ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a24:	5d                   	pop    ebp
c0010a25:	5a                   	pop    edx
c0010a26:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a2d:	53                   	push   ebx
c0010a2e:	89 f0                	mov    eax,esi
c0010a30:	99                   	cdq    
c0010a31:	f7 f9                	idiv   ecx
c0010a33:	89 d6                	mov    esi,edx
c0010a35:	99                   	cdq    
c0010a36:	f7 f9                	idiv   ecx
c0010a38:	8d 42 30             	lea    eax,[edx+0x30]
c0010a3b:	0f b6 c0             	movzx  eax,al
c0010a3e:	50                   	push   eax
c0010a3f:	e8 e2 fd ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a44:	5d                   	pop    ebp
c0010a45:	5a                   	pop    edx
c0010a46:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a4d:	53                   	push   ebx
c0010a4e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a51:	0f b6 f0             	movzx  esi,al
c0010a54:	56                   	push   esi
c0010a55:	e8 cc fd ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a5a:	5e                   	pop    esi
c0010a5b:	8b 35 04 34 03 c0    	mov    esi,DWORD PTR ds:0xc0033404
c0010a61:	5d                   	pop    ebp
c0010a62:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a69:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a6e:	53                   	push   ebx
c0010a6f:	89 f0                	mov    eax,esi
c0010a71:	99                   	cdq    
c0010a72:	f7 fd                	idiv   ebp
c0010a74:	99                   	cdq    
c0010a75:	f7 f9                	idiv   ecx
c0010a77:	8d 42 30             	lea    eax,[edx+0x30]
c0010a7a:	0f b6 c0             	movzx  eax,al
c0010a7d:	50                   	push   eax
c0010a7e:	e8 a3 fd ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a83:	5a                   	pop    edx
c0010a84:	5d                   	pop    ebp
c0010a85:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a8c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a91:	53                   	push   ebx
c0010a92:	89 f0                	mov    eax,esi
c0010a94:	99                   	cdq    
c0010a95:	f7 fd                	idiv   ebp
c0010a97:	99                   	cdq    
c0010a98:	f7 f9                	idiv   ecx
c0010a9a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a9d:	0f b6 c0             	movzx  eax,al
c0010aa0:	50                   	push   eax
c0010aa1:	e8 80 fd ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa6:	5a                   	pop    edx
c0010aa7:	5d                   	pop    ebp
c0010aa8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aaf:	bd 64 00 00 00       	mov    ebp,0x64
c0010ab4:	53                   	push   ebx
c0010ab5:	89 f0                	mov    eax,esi
c0010ab7:	99                   	cdq    
c0010ab8:	f7 fd                	idiv   ebp
c0010aba:	99                   	cdq    
c0010abb:	f7 f9                	idiv   ecx
c0010abd:	83 c2 30             	add    edx,0x30
c0010ac0:	0f b6 d2             	movzx  edx,dl
c0010ac3:	52                   	push   edx
c0010ac4:	e8 5d fd ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ac9:	5a                   	pop    edx
c0010aca:	5d                   	pop    ebp
c0010acb:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ad2:	53                   	push   ebx
c0010ad3:	89 f0                	mov    eax,esi
c0010ad5:	99                   	cdq    
c0010ad6:	f7 f9                	idiv   ecx
c0010ad8:	89 d6                	mov    esi,edx
c0010ada:	99                   	cdq    
c0010adb:	f7 f9                	idiv   ecx
c0010add:	8d 42 30             	lea    eax,[edx+0x30]
c0010ae0:	0f b6 c0             	movzx  eax,al
c0010ae3:	50                   	push   eax
c0010ae4:	e8 3d fd ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae9:	5a                   	pop    edx
c0010aea:	59                   	pop    ecx
c0010aeb:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010af2:	53                   	push   ebx
c0010af3:	8d 46 30             	lea    eax,[esi+0x30]
c0010af6:	0f b6 f0             	movzx  esi,al
c0010af9:	56                   	push   esi
c0010afa:	e8 27 fd ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aff:	5b                   	pop    ebx
c0010b00:	5e                   	pop    esi
c0010b01:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b08:	5b                   	pop    ebx
c0010b09:	5e                   	pop    esi
c0010b0a:	5f                   	pop    edi
c0010b0b:	5d                   	pop    ebp
c0010b0c:	c3                   	ret    
c0010b0d:	90                   	nop

c0010b0e <VgaText::updateTitle()>:
c0010b0e:	53                   	push   ebx
c0010b0f:	31 c0                	xor    eax,eax
c0010b11:	83 ec 58             	sub    esp,0x58
c0010b14:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b18:	89 e1                	mov    ecx,esp
c0010b1a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b1e:	40                   	inc    eax
c0010b1f:	83 f8 50             	cmp    eax,0x50
c0010b22:	75 f6                	jne    c0010b1a <VgaText::updateTitle()+0xc>
c0010b24:	31 c0                	xor    eax,eax
c0010b26:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010b2d:	84 db                	test   bl,bl
c0010b2f:	74 06                	je     c0010b37 <VgaText::updateTitle()+0x29>
c0010b31:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b34:	40                   	inc    eax
c0010b35:	eb ef                	jmp    c0010b26 <VgaText::updateTitle()+0x18>
c0010b37:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010b3a:	85 c0                	test   eax,eax
c0010b3c:	74 09                	je     c0010b47 <VgaText::updateTitle()+0x39>
c0010b3e:	53                   	push   ebx
c0010b3f:	53                   	push   ebx
c0010b40:	51                   	push   ecx
c0010b41:	52                   	push   edx
c0010b42:	ff d0                	call   eax
c0010b44:	83 c4 10             	add    esp,0x10
c0010b47:	e8 58 fe ff ff       	call   c00109a4 <VgaText::updateDiskUsage()>
c0010b4c:	83 c4 58             	add    esp,0x58
c0010b4f:	5b                   	pop    ebx
c0010b50:	c3                   	ret    
c0010b51:	90                   	nop

c0010b52 <VgaText::setTitleTextColour(VgaColour)>:
c0010b52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b5a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b5d:	eb af                	jmp    c0010b0e <VgaText::updateTitle()>
c0010b5f:	90                   	nop

c0010b60 <VgaText::setTitleColour(VgaColour)>:
c0010b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b68:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b6b:	eb a1                	jmp    c0010b0e <VgaText::updateTitle()>
c0010b6d:	90                   	nop

c0010b6e <VgaText::setTitle(char*)>:
c0010b6e:	53                   	push   ebx
c0010b6f:	83 ec 10             	sub    esp,0x10
c0010b72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7a:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b80:	50                   	push   eax
c0010b81:	e8 a2 fc fe ff       	call   c0000828 <strcpy>
c0010b86:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b8a:	83 c4 18             	add    esp,0x18
c0010b8d:	5b                   	pop    ebx
c0010b8e:	e9 7b ff ff ff       	jmp    c0010b0e <VgaText::updateTitle()>
c0010b93:	90                   	nop

c0010b94 <VgaText::decrementCursor(bool)>:
c0010b94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b98:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b9c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b9f:	85 c0                	test   eax,eax
c0010ba1:	74 04                	je     c0010ba7 <VgaText::decrementCursor(bool)+0x13>
c0010ba3:	48                   	dec    eax
c0010ba4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010ba7:	84 c9                	test   cl,cl
c0010ba9:	74 09                	je     c0010bb4 <VgaText::decrementCursor(bool)+0x20>
c0010bab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010baf:	e9 c2 fa ff ff       	jmp    c0010676 <VgaText::updateCursor()>
c0010bb4:	c3                   	ret    
c0010bb5:	90                   	nop

c0010bb6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bb6:	53                   	push   ebx
c0010bb7:	83 ec 08             	sub    esp,0x8
c0010bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bc6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bca:	3c 07                	cmp    al,0x7
c0010bcc:	75 2a                	jne    c0010bf8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bce:	a1 38 f2 02 c0       	mov    eax,ds:0xc002f238
c0010bd3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bdb:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010be3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010beb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bef:	83 c4 08             	add    esp,0x8
c0010bf2:	5b                   	pop    ebx
c0010bf3:	e9 b4 30 00 00       	jmp    c0013cac <Buzzer::beep(int, int, bool)>
c0010bf8:	3c 0d                	cmp    al,0xd
c0010bfa:	75 09                	jne    c0010c05 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010bfc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c03:	eb 2c                	jmp    c0010c31 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010c05:	3c 0a                	cmp    al,0xa
c0010c07:	75 31                	jne    c0010c3a <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010c09:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010c0c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c13:	8d 50 01             	lea    edx,[eax+0x1]
c0010c16:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010c19:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010c1c:	75 0f                	jne    c0010c2d <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010c1e:	83 ec 0c             	sub    esp,0xc
c0010c21:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010c24:	53                   	push   ebx
c0010c25:	e8 68 fb ff ff       	call   c0010792 <VgaText::scrollScreen()>
c0010c2a:	83 c4 10             	add    esp,0x10
c0010c2d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c31:	83 c4 08             	add    esp,0x8
c0010c34:	5b                   	pop    ebx
c0010c35:	e9 3c fa ff ff       	jmp    c0010676 <VgaText::updateCursor()>
c0010c3a:	3c 08                	cmp    al,0x8
c0010c3c:	75 25                	jne    c0010c63 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010c3e:	50                   	push   eax
c0010c3f:	50                   	push   eax
c0010c40:	6a 01                	push   0x1
c0010c42:	53                   	push   ebx
c0010c43:	e8 4c ff ff ff       	call   c0010b94 <VgaText::decrementCursor(bool)>
c0010c48:	5a                   	pop    edx
c0010c49:	59                   	pop    ecx
c0010c4a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c4d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c50:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c53:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c56:	6a 20                	push   0x20
c0010c58:	53                   	push   ebx
c0010c59:	e8 da fb ff ff       	call   c0010838 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c5e:	83 c4 28             	add    esp,0x28
c0010c61:	5b                   	pop    ebx
c0010c62:	c3                   	ret    
c0010c63:	83 ec 08             	sub    esp,0x8
c0010c66:	0f be c0             	movsx  eax,al
c0010c69:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c6c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c6f:	51                   	push   ecx
c0010c70:	52                   	push   edx
c0010c71:	50                   	push   eax
c0010c72:	53                   	push   ebx
c0010c73:	e8 c0 fb ff ff       	call   c0010838 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c78:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c7c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c84:	83 c4 28             	add    esp,0x28
c0010c87:	5b                   	pop    ebx
c0010c88:	e9 5f fc ff ff       	jmp    c00108ec <VgaText::incrementCursor(bool)>
c0010c8d:	90                   	nop

c0010c8e <VgaText::isShowingCursor()>:
c0010c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c92:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c95:	c3                   	ret    

c0010c96 <VgaText::isBlinkDisabled()>:
c0010c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c9a:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c9d:	83 f0 01             	xor    eax,0x1
c0010ca0:	c3                   	ret    
c0010ca1:	90                   	nop

c0010ca2 <VgaText::setCursorHeight(int)>:
c0010ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010caa:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010cad:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010cb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cb5:	e9 d2 f9 ff ff       	jmp    c001068c <VgaText::showCursor(bool)>

c0010cba <VgaText::getCursorHeight()>:
c0010cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cbe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010cc1:	c3                   	ret    

c0010cc2 <setActiveTerminal(VgaText*)>:
c0010cc2:	53                   	push   ebx
c0010cc3:	83 ec 08             	sub    esp,0x8
c0010cc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cca:	85 db                	test   ebx,ebx
c0010ccc:	75 11                	jne    c0010cdf <setActiveTerminal(VgaText*)+0x1d>
c0010cce:	c7 44 24 10 e8 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aee8
c0010cd6:	83 c4 08             	add    esp,0x8
c0010cd9:	5b                   	pop    ebx
c0010cda:	e9 a8 9b 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c0010cdf:	50                   	push   eax
c0010ce0:	50                   	push   eax
c0010ce1:	53                   	push   ebx
c0010ce2:	68 f6 ae 02 c0       	push   0xc002aef6
c0010ce7:	e8 b3 21 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0010cec:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c0010cf1:	83 c4 10             	add    esp,0x10
c0010cf4:	85 c0                	test   eax,eax
c0010cf6:	74 0c                	je     c0010d04 <setActiveTerminal(VgaText*)+0x42>
c0010cf8:	83 ec 0c             	sub    esp,0xc
c0010cfb:	50                   	push   eax
c0010cfc:	e8 75 f9 ff ff       	call   c0010676 <VgaText::updateCursor()>
c0010d01:	83 c4 10             	add    esp,0x10
c0010d04:	89 1d 84 f1 02 c0    	mov    DWORD PTR ds:0xc002f184,ebx
c0010d0a:	51                   	push   ecx
c0010d0b:	51                   	push   ecx
c0010d0c:	53                   	push   ebx
c0010d0d:	68 0e af 02 c0       	push   0xc002af0e
c0010d12:	e8 88 21 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0010d17:	83 c4 0c             	add    esp,0xc
c0010d1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d1d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d20:	53                   	push   ebx
c0010d21:	e8 7e fb ff ff       	call   c00108a4 <VgaText::setCursor(int, int)>
c0010d26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d29:	e8 68 ff ff ff       	call   c0010c96 <VgaText::isBlinkDisabled()>
c0010d2e:	5a                   	pop    edx
c0010d2f:	0f b6 c0             	movzx  eax,al
c0010d32:	59                   	pop    ecx
c0010d33:	50                   	push   eax
c0010d34:	53                   	push   ebx
c0010d35:	e8 5e f9 ff ff       	call   c0010698 <VgaText::disableBlink(bool)>
c0010d3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d3d:	e8 78 ff ff ff       	call   c0010cba <VgaText::getCursorHeight()>
c0010d42:	5a                   	pop    edx
c0010d43:	59                   	pop    ecx
c0010d44:	50                   	push   eax
c0010d45:	53                   	push   ebx
c0010d46:	e8 57 ff ff ff       	call   c0010ca2 <VgaText::setCursorHeight(int)>
c0010d4b:	83 c4 10             	add    esp,0x10
c0010d4e:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d52:	75 07                	jne    c0010d5b <setActiveTerminal(VgaText*)+0x99>
c0010d54:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d5f:	83 c4 08             	add    esp,0x8
c0010d62:	5b                   	pop    ebx
c0010d63:	e9 c0 f8 ff ff       	jmp    c0010628 <VgaText::load()>

c0010d68 <doTerminalCycle()>:
c0010d68:	83 ec 18             	sub    esp,0x18
c0010d6b:	a1 80 f1 02 c0       	mov    eax,ds:0xc002f180
c0010d70:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d73:	50                   	push   eax
c0010d74:	a3 80 f1 02 c0       	mov    ds:0xc002f180,eax
c0010d79:	e8 44 ff ff ff       	call   c0010cc2 <setActiveTerminal(VgaText*)>
c0010d7e:	83 c4 1c             	add    esp,0x1c
c0010d81:	c3                   	ret    

c0010d82 <VgaText::doUpdate()>:
c0010d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d86:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d89:	85 c0                	test   eax,eax
c0010d8b:	74 02                	je     c0010d8f <VgaText::doUpdate()+0xd>
c0010d8d:	ff e0                	jmp    eax
c0010d8f:	c3                   	ret    

c0010d90 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d90:	55                   	push   ebp
c0010d91:	31 ed                	xor    ebp,ebp
c0010d93:	57                   	push   edi
c0010d94:	56                   	push   esi
c0010d95:	53                   	push   ebx
c0010d96:	83 ec 1c             	sub    esp,0x1c
c0010d99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d9d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010da2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010da9:	50                   	push   eax
c0010daa:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010daf:	50                   	push   eax
c0010db0:	e8 cb f9 ff ff       	call   c0010780 <VgaText::combineColours(unsigned char, unsigned char)>
c0010db5:	59                   	pop    ecx
c0010db6:	0f b6 c0             	movzx  eax,al
c0010db9:	5e                   	pop    esi
c0010dba:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dbf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010dc3:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dca:	0f b7 f6             	movzx  esi,si
c0010dcd:	01 f6                	add    esi,esi
c0010dcf:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dd2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010dd5:	84 c0                	test   al,al
c0010dd7:	0f 84 fd 00 00 00    	je     c0010eda <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010ddd:	3c 0d                	cmp    al,0xd
c0010ddf:	75 0c                	jne    c0010ded <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010de1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010de8:	e9 e7 00 00 00       	jmp    c0010ed4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010ded:	3c 0a                	cmp    al,0xa
c0010def:	75 47                	jne    c0010e38 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010df1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010df4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010dfb:	8d 48 01             	lea    ecx,[eax+0x1]
c0010dfe:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010e01:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010e04:	75 0f                	jne    c0010e15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010e06:	83 ec 0c             	sub    esp,0xc
c0010e09:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010e0c:	53                   	push   ebx
c0010e0d:	e8 80 f9 ff ff       	call   c0010792 <VgaText::scrollScreen()>
c0010e12:	83 c4 10             	add    esp,0x10
c0010e15:	83 ec 0c             	sub    esp,0xc
c0010e18:	31 ed                	xor    ebp,ebp
c0010e1a:	53                   	push   ebx
c0010e1b:	e8 56 f8 ff ff       	call   c0010676 <VgaText::updateCursor()>
c0010e20:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e2b:	0f b7 f6             	movzx  esi,si
c0010e2e:	01 f6                	add    esi,esi
c0010e30:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e33:	e9 9c 00 00 00       	jmp    c0010ed4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e38:	3c 08                	cmp    al,0x8
c0010e3a:	75 35                	jne    c0010e71 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010e3c:	56                   	push   esi
c0010e3d:	56                   	push   esi
c0010e3e:	6a 01                	push   0x1
c0010e40:	53                   	push   ebx
c0010e41:	e8 4e fd ff ff       	call   c0010b94 <VgaText::decrementCursor(bool)>
c0010e46:	58                   	pop    eax
c0010e47:	5a                   	pop    edx
c0010e48:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e4b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e4e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e51:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e54:	6a 20                	push   0x20
c0010e56:	53                   	push   ebx
c0010e57:	e8 dc f9 ff ff       	call   c0010838 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e5c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e61:	83 c4 20             	add    esp,0x20
c0010e64:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e67:	0f b7 f6             	movzx  esi,si
c0010e6a:	01 f6                	add    esi,esi
c0010e6c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e6f:	eb 63                	jmp    c0010ed4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e71:	51                   	push   ecx
c0010e72:	51                   	push   ecx
c0010e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e77:	50                   	push   eax
c0010e78:	e8 a9 f9 ff ff       	call   c0010826 <VgaText::combineCharAndColour(char, unsigned char)>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	66 89 06             	mov    WORD PTR [esi],ax
c0010e83:	39 1d 84 f1 02 c0    	cmp    DWORD PTR ds:0xc002f184,ebx
c0010e89:	75 21                	jne    c0010eac <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e8b:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e8e:	85 c0                	test   eax,eax
c0010e90:	74 1a                	je     c0010eac <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e92:	52                   	push   edx
c0010e93:	52                   	push   edx
c0010e94:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e97:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ea2:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010ea5:	51                   	push   ecx
c0010ea6:	53                   	push   ebx
c0010ea7:	ff d0                	call   eax
c0010ea9:	83 c4 20             	add    esp,0x20
c0010eac:	83 c6 02             	add    esi,0x2
c0010eaf:	50                   	push   eax
c0010eb0:	50                   	push   eax
c0010eb1:	6a 00                	push   0x0
c0010eb3:	53                   	push   ebx
c0010eb4:	e8 33 fa ff ff       	call   c00108ec <VgaText::incrementCursor(bool)>
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010ec0:	75 0d                	jne    c0010ecf <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010ec2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010ec7:	0f b7 f6             	movzx  esi,si
c0010eca:	01 f6                	add    esi,esi
c0010ecc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ecf:	bd 01 00 00 00       	mov    ebp,0x1
c0010ed4:	47                   	inc    edi
c0010ed5:	e9 f8 fe ff ff       	jmp    c0010dd2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010eda:	83 ec 0c             	sub    esp,0xc
c0010edd:	53                   	push   ebx
c0010ede:	e8 93 f7 ff ff       	call   c0010676 <VgaText::updateCursor()>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	89 e8                	mov    eax,ebp
c0010ee8:	84 c0                	test   al,al
c0010eea:	74 0c                	je     c0010ef8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010eec:	83 ec 0c             	sub    esp,0xc
c0010eef:	53                   	push   ebx
c0010ef0:	e8 8d fe ff ff       	call   c0010d82 <VgaText::doUpdate()>
c0010ef5:	83 c4 10             	add    esp,0x10
c0010ef8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010eff:	83 c4 1c             	add    esp,0x1c
c0010f02:	5b                   	pop    ebx
c0010f03:	5e                   	pop    esi
c0010f04:	5f                   	pop    edi
c0010f05:	5d                   	pop    ebp
c0010f06:	c3                   	ret    
c0010f07:	90                   	nop

c0010f08 <VgaText::clearScreen()>:
c0010f08:	57                   	push   edi
c0010f09:	56                   	push   esi
c0010f0a:	31 f6                	xor    esi,esi
c0010f0c:	53                   	push   ebx
c0010f0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f11:	52                   	push   edx
c0010f12:	6a 00                	push   0x0
c0010f14:	6a 00                	push   0x0
c0010f16:	53                   	push   ebx
c0010f17:	e8 88 f9 ff ff       	call   c00108a4 <VgaText::setCursor(int, int)>
c0010f1c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010f23:	83 c4 10             	add    esp,0x10
c0010f26:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010f29:	7e 20                	jle    c0010f4b <VgaText::clearScreen()+0x43>
c0010f2b:	31 ff                	xor    edi,edi
c0010f2d:	50                   	push   eax
c0010f2e:	50                   	push   eax
c0010f2f:	56                   	push   esi
c0010f30:	57                   	push   edi
c0010f31:	47                   	inc    edi
c0010f32:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f35:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f38:	6a 20                	push   0x20
c0010f3a:	53                   	push   ebx
c0010f3b:	e8 f8 f8 ff ff       	call   c0010838 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f40:	83 c4 20             	add    esp,0x20
c0010f43:	83 ff 50             	cmp    edi,0x50
c0010f46:	75 e5                	jne    c0010f2d <VgaText::clearScreen()+0x25>
c0010f48:	46                   	inc    esi
c0010f49:	eb db                	jmp    c0010f26 <VgaText::clearScreen()+0x1e>
c0010f4b:	83 ec 0c             	sub    esp,0xc
c0010f4e:	53                   	push   ebx
c0010f4f:	e8 2e fe ff ff       	call   c0010d82 <VgaText::doUpdate()>
c0010f54:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f5b:	83 c4 10             	add    esp,0x10
c0010f5e:	5b                   	pop    ebx
c0010f5f:	5e                   	pop    esi
c0010f60:	5f                   	pop    edi
c0010f61:	c3                   	ret    

c0010f62 <VgaText::putchar(char)>:
c0010f62:	56                   	push   esi
c0010f63:	53                   	push   ebx
c0010f64:	83 ec 14             	sub    esp,0x14
c0010f67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f6f:	3c 5b                	cmp    al,0x5b
c0010f71:	75 18                	jne    c0010f8b <VgaText::putchar(char)+0x29>
c0010f73:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f77:	74 1f                	je     c0010f98 <VgaText::putchar(char)+0x36>
c0010f79:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f7f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f86:	e9 bd 00 00 00       	jmp    c0011048 <VgaText::putchar(char)+0xe6>
c0010f8b:	3c 1b                	cmp    al,0x1b
c0010f8d:	75 09                	jne    c0010f98 <VgaText::putchar(char)+0x36>
c0010f8f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f93:	e9 b0 00 00 00       	jmp    c0011048 <VgaText::putchar(char)+0xe6>
c0010f98:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f9b:	84 c9                	test   cl,cl
c0010f9d:	0f 84 92 00 00 00    	je     c0011035 <VgaText::putchar(char)+0xd3>
c0010fa3:	8d 50 c0             	lea    edx,[eax-0x40]
c0010fa6:	80 fa 3e             	cmp    dl,0x3e
c0010fa9:	77 76                	ja     c0011021 <VgaText::putchar(char)+0xbf>
c0010fab:	3c 6d                	cmp    al,0x6d
c0010fad:	75 47                	jne    c0010ff6 <VgaText::putchar(char)+0x94>
c0010faf:	31 f6                	xor    esi,esi
c0010fb1:	31 d2                	xor    edx,edx
c0010fb3:	31 c0                	xor    eax,eax
c0010fb5:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010fb8:	7e 2d                	jle    c0010fe7 <VgaText::putchar(char)+0x85>
c0010fba:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010fbf:	80 fa 3b             	cmp    dl,0x3b
c0010fc2:	75 17                	jne    c0010fdb <VgaText::putchar(char)+0x79>
c0010fc4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010fc8:	50                   	push   eax
c0010fc9:	53                   	push   ebx
c0010fca:	e8 fd f6 ff ff       	call   c00106cc <VgaText::doANSI_SGR(int)>
c0010fcf:	59                   	pop    ecx
c0010fd0:	31 d2                	xor    edx,edx
c0010fd2:	58                   	pop    eax
c0010fd3:	31 c0                	xor    eax,eax
c0010fd5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010fd9:	eb 09                	jmp    c0010fe4 <VgaText::putchar(char)+0x82>
c0010fdb:	6b c0 0a             	imul   eax,eax,0xa
c0010fde:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010fe2:	88 ca                	mov    dl,cl
c0010fe4:	46                   	inc    esi
c0010fe5:	eb ce                	jmp    c0010fb5 <VgaText::putchar(char)+0x53>
c0010fe7:	84 d2                	test   dl,dl
c0010fe9:	74 2e                	je     c0011019 <VgaText::putchar(char)+0xb7>
c0010feb:	50                   	push   eax
c0010fec:	53                   	push   ebx
c0010fed:	e8 da f6 ff ff       	call   c00106cc <VgaText::doANSI_SGR(int)>
c0010ff2:	58                   	pop    eax
c0010ff3:	5a                   	pop    edx
c0010ff4:	eb 23                	jmp    c0011019 <VgaText::putchar(char)+0xb7>
c0010ff6:	3c 4a                	cmp    al,0x4a
c0010ff8:	75 1f                	jne    c0011019 <VgaText::putchar(char)+0xb7>
c0010ffa:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010ffe:	75 19                	jne    c0011019 <VgaText::putchar(char)+0xb7>
c0011000:	83 ec 0c             	sub    esp,0xc
c0011003:	53                   	push   ebx
c0011004:	e8 ff fe ff ff       	call   c0010f08 <VgaText::clearScreen()>
c0011009:	83 c4 0c             	add    esp,0xc
c001100c:	6a 00                	push   0x0
c001100e:	6a 00                	push   0x0
c0011010:	53                   	push   ebx
c0011011:	e8 8e f8 ff ff       	call   c00108a4 <VgaText::setCursor(int, int)>
c0011016:	83 c4 10             	add    esp,0x10
c0011019:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001101f:	eb 27                	jmp    c0011048 <VgaText::putchar(char)+0xe6>
c0011021:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0011024:	83 fa 0e             	cmp    edx,0xe
c0011027:	7f 1f                	jg     c0011048 <VgaText::putchar(char)+0xe6>
c0011029:	8d 4a 01             	lea    ecx,[edx+0x1]
c001102c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001102f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0011033:	eb 13                	jmp    c0011048 <VgaText::putchar(char)+0xe6>
c0011035:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011038:	0f be c0             	movsx  eax,al
c001103b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001103e:	50                   	push   eax
c001103f:	53                   	push   ebx
c0011040:	e8 71 fb ff ff       	call   c0010bb6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	83 c4 14             	add    esp,0x14
c001104b:	5b                   	pop    ebx
c001104c:	5e                   	pop    esi
c001104d:	c3                   	ret    

c001104e <VgaText::puts(char const*)>:
c001104e:	53                   	push   ebx
c001104f:	83 ec 08             	sub    esp,0x8
c0011052:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011056:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011059:	84 c0                	test   al,al
c001105b:	74 12                	je     c001106f <VgaText::puts(char const*)+0x21>
c001105d:	43                   	inc    ebx
c001105e:	51                   	push   ecx
c001105f:	51                   	push   ecx
c0011060:	50                   	push   eax
c0011061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011065:	e8 f8 fe ff ff       	call   c0010f62 <VgaText::putchar(char)>
c001106a:	83 c4 10             	add    esp,0x10
c001106d:	eb e7                	jmp    c0011056 <VgaText::puts(char const*)+0x8>
c001106f:	83 c4 08             	add    esp,0x8
c0011072:	5b                   	pop    ebx
c0011073:	c3                   	ret    

c0011074 <VgaText::putx(unsigned int)>:
c0011074:	57                   	push   edi
c0011075:	b9 11 00 00 00       	mov    ecx,0x11
c001107a:	56                   	push   esi
c001107b:	be 2a af 02 c0       	mov    esi,0xc002af2a
c0011080:	53                   	push   ebx
c0011081:	83 ec 20             	sub    esp,0x20
c0011084:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011088:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001108c:	fc                   	cld    
c001108d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001108f:	be 08 00 00 00       	mov    esi,0x8
c0011094:	50                   	push   eax
c0011095:	50                   	push   eax
c0011096:	89 d8                	mov    eax,ebx
c0011098:	c1 e3 04             	shl    ebx,0x4
c001109b:	c1 e8 1c             	shr    eax,0x1c
c001109e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00110a3:	50                   	push   eax
c00110a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110a8:	e8 b5 fe ff ff       	call   c0010f62 <VgaText::putchar(char)>
c00110ad:	83 c4 10             	add    esp,0x10
c00110b0:	4e                   	dec    esi
c00110b1:	75 e1                	jne    c0011094 <VgaText::putx(unsigned int)+0x20>
c00110b3:	83 c4 20             	add    esp,0x20
c00110b6:	5b                   	pop    ebx
c00110b7:	5e                   	pop    esi
c00110b8:	5f                   	pop    edi
c00110b9:	c3                   	ret    

c00110ba <VgaText::VgaText(char const*)>:
c00110ba:	57                   	push   edi
c00110bb:	56                   	push   esi
c00110bc:	53                   	push   ebx
c00110bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c1:	83 ec 08             	sub    esp,0x8
c00110c4:	6a 00                	push   0x0
c00110c6:	50                   	push   eax
c00110c7:	e8 8a 05 00 00       	call   c0011656 <UnixFile::UnixFile(int)>
c00110cc:	83 c4 10             	add    esp,0x10
c00110cf:	ba 90 af 02 c0       	mov    edx,0xc002af90
c00110d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d8:	89 10                	mov    DWORD PTR [eax],edx
c00110da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110de:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00110e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e9:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00110f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00110f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110fc:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011104:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001110b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001111a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011125:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001112c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011130:	8d 50 60             	lea    edx,[eax+0x60]
c0011133:	bb 60 f1 02 c0       	mov    ebx,0xc002f160
c0011138:	b8 08 00 00 00       	mov    eax,0x8
c001113d:	fc                   	cld    
c001113e:	89 d7                	mov    edi,edx
c0011140:	89 de                	mov    esi,ebx
c0011142:	89 c1                	mov    ecx,eax
c0011144:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001114a:	05 82 00 00 00       	add    eax,0x82
c001114f:	83 ec 08             	sub    esp,0x8
c0011152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011156:	50                   	push   eax
c0011157:	e8 cc f6 fe ff       	call   c0000828 <strcpy>
c001115c:	83 c4 10             	add    esp,0x10
c001115f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011163:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c001116a:	83 ec 0c             	sub    esp,0xc
c001116d:	6a 01                	push   0x1
c001116f:	e8 25 09 00 00       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	89 c2                	mov    edx,eax
c0011179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011180:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c0011186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001118d:	89 c6                	mov    esi,eax
c001118f:	e8 cc ed ff ff       	call   c000ff60 <Phys::allocatePage()>
c0011194:	6a 05                	push   0x5
c0011196:	56                   	push   esi
c0011197:	50                   	push   eax
c0011198:	53                   	push   ebx
c0011199:	e8 32 11 00 00       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001119e:	83 c4 10             	add    esp,0x10
c00111a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111a8:	83 ec 04             	sub    esp,0x4
c00111ab:	68 00 0f 00 00       	push   0xf00
c00111b0:	6a 00                	push   0x0
c00111b2:	50                   	push   eax
c00111b3:	e8 b4 f5 fe ff       	call   c000076c <memset>
c00111b8:	83 c4 10             	add    esp,0x10
c00111bb:	83 ec 04             	sub    esp,0x4
c00111be:	6a 00                	push   0x0
c00111c0:	6a 07                	push   0x7
c00111c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111c6:	e8 95 f5 ff ff       	call   c0010760 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00111cb:	83 c4 10             	add    esp,0x10
c00111ce:	83 ec 08             	sub    esp,0x8
c00111d1:	6a 02                	push   0x2
c00111d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d7:	e8 c6 fa ff ff       	call   c0010ca2 <VgaText::setCursorHeight(int)>
c00111dc:	83 c4 10             	add    esp,0x10
c00111df:	83 ec 04             	sub    esp,0x4
c00111e2:	6a 00                	push   0x0
c00111e4:	6a 00                	push   0x0
c00111e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ea:	e8 b5 f6 ff ff       	call   c00108a4 <VgaText::setCursor(int, int)>
c00111ef:	83 c4 10             	add    esp,0x10
c00111f2:	83 ec 08             	sub    esp,0x8
c00111f5:	6a 01                	push   0x1
c00111f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111fb:	e8 8c f4 ff ff       	call   c001068c <VgaText::showCursor(bool)>
c0011200:	83 c4 10             	add    esp,0x10
c0011203:	83 ec 08             	sub    esp,0x8
c0011206:	6a 01                	push   0x1
c0011208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120c:	e8 87 f4 ff ff       	call   c0010698 <VgaText::disableBlink(bool)>
c0011211:	83 c4 10             	add    esp,0x10
c0011214:	83 ec 0c             	sub    esp,0xc
c0011217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001121b:	e8 e8 fc ff ff       	call   c0010f08 <VgaText::clearScreen()>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011227:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001122b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122f:	05 02 01 00 00       	add    eax,0x102
c0011234:	83 ec 04             	sub    esp,0x4
c0011237:	68 96 00 00 00       	push   0x96
c001123c:	6a 00                	push   0x0
c001123e:	50                   	push   eax
c001123f:	e8 28 f5 fe ff       	call   c000076c <memset>
c0011244:	83 c4 10             	add    esp,0x10
c0011247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124b:	05 98 01 00 00       	add    eax,0x198
c0011250:	83 ec 04             	sub    esp,0x4
c0011253:	68 2c 01 00 00       	push   0x12c
c0011258:	6a 00                	push   0x0
c001125a:	50                   	push   eax
c001125b:	e8 0c f5 fe ff       	call   c000076c <memset>
c0011260:	83 c4 10             	add    esp,0x10
c0011263:	90                   	nop
c0011264:	5b                   	pop    ebx
c0011265:	5e                   	pop    esi
c0011266:	5f                   	pop    edi
c0011267:	c3                   	ret    

c0011268 <VgaText::receiveKey(unsigned char)>:
c0011268:	55                   	push   ebp
c0011269:	57                   	push   edi
c001126a:	56                   	push   esi
c001126b:	53                   	push   ebx
c001126c:	83 ec 1c             	sub    esp,0x1c
c001126f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011273:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011277:	84 db                	test   bl,bl
c0011279:	0f 84 c9 00 00 00    	je     c0011348 <VgaText::receiveKey(unsigned char)+0xe0>
c001127f:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0011285:	80 fb 08             	cmp    bl,0x8
c0011288:	75 2c                	jne    c00112b6 <VgaText::receiveKey(unsigned char)+0x4e>
c001128a:	83 ec 0c             	sub    esp,0xc
c001128d:	57                   	push   edi
c001128e:	e8 f5 f4 fe ff       	call   c0000788 <strlen>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	85 c0                	test   eax,eax
c0011298:	74 41                	je     c00112db <VgaText::receiveKey(unsigned char)+0x73>
c001129a:	50                   	push   eax
c001129b:	50                   	push   eax
c001129c:	6a 08                	push   0x8
c001129e:	56                   	push   esi
c001129f:	e8 be fc ff ff       	call   c0010f62 <VgaText::putchar(char)>
c00112a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112a7:	e8 dc f4 fe ff       	call   c0000788 <strlen>
c00112ac:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00112b4:	eb 22                	jmp    c00112d8 <VgaText::receiveKey(unsigned char)+0x70>
c00112b6:	0f be c3             	movsx  eax,bl
c00112b9:	52                   	push   edx
c00112ba:	52                   	push   edx
c00112bb:	50                   	push   eax
c00112bc:	56                   	push   esi
c00112bd:	e8 a0 fc ff ff       	call   c0010f62 <VgaText::putchar(char)>
c00112c2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00112c6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00112cb:	59                   	pop    ecx
c00112cc:	5d                   	pop    ebp
c00112cd:	8d 44 24 16          	lea    eax,[esp+0x16]
c00112d1:	50                   	push   eax
c00112d2:	57                   	push   edi
c00112d3:	e8 90 f6 fe ff       	call   c0000968 <strcat>
c00112d8:	83 c4 10             	add    esp,0x10
c00112db:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c00112e2:	75 05                	jne    c00112e9 <VgaText::receiveKey(unsigned char)+0x81>
c00112e4:	80 fb 0a             	cmp    bl,0xa
c00112e7:	75 53                	jne    c001133c <VgaText::receiveKey(unsigned char)+0xd4>
c00112e9:	83 ec 0c             	sub    esp,0xc
c00112ec:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c00112f2:	53                   	push   ebx
c00112f3:	e8 90 f4 fe ff       	call   c0000788 <strlen>
c00112f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112fb:	89 c5                	mov    ebp,eax
c00112fd:	e8 86 f4 fe ff       	call   c0000788 <strlen>
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011309:	3d 2c 01 00 00       	cmp    eax,0x12c
c001130e:	76 10                	jbe    c0011320 <VgaText::receiveKey(unsigned char)+0xb8>
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	68 3b af 02 c0       	push   0xc002af3b
c0011318:	e8 6a 95 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001131d:	83 c4 10             	add    esp,0x10
c0011320:	50                   	push   eax
c0011321:	50                   	push   eax
c0011322:	57                   	push   edi
c0011323:	53                   	push   ebx
c0011324:	e8 3f f6 fe ff       	call   c0000968 <strcat>
c0011329:	83 c4 0c             	add    esp,0xc
c001132c:	68 96 00 00 00       	push   0x96
c0011331:	6a 00                	push   0x0
c0011333:	57                   	push   edi
c0011334:	e8 33 f4 fe ff       	call   c000076c <memset>
c0011339:	83 c4 10             	add    esp,0x10
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	56                   	push   esi
c0011340:	e8 3d fa ff ff       	call   c0010d82 <VgaText::doUpdate()>
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	83 c4 1c             	add    esp,0x1c
c001134b:	5b                   	pop    ebx
c001134c:	5e                   	pop    esi
c001134d:	5f                   	pop    edi
c001134e:	5d                   	pop    ebp
c001134f:	c3                   	ret    

c0011350 <VgaText::write(unsigned long long, void*, int*)>:
c0011350:	55                   	push   ebp
c0011351:	57                   	push   edi
c0011352:	56                   	push   esi
c0011353:	53                   	push   ebx
c0011354:	83 ec 0c             	sub    esp,0xc
c0011357:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001135b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001135f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011363:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001136a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001136d:	39 eb                	cmp    ebx,ebp
c001136f:	74 13                	je     c0011384 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011371:	43                   	inc    ebx
c0011372:	50                   	push   eax
c0011373:	50                   	push   eax
c0011374:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011378:	50                   	push   eax
c0011379:	56                   	push   esi
c001137a:	e8 e3 fb ff ff       	call   c0010f62 <VgaText::putchar(char)>
c001137f:	83 c4 10             	add    esp,0x10
c0011382:	eb e9                	jmp    c001136d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011384:	83 ec 0c             	sub    esp,0xc
c0011387:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001138e:	56                   	push   esi
c001138f:	e8 ee f9 ff ff       	call   c0010d82 <VgaText::doUpdate()>
c0011394:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011398:	89 38                	mov    DWORD PTR [eax],edi
c001139a:	83 c4 1c             	add    esp,0x1c
c001139d:	31 c0                	xor    eax,eax
c001139f:	5b                   	pop    ebx
c00113a0:	5e                   	pop    esi
c00113a1:	5f                   	pop    edi
c00113a2:	5d                   	pop    ebp
c00113a3:	c3                   	ret    

c00113a4 <newTerminal(char*)>:
c00113a4:	83 ec 28             	sub    esp,0x28
c00113a7:	68 c4 02 00 00       	push   0x2c4
c00113ac:	e8 43 e5 ff ff       	call   c000f8f4 <malloc>
c00113b1:	5a                   	pop    edx
c00113b2:	59                   	pop    ecx
c00113b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113b7:	50                   	push   eax
c00113b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113bc:	e8 f9 fc ff ff       	call   c00110ba <VgaText::VgaText(char const*)>
c00113c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113c5:	83 c4 2c             	add    esp,0x2c
c00113c8:	c3                   	ret    
c00113c9:	90                   	nop

c00113ca <TSS::TSS()>:
c00113ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113d5:	90                   	nop
c00113d6:	c3                   	ret    
c00113d7:	90                   	nop

c00113d8 <TSS::setESP(unsigned long)>:
c00113d8:	55                   	push   ebp
c00113d9:	89 e5                	mov    ebp,esp
c00113db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113e7:	90                   	nop
c00113e8:	5d                   	pop    ebp
c00113e9:	c3                   	ret    

c00113ea <TSS::flush()>:
c00113ea:	55                   	push   ebp
c00113eb:	89 e5                	mov    ebp,esp
c00113ed:	83 ec 10             	sub    esp,0x10
c00113f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00113f5:	83 c8 03             	or     eax,0x3
c00113f8:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00113fc:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011400:	66 89 d0             	mov    ax,dx
c0011403:	0f 00 d8             	ltr    ax
c0011406:	90                   	nop
c0011407:	c9                   	leave  
c0011408:	c3                   	ret    
c0011409:	90                   	nop

c001140a <TSS::setup(unsigned long, unsigned long)>:
c001140a:	55                   	push   ebp
c001140b:	89 e5                	mov    ebp,esp
c001140d:	83 ec 18             	sub    esp,0x18
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	6a 68                	push   0x68
c0011415:	e8 da e4 ff ff       	call   c000f8f4 <malloc>
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	89 c2                	mov    edx,eax
c001141f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011422:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001142b:	83 ec 04             	sub    esp,0x4
c001142e:	6a 68                	push   0x68
c0011430:	6a 00                	push   0x0
c0011432:	50                   	push   eax
c0011433:	e8 34 f3 fe ff       	call   c000076c <memset>
c0011438:	83 c4 10             	add    esp,0x10
c001143b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001143e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011441:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001144a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001144d:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011459:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001145c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001145f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011465:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001146b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011471:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001147a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001147d:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011489:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001148f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011492:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011495:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001149b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a1:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00114a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ad:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00114b0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00114b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c5:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00114cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d2:	0f 20 da             	mov    edx,cr3
c00114d5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00114d8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00114db:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00114de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e4:	83 ec 08             	sub    esp,0x8
c00114e7:	50                   	push   eax
c00114e8:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114eb:	50                   	push   eax
c00114ec:	e8 df db ff ff       	call   c000f0d0 <GDTEntry::setBase(unsigned int)>
c00114f1:	83 c4 10             	add    esp,0x10
c00114f4:	83 ec 08             	sub    esp,0x8
c00114f7:	6a 68                	push   0x68
c00114f9:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114fc:	50                   	push   eax
c00114fd:	e8 ea db ff ff       	call   c000f0ec <GDTEntry::setLimit(unsigned int)>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011509:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001150c:	83 e0 0f             	and    eax,0xf
c001150f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011512:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011515:	83 c8 40             	or     eax,0x40
c0011518:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001151b:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0011520:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011526:	05 78 01 00 00       	add    eax,0x178
c001152b:	83 ec 04             	sub    esp,0x4
c001152e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011531:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011534:	50                   	push   eax
c0011535:	e8 e6 db ff ff       	call   c000f120 <GDT::addEntry(GDTEntry)>
c001153a:	83 c4 10             	add    esp,0x10
c001153d:	89 c2                	mov    edx,eax
c001153f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011542:	89 10                	mov    DWORD PTR [eax],edx
c0011544:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0011549:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001154f:	05 78 01 00 00       	add    eax,0x178
c0011554:	83 ec 0c             	sub    esp,0xc
c0011557:	50                   	push   eax
c0011558:	e8 07 dc ff ff       	call   c000f164 <GDT::flush()>
c001155d:	83 c4 10             	add    esp,0x10
c0011560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011563:	8b 00                	mov    eax,DWORD PTR [eax]
c0011565:	83 ec 08             	sub    esp,0x8
c0011568:	50                   	push   eax
c0011569:	68 a4 af 02 c0       	push   0xc002afa4
c001156e:	e8 2c 19 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011579:	8b 00                	mov    eax,DWORD PTR [eax]
c001157b:	c9                   	leave  
c001157c:	c3                   	ret    
c001157d:	90                   	nop

c001157e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001157e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011582:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011586:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011589:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001158e:	75 08                	jne    c0011598 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011590:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011596:	eb 38                	jmp    c00115d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011598:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001159d:	75 17                	jne    c00115b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001159f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115a7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00115af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115b3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00115b6:	89 c1                	mov    ecx,eax
c00115b8:	83 e1 fd             	and    ecx,0xfffffffd
c00115bb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00115c1:	74 cd                	je     c0011590 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115c3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115c8:	83 e0 ef             	and    eax,0xffffffef
c00115cb:	83 f8 08             	cmp    eax,0x8
c00115ce:	76 c0                	jbe    c0011590 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00115d0:	31 c0                	xor    eax,eax
c00115d2:	c3                   	ret    
c00115d3:	90                   	nop

c00115d4 <ReservedFilename::isAtty()>:
c00115d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00115db:	31 c0                	xor    eax,eax
c00115dd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00115e3:	74 09                	je     c00115ee <ReservedFilename::isAtty()+0x1a>
c00115e5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00115eb:	0f 94 c0             	sete   al
c00115ee:	c3                   	ret    
c00115ef:	90                   	nop

c00115f0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00115f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115ff:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011604:	75 08                	jne    c001160e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011606:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001160c:	eb 3d                	jmp    c001164b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001160e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011613:	75 17                	jne    c001162c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011615:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001161a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001161d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011623:	8b 10                	mov    edx,DWORD PTR [eax]
c0011625:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011629:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001162c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011631:	75 04                	jne    c0011637 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011633:	89 0a                	mov    DWORD PTR [edx],ecx
c0011635:	eb 14                	jmp    c001164b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011637:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001163c:	74 c8                	je     c0011606 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001163e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011643:	83 e0 ef             	and    eax,0xffffffef
c0011646:	83 f8 08             	cmp    eax,0x8
c0011649:	76 bb                	jbe    c0011606 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001164b:	31 c0                	xor    eax,eax
c001164d:	c3                   	ret    

c001164e <UnixFile::getFileDescriptor()>:
c001164e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011655:	c3                   	ret    

c0011656 <UnixFile::UnixFile(int)>:
c0011656:	53                   	push   ebx
c0011657:	83 ec 28             	sub    esp,0x28
c001165a:	ba 90 b0 02 c0       	mov    edx,0xc002b090
c001165f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011663:	89 10                	mov    DWORD PTR [eax],edx
c0011665:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001166d:	0f 8f 8c 01 00 00    	jg     c00117ff <UnixFile::UnixFile(int)+0x1a9>
c0011673:	a1 40 e0 02 c0       	mov    eax,ds:0xc002e040
c0011678:	8d 50 01             	lea    edx,[eax+0x1]
c001167b:	89 15 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,edx
c0011681:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011685:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011688:	83 ec 08             	sub    esp,0x8
c001168b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001168f:	68 18 f2 02 c0       	push   0xc002f218
c0011694:	e8 83 7a 01 00       	call   c002911c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	a0 14 f2 02 c0       	mov    al,ds:0xc002f214
c00116a1:	83 f0 01             	xor    eax,0x1
c00116a4:	84 c0                	test   al,al
c00116a6:	0f 84 54 01 00 00    	je     c0011800 <UnixFile::UnixFile(int)+0x1aa>
c00116ac:	c6 05 14 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f214,0x1
c00116b3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00116bb:	83 ec 0c             	sub    esp,0xc
c00116be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00116c2:	e8 2d e2 ff ff       	call   c000f8f4 <malloc>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	89 c3                	mov    ebx,eax
c00116cc:	83 ec 08             	sub    esp,0x8
c00116cf:	68 03 ff ff 0f       	push   0xfffff03
c00116d4:	53                   	push   ebx
c00116d5:	e8 2c 01 00 00       	call   c0011806 <ReservedFilename::ReservedFilename(int)>
c00116da:	83 c4 10             	add    esp,0x10
c00116dd:	89 1d 0c f2 02 c0    	mov    DWORD PTR ds:0xc002f20c,ebx
c00116e3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00116eb:	83 ec 0c             	sub    esp,0xc
c00116ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f2:	e8 fd e1 ff ff       	call   c000f8f4 <malloc>
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	89 c3                	mov    ebx,eax
c00116fc:	83 ec 08             	sub    esp,0x8
c00116ff:	68 01 ff ff 0f       	push   0xfffff01
c0011704:	53                   	push   ebx
c0011705:	e8 fc 00 00 00       	call   c0011806 <ReservedFilename::ReservedFilename(int)>
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	89 1d 10 f2 02 c0    	mov    DWORD PTR ds:0xc002f210,ebx
c0011713:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001171b:	83 ec 0c             	sub    esp,0xc
c001171e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011722:	e8 cd e1 ff ff       	call   c000f8f4 <malloc>
c0011727:	83 c4 10             	add    esp,0x10
c001172a:	89 c3                	mov    ebx,eax
c001172c:	83 ec 08             	sub    esp,0x8
c001172f:	68 00 ff ff 0f       	push   0xfffff00
c0011734:	53                   	push   ebx
c0011735:	e8 cc 00 00 00       	call   c0011806 <ReservedFilename::ReservedFilename(int)>
c001173a:	83 c4 10             	add    esp,0x10
c001173d:	89 1d 04 f2 02 c0    	mov    DWORD PTR ds:0xc002f204,ebx
c0011743:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001174b:	83 ec 0c             	sub    esp,0xc
c001174e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011752:	e8 9d e1 ff ff       	call   c000f8f4 <malloc>
c0011757:	83 c4 10             	add    esp,0x10
c001175a:	89 c3                	mov    ebx,eax
c001175c:	83 ec 08             	sub    esp,0x8
c001175f:	68 02 ff ff 0f       	push   0xfffff02
c0011764:	53                   	push   ebx
c0011765:	e8 9c 00 00 00       	call   c0011806 <ReservedFilename::ReservedFilename(int)>
c001176a:	83 c4 10             	add    esp,0x10
c001176d:	89 1d 08 f2 02 c0    	mov    DWORD PTR ds:0xc002f208,ebx
c0011773:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001177b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011780:	7f 7e                	jg     c0011800 <UnixFile::UnixFile(int)+0x1aa>
c0011782:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001178a:	83 ec 0c             	sub    esp,0xc
c001178d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011791:	e8 5e e1 ff ff       	call   c000f8f4 <malloc>
c0011796:	83 c4 10             	add    esp,0x10
c0011799:	89 c3                	mov    ebx,eax
c001179b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001179f:	05 10 ff ff 0f       	add    eax,0xfffff10
c00117a4:	83 ec 08             	sub    esp,0x8
c00117a7:	50                   	push   eax
c00117a8:	53                   	push   ebx
c00117a9:	e8 58 00 00 00       	call   c0011806 <ReservedFilename::ReservedFilename(int)>
c00117ae:	83 c4 10             	add    esp,0x10
c00117b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117b5:	89 1c 85 e0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e20],ebx
c00117bc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00117c4:	83 ec 0c             	sub    esp,0xc
c00117c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117cb:	e8 24 e1 ff ff       	call   c000f8f4 <malloc>
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	89 c3                	mov    ebx,eax
c00117d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117d9:	05 20 ff ff 0f       	add    eax,0xfffff20
c00117de:	83 ec 08             	sub    esp,0x8
c00117e1:	50                   	push   eax
c00117e2:	53                   	push   ebx
c00117e3:	e8 1e 00 00 00       	call   c0011806 <ReservedFilename::ReservedFilename(int)>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117ef:	89 1c 85 a0 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0e60],ebx
c00117f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00117fa:	e9 7c ff ff ff       	jmp    c001177b <UnixFile::UnixFile(int)+0x125>
c00117ff:	90                   	nop
c0011800:	83 c4 28             	add    esp,0x28
c0011803:	5b                   	pop    ebx
c0011804:	c3                   	ret    
c0011805:	90                   	nop

c0011806 <ReservedFilename::ReservedFilename(int)>:
c0011806:	83 ec 0c             	sub    esp,0xc
c0011809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001180d:	83 ec 08             	sub    esp,0x8
c0011810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011814:	50                   	push   eax
c0011815:	e8 3c fe ff ff       	call   c0011656 <UnixFile::UnixFile(int)>
c001181a:	83 c4 10             	add    esp,0x10
c001181d:	ba ac b0 02 c0       	mov    edx,0xc002b0ac
c0011822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011826:	89 10                	mov    DWORD PTR [eax],edx
c0011828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001182c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011830:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011833:	90                   	nop
c0011834:	83 c4 0c             	add    esp,0xc
c0011837:	c3                   	ret    

c0011838 <UnixFile::~UnixFile()>:
c0011838:	83 ec 1c             	sub    esp,0x1c
c001183b:	ba 90 b0 02 c0       	mov    edx,0xc002b090
c0011840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011844:	89 10                	mov    DWORD PTR [eax],edx
c0011846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001184a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001184d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011852:	7f 73                	jg     c00118c7 <UnixFile::~UnixFile()+0x8f>
c0011854:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001185c:	83 ec 0c             	sub    esp,0xc
c001185f:	68 18 f2 02 c0       	push   0xc002f218
c0011864:	e8 87 79 01 00       	call   c00291f0 <LinkedList<UnixFile>::getFirstElement()>
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011870:	83 ec 0c             	sub    esp,0xc
c0011873:	68 18 f2 02 c0       	push   0xc002f218
c0011878:	e8 7b 79 01 00       	call   c00291f8 <LinkedList<UnixFile>::removeFirst()>
c001187d:	83 c4 10             	add    esp,0x10
c0011880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011884:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011888:	74 40                	je     c00118ca <UnixFile::~UnixFile()+0x92>
c001188a:	83 ec 08             	sub    esp,0x8
c001188d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011891:	68 18 f2 02 c0       	push   0xc002f218
c0011896:	e8 81 78 01 00       	call   c002911c <LinkedList<UnixFile>::addElement(UnixFile*)>
c001189b:	83 c4 10             	add    esp,0x10
c001189e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118a2:	8d 50 01             	lea    edx,[eax+0x1]
c00118a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00118a9:	3d 88 13 00 00       	cmp    eax,0x1388
c00118ae:	0f 94 c0             	sete   al
c00118b1:	84 c0                	test   al,al
c00118b3:	74 a7                	je     c001185c <UnixFile::~UnixFile()+0x24>
c00118b5:	83 ec 0c             	sub    esp,0xc
c00118b8:	68 68 b0 02 c0       	push   0xc002b068
c00118bd:	e8 c5 8f 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	eb 95                	jmp    c001185c <UnixFile::~UnixFile()+0x24>
c00118c7:	90                   	nop
c00118c8:	eb 01                	jmp    c00118cb <UnixFile::~UnixFile()+0x93>
c00118ca:	90                   	nop
c00118cb:	90                   	nop
c00118cc:	83 c4 1c             	add    esp,0x1c
c00118cf:	c3                   	ret    

c00118d0 <UnixFile::~UnixFile()>:
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	83 ec 0c             	sub    esp,0xc
c00118d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118da:	e8 59 ff ff ff       	call   c0011838 <UnixFile::~UnixFile()>
c00118df:	83 c4 10             	add    esp,0x10
c00118e2:	83 ec 08             	sub    esp,0x8
c00118e5:	6a 0c                	push   0xc
c00118e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118eb:	e8 cf 14 00 00       	call   c0012dbf <operator delete(void*, unsigned long)>
c00118f0:	83 c4 10             	add    esp,0x10
c00118f3:	83 c4 0c             	add    esp,0xc
c00118f6:	c3                   	ret    
c00118f7:	90                   	nop

c00118f8 <ReservedFilename::~ReservedFilename()>:
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	ba ac b0 02 c0       	mov    edx,0xc002b0ac
c0011900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011904:	89 10                	mov    DWORD PTR [eax],edx
c0011906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190a:	83 ec 0c             	sub    esp,0xc
c001190d:	50                   	push   eax
c001190e:	e8 25 ff ff ff       	call   c0011838 <UnixFile::~UnixFile()>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	90                   	nop
c0011917:	83 c4 0c             	add    esp,0xc
c001191a:	c3                   	ret    
c001191b:	90                   	nop

c001191c <ReservedFilename::~ReservedFilename()>:
c001191c:	83 ec 0c             	sub    esp,0xc
c001191f:	83 ec 0c             	sub    esp,0xc
c0011922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011926:	e8 cd ff ff ff       	call   c00118f8 <ReservedFilename::~ReservedFilename()>
c001192b:	83 c4 10             	add    esp,0x10
c001192e:	83 ec 08             	sub    esp,0x8
c0011931:	6a 0c                	push   0xc
c0011933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011937:	e8 83 14 00 00       	call   c0012dbf <operator delete(void*, unsigned long)>
c001193c:	83 c4 10             	add    esp,0x10
c001193f:	83 c4 0c             	add    esp,0xc
c0011942:	c3                   	ret    

c0011943 <getFromFileDescriptor(int)>:
c0011943:	53                   	push   ebx
c0011944:	83 ec 08             	sub    esp,0x8
c0011947:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001194b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011951:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011957:	7f 2c                	jg     c0011985 <getFromFileDescriptor(int)+0x42>
c0011959:	83 ec 0c             	sub    esp,0xc
c001195c:	68 18 f2 02 c0       	push   0xc002f218
c0011961:	e8 8a 78 01 00       	call   c00291f0 <LinkedList<UnixFile>::getFirstElement()>
c0011966:	83 c4 10             	add    esp,0x10
c0011969:	85 c0                	test   eax,eax
c001196b:	75 04                	jne    c0011971 <getFromFileDescriptor(int)+0x2e>
c001196d:	31 c0                	xor    eax,eax
c001196f:	eb 6e                	jmp    c00119df <getFromFileDescriptor(int)+0x9c>
c0011971:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011974:	74 69                	je     c00119df <getFromFileDescriptor(int)+0x9c>
c0011976:	52                   	push   edx
c0011977:	52                   	push   edx
c0011978:	50                   	push   eax
c0011979:	68 18 f2 02 c0       	push   0xc002f218
c001197e:	e8 17 79 01 00       	call   c002929a <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011983:	eb e1                	jmp    c0011966 <getFromFileDescriptor(int)+0x23>
c0011985:	a1 0c f2 02 c0       	mov    eax,ds:0xc002f20c
c001198a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011990:	74 4d                	je     c00119df <getFromFileDescriptor(int)+0x9c>
c0011992:	a1 10 f2 02 c0       	mov    eax,ds:0xc002f210
c0011997:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001199d:	74 40                	je     c00119df <getFromFileDescriptor(int)+0x9c>
c001199f:	a1 08 f2 02 c0       	mov    eax,ds:0xc002f208
c00119a4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00119aa:	74 33                	je     c00119df <getFromFileDescriptor(int)+0x9c>
c00119ac:	a1 04 f2 02 c0       	mov    eax,ds:0xc002f204
c00119b1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00119b7:	74 26                	je     c00119df <getFromFileDescriptor(int)+0x9c>
c00119b9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00119bf:	83 f8 08             	cmp    eax,0x8
c00119c2:	77 09                	ja     c00119cd <getFromFileDescriptor(int)+0x8a>
c00119c4:	8b 04 85 e0 f1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0e20]
c00119cb:	eb 12                	jmp    c00119df <getFromFileDescriptor(int)+0x9c>
c00119cd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00119d3:	83 fb 08             	cmp    ebx,0x8
c00119d6:	77 95                	ja     c001196d <getFromFileDescriptor(int)+0x2a>
c00119d8:	8b 04 9d a0 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0e60]
c00119df:	83 c4 08             	add    esp,0x8
c00119e2:	5b                   	pop    ebx
c00119e3:	c3                   	ret    

c00119e4 <__static_initialization_and_destruction_0(int, int)>:
c00119e4:	83 ec 0c             	sub    esp,0xc
c00119e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00119ec:	75 34                	jne    c0011a22 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00119f6:	75 2a                	jne    c0011a22 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119f8:	83 ec 0c             	sub    esp,0xc
c00119fb:	68 18 f2 02 c0       	push   0xc002f218
c0011a00:	e8 bf 76 01 00       	call   c00290c4 <LinkedList<UnixFile>::LinkedList()>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	83 ec 04             	sub    esp,0x4
c0011a0b:	68 d0 df 02 c0       	push   0xc002dfd0
c0011a10:	68 18 f2 02 c0       	push   0xc002f218
c0011a15:	68 c2 90 02 c0       	push   0xc00290c2
c0011a1a:	e8 1a 13 00 00       	call   c0012d39 <__cxa_atexit>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	90                   	nop
c0011a23:	83 c4 0c             	add    esp,0xc
c0011a26:	c3                   	ret    

c0011a27 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011a27:	83 ec 0c             	sub    esp,0xc
c0011a2a:	83 ec 08             	sub    esp,0x8
c0011a2d:	68 ff ff 00 00       	push   0xffff
c0011a32:	6a 01                	push   0x1
c0011a34:	e8 ab ff ff ff       	call   c00119e4 <__static_initialization_and_destruction_0(int, int)>
c0011a39:	83 c4 10             	add    esp,0x10
c0011a3c:	83 c4 0c             	add    esp,0xc
c0011a3f:	c3                   	ret    

c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a40:	53                   	push   ebx
c0011a41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a49:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a4f:	89 c8                	mov    eax,ecx
c0011a51:	d1 e8                	shr    eax,1
c0011a53:	03 05 48 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e048
c0011a59:	83 e1 01             	and    ecx,0x1
c0011a5c:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a5e:	75 09                	jne    c0011a69 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a60:	83 e2 f0             	and    edx,0xfffffff0
c0011a63:	09 da                	or     edx,ebx
c0011a65:	88 10                	mov    BYTE PTR [eax],dl
c0011a67:	5b                   	pop    ebx
c0011a68:	c3                   	ret    
c0011a69:	c1 e3 04             	shl    ebx,0x4
c0011a6c:	83 e2 0f             	and    edx,0xf
c0011a6f:	09 da                	or     edx,ebx
c0011a71:	88 10                	mov    BYTE PTR [eax],dl
c0011a73:	5b                   	pop    ebx
c0011a74:	c3                   	ret    

c0011a75 <Virt::getPageState(unsigned long)>:
c0011a75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a79:	8b 0d 48 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e048
c0011a7f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a85:	89 d0                	mov    eax,edx
c0011a87:	d1 e8                	shr    eax,1
c0011a89:	83 e2 01             	and    edx,0x1
c0011a8c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a8f:	75 04                	jne    c0011a95 <Virt::getPageState(unsigned long)+0x20>
c0011a91:	83 e0 0f             	and    eax,0xf
c0011a94:	c3                   	ret    
c0011a95:	c0 e8 04             	shr    al,0x4
c0011a98:	c3                   	ret    

c0011a99 <Virt::allocateKernelVirtualPages(int)>:
c0011a99:	55                   	push   ebp
c0011a9a:	31 ed                	xor    ebp,ebp
c0011a9c:	57                   	push   edi
c0011a9d:	56                   	push   esi
c0011a9e:	53                   	push   ebx
c0011a9f:	31 db                	xor    ebx,ebx
c0011aa1:	83 ec 1c             	sub    esp,0x1c
c0011aa4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011aa8:	8b 3d 44 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e044
c0011aae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011ab3:	57                   	push   edi
c0011ab4:	e8 bc ff ff ff       	call   c0011a75 <Virt::getPageState(unsigned long)>
c0011ab9:	5a                   	pop    edx
c0011aba:	84 c0                	test   al,al
c0011abc:	75 3a                	jne    c0011af8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011abe:	85 db                	test   ebx,ebx
c0011ac0:	75 02                	jne    c0011ac4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011ac2:	89 fd                	mov    ebp,edi
c0011ac4:	43                   	inc    ebx
c0011ac5:	39 f3                	cmp    ebx,esi
c0011ac7:	74 5a                	je     c0011b23 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011ac9:	47                   	inc    edi
c0011aca:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ad0:	76 31                	jbe    c0011b03 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011ad2:	c7 05 44 e0 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e044,0xc8000
c0011adc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011ae1:	75 28                	jne    c0011b0b <Virt::allocateKernelVirtualPages(int)+0x72>
c0011ae3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011ae8:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011aed:	57                   	push   edi
c0011aee:	e8 82 ff ff ff       	call   c0011a75 <Virt::getPageState(unsigned long)>
c0011af3:	5a                   	pop    edx
c0011af4:	84 c0                	test   al,al
c0011af6:	74 c6                	je     c0011abe <Virt::allocateKernelVirtualPages(int)+0x25>
c0011af8:	31 db                	xor    ebx,ebx
c0011afa:	47                   	inc    edi
c0011afb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b01:	77 cf                	ja     c0011ad2 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b03:	89 3d 44 e0 02 c0    	mov    DWORD PTR ds:0xc002e044,edi
c0011b09:	eb a8                	jmp    c0011ab3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b0b:	83 ec 0c             	sub    esp,0xc
c0011b0e:	68 c0 b0 02 c0       	push   0xc002b0c0
c0011b13:	e8 6f 8d 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011b18:	8b 3d 44 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e044
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	eb 90                	jmp    c0011ab3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b23:	89 2d 44 e0 02 c0    	mov    DWORD PTR ds:0xc002e044,ebp
c0011b29:	4b                   	dec    ebx
c0011b2a:	74 5f                	je     c0011b8b <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011b2c:	85 f6                	test   esi,esi
c0011b2e:	74 3d                	je     c0011b6d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b30:	89 e8                	mov    eax,ebp
c0011b32:	31 db                	xor    ebx,ebx
c0011b34:	8d 7e ff             	lea    edi,[esi-0x1]
c0011b37:	eb 14                	jmp    c0011b4d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011b39:	6a 01                	push   0x1
c0011b3b:	43                   	inc    ebx
c0011b3c:	50                   	push   eax
c0011b3d:	e8 fe fe ff ff       	call   c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b42:	58                   	pop    eax
c0011b43:	39 f3                	cmp    ebx,esi
c0011b45:	5a                   	pop    edx
c0011b46:	74 25                	je     c0011b6d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b48:	a1 44 e0 02 c0       	mov    eax,ds:0xc002e044
c0011b4d:	8d 50 01             	lea    edx,[eax+0x1]
c0011b50:	85 db                	test   ebx,ebx
c0011b52:	89 15 44 e0 02 c0    	mov    DWORD PTR ds:0xc002e044,edx
c0011b58:	74 20                	je     c0011b7a <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b5a:	39 df                	cmp    edi,ebx
c0011b5c:	75 db                	jne    c0011b39 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b5e:	6a 03                	push   0x3
c0011b60:	43                   	inc    ebx
c0011b61:	50                   	push   eax
c0011b62:	e8 d9 fe ff ff       	call   c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b67:	59                   	pop    ecx
c0011b68:	39 f3                	cmp    ebx,esi
c0011b6a:	58                   	pop    eax
c0011b6b:	75 db                	jne    c0011b48 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b6d:	83 c4 1c             	add    esp,0x1c
c0011b70:	89 e8                	mov    eax,ebp
c0011b72:	5b                   	pop    ebx
c0011b73:	c1 e0 0c             	shl    eax,0xc
c0011b76:	5e                   	pop    esi
c0011b77:	5f                   	pop    edi
c0011b78:	5d                   	pop    ebp
c0011b79:	c3                   	ret    
c0011b7a:	6a 02                	push   0x2
c0011b7c:	bb 01 00 00 00       	mov    ebx,0x1
c0011b81:	50                   	push   eax
c0011b82:	e8 b9 fe ff ff       	call   c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b87:	58                   	pop    eax
c0011b88:	5a                   	pop    edx
c0011b89:	eb bd                	jmp    c0011b48 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b8b:	6a 04                	push   0x4
c0011b8d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b90:	55                   	push   ebp
c0011b91:	a3 44 e0 02 c0       	mov    ds:0xc002e044,eax
c0011b96:	e8 a5 fe ff ff       	call   c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b9b:	59                   	pop    ecx
c0011b9c:	89 e8                	mov    eax,ebp
c0011b9e:	5b                   	pop    ebx
c0011b9f:	c1 e0 0c             	shl    eax,0xc
c0011ba2:	83 c4 1c             	add    esp,0x1c
c0011ba5:	5b                   	pop    ebx
c0011ba6:	5e                   	pop    esi
c0011ba7:	5f                   	pop    edi
c0011ba8:	5d                   	pop    ebp
c0011ba9:	c3                   	ret    

c0011baa <Virt::freeSwapfilePage(unsigned long)>:
c0011baa:	53                   	push   ebx
c0011bab:	8b 15 2c f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f22c
c0011bb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011bb5:	b8 01 00 00 00       	mov    eax,0x1
c0011bba:	89 cb                	mov    ebx,ecx
c0011bbc:	d3 e0                	shl    eax,cl
c0011bbe:	c1 eb 05             	shr    ebx,0x5
c0011bc1:	f7 d0                	not    eax
c0011bc3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011bc6:	5b                   	pop    ebx
c0011bc7:	c3                   	ret    

c0011bc8 <Virt::swapIDToSector(unsigned long)>:
c0011bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcc:	0f af 05 4c e0 02 c0 	imul   eax,DWORD PTR ds:0xc002e04c
c0011bd3:	03 05 54 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e054
c0011bd9:	c3                   	ret    

c0011bda <Virt::allocateSwapfilePage()>:
c0011bda:	55                   	push   ebp
c0011bdb:	31 d2                	xor    edx,edx
c0011bdd:	57                   	push   edi
c0011bde:	56                   	push   esi
c0011bdf:	53                   	push   ebx
c0011be0:	83 ec 0c             	sub    esp,0xc
c0011be3:	8b 0d 4c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e04c
c0011be9:	a1 50 e0 02 c0       	mov    eax,ds:0xc002e050
c0011bee:	f7 f1                	div    ecx
c0011bf0:	39 0d 50 e0 02 c0    	cmp    DWORD PTR ds:0xc002e050,ecx
c0011bf6:	72 2d                	jb     c0011c25 <Virt::allocateSwapfilePage()+0x4b>
c0011bf8:	8b 35 2c f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f22c
c0011bfe:	8b 16                	mov    edx,DWORD PTR [esi]
c0011c00:	f6 c2 01             	test   dl,0x1
c0011c03:	74 3c                	je     c0011c41 <Virt::allocateSwapfilePage()+0x67>
c0011c05:	31 c9                	xor    ecx,ecx
c0011c07:	bf 01 00 00 00       	mov    edi,0x1
c0011c0c:	eb 12                	jmp    c0011c20 <Virt::allocateSwapfilePage()+0x46>
c0011c0e:	89 fd                	mov    ebp,edi
c0011c10:	89 ca                	mov    edx,ecx
c0011c12:	d3 e5                	shl    ebp,cl
c0011c14:	c1 ea 05             	shr    edx,0x5
c0011c17:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011c1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c1c:	85 ea                	test   edx,ebp
c0011c1e:	74 2a                	je     c0011c4a <Virt::allocateSwapfilePage()+0x70>
c0011c20:	41                   	inc    ecx
c0011c21:	39 c8                	cmp    eax,ecx
c0011c23:	77 e9                	ja     c0011c0e <Virt::allocateSwapfilePage()+0x34>
c0011c25:	83 ec 0c             	sub    esp,0xc
c0011c28:	68 47 b2 02 c0       	push   0xc002b247
c0011c2d:	e8 55 8c 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011c32:	83 c4 10             	add    esp,0x10
c0011c35:	31 c9                	xor    ecx,ecx
c0011c37:	83 c4 0c             	add    esp,0xc
c0011c3a:	89 c8                	mov    eax,ecx
c0011c3c:	5b                   	pop    ebx
c0011c3d:	5e                   	pop    esi
c0011c3e:	5f                   	pop    edi
c0011c3f:	5d                   	pop    ebp
c0011c40:	c3                   	ret    
c0011c41:	89 f3                	mov    ebx,esi
c0011c43:	bd 01 00 00 00       	mov    ebp,0x1
c0011c48:	31 c9                	xor    ecx,ecx
c0011c4a:	09 ea                	or     edx,ebp
c0011c4c:	89 c8                	mov    eax,ecx
c0011c4e:	89 13                	mov    DWORD PTR [ebx],edx
c0011c50:	83 c4 0c             	add    esp,0xc
c0011c53:	5b                   	pop    ebx
c0011c54:	5e                   	pop    esi
c0011c55:	5f                   	pop    edi
c0011c56:	5d                   	pop    ebp
c0011c57:	c3                   	ret    

c0011c58 <Virt::virtualMemorySetup()>:
c0011c58:	53                   	push   ebx
c0011c59:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c5e:	83 ec 08             	sub    esp,0x8
c0011c61:	6a 0f                	push   0xf
c0011c63:	53                   	push   ebx
c0011c64:	43                   	inc    ebx
c0011c65:	e8 d6 fd ff ff       	call   c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6a:	59                   	pop    ecx
c0011c6b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c71:	58                   	pop    eax
c0011c72:	75 ed                	jne    c0011c61 <Virt::virtualMemorySetup()+0x9>
c0011c74:	83 ec 08             	sub    esp,0x8
c0011c77:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c7c:	68 00 00 00 c8       	push   0xc8000000
c0011c81:	68 5e b2 02 c0       	push   0xc002b25e
c0011c86:	e8 14 12 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0011c8b:	58                   	pop    eax
c0011c8c:	5a                   	pop    edx
c0011c8d:	68 00 f0 ff ef       	push   0xeffff000
c0011c92:	68 72 b2 02 c0       	push   0xc002b272
c0011c97:	e8 03 12 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0011c9c:	83 c4 10             	add    esp,0x10
c0011c9f:	83 ec 08             	sub    esp,0x8
c0011ca2:	6a 00                	push   0x0
c0011ca4:	53                   	push   ebx
c0011ca5:	43                   	inc    ebx
c0011ca6:	e8 95 fd ff ff       	call   c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cab:	83 c4 10             	add    esp,0x10
c0011cae:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011cb4:	75 e9                	jne    c0011c9f <Virt::virtualMemorySetup()+0x47>
c0011cb6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011cbb:	83 ec 08             	sub    esp,0x8
c0011cbe:	6a 0f                	push   0xf
c0011cc0:	53                   	push   ebx
c0011cc1:	43                   	inc    ebx
c0011cc2:	e8 79 fd ff ff       	call   c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cc7:	83 c4 10             	add    esp,0x10
c0011cca:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011cd0:	75 e9                	jne    c0011cbb <Virt::virtualMemorySetup()+0x63>
c0011cd2:	83 c4 08             	add    esp,0x8
c0011cd5:	5b                   	pop    ebx
c0011cd6:	c3                   	ret    

c0011cd7 <Virt::swappingSetup()>:
c0011cd7:	c3                   	ret    

c0011cd8 <Virt::setupPageSwapping(int)>:
c0011cd8:	57                   	push   edi
c0011cd9:	56                   	push   esi
c0011cda:	53                   	push   ebx
c0011cdb:	83 ec 1c             	sub    esp,0x1c
c0011cde:	68 86 b2 02 c0       	push   0xc002b286
c0011ce3:	e8 b7 11 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0011ce8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cef:	e8 00 dc ff ff       	call   c000f8f4 <malloc>
c0011cf4:	83 c4 0c             	add    esp,0xc
c0011cf7:	89 c6                	mov    esi,eax
c0011cf9:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c0011cff:	68 9a b2 02 c0       	push   0xc002b29a
c0011d04:	50                   	push   eax
c0011d05:	e8 f4 16 00 00       	call   c00133fe <File::File(char const*, Process*)>
c0011d0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d0d:	e8 c8 18 00 00       	call   c00135da <File::unlink()>
c0011d12:	59                   	pop    ecx
c0011d13:	5b                   	pop    ebx
c0011d14:	6a 12                	push   0x12
c0011d16:	56                   	push   esi
c0011d17:	e8 46 17 00 00       	call   c0013462 <File::open(FileOpenMode)>
c0011d1c:	83 c4 10             	add    esp,0x10
c0011d1f:	85 c0                	test   eax,eax
c0011d21:	0f 85 5b 01 00 00    	jne    c0011e82 <Virt::setupPageSwapping(int)+0x1aa>
c0011d27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d33:	c1 e3 08             	shl    ebx,0x8
c0011d36:	83 ec 0c             	sub    esp,0xc
c0011d39:	68 00 00 01 00       	push   0x10000
c0011d3e:	e8 b1 db ff ff       	call   c000f8f4 <malloc>
c0011d43:	83 c4 0c             	add    esp,0xc
c0011d46:	89 c7                	mov    edi,eax
c0011d48:	68 00 00 01 00       	push   0x10000
c0011d4d:	68 ee 00 00 00       	push   0xee
c0011d52:	50                   	push   eax
c0011d53:	e8 14 ea fe ff       	call   c000076c <memset>
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	85 db                	test   ebx,ebx
c0011d5d:	79 03                	jns    c0011d62 <Virt::setupPageSwapping(int)+0x8a>
c0011d5f:	83 c3 0f             	add    ebx,0xf
c0011d62:	c1 fb 04             	sar    ebx,0x4
c0011d65:	4b                   	dec    ebx
c0011d66:	83 fb ff             	cmp    ebx,0xffffffff
c0011d69:	74 4f                	je     c0011dba <Virt::setupPageSwapping(int)+0xe2>
c0011d6b:	83 ec 0c             	sub    esp,0xc
c0011d6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d70:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d74:	52                   	push   edx
c0011d75:	57                   	push   edi
c0011d76:	6a 00                	push   0x0
c0011d78:	68 00 00 01 00       	push   0x10000
c0011d7d:	56                   	push   esi
c0011d7e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d81:	83 c4 20             	add    esp,0x20
c0011d84:	85 c0                	test   eax,eax
c0011d86:	0f 85 e0 00 00 00    	jne    c0011e6c <Virt::setupPageSwapping(int)+0x194>
c0011d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d90:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d95:	74 ce                	je     c0011d65 <Virt::setupPageSwapping(int)+0x8d>
c0011d97:	83 ec 08             	sub    esp,0x8
c0011d9a:	4b                   	dec    ebx
c0011d9b:	50                   	push   eax
c0011d9c:	68 ed b2 02 c0       	push   0xc002b2ed
c0011da1:	e8 f9 10 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0011da6:	c7 04 24 f6 b2 02 c0 	mov    DWORD PTR [esp],0xc002b2f6
c0011dad:	e8 d5 8a 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011db2:	83 c4 10             	add    esp,0x10
c0011db5:	83 fb ff             	cmp    ebx,0xffffffff
c0011db8:	75 b1                	jne    c0011d6b <Virt::setupPageSwapping(int)+0x93>
c0011dba:	83 ec 0c             	sub    esp,0xc
c0011dbd:	56                   	push   esi
c0011dbe:	e8 fd 16 00 00       	call   c00134c0 <File::close()>
c0011dc3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011dc6:	e8 49 db ff ff       	call   c000f914 <rfree>
c0011dcb:	83 c4 10             	add    esp,0x10
c0011dce:	85 f6                	test   esi,esi
c0011dd0:	74 0c                	je     c0011dde <Virt::setupPageSwapping(int)+0x106>
c0011dd2:	83 ec 0c             	sub    esp,0xc
c0011dd5:	8b 06                	mov    eax,DWORD PTR [esi]
c0011dd7:	56                   	push   esi
c0011dd8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ddb:	83 c4 10             	add    esp,0x10
c0011dde:	83 ec 08             	sub    esp,0x8
c0011de1:	a1 c8 f6 02 c0       	mov    eax,ds:0xc002f6c8
c0011de6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011dec:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dee:	68 9a b2 02 c0       	push   0xc002b29a
c0011df3:	50                   	push   eax
c0011df4:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011df7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011dfb:	c6 05 58 e0 02 c0 43 	mov    BYTE PTR ds:0xc002e058,0x43
c0011e02:	c1 e2 0b             	shl    edx,0xb
c0011e05:	a3 54 e0 02 c0       	mov    ds:0xc002e054,eax
c0011e0a:	89 15 50 e0 02 c0    	mov    DWORD PTR ds:0xc002e050,edx
c0011e10:	c7 05 4c e0 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e04c,0x8
c0011e1a:	c1 ea 08             	shr    edx,0x8
c0011e1d:	89 14 24             	mov    DWORD PTR [esp],edx
c0011e20:	e8 cf da ff ff       	call   c000f8f4 <malloc>
c0011e25:	83 c4 0c             	add    esp,0xc
c0011e28:	89 c1                	mov    ecx,eax
c0011e2a:	a3 2c f2 02 c0       	mov    ds:0xc002f22c,eax
c0011e2f:	31 d2                	xor    edx,edx
c0011e31:	a1 50 e0 02 c0       	mov    eax,ds:0xc002e050
c0011e36:	f7 35 4c e0 02 c0    	div    DWORD PTR ds:0xc002e04c
c0011e3c:	c1 e8 05             	shr    eax,0x5
c0011e3f:	50                   	push   eax
c0011e40:	6a 00                	push   0x0
c0011e42:	51                   	push   ecx
c0011e43:	e8 24 e9 fe ff       	call   c000076c <memset>
c0011e48:	58                   	pop    eax
c0011e49:	a1 50 e0 02 c0       	mov    eax,ds:0xc002e050
c0011e4e:	5a                   	pop    edx
c0011e4f:	31 d2                	xor    edx,edx
c0011e51:	f7 35 4c e0 02 c0    	div    DWORD PTR ds:0xc002e04c
c0011e57:	c1 e8 05             	shr    eax,0x5
c0011e5a:	50                   	push   eax
c0011e5b:	68 fc b2 02 c0       	push   0xc002b2fc
c0011e60:	e8 3a 10 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0011e65:	83 c4 20             	add    esp,0x20
c0011e68:	5b                   	pop    ebx
c0011e69:	5e                   	pop    esi
c0011e6a:	5f                   	pop    edi
c0011e6b:	c3                   	ret    
c0011e6c:	83 ec 08             	sub    esp,0x8
c0011e6f:	50                   	push   eax
c0011e70:	68 d5 b2 02 c0       	push   0xc002b2d5
c0011e75:	e8 25 10 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0011e7a:	83 c4 10             	add    esp,0x10
c0011e7d:	e9 0a ff ff ff       	jmp    c0011d8c <Virt::setupPageSwapping(int)+0xb4>
c0011e82:	83 ec 08             	sub    esp,0x8
c0011e85:	50                   	push   eax
c0011e86:	68 b1 b2 02 c0       	push   0xc002b2b1
c0011e8b:	e8 0f 10 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0011e90:	c7 04 24 ba b2 02 c0 	mov    DWORD PTR [esp],0xc002b2ba
c0011e97:	e8 eb 89 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011e9c:	83 c4 10             	add    esp,0x10
c0011e9f:	e9 83 fe ff ff       	jmp    c0011d27 <Virt::setupPageSwapping(int)+0x4f>

c0011ea4 <VAS::VAS()>:
c0011ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ea8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011eaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eb3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011eba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ebe:	a3 30 f2 02 c0       	mov    ds:0xc002f230,eax
c0011ec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ec7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ecf:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011ed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ed6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011edd:	90                   	nop
c0011ede:	c3                   	ret    
c0011edf:	90                   	nop

c0011ee0 <VAS::VAS(VAS*)>:
c0011ee0:	83 ec 0c             	sub    esp,0xc
c0011ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ee7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ef2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ef9:	83 ec 0c             	sub    esp,0xc
c0011efc:	68 e0 b0 02 c0       	push   0xc002b0e0
c0011f01:	e8 81 89 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011f06:	83 c4 10             	add    esp,0x10
c0011f09:	90                   	nop
c0011f0a:	83 c4 0c             	add    esp,0xc
c0011f0d:	c3                   	ret    

c0011f0e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f12:	89 c2                	mov    edx,eax
c0011f14:	c1 e8 0a             	shr    eax,0xa
c0011f17:	c1 ea 16             	shr    edx,0x16
c0011f1a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f1f:	19 c9                	sbb    ecx,ecx
c0011f21:	c1 e2 0c             	shl    edx,0xc
c0011f24:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f2a:	25 fc 0f 00 00       	and    eax,0xffc
c0011f2f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f36:	01 d0                	add    eax,edx
c0011f38:	c3                   	ret    
c0011f39:	90                   	nop

c0011f3a <VAS::getPageTableEntry(unsigned long)>:
c0011f3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f3e:	89 ca                	mov    edx,ecx
c0011f40:	c1 e9 0a             	shr    ecx,0xa
c0011f43:	c1 ea 16             	shr    edx,0x16
c0011f46:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f4c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f52:	c1 e0 0c             	shl    eax,0xc
c0011f55:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f58:	c3                   	ret    

c0011f59 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f59:	57                   	push   edi
c0011f5a:	56                   	push   esi
c0011f5b:	be 01 00 00 00       	mov    esi,0x1
c0011f60:	53                   	push   ebx
c0011f61:	83 ec 10             	sub    esp,0x10
c0011f64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f68:	c1 eb 0c             	shr    ebx,0xc
c0011f6b:	eb 3f                	jmp    c0011fac <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f6d:	83 ec 08             	sub    esp,0x8
c0011f70:	57                   	push   edi
c0011f71:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c0011f77:	e8 be ff ff ff       	call   c0011f3a <VAS::getPageTableEntry(unsigned long)>
c0011f7c:	83 c4 10             	add    esp,0x10
c0011f7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f81:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f85:	f6 c4 04             	test   ah,0x4
c0011f88:	75 5f                	jne    c0011fe9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f8a:	80 fa 04             	cmp    dl,0x4
c0011f8d:	74 78                	je     c0012007 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f8f:	80 fa 02             	cmp    dl,0x2
c0011f92:	0f 84 88 00 00 00    	je     c0012020 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f98:	80 fa 03             	cmp    dl,0x3
c0011f9b:	0f 84 ad 00 00 00    	je     c001204e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011fa1:	fe ca                	dec    dl
c0011fa3:	0f 84 92 00 00 00    	je     c001203b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fa9:	43                   	inc    ebx
c0011faa:	31 f6                	xor    esi,esi
c0011fac:	53                   	push   ebx
c0011fad:	89 df                	mov    edi,ebx
c0011faf:	e8 c1 fa ff ff       	call   c0011a75 <Virt::getPageState(unsigned long)>
c0011fb4:	c1 e7 0c             	shl    edi,0xc
c0011fb7:	59                   	pop    ecx
c0011fb8:	84 c0                	test   al,al
c0011fba:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011fbe:	75 ad                	jne    c0011f6d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011fc0:	83 ec 0c             	sub    esp,0xc
c0011fc3:	68 17 b3 02 c0       	push   0xc002b317
c0011fc8:	e8 ba 88 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0011fcd:	58                   	pop    eax
c0011fce:	5a                   	pop    edx
c0011fcf:	57                   	push   edi
c0011fd0:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c0011fd6:	e8 5f ff ff ff       	call   c0011f3a <VAS::getPageTableEntry(unsigned long)>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fe0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fe4:	f6 c4 04             	test   ah,0x4
c0011fe7:	74 c0                	je     c0011fa9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fe9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011fed:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ff2:	83 ec 0c             	sub    esp,0xc
c0011ff5:	50                   	push   eax
c0011ff6:	e8 db de ff ff       	call   c000fed6 <Phys::freePage(unsigned long)>
c0011ffb:	83 c4 10             	add    esp,0x10
c0011ffe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012002:	80 fa 04             	cmp    dl,0x4
c0012005:	75 88                	jne    c0011f8f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012007:	89 f0                	mov    eax,esi
c0012009:	84 c0                	test   al,al
c001200b:	75 47                	jne    c0012054 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001200d:	c7 44 24 20 04 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b104
c0012015:	83 c4 10             	add    esp,0x10
c0012018:	5b                   	pop    ebx
c0012019:	5e                   	pop    esi
c001201a:	5f                   	pop    edi
c001201b:	e9 67 88 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c0012020:	89 f0                	mov    eax,esi
c0012022:	84 c0                	test   al,al
c0012024:	75 15                	jne    c001203b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012026:	83 ec 0c             	sub    esp,0xc
c0012029:	68 33 b3 02 c0       	push   0xc002b333
c001202e:	e8 54 88 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0012033:	83 c4 10             	add    esp,0x10
c0012036:	e9 6e ff ff ff       	jmp    c0011fa9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001203b:	83 ec 08             	sub    esp,0x8
c001203e:	6a 00                	push   0x0
c0012040:	53                   	push   ebx
c0012041:	e8 fa f9 ff ff       	call   c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012046:	83 c4 10             	add    esp,0x10
c0012049:	e9 5b ff ff ff       	jmp    c0011fa9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001204e:	89 f0                	mov    eax,esi
c0012050:	84 c0                	test   al,al
c0012052:	75 15                	jne    c0012069 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012054:	83 ec 08             	sub    esp,0x8
c0012057:	6a 00                	push   0x0
c0012059:	53                   	push   ebx
c001205a:	e8 e1 f9 ff ff       	call   c0011a40 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001205f:	83 c4 10             	add    esp,0x10
c0012062:	83 c4 10             	add    esp,0x10
c0012065:	5b                   	pop    ebx
c0012066:	5e                   	pop    esi
c0012067:	5f                   	pop    edi
c0012068:	c3                   	ret    
c0012069:	c7 44 24 20 4f b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b34f
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	5b                   	pop    ebx
c0012075:	5e                   	pop    esi
c0012076:	5f                   	pop    edi
c0012077:	e9 0b 88 00 00       	jmp    c001a887 <Krnl::panic(char const*)>

c001207c <VAS::freeAllocatedPages(unsigned long)>:
c001207c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012084:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012088:	74 09                	je     c0012093 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001208a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001208e:	e9 c6 fe ff ff       	jmp    c0011f59 <Virt::freeKernelVirtualPages(unsigned long)>
c0012093:	c7 44 24 04 28 b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b128
c001209b:	e9 ff 0d 00 00       	jmp    c0012e9f <Dbg::kprintf(char const*, ...)>

c00120a0 <VAS::virtualToPhysical(unsigned long)>:
c00120a0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120a4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120a8:	e8 8d fe ff ff       	call   c0011f3a <VAS::getPageTableEntry(unsigned long)>
c00120ad:	5a                   	pop    edx
c00120ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00120b0:	59                   	pop    ecx
c00120b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120b6:	c3                   	ret    
c00120b7:	90                   	nop

c00120b8 <VAS::reflagRange(unsigned long, int, int, int)>:
c00120b8:	55                   	push   ebp
c00120b9:	57                   	push   edi
c00120ba:	56                   	push   esi
c00120bb:	53                   	push   ebx
c00120bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00120c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00120c4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00120c8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00120cc:	85 db                	test   ebx,ebx
c00120ce:	7e 22                	jle    c00120f2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00120d0:	c1 e3 0c             	shl    ebx,0xc
c00120d3:	01 f3                	add    ebx,esi
c00120d5:	56                   	push   esi
c00120d6:	81 c6 00 10 00 00    	add    esi,0x1000
c00120dc:	55                   	push   ebp
c00120dd:	e8 58 fe ff ff       	call   c0011f3a <VAS::getPageTableEntry(unsigned long)>
c00120e2:	5a                   	pop    edx
c00120e3:	59                   	pop    ecx
c00120e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00120e6:	21 f9                	and    ecx,edi
c00120e8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00120ec:	39 f3                	cmp    ebx,esi
c00120ee:	89 08                	mov    DWORD PTR [eax],ecx
c00120f0:	75 e3                	jne    c00120d5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00120f2:	5b                   	pop    ebx
c00120f3:	5e                   	pop    esi
c00120f4:	5f                   	pop    edi
c00120f5:	5d                   	pop    ebp
c00120f6:	c3                   	ret    
c00120f7:	90                   	nop

c00120f8 <VAS::setToWriteCombining(unsigned long, int)>:
c00120f8:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00120fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012103:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001210a:	75 01                	jne    c001210d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001210c:	c3                   	ret    
c001210d:	68 80 00 00 00       	push   0x80
c0012112:	6a ff                	push   0xffffffff
c0012114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001211c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012120:	e8 93 ff ff ff       	call   c00120b8 <VAS::reflagRange(unsigned long, int, int, int)>
c0012125:	83 c4 14             	add    esp,0x14
c0012128:	c3                   	ret    
c0012129:	90                   	nop

c001212a <VAS::mapOtherVASIn(bool, VAS*)>:
c001212a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001212f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012133:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001213a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001213d:	19 c0                	sbb    eax,eax
c001213f:	83 ca 03             	or     edx,0x3
c0012142:	83 e0 fc             	and    eax,0xfffffffc
c0012145:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001214c:	0f 20 d8             	mov    eax,cr3
c001214f:	0f 22 d8             	mov    cr3,eax
c0012152:	c3                   	ret    
c0012153:	90                   	nop

c0012154 <VAS::~VAS()>:
c0012154:	83 ec 2c             	sub    esp,0x2c
c0012157:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001215f:	fa                   	cli    
c0012160:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0012165:	40                   	inc    eax
c0012166:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001216b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012170:	8b 00                	mov    eax,DWORD PTR [eax]
c0012172:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012175:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001217b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001217f:	6a 01                	push   0x1
c0012181:	50                   	push   eax
c0012182:	e8 a3 ff ff ff       	call   c001212a <VAS::mapOtherVASIn(bool, VAS*)>
c0012187:	83 c4 0c             	add    esp,0xc
c001218a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012192:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001219a:	0f 8f d4 00 00 00    	jg     c0012274 <VAS::~VAS()+0x120>
c00121a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121ab:	c1 e2 02             	shl    edx,0x2
c00121ae:	01 d0                	add    eax,edx
c00121b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00121b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00121b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ba:	83 e0 01             	and    eax,0x1
c00121bd:	0f 84 a8 00 00 00    	je     c001226b <VAS::~VAS()+0x117>
c00121c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00121cb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00121d3:	7f 72                	jg     c0012247 <VAS::~VAS()+0xf3>
c00121d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121d9:	c1 e0 0a             	shl    eax,0xa
c00121dc:	89 c2                	mov    edx,eax
c00121de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121e2:	01 d0                	add    eax,edx
c00121e4:	c1 e0 0c             	shl    eax,0xc
c00121e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121eb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00121f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121f5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121ff:	6a 01                	push   0x1
c0012201:	50                   	push   eax
c0012202:	e8 07 fd ff ff       	call   c0011f0e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012207:	83 c4 0c             	add    esp,0xc
c001220a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001220e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012212:	8b 00                	mov    eax,DWORD PTR [eax]
c0012214:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001221c:	25 01 04 00 00       	and    eax,0x401
c0012221:	3d 01 04 00 00       	cmp    eax,0x401
c0012226:	75 19                	jne    c0012241 <VAS::~VAS()+0xed>
c0012228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001222c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012231:	83 ec 0c             	sub    esp,0xc
c0012234:	50                   	push   eax
c0012235:	e8 9c dc ff ff       	call   c000fed6 <Phys::freePage(unsigned long)>
c001223a:	83 c4 10             	add    esp,0x10
c001223d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012241:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012245:	eb 84                	jmp    c00121cb <VAS::~VAS()+0x77>
c0012247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001224b:	25 00 04 00 00       	and    eax,0x400
c0012250:	74 19                	je     c001226b <VAS::~VAS()+0x117>
c0012252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012256:	25 00 f0 ff ff       	and    eax,0xfffff000
c001225b:	83 ec 0c             	sub    esp,0xc
c001225e:	50                   	push   eax
c001225f:	e8 72 dc ff ff       	call   c000fed6 <Phys::freePage(unsigned long)>
c0012264:	83 c4 10             	add    esp,0x10
c0012267:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001226b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001226f:	e9 1e ff ff ff       	jmp    c0012192 <VAS::~VAS()+0x3e>
c0012274:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012278:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001227b:	83 ec 0c             	sub    esp,0xc
c001227e:	50                   	push   eax
c001227f:	e8 d5 fc ff ff       	call   c0011f59 <Virt::freeKernelVirtualPages(unsigned long)>
c0012284:	83 c4 10             	add    esp,0x10
c0012287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001228b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001228e:	83 ec 0c             	sub    esp,0xc
c0012291:	50                   	push   eax
c0012292:	e8 3f dc ff ff       	call   c000fed6 <Phys::freePage(unsigned long)>
c0012297:	83 c4 10             	add    esp,0x10
c001229a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001229e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00122a2:	c1 e0 02             	shl    eax,0x2
c00122a5:	83 ec 08             	sub    esp,0x8
c00122a8:	50                   	push   eax
c00122a9:	68 4c b1 02 c0       	push   0xc002b14c
c00122ae:	e8 ec 0b 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00122b3:	83 c4 10             	add    esp,0x10
c00122b6:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00122bb:	48                   	dec    eax
c00122bc:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c00122c1:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00122c6:	85 c0                	test   eax,eax
c00122c8:	75 01                	jne    c00122cb <VAS::~VAS()+0x177>
c00122ca:	fb                   	sti    
c00122cb:	90                   	nop
c00122cc:	83 c4 2c             	add    esp,0x2c
c00122cf:	c3                   	ret    

c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00122d0:	55                   	push   ebp
c00122d1:	57                   	push   edi
c00122d2:	56                   	push   esi
c00122d3:	53                   	push   ebx
c00122d4:	83 ec 1c             	sub    esp,0x1c
c00122d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00122db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122df:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00122e5:	77 08                	ja     c00122ef <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00122e7:	0f 20 d8             	mov    eax,cr3
c00122ea:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00122ed:	75 47                	jne    c0012336 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00122ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122f3:	09 d8                	or     eax,ebx
c00122f5:	a9 ff 0f 00 00       	test   eax,0xfff
c00122fa:	75 57                	jne    c0012353 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122fc:	89 de                	mov    esi,ebx
c00122fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012301:	c1 ee 16             	shr    esi,0x16
c0012304:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001230b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001230f:	74 54                	je     c0012365 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012311:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012315:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001231b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001231f:	c1 e6 0c             	shl    esi,0xc
c0012322:	c1 eb 0a             	shr    ebx,0xa
c0012325:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001232b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001232e:	83 c4 1c             	add    esp,0x1c
c0012331:	5b                   	pop    ebx
c0012332:	5e                   	pop    esi
c0012333:	5f                   	pop    edi
c0012334:	5d                   	pop    ebp
c0012335:	c3                   	ret    
c0012336:	83 ec 0c             	sub    esp,0xc
c0012339:	68 6c b1 02 c0       	push   0xc002b16c
c001233e:	e8 5c 0b 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012343:	83 c4 10             	add    esp,0x10
c0012346:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001234a:	09 d8                	or     eax,ebx
c001234c:	a9 ff 0f 00 00       	test   eax,0xfff
c0012351:	74 a9                	je     c00122fc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012353:	83 ec 0c             	sub    esp,0xc
c0012356:	68 d4 b1 02 c0       	push   0xc002b1d4
c001235b:	e8 27 85 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0012360:	83 c4 10             	add    esp,0x10
c0012363:	eb 97                	jmp    c00122fc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012365:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012369:	e8 f2 db ff ff       	call   c000ff60 <Phys::allocatePage()>
c001236e:	83 ec 0c             	sub    esp,0xc
c0012371:	89 c5                	mov    ebp,eax
c0012373:	8b 0d 30 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f230
c0012379:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001237d:	6a 01                	push   0x1
c001237f:	e8 15 f7 ff ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c0012384:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001238b:	6a 01                	push   0x1
c001238d:	50                   	push   eax
c001238e:	55                   	push   ebp
c001238f:	81 cd 07 04 00 00    	or     ebp,0x407
c0012395:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012399:	51                   	push   ecx
c001239a:	e8 27 02 00 00       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001239f:	83 c4 1c             	add    esp,0x1c
c00123a2:	68 00 10 00 00       	push   0x1000
c00123a7:	6a 00                	push   0x0
c00123a9:	50                   	push   eax
c00123aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123ae:	e8 b9 e3 fe ff       	call   c000076c <memset>
c00123b3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123ba:	e8 9a fb ff ff       	call   c0011f59 <Virt::freeKernelVirtualPages(unsigned long)>
c00123bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00123c6:	83 c4 10             	add    esp,0x10
c00123c9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00123cc:	e9 40 ff ff ff       	jmp    c0012311 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00123d1:	90                   	nop

c00123d2 <VAS::allocatePages(int, int)>:
c00123d2:	55                   	push   ebp
c00123d3:	57                   	push   edi
c00123d4:	56                   	push   esi
c00123d5:	53                   	push   ebx
c00123d6:	83 ec 1c             	sub    esp,0x1c
c00123d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00123dd:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00123e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123e8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00123ee:	83 e0 01             	and    eax,0x1
c00123f1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00123f5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00123f9:	0f 85 cc 00 00 00    	jne    c00124cb <VAS::allocatePages(int, int)+0xf9>
c00123ff:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012402:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012406:	85 c0                	test   eax,eax
c0012408:	0f 84 a1 00 00 00    	je     c00124af <VAS::allocatePages(int, int)+0xdd>
c001240e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012412:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012416:	c1 e6 0c             	shl    esi,0xc
c0012419:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001241d:	85 c0                	test   eax,eax
c001241f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012422:	7e 33                	jle    c0012457 <VAS::allocatePages(int, int)+0x85>
c0012424:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012428:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001242c:	81 cd 00 04 00 00    	or     ebp,0x400
c0012432:	e8 29 db ff ff       	call   c000ff60 <Phys::allocatePage()>
c0012437:	55                   	push   ebp
c0012438:	53                   	push   ebx
c0012439:	50                   	push   eax
c001243a:	57                   	push   edi
c001243b:	e8 90 fe ff ff       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012448:	74 03                	je     c001244d <VAS::allocatePages(int, int)+0x7b>
c001244a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001244d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012453:	39 de                	cmp    esi,ebx
c0012455:	75 db                	jne    c0012432 <VAS::allocatePages(int, int)+0x60>
c0012457:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001245c:	75 12                	jne    c0012470 <VAS::allocatePages(int, int)+0x9e>
c001245e:	0f 20 d8             	mov    eax,cr3
c0012461:	0f 22 d8             	mov    cr3,eax
c0012464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012468:	83 c4 1c             	add    esp,0x1c
c001246b:	5b                   	pop    ebx
c001246c:	5e                   	pop    esi
c001246d:	5f                   	pop    edi
c001246e:	5d                   	pop    ebp
c001246f:	c3                   	ret    
c0012470:	c1 ee 0a             	shr    esi,0xa
c0012473:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012477:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001247d:	c1 eb 0a             	shr    ebx,0xa
c0012480:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012486:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001248c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012492:	39 c3                	cmp    ebx,eax
c0012494:	77 ce                	ja     c0012464 <VAS::allocatePages(int, int)+0x92>
c0012496:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012499:	81 c3 00 10 00 00    	add    ebx,0x1000
c001249f:	39 d8                	cmp    eax,ebx
c00124a1:	73 f3                	jae    c0012496 <VAS::allocatePages(int, int)+0xc4>
c00124a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124a7:	83 c4 1c             	add    esp,0x1c
c00124aa:	5b                   	pop    ebx
c00124ab:	5e                   	pop    esi
c00124ac:	5f                   	pop    edi
c00124ad:	5d                   	pop    ebp
c00124ae:	c3                   	ret    
c00124af:	83 ec 0c             	sub    esp,0xc
c00124b2:	68 f8 b1 02 c0       	push   0xc002b1f8
c00124b7:	e8 cb 83 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00124bc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124c3:	83 c4 10             	add    esp,0x10
c00124c6:	e9 43 ff ff ff       	jmp    c001240e <VAS::allocatePages(int, int)+0x3c>
c00124cb:	83 ec 0c             	sub    esp,0xc
c00124ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124d2:	e8 c2 f5 ff ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c00124d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124db:	83 c4 10             	add    esp,0x10
c00124de:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00124e3:	0f 87 9b 00 00 00    	ja     c0012584 <VAS::allocatePages(int, int)+0x1b2>
c00124e9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00124ed:	85 d2                	test   edx,edx
c00124ef:	7e 3c                	jle    c001252d <VAS::allocatePages(int, int)+0x15b>
c00124f1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124f5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124fd:	c1 e5 0c             	shl    ebp,0xc
c0012500:	81 ce 00 04 00 00    	or     esi,0x400
c0012506:	01 dd                	add    ebp,ebx
c0012508:	e8 53 da ff ff       	call   c000ff60 <Phys::allocatePage()>
c001250d:	56                   	push   esi
c001250e:	53                   	push   ebx
c001250f:	50                   	push   eax
c0012510:	57                   	push   edi
c0012511:	e8 ba fd ff ff       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012516:	83 c4 10             	add    esp,0x10
c0012519:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001251e:	74 03                	je     c0012523 <VAS::allocatePages(int, int)+0x151>
c0012520:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012523:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012529:	39 dd                	cmp    ebp,ebx
c001252b:	75 db                	jne    c0012508 <VAS::allocatePages(int, int)+0x136>
c001252d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012532:	0f 84 26 ff ff ff    	je     c001245e <VAS::allocatePages(int, int)+0x8c>
c0012538:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001253c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012540:	89 d3                	mov    ebx,edx
c0012542:	c1 e0 0c             	shl    eax,0xc
c0012545:	c1 eb 0a             	shr    ebx,0xa
c0012548:	01 d0                	add    eax,edx
c001254a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012550:	c1 e8 0a             	shr    eax,0xa
c0012553:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012559:	25 00 f0 ff ff       	and    eax,0xfffff000
c001255e:	2d 00 00 40 00       	sub    eax,0x400000
c0012563:	39 c3                	cmp    ebx,eax
c0012565:	0f 87 f9 fe ff ff    	ja     c0012464 <VAS::allocatePages(int, int)+0x92>
c001256b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001256e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012574:	39 d8                	cmp    eax,ebx
c0012576:	73 f3                	jae    c001256b <VAS::allocatePages(int, int)+0x199>
c0012578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001257c:	83 c4 1c             	add    esp,0x1c
c001257f:	5b                   	pop    ebx
c0012580:	5e                   	pop    esi
c0012581:	5f                   	pop    edi
c0012582:	5d                   	pop    ebp
c0012583:	c3                   	ret    
c0012584:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0012589:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001258f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012596:	0f 84 4d ff ff ff    	je     c00124e9 <VAS::allocatePages(int, int)+0x117>
c001259c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00125a4:	e9 40 ff ff ff       	jmp    c00124e9 <VAS::allocatePages(int, int)+0x117>
c00125a9:	90                   	nop

c00125aa <VAS::setCPUSpecific(unsigned long)>:
c00125aa:	83 ec 0c             	sub    esp,0xc
c00125ad:	6a 05                	push   0x5
c00125af:	68 00 00 40 c2       	push   0xc2400000
c00125b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125bc:	e8 0f fd ff ff       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125c1:	83 c4 1c             	add    esp,0x1c
c00125c4:	c3                   	ret    
c00125c5:	90                   	nop

c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00125c6:	55                   	push   ebp
c00125c7:	57                   	push   edi
c00125c8:	56                   	push   esi
c00125c9:	53                   	push   ebx
c00125ca:	83 ec 1c             	sub    esp,0x1c
c00125cd:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00125d2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00125d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125dc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125e0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00125e6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00125ea:	83 e0 01             	and    eax,0x1
c00125ed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00125f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125f5:	85 c0                	test   eax,eax
c00125f7:	7e 39                	jle    c0012632 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00125f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125fd:	89 f3                	mov    ebx,esi
c00125ff:	c1 e0 0c             	shl    eax,0xc
c0012602:	01 f0                	add    eax,esi
c0012604:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012608:	55                   	push   ebp
c0012609:	53                   	push   ebx
c001260a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001260e:	29 f0                	sub    eax,esi
c0012610:	01 d8                	add    eax,ebx
c0012612:	50                   	push   eax
c0012613:	57                   	push   edi
c0012614:	e8 b7 fc ff ff       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012619:	83 c4 10             	add    esp,0x10
c001261c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012621:	74 03                	je     c0012626 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012623:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012626:	81 c3 00 10 00 00    	add    ebx,0x1000
c001262c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012630:	75 d6                	jne    c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012632:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012637:	75 10                	jne    c0012649 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012639:	0f 20 d8             	mov    eax,cr3
c001263c:	0f 22 d8             	mov    cr3,eax
c001263f:	83 c4 1c             	add    esp,0x1c
c0012642:	89 f0                	mov    eax,esi
c0012644:	5b                   	pop    ebx
c0012645:	5e                   	pop    esi
c0012646:	5f                   	pop    edi
c0012647:	5d                   	pop    ebp
c0012648:	c3                   	ret    
c0012649:	89 f3                	mov    ebx,esi
c001264b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001264f:	c1 eb 0a             	shr    ebx,0xa
c0012652:	c1 e0 0c             	shl    eax,0xc
c0012655:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001265b:	01 f0                	add    eax,esi
c001265d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012663:	c1 e8 0a             	shr    eax,0xa
c0012666:	25 00 f0 ff ff       	and    eax,0xfffff000
c001266b:	2d 00 00 40 00       	sub    eax,0x400000
c0012670:	39 c3                	cmp    ebx,eax
c0012672:	77 cb                	ja     c001263f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012674:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012677:	81 c3 00 10 00 00    	add    ebx,0x1000
c001267d:	39 d8                	cmp    eax,ebx
c001267f:	73 f3                	jae    c0012674 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012681:	83 c4 1c             	add    esp,0x1c
c0012684:	89 f0                	mov    eax,esi
c0012686:	5b                   	pop    ebx
c0012687:	5e                   	pop    esi
c0012688:	5f                   	pop    edi
c0012689:	5d                   	pop    ebp
c001268a:	c3                   	ret    
c001268b:	90                   	nop

c001268c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001268c:	55                   	push   ebp
c001268d:	57                   	push   edi
c001268e:	56                   	push   esi
c001268f:	53                   	push   ebx
c0012690:	83 ec 1c             	sub    esp,0x1c
c0012693:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012697:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001269b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001269f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00126a3:	a9 ff 0f 00 00       	test   eax,0xfff
c00126a8:	75 4a                	jne    c00126f4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00126aa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00126ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126b1:	c1 eb 16             	shr    ebx,0x16
c00126b4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00126bb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00126bf:	74 4d                	je     c001270e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00126c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126c5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00126c9:	c1 e8 0a             	shr    eax,0xa
c00126cc:	80 fa 01             	cmp    dl,0x1
c00126cf:	19 d2                	sbb    edx,edx
c00126d1:	c1 e3 0c             	shl    ebx,0xc
c00126d4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00126d8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00126de:	25 fc 0f 00 00       	and    eax,0xffc
c00126e3:	01 d8                	add    eax,ebx
c00126e5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00126ec:	83 c4 1c             	add    esp,0x1c
c00126ef:	5b                   	pop    ebx
c00126f0:	5e                   	pop    esi
c00126f1:	5f                   	pop    edi
c00126f2:	5d                   	pop    ebp
c00126f3:	c3                   	ret    
c00126f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00126f8:	83 ec 0c             	sub    esp,0xc
c00126fb:	68 24 b2 02 c0       	push   0xc002b224
c0012700:	e8 82 81 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0012705:	83 c4 10             	add    esp,0x10
c0012708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001270c:	eb 9c                	jmp    c00126aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001270e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012712:	e8 49 d8 ff ff       	call   c000ff60 <Phys::allocatePage()>
c0012717:	83 ec 0c             	sub    esp,0xc
c001271a:	89 c5                	mov    ebp,eax
c001271c:	8b 0d 30 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f230
c0012722:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012726:	6a 01                	push   0x1
c0012728:	e8 6c f3 ff ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c001272d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012734:	6a 01                	push   0x1
c0012736:	50                   	push   eax
c0012737:	55                   	push   ebp
c0012738:	81 cd 07 04 00 00    	or     ebp,0x407
c001273e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012742:	51                   	push   ecx
c0012743:	e8 7e fe ff ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012748:	83 c4 1c             	add    esp,0x1c
c001274b:	68 00 10 00 00       	push   0x1000
c0012750:	6a 00                	push   0x0
c0012752:	50                   	push   eax
c0012753:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012757:	e8 10 e0 fe ff       	call   c000076c <memset>
c001275c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012760:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012763:	e8 f1 f7 ff ff       	call   c0011f59 <Virt::freeKernelVirtualPages(unsigned long)>
c0012768:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001276b:	83 c4 10             	add    esp,0x10
c001276e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012771:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012775:	e9 47 ff ff ff       	jmp    c00126c1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c001277a <VAS::VAS(bool)>:
c001277a:	53                   	push   ebx
c001277b:	83 ec 28             	sub    esp,0x28
c001277e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012782:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012786:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012791:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012795:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001279c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00127a4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00127a7:	e8 b4 d7 ff ff       	call   c000ff60 <Phys::allocatePage()>
c00127ac:	89 c2                	mov    edx,eax
c00127ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127b2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00127b5:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c00127bb:	83 ec 0c             	sub    esp,0xc
c00127be:	6a 01                	push   0x1
c00127c0:	e8 d4 f2 ff ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c00127c5:	83 c4 10             	add    esp,0x10
c00127c8:	89 c2                	mov    edx,eax
c00127ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00127d1:	83 ec 0c             	sub    esp,0xc
c00127d4:	6a 03                	push   0x3
c00127d6:	6a 01                	push   0x1
c00127d8:	52                   	push   edx
c00127d9:	50                   	push   eax
c00127da:	53                   	push   ebx
c00127db:	e8 e6 fd ff ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127e0:	83 c4 20             	add    esp,0x20
c00127e3:	89 c2                	mov    edx,eax
c00127e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127ec:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00127f4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127fc:	7f 1c                	jg     c001281a <VAS::VAS(bool)+0xa0>
c00127fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012802:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012805:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012809:	c1 e2 02             	shl    edx,0x2
c001280c:	01 d0                	add    eax,edx
c001280e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012814:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012818:	eb da                	jmp    c00127f4 <VAS::VAS(bool)+0x7a>
c001281a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012822:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001282a:	7f 7a                	jg     c00128a6 <VAS::VAS(bool)+0x12c>
c001282c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012830:	2d 00 02 00 00       	sub    eax,0x200
c0012835:	c1 e0 0c             	shl    eax,0xc
c0012838:	83 c8 03             	or     eax,0x3
c001283b:	89 c2                	mov    edx,eax
c001283d:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0012842:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012848:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001284e:	83 e0 10             	and    eax,0x10
c0012851:	84 c0                	test   al,al
c0012853:	74 07                	je     c001285c <VAS::VAS(bool)+0xe2>
c0012855:	b8 00 01 00 00       	mov    eax,0x100
c001285a:	eb 05                	jmp    c0012861 <VAS::VAS(bool)+0xe7>
c001285c:	b8 00 00 00 00       	mov    eax,0x0
c0012861:	09 d0                	or     eax,edx
c0012863:	89 c1                	mov    ecx,eax
c0012865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012869:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012870:	c1 e2 02             	shl    edx,0x2
c0012873:	01 d0                	add    eax,edx
c0012875:	89 ca                	mov    edx,ecx
c0012877:	89 10                	mov    DWORD PTR [eax],edx
c0012879:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001287d:	2d 40 03 00 00       	sub    eax,0x340
c0012882:	83 f8 7f             	cmp    eax,0x7f
c0012885:	77 16                	ja     c001289d <VAS::VAS(bool)+0x123>
c0012887:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001288b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001288e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012892:	c1 e2 02             	shl    edx,0x2
c0012895:	01 d0                	add    eax,edx
c0012897:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001289d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00128a1:	e9 7c ff ff ff       	jmp    c0012822 <VAS::VAS(bool)+0xa8>
c00128a6:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00128ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128b7:	83 e0 10             	and    eax,0x10
c00128ba:	84 c0                	test   al,al
c00128bc:	74 07                	je     c00128c5 <VAS::VAS(bool)+0x14b>
c00128be:	b8 03 41 00 00       	mov    eax,0x4103
c00128c3:	eb 05                	jmp    c00128ca <VAS::VAS(bool)+0x150>
c00128c5:	b8 03 40 00 00       	mov    eax,0x4003
c00128ca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00128ce:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00128d1:	81 c2 20 0c 00 00    	add    edx,0xc20
c00128d7:	89 02                	mov    DWORD PTR [edx],eax
c00128d9:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00128de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00128ea:	83 ec 08             	sub    esp,0x8
c00128ed:	50                   	push   eax
c00128ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128f2:	e8 b3 fc ff ff       	call   c00125aa <VAS::setCPUSpecific(unsigned long)>
c00128f7:	83 c4 10             	add    esp,0x10
c00128fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128fe:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012901:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0012906:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001290c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012912:	83 e0 10             	and    eax,0x10
c0012915:	84 c0                	test   al,al
c0012917:	74 07                	je     c0012920 <VAS::VAS(bool)+0x1a6>
c0012919:	b8 00 01 00 00       	mov    eax,0x100
c001291e:	eb 05                	jmp    c0012925 <VAS::VAS(bool)+0x1ab>
c0012920:	b8 00 00 00 00       	mov    eax,0x0
c0012925:	09 c2                	or     edx,eax
c0012927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001292b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001292e:	05 fc 0f 00 00       	add    eax,0xffc
c0012933:	83 ca 03             	or     edx,0x3
c0012936:	89 10                	mov    DWORD PTR [eax],edx
c0012938:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001293d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012943:	83 ec 0c             	sub    esp,0xc
c0012946:	50                   	push   eax
c0012947:	e8 60 1c 00 00       	call   c00145ac <Device::getName()>
c001294c:	83 c4 10             	add    esp,0x10
c001294f:	83 ec 08             	sub    esp,0x8
c0012952:	68 69 b3 02 c0       	push   0xc002b369
c0012957:	50                   	push   eax
c0012958:	e8 57 df fe ff       	call   c00008b4 <strcmp>
c001295d:	83 c4 10             	add    esp,0x10
c0012960:	85 c0                	test   eax,eax
c0012962:	0f 94 c0             	sete   al
c0012965:	84 c0                	test   al,al
c0012967:	0f 84 87 00 00 00    	je     c00129f4 <VAS::VAS(bool)+0x27a>
c001296d:	fa                   	cli    
c001296e:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0012973:	40                   	inc    eax
c0012974:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0012979:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001297e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012984:	05 7c 09 00 00       	add    eax,0x97c
c0012989:	83 ec 0c             	sub    esp,0xc
c001298c:	50                   	push   eax
c001298d:	e8 e4 c9 ff ff       	call   c000f376 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012992:	83 c4 10             	add    esp,0x10
c0012995:	25 00 f0 ff ff       	and    eax,0xfffff000
c001299a:	89 c3                	mov    ebx,eax
c001299c:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00129a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a7:	05 7c 09 00 00       	add    eax,0x97c
c00129ac:	83 ec 0c             	sub    esp,0xc
c00129af:	50                   	push   eax
c00129b0:	e8 c1 c9 ff ff       	call   c000f376 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	83 ec 08             	sub    esp,0x8
c00129bb:	50                   	push   eax
c00129bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129c0:	e8 75 f5 ff ff       	call   c0011f3a <VAS::getPageTableEntry(unsigned long)>
c00129c5:	83 c4 10             	add    esp,0x10
c00129c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00129ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129cf:	6a 11                	push   0x11
c00129d1:	53                   	push   ebx
c00129d2:	50                   	push   eax
c00129d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00129d7:	e8 f4 f8 ff ff       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00129dc:	83 c4 10             	add    esp,0x10
c00129df:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00129e4:	48                   	dec    eax
c00129e5:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c00129ea:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00129ef:	85 c0                	test   eax,eax
c00129f1:	75 01                	jne    c00129f4 <VAS::VAS(bool)+0x27a>
c00129f3:	fb                   	sti    
c00129f4:	90                   	nop
c00129f5:	83 c4 28             	add    esp,0x28
c00129f8:	5b                   	pop    ebx
c00129f9:	c3                   	ret    

c00129fa <VAS::evict(unsigned long)>:
c00129fa:	55                   	push   ebp
c00129fb:	57                   	push   edi
c00129fc:	56                   	push   esi
c00129fd:	53                   	push   ebx
c00129fe:	83 ec 1c             	sub    esp,0x1c
c0012a01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a05:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a0d:	e8 c8 f1 ff ff       	call   c0011bda <Virt::allocateSwapfilePage()>
c0012a12:	89 c7                	mov    edi,eax
c0012a14:	a1 4c e0 02 c0       	mov    eax,ds:0xc002e04c
c0012a19:	85 c0                	test   eax,eax
c0012a1b:	7e 3d                	jle    c0012a5a <VAS::evict(unsigned long)+0x60>
c0012a1d:	89 ee                	mov    esi,ebp
c0012a1f:	31 db                	xor    ebx,ebx
c0012a21:	83 ec 0c             	sub    esp,0xc
c0012a24:	57                   	push   edi
c0012a25:	e8 9e f1 ff ff       	call   c0011bc8 <Virt::swapIDToSector(unsigned long)>
c0012a2a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a2d:	01 d8                	add    eax,ebx
c0012a2f:	6a 01                	push   0x1
c0012a31:	31 d2                	xor    edx,edx
c0012a33:	43                   	inc    ebx
c0012a34:	52                   	push   edx
c0012a35:	81 c6 00 02 00 00    	add    esi,0x200
c0012a3b:	50                   	push   eax
c0012a3c:	0f be 05 58 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e058
c0012a43:	ff 34 85 bc f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a44]
c0012a4a:	e8 33 3e 00 00       	call   c0016882 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a4f:	83 c4 20             	add    esp,0x20
c0012a52:	39 1d 4c e0 02 c0    	cmp    DWORD PTR ds:0xc002e04c,ebx
c0012a58:	7f c7                	jg     c0012a21 <VAS::evict(unsigned long)+0x27>
c0012a5a:	83 ec 08             	sub    esp,0x8
c0012a5d:	c1 e7 0b             	shl    edi,0xb
c0012a60:	55                   	push   ebp
c0012a61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a65:	e8 d0 f4 ff ff       	call   c0011f3a <VAS::getPageTableEntry(unsigned long)>
c0012a6a:	83 c4 0c             	add    esp,0xc
c0012a6d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a6f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a75:	09 d7                	or     edi,edx
c0012a77:	89 38                	mov    DWORD PTR [eax],edi
c0012a79:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c0012a7e:	40                   	inc    eax
c0012a7f:	a3 28 f2 02 c0       	mov    ds:0xc002f228,eax
c0012a84:	0f 20 da             	mov    edx,cr3
c0012a87:	0f 22 da             	mov    cr3,edx
c0012a8a:	50                   	push   eax
c0012a8b:	55                   	push   ebp
c0012a8c:	68 77 b3 02 c0       	push   0xc002b377
c0012a91:	e8 09 04 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012a96:	a1 24 f2 02 c0       	mov    eax,ds:0xc002f224
c0012a9b:	c7 44 24 40 8c b3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b38c
c0012aa3:	8d 50 01             	lea    edx,[eax+0x1]
c0012aa6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012aaa:	89 15 24 f2 02 c0    	mov    DWORD PTR ds:0xc002f224,edx
c0012ab0:	83 c4 2c             	add    esp,0x2c
c0012ab3:	5b                   	pop    ebx
c0012ab4:	5e                   	pop    esi
c0012ab5:	5f                   	pop    edi
c0012ab6:	5d                   	pop    ebp
c0012ab7:	e9 e3 03 00 00       	jmp    c0012e9f <Dbg::kprintf(char const*, ...)>

c0012abc <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012abc:	55                   	push   ebp
c0012abd:	57                   	push   edi
c0012abe:	56                   	push   esi
c0012abf:	53                   	push   ebx
c0012ac0:	83 ec 0c             	sub    esp,0xc
c0012ac3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012ac7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012acd:	0f 84 dc 00 00 00    	je     c0012baf <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012ad3:	56                   	push   esi
c0012ad4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012ad8:	e8 5d f4 ff ff       	call   c0011f3a <VAS::getPageTableEntry(unsigned long)>
c0012add:	5b                   	pop    ebx
c0012ade:	85 c0                	test   eax,eax
c0012ae0:	5f                   	pop    edi
c0012ae1:	89 c3                	mov    ebx,eax
c0012ae3:	0f 84 c6 00 00 00    	je     c0012baf <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012ae9:	8b 38                	mov    edi,DWORD PTR [eax]
c0012aeb:	31 c0                	xor    eax,eax
c0012aed:	89 fa                	mov    edx,edi
c0012aef:	81 e2 01 04 00 00    	and    edx,0x401
c0012af5:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012afb:	0f 85 b0 00 00 00    	jne    c0012bb1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b01:	e8 5a d4 ff ff       	call   c000ff60 <Phys::allocatePage()>
c0012b06:	c1 ef 0b             	shr    edi,0xb
c0012b09:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b0b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b11:	09 c2                	or     edx,eax
c0012b13:	81 ca 01 08 00 00    	or     edx,0x801
c0012b19:	89 13                	mov    DWORD PTR [ebx],edx
c0012b1b:	8b 0d 4c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e04c
c0012b21:	85 c9                	test   ecx,ecx
c0012b23:	7e 3d                	jle    c0012b62 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b25:	89 f5                	mov    ebp,esi
c0012b27:	31 db                	xor    ebx,ebx
c0012b29:	83 ec 0c             	sub    esp,0xc
c0012b2c:	57                   	push   edi
c0012b2d:	e8 96 f0 ff ff       	call   c0011bc8 <Virt::swapIDToSector(unsigned long)>
c0012b32:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b35:	01 d8                	add    eax,ebx
c0012b37:	6a 01                	push   0x1
c0012b39:	31 d2                	xor    edx,edx
c0012b3b:	43                   	inc    ebx
c0012b3c:	52                   	push   edx
c0012b3d:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b43:	50                   	push   eax
c0012b44:	0f be 05 58 e0 02 c0 	movsx  eax,BYTE PTR ds:0xc002e058
c0012b4b:	ff 34 85 bc f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a44]
c0012b52:	e8 bf 3c 00 00       	call   c0016816 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b57:	83 c4 20             	add    esp,0x20
c0012b5a:	39 1d 4c e0 02 c0    	cmp    DWORD PTR ds:0xc002e04c,ebx
c0012b60:	7f c7                	jg     c0012b29 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b62:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c0012b67:	48                   	dec    eax
c0012b68:	52                   	push   edx
c0012b69:	a3 28 f2 02 c0       	mov    ds:0xc002f228,eax
c0012b6e:	50                   	push   eax
c0012b6f:	56                   	push   esi
c0012b70:	68 9d b3 02 c0       	push   0xc002b39d
c0012b75:	e8 25 03 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012b7a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b7d:	e8 28 f0 ff ff       	call   c0011baa <Virt::freeSwapfilePage(unsigned long)>
c0012b82:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0012b87:	83 c4 10             	add    esp,0x10
c0012b8a:	48                   	dec    eax
c0012b8b:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0012b90:	85 c0                	test   eax,eax
c0012b92:	75 01                	jne    c0012b95 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b94:	fb                   	sti    
c0012b95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b99:	25 ff 0f 00 00       	and    eax,0xfff
c0012b9e:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012ba3:	77 14                	ja     c0012bb9 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012ba5:	0f 20 d8             	mov    eax,cr3
c0012ba8:	0f 22 d8             	mov    cr3,eax
c0012bab:	b0 01                	mov    al,0x1
c0012bad:	eb 02                	jmp    c0012bb1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012baf:	31 c0                	xor    eax,eax
c0012bb1:	83 c4 0c             	add    esp,0xc
c0012bb4:	5b                   	pop    ebx
c0012bb5:	5e                   	pop    esi
c0012bb6:	5f                   	pop    edi
c0012bb7:	5d                   	pop    ebp
c0012bb8:	c3                   	ret    
c0012bb9:	83 ec 0c             	sub    esp,0xc
c0012bbc:	68 b2 b3 02 c0       	push   0xc002b3b2
c0012bc1:	e8 d9 02 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012bc6:	83 c4 10             	add    esp,0x10
c0012bc9:	eb da                	jmp    c0012ba5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012bcb:	90                   	nop

c0012bcc <VAS::scanForEviction()>:
c0012bcc:	57                   	push   edi
c0012bcd:	56                   	push   esi
c0012bce:	53                   	push   ebx
c0012bcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bd3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012bd6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bdc:	75 0e                	jne    c0012bec <VAS::scanForEviction()+0x20>
c0012bde:	89 da                	mov    edx,ebx
c0012be0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012be3:	c1 ea 16             	shr    edx,0x16
c0012be6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bea:	74 48                	je     c0012c34 <VAS::scanForEviction()+0x68>
c0012bec:	53                   	push   ebx
c0012bed:	56                   	push   esi
c0012bee:	e8 47 f3 ff ff       	call   c0011f3a <VAS::getPageTableEntry(unsigned long)>
c0012bf3:	5a                   	pop    edx
c0012bf4:	8b 38                	mov    edi,DWORD PTR [eax]
c0012bf6:	59                   	pop    ecx
c0012bf7:	89 fa                	mov    edx,edi
c0012bf9:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012bff:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c05:	74 3d                	je     c0012c44 <VAS::scanForEviction()+0x78>
c0012c07:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c0d:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c13:	76 2a                	jbe    c0012c3f <VAS::scanForEviction()+0x73>
c0012c15:	31 db                	xor    ebx,ebx
c0012c17:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c1e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c24:	75 c6                	jne    c0012bec <VAS::scanForEviction()+0x20>
c0012c26:	89 da                	mov    edx,ebx
c0012c28:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c2b:	c1 ea 16             	shr    edx,0x16
c0012c2e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c32:	75 b8                	jne    c0012bec <VAS::scanForEviction()+0x20>
c0012c34:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c3a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c3d:	eb 97                	jmp    c0012bd6 <VAS::scanForEviction()+0xa>
c0012c3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c42:	eb 92                	jmp    c0012bd6 <VAS::scanForEviction()+0xa>
c0012c44:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c4a:	74 bb                	je     c0012c07 <VAS::scanForEviction()+0x3b>
c0012c4c:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c52:	74 0a                	je     c0012c5e <VAS::scanForEviction()+0x92>
c0012c54:	83 e7 df             	and    edi,0xffffffdf
c0012c57:	89 38                	mov    DWORD PTR [eax],edi
c0012c59:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c5c:	eb a9                	jmp    c0012c07 <VAS::scanForEviction()+0x3b>
c0012c5e:	83 ec 08             	sub    esp,0x8
c0012c61:	53                   	push   ebx
c0012c62:	56                   	push   esi
c0012c63:	e8 92 fd ff ff       	call   c00129fa <VAS::evict(unsigned long)>
c0012c68:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c6f:	83 c4 10             	add    esp,0x10
c0012c72:	89 f8                	mov    eax,edi
c0012c74:	5b                   	pop    ebx
c0012c75:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c7a:	5e                   	pop    esi
c0012c7b:	5f                   	pop    edi
c0012c7c:	c3                   	ret    

c0012c7d <mapVASFirstTime>:
c0012c7d:	55                   	push   ebp
c0012c7e:	57                   	push   edi
c0012c7f:	56                   	push   esi
c0012c80:	53                   	push   ebx
c0012c81:	83 ec 0c             	sub    esp,0xc
c0012c84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c89:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c8c:	4a                   	dec    edx
c0012c8d:	0f 84 8e 00 00 00    	je     c0012d21 <mapVASFirstTime+0xa4>
c0012c93:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c96:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c99:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c9e:	c1 e5 15             	shl    ebp,0x15
c0012ca1:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012ca6:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012cac:	29 eb                	sub    ebx,ebp
c0012cae:	29 ee                	sub    esi,ebp
c0012cb0:	e8 ab d2 ff ff       	call   c000ff60 <Phys::allocatePage()>
c0012cb5:	83 ec 0c             	sub    esp,0xc
c0012cb8:	68 03 04 00 00       	push   0x403
c0012cbd:	6a 01                	push   0x1
c0012cbf:	53                   	push   ebx
c0012cc0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cc6:	50                   	push   eax
c0012cc7:	57                   	push   edi
c0012cc8:	e8 f9 f8 ff ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ccd:	83 c4 20             	add    esp,0x20
c0012cd0:	39 f3                	cmp    ebx,esi
c0012cd2:	75 dc                	jne    c0012cb0 <mapVASFirstTime+0x33>
c0012cd4:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012cd9:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012cde:	29 ee                	sub    esi,ebp
c0012ce0:	29 e8                	sub    eax,ebp
c0012ce2:	89 c5                	mov    ebp,eax
c0012ce4:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012ce8:	19 db                	sbb    ebx,ebx
c0012cea:	e8 71 d2 ff ff       	call   c000ff60 <Phys::allocatePage()>
c0012cef:	83 e3 04             	and    ebx,0x4
c0012cf2:	83 ec 0c             	sub    esp,0xc
c0012cf5:	81 c3 03 04 00 00    	add    ebx,0x403
c0012cfb:	53                   	push   ebx
c0012cfc:	6a 01                	push   0x1
c0012cfe:	56                   	push   esi
c0012cff:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d05:	50                   	push   eax
c0012d06:	57                   	push   edi
c0012d07:	e8 ba f8 ff ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d0c:	83 c4 20             	add    esp,0x20
c0012d0f:	39 f5                	cmp    ebp,esi
c0012d11:	75 d1                	jne    c0012ce4 <mapVASFirstTime+0x67>
c0012d13:	0f 20 d8             	mov    eax,cr3
c0012d16:	0f 22 d8             	mov    cr3,eax
c0012d19:	83 c4 0c             	add    esp,0xc
c0012d1c:	5b                   	pop    ebx
c0012d1d:	5e                   	pop    esi
c0012d1e:	5f                   	pop    edi
c0012d1f:	5d                   	pop    ebp
c0012d20:	c3                   	ret    
c0012d21:	83 ec 0c             	sub    esp,0xc
c0012d24:	68 c2 b3 02 c0       	push   0xc002b3c2
c0012d29:	e8 71 01 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012d2e:	83 c4 10             	add    esp,0x10
c0012d31:	83 c4 0c             	add    esp,0xc
c0012d34:	5b                   	pop    ebx
c0012d35:	5e                   	pop    esi
c0012d36:	5f                   	pop    edi
c0012d37:	5d                   	pop    ebp
c0012d38:	c3                   	ret    

c0012d39 <__cxa_atexit>:
c0012d39:	31 c0                	xor    eax,eax
c0012d3b:	c3                   	ret    

c0012d3c <__cxa_finalize>:
c0012d3c:	c3                   	ret    

c0012d3d <__stack_chk_fail>:
c0012d3d:	55                   	push   ebp
c0012d3e:	89 e5                	mov    ebp,esp
c0012d40:	83 ec 14             	sub    esp,0x14
c0012d43:	68 db b3 02 c0       	push   0xc002b3db
c0012d48:	e8 52 01 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012d4d:	58                   	pop    eax
c0012d4e:	5a                   	pop    edx
c0012d4f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d52:	68 2b b4 02 c0       	push   0xc002b42b
c0012d57:	e8 43 01 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012d5c:	59                   	pop    ecx
c0012d5d:	58                   	pop    eax
c0012d5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d61:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d64:	68 2b b4 02 c0       	push   0xc002b42b
c0012d69:	e8 31 01 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012d6e:	5a                   	pop    edx
c0012d6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d72:	59                   	pop    ecx
c0012d73:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d75:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d78:	68 2b b4 02 c0       	push   0xc002b42b
c0012d7d:	e8 1d 01 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012d82:	5a                   	pop    edx
c0012d83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d86:	59                   	pop    ecx
c0012d87:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d8b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d8e:	68 2b b4 02 c0       	push   0xc002b42b
c0012d93:	e8 07 01 00 00       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0012d98:	c7 04 24 33 b4 02 c0 	mov    DWORD PTR [esp],0xc002b433
c0012d9f:	e8 e3 7a 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0012da4:	83 c4 10             	add    esp,0x10
c0012da7:	c9                   	leave  
c0012da8:	c3                   	ret    

c0012da9 <__cxa_pure_virtual>:
c0012da9:	83 ec 18             	sub    esp,0x18
c0012dac:	68 4b b4 02 c0       	push   0xc002b44b
c0012db1:	e8 d1 7a 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0012db6:	83 c4 1c             	add    esp,0x1c
c0012db9:	c3                   	ret    

c0012dba <operator new[](unsigned long)>:
c0012dba:	e9 35 cb ff ff       	jmp    c000f8f4 <malloc>

c0012dbf <operator delete(void*, unsigned long)>:
c0012dbf:	e9 50 cb ff ff       	jmp    c000f914 <rfree>

c0012dc4 <operator delete[](void*)>:
c0012dc4:	e9 4b cb ff ff       	jmp    c000f914 <rfree>

c0012dc9 <operator delete[](void*, unsigned long)>:
c0012dc9:	e9 46 cb ff ff       	jmp    c000f914 <rfree>

c0012dce <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012dce:	57                   	push   edi
c0012dcf:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012dd4:	56                   	push   esi
c0012dd5:	be 60 b4 02 c0       	mov    esi,0xc002b460
c0012dda:	53                   	push   ebx
c0012ddb:	83 ec 40             	sub    esp,0x40
c0012dde:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012de2:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012de6:	fc                   	cld    
c0012de7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012de9:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ded:	83 f9 3e             	cmp    ecx,0x3e
c0012df0:	7e 05                	jle    c0012df7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012df2:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012df7:	89 df                	mov    edi,ebx
c0012df9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012dfd:	eb 02                	jmp    c0012e01 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012dff:	89 c7                	mov    edi,eax
c0012e01:	31 d2                	xor    edx,edx
c0012e03:	46                   	inc    esi
c0012e04:	89 f8                	mov    eax,edi
c0012e06:	f7 f1                	div    ecx
c0012e08:	39 cf                	cmp    edi,ecx
c0012e0a:	73 f3                	jae    c0012dff <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e0c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e0f:	eb 02                	jmp    c0012e13 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e11:	89 c3                	mov    ebx,eax
c0012e13:	31 d2                	xor    edx,edx
c0012e15:	4e                   	dec    esi
c0012e16:	89 d8                	mov    eax,ebx
c0012e18:	f7 f1                	div    ecx
c0012e1a:	39 cb                	cmp    ebx,ecx
c0012e1c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e20:	88 16                	mov    BYTE PTR [esi],dl
c0012e22:	73 ed                	jae    c0012e11 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e24:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e28:	83 c4 40             	add    esp,0x40
c0012e2b:	5b                   	pop    ebx
c0012e2c:	5e                   	pop    esi
c0012e2d:	5f                   	pop    edi
c0012e2e:	c3                   	ret    

c0012e2f <Dbg::logc(char)>:
c0012e2f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e33:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e38:	ec                   	in     al,dx
c0012e39:	a8 20                	test   al,0x20
c0012e3b:	74 fb                	je     c0012e38 <Dbg::logc(char)+0x9>
c0012e3d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e42:	88 c8                	mov    al,cl
c0012e44:	ee                   	out    dx,al
c0012e45:	c3                   	ret    

c0012e46 <Dbg::logs(char*)>:
c0012e46:	53                   	push   ebx
c0012e47:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e4b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e4e:	84 c0                	test   al,al
c0012e50:	74 0f                	je     c0012e61 <Dbg::logs(char*)+0x1b>
c0012e52:	50                   	push   eax
c0012e53:	43                   	inc    ebx
c0012e54:	e8 d6 ff ff ff       	call   c0012e2f <Dbg::logc(char)>
c0012e59:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e5c:	5a                   	pop    edx
c0012e5d:	84 c0                	test   al,al
c0012e5f:	75 f1                	jne    c0012e52 <Dbg::logs(char*)+0xc>
c0012e61:	5b                   	pop    ebx
c0012e62:	c3                   	ret    

c0012e63 <Dbg::logWriteInt(unsigned int)>:
c0012e63:	83 ec 10             	sub    esp,0x10
c0012e66:	6a 0a                	push   0xa
c0012e68:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e6c:	50                   	push   eax
c0012e6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e71:	e8 58 ff ff ff       	call   c0012dce <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e76:	50                   	push   eax
c0012e77:	e8 ca ff ff ff       	call   c0012e46 <Dbg::logs(char*)>
c0012e7c:	83 c4 20             	add    esp,0x20
c0012e7f:	c3                   	ret    

c0012e80 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e80:	83 ec 10             	sub    esp,0x10
c0012e83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e87:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e8b:	50                   	push   eax
c0012e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e90:	e8 39 ff ff ff       	call   c0012dce <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e95:	50                   	push   eax
c0012e96:	e8 ab ff ff ff       	call   c0012e46 <Dbg::logs(char*)>
c0012e9b:	83 c4 20             	add    esp,0x20
c0012e9e:	c3                   	ret    

c0012e9f <Dbg::kprintf(char const*, ...)>:
c0012e9f:	55                   	push   ebp
c0012ea0:	57                   	push   edi
c0012ea1:	56                   	push   esi
c0012ea2:	53                   	push   ebx
c0012ea3:	83 ec 0c             	sub    esp,0xc
c0012ea6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012eaa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012eb2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012eb5:	84 c0                	test   al,al
c0012eb7:	74 4a                	je     c0012f03 <Dbg::kprintf(char const*, ...)+0x64>
c0012eb9:	31 db                	xor    ebx,ebx
c0012ebb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ebe:	3c 25                	cmp    al,0x25
c0012ec0:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012ec3:	0f 85 e4 00 00 00    	jne    c0012fad <Dbg::kprintf(char const*, ...)+0x10e>
c0012ec9:	83 c3 02             	add    ebx,0x2
c0012ecc:	8a 07                	mov    al,BYTE PTR [edi]
c0012ece:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012ed1:	83 e8 25             	sub    eax,0x25
c0012ed4:	3c 53                	cmp    al,0x53
c0012ed6:	0f 87 ba 00 00 00    	ja     c0012f96 <Dbg::kprintf(char const*, ...)+0xf7>
c0012edc:	0f b6 c0             	movzx  eax,al
c0012edf:	ff 24 85 a0 b4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4b60]
c0012ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eea:	89 c8                	mov    eax,ecx
c0012eec:	83 c1 04             	add    ecx,0x4
c0012eef:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ef3:	ff 30                	push   DWORD PTR [eax]
c0012ef5:	e8 4c ff ff ff       	call   c0012e46 <Dbg::logs(char*)>
c0012efa:	58                   	pop    eax
c0012efb:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012eff:	84 c0                	test   al,al
c0012f01:	75 b8                	jne    c0012ebb <Dbg::kprintf(char const*, ...)+0x1c>
c0012f03:	83 c4 0c             	add    esp,0xc
c0012f06:	5b                   	pop    ebx
c0012f07:	5e                   	pop    esi
c0012f08:	5f                   	pop    edi
c0012f09:	5d                   	pop    ebp
c0012f0a:	c3                   	ret    
c0012f0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f0f:	89 d0                	mov    eax,edx
c0012f11:	83 c2 04             	add    edx,0x4
c0012f14:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f18:	ff 30                	push   DWORD PTR [eax]
c0012f1a:	e8 44 ff ff ff       	call   c0012e63 <Dbg::logWriteInt(unsigned int)>
c0012f1f:	58                   	pop    eax
c0012f20:	eb d9                	jmp    c0012efb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f26:	89 d0                	mov    eax,edx
c0012f28:	83 c2 04             	add    edx,0x4
c0012f2b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f32:	50                   	push   eax
c0012f33:	e8 f7 fe ff ff       	call   c0012e2f <Dbg::logc(char)>
c0012f38:	58                   	pop    eax
c0012f39:	eb c0                	jmp    c0012efb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f3f:	89 c8                	mov    eax,ecx
c0012f41:	83 c1 04             	add    ecx,0x4
c0012f44:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f48:	ff 30                	push   DWORD PTR [eax]
c0012f4a:	e8 14 ff ff ff       	call   c0012e63 <Dbg::logWriteInt(unsigned int)>
c0012f4f:	5f                   	pop    edi
c0012f50:	eb a9                	jmp    c0012efb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f56:	89 c8                	mov    eax,ecx
c0012f58:	83 c1 04             	add    ecx,0x4
c0012f5b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f5f:	6a 10                	push   0x10
c0012f61:	ff 30                	push   DWORD PTR [eax]
c0012f63:	e8 18 ff ff ff       	call   c0012e80 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f68:	59                   	pop    ecx
c0012f69:	5f                   	pop    edi
c0012f6a:	eb 8f                	jmp    c0012efb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f70:	89 d0                	mov    eax,edx
c0012f72:	83 c2 08             	add    edx,0x8
c0012f75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f79:	6a 10                	push   0x10
c0012f7b:	ff 30                	push   DWORD PTR [eax]
c0012f7d:	e8 fe fe ff ff       	call   c0012e80 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f82:	58                   	pop    eax
c0012f83:	5a                   	pop    edx
c0012f84:	e9 72 ff ff ff       	jmp    c0012efb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f89:	6a 25                	push   0x25
c0012f8b:	e8 9f fe ff ff       	call   c0012e2f <Dbg::logc(char)>
c0012f90:	58                   	pop    eax
c0012f91:	e9 65 ff ff ff       	jmp    c0012efb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f96:	6a 25                	push   0x25
c0012f98:	e8 92 fe ff ff       	call   c0012e2f <Dbg::logc(char)>
c0012f9d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fa0:	50                   	push   eax
c0012fa1:	e8 89 fe ff ff       	call   c0012e2f <Dbg::logc(char)>
c0012fa6:	5a                   	pop    edx
c0012fa7:	59                   	pop    ecx
c0012fa8:	e9 4e ff ff ff       	jmp    c0012efb <Dbg::kprintf(char const*, ...)+0x5c>
c0012fad:	50                   	push   eax
c0012fae:	89 eb                	mov    ebx,ebp
c0012fb0:	e8 7a fe ff ff       	call   c0012e2f <Dbg::logc(char)>
c0012fb5:	89 fd                	mov    ebp,edi
c0012fb7:	58                   	pop    eax
c0012fb8:	e9 3e ff ff ff       	jmp    c0012efb <Dbg::kprintf(char const*, ...)+0x5c>
c0012fbd:	90                   	nop

c0012fbe <File::read(unsigned long long, void*, int*)>:
c0012fbe:	53                   	push   ebx
c0012fbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fc3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fc7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fce:	3c 19                	cmp    al,0x19
c0012fd0:	77 35                	ja     c0013007 <File::read(unsigned long long, void*, int*)+0x49>
c0012fd2:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c0012fd9:	85 c0                	test   eax,eax
c0012fdb:	74 2a                	je     c0013007 <File::read(unsigned long long, void*, int*)+0x49>
c0012fdd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fe3:	85 c0                	test   eax,eax
c0012fe5:	74 20                	je     c0013007 <File::read(unsigned long long, void*, int*)+0x49>
c0012fe7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012feb:	74 21                	je     c001300e <File::read(unsigned long long, void*, int*)+0x50>
c0012fed:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ff3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ff9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ffd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013001:	5b                   	pop    ebx
c0013002:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013005:	ff e0                	jmp    eax
c0013007:	b8 0b 00 00 00       	mov    eax,0xb
c001300c:	eb 05                	jmp    c0013013 <File::read(unsigned long long, void*, int*)+0x55>
c001300e:	b8 05 00 00 00       	mov    eax,0x5
c0013013:	5b                   	pop    ebx
c0013014:	c3                   	ret    
c0013015:	90                   	nop

c0013016 <File::write(unsigned long long, void*, int*)>:
c0013016:	53                   	push   ebx
c0013017:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001301b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001301f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013026:	3c 19                	cmp    al,0x19
c0013028:	77 35                	ja     c001305f <File::write(unsigned long long, void*, int*)+0x49>
c001302a:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c0013031:	85 c0                	test   eax,eax
c0013033:	74 2a                	je     c001305f <File::write(unsigned long long, void*, int*)+0x49>
c0013035:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001303b:	85 c0                	test   eax,eax
c001303d:	74 20                	je     c001305f <File::write(unsigned long long, void*, int*)+0x49>
c001303f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013043:	74 21                	je     c0013066 <File::write(unsigned long long, void*, int*)+0x50>
c0013045:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013047:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001304b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013051:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013055:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013059:	5b                   	pop    ebx
c001305a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001305d:	ff e0                	jmp    eax
c001305f:	b8 0b 00 00 00       	mov    eax,0xb
c0013064:	eb 05                	jmp    c001306b <File::write(unsigned long long, void*, int*)+0x55>
c0013066:	b8 05 00 00 00       	mov    eax,0x5
c001306b:	5b                   	pop    ebx
c001306c:	c3                   	ret    
c001306d:	90                   	nop

c001306e <Directory::read(unsigned long long, void*, int*)>:
c001306e:	53                   	push   ebx
c001306f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013073:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013077:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001307e:	3c 19                	cmp    al,0x19
c0013080:	77 35                	ja     c00130b7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013082:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c0013089:	85 c0                	test   eax,eax
c001308b:	74 2a                	je     c00130b7 <Directory::read(unsigned long long, void*, int*)+0x49>
c001308d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013093:	85 c0                	test   eax,eax
c0013095:	74 20                	je     c00130b7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013097:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001309b:	74 21                	je     c00130be <Directory::read(unsigned long long, void*, int*)+0x50>
c001309d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001309f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130a3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130b1:	5b                   	pop    ebx
c00130b2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130b5:	ff e0                	jmp    eax
c00130b7:	b8 0b 00 00 00       	mov    eax,0xb
c00130bc:	eb 05                	jmp    c00130c3 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130be:	b8 05 00 00 00       	mov    eax,0x5
c00130c3:	5b                   	pop    ebx
c00130c4:	c3                   	ret    
c00130c5:	90                   	nop

c00130c6 <Directory::write(unsigned long long, void*, int*)>:
c00130c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ca:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130d1:	b8 0b 00 00 00       	mov    eax,0xb
c00130d6:	80 fa 19             	cmp    dl,0x19
c00130d9:	77 18                	ja     c00130f3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130db:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c00130e2:	85 d2                	test   edx,edx
c00130e4:	74 0d                	je     c00130f3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130e6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130ed:	19 c0                	sbb    eax,eax
c00130ef:	83 e0 0a             	and    eax,0xa
c00130f2:	40                   	inc    eax
c00130f3:	c3                   	ret    

c00130f4 <File::isAtty()>:
c00130f4:	31 c0                	xor    eax,eax
c00130f6:	c3                   	ret    
c00130f7:	90                   	nop

c00130f8 <Directory::isAtty()>:
c00130f8:	31 c0                	xor    eax,eax
c00130fa:	c3                   	ret    
c00130fb:	90                   	nop

c00130fc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130fc:	b8 0a 00 00 00       	mov    eax,0xa
c0013101:	c3                   	ret    

c0013102 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013102:	b8 0a 00 00 00       	mov    eax,0xa
c0013107:	c3                   	ret    

c0013108 <Filesystem::getFileFirstSector(char const*)>:
c0013108:	31 c0                	xor    eax,eax
c001310a:	31 d2                	xor    edx,edx
c001310c:	c3                   	ret    
c001310d:	90                   	nop

c001310e <File::~File()>:
c001310e:	83 ec 0c             	sub    esp,0xc
c0013111:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c0013116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311a:	89 10                	mov    DWORD PTR [eax],edx
c001311c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	50                   	push   eax
c0013124:	e8 0f e7 ff ff       	call   c0011838 <UnixFile::~UnixFile()>
c0013129:	83 c4 10             	add    esp,0x10
c001312c:	90                   	nop
c001312d:	83 c4 0c             	add    esp,0xc
c0013130:	c3                   	ret    
c0013131:	90                   	nop

c0013132 <File::~File()>:
c0013132:	83 ec 0c             	sub    esp,0xc
c0013135:	83 ec 0c             	sub    esp,0xc
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 cd ff ff ff       	call   c001310e <File::~File()>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	83 ec 08             	sub    esp,0x8
c0013147:	68 14 01 00 00       	push   0x114
c001314c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013150:	e8 6a fc ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	83 c4 0c             	add    esp,0xc
c001315b:	c3                   	ret    

c001315c <Directory::~Directory()>:
c001315c:	83 ec 0c             	sub    esp,0xc
c001315f:	ba 7c b6 02 c0       	mov    edx,0xc002b67c
c0013164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013168:	89 10                	mov    DWORD PTR [eax],edx
c001316a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001316e:	83 ec 0c             	sub    esp,0xc
c0013171:	50                   	push   eax
c0013172:	e8 c1 e6 ff ff       	call   c0011838 <UnixFile::~UnixFile()>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	90                   	nop
c001317b:	83 c4 0c             	add    esp,0xc
c001317e:	c3                   	ret    
c001317f:	90                   	nop

c0013180 <Directory::~Directory()>:
c0013180:	83 ec 0c             	sub    esp,0xc
c0013183:	83 ec 0c             	sub    esp,0xc
c0013186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001318a:	e8 cd ff ff ff       	call   c001315c <Directory::~Directory()>
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	83 ec 08             	sub    esp,0x8
c0013195:	68 14 01 00 00       	push   0x114
c001319a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001319e:	e8 1c fc ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c00131a3:	83 c4 10             	add    esp,0x10
c00131a6:	83 c4 0c             	add    esp,0xc
c00131a9:	c3                   	ret    

c00131aa <Filesystem::Filesystem()>:
c00131aa:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c00131af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131b3:	89 10                	mov    DWORD PTR [eax],edx
c00131b5:	8b 15 34 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f234
c00131bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131c6:	a3 34 f2 02 c0       	mov    ds:0xc002f234,eax
c00131cb:	90                   	nop
c00131cc:	c3                   	ret    
c00131cd:	90                   	nop

c00131ce <Filesystem::~Filesystem()>:
c00131ce:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c00131d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131d7:	89 10                	mov    DWORD PTR [eax],edx
c00131d9:	90                   	nop
c00131da:	c3                   	ret    
c00131db:	90                   	nop

c00131dc <Filesystem::~Filesystem()>:
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131e3:	e8 e6 ff ff ff       	call   c00131ce <Filesystem::~Filesystem()>
c00131e8:	83 c4 04             	add    esp,0x4
c00131eb:	83 ec 08             	sub    esp,0x8
c00131ee:	6a 08                	push   0x8
c00131f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f4:	e8 c6 fb ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c00131f9:	83 c4 10             	add    esp,0x10
c00131fc:	83 c4 0c             	add    esp,0xc
c00131ff:	c3                   	ret    

c0013200 <Fs::getcwd(Process*, char*, int)>:
c0013200:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013204:	31 c0                	xor    eax,eax
c0013206:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013209:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001320d:	7d 15                	jge    c0013224 <Fs::getcwd(Process*, char*, int)+0x24>
c001320f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013213:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001321a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001321d:	84 c9                	test   cl,cl
c001321f:	74 06                	je     c0013227 <Fs::getcwd(Process*, char*, int)+0x27>
c0013221:	40                   	inc    eax
c0013222:	eb e2                	jmp    c0013206 <Fs::getcwd(Process*, char*, int)+0x6>
c0013224:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013227:	31 c0                	xor    eax,eax
c0013229:	c3                   	ret    

c001322a <Fs::initVFS()>:
c001322a:	83 ec 18             	sub    esp,0x18
c001322d:	6a 08                	push   0x8
c001322f:	e8 c0 c6 ff ff       	call   c000f8f4 <malloc>
c0013234:	89 04 24             	mov    DWORD PTR [esp],eax
c0013237:	e8 34 e6 00 00       	call   c0021870 <FAT::FAT()>
c001323c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013243:	e8 ac c6 ff ff       	call   c000f8f4 <malloc>
c0013248:	89 04 24             	mov    DWORD PTR [esp],eax
c001324b:	e8 5c f8 00 00       	call   c0022aac <ISO9660::ISO9660()>
c0013250:	83 c4 1c             	add    esp,0x1c
c0013253:	c3                   	ret    

c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013254:	55                   	push   ebp
c0013255:	57                   	push   edi
c0013256:	56                   	push   esi
c0013257:	53                   	push   ebx
c0013258:	81 ec 10 04 00 00    	sub    esp,0x410
c001325e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013265:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001326c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013273:	68 00 04 00 00       	push   0x400
c0013278:	6a 00                	push   0x0
c001327a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001327e:	56                   	push   esi
c001327f:	e8 e8 d4 fe ff       	call   c000076c <memset>
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001328b:	75 0b                	jne    c0013298 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001328d:	50                   	push   eax
c001328e:	50                   	push   eax
c001328f:	57                   	push   edi
c0013290:	56                   	push   esi
c0013291:	e8 92 d5 fe ff       	call   c0000828 <strcpy>
c0013296:	eb 41                	jmp    c00132d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013298:	8a 07                	mov    al,BYTE PTR [edi]
c001329a:	3c 5c                	cmp    al,0x5c
c001329c:	74 04                	je     c00132a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001329e:	3c 2f                	cmp    al,0x2f
c00132a0:	75 18                	jne    c00132ba <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132a2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132a5:	3c 60                	cmp    al,0x60
c00132a7:	7e 03                	jle    c00132ac <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132a9:	83 e8 20             	sub    eax,0x20
c00132ac:	88 04 24             	mov    BYTE PTR [esp],al
c00132af:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132b6:	50                   	push   eax
c00132b7:	50                   	push   eax
c00132b8:	eb 18                	jmp    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132ba:	50                   	push   eax
c00132bb:	50                   	push   eax
c00132bc:	55                   	push   ebp
c00132bd:	56                   	push   esi
c00132be:	e8 65 d5 fe ff       	call   c0000828 <strcpy>
c00132c3:	5a                   	pop    edx
c00132c4:	59                   	pop    ecx
c00132c5:	68 11 ce 02 c0       	push   0xc002ce11
c00132ca:	56                   	push   esi
c00132cb:	e8 98 d6 fe ff       	call   c0000968 <strcat>
c00132d0:	5d                   	pop    ebp
c00132d1:	58                   	pop    eax
c00132d2:	57                   	push   edi
c00132d3:	56                   	push   esi
c00132d4:	e8 8f d6 fe ff       	call   c0000968 <strcat>
c00132d9:	83 c4 10             	add    esp,0x10
c00132dc:	8a 04 24             	mov    al,BYTE PTR [esp]
c00132df:	3c 60                	cmp    al,0x60
c00132e1:	7e 03                	jle    c00132e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00132e3:	83 e8 20             	sub    eax,0x20
c00132e6:	88 04 24             	mov    BYTE PTR [esp],al
c00132e9:	88 03                	mov    BYTE PTR [ebx],al
c00132eb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132f2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132f8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132fc:	bf 03 00 00 00       	mov    edi,0x3
c0013301:	b8 03 00 00 00       	mov    eax,0x3
c0013306:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013309:	84 d2                	test   dl,dl
c001330b:	0f 84 91 00 00 00    	je     c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013311:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013314:	80 fa 5c             	cmp    dl,0x5c
c0013317:	74 05                	je     c001331e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013319:	80 fa 2f             	cmp    dl,0x2f
c001331c:	75 12                	jne    c0013330 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001331e:	89 c5                	mov    ebp,eax
c0013320:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013325:	74 09                	je     c0013330 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013327:	40                   	inc    eax
c0013328:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001332c:	89 cf                	mov    edi,ecx
c001332e:	eb d6                	jmp    c0013306 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013330:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013335:	75 5b                	jne    c0013392 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013337:	80 fa 2e             	cmp    dl,0x2e
c001333a:	75 56                	jne    c0013392 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001333c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013340:	74 19                	je     c001335b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013342:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013347:	74 53                	je     c001339c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013349:	89 f9                	mov    ecx,edi
c001334b:	41                   	inc    ecx
c001334c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001334f:	80 fa 2f             	cmp    dl,0x2f
c0013352:	74 f7                	je     c001334b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013354:	80 fa 5c             	cmp    dl,0x5c
c0013357:	74 f2                	je     c001334b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013359:	eb d1                	jmp    c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001335b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013360:	74 3a                	je     c001339c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013362:	83 f8 03             	cmp    eax,0x3
c0013365:	74 c5                	je     c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013367:	41                   	inc    ecx
c0013368:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001336b:	80 fa 2f             	cmp    dl,0x2f
c001336e:	74 f7                	je     c0013367 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013370:	80 fa 5c             	cmp    dl,0x5c
c0013373:	74 f2                	je     c0013367 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013375:	48                   	dec    eax
c0013376:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001337a:	75 06                	jne    c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001337c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013380:	eb f3                	jmp    c0013375 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013382:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013386:	74 07                	je     c001338f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013388:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001338c:	48                   	dec    eax
c001338d:	eb f3                	jmp    c0013382 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001338f:	40                   	inc    eax
c0013390:	eb 9a                	jmp    c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013392:	80 fa 2f             	cmp    dl,0x2f
c0013395:	74 95                	je     c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013397:	80 fa 5c             	cmp    dl,0x5c
c001339a:	74 90                	je     c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001339c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001339f:	40                   	inc    eax
c00133a0:	eb 8a                	jmp    c001332c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133a2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	53                   	push   ebx
c00133aa:	e8 d9 d3 fe ff       	call   c0000788 <strlen>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133b7:	75 26                	jne    c00133df <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133b9:	83 ec 0c             	sub    esp,0xc
c00133bc:	53                   	push   ebx
c00133bd:	e8 c6 d3 fe ff       	call   c0000788 <strlen>
c00133c2:	83 c4 10             	add    esp,0x10
c00133c5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133ca:	74 26                	je     c00133f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	53                   	push   ebx
c00133d0:	e8 b3 d3 fe ff       	call   c0000788 <strlen>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00133dd:	eb c7                	jmp    c00133a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00133df:	83 ec 0c             	sub    esp,0xc
c00133e2:	53                   	push   ebx
c00133e3:	e8 a0 d3 fe ff       	call   c0000788 <strlen>
c00133e8:	83 c4 10             	add    esp,0x10
c00133eb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133f0:	74 c7                	je     c00133b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133f2:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133f8:	5b                   	pop    ebx
c00133f9:	5e                   	pop    esi
c00133fa:	5f                   	pop    edi
c00133fb:	5d                   	pop    ebp
c00133fc:	c3                   	ret    
c00133fd:	90                   	nop

c00133fe <File::File(char const*, Process*)>:
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013405:	83 ec 08             	sub    esp,0x8
c0013408:	6a 00                	push   0x0
c001340a:	50                   	push   eax
c001340b:	e8 46 e2 ff ff       	call   c0011656 <UnixFile::UnixFile(int)>
c0013410:	83 c4 10             	add    esp,0x10
c0013413:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c0013418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341c:	89 10                	mov    DWORD PTR [eax],edx
c001341e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013422:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342c:	83 c0 0d             	add    eax,0xd
c001342f:	83 ec 04             	sub    esp,0x4
c0013432:	52                   	push   edx
c0013433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013437:	50                   	push   eax
c0013438:	e8 17 fe ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c001343d:	83 c4 10             	add    esp,0x10
c0013440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013444:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013447:	8d 50 bf             	lea    edx,[eax-0x41]
c001344a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013458:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001345c:	90                   	nop
c001345d:	83 c4 0c             	add    esp,0xc
c0013460:	c3                   	ret    
c0013461:	90                   	nop

c0013462 <File::open(FileOpenMode)>:
c0013462:	53                   	push   ebx
c0013463:	b8 0b 00 00 00       	mov    eax,0xb
c0013468:	83 ec 08             	sub    esp,0x8
c001346b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001346f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013476:	80 fa 19             	cmp    dl,0x19
c0013479:	77 40                	ja     c00134bb <File::open(FileOpenMode)+0x59>
c001347b:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c0013482:	85 d2                	test   edx,edx
c0013484:	74 35                	je     c00134bb <File::open(FileOpenMode)+0x59>
c0013486:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001348c:	85 d2                	test   edx,edx
c001348e:	74 2b                	je     c00134bb <File::open(FileOpenMode)+0x59>
c0013490:	b8 06 00 00 00       	mov    eax,0x6
c0013495:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013499:	75 20                	jne    c00134bb <File::open(FileOpenMode)+0x59>
c001349b:	8b 02                	mov    eax,DWORD PTR [edx]
c001349d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134a7:	51                   	push   ecx
c00134a8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134ab:	51                   	push   ecx
c00134ac:	52                   	push   edx
c00134ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134b0:	83 c4 10             	add    esp,0x10
c00134b3:	85 c0                	test   eax,eax
c00134b5:	75 04                	jne    c00134bb <File::open(FileOpenMode)+0x59>
c00134b7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134bb:	83 c4 08             	add    esp,0x8
c00134be:	5b                   	pop    ebx
c00134bf:	c3                   	ret    

c00134c0 <File::close()>:
c00134c0:	53                   	push   ebx
c00134c1:	b8 0b 00 00 00       	mov    eax,0xb
c00134c6:	83 ec 08             	sub    esp,0x8
c00134c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134cd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134d4:	80 fa 19             	cmp    dl,0x19
c00134d7:	77 41                	ja     c001351a <File::close()+0x5a>
c00134d9:	8b 1c 95 c0 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0940]
c00134e0:	85 db                	test   ebx,ebx
c00134e2:	74 36                	je     c001351a <File::close()+0x5a>
c00134e4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134eb:	74 2d                	je     c001351a <File::close()+0x5a>
c00134ed:	b8 05 00 00 00       	mov    eax,0x5
c00134f2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134f6:	74 22                	je     c001351a <File::close()+0x5a>
c00134f8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134fc:	8b 04 95 c0 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0940]
c0013503:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013509:	53                   	push   ebx
c001350a:	53                   	push   ebx
c001350b:	8b 10                	mov    edx,DWORD PTR [eax]
c001350d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013513:	50                   	push   eax
c0013514:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	83 c4 08             	add    esp,0x8
c001351d:	5b                   	pop    ebx
c001351e:	c3                   	ret    
c001351f:	90                   	nop

c0013520 <File::seek(unsigned long long)>:
c0013520:	56                   	push   esi
c0013521:	53                   	push   ebx
c0013522:	b8 0b 00 00 00       	mov    eax,0xb
c0013527:	51                   	push   ecx
c0013528:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001352c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013530:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013537:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001353b:	80 fa 19             	cmp    dl,0x19
c001353e:	77 31                	ja     c0013571 <File::seek(unsigned long long)+0x51>
c0013540:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c0013547:	85 d2                	test   edx,edx
c0013549:	74 26                	je     c0013571 <File::seek(unsigned long long)+0x51>
c001354b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013551:	85 d2                	test   edx,edx
c0013553:	74 1c                	je     c0013571 <File::seek(unsigned long long)+0x51>
c0013555:	b8 05 00 00 00       	mov    eax,0x5
c001355a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001355e:	74 11                	je     c0013571 <File::seek(unsigned long long)+0x51>
c0013560:	8b 02                	mov    eax,DWORD PTR [edx]
c0013562:	53                   	push   ebx
c0013563:	51                   	push   ecx
c0013564:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001356a:	52                   	push   edx
c001356b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001356e:	83 c4 10             	add    esp,0x10
c0013571:	5a                   	pop    edx
c0013572:	5b                   	pop    ebx
c0013573:	5e                   	pop    esi
c0013574:	c3                   	ret    
c0013575:	90                   	nop

c0013576 <File::tell(unsigned long long*)>:
c0013576:	83 ec 0c             	sub    esp,0xc
c0013579:	b8 0b 00 00 00       	mov    eax,0xb
c001357e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013582:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013589:	80 fa 19             	cmp    dl,0x19
c001358c:	77 34                	ja     c00135c2 <File::tell(unsigned long long*)+0x4c>
c001358e:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c0013595:	85 d2                	test   edx,edx
c0013597:	74 29                	je     c00135c2 <File::tell(unsigned long long*)+0x4c>
c0013599:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001359f:	85 d2                	test   edx,edx
c00135a1:	74 1f                	je     c00135c2 <File::tell(unsigned long long*)+0x4c>
c00135a3:	b8 05 00 00 00       	mov    eax,0x5
c00135a8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135ac:	74 14                	je     c00135c2 <File::tell(unsigned long long*)+0x4c>
c00135ae:	50                   	push   eax
c00135af:	8b 02                	mov    eax,DWORD PTR [edx]
c00135b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135bb:	52                   	push   edx
c00135bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	83 c4 0c             	add    esp,0xc
c00135c5:	c3                   	ret    

c00135c6 <File::rewind()>:
c00135c6:	83 ec 10             	sub    esp,0x10
c00135c9:	6a 00                	push   0x0
c00135cb:	6a 00                	push   0x0
c00135cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d1:	e8 4a ff ff ff       	call   c0013520 <File::seek(unsigned long long)>
c00135d6:	83 c4 1c             	add    esp,0x1c
c00135d9:	c3                   	ret    

c00135da <File::unlink()>:
c00135da:	83 ec 0c             	sub    esp,0xc
c00135dd:	b8 0b 00 00 00       	mov    eax,0xb
c00135e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135ed:	80 f9 19             	cmp    cl,0x19
c00135f0:	77 2f                	ja     c0013621 <File::unlink()+0x47>
c00135f2:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c00135f9:	85 c9                	test   ecx,ecx
c00135fb:	74 24                	je     c0013621 <File::unlink()+0x47>
c00135fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013603:	85 c9                	test   ecx,ecx
c0013605:	74 1a                	je     c0013621 <File::unlink()+0x47>
c0013607:	b8 06 00 00 00       	mov    eax,0x6
c001360c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013610:	75 0f                	jne    c0013621 <File::unlink()+0x47>
c0013612:	83 c2 0d             	add    edx,0xd
c0013615:	50                   	push   eax
c0013616:	50                   	push   eax
c0013617:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013619:	52                   	push   edx
c001361a:	51                   	push   ecx
c001361b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001361e:	83 c4 10             	add    esp,0x10
c0013621:	83 c4 0c             	add    esp,0xc
c0013624:	c3                   	ret    
c0013625:	90                   	nop

c0013626 <File::rename(char const*)>:
c0013626:	83 ec 0c             	sub    esp,0xc
c0013629:	b8 0b 00 00 00       	mov    eax,0xb
c001362e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013632:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013639:	80 f9 19             	cmp    cl,0x19
c001363c:	77 32                	ja     c0013670 <File::rename(char const*)+0x4a>
c001363e:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c0013645:	85 c9                	test   ecx,ecx
c0013647:	74 27                	je     c0013670 <File::rename(char const*)+0x4a>
c0013649:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001364f:	85 c9                	test   ecx,ecx
c0013651:	74 1d                	je     c0013670 <File::rename(char const*)+0x4a>
c0013653:	b8 06 00 00 00       	mov    eax,0x6
c0013658:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001365c:	75 12                	jne    c0013670 <File::rename(char const*)+0x4a>
c001365e:	83 c2 0d             	add    edx,0xd
c0013661:	50                   	push   eax
c0013662:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013664:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013668:	52                   	push   edx
c0013669:	51                   	push   ecx
c001366a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001366d:	83 c4 10             	add    esp,0x10
c0013670:	83 c4 0c             	add    esp,0xc
c0013673:	c3                   	ret    

c0013674 <File::chfatattr(unsigned char, unsigned char)>:
c0013674:	57                   	push   edi
c0013675:	b8 0b 00 00 00       	mov    eax,0xb
c001367a:	56                   	push   esi
c001367b:	53                   	push   ebx
c001367c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013680:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013684:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001368b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001368f:	80 f9 19             	cmp    cl,0x19
c0013692:	77 37                	ja     c00136cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013694:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c001369b:	85 c9                	test   ecx,ecx
c001369d:	74 2c                	je     c00136cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c001369f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a5:	85 c9                	test   ecx,ecx
c00136a7:	74 22                	je     c00136cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136a9:	b8 06 00 00 00       	mov    eax,0x6
c00136ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136b2:	75 17                	jne    c00136cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136b4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136b6:	89 f0                	mov    eax,esi
c00136b8:	83 c2 0d             	add    edx,0xd
c00136bb:	0f b6 f0             	movzx  esi,al
c00136be:	0f b6 db             	movzx  ebx,bl
c00136c1:	56                   	push   esi
c00136c2:	53                   	push   ebx
c00136c3:	52                   	push   edx
c00136c4:	51                   	push   ecx
c00136c5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	5b                   	pop    ebx
c00136cc:	5e                   	pop    esi
c00136cd:	5f                   	pop    edi
c00136ce:	c3                   	ret    
c00136cf:	90                   	nop

c00136d0 <File::exists()>:
c00136d0:	83 ec 0c             	sub    esp,0xc
c00136d3:	31 c0                	xor    eax,eax
c00136d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136e0:	80 f9 19             	cmp    cl,0x19
c00136e3:	77 24                	ja     c0013709 <File::exists()+0x39>
c00136e5:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c00136ec:	85 c9                	test   ecx,ecx
c00136ee:	74 19                	je     c0013709 <File::exists()+0x39>
c00136f0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f6:	85 c9                	test   ecx,ecx
c00136f8:	74 0f                	je     c0013709 <File::exists()+0x39>
c00136fa:	83 c2 0d             	add    edx,0xd
c00136fd:	50                   	push   eax
c00136fe:	50                   	push   eax
c00136ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013701:	52                   	push   edx
c0013702:	51                   	push   ecx
c0013703:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013706:	83 c4 10             	add    esp,0x10
c0013709:	83 c4 0c             	add    esp,0xc
c001370c:	c3                   	ret    
c001370d:	90                   	nop

c001370e <File::stat(unsigned long long*, bool*)>:
c001370e:	56                   	push   esi
c001370f:	53                   	push   ebx
c0013710:	50                   	push   eax
c0013711:	b8 0b 00 00 00       	mov    eax,0xb
c0013716:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001371a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001371e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013725:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013729:	80 f9 19             	cmp    cl,0x19
c001372c:	77 3d                	ja     c001376b <File::stat(unsigned long long*, bool*)+0x5d>
c001372e:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c0013735:	85 c9                	test   ecx,ecx
c0013737:	74 32                	je     c001376b <File::stat(unsigned long long*, bool*)+0x5d>
c0013739:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001373f:	85 c9                	test   ecx,ecx
c0013741:	74 28                	je     c001376b <File::stat(unsigned long long*, bool*)+0x5d>
c0013743:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013745:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013749:	74 13                	je     c001375e <File::stat(unsigned long long*, bool*)+0x50>
c001374b:	83 ec 04             	sub    esp,0x4
c001374e:	56                   	push   esi
c001374f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013755:	51                   	push   ecx
c0013756:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013759:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001375c:	eb 0a                	jmp    c0013768 <File::stat(unsigned long long*, bool*)+0x5a>
c001375e:	53                   	push   ebx
c001375f:	83 c2 0d             	add    edx,0xd
c0013762:	56                   	push   esi
c0013763:	52                   	push   edx
c0013764:	51                   	push   ecx
c0013765:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013768:	83 c4 10             	add    esp,0x10
c001376b:	5a                   	pop    edx
c001376c:	5b                   	pop    ebx
c001376d:	5e                   	pop    esi
c001376e:	c3                   	ret    

c001376f <Fs::setcwd(Process*, char*)>:
c001376f:	55                   	push   ebp
c0013770:	57                   	push   edi
c0013771:	56                   	push   esi
c0013772:	53                   	push   ebx
c0013773:	81 ec 20 02 00 00    	sub    esp,0x220
c0013779:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013780:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013786:	57                   	push   edi
c0013787:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001378e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013792:	56                   	push   esi
c0013793:	e8 bc fa ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013798:	89 34 24             	mov    DWORD PTR [esp],esi
c001379b:	e8 e8 cf fe ff       	call   c0000788 <strlen>
c00137a0:	83 c4 10             	add    esp,0x10
c00137a3:	83 f8 02             	cmp    eax,0x2
c00137a6:	77 17                	ja     c00137bf <Fs::setcwd(Process*, char*)+0x50>
c00137a8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137ad:	83 e8 41             	sub    eax,0x41
c00137b0:	83 f8 19             	cmp    eax,0x19
c00137b3:	76 24                	jbe    c00137d9 <Fs::setcwd(Process*, char*)+0x6a>
c00137b5:	b8 03 00 00 00       	mov    eax,0x3
c00137ba:	e9 e0 00 00 00       	jmp    c001389f <Fs::setcwd(Process*, char*)+0x130>
c00137bf:	83 ec 0c             	sub    esp,0xc
c00137c2:	56                   	push   esi
c00137c3:	e8 c0 cf fe ff       	call   c0000788 <strlen>
c00137c8:	83 c4 10             	add    esp,0x10
c00137cb:	83 f8 03             	cmp    eax,0x3
c00137ce:	75 34                	jne    c0013804 <Fs::setcwd(Process*, char*)+0x95>
c00137d0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00137d5:	75 2d                	jne    c0013804 <Fs::setcwd(Process*, char*)+0x95>
c00137d7:	eb cf                	jmp    c00137a8 <Fs::setcwd(Process*, char*)+0x39>
c00137d9:	8b 14 85 c0 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0940]
c00137e0:	b8 05 00 00 00       	mov    eax,0x5
c00137e5:	85 d2                	test   edx,edx
c00137e7:	0f 84 b2 00 00 00    	je     c001389f <Fs::setcwd(Process*, char*)+0x130>
c00137ed:	b8 06 00 00 00       	mov    eax,0x6
c00137f2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137f9:	0f 85 92 00 00 00    	jne    c0013891 <Fs::setcwd(Process*, char*)+0x122>
c00137ff:	e9 9b 00 00 00       	jmp    c001389f <Fs::setcwd(Process*, char*)+0x130>
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	68 14 01 00 00       	push   0x114
c001380c:	e8 e3 c0 ff ff       	call   c000f8f4 <malloc>
c0013811:	83 c4 0c             	add    esp,0xc
c0013814:	89 c3                	mov    ebx,eax
c0013816:	55                   	push   ebp
c0013817:	56                   	push   esi
c0013818:	50                   	push   eax
c0013819:	e8 e0 fb ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001381e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013823:	83 c4 0c             	add    esp,0xc
c0013826:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001382a:	50                   	push   eax
c001382b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001382f:	50                   	push   eax
c0013830:	53                   	push   ebx
c0013831:	e8 d8 fe ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c0013836:	83 c4 10             	add    esp,0x10
c0013839:	83 f8 02             	cmp    eax,0x2
c001383c:	74 04                	je     c0013842 <Fs::setcwd(Process*, char*)+0xd3>
c001383e:	85 c0                	test   eax,eax
c0013840:	74 1c                	je     c001385e <Fs::setcwd(Process*, char*)+0xef>
c0013842:	b8 01 00 00 00       	mov    eax,0x1
c0013847:	85 db                	test   ebx,ebx
c0013849:	74 54                	je     c001389f <Fs::setcwd(Process*, char*)+0x130>
c001384b:	83 ec 0c             	sub    esp,0xc
c001384e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013850:	53                   	push   ebx
c0013851:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013854:	83 c4 10             	add    esp,0x10
c0013857:	b8 01 00 00 00       	mov    eax,0x1
c001385c:	eb 41                	jmp    c001389f <Fs::setcwd(Process*, char*)+0x130>
c001385e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013863:	75 1c                	jne    c0013881 <Fs::setcwd(Process*, char*)+0x112>
c0013865:	b8 02 00 00 00       	mov    eax,0x2
c001386a:	85 db                	test   ebx,ebx
c001386c:	74 31                	je     c001389f <Fs::setcwd(Process*, char*)+0x130>
c001386e:	83 ec 0c             	sub    esp,0xc
c0013871:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013873:	53                   	push   ebx
c0013874:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013877:	83 c4 10             	add    esp,0x10
c001387a:	b8 02 00 00 00       	mov    eax,0x2
c001387f:	eb 1e                	jmp    c001389f <Fs::setcwd(Process*, char*)+0x130>
c0013881:	85 db                	test   ebx,ebx
c0013883:	74 0c                	je     c0013891 <Fs::setcwd(Process*, char*)+0x122>
c0013885:	83 ec 0c             	sub    esp,0xc
c0013888:	8b 03                	mov    eax,DWORD PTR [ebx]
c001388a:	53                   	push   ebx
c001388b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001388e:	83 c4 10             	add    esp,0x10
c0013891:	50                   	push   eax
c0013892:	50                   	push   eax
c0013893:	56                   	push   esi
c0013894:	57                   	push   edi
c0013895:	e8 8e cf fe ff       	call   c0000828 <strcpy>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	31 c0                	xor    eax,eax
c001389f:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138a5:	5b                   	pop    ebx
c00138a6:	5e                   	pop    esi
c00138a7:	5f                   	pop    edi
c00138a8:	5d                   	pop    ebp
c00138a9:	c3                   	ret    

c00138aa <Directory::Directory(char const*, Process*)>:
c00138aa:	83 ec 0c             	sub    esp,0xc
c00138ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b1:	83 ec 08             	sub    esp,0x8
c00138b4:	6a 00                	push   0x0
c00138b6:	50                   	push   eax
c00138b7:	e8 9a dd ff ff       	call   c0011656 <UnixFile::UnixFile(int)>
c00138bc:	83 c4 10             	add    esp,0x10
c00138bf:	ba 7c b6 02 c0       	mov    edx,0xc002b67c
c00138c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c8:	89 10                	mov    DWORD PTR [eax],edx
c00138ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00138d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d8:	83 c0 0d             	add    eax,0xd
c00138db:	83 ec 04             	sub    esp,0x4
c00138de:	52                   	push   edx
c00138df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138e3:	50                   	push   eax
c00138e4:	e8 6b f9 ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138e9:	83 c4 10             	add    esp,0x10
c00138ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138f3:	8d 50 bf             	lea    edx,[eax-0x41]
c00138f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013904:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013908:	90                   	nop
c0013909:	83 c4 0c             	add    esp,0xc
c001390c:	c3                   	ret    
c001390d:	90                   	nop

c001390e <Directory::open()>:
c001390e:	53                   	push   ebx
c001390f:	b8 0b 00 00 00       	mov    eax,0xb
c0013914:	83 ec 08             	sub    esp,0x8
c0013917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001391b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013922:	80 fa 19             	cmp    dl,0x19
c0013925:	77 3d                	ja     c0013964 <Directory::open()+0x56>
c0013927:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c001392e:	85 d2                	test   edx,edx
c0013930:	74 32                	je     c0013964 <Directory::open()+0x56>
c0013932:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013938:	85 d2                	test   edx,edx
c001393a:	74 28                	je     c0013964 <Directory::open()+0x56>
c001393c:	b8 06 00 00 00       	mov    eax,0x6
c0013941:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013945:	75 1d                	jne    c0013964 <Directory::open()+0x56>
c0013947:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001394d:	50                   	push   eax
c001394e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013950:	51                   	push   ecx
c0013951:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013954:	51                   	push   ecx
c0013955:	52                   	push   edx
c0013956:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013959:	83 c4 10             	add    esp,0x10
c001395c:	85 c0                	test   eax,eax
c001395e:	75 04                	jne    c0013964 <Directory::open()+0x56>
c0013960:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013964:	83 c4 08             	add    esp,0x8
c0013967:	5b                   	pop    ebx
c0013968:	c3                   	ret    
c0013969:	90                   	nop

c001396a <Directory::close()>:
c001396a:	53                   	push   ebx
c001396b:	b8 0b 00 00 00       	mov    eax,0xb
c0013970:	83 ec 08             	sub    esp,0x8
c0013973:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013977:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001397e:	80 fa 19             	cmp    dl,0x19
c0013981:	77 41                	ja     c00139c4 <Directory::close()+0x5a>
c0013983:	8b 1c 95 c0 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0940]
c001398a:	85 db                	test   ebx,ebx
c001398c:	74 36                	je     c00139c4 <Directory::close()+0x5a>
c001398e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013995:	74 2d                	je     c00139c4 <Directory::close()+0x5a>
c0013997:	b8 05 00 00 00       	mov    eax,0x5
c001399c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139a0:	74 22                	je     c00139c4 <Directory::close()+0x5a>
c00139a2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139a6:	8b 04 95 c0 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0940]
c00139ad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139b3:	53                   	push   ebx
c00139b4:	53                   	push   ebx
c00139b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00139b7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139bd:	50                   	push   eax
c00139be:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	83 c4 08             	add    esp,0x8
c00139c7:	5b                   	pop    ebx
c00139c8:	c3                   	ret    
c00139c9:	90                   	nop

c00139ca <Directory::unlink()>:
c00139ca:	83 ec 0c             	sub    esp,0xc
c00139cd:	b8 0b 00 00 00       	mov    eax,0xb
c00139d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139dd:	80 f9 19             	cmp    cl,0x19
c00139e0:	77 2f                	ja     c0013a11 <Directory::unlink()+0x47>
c00139e2:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c00139e9:	85 c9                	test   ecx,ecx
c00139eb:	74 24                	je     c0013a11 <Directory::unlink()+0x47>
c00139ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139f3:	85 c9                	test   ecx,ecx
c00139f5:	74 1a                	je     c0013a11 <Directory::unlink()+0x47>
c00139f7:	b8 06 00 00 00       	mov    eax,0x6
c00139fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a00:	75 0f                	jne    c0013a11 <Directory::unlink()+0x47>
c0013a02:	83 c2 0d             	add    edx,0xd
c0013a05:	50                   	push   eax
c0013a06:	50                   	push   eax
c0013a07:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a09:	52                   	push   edx
c0013a0a:	51                   	push   ecx
c0013a0b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a0e:	83 c4 10             	add    esp,0x10
c0013a11:	83 c4 0c             	add    esp,0xc
c0013a14:	c3                   	ret    
c0013a15:	90                   	nop

c0013a16 <Directory::rename(char const*)>:
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	b8 0b 00 00 00       	mov    eax,0xb
c0013a1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a22:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a29:	80 f9 19             	cmp    cl,0x19
c0013a2c:	77 32                	ja     c0013a60 <Directory::rename(char const*)+0x4a>
c0013a2e:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c0013a35:	85 c9                	test   ecx,ecx
c0013a37:	74 27                	je     c0013a60 <Directory::rename(char const*)+0x4a>
c0013a39:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a3f:	85 c9                	test   ecx,ecx
c0013a41:	74 1d                	je     c0013a60 <Directory::rename(char const*)+0x4a>
c0013a43:	b8 06 00 00 00       	mov    eax,0x6
c0013a48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a4c:	75 12                	jne    c0013a60 <Directory::rename(char const*)+0x4a>
c0013a4e:	83 c2 0d             	add    edx,0xd
c0013a51:	50                   	push   eax
c0013a52:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a58:	52                   	push   edx
c0013a59:	51                   	push   ecx
c0013a5a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a5d:	83 c4 10             	add    esp,0x10
c0013a60:	83 c4 0c             	add    esp,0xc
c0013a63:	c3                   	ret    

c0013a64 <Directory::exists()>:
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	31 c0                	xor    eax,eax
c0013a69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a6d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a74:	80 f9 19             	cmp    cl,0x19
c0013a77:	77 24                	ja     c0013a9d <Directory::exists()+0x39>
c0013a79:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c0013a80:	85 c9                	test   ecx,ecx
c0013a82:	74 19                	je     c0013a9d <Directory::exists()+0x39>
c0013a84:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a8a:	85 c9                	test   ecx,ecx
c0013a8c:	74 0f                	je     c0013a9d <Directory::exists()+0x39>
c0013a8e:	83 c2 0d             	add    edx,0xd
c0013a91:	50                   	push   eax
c0013a92:	50                   	push   eax
c0013a93:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a95:	52                   	push   edx
c0013a96:	51                   	push   ecx
c0013a97:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a9a:	83 c4 10             	add    esp,0x10
c0013a9d:	83 c4 0c             	add    esp,0xc
c0013aa0:	c3                   	ret    
c0013aa1:	90                   	nop

c0013aa2 <Directory::read(dirent*)>:
c0013aa2:	83 ec 1c             	sub    esp,0x1c
c0013aa5:	b8 0b 00 00 00       	mov    eax,0xb
c0013aaa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013aae:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ab5:	80 fa 19             	cmp    dl,0x19
c0013ab8:	77 30                	ja     c0013aea <Directory::read(dirent*)+0x48>
c0013aba:	8b 14 95 c0 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0940]
c0013ac1:	85 d2                	test   edx,edx
c0013ac3:	74 25                	je     c0013aea <Directory::read(dirent*)+0x48>
c0013ac5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013acc:	74 1c                	je     c0013aea <Directory::read(dirent*)+0x48>
c0013ace:	83 ec 0c             	sub    esp,0xc
c0013ad1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ad7:	52                   	push   edx
c0013ad8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013adc:	6a 00                	push   0x0
c0013ade:	68 10 01 00 00       	push   0x110
c0013ae3:	51                   	push   ecx
c0013ae4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ae7:	83 c4 20             	add    esp,0x20
c0013aea:	83 c4 1c             	add    esp,0x1c
c0013aed:	c3                   	ret    

c0013aee <Directory::create()>:
c0013aee:	83 ec 0c             	sub    esp,0xc
c0013af1:	b8 0b 00 00 00       	mov    eax,0xb
c0013af6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013afa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b01:	80 f9 19             	cmp    cl,0x19
c0013b04:	77 2f                	ja     c0013b35 <Directory::create()+0x47>
c0013b06:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c0013b0d:	85 c9                	test   ecx,ecx
c0013b0f:	74 24                	je     c0013b35 <Directory::create()+0x47>
c0013b11:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b17:	85 c9                	test   ecx,ecx
c0013b19:	74 1a                	je     c0013b35 <Directory::create()+0x47>
c0013b1b:	b8 06 00 00 00       	mov    eax,0x6
c0013b20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b24:	75 0f                	jne    c0013b35 <Directory::create()+0x47>
c0013b26:	83 c2 0d             	add    edx,0xd
c0013b29:	50                   	push   eax
c0013b2a:	50                   	push   eax
c0013b2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b2d:	52                   	push   edx
c0013b2e:	51                   	push   ecx
c0013b2f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b32:	83 c4 10             	add    esp,0x10
c0013b35:	83 c4 0c             	add    esp,0xc
c0013b38:	c3                   	ret    
c0013b39:	90                   	nop

c0013b3a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b3a:	b8 0a 00 00 00       	mov    eax,0xa
c0013b3f:	c3                   	ret    

c0013b40 <Bus::Bus(char const*)>:
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b47:	83 ec 08             	sub    esp,0x8
c0013b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4e:	50                   	push   eax
c0013b4f:	e8 5c 09 00 00       	call   c00144b0 <Device::Device(char const*)>
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	ba 98 b6 02 c0       	mov    edx,0xc002b698
c0013b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b60:	89 10                	mov    DWORD PTR [eax],edx
c0013b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b66:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b70:	90                   	nop
c0013b71:	83 c4 0c             	add    esp,0xc
c0013b74:	c3                   	ret    
c0013b75:	90                   	nop

c0013b76 <Bus::~Bus()>:
c0013b76:	83 ec 0c             	sub    esp,0xc
c0013b79:	ba 98 b6 02 c0       	mov    edx,0xc002b698
c0013b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b82:	89 10                	mov    DWORD PTR [eax],edx
c0013b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b88:	83 ec 0c             	sub    esp,0xc
c0013b8b:	50                   	push   eax
c0013b8c:	e8 15 06 00 00       	call   c00141a6 <Device::~Device()>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	90                   	nop
c0013b95:	83 c4 0c             	add    esp,0xc
c0013b98:	c3                   	ret    
c0013b99:	90                   	nop

c0013b9a <Bus::~Bus()>:
c0013b9a:	83 ec 0c             	sub    esp,0xc
c0013b9d:	83 ec 0c             	sub    esp,0xc
c0013ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba4:	e8 cd ff ff ff       	call   c0013b76 <Bus::~Bus()>
c0013ba9:	83 c4 10             	add    esp,0x10
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	68 58 01 00 00       	push   0x158
c0013bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb8:	e8 02 f2 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0013bbd:	83 c4 10             	add    esp,0x10
c0013bc0:	83 c4 0c             	add    esp,0xc
c0013bc3:	c3                   	ret    

c0013bc4 <Buzzer::Buzzer(char const*)>:
c0013bc4:	83 ec 0c             	sub    esp,0xc
c0013bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bcb:	83 ec 08             	sub    esp,0x8
c0013bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd2:	50                   	push   eax
c0013bd3:	e8 d8 08 00 00       	call   c00144b0 <Device::Device(char const*)>
c0013bd8:	83 c4 10             	add    esp,0x10
c0013bdb:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c0013be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be4:	89 10                	mov    DWORD PTR [eax],edx
c0013be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c02:	90                   	nop
c0013c03:	83 c4 0c             	add    esp,0xc
c0013c06:	c3                   	ret    
c0013c07:	90                   	nop

c0013c08 <Buzzer::~Buzzer()>:
c0013c08:	83 ec 0c             	sub    esp,0xc
c0013c0b:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c0013c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c14:	89 10                	mov    DWORD PTR [eax],edx
c0013c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1a:	83 ec 0c             	sub    esp,0xc
c0013c1d:	50                   	push   eax
c0013c1e:	e8 83 05 00 00       	call   c00141a6 <Device::~Device()>
c0013c23:	83 c4 10             	add    esp,0x10
c0013c26:	90                   	nop
c0013c27:	83 c4 0c             	add    esp,0xc
c0013c2a:	c3                   	ret    
c0013c2b:	90                   	nop

c0013c2c <Buzzer::~Buzzer()>:
c0013c2c:	83 ec 0c             	sub    esp,0xc
c0013c2f:	83 ec 0c             	sub    esp,0xc
c0013c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c36:	e8 cd ff ff ff       	call   c0013c08 <Buzzer::~Buzzer()>
c0013c3b:	83 c4 10             	add    esp,0x10
c0013c3e:	83 ec 08             	sub    esp,0x8
c0013c41:	68 5c 01 00 00       	push   0x15c
c0013c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c4a:	e8 70 f1 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0013c4f:	83 c4 10             	add    esp,0x10
c0013c52:	83 c4 0c             	add    esp,0xc
c0013c55:	c3                   	ret    

c0013c56 <Buzzer::stop()>:
c0013c56:	83 ec 14             	sub    esp,0x14
c0013c59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c5f:	6a 00                	push   0x0
c0013c61:	50                   	push   eax
c0013c62:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c65:	83 c4 1c             	add    esp,0x1c
c0013c68:	c3                   	ret    

c0013c69 <beepThread(void*)>:
c0013c69:	53                   	push   ebx
c0013c6a:	83 ec 08             	sub    esp,0x8
c0013c6d:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0013c72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c76:	48                   	dec    eax
c0013c77:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0013c7c:	75 01                	jne    c0013c7f <beepThread(void*)+0x16>
c0013c7e:	fb                   	sti    
c0013c7f:	50                   	push   eax
c0013c80:	50                   	push   eax
c0013c81:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c86:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c8c:	52                   	push   edx
c0013c8d:	50                   	push   eax
c0013c8e:	e8 aa ac 00 00       	call   c001e93d <nanoSleep(unsigned long long)>
c0013c93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c96:	e8 bb ff ff ff       	call   c0013c56 <Buzzer::stop()>
c0013c9b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013ca3:	83 c4 18             	add    esp,0x18
c0013ca6:	5b                   	pop    ebx
c0013ca7:	e9 8d ab 00 00       	jmp    c001e839 <blockTask(TaskState)>

c0013cac <Buzzer::beep(int, int, bool)>:
c0013cac:	57                   	push   edi
c0013cad:	56                   	push   esi
c0013cae:	53                   	push   ebx
c0013caf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cb3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013cb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cbb:	52                   	push   edx
c0013cbc:	52                   	push   edx
c0013cbd:	8b 06                	mov    eax,DWORD PTR [esi]
c0013cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc3:	56                   	push   esi
c0013cc4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	89 f8                	mov    eax,edi
c0013ccc:	84 c0                	test   al,al
c0013cce:	74 1f                	je     c0013cef <Buzzer::beep(int, int, bool)+0x43>
c0013cd0:	50                   	push   eax
c0013cd1:	50                   	push   eax
c0013cd2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cd8:	99                   	cdq    
c0013cd9:	52                   	push   edx
c0013cda:	50                   	push   eax
c0013cdb:	e8 5d ac 00 00       	call   c001e93d <nanoSleep(unsigned long long)>
c0013ce0:	83 c4 10             	add    esp,0x10
c0013ce3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ce7:	5b                   	pop    ebx
c0013ce8:	5e                   	pop    esi
c0013ce9:	5f                   	pop    edi
c0013cea:	e9 67 ff ff ff       	jmp    c0013c56 <Buzzer::stop()>
c0013cef:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013cf5:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0013cfa:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d02:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d06:	c7 44 24 14 69 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c69
c0013d0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d12:	5b                   	pop    ebx
c0013d13:	5e                   	pop    esi
c0013d14:	5f                   	pop    edi
c0013d15:	e9 dc a6 00 00       	jmp    c001e3f6 <Process::createThread(void (*)(void*), void*, int)>

c0013d1a <User::loadClockSettings(int)>:
c0013d1a:	53                   	push   ebx
c0013d1b:	83 ec 14             	sub    esp,0x14
c0013d1e:	68 14 01 00 00       	push   0x114
c0013d23:	e8 cc bb ff ff       	call   c000f8f4 <malloc>
c0013d28:	83 c4 0c             	add    esp,0xc
c0013d2b:	89 c3                	mov    ebx,eax
c0013d2d:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c0013d33:	68 ec b6 02 c0       	push   0xc002b6ec
c0013d38:	50                   	push   eax
c0013d39:	e8 c0 f6 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c0013d3e:	58                   	pop    eax
c0013d3f:	5a                   	pop    edx
c0013d40:	6a 01                	push   0x1
c0013d42:	53                   	push   ebx
c0013d43:	e8 1a f7 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c0013d48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d4b:	e8 70 f7 ff ff       	call   c00134c0 <File::close()>
c0013d50:	83 c4 10             	add    esp,0x10
c0013d53:	85 db                	test   ebx,ebx
c0013d55:	74 0f                	je     c0013d66 <User::loadClockSettings(int)+0x4c>
c0013d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d59:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d5d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d60:	83 c4 08             	add    esp,0x8
c0013d63:	5b                   	pop    ebx
c0013d64:	ff e0                	jmp    eax
c0013d66:	83 c4 08             	add    esp,0x8
c0013d69:	5b                   	pop    ebx
c0013d6a:	c3                   	ret    
c0013d6b:	90                   	nop

c0013d6c <Clock::Clock(char const*)>:
c0013d6c:	83 ec 0c             	sub    esp,0xc
c0013d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d73:	83 ec 08             	sub    esp,0x8
c0013d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d7a:	50                   	push   eax
c0013d7b:	e8 30 07 00 00       	call   c00144b0 <Device::Device(char const*)>
c0013d80:	83 c4 10             	add    esp,0x10
c0013d83:	ba 14 b7 02 c0       	mov    edx,0xc002b714
c0013d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8c:	89 10                	mov    DWORD PTR [eax],edx
c0013d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d92:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d9c:	90                   	nop
c0013d9d:	83 c4 0c             	add    esp,0xc
c0013da0:	c3                   	ret    
c0013da1:	90                   	nop

c0013da2 <Clock::~Clock()>:
c0013da2:	83 ec 0c             	sub    esp,0xc
c0013da5:	ba 14 b7 02 c0       	mov    edx,0xc002b714
c0013daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dae:	89 10                	mov    DWORD PTR [eax],edx
c0013db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db4:	83 ec 0c             	sub    esp,0xc
c0013db7:	50                   	push   eax
c0013db8:	e8 e9 03 00 00       	call   c00141a6 <Device::~Device()>
c0013dbd:	83 c4 10             	add    esp,0x10
c0013dc0:	90                   	nop
c0013dc1:	83 c4 0c             	add    esp,0xc
c0013dc4:	c3                   	ret    
c0013dc5:	90                   	nop

c0013dc6 <Clock::~Clock()>:
c0013dc6:	83 ec 0c             	sub    esp,0xc
c0013dc9:	83 ec 0c             	sub    esp,0xc
c0013dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dd0:	e8 cd ff ff ff       	call   c0013da2 <Clock::~Clock()>
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	83 ec 08             	sub    esp,0x8
c0013ddb:	68 58 01 00 00       	push   0x158
c0013de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013de4:	e8 d6 ef ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	83 c4 0c             	add    esp,0xc
c0013def:	c3                   	ret    

c0013df0 <Clock::timeInSecondsLocal()>:
c0013df0:	53                   	push   ebx
c0013df1:	83 ec 14             	sub    esp,0x14
c0013df4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013df8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dfa:	50                   	push   eax
c0013dfb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013dfe:	0f b6 0d 3c f2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f23c
c0013e05:	03 0d 40 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f240
c0013e0b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e11:	89 cb                	mov    ebx,ecx
c0013e13:	c1 fb 1f             	sar    ebx,0x1f
c0013e16:	01 c8                	add    eax,ecx
c0013e18:	11 da                	adc    edx,ebx
c0013e1a:	83 c4 10             	add    esp,0x10
c0013e1d:	31 c9                	xor    ecx,ecx
c0013e1f:	80 3d 3d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f23d,0x0
c0013e26:	74 05                	je     c0013e2d <Clock::timeInSecondsLocal()+0x3d>
c0013e28:	b9 08 07 00 00       	mov    ecx,0x708
c0013e2d:	31 db                	xor    ebx,ebx
c0013e2f:	01 c8                	add    eax,ecx
c0013e31:	11 da                	adc    edx,ebx
c0013e33:	83 c4 08             	add    esp,0x8
c0013e36:	5b                   	pop    ebx
c0013e37:	c3                   	ret    

c0013e38 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e38:	57                   	push   edi
c0013e39:	56                   	push   esi
c0013e3a:	53                   	push   ebx
c0013e3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e43:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e49:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e4c:	0f b6 05 3c f2 02 c0 	movzx  eax,BYTE PTR ds:0xc002f23c
c0013e53:	03 05 40 f2 02 c0    	add    eax,DWORD PTR ds:0xc002f240
c0013e59:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e5f:	99                   	cdq    
c0013e60:	29 c6                	sub    esi,eax
c0013e62:	19 d7                	sbb    edi,edx
c0013e64:	89 f0                	mov    eax,esi
c0013e66:	89 fa                	mov    edx,edi
c0013e68:	31 f6                	xor    esi,esi
c0013e6a:	80 3d 3d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f23d,0x0
c0013e71:	74 05                	je     c0013e78 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e73:	be 08 07 00 00       	mov    esi,0x708
c0013e78:	31 ff                	xor    edi,edi
c0013e7a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e7e:	29 f0                	sub    eax,esi
c0013e80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e84:	19 fa                	sbb    edx,edi
c0013e86:	89 d8                	mov    eax,ebx
c0013e88:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e8c:	5b                   	pop    ebx
c0013e8d:	5e                   	pop    esi
c0013e8e:	5f                   	pop    edi
c0013e8f:	ff e0                	jmp    eax

c0013e91 <datetimeToSeconds(datetime_t)>:
c0013e91:	55                   	push   ebp
c0013e92:	57                   	push   edi
c0013e93:	56                   	push   esi
c0013e94:	53                   	push   ebx
c0013e95:	83 ec 14             	sub    esp,0x14
c0013e98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e9c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ea0:	89 d3                	mov    ebx,edx
c0013ea2:	0f b6 c6             	movzx  eax,dh
c0013ea5:	c1 eb 10             	shr    ebx,0x10
c0013ea8:	48                   	dec    eax
c0013ea9:	66 81 eb 6c 07       	sub    bx,0x76c
c0013eae:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013eb2:	0f b6 f5             	movzx  esi,ch
c0013eb5:	89 cf                	mov    edi,ecx
c0013eb7:	6b f6 3c             	imul   esi,esi,0x3c
c0013eba:	c1 ef 10             	shr    edi,0x10
c0013ebd:	0f b6 c9             	movzx  ecx,cl
c0013ec0:	89 f8                	mov    eax,edi
c0013ec2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ec8:	0f b6 f8             	movzx  edi,al
c0013ecb:	0f b6 d2             	movzx  edx,dl
c0013ece:	01 fe                	add    esi,edi
c0013ed0:	01 f1                	add    ecx,esi
c0013ed2:	0f b7 f3             	movzx  esi,bx
c0013ed5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ed9:	c1 f9 1f             	sar    ecx,0x1f
c0013edc:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ee1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ee5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013eea:	8b 0c 8d 60 b7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd48a0]
c0013ef1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ef5:	76 29                	jbe    c0013f20 <datetimeToSeconds(datetime_t)+0x8f>
c0013ef7:	f6 c3 03             	test   bl,0x3
c0013efa:	75 24                	jne    c0013f20 <datetimeToSeconds(datetime_t)+0x8f>
c0013efc:	31 d2                	xor    edx,edx
c0013efe:	bf 64 00 00 00       	mov    edi,0x64
c0013f03:	89 d8                	mov    eax,ebx
c0013f05:	66 f7 f7             	div    di
c0013f08:	66 85 d2             	test   dx,dx
c0013f0b:	75 12                	jne    c0013f1f <datetimeToSeconds(datetime_t)+0x8e>
c0013f0d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f13:	bf 90 01 00 00       	mov    edi,0x190
c0013f18:	99                   	cdq    
c0013f19:	f7 ff                	idiv   edi
c0013f1b:	85 d2                	test   edx,edx
c0013f1d:	75 01                	jne    c0013f20 <datetimeToSeconds(datetime_t)+0x8f>
c0013f1f:	41                   	inc    ecx
c0013f20:	66 83 fb 46          	cmp    bx,0x46
c0013f24:	76 45                	jbe    c0013f6b <datetimeToSeconds(datetime_t)+0xda>
c0013f26:	bb 46 00 00 00       	mov    ebx,0x46
c0013f2b:	bf 64 00 00 00       	mov    edi,0x64
c0013f30:	bd 90 01 00 00       	mov    ebp,0x190
c0013f35:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f3a:	f6 c3 03             	test   bl,0x3
c0013f3d:	75 23                	jne    c0013f62 <datetimeToSeconds(datetime_t)+0xd1>
c0013f3f:	89 d8                	mov    eax,ebx
c0013f41:	99                   	cdq    
c0013f42:	f7 ff                	idiv   edi
c0013f44:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f49:	85 d2                	test   edx,edx
c0013f4b:	75 15                	jne    c0013f62 <datetimeToSeconds(datetime_t)+0xd1>
c0013f4d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f53:	99                   	cdq    
c0013f54:	f7 fd                	idiv   ebp
c0013f56:	83 fa 01             	cmp    edx,0x1
c0013f59:	19 c0                	sbb    eax,eax
c0013f5b:	f7 d0                	not    eax
c0013f5d:	05 6e 01 00 00       	add    eax,0x16e
c0013f62:	01 c1                	add    ecx,eax
c0013f64:	43                   	inc    ebx
c0013f65:	39 f3                	cmp    ebx,esi
c0013f67:	7c cc                	jl     c0013f35 <datetimeToSeconds(datetime_t)+0xa4>
c0013f69:	eb 35                	jmp    c0013fa0 <datetimeToSeconds(datetime_t)+0x10f>
c0013f6b:	74 33                	je     c0013fa0 <datetimeToSeconds(datetime_t)+0x10f>
c0013f6d:	b8 45 00 00 00       	mov    eax,0x45
c0013f72:	89 c2                	mov    edx,eax
c0013f74:	83 e2 03             	and    edx,0x3
c0013f77:	39 f0                	cmp    eax,esi
c0013f79:	7e 0f                	jle    c0013f8a <datetimeToSeconds(datetime_t)+0xf9>
c0013f7b:	83 fa 01             	cmp    edx,0x1
c0013f7e:	19 d2                	sbb    edx,edx
c0013f80:	48                   	dec    eax
c0013f81:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f88:	eb e8                	jmp    c0013f72 <datetimeToSeconds(datetime_t)+0xe1>
c0013f8a:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f8f:	85 d2                	test   edx,edx
c0013f91:	75 0b                	jne    c0013f9e <datetimeToSeconds(datetime_t)+0x10d>
c0013f93:	66 83 fb 01          	cmp    bx,0x1
c0013f97:	19 c0                	sbb    eax,eax
c0013f99:	05 6e 01 00 00       	add    eax,0x16e
c0013f9e:	29 c1                	sub    ecx,eax
c0013fa0:	b8 80 51 01 00       	mov    eax,0x15180
c0013fa5:	f7 e9                	imul   ecx
c0013fa7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fab:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013faf:	83 c4 14             	add    esp,0x14
c0013fb2:	5b                   	pop    ebx
c0013fb3:	5e                   	pop    esi
c0013fb4:	5f                   	pop    edi
c0013fb5:	5d                   	pop    ebp
c0013fb6:	c3                   	ret    
c0013fb7:	90                   	nop

c0013fb8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fb8:	57                   	push   edi
c0013fb9:	56                   	push   esi
c0013fba:	53                   	push   ebx
c0013fbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fbf:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fc1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013fc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fcc:	e8 c0 fe ff ff       	call   c0013e91 <datetimeToSeconds(datetime_t)>
c0013fd1:	59                   	pop    ecx
c0013fd2:	0f b6 0d 3c f2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f23c
c0013fd9:	5b                   	pop    ebx
c0013fda:	03 0d 40 f2 02 c0    	add    ecx,DWORD PTR ds:0xc002f240
c0013fe0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fe6:	89 cb                	mov    ebx,ecx
c0013fe8:	c1 fb 1f             	sar    ebx,0x1f
c0013feb:	29 c8                	sub    eax,ecx
c0013fed:	19 da                	sbb    edx,ebx
c0013fef:	31 c9                	xor    ecx,ecx
c0013ff1:	80 3d 3d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f23d,0x0
c0013ff8:	74 05                	je     c0013fff <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013ffa:	b9 08 07 00 00       	mov    ecx,0x708
c0013fff:	31 db                	xor    ebx,ebx
c0014001:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014005:	29 c8                	sub    eax,ecx
c0014007:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001400b:	19 da                	sbb    edx,ebx
c001400d:	89 f8                	mov    eax,edi
c001400f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014013:	5b                   	pop    ebx
c0014014:	5e                   	pop    esi
c0014015:	5f                   	pop    edi
c0014016:	ff e0                	jmp    eax

c0014018 <secondsToDatetime(unsigned long long)>:
c0014018:	55                   	push   ebp
c0014019:	57                   	push   edi
c001401a:	56                   	push   esi
c001401b:	53                   	push   ebx
c001401c:	83 ec 1c             	sub    esp,0x1c
c001401f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014023:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014027:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001402b:	6a 00                	push   0x0
c001402d:	68 80 51 01 00       	push   0x15180
c0014032:	55                   	push   ebp
c0014033:	57                   	push   edi
c0014034:	e8 5b 33 01 00       	call   c0027394 <__udivdi3>
c0014039:	83 c4 10             	add    esp,0x10
c001403c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014042:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014046:	6a 00                	push   0x0
c0014048:	68 80 51 01 00       	push   0x15180
c001404d:	55                   	push   ebp
c001404e:	57                   	push   edi
c001404f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014054:	e8 3b 34 01 00       	call   c0027494 <__umoddi3>
c0014059:	83 c4 10             	add    esp,0x10
c001405c:	99                   	cdq    
c001405d:	f7 ff                	idiv   edi
c001405f:	bf 3c 00 00 00       	mov    edi,0x3c
c0014064:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014067:	89 d0                	mov    eax,edx
c0014069:	99                   	cdq    
c001406a:	f7 ff                	idiv   edi
c001406c:	85 db                	test   ebx,ebx
c001406e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014071:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014074:	79 11                	jns    c0014087 <secondsToDatetime(unsigned long long)+0x6f>
c0014076:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001407a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014080:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014085:	eb 07                	jmp    c001408e <secondsToDatetime(unsigned long long)+0x76>
c0014087:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001408c:	89 d8                	mov    eax,ebx
c001408e:	bf b4 05 00 00       	mov    edi,0x5b4
c0014093:	99                   	cdq    
c0014094:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014099:	f7 f9                	idiv   ecx
c001409b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140a4:	31 d2                	xor    edx,edx
c00140a6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140ae:	01 c3                	add    ebx,eax
c00140b0:	89 d8                	mov    eax,ebx
c00140b2:	f7 f1                	div    ecx
c00140b4:	31 d2                	xor    edx,edx
c00140b6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140b9:	89 d8                	mov    eax,ebx
c00140bb:	f7 f7                	div    edi
c00140bd:	31 d2                	xor    edx,edx
c00140bf:	29 c1                	sub    ecx,eax
c00140c1:	89 d8                	mov    eax,ebx
c00140c3:	f7 f5                	div    ebp
c00140c5:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140ca:	29 c1                	sub    ecx,eax
c00140cc:	31 d2                	xor    edx,edx
c00140ce:	89 c8                	mov    eax,ecx
c00140d0:	f7 f5                	div    ebp
c00140d2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140db:	31 d2                	xor    edx,edx
c00140dd:	89 c8                	mov    eax,ecx
c00140df:	f7 f5                	div    ebp
c00140e1:	31 d2                	xor    edx,edx
c00140e3:	01 c3                	add    ebx,eax
c00140e5:	89 c8                	mov    eax,ecx
c00140e7:	f7 f7                	div    edi
c00140e9:	bf 99 00 00 00       	mov    edi,0x99
c00140ee:	29 c3                	sub    ebx,eax
c00140f0:	31 d2                	xor    edx,edx
c00140f2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140fa:	29 c3                	sub    ebx,eax
c00140fc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140ff:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014102:	bb 05 00 00 00       	mov    ebx,0x5
c0014107:	83 c1 02             	add    ecx,0x2
c001410a:	89 c8                	mov    eax,ecx
c001410c:	f7 f7                	div    edi
c001410e:	31 d2                	xor    edx,edx
c0014110:	89 c7                	mov    edi,eax
c0014112:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014118:	83 c0 02             	add    eax,0x2
c001411b:	f7 f3                	div    ebx
c001411d:	89 eb                	mov    ebx,ebp
c001411f:	29 c3                	sub    ebx,eax
c0014121:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014127:	88 1e                	mov    BYTE PTR [esi],bl
c0014129:	19 c0                	sbb    eax,eax
c001412b:	31 d2                	xor    edx,edx
c001412d:	83 e0 0c             	and    eax,0xc
c0014130:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014134:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001413c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014140:	83 f9 01             	cmp    ecx,0x1
c0014143:	0f 96 c2             	setbe  dl
c0014146:	41                   	inc    ecx
c0014147:	01 d0                	add    eax,edx
c0014149:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001414c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014150:	83 c4 1c             	add    esp,0x1c
c0014153:	89 f0                	mov    eax,esi
c0014155:	5b                   	pop    ebx
c0014156:	5e                   	pop    esi
c0014157:	5f                   	pop    edi
c0014158:	5d                   	pop    ebp
c0014159:	c2 04 00             	ret    0x4

c001415c <Clock::timeInDatetimeLocal()>:
c001415c:	53                   	push   ebx
c001415d:	83 ec 14             	sub    esp,0x14
c0014160:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014164:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014168:	e8 83 fc ff ff       	call   c0013df0 <Clock::timeInSecondsLocal()>
c001416d:	83 c4 0c             	add    esp,0xc
c0014170:	52                   	push   edx
c0014171:	50                   	push   eax
c0014172:	53                   	push   ebx
c0014173:	e8 a0 fe ff ff       	call   c0014018 <secondsToDatetime(unsigned long long)>
c0014178:	89 d8                	mov    eax,ebx
c001417a:	83 c4 14             	add    esp,0x14
c001417d:	5b                   	pop    ebx
c001417e:	c2 04 00             	ret    0x4
c0014181:	90                   	nop

c0014182 <Device::hibernate()>:
c0014182:	c3                   	ret    
c0014183:	90                   	nop

c0014184 <Device::wake()>:
c0014184:	c3                   	ret    
c0014185:	90                   	nop

c0014186 <Device::detect()>:
c0014186:	c3                   	ret    
c0014187:	90                   	nop

c0014188 <Device::disableLegacy()>:
c0014188:	c3                   	ret    
c0014189:	90                   	nop

c001418a <Device::powerSaving(PowerSavingLevel)>:
c001418a:	c3                   	ret    
c001418b:	90                   	nop

c001418c <DriverlessDevice::close(int, int, void*)>:
c001418c:	31 c0                	xor    eax,eax
c001418e:	c3                   	ret    
c001418f:	90                   	nop

c0014190 <DriverlessDevice::detect()>:
c0014190:	c3                   	ret    
c0014191:	90                   	nop

c0014192 <DriverlessDevice::open(int, int, void*)>:
c0014192:	83 ec 18             	sub    esp,0x18
c0014195:	68 90 b7 02 c0       	push   0xc002b790
c001419a:	e8 e8 66 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001419f:	83 c8 ff             	or     eax,0xffffffff
c00141a2:	83 c4 1c             	add    esp,0x1c
c00141a5:	c3                   	ret    

c00141a6 <Device::~Device()>:
c00141a6:	ba b8 b7 02 c0       	mov    edx,0xc002b7b8
c00141ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141af:	89 10                	mov    DWORD PTR [eax],edx
c00141b1:	90                   	nop
c00141b2:	c3                   	ret    
c00141b3:	90                   	nop

c00141b4 <Device::~Device()>:
c00141b4:	83 ec 0c             	sub    esp,0xc
c00141b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141bb:	e8 e6 ff ff ff       	call   c00141a6 <Device::~Device()>
c00141c0:	83 c4 04             	add    esp,0x4
c00141c3:	83 ec 08             	sub    esp,0x8
c00141c6:	68 58 01 00 00       	push   0x158
c00141cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141cf:	e8 eb eb ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c00141d4:	83 c4 10             	add    esp,0x10
c00141d7:	83 c4 0c             	add    esp,0xc
c00141da:	c3                   	ret    
c00141db:	90                   	nop

c00141dc <Device::findAndLoadDriver()>:
c00141dc:	c3                   	ret    
c00141dd:	90                   	nop

c00141de <Device::preOpenPCI(PCIDeviceInfo)>:
c00141de:	57                   	push   edi
c00141df:	b9 09 00 00 00       	mov    ecx,0x9
c00141e4:	56                   	push   esi
c00141e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141e9:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141ed:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141f7:	81 c7 18 01 00 00    	add    edi,0x118
c00141fd:	fc                   	cld    
c00141fe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014200:	5e                   	pop    esi
c0014201:	5f                   	pop    edi
c0014202:	c3                   	ret    
c0014203:	90                   	nop

c0014204 <Device::preOpenACPI(void*, char*, char*)>:
c0014204:	57                   	push   edi
c0014205:	b9 1e 00 00 00       	mov    ecx,0x1e
c001420a:	56                   	push   esi
c001420b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001420f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014213:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001421d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0014223:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0014229:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001422d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001422f:	b9 0e 00 00 00       	mov    ecx,0xe
c0014234:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001423a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001423e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014240:	5e                   	pop    esi
c0014241:	5f                   	pop    edi
c0014242:	c3                   	ret    
c0014243:	90                   	nop

c0014244 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014248:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001424d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014254:	75 0b                	jne    c0014261 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014256:	8b 00                	mov    eax,DWORD PTR [eax]
c0014258:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001425c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001425f:	eb 1e                	jmp    c001427f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014261:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0014266:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001426c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014272:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014274:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014278:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001427c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001427f:	ff e0                	jmp    eax
c0014281:	90                   	nop

c0014282 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014286:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001428b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014292:	75 0b                	jne    c001429f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014294:	8b 00                	mov    eax,DWORD PTR [eax]
c0014296:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001429a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001429d:	eb 1e                	jmp    c00142bd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001429f:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00142a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142aa:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142b0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142b2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142ba:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142bd:	ff e0                	jmp    eax
c00142bf:	90                   	nop

c00142c0 <Device::addChild(Device*)>:
c00142c0:	53                   	push   ebx
c00142c1:	83 ec 08             	sub    esp,0x8
c00142c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142cc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00142d2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00142d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00142da:	85 d2                	test   edx,edx
c00142dc:	74 04                	je     c00142e2 <Device::addChild(Device*)+0x22>
c00142de:	89 d3                	mov    ebx,edx
c00142e0:	eb f6                	jmp    c00142d8 <Device::addChild(Device*)+0x18>
c00142e2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142e5:	83 ec 0c             	sub    esp,0xc
c00142e8:	6a 08                	push   0x8
c00142ea:	e8 05 b6 ff ff       	call   c000f8f4 <malloc>
c00142ef:	89 03                	mov    DWORD PTR [ebx],eax
c00142f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142fe:	83 c4 18             	add    esp,0x18
c0014301:	5b                   	pop    ebx
c0014302:	c3                   	ret    
c0014303:	90                   	nop

c0014304 <Device::removeAllChildren()>:
c0014304:	56                   	push   esi
c0014305:	53                   	push   ebx
c0014306:	52                   	push   edx
c0014307:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001430b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014311:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014314:	74 17                	je     c001432d <Device::removeAllChildren()+0x29>
c0014316:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014319:	85 c0                	test   eax,eax
c001431b:	74 0c                	je     c0014329 <Device::removeAllChildren()+0x25>
c001431d:	83 ec 0c             	sub    esp,0xc
c0014320:	8b 10                	mov    edx,DWORD PTR [eax]
c0014322:	50                   	push   eax
c0014323:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014326:	83 c4 10             	add    esp,0x10
c0014329:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001432b:	eb e4                	jmp    c0014311 <Device::removeAllChildren()+0xd>
c001432d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014333:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014339:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001433f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014346:	58                   	pop    eax
c0014347:	5b                   	pop    ebx
c0014348:	5e                   	pop    esi
c0014349:	c3                   	ret    

c001434a <Device::hibernateAll()>:
c001434a:	53                   	push   ebx
c001434b:	83 ec 14             	sub    esp,0x14
c001434e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014352:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014354:	53                   	push   ebx
c0014355:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014358:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001435e:	83 c4 10             	add    esp,0x10
c0014361:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014364:	74 0f                	je     c0014375 <Device::hibernateAll()+0x2b>
c0014366:	83 ec 0c             	sub    esp,0xc
c0014369:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001436c:	e8 d9 ff ff ff       	call   c001434a <Device::hibernateAll()>
c0014371:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014373:	eb e9                	jmp    c001435e <Device::hibernateAll()+0x14>
c0014375:	83 c4 08             	add    esp,0x8
c0014378:	5b                   	pop    ebx
c0014379:	c3                   	ret    

c001437a <Device::wakeAll()>:
c001437a:	53                   	push   ebx
c001437b:	83 ec 14             	sub    esp,0x14
c001437e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014382:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014384:	53                   	push   ebx
c0014385:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014388:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001438e:	83 c4 10             	add    esp,0x10
c0014391:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014394:	74 0f                	je     c00143a5 <Device::wakeAll()+0x2b>
c0014396:	83 ec 0c             	sub    esp,0xc
c0014399:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001439c:	e8 d9 ff ff ff       	call   c001437a <Device::wakeAll()>
c00143a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143a3:	eb e9                	jmp    c001438e <Device::wakeAll()+0x14>
c00143a5:	83 c4 08             	add    esp,0x8
c00143a8:	5b                   	pop    ebx
c00143a9:	c3                   	ret    

c00143aa <Device::detectAll()>:
c00143aa:	53                   	push   ebx
c00143ab:	83 ec 14             	sub    esp,0x14
c00143ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b4:	53                   	push   ebx
c00143b5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143be:	83 c4 10             	add    esp,0x10
c00143c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143c4:	74 0f                	je     c00143d5 <Device::detectAll()+0x2b>
c00143c6:	83 ec 0c             	sub    esp,0xc
c00143c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143cc:	e8 d9 ff ff ff       	call   c00143aa <Device::detectAll()>
c00143d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143d3:	eb e9                	jmp    c00143be <Device::detectAll()+0x14>
c00143d5:	83 c4 08             	add    esp,0x8
c00143d8:	5b                   	pop    ebx
c00143d9:	c3                   	ret    

c00143da <Device::disableLegacyAll()>:
c00143da:	53                   	push   ebx
c00143db:	83 ec 14             	sub    esp,0x14
c00143de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e4:	53                   	push   ebx
c00143e5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143ee:	83 c4 10             	add    esp,0x10
c00143f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143f4:	74 0f                	je     c0014405 <Device::disableLegacyAll()+0x2b>
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143fc:	e8 d9 ff ff ff       	call   c00143da <Device::disableLegacyAll()>
c0014401:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014403:	eb e9                	jmp    c00143ee <Device::disableLegacyAll()+0x14>
c0014405:	83 c4 08             	add    esp,0x8
c0014408:	5b                   	pop    ebx
c0014409:	c3                   	ret    

c001440a <Device::loadDriversForAll()>:
c001440a:	53                   	push   ebx
c001440b:	83 ec 08             	sub    esp,0x8
c001440e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014412:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014418:	8b 18                	mov    ebx,DWORD PTR [eax]
c001441a:	85 db                	test   ebx,ebx
c001441c:	74 12                	je     c0014430 <Device::loadDriversForAll()+0x26>
c001441e:	83 ec 0c             	sub    esp,0xc
c0014421:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014424:	e8 e1 ff ff ff       	call   c001440a <Device::loadDriversForAll()>
c0014429:	83 c4 10             	add    esp,0x10
c001442c:	89 d8                	mov    eax,ebx
c001442e:	eb e8                	jmp    c0014418 <Device::loadDriversForAll()+0xe>
c0014430:	83 c4 08             	add    esp,0x8
c0014433:	5b                   	pop    ebx
c0014434:	c3                   	ret    
c0014435:	90                   	nop

c0014436 <Device::closeAll()>:
c0014436:	53                   	push   ebx
c0014437:	83 ec 08             	sub    esp,0x8
c001443a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001443e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014440:	6a 00                	push   0x0
c0014442:	6a 00                	push   0x0
c0014444:	6a 00                	push   0x0
c0014446:	53                   	push   ebx
c0014447:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001444a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014450:	83 c4 10             	add    esp,0x10
c0014453:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014456:	74 0f                	je     c0014467 <Device::closeAll()+0x31>
c0014458:	83 ec 0c             	sub    esp,0xc
c001445b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001445e:	e8 d3 ff ff ff       	call   c0014436 <Device::closeAll()>
c0014463:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014465:	eb e9                	jmp    c0014450 <Device::closeAll()+0x1a>
c0014467:	83 c4 08             	add    esp,0x8
c001446a:	5b                   	pop    ebx
c001446b:	c3                   	ret    

c001446c <Device::powerSavingAll(PowerSavingLevel)>:
c001446c:	56                   	push   esi
c001446d:	53                   	push   ebx
c001446e:	83 ec 0c             	sub    esp,0xc
c0014471:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014475:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014479:	8b 03                	mov    eax,DWORD PTR [ebx]
c001447b:	56                   	push   esi
c001447c:	53                   	push   ebx
c001447d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014480:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014486:	83 c4 10             	add    esp,0x10
c0014489:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001448c:	74 0f                	je     c001449d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001448e:	52                   	push   edx
c001448f:	52                   	push   edx
c0014490:	56                   	push   esi
c0014491:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014494:	e8 d3 ff ff ff       	call   c001446c <Device::powerSavingAll(PowerSavingLevel)>
c0014499:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001449b:	eb e9                	jmp    c0014486 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001449d:	58                   	pop    eax
c001449e:	5b                   	pop    ebx
c001449f:	5e                   	pop    esi
c00144a0:	c3                   	ret    
c00144a1:	90                   	nop

c00144a2 <Device::setName(char const*)>:
c00144a2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144aa:	e9 79 c3 fe ff       	jmp    c0000828 <strcpy>
c00144af:	90                   	nop

c00144b0 <Device::Device(char const*)>:
c00144b0:	83 ec 1c             	sub    esp,0x1c
c00144b3:	ba b8 b7 02 c0       	mov    edx,0xc002b7b8
c00144b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bc:	89 10                	mov    DWORD PTR [eax],edx
c00144be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144de:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ec:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144f6:	83 ec 08             	sub    esp,0x8
c00144f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014501:	e8 9c ff ff ff       	call   c00144a2 <Device::setName(char const*)>
c0014506:	83 c4 10             	add    esp,0x10
c0014509:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014511:	83 ec 0c             	sub    esp,0xc
c0014514:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014518:	e8 d7 b3 ff ff       	call   c000f8f4 <malloc>
c001451d:	83 c4 10             	add    esp,0x10
c0014520:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014526:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001452d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014531:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014541:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014551:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014567:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001456e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014572:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001457c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014580:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001458a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00145a6:	90                   	nop
c00145a7:	83 c4 1c             	add    esp,0x1c
c00145aa:	c3                   	ret    
c00145ab:	90                   	nop

c00145ac <Device::getName()>:
c00145ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145b0:	05 d0 00 00 00       	add    eax,0xd0
c00145b5:	c3                   	ret    

c00145b6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145b6:	83 ec 0c             	sub    esp,0xc
c00145b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145bd:	83 ec 08             	sub    esp,0x8
c00145c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145c4:	50                   	push   eax
c00145c5:	e8 e6 fe ff ff       	call   c00144b0 <Device::Device(char const*)>
c00145ca:	83 c4 10             	add    esp,0x10
c00145cd:	ba e4 b7 02 c0       	mov    edx,0xc002b7e4
c00145d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d6:	89 10                	mov    DWORD PTR [eax],edx
c00145d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145dc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145e6:	90                   	nop
c00145e7:	83 c4 0c             	add    esp,0xc
c00145ea:	c3                   	ret    
c00145eb:	90                   	nop

c00145ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145ec:	57                   	push   edi
c00145ed:	56                   	push   esi
c00145ee:	53                   	push   ebx
c00145ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145fb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014601:	75 0c                	jne    c001460f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014603:	52                   	push   edx
c0014604:	52                   	push   edx
c0014605:	53                   	push   ebx
c0014606:	56                   	push   esi
c0014607:	e8 da 4c 01 00       	call   c00292e6 <LinkedList<Device>::addElement(Device*)>
c001460c:	83 c4 10             	add    esp,0x10
c001460f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014615:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014618:	74 12                	je     c001462c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001461a:	50                   	push   eax
c001461b:	57                   	push   edi
c001461c:	56                   	push   esi
c001461d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014620:	e8 c7 ff ff ff       	call   c00145ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014625:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014627:	83 c4 10             	add    esp,0x10
c001462a:	eb e9                	jmp    c0014615 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001462c:	5b                   	pop    ebx
c001462d:	5e                   	pop    esi
c001462e:	5f                   	pop    edi
c001462f:	c3                   	ret    

c0014630 <getDevicesOfType(DeviceType)>:
c0014630:	53                   	push   ebx
c0014631:	83 ec 14             	sub    esp,0x14
c0014634:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014638:	53                   	push   ebx
c0014639:	e8 84 4d 01 00       	call   c00293c2 <LinkedList<Device>::LinkedList()>
c001463e:	83 c4 0c             	add    esp,0xc
c0014641:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014645:	53                   	push   ebx
c0014646:	ff 35 a8 f0 02 c0    	push   DWORD PTR ds:0xc002f0a8
c001464c:	e8 9b ff ff ff       	call   c00145ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014651:	89 d8                	mov    eax,ebx
c0014653:	83 c4 18             	add    esp,0x18
c0014656:	5b                   	pop    ebx
c0014657:	c2 04 00             	ret    0x4

c001465a <HardDiskController::HardDiskController(char const*)>:
c001465a:	83 ec 0c             	sub    esp,0xc
c001465d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014661:	83 ec 08             	sub    esp,0x8
c0014664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014668:	50                   	push   eax
c0014669:	e8 42 fe ff ff       	call   c00144b0 <Device::Device(char const*)>
c001466e:	83 c4 10             	add    esp,0x10
c0014671:	ba 10 b8 02 c0       	mov    edx,0xc002b810
c0014676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467a:	89 10                	mov    DWORD PTR [eax],edx
c001467c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014680:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001468a:	90                   	nop
c001468b:	83 c4 0c             	add    esp,0xc
c001468e:	c3                   	ret    
c001468f:	90                   	nop

c0014690 <HardDiskController::~HardDiskController()>:
c0014690:	83 ec 0c             	sub    esp,0xc
c0014693:	ba 10 b8 02 c0       	mov    edx,0xc002b810
c0014698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001469c:	89 10                	mov    DWORD PTR [eax],edx
c001469e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a2:	83 ec 0c             	sub    esp,0xc
c00146a5:	50                   	push   eax
c00146a6:	e8 fb fa ff ff       	call   c00141a6 <Device::~Device()>
c00146ab:	83 c4 10             	add    esp,0x10
c00146ae:	90                   	nop
c00146af:	83 c4 0c             	add    esp,0xc
c00146b2:	c3                   	ret    
c00146b3:	90                   	nop

c00146b4 <HardDiskController::~HardDiskController()>:
c00146b4:	83 ec 0c             	sub    esp,0xc
c00146b7:	83 ec 0c             	sub    esp,0xc
c00146ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146be:	e8 cd ff ff ff       	call   c0014690 <HardDiskController::~HardDiskController()>
c00146c3:	83 c4 10             	add    esp,0x10
c00146c6:	83 ec 08             	sub    esp,0x8
c00146c9:	68 58 01 00 00       	push   0x158
c00146ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146d2:	e8 e8 e6 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	83 c4 0c             	add    esp,0xc
c00146dd:	c3                   	ret    

c00146de <PhysicalDisk::eject()>:
c00146de:	83 ec 18             	sub    esp,0x18
c00146e1:	68 34 b8 02 c0       	push   0xc002b834
c00146e6:	e8 b4 e7 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00146eb:	83 c8 ff             	or     eax,0xffffffff
c00146ee:	83 c4 1c             	add    esp,0x1c
c00146f1:	c3                   	ret    

c00146f2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146f2:	83 ec 0c             	sub    esp,0xc
c00146f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f9:	83 ec 08             	sub    esp,0x8
c00146fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014700:	50                   	push   eax
c0014701:	e8 aa fd ff ff       	call   c00144b0 <Device::Device(char const*)>
c0014706:	83 c4 10             	add    esp,0x10
c0014709:	ba 64 b8 02 c0       	mov    edx,0xc002b864
c001470e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014712:	89 10                	mov    DWORD PTR [eax],edx
c0014714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014718:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001471f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014723:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001472a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014740:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014754:	90                   	nop
c0014755:	83 c4 0c             	add    esp,0xc
c0014758:	c3                   	ret    
c0014759:	90                   	nop

c001475a <PhysicalDisk::startCache()>:
c001475a:	56                   	push   esi
c001475b:	53                   	push   ebx
c001475c:	83 ec 10             	sub    esp,0x10
c001475f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014763:	6a 44                	push   0x44
c0014765:	e8 8a b1 ff ff       	call   c000f8f4 <malloc>
c001476a:	89 c6                	mov    esi,eax
c001476c:	58                   	pop    eax
c001476d:	5a                   	pop    edx
c001476e:	53                   	push   ebx
c001476f:	56                   	push   esi
c0014770:	e8 cf 28 00 00       	call   c0017044 <VCache::VCache(PhysicalDisk*)>
c0014775:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001477b:	83 c4 14             	add    esp,0x14
c001477e:	5b                   	pop    ebx
c001477f:	5e                   	pop    esi
c0014780:	c3                   	ret    
c0014781:	90                   	nop

c0014782 <PhysicalDisk::~PhysicalDisk()>:
c0014782:	83 ec 0c             	sub    esp,0xc
c0014785:	ba 64 b8 02 c0       	mov    edx,0xc002b864
c001478a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478e:	89 10                	mov    DWORD PTR [eax],edx
c0014790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014794:	83 ec 0c             	sub    esp,0xc
c0014797:	50                   	push   eax
c0014798:	e8 09 fa ff ff       	call   c00141a6 <Device::~Device()>
c001479d:	83 c4 10             	add    esp,0x10
c00147a0:	90                   	nop
c00147a1:	83 c4 0c             	add    esp,0xc
c00147a4:	c3                   	ret    
c00147a5:	90                   	nop

c00147a6 <PhysicalDisk::~PhysicalDisk()>:
c00147a6:	83 ec 0c             	sub    esp,0xc
c00147a9:	83 ec 0c             	sub    esp,0xc
c00147ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147b0:	e8 cd ff ff ff       	call   c0014782 <PhysicalDisk::~PhysicalDisk()>
c00147b5:	83 c4 10             	add    esp,0x10
c00147b8:	83 ec 08             	sub    esp,0x8
c00147bb:	68 6c 01 00 00       	push   0x16c
c00147c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147c4:	e8 f6 e5 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c00147c9:	83 c4 10             	add    esp,0x10
c00147cc:	83 c4 0c             	add    esp,0xc
c00147cf:	c3                   	ret    

c00147d0 <FPU::FPU(char const*)>:
c00147d0:	83 ec 0c             	sub    esp,0xc
c00147d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d7:	83 ec 08             	sub    esp,0x8
c00147da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147de:	50                   	push   eax
c00147df:	e8 cc fc ff ff       	call   c00144b0 <Device::Device(char const*)>
c00147e4:	83 c4 10             	add    esp,0x10
c00147e7:	ba a8 b8 02 c0       	mov    edx,0xc002b8a8
c00147ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f0:	89 10                	mov    DWORD PTR [eax],edx
c00147f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014800:	90                   	nop
c0014801:	83 c4 0c             	add    esp,0xc
c0014804:	c3                   	ret    
c0014805:	90                   	nop

c0014806 <FPU::~FPU()>:
c0014806:	83 ec 0c             	sub    esp,0xc
c0014809:	ba a8 b8 02 c0       	mov    edx,0xc002b8a8
c001480e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014812:	89 10                	mov    DWORD PTR [eax],edx
c0014814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014818:	83 ec 0c             	sub    esp,0xc
c001481b:	50                   	push   eax
c001481c:	e8 85 f9 ff ff       	call   c00141a6 <Device::~Device()>
c0014821:	83 c4 10             	add    esp,0x10
c0014824:	90                   	nop
c0014825:	83 c4 0c             	add    esp,0xc
c0014828:	c3                   	ret    
c0014829:	90                   	nop

c001482a <FPU::~FPU()>:
c001482a:	83 ec 0c             	sub    esp,0xc
c001482d:	83 ec 0c             	sub    esp,0xc
c0014830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014834:	e8 cd ff ff ff       	call   c0014806 <FPU::~FPU()>
c0014839:	83 c4 10             	add    esp,0x10
c001483c:	83 ec 08             	sub    esp,0x8
c001483f:	68 58 01 00 00       	push   0x158
c0014844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014848:	e8 72 e5 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c001484d:	83 c4 10             	add    esp,0x10
c0014850:	83 c4 0c             	add    esp,0xc
c0014853:	c3                   	ret    

c0014854 <setupFPU()>:
c0014854:	53                   	push   ebx
c0014855:	83 ec 08             	sub    esp,0x8
c0014858:	8b 15 a8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0a8
c001485e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014865:	74 19                	je     c0014880 <setupFPU()+0x2c>
c0014867:	83 ec 0c             	sub    esp,0xc
c001486a:	68 58 01 00 00       	push   0x158
c001486f:	e8 80 b0 ff ff       	call   c000f8f4 <malloc>
c0014874:	89 c3                	mov    ebx,eax
c0014876:	89 04 24             	mov    DWORD PTR [esp],eax
c0014879:	e8 94 16 01 00       	call   c0025f12 <AVX::AVX()>
c001487e:	eb 5b                	jmp    c00148db <setupFPU()+0x87>
c0014880:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014886:	84 c0                	test   al,al
c0014888:	79 19                	jns    c00148a3 <setupFPU()+0x4f>
c001488a:	83 ec 0c             	sub    esp,0xc
c001488d:	68 58 01 00 00       	push   0x158
c0014892:	e8 5d b0 ff ff       	call   c000f8f4 <malloc>
c0014897:	89 c3                	mov    ebx,eax
c0014899:	89 04 24             	mov    DWORD PTR [esp],eax
c001489c:	e8 97 17 01 00       	call   c0026038 <SSE::SSE()>
c00148a1:	eb 38                	jmp    c00148db <setupFPU()+0x87>
c00148a3:	a8 20                	test   al,0x20
c00148a5:	74 19                	je     c00148c0 <setupFPU()+0x6c>
c00148a7:	83 ec 0c             	sub    esp,0xc
c00148aa:	68 58 01 00 00       	push   0x158
c00148af:	e8 40 b0 ff ff       	call   c000f8f4 <malloc>
c00148b4:	89 c3                	mov    ebx,eax
c00148b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b9:	e8 e4 16 01 00       	call   c0025fa2 <MMX::MMX()>
c00148be:	eb 1b                	jmp    c00148db <setupFPU()+0x87>
c00148c0:	a8 10                	test   al,0x10
c00148c2:	74 1c                	je     c00148e0 <setupFPU()+0x8c>
c00148c4:	83 ec 0c             	sub    esp,0xc
c00148c7:	68 58 01 00 00       	push   0x158
c00148cc:	e8 23 b0 ff ff       	call   c000f8f4 <malloc>
c00148d1:	89 c3                	mov    ebx,eax
c00148d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00148d6:	e8 eb 17 01 00       	call   c00260c6 <x87::x87()>
c00148db:	83 c4 10             	add    esp,0x10
c00148de:	eb 24                	jmp    c0014904 <setupFPU()+0xb0>
c00148e0:	83 e0 ef             	and    eax,0xffffffef
c00148e3:	83 ec 0c             	sub    esp,0xc
c00148e6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148ec:	68 94 b8 02 c0       	push   0xc002b894
c00148f1:	e8 a9 e5 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00148f6:	0f 20 c0             	mov    eax,cr0
c00148f9:	83 c8 04             	or     eax,0x4
c00148fc:	0f 22 c0             	mov    cr0,eax
c00148ff:	31 db                	xor    ebx,ebx
c0014901:	83 c4 10             	add    esp,0x10
c0014904:	89 d8                	mov    eax,ebx
c0014906:	83 c4 08             	add    esp,0x8
c0014909:	5b                   	pop    ebx
c001490a:	c3                   	ret    
c001490b:	90                   	nop

c001490c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001490c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014910:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014914:	c1 e0 04             	shl    eax,0x4
c0014917:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001491b:	8d 50 10             	lea    edx,[eax+0x10]
c001491e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014924:	74 08                	je     c001492e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014926:	83 c0 04             	add    eax,0x4
c0014929:	39 d0                	cmp    eax,edx
c001492b:	75 f1                	jne    c001491e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001492d:	c3                   	ret    
c001492e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014938:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014942:	eb e2                	jmp    c0014926 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014944 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014944:	57                   	push   edi
c0014945:	31 c0                	xor    eax,eax
c0014947:	56                   	push   esi
c0014948:	53                   	push   ebx
c0014949:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001494d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014951:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014955:	89 da                	mov    edx,ebx
c0014957:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001495b:	c1 e2 04             	shl    edx,0x4
c001495e:	01 ca                	add    edx,ecx
c0014960:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014968:	74 16                	je     c0014980 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001496a:	40                   	inc    eax
c001496b:	83 f8 04             	cmp    eax,0x4
c001496e:	75 f0                	jne    c0014960 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014970:	c7 44 24 10 d8 b8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b8d8
c0014978:	5b                   	pop    ebx
c0014979:	5e                   	pop    esi
c001497a:	5f                   	pop    edi
c001497b:	e9 07 5f 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c0014980:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014983:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014986:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001498c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014992:	5b                   	pop    ebx
c0014993:	5e                   	pop    esi
c0014994:	5f                   	pop    edi
c0014995:	c3                   	ret    

c0014996 <doubleFault(regs*, void*)>:
c0014996:	55                   	push   ebp
c0014997:	89 e5                	mov    ebp,esp
c0014999:	83 ec 08             	sub    esp,0x8
c001499c:	83 ec 0c             	sub    esp,0xc
c001499f:	68 13 b9 02 c0       	push   0xc002b913
c00149a4:	e8 de 5e 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00149a9:	83 c4 10             	add    esp,0x10
c00149ac:	90                   	nop
c00149ad:	c9                   	leave  
c00149ae:	c3                   	ret    
c00149af:	90                   	nop

c00149b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149b0:	56                   	push   esi
c00149b1:	53                   	push   ebx
c00149b2:	50                   	push   eax
c00149b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149bb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149c0:	75 35                	jne    c00149f7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149c2:	8d 43 20             	lea    eax,[ebx+0x20]
c00149c5:	31 d2                	xor    edx,edx
c00149c7:	89 c1                	mov    ecx,eax
c00149c9:	c1 e1 04             	shl    ecx,0x4
c00149cc:	01 f1                	add    ecx,esi
c00149ce:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149d6:	74 3e                	je     c0014a16 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149d8:	42                   	inc    edx
c00149d9:	83 fa 04             	cmp    edx,0x4
c00149dc:	75 f0                	jne    c00149ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149de:	83 ec 0c             	sub    esp,0xc
c00149e1:	68 58 b9 02 c0       	push   0xc002b958
c00149e6:	e8 9c 5e 00 00       	call   c001a887 <Krnl::panic(char const*)>
c00149eb:	83 c4 10             	add    esp,0x10
c00149ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149f3:	5a                   	pop    edx
c00149f4:	5b                   	pop    ebx
c00149f5:	5e                   	pop    esi
c00149f6:	c3                   	ret    
c00149f7:	83 ec 0c             	sub    esp,0xc
c00149fa:	56                   	push   esi
c00149fb:	e8 ac fb ff ff       	call   c00145ac <Device::getName()>
c0014a00:	83 c4 10             	add    esp,0x10
c0014a03:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a06:	75 ba                	jne    c00149c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a08:	83 fb 0f             	cmp    ebx,0xf
c0014a0b:	7f 29                	jg     c0014a36 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a0d:	0f b6 9b 00 e3 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1d00]
c0014a14:	eb ac                	jmp    c00149c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a16:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a1d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a20:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a26:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a2a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a30:	89 d8                	mov    eax,ebx
c0014a32:	5a                   	pop    edx
c0014a33:	5b                   	pop    ebx
c0014a34:	5e                   	pop    esi
c0014a35:	c3                   	ret    
c0014a36:	83 ec 0c             	sub    esp,0xc
c0014a39:	68 20 b9 02 c0       	push   0xc002b920
c0014a3e:	e8 44 5e 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0014a43:	83 c4 10             	add    esp,0x10
c0014a46:	e9 77 ff ff ff       	jmp    c00149c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a4b:	90                   	nop

c0014a4c <InterruptController::clearAllHandlers(int, bool)>:
c0014a4c:	56                   	push   esi
c0014a4d:	53                   	push   ebx
c0014a4e:	52                   	push   edx
c0014a4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a53:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a57:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a5c:	75 61                	jne    c0014abf <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a5e:	8d 46 20             	lea    eax,[esi+0x20]
c0014a61:	c1 e6 04             	shl    esi,0x4
c0014a64:	c1 e0 04             	shl    eax,0x4
c0014a67:	01 de                	add    esi,ebx
c0014a69:	01 d8                	add    eax,ebx
c0014a6b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a75:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a7f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a89:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a93:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a9d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014aa7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014ab1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014abb:	58                   	pop    eax
c0014abc:	5b                   	pop    ebx
c0014abd:	5e                   	pop    esi
c0014abe:	c3                   	ret    
c0014abf:	83 ec 0c             	sub    esp,0xc
c0014ac2:	53                   	push   ebx
c0014ac3:	e8 e4 fa ff ff       	call   c00145ac <Device::getName()>
c0014ac8:	83 c4 10             	add    esp,0x10
c0014acb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ace:	75 8e                	jne    c0014a5e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ad0:	83 fe 0f             	cmp    esi,0xf
c0014ad3:	7f 09                	jg     c0014ade <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014ad5:	0f b6 b6 00 e3 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1d00]
c0014adc:	eb 80                	jmp    c0014a5e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ade:	83 ec 0c             	sub    esp,0xc
c0014ae1:	68 94 b9 02 c0       	push   0xc002b994
c0014ae6:	e8 9c 5d 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0014aeb:	83 c4 10             	add    esp,0x10
c0014aee:	e9 6b ff ff ff       	jmp    c0014a5e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014af3:	90                   	nop

c0014af4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014af4:	56                   	push   esi
c0014af5:	53                   	push   ebx
c0014af6:	52                   	push   edx
c0014af7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014afb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014aff:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b04:	75 3a                	jne    c0014b40 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b0a:	8d 50 20             	lea    edx,[eax+0x20]
c0014b0d:	c1 e2 04             	shl    edx,0x4
c0014b10:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b13:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b17:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b1d:	74 0b                	je     c0014b2a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b1f:	83 c0 04             	add    eax,0x4
c0014b22:	39 d0                	cmp    eax,edx
c0014b24:	75 f1                	jne    c0014b17 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b26:	58                   	pop    eax
c0014b27:	5b                   	pop    ebx
c0014b28:	5e                   	pop    esi
c0014b29:	c3                   	ret    
c0014b2a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b34:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b3e:	eb df                	jmp    c0014b1f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b40:	83 ec 0c             	sub    esp,0xc
c0014b43:	56                   	push   esi
c0014b44:	e8 63 fa ff ff       	call   c00145ac <Device::getName()>
c0014b49:	83 c4 10             	add    esp,0x10
c0014b4c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b4f:	75 b5                	jne    c0014b06 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b51:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b56:	7f 11                	jg     c0014b69 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b5c:	0f b6 80 00 e3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1d00]
c0014b63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b67:	eb 9d                	jmp    c0014b06 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b69:	83 ec 0c             	sub    esp,0xc
c0014b6c:	68 94 b9 02 c0       	push   0xc002b994
c0014b71:	e8 11 5d 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	eb 8b                	jmp    c0014b06 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b7b <nmiHandler(regs*, void*)>:
c0014b7b:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0014b80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b84:	e9 b5 a4 ff ff       	jmp    c000f03e <Computer::handleNMI()>

c0014b89 <int_handler>:
c0014b89:	55                   	push   ebp
c0014b8a:	57                   	push   edi
c0014b8b:	56                   	push   esi
c0014b8c:	53                   	push   ebx
c0014b8d:	83 ec 0c             	sub    esp,0xc
c0014b90:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b94:	80 3d 04 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c04,0x0
c0014b9b:	74 0b                	je     c0014ba8 <int_handler+0x1f>
c0014b9d:	fa                   	cli    
c0014b9e:	f4                   	hlt    
c0014b9f:	80 3d 04 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031c04,0x0
c0014ba6:	75 f5                	jne    c0014b9d <int_handler+0x14>
c0014ba8:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0014bad:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014bb0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bb6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014bbc:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bbf:	83 f8 17             	cmp    eax,0x17
c0014bc2:	77 13                	ja     c0014bd7 <int_handler+0x4e>
c0014bc4:	83 ec 08             	sub    esp,0x8
c0014bc7:	8b 17                	mov    edx,DWORD PTR [edi]
c0014bc9:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bcc:	0f b6 c0             	movzx  eax,al
c0014bcf:	50                   	push   eax
c0014bd0:	57                   	push   edi
c0014bd1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bd4:	83 c4 10             	add    esp,0x10
c0014bd7:	83 c3 15             	add    ebx,0x15
c0014bda:	c1 e3 04             	shl    ebx,0x4
c0014bdd:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014be1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014be8:	31 db                	xor    ebx,ebx
c0014bea:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014bee:	85 c0                	test   eax,eax
c0014bf0:	74 13                	je     c0014c05 <int_handler+0x7c>
c0014bf2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014bf5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bf9:	74 1c                	je     c0014c17 <int_handler+0x8e>
c0014bfb:	83 ec 08             	sub    esp,0x8
c0014bfe:	52                   	push   edx
c0014bff:	56                   	push   esi
c0014c00:	ff d0                	call   eax
c0014c02:	83 c4 10             	add    esp,0x10
c0014c05:	43                   	inc    ebx
c0014c06:	83 fb 04             	cmp    ebx,0x4
c0014c09:	75 df                	jne    c0014bea <int_handler+0x61>
c0014c0b:	83 c4 0c             	add    esp,0xc
c0014c0e:	31 c0                	xor    eax,eax
c0014c10:	5b                   	pop    ebx
c0014c11:	31 d2                	xor    edx,edx
c0014c13:	5e                   	pop    esi
c0014c14:	5f                   	pop    edi
c0014c15:	5d                   	pop    ebp
c0014c16:	c3                   	ret    
c0014c17:	83 ec 08             	sub    esp,0x8
c0014c1a:	52                   	push   edx
c0014c1b:	56                   	push   esi
c0014c1c:	ff d0                	call   eax
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	83 c4 0c             	add    esp,0xc
c0014c24:	5b                   	pop    ebx
c0014c25:	5e                   	pop    esi
c0014c26:	5f                   	pop    edi
c0014c27:	5d                   	pop    ebp
c0014c28:	c3                   	ret    
c0014c29:	90                   	nop

c0014c2a <InterruptController::InterruptController(char const*)>:
c0014c2a:	83 ec 1c             	sub    esp,0x1c
c0014c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c31:	83 ec 08             	sub    esp,0x8
c0014c34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c38:	50                   	push   eax
c0014c39:	e8 72 f8 ff ff       	call   c00144b0 <Device::Device(char const*)>
c0014c3e:	83 c4 10             	add    esp,0x10
c0014c41:	ba 54 bc 02 c0       	mov    edx,0xc002bc54
c0014c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c4a:	89 10                	mov    DWORD PTR [eax],edx
c0014c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c50:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c62:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c6a:	7f 5e                	jg     c0014cca <InterruptController::InterruptController(char const*)+0xa0>
c0014c6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c74:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c79:	7f 49                	jg     c0014cc4 <InterruptController::InterruptController(char const*)+0x9a>
c0014c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c83:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c8e:	01 ca                	add    edx,ecx
c0014c90:	83 c2 54             	add    edx,0x54
c0014c93:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ca3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014caa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cae:	01 ca                	add    edx,ecx
c0014cb0:	81 c2 54 04 00 00    	add    edx,0x454
c0014cb6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cbe:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cc2:	eb b0                	jmp    c0014c74 <InterruptController::InterruptController(char const*)+0x4a>
c0014cc4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cc8:	eb 98                	jmp    c0014c62 <InterruptController::InterruptController(char const*)+0x38>
c0014cca:	90                   	nop
c0014ccb:	83 c4 1c             	add    esp,0x1c
c0014cce:	c3                   	ret    
c0014ccf:	90                   	nop

c0014cd0 <InterruptController::~InterruptController()>:
c0014cd0:	83 ec 0c             	sub    esp,0xc
c0014cd3:	ba 54 bc 02 c0       	mov    edx,0xc002bc54
c0014cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cdc:	89 10                	mov    DWORD PTR [eax],edx
c0014cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ce2:	83 ec 0c             	sub    esp,0xc
c0014ce5:	50                   	push   eax
c0014ce6:	e8 bb f4 ff ff       	call   c00141a6 <Device::~Device()>
c0014ceb:	83 c4 10             	add    esp,0x10
c0014cee:	90                   	nop
c0014cef:	83 c4 0c             	add    esp,0xc
c0014cf2:	c3                   	ret    
c0014cf3:	90                   	nop

c0014cf4 <InterruptController::~InterruptController()>:
c0014cf4:	83 ec 0c             	sub    esp,0xc
c0014cf7:	83 ec 0c             	sub    esp,0xc
c0014cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cfe:	e8 cd ff ff ff       	call   c0014cd0 <InterruptController::~InterruptController()>
c0014d03:	83 c4 10             	add    esp,0x10
c0014d06:	83 ec 08             	sub    esp,0x8
c0014d09:	68 58 21 00 00       	push   0x2158
c0014d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d12:	e8 a8 e0 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0014d17:	83 c4 10             	add    esp,0x10
c0014d1a:	83 c4 0c             	add    esp,0xc
c0014d1d:	c3                   	ret    

c0014d1e <displayDebugInfo(regs*)>:
c0014d1e:	55                   	push   ebp
c0014d1f:	57                   	push   edi
c0014d20:	56                   	push   esi
c0014d21:	53                   	push   ebx
c0014d22:	83 ec 24             	sub    esp,0x24
c0014d25:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d29:	0f 20 c2             	mov    edx,cr0
c0014d2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d30:	0f 20 d7             	mov    edi,cr2
c0014d33:	0f 20 de             	mov    esi,cr3
c0014d36:	0f 20 e5             	mov    ebp,cr4
c0014d39:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d3c:	68 ce b9 02 c0       	push   0xc002b9ce
c0014d41:	e8 59 e1 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014d46:	59                   	pop    ecx
c0014d47:	58                   	pop    eax
c0014d48:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d4b:	68 d9 b9 02 c0       	push   0xc002b9d9
c0014d50:	e8 4a e1 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014d55:	58                   	pop    eax
c0014d56:	5a                   	pop    edx
c0014d57:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d5a:	68 e4 b9 02 c0       	push   0xc002b9e4
c0014d5f:	e8 3b e1 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014d64:	59                   	pop    ecx
c0014d65:	58                   	pop    eax
c0014d66:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d69:	68 ef b9 02 c0       	push   0xc002b9ef
c0014d6e:	e8 2c e1 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014d73:	58                   	pop    eax
c0014d74:	5a                   	pop    edx
c0014d75:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d78:	68 fa b9 02 c0       	push   0xc002b9fa
c0014d7d:	e8 1d e1 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014d82:	59                   	pop    ecx
c0014d83:	58                   	pop    eax
c0014d84:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d87:	68 05 ba 02 c0       	push   0xc002ba05
c0014d8c:	e8 0e e1 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014d91:	58                   	pop    eax
c0014d92:	5a                   	pop    edx
c0014d93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d96:	68 10 ba 02 c0       	push   0xc002ba10
c0014d9b:	e8 ff e0 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014da0:	59                   	pop    ecx
c0014da1:	58                   	pop    eax
c0014da2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014da5:	68 1b ba 02 c0       	push   0xc002ba1b
c0014daa:	e8 f0 e0 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014daf:	58                   	pop    eax
c0014db0:	5a                   	pop    edx
c0014db1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014db4:	68 26 ba 02 c0       	push   0xc002ba26
c0014db9:	e8 e1 e0 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014dbe:	59                   	pop    ecx
c0014dbf:	58                   	pop    eax
c0014dc0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dc3:	68 35 ba 02 c0       	push   0xc002ba35
c0014dc8:	e8 d2 e0 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014dcd:	58                   	pop    eax
c0014dce:	5a                   	pop    edx
c0014dcf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014dd2:	68 40 ba 02 c0       	push   0xc002ba40
c0014dd7:	e8 c3 e0 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014ddc:	59                   	pop    ecx
c0014ddd:	58                   	pop    eax
c0014dde:	57                   	push   edi
c0014ddf:	68 4b ba 02 c0       	push   0xc002ba4b
c0014de4:	e8 b6 e0 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014de9:	58                   	pop    eax
c0014dea:	5a                   	pop    edx
c0014deb:	56                   	push   esi
c0014dec:	68 56 ba 02 c0       	push   0xc002ba56
c0014df1:	e8 a9 e0 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0014df6:	59                   	pop    ecx
c0014df7:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014dfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e02:	e8 bb be ff ff       	call   c0010cc2 <setActiveTerminal(VgaText*)>
c0014e07:	58                   	pop    eax
c0014e08:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e0b:	5a                   	pop    edx
c0014e0c:	c1 e0 05             	shl    eax,0x5
c0014e0f:	05 60 e0 02 c0       	add    eax,0xc002e060
c0014e14:	50                   	push   eax
c0014e15:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014e1a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e20:	e8 29 c2 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014e25:	59                   	pop    ecx
c0014e26:	58                   	pop    eax
c0014e27:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014e2c:	68 61 ba 02 c0       	push   0xc002ba61
c0014e31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e37:	e8 12 c2 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014e3c:	58                   	pop    eax
c0014e3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e42:	5a                   	pop    edx
c0014e43:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e46:	83 c0 0c             	add    eax,0xc
c0014e49:	50                   	push   eax
c0014e4a:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014e4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e55:	e8 f4 c1 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014e5a:	59                   	pop    ecx
c0014e5b:	58                   	pop    eax
c0014e5c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014e61:	68 6a ba 02 c0       	push   0xc002ba6a
c0014e66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6c:	e8 dd c1 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014e71:	58                   	pop    eax
c0014e72:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014e77:	5a                   	pop    edx
c0014e78:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e81:	e8 ee c1 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0014e86:	59                   	pop    ecx
c0014e87:	58                   	pop    eax
c0014e88:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014e8d:	68 72 ba 02 c0       	push   0xc002ba72
c0014e92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e98:	e8 b1 c1 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014e9d:	58                   	pop    eax
c0014e9e:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014ea3:	5a                   	pop    edx
c0014ea4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ea7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ead:	e8 c2 c1 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0014eb2:	59                   	pop    ecx
c0014eb3:	58                   	pop    eax
c0014eb4:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014eb9:	68 7a ba 02 c0       	push   0xc002ba7a
c0014ebe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec4:	e8 85 c1 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014ec9:	58                   	pop    eax
c0014eca:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014ecf:	5a                   	pop    edx
c0014ed0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ed3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed9:	e8 96 c1 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0014ede:	59                   	pop    ecx
c0014edf:	58                   	pop    eax
c0014ee0:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014ee5:	68 82 ba 02 c0       	push   0xc002ba82
c0014eea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef0:	e8 59 c1 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014ef5:	58                   	pop    eax
c0014ef6:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014efb:	5a                   	pop    edx
c0014efc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014eff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f05:	e8 6a c1 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0014f0a:	59                   	pop    ecx
c0014f0b:	58                   	pop    eax
c0014f0c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014f11:	68 8a ba 02 c0       	push   0xc002ba8a
c0014f16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1c:	e8 2d c1 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014f21:	58                   	pop    eax
c0014f22:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014f27:	5a                   	pop    edx
c0014f28:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f31:	e8 3e c1 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0014f36:	59                   	pop    ecx
c0014f37:	58                   	pop    eax
c0014f38:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014f3d:	68 92 ba 02 c0       	push   0xc002ba92
c0014f42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f48:	e8 01 c1 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014f4d:	58                   	pop    eax
c0014f4e:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014f53:	5a                   	pop    edx
c0014f54:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5d:	e8 12 c1 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0014f62:	59                   	pop    ecx
c0014f63:	58                   	pop    eax
c0014f64:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014f69:	68 9a ba 02 c0       	push   0xc002ba9a
c0014f6e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f74:	e8 d5 c0 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014f79:	58                   	pop    eax
c0014f7a:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014f7f:	5a                   	pop    edx
c0014f80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f84:	52                   	push   edx
c0014f85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8b:	e8 e4 c0 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0014f90:	59                   	pop    ecx
c0014f91:	58                   	pop    eax
c0014f92:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014f97:	68 a3 ba 02 c0       	push   0xc002baa3
c0014f9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa2:	e8 a7 c0 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014fa7:	58                   	pop    eax
c0014fa8:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014fad:	5a                   	pop    edx
c0014fae:	57                   	push   edi
c0014faf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb5:	e8 ba c0 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0014fba:	59                   	pop    ecx
c0014fbb:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014fc0:	5f                   	pop    edi
c0014fc1:	68 ab ba 02 c0       	push   0xc002baab
c0014fc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcc:	e8 7d c0 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014fd1:	58                   	pop    eax
c0014fd2:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014fd7:	5a                   	pop    edx
c0014fd8:	56                   	push   esi
c0014fd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fdf:	e8 90 c0 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0014fe4:	59                   	pop    ecx
c0014fe5:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0014fea:	5e                   	pop    esi
c0014feb:	68 b3 ba 02 c0       	push   0xc002bab3
c0014ff0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff6:	e8 53 c0 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0014ffb:	5f                   	pop    edi
c0014ffc:	58                   	pop    eax
c0014ffd:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015002:	55                   	push   ebp
c0015003:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015009:	e8 66 c0 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001500e:	58                   	pop    eax
c001500f:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015014:	5a                   	pop    edx
c0015015:	68 bb ba 02 c0       	push   0xc002babb
c001501a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015020:	e8 29 c0 ff ff       	call   c001104e <VgaText::puts(char const*)>
c0015025:	0f 21 c0             	mov    eax,db0
c0015028:	59                   	pop    ecx
c0015029:	5e                   	pop    esi
c001502a:	50                   	push   eax
c001502b:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015030:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015036:	e8 39 c0 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001503b:	5f                   	pop    edi
c001503c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015041:	5d                   	pop    ebp
c0015042:	68 c4 ba 02 c0       	push   0xc002bac4
c0015047:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504d:	e8 fc bf ff ff       	call   c001104e <VgaText::puts(char const*)>
c0015052:	0f 21 c8             	mov    eax,db1
c0015055:	5a                   	pop    edx
c0015056:	59                   	pop    ecx
c0015057:	50                   	push   eax
c0015058:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001505d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015063:	e8 0c c0 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0015068:	5e                   	pop    esi
c0015069:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001506e:	5f                   	pop    edi
c001506f:	68 cc ba 02 c0       	push   0xc002bacc
c0015074:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507a:	e8 cf bf ff ff       	call   c001104e <VgaText::puts(char const*)>
c001507f:	0f 21 d0             	mov    eax,db2
c0015082:	5d                   	pop    ebp
c0015083:	5a                   	pop    edx
c0015084:	50                   	push   eax
c0015085:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001508a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015090:	e8 df bf ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0015095:	59                   	pop    ecx
c0015096:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001509b:	5e                   	pop    esi
c001509c:	68 d4 ba 02 c0       	push   0xc002bad4
c00150a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a7:	e8 a2 bf ff ff       	call   c001104e <VgaText::puts(char const*)>
c00150ac:	0f 21 d8             	mov    eax,db3
c00150af:	5f                   	pop    edi
c00150b0:	5d                   	pop    ebp
c00150b1:	50                   	push   eax
c00150b2:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00150b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bd:	e8 b2 bf ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c00150c2:	58                   	pop    eax
c00150c3:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00150c8:	5a                   	pop    edx
c00150c9:	68 dc ba 02 c0       	push   0xc002badc
c00150ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d4:	e8 75 bf ff ff       	call   c001104e <VgaText::puts(char const*)>
c00150d9:	0f 21 f0             	mov    eax,db6
c00150dc:	59                   	pop    ecx
c00150dd:	5e                   	pop    esi
c00150de:	50                   	push   eax
c00150df:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00150e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ea:	e8 85 bf ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c00150ef:	5f                   	pop    edi
c00150f0:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00150f5:	5d                   	pop    ebp
c00150f6:	68 e4 ba 02 c0       	push   0xc002bae4
c00150fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015101:	e8 48 bf ff ff       	call   c001104e <VgaText::puts(char const*)>
c0015106:	0f 21 f8             	mov    eax,db7
c0015109:	5a                   	pop    edx
c001510a:	59                   	pop    ecx
c001510b:	50                   	push   eax
c001510c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015111:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015117:	e8 58 bf ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001511c:	5e                   	pop    esi
c001511d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015120:	e8 e5 8a 00 00       	call   c001dc0a <Thr::getDriverNameFromAddress(unsigned long)>
c0015125:	83 c4 10             	add    esp,0x10
c0015128:	85 c0                	test   eax,eax
c001512a:	74 7d                	je     c00151a9 <displayDebugInfo(regs*)+0x48b>
c001512c:	89 c6                	mov    esi,eax
c001512e:	50                   	push   eax
c001512f:	50                   	push   eax
c0015130:	56                   	push   esi
c0015131:	68 ec ba 02 c0       	push   0xc002baec
c0015136:	e8 64 dd ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001513b:	5a                   	pop    edx
c001513c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015141:	59                   	pop    ecx
c0015142:	68 fa ba 02 c0       	push   0xc002bafa
c0015147:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001514d:	e8 fc be ff ff       	call   c001104e <VgaText::puts(char const*)>
c0015152:	5f                   	pop    edi
c0015153:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015158:	5d                   	pop    ebp
c0015159:	56                   	push   esi
c001515a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015160:	e8 e9 be ff ff       	call   c001104e <VgaText::puts(char const*)>
c0015165:	58                   	pop    eax
c0015166:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001516b:	5a                   	pop    edx
c001516c:	68 06 bb 02 c0       	push   0xc002bb06
c0015171:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015177:	e8 d2 be ff ff       	call   c001104e <VgaText::puts(char const*)>
c001517c:	59                   	pop    ecx
c001517d:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0015182:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015188:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001518b:	e8 b1 8a 00 00       	call   c001dc41 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015190:	5b                   	pop    ebx
c0015191:	5d                   	pop    ebp
c0015192:	50                   	push   eax
c0015193:	57                   	push   edi
c0015194:	e8 db be ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c0015199:	58                   	pop    eax
c001519a:	5a                   	pop    edx
c001519b:	56                   	push   esi
c001519c:	68 12 bb 02 c0       	push   0xc002bb12
c00151a1:	e8 f9 dc ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00151a6:	83 c4 10             	add    esp,0x10
c00151a9:	fa                   	cli    
c00151aa:	f4                   	hlt    
c00151ab:	eb fe                	jmp    c00151ab <displayDebugInfo(regs*)+0x48d>

c00151ad <x87EmulHandler(regs*, void*)>:
c00151ad:	83 ec 0c             	sub    esp,0xc
c00151b0:	0f 20 c2             	mov    edx,cr0
c00151b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b8:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00151bc:	75 4b                	jne    c0015209 <x87EmulHandler(regs*, void*)+0x5c>
c00151be:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00151c3:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00151c9:	85 c0                	test   eax,eax
c00151cb:	74 05                	je     c00151d2 <x87EmulHandler(regs*, void*)+0x25>
c00151cd:	83 e2 08             	and    edx,0x8
c00151d0:	75 17                	jne    c00151e9 <x87EmulHandler(regs*, void*)+0x3c>
c00151d2:	83 ec 0c             	sub    esp,0xc
c00151d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151d9:	e8 9c b0 00 00       	call   c002027a <Vm::x87Handler(regs*)>
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	84 c0                	test   al,al
c00151e3:	74 24                	je     c0015209 <x87EmulHandler(regs*, void*)+0x5c>
c00151e5:	83 c4 0c             	add    esp,0xc
c00151e8:	c3                   	ret    
c00151e9:	83 ec 0c             	sub    esp,0xc
c00151ec:	68 38 bb 02 c0       	push   0xc002bb38
c00151f1:	e8 a9 dc ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00151f6:	0f 06                	clts   
c00151f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151fd:	83 c4 10             	add    esp,0x10
c0015200:	a3 48 f2 02 c0       	mov    ds:0xc002f248,eax
c0015205:	83 c4 0c             	add    esp,0xc
c0015208:	c3                   	ret    
c0015209:	83 ec 0c             	sub    esp,0xc
c001520c:	68 22 bb 02 c0       	push   0xc002bb22
c0015211:	e8 89 dc ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0015216:	5a                   	pop    edx
c0015217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001521b:	e8 fe fa ff ff       	call   c0014d1e <displayDebugInfo(regs*)>

c0015220 <gpFault(regs*, void*)>:
c0015220:	53                   	push   ebx
c0015221:	83 ec 14             	sub    esp,0x14
c0015224:	c7 05 44 f2 02 c0 f7 f5 01 c0 	mov    DWORD PTR ds:0xc002f244,0xc001f5f7
c001522e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015232:	53                   	push   ebx
c0015233:	e8 bf a3 00 00       	call   c001f5f7 <Vm::faultHandler(regs*)>
c0015238:	83 c4 10             	add    esp,0x10
c001523b:	84 c0                	test   al,al
c001523d:	74 05                	je     c0015244 <gpFault(regs*, void*)+0x24>
c001523f:	83 c4 08             	add    esp,0x8
c0015242:	5b                   	pop    ebx
c0015243:	c3                   	ret    
c0015244:	83 ec 0c             	sub    esp,0xc
c0015247:	68 45 bb 02 c0       	push   0xc002bb45
c001524c:	e8 4e dc ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0015251:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015254:	e8 c5 fa ff ff       	call   c0014d1e <displayDebugInfo(regs*)>

c0015259 <pgFault(regs*, void*)>:
c0015259:	83 ec 14             	sub    esp,0x14
c001525c:	0f 20 d0             	mov    eax,cr2
c001525f:	50                   	push   eax
c0015260:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015265:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015268:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001526e:	e8 49 d8 ff ff       	call   c0012abc <VAS::tryLoadBackOffDisk(unsigned long)>
c0015273:	83 c4 10             	add    esp,0x10
c0015276:	84 c0                	test   al,al
c0015278:	74 04                	je     c001527e <pgFault(regs*, void*)+0x25>
c001527a:	83 c4 0c             	add    esp,0xc
c001527d:	c3                   	ret    
c001527e:	83 ec 0c             	sub    esp,0xc
c0015281:	68 60 bb 02 c0       	push   0xc002bb60
c0015286:	e8 14 dc ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001528b:	58                   	pop    eax
c001528c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015290:	e8 89 fa ff ff       	call   c0014d1e <displayDebugInfo(regs*)>

c0015295 <otherISRHandler(regs*, void*)>:
c0015295:	53                   	push   ebx
c0015296:	83 ec 0c             	sub    esp,0xc
c0015299:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001529d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152a0:	50                   	push   eax
c00152a1:	50                   	push   eax
c00152a2:	68 6d bb 02 c0       	push   0xc002bb6d
c00152a7:	e8 f3 db ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00152ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152af:	e8 6a fa ff ff       	call   c0014d1e <displayDebugInfo(regs*)>

c00152b4 <opcodeFault(regs*, void*)>:
c00152b4:	55                   	push   ebp
c00152b5:	89 e5                	mov    ebp,esp
c00152b7:	56                   	push   esi
c00152b8:	53                   	push   ebx
c00152b9:	83 ec 40             	sub    esp,0x40
c00152bc:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00152c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152c7:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152cd:	84 c0                	test   al,al
c00152cf:	74 24                	je     c00152f5 <opcodeFault(regs*, void*)+0x41>
c00152d1:	83 ec 0c             	sub    esp,0xc
c00152d4:	68 8c bb 02 c0       	push   0xc002bb8c
c00152d9:	e8 c1 db ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00152de:	83 c4 10             	add    esp,0x10
c00152e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e7:	8d 50 19             	lea    edx,[eax+0x19]
c00152ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152f0:	e9 d5 05 00 00       	jmp    c00158ca <opcodeFault(regs*, void*)+0x616>
c00152f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152fe:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015302:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015309:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001530c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001530f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015312:	8a 00                	mov    al,BYTE PTR [eax]
c0015314:	3c f0                	cmp    al,0xf0
c0015316:	75 17                	jne    c001532f <opcodeFault(regs*, void*)+0x7b>
c0015318:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001531b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015321:	8d 50 01             	lea    edx,[eax+0x1]
c0015324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015327:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001532a:	e9 da 00 00 00       	jmp    c0015409 <opcodeFault(regs*, void*)+0x155>
c001532f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015332:	8a 00                	mov    al,BYTE PTR [eax]
c0015334:	3c f2                	cmp    al,0xf2
c0015336:	74 09                	je     c0015341 <opcodeFault(regs*, void*)+0x8d>
c0015338:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533b:	8a 00                	mov    al,BYTE PTR [eax]
c001533d:	3c f3                	cmp    al,0xf3
c001533f:	75 1b                	jne    c001535c <opcodeFault(regs*, void*)+0xa8>
c0015341:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015345:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534e:	8d 50 01             	lea    edx,[eax+0x1]
c0015351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015354:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015357:	e9 ad 00 00 00       	jmp    c0015409 <opcodeFault(regs*, void*)+0x155>
c001535c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535f:	8a 00                	mov    al,BYTE PTR [eax]
c0015361:	3c 66                	cmp    al,0x66
c0015363:	75 1f                	jne    c0015384 <opcodeFault(regs*, void*)+0xd0>
c0015365:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015369:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001536d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015373:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015376:	8d 50 01             	lea    edx,[eax+0x1]
c0015379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001537f:	e9 85 00 00 00       	jmp    c0015409 <opcodeFault(regs*, void*)+0x155>
c0015384:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015387:	8a 00                	mov    al,BYTE PTR [eax]
c0015389:	3c 67                	cmp    al,0x67
c001538b:	75 18                	jne    c00153a5 <opcodeFault(regs*, void*)+0xf1>
c001538d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015391:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015397:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001539a:	8d 50 01             	lea    edx,[eax+0x1]
c001539d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153a3:	eb 64                	jmp    c0015409 <opcodeFault(regs*, void*)+0x155>
c00153a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a8:	8a 00                	mov    al,BYTE PTR [eax]
c00153aa:	3c 2e                	cmp    al,0x2e
c00153ac:	74 09                	je     c00153b7 <opcodeFault(regs*, void*)+0x103>
c00153ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b1:	8a 00                	mov    al,BYTE PTR [eax]
c00153b3:	3c 3e                	cmp    al,0x3e
c00153b5:	75 18                	jne    c00153cf <opcodeFault(regs*, void*)+0x11b>
c00153b7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153bb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c4:	8d 50 01             	lea    edx,[eax+0x1]
c00153c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153cd:	eb 3a                	jmp    c0015409 <opcodeFault(regs*, void*)+0x155>
c00153cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d2:	8a 00                	mov    al,BYTE PTR [eax]
c00153d4:	3c 36                	cmp    al,0x36
c00153d6:	74 1b                	je     c00153f3 <opcodeFault(regs*, void*)+0x13f>
c00153d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153db:	8a 00                	mov    al,BYTE PTR [eax]
c00153dd:	3c 26                	cmp    al,0x26
c00153df:	74 12                	je     c00153f3 <opcodeFault(regs*, void*)+0x13f>
c00153e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e4:	8a 00                	mov    al,BYTE PTR [eax]
c00153e6:	3c 64                	cmp    al,0x64
c00153e8:	74 09                	je     c00153f3 <opcodeFault(regs*, void*)+0x13f>
c00153ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ed:	8a 00                	mov    al,BYTE PTR [eax]
c00153ef:	3c 65                	cmp    al,0x65
c00153f1:	75 16                	jne    c0015409 <opcodeFault(regs*, void*)+0x155>
c00153f3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153f7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015400:	8d 50 01             	lea    edx,[eax+0x1]
c0015403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015406:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540c:	8a 00                	mov    al,BYTE PTR [eax]
c001540e:	3c 0f                	cmp    al,0xf
c0015410:	0f 85 ad 00 00 00    	jne    c00154c3 <opcodeFault(regs*, void*)+0x20f>
c0015416:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015419:	40                   	inc    eax
c001541a:	8a 00                	mov    al,BYTE PTR [eax]
c001541c:	3c c2                	cmp    al,0xc2
c001541e:	74 0e                	je     c001542e <opcodeFault(regs*, void*)+0x17a>
c0015420:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015423:	40                   	inc    eax
c0015424:	8a 00                	mov    al,BYTE PTR [eax]
c0015426:	3c c3                	cmp    al,0xc3
c0015428:	0f 85 95 00 00 00    	jne    c00154c3 <opcodeFault(regs*, void*)+0x20f>
c001542e:	83 ec 0c             	sub    esp,0xc
c0015431:	68 af bb 02 c0       	push   0xc002bbaf
c0015436:	e8 64 da ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001543b:	83 c4 10             	add    esp,0x10
c001543e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015441:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015444:	8d 50 01             	lea    edx,[eax+0x1]
c0015447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001544d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015450:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015453:	8a 00                	mov    al,BYTE PTR [eax]
c0015455:	8d 50 fe             	lea    edx,[eax-0x2]
c0015458:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545b:	88 10                	mov    BYTE PTR [eax],dl
c001545d:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015460:	50                   	push   eax
c0015461:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015464:	50                   	push   eax
c0015465:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015468:	50                   	push   eax
c0015469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001546c:	e8 e3 4a 00 00       	call   c0019f54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015477:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001547d:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015480:	01 d0                	add    eax,edx
c0015482:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015488:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001548b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001548e:	48                   	dec    eax
c001548f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015495:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015498:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001549b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549e:	83 ec 04             	sub    esp,0x4
c00154a1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154a4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154a7:	50                   	push   eax
c00154a8:	e8 07 ad fe ff       	call   c00001b4 <voodooXADD>
c00154ad:	83 c4 10             	add    esp,0x10
c00154b0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154b3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154b6:	01 c2                	add    edx,eax
c00154b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154be:	e9 07 04 00 00       	jmp    c00158ca <opcodeFault(regs*, void*)+0x616>
c00154c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c6:	8a 00                	mov    al,BYTE PTR [eax]
c00154c8:	3c 0f                	cmp    al,0xf
c00154ca:	0f 85 8b 01 00 00    	jne    c001565b <opcodeFault(regs*, void*)+0x3a7>
c00154d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d3:	40                   	inc    eax
c00154d4:	8a 00                	mov    al,BYTE PTR [eax]
c00154d6:	3c c7                	cmp    al,0xc7
c00154d8:	0f 86 7d 01 00 00    	jbe    c001565b <opcodeFault(regs*, void*)+0x3a7>
c00154de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e1:	40                   	inc    eax
c00154e2:	8a 00                	mov    al,BYTE PTR [eax]
c00154e4:	3c cf                	cmp    al,0xcf
c00154e6:	0f 87 6f 01 00 00    	ja     c001565b <opcodeFault(regs*, void*)+0x3a7>
c00154ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ef:	40                   	inc    eax
c00154f0:	8a 00                	mov    al,BYTE PTR [eax]
c00154f2:	83 c0 38             	add    eax,0x38
c00154f5:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154f8:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154fc:	75 0b                	jne    c0015509 <opcodeFault(regs*, void*)+0x255>
c00154fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015501:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015504:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015507:	eb 75                	jmp    c001557e <opcodeFault(regs*, void*)+0x2ca>
c0015509:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001550d:	75 0b                	jne    c001551a <opcodeFault(regs*, void*)+0x266>
c001550f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015512:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015515:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015518:	eb 64                	jmp    c001557e <opcodeFault(regs*, void*)+0x2ca>
c001551a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001551e:	75 0b                	jne    c001552b <opcodeFault(regs*, void*)+0x277>
c0015520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015523:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015526:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015529:	eb 53                	jmp    c001557e <opcodeFault(regs*, void*)+0x2ca>
c001552b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001552f:	75 0b                	jne    c001553c <opcodeFault(regs*, void*)+0x288>
c0015531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015534:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015537:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001553a:	eb 42                	jmp    c001557e <opcodeFault(regs*, void*)+0x2ca>
c001553c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015540:	75 0b                	jne    c001554d <opcodeFault(regs*, void*)+0x299>
c0015542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015545:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015548:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001554b:	eb 31                	jmp    c001557e <opcodeFault(regs*, void*)+0x2ca>
c001554d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015551:	75 0b                	jne    c001555e <opcodeFault(regs*, void*)+0x2aa>
c0015553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015556:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015559:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001555c:	eb 20                	jmp    c001557e <opcodeFault(regs*, void*)+0x2ca>
c001555e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015562:	75 0b                	jne    c001556f <opcodeFault(regs*, void*)+0x2bb>
c0015564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015567:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001556a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556d:	eb 0f                	jmp    c001557e <opcodeFault(regs*, void*)+0x2ca>
c001556f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015573:	75 09                	jne    c001557e <opcodeFault(regs*, void*)+0x2ca>
c0015575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015578:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001557b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557e:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015582:	74 10                	je     c0015594 <opcodeFault(regs*, void*)+0x2e0>
c0015584:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001558b:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015592:	eb 2d                	jmp    c00155c1 <opcodeFault(regs*, void*)+0x30d>
c0015594:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015597:	c1 e0 18             	shl    eax,0x18
c001559a:	89 c2                	mov    edx,eax
c001559c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001559f:	c1 e0 08             	shl    eax,0x8
c00155a2:	25 00 00 ff 00       	and    eax,0xff0000
c00155a7:	09 c2                	or     edx,eax
c00155a9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155ac:	c1 e8 08             	shr    eax,0x8
c00155af:	25 00 ff 00 00       	and    eax,0xff00
c00155b4:	09 c2                	or     edx,eax
c00155b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155b9:	c1 e8 18             	shr    eax,0x18
c00155bc:	09 d0                	or     eax,edx
c00155be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c1:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155c5:	75 0b                	jne    c00155d2 <opcodeFault(regs*, void*)+0x31e>
c00155c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155cd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00155d0:	eb 75                	jmp    c0015647 <opcodeFault(regs*, void*)+0x393>
c00155d2:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155d6:	75 0b                	jne    c00155e3 <opcodeFault(regs*, void*)+0x32f>
c00155d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155de:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155e1:	eb 64                	jmp    c0015647 <opcodeFault(regs*, void*)+0x393>
c00155e3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155e7:	75 0b                	jne    c00155f4 <opcodeFault(regs*, void*)+0x340>
c00155e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ef:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155f2:	eb 53                	jmp    c0015647 <opcodeFault(regs*, void*)+0x393>
c00155f4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155f8:	75 0b                	jne    c0015605 <opcodeFault(regs*, void*)+0x351>
c00155fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015600:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015603:	eb 42                	jmp    c0015647 <opcodeFault(regs*, void*)+0x393>
c0015605:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015609:	75 0b                	jne    c0015616 <opcodeFault(regs*, void*)+0x362>
c001560b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015611:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015614:	eb 31                	jmp    c0015647 <opcodeFault(regs*, void*)+0x393>
c0015616:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001561a:	75 0b                	jne    c0015627 <opcodeFault(regs*, void*)+0x373>
c001561c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015622:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015625:	eb 20                	jmp    c0015647 <opcodeFault(regs*, void*)+0x393>
c0015627:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001562b:	75 0b                	jne    c0015638 <opcodeFault(regs*, void*)+0x384>
c001562d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015630:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015633:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015636:	eb 0f                	jmp    c0015647 <opcodeFault(regs*, void*)+0x393>
c0015638:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001563c:	75 09                	jne    c0015647 <opcodeFault(regs*, void*)+0x393>
c001563e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015641:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015644:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001564d:	8d 50 02             	lea    edx,[eax+0x2]
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015656:	e9 6f 02 00 00       	jmp    c00158ca <opcodeFault(regs*, void*)+0x616>
c001565b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001565e:	8a 00                	mov    al,BYTE PTR [eax]
c0015660:	3c 0f                	cmp    al,0xf
c0015662:	0f 85 8d 01 00 00    	jne    c00157f5 <opcodeFault(regs*, void*)+0x541>
c0015668:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566b:	40                   	inc    eax
c001566c:	8a 00                	mov    al,BYTE PTR [eax]
c001566e:	3c c7                	cmp    al,0xc7
c0015670:	0f 85 7f 01 00 00    	jne    c00157f5 <opcodeFault(regs*, void*)+0x541>
c0015676:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001567f:	8d 50 01             	lea    edx,[eax+0x1]
c0015682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015685:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015688:	8d 45 ba             	lea    eax,[ebp-0x46]
c001568b:	50                   	push   eax
c001568c:	8d 45 bb             	lea    eax,[ebp-0x45]
c001568f:	50                   	push   eax
c0015690:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015693:	50                   	push   eax
c0015694:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015697:	e8 b8 48 00 00       	call   c0019f54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156a2:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156a5:	83 f0 01             	xor    eax,0x1
c00156a8:	84 c0                	test   al,al
c00156aa:	0f 84 45 01 00 00    	je     c00157f5 <opcodeFault(regs*, void*)+0x541>
c00156b0:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156b3:	3c 01                	cmp    al,0x1
c00156b5:	0f 85 3a 01 00 00    	jne    c00157f5 <opcodeFault(regs*, void*)+0x541>
c00156bb:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156be:	83 f0 01             	xor    eax,0x1
c00156c1:	84 c0                	test   al,al
c00156c3:	0f 84 2c 01 00 00    	je     c00157f5 <opcodeFault(regs*, void*)+0x541>
c00156c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156cf:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156d2:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00156d9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156dc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156df:	89 c2                	mov    edx,eax
c00156e1:	b8 00 00 00 00       	mov    eax,0x0
c00156e6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156e9:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ef:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156f2:	ba 00 00 00 00       	mov    edx,0x0
c00156f7:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156fa:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015700:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015703:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015706:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001570d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015710:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015713:	89 c2                	mov    edx,eax
c0015715:	b8 00 00 00 00       	mov    eax,0x0
c001571a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001571d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015723:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015726:	ba 00 00 00 00       	mov    edx,0x0
c001572b:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001572e:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015731:	fa                   	cli    
c0015732:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015737:	40                   	inc    eax
c0015738:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001573d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015740:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015743:	8b 00                	mov    eax,DWORD PTR [eax]
c0015745:	89 c1                	mov    ecx,eax
c0015747:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001574a:	89 cb                	mov    ebx,ecx
c001574c:	89 d0                	mov    eax,edx
c001574e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015751:	89 c6                	mov    esi,eax
c0015753:	89 f0                	mov    eax,esi
c0015755:	09 d8                	or     eax,ebx
c0015757:	85 c0                	test   eax,eax
c0015759:	75 21                	jne    c001577c <opcodeFault(regs*, void*)+0x4c8>
c001575b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001575e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015761:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015764:	89 01                	mov    DWORD PTR [ecx],eax
c0015766:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001576f:	83 c8 40             	or     eax,0x40
c0015772:	89 c2                	mov    edx,eax
c0015774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015777:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001577a:	eb 3e                	jmp    c00157ba <opcodeFault(regs*, void*)+0x506>
c001577c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001577f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015782:	8b 00                	mov    eax,DWORD PTR [eax]
c0015784:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015787:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001578a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001578d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015790:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015793:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015796:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015799:	89 d0                	mov    eax,edx
c001579b:	31 d2                	xor    edx,edx
c001579d:	89 c3                	mov    ebx,eax
c001579f:	89 d6                	mov    esi,edx
c00157a1:	89 da                	mov    edx,ebx
c00157a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157af:	83 e0 bf             	and    eax,0xffffffbf
c00157b2:	89 c2                	mov    edx,eax
c00157b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157ba:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00157bf:	48                   	dec    eax
c00157c0:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c00157c5:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00157ca:	85 c0                	test   eax,eax
c00157cc:	75 01                	jne    c00157cf <opcodeFault(regs*, void*)+0x51b>
c00157ce:	fb                   	sti    
c00157cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157d5:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157d8:	01 c2                	add    edx,eax
c00157da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157e0:	83 ec 0c             	sub    esp,0xc
c00157e3:	68 be bb 02 c0       	push   0xc002bbbe
c00157e8:	e8 b2 d6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00157ed:	83 c4 10             	add    esp,0x10
c00157f0:	e9 d5 00 00 00       	jmp    c00158ca <opcodeFault(regs*, void*)+0x616>
c00157f5:	83 ec 0c             	sub    esp,0xc
c00157f8:	68 d1 bb 02 c0       	push   0xc002bbd1
c00157fd:	e8 9d d6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0015802:	83 c4 10             	add    esp,0x10
c0015805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015808:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001580b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015811:	c1 e0 04             	shl    eax,0x4
c0015814:	01 d0                	add    eax,edx
c0015816:	83 c0 03             	add    eax,0x3
c0015819:	8a 00                	mov    al,BYTE PTR [eax]
c001581b:	0f b6 d8             	movzx  ebx,al
c001581e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015821:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015827:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001582a:	c1 e0 04             	shl    eax,0x4
c001582d:	01 d0                	add    eax,edx
c001582f:	83 c0 02             	add    eax,0x2
c0015832:	8a 00                	mov    al,BYTE PTR [eax]
c0015834:	0f b6 c8             	movzx  ecx,al
c0015837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001583d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015840:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015843:	c1 e0 04             	shl    eax,0x4
c0015846:	01 d0                	add    eax,edx
c0015848:	40                   	inc    eax
c0015849:	8a 00                	mov    al,BYTE PTR [eax]
c001584b:	0f b6 d0             	movzx  edx,al
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001585a:	c1 e0 04             	shl    eax,0x4
c001585d:	01 f0                	add    eax,esi
c001585f:	8a 00                	mov    al,BYTE PTR [eax]
c0015861:	0f b6 c0             	movzx  eax,al
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	53                   	push   ebx
c0015868:	51                   	push   ecx
c0015869:	52                   	push   edx
c001586a:	50                   	push   eax
c001586b:	68 e4 bb 02 c0       	push   0xc002bbe4
c0015870:	e8 2a d6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0015875:	83 c4 20             	add    esp,0x20
c0015878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001587e:	83 c0 03             	add    eax,0x3
c0015881:	8a 00                	mov    al,BYTE PTR [eax]
c0015883:	0f b6 d8             	movzx  ebx,al
c0015886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015889:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001588c:	83 c0 02             	add    eax,0x2
c001588f:	8a 00                	mov    al,BYTE PTR [eax]
c0015891:	0f b6 c8             	movzx  ecx,al
c0015894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015897:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001589a:	40                   	inc    eax
c001589b:	8a 00                	mov    al,BYTE PTR [eax]
c001589d:	0f b6 d0             	movzx  edx,al
c00158a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158a6:	8a 00                	mov    al,BYTE PTR [eax]
c00158a8:	0f b6 c0             	movzx  eax,al
c00158ab:	83 ec 0c             	sub    esp,0xc
c00158ae:	53                   	push   ebx
c00158af:	51                   	push   ecx
c00158b0:	52                   	push   edx
c00158b1:	50                   	push   eax
c00158b2:	68 0c bc 02 c0       	push   0xc002bc0c
c00158b7:	e8 e3 d5 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00158bc:	83 c4 20             	add    esp,0x20
c00158bf:	83 ec 0c             	sub    esp,0xc
c00158c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158c5:	e8 54 f4 ff ff       	call   c0014d1e <displayDebugInfo(regs*)>
c00158ca:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158cd:	5b                   	pop    ebx
c00158ce:	5e                   	pop    esi
c00158cf:	5d                   	pop    ebp
c00158d0:	c3                   	ret    

c00158d1 <displayProgramFault(char const*)>:
c00158d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158d9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00158df:	85 c0                	test   eax,eax
c00158e1:	74 15                	je     c00158f8 <displayProgramFault(char const*)+0x27>
c00158e3:	83 ec 0c             	sub    esp,0xc
c00158e6:	6a 04                	push   0x4
c00158e8:	6a 0f                	push   0xf
c00158ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158ee:	50                   	push   eax
c00158ef:	e8 9c b4 ff ff       	call   c0010d90 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158f4:	83 c4 1c             	add    esp,0x1c
c00158f7:	c3                   	ret    
c00158f8:	c3                   	ret    

c00158f9 <setupInterruptController()>:
c00158f9:	55                   	push   ebp
c00158fa:	89 e5                	mov    ebp,esp
c00158fc:	53                   	push   ebx
c00158fd:	83 ec 24             	sub    esp,0x24
c0015900:	b8 00 00 00 00       	mov    eax,0x0
c0015905:	85 c0                	test   eax,eax
c0015907:	0f 95 c0             	setne  al
c001590a:	84 c0                	test   al,al
c001590c:	74 5b                	je     c0015969 <setupInterruptController()+0x70>
c001590e:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015915:	83 ec 0c             	sub    esp,0xc
c0015918:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001591b:	e8 d4 9f ff ff       	call   c000f8f4 <malloc>
c0015920:	83 c4 10             	add    esp,0x10
c0015923:	89 c3                	mov    ebx,eax
c0015925:	83 ec 0c             	sub    esp,0xc
c0015928:	53                   	push   ebx
c0015929:	e8 d6 09 01 00       	call   c0026304 <APIC::APIC()>
c001592e:	83 c4 10             	add    esp,0x10
c0015931:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015934:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015937:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001593a:	8b 00                	mov    eax,DWORD PTR [eax]
c001593c:	83 c0 08             	add    eax,0x8
c001593f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015941:	6a 00                	push   0x0
c0015943:	6a 00                	push   0x0
c0015945:	6a 00                	push   0x0
c0015947:	52                   	push   edx
c0015948:	ff d0                	call   eax
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0015952:	83 ec 08             	sub    esp,0x8
c0015955:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015958:	50                   	push   eax
c0015959:	e8 62 e9 ff ff       	call   c00142c0 <Device::addChild(Device*)>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015964:	e9 89 03 00 00       	jmp    c0015cf2 <setupInterruptController()+0x3f9>
c0015969:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c001596e:	84 c0                	test   al,al
c0015970:	75 24                	jne    c0015996 <setupInterruptController()+0x9d>
c0015972:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0015977:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001597d:	83 e2 fe             	and    edx,0xfffffffe
c0015980:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015986:	83 ec 0c             	sub    esp,0xc
c0015989:	68 31 bc 02 c0       	push   0xc002bc31
c001598e:	e8 0c d5 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0015993:	83 c4 10             	add    esp,0x10
c0015996:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001599b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159a1:	83 e0 01             	and    eax,0x1
c00159a4:	84 c0                	test   al,al
c00159a6:	0f 95 c0             	setne  al
c00159a9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159ac:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159b3:	83 ec 0c             	sub    esp,0xc
c00159b6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159b9:	e8 36 9f ff ff       	call   c000f8f4 <malloc>
c00159be:	83 c4 10             	add    esp,0x10
c00159c1:	89 c3                	mov    ebx,eax
c00159c3:	83 ec 0c             	sub    esp,0xc
c00159c6:	53                   	push   ebx
c00159c7:	e8 90 0e 01 00       	call   c002685c <PIC::PIC()>
c00159cc:	83 c4 10             	add    esp,0x10
c00159cf:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159d2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00159da:	83 c0 08             	add    eax,0x8
c00159dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00159df:	6a 00                	push   0x0
c00159e1:	6a 00                	push   0x0
c00159e3:	6a 00                	push   0x0
c00159e5:	52                   	push   edx
c00159e6:	ff d0                	call   eax
c00159e8:	83 c4 10             	add    esp,0x10
c00159eb:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159ef:	74 73                	je     c0015a64 <setupInterruptController()+0x16b>
c00159f1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f9:	83 c0 0c             	add    eax,0xc
c00159fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fe:	6a 00                	push   0x0
c0015a00:	6a 00                	push   0x0
c0015a02:	6a 00                	push   0x0
c0015a04:	52                   	push   edx
c0015a05:	ff d0                	call   eax
c0015a07:	83 c4 10             	add    esp,0x10
c0015a0a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a0e:	74 15                	je     c0015a25 <setupInterruptController()+0x12c>
c0015a10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a13:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a15:	83 c0 04             	add    eax,0x4
c0015a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1a:	83 ec 0c             	sub    esp,0xc
c0015a1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a20:	ff d0                	call   eax
c0015a22:	83 c4 10             	add    esp,0x10
c0015a25:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a2c:	83 ec 0c             	sub    esp,0xc
c0015a2f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a32:	e8 bd 9e ff ff       	call   c000f8f4 <malloc>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	89 c3                	mov    ebx,eax
c0015a3c:	83 ec 0c             	sub    esp,0xc
c0015a3f:	53                   	push   ebx
c0015a40:	e8 bf 08 01 00       	call   c0026304 <APIC::APIC()>
c0015a45:	83 c4 10             	add    esp,0x10
c0015a48:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a4b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a53:	83 c0 08             	add    eax,0x8
c0015a56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a58:	6a 00                	push   0x0
c0015a5a:	6a 00                	push   0x0
c0015a5c:	6a 00                	push   0x0
c0015a5e:	52                   	push   edx
c0015a5f:	ff d0                	call   eax
c0015a61:	83 c4 10             	add    esp,0x10
c0015a64:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0015a69:	83 ec 08             	sub    esp,0x8
c0015a6c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6f:	50                   	push   eax
c0015a70:	e8 4b e8 ff ff       	call   c00142c0 <Device::addChild(Device*)>
c0015a75:	83 c4 10             	add    esp,0x10
c0015a78:	c7 05 48 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f248,0x0
c0015a82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a87:	83 c0 24             	add    eax,0x24
c0015a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a8c:	6a 00                	push   0x0
c0015a8e:	68 95 52 01 c0       	push   0xc0015295
c0015a93:	6a 00                	push   0x0
c0015a95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a98:	ff d0                	call   eax
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa2:	83 c0 24             	add    eax,0x24
c0015aa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa7:	6a 00                	push   0x0
c0015aa9:	68 95 52 01 c0       	push   0xc0015295
c0015aae:	6a 01                	push   0x1
c0015ab0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab3:	ff d0                	call   eax
c0015ab5:	83 c4 10             	add    esp,0x10
c0015ab8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abd:	83 c0 24             	add    eax,0x24
c0015ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac2:	6a 00                	push   0x0
c0015ac4:	68 7b 4b 01 c0       	push   0xc0014b7b
c0015ac9:	6a 02                	push   0x2
c0015acb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ace:	ff d0                	call   eax
c0015ad0:	83 c4 10             	add    esp,0x10
c0015ad3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad8:	83 c0 24             	add    eax,0x24
c0015adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015add:	6a 00                	push   0x0
c0015adf:	68 95 52 01 c0       	push   0xc0015295
c0015ae4:	6a 03                	push   0x3
c0015ae6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae9:	ff d0                	call   eax
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af3:	83 c0 24             	add    eax,0x24
c0015af6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af8:	6a 00                	push   0x0
c0015afa:	68 95 52 01 c0       	push   0xc0015295
c0015aff:	6a 04                	push   0x4
c0015b01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b04:	ff d0                	call   eax
c0015b06:	83 c4 10             	add    esp,0x10
c0015b09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0e:	83 c0 24             	add    eax,0x24
c0015b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b13:	6a 00                	push   0x0
c0015b15:	68 95 52 01 c0       	push   0xc0015295
c0015b1a:	6a 05                	push   0x5
c0015b1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1f:	ff d0                	call   eax
c0015b21:	83 c4 10             	add    esp,0x10
c0015b24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b29:	83 c0 24             	add    eax,0x24
c0015b2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2e:	6a 00                	push   0x0
c0015b30:	68 b4 52 01 c0       	push   0xc00152b4
c0015b35:	6a 06                	push   0x6
c0015b37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3a:	ff d0                	call   eax
c0015b3c:	83 c4 10             	add    esp,0x10
c0015b3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b44:	83 c0 24             	add    eax,0x24
c0015b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b49:	6a 00                	push   0x0
c0015b4b:	68 ad 51 01 c0       	push   0xc00151ad
c0015b50:	6a 07                	push   0x7
c0015b52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b55:	ff d0                	call   eax
c0015b57:	83 c4 10             	add    esp,0x10
c0015b5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5f:	83 c0 24             	add    eax,0x24
c0015b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b64:	6a 00                	push   0x0
c0015b66:	68 96 49 01 c0       	push   0xc0014996
c0015b6b:	6a 08                	push   0x8
c0015b6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b70:	ff d0                	call   eax
c0015b72:	83 c4 10             	add    esp,0x10
c0015b75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7a:	83 c0 24             	add    eax,0x24
c0015b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7f:	6a 00                	push   0x0
c0015b81:	68 95 52 01 c0       	push   0xc0015295
c0015b86:	6a 09                	push   0x9
c0015b88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8b:	ff d0                	call   eax
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b95:	83 c0 24             	add    eax,0x24
c0015b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9a:	6a 00                	push   0x0
c0015b9c:	68 95 52 01 c0       	push   0xc0015295
c0015ba1:	6a 0a                	push   0xa
c0015ba3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba6:	ff d0                	call   eax
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb0:	83 c0 24             	add    eax,0x24
c0015bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb5:	6a 00                	push   0x0
c0015bb7:	68 95 52 01 c0       	push   0xc0015295
c0015bbc:	6a 0b                	push   0xb
c0015bbe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc1:	ff d0                	call   eax
c0015bc3:	83 c4 10             	add    esp,0x10
c0015bc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcb:	83 c0 24             	add    eax,0x24
c0015bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd0:	6a 00                	push   0x0
c0015bd2:	68 95 52 01 c0       	push   0xc0015295
c0015bd7:	6a 0c                	push   0xc
c0015bd9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bdc:	ff d0                	call   eax
c0015bde:	83 c4 10             	add    esp,0x10
c0015be1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be6:	83 c0 24             	add    eax,0x24
c0015be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015beb:	6a 00                	push   0x0
c0015bed:	68 20 52 01 c0       	push   0xc0015220
c0015bf2:	6a 0d                	push   0xd
c0015bf4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf7:	ff d0                	call   eax
c0015bf9:	83 c4 10             	add    esp,0x10
c0015bfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c01:	83 c0 24             	add    eax,0x24
c0015c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c06:	6a 00                	push   0x0
c0015c08:	68 59 52 01 c0       	push   0xc0015259
c0015c0d:	6a 0e                	push   0xe
c0015c0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c12:	ff d0                	call   eax
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1c:	83 c0 24             	add    eax,0x24
c0015c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c21:	6a 00                	push   0x0
c0015c23:	68 95 52 01 c0       	push   0xc0015295
c0015c28:	6a 0f                	push   0xf
c0015c2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2d:	ff d0                	call   eax
c0015c2f:	83 c4 10             	add    esp,0x10
c0015c32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c37:	83 c0 24             	add    eax,0x24
c0015c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3c:	6a 00                	push   0x0
c0015c3e:	68 95 52 01 c0       	push   0xc0015295
c0015c43:	6a 10                	push   0x10
c0015c45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c48:	ff d0                	call   eax
c0015c4a:	83 c4 10             	add    esp,0x10
c0015c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c52:	83 c0 24             	add    eax,0x24
c0015c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c57:	6a 00                	push   0x0
c0015c59:	68 95 52 01 c0       	push   0xc0015295
c0015c5e:	6a 11                	push   0x11
c0015c60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c63:	ff d0                	call   eax
c0015c65:	83 c4 10             	add    esp,0x10
c0015c68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6d:	83 c0 24             	add    eax,0x24
c0015c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c72:	6a 00                	push   0x0
c0015c74:	68 95 52 01 c0       	push   0xc0015295
c0015c79:	6a 12                	push   0x12
c0015c7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7e:	ff d0                	call   eax
c0015c80:	83 c4 10             	add    esp,0x10
c0015c83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c88:	83 c0 24             	add    eax,0x24
c0015c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8d:	6a 00                	push   0x0
c0015c8f:	68 95 52 01 c0       	push   0xc0015295
c0015c94:	6a 13                	push   0x13
c0015c96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c99:	ff d0                	call   eax
c0015c9b:	83 c4 10             	add    esp,0x10
c0015c9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca3:	83 c0 24             	add    eax,0x24
c0015ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca8:	6a 00                	push   0x0
c0015caa:	68 95 52 01 c0       	push   0xc0015295
c0015caf:	6a 14                	push   0x14
c0015cb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb4:	ff d0                	call   eax
c0015cb6:	83 c4 10             	add    esp,0x10
c0015cb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbe:	83 c0 24             	add    eax,0x24
c0015cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc3:	6a 00                	push   0x0
c0015cc5:	68 95 52 01 c0       	push   0xc0015295
c0015cca:	6a 1e                	push   0x1e
c0015ccc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ccf:	ff d0                	call   eax
c0015cd1:	83 c4 10             	add    esp,0x10
c0015cd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd9:	83 c0 24             	add    eax,0x24
c0015cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cde:	6a 00                	push   0x0
c0015ce0:	68 80 cc 01 c0       	push   0xc001cc80
c0015ce5:	6a 60                	push   0x60
c0015ce7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cea:	ff d0                	call   eax
c0015cec:	83 c4 10             	add    esp,0x10
c0015cef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cf5:	c9                   	leave  
c0015cf6:	c3                   	ret    
c0015cf7:	90                   	nop

c0015cf8 <InterruptController::convertLegacyIRQNumber(int)>:
c0015cf8:	55                   	push   ebp
c0015cf9:	89 e5                	mov    ebp,esp
c0015cfb:	83 ec 08             	sub    esp,0x8
c0015cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d01:	83 ec 0c             	sub    esp,0xc
c0015d04:	50                   	push   eax
c0015d05:	e8 a2 e8 ff ff       	call   c00145ac <Device::getName()>
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	8a 00                	mov    al,BYTE PTR [eax]
c0015d0f:	3c 41                	cmp    al,0x41
c0015d11:	0f 94 c0             	sete   al
c0015d14:	84 c0                	test   al,al
c0015d16:	74 28                	je     c0015d40 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d18:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d1c:	7f 12                	jg     c0015d30 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d21:	05 00 e3 02 c0       	add    eax,0xc002e300
c0015d26:	8a 00                	mov    al,BYTE PTR [eax]
c0015d28:	0f b6 c0             	movzx  eax,al
c0015d2b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d2e:	eb 10                	jmp    c0015d40 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d30:	83 ec 0c             	sub    esp,0xc
c0015d33:	68 20 b9 02 c0       	push   0xc002b920
c0015d38:	e8 4a 4b 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0015d3d:	83 c4 10             	add    esp,0x10
c0015d40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d43:	c9                   	leave  
c0015d44:	c3                   	ret    
c0015d45:	90                   	nop

c0015d46 <startGUI(void*)>:
c0015d46:	55                   	push   ebp
c0015d47:	89 e5                	mov    ebp,esp
c0015d49:	53                   	push   ebx
c0015d4a:	83 ec 04             	sub    esp,0x4
c0015d4d:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015d52:	48                   	dec    eax
c0015d53:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015d58:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015d5d:	85 c0                	test   eax,eax
c0015d5f:	75 01                	jne    c0015d62 <startGUI(void*)+0x1c>
c0015d61:	fb                   	sti    
c0015d62:	8b 1d a8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0a8
c0015d68:	83 ec 08             	sub    esp,0x8
c0015d6b:	6a 01                	push   0x1
c0015d6d:	68 94 bc 02 c0       	push   0xc002bc94
c0015d72:	e8 e4 7e 00 00       	call   c001dc5b <Thr::loadDLL(char const*, bool)>
c0015d77:	83 c4 10             	add    esp,0x10
c0015d7a:	83 ec 08             	sub    esp,0x8
c0015d7d:	53                   	push   ebx
c0015d7e:	50                   	push   eax
c0015d7f:	e8 02 81 00 00       	call   c001de86 <Thr::executeDLL(unsigned long, void*)>
c0015d84:	83 c4 10             	add    esp,0x10
c0015d87:	8b 1d a8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0a8
c0015d8d:	83 ec 08             	sub    esp,0x8
c0015d90:	6a 01                	push   0x1
c0015d92:	68 ae bc 02 c0       	push   0xc002bcae
c0015d97:	e8 bf 7e 00 00       	call   c001dc5b <Thr::loadDLL(char const*, bool)>
c0015d9c:	83 c4 10             	add    esp,0x10
c0015d9f:	83 ec 08             	sub    esp,0x8
c0015da2:	53                   	push   ebx
c0015da3:	50                   	push   eax
c0015da4:	e8 dd 80 00 00       	call   c001de86 <Thr::executeDLL(unsigned long, void*)>
c0015da9:	83 c4 10             	add    esp,0x10
c0015dac:	90                   	nop
c0015dad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015db0:	c9                   	leave  
c0015db1:	c3                   	ret    

c0015db2 <startGUIVESA(void*)>:
c0015db2:	55                   	push   ebp
c0015db3:	89 e5                	mov    ebp,esp
c0015db5:	53                   	push   ebx
c0015db6:	83 ec 04             	sub    esp,0x4
c0015db9:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015dbe:	48                   	dec    eax
c0015dbf:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015dc4:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015dc9:	85 c0                	test   eax,eax
c0015dcb:	75 01                	jne    c0015dce <startGUIVESA(void*)+0x1c>
c0015dcd:	fb                   	sti    
c0015dce:	8b 1d a8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0a8
c0015dd4:	83 ec 08             	sub    esp,0x8
c0015dd7:	6a 01                	push   0x1
c0015dd9:	68 c8 bc 02 c0       	push   0xc002bcc8
c0015dde:	e8 78 7e 00 00       	call   c001dc5b <Thr::loadDLL(char const*, bool)>
c0015de3:	83 c4 10             	add    esp,0x10
c0015de6:	83 ec 08             	sub    esp,0x8
c0015de9:	53                   	push   ebx
c0015dea:	50                   	push   eax
c0015deb:	e8 96 80 00 00       	call   c001de86 <Thr::executeDLL(unsigned long, void*)>
c0015df0:	83 c4 10             	add    esp,0x10
c0015df3:	8b 1d a8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0a8
c0015df9:	83 ec 08             	sub    esp,0x8
c0015dfc:	6a 01                	push   0x1
c0015dfe:	68 ae bc 02 c0       	push   0xc002bcae
c0015e03:	e8 53 7e 00 00       	call   c001dc5b <Thr::loadDLL(char const*, bool)>
c0015e08:	83 c4 10             	add    esp,0x10
c0015e0b:	83 ec 08             	sub    esp,0x8
c0015e0e:	53                   	push   ebx
c0015e0f:	50                   	push   eax
c0015e10:	e8 71 80 00 00       	call   c001de86 <Thr::executeDLL(unsigned long, void*)>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	90                   	nop
c0015e19:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e1c:	c9                   	leave  
c0015e1d:	c3                   	ret    

c0015e1e <sendKeyToTerminal(unsigned char)>:
c0015e1e:	55                   	push   ebp
c0015e1f:	89 e5                	mov    ebp,esp
c0015e21:	83 ec 28             	sub    esp,0x28
c0015e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e27:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e2a:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c0015e2f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e33:	83 ec 08             	sub    esp,0x8
c0015e36:	52                   	push   edx
c0015e37:	50                   	push   eax
c0015e38:	e8 2b b4 ff ff       	call   c0011268 <VgaText::receiveKey(unsigned char)>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e44:	0f 85 8f 00 00 00    	jne    c0015ed9 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e4a:	fa                   	cli    
c0015e4b:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015e50:	40                   	inc    eax
c0015e51:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015e56:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c0015e5b:	40                   	inc    eax
c0015e5c:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c0015e61:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c0015e66:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e69:	c7 05 60 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f260,0x0
c0015e73:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e77:	74 1f                	je     c0015e98 <sendKeyToTerminal(unsigned char)+0x7a>
c0015e79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e7c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e85:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e88:	83 ec 0c             	sub    esp,0xc
c0015e8b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e8e:	e8 6b 8c 00 00       	call   c001eafe <unblockTask(ThreadControlBlock*)>
c0015e93:	83 c4 10             	add    esp,0x10
c0015e96:	eb db                	jmp    c0015e73 <sendKeyToTerminal(unsigned char)+0x55>
c0015e98:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c0015e9d:	48                   	dec    eax
c0015e9e:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c0015ea3:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c0015ea8:	85 c0                	test   eax,eax
c0015eaa:	75 18                	jne    c0015ec4 <sendKeyToTerminal(unsigned char)+0xa6>
c0015eac:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c0015eb1:	85 c0                	test   eax,eax
c0015eb3:	74 0f                	je     c0015ec4 <sendKeyToTerminal(unsigned char)+0xa6>
c0015eb5:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c0015ebf:	e8 76 87 00 00       	call   c001e63a <schedule()>
c0015ec4:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015ec9:	48                   	dec    eax
c0015eca:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0015ecf:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0015ed4:	85 c0                	test   eax,eax
c0015ed6:	75 01                	jne    c0015ed9 <sendKeyToTerminal(unsigned char)+0xbb>
c0015ed8:	fb                   	sti    
c0015ed9:	90                   	nop
c0015eda:	c9                   	leave  
c0015edb:	c3                   	ret    

c0015edc <sendKeyboardToken(KeyboardToken)>:
c0015edc:	55                   	push   ebp
c0015edd:	89 e5                	mov    ebp,esp
c0015edf:	83 ec 18             	sub    esp,0x18
c0015ee2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee8:	0f b7 c0             	movzx  eax,ax
c0015eeb:	83 f2 01             	xor    edx,0x1
c0015eee:	88 90 80 f2 02 c0    	mov    BYTE PTR [eax-0x3ffd0d80],dl
c0015ef4:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0015ef9:	85 c0                	test   eax,eax
c0015efb:	74 24                	je     c0015f21 <sendKeyboardToken(KeyboardToken)+0x45>
c0015efd:	8b 0d 68 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f268
c0015f03:	83 ec 04             	sub    esp,0x4
c0015f06:	68 80 f2 02 c0       	push   0xc002f280
c0015f0b:	83 ec 08             	sub    esp,0x8
c0015f0e:	89 e2                	mov    edx,esp
c0015f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f13:	89 02                	mov    DWORD PTR [edx],eax
c0015f15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f18:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f1c:	ff d1                	call   ecx
c0015f1e:	83 c4 10             	add    esp,0x10
c0015f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f24:	66 3d 03 02          	cmp    ax,0x203
c0015f28:	75 07                	jne    c0015f31 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f2a:	a0 80 f3 02 c0       	mov    al,ds:0xc002f380
c0015f2f:	84 c0                	test   al,al
c0015f31:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f35:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f38:	a0 88 f6 02 c0       	mov    al,ds:0xc002f688
c0015f3d:	38 c2                	cmp    dl,al
c0015f3f:	74 1c                	je     c0015f5d <sendKeyboardToken(KeyboardToken)+0x81>
c0015f41:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f44:	a2 88 f6 02 c0       	mov    ds:0xc002f688,al
c0015f49:	a0 88 f6 02 c0       	mov    al,ds:0xc002f688
c0015f4e:	0f b6 c0             	movzx  eax,al
c0015f51:	83 ec 0c             	sub    esp,0xc
c0015f54:	50                   	push   eax
c0015f55:	e8 96 a6 ff ff       	call   c00105f0 <setTerminalScrollLock(bool)>
c0015f5a:	83 c4 10             	add    esp,0x10
c0015f5d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f60:	84 c0                	test   al,al
c0015f62:	0f 84 ae 00 00 00    	je     c0016016 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6b:	66 3d 10 03          	cmp    ax,0x310
c0015f6f:	75 06                	jne    c0015f77 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f71:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7a:	66 3d 11 03          	cmp    ax,0x311
c0015f7e:	75 06                	jne    c0015f86 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f80:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f89:	66 3d 12 03          	cmp    ax,0x312
c0015f8d:	75 06                	jne    c0015f95 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f8f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f98:	66 3d 13 03          	cmp    ax,0x313
c0015f9c:	75 06                	jne    c0015fa4 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f9e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa7:	66 3d 14 03          	cmp    ax,0x314
c0015fab:	75 06                	jne    c0015fb3 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015fad:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb6:	66 3d 15 03          	cmp    ax,0x315
c0015fba:	75 06                	jne    c0015fc2 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015fbc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc5:	66 3d 16 03          	cmp    ax,0x316
c0015fc9:	75 06                	jne    c0015fd1 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fcb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd4:	66 3d 17 03          	cmp    ax,0x317
c0015fd8:	75 06                	jne    c0015fe0 <sendKeyboardToken(KeyboardToken)+0x104>
c0015fda:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe3:	66 3d 18 03          	cmp    ax,0x318
c0015fe7:	75 06                	jne    c0015fef <sendKeyboardToken(KeyboardToken)+0x113>
c0015fe9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff2:	66 3d 19 03          	cmp    ax,0x319
c0015ff6:	75 06                	jne    c0015ffe <sendKeyboardToken(KeyboardToken)+0x122>
c0015ff8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015ffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016001:	66 3d 1a 03          	cmp    ax,0x31a
c0016005:	0f 85 c9 00 00 00    	jne    c00160d4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001600b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016011:	e9 be 00 00 00       	jmp    c00160d4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016019:	66 3d 10 03          	cmp    ax,0x310
c001601d:	75 0a                	jne    c0016029 <sendKeyboardToken(KeyboardToken)+0x14d>
c001601f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016025:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602c:	66 3d 11 03          	cmp    ax,0x311
c0016030:	75 0a                	jne    c001603c <sendKeyboardToken(KeyboardToken)+0x160>
c0016032:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016038:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001603c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603f:	66 3d 12 03          	cmp    ax,0x312
c0016043:	75 0a                	jne    c001604f <sendKeyboardToken(KeyboardToken)+0x173>
c0016045:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001604b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016052:	66 3d 13 03          	cmp    ax,0x313
c0016056:	75 0a                	jne    c0016062 <sendKeyboardToken(KeyboardToken)+0x186>
c0016058:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001605e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016065:	66 3d 14 03          	cmp    ax,0x314
c0016069:	75 0a                	jne    c0016075 <sendKeyboardToken(KeyboardToken)+0x199>
c001606b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016071:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016078:	66 3d 15 03          	cmp    ax,0x315
c001607c:	75 0a                	jne    c0016088 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001607e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016084:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608b:	66 3d 16 03          	cmp    ax,0x316
c001608f:	75 0a                	jne    c001609b <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016091:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016097:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001609b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609e:	66 3d 17 03          	cmp    ax,0x317
c00160a2:	75 0a                	jne    c00160ae <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160a4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b1:	66 3d 18 03          	cmp    ax,0x318
c00160b5:	75 0a                	jne    c00160c1 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00160b7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00160bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c4:	66 3d 19 03          	cmp    ax,0x319
c00160c8:	75 0a                	jne    c00160d4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160ca:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d7:	66 3d 00 02          	cmp    ax,0x200
c00160db:	75 2c                	jne    c0016109 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160dd:	a0 80 f6 02 c0       	mov    al,ds:0xc002f680
c00160e2:	83 f0 01             	xor    eax,0x1
c00160e5:	84 c0                	test   al,al
c00160e7:	74 20                	je     c0016109 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160e9:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c00160ee:	6a 01                	push   0x1
c00160f0:	6a 00                	push   0x0
c00160f2:	68 46 5d 01 c0       	push   0xc0015d46
c00160f7:	50                   	push   eax
c00160f8:	e8 f9 82 00 00       	call   c001e3f6 <Process::createThread(void (*)(void*), void*, int)>
c00160fd:	83 c4 10             	add    esp,0x10
c0016100:	c6 05 80 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f680,0x1
c0016107:	eb 33                	jmp    c001613c <sendKeyboardToken(KeyboardToken)+0x260>
c0016109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610c:	66 3d 01 02          	cmp    ax,0x201
c0016110:	75 2a                	jne    c001613c <sendKeyboardToken(KeyboardToken)+0x260>
c0016112:	a0 80 f6 02 c0       	mov    al,ds:0xc002f680
c0016117:	83 f0 01             	xor    eax,0x1
c001611a:	84 c0                	test   al,al
c001611c:	74 1e                	je     c001613c <sendKeyboardToken(KeyboardToken)+0x260>
c001611e:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0016123:	6a 01                	push   0x1
c0016125:	6a 00                	push   0x0
c0016127:	68 b2 5d 01 c0       	push   0xc0015db2
c001612c:	50                   	push   eax
c001612d:	e8 c4 82 00 00       	call   c001e3f6 <Process::createThread(void (*)(void*), void*, int)>
c0016132:	83 c4 10             	add    esp,0x10
c0016135:	c6 05 80 f6 02 c0 01 	mov    BYTE PTR ds:0xc002f680,0x1
c001613c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613f:	66 3d 1d 03          	cmp    ax,0x31d
c0016143:	75 06                	jne    c001614b <sendKeyboardToken(KeyboardToken)+0x26f>
c0016145:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001614b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614e:	66 3d 1c 03          	cmp    ax,0x31c
c0016152:	75 06                	jne    c001615a <sendKeyboardToken(KeyboardToken)+0x27e>
c0016154:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001615a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615d:	66 3d 1b 03          	cmp    ax,0x31b
c0016161:	75 06                	jne    c0016169 <sendKeyboardToken(KeyboardToken)+0x28d>
c0016163:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616c:	66 3d 1e 03          	cmp    ax,0x31e
c0016170:	75 06                	jne    c0016178 <sendKeyboardToken(KeyboardToken)+0x29c>
c0016172:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617b:	66 3d 1f 03          	cmp    ax,0x31f
c001617f:	75 06                	jne    c0016187 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016181:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618a:	66 3d 1a 03          	cmp    ax,0x31a
c001618e:	75 06                	jne    c0016196 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016190:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016196:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001619a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001619d:	83 f0 01             	xor    eax,0x1
c00161a0:	84 c0                	test   al,al
c00161a2:	74 77                	je     c001621b <sendKeyboardToken(KeyboardToken)+0x33f>
c00161a4:	a0 81 f3 02 c0       	mov    al,ds:0xc002f381
c00161a9:	84 c0                	test   al,al
c00161ab:	74 41                	je     c00161ee <sendKeyboardToken(KeyboardToken)+0x312>
c00161ad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161b1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00161b5:	74 2b                	je     c00161e2 <sendKeyboardToken(KeyboardToken)+0x306>
c00161b7:	8b 15 84 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f684
c00161bd:	89 d0                	mov    eax,edx
c00161bf:	c1 e0 02             	shl    eax,0x2
c00161c2:	01 d0                	add    eax,edx
c00161c4:	01 c0                	add    eax,eax
c00161c6:	a3 84 f6 02 c0       	mov    ds:0xc002f684,eax
c00161cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ce:	0f b7 c0             	movzx  eax,ax
c00161d1:	8d 50 d0             	lea    edx,[eax-0x30]
c00161d4:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c00161d9:	01 d0                	add    eax,edx
c00161db:	a3 84 f6 02 c0       	mov    ds:0xc002f684,eax
c00161e0:	eb 6d                	jmp    c001624f <sendKeyboardToken(KeyboardToken)+0x373>
c00161e2:	c7 05 84 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f684,0x0
c00161ec:	eb 61                	jmp    c001624f <sendKeyboardToken(KeyboardToken)+0x373>
c00161ee:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c00161f3:	85 c0                	test   eax,eax
c00161f5:	74 18                	je     c001620f <sendKeyboardToken(KeyboardToken)+0x333>
c00161f7:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c00161fc:	0f b6 c0             	movzx  eax,al
c00161ff:	83 ec 0c             	sub    esp,0xc
c0016202:	50                   	push   eax
c0016203:	e8 16 fc ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c0016208:	83 c4 10             	add    esp,0x10
c001620b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001620f:	c7 05 84 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f684,0x0
c0016219:	eb 34                	jmp    c001624f <sendKeyboardToken(KeyboardToken)+0x373>
c001621b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621e:	66 3d 01 01          	cmp    ax,0x101
c0016222:	75 2b                	jne    c001624f <sendKeyboardToken(KeyboardToken)+0x373>
c0016224:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c0016229:	85 c0                	test   eax,eax
c001622b:	74 18                	je     c0016245 <sendKeyboardToken(KeyboardToken)+0x369>
c001622d:	a1 84 f6 02 c0       	mov    eax,ds:0xc002f684
c0016232:	0f b6 c0             	movzx  eax,al
c0016235:	83 ec 0c             	sub    esp,0xc
c0016238:	50                   	push   eax
c0016239:	e8 e0 fb ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c001623e:	83 c4 10             	add    esp,0x10
c0016241:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016245:	c7 05 84 f6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f684,0x0
c001624f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016252:	83 f0 01             	xor    eax,0x1
c0016255:	84 c0                	test   al,al
c0016257:	74 4c                	je     c00162a5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016259:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001625c:	83 f0 01             	xor    eax,0x1
c001625f:	84 c0                	test   al,al
c0016261:	74 42                	je     c00162a5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016263:	a0 80 f3 02 c0       	mov    al,ds:0xc002f380
c0016268:	83 f0 01             	xor    eax,0x1
c001626b:	84 c0                	test   al,al
c001626d:	74 36                	je     c00162a5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001626f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016272:	66 83 f8 1f          	cmp    ax,0x1f
c0016276:	76 09                	jbe    c0016281 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627b:	66 83 f8 7e          	cmp    ax,0x7e
c001627f:	76 12                	jbe    c0016293 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016284:	66 83 f8 0a          	cmp    ax,0xa
c0016288:	74 09                	je     c0016293 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001628a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628d:	66 83 f8 08          	cmp    ax,0x8
c0016291:	75 12                	jne    c00162a5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016296:	0f b6 c0             	movzx  eax,al
c0016299:	83 ec 0c             	sub    esp,0xc
c001629c:	50                   	push   eax
c001629d:	e8 7c fb ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00162a2:	83 c4 10             	add    esp,0x10
c00162a5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162a8:	83 f0 01             	xor    eax,0x1
c00162ab:	84 c0                	test   al,al
c00162ad:	74 4f                	je     c00162fe <sendKeyboardToken(KeyboardToken)+0x422>
c00162af:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162b2:	83 f0 01             	xor    eax,0x1
c00162b5:	84 c0                	test   al,al
c00162b7:	74 45                	je     c00162fe <sendKeyboardToken(KeyboardToken)+0x422>
c00162b9:	a0 80 f3 02 c0       	mov    al,ds:0xc002f380
c00162be:	84 c0                	test   al,al
c00162c0:	74 3c                	je     c00162fe <sendKeyboardToken(KeyboardToken)+0x422>
c00162c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c5:	66 83 f8 3f          	cmp    ax,0x3f
c00162c9:	76 33                	jbe    c00162fe <sendKeyboardToken(KeyboardToken)+0x422>
c00162cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ce:	66 83 f8 7f          	cmp    ax,0x7f
c00162d2:	77 2a                	ja     c00162fe <sendKeyboardToken(KeyboardToken)+0x422>
c00162d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d7:	88 c2                	mov    dl,al
c00162d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162dc:	66 83 f8 5f          	cmp    ax,0x5f
c00162e0:	76 04                	jbe    c00162e6 <sendKeyboardToken(KeyboardToken)+0x40a>
c00162e2:	b0 20                	mov    al,0x20
c00162e4:	eb 02                	jmp    c00162e8 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162e6:	b0 00                	mov    al,0x0
c00162e8:	29 c2                	sub    edx,eax
c00162ea:	88 d0                	mov    al,dl
c00162ec:	83 e8 40             	sub    eax,0x40
c00162ef:	0f b6 c0             	movzx  eax,al
c00162f2:	83 ec 0c             	sub    esp,0xc
c00162f5:	50                   	push   eax
c00162f6:	e8 23 fb ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00162fb:	83 c4 10             	add    esp,0x10
c00162fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016301:	66 3d 00 03          	cmp    ax,0x300
c0016305:	75 0f                	jne    c0016316 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016307:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001630a:	83 f0 01             	xor    eax,0x1
c001630d:	84 c0                	test   al,al
c001630f:	74 05                	je     c0016316 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016311:	e8 52 aa ff ff       	call   c0010d68 <doTerminalCycle()>
c0016316:	90                   	nop
c0016317:	c9                   	leave  
c0016318:	c3                   	ret    

c0016319 <clearInternalKeybuffer(VgaText*)>:
c0016319:	55                   	push   ebp
c001631a:	89 e5                	mov    ebp,esp
c001631c:	83 ec 08             	sub    esp,0x8
c001631f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016322:	05 98 01 00 00       	add    eax,0x198
c0016327:	83 ec 0c             	sub    esp,0xc
c001632a:	50                   	push   eax
c001632b:	e8 58 a4 fe ff       	call   c0000788 <strlen>
c0016330:	83 c4 10             	add    esp,0x10
c0016333:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016336:	81 c2 98 01 00 00    	add    edx,0x198
c001633c:	83 ec 04             	sub    esp,0x4
c001633f:	50                   	push   eax
c0016340:	6a 00                	push   0x0
c0016342:	52                   	push   edx
c0016343:	e8 24 a4 fe ff       	call   c000076c <memset>
c0016348:	83 c4 10             	add    esp,0x10
c001634b:	90                   	nop
c001634c:	c9                   	leave  
c001634d:	c3                   	ret    

c001634e <readKeyboard(VgaText*, char*, unsigned long)>:
c001634e:	55                   	push   ebp
c001634f:	89 e5                	mov    ebp,esp
c0016351:	83 ec 18             	sub    esp,0x18
c0016354:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0016359:	85 c0                	test   eax,eax
c001635b:	74 2a                	je     c0016387 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001635d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0016363:	8b 0d 68 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f268
c0016369:	83 ec 04             	sub    esp,0x4
c001636c:	68 80 f2 02 c0       	push   0xc002f280
c0016371:	83 ec 08             	sub    esp,0x8
c0016374:	89 e2                	mov    edx,esp
c0016376:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0016379:	89 02                	mov    DWORD PTR [edx],eax
c001637b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001637e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0016382:	ff d1                	call   ecx
c0016384:	83 c4 10             	add    esp,0x10
c0016387:	83 ec 0c             	sub    esp,0xc
c001638a:	68 e3 bc 02 c0       	push   0xc002bce3
c001638f:	e8 0b cb ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0016394:	83 c4 10             	add    esp,0x10
c0016397:	fb                   	sti    
c0016398:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001639f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163a3:	0f 84 a1 00 00 00    	je     c001644a <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c00163a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163ac:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163b2:	84 c0                	test   al,al
c00163b4:	75 28                	jne    c00163de <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c00163b6:	fa                   	cli    
c00163b7:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00163bc:	40                   	inc    eax
c00163bd:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c00163c2:	e8 73 82 00 00       	call   c001e63a <schedule()>
c00163c7:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00163cc:	48                   	dec    eax
c00163cd:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c00163d2:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00163d7:	85 c0                	test   eax,eax
c00163d9:	75 ce                	jne    c00163a9 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c00163db:	fb                   	sti    
c00163dc:	eb cb                	jmp    c00163a9 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c00163de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163e1:	8d 50 01             	lea    edx,[eax+0x1]
c00163e4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163ea:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c00163f0:	88 10                	mov    BYTE PTR [eax],dl
c00163f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163f5:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163fb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016401:	05 98 01 00 00       	add    eax,0x198
c0016406:	83 ec 0c             	sub    esp,0xc
c0016409:	50                   	push   eax
c001640a:	e8 79 a3 fe ff       	call   c0000788 <strlen>
c001640f:	83 c4 10             	add    esp,0x10
c0016412:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016415:	81 c2 98 01 00 00    	add    edx,0x198
c001641b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001641e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016421:	81 c2 98 01 00 00    	add    edx,0x198
c0016427:	83 ec 04             	sub    esp,0x4
c001642a:	50                   	push   eax
c001642b:	51                   	push   ecx
c001642c:	52                   	push   edx
c001642d:	e8 72 a2 fe ff       	call   c00006a4 <memmove>
c0016432:	83 c4 10             	add    esp,0x10
c0016435:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016438:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001643b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001643f:	0f 85 5a ff ff ff    	jne    c001639f <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0016445:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016448:	eb 03                	jmp    c001644d <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c001644a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001644d:	c9                   	leave  
c001644e:	c3                   	ret    
c001644f:	90                   	nop

c0016450 <Keyboard::Keyboard(char const*)>:
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016457:	83 ec 08             	sub    esp,0x8
c001645a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001645e:	50                   	push   eax
c001645f:	e8 4c e0 ff ff       	call   c00144b0 <Device::Device(char const*)>
c0016464:	83 c4 10             	add    esp,0x10
c0016467:	ba 04 bd 02 c0       	mov    edx,0xc002bd04
c001646c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016470:	89 10                	mov    DWORD PTR [eax],edx
c0016472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016476:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016480:	c6 05 64 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f264,0x1
c0016487:	90                   	nop
c0016488:	83 c4 0c             	add    esp,0xc
c001648b:	c3                   	ret    

c001648c <Keyboard::~Keyboard()>:
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	ba 04 bd 02 c0       	mov    edx,0xc002bd04
c0016494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016498:	89 10                	mov    DWORD PTR [eax],edx
c001649a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	50                   	push   eax
c00164a2:	e8 ff dc ff ff       	call   c00141a6 <Device::~Device()>
c00164a7:	83 c4 10             	add    esp,0x10
c00164aa:	90                   	nop
c00164ab:	83 c4 0c             	add    esp,0xc
c00164ae:	c3                   	ret    
c00164af:	90                   	nop

c00164b0 <Keyboard::~Keyboard()>:
c00164b0:	83 ec 0c             	sub    esp,0xc
c00164b3:	83 ec 0c             	sub    esp,0xc
c00164b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ba:	e8 cd ff ff ff       	call   c001648c <Keyboard::~Keyboard()>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	83 ec 08             	sub    esp,0x8
c00164c5:	68 5c 01 00 00       	push   0x15c
c00164ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ce:	e8 ec c8 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c00164d3:	83 c4 10             	add    esp,0x10
c00164d6:	83 c4 0c             	add    esp,0xc
c00164d9:	c3                   	ret    

c00164da <LogicalDisk::close(int, int, void*)>:
c00164da:	83 c8 ff             	or     eax,0xffffffff
c00164dd:	c3                   	ret    

c00164de <LogicalDisk::~LogicalDisk()>:
c00164de:	83 ec 0c             	sub    esp,0xc
c00164e1:	ba b4 bd 02 c0       	mov    edx,0xc002bdb4
c00164e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ea:	89 10                	mov    DWORD PTR [eax],edx
c00164ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	50                   	push   eax
c00164f4:	e8 ad dc ff ff       	call   c00141a6 <Device::~Device()>
c00164f9:	83 c4 10             	add    esp,0x10
c00164fc:	90                   	nop
c00164fd:	83 c4 0c             	add    esp,0xc
c0016500:	c3                   	ret    
c0016501:	90                   	nop

c0016502 <LogicalDisk::~LogicalDisk()>:
c0016502:	83 ec 0c             	sub    esp,0xc
c0016505:	83 ec 0c             	sub    esp,0xc
c0016508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001650c:	e8 cd ff ff ff       	call   c00164de <LogicalDisk::~LogicalDisk()>
c0016511:	83 c4 10             	add    esp,0x10
c0016514:	83 ec 08             	sub    esp,0x8
c0016517:	68 74 01 00 00       	push   0x174
c001651c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016520:	e8 9a c8 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	83 c4 0c             	add    esp,0xc
c001652b:	c3                   	ret    

c001652c <LogicalDisk::open(int, int, void*)>:
c001652c:	83 ec 18             	sub    esp,0x18
c001652f:	68 30 bd 02 c0       	push   0xc002bd30
c0016534:	e8 4e 43 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0016539:	83 c8 ff             	or     eax,0xffffffff
c001653c:	83 c4 1c             	add    esp,0x1c
c001653f:	c3                   	ret    

c0016540 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016540:	53                   	push   ebx
c0016541:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016549:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001654d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016553:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016559:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001655f:	77 10                	ja     c0016571 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016561:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016567:	89 d3                	mov    ebx,edx
c0016569:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001656f:	72 05                	jb     c0016576 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016571:	83 c8 ff             	or     eax,0xffffffff
c0016574:	89 c2                	mov    edx,eax
c0016576:	5b                   	pop    ebx
c0016577:	c3                   	ret    

c0016578 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016578:	56                   	push   esi
c0016579:	83 c8 ff             	or     eax,0xffffffff
c001657c:	53                   	push   ebx
c001657d:	89 c2                	mov    edx,eax
c001657f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016583:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016587:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001658b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016591:	77 27                	ja     c00165ba <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016593:	89 d8                	mov    eax,ebx
c0016595:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001659b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00165a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165a6:	89 c2                	mov    edx,eax
c00165a8:	73 10                	jae    c00165ba <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165aa:	89 c8                	mov    eax,ecx
c00165ac:	89 da                	mov    edx,ebx
c00165ae:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165b4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165ba:	5b                   	pop    ebx
c00165bb:	5e                   	pop    esi
c00165bc:	c3                   	ret    
c00165bd:	90                   	nop

c00165be <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165be:	83 ec 1c             	sub    esp,0x1c
c00165c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00165d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e4:	83 ec 08             	sub    esp,0x8
c00165e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165eb:	50                   	push   eax
c00165ec:	e8 bf de ff ff       	call   c00144b0 <Device::Device(char const*)>
c00165f1:	83 c4 10             	add    esp,0x10
c00165f4:	ba b4 bd 02 c0       	mov    edx,0xc002bdb4
c00165f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fd:	89 10                	mov    DWORD PTR [eax],edx
c00165ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016603:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001660a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016619:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016623:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016627:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001662b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001662f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016635:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001663b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001663f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016642:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016646:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001664c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016656:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001665a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016664:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001666e:	90                   	nop
c001666f:	83 c4 1c             	add    esp,0x1c
c0016672:	c3                   	ret    
c0016673:	90                   	nop

c0016674 <LogicalDisk::assignDriveLetter()>:
c0016674:	55                   	push   ebp
c0016675:	57                   	push   edi
c0016676:	56                   	push   esi
c0016677:	53                   	push   ebx
c0016678:	83 ec 14             	sub    esp,0x14
c001667b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001667f:	8b 3d a0 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f6a0
c0016685:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001668b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001668f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016695:	8b 3d a4 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f6a4
c001669b:	3c 01                	cmp    al,0x1
c001669d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00166a1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00166a5:	19 c0                	sbb    eax,eax
c00166a7:	83 e0 02             	and    eax,0x2
c00166aa:	83 c0 41             	add    eax,0x41
c00166ad:	0f be e8             	movsx  ebp,al
c00166b0:	3c 43                	cmp    al,0x43
c00166b2:	75 10                	jne    c00166c4 <LogicalDisk::assignDriveLetter()+0x50>
c00166b4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166bb:	75 5d                	jne    c001671a <LogicalDisk::assignDriveLetter()+0xa6>
c00166bd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166c2:	75 56                	jne    c001671a <LogicalDisk::assignDriveLetter()+0xa6>
c00166c4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166c7:	ba 01 00 00 00       	mov    edx,0x1
c00166cc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166d0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166d4:	d3 e2                	shl    edx,cl
c00166d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166da:	89 d7                	mov    edi,edx
c00166dc:	89 d6                	mov    esi,edx
c00166de:	c1 ff 1f             	sar    edi,0x1f
c00166e1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166e5:	21 f9                	and    ecx,edi
c00166e7:	09 d1                	or     ecx,edx
c00166e9:	75 2f                	jne    c001671a <LogicalDisk::assignDriveLetter()+0xa6>
c00166eb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166f3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166f9:	09 f2                	or     edx,esi
c00166fb:	89 15 a0 f6 02 c0    	mov    DWORD PTR ds:0xc002f6a0,edx
c0016701:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016705:	09 fa                	or     edx,edi
c0016707:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001670b:	89 15 a4 f6 02 c0    	mov    DWORD PTR ds:0xc002f6a4,edx
c0016711:	89 1c bd c0 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0940],ebx
c0016718:	eb 08                	jmp    c0016722 <LogicalDisk::assignDriveLetter()+0xae>
c001671a:	45                   	inc    ebp
c001671b:	40                   	inc    eax
c001671c:	3c 5b                	cmp    al,0x5b
c001671e:	75 90                	jne    c00166b0 <LogicalDisk::assignDriveLetter()+0x3c>
c0016720:	31 c0                	xor    eax,eax
c0016722:	83 c4 14             	add    esp,0x14
c0016725:	5b                   	pop    ebx
c0016726:	5e                   	pop    esi
c0016727:	5f                   	pop    edi
c0016728:	5d                   	pop    ebp
c0016729:	c3                   	ret    

c001672a <LogicalDisk::mount()>:
c001672a:	56                   	push   esi
c001672b:	53                   	push   ebx
c001672c:	50                   	push   eax
c001672d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016731:	8b 1d 34 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f234
c0016737:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016741:	85 db                	test   ebx,ebx
c0016743:	74 50                	je     c0016795 <LogicalDisk::mount()+0x6b>
c0016745:	50                   	push   eax
c0016746:	50                   	push   eax
c0016747:	ff 35 e8 25 03 c0    	push   DWORD PTR ds:0xc00325e8
c001674d:	68 54 bd 02 c0       	push   0xc002bd54
c0016752:	e8 48 c7 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0016757:	83 c4 0c             	add    esp,0xc
c001675a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016761:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016763:	83 e8 41             	sub    eax,0x41
c0016766:	50                   	push   eax
c0016767:	56                   	push   esi
c0016768:	53                   	push   ebx
c0016769:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001676c:	83 c4 10             	add    esp,0x10
c001676f:	84 c0                	test   al,al
c0016771:	74 08                	je     c001677b <LogicalDisk::mount()+0x51>
c0016773:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016779:	eb 1c                	jmp    c0016797 <LogicalDisk::mount()+0x6d>
c001677b:	51                   	push   ecx
c001677c:	51                   	push   ecx
c001677d:	ff 35 e8 25 03 c0    	push   DWORD PTR ds:0xc00325e8
c0016783:	68 6f bd 02 c0       	push   0xc002bd6f
c0016788:	e8 12 c7 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001678d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	eb ac                	jmp    c0016741 <LogicalDisk::mount()+0x17>
c0016795:	31 c0                	xor    eax,eax
c0016797:	5a                   	pop    edx
c0016798:	5b                   	pop    ebx
c0016799:	5e                   	pop    esi
c001679a:	c3                   	ret    
c001679b:	90                   	nop

c001679c <LogicalDisk::unmount()>:
c001679c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167a0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167aa:	c3                   	ret    
c00167ab:	90                   	nop

c00167ac <LogicalDisk::eject()>:
c00167ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167b0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00167b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167bc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167bf:	90                   	nop

c00167c0 <LogicalDisk::unassignDriveLetter()>:
c00167c0:	57                   	push   edi
c00167c1:	56                   	push   esi
c00167c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167c6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167cd:	84 c9                	test   cl,cl
c00167cf:	75 0f                	jne    c00167e0 <LogicalDisk::unassignDriveLetter()+0x20>
c00167d1:	c7 44 24 0c 8a bd 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bd8a
c00167d9:	5e                   	pop    esi
c00167da:	5f                   	pop    edi
c00167db:	e9 a7 40 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c00167e0:	83 e9 41             	sub    ecx,0x41
c00167e3:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167ea:	b8 01 00 00 00       	mov    eax,0x1
c00167ef:	c7 04 8d c0 f6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0940],0x0
c00167fa:	d3 e0                	shl    eax,cl
c00167fc:	89 c7                	mov    edi,eax
c00167fe:	f7 d0                	not    eax
c0016800:	c1 ff 1f             	sar    edi,0x1f
c0016803:	21 05 a0 f6 02 c0    	and    DWORD PTR ds:0xc002f6a0,eax
c0016809:	89 fe                	mov    esi,edi
c001680b:	f7 d6                	not    esi
c001680d:	21 35 a4 f6 02 c0    	and    DWORD PTR ds:0xc002f6a4,esi
c0016813:	5e                   	pop    esi
c0016814:	5f                   	pop    edi
c0016815:	c3                   	ret    

c0016816 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016816:	57                   	push   edi
c0016817:	56                   	push   esi
c0016818:	53                   	push   ebx
c0016819:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001681d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016821:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016825:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016829:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001682f:	77 41                	ja     c0016872 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016831:	99                   	cdq    
c0016832:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016838:	01 c8                	add    eax,ecx
c001683a:	11 da                	adc    edx,ebx
c001683c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016842:	19 d7                	sbb    edi,edx
c0016844:	72 33                	jb     c0016879 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016846:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001684c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016852:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016856:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001685a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016860:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001686a:	5b                   	pop    ebx
c001686b:	5e                   	pop    esi
c001686c:	5f                   	pop    edi
c001686d:	e9 ec 0a 00 00       	jmp    c001735e <VCache::read(unsigned long long, int, void*)>
c0016872:	b8 05 00 00 00       	mov    eax,0x5
c0016877:	eb 05                	jmp    c001687e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016879:	b8 07 00 00 00       	mov    eax,0x7
c001687e:	5b                   	pop    ebx
c001687f:	5e                   	pop    esi
c0016880:	5f                   	pop    edi
c0016881:	c3                   	ret    

c0016882 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016882:	57                   	push   edi
c0016883:	56                   	push   esi
c0016884:	53                   	push   ebx
c0016885:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016889:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001688d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016891:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016895:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001689b:	77 41                	ja     c00168de <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001689d:	99                   	cdq    
c001689e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00168a4:	01 c8                	add    eax,ecx
c00168a6:	11 da                	adc    edx,ebx
c00168a8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168ae:	19 d7                	sbb    edi,edx
c00168b0:	72 33                	jb     c00168e5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168b2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168b8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168c2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168c6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168d6:	5b                   	pop    ebx
c00168d7:	5e                   	pop    esi
c00168d8:	5f                   	pop    edi
c00168d9:	e9 96 09 00 00       	jmp    c0017274 <VCache::write(unsigned long long, int, void*)>
c00168de:	b8 05 00 00 00       	mov    eax,0x5
c00168e3:	eb 05                	jmp    c00168ea <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168e5:	b8 07 00 00 00       	mov    eax,0x7
c00168ea:	5b                   	pop    ebx
c00168eb:	5e                   	pop    esi
c00168ec:	5f                   	pop    edi
c00168ed:	c3                   	ret    

c00168ee <Mouse::Mouse(char const*)>:
c00168ee:	83 ec 0c             	sub    esp,0xc
c00168f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f5:	83 ec 08             	sub    esp,0x8
c00168f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168fc:	50                   	push   eax
c00168fd:	e8 ae db ff ff       	call   c00144b0 <Device::Device(char const*)>
c0016902:	83 c4 10             	add    esp,0x10
c0016905:	ba e0 bd 02 c0       	mov    edx,0xc002bde0
c001690a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001690e:	89 10                	mov    DWORD PTR [eax],edx
c0016910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016914:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001691e:	90                   	nop
c001691f:	83 c4 0c             	add    esp,0xc
c0016922:	c3                   	ret    
c0016923:	90                   	nop

c0016924 <Mouse::~Mouse()>:
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	ba e0 bd 02 c0       	mov    edx,0xc002bde0
c001692c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016930:	89 10                	mov    DWORD PTR [eax],edx
c0016932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016936:	83 ec 0c             	sub    esp,0xc
c0016939:	50                   	push   eax
c001693a:	e8 67 d8 ff ff       	call   c00141a6 <Device::~Device()>
c001693f:	83 c4 10             	add    esp,0x10
c0016942:	90                   	nop
c0016943:	83 c4 0c             	add    esp,0xc
c0016946:	c3                   	ret    
c0016947:	90                   	nop

c0016948 <Mouse::~Mouse()>:
c0016948:	83 ec 0c             	sub    esp,0xc
c001694b:	83 ec 0c             	sub    esp,0xc
c001694e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016952:	e8 cd ff ff ff       	call   c0016924 <Mouse::~Mouse()>
c0016957:	83 c4 10             	add    esp,0x10
c001695a:	83 ec 08             	sub    esp,0x8
c001695d:	68 58 01 00 00       	push   0x158
c0016962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016966:	e8 54 c4 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c001696b:	83 c4 10             	add    esp,0x10
c001696e:	83 c4 0c             	add    esp,0xc
c0016971:	c3                   	ret    

c0016972 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016972:	55                   	push   ebp
c0016973:	57                   	push   edi
c0016974:	56                   	push   esi
c0016975:	53                   	push   ebx
c0016976:	81 ec 20 01 00 00    	sub    esp,0x120
c001697c:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016983:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001698a:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016991:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016998:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001699c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00169a4:	56                   	push   esi
c00169a5:	68 04 be 02 c0       	push   0xc002be04
c00169aa:	e8 f0 c4 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00169af:	58                   	pop    eax
c00169b0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169b7:	e8 f0 db ff ff       	call   c00145ac <Device::getName()>
c00169bc:	5a                   	pop    edx
c00169bd:	59                   	pop    ecx
c00169be:	50                   	push   eax
c00169bf:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00169c3:	53                   	push   ebx
c00169c4:	e8 5f 9e fe ff       	call   c0000828 <strcpy>
c00169c9:	5d                   	pop    ebp
c00169ca:	58                   	pop    eax
c00169cb:	68 35 be 02 c0       	push   0xc002be35
c00169d0:	53                   	push   ebx
c00169d1:	e8 92 9f fe ff       	call   c0000968 <strcat>
c00169d6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169dd:	e8 12 8f ff ff       	call   c000f8f4 <malloc>
c00169e2:	83 c4 0c             	add    esp,0xc
c00169e5:	89 c5                	mov    ebp,eax
c00169e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169ef:	57                   	push   edi
c00169f0:	56                   	push   esi
c00169f1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169f8:	53                   	push   ebx
c00169f9:	50                   	push   eax
c00169fa:	e8 bf fb ff ff       	call   c00165be <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169ff:	83 c4 14             	add    esp,0x14
c0016a02:	55                   	push   ebp
c0016a03:	e8 6c fc ff ff       	call   c0016674 <LogicalDisk::assignDriveLetter()>
c0016a08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016a0b:	0f be d8             	movsx  ebx,al
c0016a0e:	e8 17 fd ff ff       	call   c001672a <LogicalDisk::mount()>
c0016a13:	58                   	pop    eax
c0016a14:	5a                   	pop    edx
c0016a15:	55                   	push   ebp
c0016a16:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a1d:	e8 9e d8 ff ff       	call   c00142c0 <Device::addChild(Device*)>
c0016a22:	59                   	pop    ecx
c0016a23:	5e                   	pop    esi
c0016a24:	53                   	push   ebx
c0016a25:	68 40 be 02 c0       	push   0xc002be40
c0016a2a:	e8 70 c4 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0016a2f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a35:	5b                   	pop    ebx
c0016a36:	5e                   	pop    esi
c0016a37:	5f                   	pop    edi
c0016a38:	5d                   	pop    ebp
c0016a39:	c3                   	ret    

c0016a3a <createPartitionsForDisk(PhysicalDisk*)>:
c0016a3a:	55                   	push   ebp
c0016a3b:	57                   	push   edi
c0016a3c:	56                   	push   esi
c0016a3d:	53                   	push   ebx
c0016a3e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a44:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a4b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a51:	3d 00 02 00 00       	cmp    eax,0x200
c0016a56:	74 27                	je     c0016a7f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a58:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a5e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a64:	83 ec 10             	sub    esp,0x10
c0016a67:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a6b:	99                   	cdq    
c0016a6c:	c1 e6 0a             	shl    esi,0xa
c0016a6f:	52                   	push   edx
c0016a70:	89 fd                	mov    ebp,edi
c0016a72:	50                   	push   eax
c0016a73:	55                   	push   ebp
c0016a74:	56                   	push   esi
c0016a75:	e8 1a 09 01 00       	call   c0027394 <__udivdi3>
c0016a7a:	e9 b1 00 00 00       	jmp    c0016b30 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a7f:	83 ec 0c             	sub    esp,0xc
c0016a82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a84:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a88:	56                   	push   esi
c0016a89:	6a 01                	push   0x1
c0016a8b:	6a 00                	push   0x0
c0016a8d:	6a 00                	push   0x0
c0016a8f:	53                   	push   ebx
c0016a90:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a93:	83 c4 20             	add    esp,0x20
c0016a96:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a9e:	75 0a                	jne    c0016aaa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016aa0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016aa8:	74 2c                	je     c0016ad6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016aaa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ab0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ab6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016abc:	83 ec 10             	sub    esp,0x10
c0016abf:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ac3:	89 f7                	mov    edi,esi
c0016ac5:	c1 e0 0a             	shl    eax,0xa
c0016ac8:	c1 ff 1f             	sar    edi,0x1f
c0016acb:	57                   	push   edi
c0016acc:	56                   	push   esi
c0016acd:	52                   	push   edx
c0016ace:	50                   	push   eax
c0016acf:	e8 c0 08 01 00       	call   c0027394 <__udivdi3>
c0016ad4:	eb 5a                	jmp    c0016b30 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ad6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016add:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016ae4:	83 e1 7f             	and    ecx,0x7f
c0016ae7:	83 e0 7f             	and    eax,0x7f
c0016aea:	01 c1                	add    ecx,eax
c0016aec:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016af3:	83 e0 7f             	and    eax,0x7f
c0016af6:	01 c1                	add    ecx,eax
c0016af8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016aff:	83 e0 7f             	and    eax,0x7f
c0016b02:	00 c1                	add    cl,al
c0016b04:	74 41                	je     c0016b47 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b06:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b0c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b12:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b18:	83 ec 10             	sub    esp,0x10
c0016b1b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b1f:	89 f7                	mov    edi,esi
c0016b21:	c1 e0 0a             	shl    eax,0xa
c0016b24:	c1 ff 1f             	sar    edi,0x1f
c0016b27:	57                   	push   edi
c0016b28:	56                   	push   esi
c0016b29:	52                   	push   edx
c0016b2a:	50                   	push   eax
c0016b2b:	e8 64 08 01 00       	call   c0027394 <__udivdi3>
c0016b30:	83 c4 14             	add    esp,0x14
c0016b33:	52                   	push   edx
c0016b34:	50                   	push   eax
c0016b35:	6a 00                	push   0x0
c0016b37:	6a 00                	push   0x0
c0016b39:	53                   	push   ebx
c0016b3a:	e8 33 fe ff ff       	call   c0016972 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b3f:	83 c4 20             	add    esp,0x20
c0016b42:	e9 79 01 00 00       	jmp    c0016cc0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b47:	89 f0                	mov    eax,esi
c0016b49:	31 f6                	xor    esi,esi
c0016b4b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b52:	75 02                	jne    c0016b56 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b54:	89 f1                	mov    ecx,esi
c0016b56:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b5d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b64:	c1 e2 08             	shl    edx,0x8
c0016b67:	c1 e7 10             	shl    edi,0x10
c0016b6a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b72:	09 fa                	or     edx,edi
c0016b74:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b7c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b83:	83 c0 10             	add    eax,0x10
c0016b86:	09 fa                	or     edx,edi
c0016b88:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b8f:	c1 e7 18             	shl    edi,0x18
c0016b92:	09 fa                	or     edx,edi
c0016b94:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b9b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b9f:	c1 e7 10             	shl    edi,0x10
c0016ba2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016ba9:	c1 e2 08             	shl    edx,0x8
c0016bac:	09 fa                	or     edx,edi
c0016bae:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016bb5:	09 fa                	or     edx,edi
c0016bb7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016bbe:	c1 e7 18             	shl    edi,0x18
c0016bc1:	09 fa                	or     edx,edi
c0016bc3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016bc7:	46                   	inc    esi
c0016bc8:	83 fe 04             	cmp    esi,0x4
c0016bcb:	0f 85 7a ff ff ff    	jne    c0016b4b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd5:	83 f0 01             	xor    eax,0x1
c0016bd8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016bdc:	75 57                	jne    c0016c35 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016be2:	83 f0 01             	xor    eax,0x1
c0016be5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016be9:	75 4a                	jne    c0016c35 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016beb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bf7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c05:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c0b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c11:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c15:	89 f7                	mov    edi,esi
c0016c17:	c1 e0 0a             	shl    eax,0xa
c0016c1a:	c1 ff 1f             	sar    edi,0x1f
c0016c1d:	57                   	push   edi
c0016c1e:	56                   	push   esi
c0016c1f:	52                   	push   edx
c0016c20:	50                   	push   eax
c0016c21:	e8 6e 07 01 00       	call   c0027394 <__udivdi3>
c0016c26:	83 c4 10             	add    esp,0x10
c0016c29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c31:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c35:	84 c9                	test   cl,cl
c0016c37:	74 53                	je     c0016c8c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c39:	0f b6 c9             	movzx  ecx,cl
c0016c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c44:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c48:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c54:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c58:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c6c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c70:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c74:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c78:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c80:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c84:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c88:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c8c:	31 ed                	xor    ebp,ebp
c0016c8e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c92:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c96:	89 f8                	mov    eax,edi
c0016c98:	09 f0                	or     eax,esi
c0016c9a:	74 1e                	je     c0016cba <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c9c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016ca0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016ca4:	89 d1                	mov    ecx,edx
c0016ca6:	09 c1                	or     ecx,eax
c0016ca8:	74 10                	je     c0016cba <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016caa:	83 ec 0c             	sub    esp,0xc
c0016cad:	57                   	push   edi
c0016cae:	56                   	push   esi
c0016caf:	52                   	push   edx
c0016cb0:	50                   	push   eax
c0016cb1:	53                   	push   ebx
c0016cb2:	e8 bb fc ff ff       	call   c0016972 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016cb7:	83 c4 20             	add    esp,0x20
c0016cba:	45                   	inc    ebp
c0016cbb:	83 fd 04             	cmp    ebp,0x4
c0016cbe:	75 ce                	jne    c0016c8e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016cc0:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016cc6:	5b                   	pop    ebx
c0016cc7:	5e                   	pop    esi
c0016cc8:	5f                   	pop    edi
c0016cc9:	5d                   	pop    ebp
c0016cca:	c3                   	ret    
c0016ccb:	90                   	nop

c0016ccc <Serial::Serial(char const*)>:
c0016ccc:	83 ec 0c             	sub    esp,0xc
c0016ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd3:	83 ec 08             	sub    esp,0x8
c0016cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cda:	50                   	push   eax
c0016cdb:	e8 d0 d7 ff ff       	call   c00144b0 <Device::Device(char const*)>
c0016ce0:	83 c4 10             	add    esp,0x10
c0016ce3:	ba 6c be 02 c0       	mov    edx,0xc002be6c
c0016ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cec:	89 10                	mov    DWORD PTR [eax],edx
c0016cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cfc:	90                   	nop
c0016cfd:	83 c4 0c             	add    esp,0xc
c0016d00:	c3                   	ret    
c0016d01:	90                   	nop

c0016d02 <Serial::~Serial()>:
c0016d02:	83 ec 0c             	sub    esp,0xc
c0016d05:	ba 6c be 02 c0       	mov    edx,0xc002be6c
c0016d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0e:	89 10                	mov    DWORD PTR [eax],edx
c0016d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d14:	83 ec 0c             	sub    esp,0xc
c0016d17:	50                   	push   eax
c0016d18:	e8 89 d4 ff ff       	call   c00141a6 <Device::~Device()>
c0016d1d:	83 c4 10             	add    esp,0x10
c0016d20:	90                   	nop
c0016d21:	83 c4 0c             	add    esp,0xc
c0016d24:	c3                   	ret    
c0016d25:	90                   	nop

c0016d26 <Serial::~Serial()>:
c0016d26:	83 ec 0c             	sub    esp,0xc
c0016d29:	83 ec 0c             	sub    esp,0xc
c0016d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d30:	e8 cd ff ff ff       	call   c0016d02 <Serial::~Serial()>
c0016d35:	83 c4 10             	add    esp,0x10
c0016d38:	83 ec 08             	sub    esp,0x8
c0016d3b:	68 58 01 00 00       	push   0x158
c0016d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d44:	e8 76 c0 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0016d49:	83 c4 10             	add    esp,0x10
c0016d4c:	83 c4 0c             	add    esp,0xc
c0016d4f:	c3                   	ret    

c0016d50 <Timer::Timer(char const*)>:
c0016d50:	83 ec 0c             	sub    esp,0xc
c0016d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d57:	83 ec 08             	sub    esp,0x8
c0016d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5e:	50                   	push   eax
c0016d5f:	e8 4c d7 ff ff       	call   c00144b0 <Device::Device(char const*)>
c0016d64:	83 c4 10             	add    esp,0x10
c0016d67:	ba b0 be 02 c0       	mov    edx,0xc002beb0
c0016d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d70:	89 10                	mov    DWORD PTR [eax],edx
c0016d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d76:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d80:	90                   	nop
c0016d81:	83 c4 0c             	add    esp,0xc
c0016d84:	c3                   	ret    
c0016d85:	90                   	nop

c0016d86 <Timer::~Timer()>:
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	ba b0 be 02 c0       	mov    edx,0xc002beb0
c0016d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d92:	89 10                	mov    DWORD PTR [eax],edx
c0016d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d98:	83 ec 0c             	sub    esp,0xc
c0016d9b:	50                   	push   eax
c0016d9c:	e8 05 d4 ff ff       	call   c00141a6 <Device::~Device()>
c0016da1:	83 c4 10             	add    esp,0x10
c0016da4:	90                   	nop
c0016da5:	83 c4 0c             	add    esp,0xc
c0016da8:	c3                   	ret    
c0016da9:	90                   	nop

c0016daa <Timer::~Timer()>:
c0016daa:	83 ec 0c             	sub    esp,0xc
c0016dad:	83 ec 0c             	sub    esp,0xc
c0016db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016db4:	e8 cd ff ff ff       	call   c0016d86 <Timer::~Timer()>
c0016db9:	83 c4 10             	add    esp,0x10
c0016dbc:	83 ec 08             	sub    esp,0x8
c0016dbf:	68 5c 01 00 00       	push   0x15c
c0016dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dc8:	e8 f2 bf ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0016dcd:	83 c4 10             	add    esp,0x10
c0016dd0:	83 c4 0c             	add    esp,0xc
c0016dd3:	c3                   	ret    

c0016dd4 <Timer::read()>:
c0016dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dd8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016dde:	c3                   	ret    

c0016ddf <timerHandler(unsigned long long)>:
c0016ddf:	55                   	push   ebp
c0016de0:	57                   	push   edi
c0016de1:	56                   	push   esi
c0016de2:	53                   	push   ebx
c0016de3:	83 ec 0c             	sub    esp,0xc
c0016de6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016dea:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016dee:	01 35 30 f7 02 c0    	add    DWORD PTR ds:0xc002f730,esi
c0016df4:	11 3d 34 f7 02 c0    	adc    DWORD PTR ds:0xc002f734,edi
c0016dfa:	80 3d ad f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0ad,0x0
c0016e01:	0f 84 42 01 00 00    	je     c0016f49 <timerHandler(unsigned long long)+0x16a>
c0016e07:	fa                   	cli    
c0016e08:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c0016e0e:	83 ec 0c             	sub    esp,0xc
c0016e11:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c0016e17:	68 f8 25 03 c0       	push   0xc00325f8
c0016e1c:	e8 f9 25 01 00       	call   c002941a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e21:	83 c4 10             	add    esp,0x10
c0016e24:	84 c0                	test   al,al
c0016e26:	0f 85 a2 00 00 00    	jne    c0016ece <timerHandler(unsigned long long)+0xef>
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	68 f8 25 03 c0       	push   0xc00325f8
c0016e34:	e8 fd 25 01 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e39:	83 c4 10             	add    esp,0x10
c0016e3c:	89 c3                	mov    ebx,eax
c0016e3e:	83 ec 0c             	sub    esp,0xc
c0016e41:	68 f8 25 03 c0       	push   0xc00325f8
c0016e46:	e8 eb 25 01 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e4b:	c7 04 24 f8 25 03 c0 	mov    DWORD PTR [esp],0xc00325f8
c0016e52:	89 c5                	mov    ebp,eax
c0016e54:	e8 e5 25 01 00       	call   c002943e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e59:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e5c:	83 c4 10             	add    esp,0x10
c0016e5f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e62:	39 15 30 f7 02 c0    	cmp    DWORD PTR ds:0xc002f730,edx
c0016e68:	a1 34 f7 02 c0       	mov    eax,ds:0xc002f734
c0016e6d:	19 c8                	sbb    eax,ecx
c0016e6f:	72 21                	jb     c0016e92 <timerHandler(unsigned long long)+0xb3>
c0016e71:	83 ec 0c             	sub    esp,0xc
c0016e74:	55                   	push   ebp
c0016e75:	e8 84 7c 00 00       	call   c001eafe <unblockTask(ThreadControlBlock*)>
c0016e7a:	83 c4 10             	add    esp,0x10
c0016e7d:	39 eb                	cmp    ebx,ebp
c0016e7f:	75 21                	jne    c0016ea2 <timerHandler(unsigned long long)+0xc3>
c0016e81:	83 ec 0c             	sub    esp,0xc
c0016e84:	68 f8 25 03 c0       	push   0xc00325f8
c0016e89:	e8 a8 25 01 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e8e:	89 c3                	mov    ebx,eax
c0016e90:	eb 0d                	jmp    c0016e9f <timerHandler(unsigned long long)+0xc0>
c0016e92:	50                   	push   eax
c0016e93:	50                   	push   eax
c0016e94:	55                   	push   ebp
c0016e95:	68 f8 25 03 c0       	push   0xc00325f8
c0016e9a:	e8 4d 26 01 00       	call   c00294ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e9f:	83 c4 10             	add    esp,0x10
c0016ea2:	83 ec 0c             	sub    esp,0xc
c0016ea5:	68 f8 25 03 c0       	push   0xc00325f8
c0016eaa:	e8 6b 25 01 00       	call   c002941a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016eaf:	83 c4 10             	add    esp,0x10
c0016eb2:	84 c0                	test   al,al
c0016eb4:	75 18                	jne    c0016ece <timerHandler(unsigned long long)+0xef>
c0016eb6:	83 ec 0c             	sub    esp,0xc
c0016eb9:	68 f8 25 03 c0       	push   0xc00325f8
c0016ebe:	e8 73 25 01 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ec3:	83 c4 10             	add    esp,0x10
c0016ec6:	39 d8                	cmp    eax,ebx
c0016ec8:	0f 85 70 ff ff ff    	jne    c0016e3e <timerHandler(unsigned long long)+0x5f>
c0016ece:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed3:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016ed7:	74 3d                	je     c0016f16 <timerHandler(unsigned long long)+0x137>
c0016ed9:	80 3d ac f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f0ac,0x0
c0016ee0:	74 34                	je     c0016f16 <timerHandler(unsigned long long)+0x137>
c0016ee2:	fa                   	cli    
c0016ee3:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c0016ee9:	31 d2                	xor    edx,edx
c0016eeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ef0:	89 f9                	mov    ecx,edi
c0016ef2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016ef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016efa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016efd:	39 c6                	cmp    esi,eax
c0016eff:	19 d1                	sbb    ecx,edx
c0016f01:	72 05                	jb     c0016f08 <timerHandler(unsigned long long)+0x129>
c0016f03:	e8 32 77 00 00       	call   c001e63a <schedule()>
c0016f08:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0016f0d:	48                   	dec    eax
c0016f0e:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0016f13:	75 01                	jne    c0016f16 <timerHandler(unsigned long long)+0x137>
c0016f15:	fb                   	sti    
c0016f16:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c0016f1b:	48                   	dec    eax
c0016f1c:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c0016f21:	75 18                	jne    c0016f3b <timerHandler(unsigned long long)+0x15c>
c0016f23:	83 3d e0 25 03 c0 00 	cmp    DWORD PTR ds:0xc00325e0,0x0
c0016f2a:	74 0f                	je     c0016f3b <timerHandler(unsigned long long)+0x15c>
c0016f2c:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c0016f36:	e8 ff 76 00 00       	call   c001e63a <schedule()>
c0016f3b:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c0016f40:	48                   	dec    eax
c0016f41:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c0016f46:	75 01                	jne    c0016f49 <timerHandler(unsigned long long)+0x16a>
c0016f48:	fb                   	sti    
c0016f49:	83 c4 0c             	add    esp,0xc
c0016f4c:	5b                   	pop    ebx
c0016f4d:	5e                   	pop    esi
c0016f4e:	5f                   	pop    edi
c0016f4f:	5d                   	pop    ebp
c0016f50:	c3                   	ret    

c0016f51 <setupTimer(int)>:
c0016f51:	57                   	push   edi
c0016f52:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0016f57:	56                   	push   esi
c0016f58:	53                   	push   ebx
c0016f59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f63:	83 ec 0c             	sub    esp,0xc
c0016f66:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f6c:	e8 3b d6 ff ff       	call   c00145ac <Device::getName()>
c0016f71:	83 c4 10             	add    esp,0x10
c0016f74:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f77:	0f 85 8d 00 00 00    	jne    c001700a <setupTimer(int)+0xb9>
c0016f7d:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0016f82:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f89:	74 7f                	je     c001700a <setupTimer(int)+0xb9>
c0016f8b:	83 ec 0c             	sub    esp,0xc
c0016f8e:	68 5c 01 00 00       	push   0x15c
c0016f93:	e8 5c 89 ff ff       	call   c000f8f4 <malloc>
c0016f98:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f9b:	89 c3                	mov    ebx,eax
c0016f9d:	e8 c4 ff 00 00       	call   c0026f66 <PIT::PIT()>
c0016fa2:	59                   	pop    ecx
c0016fa3:	5f                   	pop    edi
c0016fa4:	53                   	push   ebx
c0016fa5:	ff 35 a8 f0 02 c0    	push   DWORD PTR ds:0xc002f0a8
c0016fab:	e8 10 d3 ff ff       	call   c00142c0 <Device::addChild(Device*)>
c0016fb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fb2:	6a 00                	push   0x0
c0016fb4:	6a 00                	push   0x0
c0016fb6:	56                   	push   esi
c0016fb7:	53                   	push   ebx
c0016fb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fbb:	83 c4 14             	add    esp,0x14
c0016fbe:	68 60 01 00 00       	push   0x160
c0016fc3:	e8 2c 89 ff ff       	call   c000f8f4 <malloc>
c0016fc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fcb:	89 c7                	mov    edi,eax
c0016fcd:	e8 44 fe 00 00       	call   c0026e16 <APICTimer::APICTimer()>
c0016fd2:	6a 00                	push   0x0
c0016fd4:	6a 00                	push   0x0
c0016fd6:	56                   	push   esi
c0016fd7:	57                   	push   edi
c0016fd8:	e8 3b fd 00 00       	call   c0026d18 <APICTimer::open(int, int, void*)>
c0016fdd:	83 c4 20             	add    esp,0x20
c0016fe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fe2:	6a 00                	push   0x0
c0016fe4:	6a 00                	push   0x0
c0016fe6:	6a 00                	push   0x0
c0016fe8:	53                   	push   ebx
c0016fe9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fec:	58                   	pop    eax
c0016fed:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0016ff2:	5a                   	pop    edx
c0016ff3:	57                   	push   edi
c0016ff4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ffa:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0017000:	e8 bb d2 ff ff       	call   c00142c0 <Device::addChild(Device*)>
c0017005:	83 c4 10             	add    esp,0x10
c0017008:	eb 33                	jmp    c001703d <setupTimer(int)+0xec>
c001700a:	83 ec 0c             	sub    esp,0xc
c001700d:	68 5c 01 00 00       	push   0x15c
c0017012:	e8 dd 88 ff ff       	call   c000f8f4 <malloc>
c0017017:	89 04 24             	mov    DWORD PTR [esp],eax
c001701a:	89 c3                	mov    ebx,eax
c001701c:	e8 45 ff 00 00       	call   c0026f66 <PIT::PIT()>
c0017021:	58                   	pop    eax
c0017022:	5a                   	pop    edx
c0017023:	53                   	push   ebx
c0017024:	ff 35 a8 f0 02 c0    	push   DWORD PTR ds:0xc002f0a8
c001702a:	e8 91 d2 ff ff       	call   c00142c0 <Device::addChild(Device*)>
c001702f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017031:	6a 00                	push   0x0
c0017033:	6a 00                	push   0x0
c0017035:	56                   	push   esi
c0017036:	53                   	push   ebx
c0017037:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001703a:	83 c4 20             	add    esp,0x20
c001703d:	89 d8                	mov    eax,ebx
c001703f:	5b                   	pop    ebx
c0017040:	5e                   	pop    esi
c0017041:	5f                   	pop    edi
c0017042:	c3                   	ret    
c0017043:	90                   	nop

c0017044 <VCache::VCache(PhysicalDisk*)>:
c0017044:	53                   	push   ebx
c0017045:	83 ec 18             	sub    esp,0x18
c0017048:	ba e0 be 02 c0       	mov    edx,0xc002bee0
c001704d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017051:	89 10                	mov    DWORD PTR [eax],edx
c0017053:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017057:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001705e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017062:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017074:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001707b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017086:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001708d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017091:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00170ab:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00170b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170be:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00170c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ce:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170d5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00170dd:	83 ec 0c             	sub    esp,0xc
c00170e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170e4:	e8 0b 88 ff ff       	call   c000f8f4 <malloc>
c00170e9:	83 c4 10             	add    esp,0x10
c00170ec:	89 c3                	mov    ebx,eax
c00170ee:	83 ec 0c             	sub    esp,0xc
c00170f1:	53                   	push   ebx
c00170f2:	e8 ed 72 00 00       	call   c001e3e4 <Mutex::Mutex()>
c00170f7:	83 c4 10             	add    esp,0x10
c00170fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017105:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017109:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001710c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017110:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017117:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001711b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017125:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017128:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001712c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017132:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017138:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001713c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001713f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017146:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001714a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001714e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017154:	05 00 01 00 00       	add    eax,0x100
c0017159:	c1 e0 04             	shl    eax,0x4
c001715c:	83 ec 0c             	sub    esp,0xc
c001715f:	50                   	push   eax
c0017160:	e8 8f 87 ff ff       	call   c000f8f4 <malloc>
c0017165:	83 c4 10             	add    esp,0x10
c0017168:	89 c2                	mov    edx,eax
c001716a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001716e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017175:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001717c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017180:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017184:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017188:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001718e:	c1 e0 07             	shl    eax,0x7
c0017191:	83 ec 0c             	sub    esp,0xc
c0017194:	50                   	push   eax
c0017195:	e8 5a 87 ff ff       	call   c000f8f4 <malloc>
c001719a:	83 c4 10             	add    esp,0x10
c001719d:	89 c2                	mov    edx,eax
c001719f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171a3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00171a6:	90                   	nop
c00171a7:	83 c4 18             	add    esp,0x18
c00171aa:	5b                   	pop    ebx
c00171ab:	c3                   	ret    

c00171ac <VCache::invalidateReadBuffer()>:
c00171ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171b0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00171b6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00171ba:	c3                   	ret    
c00171bb:	90                   	nop

c00171bc <VCache::writeWriteBuffer()>:
c00171bc:	53                   	push   ebx
c00171bd:	83 ec 14             	sub    esp,0x14
c00171c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00171c4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00171c9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171cf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00171d2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00171d5:	50                   	push   eax
c00171d6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171d9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171e0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171e7:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171eb:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171f2:	83 c4 28             	add    esp,0x28
c00171f5:	5b                   	pop    ebx
c00171f6:	c3                   	ret    
c00171f7:	90                   	nop

c00171f8 <VCache::~VCache()>:
c00171f8:	83 ec 0c             	sub    esp,0xc
c00171fb:	ba e0 be 02 c0       	mov    edx,0xc002bee0
c0017200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017204:	89 10                	mov    DWORD PTR [eax],edx
c0017206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001720a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001720d:	84 c0                	test   al,al
c001720f:	74 0f                	je     c0017220 <VCache::~VCache()+0x28>
c0017211:	83 ec 0c             	sub    esp,0xc
c0017214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017218:	e8 9f ff ff ff       	call   c00171bc <VCache::writeWriteBuffer()>
c001721d:	83 c4 10             	add    esp,0x10
c0017220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017224:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017227:	83 ec 0c             	sub    esp,0xc
c001722a:	50                   	push   eax
c001722b:	e8 d4 86 ff ff       	call   c000f904 <free>
c0017230:	83 c4 10             	add    esp,0x10
c0017233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017237:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001723a:	83 ec 0c             	sub    esp,0xc
c001723d:	50                   	push   eax
c001723e:	e8 c1 86 ff ff       	call   c000f904 <free>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	90                   	nop
c0017247:	83 c4 0c             	add    esp,0xc
c001724a:	c3                   	ret    
c001724b:	90                   	nop

c001724c <VCache::~VCache()>:
c001724c:	83 ec 0c             	sub    esp,0xc
c001724f:	83 ec 0c             	sub    esp,0xc
c0017252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017256:	e8 9d ff ff ff       	call   c00171f8 <VCache::~VCache()>
c001725b:	83 c4 10             	add    esp,0x10
c001725e:	83 ec 08             	sub    esp,0x8
c0017261:	6a 44                	push   0x44
c0017263:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017267:	e8 53 bb ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c001726c:	83 c4 10             	add    esp,0x10
c001726f:	83 c4 0c             	add    esp,0xc
c0017272:	c3                   	ret    
c0017273:	90                   	nop

c0017274 <VCache::write(unsigned long long, int, void*)>:
c0017274:	55                   	push   ebp
c0017275:	57                   	push   edi
c0017276:	56                   	push   esi
c0017277:	53                   	push   ebx
c0017278:	83 ec 18             	sub    esp,0x18
c001727b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001727f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017283:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0017287:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001728a:	e8 e3 76 00 00       	call   c001e972 <Semaphore::acquire()>
c001728f:	83 c4 10             	add    esp,0x10
c0017292:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017296:	74 0c                	je     c00172a4 <VCache::write(unsigned long long, int, void*)+0x30>
c0017298:	83 ec 0c             	sub    esp,0xc
c001729b:	53                   	push   ebx
c001729c:	e8 0b ff ff ff       	call   c00171ac <VCache::invalidateReadBuffer()>
c00172a1:	83 c4 10             	add    esp,0x10
c00172a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172a8:	74 5c                	je     c0017306 <VCache::write(unsigned long long, int, void*)+0x92>
c00172aa:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00172ad:	89 e8                	mov    eax,ebp
c00172af:	99                   	cdq    
c00172b0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00172b3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00172b6:	89 c1                	mov    ecx,eax
c00172b8:	89 d0                	mov    eax,edx
c00172ba:	31 f1                	xor    ecx,esi
c00172bc:	31 f8                	xor    eax,edi
c00172be:	09 c1                	or     ecx,eax
c00172c0:	75 38                	jne    c00172fa <VCache::write(unsigned long long, int, void*)+0x86>
c00172c2:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00172c7:	75 31                	jne    c00172fa <VCache::write(unsigned long long, int, void*)+0x86>
c00172c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172cc:	89 ef                	mov    edi,ebp
c00172ce:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172d4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172d8:	0f af f9             	imul   edi,ecx
c00172db:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00172de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172e3:	40                   	inc    eax
c00172e4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172e7:	83 c0 80             	add    eax,0xffffff80
c00172ea:	75 5c                	jne    c0017348 <VCache::write(unsigned long long, int, void*)+0xd4>
c00172ec:	83 ec 0c             	sub    esp,0xc
c00172ef:	53                   	push   ebx
c00172f0:	e8 c7 fe ff ff       	call   c00171bc <VCache::writeWriteBuffer()>
c00172f5:	83 c4 10             	add    esp,0x10
c00172f8:	eb 4e                	jmp    c0017348 <VCache::write(unsigned long long, int, void*)+0xd4>
c00172fa:	83 ec 0c             	sub    esp,0xc
c00172fd:	53                   	push   ebx
c00172fe:	e8 b9 fe ff ff       	call   c00171bc <VCache::writeWriteBuffer()>
c0017303:	83 c4 10             	add    esp,0x10
c0017306:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017309:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c001730e:	7f 22                	jg     c0017332 <VCache::write(unsigned long long, int, void*)+0xbe>
c0017310:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017313:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017316:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001731a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001731e:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0017321:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0017324:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001732a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001732e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017330:	eb 16                	jmp    c0017348 <VCache::write(unsigned long long, int, void*)+0xd4>
c0017332:	83 ec 0c             	sub    esp,0xc
c0017335:	8b 10                	mov    edx,DWORD PTR [eax]
c0017337:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001733b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001733f:	57                   	push   edi
c0017340:	56                   	push   esi
c0017341:	50                   	push   eax
c0017342:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017345:	83 c4 20             	add    esp,0x20
c0017348:	83 ec 0c             	sub    esp,0xc
c001734b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001734e:	e8 59 7d 00 00       	call   c001f0ac <Semaphore::release()>
c0017353:	83 c4 1c             	add    esp,0x1c
c0017356:	31 c0                	xor    eax,eax
c0017358:	5b                   	pop    ebx
c0017359:	5e                   	pop    esi
c001735a:	5f                   	pop    edi
c001735b:	5d                   	pop    ebp
c001735c:	c3                   	ret    
c001735d:	90                   	nop

c001735e <VCache::read(unsigned long long, int, void*)>:
c001735e:	55                   	push   ebp
c001735f:	57                   	push   edi
c0017360:	56                   	push   esi
c0017361:	53                   	push   ebx
c0017362:	83 ec 28             	sub    esp,0x28
c0017365:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017369:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001736d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017371:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017375:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017378:	e8 f5 75 00 00       	call   c001e972 <Semaphore::acquire()>
c001737d:	83 c4 10             	add    esp,0x10
c0017380:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017384:	74 0c                	je     c0017392 <VCache::read(unsigned long long, int, void*)+0x34>
c0017386:	83 ec 0c             	sub    esp,0xc
c0017389:	53                   	push   ebx
c001738a:	e8 2d fe ff ff       	call   c00171bc <VCache::writeWriteBuffer()>
c001738f:	83 c4 10             	add    esp,0x10
c0017392:	83 fd 01             	cmp    ebp,0x1
c0017395:	0f 85 80 00 00 00    	jne    c001741b <VCache::read(unsigned long long, int, void*)+0xbd>
c001739b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001739e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173a2:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00173a9:	75 70                	jne    c001741b <VCache::read(unsigned long long, int, void*)+0xbd>
c00173ab:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00173ae:	89 e9                	mov    ecx,ebp
c00173b0:	f7 d9                	neg    ecx
c00173b2:	89 c8                	mov    eax,ecx
c00173b4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00173b8:	c1 f8 1f             	sar    eax,0x1f
c00173bb:	21 f1                	and    ecx,esi
c00173bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173c1:	89 c8                	mov    eax,ecx
c00173c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173c7:	21 f9                	and    ecx,edi
c00173c9:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00173cd:	89 ca                	mov    edx,ecx
c00173cf:	74 0a                	je     c00173db <VCache::read(unsigned long long, int, void*)+0x7d>
c00173d1:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00173d4:	75 05                	jne    c00173db <VCache::read(unsigned long long, int, void*)+0x7d>
c00173d6:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00173d9:	74 23                	je     c00173fe <VCache::read(unsigned long long, int, void*)+0xa0>
c00173db:	83 ec 0c             	sub    esp,0xc
c00173de:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173e6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00173e9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00173ec:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00173ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173f1:	55                   	push   ebp
c00173f2:	52                   	push   edx
c00173f3:	50                   	push   eax
c00173f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173f8:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173fb:	83 c4 20             	add    esp,0x20
c00173fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017401:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017405:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001740b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001740e:	48                   	dec    eax
c001740f:	21 c6                	and    esi,eax
c0017411:	0f af f1             	imul   esi,ecx
c0017414:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0017417:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017419:	eb 1d                	jmp    c0017438 <VCache::read(unsigned long long, int, void*)+0xda>
c001741b:	83 ec 0c             	sub    esp,0xc
c001741e:	53                   	push   ebx
c001741f:	e8 88 fd ff ff       	call   c00171ac <VCache::invalidateReadBuffer()>
c0017424:	5a                   	pop    edx
c0017425:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017428:	8b 10                	mov    edx,DWORD PTR [eax]
c001742a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001742e:	55                   	push   ebp
c001742f:	57                   	push   edi
c0017430:	56                   	push   esi
c0017431:	50                   	push   eax
c0017432:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017435:	83 c4 20             	add    esp,0x20
c0017438:	83 ec 0c             	sub    esp,0xc
c001743b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001743e:	e8 69 7c 00 00       	call   c001f0ac <Semaphore::release()>
c0017443:	83 c4 2c             	add    esp,0x2c
c0017446:	31 c0                	xor    eax,eax
c0017448:	5b                   	pop    ebx
c0017449:	5e                   	pop    esi
c001744a:	5f                   	pop    edi
c001744b:	5d                   	pop    ebp
c001744c:	c3                   	ret    
c001744d:	90                   	nop

c001744e <Video::putrect(int, int, int, int, unsigned int)>:
c001744e:	55                   	push   ebp
c001744f:	57                   	push   edi
c0017450:	56                   	push   esi
c0017451:	53                   	push   ebx
c0017452:	83 ec 1c             	sub    esp,0x1c
c0017455:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017459:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001745d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017461:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017465:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017469:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001746d:	01 df                	add    edi,ebx
c001746f:	39 fb                	cmp    ebx,edi
c0017471:	7d 1f                	jge    c0017492 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017473:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017477:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001747b:	7d 12                	jge    c001748f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001747d:	8b 16                	mov    edx,DWORD PTR [esi]
c001747f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017483:	53                   	push   ebx
c0017484:	55                   	push   ebp
c0017485:	45                   	inc    ebp
c0017486:	56                   	push   esi
c0017487:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001748a:	83 c4 10             	add    esp,0x10
c001748d:	eb e8                	jmp    c0017477 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001748f:	43                   	inc    ebx
c0017490:	eb dd                	jmp    c001746f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017492:	83 c4 1c             	add    esp,0x1c
c0017495:	5b                   	pop    ebx
c0017496:	5e                   	pop    esi
c0017497:	5f                   	pop    edi
c0017498:	5d                   	pop    ebp
c0017499:	c3                   	ret    

c001749a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001749a:	55                   	push   ebp
c001749b:	57                   	push   edi
c001749c:	31 ff                	xor    edi,edi
c001749e:	56                   	push   esi
c001749f:	53                   	push   ebx
c00174a0:	83 ec 1c             	sub    esp,0x1c
c00174a3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00174a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00174ab:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00174b2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00174b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174bb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00174bf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174c3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00174c6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174ca:	01 f9                	add    ecx,edi
c00174cc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00174d0:	7d 2f                	jge    c0017501 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00174d2:	31 f6                	xor    esi,esi
c00174d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174d8:	01 f2                	add    edx,esi
c00174da:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174de:	7d 1a                	jge    c00174fa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174e3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174e6:	46                   	inc    esi
c00174e7:	51                   	push   ecx
c00174e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174ec:	52                   	push   edx
c00174ed:	55                   	push   ebp
c00174ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174f1:	83 c4 10             	add    esp,0x10
c00174f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174f8:	eb da                	jmp    c00174d4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174fa:	47                   	inc    edi
c00174fb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174ff:	eb c5                	jmp    c00174c6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017501:	83 c4 1c             	add    esp,0x1c
c0017504:	5b                   	pop    ebx
c0017505:	5e                   	pop    esi
c0017506:	5f                   	pop    edi
c0017507:	5d                   	pop    ebp
c0017508:	c3                   	ret    
c0017509:	90                   	nop

c001750a <Video::blit(unsigned int*, int, int, int, int)>:
c001750a:	55                   	push   ebp
c001750b:	57                   	push   edi
c001750c:	56                   	push   esi
c001750d:	53                   	push   ebx
c001750e:	83 ec 1c             	sub    esp,0x1c
c0017511:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017515:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017519:	85 c0                	test   eax,eax
c001751b:	79 02                	jns    c001751f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001751d:	31 c0                	xor    eax,eax
c001751f:	c1 e0 02             	shl    eax,0x2
c0017522:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017526:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001752a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001752e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017532:	39 d8                	cmp    eax,ebx
c0017534:	7e 49                	jle    c001757f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017536:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001753c:	7c 41                	jl     c001757f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001753e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017542:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017546:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001754a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001754e:	39 f9                	cmp    ecx,edi
c0017550:	7e 22                	jle    c0017574 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017552:	83 c5 04             	add    ebp,0x4
c0017555:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001755b:	7c 14                	jl     c0017571 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001755d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001755f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017562:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017566:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001756a:	56                   	push   esi
c001756b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001756e:	83 c4 10             	add    esp,0x10
c0017571:	47                   	inc    edi
c0017572:	eb d2                	jmp    c0017546 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017578:	43                   	inc    ebx
c0017579:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001757d:	eb ab                	jmp    c001752a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001757f:	83 c4 1c             	add    esp,0x1c
c0017582:	5b                   	pop    ebx
c0017583:	5e                   	pop    esi
c0017584:	5f                   	pop    edi
c0017585:	5d                   	pop    ebp
c0017586:	c3                   	ret    
c0017587:	90                   	nop

c0017588 <Video::clearScreen(unsigned int)>:
c0017588:	57                   	push   edi
c0017589:	56                   	push   esi
c001758a:	53                   	push   ebx
c001758b:	31 db                	xor    ebx,ebx
c001758d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017591:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017597:	7e 1f                	jle    c00175b8 <Video::clearScreen(unsigned int)+0x30>
c0017599:	31 ff                	xor    edi,edi
c001759b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175a1:	7e 12                	jle    c00175b5 <Video::clearScreen(unsigned int)+0x2d>
c00175a3:	8b 06                	mov    eax,DWORD PTR [esi]
c00175a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175a9:	53                   	push   ebx
c00175aa:	57                   	push   edi
c00175ab:	47                   	inc    edi
c00175ac:	56                   	push   esi
c00175ad:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175b0:	83 c4 10             	add    esp,0x10
c00175b3:	eb e6                	jmp    c001759b <Video::clearScreen(unsigned int)+0x13>
c00175b5:	43                   	inc    ebx
c00175b6:	eb d9                	jmp    c0017591 <Video::clearScreen(unsigned int)+0x9>
c00175b8:	5b                   	pop    ebx
c00175b9:	5e                   	pop    esi
c00175ba:	5f                   	pop    edi
c00175bb:	c3                   	ret    

c00175bc <Video::putpixel(int, int, unsigned int)>:
c00175bc:	c7 44 24 04 e8 be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bee8
c00175c4:	e9 be 32 00 00       	jmp    c001a887 <Krnl::panic(char const*)>
c00175c9:	90                   	nop

c00175ca <Video::Video(char const*)>:
c00175ca:	83 ec 0c             	sub    esp,0xc
c00175cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d1:	83 ec 08             	sub    esp,0x8
c00175d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175d8:	50                   	push   eax
c00175d9:	e8 d2 ce ff ff       	call   c00144b0 <Device::Device(char const*)>
c00175de:	83 c4 10             	add    esp,0x10
c00175e1:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c00175e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ea:	89 10                	mov    DWORD PTR [eax],edx
c00175ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175fa:	90                   	nop
c00175fb:	83 c4 0c             	add    esp,0xc
c00175fe:	c3                   	ret    
c00175ff:	90                   	nop

c0017600 <Video::~Video()>:
c0017600:	83 ec 0c             	sub    esp,0xc
c0017603:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0017608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760c:	89 10                	mov    DWORD PTR [eax],edx
c001760e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017612:	83 ec 0c             	sub    esp,0xc
c0017615:	50                   	push   eax
c0017616:	e8 8b cb ff ff       	call   c00141a6 <Device::~Device()>
c001761b:	83 c4 10             	add    esp,0x10
c001761e:	90                   	nop
c001761f:	83 c4 0c             	add    esp,0xc
c0017622:	c3                   	ret    
c0017623:	90                   	nop

c0017624 <Video::~Video()>:
c0017624:	83 ec 0c             	sub    esp,0xc
c0017627:	83 ec 0c             	sub    esp,0xc
c001762a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001762e:	e8 cd ff ff ff       	call   c0017600 <Video::~Video()>
c0017633:	83 c4 10             	add    esp,0x10
c0017636:	83 ec 08             	sub    esp,0x8
c0017639:	68 64 01 00 00       	push   0x164
c001763e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017642:	e8 78 b7 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0017647:	83 c4 10             	add    esp,0x10
c001764a:	83 c4 0c             	add    esp,0xc
c001764d:	c3                   	ret    

c001764e <Video::isMonochrome()>:
c001764e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017652:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017658:	c3                   	ret    
c0017659:	90                   	nop

c001765a <Video::getWidth()>:
c001765a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001765e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017664:	c3                   	ret    
c0017665:	90                   	nop

c0017666 <Video::getHeight()>:
c0017666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001766a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017670:	c3                   	ret    
c0017671:	90                   	nop

c0017672 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017672:	55                   	push   ebp
c0017673:	57                   	push   edi
c0017674:	56                   	push   esi
c0017675:	53                   	push   ebx
c0017676:	83 ec 2c             	sub    esp,0x2c
c0017679:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001767d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017681:	83 f8 01             	cmp    eax,0x1
c0017684:	19 c9                	sbb    ecx,ecx
c0017686:	31 db                	xor    ebx,ebx
c0017688:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001768c:	89 cd                	mov    ebp,ecx
c001768e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017696:	f7 d5                	not    ebp
c0017698:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001769e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00176a2:	01 d8                	add    eax,ebx
c00176a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176a8:	56                   	push   esi
c00176a9:	e8 b8 ff ff ff       	call   c0017666 <Video::getHeight()>
c00176ae:	59                   	pop    ecx
c00176af:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00176b3:	7e 70                	jle    c0017725 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00176b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176b9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176bd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00176c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176c8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00176cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176d3:	89 f8                	mov    eax,edi
c00176d5:	83 c0 20             	add    eax,0x20
c00176d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176dc:	56                   	push   esi
c00176dd:	e8 78 ff ff ff       	call   c001765a <Video::getWidth()>
c00176e2:	5a                   	pop    edx
c00176e3:	39 c7                	cmp    edi,eax
c00176e5:	7d 34                	jge    c001771b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176e7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176ec:	74 05                	je     c00176f3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00176f0:	55                   	push   ebp
c00176f1:	eb 0d                	jmp    c0017700 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176f3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176f8:	74 12                	je     c001770c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00176fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017700:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017704:	57                   	push   edi
c0017705:	56                   	push   esi
c0017706:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017709:	83 c4 10             	add    esp,0x10
c001770c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017710:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017714:	47                   	inc    edi
c0017715:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017719:	75 c1                	jne    c00176dc <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001771b:	43                   	inc    ebx
c001771c:	83 fb 20             	cmp    ebx,0x20
c001771f:	0f 85 79 ff ff ff    	jne    c001769e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017725:	83 c4 2c             	add    esp,0x2c
c0017728:	5b                   	pop    ebx
c0017729:	5e                   	pop    esi
c001772a:	5f                   	pop    edi
c001772b:	5d                   	pop    ebp
c001772c:	c3                   	ret    
c001772d:	90                   	nop

c001772e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001772e:	55                   	push   ebp
c001772f:	57                   	push   edi
c0017730:	56                   	push   esi
c0017731:	53                   	push   ebx
c0017732:	83 ec 28             	sub    esp,0x28
c0017735:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017739:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001773d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017741:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017745:	c1 e7 08             	shl    edi,0x8
c0017748:	01 c7                	add    edi,eax
c001774a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001774e:	c1 e0 08             	shl    eax,0x8
c0017751:	01 d0                	add    eax,edx
c0017753:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017757:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001775b:	0f af c7             	imul   eax,edi
c001775e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017765:	50                   	push   eax
c0017766:	e8 89 81 ff ff       	call   c000f8f4 <malloc>
c001776b:	83 c4 10             	add    esp,0x10
c001776e:	89 c5                	mov    ebp,eax
c0017770:	85 c0                	test   eax,eax
c0017772:	75 15                	jne    c0017789 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017774:	83 ec 0c             	sub    esp,0xc
c0017777:	68 09 bf 02 c0       	push   0xc002bf09
c001777c:	e8 1e b7 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0017781:	83 c4 10             	add    esp,0x10
c0017784:	e9 1c 01 00 00       	jmp    c00178a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017789:	be 12 00 00 00       	mov    esi,0x12
c001778e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017792:	74 11                	je     c00177a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017794:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017798:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001779c:	c1 fe 03             	sar    esi,0x3
c001779f:	0f af f0             	imul   esi,eax
c00177a2:	83 c6 12             	add    esi,0x12
c00177a5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00177a9:	74 04                	je     c00177af <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00177ab:	85 ff                	test   edi,edi
c00177ad:	75 12                	jne    c00177c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00177af:	83 ec 0c             	sub    esp,0xc
c00177b2:	68 20 bf 02 c0       	push   0xc002bf20
c00177b7:	e8 e3 b6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00177bc:	e9 ce 00 00 00       	jmp    c001788f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00177c1:	52                   	push   edx
c00177c2:	52                   	push   edx
c00177c3:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00177c7:	50                   	push   eax
c00177c8:	68 35 bf 02 c0       	push   0xc002bf35
c00177cd:	e8 cd b6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00177d2:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177d6:	83 c4 10             	add    esp,0x10
c00177d9:	80 fa 02             	cmp    dl,0x2
c00177dc:	0f 85 98 00 00 00    	jne    c001787a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177e2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177e7:	75 10                	jne    c00177f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177e9:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177ed:	75 0a                	jne    c00177f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177ef:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177f2:	83 e8 18             	sub    eax,0x18
c00177f5:	a8 f7                	test   al,0xf7
c00177f7:	74 0a                	je     c0017803 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177f9:	83 ec 0c             	sub    esp,0xc
c00177fc:	68 42 bf 02 c0       	push   0xc002bf42
c0017801:	eb 7f                	jmp    c0017882 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017803:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001780b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017813:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017817:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001781f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017823:	75 0c                	jne    c0017831 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017825:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001782a:	c1 e0 18             	shl    eax,0x18
c001782d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017831:	41                   	inc    ecx
c0017832:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017837:	c1 e2 10             	shl    edx,0x10
c001783a:	89 d0                	mov    eax,edx
c001783c:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017841:	c1 e2 08             	shl    edx,0x8
c0017844:	09 c2                	or     edx,eax
c0017846:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001784a:	09 c2                	or     edx,eax
c001784c:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017850:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017854:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017858:	c1 f8 03             	sar    eax,0x3
c001785b:	01 c6                	add    esi,eax
c001785d:	89 c8                	mov    eax,ecx
c001785f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017863:	39 c7                	cmp    edi,eax
c0017865:	7f b0                	jg     c0017817 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017867:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001786b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001786f:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017872:	7e 22                	jle    c0017896 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017874:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017878:	eb 99                	jmp    c0017813 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001787a:	50                   	push   eax
c001787b:	50                   	push   eax
c001787c:	52                   	push   edx
c001787d:	68 50 bf 02 c0       	push   0xc002bf50
c0017882:	e8 18 b6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0017887:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001788a:	e8 75 80 ff ff       	call   c000f904 <free>
c001788f:	83 c4 10             	add    esp,0x10
c0017892:	31 ed                	xor    ebp,ebp
c0017894:	eb 0f                	jmp    c00178a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017896:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001789a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001789d:	89 38                	mov    DWORD PTR [eax],edi
c001789f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178a3:	89 08                	mov    DWORD PTR [eax],ecx
c00178a5:	83 c4 1c             	add    esp,0x1c
c00178a8:	89 e8                	mov    eax,ebp
c00178aa:	5b                   	pop    ebx
c00178ab:	5e                   	pop    esi
c00178ac:	5f                   	pop    edi
c00178ad:	5d                   	pop    ebp
c00178ae:	c3                   	ret    
c00178af:	90                   	nop

c00178b0 <Video::putTGA(int, int, unsigned char*, int)>:
c00178b0:	55                   	push   ebp
c00178b1:	57                   	push   edi
c00178b2:	56                   	push   esi
c00178b3:	53                   	push   ebx
c00178b4:	83 ec 28             	sub    esp,0x28
c00178b7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00178bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178bf:	50                   	push   eax
c00178c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178c4:	50                   	push   eax
c00178c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178cd:	56                   	push   esi
c00178ce:	e8 5b fe ff ff       	call   c001772e <Video::tgaParse(unsigned char*, int, int*, int*)>
c00178d3:	83 c4 20             	add    esp,0x20
c00178d6:	85 c0                	test   eax,eax
c00178d8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178dc:	74 35                	je     c0017913 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178de:	89 c7                	mov    edi,eax
c00178e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178e8:	39 d8                	cmp    eax,ebx
c00178ea:	7e 27                	jle    c0017913 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178ec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178f4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178f8:	39 e8                	cmp    eax,ebp
c00178fa:	7e 14                	jle    c0017910 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00178fe:	83 c7 04             	add    edi,0x4
c0017901:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017904:	53                   	push   ebx
c0017905:	55                   	push   ebp
c0017906:	45                   	inc    ebp
c0017907:	56                   	push   esi
c0017908:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001790b:	83 c4 10             	add    esp,0x10
c001790e:	eb e0                	jmp    c00178f0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017910:	43                   	inc    ebx
c0017911:	eb cd                	jmp    c00178e0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017913:	83 c4 1c             	add    esp,0x1c
c0017916:	5b                   	pop    ebx
c0017917:	5e                   	pop    esi
c0017918:	5f                   	pop    edi
c0017919:	5d                   	pop    ebp
c001791a:	c3                   	ret    
c001791b:	90                   	nop

c001791c <ACPI::close(int, int, void*)>:
c001791c:	83 ec 1c             	sub    esp,0x1c
c001791f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017927:	74 0a                	je     c0017933 <ACPI::close(int, int, void*)+0x17>
c0017929:	b8 00 00 00 00       	mov    eax,0x0
c001792e:	e9 9a 00 00 00       	jmp    c00179cd <ACPI::close(int, int, void*)+0xb1>
c0017933:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017938:	75 37                	jne    c0017971 <ACPI::close(int, int, void*)+0x55>
c001793a:	83 ec 0c             	sub    esp,0xc
c001793d:	68 ac bf 02 c0       	push   0xc002bfac
c0017942:	e8 58 b5 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0017947:	83 c4 10             	add    esp,0x10
c001794a:	a1 68 17 03 c0       	mov    eax,ds:0xc0031768
c001794f:	85 c0                	test   eax,eax
c0017951:	74 07                	je     c001795a <ACPI::close(int, int, void*)+0x3e>
c0017953:	a1 68 17 03 c0       	mov    eax,ds:0xc0031768
c0017958:	ff d0                	call   eax
c001795a:	83 ec 0c             	sub    esp,0xc
c001795d:	68 20 c1 02 c0       	push   0xc002c120
c0017962:	e8 20 2f 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0017967:	83 c4 10             	add    esp,0x10
c001796a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001796f:	eb 5c                	jmp    c00179cd <ACPI::close(int, int, void*)+0xb1>
c0017971:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017976:	75 50                	jne    c00179c8 <ACPI::close(int, int, void*)+0xac>
c0017978:	a1 64 17 03 c0       	mov    eax,ds:0xc0031764
c001797d:	85 c0                	test   eax,eax
c001797f:	74 07                	je     c0017988 <ACPI::close(int, int, void*)+0x6c>
c0017981:	a1 64 17 03 c0       	mov    eax,ds:0xc0031764
c0017986:	ff d0                	call   eax
c0017988:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001798d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017992:	83 e0 02             	and    eax,0x2
c0017995:	74 1c                	je     c00179b3 <ACPI::close(int, int, void*)+0x97>
c0017997:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001799e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179a2:	89 c2                	mov    edx,eax
c00179a4:	ec                   	in     al,dx
c00179a5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00179a9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00179ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179b1:	eb da                	jmp    c001798d <ACPI::close(int, int, void*)+0x71>
c00179b3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00179ba:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00179bf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00179c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179c7:	ee                   	out    dx,al
c00179c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179cd:	83 c4 1c             	add    esp,0x1c
c00179d0:	c3                   	ret    

c00179d1 <findRSDP()>:
c00179d1:	83 ec 1c             	sub    esp,0x1c
c00179d4:	83 ec 0c             	sub    esp,0xc
c00179d7:	68 b9 bf 02 c0       	push   0xc002bfb9
c00179dc:	e8 be b4 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00179e1:	83 c4 10             	add    esp,0x10
c00179e4:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00179e9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179ef:	83 e0 04             	and    eax,0x4
c00179f2:	84 c0                	test   al,al
c00179f4:	75 07                	jne    c00179fd <findRSDP()+0x2c>
c00179f6:	b8 00 00 00 00       	mov    eax,0x0
c00179fb:	eb 6a                	jmp    c0017a67 <findRSDP()+0x96>
c00179fd:	a1 f4 f0 02 c0       	mov    eax,ds:0xc002f0f4
c0017a02:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a07:	7f 1b                	jg     c0017a24 <findRSDP()+0x53>
c0017a09:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0017a0e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a14:	83 e2 fb             	and    edx,0xfffffffb
c0017a17:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a1d:	b8 00 00 00 00       	mov    eax,0x0
c0017a22:	eb 43                	jmp    c0017a67 <findRSDP()+0x96>
c0017a24:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a2c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a34:	77 2c                	ja     c0017a62 <findRSDP()+0x91>
c0017a36:	83 ec 04             	sub    esp,0x4
c0017a39:	6a 08                	push   0x8
c0017a3b:	68 c7 bf 02 c0       	push   0xc002bfc7
c0017a40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a44:	e8 1f 8c fe ff       	call   c0000668 <memcmp>
c0017a49:	83 c4 10             	add    esp,0x10
c0017a4c:	85 c0                	test   eax,eax
c0017a4e:	0f 94 c0             	sete   al
c0017a51:	84 c0                	test   al,al
c0017a53:	74 06                	je     c0017a5b <findRSDP()+0x8a>
c0017a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a59:	eb 0c                	jmp    c0017a67 <findRSDP()+0x96>
c0017a5b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a60:	eb ca                	jmp    c0017a2c <findRSDP()+0x5b>
c0017a62:	b8 00 00 00 00       	mov    eax,0x0
c0017a67:	83 c4 1c             	add    esp,0x1c
c0017a6a:	c3                   	ret    

c0017a6b <loadACPITables(unsigned char*)>:
c0017a6b:	57                   	push   edi
c0017a6c:	56                   	push   esi
c0017a6d:	53                   	push   ebx
c0017a6e:	83 ec 60             	sub    esp,0x60
c0017a71:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0017a76:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a7c:	83 e0 04             	and    eax,0x4
c0017a7f:	84 c0                	test   al,al
c0017a81:	0f 84 33 02 00 00    	je     c0017cba <loadACPITables(unsigned char*)+0x24f>
c0017a87:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c0017a8c:	84 c0                	test   al,al
c0017a8e:	74 75                	je     c0017b05 <loadACPITables(unsigned char*)+0x9a>
c0017a90:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017a98:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a9f:	83 e8 24             	sub    eax,0x24
c0017aa2:	c1 e8 03             	shr    eax,0x3
c0017aa5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017aa9:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017ab1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017ab5:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017ab9:	0f 8d b2 00 00 00    	jge    c0017b71 <loadACPITables(unsigned char*)+0x106>
c0017abf:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017ac3:	83 c0 24             	add    eax,0x24
c0017ac6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017aca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017ace:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017ad2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017ad6:	c1 e0 03             	shl    eax,0x3
c0017ad9:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017add:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017ae1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ae6:	89 c1                	mov    ecx,eax
c0017ae8:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c0017aed:	8d 50 01             	lea    edx,[eax+0x1]
c0017af0:	89 15 6c 17 03 c0    	mov    DWORD PTR ds:0xc003176c,edx
c0017af6:	89 ca                	mov    edx,ecx
c0017af8:	89 14 c5 84 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce87c],edx
c0017aff:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017b03:	eb ac                	jmp    c0017ab1 <loadACPITables(unsigned char*)+0x46>
c0017b05:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017b09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017b0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017b11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b14:	83 e8 24             	sub    eax,0x24
c0017b17:	c1 e8 02             	shr    eax,0x2
c0017b1a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b1e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017b26:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017b2a:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017b2e:	7d 41                	jge    c0017b71 <loadACPITables(unsigned char*)+0x106>
c0017b30:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017b34:	83 c0 24             	add    eax,0x24
c0017b37:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017b3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b3f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b43:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017b47:	c1 e0 02             	shl    eax,0x2
c0017b4a:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017b4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b52:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b54:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c0017b59:	8d 50 01             	lea    edx,[eax+0x1]
c0017b5c:	89 15 6c 17 03 c0    	mov    DWORD PTR ds:0xc003176c,edx
c0017b62:	89 ca                	mov    edx,ecx
c0017b64:	89 14 c5 84 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce87c],edx
c0017b6b:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b6f:	eb b5                	jmp    c0017b26 <loadACPITables(unsigned char*)+0xbb>
c0017b71:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017b79:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c0017b7e:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017b82:	0f 8d 33 01 00 00    	jge    c0017cbb <loadACPITables(unsigned char*)+0x250>
c0017b88:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b8c:	8b 04 c5 84 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce87c]
c0017b93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b9b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba3:	25 ff 0f 00 00       	and    eax,0xfff
c0017ba8:	89 c6                	mov    esi,eax
c0017baa:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c0017bb0:	83 ec 0c             	sub    esp,0xc
c0017bb3:	6a 01                	push   0x1
c0017bb5:	e8 df 9e ff ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017bc1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bc7:	83 ec 0c             	sub    esp,0xc
c0017bca:	6a 01                	push   0x1
c0017bcc:	6a 01                	push   0x1
c0017bce:	50                   	push   eax
c0017bcf:	52                   	push   edx
c0017bd0:	53                   	push   ebx
c0017bd1:	e8 f0 a9 ff ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bd6:	83 c4 20             	add    esp,0x20
c0017bd9:	09 f0                	or     eax,esi
c0017bdb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bdf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017be3:	c1 e0 03             	shl    eax,0x3
c0017be6:	05 80 17 03 c0       	add    eax,0xc0031780
c0017beb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017bef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bf7:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c0f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017c13:	89 c6                	mov    esi,eax
c0017c15:	89 d7                	mov    edi,edx
c0017c17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c19:	89 c8                	mov    eax,ecx
c0017c1b:	89 fa                	mov    edx,edi
c0017c1d:	89 f3                	mov    ebx,esi
c0017c1f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017c23:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017c27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c3a:	05 00 10 00 00       	add    eax,0x1000
c0017c3f:	c1 e8 0c             	shr    eax,0xc
c0017c42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c52:	25 ff 0f 00 00       	and    eax,0xfff
c0017c57:	89 c6                	mov    esi,eax
c0017c59:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c0017c5f:	83 ec 0c             	sub    esp,0xc
c0017c62:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c66:	e8 2e 9e ff ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c0017c6b:	83 c4 10             	add    esp,0x10
c0017c6e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c72:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c78:	83 ec 0c             	sub    esp,0xc
c0017c7b:	6a 01                	push   0x1
c0017c7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c81:	50                   	push   eax
c0017c82:	52                   	push   edx
c0017c83:	53                   	push   ebx
c0017c84:	e8 3d a9 ff ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c89:	83 c4 20             	add    esp,0x20
c0017c8c:	09 f0                	or     eax,esi
c0017c8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c96:	83 ec 0c             	sub    esp,0xc
c0017c99:	50                   	push   eax
c0017c9a:	e8 ba a2 ff ff       	call   c0011f59 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c9f:	83 c4 10             	add    esp,0x10
c0017ca2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017ca6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017caa:	89 14 c5 84 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce87c],edx
c0017cb1:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017cb5:	e9 bf fe ff ff       	jmp    c0017b79 <loadACPITables(unsigned char*)+0x10e>
c0017cba:	90                   	nop
c0017cbb:	83 c4 60             	add    esp,0x60
c0017cbe:	5b                   	pop    ebx
c0017cbf:	5e                   	pop    esi
c0017cc0:	5f                   	pop    edi
c0017cc1:	c3                   	ret    

c0017cc2 <findRSDT(unsigned char*)>:
c0017cc2:	57                   	push   edi
c0017cc3:	56                   	push   esi
c0017cc4:	53                   	push   ebx
c0017cc5:	83 ec 50             	sub    esp,0x50
c0017cc8:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0017ccd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cd3:	83 e0 04             	and    eax,0x4
c0017cd6:	84 c0                	test   al,al
c0017cd8:	75 0a                	jne    c0017ce4 <findRSDT(unsigned char*)+0x22>
c0017cda:	b8 00 00 00 00       	mov    eax,0x0
c0017cdf:	e9 21 01 00 00       	jmp    c0017e05 <findRSDT(unsigned char*)+0x143>
c0017ce4:	89 e0                	mov    eax,esp
c0017ce6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cea:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017cee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017cf2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017cfa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cfe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d06:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017d0a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017d0e:	89 c6                	mov    esi,eax
c0017d10:	89 d7                	mov    edi,edx
c0017d12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d14:	89 c8                	mov    eax,ecx
c0017d16:	89 fa                	mov    edx,edi
c0017d18:	89 f3                	mov    ebx,esi
c0017d1a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017d1e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017d22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017d26:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d2a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017d2e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017d36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d3e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d46:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d4a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d4e:	25 ff 0f 00 00       	and    eax,0xfff
c0017d53:	89 c6                	mov    esi,eax
c0017d55:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c0017d5b:	83 ec 0c             	sub    esp,0xc
c0017d5e:	6a 02                	push   0x2
c0017d60:	e8 34 9d ff ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c0017d65:	83 c4 10             	add    esp,0x10
c0017d68:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d6c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d72:	83 ec 0c             	sub    esp,0xc
c0017d75:	6a 01                	push   0x1
c0017d77:	6a 02                	push   0x2
c0017d79:	50                   	push   eax
c0017d7a:	52                   	push   edx
c0017d7b:	53                   	push   ebx
c0017d7c:	e8 45 a8 ff ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d81:	83 c4 20             	add    esp,0x20
c0017d84:	09 f0                	or     eax,esi
c0017d86:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d8e:	25 ff 0f 00 00       	and    eax,0xfff
c0017d93:	89 c6                	mov    esi,eax
c0017d95:	8b 1d 30 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f230
c0017d9b:	83 ec 0c             	sub    esp,0xc
c0017d9e:	6a 02                	push   0x2
c0017da0:	e8 f4 9c ff ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017db2:	83 ec 0c             	sub    esp,0xc
c0017db5:	6a 01                	push   0x1
c0017db7:	6a 02                	push   0x2
c0017db9:	50                   	push   eax
c0017dba:	52                   	push   edx
c0017dbb:	53                   	push   ebx
c0017dbc:	e8 05 a8 ff ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017dc1:	83 c4 20             	add    esp,0x20
c0017dc4:	09 f0                	or     eax,esi
c0017dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017dca:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017dcf:	75 11                	jne    c0017de2 <findRSDT(unsigned char*)+0x120>
c0017dd1:	c6 05 80 19 03 c0 00 	mov    BYTE PTR ds:0xc0031980,0x0
c0017dd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ddc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017de0:	eb 1f                	jmp    c0017e01 <findRSDT(unsigned char*)+0x13f>
c0017de2:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017de7:	75 11                	jne    c0017dfa <findRSDT(unsigned char*)+0x138>
c0017de9:	c6 05 80 19 03 c0 01 	mov    BYTE PTR ds:0xc0031980,0x1
c0017df0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017df4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017df8:	eb 07                	jmp    c0017e01 <findRSDT(unsigned char*)+0x13f>
c0017dfa:	b8 00 00 00 00       	mov    eax,0x0
c0017dff:	eb 04                	jmp    c0017e05 <findRSDT(unsigned char*)+0x143>
c0017e01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017e05:	83 c4 50             	add    esp,0x50
c0017e08:	5b                   	pop    ebx
c0017e09:	5e                   	pop    esi
c0017e0a:	5f                   	pop    edi
c0017e0b:	c3                   	ret    

c0017e0c <findDataTable(unsigned char*, char*)>:
c0017e0c:	83 ec 1c             	sub    esp,0x1c
c0017e0f:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0017e14:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e1a:	83 e0 04             	and    eax,0x4
c0017e1d:	84 c0                	test   al,al
c0017e1f:	75 07                	jne    c0017e28 <findDataTable(unsigned char*, char*)+0x1c>
c0017e21:	b8 00 00 00 00       	mov    eax,0x0
c0017e26:	eb 7c                	jmp    c0017ea4 <findDataTable(unsigned char*, char*)+0x98>
c0017e28:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e30:	a1 6c 17 03 c0       	mov    eax,ds:0xc003176c
c0017e35:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017e39:	7d 3a                	jge    c0017e75 <findDataTable(unsigned char*, char*)+0x69>
c0017e3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e3f:	c1 e0 03             	shl    eax,0x3
c0017e42:	05 80 17 03 c0       	add    eax,0xc0031780
c0017e47:	83 ec 04             	sub    esp,0x4
c0017e4a:	6a 04                	push   0x4
c0017e4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e50:	50                   	push   eax
c0017e51:	e8 12 88 fe ff       	call   c0000668 <memcmp>
c0017e56:	83 c4 10             	add    esp,0x10
c0017e59:	85 c0                	test   eax,eax
c0017e5b:	0f 94 c0             	sete   al
c0017e5e:	84 c0                	test   al,al
c0017e60:	74 0d                	je     c0017e6f <findDataTable(unsigned char*, char*)+0x63>
c0017e62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e66:	8b 04 c5 84 17 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce87c]
c0017e6d:	eb 35                	jmp    c0017ea4 <findDataTable(unsigned char*, char*)+0x98>
c0017e6f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e73:	eb bb                	jmp    c0017e30 <findDataTable(unsigned char*, char*)+0x24>
c0017e75:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c0017e7a:	84 c0                	test   al,al
c0017e7c:	74 07                	je     c0017e85 <findDataTable(unsigned char*, char*)+0x79>
c0017e7e:	b8 58 00 00 00       	mov    eax,0x58
c0017e83:	eb 05                	jmp    c0017e8a <findDataTable(unsigned char*, char*)+0x7e>
c0017e85:	b8 52 00 00 00       	mov    eax,0x52
c0017e8a:	83 ec 04             	sub    esp,0x4
c0017e8d:	50                   	push   eax
c0017e8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e92:	68 44 c1 02 c0       	push   0xc002c144
c0017e97:	e8 03 b0 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0017e9c:	83 c4 10             	add    esp,0x10
c0017e9f:	b8 00 00 00 00       	mov    eax,0x0
c0017ea4:	83 c4 1c             	add    esp,0x1c
c0017ea7:	c3                   	ret    

c0017ea8 <scanMADT()>:
c0017ea8:	53                   	push   ebx
c0017ea9:	83 ec 38             	sub    esp,0x38
c0017eac:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0017eb1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017eb7:	83 e0 04             	and    eax,0x4
c0017eba:	84 c0                	test   al,al
c0017ebc:	0f 84 63 04 00 00    	je     c0018325 <scanMADT()+0x47d>
c0017ec2:	e8 0a fb ff ff       	call   c00179d1 <findRSDP()>
c0017ec7:	a3 8c 19 03 c0       	mov    ds:0xc003198c,eax
c0017ecc:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017ed1:	85 c0                	test   eax,eax
c0017ed3:	75 19                	jne    c0017eee <scanMADT()+0x46>
c0017ed5:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0017eda:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ee0:	83 e2 fb             	and    edx,0xfffffffb
c0017ee3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ee9:	e9 3b 04 00 00       	jmp    c0018329 <scanMADT()+0x481>
c0017eee:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017ef3:	83 ec 0c             	sub    esp,0xc
c0017ef6:	50                   	push   eax
c0017ef7:	e8 c6 fd ff ff       	call   c0017cc2 <findRSDT(unsigned char*)>
c0017efc:	83 c4 10             	add    esp,0x10
c0017eff:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c0017f04:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c0017f09:	85 c0                	test   eax,eax
c0017f0b:	75 19                	jne    c0017f26 <scanMADT()+0x7e>
c0017f0d:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0017f12:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f18:	83 e2 fb             	and    edx,0xfffffffb
c0017f1b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f21:	e9 03 04 00 00       	jmp    c0018329 <scanMADT()+0x481>
c0017f26:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c0017f2b:	83 ec 0c             	sub    esp,0xc
c0017f2e:	50                   	push   eax
c0017f2f:	e8 37 fb ff ff       	call   c0017a6b <loadACPITables(unsigned char*)>
c0017f34:	83 c4 10             	add    esp,0x10
c0017f37:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c0017f3c:	83 ec 08             	sub    esp,0x8
c0017f3f:	68 d0 bf 02 c0       	push   0xc002bfd0
c0017f44:	50                   	push   eax
c0017f45:	e8 c2 fe ff ff       	call   c0017e0c <findDataTable(unsigned char*, char*)>
c0017f4a:	83 c4 10             	add    esp,0x10
c0017f4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f51:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f56:	75 19                	jne    c0017f71 <scanMADT()+0xc9>
c0017f58:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0017f5d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f63:	83 e2 fe             	and    edx,0xfffffffe
c0017f66:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f6c:	e9 b8 03 00 00       	jmp    c0018329 <scanMADT()+0x481>
c0017f71:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f80:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f84:	0f 87 9f 03 00 00    	ja     c0018329 <scanMADT()+0x481>
c0017f8a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f92:	0f 87 91 03 00 00    	ja     c0018329 <scanMADT()+0x481>
c0017f98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f9c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017fa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa4:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017faf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fb3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017fb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbb:	8d 50 01             	lea    edx,[eax+0x1]
c0017fbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fca:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017fce:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017fd3:	0f 86 4f 03 00 00    	jbe    c0018328 <scanMADT()+0x480>
c0017fd9:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017fde:	75 57                	jne    c0018037 <scanMADT()+0x18f>
c0017fe0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe4:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017feb:	8a 15 80 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b80
c0017ff1:	0f b6 d2             	movzx  edx,dl
c0017ff4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ff8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ffc:	88 82 c0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce440],al
c0018002:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018006:	8d 50 01             	lea    edx,[eax+0x1]
c0018009:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001800d:	8a 15 80 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b80
c0018013:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018016:	88 0d 80 1b 03 c0    	mov    BYTE PTR ds:0xc0031b80,cl
c001801c:	0f b6 d2             	movzx  edx,dl
c001801f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018023:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018027:	88 82 a0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce460],al
c001802d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018032:	e9 da 02 00 00       	jmp    c0018311 <scanMADT()+0x469>
c0018037:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001803c:	0f 85 14 01 00 00    	jne    c0018156 <scanMADT()+0x2ae>
c0018042:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018046:	8d 50 01             	lea    edx,[eax+0x1]
c0018049:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001804d:	8a 15 40 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a40
c0018053:	0f b6 d2             	movzx  edx,dl
c0018056:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001805a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001805e:	88 82 60 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce5a0],al
c0018064:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0018068:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001806c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018070:	01 d0                	add    eax,edx
c0018072:	83 c0 2c             	add    eax,0x2c
c0018075:	8a 00                	mov    al,BYTE PTR [eax]
c0018077:	0f b6 d0             	movzx  edx,al
c001807a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807e:	8d 48 01             	lea    ecx,[eax+0x1]
c0018081:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018085:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018089:	0f b6 c0             	movzx  eax,al
c001808c:	c1 e0 08             	shl    eax,0x8
c001808f:	89 d1                	mov    ecx,edx
c0018091:	09 c1                	or     ecx,eax
c0018093:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018097:	8d 50 02             	lea    edx,[eax+0x2]
c001809a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180a2:	0f b6 c0             	movzx  eax,al
c00180a5:	c1 e0 10             	shl    eax,0x10
c00180a8:	09 c1                	or     ecx,eax
c00180aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ae:	8d 50 03             	lea    edx,[eax+0x3]
c00180b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b9:	0f b6 c0             	movzx  eax,al
c00180bc:	c1 e0 18             	shl    eax,0x18
c00180bf:	09 c1                	or     ecx,eax
c00180c1:	89 ca                	mov    edx,ecx
c00180c3:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c00180c8:	0f b6 c0             	movzx  eax,al
c00180cb:	89 14 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],edx
c00180d2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180df:	01 d0                	add    eax,edx
c00180e1:	83 c0 2c             	add    eax,0x2c
c00180e4:	8a 00                	mov    al,BYTE PTR [eax]
c00180e6:	0f b6 d0             	movzx  edx,al
c00180e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00180f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180f4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180f8:	0f b6 c0             	movzx  eax,al
c00180fb:	c1 e0 08             	shl    eax,0x8
c00180fe:	89 d1                	mov    ecx,edx
c0018100:	09 c1                	or     ecx,eax
c0018102:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018106:	8d 50 02             	lea    edx,[eax+0x2]
c0018109:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001810d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018111:	0f b6 c0             	movzx  eax,al
c0018114:	c1 e0 10             	shl    eax,0x10
c0018117:	09 c1                	or     ecx,eax
c0018119:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811d:	8d 50 03             	lea    edx,[eax+0x3]
c0018120:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018124:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018128:	0f b6 c0             	movzx  eax,al
c001812b:	c1 e0 18             	shl    eax,0x18
c001812e:	09 c1                	or     ecx,eax
c0018130:	89 ca                	mov    edx,ecx
c0018132:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c0018137:	0f b6 c0             	movzx  eax,al
c001813a:	89 14 85 00 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce500],edx
c0018141:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018146:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c001814b:	40                   	inc    eax
c001814c:	a2 40 1a 03 c0       	mov    ds:0xc0031a40,al
c0018151:	e9 bb 01 00 00       	jmp    c0018311 <scanMADT()+0x469>
c0018156:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001815b:	0f 85 e9 00 00 00    	jne    c001824a <scanMADT()+0x3a2>
c0018161:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018165:	8d 50 01             	lea    edx,[eax+0x1]
c0018168:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001816c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018170:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018174:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018178:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001817c:	8d 50 01             	lea    edx,[eax+0x1]
c001817f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018183:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018187:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001818b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001818f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018193:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018197:	01 d0                	add    eax,edx
c0018199:	83 c0 2c             	add    eax,0x2c
c001819c:	8a 00                	mov    al,BYTE PTR [eax]
c001819e:	0f b6 d0             	movzx  edx,al
c00181a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00181a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181ac:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181b0:	0f b6 c0             	movzx  eax,al
c00181b3:	c1 e0 08             	shl    eax,0x8
c00181b6:	89 d1                	mov    ecx,edx
c00181b8:	09 c1                	or     ecx,eax
c00181ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181be:	8d 50 02             	lea    edx,[eax+0x2]
c00181c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181c5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181c9:	0f b6 c0             	movzx  eax,al
c00181cc:	c1 e0 10             	shl    eax,0x10
c00181cf:	09 c1                	or     ecx,eax
c00181d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d5:	8d 50 03             	lea    edx,[eax+0x3]
c00181d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181dc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181e0:	0f b6 c0             	movzx  eax,al
c00181e3:	c1 e0 18             	shl    eax,0x18
c00181e6:	09 c8                	or     eax,ecx
c00181e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181ec:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00181f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f9:	01 d0                	add    eax,edx
c00181fb:	83 c0 2c             	add    eax,0x2c
c00181fe:	8a 00                	mov    al,BYTE PTR [eax]
c0018200:	0f b6 c0             	movzx  eax,al
c0018203:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018207:	8d 4a 01             	lea    ecx,[edx+0x1]
c001820a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001820e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018212:	0f b6 d2             	movzx  edx,dl
c0018215:	c1 e2 08             	shl    edx,0x8
c0018218:	09 d0                	or     eax,edx
c001821a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001821f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018224:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018229:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001822d:	88 90 00 e3 02 c0    	mov    BYTE PTR [eax-0x3ffd1d00],dl
c0018233:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018238:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001823d:	66 89 84 12 20 1a 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce5e0],ax
c0018245:	e9 c7 00 00 00       	jmp    c0018311 <scanMADT()+0x469>
c001824a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001824f:	0f 85 b0 00 00 00    	jne    c0018305 <scanMADT()+0x45d>
c0018255:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018259:	8d 50 01             	lea    edx,[eax+0x1]
c001825c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018260:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018264:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018268:	0f b6 c0             	movzx  eax,al
c001826b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001826f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018273:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018277:	01 d0                	add    eax,edx
c0018279:	83 c0 2c             	add    eax,0x2c
c001827c:	8a 00                	mov    al,BYTE PTR [eax]
c001827e:	0f b6 d0             	movzx  edx,al
c0018281:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018285:	8d 48 01             	lea    ecx,[eax+0x1]
c0018288:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001828c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018290:	0f b6 c0             	movzx  eax,al
c0018293:	c1 e0 08             	shl    eax,0x8
c0018296:	09 d0                	or     eax,edx
c0018298:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001829c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00182a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182a5:	8d 50 01             	lea    edx,[eax+0x1]
c00182a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182b0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00182b4:	0f b6 c0             	movzx  eax,al
c00182b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bf:	c1 e0 08             	shl    eax,0x8
c00182c2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00182c6:	89 c1                	mov    ecx,eax
c00182c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182cc:	c1 e0 18             	shl    eax,0x18
c00182cf:	89 c3                	mov    ebx,eax
c00182d1:	a1 90 19 03 c0       	mov    eax,ds:0xc0031990
c00182d6:	8d 50 01             	lea    edx,[eax+0x1]
c00182d9:	89 15 90 19 03 c0    	mov    DWORD PTR ds:0xc0031990,edx
c00182df:	09 d9                	or     ecx,ebx
c00182e1:	89 ca                	mov    edx,ecx
c00182e3:	89 14 85 a0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce660],edx
c00182ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182f6:	68 74 c1 02 c0       	push   0xc002c174
c00182fb:	e8 9f ab ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0018300:	83 c4 10             	add    esp,0x10
c0018303:	eb 0c                	jmp    c0018311 <scanMADT()+0x469>
c0018305:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001830a:	75 05                	jne    c0018311 <scanMADT()+0x469>
c001830c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018311:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018316:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001831a:	01 d0                	add    eax,edx
c001831c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018320:	e9 54 fc ff ff       	jmp    c0017f79 <scanMADT()+0xd1>
c0018325:	90                   	nop
c0018326:	eb 01                	jmp    c0018329 <scanMADT()+0x481>
c0018328:	90                   	nop
c0018329:	83 c4 38             	add    esp,0x38
c001832c:	5b                   	pop    ebx
c001832d:	c3                   	ret    

c001832e <ACPI::ACPI()>:
c001832e:	83 ec 0c             	sub    esp,0xc
c0018331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018335:	83 ec 08             	sub    esp,0x8
c0018338:	68 d5 bf 02 c0       	push   0xc002bfd5
c001833d:	50                   	push   eax
c001833e:	e8 6d c1 ff ff       	call   c00144b0 <Device::Device(char const*)>
c0018343:	83 c4 10             	add    esp,0x10
c0018346:	ba 10 c2 02 c0       	mov    edx,0xc002c210
c001834b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001834f:	89 10                	mov    DWORD PTR [eax],edx
c0018351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018355:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001835c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018360:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001836a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001836e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001837c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018387:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001838e:	e8 15 fb ff ff       	call   c0017ea8 <scanMADT()>
c0018393:	90                   	nop
c0018394:	83 c4 0c             	add    esp,0xc
c0018397:	c3                   	ret    

c0018398 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018398:	83 ec 2c             	sub    esp,0x2c
c001839b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001839f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00183a3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00183a7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183ab:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00183b0:	88 d0                	mov    al,dl
c00183b2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183b6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00183bb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00183c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183c7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00183d1:	0f 8d 97 00 00 00    	jge    c001846e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00183d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183df:	83 c2 2a             	add    edx,0x2a
c00183e2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00183e6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183eb:	75 78                	jne    c0018465 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f5:	83 c2 2a             	add    edx,0x2a
c00183f8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183fc:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018400:	75 63                	jne    c0018465 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018402:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018407:	74 3a                	je     c0018443 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018409:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001840d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018411:	83 c2 2a             	add    edx,0x2a
c0018414:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001841c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001841f:	39 c2                	cmp    edx,eax
c0018421:	74 10                	je     c0018433 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018423:	83 ec 0c             	sub    esp,0xc
c0018426:	68 b0 c1 02 c0       	push   0xc002c1b0
c001842b:	e8 57 24 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0018430:	83 c4 10             	add    esp,0x10
c0018433:	83 ec 0c             	sub    esp,0xc
c0018436:	68 da bf 02 c0       	push   0xc002bfda
c001843b:	e8 47 24 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0018440:	83 c4 10             	add    esp,0x10
c0018443:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018447:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001844b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001844f:	83 c2 2a             	add    edx,0x2a
c0018452:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018456:	8b 02                	mov    eax,DWORD PTR [edx]
c0018458:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001845b:	89 01                	mov    DWORD PTR [ecx],eax
c001845d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018460:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018465:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018469:	e9 55 ff ff ff       	jmp    c00183c3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001846e:	90                   	nop
c001846f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018473:	83 c4 2c             	add    esp,0x2c
c0018476:	c2 04 00             	ret    0x4
c0018479:	90                   	nop

c001847a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001847a:	83 ec 1c             	sub    esp,0x1c
c001847d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018481:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018485:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018489:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001848e:	88 c8                	mov    al,cl
c0018490:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018494:	88 d0                	mov    al,dl
c0018496:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001849a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001849e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184ab:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00184af:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00184b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184c1:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00184c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184c8:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00184cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184d1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184d7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00184db:	8d 48 01             	lea    ecx,[eax+0x1]
c00184de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184e2:	83 c2 2a             	add    edx,0x2a
c00184e5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ed:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184fa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184fe:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018506:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001850c:	8d 50 01             	lea    edx,[eax+0x1]
c001850f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018513:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001851d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018523:	3d 00 02 00 00       	cmp    eax,0x200
c0018528:	75 10                	jne    c001853a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001852a:	83 ec 0c             	sub    esp,0xc
c001852d:	68 e9 bf 02 c0       	push   0xc002bfe9
c0018532:	e8 50 23 00 00       	call   c001a887 <Krnl::panic(char const*)>
c0018537:	83 c4 10             	add    esp,0x10
c001853a:	90                   	nop
c001853b:	83 c4 1c             	add    esp,0x1c
c001853e:	c3                   	ret    
c001853f:	90                   	nop

c0018540 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018540:	b8 00 00 00 00       	mov    eax,0x0
c0018545:	c3                   	ret    

c0018546 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018546:	83 ec 1c             	sub    esp,0x1c
c0018549:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001854d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018550:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018554:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0018559:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001855e:	83 ec 08             	sub    esp,0x8
c0018561:	52                   	push   edx
c0018562:	50                   	push   eax
c0018563:	e8 a2 69 ff ff       	call   c000ef0a <Computer::readCMOS(unsigned char)>
c0018568:	83 c4 10             	add    esp,0x10
c001856b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001856f:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0018574:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018579:	83 ec 04             	sub    esp,0x4
c001857c:	6a 01                	push   0x1
c001857e:	52                   	push   edx
c001857f:	50                   	push   eax
c0018580:	e8 9b 6a ff ff       	call   c000f020 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018585:	83 c4 10             	add    esp,0x10
c0018588:	90                   	nop
c0018589:	83 c4 1c             	add    esp,0x1c
c001858c:	c3                   	ret    
c001858d:	90                   	nop

c001858e <ACPI::sleep()>:
c001858e:	83 ec 0c             	sub    esp,0xc
c0018591:	a1 60 17 03 c0       	mov    eax,ds:0xc0031760
c0018596:	85 c0                	test   eax,eax
c0018598:	74 07                	je     c00185a1 <ACPI::sleep()+0x13>
c001859a:	a1 60 17 03 c0       	mov    eax,ds:0xc0031760
c001859f:	ff d0                	call   eax
c00185a1:	90                   	nop
c00185a2:	83 c4 0c             	add    esp,0xc
c00185a5:	c3                   	ret    

c00185a6 <ACPI::open(int, int, void*)>:
c00185a6:	57                   	push   edi
c00185a7:	56                   	push   esi
c00185a8:	53                   	push   ebx
c00185a9:	83 ec 60             	sub    esp,0x60
c00185ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185b0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00185b7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185bb:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00185c2:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00185c7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185cd:	83 e0 04             	and    eax,0x4
c00185d0:	84 c0                	test   al,al
c00185d2:	74 47                	je     c001861b <ACPI::open(int, int, void*)+0x75>
c00185d4:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c00185d9:	83 ec 08             	sub    esp,0x8
c00185dc:	68 06 c0 02 c0       	push   0xc002c006
c00185e1:	50                   	push   eax
c00185e2:	e8 25 f8 ff ff       	call   c0017e0c <findDataTable(unsigned char*, char*)>
c00185e7:	83 c4 10             	add    esp,0x10
c00185ea:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00185ee:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c00185f3:	74 26                	je     c001861b <ACPI::open(int, int, void*)+0x75>
c00185f5:	83 ec 0c             	sub    esp,0xc
c00185f8:	68 0b c0 02 c0       	push   0xc002c00b
c00185fd:	e8 9d a8 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018609:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018610:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018614:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001861b:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c0018623:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018627:	8a 00                	mov    al,BYTE PTR [eax]
c0018629:	3c 01                	cmp    al,0x1
c001862b:	75 28                	jne    c0018655 <ACPI::open(int, int, void*)+0xaf>
c001862d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018631:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018638:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001863c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018643:	83 ec 0c             	sub    esp,0xc
c0018646:	68 1c c0 02 c0       	push   0xc002c01c
c001864b:	e8 4f a8 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	eb 25                	jmp    c001867a <ACPI::open(int, int, void*)+0xd4>
c0018655:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018659:	8a 00                	mov    al,BYTE PTR [eax]
c001865b:	3c 02                	cmp    al,0x2
c001865d:	75 1b                	jne    c001867a <ACPI::open(int, int, void*)+0xd4>
c001865f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018663:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001866a:	83 ec 0c             	sub    esp,0xc
c001866d:	68 24 c0 02 c0       	push   0xc002c024
c0018672:	e8 28 a8 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0018677:	83 c4 10             	add    esp,0x10
c001867a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001867e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018684:	83 f0 01             	xor    eax,0x1
c0018687:	84 c0                	test   al,al
c0018689:	74 6a                	je     c00186f5 <ACPI::open(int, int, void*)+0x14f>
c001868b:	83 ec 0c             	sub    esp,0xc
c001868e:	68 2c c0 02 c0       	push   0xc002c02c
c0018693:	e8 07 a8 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0018698:	83 c4 10             	add    esp,0x10
c001869b:	e8 b0 7a fe ff       	call   c0000150 <manualPCIProbe>
c00186a0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00186a4:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c00186a9:	75 28                	jne    c00186d3 <ACPI::open(int, int, void*)+0x12d>
c00186ab:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186af:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186ba:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186c1:	83 ec 0c             	sub    esp,0xc
c00186c4:	68 3a c0 02 c0       	push   0xc002c03a
c00186c9:	e8 d1 a7 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00186ce:	83 c4 10             	add    esp,0x10
c00186d1:	eb 22                	jmp    c00186f5 <ACPI::open(int, int, void*)+0x14f>
c00186d3:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c00186d8:	75 1b                	jne    c00186f5 <ACPI::open(int, int, void*)+0x14f>
c00186da:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186de:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186e5:	83 ec 0c             	sub    esp,0xc
c00186e8:	68 44 c0 02 c0       	push   0xc002c044
c00186ed:	e8 ad a7 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00186f2:	83 c4 10             	add    esp,0x10
c00186f5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186f9:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186ff:	84 c0                	test   al,al
c0018701:	74 13                	je     c0018716 <ACPI::open(int, int, void*)+0x170>
c0018703:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018707:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001870d:	83 f0 01             	xor    eax,0x1
c0018710:	0f b6 c0             	movzx  eax,al
c0018713:	40                   	inc    eax
c0018714:	eb 05                	jmp    c001871b <ACPI::open(int, int, void*)+0x175>
c0018716:	b8 00 00 00 00       	mov    eax,0x0
c001871b:	83 ec 08             	sub    esp,0x8
c001871e:	50                   	push   eax
c001871f:	68 4e c0 02 c0       	push   0xc002c04e
c0018724:	e8 76 a7 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0018729:	83 c4 10             	add    esp,0x10
c001872c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018730:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018736:	84 c0                	test   al,al
c0018738:	74 67                	je     c00187a1 <ACPI::open(int, int, void*)+0x1fb>
c001873a:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c0018742:	83 ec 0c             	sub    esp,0xc
c0018745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018749:	e8 a6 71 ff ff       	call   c000f8f4 <malloc>
c001874e:	83 c4 10             	add    esp,0x10
c0018751:	89 c3                	mov    ebx,eax
c0018753:	83 ec 0c             	sub    esp,0xc
c0018756:	53                   	push   ebx
c0018757:	e8 88 aa 00 00       	call   c00231e4 <PCI::PCI()>
c001875c:	83 c4 10             	add    esp,0x10
c001875f:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c0018763:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018767:	83 ec 08             	sub    esp,0x8
c001876a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001876e:	50                   	push   eax
c001876f:	e8 4c bb ff ff       	call   c00142c0 <Device::addChild(Device*)>
c0018774:	83 c4 10             	add    esp,0x10
c0018777:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001877b:	8b 00                	mov    eax,DWORD PTR [eax]
c001877d:	83 c0 08             	add    eax,0x8
c0018780:	8b 00                	mov    eax,DWORD PTR [eax]
c0018782:	6a 00                	push   0x0
c0018784:	6a 00                	push   0x0
c0018786:	6a 00                	push   0x0
c0018788:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001878c:	ff d0                	call   eax
c001878e:	83 c4 10             	add    esp,0x10
c0018791:	83 ec 0c             	sub    esp,0xc
c0018794:	68 57 c0 02 c0       	push   0xc002c057
c0018799:	e8 01 a7 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001879e:	83 c4 10             	add    esp,0x10
c00187a1:	83 ec 0c             	sub    esp,0xc
c00187a4:	68 62 c0 02 c0       	push   0xc002c062
c00187a9:	e8 36 4a 00 00       	call   c001d1e4 <Thr::loadKernelSymbolTable(char const*)>
c00187ae:	83 c4 10             	add    esp,0x10
c00187b1:	83 ec 0c             	sub    esp,0xc
c00187b4:	6a 0c                	push   0xc
c00187b6:	e8 1d 95 ff ff       	call   c0011cd8 <Virt::setupPageSwapping(int)>
c00187bb:	83 c4 10             	add    esp,0x10
c00187be:	8d 44 24 28          	lea    eax,[esp+0x28]
c00187c2:	83 ec 08             	sub    esp,0x8
c00187c5:	6a 12                	push   0x12
c00187c7:	50                   	push   eax
c00187c8:	e8 63 be ff ff       	call   c0014630 <getDevicesOfType(DeviceType)>
c00187cd:	83 c4 0c             	add    esp,0xc
c00187d0:	83 ec 0c             	sub    esp,0xc
c00187d3:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187d7:	50                   	push   eax
c00187d8:	e8 33 0e 01 00       	call   c0029610 <LinkedList<Device>::isEmpty()>
c00187dd:	83 c4 10             	add    esp,0x10
c00187e0:	83 f0 01             	xor    eax,0x1
c00187e3:	84 c0                	test   al,al
c00187e5:	0f 84 fd 00 00 00    	je     c00188e8 <ACPI::open(int, int, void*)+0x342>
c00187eb:	83 ec 0c             	sub    esp,0xc
c00187ee:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187f2:	50                   	push   eax
c00187f3:	e8 34 0e 01 00       	call   c002962c <LinkedList<Device>::getFirstElement()>
c00187f8:	83 c4 10             	add    esp,0x10
c00187fb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00187ff:	83 ec 0c             	sub    esp,0xc
c0018802:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018806:	50                   	push   eax
c0018807:	e8 28 0e 01 00       	call   c0029634 <LinkedList<Device>::removeFirst()>
c001880c:	83 c4 10             	add    esp,0x10
c001880f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018813:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0018817:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001881b:	83 ec 0c             	sub    esp,0xc
c001881e:	50                   	push   eax
c001881f:	e8 88 bd ff ff       	call   c00145ac <Device::getName()>
c0018824:	83 c4 10             	add    esp,0x10
c0018827:	83 ec 08             	sub    esp,0x8
c001882a:	50                   	push   eax
c001882b:	68 e0 c1 02 c0       	push   0xc002c1e0
c0018830:	e8 6a a6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0018835:	83 c4 10             	add    esp,0x10
c0018838:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001883c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0018840:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018846:	ba 09 00 00 00       	mov    edx,0x9
c001884b:	fc                   	cld    
c001884c:	89 c7                	mov    edi,eax
c001884e:	89 de                	mov    esi,ebx
c0018850:	89 d1                	mov    ecx,edx
c0018852:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018854:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018858:	0f b6 c0             	movzx  eax,al
c001885b:	83 ec 08             	sub    esp,0x8
c001885e:	50                   	push   eax
c001885f:	68 80 c0 02 c0       	push   0xc002c080
c0018864:	e8 36 a6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0018869:	83 c4 10             	add    esp,0x10
c001886c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018870:	0f b6 c0             	movzx  eax,al
c0018873:	83 ec 08             	sub    esp,0x8
c0018876:	50                   	push   eax
c0018877:	68 92 c0 02 c0       	push   0xc002c092
c001887c:	e8 1e a6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0018881:	83 c4 10             	add    esp,0x10
c0018884:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0018889:	0f b7 c0             	movzx  eax,ax
c001888c:	83 ec 08             	sub    esp,0x8
c001888f:	50                   	push   eax
c0018890:	68 a4 c0 02 c0       	push   0xc002c0a4
c0018895:	e8 05 a6 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001889a:	83 c4 10             	add    esp,0x10
c001889d:	83 ec 0c             	sub    esp,0xc
c00188a0:	83 ec 24             	sub    esp,0x24
c00188a3:	89 e0                	mov    eax,esp
c00188a5:	89 c3                	mov    ebx,eax
c00188a7:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188ab:	ba 09 00 00 00       	mov    edx,0x9
c00188b0:	89 df                	mov    edi,ebx
c00188b2:	89 c6                	mov    esi,eax
c00188b4:	89 d1                	mov    ecx,edx
c00188b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188b8:	e8 89 ac 00 00       	call   c0023546 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c00188bd:	83 c4 30             	add    esp,0x30
c00188c0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00188c4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00188c9:	0f 84 01 ff ff ff    	je     c00187d0 <ACPI::open(int, int, void*)+0x22a>
c00188cf:	83 ec 08             	sub    esp,0x8
c00188d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188d6:	68 b6 c0 02 c0       	push   0xc002c0b6
c00188db:	e8 bf a5 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00188e0:	83 c4 10             	add    esp,0x10
c00188e3:	e9 e8 fe ff ff       	jmp    c00187d0 <ACPI::open(int, int, void*)+0x22a>
c00188e8:	83 ec 0c             	sub    esp,0xc
c00188eb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188ef:	50                   	push   eax
c00188f0:	e8 19 0d 01 00       	call   c002960e <LinkedList<Device>::~LinkedList()>
c00188f5:	83 c4 10             	add    esp,0x10
c00188f8:	8b 1d a8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0a8
c00188fe:	83 ec 08             	sub    esp,0x8
c0018901:	6a 01                	push   0x1
c0018903:	68 c2 c0 02 c0       	push   0xc002c0c2
c0018908:	e8 4e 53 00 00       	call   c001dc5b <Thr::loadDLL(char const*, bool)>
c001890d:	83 c4 10             	add    esp,0x10
c0018910:	83 ec 08             	sub    esp,0x8
c0018913:	53                   	push   ebx
c0018914:	50                   	push   eax
c0018915:	e8 6c 55 00 00       	call   c001de86 <Thr::executeDLL(unsigned long, void*)>
c001891a:	83 c4 10             	add    esp,0x10
c001891d:	8b 1d a8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0a8
c0018923:	83 ec 08             	sub    esp,0x8
c0018926:	6a 01                	push   0x1
c0018928:	68 df c0 02 c0       	push   0xc002c0df
c001892d:	e8 29 53 00 00       	call   c001dc5b <Thr::loadDLL(char const*, bool)>
c0018932:	83 c4 10             	add    esp,0x10
c0018935:	83 ec 08             	sub    esp,0x8
c0018938:	53                   	push   ebx
c0018939:	50                   	push   eax
c001893a:	e8 47 55 00 00       	call   c001de86 <Thr::executeDLL(unsigned long, void*)>
c001893f:	83 c4 10             	add    esp,0x10
c0018942:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0018947:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001894d:	83 e0 04             	and    eax,0x4
c0018950:	84 c0                	test   al,al
c0018952:	0f 84 d3 00 00 00    	je     c0018a2b <ACPI::open(int, int, void*)+0x485>
c0018958:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c0018960:	83 ec 0c             	sub    esp,0xc
c0018963:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018967:	e8 88 6f ff ff       	call   c000f8f4 <malloc>
c001896c:	83 c4 10             	add    esp,0x10
c001896f:	89 c3                	mov    ebx,eax
c0018971:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0018976:	83 ec 04             	sub    esp,0x4
c0018979:	50                   	push   eax
c001897a:	68 fc c0 02 c0       	push   0xc002c0fc
c001897f:	53                   	push   ebx
c0018980:	e8 79 aa ff ff       	call   c00133fe <File::File(char const*, Process*)>
c0018985:	83 c4 10             	add    esp,0x10
c0018988:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001898c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018991:	74 17                	je     c00189aa <ACPI::open(int, int, void*)+0x404>
c0018993:	83 ec 0c             	sub    esp,0xc
c0018996:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001899a:	e8 31 ad ff ff       	call   c00136d0 <File::exists()>
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	84 c0                	test   al,al
c00189a4:	74 04                	je     c00189aa <ACPI::open(int, int, void*)+0x404>
c00189a6:	b0 01                	mov    al,0x1
c00189a8:	eb 02                	jmp    c00189ac <ACPI::open(int, int, void*)+0x406>
c00189aa:	b0 00                	mov    al,0x0
c00189ac:	84 c0                	test   al,al
c00189ae:	74 22                	je     c00189d2 <ACPI::open(int, int, void*)+0x42c>
c00189b0:	83 ec 08             	sub    esp,0x8
c00189b3:	6a 01                	push   0x1
c00189b5:	68 fc c0 02 c0       	push   0xc002c0fc
c00189ba:	e8 9c 52 00 00       	call   c001dc5b <Thr::loadDLL(char const*, bool)>
c00189bf:	83 c4 10             	add    esp,0x10
c00189c2:	83 ec 08             	sub    esp,0x8
c00189c5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00189c9:	50                   	push   eax
c00189ca:	e8 b7 54 00 00       	call   c001de86 <Thr::executeDLL(unsigned long, void*)>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189d7:	74 1e                	je     c00189f7 <ACPI::open(int, int, void*)+0x451>
c00189d9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189de:	74 17                	je     c00189f7 <ACPI::open(int, int, void*)+0x451>
c00189e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00189e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00189e6:	83 c0 08             	add    eax,0x8
c00189e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00189eb:	83 ec 0c             	sub    esp,0xc
c00189ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189f2:	ff d0                	call   eax
c00189f4:	83 c4 10             	add    esp,0x10
c00189f7:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c00189fc:	83 ec 08             	sub    esp,0x8
c00189ff:	68 19 c1 02 c0       	push   0xc002c119
c0018a04:	50                   	push   eax
c0018a05:	e8 02 f4 ff ff       	call   c0017e0c <findDataTable(unsigned char*, char*)>
c0018a0a:	83 c4 10             	add    esp,0x10
c0018a0d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018a11:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0018a16:	74 13                	je     c0018a2b <ACPI::open(int, int, void*)+0x485>
c0018a18:	83 ec 08             	sub    esp,0x8
c0018a1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018a1f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0018a23:	e8 1e fb ff ff       	call   c0018546 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a28:	83 c4 10             	add    esp,0x10
c0018a2b:	b8 00 00 00 00       	mov    eax,0x0
c0018a30:	83 c4 60             	add    esp,0x60
c0018a33:	5b                   	pop    ebx
c0018a34:	5e                   	pop    esi
c0018a35:	5f                   	pop    edi
c0018a36:	c3                   	ret    
c0018a37:	90                   	nop

c0018a38 <CPU::close(int, int, void*)>:
c0018a38:	31 c0                	xor    eax,eax
c0018a3a:	c3                   	ret    
c0018a3b:	90                   	nop

c0018a3c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a3c:	55                   	push   ebp
c0018a3d:	57                   	push   edi
c0018a3e:	56                   	push   esi
c0018a3f:	53                   	push   ebx
c0018a40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a48:	89 ce                	mov    esi,ecx
c0018a4a:	89 d5                	mov    ebp,edx
c0018a4c:	80 f9 04             	cmp    cl,0x4
c0018a4f:	75 28                	jne    c0018a79 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a51:	8d 42 f9             	lea    eax,[edx-0x7]
c0018a54:	3c 03                	cmp    al,0x3
c0018a56:	0f 86 63 01 00 00    	jbe    c0018bbf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a5c:	80 fa 03             	cmp    dl,0x3
c0018a5f:	0f 84 5a 01 00 00    	je     c0018bbf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a65:	8d 7a f2             	lea    edi,[edx-0xe]
c0018a68:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018a6d:	89 fb                	mov    ebx,edi
c0018a6f:	80 fb 01             	cmp    bl,0x1
c0018a72:	77 4e                	ja     c0018ac2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a74:	e9 52 01 00 00       	jmp    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a79:	80 f9 05             	cmp    cl,0x5
c0018a7c:	75 4d                	jne    c0018acb <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a7e:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018a83:	80 fa 03             	cmp    dl,0x3
c0018a86:	0f 86 3f 01 00 00    	jbe    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a8c:	8d 7a fa             	lea    edi,[edx-0x6]
c0018a8f:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018a94:	89 fb                	mov    ebx,edi
c0018a96:	80 fb 01             	cmp    bl,0x1
c0018a99:	0f 86 2c 01 00 00    	jbe    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a9f:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018aa4:	80 fa 08             	cmp    dl,0x8
c0018aa7:	0f 84 1e 01 00 00    	je     c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aad:	89 d7                	mov    edi,edx
c0018aaf:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018ab4:	83 e7 fb             	and    edi,0xfffffffb
c0018ab7:	89 fb                	mov    ebx,edi
c0018ab9:	80 fb 09             	cmp    bl,0x9
c0018abc:	0f 84 09 01 00 00    	je     c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ac2:	31 c0                	xor    eax,eax
c0018ac4:	89 eb                	mov    ebx,ebp
c0018ac6:	0f b6 fb             	movzx  edi,bl
c0018ac9:	eb 30                	jmp    c0018afb <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018acb:	31 c0                	xor    eax,eax
c0018acd:	80 f9 06             	cmp    cl,0x6
c0018ad0:	75 f2                	jne    c0018ac4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ad2:	80 fa 0a             	cmp    dl,0xa
c0018ad5:	77 ed                	ja     c0018ac4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ad7:	bf de 05 00 00       	mov    edi,0x5de
c0018adc:	0f a3 d7             	bt     edi,edx
c0018adf:	73 e3                	jae    c0018ac4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ae1:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018ae6:	e9 e0 00 00 00       	jmp    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aeb:	39 c7                	cmp    edi,eax
c0018aed:	0f 84 d3 00 00 00    	je     c0018bc6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018af3:	40                   	inc    eax
c0018af4:	3d d0 00 00 00       	cmp    eax,0xd0
c0018af9:	74 09                	je     c0018b04 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018afb:	89 f3                	mov    ebx,esi
c0018afd:	80 fb 0f             	cmp    bl,0xf
c0018b00:	75 f1                	jne    c0018af3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018b02:	eb e7                	jmp    c0018aeb <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b04:	80 f9 10             	cmp    cl,0x10
c0018b07:	75 14                	jne    c0018b1d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b09:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b0c:	83 e0 fb             	and    eax,0xfffffffb
c0018b0f:	3c 02                	cmp    al,0x2
c0018b11:	76 34                	jbe    c0018b47 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b13:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018b18:	80 fa 02             	cmp    dl,0x2
c0018b1b:	eb 24                	jmp    c0018b41 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b1d:	80 f9 11             	cmp    cl,0x11
c0018b20:	75 13                	jne    c0018b35 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b22:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018b27:	80 fa 03             	cmp    dl,0x3
c0018b2a:	0f 85 9b 00 00 00    	jne    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b30:	e9 91 00 00 00       	jmp    c0018bc6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b35:	80 f9 12             	cmp    cl,0x12
c0018b38:	75 14                	jne    c0018b4e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b3a:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018b3f:	fe ca                	dec    dl
c0018b41:	0f 85 84 00 00 00    	jne    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b47:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018b4c:	eb 7d                	jmp    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b4e:	80 f9 14             	cmp    cl,0x14
c0018b51:	75 12                	jne    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018b53:	4a                   	dec    edx
c0018b54:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018b59:	80 fa 01             	cmp    dl,0x1
c0018b5c:	77 6d                	ja     c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b5e:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018b63:	eb 66                	jmp    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b65:	80 f9 15             	cmp    cl,0x15
c0018b68:	75 31                	jne    c0018b9b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018b6a:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018b6f:	80 fa 01             	cmp    dl,0x1
c0018b72:	74 57                	je     c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b74:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018b79:	80 fa 13             	cmp    dl,0x13
c0018b7c:	76 0c                	jbe    c0018b8a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b7e:	80 fa 30             	cmp    dl,0x30
c0018b81:	75 48                	jne    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b83:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018b88:	eb 41                	jmp    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b8a:	b9 04 00 09 00       	mov    ecx,0x90004
c0018b8f:	0f a3 d1             	bt     ecx,edx
c0018b92:	73 37                	jae    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b94:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018b99:	eb 30                	jmp    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b9b:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018ba0:	80 f9 16             	cmp    cl,0x16
c0018ba3:	75 26                	jne    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba5:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c0018baa:	84 d2                	test   dl,dl
c0018bac:	74 1d                	je     c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bae:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018bb3:	80 fa 30             	cmp    dl,0x30
c0018bb6:	75 13                	jne    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb8:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0018bbd:	eb 0c                	jmp    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bbf:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018bc4:	eb 05                	jmp    c0018bcb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bc6:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018bcb:	5b                   	pop    ebx
c0018bcc:	5e                   	pop    esi
c0018bcd:	5f                   	pop    edi
c0018bce:	5d                   	pop    ebp
c0018bcf:	c3                   	ret    

c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018bd0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018bd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bd8:	80 f9 04             	cmp    cl,0x4
c0018bdb:	75 6b                	jne    c0018c48 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018bdd:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018be2:	80 fa 01             	cmp    dl,0x1
c0018be5:	0f 86 92 02 00 00    	jbe    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018beb:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018bf0:	80 fa 02             	cmp    dl,0x2
c0018bf3:	0f 84 84 02 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf9:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018bfe:	80 fa 03             	cmp    dl,0x3
c0018c01:	0f 84 76 02 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c07:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018c0c:	80 fa 04             	cmp    dl,0x4
c0018c0f:	0f 84 68 02 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c15:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018c1a:	80 fa 05             	cmp    dl,0x5
c0018c1d:	0f 84 5a 02 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c23:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018c28:	80 fa 07             	cmp    dl,0x7
c0018c2b:	0f 84 4c 02 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c31:	83 ea 08             	sub    edx,0x8
c0018c34:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018c39:	80 fa 01             	cmp    dl,0x1
c0018c3c:	0f 87 3b 02 00 00    	ja     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c42:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c0018c47:	c3                   	ret    
c0018c48:	80 f9 05             	cmp    cl,0x5
c0018c4b:	75 45                	jne    c0018c92 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c4d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c50:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018c55:	80 f9 02             	cmp    cl,0x2
c0018c58:	0f 86 1f 02 00 00    	jbe    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5e:	80 fa 04             	cmp    dl,0x4
c0018c61:	0f 84 f3 01 00 00    	je     c0018e5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018c67:	80 fa 07             	cmp    dl,0x7
c0018c6a:	0f 84 0d 02 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c70:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018c75:	80 fa 08             	cmp    dl,0x8
c0018c78:	0f 84 ff 01 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c7e:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018c83:	80 fa 09             	cmp    dl,0x9
c0018c86:	0f 85 f1 01 00 00    	jne    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c8c:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018c91:	c3                   	ret    
c0018c92:	80 f9 06             	cmp    cl,0x6
c0018c95:	0f 85 85 01 00 00    	jne    c0018e20 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018c9b:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018ca0:	80 fa 01             	cmp    dl,0x1
c0018ca3:	0f 84 d4 01 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca9:	8d 42 fb             	lea    eax,[edx-0x5]
c0018cac:	3c 01                	cmp    al,0x1
c0018cae:	0f 86 ac 01 00 00    	jbe    c0018e60 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cb4:	80 fa 03             	cmp    dl,0x3
c0018cb7:	0f 84 a3 01 00 00    	je     c0018e60 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cbd:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018cc0:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c0018cc5:	80 f9 01             	cmp    cl,0x1
c0018cc8:	0f 86 af 01 00 00    	jbe    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cce:	80 fa 09             	cmp    dl,0x9
c0018cd1:	0f 84 8f 01 00 00    	je     c0018e66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018cd7:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018cda:	80 f9 01             	cmp    cl,0x1
c0018cdd:	0f 86 9a 01 00 00    	jbe    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce3:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018ce8:	80 fa 0d             	cmp    dl,0xd
c0018ceb:	0f 84 8c 01 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf1:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018cf6:	80 fa 0e             	cmp    dl,0xe
c0018cf9:	0f 84 7e 01 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cff:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018d04:	80 fa 0f             	cmp    dl,0xf
c0018d07:	0f 84 70 01 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d0d:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018d12:	80 fa 15             	cmp    dl,0x15
c0018d15:	0f 84 62 01 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d1b:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d1e:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018d23:	80 f9 01             	cmp    cl,0x1
c0018d26:	0f 86 51 01 00 00    	jbe    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d2c:	80 fa 1a             	cmp    dl,0x1a
c0018d2f:	0f 84 37 01 00 00    	je     c0018e6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d35:	80 fa 1c             	cmp    dl,0x1c
c0018d38:	0f 84 34 01 00 00    	je     c0018e72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d3e:	80 fa 1d             	cmp    dl,0x1d
c0018d41:	0f 84 36 01 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d47:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018d4c:	80 fa 25             	cmp    dl,0x25
c0018d4f:	0f 84 28 01 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d55:	8d 4a da             	lea    ecx,[edx-0x26]
c0018d58:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018d5d:	80 f9 01             	cmp    cl,0x1
c0018d60:	0f 86 17 01 00 00    	jbe    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d66:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018d6b:	80 fa 2a             	cmp    dl,0x2a
c0018d6e:	0f 84 09 01 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d74:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018d79:	80 fa 2c             	cmp    dl,0x2c
c0018d7c:	0f 84 fb 00 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d82:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018d87:	80 fa 2d             	cmp    dl,0x2d
c0018d8a:	0f 84 ed 00 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d90:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c0018d95:	80 fa 2e             	cmp    dl,0x2e
c0018d98:	0f 84 df 00 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d9e:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018da3:	80 fa 2f             	cmp    dl,0x2f
c0018da6:	0f 84 d1 00 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dac:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018daf:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018db4:	80 f9 01             	cmp    cl,0x1
c0018db7:	0f 86 c0 00 00 00    	jbe    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dbd:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018dc2:	80 fa 37             	cmp    dl,0x37
c0018dc5:	0f 84 b2 00 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcb:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018dd0:	80 fa 3a             	cmp    dl,0x3a
c0018dd3:	0f 84 a4 00 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dd9:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018dde:	80 fa 3c             	cmp    dl,0x3c
c0018de1:	0f 84 96 00 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018de7:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018dec:	80 fa 3d             	cmp    dl,0x3d
c0018def:	0f 84 88 00 00 00    	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df5:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018dfa:	80 fa 3e             	cmp    dl,0x3e
c0018dfd:	74 7e                	je     c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dff:	8d 42 bb             	lea    eax,[edx-0x45]
c0018e02:	3c 01                	cmp    al,0x1
c0018e04:	76 72                	jbe    c0018e78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e06:	80 fa 3f             	cmp    dl,0x3f
c0018e09:	74 6d                	je     c0018e78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e0b:	80 fa 4a             	cmp    dl,0x4a
c0018e0e:	74 0a                	je     c0018e1a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e10:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018e15:	80 fa 4d             	cmp    dl,0x4d
c0018e18:	75 63                	jne    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e1a:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018e1f:	c3                   	ret    
c0018e20:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018e25:	80 f9 0b             	cmp    cl,0xb
c0018e28:	75 0a                	jne    c0018e34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e2a:	fe ca                	dec    dl
c0018e2c:	75 4f                	jne    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e2e:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018e33:	c3                   	ret    
c0018e34:	80 f9 0f             	cmp    cl,0xf
c0018e37:	75 44                	jne    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e39:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018e3e:	80 fa 02             	cmp    dl,0x2
c0018e41:	76 3a                	jbe    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e43:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e46:	3c 01                	cmp    al,0x1
c0018e48:	76 0a                	jbe    c0018e54 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e4a:	b8 26 c5 02 c0       	mov    eax,0xc002c526
c0018e4f:	80 fa 06             	cmp    dl,0x6
c0018e52:	75 29                	jne    c0018e7d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e54:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018e59:	c3                   	ret    
c0018e5a:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018e5f:	c3                   	ret    
c0018e60:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018e65:	c3                   	ret    
c0018e66:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018e6b:	c3                   	ret    
c0018e6c:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c0018e71:	c3                   	ret    
c0018e72:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018e77:	c3                   	ret    
c0018e78:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018e7d:	c3                   	ret    

c0018e7e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e7e:	60                   	pusha  
c0018e7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e8b:	9c                   	pushf  
c0018e8c:	fa                   	cli    
c0018e8d:	0f 09                	wbinvd 
c0018e8f:	0f 30                	wrmsr  
c0018e91:	9d                   	popf   
c0018e92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e96:	89 02                	mov    DWORD PTR [edx],eax
c0018e98:	61                   	popa   
c0018e99:	c3                   	ret    

c0018e9a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018e9a:	60                   	pusha  
c0018e9b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e9f:	9c                   	pushf  
c0018ea0:	fa                   	cli    
c0018ea1:	0f 09                	wbinvd 
c0018ea3:	31 c0                	xor    eax,eax
c0018ea5:	31 d2                	xor    edx,edx
c0018ea7:	0f 32                	rdmsr  
c0018ea9:	9d                   	popf   
c0018eaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018eae:	89 02                	mov    DWORD PTR [edx],eax
c0018eb0:	61                   	popa   
c0018eb1:	c3                   	ret    

c0018eb2 <CPU::AMD_K6_writeback(int, int, int)>:
c0018eb2:	56                   	push   esi
c0018eb3:	53                   	push   ebx
c0018eb4:	83 ec 10             	sub    esp,0x10
c0018eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ebb:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ec0:	75 5d                	jne    c0018f1f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ec2:	83 f8 08             	cmp    eax,0x8
c0018ec5:	75 09                	jne    c0018ed0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ec7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ecc:	7e 13                	jle    c0018ee1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ece:	eb 30                	jmp    c0018f00 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ed0:	83 f8 06             	cmp    eax,0x6
c0018ed3:	7c 4a                	jl     c0018f1f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ed5:	83 f8 07             	cmp    eax,0x7
c0018ed8:	7e 07                	jle    c0018ee1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018eda:	83 f8 09             	cmp    eax,0x9
c0018edd:	74 21                	je     c0018f00 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018edf:	eb 3e                	jmp    c0018f1f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ee1:	89 e6                	mov    esi,esp
c0018ee3:	8b 1d e8 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0e8
c0018ee9:	56                   	push   esi
c0018eea:	c1 eb 15             	shr    ebx,0x15
c0018eed:	68 82 00 00 c0       	push   0xc0000082
c0018ef2:	83 e3 7e             	and    ebx,0x7e
c0018ef5:	e8 a0 ff ff ff       	call   c0018e9a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018efa:	56                   	push   esi
c0018efb:	6a 00                	push   0x0
c0018efd:	53                   	push   ebx
c0018efe:	eb 12                	jmp    c0018f12 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018f00:	89 e3                	mov    ebx,esp
c0018f02:	53                   	push   ebx
c0018f03:	68 82 00 00 c0       	push   0xc0000082
c0018f08:	e8 8d ff ff ff       	call   c0018e9a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f0d:	53                   	push   ebx
c0018f0e:	6a 00                	push   0x0
c0018f10:	6a 00                	push   0x0
c0018f12:	68 82 00 00 c0       	push   0xc0000082
c0018f17:	e8 62 ff ff ff       	call   c0018e7e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f1c:	83 c4 18             	add    esp,0x18
c0018f1f:	83 c4 10             	add    esp,0x10
c0018f22:	5b                   	pop    ebx
c0018f23:	5e                   	pop    esi
c0018f24:	c3                   	ret    
c0018f25:	90                   	nop

c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f26:	55                   	push   ebp
c0018f27:	57                   	push   edi
c0018f28:	56                   	push   esi
c0018f29:	53                   	push   ebx
c0018f2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f2e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f32:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f36:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f3a:	39 05 c0 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5c0,eax
c0018f40:	75 23                	jne    c0018f65 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f42:	a1 ec 1b 03 c0       	mov    eax,ds:0xc0031bec
c0018f47:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f4b:	89 06                	mov    DWORD PTR [esi],eax
c0018f4d:	a1 e8 1b 03 c0       	mov    eax,ds:0xc0031be8
c0018f52:	89 07                	mov    DWORD PTR [edi],eax
c0018f54:	a1 e4 1b 03 c0       	mov    eax,ds:0xc0031be4
c0018f59:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018f5c:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c0018f61:	89 02                	mov    DWORD PTR [edx],eax
c0018f63:	eb 3f                	jmp    c0018fa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018f65:	31 c9                	xor    ecx,ecx
c0018f67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f6b:	0f a2                	cpuid  
c0018f6d:	89 06                	mov    DWORD PTR [esi],eax
c0018f6f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018f71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f75:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f78:	89 10                	mov    DWORD PTR [eax],edx
c0018f7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f7e:	a3 c0 e5 02 c0       	mov    ds:0xc002e5c0,eax
c0018f83:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f85:	a3 ec 1b 03 c0       	mov    ds:0xc0031bec,eax
c0018f8a:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f8c:	a3 e8 1b 03 c0       	mov    ds:0xc0031be8,eax
c0018f91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f94:	a3 e4 1b 03 c0       	mov    ds:0xc0031be4,eax
c0018f99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f9f:	a3 e0 1b 03 c0       	mov    ds:0xc0031be0,eax
c0018fa4:	5b                   	pop    ebx
c0018fa5:	5e                   	pop    esi
c0018fa6:	5f                   	pop    edi
c0018fa7:	5d                   	pop    ebp
c0018fa8:	c3                   	ret    
c0018fa9:	90                   	nop

c0018faa <CPU::cpuidCheckEDX(unsigned int)>:
c0018faa:	83 ec 10             	sub    esp,0x10
c0018fad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fb1:	50                   	push   eax
c0018fb2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fb6:	50                   	push   eax
c0018fb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fbb:	50                   	push   eax
c0018fbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc0:	50                   	push   eax
c0018fc1:	6a 01                	push   0x1
c0018fc3:	e8 5e ff ff ff       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fcc:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018fd0:	0f 95 c0             	setne  al
c0018fd3:	83 c4 24             	add    esp,0x24
c0018fd6:	c3                   	ret    
c0018fd7:	90                   	nop

c0018fd8 <CPU::cpuidCheckECX(unsigned int)>:
c0018fd8:	83 ec 10             	sub    esp,0x10
c0018fdb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fdf:	50                   	push   eax
c0018fe0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe4:	50                   	push   eax
c0018fe5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fe9:	50                   	push   eax
c0018fea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fee:	50                   	push   eax
c0018fef:	6a 01                	push   0x1
c0018ff1:	e8 30 ff ff ff       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ff6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ffa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ffe:	0f 95 c0             	setne  al
c0019001:	83 c4 24             	add    esp,0x24
c0019004:	c3                   	ret    
c0019005:	90                   	nop

c0019006 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0019006:	83 ec 10             	sub    esp,0x10
c0019009:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001900d:	50                   	push   eax
c001900e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019012:	50                   	push   eax
c0019013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019017:	50                   	push   eax
c0019018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001901c:	50                   	push   eax
c001901d:	6a 07                	push   0x7
c001901f:	e8 02 ff ff ff       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019024:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019028:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001902c:	0f 95 c0             	setne  al
c001902f:	83 c4 24             	add    esp,0x24
c0019032:	c3                   	ret    
c0019033:	90                   	nop

c0019034 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0019034:	83 ec 10             	sub    esp,0x10
c0019037:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001903b:	50                   	push   eax
c001903c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019040:	50                   	push   eax
c0019041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019045:	50                   	push   eax
c0019046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001904a:	50                   	push   eax
c001904b:	6a 07                	push   0x7
c001904d:	e8 d4 fe ff ff       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019052:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019056:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001905a:	0f 95 c0             	setne  al
c001905d:	83 c4 24             	add    esp,0x24
c0019060:	c3                   	ret    
c0019061:	90                   	nop

c0019062 <CPU::CPU()>:
c0019062:	83 ec 0c             	sub    esp,0xc
c0019065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019069:	83 ec 08             	sub    esp,0x8
c001906c:	68 26 c5 02 c0       	push   0xc002c526
c0019071:	50                   	push   eax
c0019072:	e8 39 b4 ff ff       	call   c00144b0 <Device::Device(char const*)>
c0019077:	83 c4 10             	add    esp,0x10
c001907a:	ba 00 c6 02 c0       	mov    edx,0xc002c600
c001907f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019083:	89 10                	mov    DWORD PTR [eax],edx
c0019085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019089:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0019093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019097:	05 78 01 00 00       	add    eax,0x178
c001909c:	83 ec 0c             	sub    esp,0xc
c001909f:	50                   	push   eax
c00190a0:	e8 65 60 ff ff       	call   c000f10a <GDT::GDT()>
c00190a5:	83 c4 10             	add    esp,0x10
c00190a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190ac:	05 7c 09 00 00       	add    eax,0x97c
c00190b1:	83 ec 0c             	sub    esp,0xc
c00190b4:	50                   	push   eax
c00190b5:	e8 ba 62 ff ff       	call   c000f374 <IDT::IDT()>
c00190ba:	83 c4 10             	add    esp,0x10
c00190bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190c1:	05 7c 11 00 00       	add    eax,0x117c
c00190c6:	83 ec 0c             	sub    esp,0xc
c00190c9:	50                   	push   eax
c00190ca:	e8 fb 82 ff ff       	call   c00113ca <TSS::TSS()>
c00190cf:	83 c4 10             	add    esp,0x10
c00190d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00190dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00190eb:	90                   	nop
c00190ec:	83 c4 0c             	add    esp,0xc
c00190ef:	c3                   	ret    

c00190f0 <CPU::displayFeatures()>:
c00190f0:	53                   	push   ebx
c00190f1:	83 ec 10             	sub    esp,0x10
c00190f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00190f8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00190fe:	68 34 c2 02 c0       	push   0xc002c234
c0019103:	e8 97 9d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0019108:	59                   	pop    ecx
c0019109:	58                   	pop    eax
c001910a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0019110:	50                   	push   eax
c0019111:	68 45 c2 02 c0       	push   0xc002c245
c0019116:	e8 84 9d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001911b:	58                   	pop    eax
c001911c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019122:	5a                   	pop    edx
c0019123:	c1 e8 0e             	shr    eax,0xe
c0019126:	0f b6 c0             	movzx  eax,al
c0019129:	50                   	push   eax
c001912a:	68 56 c2 02 c0       	push   0xc002c256
c001912f:	e8 6b 9d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0019134:	59                   	pop    ecx
c0019135:	58                   	pop    eax
c0019136:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001913c:	66 c1 e8 06          	shr    ax,0x6
c0019140:	0f b6 c0             	movzx  eax,al
c0019143:	50                   	push   eax
c0019144:	68 67 c2 02 c0       	push   0xc002c267
c0019149:	e8 51 9d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001914e:	c7 04 24 14 c7 02 c0 	mov    DWORD PTR [esp],0xc002c714
c0019155:	e8 45 9d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001915a:	83 c4 10             	add    esp,0x10
c001915d:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c0019162:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0019169:	74 05                	je     c0019170 <CPU::displayFeatures()+0x80>
c001916b:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c0019170:	52                   	push   edx
c0019171:	52                   	push   edx
c0019172:	50                   	push   eax
c0019173:	68 78 c2 02 c0       	push   0xc002c278
c0019178:	e8 22 9d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001917d:	83 c4 10             	add    esp,0x10
c0019180:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c0019185:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001918c:	78 05                	js     c0019193 <CPU::displayFeatures()+0xa3>
c001918e:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c0019193:	51                   	push   ecx
c0019194:	51                   	push   ecx
c0019195:	50                   	push   eax
c0019196:	68 8f c2 02 c0       	push   0xc002c28f
c001919b:	e8 ff 9c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00191a0:	83 c4 10             	add    esp,0x10
c00191a3:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c00191a8:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00191af:	75 05                	jne    c00191b6 <CPU::displayFeatures()+0xc6>
c00191b1:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c00191b6:	52                   	push   edx
c00191b7:	52                   	push   edx
c00191b8:	50                   	push   eax
c00191b9:	68 a6 c2 02 c0       	push   0xc002c2a6
c00191be:	e8 dc 9c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00191c3:	83 c4 10             	add    esp,0x10
c00191c6:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c00191cb:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00191d2:	75 05                	jne    c00191d9 <CPU::displayFeatures()+0xe9>
c00191d4:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c00191d9:	51                   	push   ecx
c00191da:	51                   	push   ecx
c00191db:	50                   	push   eax
c00191dc:	68 bd c2 02 c0       	push   0xc002c2bd
c00191e1:	e8 b9 9c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00191e6:	83 c4 10             	add    esp,0x10
c00191e9:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c00191ee:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00191f5:	75 05                	jne    c00191fc <CPU::displayFeatures()+0x10c>
c00191f7:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c00191fc:	52                   	push   edx
c00191fd:	52                   	push   edx
c00191fe:	50                   	push   eax
c00191ff:	68 d4 c2 02 c0       	push   0xc002c2d4
c0019204:	e8 96 9c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0019209:	83 c4 10             	add    esp,0x10
c001920c:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c0019211:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019218:	75 05                	jne    c001921f <CPU::displayFeatures()+0x12f>
c001921a:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c001921f:	51                   	push   ecx
c0019220:	51                   	push   ecx
c0019221:	50                   	push   eax
c0019222:	68 eb c2 02 c0       	push   0xc002c2eb
c0019227:	e8 73 9c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001922c:	83 c4 10             	add    esp,0x10
c001922f:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c0019234:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001923b:	75 05                	jne    c0019242 <CPU::displayFeatures()+0x152>
c001923d:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c0019242:	52                   	push   edx
c0019243:	52                   	push   edx
c0019244:	50                   	push   eax
c0019245:	68 02 c3 02 c0       	push   0xc002c302
c001924a:	e8 50 9c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001924f:	83 c4 10             	add    esp,0x10
c0019252:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c0019257:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001925e:	75 05                	jne    c0019265 <CPU::displayFeatures()+0x175>
c0019260:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c0019265:	51                   	push   ecx
c0019266:	51                   	push   ecx
c0019267:	50                   	push   eax
c0019268:	68 19 c3 02 c0       	push   0xc002c319
c001926d:	e8 2d 9c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0019272:	83 c4 10             	add    esp,0x10
c0019275:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c001927a:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019281:	75 05                	jne    c0019288 <CPU::displayFeatures()+0x198>
c0019283:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c0019288:	52                   	push   edx
c0019289:	52                   	push   edx
c001928a:	50                   	push   eax
c001928b:	68 30 c3 02 c0       	push   0xc002c330
c0019290:	e8 0a 9c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c001929d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00192a4:	75 05                	jne    c00192ab <CPU::displayFeatures()+0x1bb>
c00192a6:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c00192ab:	51                   	push   ecx
c00192ac:	51                   	push   ecx
c00192ad:	50                   	push   eax
c00192ae:	68 47 c3 02 c0       	push   0xc002c347
c00192b3:	e8 e7 9b ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00192b8:	83 c4 10             	add    esp,0x10
c00192bb:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c00192c0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00192c7:	75 05                	jne    c00192ce <CPU::displayFeatures()+0x1de>
c00192c9:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c00192ce:	52                   	push   edx
c00192cf:	52                   	push   edx
c00192d0:	50                   	push   eax
c00192d1:	68 5e c3 02 c0       	push   0xc002c35e
c00192d6:	e8 c4 9b ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c00192e3:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00192ea:	75 05                	jne    c00192f1 <CPU::displayFeatures()+0x201>
c00192ec:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c00192f1:	51                   	push   ecx
c00192f2:	51                   	push   ecx
c00192f3:	50                   	push   eax
c00192f4:	68 75 c3 02 c0       	push   0xc002c375
c00192f9:	e8 a1 9b ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00192fe:	83 c4 10             	add    esp,0x10
c0019301:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c0019306:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001930d:	75 05                	jne    c0019314 <CPU::displayFeatures()+0x224>
c001930f:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c0019314:	52                   	push   edx
c0019315:	52                   	push   edx
c0019316:	50                   	push   eax
c0019317:	68 8c c3 02 c0       	push   0xc002c38c
c001931c:	e8 7e 9b ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0019321:	83 c4 10             	add    esp,0x10
c0019324:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c0019329:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019330:	78 05                	js     c0019337 <CPU::displayFeatures()+0x247>
c0019332:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c0019337:	51                   	push   ecx
c0019338:	51                   	push   ecx
c0019339:	50                   	push   eax
c001933a:	68 a3 c3 02 c0       	push   0xc002c3a3
c001933f:	e8 5b 9b ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0019344:	83 c4 10             	add    esp,0x10
c0019347:	b8 f2 aa 02 c0       	mov    eax,0xc002aaf2
c001934c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019353:	75 05                	jne    c001935a <CPU::displayFeatures()+0x26a>
c0019355:	b8 f6 aa 02 c0       	mov    eax,0xc002aaf6
c001935a:	52                   	push   edx
c001935b:	52                   	push   edx
c001935c:	50                   	push   eax
c001935d:	68 ba c3 02 c0       	push   0xc002c3ba
c0019362:	e8 38 9b ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0019367:	83 c4 18             	add    esp,0x18
c001936a:	5b                   	pop    ebx
c001936b:	c3                   	ret    

c001936c <CPU::detectFeatures()>:
c001936c:	55                   	push   ebp
c001936d:	57                   	push   edi
c001936e:	56                   	push   esi
c001936f:	53                   	push   ebx
c0019370:	83 ec 50             	sub    esp,0x50
c0019373:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019377:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019381:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019388:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001938e:	6a 0d                	push   0xd
c0019390:	6a 00                	push   0x0
c0019392:	55                   	push   ebp
c0019393:	e8 d4 73 fe ff       	call   c000076c <memset>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c00193a0:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00193a7:	0f 84 22 09 00 00    	je     c0019ccf <CPU::detectFeatures()+0x963>
c00193ad:	83 ec 0c             	sub    esp,0xc
c00193b0:	89 ef                	mov    edi,ebp
c00193b2:	6a 10                	push   0x10
c00193b4:	e8 f1 fb ff ff       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c00193b9:	83 e0 01             	and    eax,0x1
c00193bc:	8d 14 00             	lea    edx,[eax+eax*1]
c00193bf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193c5:	83 e0 fd             	and    eax,0xfffffffd
c00193c8:	09 d0                	or     eax,edx
c00193ca:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193d0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00193d7:	e8 ce fb ff ff       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c00193dc:	83 e0 01             	and    eax,0x1
c00193df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193e6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193ec:	83 e0 fb             	and    eax,0xfffffffb
c00193ef:	09 d0                	or     eax,edx
c00193f1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193f7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00193fe:	e8 a7 fb ff ff       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c0019403:	83 e0 01             	and    eax,0x1
c0019406:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001940d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019413:	83 e0 f7             	and    eax,0xfffffff7
c0019416:	09 d0                	or     eax,edx
c0019418:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001941e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019425:	e8 80 fb ff ff       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c001942a:	83 e0 01             	and    eax,0x1
c001942d:	c1 e0 04             	shl    eax,0x4
c0019430:	88 c2                	mov    dl,al
c0019432:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019438:	83 e0 ef             	and    eax,0xffffffef
c001943b:	09 d0                	or     eax,edx
c001943d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019443:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001944a:	e8 5b fb ff ff       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c001944f:	83 e0 01             	and    eax,0x1
c0019452:	c1 e0 05             	shl    eax,0x5
c0019455:	88 c2                	mov    dl,al
c0019457:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001945d:	83 e0 df             	and    eax,0xffffffdf
c0019460:	09 d0                	or     eax,edx
c0019462:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019468:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001946f:	e8 36 fb ff ff       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c0019474:	83 e0 01             	and    eax,0x1
c0019477:	8d 14 00             	lea    edx,[eax+eax*1]
c001947a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019480:	83 e0 fd             	and    eax,0xfffffffd
c0019483:	09 d0                	or     eax,edx
c0019485:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001948b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019492:	e8 13 fb ff ff       	call   c0018faa <CPU::cpuidCheckEDX(unsigned int)>
c0019497:	83 e0 01             	and    eax,0x1
c001949a:	c1 e0 06             	shl    eax,0x6
c001949d:	88 c2                	mov    dl,al
c001949f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194a5:	83 e0 bf             	and    eax,0xffffffbf
c00194a8:	09 d0                	or     eax,edx
c00194aa:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194b0:	58                   	pop    eax
c00194b1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194b5:	50                   	push   eax
c00194b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194ba:	50                   	push   eax
c00194bb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00194bf:	56                   	push   esi
c00194c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194c4:	50                   	push   eax
c00194c5:	6a 00                	push   0x0
c00194c7:	e8 5a fa ff ff       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194cc:	b8 04 00 00 00       	mov    eax,0x4
c00194d1:	89 c1                	mov    ecx,eax
c00194d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00194d5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00194db:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00194df:	89 c1                	mov    ecx,eax
c00194e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00194e3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00194e9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00194ed:	89 c1                	mov    ecx,eax
c00194ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00194f1:	83 c4 18             	add    esp,0x18
c00194f4:	68 d1 c3 02 c0       	push   0xc002c3d1
c00194f9:	55                   	push   ebp
c00194fa:	e8 b5 73 fe ff       	call   c00008b4 <strcmp>
c00194ff:	83 c4 10             	add    esp,0x10
c0019502:	85 c0                	test   eax,eax
c0019504:	75 0f                	jne    c0019515 <CPU::detectFeatures()+0x1a9>
c0019506:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019510:	e9 22 02 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c0019515:	50                   	push   eax
c0019516:	50                   	push   eax
c0019517:	68 de c3 02 c0       	push   0xc002c3de
c001951c:	55                   	push   ebp
c001951d:	e8 92 73 fe ff       	call   c00008b4 <strcmp>
c0019522:	83 c4 10             	add    esp,0x10
c0019525:	85 c0                	test   eax,eax
c0019527:	74 dd                	je     c0019506 <CPU::detectFeatures()+0x19a>
c0019529:	50                   	push   eax
c001952a:	50                   	push   eax
c001952b:	68 eb c3 02 c0       	push   0xc002c3eb
c0019530:	55                   	push   ebp
c0019531:	e8 7e 73 fe ff       	call   c00008b4 <strcmp>
c0019536:	83 c4 10             	add    esp,0x10
c0019539:	85 c0                	test   eax,eax
c001953b:	74 2a                	je     c0019567 <CPU::detectFeatures()+0x1fb>
c001953d:	50                   	push   eax
c001953e:	50                   	push   eax
c001953f:	68 f8 c3 02 c0       	push   0xc002c3f8
c0019544:	55                   	push   ebp
c0019545:	e8 6a 73 fe ff       	call   c00008b4 <strcmp>
c001954a:	83 c4 10             	add    esp,0x10
c001954d:	85 c0                	test   eax,eax
c001954f:	74 16                	je     c0019567 <CPU::detectFeatures()+0x1fb>
c0019551:	50                   	push   eax
c0019552:	50                   	push   eax
c0019553:	68 05 c4 02 c0       	push   0xc002c405
c0019558:	55                   	push   ebp
c0019559:	e8 56 73 fe ff       	call   c00008b4 <strcmp>
c001955e:	83 c4 10             	add    esp,0x10
c0019561:	85 c0                	test   eax,eax
c0019563:	74 48                	je     c00195ad <CPU::detectFeatures()+0x241>
c0019565:	eb 0f                	jmp    c0019576 <CPU::detectFeatures()+0x20a>
c0019567:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019571:	e9 c1 01 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c0019576:	50                   	push   eax
c0019577:	50                   	push   eax
c0019578:	68 12 c4 02 c0       	push   0xc002c412
c001957d:	55                   	push   ebp
c001957e:	e8 31 73 fe ff       	call   c00008b4 <strcmp>
c0019583:	83 c4 10             	add    esp,0x10
c0019586:	85 c0                	test   eax,eax
c0019588:	74 23                	je     c00195ad <CPU::detectFeatures()+0x241>
c001958a:	57                   	push   edi
c001958b:	57                   	push   edi
c001958c:	68 1f c4 02 c0       	push   0xc002c41f
c0019591:	55                   	push   ebp
c0019592:	e8 1d 73 fe ff       	call   c00008b4 <strcmp>
c0019597:	83 c4 10             	add    esp,0x10
c001959a:	85 c0                	test   eax,eax
c001959c:	75 1e                	jne    c00195bc <CPU::detectFeatures()+0x250>
c001959e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195a8:	e9 8a 01 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c00195ad:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00195b7:	e9 7b 01 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c00195bc:	56                   	push   esi
c00195bd:	56                   	push   esi
c00195be:	68 2c c4 02 c0       	push   0xc002c42c
c00195c3:	55                   	push   ebp
c00195c4:	e8 eb 72 fe ff       	call   c00008b4 <strcmp>
c00195c9:	83 c4 10             	add    esp,0x10
c00195cc:	85 c0                	test   eax,eax
c00195ce:	75 0f                	jne    c00195df <CPU::detectFeatures()+0x273>
c00195d0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00195da:	e9 58 01 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c00195df:	51                   	push   ecx
c00195e0:	51                   	push   ecx
c00195e1:	68 eb c3 02 c0       	push   0xc002c3eb
c00195e6:	55                   	push   ebp
c00195e7:	e8 c8 72 fe ff       	call   c00008b4 <strcmp>
c00195ec:	83 c4 10             	add    esp,0x10
c00195ef:	85 c0                	test   eax,eax
c00195f1:	75 0f                	jne    c0019602 <CPU::detectFeatures()+0x296>
c00195f3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00195fd:	e9 35 01 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c0019602:	52                   	push   edx
c0019603:	52                   	push   edx
c0019604:	68 39 c4 02 c0       	push   0xc002c439
c0019609:	55                   	push   ebp
c001960a:	e8 a5 72 fe ff       	call   c00008b4 <strcmp>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	85 c0                	test   eax,eax
c0019614:	75 0f                	jne    c0019625 <CPU::detectFeatures()+0x2b9>
c0019616:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019620:	e9 12 01 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c0019625:	50                   	push   eax
c0019626:	50                   	push   eax
c0019627:	68 46 c4 02 c0       	push   0xc002c446
c001962c:	55                   	push   ebp
c001962d:	e8 82 72 fe ff       	call   c00008b4 <strcmp>
c0019632:	83 c4 10             	add    esp,0x10
c0019635:	85 c0                	test   eax,eax
c0019637:	75 0f                	jne    c0019648 <CPU::detectFeatures()+0x2dc>
c0019639:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019643:	e9 ef 00 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c0019648:	50                   	push   eax
c0019649:	50                   	push   eax
c001964a:	68 53 c4 02 c0       	push   0xc002c453
c001964f:	55                   	push   ebp
c0019650:	e8 5f 72 fe ff       	call   c00008b4 <strcmp>
c0019655:	83 c4 10             	add    esp,0x10
c0019658:	85 c0                	test   eax,eax
c001965a:	75 0f                	jne    c001966b <CPU::detectFeatures()+0x2ff>
c001965c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019666:	e9 cc 00 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c001966b:	50                   	push   eax
c001966c:	50                   	push   eax
c001966d:	68 60 c4 02 c0       	push   0xc002c460
c0019672:	55                   	push   ebp
c0019673:	e8 3c 72 fe ff       	call   c00008b4 <strcmp>
c0019678:	83 c4 10             	add    esp,0x10
c001967b:	85 c0                	test   eax,eax
c001967d:	75 0f                	jne    c001968e <CPU::detectFeatures()+0x322>
c001967f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019689:	e9 a9 00 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c001968e:	50                   	push   eax
c001968f:	50                   	push   eax
c0019690:	68 6d c4 02 c0       	push   0xc002c46d
c0019695:	55                   	push   ebp
c0019696:	e8 19 72 fe ff       	call   c00008b4 <strcmp>
c001969b:	83 c4 10             	add    esp,0x10
c001969e:	85 c0                	test   eax,eax
c00196a0:	75 0f                	jne    c00196b1 <CPU::detectFeatures()+0x345>
c00196a2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00196ac:	e9 86 00 00 00       	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c00196b1:	50                   	push   eax
c00196b2:	50                   	push   eax
c00196b3:	68 7a c4 02 c0       	push   0xc002c47a
c00196b8:	55                   	push   ebp
c00196b9:	e8 f6 71 fe ff       	call   c00008b4 <strcmp>
c00196be:	83 c4 10             	add    esp,0x10
c00196c1:	85 c0                	test   eax,eax
c00196c3:	75 0c                	jne    c00196d1 <CPU::detectFeatures()+0x365>
c00196c5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00196cf:	eb 66                	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c00196d1:	50                   	push   eax
c00196d2:	50                   	push   eax
c00196d3:	68 87 c4 02 c0       	push   0xc002c487
c00196d8:	55                   	push   ebp
c00196d9:	e8 d6 71 fe ff       	call   c00008b4 <strcmp>
c00196de:	83 c4 10             	add    esp,0x10
c00196e1:	85 c0                	test   eax,eax
c00196e3:	75 0c                	jne    c00196f1 <CPU::detectFeatures()+0x385>
c00196e5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00196ef:	eb 46                	jmp    c0019737 <CPU::detectFeatures()+0x3cb>
c00196f1:	57                   	push   edi
c00196f2:	57                   	push   edi
c00196f3:	68 94 c4 02 c0       	push   0xc002c494
c00196f8:	55                   	push   ebp
c00196f9:	e8 b6 71 fe ff       	call   c00008b4 <strcmp>
c00196fe:	83 c4 10             	add    esp,0x10
c0019701:	85 c0                	test   eax,eax
c0019703:	74 e0                	je     c00196e5 <CPU::detectFeatures()+0x379>
c0019705:	56                   	push   esi
c0019706:	56                   	push   esi
c0019707:	68 a1 c4 02 c0       	push   0xc002c4a1
c001970c:	55                   	push   ebp
c001970d:	e8 a2 71 fe ff       	call   c00008b4 <strcmp>
c0019712:	83 c4 10             	add    esp,0x10
c0019715:	85 c0                	test   eax,eax
c0019717:	74 cc                	je     c00196e5 <CPU::detectFeatures()+0x379>
c0019719:	51                   	push   ecx
c001971a:	51                   	push   ecx
c001971b:	68 ae c4 02 c0       	push   0xc002c4ae
c0019720:	55                   	push   ebp
c0019721:	e8 8e 71 fe ff       	call   c00008b4 <strcmp>
c0019726:	83 c4 10             	add    esp,0x10
c0019729:	85 c0                	test   eax,eax
c001972b:	74 b8                	je     c00196e5 <CPU::detectFeatures()+0x379>
c001972d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019737:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001973c:	0f 86 be 00 00 00    	jbe    c0019800 <CPU::detectFeatures()+0x494>
c0019742:	83 ec 0c             	sub    esp,0xc
c0019745:	68 80 00 00 00       	push   0x80
c001974a:	e8 b7 f8 ff ff       	call   c0019006 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001974f:	83 e0 01             	and    eax,0x1
c0019752:	c1 e0 06             	shl    eax,0x6
c0019755:	88 c2                	mov    dl,al
c0019757:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001975d:	83 e0 bf             	and    eax,0xffffffbf
c0019760:	09 d0                	or     eax,edx
c0019762:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019768:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001976f:	e8 92 f8 ff ff       	call   c0019006 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019774:	83 e0 01             	and    eax,0x1
c0019777:	c1 e0 04             	shl    eax,0x4
c001977a:	88 c2                	mov    dl,al
c001977c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019782:	83 e0 ef             	and    eax,0xffffffef
c0019785:	09 d0                	or     eax,edx
c0019787:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001978d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019794:	e8 6d f8 ff ff       	call   c0019006 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019799:	c1 e0 07             	shl    eax,0x7
c001979c:	88 c2                	mov    dl,al
c001979e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197a4:	83 e0 7f             	and    eax,0x7f
c00197a7:	09 d0                	or     eax,edx
c00197a9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00197b6:	e8 79 f8 ff ff       	call   c0019034 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197bb:	83 e0 01             	and    eax,0x1
c00197be:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00197c5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197cb:	83 e0 f7             	and    eax,0xfffffff7
c00197ce:	09 d0                	or     eax,edx
c00197d0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197d6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00197dd:	e8 52 f8 ff ff       	call   c0019034 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197e2:	83 c4 10             	add    esp,0x10
c00197e5:	83 e0 01             	and    eax,0x1
c00197e8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00197ef:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197f5:	83 e0 fb             	and    eax,0xfffffffb
c00197f8:	09 d0                	or     eax,edx
c00197fa:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019800:	83 ec 0c             	sub    esp,0xc
c0019803:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019807:	50                   	push   eax
c0019808:	8d 44 24 28          	lea    eax,[esp+0x28]
c001980c:	50                   	push   eax
c001980d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019811:	56                   	push   esi
c0019812:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019816:	50                   	push   eax
c0019817:	6a 01                	push   0x1
c0019819:	e8 08 f7 ff ff       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001981e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019822:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019828:	88 ca                	mov    dl,cl
c001982a:	83 e0 f0             	and    eax,0xfffffff0
c001982d:	83 e2 0f             	and    edx,0xf
c0019830:	09 d0                	or     eax,edx
c0019832:	88 ca                	mov    dl,cl
c0019834:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001983a:	c0 ea 04             	shr    dl,0x4
c001983d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019841:	0f b6 c2             	movzx  eax,dl
c0019844:	83 c4 20             	add    esp,0x20
c0019847:	c1 e0 06             	shl    eax,0x6
c001984a:	89 c7                	mov    edi,eax
c001984c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019852:	66 25 3f c0          	and    ax,0xc03f
c0019856:	09 f8                	or     eax,edi
c0019858:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001985f:	89 c8                	mov    eax,ecx
c0019861:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019868:	c1 e8 08             	shr    eax,0x8
c001986b:	83 e5 3f             	and    ebp,0x3f
c001986e:	83 e0 0f             	and    eax,0xf
c0019871:	89 c7                	mov    edi,eax
c0019873:	c1 e7 06             	shl    edi,0x6
c0019876:	09 ef                	or     edi,ebp
c0019878:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001987f:	89 fa                	mov    edx,edi
c0019881:	83 e5 c0             	and    ebp,0xffffffc0
c0019884:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001988a:	88 c2                	mov    dl,al
c001988c:	c0 ea 02             	shr    dl,0x2
c001988f:	89 d7                	mov    edi,edx
c0019891:	09 ef                	or     edi,ebp
c0019893:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019899:	89 fa                	mov    edx,edi
c001989b:	83 e5 cf             	and    ebp,0xffffffcf
c001989e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00198a4:	89 cf                	mov    edi,ecx
c00198a6:	c1 ef 0c             	shr    edi,0xc
c00198a9:	83 e7 03             	and    edi,0x3
c00198ac:	c1 e7 04             	shl    edi,0x4
c00198af:	09 ef                	or     edi,ebp
c00198b1:	3c 06                	cmp    al,0x6
c00198b3:	89 fa                	mov    edx,edi
c00198b5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00198bb:	74 04                	je     c00198c1 <CPU::detectFeatures()+0x555>
c00198bd:	3c 0f                	cmp    al,0xf
c00198bf:	75 5c                	jne    c001991d <CPU::detectFeatures()+0x5b1>
c00198c1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00198c5:	89 cf                	mov    edi,ecx
c00198c7:	c1 ef 10             	shr    edi,0x10
c00198ca:	c1 e7 04             	shl    edi,0x4
c00198cd:	09 fa                	or     edx,edi
c00198cf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00198d5:	0f b6 d2             	movzx  edx,dl
c00198d8:	66 81 e7 3f c0       	and    di,0xc03f
c00198dd:	c1 e2 06             	shl    edx,0x6
c00198e0:	09 fa                	or     edx,edi
c00198e2:	3c 0f                	cmp    al,0xf
c00198e4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00198eb:	75 30                	jne    c001991d <CPU::detectFeatures()+0x5b1>
c00198ed:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00198f3:	c1 e9 14             	shr    ecx,0x14
c00198f6:	83 e0 3f             	and    eax,0x3f
c00198f9:	83 c1 0f             	add    ecx,0xf
c00198fc:	88 ca                	mov    dl,cl
c00198fe:	c0 e9 02             	shr    cl,0x2
c0019901:	c1 e2 06             	shl    edx,0x6
c0019904:	09 d0                	or     eax,edx
c0019906:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001990c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019912:	83 e0 c0             	and    eax,0xffffffc0
c0019915:	09 c1                	or     ecx,eax
c0019917:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001991d:	83 ec 0c             	sub    esp,0xc
c0019920:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019927:	8d 44 24 28          	lea    eax,[esp+0x28]
c001992b:	50                   	push   eax
c001992c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019930:	55                   	push   ebp
c0019931:	56                   	push   esi
c0019932:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019936:	57                   	push   edi
c0019937:	68 00 00 00 80       	push   0x80000000
c001993c:	e8 e5 f5 ff ff       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019941:	83 c4 20             	add    esp,0x20
c0019944:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001994c:	76 22                	jbe    c0019970 <CPU::detectFeatures()+0x604>
c001994e:	83 ec 0c             	sub    esp,0xc
c0019951:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019955:	50                   	push   eax
c0019956:	55                   	push   ebp
c0019957:	56                   	push   esi
c0019958:	57                   	push   edi
c0019959:	68 01 00 00 80       	push   0x80000001
c001995e:	e8 c3 f5 ff ff       	call   c0018f26 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019963:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001996d:	83 c4 20             	add    esp,0x20
c0019970:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019976:	83 f8 01             	cmp    eax,0x1
c0019979:	75 6f                	jne    c00199ea <CPU::detectFeatures()+0x67e>
c001997b:	51                   	push   ecx
c001997c:	51                   	push   ecx
c001997d:	68 ba c4 02 c0       	push   0xc002c4ba
c0019982:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019986:	56                   	push   esi
c0019987:	e8 9c 6e fe ff       	call   c0000828 <strcpy>
c001998c:	5f                   	pop    edi
c001998d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019993:	5d                   	pop    ebp
c0019994:	66 c1 e8 06          	shr    ax,0x6
c0019998:	0f b6 c0             	movzx  eax,al
c001999b:	50                   	push   eax
c001999c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199a2:	c1 e8 0e             	shr    eax,0xe
c00199a5:	0f b6 c0             	movzx  eax,al
c00199a8:	50                   	push   eax
c00199a9:	e8 22 f2 ff ff       	call   c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00199ae:	5a                   	pop    edx
c00199af:	59                   	pop    ecx
c00199b0:	50                   	push   eax
c00199b1:	56                   	push   esi
c00199b2:	e8 b1 6f fe ff       	call   c0000968 <strcat>
c00199b7:	5f                   	pop    edi
c00199b8:	5d                   	pop    ebp
c00199b9:	56                   	push   esi
c00199ba:	53                   	push   ebx
c00199bb:	e8 e2 aa ff ff       	call   c00144a2 <Device::setName(char const*)>
c00199c0:	58                   	pop    eax
c00199c1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00199c7:	5a                   	pop    edx
c00199c8:	68 c1 c4 02 c0       	push   0xc002c4c1
c00199cd:	50                   	push   eax
c00199ce:	e8 e1 6e fe ff       	call   c00008b4 <strcmp>
c00199d3:	83 c4 10             	add    esp,0x10
c00199d6:	85 c0                	test   eax,eax
c00199d8:	0f 85 71 03 00 00    	jne    c0019d4f <CPU::detectFeatures()+0x9e3>
c00199de:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00199e5:	e9 65 03 00 00       	jmp    c0019d4f <CPU::detectFeatures()+0x9e3>
c00199ea:	83 f8 02             	cmp    eax,0x2
c00199ed:	0f 85 b5 00 00 00    	jne    c0019aa8 <CPU::detectFeatures()+0x73c>
c00199f3:	57                   	push   edi
c00199f4:	57                   	push   edi
c00199f5:	68 d3 c4 02 c0       	push   0xc002c4d3
c00199fa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00199fe:	56                   	push   esi
c00199ff:	e8 24 6e fe ff       	call   c0000828 <strcpy>
c0019a04:	5d                   	pop    ebp
c0019a05:	58                   	pop    eax
c0019a06:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a0c:	66 c1 e8 06          	shr    ax,0x6
c0019a10:	0f b6 c0             	movzx  eax,al
c0019a13:	50                   	push   eax
c0019a14:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a1a:	c1 e8 0e             	shr    eax,0xe
c0019a1d:	0f b6 c0             	movzx  eax,al
c0019a20:	50                   	push   eax
c0019a21:	e8 16 f0 ff ff       	call   c0018a3c <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a26:	5a                   	pop    edx
c0019a27:	59                   	pop    ecx
c0019a28:	50                   	push   eax
c0019a29:	56                   	push   esi
c0019a2a:	e8 39 6f fe ff       	call   c0000968 <strcat>
c0019a2f:	5f                   	pop    edi
c0019a30:	5d                   	pop    ebp
c0019a31:	56                   	push   esi
c0019a32:	53                   	push   ebx
c0019a33:	e8 6a aa ff ff       	call   c00144a2 <Device::setName(char const*)>
c0019a38:	58                   	pop    eax
c0019a39:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a3f:	5a                   	pop    edx
c0019a40:	68 d8 c4 02 c0       	push   0xc002c4d8
c0019a45:	50                   	push   eax
c0019a46:	e8 69 6e fe ff       	call   c00008b4 <strcmp>
c0019a4b:	83 c4 10             	add    esp,0x10
c0019a4e:	85 c0                	test   eax,eax
c0019a50:	75 20                	jne    c0019a72 <CPU::detectFeatures()+0x706>
c0019a52:	8b 15 a8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0a8
c0019a58:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019a5e:	a8 01                	test   al,0x1
c0019a60:	74 10                	je     c0019a72 <CPU::detectFeatures()+0x706>
c0019a62:	83 e0 fe             	and    eax,0xfffffffe
c0019a65:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019a6b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019a72:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a78:	c1 e8 0e             	shr    eax,0xe
c0019a7b:	3c 05                	cmp    al,0x5
c0019a7d:	0f 85 cc 02 00 00    	jne    c0019d4f <CPU::detectFeatures()+0x9e3>
c0019a83:	56                   	push   esi
c0019a84:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019a8a:	83 e0 0f             	and    eax,0xf
c0019a8d:	50                   	push   eax
c0019a8e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a94:	66 c1 e8 06          	shr    ax,0x6
c0019a98:	0f b6 c0             	movzx  eax,al
c0019a9b:	50                   	push   eax
c0019a9c:	6a 05                	push   0x5
c0019a9e:	e8 0f f4 ff ff       	call   c0018eb2 <CPU::AMD_K6_writeback(int, int, int)>
c0019aa3:	e9 1f 02 00 00       	jmp    c0019cc7 <CPU::detectFeatures()+0x95b>
c0019aa8:	8d 50 fd             	lea    edx,[eax-0x3]
c0019aab:	83 fa 01             	cmp    edx,0x1
c0019aae:	76 09                	jbe    c0019ab9 <CPU::detectFeatures()+0x74d>
c0019ab0:	83 f8 06             	cmp    eax,0x6
c0019ab3:	0f 85 91 01 00 00    	jne    c0019c4a <CPU::detectFeatures()+0x8de>
c0019ab9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019abf:	c1 ea 0e             	shr    edx,0xe
c0019ac2:	80 fa 05             	cmp    dl,0x5
c0019ac5:	75 7b                	jne    c0019b42 <CPU::detectFeatures()+0x7d6>
c0019ac7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019acd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019ad2:	66 81 fa 00 01       	cmp    dx,0x100
c0019ad7:	75 0c                	jne    c0019ae5 <CPU::detectFeatures()+0x779>
c0019ad9:	51                   	push   ecx
c0019ada:	51                   	push   ecx
c0019adb:	68 df c4 02 c0       	push   0xc002c4df
c0019ae0:	e9 dc 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019ae5:	66 81 fa 00 02       	cmp    dx,0x200
c0019aea:	75 0c                	jne    c0019af8 <CPU::detectFeatures()+0x78c>
c0019aec:	52                   	push   edx
c0019aed:	52                   	push   edx
c0019aee:	68 f2 c4 02 c0       	push   0xc002c4f2
c0019af3:	e9 c9 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019af8:	66 81 fa 40 02       	cmp    dx,0x240
c0019afd:	75 0c                	jne    c0019b0b <CPU::detectFeatures()+0x79f>
c0019aff:	50                   	push   eax
c0019b00:	50                   	push   eax
c0019b01:	68 04 c5 02 c0       	push   0xc002c504
c0019b06:	e9 b6 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019b0b:	83 f8 06             	cmp    eax,0x6
c0019b0e:	75 0c                	jne    c0019b1c <CPU::detectFeatures()+0x7b0>
c0019b10:	50                   	push   eax
c0019b11:	50                   	push   eax
c0019b12:	68 16 c5 02 c0       	push   0xc002c516
c0019b17:	e9 a5 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019b1c:	83 f8 04             	cmp    eax,0x4
c0019b1f:	75 0c                	jne    c0019b2d <CPU::detectFeatures()+0x7c1>
c0019b21:	50                   	push   eax
c0019b22:	50                   	push   eax
c0019b23:	68 22 c5 02 c0       	push   0xc002c522
c0019b28:	e9 94 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019b2d:	83 f8 03             	cmp    eax,0x3
c0019b30:	0f 85 19 02 00 00    	jne    c0019d4f <CPU::detectFeatures()+0x9e3>
c0019b36:	50                   	push   eax
c0019b37:	50                   	push   eax
c0019b38:	68 2a c5 02 c0       	push   0xc002c52a
c0019b3d:	e9 7f 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019b42:	80 fa 06             	cmp    dl,0x6
c0019b45:	0f 85 db 00 00 00    	jne    c0019c26 <CPU::detectFeatures()+0x8ba>
c0019b4b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b51:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b56:	66 81 fa 80 01       	cmp    dx,0x180
c0019b5b:	75 0c                	jne    c0019b69 <CPU::detectFeatures()+0x7fd>
c0019b5d:	50                   	push   eax
c0019b5e:	50                   	push   eax
c0019b5f:	68 35 c5 02 c0       	push   0xc002c535
c0019b64:	e9 58 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019b69:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019b6f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019b74:	75 0c                	jne    c0019b82 <CPU::detectFeatures()+0x816>
c0019b76:	50                   	push   eax
c0019b77:	50                   	push   eax
c0019b78:	68 45 c5 02 c0       	push   0xc002c545
c0019b7d:	e9 3f 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019b82:	66 81 fa 40 02       	cmp    dx,0x240
c0019b87:	75 0c                	jne    c0019b95 <CPU::detectFeatures()+0x829>
c0019b89:	55                   	push   ebp
c0019b8a:	55                   	push   ebp
c0019b8b:	68 4c c5 02 c0       	push   0xc002c54c
c0019b90:	e9 2c 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019b95:	66 81 fa 80 02       	cmp    dx,0x280
c0019b9a:	75 0c                	jne    c0019ba8 <CPU::detectFeatures()+0x83c>
c0019b9c:	57                   	push   edi
c0019b9d:	57                   	push   edi
c0019b9e:	68 55 c5 02 c0       	push   0xc002c555
c0019ba3:	e9 19 01 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019ba8:	66 81 fa 40 03       	cmp    dx,0x340
c0019bad:	74 ed                	je     c0019b9c <CPU::detectFeatures()+0x830>
c0019baf:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019bb4:	75 0c                	jne    c0019bc2 <CPU::detectFeatures()+0x856>
c0019bb6:	56                   	push   esi
c0019bb7:	56                   	push   esi
c0019bb8:	68 5c c5 02 c0       	push   0xc002c55c
c0019bbd:	e9 ff 00 00 00       	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019bc2:	83 f8 06             	cmp    eax,0x6
c0019bc5:	0f 84 45 ff ff ff    	je     c0019b10 <CPU::detectFeatures()+0x7a4>
c0019bcb:	83 f8 04             	cmp    eax,0x4
c0019bce:	0f 84 4d ff ff ff    	je     c0019b21 <CPU::detectFeatures()+0x7b5>
c0019bd4:	83 f8 03             	cmp    eax,0x3
c0019bd7:	0f 85 72 01 00 00    	jne    c0019d4f <CPU::detectFeatures()+0x9e3>
c0019bdd:	51                   	push   ecx
c0019bde:	51                   	push   ecx
c0019bdf:	68 65 c5 02 c0       	push   0xc002c565
c0019be4:	53                   	push   ebx
c0019be5:	e8 b8 a8 ff ff       	call   c00144a2 <Device::setName(char const*)>
c0019bea:	b1 c1                	mov    cl,0xc1
c0019bec:	88 c8                	mov    al,cl
c0019bee:	e6 22                	out    0x22,al
c0019bf0:	e4 23                	in     al,0x23
c0019bf2:	88 c2                	mov    dl,al
c0019bf4:	88 c8                	mov    al,cl
c0019bf6:	e6 22                	out    0x22,al
c0019bf8:	88 d0                	mov    al,dl
c0019bfa:	83 c8 10             	or     eax,0x10
c0019bfd:	e6 23                	out    0x23,al
c0019bff:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c06:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c09:	89 d0                	mov    eax,edx
c0019c0b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019c11:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019c15:	40                   	inc    eax
c0019c16:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c1c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c21:	e9 a1 00 00 00       	jmp    c0019cc7 <CPU::detectFeatures()+0x95b>
c0019c26:	83 f8 06             	cmp    eax,0x6
c0019c29:	0f 84 e1 fe ff ff    	je     c0019b10 <CPU::detectFeatures()+0x7a4>
c0019c2f:	83 f8 04             	cmp    eax,0x4
c0019c32:	0f 84 e9 fe ff ff    	je     c0019b21 <CPU::detectFeatures()+0x7b5>
c0019c38:	83 f8 03             	cmp    eax,0x3
c0019c3b:	0f 85 0e 01 00 00    	jne    c0019d4f <CPU::detectFeatures()+0x9e3>
c0019c41:	52                   	push   edx
c0019c42:	52                   	push   edx
c0019c43:	68 70 c5 02 c0       	push   0xc002c570
c0019c48:	eb 77                	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019c4a:	83 f8 07             	cmp    eax,0x7
c0019c4d:	75 09                	jne    c0019c58 <CPU::detectFeatures()+0x8ec>
c0019c4f:	50                   	push   eax
c0019c50:	50                   	push   eax
c0019c51:	68 7a c5 02 c0       	push   0xc002c57a
c0019c56:	eb 69                	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019c58:	83 f8 0a             	cmp    eax,0xa
c0019c5b:	75 09                	jne    c0019c66 <CPU::detectFeatures()+0x8fa>
c0019c5d:	50                   	push   eax
c0019c5e:	50                   	push   eax
c0019c5f:	68 85 c5 02 c0       	push   0xc002c585
c0019c64:	eb 5b                	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019c66:	83 f8 0b             	cmp    eax,0xb
c0019c69:	75 09                	jne    c0019c74 <CPU::detectFeatures()+0x908>
c0019c6b:	50                   	push   eax
c0019c6c:	50                   	push   eax
c0019c6d:	68 8d c5 02 c0       	push   0xc002c58d
c0019c72:	eb 4d                	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019c74:	83 f8 08             	cmp    eax,0x8
c0019c77:	75 09                	jne    c0019c82 <CPU::detectFeatures()+0x916>
c0019c79:	50                   	push   eax
c0019c7a:	50                   	push   eax
c0019c7b:	68 96 c5 02 c0       	push   0xc002c596
c0019c80:	eb 3f                	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019c82:	83 f8 09             	cmp    eax,0x9
c0019c85:	75 09                	jne    c0019c90 <CPU::detectFeatures()+0x924>
c0019c87:	50                   	push   eax
c0019c88:	50                   	push   eax
c0019c89:	68 9e c5 02 c0       	push   0xc002c59e
c0019c8e:	eb 31                	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019c90:	83 f8 05             	cmp    eax,0x5
c0019c93:	75 09                	jne    c0019c9e <CPU::detectFeatures()+0x932>
c0019c95:	50                   	push   eax
c0019c96:	50                   	push   eax
c0019c97:	68 a6 c5 02 c0       	push   0xc002c5a6
c0019c9c:	eb 23                	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019c9e:	83 f8 0c             	cmp    eax,0xc
c0019ca1:	75 09                	jne    c0019cac <CPU::detectFeatures()+0x940>
c0019ca3:	55                   	push   ebp
c0019ca4:	55                   	push   ebp
c0019ca5:	68 b4 c5 02 c0       	push   0xc002c5b4
c0019caa:	eb 15                	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019cac:	83 f8 0d             	cmp    eax,0xd
c0019caf:	75 09                	jne    c0019cba <CPU::detectFeatures()+0x94e>
c0019cb1:	57                   	push   edi
c0019cb2:	57                   	push   edi
c0019cb3:	68 bf c5 02 c0       	push   0xc002c5bf
c0019cb8:	eb 07                	jmp    c0019cc1 <CPU::detectFeatures()+0x955>
c0019cba:	56                   	push   esi
c0019cbb:	56                   	push   esi
c0019cbc:	68 d3 c5 02 c0       	push   0xc002c5d3
c0019cc1:	53                   	push   ebx
c0019cc2:	e8 db a7 ff ff       	call   c00144a2 <Device::setName(char const*)>
c0019cc7:	83 c4 10             	add    esp,0x10
c0019cca:	e9 80 00 00 00       	jmp    c0019d4f <CPU::detectFeatures()+0x9e3>
c0019ccf:	51                   	push   ecx
c0019cd0:	51                   	push   ecx
c0019cd1:	68 1f c4 02 c0       	push   0xc002c41f
c0019cd6:	55                   	push   ebp
c0019cd7:	e8 4c 6b fe ff       	call   c0000828 <strcpy>
c0019cdc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019ce6:	e8 c3 65 fe ff       	call   c00002ae <is486>
c0019ceb:	83 c4 10             	add    esp,0x10
c0019cee:	85 c0                	test   eax,eax
c0019cf0:	74 2b                	je     c0019d1d <CPU::detectFeatures()+0x9b1>
c0019cf2:	52                   	push   edx
c0019cf3:	52                   	push   edx
c0019cf4:	68 df c5 02 c0       	push   0xc002c5df
c0019cf9:	53                   	push   ebx
c0019cfa:	e8 a3 a7 ff ff       	call   c00144a2 <Device::setName(char const*)>
c0019cff:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019d06:	0f 20 c0             	mov    eax,cr0
c0019d09:	83 e0 14             	and    eax,0x14
c0019d0c:	83 c4 10             	add    esp,0x10
c0019d0f:	83 f8 04             	cmp    eax,0x4
c0019d12:	75 1f                	jne    c0019d33 <CPU::detectFeatures()+0x9c7>
c0019d14:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d1b:	eb 32                	jmp    c0019d4f <CPU::detectFeatures()+0x9e3>
c0019d1d:	50                   	push   eax
c0019d1e:	50                   	push   eax
c0019d1f:	68 ea c5 02 c0       	push   0xc002c5ea
c0019d24:	53                   	push   ebx
c0019d25:	e8 78 a7 ff ff       	call   c00144a2 <Device::setName(char const*)>
c0019d2a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d31:	eb d3                	jmp    c0019d06 <CPU::detectFeatures()+0x99a>
c0019d33:	e8 51 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d38:	83 e0 01             	and    eax,0x1
c0019d3b:	8d 14 00             	lea    edx,[eax+eax*1]
c0019d3e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019d44:	83 e0 fd             	and    eax,0xfffffffd
c0019d47:	09 d0                	or     eax,edx
c0019d49:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019d4f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019d56:	83 c4 4c             	add    esp,0x4c
c0019d59:	5b                   	pop    ebx
c0019d5a:	5e                   	pop    esi
c0019d5b:	5f                   	pop    edi
c0019d5c:	5d                   	pop    ebp
c0019d5d:	c3                   	ret    

c0019d5e <CPU::setupSMEP()>:
c0019d5e:	0f 20 e0             	mov    eax,cr4
c0019d61:	0d 00 00 10 00       	or     eax,0x100000
c0019d66:	0f 22 e0             	mov    cr4,eax
c0019d69:	c3                   	ret    

c0019d6a <CPU::setupUMIP()>:
c0019d6a:	0f 20 e0             	mov    eax,cr4
c0019d6d:	80 cc 08             	or     ah,0x8
c0019d70:	0f 22 e0             	mov    cr4,eax
c0019d73:	c3                   	ret    

c0019d74 <CPU::setupTSC()>:
c0019d74:	0f 20 e0             	mov    eax,cr4
c0019d77:	83 c8 04             	or     eax,0x4
c0019d7a:	0f 22 e0             	mov    cr4,eax
c0019d7d:	c3                   	ret    

c0019d7e <CPU::setupLargePages()>:
c0019d7e:	0f 20 e0             	mov    eax,cr4
c0019d81:	83 c8 10             	or     eax,0x10
c0019d84:	0f 22 e0             	mov    cr4,eax
c0019d87:	c3                   	ret    

c0019d88 <CPU::setupPAT()>:
c0019d88:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0019d8d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d94:	74 2c                	je     c0019dc2 <CPU::setupPAT()+0x3a>
c0019d96:	53                   	push   ebx
c0019d97:	83 ec 10             	sub    esp,0x10
c0019d9a:	68 77 02 00 00       	push   0x277
c0019d9f:	50                   	push   eax
c0019da0:	e8 f5 50 ff ff       	call   c000ee9a <Computer::rdmsr(unsigned int)>
c0019da5:	83 e2 f8             	and    edx,0xfffffff8
c0019da8:	83 ca 01             	or     edx,0x1
c0019dab:	52                   	push   edx
c0019dac:	50                   	push   eax
c0019dad:	68 77 02 00 00       	push   0x277
c0019db2:	ff 35 a8 f0 02 c0    	push   DWORD PTR ds:0xc002f0a8
c0019db8:	e8 09 51 ff ff       	call   c000eec6 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019dbd:	83 c4 28             	add    esp,0x28
c0019dc0:	5b                   	pop    ebx
c0019dc1:	c3                   	ret    
c0019dc2:	c3                   	ret    
c0019dc3:	90                   	nop

c0019dc4 <CPU::setupMTRR()>:
c0019dc4:	c3                   	ret    
c0019dc5:	90                   	nop

c0019dc6 <CPU::setupGlobalPages()>:
c0019dc6:	0f 20 e0             	mov    eax,cr4
c0019dc9:	0c 80                	or     al,0x80
c0019dcb:	0f 22 e0             	mov    cr4,eax
c0019dce:	c3                   	ret    
c0019dcf:	90                   	nop

c0019dd0 <CPU::allowUsermodeDataAccess()>:
c0019dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dd4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ddb:	74 03                	je     c0019de0 <CPU::allowUsermodeDataAccess()+0x10>
c0019ddd:	0f 01 cb             	stac   
c0019de0:	c3                   	ret    
c0019de1:	90                   	nop

c0019de2 <CPU::prohibitUsermodeDataAccess()>:
c0019de2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ded:	74 03                	je     c0019df2 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019def:	0f 01 ca             	clac   
c0019df2:	c3                   	ret    
c0019df3:	90                   	nop

c0019df4 <CPU::setupSMAP()>:
c0019df4:	0f 20 e0             	mov    eax,cr4
c0019df7:	0d 00 00 20 00       	or     eax,0x200000
c0019dfc:	0f 22 e0             	mov    cr4,eax
c0019dff:	eb e1                	jmp    c0019de2 <CPU::prohibitUsermodeDataAccess()>
c0019e01:	90                   	nop

c0019e02 <CPU::setupFeatures()>:
c0019e02:	83 ec 0c             	sub    esp,0xc
c0019e05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e09:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e10:	74 07                	je     c0019e19 <CPU::setupFeatures()+0x17>
c0019e12:	52                   	push   edx
c0019e13:	e8 46 ff ff ff       	call   c0019d5e <CPU::setupSMEP()>
c0019e18:	58                   	pop    eax
c0019e19:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e20:	74 07                	je     c0019e29 <CPU::setupFeatures()+0x27>
c0019e22:	52                   	push   edx
c0019e23:	e8 cc ff ff ff       	call   c0019df4 <CPU::setupSMAP()>
c0019e28:	58                   	pop    eax
c0019e29:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e30:	74 07                	je     c0019e39 <CPU::setupFeatures()+0x37>
c0019e32:	52                   	push   edx
c0019e33:	e8 32 ff ff ff       	call   c0019d6a <CPU::setupUMIP()>
c0019e38:	58                   	pop    eax
c0019e39:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e40:	74 07                	je     c0019e49 <CPU::setupFeatures()+0x47>
c0019e42:	52                   	push   edx
c0019e43:	e8 2c ff ff ff       	call   c0019d74 <CPU::setupTSC()>
c0019e48:	58                   	pop    eax
c0019e49:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e50:	74 07                	je     c0019e59 <CPU::setupFeatures()+0x57>
c0019e52:	52                   	push   edx
c0019e53:	e8 26 ff ff ff       	call   c0019d7e <CPU::setupLargePages()>
c0019e58:	59                   	pop    ecx
c0019e59:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019e60:	74 07                	je     c0019e69 <CPU::setupFeatures()+0x67>
c0019e62:	52                   	push   edx
c0019e63:	e8 5e ff ff ff       	call   c0019dc6 <CPU::setupGlobalPages()>
c0019e68:	58                   	pop    eax
c0019e69:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019e70:	74 0c                	je     c0019e7e <CPU::setupFeatures()+0x7c>
c0019e72:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e76:	83 c4 0c             	add    esp,0xc
c0019e79:	e9 0a ff ff ff       	jmp    c0019d88 <CPU::setupPAT()>
c0019e7e:	83 c4 0c             	add    esp,0xc
c0019e81:	c3                   	ret    

c0019e82 <CPU::open(int, int, void*)>:
c0019e82:	57                   	push   edi
c0019e83:	56                   	push   esi
c0019e84:	53                   	push   ebx
c0019e85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e8d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e93:	83 ec 0c             	sub    esp,0xc
c0019e96:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019e9c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019ea2:	50                   	push   eax
c0019ea3:	e8 de 52 ff ff       	call   c000f186 <GDT::setup()>
c0019ea8:	83 c4 0c             	add    esp,0xc
c0019eab:	6a 00                	push   0x0
c0019ead:	68 ef be ad de       	push   0xdeadbeef
c0019eb2:	57                   	push   edi
c0019eb3:	e8 52 75 ff ff       	call   c001140a <TSS::setup(unsigned long, unsigned long)>
c0019eb8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ebb:	e8 2a 75 ff ff       	call   c00113ea <TSS::flush()>
c0019ec0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ec6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ec9:	e8 1c 55 ff ff       	call   c000f3ea <IDT::setup()>
c0019ece:	b8 00 04 00 00       	mov    eax,0x400
c0019ed3:	0f 23 f8             	mov    db7,eax
c0019ed6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ee0:	e8 7b 60 ff ff       	call   c000ff60 <Phys::allocatePage()>
c0019ee5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019eeb:	89 30                	mov    DWORD PTR [eax],esi
c0019eed:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ef3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019ef6:	58                   	pop    eax
c0019ef7:	5a                   	pop    edx
c0019ef8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019efe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f02:	e8 a3 86 ff ff       	call   c00125aa <VAS::setCPUSpecific(unsigned long)>
c0019f07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f0a:	e8 5d f4 ff ff       	call   c001936c <CPU::detectFeatures()>
c0019f0f:	e8 e5 b9 ff ff       	call   c00158f9 <setupInterruptController()>
c0019f14:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f1a:	a1 c0 f0 02 c0       	mov    eax,ds:0xc002f0c0
c0019f1f:	83 e0 10             	and    eax,0x10
c0019f22:	83 f8 01             	cmp    eax,0x1
c0019f25:	19 c0                	sbb    eax,eax
c0019f27:	83 e0 46             	and    eax,0x46
c0019f2a:	83 c0 1e             	add    eax,0x1e
c0019f2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f30:	e8 1c d0 ff ff       	call   c0016f51 <setupTimer(int)>
c0019f35:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f3e:	e8 bf fe ff ff       	call   c0019e02 <CPU::setupFeatures()>
c0019f43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f46:	e8 a5 f1 ff ff       	call   c00190f0 <CPU::displayFeatures()>
c0019f4b:	83 c4 10             	add    esp,0x10
c0019f4e:	31 c0                	xor    eax,eax
c0019f50:	5b                   	pop    ebx
c0019f51:	5e                   	pop    esi
c0019f52:	5f                   	pop    edi
c0019f53:	c3                   	ret    

c0019f54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f54:	57                   	push   edi
c0019f55:	56                   	push   esi
c0019f56:	53                   	push   ebx
c0019f57:	51                   	push   ecx
c0019f58:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f5c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019f5f:	0f 02 c0             	lar    eax,ax
c0019f62:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019f65:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019f69:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019f6c:	88 ca                	mov    dl,cl
c0019f6e:	c0 ea 06             	shr    dl,0x6
c0019f71:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019f75:	89 ca                	mov    edx,ecx
c0019f77:	66 c1 ea 03          	shr    dx,0x3
c0019f7b:	83 e2 07             	and    edx,0x7
c0019f7e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019f83:	88 17                	mov    BYTE PTR [edi],dl
c0019f85:	0f 84 a6 01 00 00    	je     c001a131 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f8b:	83 e1 07             	and    ecx,0x7
c0019f8e:	80 f9 04             	cmp    cl,0x4
c0019f91:	0f 84 98 00 00 00    	je     c001a02f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f97:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f9c:	0f 95 c0             	setne  al
c0019f9f:	80 f9 05             	cmp    cl,0x5
c0019fa2:	0f 95 c2             	setne  dl
c0019fa5:	08 c2                	or     dl,al
c0019fa7:	74 79                	je     c001a022 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019fa9:	84 c9                	test   cl,cl
c0019fab:	75 05                	jne    c0019fb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019fad:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019fb0:	eb 3c                	jmp    c0019fee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fb2:	80 f9 01             	cmp    cl,0x1
c0019fb5:	75 05                	jne    c0019fbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019fb7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019fba:	eb 32                	jmp    c0019fee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fbc:	80 f9 02             	cmp    cl,0x2
c0019fbf:	75 05                	jne    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019fc1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019fc4:	eb 28                	jmp    c0019fee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fc6:	31 c0                	xor    eax,eax
c0019fc8:	80 f9 03             	cmp    cl,0x3
c0019fcb:	75 05                	jne    c0019fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019fcd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019fd0:	eb 1c                	jmp    c0019fee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fd2:	80 f9 05             	cmp    cl,0x5
c0019fd5:	75 05                	jne    c0019fdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019fd7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019fda:	eb 12                	jmp    c0019fee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fdc:	80 f9 06             	cmp    cl,0x6
c0019fdf:	75 05                	jne    c0019fe6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019fe1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019fe4:	eb 08                	jmp    c0019fee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fe6:	80 f9 07             	cmp    cl,0x7
c0019fe9:	75 03                	jne    c0019fee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019feb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019fee:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ff3:	75 10                	jne    c001a005 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019ff5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019ff9:	b9 03 00 00 00       	mov    ecx,0x3
c0019ffe:	01 d0                	add    eax,edx
c001a000:	e9 37 01 00 00       	jmp    c001a13c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a005:	b9 02 00 00 00       	mov    ecx,0x2
c001a00a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a00f:	0f 85 27 01 00 00    	jne    c001a13c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a015:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a018:	b9 06 00 00 00       	mov    ecx,0x6
c001a01d:	e9 1a 01 00 00       	jmp    c001a13c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a022:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a025:	b9 06 00 00 00       	mov    ecx,0x6
c001a02a:	e9 0f 01 00 00       	jmp    c001a13e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a02f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a032:	88 ca                	mov    dl,cl
c001a034:	c0 ea 06             	shr    dl,0x6
c001a037:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a03b:	89 ca                	mov    edx,ecx
c001a03d:	66 c1 ea 03          	shr    dx,0x3
c001a041:	83 e2 07             	and    edx,0x7
c001a044:	80 e1 07             	and    cl,0x7
c001a047:	75 05                	jne    c001a04e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a049:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a04c:	eb 4c                	jmp    c001a09a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a04e:	80 f9 01             	cmp    cl,0x1
c001a051:	75 05                	jne    c001a058 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a053:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a056:	eb 42                	jmp    c001a09a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a058:	80 f9 02             	cmp    cl,0x2
c001a05b:	75 05                	jne    c001a062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a05d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a060:	eb 38                	jmp    c001a09a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a062:	80 f9 03             	cmp    cl,0x3
c001a065:	75 05                	jne    c001a06c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a067:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a06a:	eb 2e                	jmp    c001a09a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a06c:	80 f9 04             	cmp    cl,0x4
c001a06f:	75 12                	jne    c001a083 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a071:	f6 c4 60             	test   ah,0x60
c001a074:	75 08                	jne    c001a07e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a076:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a079:	8d 78 14             	lea    edi,[eax+0x14]
c001a07c:	eb 1c                	jmp    c001a09a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a07e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a081:	eb 17                	jmp    c001a09a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a083:	80 f9 05             	cmp    cl,0x5
c001a086:	75 05                	jne    c001a08d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a088:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a08b:	eb 0d                	jmp    c001a09a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a08d:	80 f9 06             	cmp    cl,0x6
c001a090:	75 05                	jne    c001a097 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a092:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a095:	eb 03                	jmp    c001a09a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a097:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a09a:	84 d2                	test   dl,dl
c001a09c:	75 05                	jne    c001a0a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a09e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a0a1:	eb 3c                	jmp    c001a0df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0a3:	80 fa 01             	cmp    dl,0x1
c001a0a6:	75 05                	jne    c001a0ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a0a8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0ab:	eb 32                	jmp    c001a0df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0ad:	80 fa 02             	cmp    dl,0x2
c001a0b0:	75 05                	jne    c001a0b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a0b2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0b5:	eb 28                	jmp    c001a0df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0b7:	80 fa 03             	cmp    dl,0x3
c001a0ba:	75 05                	jne    c001a0c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a0bc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0bf:	eb 1e                	jmp    c001a0df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0c1:	31 c0                	xor    eax,eax
c001a0c3:	80 fa 04             	cmp    dl,0x4
c001a0c6:	74 17                	je     c001a0df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0c8:	80 fa 05             	cmp    dl,0x5
c001a0cb:	75 05                	jne    c001a0d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a0cd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0d0:	eb 0d                	jmp    c001a0df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0d2:	80 fa 06             	cmp    dl,0x6
c001a0d5:	75 05                	jne    c001a0dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a0d7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0da:	eb 03                	jmp    c001a0df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0df:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0e4:	0f 94 c2             	sete   dl
c001a0e7:	80 f9 05             	cmp    cl,0x5
c001a0ea:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a0ee:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a0f3:	d3 e0                	shl    eax,cl
c001a0f5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a0f9:	74 0a                	je     c001a105 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a0fb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a0fe:	b9 07 00 00 00       	mov    ecx,0x7
c001a103:	eb 37                	jmp    c001a13c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a105:	01 f8                	add    eax,edi
c001a107:	b9 03 00 00 00       	mov    ecx,0x3
c001a10c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a111:	74 2b                	je     c001a13e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a113:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a118:	75 0d                	jne    c001a127 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a11a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a11e:	01 c8                	add    eax,ecx
c001a120:	b9 04 00 00 00       	mov    ecx,0x4
c001a125:	eb 17                	jmp    c001a13e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a127:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a12a:	b9 07 00 00 00       	mov    ecx,0x7
c001a12f:	eb 0d                	jmp    c001a13e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a131:	b9 02 00 00 00       	mov    ecx,0x2
c001a136:	b2 01                	mov    dl,0x1
c001a138:	31 c0                	xor    eax,eax
c001a13a:	eb 02                	jmp    c001a13e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a13c:	31 d2                	xor    edx,edx
c001a13e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a142:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a144:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a148:	88 11                	mov    BYTE PTR [ecx],dl
c001a14a:	5a                   	pop    edx
c001a14b:	5b                   	pop    ebx
c001a14c:	5e                   	pop    esi
c001a14d:	5f                   	pop    edi
c001a14e:	c3                   	ret    

c001a14f <Krnl::smpEntry()>:
c001a14f:	eb fe                	jmp    c001a14f <Krnl::smpEntry()>

c001a151 <Krnl::startCPU(int)>:
c001a151:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001a156:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a15d:	0f 84 36 01 00 00    	je     c001a299 <Krnl::startCPU(int)+0x148>
c001a163:	53                   	push   ebx
c001a164:	83 ec 10             	sub    esp,0x10
c001a167:	fa                   	cli    
c001a168:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001a16e:	6a 1b                	push   0x1b
c001a170:	ff 35 a8 f0 02 c0    	push   DWORD PTR ds:0xc002f0a8
c001a176:	e8 1f 4d ff ff       	call   c000ee9a <Computer::rdmsr(unsigned int)>
c001a17b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a180:	89 c3                	mov    ebx,eax
c001a182:	58                   	pop    eax
c001a183:	5a                   	pop    edx
c001a184:	53                   	push   ebx
c001a185:	68 24 c6 02 c0       	push   0xc002c624
c001a18a:	e8 10 8d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001a18f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a199:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a19d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1a7:	c1 e0 18             	shl    eax,0x18
c001a1aa:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a1b0:	83 c4 10             	add    esp,0x10
c001a1b3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a1b9:	09 c2                	or     edx,eax
c001a1bb:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a1c1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a1c7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1cd:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1d3:	80 cd c5             	or     ch,0xc5
c001a1d6:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1dc:	f3 90                	pause  
c001a1de:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1e0:	0f ba e1 0c          	bt     ecx,0xc
c001a1e4:	72 f6                	jb     c001a1dc <Krnl::startCPU(int)+0x8b>
c001a1e6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1ec:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1f2:	09 c1                	or     ecx,eax
c001a1f4:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1fa:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a200:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a206:	80 cd 85             	or     ch,0x85
c001a209:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a20f:	f3 90                	pause  
c001a211:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a213:	0f ba e1 0c          	bt     ecx,0xc
c001a217:	72 f6                	jb     c001a20f <Krnl::startCPU(int)+0xbe>
c001a219:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a223:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a229:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a22f:	09 c1                	or     ecx,eax
c001a231:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a237:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a23d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a243:	81 c9 02 06 00 00    	or     ecx,0x602
c001a249:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a24f:	f3 90                	pause  
c001a251:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a253:	0f ba e1 0c          	bt     ecx,0xc
c001a257:	72 f6                	jb     c001a24f <Krnl::startCPU(int)+0xfe>
c001a259:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a263:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a269:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a26f:	09 c8                	or     eax,ecx
c001a271:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a277:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a27d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a282:	0d 02 06 00 00       	or     eax,0x602
c001a287:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a28d:	f3 90                	pause  
c001a28f:	8b 02                	mov    eax,DWORD PTR [edx]
c001a291:	0f ba e0 0c          	bt     eax,0xc
c001a295:	72 f6                	jb     c001a28d <Krnl::startCPU(int)+0x13c>
c001a297:	eb fe                	jmp    c001a297 <Krnl::startCPU(int)+0x146>
c001a299:	c3                   	ret    

c001a29a <Krnl::startCPUs()>:
c001a29a:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001a29f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a2a5:	88 c2                	mov    dl,al
c001a2a7:	83 e2 0a             	and    edx,0xa
c001a2aa:	80 fa 0a             	cmp    dl,0xa
c001a2ad:	75 09                	jne    c001a2b8 <Krnl::startCPUs()+0x1e>
c001a2af:	a8 01                	test   al,0x1
c001a2b1:	74 05                	je     c001a2b8 <Krnl::startCPUs()+0x1e>
c001a2b3:	e9 e3 5e fe ff       	jmp    c000019b <prepareTramp>
c001a2b8:	c3                   	ret    
c001a2b9:	90                   	nop

c001a2ba <EnvVarContainer::getEnv(char const*)>:
c001a2ba:	57                   	push   edi
c001a2bb:	56                   	push   esi
c001a2bc:	53                   	push   ebx
c001a2bd:	31 db                	xor    ebx,ebx
c001a2bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2c3:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a2c5:	7e 2b                	jle    c001a2f2 <EnvVarContainer::getEnv(char const*)+0x38>
c001a2c7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a2ce:	50                   	push   eax
c001a2cf:	50                   	push   eax
c001a2d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2d3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a2d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a2da:	e8 d5 65 fe ff       	call   c00008b4 <strcmp>
c001a2df:	83 c4 10             	add    esp,0x10
c001a2e2:	85 c0                	test   eax,eax
c001a2e4:	75 09                	jne    c001a2ef <EnvVarContainer::getEnv(char const*)+0x35>
c001a2e6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2e9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a2ed:	eb 05                	jmp    c001a2f4 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a2ef:	43                   	inc    ebx
c001a2f0:	eb d1                	jmp    c001a2c3 <EnvVarContainer::getEnv(char const*)+0x9>
c001a2f2:	31 c0                	xor    eax,eax
c001a2f4:	5b                   	pop    ebx
c001a2f5:	5e                   	pop    esi
c001a2f6:	5f                   	pop    edi
c001a2f7:	c3                   	ret    

c001a2f8 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a2f8:	55                   	push   ebp
c001a2f9:	57                   	push   edi
c001a2fa:	56                   	push   esi
c001a2fb:	53                   	push   ebx
c001a2fc:	83 ec 28             	sub    esp,0x28
c001a2ff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a303:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a307:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a30b:	56                   	push   esi
c001a30c:	e8 77 64 fe ff       	call   c0000788 <strlen>
c001a311:	40                   	inc    eax
c001a312:	89 04 24             	mov    DWORD PTR [esp],eax
c001a315:	e8 da 55 ff ff       	call   c000f8f4 <malloc>
c001a31a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a31d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a321:	e8 62 64 fe ff       	call   c0000788 <strlen>
c001a326:	40                   	inc    eax
c001a327:	89 04 24             	mov    DWORD PTR [esp],eax
c001a32a:	e8 c5 55 ff ff       	call   c000f8f4 <malloc>
c001a32f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a336:	e8 4d 64 fe ff       	call   c0000788 <strlen>
c001a33b:	83 c4 0c             	add    esp,0xc
c001a33e:	40                   	inc    eax
c001a33f:	50                   	push   eax
c001a340:	6a 00                	push   0x0
c001a342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a346:	e8 21 64 fe ff       	call   c000076c <memset>
c001a34b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a34e:	e8 35 64 fe ff       	call   c0000788 <strlen>
c001a353:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a357:	8d 48 01             	lea    ecx,[eax+0x1]
c001a35a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a35c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a35f:	89 de                	mov    esi,ebx
c001a361:	e8 22 64 fe ff       	call   c0000788 <strlen>
c001a366:	83 c4 0c             	add    esp,0xc
c001a369:	40                   	inc    eax
c001a36a:	50                   	push   eax
c001a36b:	6a 00                	push   0x0
c001a36d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a371:	e8 f6 63 fe ff       	call   c000076c <memset>
c001a376:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a379:	e8 0a 64 fe ff       	call   c0000788 <strlen>
c001a37e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a382:	8d 48 01             	lea    ecx,[eax+0x1]
c001a385:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a387:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a38a:	40                   	inc    eax
c001a38b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a38e:	c1 e0 03             	shl    eax,0x3
c001a391:	5a                   	pop    edx
c001a392:	59                   	pop    ecx
c001a393:	50                   	push   eax
c001a394:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a397:	e8 44 55 ff ff       	call   c000f8e0 <realloc>
c001a39c:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a3a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a3a3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a3a6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a3aa:	b9 08 00 00 00       	mov    ecx,0x8
c001a3af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3b1:	83 c4 2c             	add    esp,0x2c
c001a3b4:	5b                   	pop    ebx
c001a3b5:	5e                   	pop    esi
c001a3b6:	5f                   	pop    edi
c001a3b7:	5d                   	pop    ebp
c001a3b8:	c3                   	ret    
c001a3b9:	90                   	nop

c001a3ba <EnvVarContainer::deleteEnv(char const*)>:
c001a3ba:	c3                   	ret    
c001a3bb:	90                   	nop

c001a3bc <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a3bc:	55                   	push   ebp
c001a3bd:	57                   	push   edi
c001a3be:	56                   	push   esi
c001a3bf:	53                   	push   ebx
c001a3c0:	81 ec 38 01 00 00    	sub    esp,0x138
c001a3c6:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a3cd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a3d4:	68 14 01 00 00       	push   0x114
c001a3d9:	e8 16 55 ff ff       	call   c000f8f4 <malloc>
c001a3de:	83 c4 0c             	add    esp,0xc
c001a3e1:	89 c5                	mov    ebp,eax
c001a3e3:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a3e6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a3ed:	50                   	push   eax
c001a3ee:	e8 0b 90 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001a3f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a3f6:	e8 d5 92 ff ff       	call   c00136d0 <File::exists()>
c001a3fb:	83 c4 10             	add    esp,0x10
c001a3fe:	84 c0                	test   al,al
c001a400:	75 32                	jne    c001a434 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a402:	51                   	push   ecx
c001a403:	51                   	push   ecx
c001a404:	6a 12                	push   0x12
c001a406:	55                   	push   ebp
c001a407:	e8 56 90 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001a40c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a40f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a412:	89 34 24             	mov    DWORD PTR [esp],esi
c001a415:	e8 6e 63 fe ff       	call   c0000788 <strlen>
c001a41a:	5a                   	pop    edx
c001a41b:	31 d2                	xor    edx,edx
c001a41d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a421:	51                   	push   ecx
c001a422:	56                   	push   esi
c001a423:	52                   	push   edx
c001a424:	50                   	push   eax
c001a425:	55                   	push   ebp
c001a426:	ff d7                	call   edi
c001a428:	83 c4 14             	add    esp,0x14
c001a42b:	55                   	push   ebp
c001a42c:	e8 8f 90 ff ff       	call   c00134c0 <File::close()>
c001a431:	83 c4 10             	add    esp,0x10
c001a434:	31 f6                	xor    esi,esi
c001a436:	50                   	push   eax
c001a437:	68 00 01 00 00       	push   0x100
c001a43c:	6a 00                	push   0x0
c001a43e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a442:	50                   	push   eax
c001a443:	e8 24 63 fe ff       	call   c000076c <memset>
c001a448:	58                   	pop    eax
c001a449:	5a                   	pop    edx
c001a44a:	6a 01                	push   0x1
c001a44c:	55                   	push   ebp
c001a44d:	e8 10 90 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001a452:	83 c4 10             	add    esp,0x10
c001a455:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a45d:	83 ec 0c             	sub    esp,0xc
c001a460:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a463:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a467:	51                   	push   ecx
c001a468:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a46c:	52                   	push   edx
c001a46d:	6a 00                	push   0x0
c001a46f:	6a 01                	push   0x1
c001a471:	55                   	push   ebp
c001a472:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a475:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a479:	83 c4 20             	add    esp,0x20
c001a47c:	3c 0d                	cmp    al,0xd
c001a47e:	0f 84 16 01 00 00    	je     c001a59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a484:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a489:	0f 84 fc 00 00 00    	je     c001a58b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a48f:	3c 0a                	cmp    al,0xa
c001a491:	74 13                	je     c001a4a6 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a493:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a498:	74 0c                	je     c001a4a6 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a49a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a4a0:	0f 8e e5 00 00 00    	jle    c001a58b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a4a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4aa:	83 ec 0c             	sub    esp,0xc
c001a4ad:	8d 78 01             	lea    edi,[eax+0x1]
c001a4b0:	57                   	push   edi
c001a4b1:	e8 3e 54 ff ff       	call   c000f8f4 <malloc>
c001a4b6:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a4ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4be:	8d 56 04             	lea    edx,[esi+0x4]
c001a4c1:	89 14 24             	mov    DWORD PTR [esp],edx
c001a4c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a4c8:	e8 27 54 ff ff       	call   c000f8f4 <malloc>
c001a4cd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a4d1:	83 c4 0c             	add    esp,0xc
c001a4d4:	57                   	push   edi
c001a4d5:	6a 00                	push   0x0
c001a4d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4db:	e8 8c 62 fe ff       	call   c000076c <memset>
c001a4e0:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a4e4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a4e8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a4ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4ee:	83 c4 0c             	add    esp,0xc
c001a4f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4f5:	52                   	push   edx
c001a4f6:	6a 00                	push   0x0
c001a4f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4fc:	e8 6b 62 fe ff       	call   c000076c <memset>
c001a501:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a505:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a509:	89 34 24             	mov    DWORD PTR [esp],esi
c001a50c:	e8 77 62 fe ff       	call   c0000788 <strlen>
c001a511:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a515:	89 c1                	mov    ecx,eax
c001a517:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a519:	5e                   	pop    esi
c001a51a:	5f                   	pop    edi
c001a51b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a51f:	68 35 c6 02 c0       	push   0xc002c635
c001a524:	e8 76 89 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001a529:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a52b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a52e:	40                   	inc    eax
c001a52f:	83 c4 10             	add    esp,0x10
c001a532:	89 03                	mov    DWORD PTR [ebx],eax
c001a534:	85 d2                	test   edx,edx
c001a536:	75 0c                	jne    c001a544 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a538:	83 ec 0c             	sub    esp,0xc
c001a53b:	6a 08                	push   0x8
c001a53d:	e8 b2 53 ff ff       	call   c000f8f4 <malloc>
c001a542:	eb 0c                	jmp    c001a550 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a544:	c1 e0 03             	shl    eax,0x3
c001a547:	51                   	push   ecx
c001a548:	51                   	push   ecx
c001a549:	50                   	push   eax
c001a54a:	52                   	push   edx
c001a54b:	e8 90 53 ff ff       	call   c000f8e0 <realloc>
c001a550:	83 c4 10             	add    esp,0x10
c001a553:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a556:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a558:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a55b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a55f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a563:	b9 08 00 00 00       	mov    ecx,0x8
c001a568:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a56a:	31 f6                	xor    esi,esi
c001a56c:	52                   	push   edx
c001a56d:	68 00 01 00 00       	push   0x100
c001a572:	6a 00                	push   0x0
c001a574:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a578:	50                   	push   eax
c001a579:	e8 ee 61 fe ff       	call   c000076c <memset>
c001a57e:	83 c4 10             	add    esp,0x10
c001a581:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a589:	eb 0f                	jmp    c001a59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a58b:	3c 3d                	cmp    al,0x3d
c001a58d:	74 07                	je     c001a596 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a58f:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a593:	46                   	inc    esi
c001a594:	eb 04                	jmp    c001a59a <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a596:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a59a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a59f:	0f 85 b8 fe ff ff    	jne    c001a45d <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a5a5:	50                   	push   eax
c001a5a6:	50                   	push   eax
c001a5a7:	ff 33                	push   DWORD PTR [ebx]
c001a5a9:	68 43 c6 02 c0       	push   0xc002c643
c001a5ae:	e8 ec 88 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001a5b3:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a5b9:	5b                   	pop    ebx
c001a5ba:	5e                   	pop    esi
c001a5bb:	5f                   	pop    edi
c001a5bc:	5d                   	pop    ebp
c001a5bd:	c3                   	ret    

c001a5be <EnvVarContainer::__loadSystem()>:
c001a5be:	83 ec 10             	sub    esp,0x10
c001a5c1:	68 e0 e5 02 c0       	push   0xc002e5e0
c001a5c6:	68 6e c6 02 c0       	push   0xc002c66e
c001a5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5cf:	e8 e8 fd ff ff       	call   c001a3bc <EnvVarContainer::loadFrom(char const*, char const*)>
c001a5d4:	83 c4 1c             	add    esp,0x1c
c001a5d7:	c3                   	ret    

c001a5d8 <EnvVarContainer::__loadUser()>:
c001a5d8:	c3                   	ret    
c001a5d9:	90                   	nop

c001a5da <EnvVarContainer::EnvVarContainer(Process*)>:
c001a5da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a5e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5ec:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a5ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a5fa:	90                   	nop
c001a5fb:	c3                   	ret    

c001a5fc <EnvVarContainer::~EnvVarContainer()>:
c001a5fc:	83 ec 0c             	sub    esp,0xc
c001a5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a603:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a606:	85 c0                	test   eax,eax
c001a608:	74 1d                	je     c001a627 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a60e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a610:	85 c0                	test   eax,eax
c001a612:	74 13                	je     c001a627 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a618:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a61b:	83 ec 0c             	sub    esp,0xc
c001a61e:	50                   	push   eax
c001a61f:	e8 e0 52 ff ff       	call   c000f904 <free>
c001a624:	83 c4 10             	add    esp,0x10
c001a627:	90                   	nop
c001a628:	83 c4 0c             	add    esp,0xc
c001a62b:	c3                   	ret    

c001a62c <Krnl::getEnv(Process*, char const*)>:
c001a62c:	53                   	push   ebx
c001a62d:	83 ec 08             	sub    esp,0x8
c001a630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a634:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a638:	39 05 10 26 03 c0    	cmp    DWORD PTR ds:0xc0032610,eax
c001a63e:	74 04                	je     c001a644 <Krnl::getEnv(Process*, char const*)+0x18>
c001a640:	85 c0                	test   eax,eax
c001a642:	75 0b                	jne    c001a64f <Krnl::getEnv(Process*, char const*)+0x23>
c001a644:	a1 f4 1b 03 c0       	mov    eax,ds:0xc0031bf4
c001a649:	85 c0                	test   eax,eax
c001a64b:	75 19                	jne    c001a666 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a64d:	eb 27                	jmp    c001a676 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a64f:	52                   	push   edx
c001a650:	52                   	push   edx
c001a651:	53                   	push   ebx
c001a652:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a658:	e8 5d fc ff ff       	call   c001a2ba <EnvVarContainer::getEnv(char const*)>
c001a65d:	83 c4 10             	add    esp,0x10
c001a660:	85 c0                	test   eax,eax
c001a662:	75 28                	jne    c001a68c <Krnl::getEnv(Process*, char const*)+0x60>
c001a664:	eb de                	jmp    c001a644 <Krnl::getEnv(Process*, char const*)+0x18>
c001a666:	52                   	push   edx
c001a667:	52                   	push   edx
c001a668:	53                   	push   ebx
c001a669:	50                   	push   eax
c001a66a:	e8 4b fc ff ff       	call   c001a2ba <EnvVarContainer::getEnv(char const*)>
c001a66f:	83 c4 10             	add    esp,0x10
c001a672:	85 c0                	test   eax,eax
c001a674:	75 16                	jne    c001a68c <Krnl::getEnv(Process*, char const*)+0x60>
c001a676:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a67a:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a67f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a683:	83 c4 08             	add    esp,0x8
c001a686:	5b                   	pop    ebx
c001a687:	e9 2e fc ff ff       	jmp    c001a2ba <EnvVarContainer::getEnv(char const*)>
c001a68c:	83 c4 08             	add    esp,0x8
c001a68f:	5b                   	pop    ebx
c001a690:	c3                   	ret    

c001a691 <Krnl::setEnvSystem(char const*, char const*)>:
c001a691:	83 ec 10             	sub    esp,0x10
c001a694:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a69c:	ff 35 f8 1b 03 c0    	push   DWORD PTR ds:0xc0031bf8
c001a6a2:	e8 51 fc ff ff       	call   c001a2f8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a6a7:	83 c4 1c             	add    esp,0x1c
c001a6aa:	c3                   	ret    

c001a6ab <Krnl::setEnvUser(char const*, char const*)>:
c001a6ab:	a1 f4 1b 03 c0       	mov    eax,ds:0xc0031bf4
c001a6b0:	85 c0                	test   eax,eax
c001a6b2:	74 15                	je     c001a6c9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a6b4:	83 ec 10             	sub    esp,0x10
c001a6b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6bf:	50                   	push   eax
c001a6c0:	e8 33 fc ff ff       	call   c001a2f8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a6c5:	83 c4 1c             	add    esp,0x1c
c001a6c8:	c3                   	ret    
c001a6c9:	c3                   	ret    

c001a6ca <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a6ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6ce:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a6d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6d8:	e9 1b fc ff ff       	jmp    c001a2f8 <EnvVarContainer::setEnv(char const*, char const*)>

c001a6dd <Krnl::deleteEnvSystem(char const*)>:
c001a6dd:	c3                   	ret    

c001a6de <Krnl::deleteEnvUser(char const*)>:
c001a6de:	c3                   	ret    

c001a6df <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a6df:	c3                   	ret    

c001a6e0 <Krnl::newProcessEnv(Process*)>:
c001a6e0:	83 ec 28             	sub    esp,0x28
c001a6e3:	6a 0c                	push   0xc
c001a6e5:	e8 0a 52 ff ff       	call   c000f8f4 <malloc>
c001a6ea:	5a                   	pop    edx
c001a6eb:	59                   	pop    ecx
c001a6ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a6f0:	50                   	push   eax
c001a6f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6f5:	e8 e0 fe ff ff       	call   c001a5da <EnvVarContainer::EnvVarContainer(Process*)>
c001a6fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6fe:	83 c4 2c             	add    esp,0x2c
c001a701:	c3                   	ret    

c001a702 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a702:	57                   	push   edi
c001a703:	56                   	push   esi
c001a704:	53                   	push   ebx
c001a705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a709:	83 ec 0c             	sub    esp,0xc
c001a70c:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a712:	6a 0c                	push   0xc
c001a714:	e8 db 51 ff ff       	call   c000f8f4 <malloc>
c001a719:	89 c3                	mov    ebx,eax
c001a71b:	58                   	pop    eax
c001a71c:	5a                   	pop    edx
c001a71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a721:	53                   	push   ebx
c001a722:	e8 b3 fe ff ff       	call   c001a5da <EnvVarContainer::EnvVarContainer(Process*)>
c001a727:	8b 07                	mov    eax,DWORD PTR [edi]
c001a729:	89 03                	mov    DWORD PTR [ebx],eax
c001a72b:	c1 e0 03             	shl    eax,0x3
c001a72e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a731:	e8 be 51 ff ff       	call   c000f8f4 <malloc>
c001a736:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a739:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a73b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a73e:	c1 e1 03             	shl    ecx,0x3
c001a741:	89 c7                	mov    edi,eax
c001a743:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	89 d8                	mov    eax,ebx
c001a74a:	5b                   	pop    ebx
c001a74b:	5e                   	pop    esi
c001a74c:	5f                   	pop    edi
c001a74d:	c3                   	ret    

c001a74e <Krnl::loadSystemEnv()>:
c001a74e:	53                   	push   ebx
c001a74f:	83 ec 14             	sub    esp,0x14
c001a752:	6a 0c                	push   0xc
c001a754:	e8 9b 51 ff ff       	call   c000f8f4 <malloc>
c001a759:	89 c3                	mov    ebx,eax
c001a75b:	58                   	pop    eax
c001a75c:	5a                   	pop    edx
c001a75d:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001a763:	53                   	push   ebx
c001a764:	e8 71 fe ff ff       	call   c001a5da <EnvVarContainer::EnvVarContainer(Process*)>
c001a769:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a76c:	89 1d f8 1b 03 c0    	mov    DWORD PTR ds:0xc0031bf8,ebx
c001a772:	e8 47 fe ff ff       	call   c001a5be <EnvVarContainer::__loadSystem()>
c001a777:	83 c4 18             	add    esp,0x18
c001a77a:	5b                   	pop    ebx
c001a77b:	c3                   	ret    

c001a77c <Krnl::loadUserEnv()>:
c001a77c:	53                   	push   ebx
c001a77d:	83 ec 14             	sub    esp,0x14
c001a780:	6a 0c                	push   0xc
c001a782:	e8 6d 51 ff ff       	call   c000f8f4 <malloc>
c001a787:	89 c3                	mov    ebx,eax
c001a789:	58                   	pop    eax
c001a78a:	5a                   	pop    edx
c001a78b:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001a791:	53                   	push   ebx
c001a792:	e8 43 fe ff ff       	call   c001a5da <EnvVarContainer::EnvVarContainer(Process*)>
c001a797:	89 1d f4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bf4,ebx
c001a79d:	83 c4 18             	add    esp,0x18
c001a7a0:	5b                   	pop    ebx
c001a7a1:	c3                   	ret    

c001a7a2 <Krnl::flushEnv()>:
c001a7a2:	c3                   	ret    

c001a7a3 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a7a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7a7:	8b 15 f4 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bf4
c001a7ad:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a7b3:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a7b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7ba:	03 01                	add    eax,DWORD PTR [ecx]
c001a7bc:	85 d2                	test   edx,edx
c001a7be:	74 02                	je     c001a7c2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a7c0:	03 02                	add    eax,DWORD PTR [edx]
c001a7c2:	c3                   	ret    

c001a7c3 <Krnl::getProcessEnvPair(Process*, int)>:
c001a7c3:	57                   	push   edi
c001a7c4:	8b 0d f4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031bf4
c001a7ca:	56                   	push   esi
c001a7cb:	85 c9                	test   ecx,ecx
c001a7cd:	53                   	push   ebx
c001a7ce:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a7d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7d6:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a7dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7e0:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7e2:	75 47                	jne    c001a82b <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a7e4:	39 c3                	cmp    ebx,eax
c001a7e6:	7c 47                	jl     c001a82f <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a7e8:	8b 15 f8 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bf8
c001a7ee:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a7f0:	01 c1                	add    ecx,eax
c001a7f2:	39 d9                	cmp    ecx,ebx
c001a7f4:	7e 6c                	jle    c001a862 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7f6:	51                   	push   ecx
c001a7f7:	89 d9                	mov    ecx,ebx
c001a7f9:	29 c1                	sub    ecx,eax
c001a7fb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a7fe:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a802:	53                   	push   ebx
c001a803:	68 90 c6 02 c0       	push   0xc002c690
c001a808:	e8 92 86 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001a80d:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a813:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a815:	a1 f8 1b 03 c0       	mov    eax,ds:0xc0031bf8
c001a81a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a81d:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a821:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a824:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a827:	89 06                	mov    DWORD PTR [esi],eax
c001a829:	eb 51                	jmp    c001a87c <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a82b:	39 c3                	cmp    ebx,eax
c001a82d:	7d 05                	jge    c001a834 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a82f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a832:	eb 20                	jmp    c001a854 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a834:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a836:	8d 14 07             	lea    edx,[edi+eax*1]
c001a839:	39 da                	cmp    edx,ebx
c001a83b:	7e 04                	jle    c001a841 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a83d:	29 c3                	sub    ebx,eax
c001a83f:	eb 10                	jmp    c001a851 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a841:	8b 0d f8 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031bf8
c001a847:	03 11                	add    edx,DWORD PTR [ecx]
c001a849:	39 da                	cmp    edx,ebx
c001a84b:	7e 15                	jle    c001a862 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a84d:	29 c3                	sub    ebx,eax
c001a84f:	29 fb                	sub    ebx,edi
c001a851:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a854:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a858:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a85b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a85e:	89 06                	mov    DWORD PTR [esi],eax
c001a860:	eb 1d                	jmp    c001a87f <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a862:	83 ec 0c             	sub    esp,0xc
c001a865:	68 a4 c6 02 c0       	push   0xc002c6a4
c001a86a:	e8 18 00 00 00       	call   c001a887 <Krnl::panic(char const*)>
c001a86f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a875:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a87c:	83 c4 10             	add    esp,0x10
c001a87f:	89 f0                	mov    eax,esi
c001a881:	5b                   	pop    ebx
c001a882:	5e                   	pop    esi
c001a883:	5f                   	pop    edi
c001a884:	c2 04 00             	ret    0x4

c001a887 <Krnl::panic(char const*)>:
c001a887:	55                   	push   ebp
c001a888:	89 e5                	mov    ebp,esp
c001a88a:	53                   	push   ebx
c001a88b:	83 ec 0c             	sub    esp,0xc
c001a88e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a891:	fa                   	cli    
c001a892:	c6 05 04 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031c04,0x1
c001a899:	53                   	push   ebx
c001a89a:	c6 05 e4 df 02 c0 00 	mov    BYTE PTR ds:0xc002dfe4,0x0
c001a8a1:	68 be c6 02 c0       	push   0xc002c6be
c001a8a6:	e8 f4 85 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001a8ab:	58                   	pop    eax
c001a8ac:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a8b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b7:	e8 06 64 ff ff       	call   c0010cc2 <setActiveTerminal(VgaText*)>
c001a8bc:	83 c4 0c             	add    esp,0xc
c001a8bf:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a8c4:	6a 01                	push   0x1
c001a8c6:	6a 0f                	push   0xf
c001a8c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ce:	e8 8d 5e ff ff       	call   c0010760 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8d3:	58                   	pop    eax
c001a8d4:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a8d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8df:	e8 24 66 ff ff       	call   c0010f08 <VgaText::clearScreen()>
c001a8e4:	58                   	pop    eax
c001a8e5:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a8ea:	5a                   	pop    edx
c001a8eb:	68 d7 c6 02 c0       	push   0xc002c6d7
c001a8f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f6:	e8 53 67 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a8fb:	59                   	pop    ecx
c001a8fc:	58                   	pop    eax
c001a8fd:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a902:	68 7c c7 02 c0       	push   0xc002c77c
c001a907:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a90d:	e8 3c 67 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a912:	58                   	pop    eax
c001a913:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a918:	5a                   	pop    edx
c001a919:	68 f3 c6 02 c0       	push   0xc002c6f3
c001a91e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a924:	e8 25 67 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a929:	59                   	pop    ecx
c001a92a:	58                   	pop    eax
c001a92b:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a930:	53                   	push   ebx
c001a931:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a937:	e8 12 67 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a93c:	58                   	pop    eax
c001a93d:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a942:	5a                   	pop    edx
c001a943:	68 13 c7 02 c0       	push   0xc002c713
c001a948:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94e:	e8 fb 66 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a953:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c001a958:	83 c4 10             	add    esp,0x10
c001a95b:	85 c0                	test   eax,eax
c001a95d:	74 02                	je     c001a961 <Krnl::panic(char const*)+0xda>
c001a95f:	ff d0                	call   eax
c001a961:	83 ec 0c             	sub    esp,0xc
c001a964:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a967:	e8 9e 32 00 00       	call   c001dc0a <Thr::getDriverNameFromAddress(unsigned long)>
c001a96c:	83 c4 10             	add    esp,0x10
c001a96f:	89 c3                	mov    ebx,eax
c001a971:	85 c0                	test   eax,eax
c001a973:	0f 84 50 02 00 00    	je     c001abc9 <Krnl::panic(char const*)+0x342>
c001a979:	83 ec 08             	sub    esp,0x8
c001a97c:	8b 15 10 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032610
c001a982:	68 b8 c7 02 c0       	push   0xc002c7b8
c001a987:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a98d:	e8 bc 66 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a992:	58                   	pop    eax
c001a993:	5a                   	pop    edx
c001a994:	8b 15 10 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032610
c001a99a:	68 f3 c6 02 c0       	push   0xc002c6f3
c001a99f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9a5:	e8 a4 66 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a9aa:	59                   	pop    ecx
c001a9ab:	58                   	pop    eax
c001a9ac:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a9b1:	53                   	push   ebx
c001a9b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b8:	e8 91 66 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a9bd:	83 c4 10             	add    esp,0x10
c001a9c0:	83 ec 08             	sub    esp,0x8
c001a9c3:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a9c8:	68 12 c7 02 c0       	push   0xc002c712
c001a9cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d3:	e8 76 66 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a9d8:	58                   	pop    eax
c001a9d9:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a9de:	5a                   	pop    edx
c001a9df:	68 10 c8 02 c0       	push   0xc002c810
c001a9e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ea:	e8 5f 66 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001a9ef:	59                   	pop    ecx
c001a9f0:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001a9f5:	5b                   	pop    ebx
c001a9f6:	68 50 c8 02 c0       	push   0xc002c850
c001a9fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa01:	e8 48 66 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001aa06:	58                   	pop    eax
c001aa07:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001aa0c:	5a                   	pop    edx
c001aa0d:	68 fe c6 02 c0       	push   0xc002c6fe
c001aa12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa18:	e8 31 66 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001aa1d:	59                   	pop    ecx
c001aa1e:	5b                   	pop    ebx
c001aa1f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa22:	68 16 c7 02 c0       	push   0xc002c716
c001aa27:	e8 73 84 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001aa2c:	58                   	pop    eax
c001aa2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa30:	5a                   	pop    edx
c001aa31:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa34:	68 1f c7 02 c0       	push   0xc002c71f
c001aa39:	e8 61 84 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001aa3e:	59                   	pop    ecx
c001aa3f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa42:	5b                   	pop    ebx
c001aa43:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa45:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa48:	68 28 c7 02 c0       	push   0xc002c728
c001aa4d:	e8 4d 84 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001aa52:	58                   	pop    eax
c001aa53:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001aa58:	5a                   	pop    edx
c001aa59:	68 94 c8 02 c0       	push   0xc002c894
c001aa5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa64:	e8 e5 65 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001aa69:	59                   	pop    ecx
c001aa6a:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001aa6f:	5b                   	pop    ebx
c001aa70:	68 31 c7 02 c0       	push   0xc002c731
c001aa75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa7b:	e8 ce 65 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001aa80:	0f 20 c0             	mov    eax,cr0
c001aa83:	5a                   	pop    edx
c001aa84:	59                   	pop    ecx
c001aa85:	50                   	push   eax
c001aa86:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001aa8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa91:	e8 de 65 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001aa96:	5b                   	pop    ebx
c001aa97:	58                   	pop    eax
c001aa98:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001aa9d:	68 3b c7 02 c0       	push   0xc002c73b
c001aaa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaa8:	e8 a1 65 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001aaad:	0f 20 d0             	mov    eax,cr2
c001aab0:	5a                   	pop    edx
c001aab1:	59                   	pop    ecx
c001aab2:	50                   	push   eax
c001aab3:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001aab8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aabe:	e8 b1 65 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001aac3:	5b                   	pop    ebx
c001aac4:	58                   	pop    eax
c001aac5:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001aaca:	68 45 c7 02 c0       	push   0xc002c745
c001aacf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad5:	e8 74 65 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001aada:	0f 20 d8             	mov    eax,cr3
c001aadd:	5a                   	pop    edx
c001aade:	59                   	pop    ecx
c001aadf:	50                   	push   eax
c001aae0:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001aae5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaeb:	e8 84 65 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001aaf0:	5b                   	pop    ebx
c001aaf1:	58                   	pop    eax
c001aaf2:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001aaf7:	68 58 c7 02 c0       	push   0xc002c758
c001aafc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab02:	e8 47 65 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001ab07:	0f 20 e0             	mov    eax,cr4
c001ab0a:	5a                   	pop    edx
c001ab0b:	59                   	pop    ecx
c001ab0c:	50                   	push   eax
c001ab0d:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001ab12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab18:	e8 57 65 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001ab1d:	5b                   	pop    ebx
c001ab1e:	58                   	pop    eax
c001ab1f:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001ab24:	68 62 c7 02 c0       	push   0xc002c762
c001ab29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab2f:	e8 1a 65 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001ab34:	5a                   	pop    edx
c001ab35:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001ab3a:	59                   	pop    ecx
c001ab3b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab41:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab44:	50                   	push   eax
c001ab45:	e8 2a 65 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001ab4a:	5b                   	pop    ebx
c001ab4b:	58                   	pop    eax
c001ab4c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001ab51:	68 79 c7 02 c0       	push   0xc002c779
c001ab56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab5c:	e8 ed 64 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001ab61:	5a                   	pop    edx
c001ab62:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001ab67:	59                   	pop    ecx
c001ab68:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab6e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab71:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab74:	50                   	push   eax
c001ab75:	e8 fa 64 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001ab7a:	5b                   	pop    ebx
c001ab7b:	58                   	pop    eax
c001ab7c:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001ab81:	68 79 c7 02 c0       	push   0xc002c779
c001ab86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab8c:	e8 bd 64 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001ab91:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001ab96:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab99:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab9f:	8b 12                	mov    edx,DWORD PTR [edx]
c001aba1:	59                   	pop    ecx
c001aba2:	5b                   	pop    ebx
c001aba3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001aba6:	50                   	push   eax
c001aba7:	e8 c8 64 ff ff       	call   c0011074 <VgaText::putx(unsigned int)>
c001abac:	83 c4 10             	add    esp,0x10
c001abaf:	b2 fe                	mov    dl,0xfe
c001abb1:	e4 60                	in     al,0x60
c001abb3:	3c 1c                	cmp    al,0x1c
c001abb5:	74 04                	je     c001abbb <Krnl::panic(char const*)+0x334>
c001abb7:	3c 5a                	cmp    al,0x5a
c001abb9:	75 f6                	jne    c001abb1 <Krnl::panic(char const*)+0x32a>
c001abbb:	e4 64                	in     al,0x64
c001abbd:	a8 02                	test   al,0x2
c001abbf:	75 fa                	jne    c001abbb <Krnl::panic(char const*)+0x334>
c001abc1:	88 d0                	mov    al,dl
c001abc3:	e6 64                	out    0x64,al
c001abc5:	fa                   	cli    
c001abc6:	f4                   	hlt    
c001abc7:	eb e8                	jmp    c001abb1 <Krnl::panic(char const*)+0x32a>
c001abc9:	50                   	push   eax
c001abca:	50                   	push   eax
c001abcb:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001abd0:	68 e4 c7 02 c0       	push   0xc002c7e4
c001abd5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abdb:	e8 6e 64 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001abe0:	58                   	pop    eax
c001abe1:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001abe6:	5a                   	pop    edx
c001abe7:	68 f3 c6 02 c0       	push   0xc002c6f3
c001abec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abf2:	e8 57 64 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001abf7:	59                   	pop    ecx
c001abf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abfd:	5b                   	pop    ebx
c001abfe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac01:	83 c0 0c             	add    eax,0xc
c001ac04:	50                   	push   eax
c001ac05:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001ac0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac10:	e8 39 64 ff ff       	call   c001104e <VgaText::puts(char const*)>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	e9 a3 fd ff ff       	jmp    c001a9c0 <Krnl::panic(char const*)+0x139>

c001ac1d <Net::switchEndian16(unsigned short)>:
c001ac1d:	83 ec 04             	sub    esp,0x4
c001ac20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac24:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac2c:	c1 f8 08             	sar    eax,0x8
c001ac2f:	89 c2                	mov    edx,eax
c001ac31:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac35:	c1 e0 08             	shl    eax,0x8
c001ac38:	09 d0                	or     eax,edx
c001ac3a:	83 c4 04             	add    esp,0x4
c001ac3d:	c3                   	ret    

c001ac3e <Net::switchEndian32(unsigned int)>:
c001ac3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac42:	c1 e8 18             	shr    eax,0x18
c001ac45:	89 c2                	mov    edx,eax
c001ac47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac4b:	c1 e0 08             	shl    eax,0x8
c001ac4e:	25 00 00 ff 00       	and    eax,0xff0000
c001ac53:	09 c2                	or     edx,eax
c001ac55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac59:	c1 e8 08             	shr    eax,0x8
c001ac5c:	25 00 ff 00 00       	and    eax,0xff00
c001ac61:	09 c2                	or     edx,eax
c001ac63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac67:	c1 e0 18             	shl    eax,0x18
c001ac6a:	09 d0                	or     eax,edx
c001ac6c:	c3                   	ret    

c001ac6d <Net::crc32Calc(unsigned char*, int)>:
c001ac6d:	83 ec 10             	sub    esp,0x10
c001ac70:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ac75:	75 07                	jne    c001ac7e <Net::crc32Calc(unsigned char*, int)+0x11>
c001ac77:	b8 00 00 00 00       	mov    eax,0x0
c001ac7c:	eb 7c                	jmp    c001acfa <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac7e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ac83:	7f 07                	jg     c001ac8c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ac85:	b8 00 00 00 00       	mov    eax,0x0
c001ac8a:	eb 6e                	jmp    c001acfa <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac8c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac94:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aca0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aca4:	7d 4e                	jge    c001acf4 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aca6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acae:	01 d0                	add    eax,edx
c001acb0:	8a 00                	mov    al,BYTE PTR [eax]
c001acb2:	0f b6 c0             	movzx  eax,al
c001acb5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001acb9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acc1:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001acc6:	7f 26                	jg     c001acee <Net::crc32Calc(unsigned char*, int)+0x81>
c001acc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001accc:	83 e0 01             	and    eax,0x1
c001accf:	74 0d                	je     c001acde <Net::crc32Calc(unsigned char*, int)+0x71>
c001acd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acd5:	d1 e8                	shr    eax,1
c001acd7:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001acdc:	eb 06                	jmp    c001ace4 <Net::crc32Calc(unsigned char*, int)+0x77>
c001acde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ace2:	d1 e8                	shr    eax,1
c001ace4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ace8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acec:	eb d3                	jmp    c001acc1 <Net::crc32Calc(unsigned char*, int)+0x54>
c001acee:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001acf2:	eb a8                	jmp    c001ac9c <Net::crc32Calc(unsigned char*, int)+0x2f>
c001acf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf8:	f7 d0                	not    eax
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	c3                   	ret    

c001acfe <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001acfe:	57                   	push   edi
c001acff:	56                   	push   esi
c001ad00:	53                   	push   ebx
c001ad01:	83 ec 60             	sub    esp,0x60
c001ad04:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad0b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ad0f:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ad17:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ad1c:	7f 1a                	jg     c001ad38 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001ad1e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad25:	8d 50 01             	lea    edx,[eax+0x1]
c001ad28:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ad2f:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad32:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ad36:	eb df                	jmp    c001ad17 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001ad38:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad3f:	8d 50 01             	lea    edx,[eax+0x1]
c001ad42:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ad49:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ad4c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ad57:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001ad5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad5f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001ad67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad7b:	89 c6                	mov    esi,eax
c001ad7d:	89 d7                	mov    edi,edx
c001ad7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad81:	89 c8                	mov    eax,ecx
c001ad83:	89 fa                	mov    edx,edi
c001ad85:	89 f3                	mov    ebx,esi
c001ad87:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ad8b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ad8f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad92:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ad9a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ada1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ada5:	8d 44 24 78          	lea    eax,[esp+0x78]
c001ada9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001adad:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001adb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adb9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001adbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001adc1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001adc5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001adc9:	89 c6                	mov    esi,eax
c001adcb:	89 d7                	mov    edi,edx
c001adcd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adcf:	89 c8                	mov    eax,ecx
c001add1:	89 fa                	mov    edx,edi
c001add3:	89 f3                	mov    ebx,esi
c001add5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001add9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001addd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ade1:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ade9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001adf0:	0f b7 c0             	movzx  eax,ax
c001adf3:	c1 f8 08             	sar    eax,0x8
c001adf6:	89 c1                	mov    ecx,eax
c001adf8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adff:	8d 50 01             	lea    edx,[eax+0x1]
c001ae02:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ae09:	88 ca                	mov    dl,cl
c001ae0b:	88 10                	mov    BYTE PTR [eax],dl
c001ae0d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ae14:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae1b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ae1e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001ae25:	88 10                	mov    BYTE PTR [eax],dl
c001ae27:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae2b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001ae2f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ae36:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001ae3a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001ae3e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001ae42:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae46:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ae4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ae4e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ae52:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ae56:	89 c6                	mov    esi,eax
c001ae58:	89 d7                	mov    edi,edx
c001ae5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae5c:	89 c8                	mov    eax,ecx
c001ae5e:	89 fa                	mov    edx,edi
c001ae60:	89 f3                	mov    ebx,esi
c001ae62:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ae66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001ae6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ae6e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae72:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001ae79:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae80:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001ae84:	50                   	push   eax
c001ae85:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ae89:	e8 df fd ff ff       	call   c001ac6d <Net::crc32Calc(unsigned char*, int)>
c001ae8e:	83 c4 08             	add    esp,0x8
c001ae91:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ae95:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ae99:	c1 e8 18             	shr    eax,0x18
c001ae9c:	89 c1                	mov    ecx,eax
c001ae9e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aea5:	8d 50 01             	lea    edx,[eax+0x1]
c001aea8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aeaf:	88 ca                	mov    dl,cl
c001aeb1:	88 10                	mov    BYTE PTR [eax],dl
c001aeb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aeb7:	c1 e8 10             	shr    eax,0x10
c001aeba:	89 c1                	mov    ecx,eax
c001aebc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aec3:	8d 50 01             	lea    edx,[eax+0x1]
c001aec6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aecd:	88 ca                	mov    dl,cl
c001aecf:	88 10                	mov    BYTE PTR [eax],dl
c001aed1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aed5:	c1 e8 08             	shr    eax,0x8
c001aed8:	89 c1                	mov    ecx,eax
c001aeda:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aee1:	8d 50 01             	lea    edx,[eax+0x1]
c001aee4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aeeb:	88 ca                	mov    dl,cl
c001aeed:	88 10                	mov    BYTE PTR [eax],dl
c001aeef:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aef6:	8d 50 01             	lea    edx,[eax+0x1]
c001aef9:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af00:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001af04:	88 10                	mov    BYTE PTR [eax],dl
c001af06:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af0a:	83 c4 60             	add    esp,0x60
c001af0d:	5b                   	pop    ebx
c001af0e:	5e                   	pop    esi
c001af0f:	5f                   	pop    edi
c001af10:	c3                   	ret    

c001af11 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001af11:	57                   	push   edi
c001af12:	56                   	push   esi
c001af13:	53                   	push   ebx
c001af14:	83 ec 70             	sub    esp,0x70
c001af17:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af1e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001af22:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001af2a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af31:	83 c0 0e             	add    eax,0xe
c001af34:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001af38:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001af43:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001af4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001af53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af57:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001af5b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001af5f:	89 c6                	mov    esi,eax
c001af61:	89 d7                	mov    edi,edx
c001af63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af65:	89 c8                	mov    eax,ecx
c001af67:	89 fa                	mov    edx,edi
c001af69:	89 f3                	mov    ebx,esi
c001af6b:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001af6f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001af73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af77:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001af7f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af86:	83 c0 08             	add    eax,0x8
c001af89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001af8d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af94:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001af98:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001afa0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001afa4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001afa8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001afac:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001afb0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001afb4:	89 c6                	mov    esi,eax
c001afb6:	89 d7                	mov    edi,edx
c001afb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afba:	89 c8                	mov    eax,ecx
c001afbc:	89 fa                	mov    edx,edi
c001afbe:	89 f3                	mov    ebx,esi
c001afc0:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001afc4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001afc8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001afcc:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001afd4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001afdb:	8d 50 01             	lea    edx,[eax+0x1]
c001afde:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001afe5:	8a 00                	mov    al,BYTE PTR [eax]
c001afe7:	0f b6 c0             	movzx  eax,al
c001afea:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001afef:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aff6:	8d 50 01             	lea    edx,[eax+0x1]
c001aff9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b000:	8a 00                	mov    al,BYTE PTR [eax]
c001b002:	0f b6 c0             	movzx  eax,al
c001b005:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001b00a:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001b00f:	c1 e0 08             	shl    eax,0x8
c001b012:	89 c2                	mov    edx,eax
c001b014:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b018:	09 d0                	or     eax,edx
c001b01a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b021:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001b025:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001b02d:	75 46                	jne    c001b075 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b02f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b036:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b039:	66 3d dc 05          	cmp    ax,0x5dc
c001b03d:	77 16                	ja     c001b055 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001b03f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b046:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b049:	0f b7 c0             	movzx  eax,ax
c001b04c:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001b053:	eb 20                	jmp    c001b075 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b055:	83 ec 0c             	sub    esp,0xc
c001b058:	68 bc c8 02 c0       	push   0xc002c8bc
c001b05d:	e8 3d 7e ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001b062:	83 c4 10             	add    esp,0x10
c001b065:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b06c:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001b070:	e9 17 01 00 00       	jmp    c001b18c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001b075:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b07c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b083:	8b 12                	mov    edx,DWORD PTR [edx]
c001b085:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b089:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001b090:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001b094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b098:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b09c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b0a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0ac:	89 c6                	mov    esi,eax
c001b0ae:	89 d7                	mov    edi,edx
c001b0b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0b2:	89 c8                	mov    eax,ecx
c001b0b4:	89 fa                	mov    edx,edi
c001b0b6:	89 f3                	mov    ebx,esi
c001b0b8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001b0bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b0c0:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0c3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b0ca:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b0d1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0d8:	8d 50 01             	lea    edx,[eax+0x1]
c001b0db:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b0e2:	8a 00                	mov    al,BYTE PTR [eax]
c001b0e4:	0f b6 c0             	movzx  eax,al
c001b0e7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b0eb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b0f2:	8d 50 01             	lea    edx,[eax+0x1]
c001b0f5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b0fc:	8a 00                	mov    al,BYTE PTR [eax]
c001b0fe:	0f b6 c0             	movzx  eax,al
c001b101:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b105:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b10c:	8d 50 01             	lea    edx,[eax+0x1]
c001b10f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b116:	8a 00                	mov    al,BYTE PTR [eax]
c001b118:	0f b6 c0             	movzx  eax,al
c001b11b:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b11f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b126:	8d 50 01             	lea    edx,[eax+0x1]
c001b129:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b130:	8a 00                	mov    al,BYTE PTR [eax]
c001b132:	0f b6 c0             	movzx  eax,al
c001b135:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b139:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b13d:	c1 e0 18             	shl    eax,0x18
c001b140:	89 c2                	mov    edx,eax
c001b142:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b146:	c1 e0 10             	shl    eax,0x10
c001b149:	09 c2                	or     edx,eax
c001b14b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b14f:	c1 e0 08             	shl    eax,0x8
c001b152:	09 d0                	or     eax,edx
c001b154:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b158:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b15c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b163:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b167:	83 e8 04             	sub    eax,0x4
c001b16a:	83 ec 08             	sub    esp,0x8
c001b16d:	50                   	push   eax
c001b16e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b172:	e8 f6 fa ff ff       	call   c001ac6d <Net::crc32Calc(unsigned char*, int)>
c001b177:	83 c4 10             	add    esp,0x10
c001b17a:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b17e:	0f 94 c2             	sete   dl
c001b181:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b188:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b18b:	90                   	nop
c001b18c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b193:	83 c4 70             	add    esp,0x70
c001b196:	5b                   	pop    ebx
c001b197:	5e                   	pop    esi
c001b198:	5f                   	pop    edi
c001b199:	c2 04 00             	ret    0x4

c001b19c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b19c:	55                   	push   ebp
c001b19d:	57                   	push   edi
c001b19e:	56                   	push   esi
c001b19f:	53                   	push   ebx
c001b1a0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b1a6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b1ad:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b1af:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b1b2:	80 fb 40             	cmp    bl,0x40
c001b1b5:	75 1b                	jne    c001b1d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b1b7:	8a 16                	mov    dl,BYTE PTR [esi]
c001b1b9:	84 d2                	test   dl,dl
c001b1bb:	0f 84 f1 00 00 00    	je     c001b2b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b1c1:	8d 46 01             	lea    eax,[esi+0x1]
c001b1c4:	80 fa 3a             	cmp    dl,0x3a
c001b1c7:	74 04                	je     c001b1cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b1c9:	89 c6                	mov    esi,eax
c001b1cb:	eb ea                	jmp    c001b1b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b1cd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b1d0:	89 c6                	mov    esi,eax
c001b1d2:	50                   	push   eax
c001b1d3:	6a 40                	push   0x40
c001b1d5:	6a 00                	push   0x0
c001b1d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b1db:	50                   	push   eax
c001b1dc:	e8 8b 55 fe ff       	call   c000076c <memset>
c001b1e1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b1e8:	31 c0                	xor    eax,eax
c001b1ea:	83 c4 10             	add    esp,0x10
c001b1ed:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b1ef:	84 c9                	test   cl,cl
c001b1f1:	0f 84 bb 00 00 00    	je     c001b2b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b1f7:	3d c7 00 00 00       	cmp    eax,0xc7
c001b1fc:	0f 8f b0 00 00 00    	jg     c001b2b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b202:	80 f9 0a             	cmp    cl,0xa
c001b205:	0f 85 98 00 00 00    	jne    c001b2a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b20b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b210:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b214:	a8 df                	test   al,0xdf
c001b216:	0f 94 c1             	sete   cl
c001b219:	3c 23                	cmp    al,0x23
c001b21b:	0f 94 c2             	sete   dl
c001b21e:	08 d1                	or     cl,dl
c001b220:	75 4a                	jne    c001b26c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b222:	8d 50 f7             	lea    edx,[eax-0x9]
c001b225:	80 fa 01             	cmp    dl,0x1
c001b228:	76 42                	jbe    c001b26c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b22a:	3c 5b                	cmp    al,0x5b
c001b22c:	75 42                	jne    c001b270 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b22e:	80 fb 40             	cmp    bl,0x40
c001b231:	75 39                	jne    c001b26c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b233:	83 ec 0c             	sub    esp,0xc
c001b236:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b23a:	52                   	push   edx
c001b23b:	e8 48 55 fe ff       	call   c0000788 <strlen>
c001b240:	83 c4 10             	add    esp,0x10
c001b243:	83 f8 3f             	cmp    eax,0x3f
c001b246:	77 6a                	ja     c001b2b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b248:	50                   	push   eax
c001b249:	50                   	push   eax
c001b24a:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b24e:	52                   	push   edx
c001b24f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b253:	52                   	push   edx
c001b254:	e8 cf 55 fe ff       	call   c0000828 <strcpy>
c001b259:	58                   	pop    eax
c001b25a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b25e:	52                   	push   edx
c001b25f:	e8 24 55 fe ff       	call   c0000788 <strlen>
c001b264:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b269:	83 c4 10             	add    esp,0x10
c001b26c:	31 d2                	xor    edx,edx
c001b26e:	eb 3a                	jmp    c001b2aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b270:	80 fb 40             	cmp    bl,0x40
c001b273:	74 06                	je     c001b27b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b275:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b279:	eb 20                	jmp    c001b29b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b27b:	50                   	push   eax
c001b27c:	50                   	push   eax
c001b27d:	55                   	push   ebp
c001b27e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b282:	50                   	push   eax
c001b283:	e8 2c 56 fe ff       	call   c00008b4 <strcmp>
c001b288:	83 c4 10             	add    esp,0x10
c001b28b:	85 c0                	test   eax,eax
c001b28d:	75 dd                	jne    c001b26c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b28f:	eb e4                	jmp    c001b275 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b291:	8d 50 01             	lea    edx,[eax+0x1]
c001b294:	80 f9 3d             	cmp    cl,0x3d
c001b297:	74 1d                	je     c001b2b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b299:	89 d0                	mov    eax,edx
c001b29b:	8a 08                	mov    cl,BYTE PTR [eax]
c001b29d:	84 c9                	test   cl,cl
c001b29f:	75 f0                	jne    c001b291 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b2a1:	eb 0f                	jmp    c001b2b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b2a3:	8d 50 01             	lea    edx,[eax+0x1]
c001b2a6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b2aa:	47                   	inc    edi
c001b2ab:	89 d0                	mov    eax,edx
c001b2ad:	e9 3b ff ff ff       	jmp    c001b1ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b2b2:	31 c0                	xor    eax,eax
c001b2b4:	eb 33                	jmp    c001b2e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b2b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2ba:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b2bd:	50                   	push   eax
c001b2be:	50                   	push   eax
c001b2bf:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b2c3:	50                   	push   eax
c001b2c4:	56                   	push   esi
c001b2c5:	e8 ea 55 fe ff       	call   c00008b4 <strcmp>
c001b2ca:	83 c4 10             	add    esp,0x10
c001b2cd:	85 c0                	test   eax,eax
c001b2cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b2d3:	75 97                	jne    c001b26c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2d5:	51                   	push   ecx
c001b2d6:	51                   	push   ecx
c001b2d7:	52                   	push   edx
c001b2d8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b2df:	e8 44 55 fe ff       	call   c0000828 <strcpy>
c001b2e4:	83 c4 10             	add    esp,0x10
c001b2e7:	b0 01                	mov    al,0x1
c001b2e9:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b2ef:	5b                   	pop    ebx
c001b2f0:	5e                   	pop    esi
c001b2f1:	5f                   	pop    edi
c001b2f2:	5d                   	pop    ebp
c001b2f3:	c3                   	ret    

c001b2f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b2f4:	57                   	push   edi
c001b2f5:	56                   	push   esi
c001b2f6:	53                   	push   ebx
c001b2f7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b2fd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b304:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b30b:	53                   	push   ebx
c001b30c:	e8 77 54 fe ff       	call   c0000788 <strlen>
c001b311:	89 34 24             	mov    DWORD PTR [esp],esi
c001b314:	89 c7                	mov    edi,eax
c001b316:	e8 6d 54 fe ff       	call   c0000788 <strlen>
c001b31b:	83 c4 10             	add    esp,0x10
c001b31e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b322:	3d ff 00 00 00       	cmp    eax,0xff
c001b327:	0f 87 d3 00 00 00    	ja     c001b400 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b32d:	57                   	push   edi
c001b32e:	57                   	push   edi
c001b32f:	56                   	push   esi
c001b330:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b334:	56                   	push   esi
c001b335:	e8 ee 54 fe ff       	call   c0000828 <strcpy>
c001b33a:	58                   	pop    eax
c001b33b:	5a                   	pop    edx
c001b33c:	68 11 ce 02 c0       	push   0xc002ce11
c001b341:	56                   	push   esi
c001b342:	e8 21 56 fe ff       	call   c0000968 <strcat>
c001b347:	59                   	pop    ecx
c001b348:	5f                   	pop    edi
c001b349:	53                   	push   ebx
c001b34a:	56                   	push   esi
c001b34b:	e8 18 56 fe ff       	call   c0000968 <strcat>
c001b350:	58                   	pop    eax
c001b351:	5a                   	pop    edx
c001b352:	68 08 c9 02 c0       	push   0xc002c908
c001b357:	56                   	push   esi
c001b358:	e8 0b 56 fe ff       	call   c0000968 <strcat>
c001b35d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b364:	e8 8b 45 ff ff       	call   c000f8f4 <malloc>
c001b369:	83 c4 0c             	add    esp,0xc
c001b36c:	89 c3                	mov    ebx,eax
c001b36e:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001b374:	56                   	push   esi
c001b375:	50                   	push   eax
c001b376:	e8 83 80 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001b37b:	83 c4 10             	add    esp,0x10
c001b37e:	85 db                	test   ebx,ebx
c001b380:	74 7e                	je     c001b400 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b382:	51                   	push   ecx
c001b383:	51                   	push   ecx
c001b384:	6a 01                	push   0x1
c001b386:	53                   	push   ebx
c001b387:	e8 d6 80 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001b38c:	83 c4 10             	add    esp,0x10
c001b38f:	85 c0                	test   eax,eax
c001b391:	74 08                	je     c001b39b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b393:	83 ec 0c             	sub    esp,0xc
c001b396:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b398:	53                   	push   ebx
c001b399:	eb 5f                	jmp    c001b3fa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b39b:	52                   	push   edx
c001b39c:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b3a0:	50                   	push   eax
c001b3a1:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b3a5:	50                   	push   eax
c001b3a6:	53                   	push   ebx
c001b3a7:	e8 62 83 ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001b3ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b3b0:	83 c4 10             	add    esp,0x10
c001b3b3:	89 c1                	mov    ecx,eax
c001b3b5:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b3b9:	74 31                	je     c001b3ec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b3bb:	83 ec 0c             	sub    esp,0xc
c001b3be:	50                   	push   eax
c001b3bf:	e8 30 45 ff ff       	call   c000f8f4 <malloc>
c001b3c4:	89 c6                	mov    esi,eax
c001b3c6:	58                   	pop    eax
c001b3c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3c9:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b3cd:	52                   	push   edx
c001b3ce:	56                   	push   esi
c001b3cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b3d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b3d7:	53                   	push   ebx
c001b3d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3db:	83 c4 20             	add    esp,0x20
c001b3de:	85 c0                	test   eax,eax
c001b3e0:	75 0a                	jne    c001b3ec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b3e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3e6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b3ea:	74 18                	je     c001b404 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b3ec:	83 ec 0c             	sub    esp,0xc
c001b3ef:	53                   	push   ebx
c001b3f0:	e8 cb 80 ff ff       	call   c00134c0 <File::close()>
c001b3f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	31 c0                	xor    eax,eax
c001b402:	eb 3b                	jmp    c001b43f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b404:	83 ec 0c             	sub    esp,0xc
c001b407:	53                   	push   ebx
c001b408:	e8 b3 80 ff ff       	call   c00134c0 <File::close()>
c001b40d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b40f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b412:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b415:	83 c4 0c             	add    esp,0xc
c001b418:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b41f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b426:	56                   	push   esi
c001b427:	e8 70 fd ff ff       	call   c001b19c <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b42c:	89 34 24             	mov    DWORD PTR [esp],esi
c001b42f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b433:	e8 cc 44 ff ff       	call   c000f904 <free>
c001b438:	83 c4 10             	add    esp,0x10
c001b43b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b43f:	81 c4 20 01 00 00    	add    esp,0x120
c001b445:	5b                   	pop    ebx
c001b446:	5e                   	pop    esi
c001b447:	5f                   	pop    edi
c001b448:	c3                   	ret    

c001b449 <Reg::getLine(char*, char*, char*)>:
c001b449:	57                   	push   edi
c001b44a:	56                   	push   esi
c001b44b:	53                   	push   ebx
c001b44c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b450:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b454:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b458:	57                   	push   edi
c001b459:	56                   	push   esi
c001b45a:	53                   	push   ebx
c001b45b:	68 0d c9 02 c0       	push   0xc002c90d
c001b460:	e8 8f fe ff ff       	call   c001b2f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b465:	83 c4 10             	add    esp,0x10
c001b468:	84 c0                	test   al,al
c001b46a:	75 10                	jne    c001b47c <Reg::getLine(char*, char*, char*)+0x33>
c001b46c:	57                   	push   edi
c001b46d:	56                   	push   esi
c001b46e:	53                   	push   ebx
c001b46f:	68 32 c9 02 c0       	push   0xc002c932
c001b474:	e8 7b fe ff ff       	call   c001b2f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b479:	83 c4 10             	add    esp,0x10
c001b47c:	5b                   	pop    ebx
c001b47d:	5e                   	pop    esi
c001b47e:	5f                   	pop    edi
c001b47f:	c3                   	ret    

c001b480 <Reg::readInt(char*, char*, int*)>:
c001b480:	55                   	push   ebp
c001b481:	57                   	push   edi
c001b482:	56                   	push   esi
c001b483:	53                   	push   ebx
c001b484:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b48a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b48e:	57                   	push   edi
c001b48f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b496:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b49d:	e8 a7 ff ff ff       	call   c001b449 <Reg::getLine(char*, char*, char*)>
c001b4a2:	83 c4 10             	add    esp,0x10
c001b4a5:	84 c0                	test   al,al
c001b4a7:	0f 84 b3 00 00 00    	je     c001b560 <Reg::readInt(char*, char*, int*)+0xe0>
c001b4ad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b4b1:	80 fa 2b             	cmp    dl,0x2b
c001b4b4:	74 0c                	je     c001b4c2 <Reg::readInt(char*, char*, int*)+0x42>
c001b4b6:	80 fa 2d             	cmp    dl,0x2d
c001b4b9:	75 0e                	jne    c001b4c9 <Reg::readInt(char*, char*, int*)+0x49>
c001b4bb:	ba 01 00 00 00       	mov    edx,0x1
c001b4c0:	eb 0b                	jmp    c001b4cd <Reg::readInt(char*, char*, int*)+0x4d>
c001b4c2:	ba 01 00 00 00       	mov    edx,0x1
c001b4c7:	eb 02                	jmp    c001b4cb <Reg::readInt(char*, char*, int*)+0x4b>
c001b4c9:	31 d2                	xor    edx,edx
c001b4cb:	31 c0                	xor    eax,eax
c001b4cd:	be 0a 00 00 00       	mov    esi,0xa
c001b4d2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b4d7:	75 20                	jne    c001b4f9 <Reg::readInt(char*, char*, int*)+0x79>
c001b4d9:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b4dd:	80 f9 78             	cmp    cl,0x78
c001b4e0:	75 0a                	jne    c001b4ec <Reg::readInt(char*, char*, int*)+0x6c>
c001b4e2:	83 c2 02             	add    edx,0x2
c001b4e5:	be 10 00 00 00       	mov    esi,0x10
c001b4ea:	eb 0d                	jmp    c001b4f9 <Reg::readInt(char*, char*, int*)+0x79>
c001b4ec:	80 f9 62             	cmp    cl,0x62
c001b4ef:	75 08                	jne    c001b4f9 <Reg::readInt(char*, char*, int*)+0x79>
c001b4f1:	83 c2 02             	add    edx,0x2
c001b4f4:	be 02 00 00 00       	mov    esi,0x2
c001b4f9:	01 d7                	add    edi,edx
c001b4fb:	31 d2                	xor    edx,edx
c001b4fd:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b4ff:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b503:	80 fb 0d             	cmp    bl,0xd
c001b506:	0f 94 c3             	sete   bl
c001b509:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b50e:	0f 94 c1             	sete   cl
c001b511:	08 cb                	or     bl,cl
c001b513:	75 3a                	jne    c001b54f <Reg::readInt(char*, char*, int*)+0xcf>
c001b515:	0f af d6             	imul   edx,esi
c001b518:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b51d:	83 fe 10             	cmp    esi,0x10
c001b520:	75 26                	jne    c001b548 <Reg::readInt(char*, char*, int*)+0xc8>
c001b522:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b526:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b529:	89 e9                	mov    ecx,ebp
c001b52b:	80 f9 05             	cmp    cl,0x5
c001b52e:	77 06                	ja     c001b536 <Reg::readInt(char*, char*, int*)+0xb6>
c001b530:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b534:	eb 16                	jmp    c001b54c <Reg::readInt(char*, char*, int*)+0xcc>
c001b536:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b53a:	83 e9 61             	sub    ecx,0x61
c001b53d:	80 f9 05             	cmp    cl,0x5
c001b540:	77 06                	ja     c001b548 <Reg::readInt(char*, char*, int*)+0xc8>
c001b542:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b546:	eb 04                	jmp    c001b54c <Reg::readInt(char*, char*, int*)+0xcc>
c001b548:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b54c:	47                   	inc    edi
c001b54d:	eb ae                	jmp    c001b4fd <Reg::readInt(char*, char*, int*)+0x7d>
c001b54f:	84 c0                	test   al,al
c001b551:	74 02                	je     c001b555 <Reg::readInt(char*, char*, int*)+0xd5>
c001b553:	f7 da                	neg    edx
c001b555:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b55c:	89 10                	mov    DWORD PTR [eax],edx
c001b55e:	88 d8                	mov    al,bl
c001b560:	81 c4 ec 00 00 00    	add    esp,0xec
c001b566:	5b                   	pop    ebx
c001b567:	5e                   	pop    esi
c001b568:	5f                   	pop    edi
c001b569:	5d                   	pop    ebp
c001b56a:	c3                   	ret    

c001b56b <Reg::readString(char*, char*, char*, int)>:
c001b56b:	57                   	push   edi
c001b56c:	56                   	push   esi
c001b56d:	53                   	push   ebx
c001b56e:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b574:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b57b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b57f:	57                   	push   edi
c001b580:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b587:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b58e:	e8 b6 fe ff ff       	call   c001b449 <Reg::getLine(char*, char*, char*)>
c001b593:	83 c4 10             	add    esp,0x10
c001b596:	89 c6                	mov    esi,eax
c001b598:	84 c0                	test   al,al
c001b59a:	74 44                	je     c001b5e0 <Reg::readString(char*, char*, char*, int)+0x75>
c001b59c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b5a3:	31 c0                	xor    eax,eax
c001b5a5:	4a                   	dec    edx
c001b5a6:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b5a9:	84 c9                	test   cl,cl
c001b5ab:	74 0f                	je     c001b5bc <Reg::readString(char*, char*, char*, int)+0x51>
c001b5ad:	39 c2                	cmp    edx,eax
c001b5af:	7e 0b                	jle    c001b5bc <Reg::readString(char*, char*, char*, int)+0x51>
c001b5b1:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b5b4:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b5b9:	40                   	inc    eax
c001b5ba:	eb ea                	jmp    c001b5a6 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b5bc:	83 ec 0c             	sub    esp,0xc
c001b5bf:	53                   	push   ebx
c001b5c0:	e8 c3 51 fe ff       	call   c0000788 <strlen>
c001b5c5:	83 c4 10             	add    esp,0x10
c001b5c8:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b5cd:	75 11                	jne    c001b5e0 <Reg::readString(char*, char*, char*, int)+0x75>
c001b5cf:	83 ec 0c             	sub    esp,0xc
c001b5d2:	53                   	push   ebx
c001b5d3:	e8 b0 51 fe ff       	call   c0000788 <strlen>
c001b5d8:	83 c4 10             	add    esp,0x10
c001b5db:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b5e0:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b5e6:	89 f0                	mov    eax,esi
c001b5e8:	5b                   	pop    ebx
c001b5e9:	5e                   	pop    esi
c001b5ea:	5f                   	pop    edi
c001b5eb:	c3                   	ret    

c001b5ec <Reg::readBool(char*, char*, bool*)>:
c001b5ec:	83 ec 20             	sub    esp,0x20
c001b5ef:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b5f3:	50                   	push   eax
c001b5f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5fc:	e8 7f fe ff ff       	call   c001b480 <Reg::readInt(char*, char*, int*)>
c001b601:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b606:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b60a:	0f 95 02             	setne  BYTE PTR [edx]
c001b60d:	83 c4 2c             	add    esp,0x2c
c001b610:	c3                   	ret    

c001b611 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b611:	53                   	push   ebx
c001b612:	83 ec 1c             	sub    esp,0x1c
c001b615:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b619:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b61d:	50                   	push   eax
c001b61e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b622:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b626:	e8 c1 ff ff ff       	call   c001b5ec <Reg::readBool(char*, char*, bool*)>
c001b62b:	83 c4 10             	add    esp,0x10
c001b62e:	84 c0                	test   al,al
c001b630:	74 04                	je     c001b636 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b632:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b636:	88 d8                	mov    al,bl
c001b638:	83 c4 18             	add    esp,0x18
c001b63b:	5b                   	pop    ebx
c001b63c:	c3                   	ret    

c001b63d <Reg::readIntWithDefault(char*, char*, int)>:
c001b63d:	53                   	push   ebx
c001b63e:	83 ec 1c             	sub    esp,0x1c
c001b641:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b645:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b649:	50                   	push   eax
c001b64a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b64e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b652:	e8 29 fe ff ff       	call   c001b480 <Reg::readInt(char*, char*, int*)>
c001b657:	83 c4 10             	add    esp,0x10
c001b65a:	84 c0                	test   al,al
c001b65c:	74 04                	je     c001b662 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b65e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b662:	89 d8                	mov    eax,ebx
c001b664:	83 c4 18             	add    esp,0x18
c001b667:	5b                   	pop    ebx
c001b668:	c3                   	ret    

c001b669 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b669:	57                   	push   edi
c001b66a:	56                   	push   esi
c001b66b:	56                   	push   esi
c001b66c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b670:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b674:	56                   	push   esi
c001b675:	57                   	push   edi
c001b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b67e:	e8 e8 fe ff ff       	call   c001b56b <Reg::readString(char*, char*, char*, int)>
c001b683:	83 c4 10             	add    esp,0x10
c001b686:	84 c0                	test   al,al
c001b688:	75 1a                	jne    c001b6a4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b68a:	51                   	push   ecx
c001b68b:	56                   	push   esi
c001b68c:	6a 00                	push   0x0
c001b68e:	57                   	push   edi
c001b68f:	e8 d8 50 fe ff       	call   c000076c <memset>
c001b694:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b697:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b69b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b6a4:	89 f8                	mov    eax,edi
c001b6a6:	5a                   	pop    edx
c001b6a7:	5e                   	pop    esi
c001b6a8:	5f                   	pop    edi
c001b6a9:	c3                   	ret    

c001b6aa <Sys::eject(regs*)>:
c001b6aa:	83 ec 0c             	sub    esp,0xc
c001b6ad:	83 ca ff             	or     edx,0xffffffff
c001b6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b6b7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6bc:	83 e9 41             	sub    ecx,0x41
c001b6bf:	83 f9 19             	cmp    ecx,0x19
c001b6c2:	77 18                	ja     c001b6dc <Sys::eject(regs*)+0x32>
c001b6c4:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c001b6cb:	85 c9                	test   ecx,ecx
c001b6cd:	74 0d                	je     c001b6dc <Sys::eject(regs*)+0x32>
c001b6cf:	83 ec 0c             	sub    esp,0xc
c001b6d2:	51                   	push   ecx
c001b6d3:	e8 d4 b0 ff ff       	call   c00167ac <LogicalDisk::eject()>
c001b6d8:	83 c4 10             	add    esp,0x10
c001b6db:	99                   	cdq    
c001b6dc:	83 c4 0c             	add    esp,0xc
c001b6df:	c3                   	ret    

c001b6e0 <Sys::exit(regs*)>:
c001b6e0:	83 ec 18             	sub    esp,0x18
c001b6e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6e7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b6ea:	e8 7e 38 00 00       	call   c001ef6d <terminateTask(int)>
c001b6ef:	83 c8 ff             	or     eax,0xffffffff
c001b6f2:	83 c4 1c             	add    esp,0x1c
c001b6f5:	89 c2                	mov    edx,eax
c001b6f7:	c3                   	ret    

c001b6f8 <Sys::getCwd(regs*)>:
c001b6f8:	83 ec 10             	sub    esp,0x10
c001b6fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6ff:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b702:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b705:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b70a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b70d:	e8 ee 7a ff ff       	call   c0013200 <Fs::getcwd(Process*, char*, int)>
c001b712:	83 c4 1c             	add    esp,0x1c
c001b715:	99                   	cdq    
c001b716:	c3                   	ret    

c001b717 <Sys::getPID(regs*)>:
c001b717:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b71c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b71f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b721:	99                   	cdq    
c001b722:	c3                   	ret    

c001b723 <Sys::getRAMData(regs*)>:
c001b723:	8b 0d f4 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f0f4
c001b729:	6b 05 f0 f0 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f0f0,0x64
c001b730:	99                   	cdq    
c001b731:	f7 f9                	idiv   ecx
c001b733:	c1 e0 18             	shl    eax,0x18
c001b736:	09 c8                	or     eax,ecx
c001b738:	99                   	cdq    
c001b739:	c3                   	ret    

c001b73a <Sys::getVGAPtr(regs*)>:
c001b73a:	55                   	push   ebp
c001b73b:	57                   	push   edi
c001b73c:	56                   	push   esi
c001b73d:	53                   	push   ebx
c001b73e:	83 ec 18             	sub    esp,0x18
c001b741:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b745:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b748:	e8 02 33 00 00       	call   c001ea4f <Thr::processFromPID(int)>
c001b74d:	83 c4 10             	add    esp,0x10
c001b750:	89 c1                	mov    ecx,eax
c001b752:	b8 01 00 00 00       	mov    eax,0x1
c001b757:	85 c9                	test   ecx,ecx
c001b759:	74 59                	je     c001b7b4 <Sys::getVGAPtr(regs*)+0x7a>
c001b75b:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b761:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b765:	74 0c                	je     c001b773 <Sys::getVGAPtr(regs*)+0x39>
c001b767:	83 ec 0c             	sub    esp,0xc
c001b76a:	53                   	push   ebx
c001b76b:	e8 52 55 ff ff       	call   c0010cc2 <setActiveTerminal(VgaText*)>
c001b770:	83 c4 10             	add    esp,0x10
c001b773:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b776:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b779:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b77e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b780:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b783:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b786:	81 c3 82 00 00 00    	add    ebx,0x82
c001b78c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b792:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b795:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b798:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b79e:	50                   	push   eax
c001b79f:	50                   	push   eax
c001b7a0:	53                   	push   ebx
c001b7a1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b7a4:	05 a8 0f 00 00       	add    eax,0xfa8
c001b7a9:	50                   	push   eax
c001b7aa:	e8 79 50 fe ff       	call   c0000828 <strcpy>
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	31 c0                	xor    eax,eax
c001b7b4:	83 c4 0c             	add    esp,0xc
c001b7b7:	31 d2                	xor    edx,edx
c001b7b9:	5b                   	pop    ebx
c001b7ba:	5e                   	pop    esi
c001b7bb:	5f                   	pop    edi
c001b7bc:	5d                   	pop    ebp
c001b7bd:	c3                   	ret    

c001b7be <Sys::loadDLL(regs*)>:
c001b7be:	56                   	push   esi
c001b7bf:	53                   	push   ebx
c001b7c0:	31 d2                	xor    edx,edx
c001b7c2:	51                   	push   ecx
c001b7c3:	b8 01 00 00 00       	mov    eax,0x1
c001b7c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7cc:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b7d0:	0f 84 8c 00 00 00    	je     c001b862 <Sys::loadDLL(regs*)+0xa4>
c001b7d6:	83 ec 0c             	sub    esp,0xc
c001b7d9:	68 14 01 00 00       	push   0x114
c001b7de:	e8 11 41 ff ff       	call   c000f8f4 <malloc>
c001b7e3:	83 c4 0c             	add    esp,0xc
c001b7e6:	89 c3                	mov    ebx,eax
c001b7e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7ed:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7f0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b7f3:	53                   	push   ebx
c001b7f4:	e8 05 7c ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001b7f9:	83 c4 10             	add    esp,0x10
c001b7fc:	31 d2                	xor    edx,edx
c001b7fe:	b8 02 00 00 00       	mov    eax,0x2
c001b803:	85 db                	test   ebx,ebx
c001b805:	74 5b                	je     c001b862 <Sys::loadDLL(regs*)+0xa4>
c001b807:	83 ec 0c             	sub    esp,0xc
c001b80a:	53                   	push   ebx
c001b80b:	e8 c0 7e ff ff       	call   c00136d0 <File::exists()>
c001b810:	83 c4 10             	add    esp,0x10
c001b813:	84 c0                	test   al,al
c001b815:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b817:	75 11                	jne    c001b82a <Sys::loadDLL(regs*)+0x6c>
c001b819:	83 ec 0c             	sub    esp,0xc
c001b81c:	53                   	push   ebx
c001b81d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b820:	83 c4 10             	add    esp,0x10
c001b823:	b8 03 00 00 00       	mov    eax,0x3
c001b828:	eb 36                	jmp    c001b860 <Sys::loadDLL(regs*)+0xa2>
c001b82a:	83 ec 0c             	sub    esp,0xc
c001b82d:	53                   	push   ebx
c001b82e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b831:	58                   	pop    eax
c001b832:	5a                   	pop    edx
c001b833:	6a 00                	push   0x0
c001b835:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b838:	e8 1e 24 00 00       	call   c001dc5b <Thr::loadDLL(char const*, bool)>
c001b83d:	83 c4 10             	add    esp,0x10
c001b840:	89 c1                	mov    ecx,eax
c001b842:	31 d2                	xor    edx,edx
c001b844:	b8 04 00 00 00       	mov    eax,0x4
c001b849:	85 c9                	test   ecx,ecx
c001b84b:	74 15                	je     c001b862 <Sys::loadDLL(regs*)+0xa4>
c001b84d:	53                   	push   ebx
c001b84e:	53                   	push   ebx
c001b84f:	ff 35 a8 f0 02 c0    	push   DWORD PTR ds:0xc002f0a8
c001b855:	51                   	push   ecx
c001b856:	e8 2b 26 00 00       	call   c001de86 <Thr::executeDLL(unsigned long, void*)>
c001b85b:	83 c4 10             	add    esp,0x10
c001b85e:	31 c0                	xor    eax,eax
c001b860:	31 d2                	xor    edx,edx
c001b862:	59                   	pop    ecx
c001b863:	5b                   	pop    ebx
c001b864:	5e                   	pop    esi
c001b865:	c3                   	ret    

c001b866 <Sys::read(regs*)>:
c001b866:	57                   	push   edi
c001b867:	56                   	push   esi
c001b868:	53                   	push   ebx
c001b869:	83 ec 10             	sub    esp,0x10
c001b86c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b870:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b873:	83 f8 02             	cmp    eax,0x2
c001b876:	77 10                	ja     c001b888 <Sys::read(regs*)+0x22>
c001b878:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b87d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b880:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b886:	eb 0e                	jmp    c001b896 <Sys::read(regs*)+0x30>
c001b888:	83 ec 0c             	sub    esp,0xc
c001b88b:	50                   	push   eax
c001b88c:	e8 b2 60 ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001b891:	83 c4 10             	add    esp,0x10
c001b894:	89 c1                	mov    ecx,eax
c001b896:	83 c8 ff             	or     eax,0xffffffff
c001b899:	85 c9                	test   ecx,ecx
c001b89b:	89 c2                	mov    edx,eax
c001b89d:	74 28                	je     c001b8c7 <Sys::read(regs*)+0x61>
c001b89f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8a7:	31 ff                	xor    edi,edi
c001b8a9:	83 ec 0c             	sub    esp,0xc
c001b8ac:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b8ae:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b8b2:	52                   	push   edx
c001b8b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8b6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b8b9:	57                   	push   edi
c001b8ba:	56                   	push   esi
c001b8bb:	51                   	push   ecx
c001b8bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b8bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b8c3:	83 c4 20             	add    esp,0x20
c001b8c6:	99                   	cdq    
c001b8c7:	83 c4 10             	add    esp,0x10
c001b8ca:	5b                   	pop    ebx
c001b8cb:	5e                   	pop    esi
c001b8cc:	5f                   	pop    edi
c001b8cd:	c3                   	ret    

c001b8ce <Sys::sbrk(regs*)>:
c001b8ce:	56                   	push   esi
c001b8cf:	53                   	push   ebx
c001b8d0:	50                   	push   eax
c001b8d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8dd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b8e0:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b8e6:	85 db                	test   ebx,ebx
c001b8e8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b8eb:	74 02                	je     c001b8ef <Sys::sbrk(regs*)+0x21>
c001b8ed:	79 06                	jns    c001b8f5 <Sys::sbrk(regs*)+0x27>
c001b8ef:	89 f0                	mov    eax,esi
c001b8f1:	31 d2                	xor    edx,edx
c001b8f3:	eb 2a                	jmp    c001b91f <Sys::sbrk(regs*)+0x51>
c001b8f5:	83 c8 ff             	or     eax,0xffffffff
c001b8f8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b8fe:	89 c2                	mov    edx,eax
c001b900:	77 1d                	ja     c001b91f <Sys::sbrk(regs*)+0x51>
c001b902:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b908:	50                   	push   eax
c001b909:	c1 ea 0c             	shr    edx,0xc
c001b90c:	68 07 0c 00 00       	push   0xc07
c001b911:	52                   	push   edx
c001b912:	51                   	push   ecx
c001b913:	e8 ba 6a ff ff       	call   c00123d2 <VAS::allocatePages(int, int)>
c001b918:	89 f0                	mov    eax,esi
c001b91a:	31 d2                	xor    edx,edx
c001b91c:	83 c4 10             	add    esp,0x10
c001b91f:	59                   	pop    ecx
c001b920:	5b                   	pop    ebx
c001b921:	5e                   	pop    esi
c001b922:	c3                   	ret    

c001b923 <Sys::setCwd(regs*)>:
c001b923:	83 ec 14             	sub    esp,0x14
c001b926:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b92a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b92d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b932:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b935:	e8 35 7e ff ff       	call   c001376f <Fs::setcwd(Process*, char*)>
c001b93a:	83 c4 1c             	add    esp,0x1c
c001b93d:	99                   	cdq    
c001b93e:	c3                   	ret    

c001b93f <Sys::setTime(regs*)>:
c001b93f:	55                   	push   ebp
c001b940:	31 d2                	xor    edx,edx
c001b942:	57                   	push   edi
c001b943:	bf 18 00 00 00       	mov    edi,0x18
c001b948:	56                   	push   esi
c001b949:	53                   	push   ebx
c001b94a:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b94f:	83 ec 30             	sub    esp,0x30
c001b952:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b956:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b959:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b95c:	f7 f3                	div    ebx
c001b95e:	89 d6                	mov    esi,edx
c001b960:	31 d2                	xor    edx,edx
c001b962:	f7 f3                	div    ebx
c001b964:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b967:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b96b:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b970:	31 d2                	xor    edx,edx
c001b972:	f7 f3                	div    ebx
c001b974:	31 d2                	xor    edx,edx
c001b976:	bb 0c 00 00 00       	mov    ebx,0xc
c001b97b:	f7 f7                	div    edi
c001b97d:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b980:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b984:	0f b7 cd             	movzx  ecx,bp
c001b987:	56                   	push   esi
c001b988:	89 c7                	mov    edi,eax
c001b98a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b98e:	c1 e6 10             	shl    esi,0x10
c001b991:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b995:	83 e7 1f             	and    edi,0x1f
c001b998:	51                   	push   ecx
c001b999:	47                   	inc    edi
c001b99a:	c1 e8 05             	shr    eax,0x5
c001b99d:	31 d2                	xor    edx,edx
c001b99f:	f7 f3                	div    ebx
c001b9a1:	31 db                	xor    ebx,ebx
c001b9a3:	52                   	push   edx
c001b9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b9a8:	57                   	push   edi
c001b9a9:	68 4d c9 02 c0       	push   0xc002c94d
c001b9ae:	e8 ec 74 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001b9b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b9b7:	89 f8                	mov    eax,edi
c001b9b9:	31 c9                	xor    ecx,ecx
c001b9bb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b9bf:	88 c1                	mov    cl,al
c001b9c1:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b9c7:	88 d5                	mov    ch,dl
c001b9c9:	c1 e0 10             	shl    eax,0x10
c001b9cc:	0f b7 d1             	movzx  edx,cx
c001b9cf:	09 c2                	or     edx,eax
c001b9d1:	89 d8                	mov    eax,ebx
c001b9d3:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b9d8:	09 f0                	or     eax,esi
c001b9da:	89 c3                	mov    ebx,eax
c001b9dc:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b9e0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b9e4:	83 c4 18             	add    esp,0x18
c001b9e7:	53                   	push   ebx
c001b9e8:	52                   	push   edx
c001b9e9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b9ed:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b9f1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b9f5:	e8 97 84 ff ff       	call   c0013e91 <datetimeToSeconds(datetime_t)>
c001b9fa:	83 c4 0c             	add    esp,0xc
c001b9fd:	52                   	push   edx
c001b9fe:	50                   	push   eax
c001b9ff:	56                   	push   esi
c001ba00:	e8 13 86 ff ff       	call   c0014018 <secondsToDatetime(unsigned long long)>
c001ba05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba0d:	51                   	push   ecx
c001ba0e:	89 d6                	mov    esi,edx
c001ba10:	51                   	push   ecx
c001ba11:	c1 ee 10             	shr    esi,0x10
c001ba14:	89 f3                	mov    ebx,esi
c001ba16:	0f b6 f3             	movzx  esi,bl
c001ba19:	56                   	push   esi
c001ba1a:	0f b6 f6             	movzx  esi,dh
c001ba1d:	0f b6 d2             	movzx  edx,dl
c001ba20:	56                   	push   esi
c001ba21:	52                   	push   edx
c001ba22:	89 c2                	mov    edx,eax
c001ba24:	c1 ea 10             	shr    edx,0x10
c001ba27:	52                   	push   edx
c001ba28:	0f b6 d4             	movzx  edx,ah
c001ba2b:	0f b6 c0             	movzx  eax,al
c001ba2e:	52                   	push   edx
c001ba2f:	50                   	push   eax
c001ba30:	68 69 c9 02 c0       	push   0xc002c969
c001ba35:	e8 65 74 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001ba3a:	83 c4 2c             	add    esp,0x2c
c001ba3d:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001ba42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ba46:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ba4a:	53                   	push   ebx
c001ba4b:	51                   	push   ecx
c001ba4c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ba52:	e8 61 85 ff ff       	call   c0013fb8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ba57:	83 f0 01             	xor    eax,0x1
c001ba5a:	31 d2                	xor    edx,edx
c001ba5c:	0f b6 c0             	movzx  eax,al
c001ba5f:	83 c4 3c             	add    esp,0x3c
c001ba62:	5b                   	pop    ebx
c001ba63:	5e                   	pop    esi
c001ba64:	5f                   	pop    edi
c001ba65:	5d                   	pop    ebp
c001ba66:	c3                   	ret    

c001ba67 <Sys::timezone(regs*)>:
c001ba67:	53                   	push   ebx
c001ba68:	83 ec 08             	sub    esp,0x8
c001ba6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba6f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ba73:	75 17                	jne    c001ba8c <Sys::timezone(regs*)+0x25>
c001ba75:	83 ec 0c             	sub    esp,0xc
c001ba78:	68 85 c9 02 c0       	push   0xc002c985
c001ba7d:	e8 1d 74 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001ba82:	83 c8 ff             	or     eax,0xffffffff
c001ba85:	83 c4 10             	add    esp,0x10
c001ba88:	89 c2                	mov    edx,eax
c001ba8a:	eb 20                	jmp    c001baac <Sys::timezone(regs*)+0x45>
c001ba8c:	83 ec 0c             	sub    esp,0xc
c001ba8f:	68 bd c9 02 c0       	push   0xc002c9bd
c001ba94:	e8 06 74 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001ba99:	58                   	pop    eax
c001ba9a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ba9d:	e8 78 82 ff ff       	call   c0013d1a <User::loadClockSettings(int)>
c001baa2:	83 c4 10             	add    esp,0x10
c001baa5:	b8 01 00 00 00       	mov    eax,0x1
c001baaa:	31 d2                	xor    edx,edx
c001baac:	83 c4 08             	add    esp,0x8
c001baaf:	5b                   	pop    ebx
c001bab0:	c3                   	ret    

c001bab1 <Sys::write(regs*)>:
c001bab1:	57                   	push   edi
c001bab2:	56                   	push   esi
c001bab3:	53                   	push   ebx
c001bab4:	83 ec 10             	sub    esp,0x10
c001bab7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001babb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001babe:	83 f8 02             	cmp    eax,0x2
c001bac1:	77 10                	ja     c001bad3 <Sys::write(regs*)+0x22>
c001bac3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bac8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bacb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001bad1:	eb 0e                	jmp    c001bae1 <Sys::write(regs*)+0x30>
c001bad3:	83 ec 0c             	sub    esp,0xc
c001bad6:	50                   	push   eax
c001bad7:	e8 67 5e ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001badc:	83 c4 10             	add    esp,0x10
c001badf:	89 c1                	mov    ecx,eax
c001bae1:	83 c8 ff             	or     eax,0xffffffff
c001bae4:	85 c9                	test   ecx,ecx
c001bae6:	89 c2                	mov    edx,eax
c001bae8:	74 28                	je     c001bb12 <Sys::write(regs*)+0x61>
c001baea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001baf2:	31 ff                	xor    edi,edi
c001baf4:	83 ec 0c             	sub    esp,0xc
c001baf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001baf9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bafd:	52                   	push   edx
c001bafe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb01:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001bb04:	57                   	push   edi
c001bb05:	56                   	push   esi
c001bb06:	51                   	push   ecx
c001bb07:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001bb0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb0e:	83 c4 20             	add    esp,0x20
c001bb11:	99                   	cdq    
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	5b                   	pop    ebx
c001bb16:	5e                   	pop    esi
c001bb17:	5f                   	pop    edi
c001bb18:	c3                   	ret    

c001bb19 <Sys::wsbe(regs*)>:
c001bb19:	57                   	push   edi
c001bb1a:	b9 0b 00 00 00       	mov    ecx,0xb
c001bb1f:	56                   	push   esi
c001bb20:	be fc c9 02 c0       	mov    esi,0xc002c9fc
c001bb25:	53                   	push   ebx
c001bb26:	83 ec 30             	sub    esp,0x30
c001bb29:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bb2d:	fc                   	cld    
c001bb2e:	83 ec 0c             	sub    esp,0xc
c001bb31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb33:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bb37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb3f:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001bb45:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb47:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001bb4a:	57                   	push   edi
c001bb4b:	e8 38 4c fe ff       	call   c0000788 <strlen>
c001bb50:	5a                   	pop    edx
c001bb51:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bb55:	52                   	push   edx
c001bb56:	31 d2                	xor    edx,edx
c001bb58:	57                   	push   edi
c001bb59:	52                   	push   edx
c001bb5a:	50                   	push   eax
c001bb5b:	56                   	push   esi
c001bb5c:	ff d3                	call   ebx
c001bb5e:	83 c4 14             	add    esp,0x14
c001bb61:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bb65:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bb68:	e8 00 34 00 00       	call   c001ef6d <terminateTask(int)>
c001bb6d:	83 c4 40             	add    esp,0x40
c001bb70:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bb75:	5b                   	pop    ebx
c001bb76:	31 d2                	xor    edx,edx
c001bb78:	5e                   	pop    esi
c001bb79:	5f                   	pop    edi
c001bb7a:	c3                   	ret    

c001bb7b <Sys::yield(regs*)>:
c001bb7b:	57                   	push   edi
c001bb7c:	56                   	push   esi
c001bb7d:	53                   	push   ebx
c001bb7e:	fa                   	cli    
c001bb7f:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001bb85:	e8 b0 2a 00 00       	call   c001e63a <schedule()>
c001bb8a:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001bb8f:	48                   	dec    eax
c001bb90:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001bb95:	75 01                	jne    c001bb98 <Sys::yield(regs*)+0x1d>
c001bb97:	fb                   	sti    
c001bb98:	8b 35 30 f7 02 c0    	mov    esi,DWORD PTR ds:0xc002f730
c001bb9e:	8b 3d 34 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f734
c001bba4:	89 f0                	mov    eax,esi
c001bba6:	89 fb                	mov    ebx,edi
c001bba8:	89 f1                	mov    ecx,esi
c001bbaa:	c1 e0 07             	shl    eax,0x7
c001bbad:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bbb1:	25 80 30 0f 00       	and    eax,0xf3080
c001bbb6:	c1 eb 17             	shr    ebx,0x17
c001bbb9:	31 c8                	xor    eax,ecx
c001bbbb:	89 da                	mov    edx,ebx
c001bbbd:	5b                   	pop    ebx
c001bbbe:	5e                   	pop    esi
c001bbbf:	5f                   	pop    edi
c001bbc0:	c3                   	ret    

c001bbc1 <sysCallSeekDir(regs*)>:
c001bbc1:	31 c0                	xor    eax,eax
c001bbc3:	31 d2                	xor    edx,edx
c001bbc5:	c3                   	ret    

c001bbc6 <sysCallTellDir(regs*)>:
c001bbc6:	31 c0                	xor    eax,eax
c001bbc8:	31 d2                	xor    edx,edx
c001bbca:	c3                   	ret    

c001bbcb <sysCallVerify(regs*)>:
c001bbcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbcf:	31 d2                	xor    edx,edx
c001bbd1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbd4:	c3                   	ret    

c001bbd5 <sysFormatDisk(regs*)>:
c001bbd5:	56                   	push   esi
c001bbd6:	53                   	push   ebx
c001bbd7:	53                   	push   ebx
c001bbd8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbdc:	8b 1d 34 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f234
c001bbe2:	eb 25                	jmp    c001bc09 <sysFormatDisk(regs*)+0x34>
c001bbe4:	83 ec 0c             	sub    esp,0xc
c001bbe7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bbea:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbec:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bbef:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bbf2:	50                   	push   eax
c001bbf3:	ff 34 85 c0 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0940]
c001bbfa:	53                   	push   ebx
c001bbfb:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bbfe:	83 c4 20             	add    esp,0x20
c001bc01:	83 f8 08             	cmp    eax,0x8
c001bc04:	75 12                	jne    c001bc18 <sysFormatDisk(regs*)+0x43>
c001bc06:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bc09:	85 db                	test   ebx,ebx
c001bc0b:	75 d7                	jne    c001bbe4 <sysFormatDisk(regs*)+0xf>
c001bc0d:	59                   	pop    ecx
c001bc0e:	b8 03 00 00 00       	mov    eax,0x3
c001bc13:	31 d2                	xor    edx,edx
c001bc15:	5b                   	pop    ebx
c001bc16:	5e                   	pop    esi
c001bc17:	c3                   	ret    
c001bc18:	85 c0                	test   eax,eax
c001bc1a:	74 1b                	je     c001bc37 <sysFormatDisk(regs*)+0x62>
c001bc1c:	83 f8 09             	cmp    eax,0x9
c001bc1f:	74 0b                	je     c001bc2c <sysFormatDisk(regs*)+0x57>
c001bc21:	59                   	pop    ecx
c001bc22:	b8 02 00 00 00       	mov    eax,0x2
c001bc27:	31 d2                	xor    edx,edx
c001bc29:	5b                   	pop    ebx
c001bc2a:	5e                   	pop    esi
c001bc2b:	c3                   	ret    
c001bc2c:	59                   	pop    ecx
c001bc2d:	b8 01 00 00 00       	mov    eax,0x1
c001bc32:	31 d2                	xor    edx,edx
c001bc34:	5b                   	pop    ebx
c001bc35:	5e                   	pop    esi
c001bc36:	c3                   	ret    
c001bc37:	59                   	pop    ecx
c001bc38:	31 c0                	xor    eax,eax
c001bc3a:	31 d2                	xor    edx,edx
c001bc3c:	5b                   	pop    ebx
c001bc3d:	5e                   	pop    esi
c001bc3e:	c3                   	ret    

c001bc3f <sysSetDiskVolumeLabel(regs*)>:
c001bc3f:	56                   	push   esi
c001bc40:	53                   	push   ebx
c001bc41:	53                   	push   ebx
c001bc42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bc46:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bc49:	83 f8 19             	cmp    eax,0x19
c001bc4c:	77 29                	ja     c001bc77 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bc4e:	8b 0c 85 c0 f6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0940]
c001bc55:	85 c9                	test   ecx,ecx
c001bc57:	74 1e                	je     c001bc77 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bc59:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bc5c:	85 d2                	test   edx,edx
c001bc5e:	74 17                	je     c001bc77 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bc60:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bc66:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bc68:	52                   	push   edx
c001bc69:	50                   	push   eax
c001bc6a:	51                   	push   ecx
c001bc6b:	53                   	push   ebx
c001bc6c:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bc6f:	83 c4 10             	add    esp,0x10
c001bc72:	99                   	cdq    
c001bc73:	59                   	pop    ecx
c001bc74:	5b                   	pop    ebx
c001bc75:	5e                   	pop    esi
c001bc76:	c3                   	ret    
c001bc77:	59                   	pop    ecx
c001bc78:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bc7d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc82:	5b                   	pop    ebx
c001bc83:	5e                   	pop    esi
c001bc84:	c3                   	ret    

c001bc85 <sysGetDiskVolumeLabel(regs*)>:
c001bc85:	57                   	push   edi
c001bc86:	56                   	push   esi
c001bc87:	53                   	push   ebx
c001bc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc8c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bc8f:	83 fa 19             	cmp    edx,0x19
c001bc92:	77 34                	ja     c001bcc8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bc94:	8b 0c 95 c0 f6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0940]
c001bc9b:	85 c9                	test   ecx,ecx
c001bc9d:	74 29                	je     c001bcc8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bc9f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bca2:	85 db                	test   ebx,ebx
c001bca4:	74 22                	je     c001bcc8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bca6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bca9:	85 c0                	test   eax,eax
c001bcab:	74 1b                	je     c001bcc8 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bcad:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bcb3:	83 ec 0c             	sub    esp,0xc
c001bcb6:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bcb8:	50                   	push   eax
c001bcb9:	53                   	push   ebx
c001bcba:	52                   	push   edx
c001bcbb:	51                   	push   ecx
c001bcbc:	56                   	push   esi
c001bcbd:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bcc0:	83 c4 20             	add    esp,0x20
c001bcc3:	99                   	cdq    
c001bcc4:	5b                   	pop    ebx
c001bcc5:	5e                   	pop    esi
c001bcc6:	5f                   	pop    edi
c001bcc7:	c3                   	ret    
c001bcc8:	5b                   	pop    ebx
c001bcc9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bcce:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcd3:	5e                   	pop    esi
c001bcd4:	5f                   	pop    edi
c001bcd5:	c3                   	ret    

c001bcd6 <sysShutdown(regs*)>:
c001bcd6:	83 ec 0c             	sub    esp,0xc
c001bcd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcdd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bce0:	85 c0                	test   eax,eax
c001bce2:	74 18                	je     c001bcfc <sysShutdown(regs*)+0x26>
c001bce4:	83 f8 01             	cmp    eax,0x1
c001bce7:	74 38                	je     c001bd21 <sysShutdown(regs*)+0x4b>
c001bce9:	83 f8 02             	cmp    eax,0x2
c001bcec:	74 24                	je     c001bd12 <sysShutdown(regs*)+0x3c>
c001bcee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcf3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcf8:	83 c4 0c             	add    esp,0xc
c001bcfb:	c3                   	ret    
c001bcfc:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001bd01:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd03:	6a 00                	push   0x0
c001bd05:	6a 00                	push   0x0
c001bd07:	6a 00                	push   0x0
c001bd09:	50                   	push   eax
c001bd0a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bd0d:	83 c4 10             	add    esp,0x10
c001bd10:	eb dc                	jmp    c001bcee <sysShutdown(regs*)+0x18>
c001bd12:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001bd17:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd19:	6a 00                	push   0x0
c001bd1b:	6a 00                	push   0x0
c001bd1d:	6a 01                	push   0x1
c001bd1f:	eb e8                	jmp    c001bd09 <sysShutdown(regs*)+0x33>
c001bd21:	a1 60 17 03 c0       	mov    eax,ds:0xc0031760
c001bd26:	85 c0                	test   eax,eax
c001bd28:	74 02                	je     c001bd2c <sysShutdown(regs*)+0x56>
c001bd2a:	ff d0                	call   eax
c001bd2c:	31 c0                	xor    eax,eax
c001bd2e:	31 d2                	xor    edx,edx
c001bd30:	83 c4 0c             	add    esp,0xc
c001bd33:	c3                   	ret    

c001bd34 <sysCallRealpath(regs*)>:
c001bd34:	83 ec 0c             	sub    esp,0xc
c001bd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd3b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bd3e:	85 d2                	test   edx,edx
c001bd40:	74 07                	je     c001bd49 <sysCallRealpath(regs*)+0x15>
c001bd42:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bd45:	85 c0                	test   eax,eax
c001bd47:	75 0b                	jne    c001bd54 <sysCallRealpath(regs*)+0x20>
c001bd49:	b8 01 00 00 00       	mov    eax,0x1
c001bd4e:	31 d2                	xor    edx,edx
c001bd50:	83 c4 0c             	add    esp,0xc
c001bd53:	c3                   	ret    
c001bd54:	51                   	push   ecx
c001bd55:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd5b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd5e:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bd64:	51                   	push   ecx
c001bd65:	52                   	push   edx
c001bd66:	50                   	push   eax
c001bd67:	e8 e8 74 ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bd6c:	83 c4 10             	add    esp,0x10
c001bd6f:	31 c0                	xor    eax,eax
c001bd71:	31 d2                	xor    edx,edx
c001bd73:	83 c4 0c             	add    esp,0xc
c001bd76:	c3                   	ret    

c001bd77 <sysCallGetArgc(regs*)>:
c001bd77:	83 ec 14             	sub    esp,0x14
c001bd7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd82:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bd88:	68 28 ca 02 c0       	push   0xc002ca28
c001bd8d:	e8 0d 71 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001bd92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd9a:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bda0:	83 c4 1c             	add    esp,0x1c
c001bda3:	99                   	cdq    
c001bda4:	c3                   	ret    

c001bda5 <sysCallReadDir(regs*)>:
c001bda5:	53                   	push   ebx
c001bda6:	83 ec 18             	sub    esp,0x18
c001bda9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdad:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bdb0:	83 f8 02             	cmp    eax,0x2
c001bdb3:	76 53                	jbe    c001be08 <sysCallReadDir(regs*)+0x63>
c001bdb5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bdb8:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bdbe:	77 4f                	ja     c001be0f <sysCallReadDir(regs*)+0x6a>
c001bdc0:	83 ec 0c             	sub    esp,0xc
c001bdc3:	50                   	push   eax
c001bdc4:	e8 7a 5b ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001bdc9:	83 c4 10             	add    esp,0x10
c001bdcc:	85 c0                	test   eax,eax
c001bdce:	74 50                	je     c001be20 <sysCallReadDir(regs*)+0x7b>
c001bdd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bdd8:	83 ec 0c             	sub    esp,0xc
c001bddb:	8b 10                	mov    edx,DWORD PTR [eax]
c001bddd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bde1:	51                   	push   ecx
c001bde2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bde5:	6a 00                	push   0x0
c001bde7:	68 10 01 00 00       	push   0x110
c001bdec:	50                   	push   eax
c001bded:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bdf0:	83 c4 20             	add    esp,0x20
c001bdf3:	85 c0                	test   eax,eax
c001bdf5:	74 38                	je     c001be2f <sysCallReadDir(regs*)+0x8a>
c001bdf7:	83 f8 07             	cmp    eax,0x7
c001bdfa:	74 0c                	je     c001be08 <sysCallReadDir(regs*)+0x63>
c001bdfc:	b8 02 00 00 00       	mov    eax,0x2
c001be01:	31 d2                	xor    edx,edx
c001be03:	83 c4 18             	add    esp,0x18
c001be06:	5b                   	pop    ebx
c001be07:	c3                   	ret    
c001be08:	b8 01 00 00 00       	mov    eax,0x1
c001be0d:	eb f2                	jmp    c001be01 <sysCallReadDir(regs*)+0x5c>
c001be0f:	83 ec 08             	sub    esp,0x8
c001be12:	52                   	push   edx
c001be13:	68 4c cb 02 c0       	push   0xc002cb4c
c001be18:	e8 82 70 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001be1d:	83 c4 10             	add    esp,0x10
c001be20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be25:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be2a:	83 c4 18             	add    esp,0x18
c001be2d:	5b                   	pop    ebx
c001be2e:	c3                   	ret    
c001be2f:	31 c0                	xor    eax,eax
c001be31:	eb ce                	jmp    c001be01 <sysCallReadDir(regs*)+0x5c>

c001be33 <sysCallIsATTY(regs*)>:
c001be33:	83 ec 0c             	sub    esp,0xc
c001be36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be3a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be3d:	83 f8 02             	cmp    eax,0x2
c001be40:	76 07                	jbe    c001be49 <sysCallIsATTY(regs*)+0x16>
c001be42:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be47:	75 26                	jne    c001be6f <sysCallIsATTY(regs*)+0x3c>
c001be49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be51:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001be57:	85 c0                	test   eax,eax
c001be59:	74 24                	je     c001be7f <sysCallIsATTY(regs*)+0x4c>
c001be5b:	83 ec 0c             	sub    esp,0xc
c001be5e:	8b 10                	mov    edx,DWORD PTR [eax]
c001be60:	50                   	push   eax
c001be61:	ff 12                	call   DWORD PTR [edx]
c001be63:	31 d2                	xor    edx,edx
c001be65:	0f b6 c0             	movzx  eax,al
c001be68:	83 c4 10             	add    esp,0x10
c001be6b:	83 c4 0c             	add    esp,0xc
c001be6e:	c3                   	ret    
c001be6f:	83 ec 0c             	sub    esp,0xc
c001be72:	50                   	push   eax
c001be73:	e8 cb 5a ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001be78:	83 c4 10             	add    esp,0x10
c001be7b:	85 c0                	test   eax,eax
c001be7d:	75 dc                	jne    c001be5b <sysCallIsATTY(regs*)+0x28>
c001be7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be84:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be89:	83 c4 0c             	add    esp,0xc
c001be8c:	c3                   	ret    

c001be8d <sysCallSeek(regs*)>:
c001be8d:	53                   	push   ebx
c001be8e:	83 ec 08             	sub    esp,0x8
c001be91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be95:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be98:	83 f8 02             	cmp    eax,0x2
c001be9b:	76 4a                	jbe    c001bee7 <sysCallSeek(regs*)+0x5a>
c001be9d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bea2:	77 32                	ja     c001bed6 <sysCallSeek(regs*)+0x49>
c001bea4:	83 ec 0c             	sub    esp,0xc
c001bea7:	50                   	push   eax
c001bea8:	e8 96 5a ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001bead:	83 c4 0c             	add    esp,0xc
c001beb0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001beb3:	31 db                	xor    ebx,ebx
c001beb5:	53                   	push   ebx
c001beb6:	51                   	push   ecx
c001beb7:	50                   	push   eax
c001beb8:	e8 63 76 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001bebd:	83 c4 10             	add    esp,0x10
c001bec0:	85 c0                	test   eax,eax
c001bec2:	0f 95 c0             	setne  al
c001bec5:	31 d2                	xor    edx,edx
c001bec7:	0f b6 c0             	movzx  eax,al
c001beca:	f7 d8                	neg    eax
c001becc:	83 d2 00             	adc    edx,0x0
c001becf:	83 c4 08             	add    esp,0x8
c001bed2:	f7 da                	neg    edx
c001bed4:	5b                   	pop    ebx
c001bed5:	c3                   	ret    
c001bed6:	83 ec 08             	sub    esp,0x8
c001bed9:	50                   	push   eax
c001beda:	68 33 ca 02 c0       	push   0xc002ca33
c001bedf:	e8 bb 6f ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001bee4:	83 c4 10             	add    esp,0x10
c001bee7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001beec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bef1:	83 c4 08             	add    esp,0x8
c001bef4:	5b                   	pop    ebx
c001bef5:	c3                   	ret    

c001bef6 <sysCallTell(regs*)>:
c001bef6:	53                   	push   ebx
c001bef7:	83 ec 08             	sub    esp,0x8
c001befa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001befe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf01:	83 f8 02             	cmp    eax,0x2
c001bf04:	76 5e                	jbe    c001bf64 <sysCallTell(regs*)+0x6e>
c001bf06:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf0b:	77 2d                	ja     c001bf3a <sysCallTell(regs*)+0x44>
c001bf0d:	83 ec 0c             	sub    esp,0xc
c001bf10:	50                   	push   eax
c001bf11:	e8 2d 5a ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001bf16:	5a                   	pop    edx
c001bf17:	59                   	pop    ecx
c001bf18:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf1b:	50                   	push   eax
c001bf1c:	e8 55 76 ff ff       	call   c0013576 <File::tell(unsigned long long*)>
c001bf21:	83 c4 10             	add    esp,0x10
c001bf24:	85 c0                	test   eax,eax
c001bf26:	0f 95 c0             	setne  al
c001bf29:	31 d2                	xor    edx,edx
c001bf2b:	0f b6 c0             	movzx  eax,al
c001bf2e:	f7 d8                	neg    eax
c001bf30:	83 d2 00             	adc    edx,0x0
c001bf33:	83 c4 08             	add    esp,0x8
c001bf36:	f7 da                	neg    edx
c001bf38:	5b                   	pop    ebx
c001bf39:	c3                   	ret    
c001bf3a:	83 ec 08             	sub    esp,0x8
c001bf3d:	50                   	push   eax
c001bf3e:	68 4d ca 02 c0       	push   0xc002ca4d
c001bf43:	e8 57 6f ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001bf48:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf5b:	31 d2                	xor    edx,edx
c001bf5d:	31 c0                	xor    eax,eax
c001bf5f:	83 c4 08             	add    esp,0x8
c001bf62:	5b                   	pop    ebx
c001bf63:	c3                   	ret    
c001bf64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf69:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf6e:	83 c4 08             	add    esp,0x8
c001bf71:	5b                   	pop    ebx
c001bf72:	c3                   	ret    

c001bf73 <sysCallSize(regs*)>:
c001bf73:	53                   	push   ebx
c001bf74:	83 ec 18             	sub    esp,0x18
c001bf77:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bf7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf7e:	83 f8 02             	cmp    eax,0x2
c001bf81:	76 64                	jbe    c001bfe7 <sysCallSize(regs*)+0x74>
c001bf83:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf88:	77 33                	ja     c001bfbd <sysCallSize(regs*)+0x4a>
c001bf8a:	83 ec 0c             	sub    esp,0xc
c001bf8d:	50                   	push   eax
c001bf8e:	e8 b0 59 ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001bf93:	83 c4 0c             	add    esp,0xc
c001bf96:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bf9a:	52                   	push   edx
c001bf9b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf9e:	50                   	push   eax
c001bf9f:	e8 6a 77 ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001bfa4:	83 c4 10             	add    esp,0x10
c001bfa7:	85 c0                	test   eax,eax
c001bfa9:	0f 95 c0             	setne  al
c001bfac:	31 d2                	xor    edx,edx
c001bfae:	0f b6 c0             	movzx  eax,al
c001bfb1:	f7 d8                	neg    eax
c001bfb3:	83 d2 00             	adc    edx,0x0
c001bfb6:	83 c4 18             	add    esp,0x18
c001bfb9:	f7 da                	neg    edx
c001bfbb:	5b                   	pop    ebx
c001bfbc:	c3                   	ret    
c001bfbd:	83 ec 08             	sub    esp,0x8
c001bfc0:	50                   	push   eax
c001bfc1:	68 67 ca 02 c0       	push   0xc002ca67
c001bfc6:	e8 d4 6e ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001bfcb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bfce:	83 c4 10             	add    esp,0x10
c001bfd1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfd7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfde:	31 d2                	xor    edx,edx
c001bfe0:	31 c0                	xor    eax,eax
c001bfe2:	83 c4 18             	add    esp,0x18
c001bfe5:	5b                   	pop    ebx
c001bfe6:	c3                   	ret    
c001bfe7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bff1:	83 c4 18             	add    esp,0x18
c001bff4:	5b                   	pop    ebx
c001bff5:	c3                   	ret    

c001bff6 <sysCallSizeFromFilename(regs*)>:
c001bff6:	57                   	push   edi
c001bff7:	56                   	push   esi
c001bff8:	53                   	push   ebx
c001bff9:	83 ec 20             	sub    esp,0x20
c001bffc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c000:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001c003:	83 fb 02             	cmp    ebx,0x2
c001c006:	0f 86 99 00 00 00    	jbe    c001c0a5 <sysCallSizeFromFilename(regs*)+0xaf>
c001c00c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001c012:	77 65                	ja     c001c079 <sysCallSizeFromFilename(regs*)+0x83>
c001c014:	83 ec 0c             	sub    esp,0xc
c001c017:	68 14 01 00 00       	push   0x114
c001c01c:	e8 d3 38 ff ff       	call   c000f8f4 <malloc>
c001c021:	83 c4 0c             	add    esp,0xc
c001c024:	89 c6                	mov    esi,eax
c001c026:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c02b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c02e:	53                   	push   ebx
c001c02f:	56                   	push   esi
c001c030:	e8 c9 73 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001c035:	83 c4 0c             	add    esp,0xc
c001c038:	8d 44 24 23          	lea    eax,[esp+0x23]
c001c03c:	50                   	push   eax
c001c03d:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001c040:	56                   	push   esi
c001c041:	e8 c8 76 ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001c046:	83 c4 10             	add    esp,0x10
c001c049:	85 f6                	test   esi,esi
c001c04b:	74 14                	je     c001c061 <sysCallSizeFromFilename(regs*)+0x6b>
c001c04d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c051:	8b 16                	mov    edx,DWORD PTR [esi]
c001c053:	83 ec 0c             	sub    esp,0xc
c001c056:	56                   	push   esi
c001c057:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c05a:	83 c4 10             	add    esp,0x10
c001c05d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c061:	85 c0                	test   eax,eax
c001c063:	0f 95 c0             	setne  al
c001c066:	31 d2                	xor    edx,edx
c001c068:	0f b6 c0             	movzx  eax,al
c001c06b:	f7 d8                	neg    eax
c001c06d:	83 d2 00             	adc    edx,0x0
c001c070:	83 c4 20             	add    esp,0x20
c001c073:	f7 da                	neg    edx
c001c075:	5b                   	pop    ebx
c001c076:	5e                   	pop    esi
c001c077:	5f                   	pop    edi
c001c078:	c3                   	ret    
c001c079:	83 ec 08             	sub    esp,0x8
c001c07c:	53                   	push   ebx
c001c07d:	68 67 ca 02 c0       	push   0xc002ca67
c001c082:	e8 18 6e ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c087:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001c08a:	83 c4 10             	add    esp,0x10
c001c08d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c093:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c09a:	31 d2                	xor    edx,edx
c001c09c:	83 c4 20             	add    esp,0x20
c001c09f:	31 c0                	xor    eax,eax
c001c0a1:	5b                   	pop    ebx
c001c0a2:	5e                   	pop    esi
c001c0a3:	5f                   	pop    edi
c001c0a4:	c3                   	ret    
c001c0a5:	83 c4 20             	add    esp,0x20
c001c0a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0ad:	5b                   	pop    ebx
c001c0ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0b3:	5e                   	pop    esi
c001c0b4:	5f                   	pop    edi
c001c0b5:	c3                   	ret    

c001c0b6 <sysCallClose(regs*)>:
c001c0b6:	53                   	push   ebx
c001c0b7:	83 ec 08             	sub    esp,0x8
c001c0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0be:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c0c1:	83 f8 02             	cmp    eax,0x2
c001c0c4:	76 50                	jbe    c001c116 <sysCallClose(regs*)+0x60>
c001c0c6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c0cb:	74 58                	je     c001c125 <sysCallClose(regs*)+0x6f>
c001c0cd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c0d2:	74 60                	je     c001c134 <sysCallClose(regs*)+0x7e>
c001c0d4:	77 2f                	ja     c001c105 <sysCallClose(regs*)+0x4f>
c001c0d6:	83 ec 0c             	sub    esp,0xc
c001c0d9:	50                   	push   eax
c001c0da:	e8 64 58 ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001c0df:	89 c3                	mov    ebx,eax
c001c0e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0e4:	e8 d7 73 ff ff       	call   c00134c0 <File::close()>
c001c0e9:	83 c4 10             	add    esp,0x10
c001c0ec:	85 db                	test   ebx,ebx
c001c0ee:	74 0c                	je     c001c0fc <sysCallClose(regs*)+0x46>
c001c0f0:	83 ec 0c             	sub    esp,0xc
c001c0f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0f5:	53                   	push   ebx
c001c0f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0f9:	83 c4 10             	add    esp,0x10
c001c0fc:	31 c0                	xor    eax,eax
c001c0fe:	31 d2                	xor    edx,edx
c001c100:	83 c4 08             	add    esp,0x8
c001c103:	5b                   	pop    ebx
c001c104:	c3                   	ret    
c001c105:	83 ec 08             	sub    esp,0x8
c001c108:	50                   	push   eax
c001c109:	68 70 cb 02 c0       	push   0xc002cb70
c001c10e:	e8 8c 6d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c113:	83 c4 10             	add    esp,0x10
c001c116:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c11b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c120:	83 c4 08             	add    esp,0x8
c001c123:	5b                   	pop    ebx
c001c124:	c3                   	ret    
c001c125:	83 ec 0c             	sub    esp,0xc
c001c128:	68 82 ca 02 c0       	push   0xc002ca82
c001c12d:	e8 6d 6d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c132:	eb c5                	jmp    c001c0f9 <sysCallClose(regs*)+0x43>
c001c134:	83 ec 0c             	sub    esp,0xc
c001c137:	68 90 ca 02 c0       	push   0xc002ca90
c001c13c:	eb ef                	jmp    c001c12d <sysCallClose(regs*)+0x77>

c001c13e <sysCallOpenDir(regs*)>:
c001c13e:	56                   	push   esi
c001c13f:	53                   	push   ebx
c001c140:	53                   	push   ebx
c001c141:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c145:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c148:	85 f6                	test   esi,esi
c001c14a:	74 59                	je     c001c1a5 <sysCallOpenDir(regs*)+0x67>
c001c14c:	83 ec 0c             	sub    esp,0xc
c001c14f:	68 14 01 00 00       	push   0x114
c001c154:	e8 9b 37 ff ff       	call   c000f8f4 <malloc>
c001c159:	83 c4 0c             	add    esp,0xc
c001c15c:	89 c6                	mov    esi,eax
c001c15e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c163:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c166:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c169:	56                   	push   esi
c001c16a:	e8 3b 77 ff ff       	call   c00138aa <Directory::Directory(char const*, Process*)>
c001c16f:	83 c4 10             	add    esp,0x10
c001c172:	85 f6                	test   esi,esi
c001c174:	74 2f                	je     c001c1a5 <sysCallOpenDir(regs*)+0x67>
c001c176:	83 ec 0c             	sub    esp,0xc
c001c179:	56                   	push   esi
c001c17a:	e8 8f 77 ff ff       	call   c001390e <Directory::open()>
c001c17f:	83 c4 10             	add    esp,0x10
c001c182:	85 c0                	test   eax,eax
c001c184:	75 1f                	jne    c001c1a5 <sysCallOpenDir(regs*)+0x67>
c001c186:	83 ec 0c             	sub    esp,0xc
c001c189:	56                   	push   esi
c001c18a:	e8 bf 54 ff ff       	call   c001164e <UnixFile::getFileDescriptor()>
c001c18f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c192:	83 c4 10             	add    esp,0x10
c001c195:	89 02                	mov    DWORD PTR [edx],eax
c001c197:	c1 f8 1f             	sar    eax,0x1f
c001c19a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c19d:	31 c0                	xor    eax,eax
c001c19f:	59                   	pop    ecx
c001c1a0:	31 d2                	xor    edx,edx
c001c1a2:	5b                   	pop    ebx
c001c1a3:	5e                   	pop    esi
c001c1a4:	c3                   	ret    
c001c1a5:	59                   	pop    ecx
c001c1a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c1ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c1b0:	5b                   	pop    ebx
c001c1b1:	5e                   	pop    esi
c001c1b2:	c3                   	ret    

c001c1b3 <sysCallCloseDir(regs*)>:
c001c1b3:	53                   	push   ebx
c001c1b4:	83 ec 08             	sub    esp,0x8
c001c1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c1be:	83 f8 02             	cmp    eax,0x2
c001c1c1:	76 47                	jbe    c001c20a <sysCallCloseDir(regs*)+0x57>
c001c1c3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c1c8:	77 2f                	ja     c001c1f9 <sysCallCloseDir(regs*)+0x46>
c001c1ca:	83 ec 0c             	sub    esp,0xc
c001c1cd:	50                   	push   eax
c001c1ce:	e8 70 57 ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001c1d3:	89 c3                	mov    ebx,eax
c001c1d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1d8:	e8 8d 77 ff ff       	call   c001396a <Directory::close()>
c001c1dd:	83 c4 10             	add    esp,0x10
c001c1e0:	85 db                	test   ebx,ebx
c001c1e2:	74 0c                	je     c001c1f0 <sysCallCloseDir(regs*)+0x3d>
c001c1e4:	83 ec 0c             	sub    esp,0xc
c001c1e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1e9:	53                   	push   ebx
c001c1ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c1ed:	83 c4 10             	add    esp,0x10
c001c1f0:	31 c0                	xor    eax,eax
c001c1f2:	31 d2                	xor    edx,edx
c001c1f4:	83 c4 08             	add    esp,0x8
c001c1f7:	5b                   	pop    ebx
c001c1f8:	c3                   	ret    
c001c1f9:	83 ec 08             	sub    esp,0x8
c001c1fc:	50                   	push   eax
c001c1fd:	68 98 cb 02 c0       	push   0xc002cb98
c001c202:	e8 98 6c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c207:	83 c4 10             	add    esp,0x10
c001c20a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c20f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c214:	83 c4 08             	add    esp,0x8
c001c217:	5b                   	pop    ebx
c001c218:	c3                   	ret    

c001c219 <sysCallMakeDir(regs*)>:
c001c219:	56                   	push   esi
c001c21a:	53                   	push   ebx
c001c21b:	83 ec 10             	sub    esp,0x10
c001c21e:	68 14 01 00 00       	push   0x114
c001c223:	e8 cc 36 ff ff       	call   c000f8f4 <malloc>
c001c228:	83 c4 0c             	add    esp,0xc
c001c22b:	89 c3                	mov    ebx,eax
c001c22d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c232:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c235:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c239:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c23c:	53                   	push   ebx
c001c23d:	e8 68 76 ff ff       	call   c00138aa <Directory::Directory(char const*, Process*)>
c001c242:	83 c4 10             	add    esp,0x10
c001c245:	85 db                	test   ebx,ebx
c001c247:	74 32                	je     c001c27b <sysCallMakeDir(regs*)+0x62>
c001c249:	83 ec 0c             	sub    esp,0xc
c001c24c:	53                   	push   ebx
c001c24d:	e8 9c 78 ff ff       	call   c0013aee <Directory::create()>
c001c252:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c255:	89 c6                	mov    esi,eax
c001c257:	e8 0e 77 ff ff       	call   c001396a <Directory::close()>
c001c25c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c25e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c261:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c264:	83 c4 10             	add    esp,0x10
c001c267:	31 c0                	xor    eax,eax
c001c269:	59                   	pop    ecx
c001c26a:	85 f6                	test   esi,esi
c001c26c:	5b                   	pop    ebx
c001c26d:	0f 95 c0             	setne  al
c001c270:	5e                   	pop    esi
c001c271:	31 d2                	xor    edx,edx
c001c273:	f7 d8                	neg    eax
c001c275:	83 d2 00             	adc    edx,0x0
c001c278:	f7 da                	neg    edx
c001c27a:	c3                   	ret    
c001c27b:	59                   	pop    ecx
c001c27c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c281:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c286:	5b                   	pop    ebx
c001c287:	5e                   	pop    esi
c001c288:	c3                   	ret    

c001c289 <sysCallWait(regs*)>:
c001c289:	83 ec 10             	sub    esp,0x10
c001c28c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c290:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c293:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c296:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c299:	e8 c8 25 00 00       	call   c001e866 <waitTask(int, int*, int)>
c001c29e:	83 c4 1c             	add    esp,0x1c
c001c2a1:	99                   	cdq    
c001c2a2:	c3                   	ret    

c001c2a3 <sysCallNotImpl(regs*)>:
c001c2a3:	83 ec 18             	sub    esp,0x18
c001c2a6:	68 9e ca 02 c0       	push   0xc002ca9e
c001c2ab:	e8 d7 e5 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001c2b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2ba:	83 c4 1c             	add    esp,0x1c
c001c2bd:	c3                   	ret    

c001c2be <sysPanic(regs*)>:
c001c2be:	83 ec 18             	sub    esp,0x18
c001c2c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2c5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c2c8:	e8 ba e5 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001c2cd:	c7 04 24 b8 ca 02 c0 	mov    DWORD PTR [esp],0xc002cab8
c001c2d4:	e8 ae e5 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001c2d9:	b8 01 00 00 00       	mov    eax,0x1
c001c2de:	31 d2                	xor    edx,edx
c001c2e0:	83 c4 1c             	add    esp,0x1c
c001c2e3:	c3                   	ret    

c001c2e4 <sysCallRmdir(regs*)>:
c001c2e4:	56                   	push   esi
c001c2e5:	53                   	push   ebx
c001c2e6:	83 ec 20             	sub    esp,0x20
c001c2e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c2ed:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c2f0:	68 14 01 00 00       	push   0x114
c001c2f5:	e8 fa 35 ff ff       	call   c000f8f4 <malloc>
c001c2fa:	83 c4 0c             	add    esp,0xc
c001c2fd:	89 c3                	mov    ebx,eax
c001c2ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c304:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c307:	56                   	push   esi
c001c308:	53                   	push   ebx
c001c309:	e8 f0 70 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001c30e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c311:	e8 c4 72 ff ff       	call   c00135da <File::unlink()>
c001c316:	83 c4 10             	add    esp,0x10
c001c319:	85 db                	test   ebx,ebx
c001c31b:	74 14                	je     c001c331 <sysCallRmdir(regs*)+0x4d>
c001c31d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c321:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c323:	83 ec 0c             	sub    esp,0xc
c001c326:	53                   	push   ebx
c001c327:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c32a:	83 c4 10             	add    esp,0x10
c001c32d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c331:	85 c0                	test   eax,eax
c001c333:	0f 95 c0             	setne  al
c001c336:	31 d2                	xor    edx,edx
c001c338:	0f b6 c0             	movzx  eax,al
c001c33b:	f7 d8                	neg    eax
c001c33d:	83 d2 00             	adc    edx,0x0
c001c340:	83 c4 14             	add    esp,0x14
c001c343:	f7 da                	neg    edx
c001c345:	5b                   	pop    ebx
c001c346:	5e                   	pop    esi
c001c347:	c3                   	ret    

c001c348 <sysCallUnlink(regs*)>:
c001c348:	56                   	push   esi
c001c349:	53                   	push   ebx
c001c34a:	83 ec 20             	sub    esp,0x20
c001c34d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c351:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c354:	68 14 01 00 00       	push   0x114
c001c359:	e8 96 35 ff ff       	call   c000f8f4 <malloc>
c001c35e:	83 c4 0c             	add    esp,0xc
c001c361:	89 c3                	mov    ebx,eax
c001c363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c368:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c36b:	56                   	push   esi
c001c36c:	53                   	push   ebx
c001c36d:	e8 8c 70 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001c372:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c375:	e8 60 72 ff ff       	call   c00135da <File::unlink()>
c001c37a:	83 c4 10             	add    esp,0x10
c001c37d:	85 db                	test   ebx,ebx
c001c37f:	74 14                	je     c001c395 <sysCallUnlink(regs*)+0x4d>
c001c381:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c385:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c387:	83 ec 0c             	sub    esp,0xc
c001c38a:	53                   	push   ebx
c001c38b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c38e:	83 c4 10             	add    esp,0x10
c001c391:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c395:	85 c0                	test   eax,eax
c001c397:	0f 95 c0             	setne  al
c001c39a:	31 d2                	xor    edx,edx
c001c39c:	0f b6 c0             	movzx  eax,al
c001c39f:	f7 d8                	neg    eax
c001c3a1:	83 d2 00             	adc    edx,0x0
c001c3a4:	83 c4 14             	add    esp,0x14
c001c3a7:	f7 da                	neg    edx
c001c3a9:	5b                   	pop    ebx
c001c3aa:	5e                   	pop    esi
c001c3ab:	c3                   	ret    

c001c3ac <sysCallGetArgv(regs*)>:
c001c3ac:	83 ec 0c             	sub    esp,0xc
c001c3af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3b3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c3b6:	85 c0                	test   eax,eax
c001c3b8:	78 2b                	js     c001c3e5 <sysCallGetArgv(regs*)+0x39>
c001c3ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c3c0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c3c3:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c3c9:	7d 1a                	jge    c001c3e5 <sysCallGetArgv(regs*)+0x39>
c001c3cb:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c3d2:	85 c0                	test   eax,eax
c001c3d4:	74 17                	je     c001c3ed <sysCallGetArgv(regs*)+0x41>
c001c3d6:	83 ec 08             	sub    esp,0x8
c001c3d9:	50                   	push   eax
c001c3da:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c3dd:	e8 46 44 fe ff       	call   c0000828 <strcpy>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	31 c0                	xor    eax,eax
c001c3e7:	31 d2                	xor    edx,edx
c001c3e9:	83 c4 0c             	add    esp,0xc
c001c3ec:	c3                   	ret    
c001c3ed:	b8 01 00 00 00       	mov    eax,0x1
c001c3f2:	31 d2                	xor    edx,edx
c001c3f4:	83 c4 0c             	add    esp,0xc
c001c3f7:	c3                   	ret    

c001c3f8 <sysCallTTYName(regs*)>:
c001c3f8:	56                   	push   esi
c001c3f9:	53                   	push   ebx
c001c3fa:	53                   	push   ebx
c001c3fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c3ff:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c402:	85 c0                	test   eax,eax
c001c404:	74 5f                	je     c001c465 <sysCallTTYName(regs*)+0x6d>
c001c406:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c409:	83 f8 02             	cmp    eax,0x2
c001c40c:	77 3e                	ja     c001c44c <sysCallTTYName(regs*)+0x54>
c001c40e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c413:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c416:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c41c:	85 db                	test   ebx,ebx
c001c41e:	74 45                	je     c001c465 <sysCallTTYName(regs*)+0x6d>
c001c420:	83 ec 0c             	sub    esp,0xc
c001c423:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c425:	53                   	push   ebx
c001c426:	ff 10                	call   DWORD PTR [eax]
c001c428:	83 c4 10             	add    esp,0x10
c001c42b:	84 c0                	test   al,al
c001c42d:	74 41                	je     c001c470 <sysCallTTYName(regs*)+0x78>
c001c42f:	83 ec 08             	sub    esp,0x8
c001c432:	81 c3 82 00 00 00    	add    ebx,0x82
c001c438:	53                   	push   ebx
c001c439:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c43c:	e8 e7 43 fe ff       	call   c0000828 <strcpy>
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	31 c0                	xor    eax,eax
c001c446:	59                   	pop    ecx
c001c447:	31 d2                	xor    edx,edx
c001c449:	5b                   	pop    ebx
c001c44a:	5e                   	pop    esi
c001c44b:	c3                   	ret    
c001c44c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c451:	74 bb                	je     c001c40e <sysCallTTYName(regs*)+0x16>
c001c453:	83 ec 0c             	sub    esp,0xc
c001c456:	50                   	push   eax
c001c457:	e8 e7 54 ff ff       	call   c0011943 <getFromFileDescriptor(int)>
c001c45c:	83 c4 10             	add    esp,0x10
c001c45f:	89 c3                	mov    ebx,eax
c001c461:	85 db                	test   ebx,ebx
c001c463:	75 bb                	jne    c001c420 <sysCallTTYName(regs*)+0x28>
c001c465:	59                   	pop    ecx
c001c466:	b8 01 00 00 00       	mov    eax,0x1
c001c46b:	31 d2                	xor    edx,edx
c001c46d:	5b                   	pop    ebx
c001c46e:	5e                   	pop    esi
c001c46f:	c3                   	ret    
c001c470:	59                   	pop    ecx
c001c471:	b8 02 00 00 00       	mov    eax,0x2
c001c476:	31 d2                	xor    edx,edx
c001c478:	5b                   	pop    ebx
c001c479:	5e                   	pop    esi
c001c47a:	c3                   	ret    

c001c47b <sysCallUSleep(regs*)>:
c001c47b:	83 ec 14             	sub    esp,0x14
c001c47e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c483:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c487:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c48e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c491:	01 ca                	add    edx,ecx
c001c493:	52                   	push   edx
c001c494:	50                   	push   eax
c001c495:	e8 a3 24 00 00       	call   c001e93d <nanoSleep(unsigned long long)>
c001c49a:	31 c0                	xor    eax,eax
c001c49c:	31 d2                	xor    edx,edx
c001c49e:	83 c4 1c             	add    esp,0x1c
c001c4a1:	c3                   	ret    

c001c4a2 <sysCallSpawn(regs*)>:
c001c4a2:	56                   	push   esi
c001c4a3:	53                   	push   ebx
c001c4a4:	50                   	push   eax
c001c4a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c4a9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c4ac:	85 c0                	test   eax,eax
c001c4ae:	75 08                	jne    c001c4b8 <sysCallSpawn(regs*)+0x16>
c001c4b0:	59                   	pop    ecx
c001c4b1:	31 c0                	xor    eax,eax
c001c4b3:	31 d2                	xor    edx,edx
c001c4b5:	5b                   	pop    ebx
c001c4b6:	5e                   	pop    esi
c001c4b7:	c3                   	ret    
c001c4b8:	83 ec 08             	sub    esp,0x8
c001c4bb:	50                   	push   eax
c001c4bc:	68 c7 ca 02 c0       	push   0xc002cac7
c001c4c1:	e8 d9 69 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c4c6:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c4cd:	e8 22 34 ff ff       	call   c000f8f4 <malloc>
c001c4d2:	83 c4 10             	add    esp,0x10
c001c4d5:	89 c6                	mov    esi,eax
c001c4d7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c4da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4dd:	85 c0                	test   eax,eax
c001c4df:	75 32                	jne    c001c513 <sysCallSpawn(regs*)+0x71>
c001c4e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4e9:	52                   	push   edx
c001c4ea:	50                   	push   eax
c001c4eb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ee:	56                   	push   esi
c001c4ef:	e8 26 1b 00 00       	call   c001e01a <Process::Process(char const*, Process*, char**)>
c001c4f4:	83 c4 10             	add    esp,0x10
c001c4f7:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c4fe:	75 b0                	jne    c001c4b0 <sysCallSpawn(regs*)+0xe>
c001c500:	83 ec 0c             	sub    esp,0xc
c001c503:	56                   	push   esi
c001c504:	e8 f3 1f 00 00       	call   c001e4fc <Process::createUserThread()>
c001c509:	8b 06                	mov    eax,DWORD PTR [esi]
c001c50b:	83 c4 10             	add    esp,0x10
c001c50e:	99                   	cdq    
c001c50f:	59                   	pop    ecx
c001c510:	5b                   	pop    ebx
c001c511:	5e                   	pop    esi
c001c512:	c3                   	ret    
c001c513:	31 c0                	xor    eax,eax
c001c515:	eb d2                	jmp    c001c4e9 <sysCallSpawn(regs*)+0x47>

c001c517 <sysCallGetEnv(regs*)>:
c001c517:	55                   	push   ebp
c001c518:	57                   	push   edi
c001c519:	56                   	push   esi
c001c51a:	53                   	push   ebx
c001c51b:	83 ec 28             	sub    esp,0x28
c001c51e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c522:	68 d5 ca 02 c0       	push   0xc002cad5
c001c527:	e8 73 69 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c52c:	5f                   	pop    edi
c001c52d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c530:	5d                   	pop    ebp
c001c531:	53                   	push   ebx
c001c532:	68 02 ce 02 c0       	push   0xc002ce02
c001c537:	e8 63 69 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c53c:	58                   	pop    eax
c001c53d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c540:	5a                   	pop    edx
c001c541:	57                   	push   edi
c001c542:	68 de ca 02 c0       	push   0xc002cade
c001c547:	e8 53 69 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c54c:	59                   	pop    ecx
c001c54d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c552:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c555:	e8 49 e2 ff ff       	call   c001a7a3 <Krnl::getProcessTotalEnvCount(Process*)>
c001c55a:	5a                   	pop    edx
c001c55b:	89 c5                	mov    ebp,eax
c001c55d:	59                   	pop    ecx
c001c55e:	50                   	push   eax
c001c55f:	68 e8 ca 02 c0       	push   0xc002cae8
c001c564:	e8 36 69 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c569:	83 c4 10             	add    esp,0x10
c001c56c:	39 ef                	cmp    edi,ebp
c001c56e:	7c 15                	jl     c001c585 <sysCallGetEnv(regs*)+0x6e>
c001c570:	85 db                	test   ebx,ebx
c001c572:	75 0c                	jne    c001c580 <sysCallGetEnv(regs*)+0x69>
c001c574:	83 c4 1c             	add    esp,0x1c
c001c577:	31 c0                	xor    eax,eax
c001c579:	5b                   	pop    ebx
c001c57a:	31 d2                	xor    edx,edx
c001c57c:	5e                   	pop    esi
c001c57d:	5f                   	pop    edi
c001c57e:	5d                   	pop    ebp
c001c57f:	c3                   	ret    
c001c580:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c583:	eb ef                	jmp    c001c574 <sysCallGetEnv(regs*)+0x5d>
c001c585:	83 ec 0c             	sub    esp,0xc
c001c588:	68 f4 ca 02 c0       	push   0xc002caf4
c001c58d:	e8 0d 69 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c592:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c596:	83 c4 0c             	add    esp,0xc
c001c599:	57                   	push   edi
c001c59a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c5a0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c5a3:	50                   	push   eax
c001c5a4:	e8 1a e2 ff ff       	call   c001a7c3 <Krnl::getProcessEnvPair(Process*, int)>
c001c5a9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c5ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c5b1:	68 b3 ce 02 c0       	push   0xc002ceb3
c001c5b6:	e8 e4 68 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c5bb:	83 c4 10             	add    esp,0x10
c001c5be:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c5c1:	85 f6                	test   esi,esi
c001c5c3:	75 47                	jne    c001c60c <sysCallGetEnv(regs*)+0xf5>
c001c5c5:	83 ec 0c             	sub    esp,0xc
c001c5c8:	55                   	push   ebp
c001c5c9:	e8 ba 41 fe ff       	call   c0000788 <strlen>
c001c5ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5d1:	89 c3                	mov    ebx,eax
c001c5d3:	e8 b0 41 fe ff       	call   c0000788 <strlen>
c001c5d8:	5a                   	pop    edx
c001c5d9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c5dd:	59                   	pop    ecx
c001c5de:	50                   	push   eax
c001c5df:	68 f7 ca 02 c0       	push   0xc002caf7
c001c5e4:	e8 b6 68 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c5e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5ec:	e8 97 41 fe ff       	call   c0000788 <strlen>
c001c5f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5f4:	89 c3                	mov    ebx,eax
c001c5f6:	e8 8d 41 fe ff       	call   c0000788 <strlen>
c001c5fb:	83 c4 10             	add    esp,0x10
c001c5fe:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c602:	83 c4 1c             	add    esp,0x1c
c001c605:	31 d2                	xor    edx,edx
c001c607:	5b                   	pop    ebx
c001c608:	5e                   	pop    esi
c001c609:	5f                   	pop    edi
c001c60a:	5d                   	pop    ebp
c001c60b:	c3                   	ret    
c001c60c:	83 ec 0c             	sub    esp,0xc
c001c60f:	68 cd ce 02 c0       	push   0xc002cecd
c001c614:	e8 86 68 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c619:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c61c:	58                   	pop    eax
c001c61d:	5a                   	pop    edx
c001c61e:	55                   	push   ebp
c001c61f:	53                   	push   ebx
c001c620:	e8 03 42 fe ff       	call   c0000828 <strcpy>
c001c625:	59                   	pop    ecx
c001c626:	5e                   	pop    esi
c001c627:	68 01 cb 02 c0       	push   0xc002cb01
c001c62c:	53                   	push   ebx
c001c62d:	e8 36 43 fe ff       	call   c0000968 <strcat>
c001c632:	5d                   	pop    ebp
c001c633:	58                   	pop    eax
c001c634:	57                   	push   edi
c001c635:	53                   	push   ebx
c001c636:	e8 2d 43 fe ff       	call   c0000968 <strcat>
c001c63b:	c7 04 24 e7 ce 02 c0 	mov    DWORD PTR [esp],0xc002cee7
c001c642:	e8 58 68 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c647:	83 c4 10             	add    esp,0x10
c001c64a:	e9 25 ff ff ff       	jmp    c001c574 <sysCallGetEnv(regs*)+0x5d>

c001c64f <sysAppSettings(regs*)>:
c001c64f:	57                   	push   edi
c001c650:	56                   	push   esi
c001c651:	56                   	push   esi
c001c652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c656:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c659:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c65f:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c664:	66 3d c0 09          	cmp    ax,0x9c0
c001c668:	75 2e                	jne    c001c698 <sysAppSettings(regs*)+0x49>
c001c66a:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c670:	83 e0 1f             	and    eax,0x1f
c001c673:	3c 01                	cmp    al,0x1
c001c675:	74 2c                	je     c001c6a3 <sysAppSettings(regs*)+0x54>
c001c677:	3c 07                	cmp    al,0x7
c001c679:	0f 84 b3 00 00 00    	je     c001c732 <sysAppSettings(regs*)+0xe3>
c001c67f:	84 c0                	test   al,al
c001c681:	0f 84 d2 00 00 00    	je     c001c759 <sysAppSettings(regs*)+0x10a>
c001c687:	3c 08                	cmp    al,0x8
c001c689:	74 63                	je     c001c6ee <sysAppSettings(regs*)+0x9f>
c001c68b:	59                   	pop    ecx
c001c68c:	0f b6 c0             	movzx  eax,al
c001c68f:	5e                   	pop    esi
c001c690:	05 e8 03 00 00       	add    eax,0x3e8
c001c695:	5f                   	pop    edi
c001c696:	99                   	cdq    
c001c697:	c3                   	ret    
c001c698:	b8 01 00 00 00       	mov    eax,0x1
c001c69d:	59                   	pop    ecx
c001c69e:	31 d2                	xor    edx,edx
c001c6a0:	5e                   	pop    esi
c001c6a1:	5f                   	pop    edi
c001c6a2:	c3                   	ret    
c001c6a3:	50                   	push   eax
c001c6a4:	68 00 01 00 00       	push   0x100
c001c6a9:	6a 00                	push   0x0
c001c6ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6b3:	83 c0 0c             	add    eax,0xc
c001c6b6:	50                   	push   eax
c001c6b7:	e8 b0 40 fe ff       	call   c000076c <memset>
c001c6bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6c1:	b9 ff 00 00 00       	mov    ecx,0xff
c001c6c6:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c6c9:	83 c7 0c             	add    edi,0xc
c001c6cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c6ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6d3:	5a                   	pop    edx
c001c6d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6d7:	59                   	pop    ecx
c001c6d8:	8d 50 0c             	lea    edx,[eax+0xc]
c001c6db:	52                   	push   edx
c001c6dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c6e2:	e8 87 44 ff ff       	call   c0010b6e <VgaText::setTitle(char*)>
c001c6e7:	83 c4 10             	add    esp,0x10
c001c6ea:	31 c0                	xor    eax,eax
c001c6ec:	eb af                	jmp    c001c69d <sysAppSettings(regs*)+0x4e>
c001c6ee:	83 ec 08             	sub    esp,0x8
c001c6f1:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c6f7:	83 e0 0f             	and    eax,0xf
c001c6fa:	50                   	push   eax
c001c6fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c700:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c703:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c709:	e8 52 44 ff ff       	call   c0010b60 <VgaText::setTitleColour(VgaColour)>
c001c70e:	5f                   	pop    edi
c001c70f:	58                   	pop    eax
c001c710:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c716:	c1 e8 04             	shr    eax,0x4
c001c719:	83 e0 0f             	and    eax,0xf
c001c71c:	50                   	push   eax
c001c71d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c722:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c725:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c72b:	e8 22 44 ff ff       	call   c0010b52 <VgaText::setTitleTextColour(VgaColour)>
c001c730:	eb b5                	jmp    c001c6e7 <sysAppSettings(regs*)+0x98>
c001c732:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c737:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c73a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c740:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c746:	c0 e8 06             	shr    al,0x6
c001c749:	83 e0 01             	and    eax,0x1
c001c74c:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c752:	31 c0                	xor    eax,eax
c001c754:	e9 44 ff ff ff       	jmp    c001c69d <sysAppSettings(regs*)+0x4e>
c001c759:	b8 02 00 00 00       	mov    eax,0x2
c001c75e:	e9 3a ff ff ff       	jmp    c001c69d <sysAppSettings(regs*)+0x4e>

c001c763 <sysSetFatAttrib(regs*)>:
c001c763:	57                   	push   edi
c001c764:	56                   	push   esi
c001c765:	53                   	push   ebx
c001c766:	83 ec 1c             	sub    esp,0x1c
c001c769:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c76d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c770:	68 14 01 00 00       	push   0x114
c001c775:	e8 7a 31 ff ff       	call   c000f8f4 <malloc>
c001c77a:	83 c4 0c             	add    esp,0xc
c001c77d:	89 c3                	mov    ebx,eax
c001c77f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c784:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c787:	57                   	push   edi
c001c788:	53                   	push   ebx
c001c789:	e8 70 6c ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001c78e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c791:	83 c4 0c             	add    esp,0xc
c001c794:	0f b6 d4             	movzx  edx,ah
c001c797:	0f b6 c0             	movzx  eax,al
c001c79a:	52                   	push   edx
c001c79b:	50                   	push   eax
c001c79c:	53                   	push   ebx
c001c79d:	e8 d2 6e ff ff       	call   c0013674 <File::chfatattr(unsigned char, unsigned char)>
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	85 db                	test   ebx,ebx
c001c7a7:	74 14                	je     c001c7bd <sysSetFatAttrib(regs*)+0x5a>
c001c7a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c7af:	83 ec 0c             	sub    esp,0xc
c001c7b2:	53                   	push   ebx
c001c7b3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c7b6:	83 c4 10             	add    esp,0x10
c001c7b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7bd:	85 c0                	test   eax,eax
c001c7bf:	0f 95 c0             	setne  al
c001c7c2:	31 d2                	xor    edx,edx
c001c7c4:	0f b6 c0             	movzx  eax,al
c001c7c7:	f7 d8                	neg    eax
c001c7c9:	83 d2 00             	adc    edx,0x0
c001c7cc:	83 c4 10             	add    esp,0x10
c001c7cf:	f7 da                	neg    edx
c001c7d1:	5b                   	pop    ebx
c001c7d2:	5e                   	pop    esi
c001c7d3:	5f                   	pop    edi
c001c7d4:	c3                   	ret    

c001c7d5 <sysPipe(regs*)>:
c001c7d5:	57                   	push   edi
c001c7d6:	56                   	push   esi
c001c7d7:	53                   	push   ebx
c001c7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7dc:	83 ec 0c             	sub    esp,0xc
c001c7df:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c7e2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c7e5:	6a 20                	push   0x20
c001c7e7:	e8 08 31 ff ff       	call   c000f8f4 <malloc>
c001c7ec:	89 c3                	mov    ebx,eax
c001c7ee:	58                   	pop    eax
c001c7ef:	5a                   	pop    edx
c001c7f0:	68 00 50 00 00       	push   0x5000
c001c7f5:	53                   	push   ebx
c001c7f6:	e8 1b 3d ff ff       	call   c0010516 <Pipe::Pipe(int)>
c001c7fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7fe:	e8 4b 4e ff ff       	call   c001164e <UnixFile::getFileDescriptor()>
c001c803:	89 07                	mov    DWORD PTR [edi],eax
c001c805:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c808:	e8 41 4e ff ff       	call   c001164e <UnixFile::getFileDescriptor()>
c001c80d:	83 c4 10             	add    esp,0x10
c001c810:	89 06                	mov    DWORD PTR [esi],eax
c001c812:	31 d2                	xor    edx,edx
c001c814:	5b                   	pop    ebx
c001c815:	31 c0                	xor    eax,eax
c001c817:	5e                   	pop    esi
c001c818:	5f                   	pop    edi
c001c819:	c3                   	ret    

c001c81a <sysGetUnixTime(regs*)>:
c001c81a:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001c81f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c825:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c829:	e9 c2 75 ff ff       	jmp    c0013df0 <Clock::timeInSecondsLocal()>

c001c82e <string_ends_with(char const*, char const*)>:
c001c82e:	57                   	push   edi
c001c82f:	56                   	push   esi
c001c830:	53                   	push   ebx
c001c831:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c835:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c839:	83 ec 0c             	sub    esp,0xc
c001c83c:	53                   	push   ebx
c001c83d:	e8 46 3f fe ff       	call   c0000788 <strlen>
c001c842:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c845:	89 c6                	mov    esi,eax
c001c847:	e8 3c 3f fe ff       	call   c0000788 <strlen>
c001c84c:	83 c4 10             	add    esp,0x10
c001c84f:	39 c6                	cmp    esi,eax
c001c851:	7d 06                	jge    c001c859 <string_ends_with(char const*, char const*)+0x2b>
c001c853:	5b                   	pop    ebx
c001c854:	31 c0                	xor    eax,eax
c001c856:	5e                   	pop    esi
c001c857:	5f                   	pop    edi
c001c858:	c3                   	ret    
c001c859:	83 ec 08             	sub    esp,0x8
c001c85c:	29 c6                	sub    esi,eax
c001c85e:	57                   	push   edi
c001c85f:	01 f3                	add    ebx,esi
c001c861:	53                   	push   ebx
c001c862:	e8 4d 40 fe ff       	call   c00008b4 <strcmp>
c001c867:	83 c4 10             	add    esp,0x10
c001c86a:	85 c0                	test   eax,eax
c001c86c:	5b                   	pop    ebx
c001c86d:	0f 94 c0             	sete   al
c001c870:	5e                   	pop    esi
c001c871:	0f b6 c0             	movzx  eax,al
c001c874:	5f                   	pop    edi
c001c875:	c3                   	ret    

c001c876 <sysCallOpen(regs*)>:
c001c876:	56                   	push   esi
c001c877:	53                   	push   ebx
c001c878:	81 ec 04 01 00 00    	sub    esp,0x104
c001c87e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c885:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c888:	85 c9                	test   ecx,ecx
c001c88a:	0f 84 b3 00 00 00    	je     c001c943 <sysCallOpen(regs*)+0xcd>
c001c890:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c893:	85 c0                	test   eax,eax
c001c895:	0f 84 a8 00 00 00    	je     c001c943 <sysCallOpen(regs*)+0xcd>
c001c89b:	52                   	push   edx
c001c89c:	68 03 cb 02 c0       	push   0xc002cb03
c001c8a1:	50                   	push   eax
c001c8a2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c8a6:	56                   	push   esi
c001c8a7:	e8 a8 69 ff ff       	call   c0013254 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c8ac:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8af:	e8 d4 3e fe ff       	call   c0000788 <strlen>
c001c8b4:	83 c4 10             	add    esp,0x10
c001c8b7:	48                   	dec    eax
c001c8b8:	74 1d                	je     c001c8d7 <sysCallOpen(regs*)+0x61>
c001c8ba:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c8bd:	eb 0f                	jmp    c001c8ce <sysCallOpen(regs*)+0x58>
c001c8bf:	80 fa 3a             	cmp    dl,0x3a
c001c8c2:	74 0f                	je     c001c8d3 <sysCallOpen(regs*)+0x5d>
c001c8c4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c8c8:	48                   	dec    eax
c001c8c9:	74 0c                	je     c001c8d7 <sysCallOpen(regs*)+0x61>
c001c8cb:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c8ce:	80 fa 2e             	cmp    dl,0x2e
c001c8d1:	75 ec                	jne    c001c8bf <sysCallOpen(regs*)+0x49>
c001c8d3:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c8d7:	83 ec 08             	sub    esp,0x8
c001c8da:	68 07 cb 02 c0       	push   0xc002cb07
c001c8df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c8e2:	e8 47 ff ff ff       	call   c001c82e <string_ends_with(char const*, char const*)>
c001c8e7:	83 c4 10             	add    esp,0x10
c001c8ea:	85 c0                	test   eax,eax
c001c8ec:	75 17                	jne    c001c905 <sysCallOpen(regs*)+0x8f>
c001c8ee:	83 ec 08             	sub    esp,0x8
c001c8f1:	68 28 cb 02 c0       	push   0xc002cb28
c001c8f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c8f9:	e8 30 ff ff ff       	call   c001c82e <string_ends_with(char const*, char const*)>
c001c8fe:	83 c4 10             	add    esp,0x10
c001c901:	85 c0                	test   eax,eax
c001c903:	74 51                	je     c001c956 <sysCallOpen(regs*)+0xe0>
c001c905:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c908:	83 ec 08             	sub    esp,0x8
c001c90b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c911:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c918:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c91b:	ff 30                	push   DWORD PTR [eax]
c001c91d:	68 0c cb 02 c0       	push   0xc002cb0c
c001c922:	e8 78 65 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c927:	c7 04 24 1b cb 02 c0 	mov    DWORD PTR [esp],0xc002cb1b
c001c92e:	e8 6c 65 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001c933:	83 c4 10             	add    esp,0x10
c001c936:	81 c4 04 01 00 00    	add    esp,0x104
c001c93c:	31 c0                	xor    eax,eax
c001c93e:	31 d2                	xor    edx,edx
c001c940:	5b                   	pop    ebx
c001c941:	5e                   	pop    esi
c001c942:	c3                   	ret    
c001c943:	81 c4 04 01 00 00    	add    esp,0x104
c001c949:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c94e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c953:	5b                   	pop    ebx
c001c954:	5e                   	pop    esi
c001c955:	c3                   	ret    
c001c956:	83 ec 08             	sub    esp,0x8
c001c959:	68 08 cb 02 c0       	push   0xc002cb08
c001c95e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c961:	e8 4e 3f fe ff       	call   c00008b4 <strcmp>
c001c966:	83 c4 10             	add    esp,0x10
c001c969:	85 c0                	test   eax,eax
c001c96b:	74 98                	je     c001c905 <sysCallOpen(regs*)+0x8f>
c001c96d:	83 ec 08             	sub    esp,0x8
c001c970:	68 07 cb 02 c0       	push   0xc002cb07
c001c975:	56                   	push   esi
c001c976:	e8 b3 fe ff ff       	call   c001c82e <string_ends_with(char const*, char const*)>
c001c97b:	83 c4 10             	add    esp,0x10
c001c97e:	85 c0                	test   eax,eax
c001c980:	75 83                	jne    c001c905 <sysCallOpen(regs*)+0x8f>
c001c982:	83 ec 08             	sub    esp,0x8
c001c985:	68 2d cb 02 c0       	push   0xc002cb2d
c001c98a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c98d:	e8 9c fe ff ff       	call   c001c82e <string_ends_with(char const*, char const*)>
c001c992:	83 c4 10             	add    esp,0x10
c001c995:	85 c0                	test   eax,eax
c001c997:	0f 85 d9 00 00 00    	jne    c001ca76 <sysCallOpen(regs*)+0x200>
c001c99d:	83 ec 08             	sub    esp,0x8
c001c9a0:	68 32 cb 02 c0       	push   0xc002cb32
c001c9a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9a8:	e8 81 fe ff ff       	call   c001c82e <string_ends_with(char const*, char const*)>
c001c9ad:	83 c4 10             	add    esp,0x10
c001c9b0:	85 c0                	test   eax,eax
c001c9b2:	0f 85 be 00 00 00    	jne    c001ca76 <sysCallOpen(regs*)+0x200>
c001c9b8:	83 ec 08             	sub    esp,0x8
c001c9bb:	68 2e cb 02 c0       	push   0xc002cb2e
c001c9c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9c3:	e8 ec 3e fe ff       	call   c00008b4 <strcmp>
c001c9c8:	83 c4 10             	add    esp,0x10
c001c9cb:	85 c0                	test   eax,eax
c001c9cd:	0f 84 a3 00 00 00    	je     c001ca76 <sysCallOpen(regs*)+0x200>
c001c9d3:	83 ec 08             	sub    esp,0x8
c001c9d6:	68 2d cb 02 c0       	push   0xc002cb2d
c001c9db:	56                   	push   esi
c001c9dc:	e8 4d fe ff ff       	call   c001c82e <string_ends_with(char const*, char const*)>
c001c9e1:	83 c4 10             	add    esp,0x10
c001c9e4:	85 c0                	test   eax,eax
c001c9e6:	0f 85 8a 00 00 00    	jne    c001ca76 <sysCallOpen(regs*)+0x200>
c001c9ec:	83 ec 0c             	sub    esp,0xc
c001c9ef:	68 14 01 00 00       	push   0x114
c001c9f4:	e8 fb 2e ff ff       	call   c000f8f4 <malloc>
c001c9f9:	83 c4 0c             	add    esp,0xc
c001c9fc:	89 c6                	mov    esi,eax
c001c9fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca03:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ca06:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca09:	56                   	push   esi
c001ca0a:	e8 ef 69 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001ca0f:	83 c4 10             	add    esp,0x10
c001ca12:	85 f6                	test   esi,esi
c001ca14:	0f 84 29 ff ff ff    	je     c001c943 <sysCallOpen(regs*)+0xcd>
c001ca1a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ca1d:	0f b6 c2             	movzx  eax,dl
c001ca20:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ca23:	89 d0                	mov    eax,edx
c001ca25:	83 e0 01             	and    eax,0x1
c001ca28:	f6 c2 02             	test   dl,0x2
c001ca2b:	74 03                	je     c001ca30 <sysCallOpen(regs*)+0x1ba>
c001ca2d:	83 c8 02             	or     eax,0x2
c001ca30:	f6 c2 04             	test   dl,0x4
c001ca33:	74 03                	je     c001ca38 <sysCallOpen(regs*)+0x1c2>
c001ca35:	83 c8 04             	or     eax,0x4
c001ca38:	f6 c2 08             	test   dl,0x8
c001ca3b:	74 03                	je     c001ca40 <sysCallOpen(regs*)+0x1ca>
c001ca3d:	83 c8 0a             	or     eax,0xa
c001ca40:	83 e2 10             	and    edx,0x10
c001ca43:	74 03                	je     c001ca48 <sysCallOpen(regs*)+0x1d2>
c001ca45:	83 c8 12             	or     eax,0x12
c001ca48:	83 ec 08             	sub    esp,0x8
c001ca4b:	50                   	push   eax
c001ca4c:	56                   	push   esi
c001ca4d:	e8 10 6a ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001ca52:	83 c4 10             	add    esp,0x10
c001ca55:	85 c0                	test   eax,eax
c001ca57:	0f 85 e6 fe ff ff    	jne    c001c943 <sysCallOpen(regs*)+0xcd>
c001ca5d:	83 ec 0c             	sub    esp,0xc
c001ca60:	56                   	push   esi
c001ca61:	e8 e8 4b ff ff       	call   c001164e <UnixFile::getFileDescriptor()>
c001ca66:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ca69:	89 02                	mov    DWORD PTR [edx],eax
c001ca6b:	c1 f8 1f             	sar    eax,0x1f
c001ca6e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ca71:	e9 bd fe ff ff       	jmp    c001c933 <sysCallOpen(regs*)+0xbd>
c001ca76:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca79:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001ca7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca86:	e9 ab fe ff ff       	jmp    c001c936 <sysCallOpen(regs*)+0xc0>

c001ca8b <Sys::loadSyscalls()>:
c001ca8b:	c7 05 20 1c 03 c0 7b bb 01 c0 	mov    DWORD PTR ds:0xc0031c20,0xc001bb7b
c001ca95:	c7 05 24 1c 03 c0 e0 b6 01 c0 	mov    DWORD PTR ds:0xc0031c24,0xc001b6e0
c001ca9f:	c7 05 28 1c 03 c0 ce b8 01 c0 	mov    DWORD PTR ds:0xc0031c28,0xc001b8ce
c001caa9:	c7 05 2c 1c 03 c0 b1 ba 01 c0 	mov    DWORD PTR ds:0xc0031c2c,0xc001bab1
c001cab3:	c7 05 30 1c 03 c0 66 b8 01 c0 	mov    DWORD PTR ds:0xc0031c30,0xc001b866
c001cabd:	c7 05 34 1c 03 c0 17 b7 01 c0 	mov    DWORD PTR ds:0xc0031c34,0xc001b717
c001cac7:	c7 05 38 1c 03 c0 f8 b6 01 c0 	mov    DWORD PTR ds:0xc0031c38,0xc001b6f8
c001cad1:	c7 05 3c 1c 03 c0 23 b9 01 c0 	mov    DWORD PTR ds:0xc0031c3c,0xc001b923
c001cadb:	c7 05 44 1c 03 c0 b6 c0 01 c0 	mov    DWORD PTR ds:0xc0031c44,0xc001c0b6
c001cae5:	c7 05 40 1c 03 c0 76 c8 01 c0 	mov    DWORD PTR ds:0xc0031c40,0xc001c876
c001caef:	c7 05 48 1c 03 c0 3e c1 01 c0 	mov    DWORD PTR ds:0xc0031c48,0xc001c13e
c001caf9:	c7 05 4c 1c 03 c0 a5 bd 01 c0 	mov    DWORD PTR ds:0xc0031c4c,0xc001bda5
c001cb03:	c7 05 50 1c 03 c0 c1 bb 01 c0 	mov    DWORD PTR ds:0xc0031c50,0xc001bbc1
c001cb0d:	c7 05 54 1c 03 c0 c6 bb 01 c0 	mov    DWORD PTR ds:0xc0031c54,0xc001bbc6
c001cb17:	c7 05 58 1c 03 c0 19 c2 01 c0 	mov    DWORD PTR ds:0xc0031c58,0xc001c219
c001cb21:	c7 05 5c 1c 03 c0 b3 c1 01 c0 	mov    DWORD PTR ds:0xc0031c5c,0xc001c1b3
c001cb2b:	c7 05 60 1c 03 c0 8d be 01 c0 	mov    DWORD PTR ds:0xc0031c60,0xc001be8d
c001cb35:	c7 05 64 1c 03 c0 f6 be 01 c0 	mov    DWORD PTR ds:0xc0031c64,0xc001bef6
c001cb3f:	c7 05 68 1c 03 c0 73 bf 01 c0 	mov    DWORD PTR ds:0xc0031c68,0xc001bf73
c001cb49:	c7 05 6c 1c 03 c0 cb bb 01 c0 	mov    DWORD PTR ds:0xc0031c6c,0xc001bbcb
c001cb53:	c7 05 70 1c 03 c0 89 c2 01 c0 	mov    DWORD PTR ds:0xc0031c70,0xc001c289
c001cb5d:	c7 05 74 1c 03 c0 a3 c2 01 c0 	mov    DWORD PTR ds:0xc0031c74,0xc001c2a3
c001cb67:	c7 05 78 1c 03 c0 a3 c2 01 c0 	mov    DWORD PTR ds:0xc0031c78,0xc001c2a3
c001cb71:	c7 05 7c 1c 03 c0 e4 c2 01 c0 	mov    DWORD PTR ds:0xc0031c7c,0xc001c2e4
c001cb7b:	c7 05 80 1c 03 c0 48 c3 01 c0 	mov    DWORD PTR ds:0xc0031c80,0xc001c348
c001cb85:	c7 05 84 1c 03 c0 77 bd 01 c0 	mov    DWORD PTR ds:0xc0031c84,0xc001bd77
c001cb8f:	c7 05 88 1c 03 c0 ac c3 01 c0 	mov    DWORD PTR ds:0xc0031c88,0xc001c3ac
c001cb99:	c7 05 8c 1c 03 c0 34 bd 01 c0 	mov    DWORD PTR ds:0xc0031c8c,0xc001bd34
c001cba3:	c7 05 90 1c 03 c0 f8 c3 01 c0 	mov    DWORD PTR ds:0xc0031c90,0xc001c3f8
c001cbad:	c7 05 94 1c 03 c0 33 be 01 c0 	mov    DWORD PTR ds:0xc0031c94,0xc001be33
c001cbb7:	c7 05 98 1c 03 c0 7b c4 01 c0 	mov    DWORD PTR ds:0xc0031c98,0xc001c47b
c001cbc1:	c7 05 9c 1c 03 c0 f6 bf 01 c0 	mov    DWORD PTR ds:0xc0031c9c,0xc001bff6
c001cbcb:	c7 05 a0 1c 03 c0 a2 c4 01 c0 	mov    DWORD PTR ds:0xc0031ca0,0xc001c4a2
c001cbd5:	c7 05 a4 1c 03 c0 17 c5 01 c0 	mov    DWORD PTR ds:0xc0031ca4,0xc001c517
c001cbdf:	c7 05 a8 1c 03 c0 4f c6 01 c0 	mov    DWORD PTR ds:0xc0031ca8,0xc001c64f
c001cbe9:	c7 05 ac 1c 03 c0 d5 bb 01 c0 	mov    DWORD PTR ds:0xc0031cac,0xc001bbd5
c001cbf3:	c7 05 b0 1c 03 c0 3f bc 01 c0 	mov    DWORD PTR ds:0xc0031cb0,0xc001bc3f
c001cbfd:	c7 05 b4 1c 03 c0 85 bc 01 c0 	mov    DWORD PTR ds:0xc0031cb4,0xc001bc85
c001cc07:	c7 05 b8 1c 03 c0 63 c7 01 c0 	mov    DWORD PTR ds:0xc0031cb8,0xc001c763
c001cc11:	c7 05 bc 1c 03 c0 be c2 01 c0 	mov    DWORD PTR ds:0xc0031cbc,0xc001c2be
c001cc1b:	c7 05 c0 1c 03 c0 d6 bc 01 c0 	mov    DWORD PTR ds:0xc0031cc0,0xc001bcd6
c001cc25:	c7 05 c4 1c 03 c0 d5 c7 01 c0 	mov    DWORD PTR ds:0xc0031cc4,0xc001c7d5
c001cc2f:	c7 05 c8 1c 03 c0 1a c8 01 c0 	mov    DWORD PTR ds:0xc0031cc8,0xc001c81a
c001cc39:	c7 05 cc 1c 03 c0 be b7 01 c0 	mov    DWORD PTR ds:0xc0031ccc,0xc001b7be
c001cc43:	c7 05 d0 1c 03 c0 3f b9 01 c0 	mov    DWORD PTR ds:0xc0031cd0,0xc001b93f
c001cc4d:	c7 05 d4 1c 03 c0 67 ba 01 c0 	mov    DWORD PTR ds:0xc0031cd4,0xc001ba67
c001cc57:	c7 05 d8 1c 03 c0 aa b6 01 c0 	mov    DWORD PTR ds:0xc0031cd8,0xc001b6aa
c001cc61:	c7 05 dc 1c 03 c0 19 bb 01 c0 	mov    DWORD PTR ds:0xc0031cdc,0xc001bb19
c001cc6b:	c7 05 e0 1c 03 c0 23 b7 01 c0 	mov    DWORD PTR ds:0xc0031ce0,0xc001b723
c001cc75:	c7 05 e4 1c 03 c0 3a b7 01 c0 	mov    DWORD PTR ds:0xc0031ce4,0xc001b73a
c001cc7f:	c3                   	ret    

c001cc80 <Sys::systemCall(regs*, void*)>:
c001cc80:	53                   	push   ebx
c001cc81:	83 ec 08             	sub    esp,0x8
c001cc84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc88:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cc8b:	83 f8 7f             	cmp    eax,0x7f
c001cc8e:	77 16                	ja     c001cca6 <Sys::systemCall(regs*, void*)+0x26>
c001cc90:	8b 14 85 20 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce3e0]
c001cc97:	85 d2                	test   edx,edx
c001cc99:	74 0b                	je     c001cca6 <Sys::systemCall(regs*, void*)+0x26>
c001cc9b:	83 ec 0c             	sub    esp,0xc
c001cc9e:	53                   	push   ebx
c001cc9f:	ff d2                	call   edx
c001cca1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cca4:	eb 0d                	jmp    c001ccb3 <Sys::systemCall(regs*, void*)+0x33>
c001cca6:	52                   	push   edx
c001cca7:	52                   	push   edx
c001cca8:	50                   	push   eax
c001cca9:	68 37 cb 02 c0       	push   0xc002cb37
c001ccae:	e8 ec 61 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001ccb3:	83 c4 10             	add    esp,0x10
c001ccb6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ccbb:	31 d2                	xor    edx,edx
c001ccbd:	83 c4 08             	add    esp,0x8
c001ccc0:	5b                   	pop    ebx
c001ccc1:	c3                   	ret    

c001ccc2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001ccc2:	55                   	push   ebp
c001ccc3:	57                   	push   edi
c001ccc4:	56                   	push   esi
c001ccc5:	53                   	push   ebx
c001ccc6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cccc:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001ccd3:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001ccda:	85 c0                	test   eax,eax
c001ccdc:	0f 95 c1             	setne  cl
c001ccdf:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cce7:	0f 94 c2             	sete   dl
c001ccea:	84 d1                	test   cl,dl
c001ccec:	74 23                	je     c001cd11 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001ccee:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001ccf4:	74 1b                	je     c001cd11 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001ccf6:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ccfc:	89 da                	mov    edx,ebx
c001ccfe:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cd04:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cd0a:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cd11:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cd18:	05 ff 0f 00 00       	add    eax,0xfff
c001cd1d:	83 ec 0c             	sub    esp,0xc
c001cd20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd24:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001cd2a:	c1 e8 0c             	shr    eax,0xc
c001cd2d:	89 fe                	mov    esi,edi
c001cd2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd33:	c1 ee 0c             	shr    esi,0xc
c001cd36:	6a 01                	push   0x1
c001cd38:	e8 5c 4d ff ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c001cd3d:	89 c5                	mov    ebp,eax
c001cd3f:	58                   	pop    eax
c001cd40:	5a                   	pop    edx
c001cd41:	56                   	push   esi
c001cd42:	68 bb cb 02 c0       	push   0xc002cbbb
c001cd47:	e8 53 61 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001cd4c:	59                   	pop    ecx
c001cd4d:	58                   	pop    eax
c001cd4e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd52:	68 cd cb 02 c0       	push   0xc002cbcd
c001cd57:	e8 43 61 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001cd65:	0f 86 31 01 00 00    	jbe    c001ce9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cd6b:	c1 e6 0c             	shl    esi,0xc
c001cd6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd71:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cd74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd78:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001cd7f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cd82:	01 df                	add    edi,ebx
c001cd84:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001cd87:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cd8b:	0f 84 08 01 00 00    	je     c001ce99 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001cd91:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001cd97:	76 05                	jbe    c001cd9e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001cd99:	bf 00 10 00 00       	mov    edi,0x1000
c001cd9e:	83 ec 0c             	sub    esp,0xc
c001cda1:	31 d2                	xor    edx,edx
c001cda3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cdaa:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cdac:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cdb0:	50                   	push   eax
c001cdb1:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cdb5:	56                   	push   esi
c001cdb6:	52                   	push   edx
c001cdb7:	57                   	push   edi
c001cdb8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cdbf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdc2:	83 c4 20             	add    esp,0x20
c001cdc5:	85 c0                	test   eax,eax
c001cdc7:	74 0a                	je     c001cdd3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001cdc9:	53                   	push   ebx
c001cdca:	53                   	push   ebx
c001cdcb:	50                   	push   eax
c001cdcc:	68 df cb 02 c0       	push   0xc002cbdf
c001cdd1:	eb 0f                	jmp    c001cde2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001cdd3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001cdd7:	74 20                	je     c001cdf9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001cdd9:	51                   	push   ecx
c001cdda:	51                   	push   ecx
c001cddb:	6a 00                	push   0x0
c001cddd:	68 0a cc 02 c0       	push   0xc002cc0a
c001cde2:	e8 b8 60 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001cde7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdea:	e8 6a 51 ff ff       	call   c0011f59 <Virt::freeKernelVirtualPages(unsigned long)>
c001cdef:	83 c4 10             	add    esp,0x10
c001cdf2:	31 c0                	xor    eax,eax
c001cdf4:	e9 68 01 00 00       	jmp    c001cf61 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cdf9:	fa                   	cli    
c001cdfa:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001ce00:	e8 5b 31 ff ff       	call   c000ff60 <Phys::allocatePage()>
c001ce05:	6a 07                	push   0x7
c001ce07:	89 c7                	mov    edi,eax
c001ce09:	55                   	push   ebp
c001ce0a:	50                   	push   eax
c001ce0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce13:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce19:	e8 b2 54 ff ff       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce1e:	83 c4 0c             	add    esp,0xc
c001ce21:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ce28:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce2e:	6a 00                	push   0x0
c001ce30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce38:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce3e:	e8 e7 52 ff ff       	call   c001212a <VAS::mapOtherVASIn(bool, VAS*)>
c001ce43:	58                   	pop    eax
c001ce44:	5a                   	pop    edx
c001ce45:	68 07 0c 00 00       	push   0xc07
c001ce4a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ce4e:	57                   	push   edi
c001ce4f:	89 ef                	mov    edi,ebp
c001ce51:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ce58:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce5e:	6a 00                	push   0x0
c001ce60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce68:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce6e:	e8 19 58 ff ff       	call   c001268c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ce73:	b9 00 10 00 00       	mov    ecx,0x1000
c001ce78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce7a:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ce7f:	83 c4 20             	add    esp,0x20
c001ce82:	48                   	dec    eax
c001ce83:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ce88:	85 c0                	test   eax,eax
c001ce8a:	75 01                	jne    c001ce8d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001ce8c:	fb                   	sti    
c001ce8d:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001ce94:	e9 df fe ff ff       	jmp    c001cd78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001ce99:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001ce9c:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cea4:	0f 86 a9 00 00 00    	jbe    c001cf53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ceaa:	fa                   	cli    
c001ceab:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001ceb1:	51                   	push   ecx
c001ceb2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ceb9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cebf:	6a 00                	push   0x0
c001cec1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cec6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cec9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cecf:	e8 56 52 ff ff       	call   c001212a <VAS::mapOtherVASIn(bool, VAS*)>
c001ced4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ced8:	c1 e6 0c             	shl    esi,0xc
c001cedb:	01 de                	add    esi,ebx
c001cedd:	83 c4 10             	add    esp,0x10
c001cee0:	39 de                	cmp    esi,ebx
c001cee2:	74 61                	je     c001cf45 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cee4:	e8 77 30 ff ff       	call   c000ff60 <Phys::allocatePage()>
c001cee9:	6a 07                	push   0x7
c001ceeb:	89 c7                	mov    edi,eax
c001ceed:	55                   	push   ebp
c001ceee:	50                   	push   eax
c001ceef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cef4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cef7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cefd:	e8 ce 53 ff ff       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cf02:	58                   	pop    eax
c001cf03:	5a                   	pop    edx
c001cf04:	68 07 0c 00 00       	push   0xc07
c001cf09:	53                   	push   ebx
c001cf0a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cf10:	57                   	push   edi
c001cf11:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cf18:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf1e:	6a 00                	push   0x0
c001cf20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf25:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf28:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf2e:	e8 59 57 ff ff       	call   c001268c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cf33:	83 c4 1c             	add    esp,0x1c
c001cf36:	68 00 10 00 00       	push   0x1000
c001cf3b:	6a 00                	push   0x0
c001cf3d:	55                   	push   ebp
c001cf3e:	e8 29 38 fe ff       	call   c000076c <memset>
c001cf43:	eb 98                	jmp    c001cedd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cf45:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001cf4a:	48                   	dec    eax
c001cf4b:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001cf50:	75 01                	jne    c001cf53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cf52:	fb                   	sti    
c001cf53:	83 ec 0c             	sub    esp,0xc
c001cf56:	55                   	push   ebp
c001cf57:	e8 fd 4f ff ff       	call   c0011f59 <Virt::freeKernelVirtualPages(unsigned long)>
c001cf5c:	83 c4 10             	add    esp,0x10
c001cf5f:	b0 01                	mov    al,0x1
c001cf61:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cf67:	5b                   	pop    ebx
c001cf68:	5e                   	pop    esi
c001cf69:	5f                   	pop    edi
c001cf6a:	5d                   	pop    ebp
c001cf6b:	c3                   	ret    

c001cf6c <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cf6c:	55                   	push   ebp
c001cf6d:	57                   	push   edi
c001cf6e:	56                   	push   esi
c001cf6f:	53                   	push   ebx
c001cf70:	83 ec 48             	sub    esp,0x48
c001cf73:	68 14 01 00 00       	push   0x114
c001cf78:	e8 77 29 ff ff       	call   c000f8f4 <malloc>
c001cf7d:	83 c4 0c             	add    esp,0xc
c001cf80:	89 c6                	mov    esi,eax
c001cf82:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cf86:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cf8a:	50                   	push   eax
c001cf8b:	e8 6e 64 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001cf90:	58                   	pop    eax
c001cf91:	5a                   	pop    edx
c001cf92:	6a 01                	push   0x1
c001cf94:	56                   	push   esi
c001cf95:	e8 c8 64 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001cf9a:	83 c4 10             	add    esp,0x10
c001cf9d:	85 c0                	test   eax,eax
c001cf9f:	0f 85 47 01 00 00    	jne    c001d0ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfa5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cfad:	83 ec 0c             	sub    esp,0xc
c001cfb0:	6a 34                	push   0x34
c001cfb2:	e8 3d 29 ff ff       	call   c000f8f4 <malloc>
c001cfb7:	89 c3                	mov    ebx,eax
c001cfb9:	58                   	pop    eax
c001cfba:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfbc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cfc0:	57                   	push   edi
c001cfc1:	53                   	push   ebx
c001cfc2:	6a 00                	push   0x0
c001cfc4:	6a 34                	push   0x34
c001cfc6:	56                   	push   esi
c001cfc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfca:	83 c4 20             	add    esp,0x20
c001cfcd:	85 c0                	test   eax,eax
c001cfcf:	0f 85 17 01 00 00    	jne    c001d0ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfd5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cfdb:	0f 85 0b 01 00 00    	jne    c001d0ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfe1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cfe4:	85 c0                	test   eax,eax
c001cfe6:	0f 84 00 01 00 00    	je     c001d0ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cfec:	31 d2                	xor    edx,edx
c001cfee:	55                   	push   ebp
c001cfef:	52                   	push   edx
c001cff0:	50                   	push   eax
c001cff1:	56                   	push   esi
c001cff2:	e8 29 65 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001cff7:	83 c4 10             	add    esp,0x10
c001cffa:	85 c0                	test   eax,eax
c001cffc:	0f 85 ea 00 00 00    	jne    c001d0ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d002:	83 ec 0c             	sub    esp,0xc
c001d005:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d008:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d00c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d010:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d014:	0f af c2             	imul   eax,edx
c001d017:	50                   	push   eax
c001d018:	e8 d7 28 ff ff       	call   c000f8f4 <malloc>
c001d01d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d01f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d023:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d026:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d02a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d02e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d032:	0f af c2             	imul   eax,edx
c001d035:	99                   	cdq    
c001d036:	52                   	push   edx
c001d037:	50                   	push   eax
c001d038:	56                   	push   esi
c001d039:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d03c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001d03f:	83 c4 20             	add    esp,0x20
c001d042:	85 c0                	test   eax,eax
c001d044:	0f 84 a2 00 00 00    	je     c001d0ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d04a:	31 d2                	xor    edx,edx
c001d04c:	51                   	push   ecx
c001d04d:	52                   	push   edx
c001d04e:	50                   	push   eax
c001d04f:	56                   	push   esi
c001d050:	e8 cb 64 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d055:	83 c4 10             	add    esp,0x10
c001d058:	85 c0                	test   eax,eax
c001d05a:	0f 85 8c 00 00 00    	jne    c001d0ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d060:	83 ec 0c             	sub    esp,0xc
c001d063:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d067:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d06b:	31 ed                	xor    ebp,ebp
c001d06d:	0f af c2             	imul   eax,edx
c001d070:	50                   	push   eax
c001d071:	e8 7e 28 ff ff       	call   c000f8f4 <malloc>
c001d076:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d078:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d07c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d07f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d083:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d087:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d08b:	0f af c2             	imul   eax,edx
c001d08e:	99                   	cdq    
c001d08f:	52                   	push   edx
c001d090:	50                   	push   eax
c001d091:	56                   	push   esi
c001d092:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d095:	83 c4 20             	add    esp,0x20
c001d098:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d0a0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d0a4:	0f 86 80 00 00 00    	jbe    c001d12a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d0aa:	0f b7 fd             	movzx  edi,bp
c001d0ad:	c1 e7 05             	shl    edi,0x5
c001d0b0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d0b4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d0b7:	75 6b                	jne    c001d124 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d0b9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d0bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d0c0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d0c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0c7:	52                   	push   edx
c001d0c8:	31 d2                	xor    edx,edx
c001d0ca:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d0cd:	52                   	push   edx
c001d0ce:	50                   	push   eax
c001d0cf:	56                   	push   esi
c001d0d0:	e8 4b 64 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d0d5:	83 c4 10             	add    esp,0x10
c001d0d8:	85 c0                	test   eax,eax
c001d0da:	74 17                	je     c001d0f3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d0dc:	83 ec 0c             	sub    esp,0xc
c001d0df:	68 36 cc 02 c0       	push   0xc002cc36
c001d0e4:	e8 b6 5d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001d0e9:	83 c4 10             	add    esp,0x10
c001d0ec:	31 c0                	xor    eax,eax
c001d0ee:	e9 87 00 00 00       	jmp    c001d17a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d0f3:	83 ec 0c             	sub    esp,0xc
c001d0f6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d0f9:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d0fc:	50                   	push   eax
c001d0fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d101:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d105:	56                   	push   esi
c001d106:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d10a:	e8 b3 fb ff ff       	call   c001ccc2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d10f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d113:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d117:	83 c4 20             	add    esp,0x20
c001d11a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d11e:	73 04                	jae    c001d124 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d120:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d124:	45                   	inc    ebp
c001d125:	e9 76 ff ff ff       	jmp    c001d0a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d12a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d12e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d132:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d136:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d145:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d14a:	05 00 10 00 00       	add    eax,0x1000
c001d14f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d156:	e8 a9 27 ff ff       	call   c000f904 <free>
c001d15b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d15e:	e8 a1 27 ff ff       	call   c000f904 <free>
c001d163:	58                   	pop    eax
c001d164:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d168:	e8 97 27 ff ff       	call   c000f904 <free>
c001d16d:	89 34 24             	mov    DWORD PTR [esp],esi
c001d170:	e8 4b 63 ff ff       	call   c00134c0 <File::close()>
c001d175:	83 c4 10             	add    esp,0x10
c001d178:	b0 01                	mov    al,0x1
c001d17a:	83 c4 3c             	add    esp,0x3c
c001d17d:	5b                   	pop    ebx
c001d17e:	5e                   	pop    esi
c001d17f:	5f                   	pop    edi
c001d180:	5d                   	pop    ebp
c001d181:	c3                   	ret    

c001d182 <Thr::runtimeReferenceHelper()>:
c001d182:	83 ec 18             	sub    esp,0x18
c001d185:	68 3e cc 02 c0       	push   0xc002cc3e
c001d18a:	e8 10 5d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001d18f:	fa                   	cli    
c001d190:	83 c4 10             	add    esp,0x10
c001d193:	eb fe                	jmp    c001d193 <Thr::runtimeReferenceHelper()+0x11>

c001d195 <Thr::getAddressOfKernelSymbol(char const*)>:
c001d195:	57                   	push   edi
c001d196:	56                   	push   esi
c001d197:	53                   	push   ebx
c001d198:	31 db                	xor    ebx,ebx
c001d19a:	39 1d c0 25 03 c0    	cmp    DWORD PTR ds:0xc00325c0,ebx
c001d1a0:	7e 3c                	jle    c001d1de <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d1a2:	8b 34 9d 40 25 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdac0]
c001d1a9:	31 ff                	xor    edi,edi
c001d1ab:	39 3c 9d 40 24 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdbc0],edi
c001d1b2:	7e 27                	jle    c001d1db <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d1b4:	50                   	push   eax
c001d1b5:	50                   	push   eax
c001d1b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1ba:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1bc:	03 04 9d c0 24 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdb40]
c001d1c3:	50                   	push   eax
c001d1c4:	e8 eb 36 fe ff       	call   c00008b4 <strcmp>
c001d1c9:	83 c4 10             	add    esp,0x10
c001d1cc:	85 c0                	test   eax,eax
c001d1ce:	75 05                	jne    c001d1d5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d1d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d1d3:	eb 0b                	jmp    c001d1e0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d1d5:	83 c6 10             	add    esi,0x10
c001d1d8:	47                   	inc    edi
c001d1d9:	eb d0                	jmp    c001d1ab <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d1db:	43                   	inc    ebx
c001d1dc:	eb bc                	jmp    c001d19a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d1de:	31 c0                	xor    eax,eax
c001d1e0:	5b                   	pop    ebx
c001d1e1:	5e                   	pop    esi
c001d1e2:	5f                   	pop    edi
c001d1e3:	c3                   	ret    

c001d1e4 <Thr::loadKernelSymbolTable(char const*)>:
c001d1e4:	55                   	push   ebp
c001d1e5:	57                   	push   edi
c001d1e6:	56                   	push   esi
c001d1e7:	53                   	push   ebx
c001d1e8:	83 ec 68             	sub    esp,0x68
c001d1eb:	8b 35 10 26 03 c0    	mov    esi,DWORD PTR ds:0xc0032610
c001d1f1:	68 14 01 00 00       	push   0x114
c001d1f6:	e8 f9 26 ff ff       	call   c000f8f4 <malloc>
c001d1fb:	83 c4 0c             	add    esp,0xc
c001d1fe:	89 c3                	mov    ebx,eax
c001d200:	56                   	push   esi
c001d201:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d205:	50                   	push   eax
c001d206:	e8 f3 61 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001d20b:	5e                   	pop    esi
c001d20c:	5f                   	pop    edi
c001d20d:	6a 01                	push   0x1
c001d20f:	53                   	push   ebx
c001d210:	e8 4d 62 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001d215:	83 c4 10             	add    esp,0x10
c001d218:	85 c0                	test   eax,eax
c001d21a:	74 0a                	je     c001d226 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d21c:	83 ec 0c             	sub    esp,0xc
c001d21f:	68 60 cc 02 c0       	push   0xc002cc60
c001d224:	eb 34                	jmp    c001d25a <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d226:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d22e:	83 ec 0c             	sub    esp,0xc
c001d231:	6a 34                	push   0x34
c001d233:	e8 bc 26 ff ff       	call   c000f8f4 <malloc>
c001d238:	59                   	pop    ecx
c001d239:	89 c7                	mov    edi,eax
c001d23b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d23f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d241:	56                   	push   esi
c001d242:	57                   	push   edi
c001d243:	6a 00                	push   0x0
c001d245:	6a 34                	push   0x34
c001d247:	53                   	push   ebx
c001d248:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d24b:	83 c4 20             	add    esp,0x20
c001d24e:	85 c0                	test   eax,eax
c001d250:	74 17                	je     c001d269 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d252:	83 ec 0c             	sub    esp,0xc
c001d255:	68 77 cc 02 c0       	push   0xc002cc77
c001d25a:	e8 28 d6 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d25f:	83 c4 10             	add    esp,0x10
c001d262:	31 c0                	xor    eax,eax
c001d264:	e9 31 02 00 00       	jmp    c001d49a <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d269:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d26f:	75 e1                	jne    c001d252 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d271:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d274:	85 c0                	test   eax,eax
c001d276:	74 da                	je     c001d252 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d278:	52                   	push   edx
c001d279:	31 d2                	xor    edx,edx
c001d27b:	52                   	push   edx
c001d27c:	50                   	push   eax
c001d27d:	53                   	push   ebx
c001d27e:	e8 9d 62 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d283:	83 c4 10             	add    esp,0x10
c001d286:	85 c0                	test   eax,eax
c001d288:	75 c8                	jne    c001d252 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d28a:	83 ec 0c             	sub    esp,0xc
c001d28d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d291:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d295:	31 ed                	xor    ebp,ebp
c001d297:	0f af c2             	imul   eax,edx
c001d29a:	50                   	push   eax
c001d29b:	e8 54 26 ff ff       	call   c000f8f4 <malloc>
c001d2a0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d2a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2a6:	89 34 24             	mov    DWORD PTR [esp],esi
c001d2a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2ad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d2b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d2b5:	0f af c2             	imul   eax,edx
c001d2b8:	99                   	cdq    
c001d2b9:	52                   	push   edx
c001d2ba:	50                   	push   eax
c001d2bb:	53                   	push   ebx
c001d2bc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2bf:	83 c4 20             	add    esp,0x20
c001d2c2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2ca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d2d2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d2da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d2e2:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d2e6:	0f 86 aa 00 00 00    	jbe    c001d396 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d2ec:	0f b7 f5             	movzx  esi,bp
c001d2ef:	6b f6 28             	imul   esi,esi,0x28
c001d2f2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d2f6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2fd:	50                   	push   eax
c001d2fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d302:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d306:	8b 16                	mov    edx,DWORD PTR [esi]
c001d308:	6b c0 28             	imul   eax,eax,0x28
c001d30b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d30f:	89 d0                	mov    eax,edx
c001d311:	31 d2                	xor    edx,edx
c001d313:	52                   	push   edx
c001d314:	50                   	push   eax
c001d315:	53                   	push   ebx
c001d316:	e8 05 62 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d31b:	83 c4 0c             	add    esp,0xc
c001d31e:	6a 20                	push   0x20
c001d320:	6a 00                	push   0x0
c001d322:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d326:	52                   	push   edx
c001d327:	e8 40 34 fe ff       	call   c000076c <memset>
c001d32c:	58                   	pop    eax
c001d32d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d32f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d333:	51                   	push   ecx
c001d334:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d338:	52                   	push   edx
c001d339:	6a 00                	push   0x0
c001d33b:	6a 1f                	push   0x1f
c001d33d:	53                   	push   ebx
c001d33e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d341:	83 c4 18             	add    esp,0x18
c001d344:	68 8e cc 02 c0       	push   0xc002cc8e
c001d349:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d34d:	52                   	push   edx
c001d34e:	e8 61 35 fe ff       	call   c00008b4 <strcmp>
c001d353:	83 c4 10             	add    esp,0x10
c001d356:	85 c0                	test   eax,eax
c001d358:	75 0f                	jne    c001d369 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d35a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d35d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d361:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d365:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d369:	50                   	push   eax
c001d36a:	50                   	push   eax
c001d36b:	68 96 cc 02 c0       	push   0xc002cc96
c001d370:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d374:	50                   	push   eax
c001d375:	e8 3a 35 fe ff       	call   c00008b4 <strcmp>
c001d37a:	83 c4 10             	add    esp,0x10
c001d37d:	85 c0                	test   eax,eax
c001d37f:	75 0f                	jne    c001d390 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d381:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d384:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d388:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d38c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d390:	45                   	inc    ebp
c001d391:	e9 4c ff ff ff       	jmp    c001d2e2 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d396:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d39b:	75 10                	jne    c001d3ad <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d39d:	83 ec 0c             	sub    esp,0xc
c001d3a0:	68 9e cc 02 c0       	push   0xc002cc9e
c001d3a5:	e8 dd d4 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d3aa:	83 c4 10             	add    esp,0x10
c001d3ad:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d3b2:	75 10                	jne    c001d3c4 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d3b4:	83 ec 0c             	sub    esp,0xc
c001d3b7:	68 9e cc 02 c0       	push   0xc002cc9e
c001d3bc:	e8 c6 d4 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d3c1:	83 c4 10             	add    esp,0x10
c001d3c4:	31 d2                	xor    edx,edx
c001d3c6:	50                   	push   eax
c001d3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3cb:	52                   	push   edx
c001d3cc:	50                   	push   eax
c001d3cd:	53                   	push   ebx
c001d3ce:	e8 4d 61 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d3d3:	5a                   	pop    edx
c001d3d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d3d8:	e8 17 25 ff ff       	call   c000f8f4 <malloc>
c001d3dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3e5:	31 c9                	xor    ecx,ecx
c001d3e7:	5e                   	pop    esi
c001d3e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3ea:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d3ee:	55                   	push   ebp
c001d3ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3f3:	51                   	push   ecx
c001d3f4:	52                   	push   edx
c001d3f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d3f9:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d3fd:	53                   	push   ebx
c001d3fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d401:	83 c4 14             	add    esp,0x14
c001d404:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d408:	e8 e7 24 ff ff       	call   c000f8f4 <malloc>
c001d40d:	89 c6                	mov    esi,eax
c001d40f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d411:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d414:	56                   	push   esi
c001d415:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d419:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d41d:	51                   	push   ecx
c001d41e:	52                   	push   edx
c001d41f:	53                   	push   ebx
c001d420:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d423:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d427:	8b 15 c0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325c0
c001d42d:	83 c4 1c             	add    esp,0x1c
c001d430:	c1 e8 04             	shr    eax,0x4
c001d433:	89 04 95 40 24 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdbc0],eax
c001d43a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d43e:	31 d2                	xor    edx,edx
c001d440:	52                   	push   edx
c001d441:	50                   	push   eax
c001d442:	53                   	push   ebx
c001d443:	e8 d8 60 ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d448:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d44a:	31 d2                	xor    edx,edx
c001d44c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d44f:	56                   	push   esi
c001d450:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d454:	52                   	push   edx
c001d455:	50                   	push   eax
c001d456:	53                   	push   ebx
c001d457:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d45a:	83 c4 14             	add    esp,0x14
c001d45d:	53                   	push   ebx
c001d45e:	e8 5d 60 ff ff       	call   c00134c0 <File::close()>
c001d463:	5d                   	pop    ebp
c001d464:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d468:	e8 97 24 ff ff       	call   c000f904 <free>
c001d46d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d470:	e8 8f 24 ff ff       	call   c000f904 <free>
c001d475:	a1 c0 25 03 c0       	mov    eax,ds:0xc00325c0
c001d47a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d47e:	8d 50 01             	lea    edx,[eax+0x1]
c001d481:	89 0c 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],ecx
c001d488:	89 34 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],esi
c001d48f:	89 15 c0 25 03 c0    	mov    DWORD PTR ds:0xc00325c0,edx
c001d495:	83 c4 10             	add    esp,0x10
c001d498:	b0 01                	mov    al,0x1
c001d49a:	83 c4 5c             	add    esp,0x5c
c001d49d:	5b                   	pop    ebx
c001d49e:	5e                   	pop    esi
c001d49f:	5f                   	pop    edi
c001d4a0:	5d                   	pop    ebp
c001d4a1:	c3                   	ret    

c001d4a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d4a2:	55                   	push   ebp
c001d4a3:	57                   	push   edi
c001d4a4:	56                   	push   esi
c001d4a5:	53                   	push   ebx
c001d4a6:	81 ec 68 03 00 00    	sub    esp,0x368
c001d4ac:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d4b3:	8b 1d 10 26 03 c0    	mov    ebx,DWORD PTR ds:0xc0032610
c001d4b9:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d4bd:	68 14 01 00 00       	push   0x114
c001d4c2:	e8 2d 24 ff ff       	call   c000f8f4 <malloc>
c001d4c7:	83 c4 0c             	add    esp,0xc
c001d4ca:	89 c5                	mov    ebp,eax
c001d4cc:	53                   	push   ebx
c001d4cd:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d4d4:	50                   	push   eax
c001d4d5:	e8 24 5f ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001d4da:	5e                   	pop    esi
c001d4db:	5f                   	pop    edi
c001d4dc:	6a 01                	push   0x1
c001d4de:	55                   	push   ebp
c001d4df:	e8 7e 5f ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001d4e4:	83 c4 10             	add    esp,0x10
c001d4e7:	85 c0                	test   eax,eax
c001d4e9:	0f 85 a7 06 00 00    	jne    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d4ef:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d4f7:	83 ec 0c             	sub    esp,0xc
c001d4fa:	6a 34                	push   0x34
c001d4fc:	e8 f3 23 ff ff       	call   c000f8f4 <malloc>
c001d501:	5b                   	pop    ebx
c001d502:	89 c7                	mov    edi,eax
c001d504:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d508:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d50b:	53                   	push   ebx
c001d50c:	57                   	push   edi
c001d50d:	6a 00                	push   0x0
c001d50f:	6a 34                	push   0x34
c001d511:	55                   	push   ebp
c001d512:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d515:	83 c4 20             	add    esp,0x20
c001d518:	85 c0                	test   eax,eax
c001d51a:	0f 85 76 06 00 00    	jne    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d520:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d526:	0f 85 6a 06 00 00    	jne    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d52c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d52f:	85 c0                	test   eax,eax
c001d531:	0f 84 5f 06 00 00    	je     c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d537:	31 d2                	xor    edx,edx
c001d539:	51                   	push   ecx
c001d53a:	52                   	push   edx
c001d53b:	50                   	push   eax
c001d53c:	55                   	push   ebp
c001d53d:	e8 de 5f ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d542:	83 c4 10             	add    esp,0x10
c001d545:	85 c0                	test   eax,eax
c001d547:	0f 85 49 06 00 00    	jne    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d54d:	83 ec 0c             	sub    esp,0xc
c001d550:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d553:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d557:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d55b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d55f:	0f af c2             	imul   eax,edx
c001d562:	50                   	push   eax
c001d563:	e8 8c 23 ff ff       	call   c000f8f4 <malloc>
c001d568:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d56b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d56f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d572:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d576:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d57a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d57e:	0f af c2             	imul   eax,edx
c001d581:	99                   	cdq    
c001d582:	52                   	push   edx
c001d583:	50                   	push   eax
c001d584:	55                   	push   ebp
c001d585:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d588:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d58b:	83 c4 20             	add    esp,0x20
c001d58e:	85 c0                	test   eax,eax
c001d590:	0f 84 00 06 00 00    	je     c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d596:	52                   	push   edx
c001d597:	31 d2                	xor    edx,edx
c001d599:	52                   	push   edx
c001d59a:	50                   	push   eax
c001d59b:	55                   	push   ebp
c001d59c:	e8 7f 5f ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d5a1:	83 c4 10             	add    esp,0x10
c001d5a4:	85 c0                	test   eax,eax
c001d5a6:	0f 85 ea 05 00 00    	jne    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5ac:	83 ec 0c             	sub    esp,0xc
c001d5af:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d5b3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d5b7:	31 f6                	xor    esi,esi
c001d5b9:	0f af c2             	imul   eax,edx
c001d5bc:	50                   	push   eax
c001d5bd:	e8 32 23 ff ff       	call   c000f8f4 <malloc>
c001d5c2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d5c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d5c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d5d0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d5d4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d5d8:	0f af c2             	imul   eax,edx
c001d5db:	99                   	cdq    
c001d5dc:	52                   	push   edx
c001d5dd:	50                   	push   eax
c001d5de:	55                   	push   ebp
c001d5df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d5e2:	83 c4 20             	add    esp,0x20
c001d5e5:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d5e9:	0f 86 8a 00 00 00    	jbe    c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d5ef:	0f b7 de             	movzx  ebx,si
c001d5f2:	c1 e3 05             	shl    ebx,0x5
c001d5f5:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d5f9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d5fc:	75 75                	jne    c001d673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d5fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d601:	31 d2                	xor    edx,edx
c001d603:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d607:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d60a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d60e:	50                   	push   eax
c001d60f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d612:	52                   	push   edx
c001d613:	50                   	push   eax
c001d614:	55                   	push   ebp
c001d615:	e8 06 5f ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d61a:	83 c4 10             	add    esp,0x10
c001d61d:	85 c0                	test   eax,eax
c001d61f:	0f 85 71 05 00 00    	jne    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d625:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d62c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d62f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d633:	31 d2                	xor    edx,edx
c001d635:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d639:	83 ec 0c             	sub    esp,0xc
c001d63c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d640:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d647:	50                   	push   eax
c001d648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d64c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d650:	52                   	push   edx
c001d651:	50                   	push   eax
c001d652:	55                   	push   ebp
c001d653:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d656:	83 c4 1c             	add    esp,0x1c
c001d659:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d65c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d65f:	50                   	push   eax
c001d660:	6a 00                	push   0x0
c001d662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d666:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d66a:	50                   	push   eax
c001d66b:	e8 fc 30 fe ff       	call   c000076c <memset>
c001d670:	83 c4 10             	add    esp,0x10
c001d673:	46                   	inc    esi
c001d674:	e9 6c ff ff ff       	jmp    c001d5e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d679:	53                   	push   ebx
c001d67a:	31 db                	xor    ebx,ebx
c001d67c:	68 00 01 00 00       	push   0x100
c001d681:	6a 00                	push   0x0
c001d683:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d687:	50                   	push   eax
c001d688:	e8 df 30 fe ff       	call   c000076c <memset>
c001d68d:	83 c4 0c             	add    esp,0xc
c001d690:	68 00 01 00 00       	push   0x100
c001d695:	6a 00                	push   0x0
c001d697:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d69e:	50                   	push   eax
c001d69f:	e8 c8 30 fe ff       	call   c000076c <memset>
c001d6a4:	83 c4 10             	add    esp,0x10
c001d6a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d6af:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d6b7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d6bf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6c7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d6cf:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d6d3:	0f 86 30 01 00 00    	jbe    c001d809 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d6d9:	0f b7 f3             	movzx  esi,bx
c001d6dc:	6b f6 28             	imul   esi,esi,0x28
c001d6df:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d6e3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d6e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6ea:	52                   	push   edx
c001d6eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6ef:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d6f3:	8b 06                	mov    eax,DWORD PTR [esi]
c001d6f5:	6b d2 28             	imul   edx,edx,0x28
c001d6f8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d6fc:	31 d2                	xor    edx,edx
c001d6fe:	52                   	push   edx
c001d6ff:	50                   	push   eax
c001d700:	55                   	push   ebp
c001d701:	e8 1a 5e ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d706:	83 c4 0c             	add    esp,0xc
c001d709:	6a 20                	push   0x20
c001d70b:	6a 00                	push   0x0
c001d70d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d714:	51                   	push   ecx
c001d715:	e8 52 30 fe ff       	call   c000076c <memset>
c001d71a:	59                   	pop    ecx
c001d71b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d71e:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d722:	52                   	push   edx
c001d723:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d72a:	51                   	push   ecx
c001d72b:	6a 00                	push   0x0
c001d72d:	6a 1f                	push   0x1f
c001d72f:	55                   	push   ebp
c001d730:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d733:	83 c4 1c             	add    esp,0x1c
c001d736:	6a 09                	push   0x9
c001d738:	68 b8 cc 02 c0       	push   0xc002ccb8
c001d73d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d744:	51                   	push   ecx
c001d745:	e8 1e 2f fe ff       	call   c0000668 <memcmp>
c001d74a:	83 c4 10             	add    esp,0x10
c001d74d:	85 c0                	test   eax,eax
c001d74f:	75 21                	jne    c001d772 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d755:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d759:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d75d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d761:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d764:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d76b:	89 d0                	mov    eax,edx
c001d76d:	40                   	inc    eax
c001d76e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d772:	50                   	push   eax
c001d773:	6a 09                	push   0x9
c001d775:	68 c2 cc 02 c0       	push   0xc002ccc2
c001d77a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d781:	50                   	push   eax
c001d782:	e8 e1 2e fe ff       	call   c0000668 <memcmp>
c001d787:	83 c4 10             	add    esp,0x10
c001d78a:	85 c0                	test   eax,eax
c001d78c:	75 21                	jne    c001d7af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d796:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d79a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d79e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d7a1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d7a8:	89 d0                	mov    eax,edx
c001d7aa:	40                   	inc    eax
c001d7ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7af:	50                   	push   eax
c001d7b0:	50                   	push   eax
c001d7b1:	68 8e cc 02 c0       	push   0xc002cc8e
c001d7b6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7bd:	50                   	push   eax
c001d7be:	e8 f1 30 fe ff       	call   c00008b4 <strcmp>
c001d7c3:	83 c4 10             	add    esp,0x10
c001d7c6:	85 c0                	test   eax,eax
c001d7c8:	75 0f                	jne    c001d7d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d7ca:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d7cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7d9:	50                   	push   eax
c001d7da:	50                   	push   eax
c001d7db:	68 96 cc 02 c0       	push   0xc002cc96
c001d7e0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7e7:	50                   	push   eax
c001d7e8:	e8 c7 30 fe ff       	call   c00008b4 <strcmp>
c001d7ed:	83 c4 10             	add    esp,0x10
c001d7f0:	85 c0                	test   eax,eax
c001d7f2:	75 0f                	jne    c001d803 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d7f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d7f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d7fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d803:	43                   	inc    ebx
c001d804:	e9 c6 fe ff ff       	jmp    c001d6cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d809:	31 d2                	xor    edx,edx
c001d80b:	50                   	push   eax
c001d80c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d810:	52                   	push   edx
c001d811:	50                   	push   eax
c001d812:	55                   	push   ebp
c001d813:	e8 08 5d ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d818:	58                   	pop    eax
c001d819:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d81d:	e8 d2 20 ff ff       	call   c000f8f4 <malloc>
c001d822:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d825:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d829:	31 d2                	xor    edx,edx
c001d82b:	58                   	pop    eax
c001d82c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d830:	53                   	push   ebx
c001d831:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d839:	52                   	push   edx
c001d83a:	50                   	push   eax
c001d83b:	55                   	push   ebp
c001d83c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d83f:	83 c4 14             	add    esp,0x14
c001d842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d846:	e8 a9 20 ff ff       	call   c000f8f4 <malloc>
c001d84b:	31 d2                	xor    edx,edx
c001d84d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d851:	83 c4 0c             	add    esp,0xc
c001d854:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d858:	52                   	push   edx
c001d859:	50                   	push   eax
c001d85a:	55                   	push   ebp
c001d85b:	e8 c0 5c ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d860:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d863:	31 d2                	xor    edx,edx
c001d865:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d868:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d86c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d870:	52                   	push   edx
c001d871:	50                   	push   eax
c001d872:	55                   	push   ebp
c001d873:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d876:	83 c4 20             	add    esp,0x20
c001d879:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d881:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d885:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d889:	0f 84 0b 03 00 00    	je     c001db9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d88f:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d896:	31 d2                	xor    edx,edx
c001d898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d89c:	c1 e8 03             	shr    eax,0x3
c001d89f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d8a3:	51                   	push   ecx
c001d8a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8a8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d8ac:	52                   	push   edx
c001d8ad:	50                   	push   eax
c001d8ae:	55                   	push   ebp
c001d8af:	e8 6c 5c ff ff       	call   c0013520 <File::seek(unsigned long long)>
c001d8b4:	5b                   	pop    ebx
c001d8b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8b9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d8c0:	e8 2f 20 ff ff       	call   c000f8f4 <malloc>
c001d8c5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d8c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d8cc:	31 d2                	xor    edx,edx
c001d8ce:	5e                   	pop    esi
c001d8cf:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d8d3:	50                   	push   eax
c001d8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8dc:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d8e3:	52                   	push   edx
c001d8e4:	50                   	push   eax
c001d8e5:	55                   	push   ebp
c001d8e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d8e9:	83 c4 20             	add    esp,0x20
c001d8ec:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d8f4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d8f8:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d8fc:	0f 8d 7c 02 00 00    	jge    c001db7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d902:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d90a:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d90f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d912:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d91a:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d91e:	89 d8                	mov    eax,ebx
c001d920:	c1 e8 08             	shr    eax,0x8
c001d923:	89 c6                	mov    esi,eax
c001d925:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d929:	c1 e6 04             	shl    esi,0x4
c001d92c:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d930:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d933:	85 d2                	test   edx,edx
c001d935:	0f 85 bf 00 00 00    	jne    c001d9fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d93b:	83 ec 0c             	sub    esp,0xc
c001d93e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d942:	03 06                	add    eax,DWORD PTR [esi]
c001d944:	50                   	push   eax
c001d945:	e8 4b f8 ff ff       	call   c001d195 <Thr::getAddressOfKernelSymbol(char const*)>
c001d94a:	83 c4 10             	add    esp,0x10
c001d94d:	89 c2                	mov    edx,eax
c001d94f:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d954:	85 c0                	test   eax,eax
c001d956:	0f 85 9e 00 00 00    	jne    c001d9fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d95c:	83 ec 0c             	sub    esp,0xc
c001d95f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d963:	03 06                	add    eax,DWORD PTR [esi]
c001d965:	50                   	push   eax
c001d966:	e8 f0 0b ff ff       	call   c000e55b <Krnl::resolveCompatibilitySymbol(char*)>
c001d96b:	83 c4 10             	add    esp,0x10
c001d96e:	89 c2                	mov    edx,eax
c001d970:	85 c0                	test   eax,eax
c001d972:	0f 85 82 00 00 00    	jne    c001d9fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d978:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d97c:	50                   	push   eax
c001d97d:	50                   	push   eax
c001d97e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d982:	03 06                	add    eax,DWORD PTR [esi]
c001d984:	50                   	push   eax
c001d985:	68 cc cc 02 c0       	push   0xc002cccc
c001d98a:	e8 10 55 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001d98f:	58                   	pop    eax
c001d990:	5a                   	pop    edx
c001d991:	68 e6 cc 02 c0       	push   0xc002cce6
c001d996:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d99d:	50                   	push   eax
c001d99e:	e8 85 2e fe ff       	call   c0000828 <strcpy>
c001d9a3:	59                   	pop    ecx
c001d9a4:	58                   	pop    eax
c001d9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9a9:	03 06                	add    eax,DWORD PTR [esi]
c001d9ab:	50                   	push   eax
c001d9ac:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d9b3:	50                   	push   eax
c001d9b4:	e8 af 2f fe ff       	call   c0000968 <strcat>
c001d9b9:	58                   	pop    eax
c001d9ba:	5a                   	pop    edx
c001d9bb:	68 7c cd 02 c0       	push   0xc002cd7c
c001d9c0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d9c7:	50                   	push   eax
c001d9c8:	e8 9b 2f fe ff       	call   c0000968 <strcat>
c001d9cd:	83 c4 10             	add    esp,0x10
c001d9d0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d9d5:	0f 84 5d 01 00 00    	je     c001db38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d9db:	83 ec 0c             	sub    esp,0xc
c001d9de:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d9e5:	50                   	push   eax
c001d9e6:	e8 9c ce ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001d9eb:	83 c4 10             	add    esp,0x10
c001d9ee:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d9f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d9f6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d9fa:	80 fb 01             	cmp    bl,0x1
c001d9fd:	0f 85 88 00 00 00    	jne    c001da8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001da03:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001da0a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001da0e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001da12:	01 ce                	add    esi,ecx
c001da14:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001da1a:	0f 94 c0             	sete   al
c001da1d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001da23:	0f 94 c3             	sete   bl
c001da26:	09 c3                	or     ebx,eax
c001da28:	8b 06                	mov    eax,DWORD PTR [esi]
c001da2a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001da2f:	74 41                	je     c001da72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001da31:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001da34:	84 db                	test   bl,bl
c001da36:	75 15                	jne    c001da4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001da38:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001da3c:	66 83 f8 0c          	cmp    ax,0xc
c001da40:	76 05                	jbe    c001da47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001da42:	b8 0c 00 00 00       	mov    eax,0xc
c001da47:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001da4b:	76 37                	jbe    c001da84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001da4d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001da51:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da56:	0f 84 dc 00 00 00    	je     c001db38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da5c:	83 ec 0c             	sub    esp,0xc
c001da5f:	68 fd cc 02 c0       	push   0xc002ccfd
c001da64:	e8 1e ce ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001da69:	83 c4 10             	add    esp,0x10
c001da6c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001da70:	eb 12                	jmp    c001da84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001da72:	01 c1                	add    ecx,eax
c001da74:	84 db                	test   bl,bl
c001da76:	75 0c                	jne    c001da84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001da78:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001da7c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001da80:	77 02                	ja     c001da84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001da82:	01 d1                	add    ecx,edx
c001da84:	89 0e                	mov    DWORD PTR [esi],ecx
c001da86:	e9 ea 00 00 00       	jmp    c001db75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001da8b:	80 fb 02             	cmp    bl,0x2
c001da8e:	75 7c                	jne    c001db0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001da90:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001da97:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001da9b:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001da9f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001daa5:	74 20                	je     c001dac7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001daa7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001daad:	74 18                	je     c001dac7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001daaf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001dab3:	b9 0a 00 00 00       	mov    ecx,0xa
c001dab8:	66 83 f8 0e          	cmp    ax,0xe
c001dabc:	77 03                	ja     c001dac1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001dabe:	8d 48 fc             	lea    ecx,[eax-0x4]
c001dac1:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001dac5:	76 1f                	jbe    c001dae6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001dac7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001dacb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dad0:	74 66                	je     c001db38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dad2:	83 ec 0c             	sub    esp,0xc
c001dad5:	68 19 cd 02 c0       	push   0xc002cd19
c001dada:	e8 a8 cd ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001dadf:	83 c4 10             	add    esp,0x10
c001dae2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dae6:	8b 06                	mov    eax,DWORD PTR [esi]
c001dae8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001daed:	74 13                	je     c001db02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001daef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001daf3:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001dafa:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001dafe:	01 c8                	add    eax,ecx
c001db00:	eb 04                	jmp    c001db06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001db02:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001db06:	01 c2                	add    edx,eax
c001db08:	89 16                	mov    DWORD PTR [esi],edx
c001db0a:	eb 69                	jmp    c001db75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db0c:	0f b6 db             	movzx  ebx,bl
c001db0f:	50                   	push   eax
c001db10:	50                   	push   eax
c001db11:	53                   	push   ebx
c001db12:	68 35 cd 02 c0       	push   0xc002cd35
c001db17:	e8 83 53 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001db1c:	83 c4 10             	add    esp,0x10
c001db1f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db24:	74 12                	je     c001db38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db26:	83 ec 0c             	sub    esp,0xc
c001db29:	68 40 cd 02 c0       	push   0xc002cd40
c001db2e:	e8 54 cd ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001db33:	83 c4 10             	add    esp,0x10
c001db36:	eb 3d                	jmp    c001db75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db38:	83 ec 0c             	sub    esp,0xc
c001db3b:	55                   	push   ebp
c001db3c:	e8 7f 59 ff ff       	call   c00134c0 <File::close()>
c001db41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001db44:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db4a:	59                   	pop    ecx
c001db4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db4f:	e8 b0 1d ff ff       	call   c000f904 <free>
c001db54:	5b                   	pop    ebx
c001db55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db59:	e8 a6 1d ff ff       	call   c000f904 <free>
c001db5e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001db61:	e8 9e 1d ff ff       	call   c000f904 <free>
c001db66:	5e                   	pop    esi
c001db67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db6b:	e8 94 1d ff ff       	call   c000f904 <free>
c001db70:	83 c4 10             	add    esp,0x10
c001db73:	eb 21                	jmp    c001db96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001db75:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001db79:	e9 76 fd ff ff       	jmp    c001d8f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001db7e:	83 ec 0c             	sub    esp,0xc
c001db81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db85:	e8 7a 1d ff ff       	call   c000f904 <free>
c001db8a:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001db8e:	83 c4 10             	add    esp,0x10
c001db91:	e9 eb fc ff ff       	jmp    c001d881 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001db96:	31 c0                	xor    eax,eax
c001db98:	eb 33                	jmp    c001dbcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001db9a:	83 ec 0c             	sub    esp,0xc
c001db9d:	55                   	push   ebp
c001db9e:	e8 1d 59 ff ff       	call   c00134c0 <File::close()>
c001dba3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dba6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dba9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dbac:	58                   	pop    eax
c001dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbb1:	e8 4e 1d ff ff       	call   c000f904 <free>
c001dbb6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dbb9:	e8 46 1d ff ff       	call   c000f904 <free>
c001dbbe:	5a                   	pop    edx
c001dbbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbc3:	e8 3c 1d ff ff       	call   c000f904 <free>
c001dbc8:	83 c4 10             	add    esp,0x10
c001dbcb:	b0 01                	mov    al,0x1
c001dbcd:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dbd3:	5b                   	pop    ebx
c001dbd4:	5e                   	pop    esi
c001dbd5:	5f                   	pop    edi
c001dbd6:	5d                   	pop    ebp
c001dbd7:	c3                   	ret    

c001dbd8 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dbd8:	56                   	push   esi
c001dbd9:	31 d2                	xor    edx,edx
c001dbdb:	53                   	push   ebx
c001dbdc:	8b 1d 20 1e 03 c0    	mov    ebx,DWORD PTR ds:0xc0031e20
c001dbe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dbe6:	39 d3                	cmp    ebx,edx
c001dbe8:	7e 1b                	jle    c001dc05 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dbea:	8b 04 95 40 20 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdfc0]
c001dbf1:	39 c8                	cmp    eax,ecx
c001dbf3:	77 0d                	ja     c001dc02 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dbf5:	8b 34 95 40 1e 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce1c0]
c001dbfc:	01 c6                	add    esi,eax
c001dbfe:	39 ce                	cmp    esi,ecx
c001dc00:	77 05                	ja     c001dc07 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dc02:	42                   	inc    edx
c001dc03:	eb e1                	jmp    c001dbe6 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dc05:	31 c0                	xor    eax,eax
c001dc07:	5b                   	pop    ebx
c001dc08:	5e                   	pop    esi
c001dc09:	c3                   	ret    

c001dc0a <Thr::getDriverNameFromAddress(unsigned long)>:
c001dc0a:	53                   	push   ebx
c001dc0b:	31 c0                	xor    eax,eax
c001dc0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc11:	8b 1d 20 1e 03 c0    	mov    ebx,DWORD PTR ds:0xc0031e20
c001dc17:	39 c3                	cmp    ebx,eax
c001dc19:	7e 22                	jle    c001dc3d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dc1b:	8b 14 85 40 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdfc0]
c001dc22:	39 ca                	cmp    edx,ecx
c001dc24:	77 14                	ja     c001dc3a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dc26:	03 14 85 40 1e 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce1c0]
c001dc2d:	39 ca                	cmp    edx,ecx
c001dc2f:	76 09                	jbe    c001dc3a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dc31:	8b 04 85 40 22 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcddc0]
c001dc38:	eb 05                	jmp    c001dc3f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001dc3a:	40                   	inc    eax
c001dc3b:	eb da                	jmp    c001dc17 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001dc3d:	31 c0                	xor    eax,eax
c001dc3f:	5b                   	pop    ebx
c001dc40:	c3                   	ret    

c001dc41 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dc41:	53                   	push   ebx
c001dc42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dc46:	53                   	push   ebx
c001dc47:	e8 8c ff ff ff       	call   c001dbd8 <Thr::getDriverBaseFromAddress(unsigned long)>
c001dc4c:	5a                   	pop    edx
c001dc4d:	31 d2                	xor    edx,edx
c001dc4f:	85 c0                	test   eax,eax
c001dc51:	74 04                	je     c001dc57 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dc53:	89 da                	mov    edx,ebx
c001dc55:	29 c2                	sub    edx,eax
c001dc57:	89 d0                	mov    eax,edx
c001dc59:	5b                   	pop    ebx
c001dc5a:	c3                   	ret    

c001dc5b <Thr::loadDLL(char const*, bool)>:
c001dc5b:	55                   	push   ebp
c001dc5c:	57                   	push   edi
c001dc5d:	56                   	push   esi
c001dc5e:	53                   	push   ebx
c001dc5f:	81 ec 34 01 00 00    	sub    esp,0x134
c001dc65:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dc6c:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dc73:	56                   	push   esi
c001dc74:	68 58 cd 02 c0       	push   0xc002cd58
c001dc79:	e8 21 52 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001dc7e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dc85:	e8 6a 1c ff ff       	call   c000f8f4 <malloc>
c001dc8a:	83 c4 0c             	add    esp,0xc
c001dc8d:	89 c3                	mov    ebx,eax
c001dc8f:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001dc95:	56                   	push   esi
c001dc96:	50                   	push   eax
c001dc97:	e8 62 57 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001dc9c:	83 c4 10             	add    esp,0x10
c001dc9f:	85 db                	test   ebx,ebx
c001dca1:	75 3c                	jne    c001dcdf <Thr::loadDLL(char const*, bool)+0x84>
c001dca3:	89 f8                	mov    eax,edi
c001dca5:	84 c0                	test   al,al
c001dca7:	0f 84 cc 01 00 00    	je     c001de79 <Thr::loadDLL(char const*, bool)+0x21e>
c001dcad:	55                   	push   ebp
c001dcae:	55                   	push   ebp
c001dcaf:	68 69 cd 02 c0       	push   0xc002cd69
c001dcb4:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dcb8:	55                   	push   ebp
c001dcb9:	e8 6a 2b fe ff       	call   c0000828 <strcpy>
c001dcbe:	58                   	pop    eax
c001dcbf:	5a                   	pop    edx
c001dcc0:	56                   	push   esi
c001dcc1:	55                   	push   ebp
c001dcc2:	e8 a1 2c fe ff       	call   c0000968 <strcat>
c001dcc7:	59                   	pop    ecx
c001dcc8:	58                   	pop    eax
c001dcc9:	68 7c cd 02 c0       	push   0xc002cd7c
c001dcce:	55                   	push   ebp
c001dccf:	e8 94 2c fe ff       	call   c0000968 <strcat>
c001dcd4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dcd7:	e8 ab cb ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001dcdc:	83 c4 10             	add    esp,0x10
c001dcdf:	51                   	push   ecx
c001dce0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001dce4:	50                   	push   eax
c001dce5:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dce9:	50                   	push   eax
c001dcea:	53                   	push   ebx
c001dceb:	e8 1e 5a ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001dcf0:	83 c4 10             	add    esp,0x10
c001dcf3:	85 db                	test   ebx,ebx
c001dcf5:	74 0c                	je     c001dd03 <Thr::loadDLL(char const*, bool)+0xa8>
c001dcf7:	83 ec 0c             	sub    esp,0xc
c001dcfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dcfc:	53                   	push   ebx
c001dcfd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd00:	83 c4 10             	add    esp,0x10
c001dd03:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001dd08:	75 0a                	jne    c001dd14 <Thr::loadDLL(char const*, bool)+0xb9>
c001dd0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd0e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001dd12:	75 3c                	jne    c001dd50 <Thr::loadDLL(char const*, bool)+0xf5>
c001dd14:	89 f8                	mov    eax,edi
c001dd16:	84 c0                	test   al,al
c001dd18:	0f 84 43 01 00 00    	je     c001de61 <Thr::loadDLL(char const*, bool)+0x206>
c001dd1e:	51                   	push   ecx
c001dd1f:	51                   	push   ecx
c001dd20:	68 69 cd 02 c0       	push   0xc002cd69
c001dd25:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001dd29:	53                   	push   ebx
c001dd2a:	e8 f9 2a fe ff       	call   c0000828 <strcpy>
c001dd2f:	5d                   	pop    ebp
c001dd30:	58                   	pop    eax
c001dd31:	56                   	push   esi
c001dd32:	53                   	push   ebx
c001dd33:	e8 30 2c fe ff       	call   c0000968 <strcat>
c001dd38:	58                   	pop    eax
c001dd39:	5a                   	pop    edx
c001dd3a:	68 7c cd 02 c0       	push   0xc002cd7c
c001dd3f:	53                   	push   ebx
c001dd40:	e8 23 2c fe ff       	call   c0000968 <strcat>
c001dd45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd48:	e8 3a cb ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001dd4d:	83 c4 10             	add    esp,0x10
c001dd50:	52                   	push   edx
c001dd51:	6a 03                	push   0x3
c001dd53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd57:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dd5b:	05 ff 0f 00 00       	add    eax,0xfff
c001dd60:	83 d2 00             	adc    edx,0x0
c001dd63:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dd67:	50                   	push   eax
c001dd68:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c001dd6e:	e8 5f 46 ff ff       	call   c00123d2 <VAS::allocatePages(int, int)>
c001dd73:	59                   	pop    ecx
c001dd74:	89 c3                	mov    ebx,eax
c001dd76:	5d                   	pop    ebp
c001dd77:	50                   	push   eax
c001dd78:	68 7e cd 02 c0       	push   0xc002cd7e
c001dd7d:	e8 1d 51 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001dd82:	89 34 24             	mov    DWORD PTR [esp],esi
c001dd85:	e8 fe 29 fe ff       	call   c0000788 <strlen>
c001dd8a:	8b 2d 20 1e 03 c0    	mov    ebp,DWORD PTR ds:0xc0031e20
c001dd90:	40                   	inc    eax
c001dd91:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd94:	e8 5b 1b ff ff       	call   c000f8f4 <malloc>
c001dd99:	89 04 ad 40 22 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcddc0],eax
c001dda0:	58                   	pop    eax
c001dda1:	a1 20 1e 03 c0       	mov    eax,ds:0xc0031e20
c001dda6:	5a                   	pop    edx
c001dda7:	56                   	push   esi
c001dda8:	ff 34 85 40 22 03 c0 	push   DWORD PTR [eax*4-0x3ffcddc0]
c001ddaf:	e8 74 2a fe ff       	call   c0000828 <strcpy>
c001ddb4:	a1 20 1e 03 c0       	mov    eax,ds:0xc0031e20
c001ddb9:	8d 50 01             	lea    edx,[eax+0x1]
c001ddbc:	89 1c 85 40 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdfc0],ebx
c001ddc3:	89 15 20 1e 03 c0    	mov    DWORD PTR ds:0xc0031e20,edx
c001ddc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddcd:	83 c4 0c             	add    esp,0xc
c001ddd0:	89 14 85 40 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1c0],edx
c001ddd7:	6a 01                	push   0x1
c001ddd9:	53                   	push   ebx
c001ddda:	56                   	push   esi
c001dddb:	e8 c2 f6 ff ff       	call   c001d4a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dde0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dde4:	83 c4 10             	add    esp,0x10
c001dde7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ddec:	0f 85 83 00 00 00    	jne    c001de75 <Thr::loadDLL(char const*, bool)+0x21a>
c001ddf2:	89 f8                	mov    eax,edi
c001ddf4:	84 c0                	test   al,al
c001ddf6:	74 6d                	je     c001de65 <Thr::loadDLL(char const*, bool)+0x20a>
c001ddf8:	83 ec 0c             	sub    esp,0xc
c001ddfb:	68 8b cd 02 c0       	push   0xc002cd8b
c001de00:	e8 82 ca ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001de05:	83 c4 10             	add    esp,0x10
c001de08:	eb 5b                	jmp    c001de65 <Thr::loadDLL(char const*, bool)+0x20a>
c001de0a:	89 ee                	mov    esi,ebp
c001de0c:	50                   	push   eax
c001de0d:	c1 e6 0c             	shl    esi,0xc
c001de10:	50                   	push   eax
c001de11:	01 de                	add    esi,ebx
c001de13:	56                   	push   esi
c001de14:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c001de1a:	e8 1b 41 ff ff       	call   c0011f3a <VAS::getPageTableEntry(unsigned long)>
c001de1f:	83 c4 10             	add    esp,0x10
c001de22:	f6 00 60             	test   BYTE PTR [eax],0x60
c001de25:	75 0c                	jne    c001de33 <Thr::loadDLL(char const*, bool)+0x1d8>
c001de27:	83 ec 0c             	sub    esp,0xc
c001de2a:	56                   	push   esi
c001de2b:	e8 a6 20 ff ff       	call   c000fed6 <Phys::freePage(unsigned long)>
c001de30:	83 c4 10             	add    esp,0x10
c001de33:	45                   	inc    ebp
c001de34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de3c:	05 ff 0f 00 00       	add    eax,0xfff
c001de41:	bf 00 00 00 00       	mov    edi,0x0
c001de46:	83 d2 00             	adc    edx,0x0
c001de49:	0f ac d0 0c          	shrd   eax,edx,0xc
c001de4d:	c1 ea 0c             	shr    edx,0xc
c001de50:	39 c5                	cmp    ebp,eax
c001de52:	89 d1                	mov    ecx,edx
c001de54:	89 f8                	mov    eax,edi
c001de56:	19 c8                	sbb    eax,ecx
c001de58:	72 b0                	jb     c001de0a <Thr::loadDLL(char const*, bool)+0x1af>
c001de5a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001de5f:	75 18                	jne    c001de79 <Thr::loadDLL(char const*, bool)+0x21e>
c001de61:	31 db                	xor    ebx,ebx
c001de63:	eb 14                	jmp    c001de79 <Thr::loadDLL(char const*, bool)+0x21e>
c001de65:	83 ec 0c             	sub    esp,0xc
c001de68:	68 aa cd 02 c0       	push   0xc002cdaa
c001de6d:	e8 15 ca ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001de72:	83 c4 10             	add    esp,0x10
c001de75:	31 ed                	xor    ebp,ebp
c001de77:	eb bb                	jmp    c001de34 <Thr::loadDLL(char const*, bool)+0x1d9>
c001de79:	81 c4 2c 01 00 00    	add    esp,0x12c
c001de7f:	89 d8                	mov    eax,ebx
c001de81:	5b                   	pop    ebx
c001de82:	5e                   	pop    esi
c001de83:	5f                   	pop    edi
c001de84:	5d                   	pop    ebp
c001de85:	c3                   	ret    

c001de86 <Thr::executeDLL(unsigned long, void*)>:
c001de86:	56                   	push   esi
c001de87:	53                   	push   ebx
c001de88:	52                   	push   edx
c001de89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de8d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001de91:	85 db                	test   ebx,ebx
c001de93:	75 10                	jne    c001dea5 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001de95:	83 ec 0c             	sub    esp,0xc
c001de98:	68 c6 cd 02 c0       	push   0xc002cdc6
c001de9d:	e8 e5 c9 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001dea2:	83 c4 10             	add    esp,0x10
c001dea5:	50                   	push   eax
c001dea6:	50                   	push   eax
c001dea7:	53                   	push   ebx
c001dea8:	68 f0 cd 02 c0       	push   0xc002cdf0
c001dead:	e8 ed 4f ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001deb2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001deb6:	89 d8                	mov    eax,ebx
c001deb8:	83 c4 14             	add    esp,0x14
c001debb:	5b                   	pop    ebx
c001debc:	5e                   	pop    esi
c001debd:	ff e0                	jmp    eax
c001debf:	90                   	nop

c001dec0 <userModeEntryPoint(void*)>:
c001dec0:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001dec5:	48                   	dec    eax
c001dec6:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001decb:	75 01                	jne    c001dece <userModeEntryPoint(void*)+0xe>
c001decd:	fb                   	sti    
c001dece:	fb                   	sti    
c001decf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ded4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ded7:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dedd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dee1:	e9 44 24 fe ff       	jmp    c000032a <goToUsermode>

c001dee6 <changeTSS>:
c001dee6:	83 ec 14             	sub    esp,0x14
c001dee9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deee:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001def1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001def6:	c1 e2 15             	shl    edx,0x15
c001def9:	29 d0                	sub    eax,edx
c001defb:	50                   	push   eax
c001defc:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001df01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df07:	05 7c 11 00 00       	add    eax,0x117c
c001df0c:	50                   	push   eax
c001df0d:	e8 c6 34 ff ff       	call   c00113d8 <TSS::setESP(unsigned long)>
c001df12:	83 c4 1c             	add    esp,0x1c
c001df15:	c3                   	ret    

c001df16 <switchToThread(ThreadControlBlock*)>:
c001df16:	57                   	push   edi
c001df17:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001df1c:	56                   	push   esi
c001df1d:	85 c0                	test   eax,eax
c001df1f:	53                   	push   ebx
c001df20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df24:	0f 85 88 00 00 00    	jne    c001dfb2 <switchToThread(ThreadControlBlock*)+0x9c>
c001df2a:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001df2d:	3c ff                	cmp    al,0xff
c001df2f:	74 7d                	je     c001dfae <switchToThread(ThreadControlBlock*)+0x98>
c001df31:	0f b6 d0             	movzx  edx,al
c001df34:	b8 84 03 00 00       	mov    eax,0x384
c001df39:	29 d0                	sub    eax,edx
c001df3b:	c1 e0 10             	shl    eax,0x10
c001df3e:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001df41:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001df44:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c001df49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df4f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001df56:	74 4a                	je     c001dfa2 <switchToThread(ThreadControlBlock*)+0x8c>
c001df58:	0f 31                	rdtsc  
c001df5a:	a3 28 26 03 c0       	mov    ds:0xc0032628,eax
c001df5f:	89 c6                	mov    esi,eax
c001df61:	89 d7                	mov    edi,edx
c001df63:	2b 35 18 26 03 c0    	sub    esi,DWORD PTR ds:0xc0032618
c001df69:	89 15 2c 26 03 c0    	mov    DWORD PTR ds:0xc003262c,edx
c001df6f:	1b 3d 1c 26 03 c0    	sbb    edi,DWORD PTR ds:0xc003261c
c001df75:	89 35 20 26 03 c0    	mov    DWORD PTR ds:0xc0032620,esi
c001df7b:	a3 18 26 03 c0       	mov    ds:0xc0032618,eax
c001df80:	89 3d 24 26 03 c0    	mov    DWORD PTR ds:0xc0032624,edi
c001df86:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001df8c:	89 15 1c 26 03 c0    	mov    DWORD PTR ds:0xc003261c,edx
c001df92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001df95:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001df98:	01 c6                	add    esi,eax
c001df9a:	11 d7                	adc    edi,edx
c001df9c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001df9f:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001dfa2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001dfa6:	5b                   	pop    ebx
c001dfa7:	5e                   	pop    esi
c001dfa8:	5f                   	pop    edi
c001dfa9:	e9 b4 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dfae:	31 c0                	xor    eax,eax
c001dfb0:	eb 8f                	jmp    c001df41 <switchToThread(ThreadControlBlock*)+0x2b>
c001dfb2:	5b                   	pop    ebx
c001dfb3:	c7 05 e0 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x1
c001dfbd:	5e                   	pop    esi
c001dfbe:	5f                   	pop    edi
c001dfbf:	c3                   	ret    

c001dfc0 <Process::addArgs(char**)>:
c001dfc0:	57                   	push   edi
c001dfc1:	56                   	push   esi
c001dfc2:	53                   	push   ebx
c001dfc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfc7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dfcb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dfd5:	85 ff                	test   edi,edi
c001dfd7:	74 3d                	je     c001e016 <Process::addArgs(char**)+0x56>
c001dfd9:	8b 07                	mov    eax,DWORD PTR [edi]
c001dfdb:	85 c0                	test   eax,eax
c001dfdd:	74 37                	je     c001e016 <Process::addArgs(char**)+0x56>
c001dfdf:	31 db                	xor    ebx,ebx
c001dfe1:	83 ec 0c             	sub    esp,0xc
c001dfe4:	50                   	push   eax
c001dfe5:	e8 9e 27 fe ff       	call   c0000788 <strlen>
c001dfea:	40                   	inc    eax
c001dfeb:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfee:	e8 01 19 ff ff       	call   c000f8f4 <malloc>
c001dff3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001dffa:	5a                   	pop    edx
c001dffb:	59                   	pop    ecx
c001dffc:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001dfff:	43                   	inc    ebx
c001e000:	50                   	push   eax
c001e001:	e8 22 28 fe ff       	call   c0000828 <strcpy>
c001e006:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001e00c:	83 c4 10             	add    esp,0x10
c001e00f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e012:	85 c0                	test   eax,eax
c001e014:	75 cb                	jne    c001dfe1 <Process::addArgs(char**)+0x21>
c001e016:	5b                   	pop    ebx
c001e017:	5e                   	pop    esi
c001e018:	5f                   	pop    edi
c001e019:	c3                   	ret    

c001e01a <Process::Process(char const*, Process*, char**)>:
c001e01a:	56                   	push   esi
c001e01b:	53                   	push   ebx
c001e01c:	83 ec 14             	sub    esp,0x14
c001e01f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e023:	05 0c 02 00 00       	add    eax,0x20c
c001e028:	bb 07 00 00 00       	mov    ebx,0x7
c001e02d:	89 c6                	mov    esi,eax
c001e02f:	85 db                	test   ebx,ebx
c001e031:	78 12                	js     c001e045 <Process::Process(char const*, Process*, char**)+0x2b>
c001e033:	83 ec 0c             	sub    esp,0xc
c001e036:	56                   	push   esi
c001e037:	e8 f6 b6 00 00       	call   c0029732 <ThreadControlBlock::ThreadControlBlock()>
c001e03c:	83 c4 10             	add    esp,0x10
c001e03f:	83 c6 63             	add    esi,0x63
c001e042:	4b                   	dec    ebx
c001e043:	eb ea                	jmp    c001e02f <Process::Process(char const*, Process*, char**)+0x15>
c001e045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e049:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e050:	83 ec 0c             	sub    esp,0xc
c001e053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e057:	e8 84 c6 ff ff       	call   c001a6e0 <Krnl::newProcessEnv(Process*)>
c001e05c:	83 c4 10             	add    esp,0x10
c001e05f:	89 c2                	mov    edx,eax
c001e061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e065:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e06b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e06f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e078:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c001e07d:	8d 50 01             	lea    edx,[eax+0x1]
c001e080:	89 15 30 e6 02 c0    	mov    DWORD PTR ds:0xc002e630,edx
c001e086:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e08a:	89 02                	mov    DWORD PTR [edx],eax
c001e08c:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001e094:	83 ec 0c             	sub    esp,0xc
c001e097:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e09b:	e8 54 18 ff ff       	call   c000f8f4 <malloc>
c001e0a0:	83 c4 10             	add    esp,0x10
c001e0a3:	89 c3                	mov    ebx,eax
c001e0a5:	83 ec 08             	sub    esp,0x8
c001e0a8:	6a 00                	push   0x0
c001e0aa:	53                   	push   ebx
c001e0ab:	e8 ca 46 ff ff       	call   c001277a <VAS::VAS(bool)>
c001e0b0:	83 c4 10             	add    esp,0x10
c001e0b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0b7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e0bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0c1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e0cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e0d3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e0d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0dd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0e3:	85 c0                	test   eax,eax
c001e0e5:	74 42                	je     c001e129 <Process::Process(char const*, Process*, char**)+0x10f>
c001e0e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0eb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0f1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e0f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0fb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e105:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e10b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e115:	05 0c 01 00 00       	add    eax,0x10c
c001e11a:	83 ec 08             	sub    esp,0x8
c001e11d:	52                   	push   edx
c001e11e:	50                   	push   eax
c001e11f:	e8 04 27 fe ff       	call   c0000828 <strcpy>
c001e124:	83 c4 10             	add    esp,0x10
c001e127:	eb 63                	jmp    c001e18c <Process::Process(char const*, Process*, char**)+0x172>
c001e129:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e131:	83 ec 0c             	sub    esp,0xc
c001e134:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e138:	e8 b7 17 ff ff       	call   c000f8f4 <malloc>
c001e13d:	83 c4 10             	add    esp,0x10
c001e140:	89 c3                	mov    ebx,eax
c001e142:	83 ec 08             	sub    esp,0x8
c001e145:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e149:	53                   	push   ebx
c001e14a:	e8 6b 2f ff ff       	call   c00110ba <VgaText::VgaText(char const*)>
c001e14f:	83 c4 10             	add    esp,0x10
c001e152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e156:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e15c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e160:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e166:	83 ec 0c             	sub    esp,0xc
c001e169:	50                   	push   eax
c001e16a:	e8 82 24 ff ff       	call   c00105f1 <addToTerminalCycle(VgaText*)>
c001e16f:	83 c4 10             	add    esp,0x10
c001e172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e176:	05 0c 01 00 00       	add    eax,0x10c
c001e17b:	83 ec 08             	sub    esp,0x8
c001e17e:	68 0f ce 02 c0       	push   0xc002ce0f
c001e183:	50                   	push   eax
c001e184:	e8 9f 26 fe ff       	call   c0000828 <strcpy>
c001e189:	83 c4 10             	add    esp,0x10
c001e18c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e190:	83 c0 0c             	add    eax,0xc
c001e193:	83 ec 08             	sub    esp,0x8
c001e196:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e19a:	50                   	push   eax
c001e19b:	e8 88 26 fe ff       	call   c0000828 <strcpy>
c001e1a0:	83 c4 10             	add    esp,0x10
c001e1a3:	83 ec 08             	sub    esp,0x8
c001e1a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e1aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1ae:	e8 0d fe ff ff       	call   c001dfc0 <Process::addArgs(char**)>
c001e1b3:	83 c4 10             	add    esp,0x10
c001e1b6:	83 ec 08             	sub    esp,0x8
c001e1b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1c1:	e8 a6 ed ff ff       	call   c001cf6c <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e1c6:	83 c4 10             	add    esp,0x10
c001e1c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e1cd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e1d1:	83 f0 01             	xor    eax,0x1
c001e1d4:	88 c2                	mov    dl,al
c001e1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1da:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e1e0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e1e5:	83 ec 08             	sub    esp,0x8
c001e1e8:	50                   	push   eax
c001e1e9:	68 3c cf 02 c0       	push   0xc002cf3c
c001e1ee:	e8 ac 4c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001e1f3:	83 c4 10             	add    esp,0x10
c001e1f6:	90                   	nop
c001e1f7:	83 c4 14             	add    esp,0x14
c001e1fa:	5b                   	pop    ebx
c001e1fb:	5e                   	pop    esi
c001e1fc:	c3                   	ret    
c001e1fd:	90                   	nop

c001e1fe <Process::Process(bool, char const*, Process*, char**)>:
c001e1fe:	56                   	push   esi
c001e1ff:	53                   	push   ebx
c001e200:	83 ec 24             	sub    esp,0x24
c001e203:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e207:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e20b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e20f:	05 0c 02 00 00       	add    eax,0x20c
c001e214:	bb 07 00 00 00       	mov    ebx,0x7
c001e219:	89 c6                	mov    esi,eax
c001e21b:	85 db                	test   ebx,ebx
c001e21d:	78 12                	js     c001e231 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e21f:	83 ec 0c             	sub    esp,0xc
c001e222:	56                   	push   esi
c001e223:	e8 0a b5 00 00       	call   c0029732 <ThreadControlBlock::ThreadControlBlock()>
c001e228:	83 c4 10             	add    esp,0x10
c001e22b:	83 c6 63             	add    esi,0x63
c001e22e:	4b                   	dec    ebx
c001e22f:	eb ea                	jmp    c001e21b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e235:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e23c:	83 ec 0c             	sub    esp,0xc
c001e23f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e243:	e8 98 c4 ff ff       	call   c001a6e0 <Krnl::newProcessEnv(Process*)>
c001e248:	83 c4 10             	add    esp,0x10
c001e24b:	89 c2                	mov    edx,eax
c001e24d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e251:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e257:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e25b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e264:	a1 30 e6 02 c0       	mov    eax,ds:0xc002e630
c001e269:	8d 50 01             	lea    edx,[eax+0x1]
c001e26c:	89 15 30 e6 02 c0    	mov    DWORD PTR ds:0xc002e630,edx
c001e272:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e276:	89 02                	mov    DWORD PTR [edx],eax
c001e278:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e280:	83 ec 0c             	sub    esp,0xc
c001e283:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e287:	e8 68 16 ff ff       	call   c000f8f4 <malloc>
c001e28c:	83 c4 10             	add    esp,0x10
c001e28f:	89 c3                	mov    ebx,eax
c001e291:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e296:	83 ec 08             	sub    esp,0x8
c001e299:	50                   	push   eax
c001e29a:	53                   	push   ebx
c001e29b:	e8 da 44 ff ff       	call   c001277a <VAS::VAS(bool)>
c001e2a0:	83 c4 10             	add    esp,0x10
c001e2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2a7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e2ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2b1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e2bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e2c3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e2c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2cd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e2d3:	85 c0                	test   eax,eax
c001e2d5:	74 42                	je     c001e319 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e2d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2db:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e2e1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e2e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2eb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e2f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2f5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e2fb:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e305:	05 0c 01 00 00       	add    eax,0x10c
c001e30a:	83 ec 08             	sub    esp,0x8
c001e30d:	52                   	push   edx
c001e30e:	50                   	push   eax
c001e30f:	e8 14 25 fe ff       	call   c0000828 <strcpy>
c001e314:	83 c4 10             	add    esp,0x10
c001e317:	eb 63                	jmp    c001e37c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e319:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e321:	83 ec 0c             	sub    esp,0xc
c001e324:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e328:	e8 c7 15 ff ff       	call   c000f8f4 <malloc>
c001e32d:	83 c4 10             	add    esp,0x10
c001e330:	89 c3                	mov    ebx,eax
c001e332:	83 ec 08             	sub    esp,0x8
c001e335:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e339:	53                   	push   ebx
c001e33a:	e8 7b 2d ff ff       	call   c00110ba <VgaText::VgaText(char const*)>
c001e33f:	83 c4 10             	add    esp,0x10
c001e342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e346:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e34c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e350:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e356:	83 ec 0c             	sub    esp,0xc
c001e359:	50                   	push   eax
c001e35a:	e8 92 22 ff ff       	call   c00105f1 <addToTerminalCycle(VgaText*)>
c001e35f:	83 c4 10             	add    esp,0x10
c001e362:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e366:	05 0c 01 00 00       	add    eax,0x10c
c001e36b:	83 ec 08             	sub    esp,0x8
c001e36e:	68 0f ce 02 c0       	push   0xc002ce0f
c001e373:	50                   	push   eax
c001e374:	e8 af 24 fe ff       	call   c0000828 <strcpy>
c001e379:	83 c4 10             	add    esp,0x10
c001e37c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e380:	83 c0 0c             	add    eax,0xc
c001e383:	83 ec 08             	sub    esp,0x8
c001e386:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e38a:	50                   	push   eax
c001e38b:	e8 98 24 fe ff       	call   c0000828 <strcpy>
c001e390:	83 c4 10             	add    esp,0x10
c001e393:	83 ec 08             	sub    esp,0x8
c001e396:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e39a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e39e:	e8 1d fc ff ff       	call   c001dfc0 <Process::addArgs(char**)>
c001e3a3:	83 c4 10             	add    esp,0x10
c001e3a6:	90                   	nop
c001e3a7:	83 c4 24             	add    esp,0x24
c001e3aa:	5b                   	pop    ebx
c001e3ab:	5e                   	pop    esi
c001e3ac:	c3                   	ret    

c001e3ad <taskStartupFunction>:
c001e3ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3b2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e3b5:	c3                   	ret    

c001e3b6 <Semaphore::Semaphore(int)>:
c001e3b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e3be:	89 10                	mov    DWORD PTR [eax],edx
c001e3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3c4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e3cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3da:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e3e1:	90                   	nop
c001e3e2:	c3                   	ret    
c001e3e3:	90                   	nop

c001e3e4 <Mutex::Mutex()>:
c001e3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3e8:	6a 01                	push   0x1
c001e3ea:	50                   	push   eax
c001e3eb:	e8 c6 ff ff ff       	call   c001e3b6 <Semaphore::Semaphore(int)>
c001e3f0:	83 c4 08             	add    esp,0x8
c001e3f3:	90                   	nop
c001e3f4:	c3                   	ret    
c001e3f5:	90                   	nop

c001e3f6 <Process::createThread(void (*)(void*), void*, int)>:
c001e3f6:	55                   	push   ebp
c001e3f7:	31 c9                	xor    ecx,ecx
c001e3f9:	57                   	push   edi
c001e3fa:	56                   	push   esi
c001e3fb:	53                   	push   ebx
c001e3fc:	83 ec 1c             	sub    esp,0x1c
c001e3ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e403:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e40a:	89 f2                	mov    edx,esi
c001e40c:	0f b7 c2             	movzx  eax,dx
c001e40f:	83 e2 01             	and    edx,0x1
c001e412:	74 16                	je     c001e42a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e414:	d1 f8                	sar    eax,1
c001e416:	41                   	inc    ecx
c001e417:	89 c2                	mov    edx,eax
c001e419:	83 f9 10             	cmp    ecx,0x10
c001e41c:	75 ee                	jne    c001e40c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e41e:	83 c4 1c             	add    esp,0x1c
c001e421:	31 db                	xor    ebx,ebx
c001e423:	89 d8                	mov    eax,ebx
c001e425:	5b                   	pop    ebx
c001e426:	5e                   	pop    esi
c001e427:	5f                   	pop    edi
c001e428:	5d                   	pop    ebp
c001e429:	c3                   	ret    
c001e42a:	b8 01 00 00 00       	mov    eax,0x1
c001e42f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e432:	d3 e0                	shl    eax,cl
c001e434:	09 c6                	or     esi,eax
c001e436:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e439:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e440:	89 c6                	mov    esi,eax
c001e442:	c1 e6 05             	shl    esi,0x5
c001e445:	01 f0                	add    eax,esi
c001e447:	01 d8                	add    eax,ebx
c001e449:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e450:	75 0a                	jne    c001e45c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e452:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e45c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e462:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e466:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e469:	01 ca                	add    edx,ecx
c001e46b:	83 ec 08             	sub    esp,0x8
c001e46e:	89 d0                	mov    eax,edx
c001e470:	c1 e0 05             	shl    eax,0x5
c001e473:	01 d0                	add    eax,edx
c001e475:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e479:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e47d:	01 d8                	add    eax,ebx
c001e47f:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e485:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e48b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e491:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e497:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e49d:	89 cd                	mov    ebp,ecx
c001e49f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e4a3:	f7 dd                	neg    ebp
c001e4a5:	c1 e5 15             	shl    ebp,0x15
c001e4a8:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e4ae:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e4b4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e4be:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e4c4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e4ce:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e4d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4dc:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e4e3:	53                   	push   ebx
c001e4e4:	68 04 26 03 c0       	push   0xc0032604
c001e4e9:	e8 fe af 00 00       	call   c00294ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4ee:	89 d8                	mov    eax,ebx
c001e4f0:	83 c4 10             	add    esp,0x10
c001e4f3:	83 c4 1c             	add    esp,0x1c
c001e4f6:	5b                   	pop    ebx
c001e4f7:	5e                   	pop    esi
c001e4f8:	5f                   	pop    edi
c001e4f9:	5d                   	pop    ebp
c001e4fa:	c3                   	ret    
c001e4fb:	90                   	nop

c001e4fc <Process::createUserThread()>:
c001e4fc:	83 ec 0c             	sub    esp,0xc
c001e4ff:	68 80 00 00 00       	push   0x80
c001e504:	6a 00                	push   0x0
c001e506:	68 c0 de 01 c0       	push   0xc001dec0
c001e50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e50f:	e8 e2 fe ff ff       	call   c001e3f6 <Process::createThread(void (*)(void*), void*, int)>
c001e514:	83 c4 1c             	add    esp,0x1c
c001e517:	c3                   	ret    

c001e518 <setupMultitasking(void (*)())>:
c001e518:	56                   	push   esi
c001e519:	53                   	push   ebx
c001e51a:	51                   	push   ecx
c001e51b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e51f:	eb 10                	jmp    c001e531 <setupMultitasking(void (*)())+0x19>
c001e521:	83 ec 0c             	sub    esp,0xc
c001e524:	68 04 26 03 c0       	push   0xc0032604
c001e529:	e8 10 af 00 00       	call   c002943e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e52e:	83 c4 10             	add    esp,0x10
c001e531:	83 ec 0c             	sub    esp,0xc
c001e534:	68 04 26 03 c0       	push   0xc0032604
c001e539:	e8 dc ae 00 00       	call   c002941a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e53e:	83 c4 10             	add    esp,0x10
c001e541:	84 c0                	test   al,al
c001e543:	74 dc                	je     c001e521 <setupMultitasking(void (*)())+0x9>
c001e545:	83 ec 0c             	sub    esp,0xc
c001e548:	68 3f 07 00 00       	push   0x73f
c001e54d:	e8 a2 13 ff ff       	call   c000f8f4 <malloc>
c001e552:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e559:	89 c3                	mov    ebx,eax
c001e55b:	6a 00                	push   0x0
c001e55d:	68 13 ce 02 c0       	push   0xc002ce13
c001e562:	6a 01                	push   0x1
c001e564:	50                   	push   eax
c001e565:	e8 94 fc ff ff       	call   c001e1fe <Process::Process(bool, char const*, Process*, char**)>
c001e56a:	83 c4 18             	add    esp,0x18
c001e56d:	89 1d 10 26 03 c0    	mov    DWORD PTR ds:0xc0032610,ebx
c001e573:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e579:	68 64 cf 02 c0       	push   0xc002cf64
c001e57e:	e8 1c 49 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001e583:	58                   	pop    eax
c001e584:	5a                   	pop    edx
c001e585:	6a 63                	push   0x63
c001e587:	68 98 cf 02 c0       	push   0xc002cf98
c001e58c:	e8 0e 49 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001e591:	59                   	pop    ecx
c001e592:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e598:	e8 25 27 ff ff       	call   c0010cc2 <setActiveTerminal(VgaText*)>
c001e59d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e5a5:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e5af:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e5b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e5b8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e5c2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e5c8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e5ce:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e5d8:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e5e2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e5ec:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e5f2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e5fc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e602:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e60c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e612:	58                   	pop    eax
c001e613:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e619:	5a                   	pop    edx
c001e61a:	68 0f ce 02 c0       	push   0xc002ce0f
c001e61f:	50                   	push   eax
c001e620:	e8 03 22 fe ff       	call   c0000828 <strcpy>
c001e625:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e62c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e630:	83 c4 14             	add    esp,0x14
c001e633:	5b                   	pop    ebx
c001e634:	5e                   	pop    esi
c001e635:	e9 1a 1d fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e63a <schedule()>:
c001e63a:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e63f:	85 c0                	test   eax,eax
c001e641:	74 0b                	je     c001e64e <schedule()+0x14>
c001e643:	c7 05 e0 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x1
c001e64d:	c3                   	ret    
c001e64e:	53                   	push   ebx
c001e64f:	83 ec 14             	sub    esp,0x14
c001e652:	68 04 26 03 c0       	push   0xc0032604
c001e657:	e8 be ad 00 00       	call   c002941a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e65c:	83 c4 10             	add    esp,0x10
c001e65f:	84 c0                	test   al,al
c001e661:	75 38                	jne    c001e69b <schedule()+0x61>
c001e663:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e668:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e66b:	4a                   	dec    edx
c001e66c:	74 32                	je     c001e6a0 <schedule()+0x66>
c001e66e:	83 ec 0c             	sub    esp,0xc
c001e671:	68 04 26 03 c0       	push   0xc0032604
c001e676:	e8 bb ad 00 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e67b:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001e682:	89 c3                	mov    ebx,eax
c001e684:	e8 b5 ad 00 00       	call   c002943e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e689:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e693:	e8 7e f8 ff ff       	call   c001df16 <switchToThread(ThreadControlBlock*)>
c001e698:	83 c4 10             	add    esp,0x10
c001e69b:	83 c4 08             	add    esp,0x8
c001e69e:	5b                   	pop    ebx
c001e69f:	c3                   	ret    
c001e6a0:	83 ec 08             	sub    esp,0x8
c001e6a3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e6aa:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e6b0:	68 04 26 03 c0       	push   0xc0032604
c001e6b5:	e8 32 ae 00 00       	call   c00294ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6ba:	83 c4 10             	add    esp,0x10
c001e6bd:	eb af                	jmp    c001e66e <schedule()+0x34>
c001e6bf:	90                   	nop

c001e6c0 <Semaphore::tryAcquire()>:
c001e6c0:	53                   	push   ebx
c001e6c1:	83 ec 08             	sub    esp,0x8
c001e6c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e6c8:	fa                   	cli    
c001e6c9:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e6ce:	8d 50 01             	lea    edx,[eax+0x1]
c001e6d1:	89 15 e8 25 03 c0    	mov    DWORD PTR ds:0xc00325e8,edx
c001e6d7:	8b 15 e4 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325e4
c001e6dd:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e6e0:	89 1d e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,ebx
c001e6e6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e6e9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e6eb:	7c 2a                	jl     c001e717 <Semaphore::tryAcquire()+0x57>
c001e6ed:	89 15 e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,edx
c001e6f3:	85 d2                	test   edx,edx
c001e6f5:	75 0a                	jne    c001e701 <Semaphore::tryAcquire()+0x41>
c001e6f7:	8b 15 e0 25 03 c0    	mov    edx,DWORD PTR ds:0xc00325e0
c001e6fd:	85 d2                	test   edx,edx
c001e6ff:	75 5b                	jne    c001e75c <Semaphore::tryAcquire()+0x9c>
c001e701:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e706:	85 c0                	test   eax,eax
c001e708:	74 07                	je     c001e711 <Semaphore::tryAcquire()+0x51>
c001e70a:	31 c0                	xor    eax,eax
c001e70c:	83 c4 08             	add    esp,0x8
c001e70f:	5b                   	pop    ebx
c001e710:	c3                   	ret    
c001e711:	fb                   	sti    
c001e712:	83 c4 08             	add    esp,0x8
c001e715:	5b                   	pop    ebx
c001e716:	c3                   	ret    
c001e717:	43                   	inc    ebx
c001e718:	89 15 e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,edx
c001e71e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e721:	85 d2                	test   edx,edx
c001e723:	75 1f                	jne    c001e744 <Semaphore::tryAcquire()+0x84>
c001e725:	8b 0d e0 25 03 c0    	mov    ecx,DWORD PTR ds:0xc00325e0
c001e72b:	85 c9                	test   ecx,ecx
c001e72d:	74 15                	je     c001e744 <Semaphore::tryAcquire()+0x84>
c001e72f:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001e739:	e8 fc fe ff ff       	call   c001e63a <schedule()>
c001e73e:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e743:	48                   	dec    eax
c001e744:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e749:	85 c0                	test   eax,eax
c001e74b:	75 08                	jne    c001e755 <Semaphore::tryAcquire()+0x95>
c001e74d:	fb                   	sti    
c001e74e:	b0 01                	mov    al,0x1
c001e750:	83 c4 08             	add    esp,0x8
c001e753:	5b                   	pop    ebx
c001e754:	c3                   	ret    
c001e755:	b0 01                	mov    al,0x1
c001e757:	83 c4 08             	add    esp,0x8
c001e75a:	5b                   	pop    ebx
c001e75b:	c3                   	ret    
c001e75c:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001e766:	e8 cf fe ff ff       	call   c001e63a <schedule()>
c001e76b:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e770:	48                   	dec    eax
c001e771:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e776:	85 c0                	test   eax,eax
c001e778:	75 90                	jne    c001e70a <Semaphore::tryAcquire()+0x4a>
c001e77a:	eb 95                	jmp    c001e711 <Semaphore::tryAcquire()+0x51>

c001e77c <Semaphore::assertLocked(char const*)>:
c001e77c:	83 ec 0c             	sub    esp,0xc
c001e77f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e783:	fa                   	cli    
c001e784:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e78a:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e78f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e792:	89 0d e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,ecx
c001e798:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e79a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e79d:	7c 24                	jl     c001e7c3 <Semaphore::assertLocked(char const*)+0x47>
c001e79f:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001e7a4:	85 c0                	test   eax,eax
c001e7a6:	75 09                	jne    c001e7b1 <Semaphore::assertLocked(char const*)+0x35>
c001e7a8:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001e7ad:	85 c0                	test   eax,eax
c001e7af:	75 29                	jne    c001e7da <Semaphore::assertLocked(char const*)+0x5e>
c001e7b1:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e7b6:	48                   	dec    eax
c001e7b7:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e7bc:	75 01                	jne    c001e7bf <Semaphore::assertLocked(char const*)+0x43>
c001e7be:	fb                   	sti    
c001e7bf:	83 c4 0c             	add    esp,0xc
c001e7c2:	c3                   	ret    
c001e7c3:	83 ec 0c             	sub    esp,0xc
c001e7c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e7ca:	e8 b8 c0 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001e7cf:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e7d4:	83 c4 10             	add    esp,0x10
c001e7d7:	48                   	dec    eax
c001e7d8:	eb c5                	jmp    c001e79f <Semaphore::assertLocked(char const*)+0x23>
c001e7da:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001e7e4:	e8 51 fe ff ff       	call   c001e63a <schedule()>
c001e7e9:	eb c6                	jmp    c001e7b1 <Semaphore::assertLocked(char const*)+0x35>

c001e7eb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e7eb:	83 ec 14             	sub    esp,0x14
c001e7ee:	ff 35 e8 25 03 c0    	push   DWORD PTR ds:0xc00325e8
c001e7f4:	68 bc cf 02 c0       	push   0xc002cfbc
c001e7f9:	e8 a1 46 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001e7fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e803:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e807:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e80a:	e8 2b fe ff ff       	call   c001e63a <schedule()>
c001e80f:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e814:	83 c4 10             	add    esp,0x10
c001e817:	48                   	dec    eax
c001e818:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e81d:	85 c0                	test   eax,eax
c001e81f:	75 06                	jne    c001e827 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e821:	fb                   	sti    
c001e822:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e827:	83 ec 08             	sub    esp,0x8
c001e82a:	50                   	push   eax
c001e82b:	68 f0 cf 02 c0       	push   0xc002cff0
c001e830:	e8 6a 46 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001e835:	83 c4 1c             	add    esp,0x1c
c001e838:	c3                   	ret    

c001e839 <blockTask(TaskState)>:
c001e839:	83 ec 0c             	sub    esp,0xc
c001e83c:	fa                   	cli    
c001e83d:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e843:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e84c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e84f:	e8 e6 fd ff ff       	call   c001e63a <schedule()>
c001e854:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e859:	48                   	dec    eax
c001e85a:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e85f:	75 01                	jne    c001e862 <blockTask(TaskState)+0x29>
c001e861:	fb                   	sti    
c001e862:	83 c4 0c             	add    esp,0xc
c001e865:	c3                   	ret    

c001e866 <waitTask(int, int*, int)>:
c001e866:	83 ec 18             	sub    esp,0x18
c001e869:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e86e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e872:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e875:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e879:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e87e:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e881:	6a 07                	push   0x7
c001e883:	e8 b1 ff ff ff       	call   c001e839 <blockTask(TaskState)>
c001e888:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e88d:	83 c4 10             	add    esp,0x10
c001e890:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e893:	85 d2                	test   edx,edx
c001e895:	74 0a                	je     c001e8a1 <waitTask(int, int*, int)+0x3b>
c001e897:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e89a:	89 02                	mov    DWORD PTR [edx],eax
c001e89c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8a1:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e8a4:	83 c4 0c             	add    esp,0xc
c001e8a7:	c3                   	ret    

c001e8a8 <nanoSleepUntil(unsigned long long)>:
c001e8a8:	83 ec 0c             	sub    esp,0xc
c001e8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8b3:	3b 05 30 f7 02 c0    	cmp    eax,DWORD PTR ds:0xc002f730
c001e8b9:	89 d1                	mov    ecx,edx
c001e8bb:	1b 0d 34 f7 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f734
c001e8c1:	73 04                	jae    c001e8c7 <nanoSleepUntil(unsigned long long)+0x1f>
c001e8c3:	83 c4 0c             	add    esp,0xc
c001e8c6:	c3                   	ret    
c001e8c7:	fa                   	cli    
c001e8c8:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e8ce:	83 ec 08             	sub    esp,0x8
c001e8d1:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c001e8d7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e8dd:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e8e0:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e8e3:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e8e9:	68 f8 25 03 c0       	push   0xc00325f8
c001e8ee:	e8 f9 ab 00 00       	call   c00294ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8f3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e8fa:	e8 3a ff ff ff       	call   c001e839 <blockTask(TaskState)>
c001e8ff:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e904:	83 c4 10             	add    esp,0x10
c001e907:	48                   	dec    eax
c001e908:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001e90d:	85 c0                	test   eax,eax
c001e90f:	75 09                	jne    c001e91a <nanoSleepUntil(unsigned long long)+0x72>
c001e911:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001e916:	85 c0                	test   eax,eax
c001e918:	75 12                	jne    c001e92c <nanoSleepUntil(unsigned long long)+0x84>
c001e91a:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e91f:	48                   	dec    eax
c001e920:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e925:	75 9c                	jne    c001e8c3 <nanoSleepUntil(unsigned long long)+0x1b>
c001e927:	fb                   	sti    
c001e928:	83 c4 0c             	add    esp,0xc
c001e92b:	c3                   	ret    
c001e92c:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001e936:	e8 ff fc ff ff       	call   c001e63a <schedule()>
c001e93b:	eb dd                	jmp    c001e91a <nanoSleepUntil(unsigned long long)+0x72>

c001e93d <nanoSleep(unsigned long long)>:
c001e93d:	a1 30 f7 02 c0       	mov    eax,ds:0xc002f730
c001e942:	8b 15 34 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f734
c001e948:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e94c:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e950:	e9 53 ff ff ff       	jmp    c001e8a8 <nanoSleepUntil(unsigned long long)>

c001e955 <sleep(unsigned long long)>:
c001e955:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e95d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e962:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e966:	01 ca                	add    edx,ecx
c001e968:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e96c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e970:	eb cb                	jmp    c001e93d <nanoSleep(unsigned long long)>

c001e972 <Semaphore::acquire()>:
c001e972:	83 ec 0c             	sub    esp,0xc
c001e975:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e979:	fa                   	cli    
c001e97a:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e97f:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001e985:	8d 48 01             	lea    ecx,[eax+0x1]
c001e988:	89 0d e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,ecx
c001e98e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e991:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e993:	7d 28                	jge    c001e9bd <Semaphore::acquire()+0x4b>
c001e995:	41                   	inc    ecx
c001e996:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e999:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001e99e:	85 c0                	test   eax,eax
c001e9a0:	75 09                	jne    c001e9ab <Semaphore::acquire()+0x39>
c001e9a2:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001e9a7:	85 c0                	test   eax,eax
c001e9a9:	75 4e                	jne    c001e9f9 <Semaphore::acquire()+0x87>
c001e9ab:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001e9b0:	48                   	dec    eax
c001e9b1:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001e9b6:	75 01                	jne    c001e9b9 <Semaphore::acquire()+0x47>
c001e9b8:	fb                   	sti    
c001e9b9:	83 c4 0c             	add    esp,0xc
c001e9bc:	c3                   	ret    
c001e9bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9c2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e9c9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e9cc:	85 c9                	test   ecx,ecx
c001e9ce:	74 3a                	je     c001ea0a <Semaphore::acquire()+0x98>
c001e9d0:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e9d3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9d9:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e9dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9e1:	83 ec 0c             	sub    esp,0xc
c001e9e4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e9e7:	6a 05                	push   0x5
c001e9e9:	e8 4b fe ff ff       	call   c001e839 <blockTask(TaskState)>
c001e9ee:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001e9f3:	83 c4 10             	add    esp,0x10
c001e9f6:	48                   	dec    eax
c001e9f7:	eb a0                	jmp    c001e999 <Semaphore::acquire()+0x27>
c001e9f9:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001ea03:	e8 32 fc ff ff       	call   c001e63a <schedule()>
c001ea08:	eb a1                	jmp    c001e9ab <Semaphore::acquire()+0x39>
c001ea0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea0f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ea12:	eb c8                	jmp    c001e9dc <Semaphore::acquire()+0x6a>

c001ea14 <taskReturned>:
c001ea14:	83 ec 18             	sub    esp,0x18
c001ea17:	68 24 d0 02 c0       	push   0xc002d024
c001ea1c:	e8 66 be ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001ea21:	83 c4 10             	add    esp,0x10
c001ea24:	83 ec 0c             	sub    esp,0xc
c001ea27:	6a 02                	push   0x2
c001ea29:	e8 0b fe ff ff       	call   c001e839 <blockTask(TaskState)>
c001ea2e:	fa                   	cli    
c001ea2f:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001ea35:	e8 00 fc ff ff       	call   c001e63a <schedule()>
c001ea3a:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ea3f:	83 c4 10             	add    esp,0x10
c001ea42:	48                   	dec    eax
c001ea43:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ea48:	85 c0                	test   eax,eax
c001ea4a:	75 d8                	jne    c001ea24 <taskReturned+0x10>
c001ea4c:	fb                   	sti    
c001ea4d:	eb d5                	jmp    c001ea24 <taskReturned+0x10>

c001ea4f <Thr::processFromPID(int)>:
c001ea4f:	57                   	push   edi
c001ea50:	56                   	push   esi
c001ea51:	53                   	push   ebx
c001ea52:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ea56:	83 ec 0c             	sub    esp,0xc
c001ea59:	68 1a ce 02 c0       	push   0xc002ce1a
c001ea5e:	e8 3c 44 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001ea63:	fa                   	cli    
c001ea64:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001ea6a:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001ea71:	e8 c0 a9 00 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea76:	83 c4 10             	add    esp,0x10
c001ea79:	89 c7                	mov    edi,eax
c001ea7b:	eb 14                	jmp    c001ea91 <Thr::processFromPID(int)+0x42>
c001ea7d:	83 ec 0c             	sub    esp,0xc
c001ea80:	68 04 26 03 c0       	push   0xc0032604
c001ea85:	e8 ac a9 00 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea8a:	83 c4 10             	add    esp,0x10
c001ea8d:	39 f8                	cmp    eax,edi
c001ea8f:	74 49                	je     c001eada <Thr::processFromPID(int)+0x8b>
c001ea91:	83 ec 0c             	sub    esp,0xc
c001ea94:	68 04 26 03 c0       	push   0xc0032604
c001ea99:	e8 98 a9 00 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea9e:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001eaa5:	89 c3                	mov    ebx,eax
c001eaa7:	e8 92 a9 00 00       	call   c002943e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eaac:	58                   	pop    eax
c001eaad:	5a                   	pop    edx
c001eaae:	53                   	push   ebx
c001eaaf:	68 04 26 03 c0       	push   0xc0032604
c001eab4:	e8 33 aa 00 00       	call   c00294ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eab9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eabc:	83 c4 10             	add    esp,0x10
c001eabf:	39 30                	cmp    DWORD PTR [eax],esi
c001eac1:	75 ba                	jne    c001ea7d <Thr::processFromPID(int)+0x2e>
c001eac3:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001eac8:	48                   	dec    eax
c001eac9:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001eace:	74 07                	je     c001ead7 <Thr::processFromPID(int)+0x88>
c001ead0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ead3:	5b                   	pop    ebx
c001ead4:	5e                   	pop    esi
c001ead5:	5f                   	pop    edi
c001ead6:	c3                   	ret    
c001ead7:	fb                   	sti    
c001ead8:	eb f6                	jmp    c001ead0 <Thr::processFromPID(int)+0x81>
c001eada:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001eadf:	48                   	dec    eax
c001eae0:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001eae5:	75 01                	jne    c001eae8 <Thr::processFromPID(int)+0x99>
c001eae7:	fb                   	sti    
c001eae8:	83 ec 0c             	sub    esp,0xc
c001eaeb:	68 35 ce 02 c0       	push   0xc002ce35
c001eaf0:	e8 aa 43 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	31 c0                	xor    eax,eax
c001eafa:	5b                   	pop    ebx
c001eafb:	5e                   	pop    esi
c001eafc:	5f                   	pop    edi
c001eafd:	c3                   	ret    

c001eafe <unblockTask(ThreadControlBlock*)>:
c001eafe:	53                   	push   ebx
c001eaff:	83 ec 08             	sub    esp,0x8
c001eb02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb06:	fa                   	cli    
c001eb07:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001eb0d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eb10:	85 c0                	test   eax,eax
c001eb12:	74 66                	je     c001eb7a <unblockTask(ThreadControlBlock*)+0x7c>
c001eb14:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eb17:	48                   	dec    eax
c001eb18:	74 31                	je     c001eb4b <unblockTask(ThreadControlBlock*)+0x4d>
c001eb1a:	83 ec 0c             	sub    esp,0xc
c001eb1d:	68 04 26 03 c0       	push   0xc0032604
c001eb22:	e8 0f a9 00 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb27:	83 c4 10             	add    esp,0x10
c001eb2a:	85 c0                	test   eax,eax
c001eb2c:	75 17                	jne    c001eb45 <unblockTask(ThreadControlBlock*)+0x47>
c001eb2e:	eb 68                	jmp    c001eb98 <unblockTask(ThreadControlBlock*)+0x9a>
c001eb30:	83 ec 08             	sub    esp,0x8
c001eb33:	50                   	push   eax
c001eb34:	68 04 26 03 c0       	push   0xc0032604
c001eb39:	e8 96 ac 00 00       	call   c00297d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001eb3e:	83 c4 10             	add    esp,0x10
c001eb41:	85 c0                	test   eax,eax
c001eb43:	74 53                	je     c001eb98 <unblockTask(ThreadControlBlock*)+0x9a>
c001eb45:	39 c3                	cmp    ebx,eax
c001eb47:	75 e7                	jne    c001eb30 <unblockTask(ThreadControlBlock*)+0x32>
c001eb49:	eb 1c                	jmp    c001eb67 <unblockTask(ThreadControlBlock*)+0x69>
c001eb4b:	83 ec 0c             	sub    esp,0xc
c001eb4e:	68 14 d1 02 c0       	push   0xc002d114
c001eb53:	e8 47 43 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001eb58:	c7 04 24 a0 d0 02 c0 	mov    DWORD PTR [esp],0xc002d0a0
c001eb5f:	e8 3b 43 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001eb64:	83 c4 10             	add    esp,0x10
c001eb67:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001eb6c:	48                   	dec    eax
c001eb6d:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001eb72:	75 01                	jne    c001eb75 <unblockTask(ThreadControlBlock*)+0x77>
c001eb74:	fb                   	sti    
c001eb75:	83 c4 08             	add    esp,0x8
c001eb78:	5b                   	pop    ebx
c001eb79:	c3                   	ret    
c001eb7a:	83 ec 0c             	sub    esp,0xc
c001eb7d:	68 58 d0 02 c0       	push   0xc002d058
c001eb82:	e8 18 43 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001eb87:	c7 04 24 a0 d0 02 c0 	mov    DWORD PTR [esp],0xc002d0a0
c001eb8e:	e8 0c 43 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001eb93:	83 c4 10             	add    esp,0x10
c001eb96:	eb cf                	jmp    c001eb67 <unblockTask(ThreadControlBlock*)+0x69>
c001eb98:	83 ec 08             	sub    esp,0x8
c001eb9b:	53                   	push   ebx
c001eb9c:	68 04 26 03 c0       	push   0xc0032604
c001eba1:	e8 46 a9 00 00       	call   c00294ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eba6:	83 c4 10             	add    esp,0x10
c001eba9:	eb bc                	jmp    c001eb67 <unblockTask(ThreadControlBlock*)+0x69>

c001ebab <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ebab:	55                   	push   ebp
c001ebac:	57                   	push   edi
c001ebad:	56                   	push   esi
c001ebae:	53                   	push   ebx
c001ebaf:	83 ec 1c             	sub    esp,0x1c
c001ebb2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ebb6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebb9:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ebbf:	85 ff                	test   edi,edi
c001ebc1:	7e 20                	jle    c001ebe3 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ebc3:	31 f6                	xor    esi,esi
c001ebc5:	83 ec 0c             	sub    esp,0xc
c001ebc8:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ebcf:	46                   	inc    esi
c001ebd0:	e8 2f 0d ff ff       	call   c000f904 <free>
c001ebd5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebd8:	83 c4 10             	add    esp,0x10
c001ebdb:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ebe1:	7f e2                	jg     c001ebc5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ebe3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ebed:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ebf2:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ebf5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ebf8:	d3 c0                	rol    eax,cl
c001ebfa:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ec01:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec04:	89 f7                	mov    edi,esi
c001ec06:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ec0e:	0f 85 74 01 00 00    	jne    c001ed88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ec14:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ec1a:	85 ed                	test   ebp,ebp
c001ec1c:	74 1b                	je     c001ec39 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ec1e:	83 ec 0c             	sub    esp,0xc
c001ec21:	55                   	push   ebp
c001ec22:	e8 d5 b9 ff ff       	call   c001a5fc <EnvVarContainer::~EnvVarContainer()>
c001ec27:	59                   	pop    ecx
c001ec28:	5e                   	pop    esi
c001ec29:	6a 0c                	push   0xc
c001ec2b:	55                   	push   ebp
c001ec2c:	e8 8e 41 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c001ec31:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec34:	83 c4 10             	add    esp,0x10
c001ec37:	89 f7                	mov    edi,esi
c001ec39:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ec3f:	85 c0                	test   eax,eax
c001ec41:	0f 84 aa 00 00 00    	je     c001ecf1 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ec47:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ec4a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ec4e:	31 c9                	xor    ecx,ecx
c001ec50:	eb 10                	jmp    c001ec62 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ec52:	41                   	inc    ecx
c001ec53:	83 f9 10             	cmp    ecx,0x10
c001ec56:	0f 84 95 00 00 00    	je     c001ecf1 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ec5c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ec62:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ec69:	d3 fa                	sar    edx,cl
c001ec6b:	83 e2 01             	and    edx,0x1
c001ec6e:	74 e2                	je     c001ec52 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec70:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ec73:	01 ca                	add    edx,ecx
c001ec75:	89 d5                	mov    ebp,edx
c001ec77:	c1 e5 05             	shl    ebp,0x5
c001ec7a:	01 ea                	add    edx,ebp
c001ec7c:	01 d0                	add    eax,edx
c001ec7e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ec84:	83 fd 07             	cmp    ebp,0x7
c001ec87:	75 c9                	jne    c001ec52 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec89:	05 40 02 00 00       	add    eax,0x240
c001ec8e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ec91:	83 fd ff             	cmp    ebp,0xffffffff
c001ec94:	0f 8c 08 01 00 00    	jl     c001eda2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001ec9a:	0f 84 b9 01 00 00    	je     c001ee59 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eca0:	85 ed                	test   ebp,ebp
c001eca2:	0f 84 a0 01 00 00    	je     c001ee48 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eca8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ecaa:	75 a6                	jne    c001ec52 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ecac:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ecb2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecb6:	01 d0                	add    eax,edx
c001ecb8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001ecbc:	83 ec 0c             	sub    esp,0xc
c001ecbf:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ecc5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecc8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ecce:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ecd5:	50                   	push   eax
c001ecd6:	e8 23 fe ff ff       	call   c001eafe <unblockTask(ThreadControlBlock*)>
c001ecdb:	83 c4 10             	add    esp,0x10
c001ecde:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ece1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ece5:	89 f7                	mov    edi,esi
c001ece7:	41                   	inc    ecx
c001ece8:	83 f9 10             	cmp    ecx,0x10
c001eceb:	0f 85 6b ff ff ff    	jne    c001ec5c <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ecf1:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ecf7:	85 c0                	test   eax,eax
c001ecf9:	74 5d                	je     c001ed58 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ecfb:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ed01:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ed07:	74 4f                	je     c001ed58 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ed09:	83 ec 0c             	sub    esp,0xc
c001ed0c:	68 04 26 03 c0       	push   0xc0032604
c001ed11:	e8 20 a7 00 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed16:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001ed1d:	89 c7                	mov    edi,eax
c001ed1f:	e8 f6 a6 00 00       	call   c002941a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed24:	83 c4 10             	add    esp,0x10
c001ed27:	84 c0                	test   al,al
c001ed29:	0f 84 e4 00 00 00    	je     c001ee13 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001ed2f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed32:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ed38:	85 d2                	test   edx,edx
c001ed3a:	74 0f                	je     c001ed4b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001ed3c:	83 ec 0c             	sub    esp,0xc
c001ed3f:	8b 02                	mov    eax,DWORD PTR [edx]
c001ed41:	52                   	push   edx
c001ed42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ed45:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed48:	83 c4 10             	add    esp,0x10
c001ed4b:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ed55:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ed58:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ed5e:	85 db                	test   ebx,ebx
c001ed60:	74 16                	je     c001ed78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ed62:	83 ec 0c             	sub    esp,0xc
c001ed65:	53                   	push   ebx
c001ed66:	e8 e9 33 ff ff       	call   c0012154 <VAS::~VAS()>
c001ed6b:	58                   	pop    eax
c001ed6c:	5a                   	pop    edx
c001ed6d:	6a 14                	push   0x14
c001ed6f:	53                   	push   ebx
c001ed70:	e8 4a 40 ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c001ed75:	83 c4 10             	add    esp,0x10
c001ed78:	83 ec 0c             	sub    esp,0xc
c001ed7b:	68 4c ce 02 c0       	push   0xc002ce4c
c001ed80:	e8 1a 41 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001ed85:	83 c4 10             	add    esp,0x10
c001ed88:	83 ec 08             	sub    esp,0x8
c001ed8b:	68 3f 07 00 00       	push   0x73f
c001ed90:	68 5a ce 02 c0       	push   0xc002ce5a
c001ed95:	e8 05 41 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001ed9a:	83 c4 2c             	add    esp,0x2c
c001ed9d:	5b                   	pop    ebx
c001ed9e:	5e                   	pop    esi
c001ed9f:	5f                   	pop    edi
c001eda0:	5d                   	pop    ebp
c001eda1:	c3                   	ret    
c001eda2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eda6:	83 ec 0c             	sub    esp,0xc
c001eda9:	68 58 d1 02 c0       	push   0xc002d158
c001edae:	e8 d4 ba ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001edb3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001edb6:	83 c4 10             	add    esp,0x10
c001edb9:	89 f7                	mov    edi,esi
c001edbb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edbf:	e9 8e fe ff ff       	jmp    c001ec52 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001edc4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001edca:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001edd0:	75 1c                	jne    c001edee <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001edd2:	83 ec 0c             	sub    esp,0xc
c001edd5:	68 c0 d1 02 c0       	push   0xc002d1c0
c001edda:	e8 c0 40 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001eddf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ede6:	e8 4e fa ff ff       	call   c001e839 <blockTask(TaskState)>
c001edeb:	83 c4 10             	add    esp,0x10
c001edee:	83 ec 08             	sub    esp,0x8
c001edf1:	56                   	push   esi
c001edf2:	68 04 26 03 c0       	push   0xc0032604
c001edf7:	e8 f0 a6 00 00       	call   c00294ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001edfc:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001ee03:	e8 2e a6 00 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee08:	83 c4 10             	add    esp,0x10
c001ee0b:	39 f8                	cmp    eax,edi
c001ee0d:	0f 84 1c ff ff ff    	je     c001ed2f <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ee13:	83 ec 0c             	sub    esp,0xc
c001ee16:	68 04 26 03 c0       	push   0xc0032604
c001ee1b:	e8 16 a6 00 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee20:	c7 04 24 04 26 03 c0 	mov    DWORD PTR [esp],0xc0032604
c001ee27:	89 c6                	mov    esi,eax
c001ee29:	e8 10 a6 00 00       	call   c002943e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ee2e:	83 c4 10             	add    esp,0x10
c001ee31:	39 f3                	cmp    ebx,esi
c001ee33:	74 b9                	je     c001edee <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee35:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ee38:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ee3b:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ee41:	75 ab                	jne    c001edee <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee43:	e9 7c ff ff ff       	jmp    c001edc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ee48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee4c:	83 ec 0c             	sub    esp,0xc
c001ee4f:	68 8c d1 02 c0       	push   0xc002d18c
c001ee54:	e9 55 ff ff ff       	jmp    c001edae <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ee59:	8b 36                	mov    esi,DWORD PTR [esi]
c001ee5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee5f:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ee62:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ee65:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ee6b:	01 d7                	add    edi,edx
c001ee6d:	89 f8                	mov    eax,edi
c001ee6f:	e9 44 fe ff ff       	jmp    c001ecb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ee74 <cleanerTaskFunction(void*)>:
c001ee74:	53                   	push   ebx
c001ee75:	83 ec 08             	sub    esp,0x8
c001ee78:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ee7d:	48                   	dec    eax
c001ee7e:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ee83:	75 01                	jne    c001ee86 <cleanerTaskFunction(void*)+0x12>
c001ee85:	fb                   	sti    
c001ee86:	fa                   	cli    
c001ee87:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ee8c:	80 3d cc 25 03 c0 00 	cmp    BYTE PTR ds:0xc00325cc,0x0
c001ee93:	8d 50 01             	lea    edx,[eax+0x1]
c001ee96:	89 15 e8 25 03 c0    	mov    DWORD PTR ds:0xc00325e8,edx
c001ee9c:	0f 84 b9 00 00 00    	je     c001ef5b <cleanerTaskFunction(void*)+0xe7>
c001eea2:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001eea7:	85 c0                	test   eax,eax
c001eea9:	75 01                	jne    c001eeac <cleanerTaskFunction(void*)+0x38>
c001eeab:	fb                   	sti    
c001eeac:	c6 05 cc 25 03 c0 00 	mov    BYTE PTR ds:0xc00325cc,0x0
c001eeb3:	fa                   	cli    
c001eeb4:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001eeba:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c001eec0:	fa                   	cli    
c001eec1:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001eec7:	eb 3e                	jmp    c001ef07 <cleanerTaskFunction(void*)+0x93>
c001eec9:	83 ec 0c             	sub    esp,0xc
c001eecc:	68 ec 25 03 c0       	push   0xc00325ec
c001eed1:	e8 60 a5 00 00       	call   c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eed6:	c7 04 24 ec 25 03 c0 	mov    DWORD PTR [esp],0xc00325ec
c001eedd:	89 c3                	mov    ebx,eax
c001eedf:	e8 5a a5 00 00       	call   c002943e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eee4:	c7 04 24 70 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce70
c001eeeb:	e8 af 3f ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001eef0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eef3:	e8 b3 fc ff ff       	call   c001ebab <cleanupTerminatedTask(ThreadControlBlock*)>
c001eef8:	c7 04 24 89 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce89
c001eeff:	e8 9b 3f ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001ef04:	83 c4 10             	add    esp,0x10
c001ef07:	83 ec 0c             	sub    esp,0xc
c001ef0a:	68 ec 25 03 c0       	push   0xc00325ec
c001ef0f:	e8 06 a5 00 00       	call   c002941a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ef14:	83 c4 10             	add    esp,0x10
c001ef17:	84 c0                	test   al,al
c001ef19:	74 ae                	je     c001eec9 <cleanerTaskFunction(void*)+0x55>
c001ef1b:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001ef20:	48                   	dec    eax
c001ef21:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001ef26:	75 01                	jne    c001ef29 <cleanerTaskFunction(void*)+0xb5>
c001ef28:	fb                   	sti    
c001ef29:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001ef2e:	48                   	dec    eax
c001ef2f:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001ef34:	0f 85 3e ff ff ff    	jne    c001ee78 <cleanerTaskFunction(void*)+0x4>
c001ef3a:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001ef3f:	85 c0                	test   eax,eax
c001ef41:	0f 84 31 ff ff ff    	je     c001ee78 <cleanerTaskFunction(void*)+0x4>
c001ef47:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001ef51:	e8 e4 f6 ff ff       	call   c001e63a <schedule()>
c001ef56:	e9 1d ff ff ff       	jmp    c001ee78 <cleanerTaskFunction(void*)+0x4>
c001ef5b:	83 ec 0c             	sub    esp,0xc
c001ef5e:	6a 02                	push   0x2
c001ef60:	e8 86 f8 ff ff       	call   c001e7eb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ef65:	83 c4 10             	add    esp,0x10
c001ef68:	e9 3f ff ff ff       	jmp    c001eeac <cleanerTaskFunction(void*)+0x38>

c001ef6d <terminateTask(int)>:
c001ef6d:	83 ec 14             	sub    esp,0x14
c001ef70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef75:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ef78:	83 c0 0c             	add    eax,0xc
c001ef7b:	50                   	push   eax
c001ef7c:	68 e8 d1 02 c0       	push   0xc002d1e8
c001ef81:	e8 19 3f ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001ef86:	fa                   	cli    
c001ef87:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001ef8d:	ff 05 e4 25 03 c0    	inc    DWORD PTR ds:0xc00325e4
c001ef93:	fa                   	cli    
c001ef94:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001ef9a:	c7 04 24 9c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce9c
c001efa1:	e8 f9 3e ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001efa6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001efaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efaf:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001efb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efb7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001efba:	5a                   	pop    edx
c001efbb:	59                   	pop    ecx
c001efbc:	50                   	push   eax
c001efbd:	68 ec 25 03 c0       	push   0xc00325ec
c001efc2:	e8 25 a5 00 00       	call   c00294ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001efc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efcc:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001efd3:	c7 04 24 b6 ce 02 c0 	mov    DWORD PTR [esp],0xc002ceb6
c001efda:	e8 c0 3e ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001efdf:	83 c4 10             	add    esp,0x10
c001efe2:	a1 c8 25 03 c0       	mov    eax,ds:0xc00325c8
c001efe7:	85 c0                	test   eax,eax
c001efe9:	0f 84 8d 00 00 00    	je     c001f07c <terminateTask(int)+0x10f>
c001efef:	83 ec 0c             	sub    esp,0xc
c001eff2:	68 d0 ce 02 c0       	push   0xc002ced0
c001eff7:	e8 a3 3e ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001effc:	58                   	pop    eax
c001effd:	c6 05 cc 25 03 c0 01 	mov    BYTE PTR ds:0xc00325cc,0x1
c001f004:	ff 35 c8 25 03 c0    	push   DWORD PTR ds:0xc00325c8
c001f00a:	e8 ef fa ff ff       	call   c001eafe <unblockTask(ThreadControlBlock*)>
c001f00f:	c7 04 24 ea ce 02 c0 	mov    DWORD PTR [esp],0xc002ceea
c001f016:	e8 84 3e ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f01b:	83 c4 10             	add    esp,0x10
c001f01e:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f023:	48                   	dec    eax
c001f024:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001f029:	75 01                	jne    c001f02c <terminateTask(int)+0xbf>
c001f02b:	fb                   	sti    
c001f02c:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001f031:	48                   	dec    eax
c001f032:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001f037:	75 09                	jne    c001f042 <terminateTask(int)+0xd5>
c001f039:	83 3d e0 25 03 c0 00 	cmp    DWORD PTR ds:0xc00325e0,0x0
c001f040:	75 4c                	jne    c001f08e <terminateTask(int)+0x121>
c001f042:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f047:	48                   	dec    eax
c001f048:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001f04d:	75 01                	jne    c001f050 <terminateTask(int)+0xe3>
c001f04f:	fb                   	sti    
c001f050:	83 ec 0c             	sub    esp,0xc
c001f053:	68 22 cf 02 c0       	push   0xc002cf22
c001f058:	e8 42 3e ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	fa                   	cli    
c001f061:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001f067:	e8 ce f5 ff ff       	call   c001e63a <schedule()>
c001f06c:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f071:	48                   	dec    eax
c001f072:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001f077:	75 e7                	jne    c001f060 <terminateTask(int)+0xf3>
c001f079:	fb                   	sti    
c001f07a:	eb e4                	jmp    c001f060 <terminateTask(int)+0xf3>
c001f07c:	83 ec 0c             	sub    esp,0xc
c001f07f:	68 04 cf 02 c0       	push   0xc002cf04
c001f084:	e8 16 3e ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f089:	83 c4 10             	add    esp,0x10
c001f08c:	eb 90                	jmp    c001f01e <terminateTask(int)+0xb1>
c001f08e:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001f098:	e8 9d f5 ff ff       	call   c001e63a <schedule()>
c001f09d:	eb a3                	jmp    c001f042 <terminateTask(int)+0xd5>

c001f09f <Thr::terminateFromIRQ(int)>:
c001f09f:	83 ec 18             	sub    esp,0x18
c001f0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a6:	e8 c2 fe ff ff       	call   c001ef6d <terminateTask(int)>
c001f0ab:	90                   	nop

c001f0ac <Semaphore::release()>:
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0b3:	fa                   	cli    
c001f0b4:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001f0b9:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001f0bf:	8d 48 01             	lea    ecx,[eax+0x1]
c001f0c2:	89 0d e4 25 03 c0    	mov    DWORD PTR ds:0xc00325e4,ecx
c001f0c8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f0cb:	85 c9                	test   ecx,ecx
c001f0cd:	74 3c                	je     c001f10b <Semaphore::release()+0x5f>
c001f0cf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f0d2:	83 ec 0c             	sub    esp,0xc
c001f0d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f0d8:	51                   	push   ecx
c001f0d9:	e8 20 fa ff ff       	call   c001eafe <unblockTask(ThreadControlBlock*)>
c001f0de:	a1 e4 25 03 c0       	mov    eax,ds:0xc00325e4
c001f0e3:	83 c4 10             	add    esp,0x10
c001f0e6:	48                   	dec    eax
c001f0e7:	a3 e4 25 03 c0       	mov    ds:0xc00325e4,eax
c001f0ec:	85 c0                	test   eax,eax
c001f0ee:	75 09                	jne    c001f0f9 <Semaphore::release()+0x4d>
c001f0f0:	a1 e0 25 03 c0       	mov    eax,ds:0xc00325e0
c001f0f5:	85 c0                	test   eax,eax
c001f0f7:	75 17                	jne    c001f110 <Semaphore::release()+0x64>
c001f0f9:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f0fe:	48                   	dec    eax
c001f0ff:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001f104:	75 01                	jne    c001f107 <Semaphore::release()+0x5b>
c001f106:	fb                   	sti    
c001f107:	83 c4 0c             	add    esp,0xc
c001f10a:	c3                   	ret    
c001f10b:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f10e:	eb d7                	jmp    c001f0e7 <Semaphore::release()+0x3b>
c001f110:	c7 05 e0 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325e0,0x0
c001f11a:	e8 1b f5 ff ff       	call   c001e63a <schedule()>
c001f11f:	eb d8                	jmp    c001f0f9 <Semaphore::release()+0x4d>

c001f121 <__static_initialization_and_destruction_0(int, int)>:
c001f121:	83 ec 0c             	sub    esp,0xc
c001f124:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f129:	0f 85 88 00 00 00    	jne    c001f1b7 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f12f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f137:	75 7e                	jne    c001f1b7 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f139:	83 ec 0c             	sub    esp,0xc
c001f13c:	68 04 26 03 c0       	push   0xc0032604
c001f141:	e8 36 a6 00 00       	call   c002977c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f146:	83 c4 10             	add    esp,0x10
c001f149:	83 ec 04             	sub    esp,0x4
c001f14c:	68 d0 df 02 c0       	push   0xc002dfd0
c001f151:	68 04 26 03 c0       	push   0xc0032604
c001f156:	68 30 97 02 c0       	push   0xc0029730
c001f15b:	e8 d9 3b ff ff       	call   c0012d39 <__cxa_atexit>
c001f160:	83 c4 10             	add    esp,0x10
c001f163:	83 ec 0c             	sub    esp,0xc
c001f166:	68 f8 25 03 c0       	push   0xc00325f8
c001f16b:	e8 0c a6 00 00       	call   c002977c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f170:	83 c4 10             	add    esp,0x10
c001f173:	83 ec 04             	sub    esp,0x4
c001f176:	68 d0 df 02 c0       	push   0xc002dfd0
c001f17b:	68 f8 25 03 c0       	push   0xc00325f8
c001f180:	68 30 97 02 c0       	push   0xc0029730
c001f185:	e8 af 3b ff ff       	call   c0012d39 <__cxa_atexit>
c001f18a:	83 c4 10             	add    esp,0x10
c001f18d:	83 ec 0c             	sub    esp,0xc
c001f190:	68 ec 25 03 c0       	push   0xc00325ec
c001f195:	e8 e2 a5 00 00       	call   c002977c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f19a:	83 c4 10             	add    esp,0x10
c001f19d:	83 ec 04             	sub    esp,0x4
c001f1a0:	68 d0 df 02 c0       	push   0xc002dfd0
c001f1a5:	68 ec 25 03 c0       	push   0xc00325ec
c001f1aa:	68 30 97 02 c0       	push   0xc0029730
c001f1af:	e8 85 3b ff ff       	call   c0012d39 <__cxa_atexit>
c001f1b4:	83 c4 10             	add    esp,0x10
c001f1b7:	90                   	nop
c001f1b8:	83 c4 0c             	add    esp,0xc
c001f1bb:	c3                   	ret    

c001f1bc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	83 ec 08             	sub    esp,0x8
c001f1c2:	68 ff ff 00 00       	push   0xffff
c001f1c7:	6a 01                	push   0x1
c001f1c9:	e8 53 ff ff ff       	call   c001f121 <__static_initialization_and_destruction_0(int, int)>
c001f1ce:	83 c4 10             	add    esp,0x10
c001f1d1:	83 c4 0c             	add    esp,0xc
c001f1d4:	c3                   	ret    

c001f1d5 <Vm::inbv(unsigned short)>:
c001f1d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f1d9:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f1de:	75 06                	jne    c001f1e6 <Vm::inbv(unsigned short)+0x11>
c001f1e0:	a0 4c 26 03 c0       	mov    al,ds:0xc003264c
c001f1e5:	c3                   	ret    
c001f1e6:	ec                   	in     al,dx
c001f1e7:	c3                   	ret    

c001f1e8 <Vm::outbv(unsigned short, unsigned char)>:
c001f1e8:	53                   	push   ebx
c001f1e9:	83 ec 08             	sub    esp,0x8
c001f1ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1f4:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f1f9:	75 38                	jne    c001f233 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f1fb:	0f b6 c3             	movzx  eax,bl
c001f1fe:	51                   	push   ecx
c001f1ff:	51                   	push   ecx
c001f200:	50                   	push   eax
c001f201:	68 07 d2 02 c0       	push   0xc002d207
c001f206:	e8 94 3c ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f20b:	8b 15 4c 26 03 c0    	mov    edx,DWORD PTR ds:0xc003264c
c001f211:	83 c4 10             	add    esp,0x10
c001f214:	8d 42 01             	lea    eax,[edx+0x1]
c001f217:	88 9a 60 26 03 c0    	mov    BYTE PTR [edx-0x3ffcd9a0],bl
c001f21d:	a3 4c 26 03 c0       	mov    ds:0xc003264c,eax
c001f222:	83 f8 20             	cmp    eax,0x20
c001f225:	75 0f                	jne    c001f236 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f227:	c7 05 4c 26 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003264c,0x1f
c001f231:	eb 03                	jmp    c001f236 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f233:	88 d8                	mov    al,bl
c001f235:	ee                   	out    dx,al
c001f236:	83 c4 08             	add    esp,0x8
c001f239:	5b                   	pop    ebx
c001f23a:	c3                   	ret    

c001f23b <Vm::realToLinear(unsigned short, unsigned short)>:
c001f23b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f240:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f245:	c1 e0 04             	shl    eax,0x4
c001f248:	01 d0                	add    eax,edx
c001f24a:	c3                   	ret    

c001f24b <Vm::getSegment(unsigned int)>:
c001f24b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f24f:	c1 e8 10             	shr    eax,0x10
c001f252:	c3                   	ret    

c001f253 <Vm::getOffset(unsigned int)>:
c001f253:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f257:	c3                   	ret    

c001f258 <Vm::mainloop2()>:
c001f258:	83 ec 18             	sub    esp,0x18
c001f25b:	fa                   	cli    
c001f25c:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001f262:	6a 02                	push   0x2
c001f264:	c6 05 45 26 03 c0 01 	mov    BYTE PTR ds:0xc0032645,0x1
c001f26b:	e8 7b f5 ff ff       	call   c001e7eb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f275:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f279:	52                   	push   edx
c001f27a:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f27e:	52                   	push   edx
c001f27f:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f283:	52                   	push   edx
c001f284:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f288:	50                   	push   eax
c001f289:	e8 6c 10 fe ff       	call   c00002fa <goToVM86>
c001f28e:	83 c4 2c             	add    esp,0x2c
c001f291:	c3                   	ret    

c001f292 <Vm::mainVm8086Loop(void*)>:
c001f292:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f297:	48                   	dec    eax
c001f298:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001f29d:	75 01                	jne    c001f2a0 <Vm::mainVm8086Loop(void*)+0xe>
c001f29f:	fb                   	sti    
c001f2a0:	eb b6                	jmp    c001f258 <Vm::mainloop2()>

c001f2a2 <Vm::mainloop3(unsigned long)>:
c001f2a2:	83 ec 18             	sub    esp,0x18
c001f2a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f2a9:	fa                   	cli    
c001f2aa:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001f2b0:	6a 02                	push   0x2
c001f2b2:	c6 05 44 26 03 c0 01 	mov    BYTE PTR ds:0xc0032644,0x1
c001f2b9:	a3 40 26 03 c0       	mov    ds:0xc0032640,eax
c001f2be:	e8 28 f5 ff ff       	call   c001e7eb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f2c3:	83 c4 1c             	add    esp,0x1c
c001f2c6:	eb 90                	jmp    c001f258 <Vm::mainloop2()>

c001f2c8 <Vm::initialise8086()>:
c001f2c8:	83 ec 0c             	sub    esp,0xc
c001f2cb:	68 80 00 00 00       	push   0x80
c001f2d0:	6a 00                	push   0x0
c001f2d2:	68 92 f2 01 c0       	push   0xc001f292
c001f2d7:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001f2dd:	e8 14 f1 ff ff       	call   c001e3f6 <Process::createThread(void (*)(void*), void*, int)>
c001f2e2:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f2e9:	a3 48 26 03 c0       	mov    ds:0xc0032648,eax
c001f2ee:	68 00 01 00 00       	push   0x100
c001f2f3:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c001f2f8:	6a 00                	push   0x0
c001f2fa:	6a 00                	push   0x0
c001f2fc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f302:	e8 bf 32 ff ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f307:	83 c4 2c             	add    esp,0x2c
c001f30a:	c3                   	ret    

c001f30b <Vm::finish8086()>:
c001f30b:	53                   	push   ebx
c001f30c:	83 ec 08             	sub    esp,0x8
c001f30f:	fa                   	cli    
c001f310:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001f316:	80 3d 44 26 03 c0 00 	cmp    BYTE PTR ds:0xc0032644,0x0
c001f31d:	75 15                	jne    c001f334 <Vm::finish8086()+0x29>
c001f31f:	e8 16 f3 ff ff       	call   c001e63a <schedule()>
c001f324:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f329:	48                   	dec    eax
c001f32a:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001f32f:	75 de                	jne    c001f30f <Vm::finish8086()+0x4>
c001f331:	fb                   	sti    
c001f332:	eb db                	jmp    c001f30f <Vm::finish8086()+0x4>
c001f334:	83 ec 0c             	sub    esp,0xc
c001f337:	8b 1d 40 26 03 c0    	mov    ebx,DWORD PTR ds:0xc0032640
c001f33d:	ff 35 48 26 03 c0    	push   DWORD PTR ds:0xc0032648
c001f343:	c6 05 44 26 03 c0 00 	mov    BYTE PTR ds:0xc0032644,0x0
c001f34a:	e8 af f7 ff ff       	call   c001eafe <unblockTask(ThreadControlBlock*)>
c001f34f:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f354:	83 c4 10             	add    esp,0x10
c001f357:	8d 50 ff             	lea    edx,[eax-0x1]
c001f35a:	89 15 e8 25 03 c0    	mov    DWORD PTR ds:0xc00325e8,edx
c001f360:	85 d2                	test   edx,edx
c001f362:	75 01                	jne    c001f365 <Vm::finish8086()+0x5a>
c001f364:	fb                   	sti    
c001f365:	89 d8                	mov    eax,ebx
c001f367:	83 c4 08             	add    esp,0x8
c001f36a:	5b                   	pop    ebx
c001f36b:	c3                   	ret    

c001f36c <Vm::getOutput8086(unsigned char*)>:
c001f36c:	57                   	push   edi
c001f36d:	8b 0d 4c 26 03 c0    	mov    ecx,DWORD PTR ds:0xc003264c
c001f373:	56                   	push   esi
c001f374:	be 60 26 03 c0       	mov    esi,0xc0032660
c001f379:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f37d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f37f:	a1 4c 26 03 c0       	mov    eax,ds:0xc003264c
c001f384:	5e                   	pop    esi
c001f385:	c7 05 4c 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003264c,0x0
c001f38f:	5f                   	pop    edi
c001f390:	c3                   	ret    

c001f391 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f391:	55                   	push   ebp
c001f392:	57                   	push   edi
c001f393:	56                   	push   esi
c001f394:	53                   	push   ebx
c001f395:	83 ec 2c             	sub    esp,0x2c
c001f398:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f39c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f3a0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f3a4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f3a8:	fa                   	cli    
c001f3a9:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c001f3af:	0f b6 35 45 26 03 c0 	movzx  esi,BYTE PTR ds:0xc0032645
c001f3b6:	89 f0                	mov    eax,esi
c001f3b8:	84 c0                	test   al,al
c001f3ba:	75 1d                	jne    c001f3d9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f3bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f3c0:	e8 75 f2 ff ff       	call   c001e63a <schedule()>
c001f3c5:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f3ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f3ce:	48                   	dec    eax
c001f3cf:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001f3d4:	75 d2                	jne    c001f3a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f3d6:	fb                   	sti    
c001f3d7:	eb cf                	jmp    c001f3a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f3d9:	a1 48 26 03 c0       	mov    eax,ds:0xc0032648
c001f3de:	c7 05 4c 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003264c,0x0
c001f3e8:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f3ec:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f3f0:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f3f4:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f3f8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f3fc:	50                   	push   eax
c001f3fd:	6a 20                	push   0x20
c001f3ff:	6a 00                	push   0x0
c001f401:	68 60 26 03 c0       	push   0xc0032660
c001f406:	e8 61 13 fe ff       	call   c000076c <memset>
c001f40b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f412:	e8 dd 04 ff ff       	call   c000f8f4 <malloc>
c001f417:	83 c4 0c             	add    esp,0xc
c001f41a:	89 c3                	mov    ebx,eax
c001f41c:	ff 35 10 26 03 c0    	push   DWORD PTR ds:0xc0032610
c001f422:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f426:	50                   	push   eax
c001f427:	e8 d2 3f ff ff       	call   c00133fe <File::File(char const*, Process*)>
c001f42c:	83 c4 10             	add    esp,0x10
c001f42f:	85 db                	test   ebx,ebx
c001f431:	75 0a                	jne    c001f43d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f433:	83 ec 0c             	sub    esp,0xc
c001f436:	68 23 d2 02 c0       	push   0xc002d223
c001f43b:	eb 3e                	jmp    c001f47b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f43d:	50                   	push   eax
c001f43e:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f442:	50                   	push   eax
c001f443:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f447:	50                   	push   eax
c001f448:	53                   	push   ebx
c001f449:	e8 c0 42 ff ff       	call   c001370e <File::stat(unsigned long long*, bool*)>
c001f44e:	83 c4 10             	add    esp,0x10
c001f451:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f456:	74 0a                	je     c001f462 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f458:	83 ec 0c             	sub    esp,0xc
c001f45b:	68 37 d2 02 c0       	push   0xc002d237
c001f460:	eb 19                	jmp    c001f47b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f462:	51                   	push   ecx
c001f463:	51                   	push   ecx
c001f464:	6a 01                	push   0x1
c001f466:	53                   	push   ebx
c001f467:	e8 f6 3f ff ff       	call   c0013462 <File::open(FileOpenMode)>
c001f46c:	83 c4 10             	add    esp,0x10
c001f46f:	85 c0                	test   eax,eax
c001f471:	74 24                	je     c001f497 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f473:	83 ec 0c             	sub    esp,0xc
c001f476:	68 50 d2 02 c0       	push   0xc002d250
c001f47b:	e8 07 b4 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001f480:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f485:	83 c4 10             	add    esp,0x10
c001f488:	48                   	dec    eax
c001f489:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001f48e:	85 c0                	test   eax,eax
c001f490:	75 01                	jne    c001f493 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f492:	fb                   	sti    
c001f493:	31 f6                	xor    esi,esi
c001f495:	eb 58                	jmp    c001f4ef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f497:	0f b7 ed             	movzx  ebp,bp
c001f49a:	50                   	push   eax
c001f49b:	0f b7 ff             	movzx  edi,di
c001f49e:	50                   	push   eax
c001f49f:	55                   	push   ebp
c001f4a0:	57                   	push   edi
c001f4a1:	e8 95 fd ff ff       	call   c001f23b <Vm::realToLinear(unsigned short, unsigned short)>
c001f4a6:	5a                   	pop    edx
c001f4a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f4a9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f4ad:	51                   	push   ecx
c001f4ae:	50                   	push   eax
c001f4af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f4b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f4b7:	53                   	push   ebx
c001f4b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f4bb:	83 c4 14             	add    esp,0x14
c001f4be:	53                   	push   ebx
c001f4bf:	e8 fc 3f ff ff       	call   c00134c0 <File::close()>
c001f4c4:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c001f4c9:	83 c4 10             	add    esp,0x10
c001f4cc:	48                   	dec    eax
c001f4cd:	c6 05 45 26 03 c0 00 	mov    BYTE PTR ds:0xc0032645,0x0
c001f4d4:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c001f4d9:	85 c0                	test   eax,eax
c001f4db:	75 01                	jne    c001f4de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f4dd:	fb                   	sti    
c001f4de:	83 ec 0c             	sub    esp,0xc
c001f4e1:	ff 35 48 26 03 c0    	push   DWORD PTR ds:0xc0032648
c001f4e7:	e8 12 f6 ff ff       	call   c001eafe <unblockTask(ThreadControlBlock*)>
c001f4ec:	83 c4 10             	add    esp,0x10
c001f4ef:	83 c4 2c             	add    esp,0x2c
c001f4f2:	89 f0                	mov    eax,esi
c001f4f4:	5b                   	pop    ebx
c001f4f5:	5e                   	pop    esi
c001f4f6:	5f                   	pop    edi
c001f4f7:	5d                   	pop    ebp
c001f4f8:	c3                   	ret    

c001f4f9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f4f9:	57                   	push   edi
c001f4fa:	56                   	push   esi
c001f4fb:	53                   	push   ebx
c001f4fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f504:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f508:	83 e8 06             	sub    eax,0x6
c001f50b:	0f b7 c0             	movzx  eax,ax
c001f50e:	50                   	push   eax
c001f50f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f514:	50                   	push   eax
c001f515:	e8 21 fd ff ff       	call   c001f23b <Vm::realToLinear(unsigned short, unsigned short)>
c001f51a:	5a                   	pop    edx
c001f51b:	5e                   	pop    esi
c001f51c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f51f:	8d 56 fa             	lea    edx,[esi-0x6]
c001f522:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f528:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f52b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f52e:	83 c2 02             	add    edx,0x2
c001f531:	66 89 10             	mov    WORD PTR [eax],dx
c001f534:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f537:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f53b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f53e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f542:	89 d6                	mov    esi,edx
c001f544:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f54a:	66 81 e6 ff fd       	and    si,0xfdff
c001f54f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f553:	74 07                	je     c001f55c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f555:	89 d6                	mov    esi,edx
c001f557:	66 81 ce 00 02       	or     si,0x200
c001f55c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f560:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f565:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f569:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f571:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f574:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f57c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f57f:	5b                   	pop    ebx
c001f580:	5e                   	pop    esi
c001f581:	5f                   	pop    edi
c001f582:	c3                   	ret    

c001f583 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f583:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f588:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f58d:	c1 e0 04             	shl    eax,0x4
c001f590:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f593:	c3                   	ret    

c001f594 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f594:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f599:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f59e:	c1 e0 04             	shl    eax,0x4
c001f5a1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f5a5:	c3                   	ret    

c001f5a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f5a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5b0:	c1 e0 04             	shl    eax,0x4
c001f5b3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f5b6:	c3                   	ret    

c001f5b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f5b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5c1:	c1 e0 04             	shl    eax,0x4
c001f5c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5c8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f5cb:	c3                   	ret    

c001f5cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f5cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5d1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5d6:	c1 e0 04             	shl    eax,0x4
c001f5d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5dd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f5e1:	c3                   	ret    

c001f5e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f5e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5ec:	c1 e0 04             	shl    eax,0x4
c001f5ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5f3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f5f6:	c3                   	ret    

c001f5f7 <Vm::faultHandler(regs*)>:
c001f5f7:	55                   	push   ebp
c001f5f8:	57                   	push   edi
c001f5f9:	56                   	push   esi
c001f5fa:	53                   	push   ebx
c001f5fb:	83 ec 1c             	sub    esp,0x1c
c001f5fe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f602:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f605:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f608:	0f b7 c1             	movzx  eax,cx
c001f60b:	50                   	push   eax
c001f60c:	0f b7 c3             	movzx  eax,bx
c001f60f:	c1 e3 04             	shl    ebx,0x4
c001f612:	50                   	push   eax
c001f613:	e8 23 fc ff ff       	call   c001f23b <Vm::realToLinear(unsigned short, unsigned short)>
c001f618:	5a                   	pop    edx
c001f619:	89 c5                	mov    ebp,eax
c001f61b:	5e                   	pop    esi
c001f61c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f620:	50                   	push   eax
c001f621:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f625:	50                   	push   eax
c001f626:	e8 10 fc ff ff       	call   c001f23b <Vm::realToLinear(unsigned short, unsigned short)>
c001f62b:	01 cb                	add    ebx,ecx
c001f62d:	89 c6                	mov    esi,eax
c001f62f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f633:	50                   	push   eax
c001f634:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f638:	50                   	push   eax
c001f639:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f63d:	50                   	push   eax
c001f63e:	55                   	push   ebp
c001f63f:	53                   	push   ebx
c001f640:	b3 06                	mov    bl,0x6
c001f642:	68 69 d2 02 c0       	push   0xc002d269
c001f647:	e8 53 38 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f64c:	83 c4 20             	add    esp,0x20
c001f64f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f654:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f659:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f65d:	3c 9d                	cmp    al,0x9d
c001f65f:	0f 84 d7 02 00 00    	je     c001f93c <Vm::faultHandler(regs*)+0x345>
c001f665:	0f 87 a3 00 00 00    	ja     c001f70e <Vm::faultHandler(regs*)+0x117>
c001f66b:	3c 66                	cmp    al,0x66
c001f66d:	0f 84 15 02 00 00    	je     c001f888 <Vm::faultHandler(regs*)+0x291>
c001f673:	77 5f                	ja     c001f6d4 <Vm::faultHandler(regs*)+0xdd>
c001f675:	3c 36                	cmp    al,0x36
c001f677:	0f 84 f1 01 00 00    	je     c001f86e <Vm::faultHandler(regs*)+0x277>
c001f67d:	77 28                	ja     c001f6a7 <Vm::faultHandler(regs*)+0xb0>
c001f67f:	3c 26                	cmp    al,0x26
c001f681:	0f 84 99 01 00 00    	je     c001f820 <Vm::faultHandler(regs*)+0x229>
c001f687:	3c 2e                	cmp    al,0x2e
c001f689:	0f 85 3b 07 00 00    	jne    c001fdca <Vm::faultHandler(regs*)+0x7d3>
c001f68f:	83 ec 0c             	sub    esp,0xc
c001f692:	31 db                	xor    ebx,ebx
c001f694:	68 7e d2 02 c0       	push   0xc002d27e
c001f699:	e8 01 38 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f69e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6a1:	83 c4 10             	add    esp,0x10
c001f6a4:	45                   	inc    ebp
c001f6a5:	eb b2                	jmp    c001f659 <Vm::faultHandler(regs*)+0x62>
c001f6a7:	3c 64                	cmp    al,0x64
c001f6a9:	0f 84 8b 01 00 00    	je     c001f83a <Vm::faultHandler(regs*)+0x243>
c001f6af:	0f 87 9f 01 00 00    	ja     c001f854 <Vm::faultHandler(regs*)+0x25d>
c001f6b5:	3c 3e                	cmp    al,0x3e
c001f6b7:	0f 85 0d 07 00 00    	jne    c001fdca <Vm::faultHandler(regs*)+0x7d3>
c001f6bd:	83 ec 0c             	sub    esp,0xc
c001f6c0:	b3 01                	mov    bl,0x1
c001f6c2:	68 82 d2 02 c0       	push   0xc002d282
c001f6c7:	e8 d3 37 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f6cc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6cf:	83 c4 10             	add    esp,0x10
c001f6d2:	eb d0                	jmp    c001f6a4 <Vm::faultHandler(regs*)+0xad>
c001f6d4:	3c 6d                	cmp    al,0x6d
c001f6d6:	0f 84 af 03 00 00    	je     c001fa8b <Vm::faultHandler(regs*)+0x494>
c001f6dc:	77 15                	ja     c001f6f3 <Vm::faultHandler(regs*)+0xfc>
c001f6de:	3c 67                	cmp    al,0x67
c001f6e0:	0f 84 bf 01 00 00    	je     c001f8a5 <Vm::faultHandler(regs*)+0x2ae>
c001f6e6:	3c 6c                	cmp    al,0x6c
c001f6e8:	0f 84 3f 03 00 00    	je     c001fa2d <Vm::faultHandler(regs*)+0x436>
c001f6ee:	e9 d7 06 00 00       	jmp    c001fdca <Vm::faultHandler(regs*)+0x7d3>
c001f6f3:	3c 6f                	cmp    al,0x6f
c001f6f5:	0f 84 a4 04 00 00    	je     c001fb9f <Vm::faultHandler(regs*)+0x5a8>
c001f6fb:	0f 82 11 04 00 00    	jb     c001fb12 <Vm::faultHandler(regs*)+0x51b>
c001f701:	3c 9c                	cmp    al,0x9c
c001f703:	0f 84 ba 01 00 00    	je     c001f8c3 <Vm::faultHandler(regs*)+0x2cc>
c001f709:	e9 bc 06 00 00       	jmp    c001fdca <Vm::faultHandler(regs*)+0x7d3>
c001f70e:	3c ec                	cmp    al,0xec
c001f710:	0f 84 24 06 00 00    	je     c001fd3a <Vm::faultHandler(regs*)+0x743>
c001f716:	0f 87 93 00 00 00    	ja     c001f7af <Vm::faultHandler(regs*)+0x1b8>
c001f71c:	3c e4                	cmp    al,0xe4
c001f71e:	0f 84 5c 05 00 00    	je     c001fc80 <Vm::faultHandler(regs*)+0x689>
c001f724:	77 6a                	ja     c001f790 <Vm::faultHandler(regs*)+0x199>
c001f726:	3c cd                	cmp    al,0xcd
c001f728:	0f 84 7e 02 00 00    	je     c001f9ac <Vm::faultHandler(regs*)+0x3b5>
c001f72e:	3c cf                	cmp    al,0xcf
c001f730:	0f 85 94 06 00 00    	jne    c001fdca <Vm::faultHandler(regs*)+0x7d3>
c001f736:	83 ec 0c             	sub    esp,0xc
c001f739:	68 c6 d2 02 c0       	push   0xc002d2c6
c001f73e:	e8 5c 37 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f743:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f746:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f749:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f74d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f750:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f754:	0d 00 02 02 00       	or     eax,0x20200
c001f759:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f75c:	56                   	push   esi
c001f75d:	53                   	push   ebx
c001f75e:	52                   	push   edx
c001f75f:	68 cc d2 02 c0       	push   0xc002d2cc
c001f764:	e8 36 37 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f769:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f76d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f773:	66 c1 e8 09          	shr    ax,0x9
c001f777:	83 e0 01             	and    eax,0x1
c001f77a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f77d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f780:	83 c0 06             	add    eax,0x6
c001f783:	25 ff ff 00 00       	and    eax,0xffff
c001f788:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f78b:	e9 95 02 00 00       	jmp    c001fa25 <Vm::faultHandler(regs*)+0x42e>
c001f790:	3c e6                	cmp    al,0xe6
c001f792:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f796:	0f 84 4e 05 00 00    	je     c001fcea <Vm::faultHandler(regs*)+0x6f3>
c001f79c:	0f 82 0a 05 00 00    	jb     c001fcac <Vm::faultHandler(regs*)+0x6b5>
c001f7a2:	3c e7                	cmp    al,0xe7
c001f7a4:	0f 84 69 05 00 00    	je     c001fd13 <Vm::faultHandler(regs*)+0x71c>
c001f7aa:	e9 1b 06 00 00       	jmp    c001fdca <Vm::faultHandler(regs*)+0x7d3>
c001f7af:	3c ef                	cmp    al,0xef
c001f7b1:	0f 84 e6 05 00 00    	je     c001fd9d <Vm::faultHandler(regs*)+0x7a6>
c001f7b7:	77 37                	ja     c001f7f0 <Vm::faultHandler(regs*)+0x1f9>
c001f7b9:	3c ed                	cmp    al,0xed
c001f7bb:	0f 84 a3 05 00 00    	je     c001fd64 <Vm::faultHandler(regs*)+0x76d>
c001f7c1:	3c ee                	cmp    al,0xee
c001f7c3:	0f 85 01 06 00 00    	jne    c001fdca <Vm::faultHandler(regs*)+0x7d3>
c001f7c9:	52                   	push   edx
c001f7ca:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f7cd:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f7d0:	68 67 d3 02 c0       	push   0xc002d367
c001f7d5:	e8 c5 36 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f7da:	59                   	pop    ecx
c001f7db:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f7df:	5b                   	pop    ebx
c001f7e0:	50                   	push   eax
c001f7e1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f7e5:	50                   	push   eax
c001f7e6:	e8 fd f9 ff ff       	call   c001f1e8 <Vm::outbv(unsigned short, unsigned char)>
c001f7eb:	e9 a5 05 00 00       	jmp    c001fd95 <Vm::faultHandler(regs*)+0x79e>
c001f7f0:	3c fa                	cmp    al,0xfa
c001f7f2:	0f 84 f7 01 00 00    	je     c001f9ef <Vm::faultHandler(regs*)+0x3f8>
c001f7f8:	3c fb                	cmp    al,0xfb
c001f7fa:	0f 84 0a 02 00 00    	je     c001fa0a <Vm::faultHandler(regs*)+0x413>
c001f800:	3c f3                	cmp    al,0xf3
c001f802:	0f 85 c2 05 00 00    	jne    c001fdca <Vm::faultHandler(regs*)+0x7d3>
c001f808:	83 ec 0c             	sub    esp,0xc
c001f80b:	68 9f d2 02 c0       	push   0xc002d29f
c001f810:	e8 8a 36 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f815:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f818:	83 c4 10             	add    esp,0x10
c001f81b:	e9 84 fe ff ff       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0xad>
c001f820:	83 ec 0c             	sub    esp,0xc
c001f823:	b3 02                	mov    bl,0x2
c001f825:	68 7a d2 02 c0       	push   0xc002d27a
c001f82a:	e8 70 36 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f82f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f832:	83 c4 10             	add    esp,0x10
c001f835:	e9 6a fe ff ff       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0xad>
c001f83a:	83 ec 0c             	sub    esp,0xc
c001f83d:	b3 03                	mov    bl,0x3
c001f83f:	68 86 d2 02 c0       	push   0xc002d286
c001f844:	e8 56 36 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f849:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f84c:	83 c4 10             	add    esp,0x10
c001f84f:	e9 50 fe ff ff       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0xad>
c001f854:	83 ec 0c             	sub    esp,0xc
c001f857:	b3 04                	mov    bl,0x4
c001f859:	68 8a d2 02 c0       	push   0xc002d28a
c001f85e:	e8 3c 36 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f863:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f866:	83 c4 10             	add    esp,0x10
c001f869:	e9 36 fe ff ff       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0xad>
c001f86e:	83 ec 0c             	sub    esp,0xc
c001f871:	b3 05                	mov    bl,0x5
c001f873:	68 8e d2 02 c0       	push   0xc002d28e
c001f878:	e8 22 36 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f87d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f880:	83 c4 10             	add    esp,0x10
c001f883:	e9 1c fe ff ff       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0xad>
c001f888:	83 ec 0c             	sub    esp,0xc
c001f88b:	68 92 d2 02 c0       	push   0xc002d292
c001f890:	e8 0a 36 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f895:	83 c4 10             	add    esp,0x10
c001f898:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f89b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f8a0:	e9 ff fd ff ff       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0xad>
c001f8a5:	50                   	push   eax
c001f8a6:	50                   	push   eax
c001f8a7:	6a 01                	push   0x1
c001f8a9:	68 97 d2 02 c0       	push   0xc002d297
c001f8ae:	e8 ec 35 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f8b3:	83 c4 10             	add    esp,0x10
c001f8b6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8b9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f8be:	e9 e1 fd ff ff       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0xad>
c001f8c3:	83 ec 0c             	sub    esp,0xc
c001f8c6:	68 a5 d2 02 c0       	push   0xc002d2a5
c001f8cb:	e8 cf 35 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f8d0:	83 c4 10             	add    esp,0x10
c001f8d3:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f8d6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f8db:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f8de:	74 2f                	je     c001f90f <Vm::faultHandler(regs*)+0x318>
c001f8e0:	83 ea 04             	sub    edx,0x4
c001f8e3:	25 ff 0d 00 00       	and    eax,0xdff
c001f8e8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f8ee:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f8f1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f8f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f8fa:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f8fe:	0f 84 bf 04 00 00    	je     c001fdc3 <Vm::faultHandler(regs*)+0x7cc>
c001f904:	80 cc 02             	or     ah,0x2
c001f907:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f90a:	e9 b4 04 00 00       	jmp    c001fdc3 <Vm::faultHandler(regs*)+0x7cc>
c001f90f:	83 ea 02             	sub    edx,0x2
c001f912:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f918:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f91b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f91f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f925:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f929:	74 05                	je     c001f930 <Vm::faultHandler(regs*)+0x339>
c001f92b:	80 cc 02             	or     ah,0x2
c001f92e:	eb 03                	jmp    c001f933 <Vm::faultHandler(regs*)+0x33c>
c001f930:	80 e4 fd             	and    ah,0xfd
c001f933:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f937:	e9 87 04 00 00       	jmp    c001fdc3 <Vm::faultHandler(regs*)+0x7cc>
c001f93c:	83 ec 0c             	sub    esp,0xc
c001f93f:	68 ac d2 02 c0       	push   0xc002d2ac
c001f944:	e8 56 35 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f949:	83 c4 10             	add    esp,0x10
c001f94c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f951:	74 28                	je     c001f97b <Vm::faultHandler(regs*)+0x384>
c001f953:	8b 06                	mov    eax,DWORD PTR [esi]
c001f955:	25 ff 0d 00 00       	and    eax,0xdff
c001f95a:	0d 00 02 02 00       	or     eax,0x20200
c001f95f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f962:	8b 06                	mov    eax,DWORD PTR [esi]
c001f964:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f96a:	c1 e8 09             	shr    eax,0x9
c001f96d:	83 e0 01             	and    eax,0x1
c001f970:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f973:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f976:	83 c0 04             	add    eax,0x4
c001f979:	eb 24                	jmp    c001f99f <Vm::faultHandler(regs*)+0x3a8>
c001f97b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f97e:	0d 00 02 02 00       	or     eax,0x20200
c001f983:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f986:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f989:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f98f:	66 c1 e8 09          	shr    ax,0x9
c001f993:	83 e0 01             	and    eax,0x1
c001f996:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f999:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f99c:	83 c0 02             	add    eax,0x2
c001f99f:	25 ff ff 00 00       	and    eax,0xffff
c001f9a4:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f9a7:	e9 17 04 00 00       	jmp    c001fdc3 <Vm::faultHandler(regs*)+0x7cc>
c001f9ac:	53                   	push   ebx
c001f9ad:	53                   	push   ebx
c001f9ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9b2:	50                   	push   eax
c001f9b3:	68 b2 d2 02 c0       	push   0xc002d2b2
c001f9b8:	e8 e2 34 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f9bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9c1:	83 c4 10             	add    esp,0x10
c001f9c4:	3c ee                	cmp    al,0xee
c001f9c6:	75 10                	jne    c001f9d8 <Vm::faultHandler(regs*)+0x3e1>
c001f9c8:	83 ec 0c             	sub    esp,0xc
c001f9cb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f9ce:	e8 cf f8 ff ff       	call   c001f2a2 <Vm::mainloop3(unsigned long)>
c001f9d3:	e9 c0 03 00 00       	jmp    c001fd98 <Vm::faultHandler(regs*)+0x7a1>
c001f9d8:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f9dc:	83 ec 0c             	sub    esp,0xc
c001f9df:	53                   	push   ebx
c001f9e0:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f9e4:	53                   	push   ebx
c001f9e5:	55                   	push   ebp
c001f9e6:	50                   	push   eax
c001f9e7:	57                   	push   edi
c001f9e8:	e8 0c fb ff ff       	call   c001f4f9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f9ed:	eb 36                	jmp    c001fa25 <Vm::faultHandler(regs*)+0x42e>
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	68 bc d2 02 c0       	push   0xc002d2bc
c001f9f7:	e8 a3 34 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001f9fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fa01:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fa05:	e9 8b 03 00 00       	jmp    c001fd95 <Vm::faultHandler(regs*)+0x79e>
c001fa0a:	83 ec 0c             	sub    esp,0xc
c001fa0d:	68 c1 d2 02 c0       	push   0xc002d2c1
c001fa12:	e8 88 34 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fa17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fa1c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001fa20:	e9 70 03 00 00       	jmp    c001fd95 <Vm::faultHandler(regs*)+0x79e>
c001fa25:	83 c4 20             	add    esp,0x20
c001fa28:	e9 99 03 00 00       	jmp    c001fdc6 <Vm::faultHandler(regs*)+0x7cf>
c001fa2d:	83 ec 0c             	sub    esp,0xc
c001fa30:	68 ff d2 02 c0       	push   0xc002d2ff
c001fa35:	e8 65 34 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fa3a:	83 c4 10             	add    esp,0x10
c001fa3d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fa40:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa45:	74 0d                	je     c001fa54 <Vm::faultHandler(regs*)+0x45d>
c001fa47:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fa4e:	0f 87 9e 01 00 00    	ja     c001fbf2 <Vm::faultHandler(regs*)+0x5fb>
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fa5b:	0f b7 db             	movzx  ebx,bx
c001fa5e:	50                   	push   eax
c001fa5f:	e8 71 f7 ff ff       	call   c001f1d5 <Vm::inbv(unsigned short)>
c001fa64:	83 c4 0c             	add    esp,0xc
c001fa67:	0f b6 c0             	movzx  eax,al
c001fa6a:	50                   	push   eax
c001fa6b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001fa6f:	50                   	push   eax
c001fa70:	53                   	push   ebx
c001fa71:	e8 41 fb ff ff       	call   c001f5b7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001fa76:	83 c4 10             	add    esp,0x10
c001fa79:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fa7c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fa80:	74 03                	je     c001fa85 <Vm::faultHandler(regs*)+0x48e>
c001fa82:	48                   	dec    eax
c001fa83:	eb 01                	jmp    c001fa86 <Vm::faultHandler(regs*)+0x48f>
c001fa85:	40                   	inc    eax
c001fa86:	0f b7 c0             	movzx  eax,ax
c001fa89:	eb 7f                	jmp    c001fb0a <Vm::faultHandler(regs*)+0x513>
c001fa8b:	83 ec 0c             	sub    esp,0xc
c001fa8e:	68 31 d3 02 c0       	push   0xc002d331
c001fa93:	e8 07 34 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fa98:	83 c4 10             	add    esp,0x10
c001fa9b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fa9e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001faa3:	74 0d                	je     c001fab2 <Vm::faultHandler(regs*)+0x4bb>
c001faa5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001faac:	0f 87 40 01 00 00    	ja     c001fbf2 <Vm::faultHandler(regs*)+0x5fb>
c001fab2:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fab5:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001fab9:	0f b7 db             	movzx  ebx,bx
c001fabc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fac1:	74 20                	je     c001fae3 <Vm::faultHandler(regs*)+0x4ec>
c001fac3:	ed                   	in     eax,dx
c001fac4:	51                   	push   ecx
c001fac5:	50                   	push   eax
c001fac6:	56                   	push   esi
c001fac7:	53                   	push   ebx
c001fac8:	e8 15 fb ff ff       	call   c001f5e2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001facd:	83 c4 10             	add    esp,0x10
c001fad0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fad3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fad7:	74 05                	je     c001fade <Vm::faultHandler(regs*)+0x4e7>
c001fad9:	83 e8 04             	sub    eax,0x4
c001fadc:	eb 27                	jmp    c001fb05 <Vm::faultHandler(regs*)+0x50e>
c001fade:	83 c0 04             	add    eax,0x4
c001fae1:	eb 22                	jmp    c001fb05 <Vm::faultHandler(regs*)+0x50e>
c001fae3:	66 ed                	in     ax,dx
c001fae5:	0f b7 c0             	movzx  eax,ax
c001fae8:	52                   	push   edx
c001fae9:	50                   	push   eax
c001faea:	56                   	push   esi
c001faeb:	53                   	push   ebx
c001faec:	e8 db fa ff ff       	call   c001f5cc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001faf1:	83 c4 10             	add    esp,0x10
c001faf4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001faf7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fafb:	74 05                	je     c001fb02 <Vm::faultHandler(regs*)+0x50b>
c001fafd:	83 e8 02             	sub    eax,0x2
c001fb00:	eb 03                	jmp    c001fb05 <Vm::faultHandler(regs*)+0x50e>
c001fb02:	83 c0 02             	add    eax,0x2
c001fb05:	25 ff ff 00 00       	and    eax,0xffff
c001fb0a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fb0d:	e9 b1 02 00 00       	jmp    c001fdc3 <Vm::faultHandler(regs*)+0x7cc>
c001fb12:	83 ec 0c             	sub    esp,0xc
c001fb15:	4b                   	dec    ebx
c001fb16:	68 37 d3 02 c0       	push   0xc002d337
c001fb1b:	e8 7f 33 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fb20:	83 c4 10             	add    esp,0x10
c001fb23:	80 fb 05             	cmp    bl,0x5
c001fb26:	77 0a                	ja     c001fb32 <Vm::faultHandler(regs*)+0x53b>
c001fb28:	0f b6 db             	movzx  ebx,bl
c001fb2b:	ff 24 9d a8 d3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2c58]
c001fb32:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fb36:	eb 1b                	jmp    c001fb53 <Vm::faultHandler(regs*)+0x55c>
c001fb38:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fb3c:	eb 15                	jmp    c001fb53 <Vm::faultHandler(regs*)+0x55c>
c001fb3e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fb42:	eb 0f                	jmp    c001fb53 <Vm::faultHandler(regs*)+0x55c>
c001fb44:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fb48:	eb 09                	jmp    c001fb53 <Vm::faultHandler(regs*)+0x55c>
c001fb4a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fb4d:	eb 04                	jmp    c001fb53 <Vm::faultHandler(regs*)+0x55c>
c001fb4f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fb53:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fb58:	74 0d                	je     c001fb67 <Vm::faultHandler(regs*)+0x570>
c001fb5a:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fb61:	0f 87 8b 00 00 00    	ja     c001fbf2 <Vm::faultHandler(regs*)+0x5fb>
c001fb67:	53                   	push   ebx
c001fb68:	53                   	push   ebx
c001fb69:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fb6d:	52                   	push   edx
c001fb6e:	50                   	push   eax
c001fb6f:	e8 0f fa ff ff       	call   c001f583 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fb74:	5e                   	pop    esi
c001fb75:	0f b6 c0             	movzx  eax,al
c001fb78:	5d                   	pop    ebp
c001fb79:	50                   	push   eax
c001fb7a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fb7e:	50                   	push   eax
c001fb7f:	e8 64 f6 ff ff       	call   c001f1e8 <Vm::outbv(unsigned short, unsigned char)>
c001fb84:	83 c4 10             	add    esp,0x10
c001fb87:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fb8a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb8e:	74 03                	je     c001fb93 <Vm::faultHandler(regs*)+0x59c>
c001fb90:	48                   	dec    eax
c001fb91:	eb 01                	jmp    c001fb94 <Vm::faultHandler(regs*)+0x59d>
c001fb93:	40                   	inc    eax
c001fb94:	0f b7 c0             	movzx  eax,ax
c001fb97:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fb9a:	e9 24 02 00 00       	jmp    c001fdc3 <Vm::faultHandler(regs*)+0x7cc>
c001fb9f:	83 ec 0c             	sub    esp,0xc
c001fba2:	4b                   	dec    ebx
c001fba3:	68 37 d3 02 c0       	push   0xc002d337
c001fba8:	e8 f2 32 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fbad:	83 c4 10             	add    esp,0x10
c001fbb0:	80 fb 05             	cmp    bl,0x5
c001fbb3:	77 0a                	ja     c001fbbf <Vm::faultHandler(regs*)+0x5c8>
c001fbb5:	0f b6 db             	movzx  ebx,bl
c001fbb8:	ff 24 9d c0 d3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2c40]
c001fbbf:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fbc3:	eb 1b                	jmp    c001fbe0 <Vm::faultHandler(regs*)+0x5e9>
c001fbc5:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fbc9:	eb 15                	jmp    c001fbe0 <Vm::faultHandler(regs*)+0x5e9>
c001fbcb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fbcf:	eb 0f                	jmp    c001fbe0 <Vm::faultHandler(regs*)+0x5e9>
c001fbd1:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fbd5:	eb 09                	jmp    c001fbe0 <Vm::faultHandler(regs*)+0x5e9>
c001fbd7:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fbda:	eb 04                	jmp    c001fbe0 <Vm::faultHandler(regs*)+0x5e9>
c001fbdc:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fbe0:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fbe3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fbe8:	74 39                	je     c001fc23 <Vm::faultHandler(regs*)+0x62c>
c001fbea:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fbf0:	76 31                	jbe    c001fc23 <Vm::faultHandler(regs*)+0x62c>
c001fbf2:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fbf6:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fbfa:	51                   	push   ecx
c001fbfb:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fbff:	51                   	push   ecx
c001fc00:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc04:	51                   	push   ecx
c001fc05:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc09:	51                   	push   ecx
c001fc0a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc0e:	52                   	push   edx
c001fc0f:	50                   	push   eax
c001fc10:	50                   	push   eax
c001fc11:	68 04 d3 02 c0       	push   0xc002d304
c001fc16:	e8 84 32 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fc1b:	83 c4 20             	add    esp,0x20
c001fc1e:	e9 fb 01 00 00       	jmp    c001fe1e <Vm::faultHandler(regs*)+0x827>
c001fc23:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fc26:	0f b7 d3             	movzx  edx,bx
c001fc29:	81 e6 00 04 00 00    	and    esi,0x400
c001fc2f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fc32:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc37:	74 1d                	je     c001fc56 <Vm::faultHandler(regs*)+0x65f>
c001fc39:	51                   	push   ecx
c001fc3a:	51                   	push   ecx
c001fc3b:	52                   	push   edx
c001fc3c:	50                   	push   eax
c001fc3d:	e8 64 f9 ff ff       	call   c001f5a6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fc42:	83 c4 10             	add    esp,0x10
c001fc45:	89 ea                	mov    edx,ebp
c001fc47:	ef                   	out    dx,eax
c001fc48:	85 f6                	test   esi,esi
c001fc4a:	74 05                	je     c001fc51 <Vm::faultHandler(regs*)+0x65a>
c001fc4c:	83 eb 04             	sub    ebx,0x4
c001fc4f:	eb 21                	jmp    c001fc72 <Vm::faultHandler(regs*)+0x67b>
c001fc51:	83 c3 04             	add    ebx,0x4
c001fc54:	eb 1c                	jmp    c001fc72 <Vm::faultHandler(regs*)+0x67b>
c001fc56:	51                   	push   ecx
c001fc57:	51                   	push   ecx
c001fc58:	52                   	push   edx
c001fc59:	50                   	push   eax
c001fc5a:	e8 35 f9 ff ff       	call   c001f594 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fc5f:	83 c4 10             	add    esp,0x10
c001fc62:	89 ea                	mov    edx,ebp
c001fc64:	66 ef                	out    dx,ax
c001fc66:	85 f6                	test   esi,esi
c001fc68:	74 05                	je     c001fc6f <Vm::faultHandler(regs*)+0x678>
c001fc6a:	83 eb 02             	sub    ebx,0x2
c001fc6d:	eb 03                	jmp    c001fc72 <Vm::faultHandler(regs*)+0x67b>
c001fc6f:	83 c3 02             	add    ebx,0x2
c001fc72:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fc78:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fc7b:	e9 43 01 00 00       	jmp    c001fdc3 <Vm::faultHandler(regs*)+0x7cc>
c001fc80:	53                   	push   ebx
c001fc81:	53                   	push   ebx
c001fc82:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc86:	50                   	push   eax
c001fc87:	68 3d d3 02 c0       	push   0xc002d33d
c001fc8c:	e8 0e 32 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fc91:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fc98:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc9c:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc9f:	e8 31 f5 ff ff       	call   c001f1d5 <Vm::inbv(unsigned short)>
c001fca4:	0f b6 c0             	movzx  eax,al
c001fca7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fcaa:	eb 5e                	jmp    c001fd0a <Vm::faultHandler(regs*)+0x713>
c001fcac:	51                   	push   ecx
c001fcad:	51                   	push   ecx
c001fcae:	53                   	push   ebx
c001fcaf:	68 43 d3 02 c0       	push   0xc002d343
c001fcb4:	e8 e6 31 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fcc1:	74 07                	je     c001fcca <Vm::faultHandler(regs*)+0x6d3>
c001fcc3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fcc7:	ed                   	in     eax,dx
c001fcc8:	eb 14                	jmp    c001fcde <Vm::faultHandler(regs*)+0x6e7>
c001fcca:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fccd:	66 31 db             	xor    bx,bx
c001fcd0:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fcd3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fcd7:	66 ed                	in     ax,dx
c001fcd9:	0f b7 c0             	movzx  eax,ax
c001fcdc:	09 d8                	or     eax,ebx
c001fcde:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fce1:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fce5:	e9 dc 00 00 00       	jmp    c001fdc6 <Vm::faultHandler(regs*)+0x7cf>
c001fcea:	50                   	push   eax
c001fceb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fcee:	53                   	push   ebx
c001fcef:	68 49 d3 02 c0       	push   0xc002d349
c001fcf4:	e8 a6 31 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fcf9:	58                   	pop    eax
c001fcfa:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fcfe:	5a                   	pop    edx
c001fcff:	50                   	push   eax
c001fd00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd04:	50                   	push   eax
c001fd05:	e8 de f4 ff ff       	call   c001f1e8 <Vm::outbv(unsigned short, unsigned char)>
c001fd0a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fd0e:	e9 85 00 00 00       	jmp    c001fd98 <Vm::faultHandler(regs*)+0x7a1>
c001fd13:	50                   	push   eax
c001fd14:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fd17:	53                   	push   ebx
c001fd18:	68 52 d3 02 c0       	push   0xc002d352
c001fd1d:	e8 7d 31 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fd22:	83 c4 10             	add    esp,0x10
c001fd25:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd29:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd2e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fd31:	74 03                	je     c001fd36 <Vm::faultHandler(regs*)+0x73f>
c001fd33:	ef                   	out    dx,eax
c001fd34:	eb ab                	jmp    c001fce1 <Vm::faultHandler(regs*)+0x6ea>
c001fd36:	66 ef                	out    dx,ax
c001fd38:	eb a7                	jmp    c001fce1 <Vm::faultHandler(regs*)+0x6ea>
c001fd3a:	55                   	push   ebp
c001fd3b:	55                   	push   ebp
c001fd3c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fd3f:	68 5b d3 02 c0       	push   0xc002d35b
c001fd44:	e8 56 31 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fd49:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fd50:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fd54:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd57:	e8 79 f4 ff ff       	call   c001f1d5 <Vm::inbv(unsigned short)>
c001fd5c:	0f b6 c0             	movzx  eax,al
c001fd5f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fd62:	eb 31                	jmp    c001fd95 <Vm::faultHandler(regs*)+0x79e>
c001fd64:	56                   	push   esi
c001fd65:	56                   	push   esi
c001fd66:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fd69:	68 61 d3 02 c0       	push   0xc002d361
c001fd6e:	e8 2c 31 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fd73:	83 c4 10             	add    esp,0x10
c001fd76:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fd79:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd7e:	74 03                	je     c001fd83 <Vm::faultHandler(regs*)+0x78c>
c001fd80:	ed                   	in     eax,dx
c001fd81:	eb 0d                	jmp    c001fd90 <Vm::faultHandler(regs*)+0x799>
c001fd83:	66 ed                	in     ax,dx
c001fd85:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fd88:	0f b7 c0             	movzx  eax,ax
c001fd8b:	66 31 d2             	xor    dx,dx
c001fd8e:	09 d0                	or     eax,edx
c001fd90:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fd93:	eb 2e                	jmp    c001fdc3 <Vm::faultHandler(regs*)+0x7cc>
c001fd95:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fd98:	83 c4 10             	add    esp,0x10
c001fd9b:	eb 29                	jmp    c001fdc6 <Vm::faultHandler(regs*)+0x7cf>
c001fd9d:	50                   	push   eax
c001fd9e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fda1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fda4:	68 70 d3 02 c0       	push   0xc002d370
c001fda9:	e8 f1 30 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fdae:	83 c4 10             	add    esp,0x10
c001fdb1:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fdb4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fdb9:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fdbc:	74 03                	je     c001fdc1 <Vm::faultHandler(regs*)+0x7ca>
c001fdbe:	ef                   	out    dx,eax
c001fdbf:	eb 02                	jmp    c001fdc3 <Vm::faultHandler(regs*)+0x7cc>
c001fdc1:	66 ef                	out    dx,ax
c001fdc3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fdc6:	b0 01                	mov    al,0x1
c001fdc8:	eb 56                	jmp    c001fe20 <Vm::faultHandler(regs*)+0x829>
c001fdca:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fdce:	51                   	push   ecx
c001fdcf:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fdd3:	51                   	push   ecx
c001fdd4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fdd8:	51                   	push   ecx
c001fdd9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fddd:	51                   	push   ecx
c001fdde:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fde2:	52                   	push   edx
c001fde3:	50                   	push   eax
c001fde4:	50                   	push   eax
c001fde5:	68 79 d3 02 c0       	push   0xc002d379
c001fdea:	e8 b0 30 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c001fdef:	83 c4 20             	add    esp,0x20
c001fdf2:	83 ec 0c             	sub    esp,0xc
c001fdf5:	6a 60                	push   0x60
c001fdf7:	e8 d9 f3 ff ff       	call   c001f1d5 <Vm::inbv(unsigned short)>
c001fdfc:	83 c4 10             	add    esp,0x10
c001fdff:	3c 1c                	cmp    al,0x1c
c001fe01:	74 04                	je     c001fe07 <Vm::faultHandler(regs*)+0x810>
c001fe03:	3c 5a                	cmp    al,0x5a
c001fe05:	75 eb                	jne    c001fdf2 <Vm::faultHandler(regs*)+0x7fb>
c001fe07:	3c 1c                	cmp    al,0x1c
c001fe09:	74 04                	je     c001fe0f <Vm::faultHandler(regs*)+0x818>
c001fe0b:	3c 5a                	cmp    al,0x5a
c001fe0d:	75 0f                	jne    c001fe1e <Vm::faultHandler(regs*)+0x827>
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	6a 60                	push   0x60
c001fe14:	e8 bc f3 ff ff       	call   c001f1d5 <Vm::inbv(unsigned short)>
c001fe19:	83 c4 10             	add    esp,0x10
c001fe1c:	eb e9                	jmp    c001fe07 <Vm::faultHandler(regs*)+0x810>
c001fe1e:	31 c0                	xor    eax,eax
c001fe20:	83 c4 1c             	add    esp,0x1c
c001fe23:	5b                   	pop    ebx
c001fe24:	5e                   	pop    esi
c001fe25:	5f                   	pop    edi
c001fe26:	5d                   	pop    ebp
c001fe27:	c3                   	ret    

c001fe28 <Vm::fpuInternalTo32(unsigned long long)>:
c001fe28:	57                   	push   edi
c001fe29:	56                   	push   esi
c001fe2a:	53                   	push   ebx
c001fe2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe33:	89 d6                	mov    esi,edx
c001fe35:	89 d7                	mov    edi,edx
c001fe37:	89 c1                	mov    ecx,eax
c001fe39:	c1 ef 14             	shr    edi,0x14
c001fe3c:	89 d3                	mov    ebx,edx
c001fe3e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fe44:	31 d2                	xor    edx,edx
c001fe46:	89 f8                	mov    eax,edi
c001fe48:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fe4e:	bf ff 00 00 00       	mov    edi,0xff
c001fe53:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fe58:	83 d2 ff             	adc    edx,0xffffffff
c001fe5b:	39 c7                	cmp    edi,eax
c001fe5d:	bf 00 00 00 00       	mov    edi,0x0
c001fe62:	19 d7                	sbb    edi,edx
c001fe64:	72 15                	jb     c001fe7b <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fe66:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fe6a:	c1 e0 17             	shl    eax,0x17
c001fe6d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fe73:	09 f1                	or     ecx,esi
c001fe75:	09 c1                	or     ecx,eax
c001fe77:	89 cf                	mov    edi,ecx
c001fe79:	eb 02                	jmp    c001fe7d <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fe7b:	31 ff                	xor    edi,edi
c001fe7d:	89 f8                	mov    eax,edi
c001fe7f:	5b                   	pop    ebx
c001fe80:	5e                   	pop    esi
c001fe81:	5f                   	pop    edi
c001fe82:	c3                   	ret    

c001fe83 <Vm::fpuInternalTo64(unsigned long long)>:
c001fe83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe8b:	c3                   	ret    

c001fe8c <Vm::fpu32ToInternal(unsigned int)>:
c001fe8c:	57                   	push   edi
c001fe8d:	31 ff                	xor    edi,edi
c001fe8f:	56                   	push   esi
c001fe90:	53                   	push   ebx
c001fe91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fe95:	89 cb                	mov    ebx,ecx
c001fe97:	89 ce                	mov    esi,ecx
c001fe99:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fe9f:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fea5:	c1 e9 17             	shr    ecx,0x17
c001fea8:	89 f0                	mov    eax,esi
c001feaa:	0f b6 d1             	movzx  edx,cl
c001fead:	81 c2 80 03 00 00    	add    edx,0x380
c001feb3:	89 d1                	mov    ecx,edx
c001feb5:	89 fa                	mov    edx,edi
c001feb7:	c1 e1 14             	shl    ecx,0x14
c001feba:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001febe:	c1 e0 1d             	shl    eax,0x1d
c001fec1:	89 d7                	mov    edi,edx
c001fec3:	89 c6                	mov    esi,eax
c001fec5:	89 ca                	mov    edx,ecx
c001fec7:	89 f0                	mov    eax,esi
c001fec9:	09 fa                	or     edx,edi
c001fecb:	09 da                	or     edx,ebx
c001fecd:	5b                   	pop    ebx
c001fece:	5e                   	pop    esi
c001fecf:	5f                   	pop    edi
c001fed0:	c3                   	ret    

c001fed1 <Vm::fpu64ToInternal(unsigned long long)>:
c001fed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fed5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fed9:	c3                   	ret    

c001feda <Vm::fpuFloatToLong(unsigned long long)>:
c001feda:	57                   	push   edi
c001fedb:	31 c0                	xor    eax,eax
c001fedd:	56                   	push   esi
c001fede:	31 d2                	xor    edx,edx
c001fee0:	53                   	push   ebx
c001fee1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fee5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fee9:	89 d9                	mov    ecx,ebx
c001feeb:	c1 e9 14             	shr    ecx,0x14
c001feee:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fef4:	89 cf                	mov    edi,ecx
c001fef6:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fefc:	78 33                	js     c001ff31 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fefe:	89 d9                	mov    ecx,ebx
c001ff00:	89 f0                	mov    eax,esi
c001ff02:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ff08:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ff0e:	89 ca                	mov    edx,ecx
c001ff10:	b9 34 00 00 00       	mov    ecx,0x34
c001ff15:	29 f9                	sub    ecx,edi
c001ff17:	0f ad d0             	shrd   eax,edx,cl
c001ff1a:	d3 fa                	sar    edx,cl
c001ff1c:	f6 c1 20             	test   cl,0x20
c001ff1f:	74 05                	je     c001ff26 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ff21:	89 d0                	mov    eax,edx
c001ff23:	c1 fa 1f             	sar    edx,0x1f
c001ff26:	85 db                	test   ebx,ebx
c001ff28:	79 07                	jns    c001ff31 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ff2a:	f7 d8                	neg    eax
c001ff2c:	83 d2 00             	adc    edx,0x0
c001ff2f:	f7 da                	neg    edx
c001ff31:	5b                   	pop    ebx
c001ff32:	5e                   	pop    esi
c001ff33:	5f                   	pop    edi
c001ff34:	c3                   	ret    

c001ff35 <Vm::fpuULongToFloat(unsigned long long)>:
c001ff35:	57                   	push   edi
c001ff36:	31 c9                	xor    ecx,ecx
c001ff38:	56                   	push   esi
c001ff39:	53                   	push   ebx
c001ff3a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff3e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ff42:	0f ba e7 14          	bt     edi,0x14
c001ff46:	72 07                	jb     c001ff4f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ff48:	01 f6                	add    esi,esi
c001ff4a:	11 ff                	adc    edi,edi
c001ff4c:	41                   	inc    ecx
c001ff4d:	eb f3                	jmp    c001ff42 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ff4f:	89 fa                	mov    edx,edi
c001ff51:	89 f0                	mov    eax,esi
c001ff53:	bb 33 04 00 00       	mov    ebx,0x433
c001ff58:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ff5e:	29 cb                	sub    ebx,ecx
c001ff60:	89 d9                	mov    ecx,ebx
c001ff62:	5b                   	pop    ebx
c001ff63:	c1 e1 14             	shl    ecx,0x14
c001ff66:	5e                   	pop    esi
c001ff67:	09 ca                	or     edx,ecx
c001ff69:	5f                   	pop    edi
c001ff6a:	c3                   	ret    

c001ff6b <Vm::fpuLongToFloat(long long)>:
c001ff6b:	56                   	push   esi
c001ff6c:	31 c0                	xor    eax,eax
c001ff6e:	53                   	push   ebx
c001ff6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff77:	39 c8                	cmp    eax,ecx
c001ff79:	19 d8                	sbb    eax,ebx
c001ff7b:	7d 04                	jge    c001ff81 <Vm::fpuLongToFloat(long long)+0x16>
c001ff7d:	31 f6                	xor    esi,esi
c001ff7f:	eb 0c                	jmp    c001ff8d <Vm::fpuLongToFloat(long long)+0x22>
c001ff81:	f7 d9                	neg    ecx
c001ff83:	be 01 00 00 00       	mov    esi,0x1
c001ff88:	83 d3 00             	adc    ebx,0x0
c001ff8b:	f7 db                	neg    ebx
c001ff8d:	31 c0                	xor    eax,eax
c001ff8f:	0f ba e3 14          	bt     ebx,0x14
c001ff93:	72 07                	jb     c001ff9c <Vm::fpuLongToFloat(long long)+0x31>
c001ff95:	01 c9                	add    ecx,ecx
c001ff97:	11 db                	adc    ebx,ebx
c001ff99:	40                   	inc    eax
c001ff9a:	eb f3                	jmp    c001ff8f <Vm::fpuLongToFloat(long long)+0x24>
c001ff9c:	ba 33 04 00 00       	mov    edx,0x433
c001ffa1:	29 c2                	sub    edx,eax
c001ffa3:	89 c8                	mov    eax,ecx
c001ffa5:	c1 e2 14             	shl    edx,0x14
c001ffa8:	89 d9                	mov    ecx,ebx
c001ffaa:	89 f3                	mov    ebx,esi
c001ffac:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ffb2:	09 ca                	or     edx,ecx
c001ffb4:	84 db                	test   bl,bl
c001ffb6:	74 06                	je     c001ffbe <Vm::fpuLongToFloat(long long)+0x53>
c001ffb8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ffbe:	5b                   	pop    ebx
c001ffbf:	5e                   	pop    esi
c001ffc0:	c3                   	ret    

c001ffc1 <Vm::fpuGet0()>:
c001ffc1:	31 c0                	xor    eax,eax
c001ffc3:	31 d2                	xor    edx,edx
c001ffc5:	c3                   	ret    

c001ffc6 <Vm::fpuGet1()>:
c001ffc6:	b8 01 00 00 00       	mov    eax,0x1
c001ffcb:	31 d2                	xor    edx,edx
c001ffcd:	c3                   	ret    

c001ffce <Vm::fpuGetPi()>:
c001ffce:	b8 03 00 00 00       	mov    eax,0x3
c001ffd3:	31 d2                	xor    edx,edx
c001ffd5:	c3                   	ret    

c001ffd6 <Vm::fpuGetLog2E()>:
c001ffd6:	83 ec 18             	sub    esp,0x18
c001ffd9:	68 d8 d3 02 c0       	push   0xc002d3d8
c001ffde:	e8 a4 a8 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001ffe3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ffe8:	31 d2                	xor    edx,edx
c001ffea:	83 c4 1c             	add    esp,0x1c
c001ffed:	c3                   	ret    

c001ffee <Vm::fpuGetLogE2()>:
c001ffee:	83 ec 18             	sub    esp,0x18
c001fff1:	68 e4 d3 02 c0       	push   0xc002d3e4
c001fff6:	e8 8c a8 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c001fffb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020000:	31 d2                	xor    edx,edx
c0020002:	83 c4 1c             	add    esp,0x1c
c0020005:	c3                   	ret    

c0020006 <Vm::fpuGetLog210()>:
c0020006:	83 ec 18             	sub    esp,0x18
c0020009:	68 f0 d3 02 c0       	push   0xc002d3f0
c002000e:	e8 74 a8 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0020013:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020018:	31 d2                	xor    edx,edx
c002001a:	83 c4 1c             	add    esp,0x1c
c002001d:	c3                   	ret    

c002001e <Vm::fpuGetLog102()>:
c002001e:	83 ec 18             	sub    esp,0x18
c0020021:	68 fd d3 02 c0       	push   0xc002d3fd
c0020026:	e8 5c a8 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c002002b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020030:	31 d2                	xor    edx,edx
c0020032:	83 c4 1c             	add    esp,0x1c
c0020035:	c3                   	ret    

c0020036 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0020036:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002003a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002003e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020042:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0020046:	0f 92 c0             	setb   al
c0020049:	c3                   	ret    

c002004a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c002004a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002004e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020052:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0020056:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c002005a:	09 c2                	or     edx,eax
c002005c:	0f 94 c0             	sete   al
c002005f:	c3                   	ret    

c0020060 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0020060:	57                   	push   edi
c0020061:	56                   	push   esi
c0020062:	53                   	push   ebx
c0020063:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020067:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002006b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002006f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020073:	57                   	push   edi
c0020074:	56                   	push   esi
c0020075:	53                   	push   ebx
c0020076:	51                   	push   ecx
c0020077:	e8 ce ff ff ff       	call   c002004a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c002007c:	83 c4 10             	add    esp,0x10
c002007f:	88 c2                	mov    dl,al
c0020081:	31 c0                	xor    eax,eax
c0020083:	84 d2                	test   dl,dl
c0020085:	75 0c                	jne    c0020093 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c0020087:	57                   	push   edi
c0020088:	56                   	push   esi
c0020089:	53                   	push   ebx
c002008a:	51                   	push   ecx
c002008b:	e8 a6 ff ff ff       	call   c0020036 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0020090:	83 c4 10             	add    esp,0x10
c0020093:	83 e0 01             	and    eax,0x1
c0020096:	5b                   	pop    ebx
c0020097:	88 c1                	mov    cl,al
c0020099:	83 e2 01             	and    edx,0x1
c002009c:	a0 81 26 03 c0       	mov    al,ds:0xc0032681
c00200a1:	c1 e2 06             	shl    edx,0x6
c00200a4:	83 e0 ba             	and    eax,0xffffffba
c00200a7:	5e                   	pop    esi
c00200a8:	09 c8                	or     eax,ecx
c00200aa:	5f                   	pop    edi
c00200ab:	09 d0                	or     eax,edx
c00200ad:	a2 81 26 03 c0       	mov    ds:0xc0032681,al
c00200b2:	c3                   	ret    

c00200b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c00200b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00200bb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00200bf:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00200c3:	c3                   	ret    

c00200c4 <Vm::fpuAbs(unsigned long long)>:
c00200c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00200cc:	c3                   	ret    

c00200cd <Vm::fpuChs(unsigned long long)>:
c00200cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00200d5:	f7 d8                	neg    eax
c00200d7:	83 d2 00             	adc    edx,0x0
c00200da:	f7 da                	neg    edx
c00200dc:	c3                   	ret    

c00200dd <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00200dd:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00200e1:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00200e6:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00200ea:	eb c7                	jmp    c00200b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00200ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00200ec:	53                   	push   ebx
c00200ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00200f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00200f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00200fd:	0f af ca             	imul   ecx,edx
c0020100:	0f af d8             	imul   ebx,eax
c0020103:	f7 e2                	mul    edx
c0020105:	01 d9                	add    ecx,ebx
c0020107:	5b                   	pop    ebx
c0020108:	01 ca                	add    edx,ecx
c002010a:	c3                   	ret    

c002010b <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c002010b:	83 ec 0c             	sub    esp,0xc
c002010e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002011a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002011e:	e8 71 72 00 00       	call   c0027394 <__udivdi3>
c0020123:	83 c4 1c             	add    esp,0x1c
c0020126:	c3                   	ret    

c0020127 <Vm::fpuSquare(unsigned long long)>:
c0020127:	50                   	push   eax
c0020128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002012c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020130:	52                   	push   edx
c0020131:	50                   	push   eax
c0020132:	52                   	push   edx
c0020133:	50                   	push   eax
c0020134:	e8 b3 ff ff ff       	call   c00200ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020139:	83 c4 14             	add    esp,0x14
c002013c:	c3                   	ret    

c002013d <Vm::fpuGetReg(int)>:
c002013d:	83 ec 0c             	sub    esp,0xc
c0020140:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020145:	76 10                	jbe    c0020157 <Vm::fpuGetReg(int)+0x1a>
c0020147:	83 ec 0c             	sub    esp,0xc
c002014a:	68 0a d4 02 c0       	push   0xc002d40a
c002014f:	e8 33 a7 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0020154:	83 c4 10             	add    esp,0x10
c0020157:	a0 81 26 03 c0       	mov    al,ds:0xc0032681
c002015c:	b9 08 00 00 00       	mov    ecx,0x8
c0020161:	c0 e8 03             	shr    al,0x3
c0020164:	83 e0 07             	and    eax,0x7
c0020167:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002016b:	99                   	cdq    
c002016c:	f7 f9                	idiv   ecx
c002016e:	8b 04 d5 84 26 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd97c]
c0020175:	8b 14 d5 88 26 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd978]
c002017c:	83 c4 0c             	add    esp,0xc
c002017f:	c3                   	ret    

c0020180 <Vm::fpuSetReg(int, unsigned long long)>:
c0020180:	57                   	push   edi
c0020181:	56                   	push   esi
c0020182:	52                   	push   edx
c0020183:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020187:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002018b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020190:	76 10                	jbe    c00201a2 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c0020192:	83 ec 0c             	sub    esp,0xc
c0020195:	68 1d d4 02 c0       	push   0xc002d41d
c002019a:	e8 e8 a6 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c002019f:	83 c4 10             	add    esp,0x10
c00201a2:	a0 81 26 03 c0       	mov    al,ds:0xc0032681
c00201a7:	b9 08 00 00 00       	mov    ecx,0x8
c00201ac:	c0 e8 03             	shr    al,0x3
c00201af:	83 e0 07             	and    eax,0x7
c00201b2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00201b6:	99                   	cdq    
c00201b7:	f7 f9                	idiv   ecx
c00201b9:	89 34 d5 84 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd97c],esi
c00201c0:	89 3c d5 88 26 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd978],edi
c00201c7:	58                   	pop    eax
c00201c8:	5e                   	pop    esi
c00201c9:	5f                   	pop    edi
c00201ca:	c3                   	ret    

c00201cb <Vm::fpuPush(unsigned long long)>:
c00201cb:	a0 81 26 03 c0       	mov    al,ds:0xc0032681
c00201d0:	c0 e8 03             	shr    al,0x3
c00201d3:	83 e0 07             	and    eax,0x7
c00201d6:	83 c0 07             	add    eax,0x7
c00201d9:	88 c2                	mov    dl,al
c00201db:	83 e0 07             	and    eax,0x7
c00201de:	83 e2 07             	and    edx,0x7
c00201e1:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00201e8:	8a 15 81 26 03 c0    	mov    dl,BYTE PTR ds:0xc0032681
c00201ee:	83 e2 c7             	and    edx,0xffffffc7
c00201f1:	09 ca                	or     edx,ecx
c00201f3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00201f7:	88 15 81 26 03 c0    	mov    BYTE PTR ds:0xc0032681,dl
c00201fd:	89 0c c5 88 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd978],ecx
c0020204:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020208:	89 14 c5 84 26 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd97c],edx
c002020f:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c0020214:	83 f8 08             	cmp    eax,0x8
c0020217:	75 08                	jne    c0020221 <Vm::fpuPush(unsigned long long)+0x56>
c0020219:	80 0d 80 26 03 c0 40 	or     BYTE PTR ds:0xc0032680,0x40
c0020220:	c3                   	ret    
c0020221:	40                   	inc    eax
c0020222:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c0020227:	c3                   	ret    

c0020228 <Vm::fpuPop()>:
c0020228:	8a 0d 81 26 03 c0    	mov    cl,BYTE PTR ds:0xc0032681
c002022e:	53                   	push   ebx
c002022f:	c0 e9 03             	shr    cl,0x3
c0020232:	8a 1d 81 26 03 c0    	mov    bl,BYTE PTR ds:0xc0032681
c0020238:	83 e1 07             	and    ecx,0x7
c002023b:	83 e3 c7             	and    ebx,0xffffffc7
c002023e:	8b 04 cd 84 26 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd97c]
c0020245:	8b 14 cd 88 26 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd978]
c002024c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0020253:	83 e1 38             	and    ecx,0x38
c0020256:	09 d9                	or     ecx,ebx
c0020258:	88 0d 81 26 03 c0    	mov    BYTE PTR ds:0xc0032681,cl
c002025e:	8b 0d c4 26 03 c0    	mov    ecx,DWORD PTR ds:0xc00326c4
c0020264:	85 c9                	test   ecx,ecx
c0020266:	74 09                	je     c0020271 <Vm::fpuPop()+0x49>
c0020268:	49                   	dec    ecx
c0020269:	89 0d c4 26 03 c0    	mov    DWORD PTR ds:0xc00326c4,ecx
c002026f:	eb 07                	jmp    c0020278 <Vm::fpuPop()+0x50>
c0020271:	80 0d 80 26 03 c0 40 	or     BYTE PTR ds:0xc0032680,0x40
c0020278:	5b                   	pop    ebx
c0020279:	c3                   	ret    

c002027a <Vm::x87Handler(regs*)>:
c002027a:	55                   	push   ebp
c002027b:	57                   	push   edi
c002027c:	56                   	push   esi
c002027d:	53                   	push   ebx
c002027e:	83 ec 1c             	sub    esp,0x1c
c0020281:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020285:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c002028a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c002028d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0020295:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0020299:	50                   	push   eax
c002029a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c002029e:	50                   	push   eax
c002029f:	8d 44 24 14          	lea    eax,[esp+0x14]
c00202a3:	50                   	push   eax
c00202a4:	53                   	push   ebx
c00202a5:	e8 aa 9c ff ff       	call   c0019f54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00202aa:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00202ad:	83 c4 10             	add    esp,0x10
c00202b0:	89 c6                	mov    esi,eax
c00202b2:	80 fa d9             	cmp    dl,0xd9
c00202b5:	0f 85 52 01 00 00    	jne    c002040d <Vm::x87Handler(regs*)+0x193>
c00202bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202bf:	8d 50 20             	lea    edx,[eax+0x20]
c00202c2:	80 fa 0e             	cmp    dl,0xe
c00202c5:	0f 87 86 00 00 00    	ja     c0020351 <Vm::x87Handler(regs*)+0xd7>
c00202cb:	0f b6 d2             	movzx  edx,dl
c00202ce:	ff 24 95 30 d4 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2bd0]
c00202d5:	e8 e7 fc ff ff       	call   c001ffc1 <Vm::fpuGet0()>
c00202da:	eb 05                	jmp    c00202e1 <Vm::x87Handler(regs*)+0x67>
c00202dc:	e8 e5 fc ff ff       	call   c001ffc6 <Vm::fpuGet1()>
c00202e1:	57                   	push   edi
c00202e2:	57                   	push   edi
c00202e3:	52                   	push   edx
c00202e4:	50                   	push   eax
c00202e5:	e8 e1 fe ff ff       	call   c00201cb <Vm::fpuPush(unsigned long long)>
c00202ea:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202ee:	83 c4 10             	add    esp,0x10
c00202f1:	b0 01                	mov    al,0x1
c00202f3:	e9 e3 09 00 00       	jmp    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	6a 00                	push   0x0
c00202fd:	e8 3b fe ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020302:	59                   	pop    ecx
c0020303:	5e                   	pop    esi
c0020304:	52                   	push   edx
c0020305:	50                   	push   eax
c0020306:	e8 c2 fd ff ff       	call   c00200cd <Vm::fpuChs(unsigned long long)>
c002030b:	eb 13                	jmp    c0020320 <Vm::x87Handler(regs*)+0xa6>
c002030d:	83 ec 0c             	sub    esp,0xc
c0020310:	6a 00                	push   0x0
c0020312:	e8 26 fe ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020317:	5f                   	pop    edi
c0020318:	5d                   	pop    ebp
c0020319:	52                   	push   edx
c002031a:	50                   	push   eax
c002031b:	e8 a4 fd ff ff       	call   c00200c4 <Vm::fpuAbs(unsigned long long)>
c0020320:	83 c4 0c             	add    esp,0xc
c0020323:	52                   	push   edx
c0020324:	50                   	push   eax
c0020325:	6a 00                	push   0x0
c0020327:	e8 54 fe ff ff       	call   c0020180 <Vm::fpuSetReg(int, unsigned long long)>
c002032c:	eb bc                	jmp    c00202ea <Vm::x87Handler(regs*)+0x70>
c002032e:	e8 d3 fc ff ff       	call   c0020006 <Vm::fpuGetLog210()>
c0020333:	eb ac                	jmp    c00202e1 <Vm::x87Handler(regs*)+0x67>
c0020335:	e8 9c fc ff ff       	call   c001ffd6 <Vm::fpuGetLog2E()>
c002033a:	eb a5                	jmp    c00202e1 <Vm::x87Handler(regs*)+0x67>
c002033c:	e8 8d fc ff ff       	call   c001ffce <Vm::fpuGetPi()>
c0020341:	eb 9e                	jmp    c00202e1 <Vm::x87Handler(regs*)+0x67>
c0020343:	e8 d6 fc ff ff       	call   c002001e <Vm::fpuGetLog102()>
c0020348:	eb 97                	jmp    c00202e1 <Vm::x87Handler(regs*)+0x67>
c002034a:	e8 9f fc ff ff       	call   c001ffee <Vm::fpuGetLogE2()>
c002034f:	eb 90                	jmp    c00202e1 <Vm::x87Handler(regs*)+0x67>
c0020351:	8d 50 40             	lea    edx,[eax+0x40]
c0020354:	80 fa 07             	cmp    dl,0x7
c0020357:	77 15                	ja     c002036e <Vm::x87Handler(regs*)+0xf4>
c0020359:	83 ec 0c             	sub    esp,0xc
c002035c:	2d c0 00 00 00       	sub    eax,0xc0
c0020361:	50                   	push   eax
c0020362:	e8 d6 fd ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020367:	59                   	pop    ecx
c0020368:	5e                   	pop    esi
c0020369:	e9 75 ff ff ff       	jmp    c00202e3 <Vm::x87Handler(regs*)+0x69>
c002036e:	8d 50 38             	lea    edx,[eax+0x38]
c0020371:	80 fa 07             	cmp    dl,0x7
c0020374:	77 3c                	ja     c00203b2 <Vm::x87Handler(regs*)+0x138>
c0020376:	83 ec 0c             	sub    esp,0xc
c0020379:	2d c8 00 00 00       	sub    eax,0xc8
c002037e:	50                   	push   eax
c002037f:	e8 b9 fd ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020384:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002038b:	89 c6                	mov    esi,eax
c002038d:	89 d7                	mov    edi,edx
c002038f:	e8 a9 fd ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020394:	83 c4 0c             	add    esp,0xc
c0020397:	52                   	push   edx
c0020398:	50                   	push   eax
c0020399:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002039d:	2d c8 00 00 00       	sub    eax,0xc8
c00203a2:	50                   	push   eax
c00203a3:	e8 d8 fd ff ff       	call   c0020180 <Vm::fpuSetReg(int, unsigned long long)>
c00203a8:	83 c4 0c             	add    esp,0xc
c00203ab:	57                   	push   edi
c00203ac:	56                   	push   esi
c00203ad:	e9 73 ff ff ff       	jmp    c0020325 <Vm::x87Handler(regs*)+0xab>
c00203b2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203b6:	84 d2                	test   dl,dl
c00203b8:	75 0f                	jne    c00203c9 <Vm::x87Handler(regs*)+0x14f>
c00203ba:	83 ec 0c             	sub    esp,0xc
c00203bd:	ff 36                	push   DWORD PTR [esi]
c00203bf:	e8 c8 fa ff ff       	call   c001fe8c <Vm::fpu32ToInternal(unsigned int)>
c00203c4:	e9 bf 00 00 00       	jmp    c0020488 <Vm::x87Handler(regs*)+0x20e>
c00203c9:	80 fa 03             	cmp    dl,0x3
c00203cc:	75 13                	jne    c00203e1 <Vm::x87Handler(regs*)+0x167>
c00203ce:	e8 55 fe ff ff       	call   c0020228 <Vm::fpuPop()>
c00203d3:	55                   	push   ebp
c00203d4:	55                   	push   ebp
c00203d5:	52                   	push   edx
c00203d6:	50                   	push   eax
c00203d7:	e8 4c fa ff ff       	call   c001fe28 <Vm::fpuInternalTo32(unsigned long long)>
c00203dc:	e9 88 00 00 00       	jmp    c0020469 <Vm::x87Handler(regs*)+0x1ef>
c00203e1:	80 fa 05             	cmp    dl,0x5
c00203e4:	75 0e                	jne    c00203f4 <Vm::x87Handler(regs*)+0x17a>
c00203e6:	66 8b 06             	mov    ax,WORD PTR [esi]
c00203e9:	66 a3 82 26 03 c0    	mov    ds:0xc0032682,ax
c00203ef:	e9 df 00 00 00       	jmp    c00204d3 <Vm::x87Handler(regs*)+0x259>
c00203f4:	31 c0                	xor    eax,eax
c00203f6:	80 fa 07             	cmp    dl,0x7
c00203f9:	0f 85 dc 08 00 00    	jne    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c00203ff:	66 a1 82 26 03 c0    	mov    ax,ds:0xc0032682
c0020405:	66 89 06             	mov    WORD PTR [esi],ax
c0020408:	e9 c6 00 00 00       	jmp    c00204d3 <Vm::x87Handler(regs*)+0x259>
c002040d:	80 fa d8             	cmp    dl,0xd8
c0020410:	0f 84 c9 00 00 00    	je     c00204df <Vm::x87Handler(regs*)+0x265>
c0020416:	80 fa dc             	cmp    dl,0xdc
c0020419:	0f 84 0d 02 00 00    	je     c002062c <Vm::x87Handler(regs*)+0x3b2>
c002041f:	80 fa de             	cmp    dl,0xde
c0020422:	0f 84 cd 02 00 00    	je     c00206f5 <Vm::x87Handler(regs*)+0x47b>
c0020428:	80 fa dd             	cmp    dl,0xdd
c002042b:	0f 84 5f 04 00 00    	je     c0020890 <Vm::x87Handler(regs*)+0x616>
c0020431:	80 fa da             	cmp    dl,0xda
c0020434:	0f 84 24 05 00 00    	je     c002095e <Vm::x87Handler(regs*)+0x6e4>
c002043a:	80 fa df             	cmp    dl,0xdf
c002043d:	0f 84 68 05 00 00    	je     c00209ab <Vm::x87Handler(regs*)+0x731>
c0020443:	31 c0                	xor    eax,eax
c0020445:	80 fa db             	cmp    dl,0xdb
c0020448:	0f 85 8d 08 00 00    	jne    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c002044e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020452:	80 fa 03             	cmp    dl,0x3
c0020455:	0f 85 70 06 00 00    	jne    c0020acb <Vm::x87Handler(regs*)+0x851>
c002045b:	e8 c8 fd ff ff       	call   c0020228 <Vm::fpuPop()>
c0020460:	55                   	push   ebp
c0020461:	55                   	push   ebp
c0020462:	52                   	push   edx
c0020463:	50                   	push   eax
c0020464:	e8 71 fa ff ff       	call   c001feda <Vm::fpuFloatToLong(unsigned long long)>
c0020469:	83 c4 10             	add    esp,0x10
c002046c:	89 06                	mov    DWORD PTR [esi],eax
c002046e:	eb 63                	jmp    c00204d3 <Vm::x87Handler(regs*)+0x259>
c0020470:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020474:	84 d2                	test   dl,dl
c0020476:	0f 85 e6 05 00 00    	jne    c0020a62 <Vm::x87Handler(regs*)+0x7e8>
c002047c:	57                   	push   edi
c002047d:	57                   	push   edi
c002047e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020481:	ff 36                	push   DWORD PTR [esi]
c0020483:	e8 49 fa ff ff       	call   c001fed1 <Vm::fpu64ToInternal(unsigned long long)>
c0020488:	5e                   	pop    esi
c0020489:	5f                   	pop    edi
c002048a:	52                   	push   edx
c002048b:	50                   	push   eax
c002048c:	e8 3a fd ff ff       	call   c00201cb <Vm::fpuPush(unsigned long long)>
c0020491:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020495:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020498:	e9 51 fe ff ff       	jmp    c00202ee <Vm::x87Handler(regs*)+0x74>
c002049d:	80 fa 03             	cmp    dl,0x3
c00204a0:	0f 85 d7 06 00 00    	jne    c0020b7d <Vm::x87Handler(regs*)+0x903>
c00204a6:	57                   	push   edi
c00204a7:	57                   	push   edi
c00204a8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204ab:	ff 36                	push   DWORD PTR [esi]
c00204ad:	e8 1f fa ff ff       	call   c001fed1 <Vm::fpu64ToInternal(unsigned long long)>
c00204b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204b9:	89 c6                	mov    esi,eax
c00204bb:	89 d7                	mov    edi,edx
c00204bd:	e8 7b fc ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00204c2:	57                   	push   edi
c00204c3:	56                   	push   esi
c00204c4:	52                   	push   edx
c00204c5:	50                   	push   eax
c00204c6:	e8 95 fb ff ff       	call   c0020060 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00204cb:	83 c4 20             	add    esp,0x20
c00204ce:	e8 55 fd ff ff       	call   c0020228 <Vm::fpuPop()>
c00204d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204d7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00204da:	e9 12 fe ff ff       	jmp    c00202f1 <Vm::x87Handler(regs*)+0x77>
c00204df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204e3:	8d 50 40             	lea    edx,[eax+0x40]
c00204e6:	80 fa 07             	cmp    dl,0x7
c00204e9:	77 29                	ja     c0020514 <Vm::x87Handler(regs*)+0x29a>
c00204eb:	83 ec 0c             	sub    esp,0xc
c00204ee:	2d c0 00 00 00       	sub    eax,0xc0
c00204f3:	50                   	push   eax
c00204f4:	e8 44 fc ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00204f9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020500:	89 c6                	mov    esi,eax
c0020502:	89 d7                	mov    edi,edx
c0020504:	e8 34 fc ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020509:	57                   	push   edi
c002050a:	56                   	push   esi
c002050b:	52                   	push   edx
c002050c:	50                   	push   eax
c002050d:	e8 a1 fb ff ff       	call   c00200b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020512:	eb 2f                	jmp    c0020543 <Vm::x87Handler(regs*)+0x2c9>
c0020514:	8d 50 38             	lea    edx,[eax+0x38]
c0020517:	80 fa 07             	cmp    dl,0x7
c002051a:	77 2f                	ja     c002054b <Vm::x87Handler(regs*)+0x2d1>
c002051c:	83 ec 0c             	sub    esp,0xc
c002051f:	2d c8 00 00 00       	sub    eax,0xc8
c0020524:	50                   	push   eax
c0020525:	e8 13 fc ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002052a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020531:	89 c6                	mov    esi,eax
c0020533:	89 d7                	mov    edi,edx
c0020535:	e8 03 fc ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002053a:	57                   	push   edi
c002053b:	56                   	push   esi
c002053c:	52                   	push   edx
c002053d:	50                   	push   eax
c002053e:	e8 a9 fb ff ff       	call   c00200ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020543:	83 c4 1c             	add    esp,0x1c
c0020546:	e9 d8 fd ff ff       	jmp    c0020323 <Vm::x87Handler(regs*)+0xa9>
c002054b:	8d 50 30             	lea    edx,[eax+0x30]
c002054e:	80 fa 07             	cmp    dl,0x7
c0020551:	77 0d                	ja     c0020560 <Vm::x87Handler(regs*)+0x2e6>
c0020553:	83 ec 0c             	sub    esp,0xc
c0020556:	2d d0 00 00 00       	sub    eax,0xd0
c002055b:	e9 99 03 00 00       	jmp    c00208f9 <Vm::x87Handler(regs*)+0x67f>
c0020560:	8d 50 28             	lea    edx,[eax+0x28]
c0020563:	80 fa 07             	cmp    dl,0x7
c0020566:	77 0d                	ja     c0020575 <Vm::x87Handler(regs*)+0x2fb>
c0020568:	83 ec 0c             	sub    esp,0xc
c002056b:	2d d8 00 00 00       	sub    eax,0xd8
c0020570:	e9 c0 03 00 00       	jmp    c0020935 <Vm::x87Handler(regs*)+0x6bb>
c0020575:	8d 50 20             	lea    edx,[eax+0x20]
c0020578:	80 fa 07             	cmp    dl,0x7
c002057b:	77 1b                	ja     c0020598 <Vm::x87Handler(regs*)+0x31e>
c002057d:	83 ec 0c             	sub    esp,0xc
c0020580:	2d e0 00 00 00       	sub    eax,0xe0
c0020585:	50                   	push   eax
c0020586:	e8 b2 fb ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002058b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020592:	89 c6                	mov    esi,eax
c0020594:	89 d7                	mov    edi,edx
c0020596:	eb 22                	jmp    c00205ba <Vm::x87Handler(regs*)+0x340>
c0020598:	8d 50 18             	lea    edx,[eax+0x18]
c002059b:	80 fa 07             	cmp    dl,0x7
c002059e:	77 2d                	ja     c00205cd <Vm::x87Handler(regs*)+0x353>
c00205a0:	83 ec 0c             	sub    esp,0xc
c00205a3:	6a 00                	push   0x0
c00205a5:	e8 93 fb ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00205aa:	89 c6                	mov    esi,eax
c00205ac:	89 d7                	mov    edi,edx
c00205ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205b2:	2d e8 00 00 00       	sub    eax,0xe8
c00205b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00205ba:	e8 7e fb ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00205bf:	57                   	push   edi
c00205c0:	56                   	push   esi
c00205c1:	52                   	push   edx
c00205c2:	50                   	push   eax
c00205c3:	e8 15 fb ff ff       	call   c00200dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205c8:	e9 76 ff ff ff       	jmp    c0020543 <Vm::x87Handler(regs*)+0x2c9>
c00205cd:	8d 50 10             	lea    edx,[eax+0x10]
c00205d0:	80 fa 07             	cmp    dl,0x7
c00205d3:	77 1b                	ja     c00205f0 <Vm::x87Handler(regs*)+0x376>
c00205d5:	83 ec 0c             	sub    esp,0xc
c00205d8:	2d f0 00 00 00       	sub    eax,0xf0
c00205dd:	50                   	push   eax
c00205de:	e8 5a fb ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00205e3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205ea:	89 c6                	mov    esi,eax
c00205ec:	89 d7                	mov    edi,edx
c00205ee:	eb 22                	jmp    c0020612 <Vm::x87Handler(regs*)+0x398>
c00205f0:	3c f7                	cmp    al,0xf7
c00205f2:	0f 86 d1 03 00 00    	jbe    c00209c9 <Vm::x87Handler(regs*)+0x74f>
c00205f8:	83 ec 0c             	sub    esp,0xc
c00205fb:	6a 00                	push   0x0
c00205fd:	e8 3b fb ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020602:	89 c6                	mov    esi,eax
c0020604:	89 d7                	mov    edi,edx
c0020606:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002060a:	2d f8 00 00 00       	sub    eax,0xf8
c002060f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020612:	e8 26 fb ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020617:	57                   	push   edi
c0020618:	56                   	push   esi
c0020619:	52                   	push   edx
c002061a:	50                   	push   eax
c002061b:	e8 eb fa ff ff       	call   c002010b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020620:	83 c4 1c             	add    esp,0x1c
c0020623:	52                   	push   edx
c0020624:	50                   	push   eax
c0020625:	6a 00                	push   0x0
c0020627:	e9 51 02 00 00       	jmp    c002087d <Vm::x87Handler(regs*)+0x603>
c002062c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020630:	8d 50 40             	lea    edx,[eax+0x40]
c0020633:	80 fa 07             	cmp    dl,0x7
c0020636:	77 37                	ja     c002066f <Vm::x87Handler(regs*)+0x3f5>
c0020638:	83 ec 0c             	sub    esp,0xc
c002063b:	2d c0 00 00 00       	sub    eax,0xc0
c0020640:	50                   	push   eax
c0020641:	e8 f7 fa ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020646:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002064d:	89 c6                	mov    esi,eax
c002064f:	89 d7                	mov    edi,edx
c0020651:	e8 e7 fa ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020656:	57                   	push   edi
c0020657:	56                   	push   esi
c0020658:	52                   	push   edx
c0020659:	50                   	push   eax
c002065a:	e8 54 fa ff ff       	call   c00200b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002065f:	83 c4 1c             	add    esp,0x1c
c0020662:	52                   	push   edx
c0020663:	50                   	push   eax
c0020664:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020668:	2d c0 00 00 00       	sub    eax,0xc0
c002066d:	eb 3d                	jmp    c00206ac <Vm::x87Handler(regs*)+0x432>
c002066f:	8d 50 38             	lea    edx,[eax+0x38]
c0020672:	80 fa 07             	cmp    dl,0x7
c0020675:	77 3b                	ja     c00206b2 <Vm::x87Handler(regs*)+0x438>
c0020677:	83 ec 0c             	sub    esp,0xc
c002067a:	2d c8 00 00 00       	sub    eax,0xc8
c002067f:	50                   	push   eax
c0020680:	e8 b8 fa ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020685:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002068c:	89 c6                	mov    esi,eax
c002068e:	89 d7                	mov    edi,edx
c0020690:	e8 a8 fa ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020695:	57                   	push   edi
c0020696:	56                   	push   esi
c0020697:	52                   	push   edx
c0020698:	50                   	push   eax
c0020699:	e8 4e fa ff ff       	call   c00200ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002069e:	83 c4 1c             	add    esp,0x1c
c00206a1:	52                   	push   edx
c00206a2:	50                   	push   eax
c00206a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206a7:	2d c8 00 00 00       	sub    eax,0xc8
c00206ac:	50                   	push   eax
c00206ad:	e9 75 fc ff ff       	jmp    c0020327 <Vm::x87Handler(regs*)+0xad>
c00206b2:	83 c0 18             	add    eax,0x18
c00206b5:	3c 07                	cmp    al,0x7
c00206b7:	0f 87 3b 04 00 00    	ja     c0020af8 <Vm::x87Handler(regs*)+0x87e>
c00206bd:	83 ec 0c             	sub    esp,0xc
c00206c0:	6a 00                	push   0x0
c00206c2:	e8 76 fa ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00206c7:	89 c6                	mov    esi,eax
c00206c9:	89 d7                	mov    edi,edx
c00206cb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206cf:	2d e8 00 00 00       	sub    eax,0xe8
c00206d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00206d7:	e8 61 fa ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00206dc:	57                   	push   edi
c00206dd:	56                   	push   esi
c00206de:	52                   	push   edx
c00206df:	50                   	push   eax
c00206e0:	e8 f8 f9 ff ff       	call   c00200dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c00206e5:	83 c4 1c             	add    esp,0x1c
c00206e8:	52                   	push   edx
c00206e9:	50                   	push   eax
c00206ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206ee:	2d e8 00 00 00       	sub    eax,0xe8
c00206f3:	eb b7                	jmp    c00206ac <Vm::x87Handler(regs*)+0x432>
c00206f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206f9:	8d 50 40             	lea    edx,[eax+0x40]
c00206fc:	80 fa 07             	cmp    dl,0x7
c00206ff:	77 3a                	ja     c002073b <Vm::x87Handler(regs*)+0x4c1>
c0020701:	83 ec 0c             	sub    esp,0xc
c0020704:	2d c0 00 00 00       	sub    eax,0xc0
c0020709:	50                   	push   eax
c002070a:	e8 2e fa ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002070f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020716:	89 c6                	mov    esi,eax
c0020718:	89 d7                	mov    edi,edx
c002071a:	e8 1e fa ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002071f:	57                   	push   edi
c0020720:	56                   	push   esi
c0020721:	52                   	push   edx
c0020722:	50                   	push   eax
c0020723:	e8 8b f9 ff ff       	call   c00200b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020728:	83 c4 1c             	add    esp,0x1c
c002072b:	52                   	push   edx
c002072c:	50                   	push   eax
c002072d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020731:	2d c0 00 00 00       	sub    eax,0xc0
c0020736:	e9 9e 01 00 00       	jmp    c00208d9 <Vm::x87Handler(regs*)+0x65f>
c002073b:	8d 50 20             	lea    edx,[eax+0x20]
c002073e:	80 fa 07             	cmp    dl,0x7
c0020741:	77 3a                	ja     c002077d <Vm::x87Handler(regs*)+0x503>
c0020743:	83 ec 0c             	sub    esp,0xc
c0020746:	2d e0 00 00 00       	sub    eax,0xe0
c002074b:	50                   	push   eax
c002074c:	e8 ec f9 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020751:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020758:	89 c6                	mov    esi,eax
c002075a:	89 d7                	mov    edi,edx
c002075c:	e8 dc f9 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020761:	57                   	push   edi
c0020762:	56                   	push   esi
c0020763:	52                   	push   edx
c0020764:	50                   	push   eax
c0020765:	e8 73 f9 ff ff       	call   c00200dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c002076a:	83 c4 1c             	add    esp,0x1c
c002076d:	52                   	push   edx
c002076e:	50                   	push   eax
c002076f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020773:	2d e0 00 00 00       	sub    eax,0xe0
c0020778:	e9 5c 01 00 00       	jmp    c00208d9 <Vm::x87Handler(regs*)+0x65f>
c002077d:	8d 50 18             	lea    edx,[eax+0x18]
c0020780:	80 fa 07             	cmp    dl,0x7
c0020783:	77 3b                	ja     c00207c0 <Vm::x87Handler(regs*)+0x546>
c0020785:	83 ec 0c             	sub    esp,0xc
c0020788:	6a 00                	push   0x0
c002078a:	e8 ae f9 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002078f:	89 c6                	mov    esi,eax
c0020791:	89 d7                	mov    edi,edx
c0020793:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020797:	2d e8 00 00 00       	sub    eax,0xe8
c002079c:	89 04 24             	mov    DWORD PTR [esp],eax
c002079f:	e8 99 f9 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00207a4:	57                   	push   edi
c00207a5:	56                   	push   esi
c00207a6:	52                   	push   edx
c00207a7:	50                   	push   eax
c00207a8:	e8 30 f9 ff ff       	call   c00200dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c00207ad:	83 c4 1c             	add    esp,0x1c
c00207b0:	52                   	push   edx
c00207b1:	50                   	push   eax
c00207b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207b6:	2d e8 00 00 00       	sub    eax,0xe8
c00207bb:	e9 19 01 00 00       	jmp    c00208d9 <Vm::x87Handler(regs*)+0x65f>
c00207c0:	8d 50 38             	lea    edx,[eax+0x38]
c00207c3:	80 fa 07             	cmp    dl,0x7
c00207c6:	77 37                	ja     c00207ff <Vm::x87Handler(regs*)+0x585>
c00207c8:	83 ec 0c             	sub    esp,0xc
c00207cb:	2d c8 00 00 00       	sub    eax,0xc8
c00207d0:	50                   	push   eax
c00207d1:	e8 67 f9 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00207d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207dd:	89 c6                	mov    esi,eax
c00207df:	89 d7                	mov    edi,edx
c00207e1:	e8 57 f9 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00207e6:	57                   	push   edi
c00207e7:	56                   	push   esi
c00207e8:	52                   	push   edx
c00207e9:	50                   	push   eax
c00207ea:	e8 fd f8 ff ff       	call   c00200ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00207ef:	83 c4 1c             	add    esp,0x1c
c00207f2:	52                   	push   edx
c00207f3:	50                   	push   eax
c00207f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207f8:	2d c8 00 00 00       	sub    eax,0xc8
c00207fd:	eb 7d                	jmp    c002087c <Vm::x87Handler(regs*)+0x602>
c00207ff:	3c f7                	cmp    al,0xf7
c0020801:	76 38                	jbe    c002083b <Vm::x87Handler(regs*)+0x5c1>
c0020803:	83 ec 0c             	sub    esp,0xc
c0020806:	6a 00                	push   0x0
c0020808:	e8 30 f9 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002080d:	89 c6                	mov    esi,eax
c002080f:	89 d7                	mov    edi,edx
c0020811:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020815:	2d f8 00 00 00       	sub    eax,0xf8
c002081a:	89 04 24             	mov    DWORD PTR [esp],eax
c002081d:	e8 1b f9 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020822:	57                   	push   edi
c0020823:	56                   	push   esi
c0020824:	52                   	push   edx
c0020825:	50                   	push   eax
c0020826:	e8 e0 f8 ff ff       	call   c002010b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002082b:	83 c4 1c             	add    esp,0x1c
c002082e:	52                   	push   edx
c002082f:	50                   	push   eax
c0020830:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020834:	2d f8 00 00 00       	sub    eax,0xf8
c0020839:	eb 41                	jmp    c002087c <Vm::x87Handler(regs*)+0x602>
c002083b:	8d 50 10             	lea    edx,[eax+0x10]
c002083e:	80 fa 07             	cmp    dl,0x7
c0020841:	0f 87 5a 01 00 00    	ja     c00209a1 <Vm::x87Handler(regs*)+0x727>
c0020847:	83 ec 0c             	sub    esp,0xc
c002084a:	2d f0 00 00 00       	sub    eax,0xf0
c002084f:	50                   	push   eax
c0020850:	e8 e8 f8 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020855:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002085c:	89 c6                	mov    esi,eax
c002085e:	89 d7                	mov    edi,edx
c0020860:	e8 d8 f8 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020865:	57                   	push   edi
c0020866:	56                   	push   esi
c0020867:	52                   	push   edx
c0020868:	50                   	push   eax
c0020869:	e8 9d f8 ff ff       	call   c002010b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002086e:	83 c4 1c             	add    esp,0x1c
c0020871:	52                   	push   edx
c0020872:	50                   	push   eax
c0020873:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020877:	2d f0 00 00 00       	sub    eax,0xf0
c002087c:	50                   	push   eax
c002087d:	e8 fe f8 ff ff       	call   c0020180 <Vm::fpuSetReg(int, unsigned long long)>
c0020882:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020886:	e8 9d f9 ff ff       	call   c0020228 <Vm::fpuPop()>
c002088b:	e9 5e fa ff ff       	jmp    c00202ee <Vm::x87Handler(regs*)+0x74>
c0020890:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020894:	8d 50 30             	lea    edx,[eax+0x30]
c0020897:	80 fa 07             	cmp    dl,0x7
c002089a:	77 1d                	ja     c00208b9 <Vm::x87Handler(regs*)+0x63f>
c002089c:	83 ec 0c             	sub    esp,0xc
c002089f:	6a 00                	push   0x0
c00208a1:	e8 97 f8 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00208a6:	83 c4 0c             	add    esp,0xc
c00208a9:	52                   	push   edx
c00208aa:	50                   	push   eax
c00208ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208af:	2d d0 00 00 00       	sub    eax,0xd0
c00208b4:	e9 f3 fd ff ff       	jmp    c00206ac <Vm::x87Handler(regs*)+0x432>
c00208b9:	8d 50 28             	lea    edx,[eax+0x28]
c00208bc:	80 fa 07             	cmp    dl,0x7
c00208bf:	77 28                	ja     c00208e9 <Vm::x87Handler(regs*)+0x66f>
c00208c1:	83 ec 0c             	sub    esp,0xc
c00208c4:	6a 00                	push   0x0
c00208c6:	e8 72 f8 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00208cb:	83 c4 0c             	add    esp,0xc
c00208ce:	52                   	push   edx
c00208cf:	50                   	push   eax
c00208d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208d4:	2d d8 00 00 00       	sub    eax,0xd8
c00208d9:	50                   	push   eax
c00208da:	e8 a1 f8 ff ff       	call   c0020180 <Vm::fpuSetReg(int, unsigned long long)>
c00208df:	e8 44 f9 ff ff       	call   c0020228 <Vm::fpuPop()>
c00208e4:	e9 01 fa ff ff       	jmp    c00202ea <Vm::x87Handler(regs*)+0x70>
c00208e9:	8d 50 20             	lea    edx,[eax+0x20]
c00208ec:	80 fa 07             	cmp    dl,0x7
c00208ef:	77 30                	ja     c0020921 <Vm::x87Handler(regs*)+0x6a7>
c00208f1:	83 ec 0c             	sub    esp,0xc
c00208f4:	2d e0 00 00 00       	sub    eax,0xe0
c00208f9:	50                   	push   eax
c00208fa:	e8 3e f8 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c00208ff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020906:	89 c6                	mov    esi,eax
c0020908:	89 d7                	mov    edi,edx
c002090a:	e8 2e f8 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002090f:	57                   	push   edi
c0020910:	56                   	push   esi
c0020911:	52                   	push   edx
c0020912:	50                   	push   eax
c0020913:	e8 48 f7 ff ff       	call   c0020060 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020918:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002091c:	e9 54 02 00 00       	jmp    c0020b75 <Vm::x87Handler(regs*)+0x8fb>
c0020921:	8d 50 18             	lea    edx,[eax+0x18]
c0020924:	80 fa 07             	cmp    dl,0x7
c0020927:	0f 87 43 fb ff ff    	ja     c0020470 <Vm::x87Handler(regs*)+0x1f6>
c002092d:	83 ec 0c             	sub    esp,0xc
c0020930:	2d e8 00 00 00       	sub    eax,0xe8
c0020935:	50                   	push   eax
c0020936:	e8 02 f8 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002093b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020942:	89 c6                	mov    esi,eax
c0020944:	89 d7                	mov    edi,edx
c0020946:	e8 f2 f7 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c002094b:	57                   	push   edi
c002094c:	56                   	push   esi
c002094d:	52                   	push   edx
c002094e:	50                   	push   eax
c002094f:	e8 0c f7 ff ff       	call   c0020060 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020954:	83 c4 20             	add    esp,0x20
c0020957:	e8 cc f8 ff ff       	call   c0020228 <Vm::fpuPop()>
c002095c:	eb 62                	jmp    c00209c0 <Vm::x87Handler(regs*)+0x746>
c002095e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020962:	0f 85 0f 01 00 00    	jne    c0020a77 <Vm::x87Handler(regs*)+0x7fd>
c0020968:	83 ec 0c             	sub    esp,0xc
c002096b:	6a 01                	push   0x1
c002096d:	e8 cb f7 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020972:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020979:	89 c6                	mov    esi,eax
c002097b:	89 d7                	mov    edi,edx
c002097d:	e8 bb f7 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020982:	57                   	push   edi
c0020983:	56                   	push   esi
c0020984:	52                   	push   edx
c0020985:	50                   	push   eax
c0020986:	e8 d5 f6 ff ff       	call   c0020060 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002098b:	83 c4 20             	add    esp,0x20
c002098e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020992:	e8 91 f8 ff ff       	call   c0020228 <Vm::fpuPop()>
c0020997:	e8 8c f8 ff ff       	call   c0020228 <Vm::fpuPop()>
c002099c:	e9 50 f9 ff ff       	jmp    c00202f1 <Vm::x87Handler(regs*)+0x77>
c00209a1:	3c d9                	cmp    al,0xd9
c00209a3:	0f 85 b5 02 00 00    	jne    c0020c5e <Vm::x87Handler(regs*)+0x9e4>
c00209a9:	eb bd                	jmp    c0020968 <Vm::x87Handler(regs*)+0x6ee>
c00209ab:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00209af:	0f 85 ea 02 00 00    	jne    c0020c9f <Vm::x87Handler(regs*)+0xa25>
c00209b5:	0f b7 05 80 26 03 c0 	movzx  eax,WORD PTR ds:0xc0032680
c00209bc:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00209c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00209c4:	e9 28 f9 ff ff       	jmp    c00202f1 <Vm::x87Handler(regs*)+0x77>
c00209c9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00209cd:	84 d2                	test   dl,dl
c00209cf:	75 0f                	jne    c00209e0 <Vm::x87Handler(regs*)+0x766>
c00209d1:	83 ec 0c             	sub    esp,0xc
c00209d4:	ff 36                	push   DWORD PTR [esi]
c00209d6:	e8 b1 f4 ff ff       	call   c001fe8c <Vm::fpu32ToInternal(unsigned int)>
c00209db:	e9 2c 01 00 00       	jmp    c0020b0c <Vm::x87Handler(regs*)+0x892>
c00209e0:	80 fa 01             	cmp    dl,0x1
c00209e3:	75 0f                	jne    c00209f4 <Vm::x87Handler(regs*)+0x77a>
c00209e5:	83 ec 0c             	sub    esp,0xc
c00209e8:	ff 36                	push   DWORD PTR [esi]
c00209ea:	e8 9d f4 ff ff       	call   c001fe8c <Vm::fpu32ToInternal(unsigned int)>
c00209ef:	e9 81 02 00 00       	jmp    c0020c75 <Vm::x87Handler(regs*)+0x9fb>
c00209f4:	80 fa 04             	cmp    dl,0x4
c00209f7:	75 0f                	jne    c0020a08 <Vm::x87Handler(regs*)+0x78e>
c00209f9:	83 ec 0c             	sub    esp,0xc
c00209fc:	ff 36                	push   DWORD PTR [esi]
c00209fe:	e8 89 f4 ff ff       	call   c001fe8c <Vm::fpu32ToInternal(unsigned int)>
c0020a03:	e9 86 01 00 00       	jmp    c0020b8e <Vm::x87Handler(regs*)+0x914>
c0020a08:	80 fa 05             	cmp    dl,0x5
c0020a0b:	75 1b                	jne    c0020a28 <Vm::x87Handler(regs*)+0x7ae>
c0020a0d:	83 ec 0c             	sub    esp,0xc
c0020a10:	6a 00                	push   0x0
c0020a12:	e8 26 f7 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020a17:	89 c7                	mov    edi,eax
c0020a19:	89 d5                	mov    ebp,edx
c0020a1b:	58                   	pop    eax
c0020a1c:	ff 36                	push   DWORD PTR [esi]
c0020a1e:	e8 69 f4 ff ff       	call   c001fe8c <Vm::fpu32ToInternal(unsigned int)>
c0020a23:	e9 a3 01 00 00       	jmp    c0020bcb <Vm::x87Handler(regs*)+0x951>
c0020a28:	80 fa 06             	cmp    dl,0x6
c0020a2b:	75 0f                	jne    c0020a3c <Vm::x87Handler(regs*)+0x7c2>
c0020a2d:	83 ec 0c             	sub    esp,0xc
c0020a30:	ff 36                	push   DWORD PTR [esi]
c0020a32:	e8 55 f4 ff ff       	call   c001fe8c <Vm::fpu32ToInternal(unsigned int)>
c0020a37:	e9 ae 01 00 00       	jmp    c0020bea <Vm::x87Handler(regs*)+0x970>
c0020a3c:	31 c0                	xor    eax,eax
c0020a3e:	80 fa 07             	cmp    dl,0x7
c0020a41:	0f 85 94 02 00 00    	jne    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c0020a47:	83 ec 0c             	sub    esp,0xc
c0020a4a:	6a 00                	push   0x0
c0020a4c:	e8 ec f6 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020a51:	89 c7                	mov    edi,eax
c0020a53:	89 d5                	mov    ebp,edx
c0020a55:	58                   	pop    eax
c0020a56:	ff 36                	push   DWORD PTR [esi]
c0020a58:	e8 2f f4 ff ff       	call   c001fe8c <Vm::fpu32ToInternal(unsigned int)>
c0020a5d:	e9 cb 01 00 00       	jmp    c0020c2d <Vm::x87Handler(regs*)+0x9b3>
c0020a62:	80 fa 03             	cmp    dl,0x3
c0020a65:	0f 85 d3 01 00 00    	jne    c0020c3e <Vm::x87Handler(regs*)+0x9c4>
c0020a6b:	e8 b8 f7 ff ff       	call   c0020228 <Vm::fpuPop()>
c0020a70:	51                   	push   ecx
c0020a71:	51                   	push   ecx
c0020a72:	e9 de 01 00 00       	jmp    c0020c55 <Vm::x87Handler(regs*)+0x9db>
c0020a77:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020a7b:	80 fa 01             	cmp    dl,0x1
c0020a7e:	75 09                	jne    c0020a89 <Vm::x87Handler(regs*)+0x80f>
c0020a80:	57                   	push   edi
c0020a81:	57                   	push   edi
c0020a82:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a84:	e9 e3 01 00 00       	jmp    c0020c6c <Vm::x87Handler(regs*)+0x9f2>
c0020a89:	80 fa 04             	cmp    dl,0x4
c0020a8c:	75 12                	jne    c0020aa0 <Vm::x87Handler(regs*)+0x826>
c0020a8e:	31 d2                	xor    edx,edx
c0020a90:	51                   	push   ecx
c0020a91:	51                   	push   ecx
c0020a92:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a94:	52                   	push   edx
c0020a95:	50                   	push   eax
c0020a96:	e8 d0 f4 ff ff       	call   c001ff6b <Vm::fpuLongToFloat(long long)>
c0020a9b:	e9 ee 00 00 00       	jmp    c0020b8e <Vm::x87Handler(regs*)+0x914>
c0020aa0:	31 c0                	xor    eax,eax
c0020aa2:	80 fa 07             	cmp    dl,0x7
c0020aa5:	0f 85 30 02 00 00    	jne    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c0020aab:	83 ec 0c             	sub    esp,0xc
c0020aae:	6a 00                	push   0x0
c0020ab0:	e8 88 f6 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020ab5:	89 c7                	mov    edi,eax
c0020ab7:	89 d5                	mov    ebp,edx
c0020ab9:	58                   	pop    eax
c0020aba:	8b 06                	mov    eax,DWORD PTR [esi]
c0020abc:	5a                   	pop    edx
c0020abd:	31 d2                	xor    edx,edx
c0020abf:	52                   	push   edx
c0020ac0:	50                   	push   eax
c0020ac1:	e8 a5 f4 ff ff       	call   c001ff6b <Vm::fpuLongToFloat(long long)>
c0020ac6:	e9 62 01 00 00       	jmp    c0020c2d <Vm::x87Handler(regs*)+0x9b3>
c0020acb:	84 d2                	test   dl,dl
c0020acd:	75 0d                	jne    c0020adc <Vm::x87Handler(regs*)+0x862>
c0020acf:	31 d2                	xor    edx,edx
c0020ad1:	55                   	push   ebp
c0020ad2:	55                   	push   ebp
c0020ad3:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ad5:	52                   	push   edx
c0020ad6:	50                   	push   eax
c0020ad7:	e9 d3 01 00 00       	jmp    c0020caf <Vm::x87Handler(regs*)+0xa35>
c0020adc:	31 c0                	xor    eax,eax
c0020ade:	80 fa 02             	cmp    dl,0x2
c0020ae1:	0f 85 f4 01 00 00    	jne    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c0020ae7:	83 ec 0c             	sub    esp,0xc
c0020aea:	6a 00                	push   0x0
c0020aec:	e8 4c f6 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020af1:	59                   	pop    ecx
c0020af2:	5f                   	pop    edi
c0020af3:	e9 6a f9 ff ff       	jmp    c0020462 <Vm::x87Handler(regs*)+0x1e8>
c0020af8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020afc:	84 d2                	test   dl,dl
c0020afe:	75 2a                	jne    c0020b2a <Vm::x87Handler(regs*)+0x8b0>
c0020b00:	50                   	push   eax
c0020b01:	50                   	push   eax
c0020b02:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b05:	ff 36                	push   DWORD PTR [esi]
c0020b07:	e8 c5 f3 ff ff       	call   c001fed1 <Vm::fpu64ToInternal(unsigned long long)>
c0020b0c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b13:	89 c6                	mov    esi,eax
c0020b15:	89 d7                	mov    edi,edx
c0020b17:	e8 21 f6 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020b1c:	57                   	push   edi
c0020b1d:	56                   	push   esi
c0020b1e:	52                   	push   edx
c0020b1f:	50                   	push   eax
c0020b20:	e8 8e f5 ff ff       	call   c00200b3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020b25:	e9 64 01 00 00       	jmp    c0020c8e <Vm::x87Handler(regs*)+0xa14>
c0020b2a:	80 fa 01             	cmp    dl,0x1
c0020b2d:	75 11                	jne    c0020b40 <Vm::x87Handler(regs*)+0x8c6>
c0020b2f:	50                   	push   eax
c0020b30:	50                   	push   eax
c0020b31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b34:	ff 36                	push   DWORD PTR [esi]
c0020b36:	e8 96 f3 ff ff       	call   c001fed1 <Vm::fpu64ToInternal(unsigned long long)>
c0020b3b:	e9 35 01 00 00       	jmp    c0020c75 <Vm::x87Handler(regs*)+0x9fb>
c0020b40:	80 fa 02             	cmp    dl,0x2
c0020b43:	0f 85 54 f9 ff ff    	jne    c002049d <Vm::x87Handler(regs*)+0x223>
c0020b49:	55                   	push   ebp
c0020b4a:	55                   	push   ebp
c0020b4b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b4e:	ff 36                	push   DWORD PTR [esi]
c0020b50:	e8 7c f3 ff ff       	call   c001fed1 <Vm::fpu64ToInternal(unsigned long long)>
c0020b55:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b5c:	89 c6                	mov    esi,eax
c0020b5e:	89 d7                	mov    edi,edx
c0020b60:	e8 d8 f5 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020b65:	57                   	push   edi
c0020b66:	56                   	push   esi
c0020b67:	52                   	push   edx
c0020b68:	50                   	push   eax
c0020b69:	e8 f2 f4 ff ff       	call   c0020060 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020b6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020b72:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020b75:	83 c4 20             	add    esp,0x20
c0020b78:	e9 74 f7 ff ff       	jmp    c00202f1 <Vm::x87Handler(regs*)+0x77>
c0020b7d:	80 fa 04             	cmp    dl,0x4
c0020b80:	75 2a                	jne    c0020bac <Vm::x87Handler(regs*)+0x932>
c0020b82:	51                   	push   ecx
c0020b83:	51                   	push   ecx
c0020b84:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b87:	ff 36                	push   DWORD PTR [esi]
c0020b89:	e8 43 f3 ff ff       	call   c001fed1 <Vm::fpu64ToInternal(unsigned long long)>
c0020b8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b95:	89 c6                	mov    esi,eax
c0020b97:	89 d7                	mov    edi,edx
c0020b99:	e8 9f f5 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020b9e:	57                   	push   edi
c0020b9f:	56                   	push   esi
c0020ba0:	52                   	push   edx
c0020ba1:	50                   	push   eax
c0020ba2:	e8 36 f5 ff ff       	call   c00200dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020ba7:	e9 e2 00 00 00       	jmp    c0020c8e <Vm::x87Handler(regs*)+0xa14>
c0020bac:	80 fa 05             	cmp    dl,0x5
c0020baf:	75 28                	jne    c0020bd9 <Vm::x87Handler(regs*)+0x95f>
c0020bb1:	83 ec 0c             	sub    esp,0xc
c0020bb4:	6a 00                	push   0x0
c0020bb6:	e8 82 f5 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020bbb:	89 c7                	mov    edi,eax
c0020bbd:	89 d5                	mov    ebp,edx
c0020bbf:	58                   	pop    eax
c0020bc0:	5a                   	pop    edx
c0020bc1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020bc4:	ff 36                	push   DWORD PTR [esi]
c0020bc6:	e8 06 f3 ff ff       	call   c001fed1 <Vm::fpu64ToInternal(unsigned long long)>
c0020bcb:	83 c4 10             	add    esp,0x10
c0020bce:	55                   	push   ebp
c0020bcf:	57                   	push   edi
c0020bd0:	52                   	push   edx
c0020bd1:	50                   	push   eax
c0020bd2:	e8 06 f5 ff ff       	call   c00200dd <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020bd7:	eb 60                	jmp    c0020c39 <Vm::x87Handler(regs*)+0x9bf>
c0020bd9:	80 fa 06             	cmp    dl,0x6
c0020bdc:	75 2a                	jne    c0020c08 <Vm::x87Handler(regs*)+0x98e>
c0020bde:	51                   	push   ecx
c0020bdf:	51                   	push   ecx
c0020be0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020be3:	ff 36                	push   DWORD PTR [esi]
c0020be5:	e8 e7 f2 ff ff       	call   c001fed1 <Vm::fpu64ToInternal(unsigned long long)>
c0020bea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020bf1:	89 c6                	mov    esi,eax
c0020bf3:	89 d7                	mov    edi,edx
c0020bf5:	e8 43 f5 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020bfa:	57                   	push   edi
c0020bfb:	56                   	push   esi
c0020bfc:	52                   	push   edx
c0020bfd:	50                   	push   eax
c0020bfe:	e8 08 f5 ff ff       	call   c002010b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020c03:	e9 86 00 00 00       	jmp    c0020c8e <Vm::x87Handler(regs*)+0xa14>
c0020c08:	31 c0                	xor    eax,eax
c0020c0a:	80 fa 07             	cmp    dl,0x7
c0020c0d:	0f 85 c8 00 00 00    	jne    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c0020c13:	83 ec 0c             	sub    esp,0xc
c0020c16:	6a 00                	push   0x0
c0020c18:	e8 20 f5 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020c1d:	89 c7                	mov    edi,eax
c0020c1f:	89 d5                	mov    ebp,edx
c0020c21:	58                   	pop    eax
c0020c22:	5a                   	pop    edx
c0020c23:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c26:	ff 36                	push   DWORD PTR [esi]
c0020c28:	e8 a4 f2 ff ff       	call   c001fed1 <Vm::fpu64ToInternal(unsigned long long)>
c0020c2d:	83 c4 10             	add    esp,0x10
c0020c30:	55                   	push   ebp
c0020c31:	57                   	push   edi
c0020c32:	52                   	push   edx
c0020c33:	50                   	push   eax
c0020c34:	e8 d2 f4 ff ff       	call   c002010b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020c39:	83 c4 0c             	add    esp,0xc
c0020c3c:	eb 53                	jmp    c0020c91 <Vm::x87Handler(regs*)+0xa17>
c0020c3e:	31 c0                	xor    eax,eax
c0020c40:	80 fa 02             	cmp    dl,0x2
c0020c43:	0f 85 92 00 00 00    	jne    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c0020c49:	83 ec 0c             	sub    esp,0xc
c0020c4c:	6a 00                	push   0x0
c0020c4e:	e8 ea f4 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020c53:	59                   	pop    ecx
c0020c54:	5f                   	pop    edi
c0020c55:	52                   	push   edx
c0020c56:	50                   	push   eax
c0020c57:	e8 27 f2 ff ff       	call   c001fe83 <Vm::fpuInternalTo64(unsigned long long)>
c0020c5c:	eb 70                	jmp    c0020cce <Vm::x87Handler(regs*)+0xa54>
c0020c5e:	31 c0                	xor    eax,eax
c0020c60:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020c65:	75 74                	jne    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c0020c67:	50                   	push   eax
c0020c68:	50                   	push   eax
c0020c69:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020c6c:	31 d2                	xor    edx,edx
c0020c6e:	52                   	push   edx
c0020c6f:	50                   	push   eax
c0020c70:	e8 f6 f2 ff ff       	call   c001ff6b <Vm::fpuLongToFloat(long long)>
c0020c75:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c7c:	89 c6                	mov    esi,eax
c0020c7e:	89 d7                	mov    edi,edx
c0020c80:	e8 b8 f4 ff ff       	call   c002013d <Vm::fpuGetReg(int)>
c0020c85:	57                   	push   edi
c0020c86:	56                   	push   esi
c0020c87:	52                   	push   edx
c0020c88:	50                   	push   eax
c0020c89:	e8 5e f4 ff ff       	call   c00200ec <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020c8e:	83 c4 1c             	add    esp,0x1c
c0020c91:	52                   	push   edx
c0020c92:	50                   	push   eax
c0020c93:	6a 00                	push   0x0
c0020c95:	e8 e6 f4 ff ff       	call   c0020180 <Vm::fpuSetReg(int, unsigned long long)>
c0020c9a:	e9 f2 f7 ff ff       	jmp    c0020491 <Vm::x87Handler(regs*)+0x217>
c0020c9f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020ca3:	80 fa 05             	cmp    dl,0x5
c0020ca6:	75 11                	jne    c0020cb9 <Vm::x87Handler(regs*)+0xa3f>
c0020ca8:	55                   	push   ebp
c0020ca9:	55                   	push   ebp
c0020caa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020cad:	ff 36                	push   DWORD PTR [esi]
c0020caf:	e8 81 f2 ff ff       	call   c001ff35 <Vm::fpuULongToFloat(unsigned long long)>
c0020cb4:	e9 cf f7 ff ff       	jmp    c0020488 <Vm::x87Handler(regs*)+0x20e>
c0020cb9:	31 c0                	xor    eax,eax
c0020cbb:	80 fa 07             	cmp    dl,0x7
c0020cbe:	75 1b                	jne    c0020cdb <Vm::x87Handler(regs*)+0xa61>
c0020cc0:	e8 63 f5 ff ff       	call   c0020228 <Vm::fpuPop()>
c0020cc5:	51                   	push   ecx
c0020cc6:	51                   	push   ecx
c0020cc7:	52                   	push   edx
c0020cc8:	50                   	push   eax
c0020cc9:	e8 0c f2 ff ff       	call   c001feda <Vm::fpuFloatToLong(unsigned long long)>
c0020cce:	83 c4 10             	add    esp,0x10
c0020cd1:	89 06                	mov    DWORD PTR [esi],eax
c0020cd3:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020cd6:	e9 f8 f7 ff ff       	jmp    c00204d3 <Vm::x87Handler(regs*)+0x259>
c0020cdb:	83 c4 1c             	add    esp,0x1c
c0020cde:	5b                   	pop    ebx
c0020cdf:	5e                   	pop    esi
c0020ce0:	5f                   	pop    edi
c0020ce1:	5d                   	pop    ebp
c0020ce2:	c3                   	ret    

c0020ce3 <__static_initialization_and_destruction_0(int, int)>:
c0020ce3:	83 ec 0c             	sub    esp,0xc
c0020ce6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020ceb:	75 1a                	jne    c0020d07 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020ced:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020cf5:	75 10                	jne    c0020d07 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020cf7:	83 ec 0c             	sub    esp,0xc
c0020cfa:	68 80 26 03 c0       	push   0xc0032680
c0020cff:	e8 d8 8a 00 00       	call   c00297dc <Vm::_FPUState::_FPUState()>
c0020d04:	83 c4 10             	add    esp,0x10
c0020d07:	90                   	nop
c0020d08:	83 c4 0c             	add    esp,0xc
c0020d0b:	c3                   	ret    

c0020d0c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020d0c:	83 ec 0c             	sub    esp,0xc
c0020d0f:	83 ec 08             	sub    esp,0x8
c0020d12:	68 ff ff 00 00       	push   0xffff
c0020d17:	6a 01                	push   0x1
c0020d19:	e8 c5 ff ff ff       	call   c0020ce3 <__static_initialization_and_destruction_0(int, int)>
c0020d1e:	83 c4 10             	add    esp,0x10
c0020d21:	83 c4 0c             	add    esp,0xc
c0020d24:	c3                   	ret    
c0020d25:	90                   	nop

c0020d26 <FAT::getName()>:
c0020d26:	b8 6c d4 02 c0       	mov    eax,0xc002d46c
c0020d2b:	c3                   	ret    

c0020d2c <FAT::tell(void*, unsigned long long*)>:
c0020d2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020d31:	75 06                	jne    c0020d39 <FAT::tell(void*, unsigned long long*)+0xd>
c0020d33:	b8 04 00 00 00       	mov    eax,0x4
c0020d38:	c3                   	ret    
c0020d39:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020d3e:	75 06                	jne    c0020d46 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020d40:	b8 04 00 00 00       	mov    eax,0x4
c0020d45:	c3                   	ret    
c0020d46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d4a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020d4d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020d50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020d54:	89 01                	mov    DWORD PTR [ecx],eax
c0020d56:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020d59:	b8 00 00 00 00       	mov    eax,0x0
c0020d5e:	c3                   	ret    
c0020d5f:	90                   	nop

c0020d60 <FAT::stat(void*, unsigned long long*)>:
c0020d60:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020d65:	75 06                	jne    c0020d6d <FAT::stat(void*, unsigned long long*)+0xd>
c0020d67:	b8 04 00 00 00       	mov    eax,0x4
c0020d6c:	c3                   	ret    
c0020d6d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020d72:	75 06                	jne    c0020d7a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020d74:	b8 04 00 00 00       	mov    eax,0x4
c0020d79:	c3                   	ret    
c0020d7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d7e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020d81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020d84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020d88:	89 01                	mov    DWORD PTR [ecx],eax
c0020d8a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020d8d:	b8 00 00 00 00       	mov    eax,0x0
c0020d92:	c3                   	ret    
c0020d93:	90                   	nop

c0020d94 <FAT::~FAT()>:
c0020d94:	83 ec 0c             	sub    esp,0xc
c0020d97:	ba fc d4 02 c0       	mov    edx,0xc002d4fc
c0020d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020da0:	89 10                	mov    DWORD PTR [eax],edx
c0020da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020da6:	83 ec 0c             	sub    esp,0xc
c0020da9:	50                   	push   eax
c0020daa:	e8 1f 24 ff ff       	call   c00131ce <Filesystem::~Filesystem()>
c0020daf:	83 c4 10             	add    esp,0x10
c0020db2:	90                   	nop
c0020db3:	83 c4 0c             	add    esp,0xc
c0020db6:	c3                   	ret    
c0020db7:	90                   	nop

c0020db8 <FAT::~FAT()>:
c0020db8:	83 ec 0c             	sub    esp,0xc
c0020dbb:	83 ec 0c             	sub    esp,0xc
c0020dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dc2:	e8 cd ff ff ff       	call   c0020d94 <FAT::~FAT()>
c0020dc7:	83 c4 10             	add    esp,0x10
c0020dca:	83 ec 08             	sub    esp,0x8
c0020dcd:	6a 08                	push   0x8
c0020dcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020dd3:	e8 e7 1f ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0020dd8:	83 c4 10             	add    esp,0x10
c0020ddb:	83 c4 0c             	add    esp,0xc
c0020dde:	c3                   	ret    
c0020ddf:	90                   	nop

c0020de0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020de0:	83 ec 1c             	sub    esp,0x1c
c0020de3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020dea:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020def:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020df3:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0020dfa:	83 f8 ff             	cmp    eax,0xffffffff
c0020dfd:	75 34                	jne    c0020e33 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020dff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020e03:	88 c2                	mov    dl,al
c0020e05:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020e0a:	01 d0                	add    eax,edx
c0020e0c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020e10:	8b 15 e0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e0
c0020e16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e1a:	89 14 85 00 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd900],edx
c0020e21:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020e26:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020e2a:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c0020e31:	eb 17                	jmp    c0020e4a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020e33:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020e37:	88 c2                	mov    dl,al
c0020e39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e3d:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0020e44:	01 d0                	add    eax,edx
c0020e46:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020e4a:	83 ec 04             	sub    esp,0x4
c0020e4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e55:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020e59:	50                   	push   eax
c0020e5a:	e8 bb 5e fe ff       	call   c0006d1a <f_getlabel>
c0020e5f:	83 c4 10             	add    esp,0x10
c0020e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e66:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020e6b:	75 07                	jne    c0020e74 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020e6d:	b8 00 00 00 00       	mov    eax,0x0
c0020e72:	eb 05                	jmp    c0020e79 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020e74:	b8 01 00 00 00       	mov    eax,0x1
c0020e79:	83 c4 1c             	add    esp,0x1c
c0020e7c:	c3                   	ret    
c0020e7d:	90                   	nop

c0020e7e <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020e7e:	57                   	push   edi
c0020e7f:	83 ec 58             	sub    esp,0x58
c0020e82:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020e8a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020e8e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020e93:	b8 00 00 00 00       	mov    eax,0x0
c0020e98:	fc                   	cld    
c0020e99:	89 d7                	mov    edi,edx
c0020e9b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020e9d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020ea1:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0020ea8:	83 f8 ff             	cmp    eax,0xffffffff
c0020eab:	75 34                	jne    c0020ee1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020ead:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020eb1:	88 c2                	mov    dl,al
c0020eb3:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020eb8:	01 d0                	add    eax,edx
c0020eba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ebe:	8b 15 e0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e0
c0020ec4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020ec8:	89 14 85 00 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd900],edx
c0020ecf:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0020ed4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020ed8:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c0020edf:	eb 17                	jmp    c0020ef8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020ee1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020ee5:	88 c2                	mov    dl,al
c0020ee7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020eeb:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0020ef2:	01 d0                	add    eax,edx
c0020ef4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ef8:	83 ec 08             	sub    esp,0x8
c0020efb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020eff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f03:	50                   	push   eax
c0020f04:	e8 5f fa fd ff       	call   c0000968 <strcat>
c0020f09:	83 c4 10             	add    esp,0x10
c0020f0c:	83 ec 0c             	sub    esp,0xc
c0020f0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f13:	50                   	push   eax
c0020f14:	e8 ef 5f fe ff       	call   c0006f08 <f_setlabel>
c0020f19:	83 c4 10             	add    esp,0x10
c0020f1c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020f20:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020f25:	75 07                	jne    c0020f2e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020f27:	b8 00 00 00 00       	mov    eax,0x0
c0020f2c:	eb 05                	jmp    c0020f33 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020f2e:	b8 01 00 00 00       	mov    eax,0x1
c0020f33:	83 c4 58             	add    esp,0x58
c0020f36:	5f                   	pop    edi
c0020f37:	c3                   	ret    

c0020f38 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020f38:	83 ec 2c             	sub    esp,0x2c
c0020f3b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020f43:	83 ec 08             	sub    esp,0x8
c0020f46:	68 90 d4 02 c0       	push   0xc002d490
c0020f4b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f4f:	e8 60 f9 fd ff       	call   c00008b4 <strcmp>
c0020f54:	83 c4 10             	add    esp,0x10
c0020f57:	85 c0                	test   eax,eax
c0020f59:	0f 94 c0             	sete   al
c0020f5c:	84 c0                	test   al,al
c0020f5e:	74 0d                	je     c0020f6d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020f60:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020f68:	e9 a6 00 00 00       	jmp    c0021013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020f6d:	83 ec 08             	sub    esp,0x8
c0020f70:	68 82 d4 02 c0       	push   0xc002d482
c0020f75:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020f79:	e8 36 f9 fd ff       	call   c00008b4 <strcmp>
c0020f7e:	83 c4 10             	add    esp,0x10
c0020f81:	85 c0                	test   eax,eax
c0020f83:	0f 94 c0             	sete   al
c0020f86:	84 c0                	test   al,al
c0020f88:	74 0a                	je     c0020f94 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020f8a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020f92:	eb 7f                	jmp    c0021013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020f94:	83 ec 08             	sub    esp,0x8
c0020f97:	68 88 d4 02 c0       	push   0xc002d488
c0020f9c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fa0:	e8 0f f9 fd ff       	call   c00008b4 <strcmp>
c0020fa5:	83 c4 10             	add    esp,0x10
c0020fa8:	85 c0                	test   eax,eax
c0020faa:	0f 94 c0             	sete   al
c0020fad:	84 c0                	test   al,al
c0020faf:	74 0a                	je     c0020fbb <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020fb1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020fb9:	eb 58                	jmp    c0021013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020fbb:	83 ec 08             	sub    esp,0x8
c0020fbe:	68 4c 9f 02 c0       	push   0xc0029f4c
c0020fc3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fc7:	e8 e8 f8 fd ff       	call   c00008b4 <strcmp>
c0020fcc:	83 c4 10             	add    esp,0x10
c0020fcf:	85 c0                	test   eax,eax
c0020fd1:	0f 94 c0             	sete   al
c0020fd4:	84 c0                	test   al,al
c0020fd6:	74 0a                	je     c0020fe2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020fd8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020fe0:	eb 31                	jmp    c0021013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020fe2:	83 ec 08             	sub    esp,0x8
c0020fe5:	68 8e d4 02 c0       	push   0xc002d48e
c0020fea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fee:	e8 c1 f8 fd ff       	call   c00008b4 <strcmp>
c0020ff3:	83 c4 10             	add    esp,0x10
c0020ff6:	85 c0                	test   eax,eax
c0020ff8:	0f 94 c0             	sete   al
c0020ffb:	84 c0                	test   al,al
c0020ffd:	74 0a                	je     c0021009 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020fff:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0021007:	eb 0a                	jmp    c0021013 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021009:	b8 08 00 00 00       	mov    eax,0x8
c002100e:	e9 04 01 00 00       	jmp    c0021117 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021013:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002101a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002101f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021023:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c002102a:	83 f8 ff             	cmp    eax,0xffffffff
c002102d:	75 34                	jne    c0021063 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002102f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0021033:	88 c2                	mov    dl,al
c0021035:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c002103a:	01 d0                	add    eax,edx
c002103c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0021040:	8b 15 e0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e0
c0021046:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002104a:	89 14 85 00 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd900],edx
c0021051:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0021056:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002105a:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c0021061:	eb 17                	jmp    c002107a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0021063:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0021067:	88 c2                	mov    dl,al
c0021069:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002106d:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0021074:	01 d0                	add    eax,edx
c0021076:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002107a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002107e:	88 04 24             	mov    BYTE PTR [esp],al
c0021081:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021085:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021089:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021091:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0021096:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002109e:	83 ec 0c             	sub    esp,0xc
c00210a1:	68 00 20 00 00       	push   0x2000
c00210a6:	e8 49 e8 fe ff       	call   c000f8f4 <malloc>
c00210ab:	83 c4 10             	add    esp,0x10
c00210ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00210b2:	68 00 20 00 00       	push   0x2000
c00210b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210bf:	50                   	push   eax
c00210c0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00210c4:	50                   	push   eax
c00210c5:	e8 89 62 fe ff       	call   c0007353 <f_mkfs>
c00210ca:	83 c4 10             	add    esp,0x10
c00210cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00210d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00210d6:	75 07                	jne    c00210df <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00210d8:	b8 00 00 00 00       	mov    eax,0x0
c00210dd:	eb 38                	jmp    c0021117 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00210df:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00210e4:	75 17                	jne    c00210fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00210e6:	83 ec 0c             	sub    esp,0xc
c00210e9:	68 cc d4 02 c0       	push   0xc002d4cc
c00210ee:	e8 ac 1d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00210f3:	83 c4 10             	add    esp,0x10
c00210f6:	b8 09 00 00 00       	mov    eax,0x9
c00210fb:	eb 1a                	jmp    c0021117 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00210fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021101:	83 ec 08             	sub    esp,0x8
c0021104:	50                   	push   eax
c0021105:	68 94 d4 02 c0       	push   0xc002d494
c002110a:	e8 90 1d ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c002110f:	83 c4 10             	add    esp,0x10
c0021112:	b8 01 00 00 00       	mov    eax,0x1
c0021117:	83 c4 2c             	add    esp,0x2c
c002111a:	c3                   	ret    
c002111b:	90                   	nop

c002111c <FAT::tryMount(LogicalDisk*, int)>:
c002111c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0021122:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0021127:	83 f8 14             	cmp    eax,0x14
c002112a:	75 17                	jne    c0021143 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002112c:	83 ec 0c             	sub    esp,0xc
c002112f:	68 a6 d4 02 c0       	push   0xc002d4a6
c0021134:	e8 4e 97 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0021139:	83 c4 10             	add    esp,0x10
c002113c:	b0 00                	mov    al,0x0
c002113e:	e9 d7 01 00 00       	jmp    c002131a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021143:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002114a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021150:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021156:	3d 00 02 00 00       	cmp    eax,0x200
c002115b:	74 07                	je     c0021164 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002115d:	b0 00                	mov    al,0x0
c002115f:	e9 b6 01 00 00       	jmp    c002131a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021164:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002116c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021173:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c002117a:	83 f8 ff             	cmp    eax,0xffffffff
c002117d:	74 07                	je     c0021186 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002117f:	b0 01                	mov    al,0x1
c0021181:	e9 94 01 00 00       	jmp    c002131a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021186:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0021190:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0021198:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002119f:	88 c2                	mov    dl,al
c00211a1:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c00211a6:	01 d0                	add    eax,edx
c00211a8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00211af:	8b 15 e0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326e0
c00211b5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00211bc:	89 14 85 00 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd900],edx
c00211c3:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c00211c8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00211cf:	89 14 85 80 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd880],edx
c00211d6:	83 ec 0c             	sub    esp,0xc
c00211d9:	68 54 02 00 00       	push   0x254
c00211de:	e8 11 e7 fe ff       	call   c000f8f4 <malloc>
c00211e3:	83 c4 10             	add    esp,0x10
c00211e6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00211ed:	83 ec 04             	sub    esp,0x4
c00211f0:	6a 00                	push   0x0
c00211f2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00211f9:	50                   	push   eax
c00211fa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021201:	e8 0b 3d fe ff       	call   c0004f11 <f_mount>
c0021206:	83 c4 10             	add    esp,0x10
c0021209:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021210:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0021218:	74 19                	je     c0021233 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002121a:	83 ec 0c             	sub    esp,0xc
c002121d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021224:	e8 eb e6 fe ff       	call   c000f914 <rfree>
c0021229:	83 c4 10             	add    esp,0x10
c002122c:	b0 00                	mov    al,0x0
c002122e:	e9 e7 00 00 00       	jmp    c002131a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021233:	83 ec 04             	sub    esp,0x4
c0021236:	68 00 01 00 00       	push   0x100
c002123b:	6a 00                	push   0x0
c002123d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021244:	50                   	push   eax
c0021245:	e8 22 f5 fd ff       	call   c000076c <memset>
c002124a:	83 c4 10             	add    esp,0x10
c002124d:	83 ec 08             	sub    esp,0x8
c0021250:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021257:	50                   	push   eax
c0021258:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002125f:	50                   	push   eax
c0021260:	e8 03 f7 fd ff       	call   c0000968 <strcat>
c0021265:	83 c4 10             	add    esp,0x10
c0021268:	83 ec 08             	sub    esp,0x8
c002126b:	68 b4 d4 02 c0       	push   0xc002d4b4
c0021270:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021277:	50                   	push   eax
c0021278:	e8 eb f6 fd ff       	call   c0000968 <strcat>
c002127d:	83 c4 10             	add    esp,0x10
c0021280:	83 ec 04             	sub    esp,0x4
c0021283:	6a 01                	push   0x1
c0021285:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002128c:	50                   	push   eax
c002128d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021291:	50                   	push   eax
c0021292:	e8 dc 3c fe ff       	call   c0004f73 <f_open>
c0021297:	83 c4 10             	add    esp,0x10
c002129a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00212a1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00212a8:	85 c0                	test   eax,eax
c00212aa:	74 0a                	je     c00212b6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00212ac:	78 2d                	js     c00212db <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00212ae:	83 e8 04             	sub    eax,0x4
c00212b1:	83 f8 01             	cmp    eax,0x1
c00212b4:	77 25                	ja     c00212db <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00212b6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00212be:	83 ec 0c             	sub    esp,0xc
c00212c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212c5:	50                   	push   eax
c00212c6:	e8 fa 47 fe ff       	call   c0005ac5 <f_close>
c00212cb:	83 c4 10             	add    esp,0x10
c00212ce:	90                   	nop
c00212cf:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00212d7:	74 3a                	je     c0021313 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00212d9:	eb 2d                	jmp    c0021308 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00212db:	83 ec 0c             	sub    esp,0xc
c00212de:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00212e5:	e8 2a e6 fe ff       	call   c000f914 <rfree>
c00212ea:	83 c4 10             	add    esp,0x10
c00212ed:	83 ec 04             	sub    esp,0x4
c00212f0:	6a 00                	push   0x0
c00212f2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00212f9:	50                   	push   eax
c00212fa:	6a 00                	push   0x0
c00212fc:	e8 10 3c fe ff       	call   c0004f11 <f_mount>
c0021301:	83 c4 10             	add    esp,0x10
c0021304:	b0 00                	mov    al,0x0
c0021306:	eb 12                	jmp    c002131a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021308:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c002130d:	40                   	inc    eax
c002130e:	a3 e0 26 03 c0       	mov    ds:0xc00326e0,eax
c0021313:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002131a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021320:	c3                   	ret    
c0021321:	90                   	nop

c0021322 <FAT::getFileFirstSector(char const*)>:
c0021322:	53                   	push   ebx
c0021323:	83 ec 28             	sub    esp,0x28
c0021326:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002132e:	83 ec 0c             	sub    esp,0xc
c0021331:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021335:	e8 ba e5 fe ff       	call   c000f8f4 <malloc>
c002133a:	83 c4 10             	add    esp,0x10
c002133d:	89 c3                	mov    ebx,eax
c002133f:	a1 10 26 03 c0       	mov    eax,ds:0xc0032610
c0021344:	83 ec 04             	sub    esp,0x4
c0021347:	50                   	push   eax
c0021348:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002134c:	53                   	push   ebx
c002134d:	e8 ac 20 ff ff       	call   c00133fe <File::File(char const*, Process*)>
c0021352:	83 c4 10             	add    esp,0x10
c0021355:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0021359:	83 ec 08             	sub    esp,0x8
c002135c:	6a 01                	push   0x1
c002135e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021362:	e8 fb 20 ff ff       	call   c0013462 <File::open(FileOpenMode)>
c0021367:	83 c4 10             	add    esp,0x10
c002136a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002136e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021370:	83 c0 0c             	add    eax,0xc
c0021373:	8b 00                	mov    eax,DWORD PTR [eax]
c0021375:	83 ec 0c             	sub    esp,0xc
c0021378:	8d 54 24 14          	lea    edx,[esp+0x14]
c002137c:	52                   	push   edx
c002137d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021381:	52                   	push   edx
c0021382:	6a 00                	push   0x0
c0021384:	6a 04                	push   0x4
c0021386:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002138a:	ff d0                	call   eax
c002138c:	83 c4 20             	add    esp,0x20
c002138f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021393:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0021399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002139d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213a1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00213a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00213a7:	83 ec 04             	sub    esp,0x4
c00213aa:	52                   	push   edx
c00213ab:	50                   	push   eax
c00213ac:	68 bf d4 02 c0       	push   0xc002d4bf
c00213b1:	e8 e9 1a ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00213b6:	83 c4 10             	add    esp,0x10
c00213b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213bd:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00213c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00213c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00213c7:	83 ec 0c             	sub    esp,0xc
c00213ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00213ce:	e8 ed 20 ff ff       	call   c00134c0 <File::close()>
c00213d3:	83 c4 10             	add    esp,0x10
c00213d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213da:	ba 00 00 00 00       	mov    edx,0x0
c00213df:	83 c4 28             	add    esp,0x28
c00213e2:	5b                   	pop    ebx
c00213e3:	c3                   	ret    

c00213e4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00213e4:	57                   	push   edi
c00213e5:	56                   	push   esi
c00213e6:	53                   	push   ebx
c00213e7:	81 ec 50 02 00 00    	sub    esp,0x250
c00213ed:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00213f5:	74 0a                	je     c0021401 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00213f7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00213ff:	75 0a                	jne    c002140b <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0021401:	b8 04 00 00 00       	mov    eax,0x4
c0021406:	e9 29 01 00 00       	jmp    c0021534 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002140b:	83 ec 08             	sub    esp,0x8
c002140e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021415:	50                   	push   eax
c0021416:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002141d:	e8 ad 4c fe ff       	call   c00060cf <f_readdir>
c0021422:	83 c4 10             	add    esp,0x10
c0021425:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002142c:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0021433:	83 ec 0c             	sub    esp,0xc
c0021436:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002143d:	83 c0 1a             	add    eax,0x1a
c0021440:	50                   	push   eax
c0021441:	e8 42 f3 fd ff       	call   c0000788 <strlen>
c0021446:	83 c4 10             	add    esp,0x10
c0021449:	ba 00 00 00 00       	mov    edx,0x0
c002144e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021452:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021456:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002145d:	0f b6 c0             	movzx  eax,al
c0021460:	83 e0 10             	and    eax,0x10
c0021463:	74 07                	je     c002146c <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0021465:	b8 02 00 00 00       	mov    eax,0x2
c002146a:	eb 05                	jmp    c0021471 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002146c:	b8 01 00 00 00       	mov    eax,0x1
c0021471:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021475:	83 ec 08             	sub    esp,0x8
c0021478:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002147f:	83 c0 1a             	add    eax,0x1a
c0021482:	50                   	push   eax
c0021483:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021487:	83 c0 10             	add    eax,0x10
c002148a:	50                   	push   eax
c002148b:	e8 98 f3 fd ff       	call   c0000828 <strcpy>
c0021490:	83 c4 10             	add    esp,0x10
c0021493:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002149a:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00214a1:	8d 44 24 04          	lea    eax,[esp+0x4]
c00214a5:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00214ac:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00214b3:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00214ba:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00214c1:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00214c8:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00214cf:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00214d6:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00214dd:	89 c6                	mov    esi,eax
c00214df:	89 d7                	mov    edi,edx
c00214e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00214e3:	89 c8                	mov    eax,ecx
c00214e5:	89 fa                	mov    edx,edi
c00214e7:	89 f3                	mov    ebx,esi
c00214e9:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00214f0:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00214f7:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00214fe:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0021505:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002150b:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0021512:	84 c0                	test   al,al
c0021514:	75 07                	jne    c002151d <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0021516:	b8 07 00 00 00       	mov    eax,0x7
c002151b:	eb 17                	jmp    c0021534 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002151d:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0021524:	85 c0                	test   eax,eax
c0021526:	75 07                	jne    c002152f <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0021528:	b8 00 00 00 00       	mov    eax,0x0
c002152d:	eb 05                	jmp    c0021534 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002152f:	b8 01 00 00 00       	mov    eax,0x1
c0021534:	81 c4 50 02 00 00    	add    esp,0x250
c002153a:	5b                   	pop    ebx
c002153b:	5e                   	pop    esi
c002153c:	5f                   	pop    edi
c002153d:	c3                   	ret    

c002153e <FAT::read(void*, unsigned long, void*, int*)>:
c002153e:	83 ec 1c             	sub    esp,0x1c
c0021541:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021546:	74 07                	je     c002154f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021548:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002154d:	75 07                	jne    c0021556 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002154f:	b8 04 00 00 00       	mov    eax,0x4
c0021554:	eb 3d                	jmp    c0021593 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021556:	8d 44 24 08          	lea    eax,[esp+0x8]
c002155a:	50                   	push   eax
c002155b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002155f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021563:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021567:	e8 43 3e fe ff       	call   c00053af <f_read>
c002156c:	83 c4 10             	add    esp,0x10
c002156f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021577:	89 c2                	mov    edx,eax
c0021579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002157d:	89 10                	mov    DWORD PTR [eax],edx
c002157f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021583:	85 c0                	test   eax,eax
c0021585:	75 07                	jne    c002158e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021587:	b8 00 00 00 00       	mov    eax,0x0
c002158c:	eb 05                	jmp    c0021593 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002158e:	b8 01 00 00 00       	mov    eax,0x1
c0021593:	83 c4 1c             	add    esp,0x1c
c0021596:	c3                   	ret    
c0021597:	90                   	nop

c0021598 <FAT::write(void*, unsigned long, void*, int*)>:
c0021598:	83 ec 1c             	sub    esp,0x1c
c002159b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00215a0:	74 07                	je     c00215a9 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00215a2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00215a7:	75 07                	jne    c00215b0 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00215a9:	b8 04 00 00 00       	mov    eax,0x4
c00215ae:	eb 3d                	jmp    c00215ed <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00215b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215b4:	50                   	push   eax
c00215b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00215b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00215bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215c1:	e8 69 40 fe ff       	call   c000562f <f_write>
c00215c6:	83 c4 10             	add    esp,0x10
c00215c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215d1:	89 c2                	mov    edx,eax
c00215d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00215d7:	89 10                	mov    DWORD PTR [eax],edx
c00215d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215dd:	85 c0                	test   eax,eax
c00215df:	75 07                	jne    c00215e8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00215e1:	b8 00 00 00 00       	mov    eax,0x0
c00215e6:	eb 05                	jmp    c00215ed <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00215e8:	b8 01 00 00 00       	mov    eax,0x1
c00215ed:	83 c4 1c             	add    esp,0x1c
c00215f0:	c3                   	ret    
c00215f1:	90                   	nop

c00215f2 <FAT::close(void*)>:
c00215f2:	83 ec 1c             	sub    esp,0x1c
c00215f5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00215fa:	75 07                	jne    c0021603 <FAT::close(void*)+0x11>
c00215fc:	b8 04 00 00 00       	mov    eax,0x4
c0021601:	eb 36                	jmp    c0021639 <FAT::close(void*)+0x47>
c0021603:	83 ec 0c             	sub    esp,0xc
c0021606:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002160a:	e8 b6 44 fe ff       	call   c0005ac5 <f_close>
c002160f:	83 c4 10             	add    esp,0x10
c0021612:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021616:	83 ec 0c             	sub    esp,0xc
c0021619:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002161d:	e8 e2 e2 fe ff       	call   c000f904 <free>
c0021622:	83 c4 10             	add    esp,0x10
c0021625:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021629:	85 c0                	test   eax,eax
c002162b:	75 07                	jne    c0021634 <FAT::close(void*)+0x42>
c002162d:	b8 00 00 00 00       	mov    eax,0x0
c0021632:	eb 05                	jmp    c0021639 <FAT::close(void*)+0x47>
c0021634:	b8 01 00 00 00       	mov    eax,0x1
c0021639:	83 c4 1c             	add    esp,0x1c
c002163c:	c3                   	ret    
c002163d:	90                   	nop

c002163e <FAT::closeDir(void*)>:
c002163e:	83 ec 1c             	sub    esp,0x1c
c0021641:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021646:	75 07                	jne    c002164f <FAT::closeDir(void*)+0x11>
c0021648:	b8 04 00 00 00       	mov    eax,0x4
c002164d:	eb 36                	jmp    c0021685 <FAT::closeDir(void*)+0x47>
c002164f:	83 ec 0c             	sub    esp,0xc
c0021652:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021656:	e8 52 4a fe ff       	call   c00060ad <f_closedir>
c002165b:	83 c4 10             	add    esp,0x10
c002165e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021662:	83 ec 0c             	sub    esp,0xc
c0021665:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021669:	e8 96 e2 fe ff       	call   c000f904 <free>
c002166e:	83 c4 10             	add    esp,0x10
c0021671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021675:	85 c0                	test   eax,eax
c0021677:	75 07                	jne    c0021680 <FAT::closeDir(void*)+0x42>
c0021679:	b8 00 00 00 00       	mov    eax,0x0
c002167e:	eb 05                	jmp    c0021685 <FAT::closeDir(void*)+0x47>
c0021680:	b8 01 00 00 00       	mov    eax,0x1
c0021685:	83 c4 1c             	add    esp,0x1c
c0021688:	c3                   	ret    
c0021689:	90                   	nop

c002168a <FAT::seek(void*, unsigned long long)>:
c002168a:	83 ec 2c             	sub    esp,0x2c
c002168d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021695:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002169d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00216a2:	75 07                	jne    c00216ab <FAT::seek(void*, unsigned long long)+0x21>
c00216a4:	b8 04 00 00 00       	mov    eax,0x4
c00216a9:	eb 2f                	jmp    c00216da <FAT::seek(void*, unsigned long long)+0x50>
c00216ab:	83 ec 04             	sub    esp,0x4
c00216ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00216b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00216b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00216ba:	e8 35 44 fe ff       	call   c0005af4 <f_lseek>
c00216bf:	83 c4 10             	add    esp,0x10
c00216c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00216c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216ca:	85 c0                	test   eax,eax
c00216cc:	75 07                	jne    c00216d5 <FAT::seek(void*, unsigned long long)+0x4b>
c00216ce:	b8 00 00 00 00       	mov    eax,0x0
c00216d3:	eb 05                	jmp    c00216da <FAT::seek(void*, unsigned long long)+0x50>
c00216d5:	b8 01 00 00 00       	mov    eax,0x1
c00216da:	83 c4 2c             	add    esp,0x2c
c00216dd:	c3                   	ret    

c00216de <fatWrapperReadDisk>:
c00216de:	83 ec 1c             	sub    esp,0x1c
c00216e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216e5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00216e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00216ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00216f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00216f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00216f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216fd:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c0021704:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021708:	83 ec 0c             	sub    esp,0xc
c002170b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002170f:	52                   	push   edx
c0021710:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021714:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021718:	50                   	push   eax
c0021719:	e8 f8 50 ff ff       	call   c0016816 <LogicalDisk::read(unsigned long long, int, void*)>
c002171e:	83 c4 20             	add    esp,0x20
c0021721:	83 c4 1c             	add    esp,0x1c
c0021724:	c3                   	ret    

c0021725 <fatWrapperWriteDisk>:
c0021725:	83 ec 1c             	sub    esp,0x1c
c0021728:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002172c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021730:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021734:	89 04 24             	mov    DWORD PTR [esp],eax
c0021737:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002173b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002173f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021744:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c002174b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002174f:	83 ec 0c             	sub    esp,0xc
c0021752:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021756:	52                   	push   edx
c0021757:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002175b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002175f:	50                   	push   eax
c0021760:	e8 1d 51 ff ff       	call   c0016882 <LogicalDisk::write(unsigned long long, int, void*)>
c0021765:	83 c4 20             	add    esp,0x20
c0021768:	83 c4 1c             	add    esp,0x1c
c002176b:	c3                   	ret    

c002176c <fatWrapperIoctl>:
c002176c:	53                   	push   ebx
c002176d:	83 ec 28             	sub    esp,0x28
c0021770:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021774:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021778:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002177c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021780:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021785:	75 31                	jne    c00217b8 <fatWrapperIoctl+0x4c>
c0021787:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002178b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002178f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021794:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c002179b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00217a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00217a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00217ab:	66 89 02             	mov    WORD PTR [edx],ax
c00217ae:	b8 00 00 00 00       	mov    eax,0x0
c00217b3:	e9 b2 00 00 00       	jmp    c002186a <fatWrapperIoctl+0xfe>
c00217b8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00217bd:	75 6a                	jne    c0021829 <fatWrapperIoctl+0xbd>
c00217bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00217c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00217c7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217cc:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c00217d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00217d9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00217df:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00217e5:	89 c8                	mov    eax,ecx
c00217e7:	89 da                	mov    edx,ebx
c00217e9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00217ed:	c1 e0 0a             	shl    eax,0xa
c00217f0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00217f5:	8b 0c 8d c0 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0940]
c00217fc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021802:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021808:	89 cb                	mov    ebx,ecx
c002180a:	c1 fb 1f             	sar    ebx,0x1f
c002180d:	53                   	push   ebx
c002180e:	51                   	push   ecx
c002180f:	52                   	push   edx
c0021810:	50                   	push   eax
c0021811:	e8 7e 5b 00 00       	call   c0027394 <__udivdi3>
c0021816:	83 c4 10             	add    esp,0x10
c0021819:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002181d:	89 01                	mov    DWORD PTR [ecx],eax
c002181f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021822:	b8 00 00 00 00       	mov    eax,0x0
c0021827:	eb 41                	jmp    c002186a <fatWrapperIoctl+0xfe>
c0021829:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002182e:	75 07                	jne    c0021837 <fatWrapperIoctl+0xcb>
c0021830:	b8 00 00 00 00       	mov    eax,0x0
c0021835:	eb 33                	jmp    c002186a <fatWrapperIoctl+0xfe>
c0021837:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002183c:	75 19                	jne    c0021857 <fatWrapperIoctl+0xeb>
c002183e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021842:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021846:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002184a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021850:	b8 00 00 00 00       	mov    eax,0x0
c0021855:	eb 13                	jmp    c002186a <fatWrapperIoctl+0xfe>
c0021857:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002185c:	75 07                	jne    c0021865 <fatWrapperIoctl+0xf9>
c002185e:	b8 00 00 00 00       	mov    eax,0x0
c0021863:	eb 05                	jmp    c002186a <fatWrapperIoctl+0xfe>
c0021865:	b8 04 00 00 00       	mov    eax,0x4
c002186a:	83 c4 28             	add    esp,0x28
c002186d:	5b                   	pop    ebx
c002186e:	c3                   	ret    
c002186f:	90                   	nop

c0021870 <FAT::FAT()>:
c0021870:	83 ec 1c             	sub    esp,0x1c
c0021873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021877:	83 ec 0c             	sub    esp,0xc
c002187a:	50                   	push   eax
c002187b:	e8 2a 19 ff ff       	call   c00131aa <Filesystem::Filesystem()>
c0021880:	83 c4 10             	add    esp,0x10
c0021883:	ba fc d4 02 c0       	mov    edx,0xc002d4fc
c0021888:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002188c:	89 10                	mov    DWORD PTR [eax],edx
c002188e:	c7 05 e0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326e0,0x0
c0021898:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218a0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00218a5:	7f 15                	jg     c00218bc <FAT::FAT()+0x4c>
c00218a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218ab:	c7 04 85 00 27 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd900],0xffffffff
c00218b6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00218ba:	eb e4                	jmp    c00218a0 <FAT::FAT()+0x30>
c00218bc:	90                   	nop
c00218bd:	83 c4 1c             	add    esp,0x1c
c00218c0:	c3                   	ret    
c00218c1:	90                   	nop

c00218c2 <FAT::fixFilepath(char*)>:
c00218c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218c6:	8a 00                	mov    al,BYTE PTR [eax]
c00218c8:	3c 40                	cmp    al,0x40
c00218ca:	7e 2c                	jle    c00218f8 <FAT::fixFilepath(char*)+0x36>
c00218cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218d0:	8a 00                	mov    al,BYTE PTR [eax]
c00218d2:	83 e8 41             	sub    eax,0x41
c00218d5:	88 c2                	mov    dl,al
c00218d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218db:	88 10                	mov    BYTE PTR [eax],dl
c00218dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218e1:	8a 00                	mov    al,BYTE PTR [eax]
c00218e3:	0f be c0             	movsx  eax,al
c00218e6:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c00218ed:	83 c0 30             	add    eax,0x30
c00218f0:	88 c2                	mov    dl,al
c00218f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218f6:	88 10                	mov    BYTE PTR [eax],dl
c00218f8:	90                   	nop
c00218f9:	c3                   	ret    

c00218fa <FAT::open(char const*, void**, FileOpenMode)>:
c00218fa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021900:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021908:	74 0a                	je     c0021914 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002190a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021912:	75 0a                	jne    c002191e <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021914:	b8 04 00 00 00       	mov    eax,0x4
c0021919:	e9 fd 00 00 00       	jmp    c0021a1b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002191e:	83 ec 08             	sub    esp,0x8
c0021921:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021928:	8d 44 24 14          	lea    eax,[esp+0x14]
c002192c:	50                   	push   eax
c002192d:	e8 f6 ee fd ff       	call   c0000828 <strcpy>
c0021932:	83 c4 10             	add    esp,0x10
c0021935:	83 ec 08             	sub    esp,0x8
c0021938:	8d 44 24 10          	lea    eax,[esp+0x10]
c002193c:	50                   	push   eax
c002193d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021944:	e8 79 ff ff ff       	call   c00218c2 <FAT::fixFilepath(char*)>
c0021949:	83 c4 10             	add    esp,0x10
c002194c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021954:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002195b:	83 e0 01             	and    eax,0x1
c002195e:	74 08                	je     c0021968 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021960:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021968:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002196f:	83 e0 04             	and    eax,0x4
c0021972:	74 10                	je     c0021984 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021974:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002197c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021984:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002198b:	83 e0 02             	and    eax,0x2
c002198e:	74 08                	je     c0021998 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021990:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021998:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002199f:	83 e0 08             	and    eax,0x8
c00219a2:	74 08                	je     c00219ac <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00219a4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00219ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219b3:	83 e0 10             	and    eax,0x10
c00219b6:	74 08                	je     c00219c0 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00219b8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00219c0:	83 ec 0c             	sub    esp,0xc
c00219c3:	68 50 02 00 00       	push   0x250
c00219c8:	e8 27 df fe ff       	call   c000f8f4 <malloc>
c00219cd:	83 c4 10             	add    esp,0x10
c00219d0:	89 c2                	mov    edx,eax
c00219d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00219d9:	89 10                	mov    DWORD PTR [eax],edx
c00219db:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00219e3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00219ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00219ec:	83 ec 04             	sub    esp,0x4
c00219ef:	52                   	push   edx
c00219f0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00219f4:	52                   	push   edx
c00219f5:	50                   	push   eax
c00219f6:	e8 78 35 fe ff       	call   c0004f73 <f_open>
c00219fb:	83 c4 10             	add    esp,0x10
c00219fe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021a05:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021a0d:	74 07                	je     c0021a16 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021a0f:	b8 01 00 00 00       	mov    eax,0x1
c0021a14:	eb 05                	jmp    c0021a1b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021a16:	b8 00 00 00 00       	mov    eax,0x0
c0021a1b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a21:	c3                   	ret    

c0021a22 <FAT::openDir(char const*, void**)>:
c0021a22:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a28:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021a30:	74 0a                	je     c0021a3c <FAT::openDir(char const*, void**)+0x1a>
c0021a32:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021a3a:	75 07                	jne    c0021a43 <FAT::openDir(char const*, void**)+0x21>
c0021a3c:	b8 04 00 00 00       	mov    eax,0x4
c0021a41:	eb 7d                	jmp    c0021ac0 <FAT::openDir(char const*, void**)+0x9e>
c0021a43:	83 ec 08             	sub    esp,0x8
c0021a46:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a4d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a51:	50                   	push   eax
c0021a52:	e8 d1 ed fd ff       	call   c0000828 <strcpy>
c0021a57:	83 c4 10             	add    esp,0x10
c0021a5a:	83 ec 08             	sub    esp,0x8
c0021a5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a61:	50                   	push   eax
c0021a62:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a69:	e8 54 fe ff ff       	call   c00218c2 <FAT::fixFilepath(char*)>
c0021a6e:	83 c4 10             	add    esp,0x10
c0021a71:	83 ec 0c             	sub    esp,0xc
c0021a74:	6a 4c                	push   0x4c
c0021a76:	e8 79 de fe ff       	call   c000f8f4 <malloc>
c0021a7b:	83 c4 10             	add    esp,0x10
c0021a7e:	89 c2                	mov    edx,eax
c0021a80:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a87:	89 10                	mov    DWORD PTR [eax],edx
c0021a89:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a92:	83 ec 08             	sub    esp,0x8
c0021a95:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021a99:	52                   	push   edx
c0021a9a:	50                   	push   eax
c0021a9b:	e8 0b 45 fe ff       	call   c0005fab <f_opendir>
c0021aa0:	83 c4 10             	add    esp,0x10
c0021aa3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021aaa:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021ab2:	74 07                	je     c0021abb <FAT::openDir(char const*, void**)+0x99>
c0021ab4:	b8 01 00 00 00       	mov    eax,0x1
c0021ab9:	eb 05                	jmp    c0021ac0 <FAT::openDir(char const*, void**)+0x9e>
c0021abb:	b8 00 00 00 00       	mov    eax,0x0
c0021ac0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ac6:	c3                   	ret    
c0021ac7:	90                   	nop

c0021ac8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021ac8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021ace:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021ad6:	75 0a                	jne    c0021ae2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021ad8:	b8 04 00 00 00       	mov    eax,0x4
c0021add:	e9 c9 00 00 00       	jmp    c0021bab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021ae2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021aea:	75 0a                	jne    c0021af6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021aec:	b8 04 00 00 00       	mov    eax,0x4
c0021af1:	e9 b5 00 00 00       	jmp    c0021bab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021af6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021afe:	75 0a                	jne    c0021b0a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021b00:	b8 04 00 00 00       	mov    eax,0x4
c0021b05:	e9 a1 00 00 00       	jmp    c0021bab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b0a:	83 ec 08             	sub    esp,0x8
c0021b0d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b14:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021b1b:	50                   	push   eax
c0021b1c:	e8 07 ed fd ff       	call   c0000828 <strcpy>
c0021b21:	83 c4 10             	add    esp,0x10
c0021b24:	83 ec 08             	sub    esp,0x8
c0021b27:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021b2e:	50                   	push   eax
c0021b2f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b36:	e8 87 fd ff ff       	call   c00218c2 <FAT::fixFilepath(char*)>
c0021b3b:	83 c4 10             	add    esp,0x10
c0021b3e:	83 ec 08             	sub    esp,0x8
c0021b41:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b45:	50                   	push   eax
c0021b46:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021b4d:	50                   	push   eax
c0021b4e:	e8 17 46 fe ff       	call   c000616a <f_stat>
c0021b53:	83 c4 10             	add    esp,0x10
c0021b56:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021b5d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021b64:	85 c0                	test   eax,eax
c0021b66:	74 07                	je     c0021b6f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021b68:	83 f8 04             	cmp    eax,0x4
c0021b6b:	74 32                	je     c0021b9f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021b6d:	eb 37                	jmp    c0021ba6 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021b6f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021b73:	0f b6 c0             	movzx  eax,al
c0021b76:	83 e0 10             	and    eax,0x10
c0021b79:	0f 95 c2             	setne  dl
c0021b7c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021b83:	88 10                	mov    BYTE PTR [eax],dl
c0021b85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b8c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021b93:	89 01                	mov    DWORD PTR [ecx],eax
c0021b95:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021b98:	b8 00 00 00 00       	mov    eax,0x0
c0021b9d:	eb 0c                	jmp    c0021bab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b9f:	b8 02 00 00 00       	mov    eax,0x2
c0021ba4:	eb 05                	jmp    c0021bab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021ba6:	b8 01 00 00 00       	mov    eax,0x1
c0021bab:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021bb1:	c3                   	ret    

c0021bb2 <FAT::unlink(char const*)>:
c0021bb2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021bb8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021bc0:	75 07                	jne    c0021bc9 <FAT::unlink(char const*)+0x17>
c0021bc2:	b8 04 00 00 00       	mov    eax,0x4
c0021bc7:	eb 5c                	jmp    c0021c25 <FAT::unlink(char const*)+0x73>
c0021bc9:	83 ec 08             	sub    esp,0x8
c0021bcc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021bd3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021bd7:	50                   	push   eax
c0021bd8:	e8 4b ec fd ff       	call   c0000828 <strcpy>
c0021bdd:	83 c4 10             	add    esp,0x10
c0021be0:	83 ec 08             	sub    esp,0x8
c0021be3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021be7:	50                   	push   eax
c0021be8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021bef:	e8 ce fc ff ff       	call   c00218c2 <FAT::fixFilepath(char*)>
c0021bf4:	83 c4 10             	add    esp,0x10
c0021bf7:	83 ec 0c             	sub    esp,0xc
c0021bfa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021bfe:	50                   	push   eax
c0021bff:	e8 b8 48 fe ff       	call   c00064bc <f_unlink>
c0021c04:	83 c4 10             	add    esp,0x10
c0021c07:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021c0e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021c15:	85 c0                	test   eax,eax
c0021c17:	75 07                	jne    c0021c20 <FAT::unlink(char const*)+0x6e>
c0021c19:	b8 00 00 00 00       	mov    eax,0x0
c0021c1e:	eb 05                	jmp    c0021c25 <FAT::unlink(char const*)+0x73>
c0021c20:	b8 01 00 00 00       	mov    eax,0x1
c0021c25:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021c2b:	c3                   	ret    

c0021c2c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021c2c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021c32:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021c39:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021c40:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021c44:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021c48:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021c50:	75 0a                	jne    c0021c5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021c52:	b8 04 00 00 00       	mov    eax,0x4
c0021c57:	e9 1c 01 00 00       	jmp    c0021d78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021c5c:	83 ec 08             	sub    esp,0x8
c0021c5f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021c66:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c6a:	50                   	push   eax
c0021c6b:	e8 b8 eb fd ff       	call   c0000828 <strcpy>
c0021c70:	83 c4 10             	add    esp,0x10
c0021c73:	83 ec 08             	sub    esp,0x8
c0021c76:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021c7a:	50                   	push   eax
c0021c7b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021c82:	e8 3b fc ff ff       	call   c00218c2 <FAT::fixFilepath(char*)>
c0021c87:	83 c4 10             	add    esp,0x10
c0021c8a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021c92:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021c9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021c9f:	83 e0 01             	and    eax,0x1
c0021ca2:	74 08                	je     c0021cac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021ca4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021cac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021cb1:	83 e0 02             	and    eax,0x2
c0021cb4:	74 08                	je     c0021cbe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021cb6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021cbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021cc3:	83 e0 04             	and    eax,0x4
c0021cc6:	74 08                	je     c0021cd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021cc8:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021cd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021cd5:	83 e0 08             	and    eax,0x8
c0021cd8:	74 08                	je     c0021ce2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021cda:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021ce2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021ce7:	83 e0 01             	and    eax,0x1
c0021cea:	74 08                	je     c0021cf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021cec:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021cf4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021cf9:	83 e0 02             	and    eax,0x2
c0021cfc:	74 08                	je     c0021d06 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021cfe:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021d06:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d0b:	83 e0 04             	and    eax,0x4
c0021d0e:	74 08                	je     c0021d18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021d10:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021d18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d1d:	83 e0 08             	and    eax,0x8
c0021d20:	74 08                	je     c0021d2a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021d22:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021d2a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021d31:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021d38:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021d40:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021d48:	83 ec 04             	sub    esp,0x4
c0021d4b:	52                   	push   edx
c0021d4c:	50                   	push   eax
c0021d4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d51:	50                   	push   eax
c0021d52:	e8 07 4e fe ff       	call   c0006b5e <f_chmod>
c0021d57:	83 c4 10             	add    esp,0x10
c0021d5a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021d61:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021d68:	85 c0                	test   eax,eax
c0021d6a:	75 07                	jne    c0021d73 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021d6c:	b8 00 00 00 00       	mov    eax,0x0
c0021d71:	eb 05                	jmp    c0021d78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021d73:	b8 01 00 00 00       	mov    eax,0x1
c0021d78:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021d7e:	c3                   	ret    
c0021d7f:	90                   	nop

c0021d80 <FAT::rename(char const*, char const*)>:
c0021d80:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021d86:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021d8e:	74 0a                	je     c0021d9a <FAT::rename(char const*, char const*)+0x1a>
c0021d90:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021d98:	75 0a                	jne    c0021da4 <FAT::rename(char const*, char const*)+0x24>
c0021d9a:	b8 04 00 00 00       	mov    eax,0x4
c0021d9f:	e9 98 00 00 00       	jmp    c0021e3c <FAT::rename(char const*, char const*)+0xbc>
c0021da4:	83 ec 08             	sub    esp,0x8
c0021da7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021dae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021db5:	50                   	push   eax
c0021db6:	e8 6d ea fd ff       	call   c0000828 <strcpy>
c0021dbb:	83 c4 10             	add    esp,0x10
c0021dbe:	83 ec 08             	sub    esp,0x8
c0021dc1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021dc8:	50                   	push   eax
c0021dc9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021dd0:	e8 ed fa ff ff       	call   c00218c2 <FAT::fixFilepath(char*)>
c0021dd5:	83 c4 10             	add    esp,0x10
c0021dd8:	83 ec 08             	sub    esp,0x8
c0021ddb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021de2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021de6:	50                   	push   eax
c0021de7:	e8 3c ea fd ff       	call   c0000828 <strcpy>
c0021dec:	83 c4 10             	add    esp,0x10
c0021def:	83 ec 08             	sub    esp,0x8
c0021df2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021df6:	50                   	push   eax
c0021df7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021dfe:	e8 bf fa ff ff       	call   c00218c2 <FAT::fixFilepath(char*)>
c0021e03:	83 c4 10             	add    esp,0x10
c0021e06:	83 ec 08             	sub    esp,0x8
c0021e09:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e0d:	50                   	push   eax
c0021e0e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021e15:	50                   	push   eax
c0021e16:	e8 50 4a fe ff       	call   c000686b <f_rename>
c0021e1b:	83 c4 10             	add    esp,0x10
c0021e1e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021e25:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021e2c:	85 c0                	test   eax,eax
c0021e2e:	75 07                	jne    c0021e37 <FAT::rename(char const*, char const*)+0xb7>
c0021e30:	b8 00 00 00 00       	mov    eax,0x0
c0021e35:	eb 05                	jmp    c0021e3c <FAT::rename(char const*, char const*)+0xbc>
c0021e37:	b8 01 00 00 00       	mov    eax,0x1
c0021e3c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021e42:	c3                   	ret    
c0021e43:	90                   	nop

c0021e44 <FAT::mkdir(char const*)>:
c0021e44:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021e4a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021e52:	75 07                	jne    c0021e5b <FAT::mkdir(char const*)+0x17>
c0021e54:	b8 04 00 00 00       	mov    eax,0x4
c0021e59:	eb 5c                	jmp    c0021eb7 <FAT::mkdir(char const*)+0x73>
c0021e5b:	83 ec 08             	sub    esp,0x8
c0021e5e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021e65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e69:	50                   	push   eax
c0021e6a:	e8 b9 e9 fd ff       	call   c0000828 <strcpy>
c0021e6f:	83 c4 10             	add    esp,0x10
c0021e72:	83 ec 08             	sub    esp,0x8
c0021e75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e79:	50                   	push   eax
c0021e7a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021e81:	e8 3c fa ff ff       	call   c00218c2 <FAT::fixFilepath(char*)>
c0021e86:	83 c4 10             	add    esp,0x10
c0021e89:	83 ec 0c             	sub    esp,0xc
c0021e8c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e90:	50                   	push   eax
c0021e91:	e8 a9 47 fe ff       	call   c000663f <f_mkdir>
c0021e96:	83 c4 10             	add    esp,0x10
c0021e99:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021ea0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021ea7:	85 c0                	test   eax,eax
c0021ea9:	75 07                	jne    c0021eb2 <FAT::mkdir(char const*)+0x6e>
c0021eab:	b8 00 00 00 00       	mov    eax,0x0
c0021eb0:	eb 05                	jmp    c0021eb7 <FAT::mkdir(char const*)+0x73>
c0021eb2:	b8 01 00 00 00       	mov    eax,0x1
c0021eb7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021ebd:	c3                   	ret    

c0021ebe <FAT::exists(char const*)>:
c0021ebe:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021ec4:	83 ec 08             	sub    esp,0x8
c0021ec7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021ece:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021ed2:	50                   	push   eax
c0021ed3:	e8 50 e9 fd ff       	call   c0000828 <strcpy>
c0021ed8:	83 c4 10             	add    esp,0x10
c0021edb:	83 ec 08             	sub    esp,0x8
c0021ede:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021ee2:	50                   	push   eax
c0021ee3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021eea:	e8 d3 f9 ff ff       	call   c00218c2 <FAT::fixFilepath(char*)>
c0021eef:	83 c4 10             	add    esp,0x10
c0021ef2:	83 ec 08             	sub    esp,0x8
c0021ef5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021efc:	50                   	push   eax
c0021efd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021f01:	50                   	push   eax
c0021f02:	e8 63 42 fe ff       	call   c000616a <f_stat>
c0021f07:	83 c4 10             	add    esp,0x10
c0021f0a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021f11:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021f18:	85 c0                	test   eax,eax
c0021f1a:	75 04                	jne    c0021f20 <FAT::exists(char const*)+0x62>
c0021f1c:	b0 01                	mov    al,0x1
c0021f1e:	eb 02                	jmp    c0021f22 <FAT::exists(char const*)+0x64>
c0021f20:	b0 00                	mov    al,0x0
c0021f22:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021f28:	c3                   	ret    
c0021f29:	90                   	nop

c0021f2a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021f2a:	b8 08 00 00 00       	mov    eax,0x8
c0021f2f:	c3                   	ret    

c0021f30 <ISO9660::seek(void*, unsigned long long)>:
c0021f30:	53                   	push   ebx
c0021f31:	b8 04 00 00 00       	mov    eax,0x4
c0021f36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021f42:	85 d2                	test   edx,edx
c0021f44:	74 17                	je     c0021f5d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021f46:	89 c8                	mov    eax,ecx
c0021f48:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021f4b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021f4e:	b8 01 00 00 00       	mov    eax,0x1
c0021f53:	73 08                	jae    c0021f5d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021f55:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021f58:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021f5b:	31 c0                	xor    eax,eax
c0021f5d:	5b                   	pop    ebx
c0021f5e:	c3                   	ret    
c0021f5f:	90                   	nop

c0021f60 <ISO9660::tell(void*, unsigned long long*)>:
c0021f60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f68:	85 d2                	test   edx,edx
c0021f6a:	74 12                	je     c0021f7e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021f6c:	85 c0                	test   eax,eax
c0021f6e:	74 0e                	je     c0021f7e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021f70:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021f73:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021f76:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021f79:	89 10                	mov    DWORD PTR [eax],edx
c0021f7b:	31 c0                	xor    eax,eax
c0021f7d:	c3                   	ret    
c0021f7e:	b8 04 00 00 00       	mov    eax,0x4
c0021f83:	c3                   	ret    

c0021f84 <ISO9660::getName()>:
c0021f84:	b8 5c d5 02 c0       	mov    eax,0xc002d55c
c0021f89:	c3                   	ret    

c0021f8a <ISO9660::stat(void*, unsigned long long*)>:
c0021f8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f92:	85 d2                	test   edx,edx
c0021f94:	74 12                	je     c0021fa8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021f96:	85 c0                	test   eax,eax
c0021f98:	74 0e                	je     c0021fa8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021f9a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021f9d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021fa0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021fa3:	89 10                	mov    DWORD PTR [eax],edx
c0021fa5:	31 c0                	xor    eax,eax
c0021fa7:	c3                   	ret    
c0021fa8:	b8 04 00 00 00       	mov    eax,0x4
c0021fad:	c3                   	ret    

c0021fae <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021fae:	b8 01 00 00 00       	mov    eax,0x1
c0021fb3:	c3                   	ret    

c0021fb4 <ISO9660::unlink(char const*)>:
c0021fb4:	b8 01 00 00 00       	mov    eax,0x1
c0021fb9:	c3                   	ret    

c0021fba <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021fba:	b8 01 00 00 00       	mov    eax,0x1
c0021fbf:	c3                   	ret    

c0021fc0 <ISO9660::rename(char const*, char const*)>:
c0021fc0:	b8 01 00 00 00       	mov    eax,0x1
c0021fc5:	c3                   	ret    

c0021fc6 <ISO9660::mkdir(char const*)>:
c0021fc6:	b8 01 00 00 00       	mov    eax,0x1
c0021fcb:	c3                   	ret    

c0021fcc <ISO9660::close(void*)>:
c0021fcc:	83 ec 0c             	sub    esp,0xc
c0021fcf:	b8 04 00 00 00       	mov    eax,0x4
c0021fd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021fd8:	85 d2                	test   edx,edx
c0021fda:	74 0e                	je     c0021fea <ISO9660::close(void*)+0x1e>
c0021fdc:	83 ec 0c             	sub    esp,0xc
c0021fdf:	52                   	push   edx
c0021fe0:	e8 1f d9 fe ff       	call   c000f904 <free>
c0021fe5:	83 c4 10             	add    esp,0x10
c0021fe8:	31 c0                	xor    eax,eax
c0021fea:	83 c4 0c             	add    esp,0xc
c0021fed:	c3                   	ret    

c0021fee <ISO9660::closeDir(void*)>:
c0021fee:	83 ec 0c             	sub    esp,0xc
c0021ff1:	b8 04 00 00 00       	mov    eax,0x4
c0021ff6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ffa:	85 d2                	test   edx,edx
c0021ffc:	74 0e                	je     c002200c <ISO9660::closeDir(void*)+0x1e>
c0021ffe:	83 ec 0c             	sub    esp,0xc
c0022001:	52                   	push   edx
c0022002:	e8 fd d8 fe ff       	call   c000f904 <free>
c0022007:	83 c4 10             	add    esp,0x10
c002200a:	31 c0                	xor    eax,eax
c002200c:	83 c4 0c             	add    esp,0xc
c002200f:	c3                   	ret    

c0022010 <ISO9660::~ISO9660()>:
c0022010:	83 ec 0c             	sub    esp,0xc
c0022013:	ba c0 d5 02 c0       	mov    edx,0xc002d5c0
c0022018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201c:	89 10                	mov    DWORD PTR [eax],edx
c002201e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022022:	83 ec 0c             	sub    esp,0xc
c0022025:	50                   	push   eax
c0022026:	e8 a3 11 ff ff       	call   c00131ce <Filesystem::~Filesystem()>
c002202b:	83 c4 10             	add    esp,0x10
c002202e:	90                   	nop
c002202f:	83 c4 0c             	add    esp,0xc
c0022032:	c3                   	ret    
c0022033:	90                   	nop

c0022034 <ISO9660::~ISO9660()>:
c0022034:	83 ec 0c             	sub    esp,0xc
c0022037:	83 ec 0c             	sub    esp,0xc
c002203a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002203e:	e8 cd ff ff ff       	call   c0022010 <ISO9660::~ISO9660()>
c0022043:	83 c4 10             	add    esp,0x10
c0022046:	83 ec 08             	sub    esp,0x8
c0022049:	6a 08                	push   0x8
c002204b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002204f:	e8 6b 0d ff ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0022054:	83 c4 10             	add    esp,0x10
c0022057:	83 c4 0c             	add    esp,0xc
c002205a:	c3                   	ret    

c002205b <__memmem(unsigned char*, int, unsigned char*, int)>:
c002205b:	55                   	push   ebp
c002205c:	31 c9                	xor    ecx,ecx
c002205e:	57                   	push   edi
c002205f:	56                   	push   esi
c0022060:	53                   	push   ebx
c0022061:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0022065:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0022069:	89 eb                	mov    ebx,ebp
c002206b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002206f:	39 ce                	cmp    esi,ecx
c0022071:	7e 17                	jle    c002208a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0022073:	31 d2                	xor    edx,edx
c0022075:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0022079:	7d 13                	jge    c002208e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002207b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002207f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022082:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0022085:	75 0d                	jne    c0022094 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0022087:	42                   	inc    edx
c0022088:	eb eb                	jmp    c0022075 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002208a:	31 c0                	xor    eax,eax
c002208c:	eb 0a                	jmp    c0022098 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002208e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0022092:	eb 04                	jmp    c0022098 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0022094:	41                   	inc    ecx
c0022095:	43                   	inc    ebx
c0022096:	eb d7                	jmp    c002206f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0022098:	5b                   	pop    ebx
c0022099:	5e                   	pop    esi
c002209a:	5f                   	pop    edi
c002209b:	5d                   	pop    ebp
c002209c:	c3                   	ret    

c002209d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002209d:	57                   	push   edi
c002209e:	56                   	push   esi
c002209f:	53                   	push   ebx
c00220a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00220a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00220a8:	39 0d e0 27 03 c0    	cmp    DWORD PTR ds:0xc00327e0,ecx
c00220ae:	75 08                	jne    c00220b8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00220b0:	38 05 34 e6 02 c0    	cmp    BYTE PTR ds:0xc002e634,al
c00220b6:	74 2b                	je     c00220e3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00220b8:	83 ec 0c             	sub    esp,0xc
c00220bb:	a2 34 e6 02 c0       	mov    ds:0xc002e634,al
c00220c0:	68 00 28 03 c0       	push   0xc0032800
c00220c5:	0f be c0             	movsx  eax,al
c00220c8:	6a 01                	push   0x1
c00220ca:	89 0d e0 27 03 c0    	mov    DWORD PTR ds:0xc00327e0,ecx
c00220d0:	31 db                	xor    ebx,ebx
c00220d2:	53                   	push   ebx
c00220d3:	51                   	push   ecx
c00220d4:	ff 34 85 bc f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a44]
c00220db:	e8 36 47 ff ff       	call   c0016816 <LogicalDisk::read(unsigned long long, int, void*)>
c00220e0:	83 c4 20             	add    esp,0x20
c00220e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00220e7:	be 00 28 03 c0       	mov    esi,0xc0032800
c00220ec:	b9 00 08 00 00       	mov    ecx,0x800
c00220f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00220f3:	5b                   	pop    ebx
c00220f4:	5e                   	pop    esi
c00220f5:	5f                   	pop    edi
c00220f6:	c3                   	ret    
c00220f7:	90                   	nop

c00220f8 <ISO9660::tryMount(LogicalDisk*, int)>:
c00220f8:	81 ec 10 08 00 00    	sub    esp,0x810
c00220fe:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0022105:	83 c0 41             	add    eax,0x41
c0022108:	0f be c0             	movsx  eax,al
c002210b:	50                   	push   eax
c002210c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022110:	50                   	push   eax
c0022111:	6a 10                	push   0x10
c0022113:	e8 85 ff ff ff       	call   c002209d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022118:	83 c4 10             	add    esp,0x10
c002211b:	31 c0                	xor    eax,eax
c002211d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0022122:	75 1d                	jne    c0022141 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022124:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0022129:	75 16                	jne    c0022141 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002212b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0022130:	75 0f                	jne    c0022141 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022132:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0022137:	75 08                	jne    c0022141 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022139:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002213e:	0f 94 c0             	sete   al
c0022141:	81 c4 0c 08 00 00    	add    esp,0x80c
c0022147:	c3                   	ret    

c0022148 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0022148:	55                   	push   ebp
c0022149:	57                   	push   edi
c002214a:	56                   	push   esi
c002214b:	53                   	push   ebx
c002214c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0022152:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0022159:	85 ed                	test   ebp,ebp
c002215b:	0f 84 da 01 00 00    	je     c002233b <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0022161:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0022169:	0f 84 cc 01 00 00    	je     c002233b <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002216f:	b8 01 00 00 00       	mov    eax,0x1
c0022174:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0022178:	0f 85 c2 01 00 00    	jne    c0022340 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002217e:	31 d2                	xor    edx,edx
c0022180:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0022187:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002218a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002218d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0022190:	89 04 24             	mov    DWORD PTR [esp],eax
c0022193:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022197:	01 c8                	add    eax,ecx
c0022199:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002219c:	11 da                	adc    edx,ebx
c002219e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00221a2:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00221a6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00221aa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00221ae:	19 d7                	sbb    edi,edx
c00221b0:	72 11                	jb     c00221c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00221b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00221b5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00221b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221c1:	eb 0c                	jmp    c00221cf <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00221c3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00221c7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00221cb:	29 ce                	sub    esi,ecx
c00221cd:	19 df                	sbb    edi,ebx
c00221cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00221d2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00221d5:	0f a4 c2 0b          	shld   edx,eax,0xb
c00221d9:	c1 e0 0b             	shl    eax,0xb
c00221dc:	01 c8                	add    eax,ecx
c00221de:	11 da                	adc    edx,ebx
c00221e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00221e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00221e7:	51                   	push   ecx
c00221e8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00221ec:	50                   	push   eax
c00221ed:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00221f1:	53                   	push   ebx
c00221f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00221f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221fa:	0f ac d0 0b          	shrd   eax,edx,0xb
c00221fe:	50                   	push   eax
c00221ff:	e8 99 fe ff ff       	call   c002209d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022204:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022207:	b8 00 08 00 00       	mov    eax,0x800
c002220c:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022212:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0022216:	29 d0                	sub    eax,edx
c0022218:	83 c4 10             	add    esp,0x10
c002221b:	89 f9                	mov    ecx,edi
c002221d:	39 c6                	cmp    esi,eax
c002221f:	83 d9 00             	sbb    ecx,0x0
c0022222:	7d 1b                	jge    c002223f <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0022224:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022229:	75 12                	jne    c002223d <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002222b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022232:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022238:	e9 fa 00 00 00       	jmp    c0022337 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002223d:	89 f0                	mov    eax,esi
c002223f:	01 d3                	add    ebx,edx
c0022241:	31 d2                	xor    edx,edx
c0022243:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0022247:	39 c2                	cmp    edx,eax
c0022249:	7d 14                	jge    c002225f <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002224b:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0022252:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022256:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0022259:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002225c:	42                   	inc    edx
c002225d:	eb e8                	jmp    c0022247 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002225f:	89 c2                	mov    edx,eax
c0022261:	85 c0                	test   eax,eax
c0022263:	79 02                	jns    c0022267 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0022265:	31 d2                	xor    edx,edx
c0022267:	01 c2                	add    edx,eax
c0022269:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002226c:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0022273:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0022277:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002227b:	99                   	cdq    
c002227c:	01 c1                	add    ecx,eax
c002227e:	11 d3                	adc    ebx,edx
c0022280:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0022284:	29 c6                	sub    esi,eax
c0022286:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002228a:	19 d7                	sbb    edi,edx
c002228c:	89 34 24             	mov    DWORD PTR [esp],esi
c002228f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0022293:	b8 ff 07 00 00       	mov    eax,0x7ff
c0022298:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002229b:	b8 00 00 00 00       	mov    eax,0x0
c00222a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00222a4:	7d 43                	jge    c00222e9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00222a6:	52                   	push   edx
c00222a7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00222ab:	50                   	push   eax
c00222ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00222b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00222b8:	0f ac d0 0b          	shrd   eax,edx,0xb
c00222bc:	50                   	push   eax
c00222bd:	e8 db fd ff ff       	call   c002209d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00222c2:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00222ca:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00222cf:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00222d7:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00222df:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00222e4:	83 c4 10             	add    esp,0x10
c00222e7:	eb aa                	jmp    c0022293 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00222e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ed:	0b 04 24             	or     eax,DWORD PTR [esp]
c00222f0:	74 2a                	je     c002231c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00222f2:	50                   	push   eax
c00222f3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00222f7:	50                   	push   eax
c00222f8:	8d 74 24 28          	lea    esi,[esp+0x28]
c00222fc:	56                   	push   esi
c00222fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022301:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022305:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0022309:	51                   	push   ecx
c002230a:	e8 8e fd ff ff       	call   c002209d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002230f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022313:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022317:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022319:	83 c4 10             	add    esp,0x10
c002231c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022323:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022327:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002232b:	89 18                	mov    DWORD PTR [eax],ebx
c002232d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022331:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022334:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022337:	31 c0                	xor    eax,eax
c0022339:	eb 05                	jmp    c0022340 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002233b:	b8 04 00 00 00       	mov    eax,0x4
c0022340:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022346:	5b                   	pop    ebx
c0022347:	5e                   	pop    esi
c0022348:	5f                   	pop    edi
c0022349:	5d                   	pop    ebp
c002234a:	c3                   	ret    
c002234b:	90                   	nop

c002234c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002234c:	55                   	push   ebp
c002234d:	57                   	push   edi
c002234e:	56                   	push   esi
c002234f:	53                   	push   ebx
c0022350:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0022356:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002235d:	85 ed                	test   ebp,ebp
c002235f:	0f 84 51 02 00 00    	je     c00225b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0022365:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002236d:	0f 84 43 02 00 00    	je     c00225b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0022373:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022376:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0022379:	75 0a                	jne    c0022385 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002237b:	b8 07 00 00 00       	mov    eax,0x7
c0022380:	e9 36 02 00 00       	jmp    c00225bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0022385:	50                   	push   eax
c0022386:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002238a:	50                   	push   eax
c002238b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022392:	53                   	push   ebx
c0022393:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022396:	c1 e0 0b             	shl    eax,0xb
c0022399:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c002239c:	c1 e8 0b             	shr    eax,0xb
c002239f:	50                   	push   eax
c00223a0:	e8 f8 fc ff ff       	call   c002209d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00223a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00223a8:	83 c4 10             	add    esp,0x10
c00223ab:	89 c1                	mov    ecx,eax
c00223ad:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00223b0:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00223b6:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00223b9:	84 db                	test   bl,bl
c00223bb:	0f 85 8b 00 00 00    	jne    c002244c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00223c1:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00223c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00223ca:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00223d0:	29 c6                	sub    esi,eax
c00223d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00223d6:	89 f3                	mov    ebx,esi
c00223d8:	89 f1                	mov    ecx,esi
c00223da:	c1 fb 1f             	sar    ebx,0x1f
c00223dd:	01 f0                	add    eax,esi
c00223df:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00223e2:	11 da                	adc    edx,ebx
c00223e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00223e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00223eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00223ee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00223f1:	89 d8                	mov    eax,ebx
c00223f3:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00223f7:	ba 00 00 00 00       	mov    edx,0x0
c00223fc:	19 f8                	sbb    eax,edi
c00223fe:	b8 00 00 00 00       	mov    eax,0x0
c0022403:	73 08                	jae    c002240d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0022405:	89 f0                	mov    eax,esi
c0022407:	89 fa                	mov    edx,edi
c0022409:	29 c8                	sub    eax,ecx
c002240b:	19 da                	sbb    edx,ebx
c002240d:	89 d7                	mov    edi,edx
c002240f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022412:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022415:	09 c7                	or     edi,eax
c0022417:	0f 84 5e ff ff ff    	je     c002237b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002241d:	57                   	push   edi
c002241e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022422:	50                   	push   eax
c0022423:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002242a:	53                   	push   ebx
c002242b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002242e:	c1 e0 0b             	shl    eax,0xb
c0022431:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0022435:	c1 e8 0b             	shr    eax,0xb
c0022438:	50                   	push   eax
c0022439:	e8 5f fc ff ff       	call   c002209d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002243e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022441:	83 c4 10             	add    esp,0x10
c0022444:	25 ff 07 00 00       	and    eax,0x7ff
c0022449:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002244c:	31 ff                	xor    edi,edi
c002244e:	56                   	push   esi
c002244f:	6a 28                	push   0x28
c0022451:	6a 00                	push   0x0
c0022453:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022457:	50                   	push   eax
c0022458:	e8 0f e3 fd ff       	call   c000076c <memset>
c002245d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022460:	25 ff 07 00 00       	and    eax,0x7ff
c0022465:	89 c6                	mov    esi,eax
c0022467:	83 c6 21             	add    esi,0x21
c002246a:	83 d7 00             	adc    edi,0x0
c002246d:	83 c4 10             	add    esp,0x10
c0022470:	31 c9                	xor    ecx,ecx
c0022472:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0022479:	83 f9 28             	cmp    ecx,0x28
c002247c:	88 04 24             	mov    BYTE PTR [esp],al
c002247f:	0f 94 c2             	sete   dl
c0022482:	88 d0                	mov    al,dl
c0022484:	ba ff 07 00 00       	mov    edx,0x7ff
c0022489:	39 f2                	cmp    edx,esi
c002248b:	ba 00 00 00 00       	mov    edx,0x0
c0022490:	19 fa                	sbb    edx,edi
c0022492:	0f 92 c2             	setb   dl
c0022495:	09 c2                	or     edx,eax
c0022497:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002249b:	0f 94 c0             	sete   al
c002249e:	08 d0                	or     al,dl
c00224a0:	75 16                	jne    c00224b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00224a2:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00224a6:	74 10                	je     c00224b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00224a8:	8a 04 24             	mov    al,BYTE PTR [esp]
c00224ab:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00224af:	41                   	inc    ecx
c00224b0:	83 c6 01             	add    esi,0x1
c00224b3:	83 d7 00             	adc    edi,0x0
c00224b6:	eb ba                	jmp    c0022472 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00224b8:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00224bf:	83 ec 0c             	sub    esp,0xc
c00224c2:	8d 74 24 24          	lea    esi,[esp+0x24]
c00224c6:	56                   	push   esi
c00224c7:	e8 bc e2 fd ff       	call   c0000788 <strlen>
c00224cc:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00224d3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00224d7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00224df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00224e2:	5a                   	pop    edx
c00224e3:	25 ff 07 00 00       	and    eax,0x7ff
c00224e8:	59                   	pop    ecx
c00224e9:	01 f8                	add    eax,edi
c00224eb:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00224f1:	83 e0 02             	and    eax,0x2
c00224f4:	3c 01                	cmp    al,0x1
c00224f6:	19 c0                	sbb    eax,eax
c00224f8:	83 c0 02             	add    eax,0x2
c00224fb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00224ff:	56                   	push   esi
c0022500:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022504:	50                   	push   eax
c0022505:	e8 1e e3 fd ff       	call   c0000828 <strcpy>
c002250a:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002250e:	83 c4 10             	add    esp,0x10
c0022511:	84 c0                	test   al,al
c0022513:	75 21                	jne    c0022536 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0022515:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002251d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022525:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002252d:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022534:	eb 28                	jmp    c002255e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022536:	fe c8                	dec    al
c0022538:	75 24                	jne    c002255e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002253a:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022542:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002254a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022552:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0022559:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002255e:	8d 74 24 40          	lea    esi,[esp+0x40]
c0022562:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0022569:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0022570:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022572:	0f b6 f3             	movzx  esi,bl
c0022575:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002257c:	31 db                	xor    ebx,ebx
c002257e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0022584:	89 df                	mov    edi,ebx
c0022586:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0022589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002258c:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c002258f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022592:	39 c6                	cmp    esi,eax
c0022594:	19 d7                	sbb    edi,edx
c0022596:	72 10                	jb     c00225a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0022598:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c002259f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00225a6:	eb 0a                	jmp    c00225b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00225a8:	29 f0                	sub    eax,esi
c00225aa:	19 da                	sbb    edx,ebx
c00225ac:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00225af:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00225b2:	31 c0                	xor    eax,eax
c00225b4:	eb 05                	jmp    c00225bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00225b6:	b8 04 00 00 00       	mov    eax,0x4
c00225bb:	81 c4 5c 09 00 00    	add    esp,0x95c
c00225c1:	5b                   	pop    ebx
c00225c2:	5e                   	pop    esi
c00225c3:	5f                   	pop    edi
c00225c4:	5d                   	pop    ebp
c00225c5:	c3                   	ret    

c00225c6 <readRoot(unsigned int*, unsigned int*, char)>:
c00225c6:	57                   	push   edi
c00225c7:	56                   	push   esi
c00225c8:	81 ec 38 08 00 00    	sub    esp,0x838
c00225ce:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00225d6:	50                   	push   eax
c00225d7:	8d 44 24 38          	lea    eax,[esp+0x38]
c00225db:	50                   	push   eax
c00225dc:	6a 10                	push   0x10
c00225de:	e8 ba fa ff ff       	call   c002209d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00225e3:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00225ea:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00225ee:	b9 22 00 00 00       	mov    ecx,0x22
c00225f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00225f5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00225fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022600:	89 10                	mov    DWORD PTR [eax],edx
c0022602:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0022609:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002260d:	89 10                	mov    DWORD PTR [eax],edx
c002260f:	81 c4 44 08 00 00    	add    esp,0x844
c0022615:	b0 01                	mov    al,0x1
c0022617:	5e                   	pop    esi
c0022618:	5f                   	pop    edi
c0022619:	c3                   	ret    

c002261a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002261a:	55                   	push   ebp
c002261b:	57                   	push   edi
c002261c:	56                   	push   esi
c002261d:	53                   	push   ebx
c002261e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022624:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002262b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022632:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022636:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002263a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002263e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022642:	75 03                	jne    c0022647 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022644:	83 c3 02             	add    ebx,0x2
c0022647:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002264a:	75 03                	jne    c002264f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002264c:	43                   	inc    ebx
c002264d:	eb f8                	jmp    c0022647 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002264f:	51                   	push   ecx
c0022650:	68 00 01 00 00       	push   0x100
c0022655:	6a 00                	push   0x0
c0022657:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002265b:	50                   	push   eax
c002265c:	e8 0b e1 fd ff       	call   c000076c <memset>
c0022661:	83 c4 10             	add    esp,0x10
c0022664:	31 d2                	xor    edx,edx
c0022666:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022669:	84 c0                	test   al,al
c002266b:	74 21                	je     c002268e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002266d:	3c 2f                	cmp    al,0x2f
c002266f:	75 0b                	jne    c002267c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022671:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022675:	bd 01 00 00 00       	mov    ebp,0x1
c002267a:	eb 14                	jmp    c0022690 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002267c:	8d 48 9f             	lea    ecx,[eax-0x61]
c002267f:	80 f9 19             	cmp    cl,0x19
c0022682:	77 03                	ja     c0022687 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022684:	83 e8 20             	sub    eax,0x20
c0022687:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002268b:	42                   	inc    edx
c002268c:	eb d8                	jmp    c0022666 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002268e:	31 ed                	xor    ebp,ebp
c0022690:	83 ec 0c             	sub    esp,0xc
c0022693:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002269a:	e8 55 d2 fe ff       	call   c000f8f4 <malloc>
c002269f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00226a6:	89 c6                	mov    esi,eax
c00226a8:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00226ae:	c1 ef 0b             	shr    edi,0xb
c00226b1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00226b8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00226bc:	83 c4 10             	add    esp,0x10
c00226bf:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00226c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00226c8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00226cf:	74 28                	je     c00226f9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00226d1:	52                   	push   edx
c00226d2:	57                   	push   edi
c00226d3:	50                   	push   eax
c00226d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00226d8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00226df:	e8 b9 f9 ff ff       	call   c002209d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00226e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00226e8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00226ef:	05 00 08 00 00       	add    eax,0x800
c00226f4:	83 c4 10             	add    esp,0x10
c00226f7:	eb cb                	jmp    c00226c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00226f9:	83 ec 0c             	sub    esp,0xc
c00226fc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022700:	57                   	push   edi
c0022701:	e8 82 e0 fd ff       	call   c0000788 <strlen>
c0022706:	50                   	push   eax
c0022707:	57                   	push   edi
c0022708:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002270f:	56                   	push   esi
c0022710:	e8 46 f9 ff ff       	call   c002205b <__memmem(unsigned char*, int, unsigned char*, int)>
c0022715:	83 c4 20             	add    esp,0x20
c0022718:	85 c0                	test   eax,eax
c002271a:	75 13                	jne    c002272f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002271c:	83 ec 0c             	sub    esp,0xc
c002271f:	56                   	push   esi
c0022720:	e8 df d1 fe ff       	call   c000f904 <free>
c0022725:	83 c4 10             	add    esp,0x10
c0022728:	31 c0                	xor    eax,eax
c002272a:	e9 b3 00 00 00       	jmp    c00227e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002272f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022733:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022737:	c1 e7 08             	shl    edi,0x8
c002273a:	c1 e2 10             	shl    edx,0x10
c002273d:	09 d7                	or     edi,edx
c002273f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022743:	09 d7                	or     edi,edx
c0022745:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022749:	c1 e2 18             	shl    edx,0x18
c002274c:	09 d7                	or     edi,edx
c002274e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022752:	89 d1                	mov    ecx,edx
c0022754:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022758:	c1 e1 08             	shl    ecx,0x8
c002275b:	c1 e2 10             	shl    edx,0x10
c002275e:	09 ca                	or     edx,ecx
c0022760:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022764:	09 ca                	or     edx,ecx
c0022766:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002276a:	c1 e1 18             	shl    ecx,0x18
c002276d:	09 ca                	or     edx,ecx
c002276f:	89 e9                	mov    ecx,ebp
c0022771:	84 c9                	test   cl,cl
c0022773:	74 3c                	je     c00227b1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022775:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022779:	83 ec 0c             	sub    esp,0xc
c002277c:	56                   	push   esi
c002277d:	e8 82 d1 fe ff       	call   c000f904 <free>
c0022782:	83 c4 0c             	add    esp,0xc
c0022785:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002278c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022791:	50                   	push   eax
c0022792:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022799:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00227a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00227a4:	52                   	push   edx
c00227a5:	57                   	push   edi
c00227a6:	53                   	push   ebx
c00227a7:	e8 6e fe ff ff       	call   c002261a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00227ac:	83 c4 20             	add    esp,0x20
c00227af:	eb 31                	jmp    c00227e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00227b1:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00227b4:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00227bb:	d0 e8                	shr    al,1
c00227bd:	89 3b                	mov    DWORD PTR [ebx],edi
c00227bf:	83 e0 01             	and    eax,0x1
c00227c2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00227c9:	83 ec 0c             	sub    esp,0xc
c00227cc:	89 13                	mov    DWORD PTR [ebx],edx
c00227ce:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00227d5:	89 03                	mov    DWORD PTR [ebx],eax
c00227d7:	56                   	push   esi
c00227d8:	e8 27 d1 fe ff       	call   c000f904 <free>
c00227dd:	83 c4 10             	add    esp,0x10
c00227e0:	b0 01                	mov    al,0x1
c00227e2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00227e8:	5b                   	pop    ebx
c00227e9:	5e                   	pop    esi
c00227ea:	5f                   	pop    edi
c00227eb:	5d                   	pop    ebp
c00227ec:	c3                   	ret    

c00227ed <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00227ed:	55                   	push   ebp
c00227ee:	57                   	push   edi
c00227ef:	56                   	push   esi
c00227f0:	53                   	push   ebx
c00227f1:	83 ec 20             	sub    esp,0x20
c00227f4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00227f8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00227fc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022800:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022808:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022810:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022815:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002281b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022821:	57                   	push   edi
c0022822:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022826:	50                   	push   eax
c0022827:	8d 44 24 14          	lea    eax,[esp+0x14]
c002282b:	50                   	push   eax
c002282c:	e8 95 fd ff ff       	call   c00225c6 <readRoot(unsigned int*, unsigned int*, char)>
c0022831:	5a                   	pop    edx
c0022832:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022836:	e8 4d df fd ff       	call   c0000788 <strlen>
c002283b:	83 c4 10             	add    esp,0x10
c002283e:	83 f8 03             	cmp    eax,0x3
c0022841:	77 17                	ja     c002285a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022847:	89 03                	mov    DWORD PTR [ebx],eax
c0022849:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002284d:	89 06                	mov    DWORD PTR [esi],eax
c002284f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022856:	b0 01                	mov    al,0x1
c0022858:	eb 19                	jmp    c0022873 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002285a:	50                   	push   eax
c002285b:	55                   	push   ebp
c002285c:	57                   	push   edi
c002285d:	56                   	push   esi
c002285e:	53                   	push   ebx
c002285f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022863:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022867:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002286b:	e8 aa fd ff ff       	call   c002261a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022870:	83 c4 20             	add    esp,0x20
c0022873:	83 c4 1c             	add    esp,0x1c
c0022876:	5b                   	pop    ebx
c0022877:	5e                   	pop    esi
c0022878:	5f                   	pop    edi
c0022879:	5d                   	pop    ebp
c002287a:	c3                   	ret    
c002287b:	90                   	nop

c002287c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002287c:	57                   	push   edi
c002287d:	56                   	push   esi
c002287e:	53                   	push   ebx
c002287f:	83 ec 10             	sub    esp,0x10
c0022882:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022886:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002288a:	85 ff                	test   edi,edi
c002288c:	0f 84 9d 00 00 00    	je     c002292f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022892:	85 f6                	test   esi,esi
c0022894:	0f 84 95 00 00 00    	je     c002292f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002289a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002289f:	74 17                	je     c00228b8 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00228a1:	83 ec 0c             	sub    esp,0xc
c00228a4:	68 77 d5 02 c0       	push   0xc002d577
c00228a9:	e8 f1 05 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00228ae:	83 c4 10             	add    esp,0x10
c00228b1:	b8 03 00 00 00       	mov    eax,0x3
c00228b6:	eb 7c                	jmp    c0022934 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00228b8:	83 ec 0c             	sub    esp,0xc
c00228bb:	6a 1c                	push   0x1c
c00228bd:	e8 32 d0 fe ff       	call   c000f8f4 <malloc>
c00228c2:	89 07                	mov    DWORD PTR [edi],eax
c00228c4:	89 c3                	mov    ebx,eax
c00228c6:	58                   	pop    eax
c00228c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00228cb:	50                   	push   eax
c00228cc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00228cf:	50                   	push   eax
c00228d0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228d4:	50                   	push   eax
c00228d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00228d9:	50                   	push   eax
c00228da:	56                   	push   esi
c00228db:	e8 0d ff ff ff       	call   c00227ed <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00228e0:	83 c4 20             	add    esp,0x20
c00228e3:	84 c0                	test   al,al
c00228e5:	74 07                	je     c00228ee <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00228e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00228ec:	74 0b                	je     c00228f9 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00228ee:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00228f2:	b8 01 00 00 00       	mov    eax,0x1
c00228f7:	eb 3b                	jmp    c0022934 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00228f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228fd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022901:	89 03                	mov    DWORD PTR [ebx],eax
c0022903:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002290a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002290e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022915:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002291c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002291f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022926:	8a 06                	mov    al,BYTE PTR [esi]
c0022928:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002292b:	31 c0                	xor    eax,eax
c002292d:	eb 05                	jmp    c0022934 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002292f:	b8 04 00 00 00       	mov    eax,0x4
c0022934:	83 c4 10             	add    esp,0x10
c0022937:	5b                   	pop    ebx
c0022938:	5e                   	pop    esi
c0022939:	5f                   	pop    edi
c002293a:	c3                   	ret    
c002293b:	90                   	nop

c002293c <ISO9660::exists(char const*)>:
c002293c:	83 ec 28             	sub    esp,0x28
c002293f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022943:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022947:	52                   	push   edx
c0022948:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002294b:	52                   	push   edx
c002294c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022950:	52                   	push   edx
c0022951:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022955:	52                   	push   edx
c0022956:	50                   	push   eax
c0022957:	e8 91 fe ff ff       	call   c00227ed <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002295c:	83 c4 3c             	add    esp,0x3c
c002295f:	c3                   	ret    

c0022960 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022960:	56                   	push   esi
c0022961:	53                   	push   ebx
c0022962:	83 ec 14             	sub    esp,0x14
c0022965:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022969:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002296d:	85 db                	test   ebx,ebx
c002296f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022973:	0f 94 c2             	sete   dl
c0022976:	85 f6                	test   esi,esi
c0022978:	0f 94 c0             	sete   al
c002297b:	08 c2                	or     dl,al
c002297d:	75 68                	jne    c00229e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002297f:	85 c9                	test   ecx,ecx
c0022981:	74 64                	je     c00229e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022983:	83 ec 0c             	sub    esp,0xc
c0022986:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022989:	8d 44 24 18          	lea    eax,[esp+0x18]
c002298d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022993:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002299a:	50                   	push   eax
c002299b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002299e:	50                   	push   eax
c002299f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229a3:	50                   	push   eax
c00229a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00229a8:	50                   	push   eax
c00229a9:	51                   	push   ecx
c00229aa:	e8 3e fe ff ff       	call   c00227ed <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00229af:	83 c4 20             	add    esp,0x20
c00229b2:	ba 01 00 00 00       	mov    edx,0x1
c00229b7:	84 c0                	test   al,al
c00229b9:	74 31                	je     c00229ec <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00229bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229bf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00229c6:	89 03                	mov    DWORD PTR [ebx],eax
c00229c8:	ba 00 00 00 00       	mov    edx,0x0
c00229cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229d1:	85 c0                	test   eax,eax
c00229d3:	0f 95 06             	setne  BYTE PTR [esi]
c00229d6:	74 14                	je     c00229ec <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00229d8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00229de:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00229e5:	eb 05                	jmp    c00229ec <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00229e7:	ba 04 00 00 00       	mov    edx,0x4
c00229ec:	83 c4 14             	add    esp,0x14
c00229ef:	89 d0                	mov    eax,edx
c00229f1:	5b                   	pop    ebx
c00229f2:	5e                   	pop    esi
c00229f3:	c3                   	ret    

c00229f4 <ISO9660::openDir(char const*, void**)>:
c00229f4:	57                   	push   edi
c00229f5:	56                   	push   esi
c00229f6:	53                   	push   ebx
c00229f7:	83 ec 10             	sub    esp,0x10
c00229fa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00229fe:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022a02:	85 ff                	test   edi,edi
c0022a04:	0f 84 95 00 00 00    	je     c0022a9f <ISO9660::openDir(char const*, void**)+0xab>
c0022a0a:	85 f6                	test   esi,esi
c0022a0c:	0f 84 8d 00 00 00    	je     c0022a9f <ISO9660::openDir(char const*, void**)+0xab>
c0022a12:	83 ec 0c             	sub    esp,0xc
c0022a15:	6a 1c                	push   0x1c
c0022a17:	e8 d8 ce fe ff       	call   c000f8f4 <malloc>
c0022a1c:	89 07                	mov    DWORD PTR [edi],eax
c0022a1e:	89 c3                	mov    ebx,eax
c0022a20:	59                   	pop    ecx
c0022a21:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022a25:	50                   	push   eax
c0022a26:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022a29:	50                   	push   eax
c0022a2a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a2e:	50                   	push   eax
c0022a2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a33:	50                   	push   eax
c0022a34:	56                   	push   esi
c0022a35:	e8 b3 fd ff ff       	call   c00227ed <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022a3a:	83 c4 20             	add    esp,0x20
c0022a3d:	84 c0                	test   al,al
c0022a3f:	74 07                	je     c0022a48 <ISO9660::openDir(char const*, void**)+0x54>
c0022a41:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022a46:	75 21                	jne    c0022a69 <ISO9660::openDir(char const*, void**)+0x75>
c0022a48:	0f b6 c0             	movzx  eax,al
c0022a4b:	52                   	push   edx
c0022a4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022a50:	50                   	push   eax
c0022a51:	68 9d d5 02 c0       	push   0xc002d59d
c0022a56:	e8 44 04 ff ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0022a5b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022a5f:	83 c4 10             	add    esp,0x10
c0022a62:	b8 01 00 00 00       	mov    eax,0x1
c0022a67:	eb 3b                	jmp    c0022aa4 <ISO9660::openDir(char const*, void**)+0xb0>
c0022a69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a6d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022a71:	89 03                	mov    DWORD PTR [ebx],eax
c0022a73:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022a7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a7e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022a85:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a8c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022a8f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022a96:	8a 06                	mov    al,BYTE PTR [esi]
c0022a98:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022a9b:	31 c0                	xor    eax,eax
c0022a9d:	eb 05                	jmp    c0022aa4 <ISO9660::openDir(char const*, void**)+0xb0>
c0022a9f:	b8 04 00 00 00       	mov    eax,0x4
c0022aa4:	83 c4 10             	add    esp,0x10
c0022aa7:	5b                   	pop    ebx
c0022aa8:	5e                   	pop    esi
c0022aa9:	5f                   	pop    edi
c0022aaa:	c3                   	ret    
c0022aab:	90                   	nop

c0022aac <ISO9660::ISO9660()>:
c0022aac:	83 ec 0c             	sub    esp,0xc
c0022aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab3:	83 ec 0c             	sub    esp,0xc
c0022ab6:	50                   	push   eax
c0022ab7:	e8 ee 06 ff ff       	call   c00131aa <Filesystem::Filesystem()>
c0022abc:	83 c4 10             	add    esp,0x10
c0022abf:	ba c0 d5 02 c0       	mov    edx,0xc002d5c0
c0022ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac8:	89 10                	mov    DWORD PTR [eax],edx
c0022aca:	90                   	nop
c0022acb:	83 c4 0c             	add    esp,0xc
c0022ace:	c3                   	ret    
c0022acf:	90                   	nop

c0022ad0 <SoundChannel::~SoundChannel()>:
c0022ad0:	83 ec 0c             	sub    esp,0xc
c0022ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022ada:	83 ec 0c             	sub    esp,0xc
c0022add:	50                   	push   eax
c0022ade:	e8 21 ce fe ff       	call   c000f904 <free>
c0022ae3:	83 c4 10             	add    esp,0x10
c0022ae6:	90                   	nop
c0022ae7:	83 c4 0c             	add    esp,0xc
c0022aea:	c3                   	ret    
c0022aeb:	90                   	nop

c0022aec <SoundChannel::setSpeed(float)>:
c0022aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022af0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022af4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022af7:	c3                   	ret    

c0022af8 <SoundChannel::getSpeed()>:
c0022af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022afc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022aff:	c3                   	ret    

c0022b00 <SoundChannel::setVolume(int)>:
c0022b00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022b04:	83 f8 64             	cmp    eax,0x64
c0022b07:	7e 05                	jle    c0022b0e <SoundChannel::setVolume(int)+0xe>
c0022b09:	b8 64 00 00 00       	mov    eax,0x64
c0022b0e:	85 c0                	test   eax,eax
c0022b10:	79 02                	jns    c0022b14 <SoundChannel::setVolume(int)+0x14>
c0022b12:	31 c0                	xor    eax,eax
c0022b14:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022b18:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022b1b:	c3                   	ret    

c0022b1c <SoundChannel::getVolume()>:
c0022b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b20:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022b23:	c3                   	ret    

c0022b24 <SoundChannel::pause()>:
c0022b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b28:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022b2c:	c3                   	ret    
c0022b2d:	90                   	nop

c0022b2e <SoundChannel::SoundChannel(int, int, int, int)>:
c0022b2e:	83 ec 1c             	sub    esp,0x1c
c0022b31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022b35:	e8 ea ff ff ff       	call   c0022b24 <SoundChannel::pause()>
c0022b3a:	83 c4 04             	add    esp,0x4
c0022b3d:	6a 50                	push   0x50
c0022b3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b43:	e8 b8 ff ff ff       	call   c0022b00 <SoundChannel::setVolume(int)>
c0022b48:	83 c4 08             	add    esp,0x8
c0022b4b:	a1 3c d6 02 c0       	mov    eax,ds:0xc002d63c
c0022b50:	50                   	push   eax
c0022b51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b55:	e8 92 ff ff ff       	call   c0022aec <SoundChannel::setSpeed(float)>
c0022b5a:	83 c4 08             	add    esp,0x8
c0022b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022b65:	89 10                	mov    DWORD PTR [eax],edx
c0022b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022b6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b76:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022b7a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b7d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022b82:	75 23                	jne    c0022ba7 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b88:	8b 10                	mov    edx,DWORD PTR [eax]
c0022b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b91:	0f af c2             	imul   eax,edx
c0022b94:	85 c0                	test   eax,eax
c0022b96:	79 03                	jns    c0022b9b <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022b98:	83 c0 03             	add    eax,0x3
c0022b9b:	c1 f8 02             	sar    eax,0x2
c0022b9e:	05 a0 0f 00 00       	add    eax,0xfa0
c0022ba3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022ba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022baf:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bb6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bc1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bcc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022bcf:	c1 e0 02             	shl    eax,0x2
c0022bd2:	83 ec 0c             	sub    esp,0xc
c0022bd5:	50                   	push   eax
c0022bd6:	e8 19 cd fe ff       	call   c000f8f4 <malloc>
c0022bdb:	83 c4 10             	add    esp,0x10
c0022bde:	89 c2                	mov    edx,eax
c0022be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022be4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022be7:	83 ec 04             	sub    esp,0x4
c0022bea:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022bee:	50                   	push   eax
c0022bef:	6a 01                	push   0x1
c0022bf1:	6a 04                	push   0x4
c0022bf3:	e8 89 5f fe ff       	call   c0008b81 <src_new>
c0022bf8:	83 c4 10             	add    esp,0x10
c0022bfb:	89 c2                	mov    edx,eax
c0022bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022c04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c08:	85 c0                	test   eax,eax
c0022c0a:	74 10                	je     c0022c1c <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022c0c:	83 ec 0c             	sub    esp,0xc
c0022c0f:	68 20 d6 02 c0       	push   0xc002d620
c0022c14:	e8 6e 7c ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0022c19:	83 c4 10             	add    esp,0x10
c0022c1c:	a0 00 34 03 c0       	mov    al,ds:0xc0033400
c0022c21:	83 f0 01             	xor    eax,0x1
c0022c24:	84 c0                	test   al,al
c0022c26:	74 57                	je     c0022c7f <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022c28:	a1 40 d6 02 c0       	mov    eax,ds:0xc002d640
c0022c2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022c31:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c39:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022c41:	7f 35                	jg     c0022c78 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022c43:	83 ec 0c             	sub    esp,0xc
c0022c46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022c4a:	e8 70 50 00 00       	call   c0027cbf <__floatsisf>
c0022c4f:	83 c4 10             	add    esp,0x10
c0022c52:	8b 15 40 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d640
c0022c58:	83 ec 08             	sub    esp,0x8
c0022c5b:	52                   	push   edx
c0022c5c:	50                   	push   eax
c0022c5d:	e8 6f 4c 00 00       	call   c00278d1 <__mulsf3>
c0022c62:	83 c4 10             	add    esp,0x10
c0022c65:	89 c2                	mov    edx,eax
c0022c67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c6b:	89 14 85 00 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd000],edx
c0022c72:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022c76:	eb c1                	jmp    c0022c39 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022c78:	c6 05 00 34 03 c0 01 	mov    BYTE PTR ds:0xc0033400,0x1
c0022c7f:	90                   	nop
c0022c80:	83 c4 1c             	add    esp,0x1c
c0022c83:	c3                   	ret    

c0022c84 <SoundChannel::play()>:
c0022c84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c88:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022c8c:	c3                   	ret    
c0022c8d:	90                   	nop

c0022c8e <SoundChannel::paused()>:
c0022c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c92:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022c95:	c3                   	ret    

c0022c96 <SoundChannel::getSampleRate()>:
c0022c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c9c:	c3                   	ret    
c0022c9d:	90                   	nop

c0022c9e <SoundChannel::getBits()>:
c0022c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ca5:	c3                   	ret    

c0022ca6 <SoundChannel::getBufferUsed()>:
c0022ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022caa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022cad:	c3                   	ret    

c0022cae <SoundChannel::getBufferSize()>:
c0022cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cb2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022cb5:	c3                   	ret    

c0022cb6 <SoundChannel::unbuffer(float*, int, int)>:
c0022cb6:	56                   	push   esi
c0022cb7:	53                   	push   ebx
c0022cb8:	83 ec 40             	sub    esp,0x40
c0022cbb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022cbf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022cc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022cc6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022cc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022ccd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022cd1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022cd5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022cd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022cdd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022ce1:	e8 d9 4f 00 00       	call   c0027cbf <__floatsisf>
c0022ce6:	5a                   	pop    edx
c0022ce7:	89 c6                	mov    esi,eax
c0022ce9:	ff 33                	push   DWORD PTR [ebx]
c0022ceb:	e8 cf 4f 00 00       	call   c0027cbf <__floatsisf>
c0022cf0:	59                   	pop    ecx
c0022cf1:	5a                   	pop    edx
c0022cf2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022cf5:	50                   	push   eax
c0022cf6:	e8 d6 4b 00 00       	call   c00278d1 <__mulsf3>
c0022cfb:	59                   	pop    ecx
c0022cfc:	5a                   	pop    edx
c0022cfd:	50                   	push   eax
c0022cfe:	56                   	push   esi
c0022cff:	e8 90 4d 00 00       	call   c0027a94 <__divsf3>
c0022d04:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d07:	e8 83 62 00 00       	call   c0028f8f <__extendsfdf2>
c0022d0c:	59                   	pop    ecx
c0022d0d:	5e                   	pop    esi
c0022d0e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d12:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022d16:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022d1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022d22:	50                   	push   eax
c0022d23:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022d26:	e8 4b 5a fe ff       	call   c0008776 <src_process>
c0022d2b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022d32:	83 c4 0c             	add    esp,0xc
c0022d35:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022d38:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022d3b:	29 d0                	sub    eax,edx
c0022d3d:	c1 e0 02             	shl    eax,0x2
c0022d40:	50                   	push   eax
c0022d41:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022d44:	50                   	push   eax
c0022d45:	51                   	push   ecx
c0022d46:	e8 59 d9 fd ff       	call   c00006a4 <memmove>
c0022d4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d4f:	83 c4 44             	add    esp,0x44
c0022d52:	5b                   	pop    ebx
c0022d53:	5e                   	pop    esi
c0022d54:	c3                   	ret    
c0022d55:	90                   	nop

c0022d56 <SoundChannel::buffer8(unsigned char*, int)>:
c0022d56:	55                   	push   ebp
c0022d57:	57                   	push   edi
c0022d58:	56                   	push   esi
c0022d59:	53                   	push   ebx
c0022d5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d5e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022d62:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022d65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022d69:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022d6c:	74 7a                	je     c0022de8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022d6e:	85 ff                	test   edi,edi
c0022d70:	7e 76                	jle    c0022de8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022d72:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022d76:	8d 70 01             	lea    esi,[eax+0x1]
c0022d79:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022d7c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022d7f:	8b 1c 9d 00 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd000]
c0022d86:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022d89:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022d8c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022d8f:	74 5e                	je     c0022def <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022d91:	83 ff 01             	cmp    edi,0x1
c0022d94:	74 4b                	je     c0022de1 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022d96:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022d9a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022d9d:	8d 70 01             	lea    esi,[eax+0x1]
c0022da0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022da3:	8b 1c 9d 00 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd000]
c0022daa:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022dad:	b8 02 00 00 00       	mov    eax,0x2
c0022db2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022db5:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022db8:	75 23                	jne    c0022ddd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022dba:	eb 27                	jmp    c0022de3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022dbc:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022dc1:	8d 71 01             	lea    esi,[ecx+0x1]
c0022dc4:	40                   	inc    eax
c0022dc5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022dc8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022dcb:	8b 1c 9d 00 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd000]
c0022dd2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022dd5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022dd8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022ddb:	74 06                	je     c0022de3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022ddd:	39 c7                	cmp    edi,eax
c0022ddf:	75 db                	jne    c0022dbc <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022de1:	89 f8                	mov    eax,edi
c0022de3:	5b                   	pop    ebx
c0022de4:	5e                   	pop    esi
c0022de5:	5f                   	pop    edi
c0022de6:	5d                   	pop    ebp
c0022de7:	c3                   	ret    
c0022de8:	5b                   	pop    ebx
c0022de9:	31 c0                	xor    eax,eax
c0022deb:	5e                   	pop    esi
c0022dec:	5f                   	pop    edi
c0022ded:	5d                   	pop    ebp
c0022dee:	c3                   	ret    
c0022def:	b8 01 00 00 00       	mov    eax,0x1
c0022df4:	eb ed                	jmp    c0022de3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022df6 <SoundDevice::SoundDevice(char const*)>:
c0022df6:	83 ec 1c             	sub    esp,0x1c
c0022df9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022dfd:	83 ec 08             	sub    esp,0x8
c0022e00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e04:	50                   	push   eax
c0022e05:	e8 a6 16 ff ff       	call   c00144b0 <Device::Device(char const*)>
c0022e0a:	83 c4 10             	add    esp,0x10
c0022e0d:	ba 4c d6 02 c0       	mov    edx,0xc002d64c
c0022e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e16:	89 10                	mov    DWORD PTR [eax],edx
c0022e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e1c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e2a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022e34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022e3c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022e41:	7f 19                	jg     c0022e5c <SoundDevice::SoundDevice(char const*)+0x66>
c0022e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e4b:	83 c2 54             	add    edx,0x54
c0022e4e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022e56:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022e5a:	eb e0                	jmp    c0022e3c <SoundDevice::SoundDevice(char const*)+0x46>
c0022e5c:	90                   	nop
c0022e5d:	83 c4 1c             	add    esp,0x1c
c0022e60:	c3                   	ret    
c0022e61:	90                   	nop

c0022e62 <SoundDevice::~SoundDevice()>:
c0022e62:	53                   	push   ebx
c0022e63:	83 ec 18             	sub    esp,0x18
c0022e66:	ba 4c d6 02 c0       	mov    edx,0xc002d64c
c0022e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e6f:	89 10                	mov    DWORD PTR [eax],edx
c0022e71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022e79:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022e7e:	7f 46                	jg     c0022ec6 <SoundDevice::~SoundDevice()+0x64>
c0022e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e88:	83 c2 54             	add    edx,0x54
c0022e8b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022e8f:	85 c0                	test   eax,eax
c0022e91:	74 2d                	je     c0022ec0 <SoundDevice::~SoundDevice()+0x5e>
c0022e93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e9b:	83 c2 54             	add    edx,0x54
c0022e9e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022ea2:	85 db                	test   ebx,ebx
c0022ea4:	74 1a                	je     c0022ec0 <SoundDevice::~SoundDevice()+0x5e>
c0022ea6:	83 ec 0c             	sub    esp,0xc
c0022ea9:	53                   	push   ebx
c0022eaa:	e8 21 fc ff ff       	call   c0022ad0 <SoundChannel::~SoundChannel()>
c0022eaf:	83 c4 10             	add    esp,0x10
c0022eb2:	83 ec 08             	sub    esp,0x8
c0022eb5:	6a 2c                	push   0x2c
c0022eb7:	53                   	push   ebx
c0022eb8:	e8 02 ff fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0022ebd:	83 c4 10             	add    esp,0x10
c0022ec0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022ec4:	eb b3                	jmp    c0022e79 <SoundDevice::~SoundDevice()+0x17>
c0022ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022eca:	83 ec 0c             	sub    esp,0xc
c0022ecd:	50                   	push   eax
c0022ece:	e8 d3 12 ff ff       	call   c00141a6 <Device::~Device()>
c0022ed3:	83 c4 10             	add    esp,0x10
c0022ed6:	90                   	nop
c0022ed7:	83 c4 18             	add    esp,0x18
c0022eda:	5b                   	pop    ebx
c0022edb:	c3                   	ret    

c0022edc <SoundDevice::~SoundDevice()>:
c0022edc:	83 ec 0c             	sub    esp,0xc
c0022edf:	83 ec 0c             	sub    esp,0xc
c0022ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ee6:	e8 77 ff ff ff       	call   c0022e62 <SoundDevice::~SoundDevice()>
c0022eeb:	83 c4 10             	add    esp,0x10
c0022eee:	83 ec 08             	sub    esp,0x8
c0022ef1:	68 e4 01 00 00       	push   0x1e4
c0022ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022efa:	e8 c0 fe fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0022eff:	83 c4 10             	add    esp,0x10
c0022f02:	83 c4 0c             	add    esp,0xc
c0022f05:	c3                   	ret    

c0022f06 <SoundDevice::getFreeChannelNum()>:
c0022f06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f0a:	31 c0                	xor    eax,eax
c0022f0c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022f14:	74 09                	je     c0022f1f <SoundDevice::getFreeChannelNum()+0x19>
c0022f16:	40                   	inc    eax
c0022f17:	83 f8 20             	cmp    eax,0x20
c0022f1a:	75 f0                	jne    c0022f0c <SoundDevice::getFreeChannelNum()+0x6>
c0022f1c:	83 c8 ff             	or     eax,0xffffffff
c0022f1f:	c3                   	ret    

c0022f20 <SoundDevice::addChannel(SoundChannel*)>:
c0022f20:	56                   	push   esi
c0022f21:	53                   	push   ebx
c0022f22:	51                   	push   ecx
c0022f23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022f2b:	53                   	push   ebx
c0022f2c:	e8 d5 ff ff ff       	call   c0022f06 <SoundDevice::getFreeChannelNum()>
c0022f31:	5a                   	pop    edx
c0022f32:	83 f8 ff             	cmp    eax,0xffffffff
c0022f35:	74 51                	je     c0022f88 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022f37:	85 f6                	test   esi,esi
c0022f39:	74 4d                	je     c0022f88 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022f3b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022f42:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022f49:	75 30                	jne    c0022f7b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022f4b:	83 ec 0c             	sub    esp,0xc
c0022f4e:	56                   	push   esi
c0022f4f:	e8 42 fd ff ff       	call   c0022c96 <SoundChannel::getSampleRate()>
c0022f54:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022f5a:	89 34 24             	mov    DWORD PTR [esp],esi
c0022f5d:	e8 3c fd ff ff       	call   c0022c9e <SoundChannel::getBits()>
c0022f62:	83 c4 0c             	add    esp,0xc
c0022f65:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022f6b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022f6d:	50                   	push   eax
c0022f6e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022f74:	53                   	push   ebx
c0022f75:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022f78:	83 c4 10             	add    esp,0x10
c0022f7b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022f81:	b8 01 00 00 00       	mov    eax,0x1
c0022f86:	eb 03                	jmp    c0022f8b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022f88:	83 c8 ff             	or     eax,0xffffffff
c0022f8b:	5a                   	pop    edx
c0022f8c:	5b                   	pop    ebx
c0022f8d:	5e                   	pop    esi
c0022f8e:	c3                   	ret    
c0022f8f:	90                   	nop

c0022f90 <SoundDevice::removeChannel(int)>:
c0022f90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f98:	83 fa 1f             	cmp    edx,0x1f
c0022f9b:	77 23                	ja     c0022fc0 <SoundDevice::removeChannel(int)+0x30>
c0022f9d:	8d 14 90             	lea    edx,[eax+edx*4]
c0022fa0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022fa7:	74 17                	je     c0022fc0 <SoundDevice::removeChannel(int)+0x30>
c0022fa9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022fb3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022fb9:	75 05                	jne    c0022fc0 <SoundDevice::removeChannel(int)+0x30>
c0022fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fbd:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022fc0:	c3                   	ret    
c0022fc1:	90                   	nop

c0022fc2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022fc2:	57                   	push   edi
c0022fc3:	56                   	push   esi
c0022fc4:	53                   	push   ebx
c0022fc5:	31 db                	xor    ebx,ebx
c0022fc7:	83 ec 10             	sub    esp,0x10
c0022fca:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022fce:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022fd2:	0f 8d cb 00 00 00    	jge    c00230a3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022fd8:	83 ec 0c             	sub    esp,0xc
c0022fdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022fdf:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022fe2:	e8 a8 5f 00 00       	call   c0028f8f <__extendsfdf2>
c0022fe7:	83 c4 10             	add    esp,0x10
c0022fea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022fee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ff2:	68 00 00 f0 3f       	push   0x3ff00000
c0022ff7:	6a 00                	push   0x0
c0022ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023001:	e8 15 4f 00 00       	call   c0027f1b <__adddf3>
c0023006:	83 c4 10             	add    esp,0x10
c0023009:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002300d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023011:	68 00 00 e0 3f       	push   0x3fe00000
c0023016:	6a 00                	push   0x0
c0023018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002301c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023020:	e8 73 55 00 00       	call   c0028598 <__muldf3>
c0023025:	83 c4 10             	add    esp,0x10
c0023028:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002302c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023030:	68 00 00 60 40       	push   0x40600000
c0023035:	6a 00                	push   0x0
c0023037:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002303b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002303f:	e8 54 55 00 00       	call   c0028598 <__muldf3>
c0023044:	59                   	pop    ecx
c0023045:	5f                   	pop    edi
c0023046:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002304a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002304e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023056:	e8 10 5e 00 00       	call   c0028e6b <__truncdfsf2>
c002305b:	5a                   	pop    edx
c002305c:	89 c7                	mov    edi,eax
c002305e:	59                   	pop    ecx
c002305f:	68 00 00 fe 42       	push   0x42fe0000
c0023064:	50                   	push   eax
c0023065:	e8 ab 4e 00 00       	call   c0027f15 <__gesf2>
c002306a:	83 c4 10             	add    esp,0x10
c002306d:	85 c0                	test   eax,eax
c002306f:	78 06                	js     c0023077 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0023071:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0023075:	eb 26                	jmp    c002309d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0023077:	50                   	push   eax
c0023078:	50                   	push   eax
c0023079:	6a 00                	push   0x0
c002307b:	57                   	push   edi
c002307c:	e8 98 4e 00 00       	call   c0027f19 <__lesf2>
c0023081:	83 c4 10             	add    esp,0x10
c0023084:	85 c0                	test   eax,eax
c0023086:	7f 06                	jg     c002308e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0023088:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002308c:	eb 0f                	jmp    c002309d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002308e:	83 ec 0c             	sub    esp,0xc
c0023091:	57                   	push   edi
c0023092:	e8 95 5f 00 00       	call   c002902c <lrintf>
c0023097:	83 c4 10             	add    esp,0x10
c002309a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002309d:	43                   	inc    ebx
c002309e:	e9 2b ff ff ff       	jmp    c0022fce <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00230a3:	83 c4 10             	add    esp,0x10
c00230a6:	5b                   	pop    ebx
c00230a7:	5e                   	pop    esi
c00230a8:	5f                   	pop    edi
c00230a9:	c3                   	ret    

c00230aa <SoundDevice::getAudio(int, float*, float*)>:
c00230aa:	55                   	push   ebp
c00230ab:	57                   	push   edi
c00230ac:	56                   	push   esi
c00230ad:	53                   	push   ebx
c00230ae:	31 db                	xor    ebx,ebx
c00230b0:	83 ec 20             	sub    esp,0x20
c00230b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00230b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00230bb:	c1 e0 02             	shl    eax,0x2
c00230be:	50                   	push   eax
c00230bf:	6a 00                	push   0x0
c00230c1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00230c5:	e8 a2 d6 fd ff       	call   c000076c <memset>
c00230ca:	83 c4 10             	add    esp,0x10
c00230cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00230d1:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00230d8:	85 c0                	test   eax,eax
c00230da:	0f 84 d7 00 00 00    	je     c00231b7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00230e0:	83 ec 0c             	sub    esp,0xc
c00230e3:	50                   	push   eax
c00230e4:	e8 a5 fb ff ff       	call   c0022c8e <SoundChannel::paused()>
c00230e9:	83 c4 10             	add    esp,0x10
c00230ec:	84 c0                	test   al,al
c00230ee:	0f 85 c3 00 00 00    	jne    c00231b7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00230f4:	83 ec 0c             	sub    esp,0xc
c00230f7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00230fe:	e8 19 fa ff ff       	call   c0022b1c <SoundChannel::getVolume()>
c0023103:	83 c4 10             	add    esp,0x10
c0023106:	85 c0                	test   eax,eax
c0023108:	0f 84 a9 00 00 00    	je     c00231b7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002310e:	83 ec 0c             	sub    esp,0xc
c0023111:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023118:	e8 ff f9 ff ff       	call   c0022b1c <SoundChannel::getVolume()>
c002311d:	83 ec 0c             	sub    esp,0xc
c0023120:	50                   	push   eax
c0023121:	e8 99 4b 00 00       	call   c0027cbf <__floatsisf>
c0023126:	59                   	pop    ecx
c0023127:	5d                   	pop    ebp
c0023128:	31 ed                	xor    ebp,ebp
c002312a:	68 00 00 c8 42       	push   0x42c80000
c002312f:	50                   	push   eax
c0023130:	e8 5f 49 00 00       	call   c0027a94 <__divsf3>
c0023135:	83 c4 10             	add    esp,0x10
c0023138:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002313c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0023140:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0023146:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002314a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023151:	e8 60 fb ff ff       	call   c0022cb6 <SoundChannel::unbuffer(float*, int, int)>
c0023156:	83 c4 20             	add    esp,0x20
c0023159:	89 c1                	mov    ecx,eax
c002315b:	39 cd                	cmp    ebp,ecx
c002315d:	7d 52                	jge    c00231b1 <SoundDevice::getAudio(int, float*, float*)+0x107>
c002315f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023163:	50                   	push   eax
c0023164:	50                   	push   eax
c0023165:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0023169:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002316c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023170:	e8 5c 47 00 00       	call   c00278d1 <__mulsf3>
c0023175:	5a                   	pop    edx
c0023176:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002317a:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0023180:	e8 3a 4b 00 00       	call   c0027cbf <__floatsisf>
c0023185:	59                   	pop    ecx
c0023186:	5a                   	pop    edx
c0023187:	50                   	push   eax
c0023188:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002318c:	e8 03 49 00 00       	call   c0027a94 <__divsf3>
c0023191:	59                   	pop    ecx
c0023192:	5a                   	pop    edx
c0023193:	50                   	push   eax
c0023194:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0023198:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002319b:	e8 0e 44 00 00       	call   c00275ae <__addsf3>
c00231a0:	83 c4 10             	add    esp,0x10
c00231a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00231a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00231ab:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00231ae:	45                   	inc    ebp
c00231af:	eb aa                	jmp    c002315b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00231b1:	39 cf                	cmp    edi,ecx
c00231b3:	7e 02                	jle    c00231b7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00231b5:	89 cf                	mov    edi,ecx
c00231b7:	43                   	inc    ebx
c00231b8:	83 fb 20             	cmp    ebx,0x20
c00231bb:	0f 85 10 ff ff ff    	jne    c00230d1 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00231c1:	83 c4 1c             	add    esp,0x1c
c00231c4:	89 f8                	mov    eax,edi
c00231c6:	5b                   	pop    ebx
c00231c7:	5e                   	pop    esi
c00231c8:	5f                   	pop    edi
c00231c9:	5d                   	pop    ebp
c00231ca:	c3                   	ret    
c00231cb:	90                   	nop

c00231cc <PCI::open(int, int, void*)>:
c00231cc:	83 ec 18             	sub    esp,0x18
c00231cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00231d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00231d5:	50                   	push   eax
c00231d6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00231d9:	31 c0                	xor    eax,eax
c00231db:	83 c4 1c             	add    esp,0x1c
c00231de:	c3                   	ret    
c00231df:	90                   	nop

c00231e0 <PCI::close(int, int, void*)>:
c00231e0:	31 c0                	xor    eax,eax
c00231e2:	c3                   	ret    
c00231e3:	90                   	nop

c00231e4 <PCI::PCI()>:
c00231e4:	83 ec 0c             	sub    esp,0xc
c00231e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231eb:	83 ec 08             	sub    esp,0x8
c00231ee:	68 7c d6 02 c0       	push   0xc002d67c
c00231f3:	50                   	push   eax
c00231f4:	e8 47 09 ff ff       	call   c0013b40 <Bus::Bus(char const*)>
c00231f9:	83 c4 10             	add    esp,0x10
c00231fc:	ba 04 d7 02 c0       	mov    edx,0xc002d704
c0023201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023205:	89 10                	mov    DWORD PTR [eax],edx
c0023207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002320b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023211:	0f b6 d0             	movzx  edx,al
c0023214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023218:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002321f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023223:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023229:	0f b6 d0             	movzx  edx,al
c002322c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023230:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0023235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023239:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002323f:	8d 50 01             	lea    edx,[eax+0x1]
c0023242:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023246:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002324c:	0f b6 d0             	movzx  edx,al
c002324f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023253:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023257:	83 c9 c0             	or     ecx,0xffffffc0
c002325a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002325e:	90                   	nop
c002325f:	83 c4 0c             	add    esp,0xc
c0023262:	c3                   	ret    
c0023263:	90                   	nop

c0023264 <PCI::readBAR8(unsigned int, int)>:
c0023264:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023268:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002326c:	f6 c2 01             	test   dl,0x1
c002326f:	74 07                	je     c0023278 <PCI::readBAR8(unsigned int, int)+0x14>
c0023271:	83 e2 fc             	and    edx,0xfffffffc
c0023274:	01 c2                	add    edx,eax
c0023276:	ec                   	in     al,dx
c0023277:	c3                   	ret    
c0023278:	83 e2 f0             	and    edx,0xfffffff0
c002327b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002327e:	c3                   	ret    
c002327f:	90                   	nop

c0023280 <PCI::readBAR16(unsigned int, int)>:
c0023280:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023284:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023288:	f6 c2 01             	test   dl,0x1
c002328b:	74 08                	je     c0023295 <PCI::readBAR16(unsigned int, int)+0x15>
c002328d:	83 e2 fc             	and    edx,0xfffffffc
c0023290:	01 c2                	add    edx,eax
c0023292:	66 ed                	in     ax,dx
c0023294:	c3                   	ret    
c0023295:	83 e2 f0             	and    edx,0xfffffff0
c0023298:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002329c:	c3                   	ret    
c002329d:	90                   	nop

c002329e <PCI::readBAR32(unsigned int, int)>:
c002329e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232a6:	f6 c2 01             	test   dl,0x1
c00232a9:	74 07                	je     c00232b2 <PCI::readBAR32(unsigned int, int)+0x14>
c00232ab:	83 e2 fc             	and    edx,0xfffffffc
c00232ae:	01 c2                	add    edx,eax
c00232b0:	ed                   	in     eax,dx
c00232b1:	c3                   	ret    
c00232b2:	83 e2 f0             	and    edx,0xfffffff0
c00232b5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00232b8:	c3                   	ret    
c00232b9:	90                   	nop

c00232ba <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00232ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00232c6:	f6 c2 01             	test   dl,0x1
c00232c9:	74 07                	je     c00232d2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00232cb:	83 e2 fc             	and    edx,0xfffffffc
c00232ce:	01 ca                	add    edx,ecx
c00232d0:	ee                   	out    dx,al
c00232d1:	c3                   	ret    
c00232d2:	83 e2 f0             	and    edx,0xfffffff0
c00232d5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00232d8:	c3                   	ret    
c00232d9:	90                   	nop

c00232da <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00232da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00232e6:	f6 c2 01             	test   dl,0x1
c00232e9:	74 08                	je     c00232f3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00232eb:	83 e2 fc             	and    edx,0xfffffffc
c00232ee:	01 ca                	add    edx,ecx
c00232f0:	66 ef                	out    dx,ax
c00232f2:	c3                   	ret    
c00232f3:	83 e2 f0             	and    edx,0xfffffff0
c00232f6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00232fa:	c3                   	ret    
c00232fb:	90                   	nop

c00232fc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00232fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023300:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023304:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023308:	f6 c2 01             	test   dl,0x1
c002330b:	74 07                	je     c0023314 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002330d:	83 e2 fc             	and    edx,0xfffffffc
c0023310:	01 ca                	add    edx,ecx
c0023312:	ef                   	out    dx,eax
c0023313:	c3                   	ret    
c0023314:	83 e2 f0             	and    edx,0xfffffff0
c0023317:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002331a:	c3                   	ret    
c002331b:	90                   	nop

c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002331c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023320:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023325:	89 ca                	mov    edx,ecx
c0023327:	c1 e0 10             	shl    eax,0x10
c002332a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023330:	09 d0                	or     eax,edx
c0023332:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0023337:	c1 e2 08             	shl    edx,0x8
c002333a:	09 d0                	or     eax,edx
c002333c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023341:	c1 e2 0b             	shl    edx,0xb
c0023344:	09 d0                	or     eax,edx
c0023346:	ba f8 0c 00 00       	mov    edx,0xcf8
c002334b:	0d 00 00 00 80       	or     eax,0x80000000
c0023350:	ef                   	out    dx,eax
c0023351:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023356:	ed                   	in     eax,dx
c0023357:	83 e1 02             	and    ecx,0x2
c002335a:	0f b6 c9             	movzx  ecx,cl
c002335d:	c1 e1 03             	shl    ecx,0x3
c0023360:	d3 e8                	shr    eax,cl
c0023362:	c3                   	ret    
c0023363:	90                   	nop

c0023364 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0023364:	6a 00                	push   0x0
c0023366:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002336b:	50                   	push   eax
c002336c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023371:	50                   	push   eax
c0023372:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023377:	50                   	push   eax
c0023378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002337c:	e8 9b ff ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023381:	83 c4 14             	add    esp,0x14
c0023384:	c3                   	ret    
c0023385:	90                   	nop

c0023386 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0023386:	6a 0e                	push   0xe
c0023388:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002338d:	50                   	push   eax
c002338e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023393:	50                   	push   eax
c0023394:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023399:	50                   	push   eax
c002339a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002339e:	e8 79 ff ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233a3:	83 c4 14             	add    esp,0x14
c00233a6:	0f b6 c0             	movzx  eax,al
c00233a9:	c3                   	ret    

c00233aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00233aa:	55                   	push   ebp
c00233ab:	57                   	push   edi
c00233ac:	56                   	push   esi
c00233ad:	53                   	push   ebx
c00233ae:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00233b3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00233b8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00233bd:	6a 0a                	push   0xa
c00233bf:	56                   	push   esi
c00233c0:	55                   	push   ebp
c00233c1:	57                   	push   edi
c00233c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00233c6:	e8 51 ff ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233cb:	6a 0a                	push   0xa
c00233cd:	89 c3                	mov    ebx,eax
c00233cf:	56                   	push   esi
c00233d0:	0f b6 db             	movzx  ebx,bl
c00233d3:	55                   	push   ebp
c00233d4:	57                   	push   edi
c00233d5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00233d9:	e8 3e ff ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233de:	83 c4 28             	add    esp,0x28
c00233e1:	25 00 ff 00 00       	and    eax,0xff00
c00233e6:	09 d8                	or     eax,ebx
c00233e8:	5b                   	pop    ebx
c00233e9:	5e                   	pop    esi
c00233ea:	5f                   	pop    edi
c00233eb:	5d                   	pop    ebp
c00233ec:	c3                   	ret    
c00233ed:	90                   	nop

c00233ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00233ee:	6a 08                	push   0x8
c00233f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233f5:	50                   	push   eax
c00233f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233fb:	50                   	push   eax
c00233fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023401:	50                   	push   eax
c0023402:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023406:	e8 11 ff ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002340b:	83 c4 14             	add    esp,0x14
c002340e:	0f b6 c4             	movzx  eax,ah
c0023411:	c3                   	ret    

c0023412 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023412:	6a 08                	push   0x8
c0023414:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023419:	50                   	push   eax
c002341a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002341f:	50                   	push   eax
c0023420:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023425:	50                   	push   eax
c0023426:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002342a:	e8 ed fe ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002342f:	83 c4 14             	add    esp,0x14
c0023432:	c3                   	ret    
c0023433:	90                   	nop

c0023434 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023434:	6a 3c                	push   0x3c
c0023436:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002343b:	50                   	push   eax
c002343c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023441:	50                   	push   eax
c0023442:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023447:	50                   	push   eax
c0023448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002344c:	e8 cb fe ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023451:	83 c4 14             	add    esp,0x14
c0023454:	c3                   	ret    
c0023455:	90                   	nop

c0023456 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0023456:	6a 18                	push   0x18
c0023458:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002345d:	50                   	push   eax
c002345e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023463:	50                   	push   eax
c0023464:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023469:	50                   	push   eax
c002346a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002346e:	e8 a9 fe ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023473:	83 c4 14             	add    esp,0x14
c0023476:	0f b6 c4             	movzx  eax,ah
c0023479:	c3                   	ret    

c002347a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002347a:	55                   	push   ebp
c002347b:	57                   	push   edi
c002347c:	56                   	push   esi
c002347d:	53                   	push   ebx
c002347e:	50                   	push   eax
c002347f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0023483:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0023488:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002348d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0023492:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023499:	8d 43 12             	lea    eax,[ebx+0x12]
c002349c:	83 c3 10             	add    ebx,0x10
c002349f:	0f b6 c0             	movzx  eax,al
c00234a2:	0f b6 db             	movzx  ebx,bl
c00234a5:	50                   	push   eax
c00234a6:	51                   	push   ecx
c00234a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00234ab:	57                   	push   edi
c00234ac:	55                   	push   ebp
c00234ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00234b1:	e8 66 fe ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234b6:	53                   	push   ebx
c00234b7:	89 c6                	mov    esi,eax
c00234b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00234bd:	c1 e6 10             	shl    esi,0x10
c00234c0:	51                   	push   ecx
c00234c1:	57                   	push   edi
c00234c2:	55                   	push   ebp
c00234c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00234c7:	e8 50 fe ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234cc:	83 c4 2c             	add    esp,0x2c
c00234cf:	0f b7 c0             	movzx  eax,ax
c00234d2:	5b                   	pop    ebx
c00234d3:	09 f0                	or     eax,esi
c00234d5:	5e                   	pop    esi
c00234d6:	5f                   	pop    edi
c00234d7:	5d                   	pop    ebp
c00234d8:	c3                   	ret    
c00234d9:	90                   	nop

c00234da <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00234da:	53                   	push   ebx
c00234db:	ba f8 0c 00 00       	mov    edx,0xcf8
c00234e0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00234e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00234e9:	c1 e1 10             	shl    ecx,0x10
c00234ec:	25 fc 00 00 00       	and    eax,0xfc
c00234f1:	09 c1                	or     ecx,eax
c00234f3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234f8:	c1 e0 08             	shl    eax,0x8
c00234fb:	09 c1                	or     ecx,eax
c00234fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023502:	c1 e0 0b             	shl    eax,0xb
c0023505:	09 c1                	or     ecx,eax
c0023507:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002350d:	89 c8                	mov    eax,ecx
c002350f:	ef                   	out    dx,eax
c0023510:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023515:	ed                   	in     eax,dx
c0023516:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002351b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023520:	74 0a                	je     c002352c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023522:	0f b7 d8             	movzx  ebx,ax
c0023525:	89 d0                	mov    eax,edx
c0023527:	c1 e0 10             	shl    eax,0x10
c002352a:	eb 05                	jmp    c0023531 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002352c:	66 31 c0             	xor    ax,ax
c002352f:	89 d3                	mov    ebx,edx
c0023531:	09 c3                	or     ebx,eax
c0023533:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023538:	89 c8                	mov    eax,ecx
c002353a:	ef                   	out    dx,eax
c002353b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023540:	89 d8                	mov    eax,ebx
c0023542:	ef                   	out    dx,eax
c0023543:	5b                   	pop    ebx
c0023544:	c3                   	ret    
c0023545:	90                   	nop

c0023546 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c0023546:	31 c0                	xor    eax,eax
c0023548:	c3                   	ret    
c0023549:	90                   	nop

c002354a <PCI::checkBus(unsigned char)>:
c002354a:	56                   	push   esi
c002354b:	53                   	push   ebx
c002354c:	31 db                	xor    ebx,ebx
c002354e:	51                   	push   ecx
c002354f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023554:	52                   	push   edx
c0023555:	53                   	push   ebx
c0023556:	43                   	inc    ebx
c0023557:	56                   	push   esi
c0023558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002355c:	e8 41 03 00 00       	call   c00238a2 <PCI::checkDevice(unsigned char, unsigned char)>
c0023561:	83 c4 10             	add    esp,0x10
c0023564:	83 fb 20             	cmp    ebx,0x20
c0023567:	75 eb                	jne    c0023554 <PCI::checkBus(unsigned char)+0xa>
c0023569:	58                   	pop    eax
c002356a:	5b                   	pop    ebx
c002356b:	5e                   	pop    esi
c002356c:	c3                   	ret    
c002356d:	90                   	nop

c002356e <PCI::foundDevice(PCIDeviceInfo)>:
c002356e:	55                   	push   ebp
c002356f:	57                   	push   edi
c0023570:	56                   	push   esi
c0023571:	53                   	push   ebx
c0023572:	83 ec 1c             	sub    esp,0x1c
c0023575:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023579:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002357f:	0f 84 68 01 00 00    	je     c00236ed <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0023585:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023589:	66 81 f9 06 04       	cmp    cx,0x406
c002358e:	75 2c                	jne    c00235bc <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023590:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023595:	50                   	push   eax
c0023596:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002359b:	50                   	push   eax
c002359c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00235a1:	50                   	push   eax
c00235a2:	56                   	push   esi
c00235a3:	e8 ae fe ff ff       	call   c0023456 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00235a8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235ac:	0f b6 c0             	movzx  eax,al
c00235af:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00235b3:	83 c4 2c             	add    esp,0x2c
c00235b6:	5b                   	pop    ebx
c00235b7:	5e                   	pop    esi
c00235b8:	5f                   	pop    edi
c00235b9:	5d                   	pop    ebp
c00235ba:	eb 8e                	jmp    c002354a <PCI::checkBus(unsigned char)>
c00235bc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00235c0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00235c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00235ca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00235ce:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00235d2:	88 d3                	mov    bl,dl
c00235d4:	85 c0                	test   eax,eax
c00235d6:	74 33                	je     c002360b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00235d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00235db:	85 d2                	test   edx,edx
c00235dd:	74 28                	je     c0023607 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00235df:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00235e5:	31 ef                	xor    edi,ebp
c00235e7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00235ed:	75 18                	jne    c0023607 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00235ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00235f3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00235f9:	75 0c                	jne    c0023607 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00235fb:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023601:	0f 84 e6 00 00 00    	je     c00236ed <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0023607:	8b 00                	mov    eax,DWORD PTR [eax]
c0023609:	eb c9                	jmp    c00235d4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002360b:	66 81 f9 01 06       	cmp    cx,0x601
c0023610:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023614:	75 19                	jne    c002362f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023616:	83 ec 0c             	sub    esp,0xc
c0023619:	68 64 01 00 00       	push   0x164
c002361e:	e8 d1 c2 fe ff       	call   c000f8f4 <malloc>
c0023623:	89 c5                	mov    ebp,eax
c0023625:	89 04 24             	mov    DWORD PTR [esp],eax
c0023628:	e8 ab 0f 00 00       	call   c00245d8 <SATABus::SATABus()>
c002362d:	eb 1e                	jmp    c002364d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002362f:	66 81 f9 01 01       	cmp    cx,0x101
c0023634:	75 60                	jne    c0023696 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023636:	83 ec 0c             	sub    esp,0xc
c0023639:	68 70 02 00 00       	push   0x270
c002363e:	e8 b1 c2 fe ff       	call   c000f8f4 <malloc>
c0023643:	89 c5                	mov    ebp,eax
c0023645:	89 04 24             	mov    DWORD PTR [esp],eax
c0023648:	e8 19 03 00 00       	call   c0023966 <IDE::IDE()>
c002364d:	58                   	pop    eax
c002364e:	5a                   	pop    edx
c002364f:	55                   	push   ebp
c0023650:	56                   	push   esi
c0023651:	e8 6a 0c ff ff       	call   c00142c0 <Device::addChild(Device*)>
c0023656:	83 ec 1c             	sub    esp,0x1c
c0023659:	b9 09 00 00 00       	mov    ecx,0x9
c002365e:	fc                   	cld    
c002365f:	89 e7                	mov    edi,esp
c0023661:	89 de                	mov    esi,ebx
c0023663:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023665:	55                   	push   ebp
c0023666:	e8 73 0b ff ff       	call   c00141de <Device::preOpenPCI(PCIDeviceInfo)>
c002366b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002366e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023672:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002367a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023682:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002368a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002368d:	83 c4 4c             	add    esp,0x4c
c0023690:	5b                   	pop    ebx
c0023691:	5e                   	pop    esi
c0023692:	5f                   	pop    edi
c0023693:	5d                   	pop    ebp
c0023694:	ff e0                	jmp    eax
c0023696:	50                   	push   eax
c0023697:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c002369c:	50                   	push   eax
c002369d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00236a2:	50                   	push   eax
c00236a3:	68 84 d6 02 c0       	push   0xc002d684
c00236a8:	e8 f2 f7 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00236ad:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c00236b4:	e8 3b c2 fe ff       	call   c000f8f4 <malloc>
c00236b9:	5a                   	pop    edx
c00236ba:	89 c5                	mov    ebp,eax
c00236bc:	59                   	pop    ecx
c00236bd:	68 a0 d6 02 c0       	push   0xc002d6a0
c00236c2:	50                   	push   eax
c00236c3:	e8 ee 0e ff ff       	call   c00145b6 <DriverlessDevice::DriverlessDevice(char const*)>
c00236c8:	5f                   	pop    edi
c00236c9:	58                   	pop    eax
c00236ca:	55                   	push   ebp
c00236cb:	56                   	push   esi
c00236cc:	e8 ef 0b ff ff       	call   c00142c0 <Device::addChild(Device*)>
c00236d1:	b9 09 00 00 00       	mov    ecx,0x9
c00236d6:	fc                   	cld    
c00236d7:	89 df                	mov    edi,ebx
c00236d9:	89 de                	mov    esi,ebx
c00236db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00236dd:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00236e1:	83 c4 2c             	add    esp,0x2c
c00236e4:	5b                   	pop    ebx
c00236e5:	5e                   	pop    esi
c00236e6:	5f                   	pop    edi
c00236e7:	5d                   	pop    ebp
c00236e8:	e9 f1 0a ff ff       	jmp    c00141de <Device::preOpenPCI(PCIDeviceInfo)>
c00236ed:	83 c4 1c             	add    esp,0x1c
c00236f0:	5b                   	pop    ebx
c00236f1:	5e                   	pop    esi
c00236f2:	5f                   	pop    edi
c00236f3:	5d                   	pop    ebp
c00236f4:	c3                   	ret    
c00236f5:	90                   	nop

c00236f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00236f6:	55                   	push   ebp
c00236f7:	57                   	push   edi
c00236f8:	56                   	push   esi
c00236f9:	53                   	push   ebx
c00236fa:	83 ec 5c             	sub    esp,0x5c
c00236fd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023701:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023705:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023709:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002370e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023712:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0023716:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002371b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002371f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0023724:	6a 0c                	push   0xc
c0023726:	55                   	push   ebp
c0023727:	53                   	push   ebx
c0023728:	57                   	push   edi
c0023729:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023730:	e8 e7 fb ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023735:	55                   	push   ebp
c0023736:	53                   	push   ebx
c0023737:	57                   	push   edi
c0023738:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002373f:	e8 66 fc ff ff       	call   c00233aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023744:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0023749:	83 c4 24             	add    esp,0x24
c002374c:	55                   	push   ebp
c002374d:	53                   	push   ebx
c002374e:	57                   	push   edi
c002374f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023753:	e8 dc fc ff ff       	call   c0023434 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023758:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002375c:	6a 3c                	push   0x3c
c002375e:	55                   	push   ebp
c002375f:	53                   	push   ebx
c0023760:	57                   	push   edi
c0023761:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023768:	e8 af fb ff ff       	call   c002331c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002376d:	0f b6 c4             	movzx  eax,ah
c0023770:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023774:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023778:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002377c:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0023781:	83 c4 24             	add    esp,0x24
c0023784:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002378a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023791:	74 6c                	je     c00237ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023793:	31 f6                	xor    esi,esi
c0023795:	8b 15 a8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0a8
c002379b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00237a1:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00237a7:	7e 56                	jle    c00237ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00237a9:	8d 14 f2             	lea    edx,[edx+esi*8]
c00237ac:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00237b3:	39 cb                	cmp    ebx,ecx
c00237b5:	75 45                	jne    c00237fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00237b7:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00237be:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00237c2:	75 38                	jne    c00237fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00237c4:	83 ec 0c             	sub    esp,0xc
c00237c7:	68 ba d6 02 c0       	push   0xc002d6ba
c00237cc:	e8 ce f6 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00237d1:	8b 15 a8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0a8
c00237d7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00237dd:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00237e5:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00237e9:	52                   	push   edx
c00237ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00237ee:	53                   	push   ebx
c00237ef:	68 df d6 02 c0       	push   0xc002d6df
c00237f4:	e8 a6 f6 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00237f9:	83 c4 20             	add    esp,0x20
c00237fc:	46                   	inc    esi
c00237fd:	eb 96                	jmp    c0023795 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00237ff:	31 d2                	xor    edx,edx
c0023801:	83 ec 0c             	sub    esp,0xc
c0023804:	55                   	push   ebp
c0023805:	53                   	push   ebx
c0023806:	57                   	push   edi
c0023807:	52                   	push   edx
c0023808:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002380c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023813:	e8 62 fc ff ff       	call   c002347a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023818:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002381c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023820:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023824:	42                   	inc    edx
c0023825:	83 c4 20             	add    esp,0x20
c0023828:	83 fa 06             	cmp    edx,0x6
c002382b:	75 d4                	jne    c0023801 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002382d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023831:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023835:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023839:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002383d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023841:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023845:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002384a:	86 e0                	xchg   al,ah
c002384c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023851:	55                   	push   ebp
c0023852:	53                   	push   ebx
c0023853:	57                   	push   edi
c0023854:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023858:	e8 91 fb ff ff       	call   c00233ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002385d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023861:	55                   	push   ebp
c0023862:	53                   	push   ebx
c0023863:	57                   	push   edi
c0023864:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002386b:	e8 f4 fa ff ff       	call   c0023364 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023870:	83 ec 0c             	sub    esp,0xc
c0023873:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023878:	b9 09 00 00 00       	mov    ecx,0x9
c002387d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023881:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023885:	fc                   	cld    
c0023886:	89 e7                	mov    edi,esp
c0023888:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002388a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023891:	e8 d8 fc ff ff       	call   c002356e <PCI::foundDevice(PCIDeviceInfo)>
c0023896:	81 c4 8c 00 00 00    	add    esp,0x8c
c002389c:	5b                   	pop    ebx
c002389d:	5e                   	pop    esi
c002389e:	5f                   	pop    edi
c002389f:	5d                   	pop    ebp
c00238a0:	c3                   	ret    
c00238a1:	90                   	nop

c00238a2 <PCI::checkDevice(unsigned char, unsigned char)>:
c00238a2:	55                   	push   ebp
c00238a3:	57                   	push   edi
c00238a4:	56                   	push   esi
c00238a5:	53                   	push   ebx
c00238a6:	83 ec 0c             	sub    esp,0xc
c00238a9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00238ad:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00238b2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00238b7:	6a 00                	push   0x0
c00238b9:	56                   	push   esi
c00238ba:	57                   	push   edi
c00238bb:	55                   	push   ebp
c00238bc:	e8 a3 fa ff ff       	call   c0023364 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00238c1:	6a 00                	push   0x0
c00238c3:	56                   	push   esi
c00238c4:	57                   	push   edi
c00238c5:	55                   	push   ebp
c00238c6:	e8 2b fe ff ff       	call   c00236f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00238cb:	83 c4 20             	add    esp,0x20
c00238ce:	6a 00                	push   0x0
c00238d0:	56                   	push   esi
c00238d1:	57                   	push   edi
c00238d2:	55                   	push   ebp
c00238d3:	e8 ae fa ff ff       	call   c0023386 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00238d8:	83 c4 10             	add    esp,0x10
c00238db:	84 c0                	test   al,al
c00238dd:	79 27                	jns    c0023906 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00238df:	bb 01 00 00 00       	mov    ebx,0x1
c00238e4:	53                   	push   ebx
c00238e5:	56                   	push   esi
c00238e6:	57                   	push   edi
c00238e7:	55                   	push   ebp
c00238e8:	e8 77 fa ff ff       	call   c0023364 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00238ed:	83 c4 10             	add    esp,0x10
c00238f0:	66 40                	inc    ax
c00238f2:	74 0c                	je     c0023900 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00238f4:	53                   	push   ebx
c00238f5:	56                   	push   esi
c00238f6:	57                   	push   edi
c00238f7:	55                   	push   ebp
c00238f8:	e8 f9 fd ff ff       	call   c00236f6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00238fd:	83 c4 10             	add    esp,0x10
c0023900:	43                   	inc    ebx
c0023901:	83 fb 08             	cmp    ebx,0x8
c0023904:	75 de                	jne    c00238e4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023906:	83 c4 0c             	add    esp,0xc
c0023909:	5b                   	pop    ebx
c002390a:	5e                   	pop    esi
c002390b:	5f                   	pop    edi
c002390c:	5d                   	pop    ebp
c002390d:	c3                   	ret    

c002390e <PCI::detect()>:
c002390e:	56                   	push   esi
c002390f:	53                   	push   ebx
c0023910:	53                   	push   ebx
c0023911:	31 db                	xor    ebx,ebx
c0023913:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023917:	6a 00                	push   0x0
c0023919:	6a 00                	push   0x0
c002391b:	6a 00                	push   0x0
c002391d:	56                   	push   esi
c002391e:	e8 63 fa ff ff       	call   c0023386 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023923:	83 c4 10             	add    esp,0x10
c0023926:	a8 80                	test   al,0x80
c0023928:	75 21                	jne    c002394b <PCI::detect()+0x3d>
c002392a:	51                   	push   ecx
c002392b:	51                   	push   ecx
c002392c:	6a 00                	push   0x0
c002392e:	56                   	push   esi
c002392f:	e8 16 fc ff ff       	call   c002354a <PCI::checkBus(unsigned char)>
c0023934:	83 c4 10             	add    esp,0x10
c0023937:	eb 24                	jmp    c002395d <PCI::detect()+0x4f>
c0023939:	52                   	push   edx
c002393a:	52                   	push   edx
c002393b:	53                   	push   ebx
c002393c:	43                   	inc    ebx
c002393d:	56                   	push   esi
c002393e:	e8 07 fc ff ff       	call   c002354a <PCI::checkBus(unsigned char)>
c0023943:	83 c4 10             	add    esp,0x10
c0023946:	83 fb 08             	cmp    ebx,0x8
c0023949:	74 12                	je     c002395d <PCI::detect()+0x4f>
c002394b:	53                   	push   ebx
c002394c:	6a 00                	push   0x0
c002394e:	6a 00                	push   0x0
c0023950:	56                   	push   esi
c0023951:	e8 0e fa ff ff       	call   c0023364 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023956:	83 c4 10             	add    esp,0x10
c0023959:	66 40                	inc    ax
c002395b:	74 dc                	je     c0023939 <PCI::detect()+0x2b>
c002395d:	58                   	pop    eax
c002395e:	5b                   	pop    ebx
c002395f:	5e                   	pop    esi
c0023960:	c3                   	ret    
c0023961:	90                   	nop

c0023962 <IDE::close(int, int, void*)>:
c0023962:	83 c8 ff             	or     eax,0xffffffff
c0023965:	c3                   	ret    

c0023966 <IDE::IDE()>:
c0023966:	83 ec 0c             	sub    esp,0xc
c0023969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002396d:	83 ec 08             	sub    esp,0x8
c0023970:	68 28 d7 02 c0       	push   0xc002d728
c0023975:	50                   	push   eax
c0023976:	e8 df 0c ff ff       	call   c001465a <HardDiskController::HardDiskController(char const*)>
c002397b:	83 c4 10             	add    esp,0x10
c002397e:	ba 68 d9 02 c0       	mov    edx,0xc002d968
c0023983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023987:	89 10                	mov    DWORD PTR [eax],edx
c0023989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002398d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023994:	90                   	nop
c0023995:	83 c4 0c             	add    esp,0xc
c0023998:	c3                   	ret    
c0023999:	90                   	nop

c002399a <IDE::prepareInterrupt(unsigned char)>:
c002399a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002399f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00239a3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00239ab:	c3                   	ret    

c00239ac <selectDrive(unsigned char, unsigned char)>:
c00239ac:	c3                   	ret    
c00239ad:	90                   	nop

c00239ae <IDE::getBase(unsigned char)>:
c00239ae:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00239b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239b7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00239bf:	c3                   	ret    

c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00239c0:	55                   	push   ebp
c00239c1:	57                   	push   edi
c00239c2:	56                   	push   esi
c00239c3:	53                   	push   ebx
c00239c4:	83 ec 1c             	sub    esp,0x1c
c00239c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00239cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239cf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00239d2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00239d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239da:	80 f9 03             	cmp    cl,0x3
c00239dd:	77 51                	ja     c0023a30 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00239df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239e3:	0f b6 f2             	movzx  esi,dl
c00239e6:	0f b6 db             	movzx  ebx,bl
c00239e9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00239ec:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00239f0:	83 ca 80             	or     edx,0xffffff80
c00239f3:	0f b6 d2             	movzx  edx,dl
c00239f6:	52                   	push   edx
c00239f7:	6a 0c                	push   0xc
c00239f9:	56                   	push   esi
c00239fa:	57                   	push   edi
c00239fb:	e8 c0 ff ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a00:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023a05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023a09:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023a0d:	ee                   	out    dx,al
c0023a0e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023a13:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023a17:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023a1b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023a1f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023a27:	83 c4 2c             	add    esp,0x2c
c0023a2a:	5b                   	pop    ebx
c0023a2b:	5e                   	pop    esi
c0023a2c:	5f                   	pop    edi
c0023a2d:	5d                   	pop    ebp
c0023a2e:	eb 90                	jmp    c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a30:	80 fb 07             	cmp    bl,0x7
c0023a33:	77 12                	ja     c0023a47 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023a35:	0f b6 d2             	movzx  edx,dl
c0023a38:	0f b6 db             	movzx  ebx,bl
c0023a3b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023a43:	89 da                	mov    edx,ebx
c0023a45:	eb 2f                	jmp    c0023a76 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023a47:	80 fb 0d             	cmp    bl,0xd
c0023a4a:	77 13                	ja     c0023a5f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023a4c:	0f b6 d2             	movzx  edx,dl
c0023a4f:	0f b6 db             	movzx  ebx,bl
c0023a52:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023a59:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023a5d:	eb 17                	jmp    c0023a76 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023a5f:	80 fb 15             	cmp    bl,0x15
c0023a62:	77 13                	ja     c0023a77 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023a64:	0f b6 d2             	movzx  edx,dl
c0023a67:	0f b6 db             	movzx  ebx,bl
c0023a6a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023a72:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023a76:	ee                   	out    dx,al
c0023a77:	83 c4 1c             	add    esp,0x1c
c0023a7a:	5b                   	pop    ebx
c0023a7b:	5e                   	pop    esi
c0023a7c:	5f                   	pop    edi
c0023a7d:	5d                   	pop    ebp
c0023a7e:	c3                   	ret    
c0023a7f:	90                   	nop

c0023a80 <IDE::read(unsigned char, unsigned char)>:
c0023a80:	55                   	push   ebp
c0023a81:	57                   	push   edi
c0023a82:	56                   	push   esi
c0023a83:	53                   	push   ebx
c0023a84:	83 ec 1c             	sub    esp,0x1c
c0023a87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023a8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a8f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023a92:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023a96:	3c 03                	cmp    al,0x3
c0023a98:	77 43                	ja     c0023add <IDE::read(unsigned char, unsigned char)+0x5d>
c0023a9a:	0f b6 f2             	movzx  esi,dl
c0023a9d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023aa0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023aa4:	83 c8 80             	or     eax,0xffffff80
c0023aa7:	0f b6 c0             	movzx  eax,al
c0023aaa:	50                   	push   eax
c0023aab:	6a 0c                	push   0xc
c0023aad:	56                   	push   esi
c0023aae:	57                   	push   edi
c0023aaf:	e8 0c ff ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ab4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023ab9:	0f b6 c3             	movzx  eax,bl
c0023abc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023ac0:	ec                   	in     al,dx
c0023ac1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023ac5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023aca:	52                   	push   edx
c0023acb:	6a 0c                	push   0xc
c0023acd:	56                   	push   esi
c0023ace:	57                   	push   edi
c0023acf:	e8 ec fe ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ad4:	83 c4 20             	add    esp,0x20
c0023ad7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023adb:	eb 49                	jmp    c0023b26 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023add:	80 fb 07             	cmp    bl,0x7
c0023ae0:	77 12                	ja     c0023af4 <IDE::read(unsigned char, unsigned char)+0x74>
c0023ae2:	0f b6 d2             	movzx  edx,dl
c0023ae5:	0f b6 c3             	movzx  eax,bl
c0023ae8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023af0:	89 c2                	mov    edx,eax
c0023af2:	eb 31                	jmp    c0023b25 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023af4:	80 fb 0d             	cmp    bl,0xd
c0023af7:	77 13                	ja     c0023b0c <IDE::read(unsigned char, unsigned char)+0x8c>
c0023af9:	0f b6 d2             	movzx  edx,dl
c0023afc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023b03:	0f b6 d3             	movzx  edx,bl
c0023b06:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023b0a:	eb 19                	jmp    c0023b25 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023b0c:	31 c0                	xor    eax,eax
c0023b0e:	80 fb 15             	cmp    bl,0x15
c0023b11:	77 13                	ja     c0023b26 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023b13:	0f b6 d2             	movzx  edx,dl
c0023b16:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023b1e:	0f b6 d3             	movzx  edx,bl
c0023b21:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023b25:	ec                   	in     al,dx
c0023b26:	83 c4 1c             	add    esp,0x1c
c0023b29:	5b                   	pop    ebx
c0023b2a:	5e                   	pop    esi
c0023b2b:	5f                   	pop    edi
c0023b2c:	5d                   	pop    ebp
c0023b2d:	c3                   	ret    

c0023b2e <IDE::waitInterrupt(unsigned char)>:
c0023b2e:	55                   	push   ebp
c0023b2f:	57                   	push   edi
c0023b30:	56                   	push   esi
c0023b31:	53                   	push   ebx
c0023b32:	31 db                	xor    ebx,ebx
c0023b34:	83 ec 0c             	sub    esp,0xc
c0023b37:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023b3b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023b40:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023b48:	89 e8                	mov    eax,ebp
c0023b4a:	84 c0                	test   al,al
c0023b4c:	75 34                	jne    c0023b82 <IDE::waitInterrupt(unsigned char)+0x54>
c0023b4e:	52                   	push   edx
c0023b4f:	6a 0c                	push   0xc
c0023b51:	56                   	push   esi
c0023b52:	57                   	push   edi
c0023b53:	e8 28 ff ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0023b58:	83 c4 10             	add    esp,0x10
c0023b5b:	a8 01                	test   al,0x1
c0023b5d:	75 2b                	jne    c0023b8a <IDE::waitInterrupt(unsigned char)+0x5c>
c0023b5f:	f6 c3 04             	test   bl,0x4
c0023b62:	75 16                	jne    c0023b7a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023b64:	83 fb 32             	cmp    ebx,0x32
c0023b67:	7e 11                	jle    c0023b7a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023b69:	50                   	push   eax
c0023b6a:	50                   	push   eax
c0023b6b:	6a 00                	push   0x0
c0023b6d:	68 80 96 98 00       	push   0x989680
c0023b72:	e8 c6 ad ff ff       	call   c001e93d <nanoSleep(unsigned long long)>
c0023b77:	83 c4 10             	add    esp,0x10
c0023b7a:	83 fb 3c             	cmp    ebx,0x3c
c0023b7d:	74 0b                	je     c0023b8a <IDE::waitInterrupt(unsigned char)+0x5c>
c0023b7f:	43                   	inc    ebx
c0023b80:	eb be                	jmp    c0023b40 <IDE::waitInterrupt(unsigned char)+0x12>
c0023b82:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023b8a:	83 c4 0c             	add    esp,0xc
c0023b8d:	89 e8                	mov    eax,ebp
c0023b8f:	5b                   	pop    ebx
c0023b90:	5e                   	pop    esi
c0023b91:	5f                   	pop    edi
c0023b92:	5d                   	pop    ebp
c0023b93:	c3                   	ret    

c0023b94 <ideChannel0IRQHandler(regs*, void*)>:
c0023b94:	83 ec 10             	sub    esp,0x10
c0023b97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b9b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023ba2:	6a 07                	push   0x7
c0023ba4:	6a 00                	push   0x0
c0023ba6:	50                   	push   eax
c0023ba7:	e8 d4 fe ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0023bac:	83 c4 1c             	add    esp,0x1c
c0023baf:	c3                   	ret    

c0023bb0 <ideChannel1IRQHandler(regs*, void*)>:
c0023bb0:	83 ec 10             	sub    esp,0x10
c0023bb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023bb7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023bbe:	6a 07                	push   0x7
c0023bc0:	6a 01                	push   0x1
c0023bc2:	50                   	push   eax
c0023bc3:	e8 b8 fe ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0023bc8:	83 c4 1c             	add    esp,0x1c
c0023bcb:	c3                   	ret    

c0023bcc <IDE::enableIRQs(unsigned char, bool)>:
c0023bcc:	57                   	push   edi
c0023bcd:	56                   	push   esi
c0023bce:	be 04 00 00 00       	mov    esi,0x4
c0023bd3:	53                   	push   ebx
c0023bd4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023bd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023bdd:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023be2:	0f 94 c0             	sete   al
c0023be5:	d1 e0                	shl    eax,1
c0023be7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023bee:	0f b6 c0             	movzx  eax,al
c0023bf1:	50                   	push   eax
c0023bf2:	6a 0c                	push   0xc
c0023bf4:	57                   	push   edi
c0023bf5:	53                   	push   ebx
c0023bf6:	e8 c5 fd ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bfb:	83 c4 10             	add    esp,0x10
c0023bfe:	50                   	push   eax
c0023bff:	6a 0c                	push   0xc
c0023c01:	57                   	push   edi
c0023c02:	53                   	push   ebx
c0023c03:	e8 78 fe ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0023c08:	83 c4 10             	add    esp,0x10
c0023c0b:	4e                   	dec    esi
c0023c0c:	75 f0                	jne    c0023bfe <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023c0e:	5b                   	pop    ebx
c0023c0f:	5e                   	pop    esi
c0023c10:	5f                   	pop    edi
c0023c11:	c3                   	ret    

c0023c12 <IDE::open(int, int, void*)>:
c0023c12:	55                   	push   ebp
c0023c13:	57                   	push   edi
c0023c14:	56                   	push   esi
c0023c15:	53                   	push   ebx
c0023c16:	83 ec 1c             	sub    esp,0x1c
c0023c19:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023c1d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023c26:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023c2f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023c36:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023c3d:	0f 85 b0 02 00 00    	jne    c0023ef3 <IDE::open(int, int, void*)+0x2e1>
c0023c43:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023c49:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023c4d:	83 e0 7f             	and    eax,0x7f
c0023c50:	3c 05                	cmp    al,0x5
c0023c52:	74 04                	je     c0023c58 <IDE::open(int, int, void*)+0x46>
c0023c54:	3c 0f                	cmp    al,0xf
c0023c56:	75 32                	jne    c0023c8a <IDE::open(int, int, void*)+0x78>
c0023c58:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023c5e:	83 e0 fc             	and    eax,0xfffffffc
c0023c61:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023c68:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023c6e:	83 e0 fc             	and    eax,0xfffffffc
c0023c71:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023c78:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023c7e:	83 e0 fc             	and    eax,0xfffffffc
c0023c81:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c88:	eb 14                	jmp    c0023c9e <IDE::open(int, int, void*)+0x8c>
c0023c8a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023c94:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023c9e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023ca5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023cac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023cb0:	89 c6                	mov    esi,eax
c0023cb2:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023cb7:	c1 e6 10             	shl    esi,0x10
c0023cba:	89 e8                	mov    eax,ebp
c0023cbc:	89 fa                	mov    edx,edi
c0023cbe:	c1 e0 0b             	shl    eax,0xb
c0023cc1:	09 f0                	or     eax,esi
c0023cc3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023cca:	c1 e6 08             	shl    esi,0x8
c0023ccd:	09 c6                	or     esi,eax
c0023ccf:	89 f0                	mov    eax,esi
c0023cd1:	0d 08 00 00 80       	or     eax,0x80000008
c0023cd6:	ef                   	out    dx,eax
c0023cd7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023cdc:	89 ca                	mov    edx,ecx
c0023cde:	ed                   	in     eax,dx
c0023cdf:	c1 e8 10             	shr    eax,0x10
c0023ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0023ce7:	0f 84 f5 00 00 00    	je     c0023de2 <IDE::open(int, int, void*)+0x1d0>
c0023ced:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023cf3:	89 fa                	mov    edx,edi
c0023cf5:	89 f0                	mov    eax,esi
c0023cf7:	ef                   	out    dx,eax
c0023cf8:	b0 fe                	mov    al,0xfe
c0023cfa:	89 ca                	mov    edx,ecx
c0023cfc:	ee                   	out    dx,al
c0023cfd:	89 f0                	mov    eax,esi
c0023cff:	89 fa                	mov    edx,edi
c0023d01:	ef                   	out    dx,eax
c0023d02:	89 ca                	mov    edx,ecx
c0023d04:	ed                   	in     eax,dx
c0023d05:	3c fe                	cmp    al,0xfe
c0023d07:	0f 85 a9 00 00 00    	jne    c0023db6 <IDE::open(int, int, void*)+0x1a4>
c0023d0d:	8b 15 a8 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0a8
c0023d13:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023d1a:	74 33                	je     c0023d4f <IDE::open(int, int, void*)+0x13d>
c0023d1c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023d22:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023d26:	40                   	inc    eax
c0023d27:	83 ec 0c             	sub    esp,0xc
c0023d2a:	0f b6 c0             	movzx  eax,al
c0023d2d:	50                   	push   eax
c0023d2e:	55                   	push   ebp
c0023d2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d33:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023d39:	51                   	push   ecx
c0023d3a:	e8 59 46 ff ff       	call   c0018398 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023d3f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023d44:	83 c4 1c             	add    esp,0x1c
c0023d47:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023d4d:	eb 0a                	jmp    c0023d59 <IDE::open(int, int, void*)+0x147>
c0023d4f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023d59:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023d60:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023d67:	c1 e1 10             	shl    ecx,0x10
c0023d6a:	c1 e0 08             	shl    eax,0x8
c0023d6d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023d72:	09 c1                	or     ecx,eax
c0023d74:	89 fa                	mov    edx,edi
c0023d76:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023d7d:	c1 e0 0b             	shl    eax,0xb
c0023d80:	09 c1                	or     ecx,eax
c0023d82:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023d88:	89 c8                	mov    eax,ecx
c0023d8a:	ef                   	out    dx,eax
c0023d8b:	be fc 0c 00 00       	mov    esi,0xcfc
c0023d90:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023d96:	89 f2                	mov    edx,esi
c0023d98:	ee                   	out    dx,al
c0023d99:	89 c8                	mov    eax,ecx
c0023d9b:	89 fa                	mov    edx,edi
c0023d9d:	ef                   	out    dx,eax
c0023d9e:	89 f2                	mov    edx,esi
c0023da0:	ed                   	in     eax,dx
c0023da1:	0f b6 c0             	movzx  eax,al
c0023da4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023daa:	74 46                	je     c0023df2 <IDE::open(int, int, void*)+0x1e0>
c0023dac:	83 ec 0c             	sub    esp,0xc
c0023daf:	68 40 d7 02 c0       	push   0xc002d740
c0023db4:	eb 34                	jmp    c0023dea <IDE::open(int, int, void*)+0x1d8>
c0023db6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023dbf:	75 17                	jne    c0023dd8 <IDE::open(int, int, void*)+0x1c6>
c0023dc1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023dc6:	74 07                	je     c0023dcf <IDE::open(int, int, void*)+0x1bd>
c0023dc8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023dcd:	75 09                	jne    c0023dd8 <IDE::open(int, int, void*)+0x1c6>
c0023dcf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023dd6:	eb 1a                	jmp    c0023df2 <IDE::open(int, int, void*)+0x1e0>
c0023dd8:	83 ec 0c             	sub    esp,0xc
c0023ddb:	68 48 d7 02 c0       	push   0xc002d748
c0023de0:	eb 08                	jmp    c0023dea <IDE::open(int, int, void*)+0x1d8>
c0023de2:	83 ec 0c             	sub    esp,0xc
c0023de5:	68 79 d7 02 c0       	push   0xc002d779
c0023dea:	e8 98 6a ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0023def:	83 c4 10             	add    esp,0x10
c0023df2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023df9:	79 1a                	jns    c0023e15 <IDE::open(int, int, void*)+0x203>
c0023dfb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023e01:	83 e0 fc             	and    eax,0xfffffffc
c0023e04:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023e0b:	83 c0 08             	add    eax,0x8
c0023e0e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023e15:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023e1b:	89 c2                	mov    edx,eax
c0023e1d:	83 e2 0f             	and    edx,0xf
c0023e20:	66 83 fa 08          	cmp    dx,0x8
c0023e24:	75 0a                	jne    c0023e30 <IDE::open(int, int, void*)+0x21e>
c0023e26:	83 e8 02             	sub    eax,0x2
c0023e29:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023e30:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023e36:	89 c2                	mov    edx,eax
c0023e38:	83 e2 0f             	and    edx,0xf
c0023e3b:	66 83 fa 08          	cmp    dx,0x8
c0023e3f:	75 0a                	jne    c0023e4b <IDE::open(int, int, void*)+0x239>
c0023e41:	83 e8 02             	sub    eax,0x2
c0023e44:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023e4b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023e52:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023e59:	89 d0                	mov    eax,edx
c0023e5b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e5e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e62:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023e66:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023e69:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e6e:	0f b6 c9             	movzx  ecx,cl
c0023e71:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023e78:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023e7b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023e7f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023e83:	8d 50 02             	lea    edx,[eax+0x2]
c0023e86:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023e8b:	0f b6 d2             	movzx  edx,dl
c0023e8e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023e94:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e97:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e9b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023e9f:	8d 48 03             	lea    ecx,[eax+0x3]
c0023ea2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023ea7:	0f b6 c9             	movzx  ecx,cl
c0023eaa:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023eb0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023eb3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023eb7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023ebb:	8d 50 04             	lea    edx,[eax+0x4]
c0023ebe:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023ec4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023ec9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023ed0:	66 85 f6             	test   si,si
c0023ed3:	74 3e                	je     c0023f13 <IDE::open(int, int, void*)+0x301>
c0023ed5:	0f b6 d2             	movzx  edx,dl
c0023ed8:	83 c0 05             	add    eax,0x5
c0023edb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023ede:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023ee2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023ee6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023eec:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023ef1:	eb 20                	jmp    c0023f13 <IDE::open(int, int, void*)+0x301>
c0023ef3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023efd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023f07:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023f0e:	e9 02 ff ff ff       	jmp    c0023e15 <IDE::open(int, int, void*)+0x203>
c0023f13:	52                   	push   edx
c0023f14:	52                   	push   edx
c0023f15:	6a 00                	push   0x0
c0023f17:	53                   	push   ebx
c0023f18:	e8 7d fa ff ff       	call   c002399a <IDE::prepareInterrupt(unsigned char)>
c0023f1d:	59                   	pop    ecx
c0023f1e:	5e                   	pop    esi
c0023f1f:	6a 01                	push   0x1
c0023f21:	53                   	push   ebx
c0023f22:	e8 73 fa ff ff       	call   c002399a <IDE::prepareInterrupt(unsigned char)>
c0023f27:	83 c4 0c             	add    esp,0xc
c0023f2a:	6a 00                	push   0x0
c0023f2c:	6a 00                	push   0x0
c0023f2e:	53                   	push   ebx
c0023f2f:	e8 98 fc ff ff       	call   c0023bcc <IDE::enableIRQs(unsigned char, bool)>
c0023f34:	83 c4 0c             	add    esp,0xc
c0023f37:	6a 00                	push   0x0
c0023f39:	6a 01                	push   0x1
c0023f3b:	53                   	push   ebx
c0023f3c:	e8 8b fc ff ff       	call   c0023bcc <IDE::enableIRQs(unsigned char, bool)>
c0023f41:	83 c4 10             	add    esp,0x10
c0023f44:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023f4b:	74 40                	je     c0023f8d <IDE::open(int, int, void*)+0x37b>
c0023f4d:	83 ec 0c             	sub    esp,0xc
c0023f50:	68 a3 d7 02 c0       	push   0xc002d7a3
c0023f55:	e8 45 ef fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0023f5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f5d:	6a 01                	push   0x1
c0023f5f:	68 94 3b 02 c0       	push   0xc0023b94
c0023f64:	6a 0e                	push   0xe
c0023f66:	53                   	push   ebx
c0023f67:	e8 d8 02 ff ff       	call   c0014244 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f6c:	83 c4 14             	add    esp,0x14
c0023f6f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023f75:	53                   	push   ebx
c0023f76:	6a 01                	push   0x1
c0023f78:	68 b0 3b 02 c0       	push   0xc0023bb0
c0023f7d:	6a 0f                	push   0xf
c0023f7f:	53                   	push   ebx
c0023f80:	e8 bf 02 ff ff       	call   c0014244 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f85:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023f8b:	eb 4a                	jmp    c0023fd7 <IDE::open(int, int, void*)+0x3c5>
c0023f8d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023f97:	50                   	push   eax
c0023f98:	6a 0f                	push   0xf
c0023f9a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023fa0:	68 bf d7 02 c0       	push   0xc002d7bf
c0023fa5:	e8 f5 ee fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0023faa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023fad:	6a 00                	push   0x0
c0023faf:	68 94 3b 02 c0       	push   0xc0023b94
c0023fb4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023fba:	53                   	push   ebx
c0023fbb:	e8 84 02 ff ff       	call   c0014244 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023fc0:	83 c4 14             	add    esp,0x14
c0023fc3:	53                   	push   ebx
c0023fc4:	6a 00                	push   0x0
c0023fc6:	68 b0 3b 02 c0       	push   0xc0023bb0
c0023fcb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023fd1:	53                   	push   ebx
c0023fd2:	e8 6d 02 ff ff       	call   c0014244 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023fd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023fd9:	83 c4 20             	add    esp,0x20
c0023fdc:	83 ec 0c             	sub    esp,0xc
c0023fdf:	53                   	push   ebx
c0023fe0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023fe3:	83 c4 0c             	add    esp,0xc
c0023fe6:	6a 07                	push   0x7
c0023fe8:	6a 00                	push   0x0
c0023fea:	53                   	push   ebx
c0023feb:	e8 90 fa ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0023ff0:	83 c4 0c             	add    esp,0xc
c0023ff3:	6a 07                	push   0x7
c0023ff5:	6a 01                	push   0x1
c0023ff7:	53                   	push   ebx
c0023ff8:	e8 83 fa ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0023ffd:	83 c4 0c             	add    esp,0xc
c0024000:	6a 01                	push   0x1
c0024002:	6a 00                	push   0x0
c0024004:	53                   	push   ebx
c0024005:	e8 c2 fb ff ff       	call   c0023bcc <IDE::enableIRQs(unsigned char, bool)>
c002400a:	83 c4 0c             	add    esp,0xc
c002400d:	6a 01                	push   0x1
c002400f:	6a 01                	push   0x1
c0024011:	53                   	push   ebx
c0024012:	e8 b5 fb ff ff       	call   c0023bcc <IDE::enableIRQs(unsigned char, bool)>
c0024017:	83 c4 2c             	add    esp,0x2c
c002401a:	31 c0                	xor    eax,eax
c002401c:	5b                   	pop    ebx
c002401d:	5e                   	pop    esi
c002401e:	5f                   	pop    edi
c002401f:	5d                   	pop    ebp
c0024020:	c3                   	ret    
c0024021:	90                   	nop

c0024022 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0024022:	55                   	push   ebp
c0024023:	57                   	push   edi
c0024024:	56                   	push   esi
c0024025:	53                   	push   ebx
c0024026:	83 ec 1c             	sub    esp,0x1c
c0024029:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002402d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024031:	8d 50 f8             	lea    edx,[eax-0x8]
c0024034:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024038:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002403c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024040:	80 fa 03             	cmp    dl,0x3
c0024043:	77 5d                	ja     c00240a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0024045:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024049:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002404d:	0f b6 db             	movzx  ebx,bl
c0024050:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0024053:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0024057:	83 ca 80             	or     edx,0xffffff80
c002405a:	0f b6 d2             	movzx  edx,dl
c002405d:	52                   	push   edx
c002405e:	6a 0c                	push   0xc
c0024060:	53                   	push   ebx
c0024061:	56                   	push   esi
c0024062:	e8 59 f9 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024067:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002406c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024070:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024074:	0f b6 c0             	movzx  eax,al
c0024077:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002407b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002407d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0024082:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0024086:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002408a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002408e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0024096:	83 c4 2c             	add    esp,0x2c
c0024099:	5b                   	pop    ebx
c002409a:	5e                   	pop    esi
c002409b:	5f                   	pop    edi
c002409c:	5d                   	pop    ebp
c002409d:	e9 1e f9 ff ff       	jmp    c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240a2:	3c 07                	cmp    al,0x7
c00240a4:	77 10                	ja     c00240b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00240a6:	0f b6 db             	movzx  ebx,bl
c00240a9:	0f b6 d0             	movzx  edx,al
c00240ac:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00240b4:	eb 2d                	jmp    c00240e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00240b6:	3c 0d                	cmp    al,0xd
c00240b8:	77 13                	ja     c00240cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00240ba:	0f b6 db             	movzx  ebx,bl
c00240bd:	0f b6 c0             	movzx  eax,al
c00240c0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00240c7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00240cb:	eb 16                	jmp    c00240e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00240cd:	3c 15                	cmp    al,0x15
c00240cf:	77 14                	ja     c00240e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00240d1:	0f b6 db             	movzx  ebx,bl
c00240d4:	0f b6 c0             	movzx  eax,al
c00240d7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00240df:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00240e3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00240e5:	83 c4 1c             	add    esp,0x1c
c00240e8:	5b                   	pop    ebx
c00240e9:	5e                   	pop    esi
c00240ea:	5f                   	pop    edi
c00240eb:	5d                   	pop    ebp
c00240ec:	c3                   	ret    
c00240ed:	90                   	nop

c00240ee <IDE::detect()>:
c00240ee:	55                   	push   ebp
c00240ef:	57                   	push   edi
c00240f0:	56                   	push   esi
c00240f1:	53                   	push   ebx
c00240f2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00240f8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00240ff:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0024106:	0f 85 be 02 00 00    	jne    c00243ca <IDE::detect()+0x2dc>
c002410c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0024113:	31 f6                	xor    esi,esi
c0024115:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002411d:	31 ed                	xor    ebp,ebp
c002411f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024123:	c1 e0 06             	shl    eax,0x6
c0024126:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002412e:	89 e8                	mov    eax,ebp
c0024130:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024134:	c1 e0 04             	shl    eax,0x4
c0024137:	83 c8 a0             	or     eax,0xffffffa0
c002413a:	0f b6 c0             	movzx  eax,al
c002413d:	50                   	push   eax
c002413e:	6a 06                	push   0x6
c0024140:	56                   	push   esi
c0024141:	53                   	push   ebx
c0024142:	e8 79 f8 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024147:	83 c4 0c             	add    esp,0xc
c002414a:	6a 0c                	push   0xc
c002414c:	56                   	push   esi
c002414d:	53                   	push   ebx
c002414e:	e8 2d f9 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0024153:	83 c4 0c             	add    esp,0xc
c0024156:	6a 0c                	push   0xc
c0024158:	56                   	push   esi
c0024159:	53                   	push   ebx
c002415a:	e8 21 f9 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c002415f:	83 c4 0c             	add    esp,0xc
c0024162:	6a 0c                	push   0xc
c0024164:	56                   	push   esi
c0024165:	53                   	push   ebx
c0024166:	e8 15 f9 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c002416b:	83 c4 0c             	add    esp,0xc
c002416e:	6a 0c                	push   0xc
c0024170:	56                   	push   esi
c0024171:	53                   	push   ebx
c0024172:	e8 09 f9 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0024177:	68 ec 00 00 00       	push   0xec
c002417c:	6a 07                	push   0x7
c002417e:	56                   	push   esi
c002417f:	53                   	push   ebx
c0024180:	e8 3b f8 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024185:	83 c4 1c             	add    esp,0x1c
c0024188:	6a 0c                	push   0xc
c002418a:	56                   	push   esi
c002418b:	53                   	push   ebx
c002418c:	e8 ef f8 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0024191:	83 c4 0c             	add    esp,0xc
c0024194:	6a 0c                	push   0xc
c0024196:	56                   	push   esi
c0024197:	53                   	push   ebx
c0024198:	e8 e3 f8 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c002419d:	83 c4 0c             	add    esp,0xc
c00241a0:	6a 0c                	push   0xc
c00241a2:	56                   	push   esi
c00241a3:	53                   	push   ebx
c00241a4:	e8 d7 f8 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c00241a9:	83 c4 0c             	add    esp,0xc
c00241ac:	6a 0c                	push   0xc
c00241ae:	56                   	push   esi
c00241af:	53                   	push   ebx
c00241b0:	e8 cb f8 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c00241b5:	83 c4 0c             	add    esp,0xc
c00241b8:	6a 0c                	push   0xc
c00241ba:	56                   	push   esi
c00241bb:	53                   	push   ebx
c00241bc:	e8 bf f8 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c00241c1:	83 c4 10             	add    esp,0x10
c00241c4:	84 c0                	test   al,al
c00241c6:	0f 84 8b 01 00 00    	je     c0024357 <IDE::detect()+0x269>
c00241cc:	31 ff                	xor    edi,edi
c00241ce:	50                   	push   eax
c00241cf:	6a 0c                	push   0xc
c00241d1:	56                   	push   esi
c00241d2:	53                   	push   ebx
c00241d3:	e8 a8 f8 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c00241d8:	83 c4 10             	add    esp,0x10
c00241db:	a8 01                	test   al,0x1
c00241dd:	0f 85 8e 01 00 00    	jne    c0024371 <IDE::detect()+0x283>
c00241e3:	84 c0                	test   al,al
c00241e5:	78 04                	js     c00241eb <IDE::detect()+0xfd>
c00241e7:	a8 08                	test   al,0x8
c00241e9:	75 27                	jne    c0024212 <IDE::detect()+0x124>
c00241eb:	47                   	inc    edi
c00241ec:	81 ff 17 01 00 00    	cmp    edi,0x117
c00241f2:	7e da                	jle    c00241ce <IDE::detect()+0xe0>
c00241f4:	50                   	push   eax
c00241f5:	50                   	push   eax
c00241f6:	6a 00                	push   0x0
c00241f8:	68 40 4b 4c 00       	push   0x4c4b40
c00241fd:	e8 3b a7 ff ff       	call   c001e93d <nanoSleep(unsigned long long)>
c0024202:	83 c4 10             	add    esp,0x10
c0024205:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002420b:	75 c1                	jne    c00241ce <IDE::detect()+0xe0>
c002420d:	e9 5f 01 00 00       	jmp    c0024371 <IDE::detect()+0x283>
c0024212:	31 c9                	xor    ecx,ecx
c0024214:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024218:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002421c:	83 ec 0c             	sub    esp,0xc
c002421f:	68 80 00 00 00       	push   0x80
c0024224:	57                   	push   edi
c0024225:	6a 00                	push   0x0
c0024227:	56                   	push   esi
c0024228:	53                   	push   ebx
c0024229:	e8 f4 fd ff ff       	call   c0024022 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002422e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024233:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024237:	89 d1                	mov    ecx,edx
c0024239:	c1 e0 06             	shl    eax,0x6
c002423c:	01 d8                	add    eax,ebx
c002423e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024245:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002424c:	89 f2                	mov    edx,esi
c002424e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024254:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024258:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002425e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024262:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024269:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024271:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024278:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024280:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024286:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002428d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024293:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024297:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002429b:	83 c4 20             	add    esp,0x20
c002429e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00242a1:	83 c0 02             	add    eax,0x2
c00242a4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00242aa:	83 c7 02             	add    edi,0x2
c00242ad:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00242b0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00242b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00242ba:	75 e2                	jne    c002429e <IDE::detect()+0x1b0>
c00242bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00242c0:	c1 e0 06             	shl    eax,0x6
c00242c3:	01 d8                	add    eax,ebx
c00242c5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00242cb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00242d2:	66 c1 ea 09          	shr    dx,0x9
c00242d6:	83 e2 01             	and    edx,0x1
c00242d9:	84 c9                	test   cl,cl
c00242db:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00242e1:	75 2f                	jne    c0024312 <IDE::detect()+0x224>
c00242e3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00242e9:	85 c0                	test   eax,eax
c00242eb:	74 66                	je     c0024353 <IDE::detect()+0x265>
c00242ed:	50                   	push   eax
c00242ee:	55                   	push   ebp
c00242ef:	56                   	push   esi
c00242f0:	68 db d7 02 c0       	push   0xc002d7db
c00242f5:	e8 a5 eb fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00242fa:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024301:	e8 ee b5 fe ff       	call   c000f8f4 <malloc>
c0024306:	89 c7                	mov    edi,eax
c0024308:	89 04 24             	mov    DWORD PTR [esp],eax
c002430b:	e8 78 06 00 00       	call   c0024988 <ATA::ATA()>
c0024310:	eb 28                	jmp    c002433a <IDE::detect()+0x24c>
c0024312:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024318:	55                   	push   ebp
c0024319:	56                   	push   esi
c002431a:	68 0a d8 02 c0       	push   0xc002d80a
c002431f:	e8 7b eb fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0024324:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002432b:	e8 c4 b5 fe ff       	call   c000f8f4 <malloc>
c0024330:	89 c7                	mov    edi,eax
c0024332:	89 04 24             	mov    DWORD PTR [esp],eax
c0024335:	e8 8e 0c 00 00       	call   c0024fc8 <ATAPI::ATAPI()>
c002433a:	5a                   	pop    edx
c002433b:	59                   	pop    ecx
c002433c:	57                   	push   edi
c002433d:	53                   	push   ebx
c002433e:	e8 7d ff fe ff       	call   c00142c0 <Device::addChild(Device*)>
c0024343:	8b 07                	mov    eax,DWORD PTR [edi]
c0024345:	53                   	push   ebx
c0024346:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002434a:	6a 00                	push   0x0
c002434c:	57                   	push   edi
c002434d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024350:	83 c4 20             	add    esp,0x20
c0024353:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024357:	4d                   	dec    ebp
c0024358:	74 0a                	je     c0024364 <IDE::detect()+0x276>
c002435a:	bd 01 00 00 00       	mov    ebp,0x1
c002435f:	e9 bb fd ff ff       	jmp    c002411f <IDE::detect()+0x31>
c0024364:	4e                   	dec    esi
c0024365:	74 63                	je     c00243ca <IDE::detect()+0x2dc>
c0024367:	be 01 00 00 00       	mov    esi,0x1
c002436c:	e9 ac fd ff ff       	jmp    c002411d <IDE::detect()+0x2f>
c0024371:	50                   	push   eax
c0024372:	6a 04                	push   0x4
c0024374:	56                   	push   esi
c0024375:	53                   	push   ebx
c0024376:	e8 05 f7 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c002437b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002437f:	83 c4 0c             	add    esp,0xc
c0024382:	6a 05                	push   0x5
c0024384:	56                   	push   esi
c0024385:	53                   	push   ebx
c0024386:	e8 f5 f6 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c002438b:	83 c4 10             	add    esp,0x10
c002438e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024392:	80 fa 14             	cmp    dl,0x14
c0024395:	75 04                	jne    c002439b <IDE::detect()+0x2ad>
c0024397:	3c eb                	cmp    al,0xeb
c0024399:	eb 07                	jmp    c00243a2 <IDE::detect()+0x2b4>
c002439b:	3c 96                	cmp    al,0x96
c002439d:	75 b8                	jne    c0024357 <IDE::detect()+0x269>
c002439f:	80 fa 69             	cmp    dl,0x69
c00243a2:	75 b3                	jne    c0024357 <IDE::detect()+0x269>
c00243a4:	68 a1 00 00 00       	push   0xa1
c00243a9:	6a 07                	push   0x7
c00243ab:	56                   	push   esi
c00243ac:	53                   	push   ebx
c00243ad:	e8 0e f6 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b2:	5f                   	pop    edi
c00243b3:	58                   	pop    eax
c00243b4:	6a 00                	push   0x0
c00243b6:	68 40 42 0f 00       	push   0xf4240
c00243bb:	e8 7d a5 ff ff       	call   c001e93d <nanoSleep(unsigned long long)>
c00243c0:	83 c4 10             	add    esp,0x10
c00243c3:	b1 01                	mov    cl,0x1
c00243c5:	e9 4a fe ff ff       	jmp    c0024214 <IDE::detect()+0x126>
c00243ca:	81 c4 1c 02 00 00    	add    esp,0x21c
c00243d0:	5b                   	pop    ebx
c00243d1:	5e                   	pop    esi
c00243d2:	5f                   	pop    edi
c00243d3:	5d                   	pop    ebp
c00243d4:	c3                   	ret    
c00243d5:	90                   	nop

c00243d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00243d6:	55                   	push   ebp
c00243d7:	57                   	push   edi
c00243d8:	56                   	push   esi
c00243d9:	53                   	push   ebx
c00243da:	83 ec 1c             	sub    esp,0x1c
c00243dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00243e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00243e5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00243e9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00243ed:	88 c3                	mov    bl,al
c00243ef:	84 c0                	test   al,al
c00243f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243f5:	0f 84 67 01 00 00    	je     c0024562 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00243fb:	83 ec 0c             	sub    esp,0xc
c00243fe:	68 3b d8 02 c0       	push   0xc002d83b
c0024403:	e8 97 ea fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0024408:	83 c4 10             	add    esp,0x10
c002440b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002440f:	3c 01                	cmp    al,0x1
c0024411:	75 17                	jne    c002442a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024413:	83 ec 0c             	sub    esp,0xc
c0024416:	b3 13                	mov    bl,0x13
c0024418:	68 47 d8 02 c0       	push   0xc002d847
c002441d:	e8 7d ea fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0024422:	83 c4 10             	add    esp,0x10
c0024425:	e9 25 01 00 00       	jmp    c002454f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002442a:	3c 02                	cmp    al,0x2
c002442c:	0f 85 ef 00 00 00    	jne    c0024521 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024432:	d1 e6                	shl    esi,1
c0024434:	09 ee                	or     esi,ebp
c0024436:	52                   	push   edx
c0024437:	89 f0                	mov    eax,esi
c0024439:	6a 01                	push   0x1
c002443b:	0f b6 f0             	movzx  esi,al
c002443e:	c1 e6 06             	shl    esi,0x6
c0024441:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024449:	50                   	push   eax
c002444a:	57                   	push   edi
c002444b:	e8 30 f6 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0024450:	83 c4 10             	add    esp,0x10
c0024453:	89 c6                	mov    esi,eax
c0024455:	a8 01                	test   al,0x1
c0024457:	74 12                	je     c002446b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024459:	83 ec 0c             	sub    esp,0xc
c002445c:	b3 07                	mov    bl,0x7
c002445e:	68 5c d8 02 c0       	push   0xc002d85c
c0024463:	e8 37 ea fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0024468:	83 c4 10             	add    esp,0x10
c002446b:	f7 c6 02 00 00 00    	test   esi,0x2
c0024471:	74 12                	je     c0024485 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024473:	83 ec 0c             	sub    esp,0xc
c0024476:	b3 03                	mov    bl,0x3
c0024478:	68 7a d8 02 c0       	push   0xc002d87a
c002447d:	e8 1d ea fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0024482:	83 c4 10             	add    esp,0x10
c0024485:	f7 c6 04 00 00 00    	test   esi,0x4
c002448b:	74 12                	je     c002449f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002448d:	83 ec 0c             	sub    esp,0xc
c0024490:	b3 14                	mov    bl,0x14
c0024492:	68 9a d8 02 c0       	push   0xc002d89a
c0024497:	e8 03 ea fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c002449c:	83 c4 10             	add    esp,0x10
c002449f:	f7 c6 08 00 00 00    	test   esi,0x8
c00244a5:	74 12                	je     c00244b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00244a7:	83 ec 0c             	sub    esp,0xc
c00244aa:	b3 03                	mov    bl,0x3
c00244ac:	68 7a d8 02 c0       	push   0xc002d87a
c00244b1:	e8 e9 e9 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00244b6:	83 c4 10             	add    esp,0x10
c00244b9:	f7 c6 10 00 00 00    	test   esi,0x10
c00244bf:	74 12                	je     c00244d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00244c1:	83 ec 0c             	sub    esp,0xc
c00244c4:	b3 15                	mov    bl,0x15
c00244c6:	68 b2 d8 02 c0       	push   0xc002d8b2
c00244cb:	e8 cf e9 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00244d0:	83 c4 10             	add    esp,0x10
c00244d3:	f7 c6 20 00 00 00    	test   esi,0x20
c00244d9:	74 12                	je     c00244ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00244db:	83 ec 0c             	sub    esp,0xc
c00244de:	b3 03                	mov    bl,0x3
c00244e0:	68 7a d8 02 c0       	push   0xc002d87a
c00244e5:	e8 b5 e9 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00244ea:	83 c4 10             	add    esp,0x10
c00244ed:	f7 c6 40 00 00 00    	test   esi,0x40
c00244f3:	74 12                	je     c0024507 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00244f5:	83 ec 0c             	sub    esp,0xc
c00244f8:	b3 16                	mov    bl,0x16
c00244fa:	68 cc d8 02 c0       	push   0xc002d8cc
c00244ff:	e8 9b e9 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0024504:	83 c4 10             	add    esp,0x10
c0024507:	89 f0                	mov    eax,esi
c0024509:	84 c0                	test   al,al
c002450b:	79 42                	jns    c002454f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002450d:	83 ec 0c             	sub    esp,0xc
c0024510:	b3 0d                	mov    bl,0xd
c0024512:	68 ed d8 02 c0       	push   0xc002d8ed
c0024517:	e8 83 e9 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c002451c:	83 c4 10             	add    esp,0x10
c002451f:	eb 2e                	jmp    c002454f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024521:	3c 03                	cmp    al,0x3
c0024523:	75 14                	jne    c0024539 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024525:	83 ec 0c             	sub    esp,0xc
c0024528:	b3 17                	mov    bl,0x17
c002452a:	68 01 d9 02 c0       	push   0xc002d901
c002452f:	e8 6b e9 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0024534:	83 c4 10             	add    esp,0x10
c0024537:	eb 16                	jmp    c002454f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024539:	3c 04                	cmp    al,0x4
c002453b:	75 12                	jne    c002454f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002453d:	83 ec 0c             	sub    esp,0xc
c0024540:	b3 08                	mov    bl,0x8
c0024542:	68 17 d9 02 c0       	push   0xc002d917
c0024547:	e8 53 e9 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c002454c:	83 c4 10             	add    esp,0x10
c002454f:	50                   	push   eax
c0024550:	50                   	push   eax
c0024551:	0f b6 c3             	movzx  eax,bl
c0024554:	50                   	push   eax
c0024555:	68 2f d9 02 c0       	push   0xc002d92f
c002455a:	e8 40 e9 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c002455f:	83 c4 10             	add    esp,0x10
c0024562:	83 c4 1c             	add    esp,0x1c
c0024565:	88 d8                	mov    al,bl
c0024567:	5b                   	pop    ebx
c0024568:	5e                   	pop    esi
c0024569:	5f                   	pop    edi
c002456a:	5d                   	pop    ebp
c002456b:	c3                   	ret    

c002456c <IDE::polling(unsigned char, unsigned int)>:
c002456c:	57                   	push   edi
c002456d:	56                   	push   esi
c002456e:	53                   	push   ebx
c002456f:	bb 04 00 00 00       	mov    ebx,0x4
c0024574:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024578:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002457d:	52                   	push   edx
c002457e:	6a 0c                	push   0xc
c0024580:	56                   	push   esi
c0024581:	57                   	push   edi
c0024582:	e8 f9 f4 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0024587:	83 c4 10             	add    esp,0x10
c002458a:	4b                   	dec    ebx
c002458b:	75 f0                	jne    c002457d <IDE::polling(unsigned char, unsigned int)+0x11>
c002458d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024592:	50                   	push   eax
c0024593:	6a 0c                	push   0xc
c0024595:	56                   	push   esi
c0024596:	57                   	push   edi
c0024597:	e8 e4 f4 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c002459c:	83 c4 10             	add    esp,0x10
c002459f:	a8 01                	test   al,0x1
c00245a1:	74 12                	je     c00245b5 <IDE::polling(unsigned char, unsigned int)+0x49>
c00245a3:	83 ec 0c             	sub    esp,0xc
c00245a6:	68 49 d9 02 c0       	push   0xc002d949
c00245ab:	e8 ef e8 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00245b0:	83 c4 10             	add    esp,0x10
c00245b3:	eb 17                	jmp    c00245cc <IDE::polling(unsigned char, unsigned int)+0x60>
c00245b5:	a8 20                	test   al,0x20
c00245b7:	75 0f                	jne    c00245c8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00245b9:	4b                   	dec    ebx
c00245ba:	74 10                	je     c00245cc <IDE::polling(unsigned char, unsigned int)+0x60>
c00245bc:	84 c0                	test   al,al
c00245be:	78 d2                	js     c0024592 <IDE::polling(unsigned char, unsigned int)+0x26>
c00245c0:	a8 08                	test   al,0x8
c00245c2:	74 ce                	je     c0024592 <IDE::polling(unsigned char, unsigned int)+0x26>
c00245c4:	31 c0                	xor    eax,eax
c00245c6:	eb 06                	jmp    c00245ce <IDE::polling(unsigned char, unsigned int)+0x62>
c00245c8:	b0 01                	mov    al,0x1
c00245ca:	eb 02                	jmp    c00245ce <IDE::polling(unsigned char, unsigned int)+0x62>
c00245cc:	b0 02                	mov    al,0x2
c00245ce:	5b                   	pop    ebx
c00245cf:	5e                   	pop    esi
c00245d0:	5f                   	pop    edi
c00245d1:	c3                   	ret    

c00245d2 <SATABus::close(int, int, void*)>:
c00245d2:	31 c0                	xor    eax,eax
c00245d4:	c3                   	ret    
c00245d5:	90                   	nop

c00245d6 <SATABus::detect()>:
c00245d6:	c3                   	ret    
c00245d7:	90                   	nop

c00245d8 <SATABus::SATABus()>:
c00245d8:	83 ec 0c             	sub    esp,0xc
c00245db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245df:	83 ec 08             	sub    esp,0x8
c00245e2:	68 8c d9 02 c0       	push   0xc002d98c
c00245e7:	50                   	push   eax
c00245e8:	e8 6d 00 ff ff       	call   c001465a <HardDiskController::HardDiskController(char const*)>
c00245ed:	83 c4 10             	add    esp,0x10
c00245f0:	ba 48 da 02 c0       	mov    edx,0xc002da48
c00245f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f9:	89 10                	mov    DWORD PTR [eax],edx
c00245fb:	83 ec 0c             	sub    esp,0xc
c00245fe:	6a 50                	push   0x50
c0024600:	e8 40 ba fe ff       	call   c0010045 <Phys::allocateContiguousPages(int)>
c0024605:	83 c4 10             	add    esp,0x10
c0024608:	89 c2                	mov    edx,eax
c002460a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002460e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024614:	83 ec 0c             	sub    esp,0xc
c0024617:	6a 50                	push   0x50
c0024619:	e8 7b d4 fe ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c002461e:	83 c4 10             	add    esp,0x10
c0024621:	89 c2                	mov    edx,eax
c0024623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024627:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002462d:	a1 30 f2 02 c0       	mov    eax,ds:0xc002f230
c0024632:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024636:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002463c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024640:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024646:	83 ec 0c             	sub    esp,0xc
c0024649:	6a 03                	push   0x3
c002464b:	6a 50                	push   0x50
c002464d:	51                   	push   ecx
c002464e:	52                   	push   edx
c002464f:	50                   	push   eax
c0024650:	e8 71 df fe ff       	call   c00125c6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024655:	83 c4 20             	add    esp,0x20
c0024658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002465c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024666:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002466c:	83 ec 04             	sub    esp,0x4
c002466f:	52                   	push   edx
c0024670:	50                   	push   eax
c0024671:	68 b0 d9 02 c0       	push   0xc002d9b0
c0024676:	e8 24 e8 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c002467b:	83 c4 10             	add    esp,0x10
c002467e:	90                   	nop
c002467f:	83 c4 0c             	add    esp,0xc
c0024682:	c3                   	ret    
c0024683:	90                   	nop

c0024684 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024684:	83 ec 0c             	sub    esp,0xc
c0024687:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002468b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002468e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024691:	09 c2                	or     edx,eax
c0024693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024697:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002469d:	8b 08                	mov    ecx,DWORD PTR [eax]
c002469f:	31 c0                	xor    eax,eax
c00246a1:	c1 e9 08             	shr    ecx,0x8
c00246a4:	83 e1 0f             	and    ecx,0xf
c00246a7:	39 c8                	cmp    eax,ecx
c00246a9:	74 0a                	je     c00246b5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00246ab:	f6 c2 01             	test   dl,0x1
c00246ae:	74 18                	je     c00246c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00246b0:	d1 ea                	shr    edx,1
c00246b2:	40                   	inc    eax
c00246b3:	eb f2                	jmp    c00246a7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00246b5:	83 ec 0c             	sub    esp,0xc
c00246b8:	68 d4 d9 02 c0       	push   0xc002d9d4
c00246bd:	e8 c5 61 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00246c2:	83 c4 10             	add    esp,0x10
c00246c5:	83 c8 ff             	or     eax,0xffffffff
c00246c8:	83 c4 0c             	add    esp,0xc
c00246cb:	c3                   	ret    

c00246cc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00246cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00246d0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00246d3:	89 c2                	mov    edx,eax
c00246d5:	c1 ea 08             	shr    edx,0x8
c00246d8:	83 e2 0f             	and    edx,0xf
c00246db:	fe ca                	dec    dl
c00246dd:	75 31                	jne    c0024710 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00246df:	83 e0 0f             	and    eax,0xf
c00246e2:	3c 03                	cmp    al,0x3
c00246e4:	75 2a                	jne    c0024710 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00246e6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00246e9:	b8 02 00 00 00       	mov    eax,0x2
c00246ee:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00246f4:	74 1c                	je     c0024712 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00246f6:	b8 04 00 00 00       	mov    eax,0x4
c00246fb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024701:	74 0f                	je     c0024712 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024703:	31 c0                	xor    eax,eax
c0024705:	83 fa 03             	cmp    edx,0x3
c0024708:	0f 94 c0             	sete   al
c002470b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002470f:	c3                   	ret    
c0024710:	31 c0                	xor    eax,eax
c0024712:	c3                   	ret    
c0024713:	90                   	nop

c0024714 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024718:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002471b:	0f ba e2 0f          	bt     edx,0xf
c002471f:	72 f7                	jb     c0024718 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024721:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024724:	83 ca 10             	or     edx,0x10
c0024727:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002472a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002472d:	83 ca 01             	or     edx,0x1
c0024730:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024733:	c3                   	ret    

c0024734 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024734:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024738:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002473b:	83 e2 fe             	and    edx,0xfffffffe
c002473e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024741:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024744:	83 e2 ef             	and    edx,0xffffffef
c0024747:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002474a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002474d:	0f ba e2 0e          	bt     edx,0xe
c0024751:	72 f7                	jb     c002474a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024753:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024756:	0f ba e2 0f          	bt     edx,0xf
c002475a:	72 ee                	jb     c002474a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002475c:	c3                   	ret    
c002475d:	90                   	nop

c002475e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002475e:	55                   	push   ebp
c002475f:	57                   	push   edi
c0024760:	56                   	push   esi
c0024761:	53                   	push   ebx
c0024762:	83 ec 1c             	sub    esp,0x1c
c0024765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024769:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002476d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024771:	53                   	push   ebx
c0024772:	89 fd                	mov    ebp,edi
c0024774:	56                   	push   esi
c0024775:	c1 e5 0a             	shl    ebp,0xa
c0024778:	e8 b7 ff ff ff       	call   c0024734 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002477d:	83 ec 0c             	sub    esp,0xc
c0024780:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024786:	01 e8                	add    eax,ebp
c0024788:	89 03                	mov    DWORD PTR [ebx],eax
c002478a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002478c:	68 00 04 00 00       	push   0x400
c0024791:	6a 00                	push   0x0
c0024793:	50                   	push   eax
c0024794:	e8 d3 bf fd ff       	call   c000076c <memset>
c0024799:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002479f:	89 fa                	mov    edx,edi
c00247a1:	01 e8                	add    eax,ebp
c00247a3:	c1 e7 0d             	shl    edi,0xd
c00247a6:	89 03                	mov    DWORD PTR [ebx],eax
c00247a8:	c1 e2 08             	shl    edx,0x8
c00247ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00247b2:	81 c2 00 80 00 00    	add    edx,0x8000
c00247b8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00247bc:	89 d0                	mov    eax,edx
c00247be:	83 c4 1c             	add    esp,0x1c
c00247c1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00247c7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00247ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00247cd:	68 00 01 00 00       	push   0x100
c00247d2:	6a 00                	push   0x0
c00247d4:	50                   	push   eax
c00247d5:	e8 92 bf fd ff       	call   c000076c <memset>
c00247da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00247de:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00247e4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00247ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00247ee:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00247f1:	83 c4 10             	add    esp,0x10
c00247f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00247fb:	31 ff                	xor    edi,edi
c00247fd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024803:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002480d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024813:	83 c5 20             	add    ebp,0x20
c0024816:	01 f8                	add    eax,edi
c0024818:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002481b:	52                   	push   edx
c002481c:	68 00 01 00 00       	push   0x100
c0024821:	6a 00                	push   0x0
c0024823:	50                   	push   eax
c0024824:	e8 43 bf fd ff       	call   c000076c <memset>
c0024829:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002482d:	83 c4 10             	add    esp,0x10
c0024830:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024836:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002483d:	01 f8                	add    eax,edi
c002483f:	81 c7 00 01 00 00    	add    edi,0x100
c0024845:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024848:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002484e:	75 b3                	jne    c0024803 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024850:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024854:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024858:	83 c4 1c             	add    esp,0x1c
c002485b:	5b                   	pop    ebx
c002485c:	5e                   	pop    esi
c002485d:	5f                   	pop    edi
c002485e:	5d                   	pop    ebp
c002485f:	e9 b0 fe ff ff       	jmp    c0024714 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024864 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024864:	55                   	push   ebp
c0024865:	57                   	push   edi
c0024866:	56                   	push   esi
c0024867:	53                   	push   ebx
c0024868:	31 db                	xor    ebx,ebx
c002486a:	83 ec 0c             	sub    esp,0xc
c002486d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024871:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024875:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024878:	f7 c7 01 00 00 00    	test   edi,0x1
c002487e:	0f 84 aa 00 00 00    	je     c002492e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024884:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024888:	89 d8                	mov    eax,ebx
c002488a:	c1 e0 07             	shl    eax,0x7
c002488d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024894:	55                   	push   ebp
c0024895:	56                   	push   esi
c0024896:	e8 31 fe ff ff       	call   c00246cc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002489b:	5a                   	pop    edx
c002489c:	83 f8 01             	cmp    eax,0x1
c002489f:	59                   	pop    ecx
c00248a0:	75 30                	jne    c00248d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00248a2:	50                   	push   eax
c00248a3:	50                   	push   eax
c00248a4:	53                   	push   ebx
c00248a5:	68 f9 d9 02 c0       	push   0xc002d9f9
c00248aa:	e8 f0 e5 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00248af:	83 c4 0c             	add    esp,0xc
c00248b2:	53                   	push   ebx
c00248b3:	55                   	push   ebp
c00248b4:	56                   	push   esi
c00248b5:	e8 a4 fe ff ff       	call   c002475e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00248ba:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00248c1:	e8 2e b0 fe ff       	call   c000f8f4 <malloc>
c00248c6:	89 c5                	mov    ebp,eax
c00248c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00248cb:	e8 5c 0d 00 00       	call   c002562c <SATA::SATA()>
c00248d0:	eb 33                	jmp    c0024905 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00248d2:	83 f8 04             	cmp    eax,0x4
c00248d5:	75 47                	jne    c002491e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00248d7:	50                   	push   eax
c00248d8:	50                   	push   eax
c00248d9:	53                   	push   ebx
c00248da:	68 10 da 02 c0       	push   0xc002da10
c00248df:	e8 bb e5 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00248e4:	83 c4 0c             	add    esp,0xc
c00248e7:	53                   	push   ebx
c00248e8:	55                   	push   ebp
c00248e9:	56                   	push   esi
c00248ea:	e8 6f fe ff ff       	call   c002475e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00248ef:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00248f6:	e8 f9 af fe ff       	call   c000f8f4 <malloc>
c00248fb:	89 c5                	mov    ebp,eax
c00248fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0024900:	e8 d3 10 00 00       	call   c00259d8 <SATAPI::SATAPI()>
c0024905:	5a                   	pop    edx
c0024906:	59                   	pop    ecx
c0024907:	55                   	push   ebp
c0024908:	56                   	push   esi
c0024909:	e8 b2 f9 fe ff       	call   c00142c0 <Device::addChild(Device*)>
c002490e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024911:	56                   	push   esi
c0024912:	6a 00                	push   0x0
c0024914:	53                   	push   ebx
c0024915:	55                   	push   ebp
c0024916:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024919:	83 c4 20             	add    esp,0x20
c002491c:	eb 10                	jmp    c002492e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002491e:	50                   	push   eax
c002491f:	50                   	push   eax
c0024920:	53                   	push   ebx
c0024921:	68 29 da 02 c0       	push   0xc002da29
c0024926:	e8 74 e5 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c002492b:	83 c4 10             	add    esp,0x10
c002492e:	d1 ef                	shr    edi,1
c0024930:	43                   	inc    ebx
c0024931:	83 fb 20             	cmp    ebx,0x20
c0024934:	0f 85 3e ff ff ff    	jne    c0024878 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002493a:	83 c4 0c             	add    esp,0xc
c002493d:	5b                   	pop    ebx
c002493e:	5e                   	pop    esi
c002493f:	5f                   	pop    edi
c0024940:	5d                   	pop    ebp
c0024941:	c3                   	ret    

c0024942 <SATABus::open(int, int, void*)>:
c0024942:	83 ec 14             	sub    esp,0x14
c0024945:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024949:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002494f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024955:	52                   	push   edx
c0024956:	50                   	push   eax
c0024957:	e8 08 ff ff ff       	call   c0024864 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002495c:	31 c0                	xor    eax,eax
c002495e:	83 c4 1c             	add    esp,0x1c
c0024961:	c3                   	ret    

c0024962 <ATA::close(int, int, void*)>:
c0024962:	83 ec 0c             	sub    esp,0xc
c0024965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024969:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002496f:	85 c0                	test   eax,eax
c0024971:	74 0c                	je     c002497f <ATA::close(int, int, void*)+0x1d>
c0024973:	83 ec 0c             	sub    esp,0xc
c0024976:	8b 10                	mov    edx,DWORD PTR [eax]
c0024978:	50                   	push   eax
c0024979:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002497c:	83 c4 10             	add    esp,0x10
c002497f:	31 c0                	xor    eax,eax
c0024981:	83 c4 0c             	add    esp,0xc
c0024984:	c3                   	ret    
c0024985:	90                   	nop

c0024986 <ATA::powerSaving(PowerSavingLevel)>:
c0024986:	c3                   	ret    
c0024987:	90                   	nop

c0024988 <ATA::ATA()>:
c0024988:	83 ec 0c             	sub    esp,0xc
c002498b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002498f:	83 ec 04             	sub    esp,0x4
c0024992:	68 00 02 00 00       	push   0x200
c0024997:	68 11 db 02 c0       	push   0xc002db11
c002499c:	50                   	push   eax
c002499d:	e8 50 fd fe ff       	call   c00146f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00249a2:	83 c4 10             	add    esp,0x10
c00249a5:	ba 94 da 02 c0       	mov    edx,0xc002da94
c00249aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249ae:	89 10                	mov    DWORD PTR [eax],edx
c00249b0:	90                   	nop
c00249b1:	83 c4 0c             	add    esp,0xc
c00249b4:	c3                   	ret    
c00249b5:	90                   	nop

c00249b6 <ATA::flush(bool)>:
c00249b6:	53                   	push   ebx
c00249b7:	83 ec 08             	sub    esp,0x8
c00249ba:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00249bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00249c3:	19 c0                	sbb    eax,eax
c00249c5:	83 e0 fd             	and    eax,0xfffffffd
c00249c8:	05 ea 00 00 00       	add    eax,0xea
c00249cd:	50                   	push   eax
c00249ce:	6a 07                	push   0x7
c00249d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249d7:	50                   	push   eax
c00249d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249de:	e8 dd ef ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249e3:	83 c4 0c             	add    esp,0xc
c00249e6:	6a 00                	push   0x0
c00249e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249ef:	50                   	push   eax
c00249f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249f6:	e8 71 fb ff ff       	call   c002456c <IDE::polling(unsigned char, unsigned int)>
c00249fb:	83 c4 18             	add    esp,0x18
c00249fe:	5b                   	pop    ebx
c00249ff:	c3                   	ret    

c0024a00 <ATA::readyForCommand()>:
c0024a00:	56                   	push   esi
c0024a01:	53                   	push   ebx
c0024a02:	31 db                	xor    ebx,ebx
c0024a04:	50                   	push   eax
c0024a05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024a09:	50                   	push   eax
c0024a0a:	6a 0c                	push   0xc
c0024a0c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024a13:	50                   	push   eax
c0024a14:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024a1a:	e8 61 f0 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0024a1f:	83 c4 10             	add    esp,0x10
c0024a22:	a8 88                	test   al,0x88
c0024a24:	74 23                	je     c0024a49 <ATA::readyForCommand()+0x49>
c0024a26:	43                   	inc    ebx
c0024a27:	83 fb 63             	cmp    ebx,0x63
c0024a2a:	7e dd                	jle    c0024a09 <ATA::readyForCommand()+0x9>
c0024a2c:	51                   	push   ecx
c0024a2d:	51                   	push   ecx
c0024a2e:	6a 00                	push   0x0
c0024a30:	68 40 42 0f 00       	push   0xf4240
c0024a35:	e8 03 9f ff ff       	call   c001e93d <nanoSleep(unsigned long long)>
c0024a3a:	83 c4 10             	add    esp,0x10
c0024a3d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024a43:	75 c4                	jne    c0024a09 <ATA::readyForCommand()+0x9>
c0024a45:	31 c0                	xor    eax,eax
c0024a47:	eb 02                	jmp    c0024a4b <ATA::readyForCommand()+0x4b>
c0024a49:	b0 01                	mov    al,0x1
c0024a4b:	5a                   	pop    edx
c0024a4c:	5b                   	pop    ebx
c0024a4d:	5e                   	pop    esi
c0024a4e:	c3                   	ret    
c0024a4f:	90                   	nop

c0024a50 <ATA::access(unsigned long long, int, void*, bool)>:
c0024a50:	55                   	push   ebp
c0024a51:	57                   	push   edi
c0024a52:	56                   	push   esi
c0024a53:	53                   	push   ebx
c0024a54:	83 ec 2c             	sub    esp,0x2c
c0024a57:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a5b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a5f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024a63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024a67:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024a6b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024a6f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024a73:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024a79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a7d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024a83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024a87:	c1 e0 06             	shl    eax,0x6
c0024a8a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024a92:	74 5d                	je     c0024af1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024a94:	89 fa                	mov    edx,edi
c0024a96:	89 f0                	mov    eax,esi
c0024a98:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024a9c:	c1 ea 1c             	shr    edx,0x1c
c0024a9f:	89 d1                	mov    ecx,edx
c0024aa1:	09 c1                	or     ecx,eax
c0024aa3:	74 25                	je     c0024aca <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024aa5:	31 ed                	xor    ebp,ebp
c0024aa7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024aae:	89 fa                	mov    edx,edi
c0024ab0:	89 f0                	mov    eax,esi
c0024ab2:	0f ad d0             	shrd   eax,edx,cl
c0024ab5:	d3 ea                	shr    edx,cl
c0024ab7:	f6 c1 20             	test   cl,0x20
c0024aba:	74 02                	je     c0024abe <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024abc:	89 d0                	mov    eax,edx
c0024abe:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024ac2:	45                   	inc    ebp
c0024ac3:	83 fd 06             	cmp    ebp,0x6
c0024ac6:	75 df                	jne    c0024aa7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024ac8:	eb 76                	jmp    c0024b40 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024aca:	89 f0                	mov    eax,esi
c0024acc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024ad1:	89 fa                	mov    edx,edi
c0024ad3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024ada:	0f ac d0 10          	shrd   eax,edx,0x10
c0024ade:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024ae3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024ae7:	c1 ee 18             	shr    esi,0x18
c0024aea:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024aef:	eb 56                	jmp    c0024b47 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024af1:	6a 00                	push   0x0
c0024af3:	6a 3f                	push   0x3f
c0024af5:	57                   	push   edi
c0024af6:	56                   	push   esi
c0024af7:	e8 98 29 00 00       	call   c0027494 <__umoddi3>
c0024afc:	83 c4 10             	add    esp,0x10
c0024aff:	40                   	inc    eax
c0024b00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024b04:	6a 00                	push   0x0
c0024b06:	68 f0 03 00 00       	push   0x3f0
c0024b0b:	57                   	push   edi
c0024b0c:	56                   	push   esi
c0024b0d:	e8 82 28 00 00       	call   c0027394 <__udivdi3>
c0024b12:	83 c4 10             	add    esp,0x10
c0024b15:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024b1a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024b21:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024b26:	6a 00                	push   0x0
c0024b28:	6a 3f                	push   0x3f
c0024b2a:	57                   	push   edi
c0024b2b:	56                   	push   esi
c0024b2c:	e8 63 28 00 00       	call   c0027394 <__udivdi3>
c0024b31:	83 c4 10             	add    esp,0x10
c0024b34:	89 c6                	mov    esi,eax
c0024b36:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024b3b:	83 e6 0f             	and    esi,0xf
c0024b3e:	eb 07                	jmp    c0024b47 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024b40:	31 f6                	xor    esi,esi
c0024b42:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024b47:	bf 01 00 00 00       	mov    edi,0x1
c0024b4c:	50                   	push   eax
c0024b4d:	6a 00                	push   0x0
c0024b4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b56:	50                   	push   eax
c0024b57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024b5b:	e8 6c f0 ff ff       	call   c0023bcc <IDE::enableIRQs(unsigned char, bool)>
c0024b60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b63:	e8 98 fe ff ff       	call   c0024a00 <ATA::readyForCommand()>
c0024b68:	83 c4 10             	add    esp,0x10
c0024b6b:	84 c0                	test   al,al
c0024b6d:	0f 84 5a 02 00 00    	je     c0024dcd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024b73:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b79:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024b7f:	c1 e0 04             	shl    eax,0x4
c0024b82:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024b89:	09 c6                	or     esi,eax
c0024b8b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024b90:	75 05                	jne    c0024b97 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024b92:	83 ce a0             	or     esi,0xffffffa0
c0024b95:	eb 03                	jmp    c0024b9a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024b97:	83 ce e0             	or     esi,0xffffffe0
c0024b9a:	89 f0                	mov    eax,esi
c0024b9c:	0f b6 f0             	movzx  esi,al
c0024b9f:	56                   	push   esi
c0024ba0:	6a 06                	push   0x6
c0024ba2:	51                   	push   ecx
c0024ba3:	52                   	push   edx
c0024ba4:	e8 17 ee ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ba9:	83 c4 10             	add    esp,0x10
c0024bac:	6a 00                	push   0x0
c0024bae:	6a 01                	push   0x1
c0024bb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bb7:	50                   	push   eax
c0024bb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bbe:	e8 fd ed ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bc3:	83 c4 10             	add    esp,0x10
c0024bc6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024bcb:	75 6e                	jne    c0024c3b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024bcd:	6a 00                	push   0x0
c0024bcf:	6a 08                	push   0x8
c0024bd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bd8:	50                   	push   eax
c0024bd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bdf:	e8 dc ed ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024be4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024be9:	50                   	push   eax
c0024bea:	6a 09                	push   0x9
c0024bec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bf3:	50                   	push   eax
c0024bf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bfa:	e8 c1 ed ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bff:	83 c4 20             	add    esp,0x20
c0024c02:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024c07:	50                   	push   eax
c0024c08:	6a 0a                	push   0xa
c0024c0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c11:	50                   	push   eax
c0024c12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c18:	e8 a3 ed ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c1d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024c22:	50                   	push   eax
c0024c23:	6a 0b                	push   0xb
c0024c25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c2c:	50                   	push   eax
c0024c2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c33:	e8 88 ed ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c38:	83 c4 20             	add    esp,0x20
c0024c3b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024c40:	50                   	push   eax
c0024c41:	6a 02                	push   0x2
c0024c43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c4a:	50                   	push   eax
c0024c4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c51:	e8 6a ed ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c56:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024c5b:	50                   	push   eax
c0024c5c:	6a 03                	push   0x3
c0024c5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c65:	50                   	push   eax
c0024c66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c6c:	e8 4f ed ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c71:	83 c4 20             	add    esp,0x20
c0024c74:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024c79:	50                   	push   eax
c0024c7a:	6a 04                	push   0x4
c0024c7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c83:	50                   	push   eax
c0024c84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c8a:	e8 31 ed ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024c94:	50                   	push   eax
c0024c95:	6a 05                	push   0x5
c0024c97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c9e:	50                   	push   eax
c0024c9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ca5:	e8 16 ed ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024caa:	83 c4 20             	add    esp,0x20
c0024cad:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024cb2:	0f 94 c0             	sete   al
c0024cb5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024cba:	74 09                	je     c0024cc5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024cbc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024cc3:	eb 07                	jmp    c0024ccc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024cc5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024ccc:	0f b6 c0             	movzx  eax,al
c0024ccf:	50                   	push   eax
c0024cd0:	6a 07                	push   0x7
c0024cd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cd9:	50                   	push   eax
c0024cda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ce0:	e8 db ec ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ce5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024ce9:	83 c4 10             	add    esp,0x10
c0024cec:	85 f6                	test   esi,esi
c0024cee:	0f 84 ba 00 00 00    	je     c0024dae <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024cf4:	50                   	push   eax
c0024cf5:	6a 01                	push   0x1
c0024cf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cfe:	50                   	push   eax
c0024cff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d05:	e8 62 f8 ff ff       	call   c002456c <IDE::polling(unsigned char, unsigned int)>
c0024d0a:	83 c4 10             	add    esp,0x10
c0024d0d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024d13:	84 c0                	test   al,al
c0024d15:	74 2c                	je     c0024d43 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024d17:	0f b6 f8             	movzx  edi,al
c0024d1a:	0f b6 d2             	movzx  edx,dl
c0024d1d:	57                   	push   edi
c0024d1e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024d25:	50                   	push   eax
c0024d26:	52                   	push   edx
c0024d27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d2d:	e8 a4 f6 ff ff       	call   c00243d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024d32:	c7 04 24 6c da 02 c0 	mov    DWORD PTR [esp],0xc002da6c
c0024d39:	e8 61 e1 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0024d3e:	e9 87 00 00 00       	jmp    c0024dca <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024d43:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024d48:	74 33                	je     c0024d7d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024d4a:	31 ed                	xor    ebp,ebp
c0024d4c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024d50:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024d54:	50                   	push   eax
c0024d55:	50                   	push   eax
c0024d56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d5d:	50                   	push   eax
c0024d5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d64:	e8 45 ec ff ff       	call   c00239ae <IDE::getBase(unsigned char)>
c0024d69:	89 c2                	mov    edx,eax
c0024d6b:	89 f8                	mov    eax,edi
c0024d6d:	66 ef                	out    dx,ax
c0024d6f:	45                   	inc    ebp
c0024d70:	83 c4 10             	add    esp,0x10
c0024d73:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024d79:	75 d1                	jne    c0024d4c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024d7b:	eb 23                	jmp    c0024da0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024d7d:	0f b6 d2             	movzx  edx,dl
c0024d80:	51                   	push   ecx
c0024d81:	51                   	push   ecx
c0024d82:	52                   	push   edx
c0024d83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d89:	e8 20 ec ff ff       	call   c00239ae <IDE::getBase(unsigned char)>
c0024d8e:	b9 00 01 00 00       	mov    ecx,0x100
c0024d93:	89 c2                	mov    edx,eax
c0024d95:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024d99:	fc                   	cld    
c0024d9a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024d9d:	83 c4 10             	add    esp,0x10
c0024da0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024da8:	4e                   	dec    esi
c0024da9:	e9 3e ff ff ff       	jmp    c0024cec <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024dae:	31 ff                	xor    edi,edi
c0024db0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024db5:	74 16                	je     c0024dcd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024db7:	50                   	push   eax
c0024db8:	50                   	push   eax
c0024db9:	31 c0                	xor    eax,eax
c0024dbb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024dc0:	0f 94 c0             	sete   al
c0024dc3:	50                   	push   eax
c0024dc4:	53                   	push   ebx
c0024dc5:	e8 ec fb ff ff       	call   c00249b6 <ATA::flush(bool)>
c0024dca:	83 c4 10             	add    esp,0x10
c0024dcd:	83 c4 2c             	add    esp,0x2c
c0024dd0:	89 f8                	mov    eax,edi
c0024dd2:	5b                   	pop    ebx
c0024dd3:	5e                   	pop    esi
c0024dd4:	5f                   	pop    edi
c0024dd5:	5d                   	pop    ebp
c0024dd6:	c3                   	ret    
c0024dd7:	90                   	nop

c0024dd8 <ATA::read(unsigned long long, int, void*)>:
c0024dd8:	57                   	push   edi
c0024dd9:	b8 04 00 00 00       	mov    eax,0x4
c0024dde:	56                   	push   esi
c0024ddf:	53                   	push   ebx
c0024de0:	83 ec 10             	sub    esp,0x10
c0024de3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024de7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024deb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024dee:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024df2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024df6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024dfc:	77 3b                	ja     c0024e39 <ATA::read(unsigned long long, int, void*)+0x61>
c0024dfe:	b8 06 00 00 00       	mov    eax,0x6
c0024e03:	85 d2                	test   edx,edx
c0024e05:	74 32                	je     c0024e39 <ATA::read(unsigned long long, int, void*)+0x61>
c0024e07:	50                   	push   eax
c0024e08:	50                   	push   eax
c0024e09:	6a 00                	push   0x0
c0024e0b:	52                   	push   edx
c0024e0c:	53                   	push   ebx
c0024e0d:	57                   	push   edi
c0024e0e:	56                   	push   esi
c0024e0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e13:	e8 38 fc ff ff       	call   c0024a50 <ATA::access(unsigned long long, int, void*, bool)>
c0024e18:	83 c4 20             	add    esp,0x20
c0024e1b:	85 c0                	test   eax,eax
c0024e1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e21:	75 11                	jne    c0024e34 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024e23:	01 1d 08 34 03 c0    	add    DWORD PTR ds:0xc0033408,ebx
c0024e29:	e8 76 bb fe ff       	call   c00109a4 <VgaText::updateDiskUsage()>
c0024e2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e32:	eb 05                	jmp    c0024e39 <ATA::read(unsigned long long, int, void*)+0x61>
c0024e34:	b8 01 00 00 00       	mov    eax,0x1
c0024e39:	83 c4 10             	add    esp,0x10
c0024e3c:	5b                   	pop    ebx
c0024e3d:	5e                   	pop    esi
c0024e3e:	5f                   	pop    edi
c0024e3f:	c3                   	ret    

c0024e40 <ATA::write(unsigned long long, int, void*)>:
c0024e40:	57                   	push   edi
c0024e41:	b8 04 00 00 00       	mov    eax,0x4
c0024e46:	56                   	push   esi
c0024e47:	53                   	push   ebx
c0024e48:	83 ec 10             	sub    esp,0x10
c0024e4b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e4f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024e53:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024e56:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024e5a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024e5e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024e64:	77 3b                	ja     c0024ea1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024e66:	b8 06 00 00 00       	mov    eax,0x6
c0024e6b:	85 d2                	test   edx,edx
c0024e6d:	74 32                	je     c0024ea1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024e6f:	50                   	push   eax
c0024e70:	50                   	push   eax
c0024e71:	6a 01                	push   0x1
c0024e73:	52                   	push   edx
c0024e74:	53                   	push   ebx
c0024e75:	57                   	push   edi
c0024e76:	56                   	push   esi
c0024e77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e7b:	e8 d0 fb ff ff       	call   c0024a50 <ATA::access(unsigned long long, int, void*, bool)>
c0024e80:	83 c4 20             	add    esp,0x20
c0024e83:	85 c0                	test   eax,eax
c0024e85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e89:	75 11                	jne    c0024e9c <ATA::write(unsigned long long, int, void*)+0x5c>
c0024e8b:	01 1d 04 34 03 c0    	add    DWORD PTR ds:0xc0033404,ebx
c0024e91:	e8 0e bb fe ff       	call   c00109a4 <VgaText::updateDiskUsage()>
c0024e96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e9a:	eb 05                	jmp    c0024ea1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024e9c:	b8 01 00 00 00       	mov    eax,0x1
c0024ea1:	83 c4 10             	add    esp,0x10
c0024ea4:	5b                   	pop    ebx
c0024ea5:	5e                   	pop    esi
c0024ea6:	5f                   	pop    edi
c0024ea7:	c3                   	ret    

c0024ea8 <ATA::detectCHS()>:
c0024ea8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024eac:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024eb2:	c1 e0 06             	shl    eax,0x6
c0024eb5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024ebb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024ec5:	c7 44 24 04 77 da 02 c0 	mov    DWORD PTR [esp+0x4],0xc002da77
c0024ecd:	e9 b5 59 ff ff       	jmp    c001a887 <Krnl::panic(char const*)>

c0024ed2 <ATA::open(int, int, void*)>:
c0024ed2:	53                   	push   ebx
c0024ed3:	83 ec 08             	sub    esp,0x8
c0024ed6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024eda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ede:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ee2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ee8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024eee:	c1 e0 06             	shl    eax,0x6
c0024ef1:	01 d0                	add    eax,edx
c0024ef3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024efa:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024f00:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024f07:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024f11:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024f17:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024f1e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024f25:	75 0c                	jne    c0024f33 <ATA::open(int, int, void*)+0x61>
c0024f27:	83 ec 0c             	sub    esp,0xc
c0024f2a:	53                   	push   ebx
c0024f2b:	e8 78 ff ff ff       	call   c0024ea8 <ATA::detectCHS()>
c0024f30:	83 c4 10             	add    esp,0x10
c0024f33:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024f39:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024f3f:	c1 e0 06             	shl    eax,0x6
c0024f42:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024f49:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024f53:	d1 e8                	shr    eax,1
c0024f55:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024f5b:	6a 04                	push   0x4
c0024f5d:	6a 0c                	push   0xc
c0024f5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f66:	50                   	push   eax
c0024f67:	52                   	push   edx
c0024f68:	e8 53 ea ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f6d:	90                   	nop
c0024f6e:	90                   	nop
c0024f6f:	6a 00                	push   0x0
c0024f71:	6a 0c                	push   0xc
c0024f73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f7a:	50                   	push   eax
c0024f7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f81:	e8 3a ea ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f86:	83 c4 14             	add    esp,0x14
c0024f89:	53                   	push   ebx
c0024f8a:	e8 cb f7 fe ff       	call   c001475a <PhysicalDisk::startCache()>
c0024f8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f92:	e8 a3 1a ff ff       	call   c0016a3a <createPartitionsForDisk(PhysicalDisk*)>
c0024f97:	31 c0                	xor    eax,eax
c0024f99:	83 c4 18             	add    esp,0x18
c0024f9c:	5b                   	pop    ebx
c0024f9d:	c3                   	ret    

c0024f9e <ATAPI::write(unsigned long long, int, void*)>:
c0024f9e:	b8 03 00 00 00       	mov    eax,0x3
c0024fa3:	c3                   	ret    

c0024fa4 <ATAPI::close(int, int, void*)>:
c0024fa4:	83 ec 0c             	sub    esp,0xc
c0024fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fb1:	85 c0                	test   eax,eax
c0024fb3:	74 0c                	je     c0024fc1 <ATAPI::close(int, int, void*)+0x1d>
c0024fb5:	83 ec 0c             	sub    esp,0xc
c0024fb8:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fba:	50                   	push   eax
c0024fbb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fbe:	83 c4 10             	add    esp,0x10
c0024fc1:	31 c0                	xor    eax,eax
c0024fc3:	83 c4 0c             	add    esp,0xc
c0024fc6:	c3                   	ret    
c0024fc7:	90                   	nop

c0024fc8 <ATAPI::ATAPI()>:
c0024fc8:	83 ec 0c             	sub    esp,0xc
c0024fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fcf:	83 ec 04             	sub    esp,0x4
c0024fd2:	68 00 08 00 00       	push   0x800
c0024fd7:	68 b1 db 02 c0       	push   0xc002dbb1
c0024fdc:	50                   	push   eax
c0024fdd:	e8 10 f7 fe ff       	call   c00146f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fe2:	83 c4 10             	add    esp,0x10
c0024fe5:	ba cc da 02 c0       	mov    edx,0xc002dacc
c0024fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fee:	89 10                	mov    DWORD PTR [eax],edx
c0024ff0:	90                   	nop
c0024ff1:	83 c4 0c             	add    esp,0xc
c0024ff4:	c3                   	ret    
c0024ff5:	90                   	nop

c0024ff6 <ATAPI::readyForCommand()>:
c0024ff6:	56                   	push   esi
c0024ff7:	53                   	push   ebx
c0024ff8:	31 db                	xor    ebx,ebx
c0024ffa:	50                   	push   eax
c0024ffb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024fff:	50                   	push   eax
c0025000:	6a 0c                	push   0xc
c0025002:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0025009:	50                   	push   eax
c002500a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0025010:	e8 6b ea ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c0025015:	83 c4 10             	add    esp,0x10
c0025018:	a8 88                	test   al,0x88
c002501a:	74 23                	je     c002503f <ATAPI::readyForCommand()+0x49>
c002501c:	43                   	inc    ebx
c002501d:	83 fb 63             	cmp    ebx,0x63
c0025020:	7e dd                	jle    c0024fff <ATAPI::readyForCommand()+0x9>
c0025022:	51                   	push   ecx
c0025023:	51                   	push   ecx
c0025024:	6a 00                	push   0x0
c0025026:	68 40 42 0f 00       	push   0xf4240
c002502b:	e8 0d 99 ff ff       	call   c001e93d <nanoSleep(unsigned long long)>
c0025030:	83 c4 10             	add    esp,0x10
c0025033:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0025039:	75 c4                	jne    c0024fff <ATAPI::readyForCommand()+0x9>
c002503b:	31 c0                	xor    eax,eax
c002503d:	eb 02                	jmp    c0025041 <ATAPI::readyForCommand()+0x4b>
c002503f:	b0 01                	mov    al,0x1
c0025041:	5a                   	pop    edx
c0025042:	5b                   	pop    ebx
c0025043:	5e                   	pop    esi
c0025044:	c3                   	ret    
c0025045:	90                   	nop

c0025046 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0025046:	55                   	push   ebp
c0025047:	57                   	push   edi
c0025048:	56                   	push   esi
c0025049:	53                   	push   ebx
c002504a:	83 ec 20             	sub    esp,0x20
c002504d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0025051:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0025055:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0025059:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002505d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025061:	6a 01                	push   0x1
c0025063:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002506a:	50                   	push   eax
c002506b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025071:	e8 56 eb ff ff       	call   c0023bcc <IDE::enableIRQs(unsigned char, bool)>
c0025076:	5e                   	pop    esi
c0025077:	58                   	pop    eax
c0025078:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002507f:	50                   	push   eax
c0025080:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025086:	e8 0f e9 ff ff       	call   c002399a <IDE::prepareInterrupt(unsigned char)>
c002508b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002508e:	e8 63 ff ff ff       	call   c0024ff6 <ATAPI::readyForCommand()>
c0025093:	83 c4 10             	add    esp,0x10
c0025096:	84 c0                	test   al,al
c0025098:	75 0a                	jne    c00250a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002509a:	bb 01 00 00 00       	mov    ebx,0x1
c002509f:	e9 57 02 00 00       	jmp    c00252fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00250a4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00250aa:	c1 e0 04             	shl    eax,0x4
c00250ad:	0f b6 c0             	movzx  eax,al
c00250b0:	50                   	push   eax
c00250b1:	6a 06                	push   0x6
c00250b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250ba:	50                   	push   eax
c00250bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250c1:	e8 fa e8 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250c6:	6a 00                	push   0x0
c00250c8:	6a 01                	push   0x1
c00250ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250d1:	50                   	push   eax
c00250d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250d8:	e8 e3 e8 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250dd:	83 c4 20             	add    esp,0x20
c00250e0:	0f b6 c3             	movzx  eax,bl
c00250e3:	0f b6 df             	movzx  ebx,bh
c00250e6:	50                   	push   eax
c00250e7:	6a 04                	push   0x4
c00250e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250f0:	50                   	push   eax
c00250f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250f7:	e8 c4 e8 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250fc:	53                   	push   ebx
c00250fd:	6a 05                	push   0x5
c00250ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025106:	50                   	push   eax
c0025107:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002510d:	e8 ae e8 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025112:	83 c4 20             	add    esp,0x20
c0025115:	68 a0 00 00 00       	push   0xa0
c002511a:	6a 07                	push   0x7
c002511c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025123:	50                   	push   eax
c0025124:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002512a:	e8 91 e8 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002512f:	83 c4 0c             	add    esp,0xc
c0025132:	6a 01                	push   0x1
c0025134:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002513b:	50                   	push   eax
c002513c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025142:	e8 25 f4 ff ff       	call   c002456c <IDE::polling(unsigned char, unsigned int)>
c0025147:	83 c4 10             	add    esp,0x10
c002514a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0025150:	84 c0                	test   al,al
c0025152:	74 23                	je     c0025177 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0025154:	0f b6 d8             	movzx  ebx,al
c0025157:	0f b6 d2             	movzx  edx,dl
c002515a:	53                   	push   ebx
c002515b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025162:	50                   	push   eax
c0025163:	52                   	push   edx
c0025164:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002516a:	e8 67 f2 ff ff       	call   c00243d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002516f:	83 c4 10             	add    esp,0x10
c0025172:	e9 84 01 00 00       	jmp    c00252fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025177:	0f b6 d2             	movzx  edx,dl
c002517a:	53                   	push   ebx
c002517b:	53                   	push   ebx
c002517c:	52                   	push   edx
c002517d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025183:	e8 26 e8 ff ff       	call   c00239ae <IDE::getBase(unsigned char)>
c0025188:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002518c:	b9 06 00 00 00       	mov    ecx,0x6
c0025191:	89 c2                	mov    edx,eax
c0025193:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025196:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002519a:	83 c4 10             	add    esp,0x10
c002519d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00251a3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00251aa:	85 db                	test   ebx,ebx
c00251ac:	0f 84 ec 00 00 00    	je     c002529e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00251b2:	51                   	push   ecx
c00251b3:	51                   	push   ecx
c00251b4:	52                   	push   edx
c00251b5:	50                   	push   eax
c00251b6:	e8 73 e9 ff ff       	call   c0023b2e <IDE::waitInterrupt(unsigned char)>
c00251bb:	83 c4 10             	add    esp,0x10
c00251be:	84 c0                	test   al,al
c00251c0:	0f 84 d4 fe ff ff    	je     c002509a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00251c6:	56                   	push   esi
c00251c7:	56                   	push   esi
c00251c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251cf:	50                   	push   eax
c00251d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251d6:	e8 bf e7 ff ff       	call   c002399a <IDE::prepareInterrupt(unsigned char)>
c00251db:	83 c4 0c             	add    esp,0xc
c00251de:	6a 04                	push   0x4
c00251e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251e7:	50                   	push   eax
c00251e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251ee:	e8 8d e8 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c00251f3:	83 c4 0c             	add    esp,0xc
c00251f6:	89 c6                	mov    esi,eax
c00251f8:	6a 05                	push   0x5
c00251fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025201:	50                   	push   eax
c0025202:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025208:	e8 73 e8 ff ff       	call   c0023a80 <IDE::read(unsigned char, unsigned char)>
c002520d:	89 f1                	mov    ecx,esi
c002520f:	0f b6 c0             	movzx  eax,al
c0025212:	0f b6 f1             	movzx  esi,cl
c0025215:	c1 e0 08             	shl    eax,0x8
c0025218:	09 c6                	or     esi,eax
c002521a:	d1 fe                	sar    esi,1
c002521c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025220:	83 c4 10             	add    esp,0x10
c0025223:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025228:	74 41                	je     c002526b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002522a:	31 c9                	xor    ecx,ecx
c002522c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025232:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025239:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002523d:	75 0a                	jne    c0025249 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002523f:	01 c9                	add    ecx,ecx
c0025241:	01 cd                	add    ebp,ecx
c0025243:	4b                   	dec    ebx
c0025244:	e9 54 ff ff ff       	jmp    c002519d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025249:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002524e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025252:	51                   	push   ecx
c0025253:	51                   	push   ecx
c0025254:	52                   	push   edx
c0025255:	50                   	push   eax
c0025256:	e8 53 e7 ff ff       	call   c00239ae <IDE::getBase(unsigned char)>
c002525b:	89 c2                	mov    edx,eax
c002525d:	89 f0                	mov    eax,esi
c002525f:	66 ef                	out    dx,ax
c0025261:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025265:	83 c4 10             	add    esp,0x10
c0025268:	41                   	inc    ecx
c0025269:	eb c1                	jmp    c002522c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002526b:	31 f6                	xor    esi,esi
c002526d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025273:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002527a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002527e:	75 06                	jne    c0025286 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025280:	01 f6                	add    esi,esi
c0025282:	01 f5                	add    ebp,esi
c0025284:	eb bd                	jmp    c0025243 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025286:	51                   	push   ecx
c0025287:	51                   	push   ecx
c0025288:	52                   	push   edx
c0025289:	50                   	push   eax
c002528a:	e8 1f e7 ff ff       	call   c00239ae <IDE::getBase(unsigned char)>
c002528f:	89 c2                	mov    edx,eax
c0025291:	66 ed                	in     ax,dx
c0025293:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025298:	83 c4 10             	add    esp,0x10
c002529b:	46                   	inc    esi
c002529c:	eb cf                	jmp    c002526d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002529e:	51                   	push   ecx
c002529f:	51                   	push   ecx
c00252a0:	52                   	push   edx
c00252a1:	50                   	push   eax
c00252a2:	e8 87 e8 ff ff       	call   c0023b2e <IDE::waitInterrupt(unsigned char)>
c00252a7:	83 c4 10             	add    esp,0x10
c00252aa:	84 c0                	test   al,al
c00252ac:	0f 84 e8 fd ff ff    	je     c002509a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00252b2:	bb a0 86 01 00       	mov    ebx,0x186a0
c00252b7:	52                   	push   edx
c00252b8:	52                   	push   edx
c00252b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252c0:	50                   	push   eax
c00252c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252c7:	e8 ce e6 ff ff       	call   c002399a <IDE::prepareInterrupt(unsigned char)>
c00252cc:	83 c4 10             	add    esp,0x10
c00252cf:	50                   	push   eax
c00252d0:	50                   	push   eax
c00252d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252d8:	50                   	push   eax
c00252d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252df:	e8 ca e6 ff ff       	call   c00239ae <IDE::getBase(unsigned char)>
c00252e4:	8d 50 07             	lea    edx,[eax+0x7]
c00252e7:	ec                   	in     al,dx
c00252e8:	83 c4 10             	add    esp,0x10
c00252eb:	a8 88                	test   al,0x88
c00252ed:	74 0a                	je     c00252f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00252ef:	4b                   	dec    ebx
c00252f0:	75 dd                	jne    c00252cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00252f2:	bb 02 00 00 00       	mov    ebx,0x2
c00252f7:	eb 02                	jmp    c00252fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00252f9:	31 db                	xor    ebx,ebx
c00252fb:	83 c4 1c             	add    esp,0x1c
c00252fe:	89 d8                	mov    eax,ebx
c0025300:	5b                   	pop    ebx
c0025301:	5e                   	pop    esi
c0025302:	5f                   	pop    edi
c0025303:	5d                   	pop    ebp
c0025304:	c3                   	ret    
c0025305:	90                   	nop

c0025306 <ATAPI::diskRemoved()>:
c0025306:	83 ec 18             	sub    esp,0x18
c0025309:	68 bd db 02 c0       	push   0xc002dbbd
c002530e:	e8 8c db fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0025313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025317:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002531e:	83 c4 1c             	add    esp,0x1c
c0025321:	c3                   	ret    

c0025322 <ATAPI::eject()>:
c0025322:	57                   	push   edi
c0025323:	b9 03 00 00 00       	mov    ecx,0x3
c0025328:	53                   	push   ebx
c0025329:	83 ec 14             	sub    esp,0x14
c002532c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025330:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025334:	fc                   	cld    
c0025335:	31 c0                	xor    eax,eax
c0025337:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025339:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002533e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025343:	50                   	push   eax
c0025344:	50                   	push   eax
c0025345:	6a 00                	push   0x0
c0025347:	6a 00                	push   0x0
c0025349:	6a 00                	push   0x0
c002534b:	6a 02                	push   0x2
c002534d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025351:	50                   	push   eax
c0025352:	53                   	push   ebx
c0025353:	e8 ee fc ff ff       	call   c0025046 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025358:	83 c4 14             	add    esp,0x14
c002535b:	53                   	push   ebx
c002535c:	e8 a5 ff ff ff       	call   c0025306 <ATAPI::diskRemoved()>
c0025361:	83 c4 24             	add    esp,0x24
c0025364:	31 c0                	xor    eax,eax
c0025366:	5b                   	pop    ebx
c0025367:	5f                   	pop    edi
c0025368:	c3                   	ret    
c0025369:	90                   	nop

c002536a <ATAPI::diskInserted()>:
c002536a:	53                   	push   ebx
c002536b:	83 ec 14             	sub    esp,0x14
c002536e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025372:	68 d4 db 02 c0       	push   0xc002dbd4
c0025377:	e8 23 db fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c002537c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025383:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025386:	e8 cf f3 fe ff       	call   c001475a <PhysicalDisk::startCache()>
c002538b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002538f:	83 c4 18             	add    esp,0x18
c0025392:	5b                   	pop    ebx
c0025393:	e9 a2 16 ff ff       	jmp    c0016a3a <createPartitionsForDisk(PhysicalDisk*)>

c0025398 <ATAPI::detectMedia()>:
c0025398:	56                   	push   esi
c0025399:	53                   	push   ebx
c002539a:	83 ec 28             	sub    esp,0x28
c002539d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253a1:	6a 0c                	push   0xc
c00253a3:	6a 00                	push   0x0
c00253a5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00253a9:	56                   	push   esi
c00253aa:	e8 bd b3 fd ff       	call   c000076c <memset>
c00253af:	58                   	pop    eax
c00253b0:	5a                   	pop    edx
c00253b1:	6a 00                	push   0x0
c00253b3:	6a 00                	push   0x0
c00253b5:	6a 00                	push   0x0
c00253b7:	6a 00                	push   0x0
c00253b9:	56                   	push   esi
c00253ba:	53                   	push   ebx
c00253bb:	e8 86 fc ff ff       	call   c0025046 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253c0:	83 c4 1c             	add    esp,0x1c
c00253c3:	6a 0c                	push   0xc
c00253c5:	6a 00                	push   0x0
c00253c7:	56                   	push   esi
c00253c8:	e8 9f b3 fd ff       	call   c000076c <memset>
c00253cd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253d2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253d7:	59                   	pop    ecx
c00253d8:	58                   	pop    eax
c00253d9:	6a 01                	push   0x1
c00253db:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00253df:	50                   	push   eax
c00253e0:	6a 00                	push   0x0
c00253e2:	6a 12                	push   0x12
c00253e4:	56                   	push   esi
c00253e5:	53                   	push   ebx
c00253e6:	e8 5b fc ff ff       	call   c0025046 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253eb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00253ef:	83 c4 20             	add    esp,0x20
c00253f2:	83 e0 7f             	and    eax,0x7f
c00253f5:	3c 70                	cmp    al,0x70
c00253f7:	74 15                	je     c002540e <ATAPI::detectMedia()+0x76>
c00253f9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025400:	75 0c                	jne    c002540e <ATAPI::detectMedia()+0x76>
c0025402:	83 ec 0c             	sub    esp,0xc
c0025405:	53                   	push   ebx
c0025406:	e8 5f ff ff ff       	call   c002536a <ATAPI::diskInserted()>
c002540b:	83 c4 10             	add    esp,0x10
c002540e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025412:	83 e0 0f             	and    eax,0xf
c0025415:	3c 02                	cmp    al,0x2
c0025417:	75 1b                	jne    c0025434 <ATAPI::detectMedia()+0x9c>
c0025419:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002541e:	75 2d                	jne    c002544d <ATAPI::detectMedia()+0xb5>
c0025420:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025427:	74 24                	je     c002544d <ATAPI::detectMedia()+0xb5>
c0025429:	83 ec 0c             	sub    esp,0xc
c002542c:	53                   	push   ebx
c002542d:	e8 d4 fe ff ff       	call   c0025306 <ATAPI::diskRemoved()>
c0025432:	eb 16                	jmp    c002544a <ATAPI::detectMedia()+0xb2>
c0025434:	84 c0                	test   al,al
c0025436:	75 15                	jne    c002544d <ATAPI::detectMedia()+0xb5>
c0025438:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002543f:	75 0c                	jne    c002544d <ATAPI::detectMedia()+0xb5>
c0025441:	83 ec 0c             	sub    esp,0xc
c0025444:	53                   	push   ebx
c0025445:	e8 20 ff ff ff       	call   c002536a <ATAPI::diskInserted()>
c002544a:	83 c4 10             	add    esp,0x10
c002544d:	83 c4 24             	add    esp,0x24
c0025450:	5b                   	pop    ebx
c0025451:	5e                   	pop    esi
c0025452:	c3                   	ret    
c0025453:	90                   	nop

c0025454 <ATAPI::open(int, int, void*)>:
c0025454:	53                   	push   ebx
c0025455:	83 ec 08             	sub    esp,0x8
c0025458:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002545c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025460:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025464:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002546a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025470:	c1 e0 06             	shl    eax,0x6
c0025473:	01 d0                	add    eax,edx
c0025475:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002547c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025482:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025489:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025493:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025499:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00254a0:	6a 04                	push   0x4
c00254a2:	6a 0c                	push   0xc
c00254a4:	51                   	push   ecx
c00254a5:	52                   	push   edx
c00254a6:	e8 15 e5 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00254ab:	90                   	nop
c00254ac:	90                   	nop
c00254ad:	6a 00                	push   0x0
c00254af:	6a 0c                	push   0xc
c00254b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00254b8:	50                   	push   eax
c00254b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00254bf:	e8 fc e4 ff ff       	call   c00239c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00254c4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00254cb:	83 c4 14             	add    esp,0x14
c00254ce:	53                   	push   ebx
c00254cf:	e8 c4 fe ff ff       	call   c0025398 <ATAPI::detectMedia()>
c00254d4:	31 c0                	xor    eax,eax
c00254d6:	83 c4 18             	add    esp,0x18
c00254d9:	5b                   	pop    ebx
c00254da:	c3                   	ret    
c00254db:	90                   	nop

c00254dc <ATAPI::read(unsigned long long, int, void*)>:
c00254dc:	55                   	push   ebp
c00254dd:	57                   	push   edi
c00254de:	56                   	push   esi
c00254df:	53                   	push   ebx
c00254e0:	83 ec 1c             	sub    esp,0x1c
c00254e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00254e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00254ef:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00254f6:	74 41                	je     c0025539 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00254f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254fc:	b9 03 00 00 00       	mov    ecx,0x3
c0025501:	fc                   	cld    
c0025502:	31 c0                	xor    eax,eax
c0025504:	86 fb                	xchg   bl,bh
c0025506:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025508:	c1 c3 10             	rol    ebx,0x10
c002550b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025510:	89 e8                	mov    eax,ebp
c0025512:	86 fb                	xchg   bl,bh
c0025514:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025518:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002551c:	50                   	push   eax
c002551d:	50                   	push   eax
c002551e:	55                   	push   ebp
c002551f:	c1 e5 0b             	shl    ebp,0xb
c0025522:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025526:	6a 00                	push   0x0
c0025528:	55                   	push   ebp
c0025529:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002552d:	50                   	push   eax
c002552e:	56                   	push   esi
c002552f:	e8 12 fb ff ff       	call   c0025046 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025534:	83 c4 20             	add    esp,0x20
c0025537:	eb 1a                	jmp    c0025553 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025539:	83 ec 0c             	sub    esp,0xc
c002553c:	56                   	push   esi
c002553d:	e8 56 fe ff ff       	call   c0025398 <ATAPI::detectMedia()>
c0025542:	83 c4 10             	add    esp,0x10
c0025545:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002554c:	75 aa                	jne    c00254f8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002554e:	b8 02 00 00 00       	mov    eax,0x2
c0025553:	83 c4 1c             	add    esp,0x1c
c0025556:	5b                   	pop    ebx
c0025557:	5e                   	pop    esi
c0025558:	5f                   	pop    edi
c0025559:	5d                   	pop    ebp
c002555a:	c3                   	ret    
c002555b:	90                   	nop

c002555c <SATA::close(int, int, void*)>:
c002555c:	83 ec 0c             	sub    esp,0xc
c002555f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025563:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025569:	85 c0                	test   eax,eax
c002556b:	74 0c                	je     c0025579 <SATA::close(int, int, void*)+0x1d>
c002556d:	83 ec 0c             	sub    esp,0xc
c0025570:	8b 10                	mov    edx,DWORD PTR [eax]
c0025572:	50                   	push   eax
c0025573:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025576:	83 c4 10             	add    esp,0x10
c0025579:	31 c0                	xor    eax,eax
c002557b:	83 c4 0c             	add    esp,0xc
c002557e:	c3                   	ret    
c002557f:	90                   	nop

c0025580 <SATA::powerSaving(PowerSavingLevel)>:
c0025580:	c3                   	ret    
c0025581:	90                   	nop

c0025582 <SATA::open(int, int, void*)>:
c0025582:	56                   	push   esi
c0025583:	53                   	push   ebx
c0025584:	50                   	push   eax
c0025585:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002558d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025597:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002559d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00255a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255ab:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00255b5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00255bb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00255c2:	e8 99 a9 fe ff       	call   c000ff60 <Phys::allocatePage()>
c00255c7:	89 c6                	mov    esi,eax
c00255c9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00255cf:	81 c6 00 10 00 00    	add    esi,0x1000
c00255d5:	e8 86 a9 fe ff       	call   c000ff60 <Phys::allocatePage()>
c00255da:	39 c6                	cmp    esi,eax
c00255dc:	74 10                	je     c00255ee <SATA::open(int, int, void*)+0x6c>
c00255de:	83 ec 0c             	sub    esp,0xc
c00255e1:	68 fc da 02 c0       	push   0xc002dafc
c00255e6:	e8 9c 52 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00255eb:	83 c4 10             	add    esp,0x10
c00255ee:	83 ec 0c             	sub    esp,0xc
c00255f1:	6a 02                	push   0x2
c00255f3:	e8 a1 c4 fe ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c00255f8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00255fe:	6a 03                	push   0x3
c0025600:	50                   	push   eax
c0025601:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025607:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c002560d:	e8 be cc fe ff       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025612:	83 c4 14             	add    esp,0x14
c0025615:	53                   	push   ebx
c0025616:	e8 3f f1 fe ff       	call   c001475a <PhysicalDisk::startCache()>
c002561b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002561e:	e8 17 14 ff ff       	call   c0016a3a <createPartitionsForDisk(PhysicalDisk*)>
c0025623:	83 c4 14             	add    esp,0x14
c0025626:	31 c0                	xor    eax,eax
c0025628:	5b                   	pop    ebx
c0025629:	5e                   	pop    esi
c002562a:	c3                   	ret    
c002562b:	90                   	nop

c002562c <SATA::SATA()>:
c002562c:	83 ec 0c             	sub    esp,0xc
c002562f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025633:	83 ec 04             	sub    esp,0x4
c0025636:	68 00 02 00 00       	push   0x200
c002563b:	68 10 db 02 c0       	push   0xc002db10
c0025640:	50                   	push   eax
c0025641:	e8 ac f0 fe ff       	call   c00146f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025646:	83 c4 10             	add    esp,0x10
c0025649:	ba 80 db 02 c0       	mov    edx,0xc002db80
c002564e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025652:	89 10                	mov    DWORD PTR [eax],edx
c0025654:	90                   	nop
c0025655:	83 c4 0c             	add    esp,0xc
c0025658:	c3                   	ret    
c0025659:	90                   	nop

c002565a <SATA::access(unsigned long long, int, void*, bool)>:
c002565a:	55                   	push   ebp
c002565b:	57                   	push   edi
c002565c:	56                   	push   esi
c002565d:	53                   	push   ebx
c002565e:	83 ec 2c             	sub    esp,0x2c
c0025661:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025665:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025669:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002566d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025671:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025675:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002567a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002567e:	7e 10                	jle    c0025690 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025680:	83 ec 0c             	sub    esp,0xc
c0025683:	68 20 db 02 c0       	push   0xc002db20
c0025688:	e8 fa 51 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c002568d:	83 c4 10             	add    esp,0x10
c0025690:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025696:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002569c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00256a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00256a6:	89 d0                	mov    eax,edx
c00256a8:	c1 e0 07             	shl    eax,0x7
c00256ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00256af:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00256b9:	51                   	push   ecx
c00256ba:	8d 42 02             	lea    eax,[edx+0x2]
c00256bd:	51                   	push   ecx
c00256be:	c1 e0 07             	shl    eax,0x7
c00256c1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00256c5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00256c9:	50                   	push   eax
c00256ca:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00256d0:	e8 af ef ff ff       	call   c0024684 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00256d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00256d9:	83 c4 10             	add    esp,0x10
c00256dc:	b8 01 00 00 00       	mov    eax,0x1
c00256e1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00256e6:	0f 84 cb 01 00 00    	je     c00258b7 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00256f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00256f4:	c1 e0 09             	shl    eax,0x9
c00256f7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00256fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025700:	74 0e                	je     c0025710 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025702:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025708:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002570c:	89 c1                	mov    ecx,eax
c002570e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025710:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025714:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002571a:	8d 42 02             	lea    eax,[edx+0x2]
c002571d:	c1 e0 07             	shl    eax,0x7
c0025720:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025724:	8b 00                	mov    eax,DWORD PTR [eax]
c0025726:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002572c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025732:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025736:	c1 e1 05             	shl    ecx,0x5
c0025739:	01 c8                	add    eax,ecx
c002573b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002573f:	83 e1 01             	and    ecx,0x1
c0025742:	89 ce                	mov    esi,ecx
c0025744:	8a 08                	mov    cl,BYTE PTR [eax]
c0025746:	c1 e6 06             	shl    esi,0x6
c0025749:	83 e1 bf             	and    ecx,0xffffffbf
c002574c:	09 f1                	or     ecx,esi
c002574e:	88 08                	mov    BYTE PTR [eax],cl
c0025750:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025752:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025758:	81 c9 05 00 01 00    	or     ecx,0x10005
c002575e:	89 08                	mov    DWORD PTR [eax],ecx
c0025760:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025766:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002576c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025772:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025775:	50                   	push   eax
c0025776:	68 90 00 00 00       	push   0x90
c002577b:	6a 00                	push   0x0
c002577d:	56                   	push   esi
c002577e:	e8 e9 af fd ff       	call   c000076c <memset>
c0025783:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025789:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002578d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025793:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025797:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002579b:	83 c4 10             	add    esp,0x10
c002579e:	48                   	dec    eax
c002579f:	25 ff ff 3f 00       	and    eax,0x3fffff
c00257a4:	89 c1                	mov    ecx,eax
c00257a6:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00257ac:	25 00 00 c0 ff       	and    eax,0xffc00000
c00257b1:	09 c8                	or     eax,ecx
c00257b3:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00257b9:	66 8b 06             	mov    ax,WORD PTR [esi]
c00257bc:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00257c3:	66 25 00 7f          	and    ax,0x7f00
c00257c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00257cb:	66 0d 27 80          	or     ax,0x8027
c00257cf:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00257d4:	66 89 06             	mov    WORD PTR [esi],ax
c00257d7:	19 c0                	sbb    eax,eax
c00257d9:	83 e0 f0             	and    eax,0xfffffff0
c00257dc:	83 c0 35             	add    eax,0x35
c00257df:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00257e2:	89 e8                	mov    eax,ebp
c00257e4:	c1 e8 10             	shr    eax,0x10
c00257e7:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00257ea:	89 e8                	mov    eax,ebp
c00257ec:	c1 e8 18             	shr    eax,0x18
c00257ef:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00257f2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00257f6:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00257f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00257fd:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025800:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025804:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025808:	89 d6                	mov    esi,edx
c002580a:	31 c0                	xor    eax,eax
c002580c:	c1 e6 07             	shl    esi,0x7
c002580f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025813:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025819:	80 e1 88             	and    cl,0x88
c002581c:	74 0a                	je     c0025828 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c002581e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025823:	74 0a                	je     c002582f <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025825:	40                   	inc    eax
c0025826:	eb eb                	jmp    c0025813 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025828:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002582d:	75 0a                	jne    c0025839 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002582f:	83 ec 0c             	sub    esp,0xc
c0025832:	68 59 db 02 c0       	push   0xc002db59
c0025837:	eb 56                	jmp    c002588f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025839:	b8 01 00 00 00       	mov    eax,0x1
c002583e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025842:	c1 e2 07             	shl    edx,0x7
c0025845:	d3 e0                	shl    eax,cl
c0025847:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002584b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025851:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025857:	85 c8                	test   eax,ecx
c0025859:	74 20                	je     c002587b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c002585b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025861:	0f ba e1 1e          	bt     ecx,0x1e
c0025865:	73 ea                	jae    c0025851 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025867:	83 ec 0c             	sub    esp,0xc
c002586a:	68 67 db 02 c0       	push   0xc002db67
c002586f:	e8 13 50 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0025874:	83 c4 10             	add    esp,0x10
c0025877:	31 c0                	xor    eax,eax
c0025879:	eb 3c                	jmp    c00258b7 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002587b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025881:	0f ba e0 1e          	bt     eax,0x1e
c0025885:	73 17                	jae    c002589e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025887:	83 ec 0c             	sub    esp,0xc
c002588a:	68 67 db 02 c0       	push   0xc002db67
c002588f:	e8 f3 4f ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0025894:	83 c4 10             	add    esp,0x10
c0025897:	b8 01 00 00 00       	mov    eax,0x1
c002589c:	eb 19                	jmp    c00258b7 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002589e:	31 c0                	xor    eax,eax
c00258a0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00258a5:	75 10                	jne    c00258b7 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00258a7:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00258ad:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00258b1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00258b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00258b7:	83 c4 2c             	add    esp,0x2c
c00258ba:	5b                   	pop    ebx
c00258bb:	5e                   	pop    esi
c00258bc:	5f                   	pop    edi
c00258bd:	5d                   	pop    ebp
c00258be:	c3                   	ret    
c00258bf:	90                   	nop

c00258c0 <SATA::read(unsigned long long, int, void*)>:
c00258c0:	57                   	push   edi
c00258c1:	b8 04 00 00 00       	mov    eax,0x4
c00258c6:	56                   	push   esi
c00258c7:	53                   	push   ebx
c00258c8:	83 ec 10             	sub    esp,0x10
c00258cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00258cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00258d3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00258d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00258da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00258de:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00258e4:	77 3b                	ja     c0025921 <SATA::read(unsigned long long, int, void*)+0x61>
c00258e6:	b8 06 00 00 00       	mov    eax,0x6
c00258eb:	85 d2                	test   edx,edx
c00258ed:	74 32                	je     c0025921 <SATA::read(unsigned long long, int, void*)+0x61>
c00258ef:	50                   	push   eax
c00258f0:	50                   	push   eax
c00258f1:	6a 00                	push   0x0
c00258f3:	52                   	push   edx
c00258f4:	53                   	push   ebx
c00258f5:	57                   	push   edi
c00258f6:	56                   	push   esi
c00258f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00258fb:	e8 5a fd ff ff       	call   c002565a <SATA::access(unsigned long long, int, void*, bool)>
c0025900:	83 c4 20             	add    esp,0x20
c0025903:	85 c0                	test   eax,eax
c0025905:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025909:	75 11                	jne    c002591c <SATA::read(unsigned long long, int, void*)+0x5c>
c002590b:	01 1d 08 34 03 c0    	add    DWORD PTR ds:0xc0033408,ebx
c0025911:	e8 8e b0 fe ff       	call   c00109a4 <VgaText::updateDiskUsage()>
c0025916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002591a:	eb 05                	jmp    c0025921 <SATA::read(unsigned long long, int, void*)+0x61>
c002591c:	b8 01 00 00 00       	mov    eax,0x1
c0025921:	83 c4 10             	add    esp,0x10
c0025924:	5b                   	pop    ebx
c0025925:	5e                   	pop    esi
c0025926:	5f                   	pop    edi
c0025927:	c3                   	ret    

c0025928 <SATA::write(unsigned long long, int, void*)>:
c0025928:	55                   	push   ebp
c0025929:	b8 04 00 00 00       	mov    eax,0x4
c002592e:	57                   	push   edi
c002592f:	56                   	push   esi
c0025930:	53                   	push   ebx
c0025931:	83 ec 1c             	sub    esp,0x1c
c0025934:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025938:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002593c:	8d 75 ff             	lea    esi,[ebp-0x1]
c002593f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025943:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025947:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002594d:	77 56                	ja     c00259a5 <SATA::write(unsigned long long, int, void*)+0x7d>
c002594f:	b8 06 00 00 00       	mov    eax,0x6
c0025954:	85 ff                	test   edi,edi
c0025956:	74 4d                	je     c00259a5 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025958:	89 ee                	mov    esi,ebp
c002595a:	c1 e6 09             	shl    esi,0x9
c002595d:	01 fe                	add    esi,edi
c002595f:	89 c8                	mov    eax,ecx
c0025961:	89 da                	mov    edx,ebx
c0025963:	83 c0 01             	add    eax,0x1
c0025966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002596a:	83 d2 00             	adc    edx,0x0
c002596d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025971:	50                   	push   eax
c0025972:	50                   	push   eax
c0025973:	6a 01                	push   0x1
c0025975:	57                   	push   edi
c0025976:	81 c7 00 02 00 00    	add    edi,0x200
c002597c:	6a 01                	push   0x1
c002597e:	53                   	push   ebx
c002597f:	51                   	push   ecx
c0025980:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025984:	e8 d1 fc ff ff       	call   c002565a <SATA::access(unsigned long long, int, void*, bool)>
c0025989:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002598d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025991:	83 c4 20             	add    esp,0x20
c0025994:	39 f7                	cmp    edi,esi
c0025996:	75 c7                	jne    c002595f <SATA::write(unsigned long long, int, void*)+0x37>
c0025998:	01 2d 04 34 03 c0    	add    DWORD PTR ds:0xc0033404,ebp
c002599e:	e8 01 b0 fe ff       	call   c00109a4 <VgaText::updateDiskUsage()>
c00259a3:	31 c0                	xor    eax,eax
c00259a5:	83 c4 1c             	add    esp,0x1c
c00259a8:	5b                   	pop    ebx
c00259a9:	5e                   	pop    esi
c00259aa:	5f                   	pop    edi
c00259ab:	5d                   	pop    ebp
c00259ac:	c3                   	ret    
c00259ad:	90                   	nop

c00259ae <SATAPI::write(unsigned long long, int, void*)>:
c00259ae:	b8 03 00 00 00       	mov    eax,0x3
c00259b3:	c3                   	ret    

c00259b4 <SATAPI::close(int, int, void*)>:
c00259b4:	83 ec 0c             	sub    esp,0xc
c00259b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00259c1:	85 c0                	test   eax,eax
c00259c3:	74 0c                	je     c00259d1 <SATAPI::close(int, int, void*)+0x1d>
c00259c5:	83 ec 0c             	sub    esp,0xc
c00259c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00259ca:	50                   	push   eax
c00259cb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00259ce:	83 c4 10             	add    esp,0x10
c00259d1:	31 c0                	xor    eax,eax
c00259d3:	83 c4 0c             	add    esp,0xc
c00259d6:	c3                   	ret    
c00259d7:	90                   	nop

c00259d8 <SATAPI::SATAPI()>:
c00259d8:	83 ec 0c             	sub    esp,0xc
c00259db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259df:	83 ec 04             	sub    esp,0x4
c00259e2:	68 00 08 00 00       	push   0x800
c00259e7:	68 b0 db 02 c0       	push   0xc002dbb0
c00259ec:	50                   	push   eax
c00259ed:	e8 00 ed fe ff       	call   c00146f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00259f2:	83 c4 10             	add    esp,0x10
c00259f5:	ba 5c dc 02 c0       	mov    edx,0xc002dc5c
c00259fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259fe:	89 10                	mov    DWORD PTR [eax],edx
c0025a00:	90                   	nop
c0025a01:	83 c4 0c             	add    esp,0xc
c0025a04:	c3                   	ret    
c0025a05:	90                   	nop

c0025a06 <SATAPI::diskRemoved()>:
c0025a06:	83 ec 18             	sub    esp,0x18
c0025a09:	68 bc db 02 c0       	push   0xc002dbbc
c0025a0e:	e8 8c d4 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0025a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a17:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025a1e:	83 c4 1c             	add    esp,0x1c
c0025a21:	c3                   	ret    

c0025a22 <SATAPI::diskInserted()>:
c0025a22:	53                   	push   ebx
c0025a23:	83 ec 14             	sub    esp,0x14
c0025a26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025a2a:	68 d3 db 02 c0       	push   0xc002dbd3
c0025a2f:	e8 6b d4 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0025a34:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025a3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025a3e:	e8 17 ed fe ff       	call   c001475a <PhysicalDisk::startCache()>
c0025a43:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025a47:	83 c4 18             	add    esp,0x18
c0025a4a:	5b                   	pop    ebx
c0025a4b:	e9 ea 0f ff ff       	jmp    c0016a3a <createPartitionsForDisk(PhysicalDisk*)>

c0025a50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025a50:	55                   	push   ebp
c0025a51:	57                   	push   edi
c0025a52:	56                   	push   esi
c0025a53:	53                   	push   ebx
c0025a54:	83 ec 34             	sub    esp,0x34
c0025a57:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025a5b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025a63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025a67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025a6b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025a71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025a7b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025a81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025a85:	c1 e0 07             	shl    eax,0x7
c0025a88:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025a8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025a90:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025a9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a9e:	8d 58 02             	lea    ebx,[eax+0x2]
c0025aa1:	c1 e3 07             	shl    ebx,0x7
c0025aa4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025aa8:	53                   	push   ebx
c0025aa9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025aaf:	e8 d0 eb ff ff       	call   c0024684 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025ab4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025ab8:	83 c4 10             	add    esp,0x10
c0025abb:	b8 01 00 00 00       	mov    eax,0x1
c0025ac0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025ac5:	0f 84 85 01 00 00    	je     c0025c50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025acb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025ad3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025ad9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025adf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ae3:	c1 e1 05             	shl    ecx,0x5
c0025ae6:	01 c8                	add    eax,ecx
c0025ae8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025aea:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025af0:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025af6:	89 08                	mov    DWORD PTR [eax],ecx
c0025af8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025afe:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025b04:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025b0a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025b0d:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025b10:	50                   	push   eax
c0025b11:	68 90 00 00 00       	push   0x90
c0025b16:	6a 00                	push   0x0
c0025b18:	53                   	push   ebx
c0025b19:	e8 4e ac fd ff       	call   c000076c <memset>
c0025b1e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025b22:	b9 0c 00 00 00       	mov    ecx,0xc
c0025b27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025b29:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025b2f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025b33:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025b39:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025b3d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025b41:	48                   	dec    eax
c0025b42:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025b47:	89 c1                	mov    ecx,eax
c0025b49:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025b4f:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025b54:	09 c8                	or     eax,ecx
c0025b56:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025b5c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025b5f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025b66:	66 25 00 7f          	and    ax,0x7f00
c0025b6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025b6e:	66 0d 27 80          	or     ax,0x8027
c0025b72:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025b76:	66 89 03             	mov    WORD PTR [ebx],ax
c0025b79:	89 d0                	mov    eax,edx
c0025b7b:	c1 ea 18             	shr    edx,0x18
c0025b7e:	c1 e8 10             	shr    eax,0x10
c0025b81:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025b84:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025b87:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025b8b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025b8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025b92:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025b95:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025b99:	83 c4 10             	add    esp,0x10
c0025b9c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025ba0:	31 c0                	xor    eax,eax
c0025ba2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025ba6:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025bac:	80 e2 88             	and    dl,0x88
c0025baf:	74 0a                	je     c0025bbb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025bb1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025bb6:	74 0a                	je     c0025bc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025bb8:	40                   	inc    eax
c0025bb9:	eb eb                	jmp    c0025ba6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025bbb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025bc0:	75 0f                	jne    c0025bd1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025bc2:	83 ec 0c             	sub    esp,0xc
c0025bc5:	68 59 db 02 c0       	push   0xc002db59
c0025bca:	e8 b8 4c ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0025bcf:	eb 3f                	jmp    c0025c10 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025bd1:	ba 01 00 00 00       	mov    edx,0x1
c0025bd6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025bda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025bde:	d3 e2                	shl    edx,cl
c0025be0:	c1 e0 07             	shl    eax,0x7
c0025be3:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025be9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025bed:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025bf3:	85 ca                	test   edx,ecx
c0025bf5:	74 23                	je     c0025c1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025bf7:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025bfd:	0f ba e1 1e          	bt     ecx,0x1e
c0025c01:	73 ea                	jae    c0025bed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025c03:	83 ec 0c             	sub    esp,0xc
c0025c06:	68 eb db 02 c0       	push   0xc002dbeb
c0025c0b:	e8 8f d2 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0025c10:	83 c4 10             	add    esp,0x10
c0025c13:	b8 01 00 00 00       	mov    eax,0x1
c0025c18:	eb 36                	jmp    c0025c50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025c1a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025c20:	0f ba e0 1e          	bt     eax,0x1e
c0025c24:	73 0a                	jae    c0025c30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025c26:	83 ec 0c             	sub    esp,0xc
c0025c29:	68 fe db 02 c0       	push   0xc002dbfe
c0025c2e:	eb db                	jmp    c0025c0b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025c30:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025c35:	74 17                	je     c0025c4e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025c37:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025c3c:	74 10                	je     c0025c4e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025c3e:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025c44:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025c48:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025c4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c4e:	31 c0                	xor    eax,eax
c0025c50:	83 c4 2c             	add    esp,0x2c
c0025c53:	5b                   	pop    ebx
c0025c54:	5e                   	pop    esi
c0025c55:	5f                   	pop    edi
c0025c56:	5d                   	pop    ebp
c0025c57:	c3                   	ret    

c0025c58 <SATAPI::eject()>:
c0025c58:	57                   	push   edi
c0025c59:	b9 03 00 00 00       	mov    ecx,0x3
c0025c5e:	53                   	push   ebx
c0025c5f:	83 ec 14             	sub    esp,0x14
c0025c62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025c66:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025c6a:	fc                   	cld    
c0025c6b:	31 c0                	xor    eax,eax
c0025c6d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025c6f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025c74:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025c79:	50                   	push   eax
c0025c7a:	6a 00                	push   0x0
c0025c7c:	6a 00                	push   0x0
c0025c7e:	6a 00                	push   0x0
c0025c80:	6a 00                	push   0x0
c0025c82:	6a 02                	push   0x2
c0025c84:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025c88:	50                   	push   eax
c0025c89:	53                   	push   ebx
c0025c8a:	e8 c1 fd ff ff       	call   c0025a50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025c8f:	83 c4 14             	add    esp,0x14
c0025c92:	53                   	push   ebx
c0025c93:	e8 6e fd ff ff       	call   c0025a06 <SATAPI::diskRemoved()>
c0025c98:	83 c4 24             	add    esp,0x24
c0025c9b:	31 c0                	xor    eax,eax
c0025c9d:	5b                   	pop    ebx
c0025c9e:	5f                   	pop    edi
c0025c9f:	c3                   	ret    

c0025ca0 <SATAPI::detectMedia()>:
c0025ca0:	56                   	push   esi
c0025ca1:	53                   	push   ebx
c0025ca2:	83 ec 28             	sub    esp,0x28
c0025ca5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025ca9:	6a 0c                	push   0xc
c0025cab:	6a 00                	push   0x0
c0025cad:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025cb1:	56                   	push   esi
c0025cb2:	e8 b5 aa fd ff       	call   c000076c <memset>
c0025cb7:	83 c4 0c             	add    esp,0xc
c0025cba:	6a 00                	push   0x0
c0025cbc:	6a 00                	push   0x0
c0025cbe:	6a 00                	push   0x0
c0025cc0:	6a 00                	push   0x0
c0025cc2:	6a 00                	push   0x0
c0025cc4:	56                   	push   esi
c0025cc5:	53                   	push   ebx
c0025cc6:	e8 85 fd ff ff       	call   c0025a50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ccb:	83 c4 1c             	add    esp,0x1c
c0025cce:	6a 0c                	push   0xc
c0025cd0:	6a 00                	push   0x0
c0025cd2:	56                   	push   esi
c0025cd3:	e8 94 aa fd ff       	call   c000076c <memset>
c0025cd8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025cdd:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025ce2:	83 c4 0c             	add    esp,0xc
c0025ce5:	6a 01                	push   0x1
c0025ce7:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025ceb:	50                   	push   eax
c0025cec:	6a 00                	push   0x0
c0025cee:	6a 00                	push   0x0
c0025cf0:	6a 12                	push   0x12
c0025cf2:	56                   	push   esi
c0025cf3:	53                   	push   ebx
c0025cf4:	e8 57 fd ff ff       	call   c0025a50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025cf9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025cfd:	83 c4 20             	add    esp,0x20
c0025d00:	83 e0 7f             	and    eax,0x7f
c0025d03:	3c 70                	cmp    al,0x70
c0025d05:	74 15                	je     c0025d1c <SATAPI::detectMedia()+0x7c>
c0025d07:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025d0e:	75 0c                	jne    c0025d1c <SATAPI::detectMedia()+0x7c>
c0025d10:	83 ec 0c             	sub    esp,0xc
c0025d13:	53                   	push   ebx
c0025d14:	e8 09 fd ff ff       	call   c0025a22 <SATAPI::diskInserted()>
c0025d19:	83 c4 10             	add    esp,0x10
c0025d1c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025d20:	83 e0 0f             	and    eax,0xf
c0025d23:	3c 02                	cmp    al,0x2
c0025d25:	75 1b                	jne    c0025d42 <SATAPI::detectMedia()+0xa2>
c0025d27:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025d2c:	75 2d                	jne    c0025d5b <SATAPI::detectMedia()+0xbb>
c0025d2e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025d35:	74 24                	je     c0025d5b <SATAPI::detectMedia()+0xbb>
c0025d37:	83 ec 0c             	sub    esp,0xc
c0025d3a:	53                   	push   ebx
c0025d3b:	e8 c6 fc ff ff       	call   c0025a06 <SATAPI::diskRemoved()>
c0025d40:	eb 16                	jmp    c0025d58 <SATAPI::detectMedia()+0xb8>
c0025d42:	84 c0                	test   al,al
c0025d44:	75 15                	jne    c0025d5b <SATAPI::detectMedia()+0xbb>
c0025d46:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025d4d:	75 0c                	jne    c0025d5b <SATAPI::detectMedia()+0xbb>
c0025d4f:	83 ec 0c             	sub    esp,0xc
c0025d52:	53                   	push   ebx
c0025d53:	e8 ca fc ff ff       	call   c0025a22 <SATAPI::diskInserted()>
c0025d58:	83 c4 10             	add    esp,0x10
c0025d5b:	83 c4 24             	add    esp,0x24
c0025d5e:	5b                   	pop    ebx
c0025d5f:	5e                   	pop    esi
c0025d60:	c3                   	ret    
c0025d61:	90                   	nop

c0025d62 <SATAPI::open(int, int, void*)>:
c0025d62:	56                   	push   esi
c0025d63:	53                   	push   ebx
c0025d64:	50                   	push   eax
c0025d65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025d69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025d6d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025d77:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025d7d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d8b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025d95:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025d9b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025da2:	e8 b9 a1 fe ff       	call   c000ff60 <Phys::allocatePage()>
c0025da7:	89 c6                	mov    esi,eax
c0025da9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025daf:	81 c6 00 10 00 00    	add    esi,0x1000
c0025db5:	e8 a6 a1 fe ff       	call   c000ff60 <Phys::allocatePage()>
c0025dba:	39 c6                	cmp    esi,eax
c0025dbc:	74 10                	je     c0025dce <SATAPI::open(int, int, void*)+0x6c>
c0025dbe:	83 ec 0c             	sub    esp,0xc
c0025dc1:	68 13 dc 02 c0       	push   0xc002dc13
c0025dc6:	e8 bc 4a ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0025dcb:	83 c4 10             	add    esp,0x10
c0025dce:	83 ec 0c             	sub    esp,0xc
c0025dd1:	6a 02                	push   0x2
c0025dd3:	e8 c1 bc fe ff       	call   c0011a99 <Virt::allocateKernelVirtualPages(int)>
c0025dd8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025dde:	6a 03                	push   0x3
c0025de0:	50                   	push   eax
c0025de1:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025de7:	ff 35 30 f2 02 c0    	push   DWORD PTR ds:0xc002f230
c0025ded:	e8 de c4 fe ff       	call   c00122d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025df2:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025df9:	83 c4 14             	add    esp,0x14
c0025dfc:	53                   	push   ebx
c0025dfd:	e8 9e fe ff ff       	call   c0025ca0 <SATAPI::detectMedia()>
c0025e02:	83 c4 14             	add    esp,0x14
c0025e05:	31 c0                	xor    eax,eax
c0025e07:	5b                   	pop    ebx
c0025e08:	5e                   	pop    esi
c0025e09:	c3                   	ret    

c0025e0a <SATAPI::read(unsigned long long, int, void*)>:
c0025e0a:	55                   	push   ebp
c0025e0b:	57                   	push   edi
c0025e0c:	56                   	push   esi
c0025e0d:	53                   	push   ebx
c0025e0e:	83 ec 1c             	sub    esp,0x1c
c0025e11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025e15:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e19:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025e1d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025e24:	74 19                	je     c0025e3f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025e26:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025e2b:	7e 2e                	jle    c0025e5b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025e2d:	83 ec 0c             	sub    esp,0xc
c0025e30:	68 29 dc 02 c0       	push   0xc002dc29
c0025e35:	e8 4d 4a ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0025e3a:	83 c4 10             	add    esp,0x10
c0025e3d:	eb 1c                	jmp    c0025e5b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025e3f:	83 ec 0c             	sub    esp,0xc
c0025e42:	55                   	push   ebp
c0025e43:	e8 58 fe ff ff       	call   c0025ca0 <SATAPI::detectMedia()>
c0025e48:	83 c4 10             	add    esp,0x10
c0025e4b:	b8 02 00 00 00       	mov    eax,0x2
c0025e50:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025e57:	75 cd                	jne    c0025e26 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025e59:	eb 49                	jmp    c0025ea4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025e5b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025e5f:	b9 03 00 00 00       	mov    ecx,0x3
c0025e64:	fc                   	cld    
c0025e65:	31 c0                	xor    eax,eax
c0025e67:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025e69:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025e6e:	89 d8                	mov    eax,ebx
c0025e70:	86 e0                	xchg   al,ah
c0025e72:	c1 c0 10             	rol    eax,0x10
c0025e75:	86 e0                	xchg   al,ah
c0025e77:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025e7b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025e7f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025e83:	50                   	push   eax
c0025e84:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025e88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025e8c:	56                   	push   esi
c0025e8d:	53                   	push   ebx
c0025e8e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025e92:	c1 e0 0b             	shl    eax,0xb
c0025e95:	50                   	push   eax
c0025e96:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025e9a:	50                   	push   eax
c0025e9b:	55                   	push   ebp
c0025e9c:	e8 af fb ff ff       	call   c0025a50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ea1:	83 c4 20             	add    esp,0x20
c0025ea4:	83 c4 1c             	add    esp,0x1c
c0025ea7:	5b                   	pop    ebx
c0025ea8:	5e                   	pop    esi
c0025ea9:	5f                   	pop    edi
c0025eaa:	5d                   	pop    ebp
c0025eab:	c3                   	ret    

c0025eac <AVX::open(int, int, void*)>:
c0025eac:	83 ec 0c             	sub    esp,0xc
c0025eaf:	e8 44 11 00 00       	call   c0026ff8 <avxInit>
c0025eb4:	b8 00 00 00 00       	mov    eax,0x0
c0025eb9:	83 c4 0c             	add    esp,0xc
c0025ebc:	c3                   	ret    
c0025ebd:	90                   	nop

c0025ebe <AVX::close(int, int, void*)>:
c0025ebe:	83 ec 0c             	sub    esp,0xc
c0025ec1:	e8 33 11 00 00       	call   c0026ff9 <avxClose>
c0025ec6:	b8 00 00 00 00       	mov    eax,0x0
c0025ecb:	83 c4 0c             	add    esp,0xc
c0025ece:	c3                   	ret    
c0025ecf:	90                   	nop

c0025ed0 <AVX::available()>:
c0025ed0:	83 ec 0c             	sub    esp,0xc
c0025ed3:	e8 18 11 00 00       	call   c0026ff0 <avxDetect>
c0025ed8:	85 c0                	test   eax,eax
c0025eda:	0f 95 c0             	setne  al
c0025edd:	83 c4 0c             	add    esp,0xc
c0025ee0:	c3                   	ret    
c0025ee1:	90                   	nop

c0025ee2 <AVX::save(void*)>:
c0025ee2:	83 ec 0c             	sub    esp,0xc
c0025ee5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ee9:	83 ec 0c             	sub    esp,0xc
c0025eec:	50                   	push   eax
c0025eed:	e8 04 11 00 00       	call   c0026ff6 <avxSave>
c0025ef2:	83 c4 10             	add    esp,0x10
c0025ef5:	90                   	nop
c0025ef6:	83 c4 0c             	add    esp,0xc
c0025ef9:	c3                   	ret    

c0025efa <AVX::load(void*)>:
c0025efa:	83 ec 0c             	sub    esp,0xc
c0025efd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f01:	83 ec 0c             	sub    esp,0xc
c0025f04:	50                   	push   eax
c0025f05:	e8 ed 10 00 00       	call   c0026ff7 <avxLoad>
c0025f0a:	83 c4 10             	add    esp,0x10
c0025f0d:	90                   	nop
c0025f0e:	83 c4 0c             	add    esp,0xc
c0025f11:	c3                   	ret    

c0025f12 <AVX::AVX()>:
c0025f12:	83 ec 0c             	sub    esp,0xc
c0025f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f19:	83 ec 08             	sub    esp,0x8
c0025f1c:	68 8c dc 02 c0       	push   0xc002dc8c
c0025f21:	50                   	push   eax
c0025f22:	e8 a9 e8 fe ff       	call   c00147d0 <FPU::FPU(char const*)>
c0025f27:	83 c4 10             	add    esp,0x10
c0025f2a:	ba 9c dc 02 c0       	mov    edx,0xc002dc9c
c0025f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f33:	89 10                	mov    DWORD PTR [eax],edx
c0025f35:	90                   	nop
c0025f36:	83 c4 0c             	add    esp,0xc
c0025f39:	c3                   	ret    

c0025f3a <MMX::available()>:
c0025f3a:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0025f3f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f45:	83 e0 20             	and    eax,0x20
c0025f48:	84 c0                	test   al,al
c0025f4a:	0f 95 c0             	setne  al
c0025f4d:	c3                   	ret    

c0025f4e <MMX::open(int, int, void*)>:
c0025f4e:	83 ec 0c             	sub    esp,0xc
c0025f51:	e8 2c 11 00 00       	call   c0027082 <x87Init>
c0025f56:	b8 00 00 00 00       	mov    eax,0x0
c0025f5b:	83 c4 0c             	add    esp,0xc
c0025f5e:	c3                   	ret    
c0025f5f:	90                   	nop

c0025f60 <MMX::close(int, int, void*)>:
c0025f60:	83 ec 0c             	sub    esp,0xc
c0025f63:	e8 34 11 00 00       	call   c002709c <x87Close>
c0025f68:	b8 00 00 00 00       	mov    eax,0x0
c0025f6d:	83 c4 0c             	add    esp,0xc
c0025f70:	c3                   	ret    
c0025f71:	90                   	nop

c0025f72 <MMX::save(void*)>:
c0025f72:	83 ec 0c             	sub    esp,0xc
c0025f75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f79:	83 ec 0c             	sub    esp,0xc
c0025f7c:	50                   	push   eax
c0025f7d:	e8 ef 10 00 00       	call   c0027071 <x87Save>
c0025f82:	83 c4 10             	add    esp,0x10
c0025f85:	90                   	nop
c0025f86:	83 c4 0c             	add    esp,0xc
c0025f89:	c3                   	ret    

c0025f8a <MMX::load(void*)>:
c0025f8a:	83 ec 0c             	sub    esp,0xc
c0025f8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f91:	83 ec 0c             	sub    esp,0xc
c0025f94:	50                   	push   eax
c0025f95:	e8 e0 10 00 00       	call   c002707a <x87Load>
c0025f9a:	83 c4 10             	add    esp,0x10
c0025f9d:	90                   	nop
c0025f9e:	83 c4 0c             	add    esp,0xc
c0025fa1:	c3                   	ret    

c0025fa2 <MMX::MMX()>:
c0025fa2:	83 ec 0c             	sub    esp,0xc
c0025fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa9:	83 ec 08             	sub    esp,0x8
c0025fac:	68 cc dc 02 c0       	push   0xc002dccc
c0025fb1:	50                   	push   eax
c0025fb2:	e8 19 e8 fe ff       	call   c00147d0 <FPU::FPU(char const*)>
c0025fb7:	83 c4 10             	add    esp,0x10
c0025fba:	ba dc dc 02 c0       	mov    edx,0xc002dcdc
c0025fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc3:	89 10                	mov    DWORD PTR [eax],edx
c0025fc5:	90                   	nop
c0025fc6:	83 c4 0c             	add    esp,0xc
c0025fc9:	c3                   	ret    

c0025fca <SSE::open(int, int, void*)>:
c0025fca:	83 ec 0c             	sub    esp,0xc
c0025fcd:	e8 62 10 00 00       	call   c0027034 <sseInit>
c0025fd2:	b8 00 00 00 00       	mov    eax,0x0
c0025fd7:	83 c4 0c             	add    esp,0xc
c0025fda:	c3                   	ret    
c0025fdb:	90                   	nop

c0025fdc <SSE::close(int, int, void*)>:
c0025fdc:	83 ec 0c             	sub    esp,0xc
c0025fdf:	e8 60 10 00 00       	call   c0027044 <sseClose>
c0025fe4:	b8 00 00 00 00       	mov    eax,0x0
c0025fe9:	83 c4 0c             	add    esp,0xc
c0025fec:	c3                   	ret    
c0025fed:	90                   	nop

c0025fee <SSE::available()>:
c0025fee:	83 ec 1c             	sub    esp,0x1c
c0025ff1:	e8 1a 10 00 00       	call   c0027010 <absolutelyNoChanceInHell>
c0025ff6:	85 c0                	test   eax,eax
c0025ff8:	0f 95 c0             	setne  al
c0025ffb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025fff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0026003:	83 c4 1c             	add    esp,0x1c
c0026006:	c3                   	ret    
c0026007:	90                   	nop

c0026008 <SSE::save(void*)>:
c0026008:	83 ec 0c             	sub    esp,0xc
c002600b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002600f:	83 ec 0c             	sub    esp,0xc
c0026012:	50                   	push   eax
c0026013:	e8 10 10 00 00       	call   c0027028 <sseSave>
c0026018:	83 c4 10             	add    esp,0x10
c002601b:	90                   	nop
c002601c:	83 c4 0c             	add    esp,0xc
c002601f:	c3                   	ret    

c0026020 <SSE::load(void*)>:
c0026020:	83 ec 0c             	sub    esp,0xc
c0026023:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026027:	83 ec 0c             	sub    esp,0xc
c002602a:	50                   	push   eax
c002602b:	e8 fe 0f 00 00       	call   c002702e <sseLoad>
c0026030:	83 c4 10             	add    esp,0x10
c0026033:	90                   	nop
c0026034:	83 c4 0c             	add    esp,0xc
c0026037:	c3                   	ret    

c0026038 <SSE::SSE()>:
c0026038:	83 ec 0c             	sub    esp,0xc
c002603b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603f:	83 ec 08             	sub    esp,0x8
c0026042:	68 0c dd 02 c0       	push   0xc002dd0c
c0026047:	50                   	push   eax
c0026048:	e8 83 e7 fe ff       	call   c00147d0 <FPU::FPU(char const*)>
c002604d:	83 c4 10             	add    esp,0x10
c0026050:	ba 1c dd 02 c0       	mov    edx,0xc002dd1c
c0026055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026059:	89 10                	mov    DWORD PTR [eax],edx
c002605b:	90                   	nop
c002605c:	83 c4 0c             	add    esp,0xc
c002605f:	c3                   	ret    

c0026060 <x87::open(int, int, void*)>:
c0026060:	83 ec 0c             	sub    esp,0xc
c0026063:	e8 1a 10 00 00       	call   c0027082 <x87Init>
c0026068:	b8 00 00 00 00       	mov    eax,0x0
c002606d:	83 c4 0c             	add    esp,0xc
c0026070:	c3                   	ret    
c0026071:	90                   	nop

c0026072 <x87::close(int, int, void*)>:
c0026072:	83 ec 0c             	sub    esp,0xc
c0026075:	e8 22 10 00 00       	call   c002709c <x87Close>
c002607a:	b8 00 00 00 00       	mov    eax,0x0
c002607f:	83 c4 0c             	add    esp,0xc
c0026082:	c3                   	ret    
c0026083:	90                   	nop

c0026084 <x87::available()>:
c0026084:	83 ec 0c             	sub    esp,0xc
c0026087:	e8 ca 0f 00 00       	call   c0027056 <x87Detect>
c002608c:	85 c0                	test   eax,eax
c002608e:	0f 95 c0             	setne  al
c0026091:	83 c4 0c             	add    esp,0xc
c0026094:	c3                   	ret    
c0026095:	90                   	nop

c0026096 <x87::save(void*)>:
c0026096:	83 ec 0c             	sub    esp,0xc
c0026099:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002609d:	83 ec 0c             	sub    esp,0xc
c00260a0:	50                   	push   eax
c00260a1:	e8 cb 0f 00 00       	call   c0027071 <x87Save>
c00260a6:	83 c4 10             	add    esp,0x10
c00260a9:	90                   	nop
c00260aa:	83 c4 0c             	add    esp,0xc
c00260ad:	c3                   	ret    

c00260ae <x87::load(void*)>:
c00260ae:	83 ec 0c             	sub    esp,0xc
c00260b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260b5:	83 ec 0c             	sub    esp,0xc
c00260b8:	50                   	push   eax
c00260b9:	e8 bc 0f 00 00       	call   c002707a <x87Load>
c00260be:	83 c4 10             	add    esp,0x10
c00260c1:	90                   	nop
c00260c2:	83 c4 0c             	add    esp,0xc
c00260c5:	c3                   	ret    

c00260c6 <x87::x87()>:
c00260c6:	83 ec 0c             	sub    esp,0xc
c00260c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260cd:	83 ec 08             	sub    esp,0x8
c00260d0:	68 4c dd 02 c0       	push   0xc002dd4c
c00260d5:	50                   	push   eax
c00260d6:	e8 f5 e6 fe ff       	call   c00147d0 <FPU::FPU(char const*)>
c00260db:	83 c4 10             	add    esp,0x10
c00260de:	ba 5c dd 02 c0       	mov    edx,0xc002dd5c
c00260e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e7:	89 10                	mov    DWORD PTR [eax],edx
c00260e9:	90                   	nop
c00260ea:	83 c4 0c             	add    esp,0xc
c00260ed:	c3                   	ret    

c00260ee <APIC::disable()>:
c00260ee:	90                   	nop
c00260ef:	c3                   	ret    

c00260f0 <APIC::close(int, int, void*)>:
c00260f0:	55                   	push   ebp
c00260f1:	89 e5                	mov    ebp,esp
c00260f3:	83 ec 08             	sub    esp,0x8
c00260f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00260fb:	83 c0 3c             	add    eax,0x3c
c00260fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0026100:	83 ec 0c             	sub    esp,0xc
c0026103:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026106:	ff d0                	call   eax
c0026108:	83 c4 10             	add    esp,0x10
c002610b:	b8 00 00 00 00       	mov    eax,0x0
c0026110:	c9                   	leave  
c0026111:	c3                   	ret    

c0026112 <IOAPIC::close(int, int, void*)>:
c0026112:	b8 00 00 00 00       	mov    eax,0x0
c0026117:	c3                   	ret    

c0026118 <APIC::io_wait()>:
c0026118:	eb 00                	jmp    c002611a <APIC::io_wait()+0x2>
c002611a:	eb 00                	jmp    c002611c <APIC::io_wait()+0x4>
c002611c:	90                   	nop
c002611d:	c3                   	ret    

c002611e <APIC::getBase()>:
c002611e:	55                   	push   ebp
c002611f:	89 e5                	mov    ebp,esp
c0026121:	83 ec 18             	sub    esp,0x18
c0026124:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0026129:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002612f:	83 e0 08             	and    eax,0x8
c0026132:	84 c0                	test   al,al
c0026134:	75 07                	jne    c002613d <APIC::getBase()+0x1f>
c0026136:	b8 00 00 00 00       	mov    eax,0x0
c002613b:	eb 21                	jmp    c002615e <APIC::getBase()+0x40>
c002613d:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0026142:	83 ec 08             	sub    esp,0x8
c0026145:	6a 1b                	push   0x1b
c0026147:	50                   	push   eax
c0026148:	e8 4d 8d fe ff       	call   c000ee9a <Computer::rdmsr(unsigned int)>
c002614d:	83 c4 10             	add    esp,0x10
c0026150:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026153:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026156:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026159:	25 00 f0 ff ff       	and    eax,0xfffff000
c002615e:	c9                   	leave  
c002615f:	c3                   	ret    

c0026160 <APIC::eoi(unsigned char)>:
c0026160:	55                   	push   ebp
c0026161:	89 e5                	mov    ebp,esp
c0026163:	83 ec 28             	sub    esp,0x28
c0026166:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026169:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002616c:	83 ec 0c             	sub    esp,0xc
c002616f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026172:	e8 a7 ff ff ff       	call   c002611e <APIC::getBase()>
c0026177:	83 c4 10             	add    esp,0x10
c002617a:	05 b0 00 00 00       	add    eax,0xb0
c002617f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026182:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026185:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002618b:	90                   	nop
c002618c:	c9                   	leave  
c002618d:	c3                   	ret    

c002618e <APIC::open(int, int, void*)>:
c002618e:	55                   	push   ebp
c002618f:	89 e5                	mov    ebp,esp
c0026191:	57                   	push   edi
c0026192:	56                   	push   esi
c0026193:	53                   	push   ebx
c0026194:	83 ec 2c             	sub    esp,0x2c
c0026197:	83 ec 0c             	sub    esp,0xc
c002619a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002619d:	e8 7c ff ff ff       	call   c002611e <APIC::getBase()>
c00261a2:	83 c4 10             	add    esp,0x10
c00261a5:	89 c2                	mov    edx,eax
c00261a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261aa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00261b0:	0f b6 f8             	movzx  edi,al
c00261b3:	89 d0                	mov    eax,edx
c00261b5:	ba 00 00 00 00       	mov    edx,0x0
c00261ba:	89 c1                	mov    ecx,eax
c00261bc:	80 e5 ff             	and    ch,0xff
c00261bf:	89 cb                	mov    ebx,ecx
c00261c1:	0f b6 f2             	movzx  esi,dl
c00261c4:	89 d8                	mov    eax,ebx
c00261c6:	89 f2                	mov    edx,esi
c00261c8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00261cb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00261ce:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00261d2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00261d6:	83 e0 00             	and    eax,0x0
c00261d9:	09 d0                	or     eax,edx
c00261db:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00261df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261e2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00261e8:	8d 50 01             	lea    edx,[eax+0x1]
c00261eb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00261ee:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00261f4:	0f b6 d0             	movzx  edx,al
c00261f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261fa:	83 c2 08             	add    edx,0x8
c00261fd:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026201:	0f b6 c9             	movzx  ecx,cl
c0026204:	81 c9 00 00 01 00    	or     ecx,0x10000
c002620a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002620e:	83 ec 0c             	sub    esp,0xc
c0026211:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026214:	e8 05 ff ff ff       	call   c002611e <APIC::getBase()>
c0026219:	83 c4 10             	add    esp,0x10
c002621c:	05 f0 00 00 00       	add    eax,0xf0
c0026221:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026224:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026227:	8b 00                	mov    eax,DWORD PTR [eax]
c0026229:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002622c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026233:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002623a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002623d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026240:	89 10                	mov    DWORD PTR [eax],edx
c0026242:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0026249:	a1 90 19 03 c0       	mov    eax,ds:0xc0031990
c002624e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026251:	7d 7c                	jge    c00262cf <APIC::open(int, int, void*)+0x141>
c0026253:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026256:	8b 04 85 a0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce660]
c002625d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026260:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026263:	8b 04 85 a0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce660]
c002626a:	c1 e8 08             	shr    eax,0x8
c002626d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026271:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026274:	8b 04 85 a0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce660]
c002627b:	c1 e8 18             	shr    eax,0x18
c002627e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026281:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026285:	75 40                	jne    c00262c7 <APIC::open(int, int, void*)+0x139>
c0026287:	83 ec 0c             	sub    esp,0xc
c002628a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002628d:	e8 8c fe ff ff       	call   c002611e <APIC::getBase()>
c0026292:	83 c4 10             	add    esp,0x10
c0026295:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0026299:	75 07                	jne    c00262a2 <APIC::open(int, int, void*)+0x114>
c002629b:	ba 60 03 00 00       	mov    edx,0x360
c00262a0:	eb 05                	jmp    c00262a7 <APIC::open(int, int, void*)+0x119>
c00262a2:	ba 50 03 00 00       	mov    edx,0x350
c00262a7:	01 d0                	add    eax,edx
c00262a9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00262ac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00262af:	8b 00                	mov    eax,DWORD PTR [eax]
c00262b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00262b4:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00262bb:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00262bf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00262c2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00262c5:	89 10                	mov    DWORD PTR [eax],edx
c00262c7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00262ca:	e9 7a ff ff ff       	jmp    c0026249 <APIC::open(int, int, void*)+0xbb>
c00262cf:	b8 00 00 00 00       	mov    eax,0x0
c00262d4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00262d7:	5b                   	pop    ebx
c00262d8:	5e                   	pop    esi
c00262d9:	5f                   	pop    edi
c00262da:	5d                   	pop    ebp
c00262db:	c3                   	ret    

c00262dc <IOAPIC::IOAPIC()>:
c00262dc:	83 ec 0c             	sub    esp,0xc
c00262df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e3:	83 ec 08             	sub    esp,0x8
c00262e6:	68 8c dd 02 c0       	push   0xc002dd8c
c00262eb:	50                   	push   eax
c00262ec:	e8 bf e1 fe ff       	call   c00144b0 <Device::Device(char const*)>
c00262f1:	83 c4 10             	add    esp,0x10
c00262f4:	ba b4 de 02 c0       	mov    edx,0xc002deb4
c00262f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262fd:	89 10                	mov    DWORD PTR [eax],edx
c00262ff:	90                   	nop
c0026300:	83 c4 0c             	add    esp,0xc
c0026303:	c3                   	ret    

c0026304 <APIC::APIC()>:
c0026304:	53                   	push   ebx
c0026305:	83 ec 18             	sub    esp,0x18
c0026308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002630c:	83 ec 08             	sub    esp,0x8
c002630f:	68 94 dd 02 c0       	push   0xc002dd94
c0026314:	50                   	push   eax
c0026315:	e8 10 e9 fe ff       	call   c0014c2a <InterruptController::InterruptController(char const*)>
c002631a:	83 c4 10             	add    esp,0x10
c002631d:	ba 6c de 02 c0       	mov    edx,0xc002de6c
c0026322:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026326:	89 10                	mov    DWORD PTR [eax],edx
c0026328:	a0 60 34 03 c0       	mov    al,ds:0xc0033460
c002632d:	83 f0 01             	xor    eax,0x1
c0026330:	84 c0                	test   al,al
c0026332:	0f 84 a1 00 00 00    	je     c00263d9 <APIC::APIC()+0xd5>
c0026338:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002633d:	a0 40 1a 03 c0       	mov    al,ds:0xc0031a40
c0026342:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0026346:	0f 83 86 00 00 00    	jae    c00263d2 <APIC::APIC()+0xce>
c002634c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0026354:	83 ec 0c             	sub    esp,0xc
c0026357:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002635b:	e8 94 95 fe ff       	call   c000f8f4 <malloc>
c0026360:	83 c4 10             	add    esp,0x10
c0026363:	89 c3                	mov    ebx,eax
c0026365:	83 ec 0c             	sub    esp,0xc
c0026368:	53                   	push   ebx
c0026369:	e8 6e ff ff ff       	call   c00262dc <IOAPIC::IOAPIC()>
c002636e:	83 c4 10             	add    esp,0x10
c0026371:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026375:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002637a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002637e:	89 14 85 40 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccbc0],edx
c0026385:	a1 20 34 03 c0       	mov    eax,ds:0xc0033420
c002638a:	40                   	inc    eax
c002638b:	a3 20 34 03 c0       	mov    ds:0xc0033420,eax
c0026390:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0026395:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002639b:	83 ec 08             	sub    esp,0x8
c002639e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00263a2:	50                   	push   eax
c00263a3:	e8 18 df fe ff       	call   c00142c0 <Device::addChild(Device*)>
c00263a8:	83 c4 10             	add    esp,0x10
c00263ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263af:	8b 00                	mov    eax,DWORD PTR [eax]
c00263b1:	83 c0 08             	add    eax,0x8
c00263b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00263b6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00263bb:	6a 00                	push   0x0
c00263bd:	6a 00                	push   0x0
c00263bf:	52                   	push   edx
c00263c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00263c4:	ff d0                	call   eax
c00263c6:	83 c4 10             	add    esp,0x10
c00263c9:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00263cd:	e9 6b ff ff ff       	jmp    c002633d <APIC::APIC()+0x39>
c00263d2:	c6 05 60 34 03 c0 01 	mov    BYTE PTR ds:0xc0033460,0x1
c00263d9:	90                   	nop
c00263da:	83 c4 18             	add    esp,0x18
c00263dd:	5b                   	pop    ebx
c00263de:	c3                   	ret    
c00263df:	90                   	nop

c00263e0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00263e0:	55                   	push   ebp
c00263e1:	89 e5                	mov    ebp,esp
c00263e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263ec:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00263ef:	72 1d                	jb     c002640e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00263f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263f4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00263fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263fd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026403:	01 d0                	add    eax,edx
c0026405:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026408:	73 04                	jae    c002640e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002640a:	b0 01                	mov    al,0x1
c002640c:	eb 02                	jmp    c0026410 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002640e:	b0 00                	mov    al,0x0
c0026410:	5d                   	pop    ebp
c0026411:	c3                   	ret    

c0026412 <IOAPIC::read(int)>:
c0026412:	55                   	push   ebp
c0026413:	89 e5                	mov    ebp,esp
c0026415:	83 ec 10             	sub    esp,0x10
c0026418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002641b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026421:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026424:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026427:	0f b6 d0             	movzx  edx,al
c002642a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002642d:	89 10                	mov    DWORD PTR [eax],edx
c002642f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026432:	83 c0 10             	add    eax,0x10
c0026435:	8b 00                	mov    eax,DWORD PTR [eax]
c0026437:	c9                   	leave  
c0026438:	c3                   	ret    
c0026439:	90                   	nop

c002643a <IOAPIC::open(int, int, void*)>:
c002643a:	55                   	push   ebp
c002643b:	89 e5                	mov    ebp,esp
c002643d:	57                   	push   edi
c002643e:	56                   	push   esi
c002643f:	53                   	push   ebx
c0026440:	83 ec 0c             	sub    esp,0xc
c0026443:	83 ec 0c             	sub    esp,0xc
c0026446:	68 bf dd 02 c0       	push   0xc002ddbf
c002644b:	e8 4f ca fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0026450:	83 c4 10             	add    esp,0x10
c0026453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026456:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026459:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002645f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026462:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026468:	8b 14 85 80 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce580]
c002646f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026472:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002647b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026481:	8b 14 85 00 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce500]
c0026488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002648b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026494:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002649a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002649d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264a3:	0f b6 f8             	movzx  edi,al
c00264a6:	89 d0                	mov    eax,edx
c00264a8:	ba 00 00 00 00       	mov    edx,0x0
c00264ad:	89 c1                	mov    ecx,eax
c00264af:	80 e5 ff             	and    ch,0xff
c00264b2:	89 cb                	mov    ebx,ecx
c00264b4:	0f b6 f2             	movzx  esi,dl
c00264b7:	89 d8                	mov    eax,ebx
c00264b9:	89 f2                	mov    edx,esi
c00264bb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00264be:	8d 5f 08             	lea    ebx,[edi+0x8]
c00264c1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00264c5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00264c9:	83 e0 00             	and    eax,0x0
c00264cc:	09 d0                	or     eax,edx
c00264ce:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00264d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264d5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264db:	8d 50 01             	lea    edx,[eax+0x1]
c00264de:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00264e1:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00264e7:	0f b6 d0             	movzx  edx,al
c00264ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264ed:	83 c2 08             	add    edx,0x8
c00264f0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264f4:	0f b6 c9             	movzx  ecx,cl
c00264f7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00264fd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026501:	83 ec 08             	sub    esp,0x8
c0026504:	6a 01                	push   0x1
c0026506:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026509:	e8 04 ff ff ff       	call   c0026412 <IOAPIC::read(int)>
c002650e:	83 c4 10             	add    esp,0x10
c0026511:	c1 f8 10             	sar    eax,0x10
c0026514:	0f b6 c0             	movzx  eax,al
c0026517:	8d 50 01             	lea    edx,[eax+0x1]
c002651a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002651d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026523:	b8 00 00 00 00       	mov    eax,0x0
c0026528:	8d 65 f4             	lea    esp,[ebp-0xc]
c002652b:	5b                   	pop    ebx
c002652c:	5e                   	pop    esi
c002652d:	5f                   	pop    edi
c002652e:	5d                   	pop    ebp
c002652f:	c3                   	ret    

c0026530 <IOAPIC::write(int, int)>:
c0026530:	55                   	push   ebp
c0026531:	89 e5                	mov    ebp,esp
c0026533:	83 ec 10             	sub    esp,0x10
c0026536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026539:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002653f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026542:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026545:	0f b6 d0             	movzx  edx,al
c0026548:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002654b:	89 10                	mov    DWORD PTR [eax],edx
c002654d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026550:	8d 50 10             	lea    edx,[eax+0x10]
c0026553:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026556:	89 02                	mov    DWORD PTR [edx],eax
c0026558:	90                   	nop
c0026559:	c9                   	leave  
c002655a:	c3                   	ret    
c002655b:	90                   	nop

c002655c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002655c:	55                   	push   ebp
c002655d:	89 e5                	mov    ebp,esp
c002655f:	53                   	push   ebx
c0026560:	83 ec 2c             	sub    esp,0x2c
c0026563:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026566:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0026569:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002656c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002656f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026572:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026575:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026578:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002657b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002657e:	88 d8                	mov    al,bl
c0026580:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026583:	88 c8                	mov    al,cl
c0026585:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026588:	88 d0                	mov    al,dl
c002658a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002658d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026591:	83 c0 08             	add    eax,0x8
c0026594:	01 c0                	add    eax,eax
c0026596:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026599:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002659d:	83 c0 08             	add    eax,0x8
c00265a0:	01 c0                	add    eax,eax
c00265a2:	40                   	inc    eax
c00265a3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265a6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00265a9:	50                   	push   eax
c00265aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265ad:	e8 60 fe ff ff       	call   c0026412 <IOAPIC::read(int)>
c00265b2:	83 c4 08             	add    esp,0x8
c00265b5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00265b8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00265bf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00265c2:	c1 e0 18             	shl    eax,0x18
c00265c5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00265c8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00265cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00265ce:	52                   	push   edx
c00265cf:	50                   	push   eax
c00265d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265d3:	e8 58 ff ff ff       	call   c0026530 <IOAPIC::write(int, int)>
c00265d8:	83 c4 0c             	add    esp,0xc
c00265db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00265de:	50                   	push   eax
c00265df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265e2:	e8 2b fe ff ff       	call   c0026412 <IOAPIC::read(int)>
c00265e7:	83 c4 08             	add    esp,0x8
c00265ea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00265ed:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00265f4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00265fb:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026602:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026606:	74 09                	je     c0026611 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026608:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002660f:	eb 07                	jmp    c0026618 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026611:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026618:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002661c:	74 09                	je     c0026627 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002661e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026625:	eb 07                	jmp    c002662e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026627:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002662e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026635:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026639:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002663c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002663f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026642:	52                   	push   edx
c0026643:	50                   	push   eax
c0026644:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026647:	e8 e4 fe ff ff       	call   c0026530 <IOAPIC::write(int, int)>
c002664c:	83 c4 0c             	add    esp,0xc
c002664f:	90                   	nop
c0026650:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026653:	c9                   	leave  
c0026654:	c3                   	ret    
c0026655:	90                   	nop

c0026656 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026656:	55                   	push   ebp
c0026657:	89 e5                	mov    ebp,esp
c0026659:	57                   	push   edi
c002665a:	56                   	push   esi
c002665b:	53                   	push   ebx
c002665c:	83 ec 2c             	sub    esp,0x2c
c002665f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026662:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026665:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026669:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002666d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026671:	74 5a                	je     c00266cd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026673:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026677:	7f 44                	jg     c00266bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0026679:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002667c:	05 00 e3 02 c0       	add    eax,0xc002e300
c0026681:	8a 00                	mov    al,BYTE PTR [eax]
c0026683:	0f b6 c0             	movzx  eax,al
c0026686:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026689:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002668c:	66 8b 84 00 20 1a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce5e0]
c0026694:	0f b7 c0             	movzx  eax,ax
c0026697:	83 e0 02             	and    eax,0x2
c002669a:	85 c0                	test   eax,eax
c002669c:	74 04                	je     c00266a2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002669e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00266a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00266a5:	66 8b 84 00 20 1a 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce5e0]
c00266ad:	0f b7 c0             	movzx  eax,ax
c00266b0:	83 e0 08             	and    eax,0x8
c00266b3:	85 c0                	test   eax,eax
c00266b5:	74 16                	je     c00266cd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00266b7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00266bb:	eb 10                	jmp    c00266cd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00266bd:	83 ec 0c             	sub    esp,0xc
c00266c0:	68 d0 dd 02 c0       	push   0xc002ddd0
c00266c5:	e8 bd 41 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00266ca:	83 c4 10             	add    esp,0x10
c00266cd:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00266d1:	a1 20 34 03 c0       	mov    eax,ds:0xc0033420
c00266d6:	83 ec 08             	sub    esp,0x8
c00266d9:	50                   	push   eax
c00266da:	68 08 de 02 c0       	push   0xc002de08
c00266df:	e8 bb c7 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00266e4:	83 c4 10             	add    esp,0x10
c00266e7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00266ee:	a1 20 34 03 c0       	mov    eax,ds:0xc0033420
c00266f3:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00266f6:	7d 67                	jge    c002675f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00266f8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266fb:	8b 04 85 40 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccbc0]
c0026702:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026705:	83 ec 08             	sub    esp,0x8
c0026708:	52                   	push   edx
c0026709:	50                   	push   eax
c002670a:	e8 d1 fc ff ff       	call   c00263e0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002670f:	83 c4 10             	add    esp,0x10
c0026712:	84 c0                	test   al,al
c0026714:	74 44                	je     c002675a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026716:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026719:	8b 1c 85 40 34 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccbc0]
c0026720:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026724:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026727:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002672b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002672e:	83 c0 20             	add    eax,0x20
c0026731:	0f b6 f0             	movzx  esi,al
c0026734:	b8 00 00 00 00       	mov    eax,0x0
c0026739:	99                   	cdq    
c002673a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002673d:	0f b6 c9             	movzx  ecx,cl
c0026740:	83 ec 04             	sub    esp,0x4
c0026743:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026746:	57                   	push   edi
c0026747:	56                   	push   esi
c0026748:	52                   	push   edx
c0026749:	50                   	push   eax
c002674a:	51                   	push   ecx
c002674b:	53                   	push   ebx
c002674c:	e8 0b fe ff ff       	call   c002655c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026751:	83 c4 20             	add    esp,0x20
c0026754:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0026758:	eb 05                	jmp    c002675f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002675a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002675d:	eb 8f                	jmp    c00266ee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002675f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026762:	83 f0 01             	xor    eax,0x1
c0026765:	84 c0                	test   al,al
c0026767:	74 10                	je     c0026779 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026769:	83 ec 0c             	sub    esp,0xc
c002676c:	68 1f de 02 c0       	push   0xc002de1f
c0026771:	e8 11 41 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0026776:	83 c4 10             	add    esp,0x10
c0026779:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002677d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026784:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026788:	7f 65                	jg     c00267ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002678a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002678d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026790:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026797:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002679a:	01 ca                	add    edx,ecx
c002679c:	83 c2 54             	add    edx,0x54
c002679f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00267a3:	85 c0                	test   eax,eax
c00267a5:	75 43                	jne    c00267ea <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00267a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00267ad:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00267b4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00267b7:	01 ca                	add    edx,ecx
c00267b9:	8d 4a 54             	lea    ecx,[edx+0x54]
c00267bc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00267bf:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00267c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00267c9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00267d0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00267d3:	01 ca                	add    edx,ecx
c00267d5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00267db:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00267de:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00267e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267e5:	83 e8 20             	sub    eax,0x20
c00267e8:	eb 1a                	jmp    c0026804 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00267ea:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00267ed:	eb 95                	jmp    c0026784 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00267ef:	83 ec 0c             	sub    esp,0xc
c00267f2:	68 2c de 02 c0       	push   0xc002de2c
c00267f7:	e8 8b 40 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00267fc:	83 c4 10             	add    esp,0x10
c00267ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026804:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026807:	5b                   	pop    ebx
c0026808:	5e                   	pop    esi
c0026809:	5f                   	pop    edi
c002680a:	5d                   	pop    ebp
c002680b:	c3                   	ret    

c002680c <PIC::disable()>:
c002680c:	55                   	push   ebp
c002680d:	89 e5                	mov    ebp,esp
c002680f:	83 ec 10             	sub    esp,0x10
c0026812:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026818:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002681c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002681f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026823:	ee                   	out    dx,al
c0026824:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002682a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002682e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026831:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026835:	ee                   	out    dx,al
c0026836:	90                   	nop
c0026837:	c9                   	leave  
c0026838:	c3                   	ret    
c0026839:	90                   	nop

c002683a <PIC::close(int, int, void*)>:
c002683a:	55                   	push   ebp
c002683b:	89 e5                	mov    ebp,esp
c002683d:	83 ec 08             	sub    esp,0x8
c0026840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026843:	8b 00                	mov    eax,DWORD PTR [eax]
c0026845:	83 c0 3c             	add    eax,0x3c
c0026848:	8b 00                	mov    eax,DWORD PTR [eax]
c002684a:	83 ec 0c             	sub    esp,0xc
c002684d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026850:	ff d0                	call   eax
c0026852:	83 c4 10             	add    esp,0x10
c0026855:	b8 00 00 00 00       	mov    eax,0x0
c002685a:	c9                   	leave  
c002685b:	c3                   	ret    

c002685c <PIC::PIC()>:
c002685c:	83 ec 0c             	sub    esp,0xc
c002685f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026863:	83 ec 08             	sub    esp,0x8
c0026866:	68 d8 de 02 c0       	push   0xc002ded8
c002686b:	50                   	push   eax
c002686c:	e8 b9 e3 fe ff       	call   c0014c2a <InterruptController::InterruptController(char const*)>
c0026871:	83 c4 10             	add    esp,0x10
c0026874:	ba 04 df 02 c0       	mov    edx,0xc002df04
c0026879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002687d:	89 10                	mov    DWORD PTR [eax],edx
c002687f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026889:	0f b6 d0             	movzx  edx,al
c002688c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026890:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002689b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268a1:	0f b6 d0             	movzx  edx,al
c00268a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268a8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00268ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268b7:	8d 50 01             	lea    edx,[eax+0x1]
c00268ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00268c4:	0f b6 d0             	movzx  edx,al
c00268c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00268cf:	83 e1 3f             	and    ecx,0x3f
c00268d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00268d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268e0:	0f b6 d0             	movzx  edx,al
c00268e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268e7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00268ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00268f8:	0f b6 d0             	movzx  edx,al
c00268fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002690e:	8d 50 01             	lea    edx,[eax+0x1]
c0026911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002691b:	0f b6 d0             	movzx  edx,al
c002691e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026926:	83 e1 3f             	and    ecx,0x3f
c0026929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002692d:	90                   	nop
c002692e:	83 c4 0c             	add    esp,0xc
c0026931:	c3                   	ret    

c0026932 <PIC::ioWait()>:
c0026932:	eb 00                	jmp    c0026934 <PIC::ioWait()+0x2>
c0026934:	eb 00                	jmp    c0026936 <PIC::ioWait()+0x4>
c0026936:	90                   	nop
c0026937:	c3                   	ret    

c0026938 <PIC::getIRQReg(int)>:
c0026938:	55                   	push   ebp
c0026939:	89 e5                	mov    ebp,esp
c002693b:	83 ec 10             	sub    esp,0x10
c002693e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026941:	0f b6 c0             	movzx  eax,al
c0026944:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002694a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002694d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026950:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026954:	ee                   	out    dx,al
c0026955:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026958:	0f b6 c0             	movzx  eax,al
c002695b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026961:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026964:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026967:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002696b:	ee                   	out    dx,al
c002696c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026972:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026976:	89 c2                	mov    edx,eax
c0026978:	ec                   	in     al,dx
c0026979:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002697c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002697f:	0f b6 c0             	movzx  eax,al
c0026982:	c1 e0 08             	shl    eax,0x8
c0026985:	89 c1                	mov    ecx,eax
c0026987:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002698d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026991:	89 c2                	mov    edx,eax
c0026993:	ec                   	in     al,dx
c0026994:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026997:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002699a:	0f b6 c0             	movzx  eax,al
c002699d:	09 c8                	or     eax,ecx
c002699f:	c9                   	leave  
c00269a0:	c3                   	ret    
c00269a1:	90                   	nop

c00269a2 <PIC::eoi(unsigned char)>:
c00269a2:	55                   	push   ebp
c00269a3:	89 e5                	mov    ebp,esp
c00269a5:	83 ec 14             	sub    esp,0x14
c00269a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269ab:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00269ae:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00269b2:	75 1e                	jne    c00269d2 <PIC::eoi(unsigned char)+0x30>
c00269b4:	6a 0b                	push   0xb
c00269b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269b9:	e8 7a ff ff ff       	call   c0026938 <PIC::getIRQReg(int)>
c00269be:	83 c4 08             	add    esp,0x8
c00269c1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00269c5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00269c9:	25 80 00 00 00       	and    eax,0x80
c00269ce:	85 c0                	test   eax,eax
c00269d0:	74 5f                	je     c0026a31 <PIC::eoi(unsigned char)+0x8f>
c00269d2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00269d6:	75 2d                	jne    c0026a05 <PIC::eoi(unsigned char)+0x63>
c00269d8:	6a 0b                	push   0xb
c00269da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269dd:	e8 56 ff ff ff       	call   c0026938 <PIC::getIRQReg(int)>
c00269e2:	83 c4 08             	add    esp,0x8
c00269e5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00269e9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00269ec:	66 85 c0             	test   ax,ax
c00269ef:	78 14                	js     c0026a05 <PIC::eoi(unsigned char)+0x63>
c00269f1:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00269f7:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00269fb:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00269fe:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026a02:	ee                   	out    dx,al
c0026a03:	eb 2d                	jmp    c0026a32 <PIC::eoi(unsigned char)+0x90>
c0026a05:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026a09:	76 12                	jbe    c0026a1d <PIC::eoi(unsigned char)+0x7b>
c0026a0b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026a11:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026a15:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a18:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a1c:	ee                   	out    dx,al
c0026a1d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026a23:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026a27:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a2a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a2e:	ee                   	out    dx,al
c0026a2f:	eb 01                	jmp    c0026a32 <PIC::eoi(unsigned char)+0x90>
c0026a31:	90                   	nop
c0026a32:	c9                   	leave  
c0026a33:	c3                   	ret    

c0026a34 <PIC::remap()>:
c0026a34:	55                   	push   ebp
c0026a35:	89 e5                	mov    ebp,esp
c0026a37:	83 ec 48             	sub    esp,0x48
c0026a3a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026a41:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026a48:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026a4e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026a51:	89 c2                	mov    edx,eax
c0026a53:	ec                   	in     al,dx
c0026a54:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026a57:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026a5a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026a5d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026a63:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026a66:	89 c2                	mov    edx,eax
c0026a68:	ec                   	in     al,dx
c0026a69:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026a6c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026a6f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026a72:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026a78:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026a7c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026a7f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026a82:	ee                   	out    dx,al
c0026a83:	83 ec 0c             	sub    esp,0xc
c0026a86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a89:	e8 a4 fe ff ff       	call   c0026932 <PIC::ioWait()>
c0026a8e:	83 c4 10             	add    esp,0x10
c0026a91:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026a97:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026a9b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026a9e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026aa1:	ee                   	out    dx,al
c0026aa2:	83 ec 0c             	sub    esp,0xc
c0026aa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026aa8:	e8 85 fe ff ff       	call   c0026932 <PIC::ioWait()>
c0026aad:	83 c4 10             	add    esp,0x10
c0026ab0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026ab3:	0f b6 c0             	movzx  eax,al
c0026ab6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026abc:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026abf:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026ac2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026ac5:	ee                   	out    dx,al
c0026ac6:	83 ec 0c             	sub    esp,0xc
c0026ac9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026acc:	e8 61 fe ff ff       	call   c0026932 <PIC::ioWait()>
c0026ad1:	83 c4 10             	add    esp,0x10
c0026ad4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ad7:	0f b6 c0             	movzx  eax,al
c0026ada:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026ae0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026ae3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026ae6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026ae9:	ee                   	out    dx,al
c0026aea:	83 ec 0c             	sub    esp,0xc
c0026aed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026af0:	e8 3d fe ff ff       	call   c0026932 <PIC::ioWait()>
c0026af5:	83 c4 10             	add    esp,0x10
c0026af8:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026afe:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026b02:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026b05:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026b08:	ee                   	out    dx,al
c0026b09:	83 ec 0c             	sub    esp,0xc
c0026b0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b0f:	e8 1e fe ff ff       	call   c0026932 <PIC::ioWait()>
c0026b14:	83 c4 10             	add    esp,0x10
c0026b17:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026b1d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026b21:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026b24:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026b27:	ee                   	out    dx,al
c0026b28:	83 ec 0c             	sub    esp,0xc
c0026b2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b2e:	e8 ff fd ff ff       	call   c0026932 <PIC::ioWait()>
c0026b33:	83 c4 10             	add    esp,0x10
c0026b36:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026b3c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026b40:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026b43:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026b46:	ee                   	out    dx,al
c0026b47:	83 ec 0c             	sub    esp,0xc
c0026b4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b4d:	e8 e0 fd ff ff       	call   c0026932 <PIC::ioWait()>
c0026b52:	83 c4 10             	add    esp,0x10
c0026b55:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026b5b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026b5f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026b62:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026b65:	ee                   	out    dx,al
c0026b66:	83 ec 0c             	sub    esp,0xc
c0026b69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b6c:	e8 c1 fd ff ff       	call   c0026932 <PIC::ioWait()>
c0026b71:	83 c4 10             	add    esp,0x10
c0026b74:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026b78:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026b7e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026b81:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026b84:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026b87:	ee                   	out    dx,al
c0026b88:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026b8c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026b92:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026b95:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026b98:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026b9b:	ee                   	out    dx,al
c0026b9c:	90                   	nop
c0026b9d:	c9                   	leave  
c0026b9e:	c3                   	ret    
c0026b9f:	90                   	nop

c0026ba0 <PIC::open(int, int, void*)>:
c0026ba0:	55                   	push   ebp
c0026ba1:	89 e5                	mov    ebp,esp
c0026ba3:	83 ec 18             	sub    esp,0x18
c0026ba6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026bac:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026bb0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026bb3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026bb7:	ee                   	out    dx,al
c0026bb8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026bbe:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026bc2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026bc5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026bc9:	ee                   	out    dx,al
c0026bca:	83 ec 0c             	sub    esp,0xc
c0026bcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bd0:	e8 5f fe ff ff       	call   c0026a34 <PIC::remap()>
c0026bd5:	83 c4 10             	add    esp,0x10
c0026bd8:	b8 00 00 00 00       	mov    eax,0x0
c0026bdd:	c9                   	leave  
c0026bde:	c3                   	ret    
c0026bdf:	90                   	nop

c0026be0 <APICTimer::close(int, int, void*)>:
c0026be0:	b8 00 00 00 00       	mov    eax,0x0
c0026be5:	c3                   	ret    

c0026be6 <apicTimerHandler(regs*, void*)>:
c0026be6:	83 ec 0c             	sub    esp,0xc
c0026be9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bef:	99                   	cdq    
c0026bf0:	52                   	push   edx
c0026bf1:	50                   	push   eax
c0026bf2:	6a 00                	push   0x0
c0026bf4:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026bf9:	e8 96 07 00 00       	call   c0027394 <__udivdi3>
c0026bfe:	83 c4 10             	add    esp,0x10
c0026c01:	83 ec 08             	sub    esp,0x8
c0026c04:	52                   	push   edx
c0026c05:	50                   	push   eax
c0026c06:	e8 d4 01 ff ff       	call   c0016ddf <timerHandler(unsigned long long)>
c0026c0b:	83 c4 10             	add    esp,0x10
c0026c0e:	90                   	nop
c0026c0f:	83 c4 0c             	add    esp,0xc
c0026c12:	c3                   	ret    
c0026c13:	90                   	nop

c0026c14 <APICTimer::write(int)>:
c0026c14:	53                   	push   ebx
c0026c15:	83 ec 28             	sub    esp,0x28
c0026c18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026c1c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026c20:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026c26:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0026c2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026c31:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026c37:	83 ec 0c             	sub    esp,0xc
c0026c3a:	50                   	push   eax
c0026c3b:	e8 de f4 ff ff       	call   c002611e <APIC::getBase()>
c0026c40:	83 c4 10             	add    esp,0x10
c0026c43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026c47:	a1 30 f7 02 c0       	mov    eax,ds:0xc002f730
c0026c4c:	8b 15 34 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f734
c0026c52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026c56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026c5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c5e:	05 e0 03 00 00       	add    eax,0x3e0
c0026c63:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c6d:	05 80 03 00 00       	add    eax,0x380
c0026c72:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026c78:	fb                   	sti    
c0026c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026c81:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026c86:	83 d2 00             	adc    edx,0x0
c0026c89:	89 c1                	mov    ecx,eax
c0026c8b:	89 d3                	mov    ebx,edx
c0026c8d:	a1 30 f7 02 c0       	mov    eax,ds:0xc002f730
c0026c92:	8b 15 34 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f734
c0026c98:	39 c8                	cmp    eax,ecx
c0026c9a:	89 d0                	mov    eax,edx
c0026c9c:	19 d8                	sbb    eax,ebx
c0026c9e:	73 02                	jae    c0026ca2 <APICTimer::write(int)+0x8e>
c0026ca0:	eb d7                	jmp    c0026c79 <APICTimer::write(int)+0x65>
c0026ca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ca6:	05 20 03 00 00       	add    eax,0x320
c0026cab:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026cb5:	05 90 03 00 00       	add    eax,0x390
c0026cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cbc:	f7 d0                	not    eax
c0026cbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cc2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026cc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cca:	ba 00 00 00 00       	mov    edx,0x0
c0026ccf:	f7 f3                	div    ebx
c0026cd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026cd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026cd9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026cdf:	0d 00 00 02 00       	or     eax,0x20000
c0026ce4:	89 c2                	mov    edx,eax
c0026ce6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026cea:	05 20 03 00 00       	add    eax,0x320
c0026cef:	89 10                	mov    DWORD PTR [eax],edx
c0026cf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026cf5:	05 e0 03 00 00       	add    eax,0x3e0
c0026cfa:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026d00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d04:	05 80 03 00 00       	add    eax,0x380
c0026d09:	89 c2                	mov    edx,eax
c0026d0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026d0f:	89 02                	mov    DWORD PTR [edx],eax
c0026d11:	90                   	nop
c0026d12:	83 c4 28             	add    esp,0x28
c0026d15:	5b                   	pop    ebx
c0026d16:	c3                   	ret    
c0026d17:	90                   	nop

c0026d18 <APICTimer::open(int, int, void*)>:
c0026d18:	57                   	push   edi
c0026d19:	56                   	push   esi
c0026d1a:	53                   	push   ebx
c0026d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d21:	83 c0 24             	add    eax,0x24
c0026d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d26:	83 ec 08             	sub    esp,0x8
c0026d29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d31:	ff d0                	call   eax
c0026d33:	83 c4 10             	add    esp,0x10
c0026d36:	a1 a8 f0 02 c0       	mov    eax,ds:0xc002f0a8
c0026d3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026d41:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026d47:	83 ec 0c             	sub    esp,0xc
c0026d4a:	50                   	push   eax
c0026d4b:	e8 ce f3 ff ff       	call   c002611e <APIC::getBase()>
c0026d50:	83 c4 10             	add    esp,0x10
c0026d53:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026d63:	0f b6 f8             	movzx  edi,al
c0026d66:	89 d0                	mov    eax,edx
c0026d68:	ba 00 00 00 00       	mov    edx,0x0
c0026d6d:	89 c1                	mov    ecx,eax
c0026d6f:	80 e5 ff             	and    ch,0xff
c0026d72:	89 cb                	mov    ebx,ecx
c0026d74:	0f b6 f2             	movzx  esi,dl
c0026d77:	89 d8                	mov    eax,ebx
c0026d79:	89 f2                	mov    edx,esi
c0026d7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026d7f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026d82:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026d86:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026d8a:	83 e0 00             	and    eax,0x0
c0026d8d:	09 d0                	or     eax,edx
c0026d8f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d97:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026d9d:	8d 50 01             	lea    edx,[eax+0x1]
c0026da0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026da4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026daa:	0f b6 d0             	movzx  edx,al
c0026dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db1:	83 c2 08             	add    edx,0x8
c0026db4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026db8:	0f b6 c9             	movzx  ecx,cl
c0026dbb:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026dc1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026dcd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026ddb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026de5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026deb:	83 ec 0c             	sub    esp,0xc
c0026dee:	51                   	push   ecx
c0026def:	6a 01                	push   0x1
c0026df1:	68 e6 6b 02 c0       	push   0xc0026be6
c0026df6:	52                   	push   edx
c0026df7:	50                   	push   eax
c0026df8:	e8 47 d4 fe ff       	call   c0014244 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026dfd:	83 c4 20             	add    esp,0x20
c0026e00:	89 c2                	mov    edx,eax
c0026e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e06:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026e0c:	b8 00 00 00 00       	mov    eax,0x0
c0026e11:	5b                   	pop    ebx
c0026e12:	5e                   	pop    esi
c0026e13:	5f                   	pop    edi
c0026e14:	c3                   	ret    
c0026e15:	90                   	nop

c0026e16 <APICTimer::APICTimer()>:
c0026e16:	83 ec 0c             	sub    esp,0xc
c0026e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e1d:	83 ec 08             	sub    esp,0x8
c0026e20:	68 44 df 02 c0       	push   0xc002df44
c0026e25:	50                   	push   eax
c0026e26:	e8 25 ff fe ff       	call   c0016d50 <Timer::Timer(char const*)>
c0026e2b:	83 c4 10             	add    esp,0x10
c0026e2e:	ba 58 df 02 c0       	mov    edx,0xc002df58
c0026e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e37:	89 10                	mov    DWORD PTR [eax],edx
c0026e39:	90                   	nop
c0026e3a:	83 c4 0c             	add    esp,0xc
c0026e3d:	c3                   	ret    

c0026e3e <PIT::write(int)>:
c0026e3e:	83 ec 10             	sub    esp,0x10
c0026e41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026e45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026e49:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026e4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026e53:	a3 64 34 03 c0       	mov    ds:0xc0033464,eax
c0026e58:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026e5d:	99                   	cdq    
c0026e5e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026e66:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026e6d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026e72:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026e76:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026e7b:	ee                   	out    dx,al
c0026e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026e80:	0f b6 c0             	movzx  eax,al
c0026e83:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026e8a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026e8e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026e92:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026e97:	ee                   	out    dx,al
c0026e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026e9c:	c1 f8 08             	sar    eax,0x8
c0026e9f:	0f b6 c0             	movzx  eax,al
c0026ea2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026ea9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026ead:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026eb1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026eb6:	ee                   	out    dx,al
c0026eb7:	90                   	nop
c0026eb8:	83 c4 10             	add    esp,0x10
c0026ebb:	c3                   	ret    

c0026ebc <pitHandler(regs*, void*)>:
c0026ebc:	83 ec 0c             	sub    esp,0xc
c0026ebf:	a1 64 34 03 c0       	mov    eax,ds:0xc0033464
c0026ec4:	99                   	cdq    
c0026ec5:	52                   	push   edx
c0026ec6:	50                   	push   eax
c0026ec7:	6a 00                	push   0x0
c0026ec9:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026ece:	e8 c1 04 00 00       	call   c0027394 <__udivdi3>
c0026ed3:	83 c4 10             	add    esp,0x10
c0026ed6:	83 ec 08             	sub    esp,0x8
c0026ed9:	52                   	push   edx
c0026eda:	50                   	push   eax
c0026edb:	e8 ff fe fe ff       	call   c0016ddf <timerHandler(unsigned long long)>
c0026ee0:	83 c4 10             	add    esp,0x10
c0026ee3:	90                   	nop
c0026ee4:	83 c4 0c             	add    esp,0xc
c0026ee7:	c3                   	ret    

c0026ee8 <PIT::open(int, int, void*)>:
c0026ee8:	83 ec 0c             	sub    esp,0xc
c0026eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eef:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ef1:	83 c0 24             	add    eax,0x24
c0026ef4:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ef6:	83 ec 08             	sub    esp,0x8
c0026ef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026efd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f01:	ff d0                	call   eax
c0026f03:	83 c4 10             	add    esp,0x10
c0026f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f0a:	83 ec 0c             	sub    esp,0xc
c0026f0d:	6a 00                	push   0x0
c0026f0f:	6a 01                	push   0x1
c0026f11:	68 bc 6e 02 c0       	push   0xc0026ebc
c0026f16:	6a 00                	push   0x0
c0026f18:	50                   	push   eax
c0026f19:	e8 26 d3 fe ff       	call   c0014244 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026f1e:	83 c4 20             	add    esp,0x20
c0026f21:	89 c2                	mov    edx,eax
c0026f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f27:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026f2d:	b8 00 00 00 00       	mov    eax,0x0
c0026f32:	83 c4 0c             	add    esp,0xc
c0026f35:	c3                   	ret    

c0026f36 <PIT::close(int, int, void*)>:
c0026f36:	83 ec 0c             	sub    esp,0xc
c0026f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f3d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f4b:	6a 01                	push   0x1
c0026f4d:	68 bc 6e 02 c0       	push   0xc0026ebc
c0026f52:	6a 00                	push   0x0
c0026f54:	50                   	push   eax
c0026f55:	e8 28 d3 fe ff       	call   c0014282 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026f5a:	83 c4 10             	add    esp,0x10
c0026f5d:	b8 00 00 00 00       	mov    eax,0x0
c0026f62:	83 c4 0c             	add    esp,0xc
c0026f65:	c3                   	ret    

c0026f66 <PIT::PIT()>:
c0026f66:	83 ec 0c             	sub    esp,0xc
c0026f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f6d:	83 ec 08             	sub    esp,0x8
c0026f70:	68 80 df 02 c0       	push   0xc002df80
c0026f75:	50                   	push   eax
c0026f76:	e8 d5 fd fe ff       	call   c0016d50 <Timer::Timer(char const*)>
c0026f7b:	83 c4 10             	add    esp,0x10
c0026f7e:	ba a8 df 02 c0       	mov    edx,0xc002dfa8
c0026f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f87:	89 10                	mov    DWORD PTR [eax],edx
c0026f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f8d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026f93:	0f b6 d0             	movzx  edx,al
c0026f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f9a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fa5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026fab:	0f b6 d0             	movzx  edx,al
c0026fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fb2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fbb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026fc1:	8d 50 01             	lea    edx,[eax+0x1]
c0026fc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026fc8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026fce:	0f b6 d0             	movzx  edx,al
c0026fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fd5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026fd9:	83 e1 3f             	and    ecx,0x3f
c0026fdc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026fe0:	90                   	nop
c0026fe1:	83 c4 0c             	add    esp,0xc
c0026fe4:	c3                   	ret    
c0026fe5:	66 90                	xchg   ax,ax
c0026fe7:	66 90                	xchg   ax,ax
c0026fe9:	66 90                	xchg   ax,ax
c0026feb:	66 90                	xchg   ax,ax
c0026fed:	66 90                	xchg   ax,ax
c0026fef:	90                   	nop

c0026ff0 <avxDetect>:
c0026ff0:	b8 00 00 00 00       	mov    eax,0x0
c0026ff5:	c3                   	ret    

c0026ff6 <avxSave>:
c0026ff6:	c3                   	ret    

c0026ff7 <avxLoad>:
c0026ff7:	c3                   	ret    

c0026ff8 <avxInit>:
c0026ff8:	c3                   	ret    

c0026ff9 <avxClose>:
c0026ff9:	c3                   	ret    

c0026ffa <wouldSheSayYes>:
c0026ffa:	c3                   	ret    
c0026ffb:	49                   	dec    ecx
c0026ffc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0027000:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0027004:	75 20                	jne    c0027026 <sseDetect.noSSE+0x1>
c0027006:	4e                   	dec    esi
c0027007:	79 61                	jns    c002706a <x87Detect+0x14>
c0027009:	68 2e 2e 2e 00       	push   0x2e2e2e
c002700e:	66 90                	xchg   ax,ax

c0027010 <absolutelyNoChanceInHell>:
c0027010:	b8 01 00 00 00       	mov    eax,0x1
c0027015:	0f a2                	cpuid  
c0027017:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002701d:	74 06                	je     c0027025 <sseDetect.noSSE>
c002701f:	b8 01 00 00 00       	mov    eax,0x1
c0027024:	c3                   	ret    

c0027025 <sseDetect.noSSE>:
c0027025:	31 c0                	xor    eax,eax
c0027027:	c3                   	ret    

c0027028 <sseSave>:
c0027028:	0f ae 44 24 04       	fxsave [esp+0x4]
c002702d:	c3                   	ret    

c002702e <sseLoad>:
c002702e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0027033:	c3                   	ret    

c0027034 <sseInit>:
c0027034:	e8 49 00 00 00       	call   c0027082 <x87Init>
c0027039:	0f 20 e0             	mov    eax,cr4
c002703c:	66 0d 00 06          	or     ax,0x600
c0027040:	0f 22 e0             	mov    cr4,eax
c0027043:	c3                   	ret    

c0027044 <sseClose>:
c0027044:	c3                   	ret    
c0027045:	66 90                	xchg   ax,ax
c0027047:	66 90                	xchg   ax,ax
c0027049:	66 90                	xchg   ax,ax
c002704b:	66 90                	xchg   ax,ax
c002704d:	66 90                	xchg   ax,ax
c002704f:	90                   	nop

c0027050 <value_37F>:
c0027050:	7f 03                	jg     c0027055 <value_37A+0x1>

c0027052 <value_37E>:
c0027052:	7e 03                	jle    c0027057 <x87Detect+0x1>

c0027054 <value_37A>:
c0027054:	7a 03                	jp     c0027059 <x87Detect+0x3>

c0027056 <x87Detect>:
c0027056:	b8 01 00 00 00       	mov    eax,0x1
c002705b:	0f a2                	cpuid  
c002705d:	f7 c2 01 00 00 00    	test   edx,0x1
c0027063:	74 06                	je     c002706b <x87Detect.nox87>
c0027065:	b8 01 00 00 00       	mov    eax,0x1
c002706a:	c3                   	ret    

c002706b <x87Detect.nox87>:
c002706b:	b8 00 00 00 00       	mov    eax,0x0
c0027070:	c3                   	ret    

c0027071 <x87Save>:
c0027071:	55                   	push   ebp
c0027072:	89 e5                	mov    ebp,esp
c0027074:	9b dd 75 08          	fsave  [ebp+0x8]
c0027078:	c9                   	leave  
c0027079:	c3                   	ret    

c002707a <x87Load>:
c002707a:	55                   	push   ebp
c002707b:	89 e5                	mov    ebp,esp
c002707d:	dd 65 08             	frstor [ebp+0x8]
c0027080:	c9                   	leave  
c0027081:	c3                   	ret    

c0027082 <x87Init>:
c0027082:	9b db e3             	finit  
c0027085:	0f 20 c0             	mov    eax,cr0
c0027088:	66 25 fb ff          	and    ax,0xfffb
c002708c:	66 0d 22 00          	or     ax,0x22
c0027090:	0f 22 c0             	mov    cr0,eax
c0027093:	0f 06                	clts   
c0027095:	d9 2d 54 70 02 c0    	fldcw  WORD PTR ds:0xc0027054
c002709b:	c3                   	ret    

c002709c <x87Close>:
c002709c:	c3                   	ret    
c002709d:	66 90                	xchg   ax,ax
c002709f:	90                   	nop

c00270a0 <__do_global_ctors_aux>:
c00270a0:	a1 d8 9c 02 c0       	mov    eax,ds:0xc0029cd8
c00270a5:	83 f8 ff             	cmp    eax,0xffffffff
c00270a8:	74 1a                	je     c00270c4 <__do_global_ctors_aux+0x24>
c00270aa:	55                   	push   ebp
c00270ab:	89 e5                	mov    ebp,esp
c00270ad:	53                   	push   ebx
c00270ae:	52                   	push   edx
c00270af:	bb d8 9c 02 c0       	mov    ebx,0xc0029cd8
c00270b4:	ff d0                	call   eax
c00270b6:	83 eb 04             	sub    ebx,0x4
c00270b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00270bb:	83 f8 ff             	cmp    eax,0xffffffff
c00270be:	75 f4                	jne    c00270b4 <__do_global_ctors_aux+0x14>
c00270c0:	58                   	pop    eax
c00270c1:	5b                   	pop    ebx
c00270c2:	5d                   	pop    ebp
c00270c3:	c3                   	ret    
c00270c4:	c3                   	ret    
c00270c5:	66 90                	xchg   ax,ax
c00270c7:	90                   	nop

c00270c8 <__divdi3>:
c00270c8:	55                   	push   ebp
c00270c9:	57                   	push   edi
c00270ca:	56                   	push   esi
c00270cb:	53                   	push   ebx
c00270cc:	83 ec 1c             	sub    esp,0x1c
c00270cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00270d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00270d7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00270da:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00270de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00270e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00270e6:	85 db                	test   ebx,ebx
c00270e8:	0f 88 8e 00 00 00    	js     c002717c <__divdi3+0xb4>
c00270ee:	89 dd                	mov    ebp,ebx
c00270f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00270f8:	89 d3                	mov    ebx,edx
c00270fa:	85 d2                	test   edx,edx
c00270fc:	79 0d                	jns    c002710b <__divdi3+0x43>
c00270fe:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027102:	f7 d8                	neg    eax
c0027104:	83 d2 00             	adc    edx,0x0
c0027107:	f7 da                	neg    edx
c0027109:	89 d3                	mov    ebx,edx
c002710b:	89 c7                	mov    edi,eax
c002710d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027110:	85 db                	test   ebx,ebx
c0027112:	75 48                	jne    c002715c <__divdi3+0x94>
c0027114:	39 ef                	cmp    edi,ebp
c0027116:	76 24                	jbe    c002713c <__divdi3+0x74>
c0027118:	89 ea                	mov    edx,ebp
c002711a:	f7 f7                	div    edi
c002711c:	89 c1                	mov    ecx,eax
c002711e:	31 f6                	xor    esi,esi
c0027120:	89 c8                	mov    eax,ecx
c0027122:	89 f2                	mov    edx,esi
c0027124:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027128:	85 c9                	test   ecx,ecx
c002712a:	74 07                	je     c0027133 <__divdi3+0x6b>
c002712c:	f7 d8                	neg    eax
c002712e:	83 d2 00             	adc    edx,0x0
c0027131:	f7 da                	neg    edx
c0027133:	83 c4 1c             	add    esp,0x1c
c0027136:	5b                   	pop    ebx
c0027137:	5e                   	pop    esi
c0027138:	5f                   	pop    edi
c0027139:	5d                   	pop    ebp
c002713a:	c3                   	ret    
c002713b:	90                   	nop
c002713c:	85 ff                	test   edi,edi
c002713e:	75 0b                	jne    c002714b <__divdi3+0x83>
c0027140:	b8 01 00 00 00       	mov    eax,0x1
c0027145:	31 d2                	xor    edx,edx
c0027147:	f7 f3                	div    ebx
c0027149:	89 c7                	mov    edi,eax
c002714b:	31 d2                	xor    edx,edx
c002714d:	89 e8                	mov    eax,ebp
c002714f:	f7 f7                	div    edi
c0027151:	89 c6                	mov    esi,eax
c0027153:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027156:	f7 f7                	div    edi
c0027158:	89 c1                	mov    ecx,eax
c002715a:	eb c4                	jmp    c0027120 <__divdi3+0x58>
c002715c:	39 eb                	cmp    ebx,ebp
c002715e:	77 3c                	ja     c002719c <__divdi3+0xd4>
c0027160:	0f bd f3             	bsr    esi,ebx
c0027163:	83 f6 1f             	xor    esi,0x1f
c0027166:	75 40                	jne    c00271a8 <__divdi3+0xe0>
c0027168:	39 eb                	cmp    ebx,ebp
c002716a:	72 09                	jb     c0027175 <__divdi3+0xad>
c002716c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002716f:	0f 87 97 00 00 00    	ja     c002720c <__divdi3+0x144>
c0027175:	b9 01 00 00 00       	mov    ecx,0x1
c002717a:	eb a4                	jmp    c0027120 <__divdi3+0x58>
c002717c:	f7 d9                	neg    ecx
c002717e:	83 d3 00             	adc    ebx,0x0
c0027181:	f7 db                	neg    ebx
c0027183:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027186:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002718a:	89 dd                	mov    ebp,ebx
c002718c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027194:	e9 5f ff ff ff       	jmp    c00270f8 <__divdi3+0x30>
c0027199:	8d 76 00             	lea    esi,[esi+0x0]
c002719c:	31 f6                	xor    esi,esi
c002719e:	31 c9                	xor    ecx,ecx
c00271a0:	e9 7b ff ff ff       	jmp    c0027120 <__divdi3+0x58>
c00271a5:	8d 76 00             	lea    esi,[esi+0x0]
c00271a8:	b8 20 00 00 00       	mov    eax,0x20
c00271ad:	29 f0                	sub    eax,esi
c00271af:	89 f1                	mov    ecx,esi
c00271b1:	d3 e3                	shl    ebx,cl
c00271b3:	89 fa                	mov    edx,edi
c00271b5:	88 c1                	mov    cl,al
c00271b7:	d3 ea                	shr    edx,cl
c00271b9:	09 da                	or     edx,ebx
c00271bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00271bf:	89 f1                	mov    ecx,esi
c00271c1:	d3 e7                	shl    edi,cl
c00271c3:	89 eb                	mov    ebx,ebp
c00271c5:	88 c1                	mov    cl,al
c00271c7:	d3 eb                	shr    ebx,cl
c00271c9:	89 f1                	mov    ecx,esi
c00271cb:	d3 e5                	shl    ebp,cl
c00271cd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00271d0:	88 c1                	mov    cl,al
c00271d2:	d3 ea                	shr    edx,cl
c00271d4:	09 d5                	or     ebp,edx
c00271d6:	89 e8                	mov    eax,ebp
c00271d8:	89 da                	mov    edx,ebx
c00271da:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00271de:	89 d3                	mov    ebx,edx
c00271e0:	89 c5                	mov    ebp,eax
c00271e2:	f7 e7                	mul    edi
c00271e4:	39 d3                	cmp    ebx,edx
c00271e6:	72 18                	jb     c0027200 <__divdi3+0x138>
c00271e8:	74 0a                	je     c00271f4 <__divdi3+0x12c>
c00271ea:	89 e9                	mov    ecx,ebp
c00271ec:	31 f6                	xor    esi,esi
c00271ee:	e9 2d ff ff ff       	jmp    c0027120 <__divdi3+0x58>
c00271f3:	90                   	nop
c00271f4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00271f7:	89 f1                	mov    ecx,esi
c00271f9:	d3 e7                	shl    edi,cl
c00271fb:	39 c7                	cmp    edi,eax
c00271fd:	73 eb                	jae    c00271ea <__divdi3+0x122>
c00271ff:	90                   	nop
c0027200:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027203:	31 f6                	xor    esi,esi
c0027205:	e9 16 ff ff ff       	jmp    c0027120 <__divdi3+0x58>
c002720a:	66 90                	xchg   ax,ax
c002720c:	31 c9                	xor    ecx,ecx
c002720e:	e9 0d ff ff ff       	jmp    c0027120 <__divdi3+0x58>
c0027213:	90                   	nop

c0027214 <__moddi3>:
c0027214:	55                   	push   ebp
c0027215:	57                   	push   edi
c0027216:	56                   	push   esi
c0027217:	53                   	push   ebx
c0027218:	83 ec 2c             	sub    esp,0x2c
c002721b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002721f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027223:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027227:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002722b:	85 db                	test   ebx,ebx
c002722d:	0f 88 85 00 00 00    	js     c00272b8 <__moddi3+0xa4>
c0027233:	89 de                	mov    esi,ebx
c0027235:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002723d:	89 d7                	mov    edi,edx
c002723f:	85 d2                	test   edx,edx
c0027241:	79 09                	jns    c002724c <__moddi3+0x38>
c0027243:	f7 d8                	neg    eax
c0027245:	83 d2 00             	adc    edx,0x0
c0027248:	f7 da                	neg    edx
c002724a:	89 d7                	mov    edi,edx
c002724c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027250:	89 cd                	mov    ebp,ecx
c0027252:	85 ff                	test   edi,edi
c0027254:	75 52                	jne    c00272a8 <__moddi3+0x94>
c0027256:	89 c3                	mov    ebx,eax
c0027258:	39 f0                	cmp    eax,esi
c002725a:	76 24                	jbe    c0027280 <__moddi3+0x6c>
c002725c:	89 c8                	mov    eax,ecx
c002725e:	89 f2                	mov    edx,esi
c0027260:	f7 f3                	div    ebx
c0027262:	89 d6                	mov    esi,edx
c0027264:	89 f0                	mov    eax,esi
c0027266:	31 d2                	xor    edx,edx
c0027268:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002726c:	85 c9                	test   ecx,ecx
c002726e:	74 07                	je     c0027277 <__moddi3+0x63>
c0027270:	f7 d8                	neg    eax
c0027272:	83 d2 00             	adc    edx,0x0
c0027275:	f7 da                	neg    edx
c0027277:	83 c4 2c             	add    esp,0x2c
c002727a:	5b                   	pop    ebx
c002727b:	5e                   	pop    esi
c002727c:	5f                   	pop    edi
c002727d:	5d                   	pop    ebp
c002727e:	c3                   	ret    
c002727f:	90                   	nop
c0027280:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027284:	85 db                	test   ebx,ebx
c0027286:	75 0d                	jne    c0027295 <__moddi3+0x81>
c0027288:	b8 01 00 00 00       	mov    eax,0x1
c002728d:	31 d2                	xor    edx,edx
c002728f:	f7 f7                	div    edi
c0027291:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027295:	89 f0                	mov    eax,esi
c0027297:	31 d2                	xor    edx,edx
c0027299:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002729d:	f7 f7                	div    edi
c002729f:	89 e8                	mov    eax,ebp
c00272a1:	f7 f7                	div    edi
c00272a3:	89 d6                	mov    esi,edx
c00272a5:	eb bd                	jmp    c0027264 <__moddi3+0x50>
c00272a7:	90                   	nop
c00272a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00272ac:	39 f7                	cmp    edi,esi
c00272ae:	76 20                	jbe    c00272d0 <__moddi3+0xbc>
c00272b0:	89 c8                	mov    eax,ecx
c00272b2:	89 f2                	mov    edx,esi
c00272b4:	eb b2                	jmp    c0027268 <__moddi3+0x54>
c00272b6:	66 90                	xchg   ax,ax
c00272b8:	f7 d9                	neg    ecx
c00272ba:	83 d3 00             	adc    ebx,0x0
c00272bd:	f7 db                	neg    ebx
c00272bf:	89 de                	mov    esi,ebx
c00272c1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00272c9:	e9 6f ff ff ff       	jmp    c002723d <__moddi3+0x29>
c00272ce:	66 90                	xchg   ax,ax
c00272d0:	0f bd c7             	bsr    eax,edi
c00272d3:	83 f0 1f             	xor    eax,0x1f
c00272d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00272da:	75 24                	jne    c0027300 <__moddi3+0xec>
c00272dc:	39 f7                	cmp    edi,esi
c00272de:	72 06                	jb     c00272e6 <__moddi3+0xd2>
c00272e0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00272e4:	77 0c                	ja     c00272f2 <__moddi3+0xde>
c00272e6:	89 e9                	mov    ecx,ebp
c00272e8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00272ec:	19 fe                	sbb    esi,edi
c00272ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00272f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00272f6:	89 f2                	mov    edx,esi
c00272f8:	e9 6b ff ff ff       	jmp    c0027268 <__moddi3+0x54>
c00272fd:	8d 76 00             	lea    esi,[esi+0x0]
c0027300:	b8 20 00 00 00       	mov    eax,0x20
c0027305:	89 c2                	mov    edx,eax
c0027307:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002730b:	29 da                	sub    edx,ebx
c002730d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027311:	88 d9                	mov    cl,bl
c0027313:	d3 e7                	shl    edi,cl
c0027315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027319:	88 d1                	mov    cl,dl
c002731b:	d3 e8                	shr    eax,cl
c002731d:	09 c7                	or     edi,eax
c002731f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027323:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027327:	89 d8                	mov    eax,ebx
c0027329:	88 d9                	mov    cl,bl
c002732b:	d3 e7                	shl    edi,cl
c002732d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027331:	89 f3                	mov    ebx,esi
c0027333:	88 d1                	mov    cl,dl
c0027335:	d3 eb                	shr    ebx,cl
c0027337:	89 c7                	mov    edi,eax
c0027339:	88 c1                	mov    cl,al
c002733b:	d3 e6                	shl    esi,cl
c002733d:	89 e8                	mov    eax,ebp
c002733f:	88 d1                	mov    cl,dl
c0027341:	d3 e8                	shr    eax,cl
c0027343:	09 f0                	or     eax,esi
c0027345:	89 f9                	mov    ecx,edi
c0027347:	d3 e5                	shl    ebp,cl
c0027349:	89 da                	mov    edx,ebx
c002734b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002734f:	89 d3                	mov    ebx,edx
c0027351:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027355:	89 c6                	mov    esi,eax
c0027357:	89 d1                	mov    ecx,edx
c0027359:	39 d3                	cmp    ebx,edx
c002735b:	72 27                	jb     c0027384 <__moddi3+0x170>
c002735d:	74 21                	je     c0027380 <__moddi3+0x16c>
c002735f:	29 f5                	sub    ebp,esi
c0027361:	19 cb                	sbb    ebx,ecx
c0027363:	89 de                	mov    esi,ebx
c0027365:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027369:	d3 e6                	shl    esi,cl
c002736b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002736f:	89 f9                	mov    ecx,edi
c0027371:	d3 ed                	shr    ebp,cl
c0027373:	09 ee                	or     esi,ebp
c0027375:	89 f0                	mov    eax,esi
c0027377:	d3 eb                	shr    ebx,cl
c0027379:	89 da                	mov    edx,ebx
c002737b:	e9 e8 fe ff ff       	jmp    c0027268 <__moddi3+0x54>
c0027380:	39 c5                	cmp    ebp,eax
c0027382:	73 db                	jae    c002735f <__moddi3+0x14b>
c0027384:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027388:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002738c:	89 d1                	mov    ecx,edx
c002738e:	89 c6                	mov    esi,eax
c0027390:	eb cd                	jmp    c002735f <__moddi3+0x14b>
c0027392:	66 90                	xchg   ax,ax

c0027394 <__udivdi3>:
c0027394:	55                   	push   ebp
c0027395:	57                   	push   edi
c0027396:	56                   	push   esi
c0027397:	53                   	push   ebx
c0027398:	83 ec 1c             	sub    esp,0x1c
c002739b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002739f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00273a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00273a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00273ab:	85 d2                	test   edx,edx
c00273ad:	75 41                	jne    c00273f0 <__udivdi3+0x5c>
c00273af:	39 f7                	cmp    edi,esi
c00273b1:	76 15                	jbe    c00273c8 <__udivdi3+0x34>
c00273b3:	89 e8                	mov    eax,ebp
c00273b5:	89 f2                	mov    edx,esi
c00273b7:	f7 f7                	div    edi
c00273b9:	31 db                	xor    ebx,ebx
c00273bb:	89 da                	mov    edx,ebx
c00273bd:	83 c4 1c             	add    esp,0x1c
c00273c0:	5b                   	pop    ebx
c00273c1:	5e                   	pop    esi
c00273c2:	5f                   	pop    edi
c00273c3:	5d                   	pop    ebp
c00273c4:	c3                   	ret    
c00273c5:	8d 76 00             	lea    esi,[esi+0x0]
c00273c8:	89 f9                	mov    ecx,edi
c00273ca:	85 ff                	test   edi,edi
c00273cc:	75 0b                	jne    c00273d9 <__udivdi3+0x45>
c00273ce:	b8 01 00 00 00       	mov    eax,0x1
c00273d3:	31 d2                	xor    edx,edx
c00273d5:	f7 f7                	div    edi
c00273d7:	89 c1                	mov    ecx,eax
c00273d9:	31 d2                	xor    edx,edx
c00273db:	89 f0                	mov    eax,esi
c00273dd:	f7 f1                	div    ecx
c00273df:	89 c3                	mov    ebx,eax
c00273e1:	89 e8                	mov    eax,ebp
c00273e3:	f7 f1                	div    ecx
c00273e5:	89 da                	mov    edx,ebx
c00273e7:	83 c4 1c             	add    esp,0x1c
c00273ea:	5b                   	pop    ebx
c00273eb:	5e                   	pop    esi
c00273ec:	5f                   	pop    edi
c00273ed:	5d                   	pop    ebp
c00273ee:	c3                   	ret    
c00273ef:	90                   	nop
c00273f0:	39 f2                	cmp    edx,esi
c00273f2:	77 1c                	ja     c0027410 <__udivdi3+0x7c>
c00273f4:	0f bd da             	bsr    ebx,edx
c00273f7:	83 f3 1f             	xor    ebx,0x1f
c00273fa:	75 24                	jne    c0027420 <__udivdi3+0x8c>
c00273fc:	39 f2                	cmp    edx,esi
c00273fe:	72 08                	jb     c0027408 <__udivdi3+0x74>
c0027400:	39 ef                	cmp    edi,ebp
c0027402:	0f 87 84 00 00 00    	ja     c002748c <__udivdi3+0xf8>
c0027408:	b8 01 00 00 00       	mov    eax,0x1
c002740d:	eb ac                	jmp    c00273bb <__udivdi3+0x27>
c002740f:	90                   	nop
c0027410:	31 db                	xor    ebx,ebx
c0027412:	31 c0                	xor    eax,eax
c0027414:	89 da                	mov    edx,ebx
c0027416:	83 c4 1c             	add    esp,0x1c
c0027419:	5b                   	pop    ebx
c002741a:	5e                   	pop    esi
c002741b:	5f                   	pop    edi
c002741c:	5d                   	pop    ebp
c002741d:	c3                   	ret    
c002741e:	66 90                	xchg   ax,ax
c0027420:	b8 20 00 00 00       	mov    eax,0x20
c0027425:	29 d8                	sub    eax,ebx
c0027427:	88 d9                	mov    cl,bl
c0027429:	d3 e2                	shl    edx,cl
c002742b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002742f:	89 fa                	mov    edx,edi
c0027431:	88 c1                	mov    cl,al
c0027433:	d3 ea                	shr    edx,cl
c0027435:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027439:	09 d1                	or     ecx,edx
c002743b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002743f:	88 d9                	mov    cl,bl
c0027441:	d3 e7                	shl    edi,cl
c0027443:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027447:	89 f7                	mov    edi,esi
c0027449:	88 c1                	mov    cl,al
c002744b:	d3 ef                	shr    edi,cl
c002744d:	88 d9                	mov    cl,bl
c002744f:	d3 e6                	shl    esi,cl
c0027451:	89 ea                	mov    edx,ebp
c0027453:	88 c1                	mov    cl,al
c0027455:	d3 ea                	shr    edx,cl
c0027457:	09 d6                	or     esi,edx
c0027459:	89 f0                	mov    eax,esi
c002745b:	89 fa                	mov    edx,edi
c002745d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027461:	89 d7                	mov    edi,edx
c0027463:	89 c6                	mov    esi,eax
c0027465:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027469:	39 d7                	cmp    edi,edx
c002746b:	72 13                	jb     c0027480 <__udivdi3+0xec>
c002746d:	74 09                	je     c0027478 <__udivdi3+0xe4>
c002746f:	89 f0                	mov    eax,esi
c0027471:	31 db                	xor    ebx,ebx
c0027473:	e9 43 ff ff ff       	jmp    c00273bb <__udivdi3+0x27>
c0027478:	88 d9                	mov    cl,bl
c002747a:	d3 e5                	shl    ebp,cl
c002747c:	39 c5                	cmp    ebp,eax
c002747e:	73 ef                	jae    c002746f <__udivdi3+0xdb>
c0027480:	8d 46 ff             	lea    eax,[esi-0x1]
c0027483:	31 db                	xor    ebx,ebx
c0027485:	e9 31 ff ff ff       	jmp    c00273bb <__udivdi3+0x27>
c002748a:	66 90                	xchg   ax,ax
c002748c:	31 c0                	xor    eax,eax
c002748e:	e9 28 ff ff ff       	jmp    c00273bb <__udivdi3+0x27>
c0027493:	90                   	nop

c0027494 <__umoddi3>:
c0027494:	55                   	push   ebp
c0027495:	57                   	push   edi
c0027496:	56                   	push   esi
c0027497:	53                   	push   ebx
c0027498:	83 ec 1c             	sub    esp,0x1c
c002749b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002749f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00274a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00274a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00274ab:	89 da                	mov    edx,ebx
c00274ad:	85 c0                	test   eax,eax
c00274af:	75 37                	jne    c00274e8 <__umoddi3+0x54>
c00274b1:	39 df                	cmp    edi,ebx
c00274b3:	76 13                	jbe    c00274c8 <__umoddi3+0x34>
c00274b5:	89 f0                	mov    eax,esi
c00274b7:	f7 f7                	div    edi
c00274b9:	89 d0                	mov    eax,edx
c00274bb:	31 d2                	xor    edx,edx
c00274bd:	83 c4 1c             	add    esp,0x1c
c00274c0:	5b                   	pop    ebx
c00274c1:	5e                   	pop    esi
c00274c2:	5f                   	pop    edi
c00274c3:	5d                   	pop    ebp
c00274c4:	c3                   	ret    
c00274c5:	8d 76 00             	lea    esi,[esi+0x0]
c00274c8:	89 fd                	mov    ebp,edi
c00274ca:	85 ff                	test   edi,edi
c00274cc:	75 0b                	jne    c00274d9 <__umoddi3+0x45>
c00274ce:	b8 01 00 00 00       	mov    eax,0x1
c00274d3:	31 d2                	xor    edx,edx
c00274d5:	f7 f7                	div    edi
c00274d7:	89 c5                	mov    ebp,eax
c00274d9:	89 d8                	mov    eax,ebx
c00274db:	31 d2                	xor    edx,edx
c00274dd:	f7 f5                	div    ebp
c00274df:	89 f0                	mov    eax,esi
c00274e1:	f7 f5                	div    ebp
c00274e3:	89 d0                	mov    eax,edx
c00274e5:	eb d4                	jmp    c00274bb <__umoddi3+0x27>
c00274e7:	90                   	nop
c00274e8:	89 f1                	mov    ecx,esi
c00274ea:	39 d8                	cmp    eax,ebx
c00274ec:	76 0a                	jbe    c00274f8 <__umoddi3+0x64>
c00274ee:	89 f0                	mov    eax,esi
c00274f0:	83 c4 1c             	add    esp,0x1c
c00274f3:	5b                   	pop    ebx
c00274f4:	5e                   	pop    esi
c00274f5:	5f                   	pop    edi
c00274f6:	5d                   	pop    ebp
c00274f7:	c3                   	ret    
c00274f8:	0f bd e8             	bsr    ebp,eax
c00274fb:	83 f5 1f             	xor    ebp,0x1f
c00274fe:	75 1c                	jne    c002751c <__umoddi3+0x88>
c0027500:	39 d8                	cmp    eax,ebx
c0027502:	72 04                	jb     c0027508 <__umoddi3+0x74>
c0027504:	39 f7                	cmp    edi,esi
c0027506:	77 08                	ja     c0027510 <__umoddi3+0x7c>
c0027508:	89 da                	mov    edx,ebx
c002750a:	29 fe                	sub    esi,edi
c002750c:	19 c2                	sbb    edx,eax
c002750e:	89 f1                	mov    ecx,esi
c0027510:	89 c8                	mov    eax,ecx
c0027512:	83 c4 1c             	add    esp,0x1c
c0027515:	5b                   	pop    ebx
c0027516:	5e                   	pop    esi
c0027517:	5f                   	pop    edi
c0027518:	5d                   	pop    ebp
c0027519:	c3                   	ret    
c002751a:	66 90                	xchg   ax,ax
c002751c:	ba 20 00 00 00       	mov    edx,0x20
c0027521:	29 ea                	sub    edx,ebp
c0027523:	89 e9                	mov    ecx,ebp
c0027525:	d3 e0                	shl    eax,cl
c0027527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002752b:	89 f8                	mov    eax,edi
c002752d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027531:	88 d1                	mov    cl,dl
c0027533:	d3 e8                	shr    eax,cl
c0027535:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027539:	09 c1                	or     ecx,eax
c002753b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002753f:	89 e9                	mov    ecx,ebp
c0027541:	d3 e7                	shl    edi,cl
c0027543:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027547:	89 d8                	mov    eax,ebx
c0027549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002754d:	88 d1                	mov    cl,dl
c002754f:	d3 e8                	shr    eax,cl
c0027551:	89 c7                	mov    edi,eax
c0027553:	89 e9                	mov    ecx,ebp
c0027555:	d3 e3                	shl    ebx,cl
c0027557:	89 f0                	mov    eax,esi
c0027559:	88 d1                	mov    cl,dl
c002755b:	d3 e8                	shr    eax,cl
c002755d:	09 d8                	or     eax,ebx
c002755f:	89 e9                	mov    ecx,ebp
c0027561:	d3 e6                	shl    esi,cl
c0027563:	89 f3                	mov    ebx,esi
c0027565:	89 fa                	mov    edx,edi
c0027567:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002756b:	89 d1                	mov    ecx,edx
c002756d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027571:	89 c6                	mov    esi,eax
c0027573:	89 d7                	mov    edi,edx
c0027575:	39 d1                	cmp    ecx,edx
c0027577:	72 27                	jb     c00275a0 <__umoddi3+0x10c>
c0027579:	74 21                	je     c002759c <__umoddi3+0x108>
c002757b:	89 ca                	mov    edx,ecx
c002757d:	29 f3                	sub    ebx,esi
c002757f:	19 fa                	sbb    edx,edi
c0027581:	89 d0                	mov    eax,edx
c0027583:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027587:	d3 e0                	shl    eax,cl
c0027589:	89 e9                	mov    ecx,ebp
c002758b:	d3 eb                	shr    ebx,cl
c002758d:	09 d8                	or     eax,ebx
c002758f:	d3 ea                	shr    edx,cl
c0027591:	83 c4 1c             	add    esp,0x1c
c0027594:	5b                   	pop    ebx
c0027595:	5e                   	pop    esi
c0027596:	5f                   	pop    edi
c0027597:	5d                   	pop    ebp
c0027598:	c3                   	ret    
c0027599:	8d 76 00             	lea    esi,[esi+0x0]
c002759c:	39 c3                	cmp    ebx,eax
c002759e:	73 db                	jae    c002757b <__umoddi3+0xe7>
c00275a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00275a4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00275a8:	89 d7                	mov    edi,edx
c00275aa:	89 c6                	mov    esi,eax
c00275ac:	eb cd                	jmp    c002757b <__umoddi3+0xe7>

c00275ae <__addsf3>:
c00275ae:	55                   	push   ebp
c00275af:	89 e5                	mov    ebp,esp
c00275b1:	57                   	push   edi
c00275b2:	56                   	push   esi
c00275b3:	53                   	push   ebx
c00275b4:	83 ec 08             	sub    esp,0x8
c00275b7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00275ba:	89 fa                	mov    edx,edi
c00275bc:	89 f8                	mov    eax,edi
c00275be:	c1 f8 17             	sar    eax,0x17
c00275c1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275c4:	c1 e2 08             	shl    edx,0x8
c00275c7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00275cd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00275d0:	89 de                	mov    esi,ebx
c00275d2:	c1 fe 17             	sar    esi,0x17
c00275d5:	c1 e3 08             	shl    ebx,0x8
c00275d8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00275de:	31 f0                	xor    eax,esi
c00275e0:	0f 88 3b 01 00 00    	js     c0027721 <__addsf3+0x173>
c00275e6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00275e9:	29 f1                	sub    ecx,esi
c00275eb:	85 c9                	test   ecx,ecx
c00275ed:	7e 54                	jle    c0027643 <__addsf3+0x95>
c00275ef:	89 f0                	mov    eax,esi
c00275f1:	84 c0                	test   al,al
c00275f3:	75 10                	jne    c0027605 <__addsf3+0x57>
c00275f5:	85 db                	test   ebx,ebx
c00275f7:	0f 84 aa 02 00 00    	je     c00278a7 <__addsf3+0x2f9>
c00275fd:	49                   	dec    ecx
c00275fe:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027601:	74 38                	je     c002763b <__addsf3+0x8d>
c0027603:	eb 13                	jmp    c0027618 <__addsf3+0x6a>
c0027605:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027608:	f7 d0                	not    eax
c002760a:	84 c0                	test   al,al
c002760c:	0f 84 95 02 00 00    	je     c00278a7 <__addsf3+0x2f9>
c0027612:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027618:	83 f9 1f             	cmp    ecx,0x1f
c002761b:	0f 8f 86 02 00 00    	jg     c00278a7 <__addsf3+0x2f9>
c0027621:	89 de                	mov    esi,ebx
c0027623:	d3 ee                	shr    esi,cl
c0027625:	b8 20 00 00 00       	mov    eax,0x20
c002762a:	29 c8                	sub    eax,ecx
c002762c:	89 c1                	mov    ecx,eax
c002762e:	d3 e3                	shl    ebx,cl
c0027630:	31 c0                	xor    eax,eax
c0027632:	85 db                	test   ebx,ebx
c0027634:	0f 95 c0             	setne  al
c0027637:	09 f0                	or     eax,esi
c0027639:	01 d0                	add    eax,edx
c002763b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002763e:	e9 b6 00 00 00       	jmp    c00276f9 <__addsf3+0x14b>
c0027643:	74 5c                	je     c00276a1 <__addsf3+0xf3>
c0027645:	89 f1                	mov    ecx,esi
c0027647:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002764a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002764d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027651:	75 14                	jne    c0027667 <__addsf3+0xb9>
c0027653:	85 d2                	test   edx,edx
c0027655:	0f 84 4c 02 00 00    	je     c00278a7 <__addsf3+0x2f9>
c002765b:	49                   	dec    ecx
c002765c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002765f:	0f 84 94 00 00 00    	je     c00276f9 <__addsf3+0x14b>
c0027665:	eb 12                	jmp    c0027679 <__addsf3+0xcb>
c0027667:	89 f0                	mov    eax,esi
c0027669:	f7 d0                	not    eax
c002766b:	84 c0                	test   al,al
c002766d:	0f 84 34 02 00 00    	je     c00278a7 <__addsf3+0x2f9>
c0027673:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027679:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002767c:	83 f9 1f             	cmp    ecx,0x1f
c002767f:	0f 8f 22 02 00 00    	jg     c00278a7 <__addsf3+0x2f9>
c0027685:	89 d7                	mov    edi,edx
c0027687:	d3 ef                	shr    edi,cl
c0027689:	b8 20 00 00 00       	mov    eax,0x20
c002768e:	29 c8                	sub    eax,ecx
c0027690:	89 c1                	mov    ecx,eax
c0027692:	d3 e2                	shl    edx,cl
c0027694:	31 c0                	xor    eax,eax
c0027696:	85 d2                	test   edx,edx
c0027698:	0f 95 c0             	setne  al
c002769b:	09 f8                	or     eax,edi
c002769d:	01 d8                	add    eax,ebx
c002769f:	eb 58                	jmp    c00276f9 <__addsf3+0x14b>
c00276a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00276a4:	8d 70 01             	lea    esi,[eax+0x1]
c00276a7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00276ad:	75 32                	jne    c00276e1 <__addsf3+0x133>
c00276af:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00276b3:	75 1f                	jne    c00276d4 <__addsf3+0x126>
c00276b5:	85 d2                	test   edx,edx
c00276b7:	0f 84 e0 01 00 00    	je     c002789d <__addsf3+0x2ef>
c00276bd:	85 db                	test   ebx,ebx
c00276bf:	0f 84 e2 01 00 00    	je     c00278a7 <__addsf3+0x2f9>
c00276c5:	89 d0                	mov    eax,edx
c00276c7:	01 d8                	add    eax,ebx
c00276c9:	0f 89 a9 01 00 00    	jns    c0027878 <__addsf3+0x2ca>
c00276cf:	e9 9d 01 00 00       	jmp    c0027871 <__addsf3+0x2c3>
c00276d4:	85 d2                	test   edx,edx
c00276d6:	0f 85 cb 01 00 00    	jne    c00278a7 <__addsf3+0x2f9>
c00276dc:	e9 bc 01 00 00       	jmp    c002789d <__addsf3+0x2ef>
c00276e1:	31 c0                	xor    eax,eax
c00276e3:	89 f1                	mov    ecx,esi
c00276e5:	f7 d1                	not    ecx
c00276e7:	84 c9                	test   cl,cl
c00276e9:	0f 84 90 01 00 00    	je     c002787f <__addsf3+0x2d1>
c00276ef:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00276f2:	d1 e8                	shr    eax,1
c00276f4:	e9 86 01 00 00       	jmp    c002787f <__addsf3+0x2d1>
c00276f9:	85 c0                	test   eax,eax
c00276fb:	0f 89 7e 01 00 00    	jns    c002787f <__addsf3+0x2d1>
c0027701:	46                   	inc    esi
c0027702:	89 f2                	mov    edx,esi
c0027704:	f7 d2                	not    edx
c0027706:	84 d2                	test   dl,dl
c0027708:	0f 84 6f 01 00 00    	je     c002787d <__addsf3+0x2cf>
c002770e:	89 c2                	mov    edx,eax
c0027710:	83 e2 01             	and    edx,0x1
c0027713:	d1 e8                	shr    eax,1
c0027715:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002771a:	09 d0                	or     eax,edx
c002771c:	e9 5e 01 00 00       	jmp    c002787f <__addsf3+0x2d1>
c0027721:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027725:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027728:	89 f0                	mov    eax,esi
c002772a:	0f b6 c0             	movzx  eax,al
c002772d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027730:	29 c1                	sub    ecx,eax
c0027732:	85 c9                	test   ecx,ecx
c0027734:	7e 55                	jle    c002778b <__addsf3+0x1dd>
c0027736:	85 c0                	test   eax,eax
c0027738:	75 11                	jne    c002774b <__addsf3+0x19d>
c002773a:	85 db                	test   ebx,ebx
c002773c:	0f 84 65 01 00 00    	je     c00278a7 <__addsf3+0x2f9>
c0027742:	49                   	dec    ecx
c0027743:	75 19                	jne    c002775e <__addsf3+0x1b0>
c0027745:	89 d0                	mov    eax,edx
c0027747:	29 d8                	sub    eax,ebx
c0027749:	eb 38                	jmp    c0027783 <__addsf3+0x1d5>
c002774b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002774e:	f7 d0                	not    eax
c0027750:	84 c0                	test   al,al
c0027752:	0f 84 4f 01 00 00    	je     c00278a7 <__addsf3+0x2f9>
c0027758:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002775e:	83 f9 1f             	cmp    ecx,0x1f
c0027761:	0f 8f 40 01 00 00    	jg     c00278a7 <__addsf3+0x2f9>
c0027767:	89 de                	mov    esi,ebx
c0027769:	d3 ee                	shr    esi,cl
c002776b:	b8 20 00 00 00       	mov    eax,0x20
c0027770:	29 c8                	sub    eax,ecx
c0027772:	89 c1                	mov    ecx,eax
c0027774:	d3 e3                	shl    ebx,cl
c0027776:	31 c0                	xor    eax,eax
c0027778:	85 db                	test   ebx,ebx
c002777a:	0f 95 c0             	setne  al
c002777d:	09 f0                	or     eax,esi
c002777f:	29 c2                	sub    edx,eax
c0027781:	89 d0                	mov    eax,edx
c0027783:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027786:	e9 af 00 00 00       	jmp    c002783a <__addsf3+0x28c>
c002778b:	74 5c                	je     c00277e9 <__addsf3+0x23b>
c002778d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027790:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027793:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027797:	75 14                	jne    c00277ad <__addsf3+0x1ff>
c0027799:	85 d2                	test   edx,edx
c002779b:	0f 84 06 01 00 00    	je     c00278a7 <__addsf3+0x2f9>
c00277a1:	48                   	dec    eax
c00277a2:	75 1b                	jne    c00277bf <__addsf3+0x211>
c00277a4:	89 d8                	mov    eax,ebx
c00277a6:	29 d0                	sub    eax,edx
c00277a8:	e9 8d 00 00 00       	jmp    c002783a <__addsf3+0x28c>
c00277ad:	89 f1                	mov    ecx,esi
c00277af:	f7 d1                	not    ecx
c00277b1:	84 c9                	test   cl,cl
c00277b3:	0f 84 ee 00 00 00    	je     c00278a7 <__addsf3+0x2f9>
c00277b9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00277bf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00277c2:	83 f8 1f             	cmp    eax,0x1f
c00277c5:	0f 8f dc 00 00 00    	jg     c00278a7 <__addsf3+0x2f9>
c00277cb:	89 d7                	mov    edi,edx
c00277cd:	88 c1                	mov    cl,al
c00277cf:	d3 ef                	shr    edi,cl
c00277d1:	b9 20 00 00 00       	mov    ecx,0x20
c00277d6:	29 c1                	sub    ecx,eax
c00277d8:	d3 e2                	shl    edx,cl
c00277da:	31 c0                	xor    eax,eax
c00277dc:	85 d2                	test   edx,edx
c00277de:	0f 95 c0             	setne  al
c00277e1:	09 f8                	or     eax,edi
c00277e3:	29 c3                	sub    ebx,eax
c00277e5:	89 d8                	mov    eax,ebx
c00277e7:	eb 51                	jmp    c002783a <__addsf3+0x28c>
c00277e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00277ec:	40                   	inc    eax
c00277ed:	a8 fe                	test   al,0xfe
c00277ef:	75 3d                	jne    c002782e <__addsf3+0x280>
c00277f1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00277f5:	0f 85 a7 00 00 00    	jne    c00278a2 <__addsf3+0x2f4>
c00277fb:	85 d2                	test   edx,edx
c00277fd:	75 12                	jne    c0027811 <__addsf3+0x263>
c00277ff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027802:	85 db                	test   ebx,ebx
c0027804:	0f 85 9d 00 00 00    	jne    c00278a7 <__addsf3+0x2f9>
c002780a:	31 ff                	xor    edi,edi
c002780c:	e9 96 00 00 00       	jmp    c00278a7 <__addsf3+0x2f9>
c0027811:	85 db                	test   ebx,ebx
c0027813:	0f 84 8e 00 00 00    	je     c00278a7 <__addsf3+0x2f9>
c0027819:	89 d0                	mov    eax,edx
c002781b:	29 d8                	sub    eax,ebx
c002781d:	79 06                	jns    c0027825 <__addsf3+0x277>
c002781f:	89 d8                	mov    eax,ebx
c0027821:	29 d0                	sub    eax,edx
c0027823:	eb 5a                	jmp    c002787f <__addsf3+0x2d1>
c0027825:	bf 00 00 00 00       	mov    edi,0x0
c002782a:	74 7b                	je     c00278a7 <__addsf3+0x2f9>
c002782c:	eb 4a                	jmp    c0027878 <__addsf3+0x2ca>
c002782e:	89 d0                	mov    eax,edx
c0027830:	29 d8                	sub    eax,ebx
c0027832:	79 12                	jns    c0027846 <__addsf3+0x298>
c0027834:	89 d8                	mov    eax,ebx
c0027836:	29 d0                	sub    eax,edx
c0027838:	eb 09                	jmp    c0027843 <__addsf3+0x295>
c002783a:	85 c0                	test   eax,eax
c002783c:	79 41                	jns    c002787f <__addsf3+0x2d1>
c002783e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027843:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027846:	31 f6                	xor    esi,esi
c0027848:	85 c0                	test   eax,eax
c002784a:	74 33                	je     c002787f <__addsf3+0x2d1>
c002784c:	0f bd c8             	bsr    ecx,eax
c002784f:	83 f1 1f             	xor    ecx,0x1f
c0027852:	d3 e0                	shl    eax,cl
c0027854:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027858:	39 ca                	cmp    edx,ecx
c002785a:	7f 10                	jg     c002786c <__addsf3+0x2be>
c002785c:	29 d1                	sub    ecx,edx
c002785e:	41                   	inc    ecx
c002785f:	d3 e8                	shr    eax,cl
c0027861:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027864:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002786a:	eb 13                	jmp    c002787f <__addsf3+0x2d1>
c002786c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002786f:	29 ce                	sub    esi,ecx
c0027871:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027876:	eb 07                	jmp    c002787f <__addsf3+0x2d1>
c0027878:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002787b:	eb 02                	jmp    c002787f <__addsf3+0x2d1>
c002787d:	31 c0                	xor    eax,eax
c002787f:	89 c2                	mov    edx,eax
c0027881:	c1 ea 08             	shr    edx,0x8
c0027884:	a8 7f                	test   al,0x7f
c0027886:	0f 95 c1             	setne  cl
c0027889:	09 d1                	or     ecx,edx
c002788b:	83 e1 01             	and    ecx,0x1
c002788e:	c1 e8 07             	shr    eax,0x7
c0027891:	21 c8                	and    eax,ecx
c0027893:	c1 e6 17             	shl    esi,0x17
c0027896:	09 d6                	or     esi,edx
c0027898:	8d 3c 30             	lea    edi,[eax+esi*1]
c002789b:	eb 0a                	jmp    c00278a7 <__addsf3+0x2f9>
c002789d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278a0:	eb 05                	jmp    c00278a7 <__addsf3+0x2f9>
c00278a2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00278a7:	89 f8                	mov    eax,edi
c00278a9:	5a                   	pop    edx
c00278aa:	59                   	pop    ecx
c00278ab:	5b                   	pop    ebx
c00278ac:	5e                   	pop    esi
c00278ad:	5f                   	pop    edi
c00278ae:	5d                   	pop    ebp
c00278af:	c3                   	ret    

c00278b0 <__subsf3>:
c00278b0:	55                   	push   ebp
c00278b1:	89 e5                	mov    ebp,esp
c00278b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278b6:	05 00 00 00 80       	add    eax,0x80000000
c00278bb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00278be:	5d                   	pop    ebp
c00278bf:	e9 ea fc ff ff       	jmp    c00275ae <__addsf3>

c00278c4 <__negsf2>:
c00278c4:	55                   	push   ebp
c00278c5:	89 e5                	mov    ebp,esp
c00278c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00278ca:	05 00 00 00 80       	add    eax,0x80000000
c00278cf:	5d                   	pop    ebp
c00278d0:	c3                   	ret    

c00278d1 <__mulsf3>:
c00278d1:	55                   	push   ebp
c00278d2:	89 e5                	mov    ebp,esp
c00278d4:	57                   	push   edi
c00278d5:	56                   	push   esi
c00278d6:	53                   	push   ebx
c00278d7:	83 ec 1c             	sub    esp,0x1c
c00278da:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00278dd:	89 f0                	mov    eax,esi
c00278df:	89 f1                	mov    ecx,esi
c00278e1:	c1 f9 17             	sar    ecx,0x17
c00278e4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00278e7:	c1 e0 08             	shl    eax,0x8
c00278ea:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278ef:	89 c1                	mov    ecx,eax
c00278f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278f4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278f7:	89 c7                	mov    edi,eax
c00278f9:	c1 ff 17             	sar    edi,0x17
c00278fc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027900:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027903:	89 f8                	mov    eax,edi
c0027905:	0f b6 c0             	movzx  eax,al
c0027908:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002790b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002790f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027912:	42                   	inc    edx
c0027913:	80 e2 fe             	and    dl,0xfe
c0027916:	75 7b                	jne    c0027993 <__mulsf3+0xc2>
c0027918:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002791c:	74 54                	je     c0027972 <__mulsf3+0xa1>
c002791e:	85 c9                	test   ecx,ecx
c0027920:	0f 85 64 01 00 00    	jne    c0027a8a <__mulsf3+0x1b9>
c0027926:	8d 57 01             	lea    edx,[edi+0x1]
c0027929:	80 e2 fe             	and    dl,0xfe
c002792c:	75 1f                	jne    c002794d <__mulsf3+0x7c>
c002792e:	85 c0                	test   eax,eax
c0027930:	b8 00 00 00 00       	mov    eax,0x0
c0027935:	74 29                	je     c0027960 <__mulsf3+0x8f>
c0027937:	53                   	push   ebx
c0027938:	53                   	push   ebx
c0027939:	50                   	push   eax
c002793a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002793d:	e8 96 05 00 00       	call   c0027ed8 <__nesf2>
c0027942:	83 c4 10             	add    esp,0x10
c0027945:	85 c0                	test   eax,eax
c0027947:	0f 85 3a 01 00 00    	jne    c0027a87 <__mulsf3+0x1b6>
c002794d:	85 ff                	test   edi,edi
c002794f:	0f 89 35 01 00 00    	jns    c0027a8a <__mulsf3+0x1b9>
c0027955:	81 c6 00 00 00 80    	add    esi,0x80000000
c002795b:	e9 2a 01 00 00       	jmp    c0027a8a <__mulsf3+0x1b9>
c0027960:	51                   	push   ecx
c0027961:	51                   	push   ecx
c0027962:	50                   	push   eax
c0027963:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027966:	e8 6d 05 00 00       	call   c0027ed8 <__nesf2>
c002796b:	83 c4 10             	add    esp,0x10
c002796e:	85 c0                	test   eax,eax
c0027970:	eb 15                	jmp    c0027987 <__mulsf3+0xb6>
c0027972:	85 c9                	test   ecx,ecx
c0027974:	74 0b                	je     c0027981 <__mulsf3+0xb0>
c0027976:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027979:	01 c9                	add    ecx,ecx
c002797b:	78 16                	js     c0027993 <__mulsf3+0xc2>
c002797d:	89 d3                	mov    ebx,edx
c002797f:	eb f5                	jmp    c0027976 <__mulsf3+0xa5>
c0027981:	89 f8                	mov    eax,edi
c0027983:	f7 d0                	not    eax
c0027985:	84 c0                	test   al,al
c0027987:	75 c4                	jne    c002794d <__mulsf3+0x7c>
c0027989:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002798e:	e9 f7 00 00 00       	jmp    c0027a8a <__mulsf3+0x1b9>
c0027993:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027996:	c1 e6 08             	shl    esi,0x8
c0027999:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002799f:	8d 57 01             	lea    edx,[edi+0x1]
c00279a2:	80 e2 fe             	and    dl,0xfe
c00279a5:	75 63                	jne    c0027a0a <__mulsf3+0x139>
c00279a7:	85 c0                	test   eax,eax
c00279a9:	74 2f                	je     c00279da <__mulsf3+0x109>
c00279ab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00279af:	0f 89 d2 00 00 00    	jns    c0027a87 <__mulsf3+0x1b6>
c00279b5:	52                   	push   edx
c00279b6:	52                   	push   edx
c00279b7:	6a 00                	push   0x0
c00279b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279bc:	e8 dc 04 00 00       	call   c0027e9d <__eqsf2>
c00279c1:	83 c4 10             	add    esp,0x10
c00279c4:	85 c0                	test   eax,eax
c00279c6:	0f 85 bb 00 00 00    	jne    c0027a87 <__mulsf3+0x1b6>
c00279cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279cf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00279d5:	e9 b0 00 00 00       	jmp    c0027a8a <__mulsf3+0x1b9>
c00279da:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00279dd:	50                   	push   eax
c00279de:	50                   	push   eax
c00279df:	6a 00                	push   0x0
c00279e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279e4:	e8 b4 04 00 00       	call   c0027e9d <__eqsf2>
c00279e9:	83 c4 10             	add    esp,0x10
c00279ec:	85 c0                	test   eax,eax
c00279ee:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279f1:	75 0c                	jne    c00279ff <__mulsf3+0x12e>
c00279f3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00279f7:	0f 89 8a 00 00 00    	jns    c0027a87 <__mulsf3+0x1b6>
c00279fd:	eb cd                	jmp    c00279cc <__mulsf3+0xfb>
c00279ff:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a02:	01 f6                	add    esi,esi
c0027a04:	78 04                	js     c0027a0a <__mulsf3+0x139>
c0027a06:	89 c3                	mov    ebx,eax
c0027a08:	eb f5                	jmp    c00279ff <__mulsf3+0x12e>
c0027a0a:	89 c8                	mov    eax,ecx
c0027a0c:	0d 00 00 00 80       	or     eax,0x80000000
c0027a11:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a17:	f7 e6                	mul    esi
c0027a19:	85 c0                	test   eax,eax
c0027a1b:	0f 95 c0             	setne  al
c0027a1e:	0f b6 c0             	movzx  eax,al
c0027a21:	09 c2                	or     edx,eax
c0027a23:	78 03                	js     c0027a28 <__mulsf3+0x157>
c0027a25:	01 d2                	add    edx,edx
c0027a27:	4b                   	dec    ebx
c0027a28:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027a2e:	7f 22                	jg     c0027a52 <__mulsf3+0x181>
c0027a30:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a36:	85 db                	test   ebx,ebx
c0027a38:	7f 23                	jg     c0027a5d <__mulsf3+0x18c>
c0027a3a:	83 fb e9             	cmp    ebx,0xffffffe9
c0027a3d:	7c 1a                	jl     c0027a59 <__mulsf3+0x188>
c0027a3f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a45:	b9 01 00 00 00       	mov    ecx,0x1
c0027a4a:	29 d9                	sub    ecx,ebx
c0027a4c:	d3 ea                	shr    edx,cl
c0027a4e:	31 db                	xor    ebx,ebx
c0027a50:	eb 0b                	jmp    c0027a5d <__mulsf3+0x18c>
c0027a52:	bb ff 00 00 00       	mov    ebx,0xff
c0027a57:	eb 02                	jmp    c0027a5b <__mulsf3+0x18a>
c0027a59:	31 db                	xor    ebx,ebx
c0027a5b:	31 d2                	xor    edx,edx
c0027a5d:	89 d0                	mov    eax,edx
c0027a5f:	c1 e8 08             	shr    eax,0x8
c0027a62:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027a65:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027a6b:	09 fb                	or     ebx,edi
c0027a6d:	c1 e3 17             	shl    ebx,0x17
c0027a70:	09 c3                	or     ebx,eax
c0027a72:	f6 c2 7f             	test   dl,0x7f
c0027a75:	0f 95 c1             	setne  cl
c0027a78:	09 c8                	or     eax,ecx
c0027a7a:	83 e0 01             	and    eax,0x1
c0027a7d:	c1 ea 07             	shr    edx,0x7
c0027a80:	21 c2                	and    edx,eax
c0027a82:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027a85:	eb 03                	jmp    c0027a8a <__mulsf3+0x1b9>
c0027a87:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027a8a:	89 f0                	mov    eax,esi
c0027a8c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027a8f:	5b                   	pop    ebx
c0027a90:	5e                   	pop    esi
c0027a91:	5f                   	pop    edi
c0027a92:	5d                   	pop    ebp
c0027a93:	c3                   	ret    

c0027a94 <__divsf3>:
c0027a94:	55                   	push   ebp
c0027a95:	89 e5                	mov    ebp,esp
c0027a97:	57                   	push   edi
c0027a98:	56                   	push   esi
c0027a99:	53                   	push   ebx
c0027a9a:	83 ec 1c             	sub    esp,0x1c
c0027a9d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027aa0:	89 d8                	mov    eax,ebx
c0027aa2:	89 d9                	mov    ecx,ebx
c0027aa4:	c1 f9 17             	sar    ecx,0x17
c0027aa7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027aaa:	c1 e0 08             	shl    eax,0x8
c0027aad:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027ab2:	89 c1                	mov    ecx,eax
c0027ab4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027ab7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027aba:	89 c7                	mov    edi,eax
c0027abc:	c1 ff 17             	sar    edi,0x17
c0027abf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027ac3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027ac6:	89 f8                	mov    eax,edi
c0027ac8:	0f b6 c0             	movzx  eax,al
c0027acb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ace:	29 c6                	sub    esi,eax
c0027ad0:	83 c6 7f             	add    esi,0x7f
c0027ad3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027ad6:	42                   	inc    edx
c0027ad7:	80 e2 fe             	and    dl,0xfe
c0027ada:	0f 85 9c 00 00 00    	jne    c0027b7c <__divsf3+0xe8>
c0027ae0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027ae4:	74 33                	je     c0027b19 <__divsf3+0x85>
c0027ae6:	85 c9                	test   ecx,ecx
c0027ae8:	0f 85 c7 01 00 00    	jne    c0027cb5 <__divsf3+0x221>
c0027aee:	8d 57 01             	lea    edx,[edi+0x1]
c0027af1:	80 e2 fe             	and    dl,0xfe
c0027af4:	75 2f                	jne    c0027b25 <__divsf3+0x91>
c0027af6:	85 c0                	test   eax,eax
c0027af8:	74 2b                	je     c0027b25 <__divsf3+0x91>
c0027afa:	51                   	push   ecx
c0027afb:	51                   	push   ecx
c0027afc:	6a 00                	push   0x0
c0027afe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b01:	e8 d2 03 00 00       	call   c0027ed8 <__nesf2>
c0027b06:	83 c4 10             	add    esp,0x10
c0027b09:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027b0c:	85 c0                	test   eax,eax
c0027b0e:	0f 85 a1 01 00 00    	jne    c0027cb5 <__divsf3+0x221>
c0027b14:	e9 92 01 00 00       	jmp    c0027cab <__divsf3+0x217>
c0027b19:	85 c9                	test   ecx,ecx
c0027b1b:	75 1b                	jne    c0027b38 <__divsf3+0xa4>
c0027b1d:	8d 57 01             	lea    edx,[edi+0x1]
c0027b20:	80 e2 fe             	and    dl,0xfe
c0027b23:	74 1e                	je     c0027b43 <__divsf3+0xaf>
c0027b25:	85 ff                	test   edi,edi
c0027b27:	0f 89 88 01 00 00    	jns    c0027cb5 <__divsf3+0x221>
c0027b2d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027b33:	e9 7d 01 00 00       	jmp    c0027cb5 <__divsf3+0x221>
c0027b38:	8d 56 ff             	lea    edx,[esi-0x1]
c0027b3b:	01 c9                	add    ecx,ecx
c0027b3d:	78 3d                	js     c0027b7c <__divsf3+0xe8>
c0027b3f:	89 d6                	mov    esi,edx
c0027b41:	eb f5                	jmp    c0027b38 <__divsf3+0xa4>
c0027b43:	85 c0                	test   eax,eax
c0027b45:	b8 00 00 00 00       	mov    eax,0x0
c0027b4a:	74 18                	je     c0027b64 <__divsf3+0xd0>
c0027b4c:	52                   	push   edx
c0027b4d:	52                   	push   edx
c0027b4e:	50                   	push   eax
c0027b4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b52:	e8 81 03 00 00       	call   c0027ed8 <__nesf2>
c0027b57:	83 c4 10             	add    esp,0x10
c0027b5a:	85 c0                	test   eax,eax
c0027b5c:	0f 85 50 01 00 00    	jne    c0027cb2 <__divsf3+0x21e>
c0027b62:	eb c1                	jmp    c0027b25 <__divsf3+0x91>
c0027b64:	56                   	push   esi
c0027b65:	56                   	push   esi
c0027b66:	50                   	push   eax
c0027b67:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b6a:	e8 69 03 00 00       	call   c0027ed8 <__nesf2>
c0027b6f:	83 c4 10             	add    esp,0x10
c0027b72:	85 c0                	test   eax,eax
c0027b74:	0f 84 31 01 00 00    	je     c0027cab <__divsf3+0x217>
c0027b7a:	eb a9                	jmp    c0027b25 <__divsf3+0x91>
c0027b7c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027b7f:	c1 e3 08             	shl    ebx,0x8
c0027b82:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027b88:	8d 57 01             	lea    edx,[edi+0x1]
c0027b8b:	80 e2 fe             	and    dl,0xfe
c0027b8e:	75 71                	jne    c0027c01 <__divsf3+0x16d>
c0027b90:	85 c0                	test   eax,eax
c0027b92:	ba 00 00 00 00       	mov    edx,0x0
c0027b97:	74 2f                	je     c0027bc8 <__divsf3+0x134>
c0027b99:	51                   	push   ecx
c0027b9a:	51                   	push   ecx
c0027b9b:	52                   	push   edx
c0027b9c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b9f:	e8 f9 02 00 00       	call   c0027e9d <__eqsf2>
c0027ba4:	83 c4 10             	add    esp,0x10
c0027ba7:	85 c0                	test   eax,eax
c0027ba9:	0f 85 03 01 00 00    	jne    c0027cb2 <__divsf3+0x21e>
c0027baf:	31 d2                	xor    edx,edx
c0027bb1:	89 d3                	mov    ebx,edx
c0027bb3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bb6:	31 f8                	xor    eax,edi
c0027bb8:	0f 89 f7 00 00 00    	jns    c0027cb5 <__divsf3+0x221>
c0027bbe:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027bc3:	e9 ed 00 00 00       	jmp    c0027cb5 <__divsf3+0x221>
c0027bc8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027bcb:	50                   	push   eax
c0027bcc:	50                   	push   eax
c0027bcd:	52                   	push   edx
c0027bce:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bd1:	e8 c7 02 00 00       	call   c0027e9d <__eqsf2>
c0027bd6:	83 c4 10             	add    esp,0x10
c0027bd9:	85 c0                	test   eax,eax
c0027bdb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027bde:	75 16                	jne    c0027bf6 <__divsf3+0x162>
c0027be0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027be3:	31 fb                	xor    ebx,edi
c0027be5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027beb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027bf1:	e9 bf 00 00 00       	jmp    c0027cb5 <__divsf3+0x221>
c0027bf6:	8d 46 01             	lea    eax,[esi+0x1]
c0027bf9:	01 db                	add    ebx,ebx
c0027bfb:	78 04                	js     c0027c01 <__divsf3+0x16d>
c0027bfd:	89 c6                	mov    esi,eax
c0027bff:	eb f5                	jmp    c0027bf6 <__divsf3+0x162>
c0027c01:	89 c8                	mov    eax,ecx
c0027c03:	0d 00 00 00 80       	or     eax,0x80000000
c0027c08:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027c0e:	31 d2                	xor    edx,edx
c0027c10:	39 d8                	cmp    eax,ebx
c0027c12:	72 07                	jb     c0027c1b <__divsf3+0x187>
c0027c14:	29 d8                	sub    eax,ebx
c0027c16:	ba 01 00 00 00       	mov    edx,0x1
c0027c1b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027c22:	01 d2                	add    edx,edx
c0027c24:	89 c1                	mov    ecx,eax
c0027c26:	01 c0                	add    eax,eax
c0027c28:	85 c9                	test   ecx,ecx
c0027c2a:	78 04                	js     c0027c30 <__divsf3+0x19c>
c0027c2c:	39 c3                	cmp    ebx,eax
c0027c2e:	77 05                	ja     c0027c35 <__divsf3+0x1a1>
c0027c30:	29 d8                	sub    eax,ebx
c0027c32:	83 ca 01             	or     edx,0x1
c0027c35:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027c38:	75 e8                	jne    c0027c22 <__divsf3+0x18e>
c0027c3a:	85 c0                	test   eax,eax
c0027c3c:	0f 95 c0             	setne  al
c0027c3f:	0f b6 c0             	movzx  eax,al
c0027c42:	c1 e2 06             	shl    edx,0x6
c0027c45:	09 c2                	or     edx,eax
c0027c47:	78 03                	js     c0027c4c <__divsf3+0x1b8>
c0027c49:	01 d2                	add    edx,edx
c0027c4b:	4e                   	dec    esi
c0027c4c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027c52:	7f 22                	jg     c0027c76 <__divsf3+0x1e2>
c0027c54:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027c5a:	85 f6                	test   esi,esi
c0027c5c:	7f 23                	jg     c0027c81 <__divsf3+0x1ed>
c0027c5e:	83 fe e9             	cmp    esi,0xffffffe9
c0027c61:	7c 1a                	jl     c0027c7d <__divsf3+0x1e9>
c0027c63:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027c69:	b9 01 00 00 00       	mov    ecx,0x1
c0027c6e:	29 f1                	sub    ecx,esi
c0027c70:	d3 ea                	shr    edx,cl
c0027c72:	31 f6                	xor    esi,esi
c0027c74:	eb 0b                	jmp    c0027c81 <__divsf3+0x1ed>
c0027c76:	be ff 00 00 00       	mov    esi,0xff
c0027c7b:	eb 02                	jmp    c0027c7f <__divsf3+0x1eb>
c0027c7d:	31 f6                	xor    esi,esi
c0027c7f:	31 d2                	xor    edx,edx
c0027c81:	89 d0                	mov    eax,edx
c0027c83:	c1 e8 08             	shr    eax,0x8
c0027c86:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027c89:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027c8f:	09 fe                	or     esi,edi
c0027c91:	c1 e6 17             	shl    esi,0x17
c0027c94:	09 c6                	or     esi,eax
c0027c96:	f6 c2 7f             	test   dl,0x7f
c0027c99:	0f 95 c1             	setne  cl
c0027c9c:	09 c8                	or     eax,ecx
c0027c9e:	83 e0 01             	and    eax,0x1
c0027ca1:	c1 ea 07             	shr    edx,0x7
c0027ca4:	21 c2                	and    edx,eax
c0027ca6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027ca9:	eb 0a                	jmp    c0027cb5 <__divsf3+0x221>
c0027cab:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027cb0:	eb 03                	jmp    c0027cb5 <__divsf3+0x221>
c0027cb2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027cb5:	89 d8                	mov    eax,ebx
c0027cb7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027cba:	5b                   	pop    ebx
c0027cbb:	5e                   	pop    esi
c0027cbc:	5f                   	pop    edi
c0027cbd:	5d                   	pop    ebp
c0027cbe:	c3                   	ret    

c0027cbf <__floatsisf>:
c0027cbf:	55                   	push   ebp
c0027cc0:	89 e5                	mov    ebp,esp
c0027cc2:	53                   	push   ebx
c0027cc3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027cc6:	85 d2                	test   edx,edx
c0027cc8:	7e 2b                	jle    c0027cf5 <__floatsisf+0x36>
c0027cca:	0f bd ca             	bsr    ecx,edx
c0027ccd:	83 f1 1f             	xor    ecx,0x1f
c0027cd0:	d3 e2                	shl    edx,cl
c0027cd2:	89 d0                	mov    eax,edx
c0027cd4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027cd9:	89 c3                	mov    ebx,eax
c0027cdb:	c1 eb 08             	shr    ebx,0x8
c0027cde:	80 e2 7f             	and    dl,0x7f
c0027ce1:	0f 95 c2             	setne  dl
c0027ce4:	09 da                	or     edx,ebx
c0027ce6:	83 e2 01             	and    edx,0x1
c0027ce9:	c1 e8 07             	shr    eax,0x7
c0027cec:	21 c2                	and    edx,eax
c0027cee:	b8 9e 00 00 00       	mov    eax,0x9e
c0027cf3:	eb 32                	jmp    c0027d27 <__floatsisf+0x68>
c0027cf5:	b8 00 00 00 00       	mov    eax,0x0
c0027cfa:	74 34                	je     c0027d30 <__floatsisf+0x71>
c0027cfc:	f7 da                	neg    edx
c0027cfe:	0f bd ca             	bsr    ecx,edx
c0027d01:	83 f1 1f             	xor    ecx,0x1f
c0027d04:	d3 e2                	shl    edx,cl
c0027d06:	89 d0                	mov    eax,edx
c0027d08:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d0d:	89 c3                	mov    ebx,eax
c0027d0f:	c1 eb 08             	shr    ebx,0x8
c0027d12:	80 e2 7f             	and    dl,0x7f
c0027d15:	0f 95 c2             	setne  dl
c0027d18:	09 da                	or     edx,ebx
c0027d1a:	83 e2 01             	and    edx,0x1
c0027d1d:	c1 e8 07             	shr    eax,0x7
c0027d20:	21 c2                	and    edx,eax
c0027d22:	b8 9e 01 00 00       	mov    eax,0x19e
c0027d27:	29 c8                	sub    eax,ecx
c0027d29:	c1 e0 17             	shl    eax,0x17
c0027d2c:	09 d8                	or     eax,ebx
c0027d2e:	01 d0                	add    eax,edx
c0027d30:	5b                   	pop    ebx
c0027d31:	5d                   	pop    ebp
c0027d32:	c3                   	ret    

c0027d33 <__floatunsisf>:
c0027d33:	55                   	push   ebp
c0027d34:	89 e5                	mov    ebp,esp
c0027d36:	53                   	push   ebx
c0027d37:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d3a:	31 c0                	xor    eax,eax
c0027d3c:	85 d2                	test   edx,edx
c0027d3e:	74 32                	je     c0027d72 <__floatunsisf+0x3f>
c0027d40:	0f bd ca             	bsr    ecx,edx
c0027d43:	83 f1 1f             	xor    ecx,0x1f
c0027d46:	d3 e2                	shl    edx,cl
c0027d48:	89 d0                	mov    eax,edx
c0027d4a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027d4f:	89 c3                	mov    ebx,eax
c0027d51:	c1 eb 08             	shr    ebx,0x8
c0027d54:	80 e2 7f             	and    dl,0x7f
c0027d57:	0f 95 c2             	setne  dl
c0027d5a:	09 da                	or     edx,ebx
c0027d5c:	83 e2 01             	and    edx,0x1
c0027d5f:	c1 e8 07             	shr    eax,0x7
c0027d62:	21 c2                	and    edx,eax
c0027d64:	b8 9e 00 00 00       	mov    eax,0x9e
c0027d69:	29 c8                	sub    eax,ecx
c0027d6b:	c1 e0 17             	shl    eax,0x17
c0027d6e:	09 d8                	or     eax,ebx
c0027d70:	01 d0                	add    eax,edx
c0027d72:	5b                   	pop    ebx
c0027d73:	5d                   	pop    ebp
c0027d74:	c3                   	ret    

c0027d75 <__fixsfsi>:
c0027d75:	55                   	push   ebp
c0027d76:	89 e5                	mov    ebp,esp
c0027d78:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d7b:	89 d1                	mov    ecx,edx
c0027d7d:	c1 e1 08             	shl    ecx,0x8
c0027d80:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027d86:	c1 fa 17             	sar    edx,0x17
c0027d89:	78 1c                	js     c0027da7 <__fixsfsi+0x32>
c0027d8b:	83 ea 7f             	sub    edx,0x7f
c0027d8e:	31 c0                	xor    eax,eax
c0027d90:	83 fa 1e             	cmp    edx,0x1e
c0027d93:	77 40                	ja     c0027dd5 <__fixsfsi+0x60>
c0027d95:	89 c8                	mov    eax,ecx
c0027d97:	0d 00 00 00 80       	or     eax,0x80000000
c0027d9c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027da1:	29 d1                	sub    ecx,edx
c0027da3:	d3 e8                	shr    eax,cl
c0027da5:	eb 2e                	jmp    c0027dd5 <__fixsfsi+0x60>
c0027da7:	31 c0                	xor    eax,eax
c0027da9:	81 c2 81 00 00 00    	add    edx,0x81
c0027daf:	78 24                	js     c0027dd5 <__fixsfsi+0x60>
c0027db1:	83 fa 1e             	cmp    edx,0x1e
c0027db4:	7e 09                	jle    c0027dbf <__fixsfsi+0x4a>
c0027db6:	83 fa 1f             	cmp    edx,0x1f
c0027db9:	75 18                	jne    c0027dd3 <__fixsfsi+0x5e>
c0027dbb:	85 c9                	test   ecx,ecx
c0027dbd:	75 14                	jne    c0027dd3 <__fixsfsi+0x5e>
c0027dbf:	89 c8                	mov    eax,ecx
c0027dc1:	0d 00 00 00 80       	or     eax,0x80000000
c0027dc6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027dcb:	29 d1                	sub    ecx,edx
c0027dcd:	d3 e8                	shr    eax,cl
c0027dcf:	f7 d8                	neg    eax
c0027dd1:	eb 02                	jmp    c0027dd5 <__fixsfsi+0x60>
c0027dd3:	31 c0                	xor    eax,eax
c0027dd5:	5d                   	pop    ebp
c0027dd6:	c3                   	ret    

c0027dd7 <__fixunssfsi>:
c0027dd7:	55                   	push   ebp
c0027dd8:	89 e5                	mov    ebp,esp
c0027dda:	53                   	push   ebx
c0027ddb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027dde:	89 d3                	mov    ebx,edx
c0027de0:	c1 fb 17             	sar    ebx,0x17
c0027de3:	83 eb 7f             	sub    ebx,0x7f
c0027de6:	31 c0                	xor    eax,eax
c0027de8:	83 fb 1f             	cmp    ebx,0x1f
c0027deb:	77 18                	ja     c0027e05 <__fixunssfsi+0x2e>
c0027ded:	89 d0                	mov    eax,edx
c0027def:	c1 e0 08             	shl    eax,0x8
c0027df2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027df7:	0d 00 00 00 80       	or     eax,0x80000000
c0027dfc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e01:	29 d9                	sub    ecx,ebx
c0027e03:	d3 e8                	shr    eax,cl
c0027e05:	5b                   	pop    ebx
c0027e06:	5d                   	pop    ebp
c0027e07:	c3                   	ret    

c0027e08 <__cmpsf2>:
c0027e08:	55                   	push   ebp
c0027e09:	89 e5                	mov    ebp,esp
c0027e0b:	57                   	push   edi
c0027e0c:	56                   	push   esi
c0027e0d:	53                   	push   ebx
c0027e0e:	83 ec 24             	sub    esp,0x24
c0027e11:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027e17:	e8 4f 10 00 00       	call   c0028e6b <__truncdfsf2>
c0027e1c:	5a                   	pop    edx
c0027e1d:	59                   	pop    ecx
c0027e1e:	89 c3                	mov    ebx,eax
c0027e20:	c1 e8 17             	shr    eax,0x17
c0027e23:	0f b6 f0             	movzx  esi,al
c0027e26:	89 d8                	mov    eax,ebx
c0027e28:	c1 e8 1f             	shr    eax,0x1f
c0027e2b:	31 c6                	xor    esi,eax
c0027e2d:	c1 e3 08             	shl    ebx,0x8
c0027e30:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027e33:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027e36:	e8 30 10 00 00       	call   c0028e6b <__truncdfsf2>
c0027e3b:	83 c4 10             	add    esp,0x10
c0027e3e:	89 c1                	mov    ecx,eax
c0027e40:	c1 e9 17             	shr    ecx,0x17
c0027e43:	0f b6 c9             	movzx  ecx,cl
c0027e46:	89 c7                	mov    edi,eax
c0027e48:	c1 ef 1f             	shr    edi,0x1f
c0027e4b:	89 ca                	mov    edx,ecx
c0027e4d:	31 fa                	xor    edx,edi
c0027e4f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e52:	c1 e0 08             	shl    eax,0x8
c0027e55:	89 c2                	mov    edx,eax
c0027e57:	89 d8                	mov    eax,ebx
c0027e59:	09 d0                	or     eax,edx
c0027e5b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027e60:	09 f0                	or     eax,esi
c0027e62:	75 08                	jne    c0027e6c <__cmpsf2+0x64>
c0027e64:	31 c0                	xor    eax,eax
c0027e66:	39 f9                	cmp    ecx,edi
c0027e68:	75 0c                	jne    c0027e76 <__cmpsf2+0x6e>
c0027e6a:	eb 29                	jmp    c0027e95 <__cmpsf2+0x8d>
c0027e6c:	b8 01 00 00 00       	mov    eax,0x1
c0027e71:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027e74:	7f 1f                	jg     c0027e95 <__cmpsf2+0x8d>
c0027e76:	83 c8 ff             	or     eax,0xffffffff
c0027e79:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027e7c:	7c 17                	jl     c0027e95 <__cmpsf2+0x8d>
c0027e7e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027e84:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027e8a:	b8 01 00 00 00       	mov    eax,0x1
c0027e8f:	39 d3                	cmp    ebx,edx
c0027e91:	77 02                	ja     c0027e95 <__cmpsf2+0x8d>
c0027e93:	19 c0                	sbb    eax,eax
c0027e95:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027e98:	5b                   	pop    ebx
c0027e99:	5e                   	pop    esi
c0027e9a:	5f                   	pop    edi
c0027e9b:	5d                   	pop    ebp
c0027e9c:	c3                   	ret    

c0027e9d <__eqsf2>:
c0027e9d:	55                   	push   ebp
c0027e9e:	89 e5                	mov    ebp,esp
c0027ea0:	83 ec 24             	sub    esp,0x24
c0027ea3:	6a 01                	push   0x1
c0027ea5:	83 ec 0c             	sub    esp,0xc
c0027ea8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027eab:	e8 df 10 00 00       	call   c0028f8f <__extendsfdf2>
c0027eb0:	83 c4 10             	add    esp,0x10
c0027eb3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027eb6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027eb9:	52                   	push   edx
c0027eba:	50                   	push   eax
c0027ebb:	50                   	push   eax
c0027ebc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ebf:	e8 cb 10 00 00       	call   c0028f8f <__extendsfdf2>
c0027ec4:	59                   	pop    ecx
c0027ec5:	59                   	pop    ecx
c0027ec6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ec9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027ecc:	52                   	push   edx
c0027ecd:	50                   	push   eax
c0027ece:	e8 35 ff ff ff       	call   c0027e08 <__cmpsf2>
c0027ed3:	83 c4 20             	add    esp,0x20
c0027ed6:	c9                   	leave  
c0027ed7:	c3                   	ret    

c0027ed8 <__nesf2>:
c0027ed8:	eb c3                	jmp    c0027e9d <__eqsf2>

c0027eda <__gtsf2>:
c0027eda:	55                   	push   ebp
c0027edb:	89 e5                	mov    ebp,esp
c0027edd:	83 ec 24             	sub    esp,0x24
c0027ee0:	6a ff                	push   0xffffffff
c0027ee2:	83 ec 0c             	sub    esp,0xc
c0027ee5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ee8:	e8 a2 10 00 00       	call   c0028f8f <__extendsfdf2>
c0027eed:	83 c4 10             	add    esp,0x10
c0027ef0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ef3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027ef6:	52                   	push   edx
c0027ef7:	50                   	push   eax
c0027ef8:	50                   	push   eax
c0027ef9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027efc:	e8 8e 10 00 00       	call   c0028f8f <__extendsfdf2>
c0027f01:	59                   	pop    ecx
c0027f02:	59                   	pop    ecx
c0027f03:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027f06:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027f09:	52                   	push   edx
c0027f0a:	50                   	push   eax
c0027f0b:	e8 f8 fe ff ff       	call   c0027e08 <__cmpsf2>
c0027f10:	83 c4 20             	add    esp,0x20
c0027f13:	c9                   	leave  
c0027f14:	c3                   	ret    

c0027f15 <__gesf2>:
c0027f15:	eb c3                	jmp    c0027eda <__gtsf2>

c0027f17 <__ltsf2>:
c0027f17:	eb 84                	jmp    c0027e9d <__eqsf2>

c0027f19 <__lesf2>:
c0027f19:	eb 82                	jmp    c0027e9d <__eqsf2>

c0027f1b <__adddf3>:
c0027f1b:	55                   	push   ebp
c0027f1c:	89 e5                	mov    ebp,esp
c0027f1e:	57                   	push   edi
c0027f1f:	56                   	push   esi
c0027f20:	53                   	push   ebx
c0027f21:	83 ec 24             	sub    esp,0x24
c0027f24:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f27:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f2d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f30:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f33:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027f36:	89 c8                	mov    eax,ecx
c0027f38:	89 ce                	mov    esi,ecx
c0027f3a:	c1 fe 14             	sar    esi,0x14
c0027f3d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027f40:	89 fb                	mov    ebx,edi
c0027f42:	89 fa                	mov    edx,edi
c0027f44:	c1 e2 0b             	shl    edx,0xb
c0027f47:	c1 e0 0b             	shl    eax,0xb
c0027f4a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f4f:	c1 eb 15             	shr    ebx,0x15
c0027f52:	09 d8                	or     eax,ebx
c0027f54:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027f57:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f5a:	c1 fe 14             	sar    esi,0x14
c0027f5d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027f60:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f63:	89 f3                	mov    ebx,esi
c0027f65:	c1 e3 0b             	shl    ebx,0xb
c0027f68:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027f6b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f6e:	c1 e3 0b             	shl    ebx,0xb
c0027f71:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027f77:	c1 ee 15             	shr    esi,0x15
c0027f7a:	09 f3                	or     ebx,esi
c0027f7c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027f7f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f82:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027f85:	0f 88 5f 02 00 00    	js     c00281ea <__adddf3+0x2cf>
c0027f8b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f8e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027f91:	85 db                	test   ebx,ebx
c0027f93:	0f 8e c7 00 00 00    	jle    c0028060 <__adddf3+0x145>
c0027f99:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027fa0:	75 1a                	jne    c0027fbc <__adddf3+0xa1>
c0027fa2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fa5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027fa8:	0f 84 b2 05 00 00    	je     c0028560 <__adddf3+0x645>
c0027fae:	4b                   	dec    ebx
c0027faf:	75 23                	jne    c0027fd4 <__adddf3+0xb9>
c0027fb1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fb4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fb7:	e9 99 00 00 00       	jmp    c0028055 <__adddf3+0x13a>
c0027fbc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027fbf:	f7 d6                	not    esi
c0027fc1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027fc7:	0f 84 93 05 00 00    	je     c0028560 <__adddf3+0x645>
c0027fcd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027fd4:	83 fb 1f             	cmp    ebx,0x1f
c0027fd7:	7e 42                	jle    c002801b <__adddf3+0x100>
c0027fd9:	83 fb 3f             	cmp    ebx,0x3f
c0027fdc:	0f 8f 7e 05 00 00    	jg     c0028560 <__adddf3+0x645>
c0027fe2:	83 e3 1f             	and    ebx,0x1f
c0027fe5:	89 d9                	mov    ecx,ebx
c0027fe7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027fea:	d3 ef                	shr    edi,cl
c0027fec:	31 db                	xor    ebx,ebx
c0027fee:	85 c9                	test   ecx,ecx
c0027ff0:	74 15                	je     c0028007 <__adddf3+0xec>
c0027ff2:	be 20 00 00 00       	mov    esi,0x20
c0027ff7:	29 ce                	sub    esi,ecx
c0027ff9:	89 f1                	mov    ecx,esi
c0027ffb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ffe:	d3 e6                	shl    esi,cl
c0028000:	31 db                	xor    ebx,ebx
c0028002:	85 f6                	test   esi,esi
c0028004:	0f 95 c3             	setne  bl
c0028007:	31 c9                	xor    ecx,ecx
c0028009:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002800d:	0f 95 c1             	setne  cl
c0028010:	09 cf                	or     edi,ecx
c0028012:	09 fb                	or     ebx,edi
c0028014:	01 da                	add    edx,ebx
c0028016:	83 d0 00             	adc    eax,0x0
c0028019:	eb 3a                	jmp    c0028055 <__adddf3+0x13a>
c002801b:	bf 20 00 00 00       	mov    edi,0x20
c0028020:	29 df                	sub    edi,ebx
c0028022:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028025:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028028:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002802b:	d3 e6                	shl    esi,cl
c002802d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028030:	88 d9                	mov    cl,bl
c0028032:	d3 ef                	shr    edi,cl
c0028034:	09 fe                	or     esi,edi
c0028036:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028039:	88 d9                	mov    cl,bl
c002803b:	d3 ef                	shr    edi,cl
c002803d:	89 fb                	mov    ebx,edi
c002803f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028042:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028045:	d3 e7                	shl    edi,cl
c0028047:	85 ff                	test   edi,edi
c0028049:	0f 95 c1             	setne  cl
c002804c:	0f b6 c9             	movzx  ecx,cl
c002804f:	09 ce                	or     esi,ecx
c0028051:	01 f2                	add    edx,esi
c0028053:	11 d8                	adc    eax,ebx
c0028055:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028058:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002805b:	e9 52 01 00 00       	jmp    c00281b2 <__adddf3+0x297>
c0028060:	0f 84 d5 00 00 00    	je     c002813b <__adddf3+0x220>
c0028066:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028069:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002806c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002806f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028072:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028079:	75 20                	jne    c002809b <__adddf3+0x180>
c002807b:	89 d6                	mov    esi,edx
c002807d:	09 c6                	or     esi,eax
c002807f:	0f 84 db 04 00 00    	je     c0028560 <__adddf3+0x645>
c0028085:	4b                   	dec    ebx
c0028086:	75 29                	jne    c00280b1 <__adddf3+0x196>
c0028088:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002808b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002808e:	01 d1                	add    ecx,edx
c0028090:	11 c6                	adc    esi,eax
c0028092:	89 f0                	mov    eax,esi
c0028094:	89 ca                	mov    edx,ecx
c0028096:	e9 17 01 00 00       	jmp    c00281b2 <__adddf3+0x297>
c002809b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002809e:	f7 d6                	not    esi
c00280a0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280a6:	0f 84 b4 04 00 00    	je     c0028560 <__adddf3+0x645>
c00280ac:	0d 00 00 00 80       	or     eax,0x80000000
c00280b1:	83 fb 1f             	cmp    ebx,0x1f
c00280b4:	7e 48                	jle    c00280fe <__adddf3+0x1e3>
c00280b6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00280b9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00280bc:	83 fb 3f             	cmp    ebx,0x3f
c00280bf:	0f 8f 9b 04 00 00    	jg     c0028560 <__adddf3+0x645>
c00280c5:	83 e3 1f             	and    ebx,0x1f
c00280c8:	89 d9                	mov    ecx,ebx
c00280ca:	89 c7                	mov    edi,eax
c00280cc:	d3 ef                	shr    edi,cl
c00280ce:	31 db                	xor    ebx,ebx
c00280d0:	85 c9                	test   ecx,ecx
c00280d2:	74 12                	je     c00280e6 <__adddf3+0x1cb>
c00280d4:	be 20 00 00 00       	mov    esi,0x20
c00280d9:	29 ce                	sub    esi,ecx
c00280db:	89 f1                	mov    ecx,esi
c00280dd:	d3 e0                	shl    eax,cl
c00280df:	31 db                	xor    ebx,ebx
c00280e1:	85 c0                	test   eax,eax
c00280e3:	0f 95 c3             	setne  bl
c00280e6:	31 c0                	xor    eax,eax
c00280e8:	85 d2                	test   edx,edx
c00280ea:	0f 95 c0             	setne  al
c00280ed:	09 c7                	or     edi,eax
c00280ef:	09 fb                	or     ebx,edi
c00280f1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280f4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00280f7:	01 da                	add    edx,ebx
c00280f9:	83 d6 00             	adc    esi,0x0
c00280fc:	eb 39                	jmp    c0028137 <__adddf3+0x21c>
c00280fe:	be 20 00 00 00       	mov    esi,0x20
c0028103:	29 de                	sub    esi,ebx
c0028105:	89 c7                	mov    edi,eax
c0028107:	89 f1                	mov    ecx,esi
c0028109:	d3 e7                	shl    edi,cl
c002810b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002810e:	89 d7                	mov    edi,edx
c0028110:	88 d9                	mov    cl,bl
c0028112:	d3 ef                	shr    edi,cl
c0028114:	89 f9                	mov    ecx,edi
c0028116:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028119:	09 cf                	or     edi,ecx
c002811b:	88 d9                	mov    cl,bl
c002811d:	d3 e8                	shr    eax,cl
c002811f:	89 f1                	mov    ecx,esi
c0028121:	d3 e2                	shl    edx,cl
c0028123:	85 d2                	test   edx,edx
c0028125:	0f 95 c2             	setne  dl
c0028128:	0f b6 d2             	movzx  edx,dl
c002812b:	09 d7                	or     edi,edx
c002812d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028130:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028133:	01 fa                	add    edx,edi
c0028135:	11 c6                	adc    esi,eax
c0028137:	89 f0                	mov    eax,esi
c0028139:	eb 77                	jmp    c00281b2 <__adddf3+0x297>
c002813b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002813e:	46                   	inc    esi
c002813f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028142:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028148:	75 41                	jne    c002818b <__adddf3+0x270>
c002814a:	89 d3                	mov    ebx,edx
c002814c:	09 c3                	or     ebx,eax
c002814e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028155:	75 27                	jne    c002817e <__adddf3+0x263>
c0028157:	85 db                	test   ebx,ebx
c0028159:	0f 84 fb 03 00 00    	je     c002855a <__adddf3+0x63f>
c002815f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028162:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028165:	0f 84 f5 03 00 00    	je     c0028560 <__adddf3+0x645>
c002816b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002816e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028171:	85 c0                	test   eax,eax
c0028173:	0f 89 91 03 00 00    	jns    c002850a <__adddf3+0x5ef>
c0028179:	e9 85 03 00 00       	jmp    c0028503 <__adddf3+0x5e8>
c002817e:	85 db                	test   ebx,ebx
c0028180:	0f 85 da 03 00 00    	jne    c0028560 <__adddf3+0x645>
c0028186:	e9 cf 03 00 00       	jmp    c002855a <__adddf3+0x63f>
c002818b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002818e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028191:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028194:	f7 d1                	not    ecx
c0028196:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002819c:	0f 84 70 03 00 00    	je     c0028512 <__adddf3+0x5f7>
c00281a2:	d1 ea                	shr    edx,1
c00281a4:	89 c1                	mov    ecx,eax
c00281a6:	c1 e1 1f             	shl    ecx,0x1f
c00281a9:	09 ca                	or     edx,ecx
c00281ab:	d1 e8                	shr    eax,1
c00281ad:	e9 6f 03 00 00       	jmp    c0028521 <__adddf3+0x606>
c00281b2:	85 c0                	test   eax,eax
c00281b4:	0f 89 67 03 00 00    	jns    c0028521 <__adddf3+0x606>
c00281ba:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00281bd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281c0:	f7 d1                	not    ecx
c00281c2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00281c8:	0f 84 44 03 00 00    	je     c0028512 <__adddf3+0x5f7>
c00281ce:	89 d1                	mov    ecx,edx
c00281d0:	d1 e9                	shr    ecx,1
c00281d2:	83 e2 01             	and    edx,0x1
c00281d5:	09 ca                	or     edx,ecx
c00281d7:	89 c1                	mov    ecx,eax
c00281d9:	c1 e1 1f             	shl    ecx,0x1f
c00281dc:	09 ca                	or     edx,ecx
c00281de:	d1 e8                	shr    eax,1
c00281e0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00281e5:	e9 37 03 00 00       	jmp    c0028521 <__adddf3+0x606>
c00281ea:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281ed:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00281f3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00281f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281f9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00281ff:	29 de                	sub    esi,ebx
c0028201:	85 f6                	test   esi,esi
c0028203:	0f 8e bd 00 00 00    	jle    c00282c6 <__adddf3+0x3ab>
c0028209:	85 db                	test   ebx,ebx
c002820b:	75 17                	jne    c0028224 <__adddf3+0x309>
c002820d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028210:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028213:	0f 84 47 03 00 00    	je     c0028560 <__adddf3+0x645>
c0028219:	4e                   	dec    esi
c002821a:	75 20                	jne    c002823c <__adddf3+0x321>
c002821c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002821f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028222:	eb 5b                	jmp    c002827f <__adddf3+0x364>
c0028224:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028227:	f7 d3                	not    ebx
c0028229:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002822f:	0f 84 2b 03 00 00    	je     c0028560 <__adddf3+0x645>
c0028235:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002823c:	83 fe 1f             	cmp    esi,0x1f
c002823f:	7e 49                	jle    c002828a <__adddf3+0x36f>
c0028241:	83 fe 3f             	cmp    esi,0x3f
c0028244:	0f 8f 16 03 00 00    	jg     c0028560 <__adddf3+0x645>
c002824a:	83 e6 1f             	and    esi,0x1f
c002824d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028250:	89 f1                	mov    ecx,esi
c0028252:	d3 ef                	shr    edi,cl
c0028254:	31 db                	xor    ebx,ebx
c0028256:	85 f6                	test   esi,esi
c0028258:	74 13                	je     c002826d <__adddf3+0x352>
c002825a:	b9 20 00 00 00       	mov    ecx,0x20
c002825f:	29 f1                	sub    ecx,esi
c0028261:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028264:	d3 e6                	shl    esi,cl
c0028266:	31 db                	xor    ebx,ebx
c0028268:	85 f6                	test   esi,esi
c002826a:	0f 95 c3             	setne  bl
c002826d:	31 c9                	xor    ecx,ecx
c002826f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028273:	0f 95 c1             	setne  cl
c0028276:	09 cf                	or     edi,ecx
c0028278:	09 fb                	or     ebx,edi
c002827a:	29 da                	sub    edx,ebx
c002827c:	83 d8 00             	sbb    eax,0x0
c002827f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028282:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028285:	e9 aa 01 00 00       	jmp    c0028434 <__adddf3+0x519>
c002828a:	bf 20 00 00 00       	mov    edi,0x20
c002828f:	29 f7                	sub    edi,esi
c0028291:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028294:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028297:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002829a:	d3 e3                	shl    ebx,cl
c002829c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002829f:	89 f1                	mov    ecx,esi
c00282a1:	d3 ef                	shr    edi,cl
c00282a3:	09 fb                	or     ebx,edi
c00282a5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00282a8:	89 f1                	mov    ecx,esi
c00282aa:	d3 ef                	shr    edi,cl
c00282ac:	89 fe                	mov    esi,edi
c00282ae:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00282b1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00282b4:	d3 e7                	shl    edi,cl
c00282b6:	85 ff                	test   edi,edi
c00282b8:	0f 95 c1             	setne  cl
c00282bb:	0f b6 c9             	movzx  ecx,cl
c00282be:	09 cb                	or     ebx,ecx
c00282c0:	29 da                	sub    edx,ebx
c00282c2:	19 f0                	sbb    eax,esi
c00282c4:	eb b9                	jmp    c002827f <__adddf3+0x364>
c00282c6:	0f 84 cd 00 00 00    	je     c0028399 <__adddf3+0x47e>
c00282cc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00282cf:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00282d2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00282d5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00282d9:	75 1b                	jne    c00282f6 <__adddf3+0x3db>
c00282db:	89 d6                	mov    esi,edx
c00282dd:	09 c6                	or     esi,eax
c00282df:	0f 84 7b 02 00 00    	je     c0028560 <__adddf3+0x645>
c00282e5:	4b                   	dec    ebx
c00282e6:	75 24                	jne    c002830c <__adddf3+0x3f1>
c00282e8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00282ee:	29 d1                	sub    ecx,edx
c00282f0:	19 c6                	sbb    esi,eax
c00282f2:	89 ca                	mov    edx,ecx
c00282f4:	eb 61                	jmp    c0028357 <__adddf3+0x43c>
c00282f6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00282f9:	f7 d6                	not    esi
c00282fb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028301:	0f 84 59 02 00 00    	je     c0028560 <__adddf3+0x645>
c0028307:	0d 00 00 00 80       	or     eax,0x80000000
c002830c:	83 fb 1f             	cmp    ebx,0x1f
c002830f:	7e 4d                	jle    c002835e <__adddf3+0x443>
c0028311:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028314:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028317:	83 fb 3f             	cmp    ebx,0x3f
c002831a:	0f 8f 40 02 00 00    	jg     c0028560 <__adddf3+0x645>
c0028320:	83 e3 1f             	and    ebx,0x1f
c0028323:	89 d9                	mov    ecx,ebx
c0028325:	89 c7                	mov    edi,eax
c0028327:	d3 ef                	shr    edi,cl
c0028329:	31 db                	xor    ebx,ebx
c002832b:	85 c9                	test   ecx,ecx
c002832d:	74 12                	je     c0028341 <__adddf3+0x426>
c002832f:	be 20 00 00 00       	mov    esi,0x20
c0028334:	29 ce                	sub    esi,ecx
c0028336:	89 f1                	mov    ecx,esi
c0028338:	d3 e0                	shl    eax,cl
c002833a:	31 db                	xor    ebx,ebx
c002833c:	85 c0                	test   eax,eax
c002833e:	0f 95 c3             	setne  bl
c0028341:	31 c0                	xor    eax,eax
c0028343:	85 d2                	test   edx,edx
c0028345:	0f 95 c0             	setne  al
c0028348:	09 c7                	or     edi,eax
c002834a:	09 fb                	or     ebx,edi
c002834c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002834f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028352:	29 da                	sub    edx,ebx
c0028354:	83 de 00             	sbb    esi,0x0
c0028357:	89 f0                	mov    eax,esi
c0028359:	e9 d6 00 00 00       	jmp    c0028434 <__adddf3+0x519>
c002835e:	be 20 00 00 00       	mov    esi,0x20
c0028363:	29 de                	sub    esi,ebx
c0028365:	89 c7                	mov    edi,eax
c0028367:	89 f1                	mov    ecx,esi
c0028369:	d3 e7                	shl    edi,cl
c002836b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002836e:	89 d7                	mov    edi,edx
c0028370:	88 d9                	mov    cl,bl
c0028372:	d3 ef                	shr    edi,cl
c0028374:	89 f9                	mov    ecx,edi
c0028376:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028379:	09 cf                	or     edi,ecx
c002837b:	88 d9                	mov    cl,bl
c002837d:	d3 e8                	shr    eax,cl
c002837f:	89 f1                	mov    ecx,esi
c0028381:	d3 e2                	shl    edx,cl
c0028383:	85 d2                	test   edx,edx
c0028385:	0f 95 c2             	setne  dl
c0028388:	0f b6 d2             	movzx  edx,dl
c002838b:	09 d7                	or     edi,edx
c002838d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028390:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028393:	29 fa                	sub    edx,edi
c0028395:	19 c6                	sbb    esi,eax
c0028397:	eb be                	jmp    c0028357 <__adddf3+0x43c>
c0028399:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002839c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002839f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00283a5:	75 6a                	jne    c0028411 <__adddf3+0x4f6>
c00283a7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00283ab:	75 58                	jne    c0028405 <__adddf3+0x4ea>
c00283ad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00283b0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00283b3:	89 d6                	mov    esi,edx
c00283b5:	09 c6                	or     esi,eax
c00283b7:	75 17                	jne    c00283d0 <__adddf3+0x4b5>
c00283b9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283bc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283bf:	85 db                	test   ebx,ebx
c00283c1:	0f 85 99 01 00 00    	jne    c0028560 <__adddf3+0x645>
c00283c7:	31 ff                	xor    edi,edi
c00283c9:	31 c9                	xor    ecx,ecx
c00283cb:	e9 90 01 00 00       	jmp    c0028560 <__adddf3+0x645>
c00283d0:	85 db                	test   ebx,ebx
c00283d2:	0f 84 88 01 00 00    	je     c0028560 <__adddf3+0x645>
c00283d8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00283db:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00283de:	85 c0                	test   eax,eax
c00283e0:	79 10                	jns    c00283f2 <__adddf3+0x4d7>
c00283e2:	31 c9                	xor    ecx,ecx
c00283e4:	f7 da                	neg    edx
c00283e6:	0f 95 c1             	setne  cl
c00283e9:	01 c8                	add    eax,ecx
c00283eb:	f7 d8                	neg    eax
c00283ed:	e9 2f 01 00 00       	jmp    c0028521 <__adddf3+0x606>
c00283f2:	31 ff                	xor    edi,edi
c00283f4:	31 c9                	xor    ecx,ecx
c00283f6:	89 c3                	mov    ebx,eax
c00283f8:	09 d3                	or     ebx,edx
c00283fa:	0f 84 60 01 00 00    	je     c0028560 <__adddf3+0x645>
c0028400:	e9 05 01 00 00       	jmp    c002850a <__adddf3+0x5ef>
c0028405:	31 ff                	xor    edi,edi
c0028407:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002840c:	e9 4f 01 00 00       	jmp    c0028560 <__adddf3+0x645>
c0028411:	89 c1                	mov    ecx,eax
c0028413:	89 d0                	mov    eax,edx
c0028415:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028418:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002841b:	89 ca                	mov    edx,ecx
c002841d:	85 c9                	test   ecx,ecx
c002841f:	79 2c                	jns    c002844d <__adddf3+0x532>
c0028421:	31 c9                	xor    ecx,ecx
c0028423:	f7 d8                	neg    eax
c0028425:	0f 95 c1             	setne  cl
c0028428:	01 ca                	add    edx,ecx
c002842a:	f7 da                	neg    edx
c002842c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002842f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028432:	eb 19                	jmp    c002844d <__adddf3+0x532>
c0028434:	85 c0                	test   eax,eax
c0028436:	0f 89 e5 00 00 00    	jns    c0028521 <__adddf3+0x606>
c002843c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028441:	89 c1                	mov    ecx,eax
c0028443:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028446:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028449:	89 d0                	mov    eax,edx
c002844b:	89 ca                	mov    edx,ecx
c002844d:	85 d2                	test   edx,edx
c002844f:	74 59                	je     c00284aa <__adddf3+0x58f>
c0028451:	0f bd da             	bsr    ebx,edx
c0028454:	83 f3 1f             	xor    ebx,0x1f
c0028457:	88 d9                	mov    cl,bl
c0028459:	d3 e2                	shl    edx,cl
c002845b:	bf 20 00 00 00       	mov    edi,0x20
c0028460:	89 f9                	mov    ecx,edi
c0028462:	29 d9                	sub    ecx,ebx
c0028464:	89 c6                	mov    esi,eax
c0028466:	d3 ee                	shr    esi,cl
c0028468:	09 d6                	or     esi,edx
c002846a:	88 d9                	mov    cl,bl
c002846c:	d3 e0                	shl    eax,cl
c002846e:	89 c2                	mov    edx,eax
c0028470:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028473:	25 ff 07 00 00       	and    eax,0x7ff
c0028478:	39 d8                	cmp    eax,ebx
c002847a:	7f 22                	jg     c002849e <__adddf3+0x583>
c002847c:	29 c3                	sub    ebx,eax
c002847e:	43                   	inc    ebx
c002847f:	88 d9                	mov    cl,bl
c0028481:	d3 ea                	shr    edx,cl
c0028483:	29 df                	sub    edi,ebx
c0028485:	89 f9                	mov    ecx,edi
c0028487:	89 f0                	mov    eax,esi
c0028489:	d3 e0                	shl    eax,cl
c002848b:	09 c2                	or     edx,eax
c002848d:	89 f0                	mov    eax,esi
c002848f:	88 d9                	mov    cl,bl
c0028491:	d3 e8                	shr    eax,cl
c0028493:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028496:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002849c:	eb 6f                	jmp    c002850d <__adddf3+0x5f2>
c002849e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00284a1:	29 d8                	sub    eax,ebx
c00284a3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284a6:	89 f0                	mov    eax,esi
c00284a8:	eb 59                	jmp    c0028503 <__adddf3+0x5e8>
c00284aa:	85 c0                	test   eax,eax
c00284ac:	74 6a                	je     c0028518 <__adddf3+0x5fd>
c00284ae:	0f bd c8             	bsr    ecx,eax
c00284b1:	83 f1 1f             	xor    ecx,0x1f
c00284b4:	d3 e0                	shl    eax,cl
c00284b6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00284b9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284bf:	83 c1 20             	add    ecx,0x20
c00284c2:	39 cb                	cmp    ebx,ecx
c00284c4:	7f 35                	jg     c00284fb <__adddf3+0x5e0>
c00284c6:	29 d9                	sub    ecx,ebx
c00284c8:	8d 71 01             	lea    esi,[ecx+0x1]
c00284cb:	83 fe 1f             	cmp    esi,0x1f
c00284ce:	7e 09                	jle    c00284d9 <__adddf3+0x5be>
c00284d0:	83 e9 1f             	sub    ecx,0x1f
c00284d3:	d3 e8                	shr    eax,cl
c00284d5:	89 c3                	mov    ebx,eax
c00284d7:	eb 11                	jmp    c00284ea <__adddf3+0x5cf>
c00284d9:	b9 20 00 00 00       	mov    ecx,0x20
c00284de:	29 f1                	sub    ecx,esi
c00284e0:	89 c3                	mov    ebx,eax
c00284e2:	d3 e3                	shl    ebx,cl
c00284e4:	89 f1                	mov    ecx,esi
c00284e6:	d3 e8                	shr    eax,cl
c00284e8:	89 c2                	mov    edx,eax
c00284ea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00284ed:	25 00 f8 ff ff       	and    eax,0xfffff800
c00284f2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284f5:	89 d0                	mov    eax,edx
c00284f7:	89 da                	mov    edx,ebx
c00284f9:	eb 26                	jmp    c0028521 <__adddf3+0x606>
c00284fb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284fe:	29 cf                	sub    edi,ecx
c0028500:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028503:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028508:	eb 17                	jmp    c0028521 <__adddf3+0x606>
c002850a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002850d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028510:	eb 0f                	jmp    c0028521 <__adddf3+0x606>
c0028512:	31 d2                	xor    edx,edx
c0028514:	31 c0                	xor    eax,eax
c0028516:	eb 09                	jmp    c0028521 <__adddf3+0x606>
c0028518:	89 c2                	mov    edx,eax
c002851a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028521:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028524:	c1 e1 14             	shl    ecx,0x14
c0028527:	89 c3                	mov    ebx,eax
c0028529:	c1 eb 0b             	shr    ebx,0xb
c002852c:	09 d9                	or     ecx,ebx
c002852e:	89 d3                	mov    ebx,edx
c0028530:	c1 eb 0b             	shr    ebx,0xb
c0028533:	c1 e0 15             	shl    eax,0x15
c0028536:	09 d8                	or     eax,ebx
c0028538:	89 c7                	mov    edi,eax
c002853a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028540:	0f 95 c0             	setne  al
c0028543:	89 c6                	mov    esi,eax
c0028545:	09 f3                	or     ebx,esi
c0028547:	83 e3 01             	and    ebx,0x1
c002854a:	c1 ea 0a             	shr    edx,0xa
c002854d:	21 da                	and    edx,ebx
c002854f:	89 f8                	mov    eax,edi
c0028551:	01 d0                	add    eax,edx
c0028553:	83 d1 00             	adc    ecx,0x0
c0028556:	89 c7                	mov    edi,eax
c0028558:	eb 06                	jmp    c0028560 <__adddf3+0x645>
c002855a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002855d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028560:	89 f8                	mov    eax,edi
c0028562:	89 ca                	mov    edx,ecx
c0028564:	83 c4 24             	add    esp,0x24
c0028567:	5b                   	pop    ebx
c0028568:	5e                   	pop    esi
c0028569:	5f                   	pop    edi
c002856a:	5d                   	pop    ebp
c002856b:	c3                   	ret    

c002856c <__subdf3>:
c002856c:	55                   	push   ebp
c002856d:	89 e5                	mov    ebp,esp
c002856f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028572:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028575:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002857b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002857e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028581:	5d                   	pop    ebp
c0028582:	e9 94 f9 ff ff       	jmp    c0027f1b <__adddf3>

c0028587 <__negdf2>:
c0028587:	55                   	push   ebp
c0028588:	89 e5                	mov    ebp,esp
c002858a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002858d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028590:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028596:	5d                   	pop    ebp
c0028597:	c3                   	ret    

c0028598 <__muldf3>:
c0028598:	55                   	push   ebp
c0028599:	89 e5                	mov    ebp,esp
c002859b:	57                   	push   edi
c002859c:	56                   	push   esi
c002859d:	53                   	push   ebx
c002859e:	83 ec 24             	sub    esp,0x24
c00285a1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00285a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00285a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00285ad:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00285b0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00285b3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00285b6:	89 c8                	mov    eax,ecx
c00285b8:	c1 f8 14             	sar    eax,0x14
c00285bb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00285be:	89 f8                	mov    eax,edi
c00285c0:	89 fb                	mov    ebx,edi
c00285c2:	c1 e3 0b             	shl    ebx,0xb
c00285c5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00285c8:	c1 e1 0b             	shl    ecx,0xb
c00285cb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00285d1:	c1 e8 15             	shr    eax,0x15
c00285d4:	09 c1                	or     ecx,eax
c00285d6:	89 d6                	mov    esi,edx
c00285d8:	89 d0                	mov    eax,edx
c00285da:	c1 f8 14             	sar    eax,0x14
c00285dd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00285e0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00285e3:	89 c3                	mov    ebx,eax
c00285e5:	c1 e3 0b             	shl    ebx,0xb
c00285e8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00285eb:	c1 e6 0b             	shl    esi,0xb
c00285ee:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00285f4:	c1 e8 15             	shr    eax,0x15
c00285f7:	09 c6                	or     esi,eax
c00285f9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00285fc:	25 ff 07 00 00       	and    eax,0x7ff
c0028601:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028604:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028607:	25 ff 07 00 00       	and    eax,0x7ff
c002860c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002860f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028612:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028615:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002861c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002861f:	40                   	inc    eax
c0028620:	a9 fe 07 00 00       	test   eax,0x7fe
c0028625:	0f 85 8d 00 00 00    	jne    c00286b8 <__muldf3+0x120>
c002862b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002862e:	09 c8                	or     eax,ecx
c0028630:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028634:	74 44                	je     c002867a <__muldf3+0xe2>
c0028636:	85 c0                	test   eax,eax
c0028638:	0f 85 31 02 00 00    	jne    c002886f <__muldf3+0x2d7>
c002863e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028641:	40                   	inc    eax
c0028642:	a9 fe 07 00 00       	test   eax,0x7fe
c0028647:	75 13                	jne    c002865c <__muldf3+0xc4>
c0028649:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002864c:	09 f1                	or     ecx,esi
c002864e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028652:	74 22                	je     c0028676 <__muldf3+0xde>
c0028654:	85 c9                	test   ecx,ecx
c0028656:	0f 85 0d 02 00 00    	jne    c0028869 <__muldf3+0x2d1>
c002865c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028660:	0f 89 09 02 00 00    	jns    c002886f <__muldf3+0x2d7>
c0028666:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028669:	05 00 00 00 80       	add    eax,0x80000000
c002866e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028671:	e9 f9 01 00 00       	jmp    c002886f <__muldf3+0x2d7>
c0028676:	85 c9                	test   ecx,ecx
c0028678:	eb 2e                	jmp    c00286a8 <__muldf3+0x110>
c002867a:	85 c0                	test   eax,eax
c002867c:	74 20                	je     c002869e <__muldf3+0x106>
c002867e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028681:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028684:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028687:	c1 ef 1f             	shr    edi,0x1f
c002868a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002868d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028690:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028693:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028696:	09 f9                	or     ecx,edi
c0028698:	78 1e                	js     c00286b8 <__muldf3+0x120>
c002869a:	89 c3                	mov    ebx,eax
c002869c:	eb e0                	jmp    c002867e <__muldf3+0xe6>
c002869e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00286a1:	f7 d0                	not    eax
c00286a3:	a9 ff 07 00 00       	test   eax,0x7ff
c00286a8:	75 b2                	jne    c002865c <__muldf3+0xc4>
c00286aa:	31 ff                	xor    edi,edi
c00286ac:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00286b3:	e9 b7 01 00 00       	jmp    c002886f <__muldf3+0x2d7>
c00286b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00286bb:	40                   	inc    eax
c00286bc:	a9 fe 07 00 00       	test   eax,0x7fe
c00286c1:	75 57                	jne    c002871a <__muldf3+0x182>
c00286c3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00286c6:	09 f0                	or     eax,esi
c00286c8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00286cc:	74 23                	je     c00286f1 <__muldf3+0x159>
c00286ce:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00286d2:	0f 89 91 01 00 00    	jns    c0028869 <__muldf3+0x2d1>
c00286d8:	85 c0                	test   eax,eax
c00286da:	0f 85 89 01 00 00    	jne    c0028869 <__muldf3+0x2d1>
c00286e0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00286e3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00286e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00286ec:	e9 7e 01 00 00       	jmp    c002886f <__muldf3+0x2d7>
c00286f1:	85 c0                	test   eax,eax
c00286f3:	75 0c                	jne    c0028701 <__muldf3+0x169>
c00286f5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00286f9:	0f 89 6a 01 00 00    	jns    c0028869 <__muldf3+0x2d1>
c00286ff:	eb df                	jmp    c00286e0 <__muldf3+0x148>
c0028701:	01 f6                	add    esi,esi
c0028703:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028706:	c1 ea 1f             	shr    edx,0x1f
c0028709:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002870c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002870f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028712:	09 d6                	or     esi,edx
c0028714:	78 04                	js     c002871a <__muldf3+0x182>
c0028716:	89 c3                	mov    ebx,eax
c0028718:	eb e7                	jmp    c0028701 <__muldf3+0x169>
c002871a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028720:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028726:	89 c8                	mov    eax,ecx
c0028728:	f7 e6                	mul    esi
c002872a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002872d:	89 c7                	mov    edi,eax
c002872f:	89 c8                	mov    eax,ecx
c0028731:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028734:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028737:	89 c1                	mov    ecx,eax
c0028739:	89 f0                	mov    eax,esi
c002873b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002873e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028741:	89 c6                	mov    esi,eax
c0028743:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028746:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028749:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002874c:	31 c0                	xor    eax,eax
c002874e:	01 f1                	add    ecx,esi
c0028750:	0f 92 c0             	setb   al
c0028753:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028756:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028759:	83 d6 00             	adc    esi,0x0
c002875c:	01 c7                	add    edi,eax
c002875e:	83 d6 00             	adc    esi,0x0
c0028761:	01 ca                	add    edx,ecx
c0028763:	0f 92 c1             	setb   cl
c0028766:	0f b6 c9             	movzx  ecx,cl
c0028769:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002876c:	83 d6 00             	adc    esi,0x0
c002876f:	01 cf                	add    edi,ecx
c0028771:	83 d6 00             	adc    esi,0x0
c0028774:	31 c9                	xor    ecx,ecx
c0028776:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028779:	0f 95 c1             	setne  cl
c002877c:	09 cf                	or     edi,ecx
c002877e:	85 f6                	test   esi,esi
c0028780:	78 0c                	js     c002878e <__muldf3+0x1f6>
c0028782:	01 f6                	add    esi,esi
c0028784:	89 f8                	mov    eax,edi
c0028786:	c1 e8 1f             	shr    eax,0x1f
c0028789:	09 c6                	or     esi,eax
c002878b:	01 ff                	add    edi,edi
c002878d:	4b                   	dec    ebx
c002878e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028794:	0f 8f 85 00 00 00    	jg     c002881f <__muldf3+0x287>
c002879a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00287a0:	85 db                	test   ebx,ebx
c00287a2:	0f 8f 84 00 00 00    	jg     c002882c <__muldf3+0x294>
c00287a8:	83 fb cc             	cmp    ebx,0xffffffcc
c00287ab:	7c 79                	jl     c0028826 <__muldf3+0x28e>
c00287ad:	ba 01 00 00 00       	mov    edx,0x1
c00287b2:	29 da                	sub    edx,ebx
c00287b4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00287ba:	83 fa 1f             	cmp    edx,0x1f
c00287bd:	7e 30                	jle    c00287ef <__muldf3+0x257>
c00287bf:	83 fa 20             	cmp    edx,0x20
c00287c2:	75 0b                	jne    c00287cf <__muldf3+0x237>
c00287c4:	31 c0                	xor    eax,eax
c00287c6:	85 ff                	test   edi,edi
c00287c8:	0f 95 c0             	setne  al
c00287cb:	89 c7                	mov    edi,eax
c00287cd:	eb 1a                	jmp    c00287e9 <__muldf3+0x251>
c00287cf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00287d2:	89 f0                	mov    eax,esi
c00287d4:	d3 e0                	shl    eax,cl
c00287d6:	09 f8                	or     eax,edi
c00287d8:	0f 95 c0             	setne  al
c00287db:	0f b6 c0             	movzx  eax,al
c00287de:	89 c7                	mov    edi,eax
c00287e0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00287e5:	29 d9                	sub    ecx,ebx
c00287e7:	d3 ee                	shr    esi,cl
c00287e9:	09 f7                	or     edi,esi
c00287eb:	31 db                	xor    ebx,ebx
c00287ed:	eb 3b                	jmp    c002882a <__muldf3+0x292>
c00287ef:	83 c3 1f             	add    ebx,0x1f
c00287f2:	89 f0                	mov    eax,esi
c00287f4:	88 d9                	mov    cl,bl
c00287f6:	d3 e0                	shl    eax,cl
c00287f8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00287fb:	89 f8                	mov    eax,edi
c00287fd:	88 d1                	mov    cl,dl
c00287ff:	d3 e8                	shr    eax,cl
c0028801:	89 c1                	mov    ecx,eax
c0028803:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028806:	09 c8                	or     eax,ecx
c0028808:	88 d9                	mov    cl,bl
c002880a:	d3 e7                	shl    edi,cl
c002880c:	31 db                	xor    ebx,ebx
c002880e:	85 ff                	test   edi,edi
c0028810:	0f 95 c3             	setne  bl
c0028813:	89 df                	mov    edi,ebx
c0028815:	09 c7                	or     edi,eax
c0028817:	88 d1                	mov    cl,dl
c0028819:	d3 ee                	shr    esi,cl
c002881b:	31 db                	xor    ebx,ebx
c002881d:	eb 0d                	jmp    c002882c <__muldf3+0x294>
c002881f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028824:	eb 02                	jmp    c0028828 <__muldf3+0x290>
c0028826:	31 db                	xor    ebx,ebx
c0028828:	31 ff                	xor    edi,edi
c002882a:	31 f6                	xor    esi,esi
c002882c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002882f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028832:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028837:	09 c3                	or     ebx,eax
c0028839:	c1 e3 14             	shl    ebx,0x14
c002883c:	89 f0                	mov    eax,esi
c002883e:	c1 e8 0b             	shr    eax,0xb
c0028841:	09 c3                	or     ebx,eax
c0028843:	89 f8                	mov    eax,edi
c0028845:	c1 e8 0b             	shr    eax,0xb
c0028848:	c1 e6 15             	shl    esi,0x15
c002884b:	09 c6                	or     esi,eax
c002884d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028853:	0f 95 c1             	setne  cl
c0028856:	09 c8                	or     eax,ecx
c0028858:	83 e0 01             	and    eax,0x1
c002885b:	c1 ef 0a             	shr    edi,0xa
c002885e:	21 c7                	and    edi,eax
c0028860:	01 f7                	add    edi,esi
c0028862:	83 d3 00             	adc    ebx,0x0
c0028865:	89 da                	mov    edx,ebx
c0028867:	eb 03                	jmp    c002886c <__muldf3+0x2d4>
c0028869:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002886c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002886f:	89 f8                	mov    eax,edi
c0028871:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028874:	83 c4 24             	add    esp,0x24
c0028877:	5b                   	pop    ebx
c0028878:	5e                   	pop    esi
c0028879:	5f                   	pop    edi
c002887a:	5d                   	pop    ebp
c002887b:	c3                   	ret    

c002887c <__divdf3>:
c002887c:	55                   	push   ebp
c002887d:	89 e5                	mov    ebp,esp
c002887f:	57                   	push   edi
c0028880:	56                   	push   esi
c0028881:	53                   	push   ebx
c0028882:	83 ec 2c             	sub    esp,0x2c
c0028885:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028888:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002888b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002888e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028891:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028894:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028897:	89 ce                	mov    esi,ecx
c0028899:	89 c8                	mov    eax,ecx
c002889b:	c1 f8 14             	sar    eax,0x14
c002889e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00288a1:	89 f8                	mov    eax,edi
c00288a3:	89 fb                	mov    ebx,edi
c00288a5:	c1 e3 0b             	shl    ebx,0xb
c00288a8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00288ab:	c1 e6 0b             	shl    esi,0xb
c00288ae:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00288b4:	c1 e8 15             	shr    eax,0x15
c00288b7:	09 c6                	or     esi,eax
c00288b9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00288bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00288bf:	89 c2                	mov    edx,eax
c00288c1:	c1 fa 14             	sar    edx,0x14
c00288c4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00288c7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00288ca:	89 de                	mov    esi,ebx
c00288cc:	c1 e6 0b             	shl    esi,0xb
c00288cf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00288d2:	c1 e0 0b             	shl    eax,0xb
c00288d5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00288da:	c1 eb 15             	shr    ebx,0x15
c00288dd:	09 d8                	or     eax,ebx
c00288df:	89 c2                	mov    edx,eax
c00288e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00288e4:	25 ff 07 00 00       	and    eax,0x7ff
c00288e9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00288ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00288ef:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00288f5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00288f8:	29 d8                	sub    eax,ebx
c00288fa:	05 ff 03 00 00       	add    eax,0x3ff
c00288ff:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028902:	46                   	inc    esi
c0028903:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028909:	0f 85 a5 00 00 00    	jne    c00289b4 <__divdf3+0x138>
c002890f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028912:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028915:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028919:	74 2a                	je     c0028945 <__divdf3+0xc9>
c002891b:	85 f6                	test   esi,esi
c002891d:	0f 85 cc 02 00 00    	jne    c0028bef <__divdf3+0x373>
c0028923:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028926:	40                   	inc    eax
c0028927:	a9 fe 07 00 00       	test   eax,0x7fe
c002892c:	75 26                	jne    c0028954 <__divdf3+0xd8>
c002892e:	85 db                	test   ebx,ebx
c0028930:	74 22                	je     c0028954 <__divdf3+0xd8>
c0028932:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028935:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028938:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002893b:	09 d0                	or     eax,edx
c002893d:	0f 85 ac 02 00 00    	jne    c0028bef <__divdf3+0x373>
c0028943:	eb 63                	jmp    c00289a8 <__divdf3+0x12c>
c0028945:	85 f6                	test   esi,esi
c0028947:	75 22                	jne    c002896b <__divdf3+0xef>
c0028949:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002894c:	40                   	inc    eax
c002894d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028952:	74 36                	je     c002898a <__divdf3+0x10e>
c0028954:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028958:	0f 89 91 02 00 00    	jns    c0028bef <__divdf3+0x373>
c002895e:	89 f8                	mov    eax,edi
c0028960:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028966:	e9 80 02 00 00       	jmp    c0028beb <__divdf3+0x36f>
c002896b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002896e:	01 f6                	add    esi,esi
c0028970:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028973:	c1 ef 1f             	shr    edi,0x1f
c0028976:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028979:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002897c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002897f:	09 f7                	or     edi,esi
c0028981:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028984:	78 2e                	js     c00289b4 <__divdf3+0x138>
c0028986:	89 c8                	mov    eax,ecx
c0028988:	eb e1                	jmp    c002896b <__divdf3+0xef>
c002898a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002898d:	09 d0                	or     eax,edx
c002898f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028993:	74 0f                	je     c00289a4 <__divdf3+0x128>
c0028995:	85 c0                	test   eax,eax
c0028997:	74 bb                	je     c0028954 <__divdf3+0xd8>
c0028999:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002899c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002899f:	e9 4b 02 00 00       	jmp    c0028bef <__divdf3+0x373>
c00289a4:	85 c0                	test   eax,eax
c00289a6:	75 ac                	jne    c0028954 <__divdf3+0xd8>
c00289a8:	31 ff                	xor    edi,edi
c00289aa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00289af:	e9 3b 02 00 00       	jmp    c0028bef <__divdf3+0x373>
c00289b4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00289b7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00289ba:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00289c0:	75 6b                	jne    c0028a2d <__divdf3+0x1b1>
c00289c2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00289c5:	09 d6                	or     esi,edx
c00289c7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00289cb:	74 28                	je     c00289f5 <__divdf3+0x179>
c00289cd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00289d0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00289d3:	85 f6                	test   esi,esi
c00289d5:	0f 85 14 02 00 00    	jne    c0028bef <__divdf3+0x373>
c00289db:	31 ff                	xor    edi,edi
c00289dd:	31 c9                	xor    ecx,ecx
c00289df:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00289e2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00289e5:	0f 89 04 02 00 00    	jns    c0028bef <__divdf3+0x373>
c00289eb:	b9 00 00 00 80       	mov    ecx,0x80000000
c00289f0:	e9 fa 01 00 00       	jmp    c0028bef <__divdf3+0x373>
c00289f5:	85 f6                	test   esi,esi
c00289f7:	75 1b                	jne    c0028a14 <__divdf3+0x198>
c00289f9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00289fc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00289ff:	25 00 00 00 80       	and    eax,0x80000000
c0028a04:	31 c9                	xor    ecx,ecx
c0028a06:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028a0b:	89 cf                	mov    edi,ecx
c0028a0d:	89 c1                	mov    ecx,eax
c0028a0f:	e9 db 01 00 00       	jmp    c0028bef <__divdf3+0x373>
c0028a14:	01 d2                	add    edx,edx
c0028a16:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028a19:	c1 eb 1f             	shr    ebx,0x1f
c0028a1c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028a1f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028a22:	8d 48 01             	lea    ecx,[eax+0x1]
c0028a25:	09 da                	or     edx,ebx
c0028a27:	78 04                	js     c0028a2d <__divdf3+0x1b1>
c0028a29:	89 c8                	mov    eax,ecx
c0028a2b:	eb e7                	jmp    c0028a14 <__divdf3+0x198>
c0028a2d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028a30:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028a36:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028a3c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028a3f:	39 d6                	cmp    esi,edx
c0028a41:	77 0d                	ja     c0028a50 <__divdf3+0x1d4>
c0028a43:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028a46:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028a49:	72 1b                	jb     c0028a66 <__divdf3+0x1ea>
c0028a4b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028a4e:	75 16                	jne    c0028a66 <__divdf3+0x1ea>
c0028a50:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028a53:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028a56:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028a59:	83 de 00             	sbb    esi,0x0
c0028a5c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028a5f:	ba 01 00 00 00       	mov    edx,0x1
c0028a64:	eb 02                	jmp    c0028a68 <__divdf3+0x1ec>
c0028a66:	31 d2                	xor    edx,edx
c0028a68:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028a6f:	31 ff                	xor    edi,edi
c0028a71:	01 ff                	add    edi,edi
c0028a73:	89 d1                	mov    ecx,edx
c0028a75:	c1 e9 1f             	shr    ecx,0x1f
c0028a78:	09 cf                	or     edi,ecx
c0028a7a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028a7d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028a80:	89 da                	mov    edx,ebx
c0028a82:	89 f3                	mov    ebx,esi
c0028a84:	8d 34 36             	lea    esi,[esi+esi*1]
c0028a87:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028a8a:	c1 e9 1f             	shr    ecx,0x1f
c0028a8d:	09 ce                	or     esi,ecx
c0028a8f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028a92:	01 c9                	add    ecx,ecx
c0028a94:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028a97:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028a9a:	85 db                	test   ebx,ebx
c0028a9c:	78 29                	js     c0028ac7 <__divdf3+0x24b>
c0028a9e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028aa1:	72 07                	jb     c0028aaa <__divdf3+0x22e>
c0028aa3:	75 3c                	jne    c0028ae1 <__divdf3+0x265>
c0028aa5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028aa8:	77 37                	ja     c0028ae1 <__divdf3+0x265>
c0028aaa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028aad:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028ab0:	31 d2                	xor    edx,edx
c0028ab2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028ab5:	0f 97 c2             	seta   dl
c0028ab8:	29 d6                	sub    esi,edx
c0028aba:	89 d9                	mov    ecx,ebx
c0028abc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028abf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028ac2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028ac5:	eb 17                	jmp    c0028ade <__divdf3+0x262>
c0028ac7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028aca:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028acd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028ad0:	0f 97 c1             	seta   cl
c0028ad3:	0f b6 c9             	movzx  ecx,cl
c0028ad6:	29 ce                	sub    esi,ecx
c0028ad8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028adb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028ade:	83 ca 01             	or     edx,0x1
c0028ae1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028ae4:	75 8b                	jne    c0028a71 <__divdf3+0x1f5>
c0028ae6:	c1 e7 09             	shl    edi,0x9
c0028ae9:	89 d1                	mov    ecx,edx
c0028aeb:	c1 e9 17             	shr    ecx,0x17
c0028aee:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028af1:	09 f3                	or     ebx,esi
c0028af3:	0f 95 c3             	setne  bl
c0028af6:	0f b6 db             	movzx  ebx,bl
c0028af9:	c1 e2 09             	shl    edx,0x9
c0028afc:	09 d3                	or     ebx,edx
c0028afe:	89 ca                	mov    edx,ecx
c0028b00:	09 fa                	or     edx,edi
c0028b02:	78 0c                	js     c0028b10 <__divdf3+0x294>
c0028b04:	01 d2                	add    edx,edx
c0028b06:	89 d9                	mov    ecx,ebx
c0028b08:	c1 e9 1f             	shr    ecx,0x1f
c0028b0b:	09 ca                	or     edx,ecx
c0028b0d:	01 db                	add    ebx,ebx
c0028b0f:	48                   	dec    eax
c0028b10:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028b15:	0f 8f 83 00 00 00    	jg     c0028b9e <__divdf3+0x322>
c0028b1b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028b21:	85 c0                	test   eax,eax
c0028b23:	0f 8f 82 00 00 00    	jg     c0028bab <__divdf3+0x32f>
c0028b29:	83 f8 cc             	cmp    eax,0xffffffcc
c0028b2c:	7c 77                	jl     c0028ba5 <__divdf3+0x329>
c0028b2e:	be 01 00 00 00       	mov    esi,0x1
c0028b33:	29 c6                	sub    esi,eax
c0028b35:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028b3b:	83 fe 1f             	cmp    esi,0x1f
c0028b3e:	7e 2f                	jle    c0028b6f <__divdf3+0x2f3>
c0028b40:	83 fe 20             	cmp    esi,0x20
c0028b43:	75 0a                	jne    c0028b4f <__divdf3+0x2d3>
c0028b45:	85 db                	test   ebx,ebx
c0028b47:	0f 95 c3             	setne  bl
c0028b4a:	0f b6 db             	movzx  ebx,bl
c0028b4d:	eb 1a                	jmp    c0028b69 <__divdf3+0x2ed>
c0028b4f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028b52:	89 d7                	mov    edi,edx
c0028b54:	d3 e7                	shl    edi,cl
c0028b56:	89 f9                	mov    ecx,edi
c0028b58:	09 d9                	or     ecx,ebx
c0028b5a:	0f 95 c3             	setne  bl
c0028b5d:	0f b6 db             	movzx  ebx,bl
c0028b60:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028b65:	29 c1                	sub    ecx,eax
c0028b67:	d3 ea                	shr    edx,cl
c0028b69:	09 d3                	or     ebx,edx
c0028b6b:	31 c0                	xor    eax,eax
c0028b6d:	eb 3a                	jmp    c0028ba9 <__divdf3+0x32d>
c0028b6f:	83 c0 1f             	add    eax,0x1f
c0028b72:	89 d7                	mov    edi,edx
c0028b74:	88 c1                	mov    cl,al
c0028b76:	d3 e7                	shl    edi,cl
c0028b78:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028b7b:	89 df                	mov    edi,ebx
c0028b7d:	89 f1                	mov    ecx,esi
c0028b7f:	d3 ef                	shr    edi,cl
c0028b81:	89 f9                	mov    ecx,edi
c0028b83:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028b86:	09 cf                	or     edi,ecx
c0028b88:	88 c1                	mov    cl,al
c0028b8a:	d3 e3                	shl    ebx,cl
c0028b8c:	85 db                	test   ebx,ebx
c0028b8e:	0f 95 c3             	setne  bl
c0028b91:	0f b6 db             	movzx  ebx,bl
c0028b94:	09 fb                	or     ebx,edi
c0028b96:	89 f1                	mov    ecx,esi
c0028b98:	d3 ea                	shr    edx,cl
c0028b9a:	31 c0                	xor    eax,eax
c0028b9c:	eb 0d                	jmp    c0028bab <__divdf3+0x32f>
c0028b9e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028ba3:	eb 02                	jmp    c0028ba7 <__divdf3+0x32b>
c0028ba5:	31 c0                	xor    eax,eax
c0028ba7:	31 db                	xor    ebx,ebx
c0028ba9:	31 d2                	xor    edx,edx
c0028bab:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028bae:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028bb1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028bb7:	09 c8                	or     eax,ecx
c0028bb9:	c1 e0 14             	shl    eax,0x14
c0028bbc:	89 d1                	mov    ecx,edx
c0028bbe:	c1 e9 0b             	shr    ecx,0xb
c0028bc1:	09 c8                	or     eax,ecx
c0028bc3:	89 c6                	mov    esi,eax
c0028bc5:	89 d9                	mov    ecx,ebx
c0028bc7:	c1 e9 0b             	shr    ecx,0xb
c0028bca:	c1 e2 15             	shl    edx,0x15
c0028bcd:	09 ca                	or     edx,ecx
c0028bcf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028bd5:	0f 95 c0             	setne  al
c0028bd8:	09 c1                	or     ecx,eax
c0028bda:	83 e1 01             	and    ecx,0x1
c0028bdd:	c1 eb 0a             	shr    ebx,0xa
c0028be0:	21 cb                	and    ebx,ecx
c0028be2:	01 d3                	add    ebx,edx
c0028be4:	89 d8                	mov    eax,ebx
c0028be6:	83 d6 00             	adc    esi,0x0
c0028be9:	89 f2                	mov    edx,esi
c0028beb:	89 c7                	mov    edi,eax
c0028bed:	89 d1                	mov    ecx,edx
c0028bef:	89 f8                	mov    eax,edi
c0028bf1:	89 ca                	mov    edx,ecx
c0028bf3:	83 c4 2c             	add    esp,0x2c
c0028bf6:	5b                   	pop    ebx
c0028bf7:	5e                   	pop    esi
c0028bf8:	5f                   	pop    edi
c0028bf9:	5d                   	pop    ebp
c0028bfa:	c3                   	ret    

c0028bfb <__floatsidf>:
c0028bfb:	55                   	push   ebp
c0028bfc:	89 e5                	mov    ebp,esp
c0028bfe:	56                   	push   esi
c0028bff:	53                   	push   ebx
c0028c00:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c03:	85 db                	test   ebx,ebx
c0028c05:	7e 15                	jle    c0028c1c <__floatsidf+0x21>
c0028c07:	0f bd cb             	bsr    ecx,ebx
c0028c0a:	83 f1 1f             	xor    ecx,0x1f
c0028c0d:	d3 e3                	shl    ebx,cl
c0028c0f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028c15:	b8 1e 04 00 00       	mov    eax,0x41e
c0028c1a:	eb 21                	jmp    c0028c3d <__floatsidf+0x42>
c0028c1c:	b8 00 00 00 00       	mov    eax,0x0
c0028c21:	ba 00 00 00 00       	mov    edx,0x0
c0028c26:	74 2a                	je     c0028c52 <__floatsidf+0x57>
c0028c28:	f7 db                	neg    ebx
c0028c2a:	0f bd cb             	bsr    ecx,ebx
c0028c2d:	83 f1 1f             	xor    ecx,0x1f
c0028c30:	d3 e3                	shl    ebx,cl
c0028c32:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028c38:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028c3d:	29 c8                	sub    eax,ecx
c0028c3f:	c1 e0 14             	shl    eax,0x14
c0028c42:	89 c1                	mov    ecx,eax
c0028c44:	89 de                	mov    esi,ebx
c0028c46:	c1 ee 0b             	shr    esi,0xb
c0028c49:	09 f1                	or     ecx,esi
c0028c4b:	89 ca                	mov    edx,ecx
c0028c4d:	c1 e3 15             	shl    ebx,0x15
c0028c50:	89 d8                	mov    eax,ebx
c0028c52:	5b                   	pop    ebx
c0028c53:	5e                   	pop    esi
c0028c54:	5d                   	pop    ebp
c0028c55:	c3                   	ret    

c0028c56 <__floatunsidf>:
c0028c56:	55                   	push   ebp
c0028c57:	89 e5                	mov    ebp,esp
c0028c59:	56                   	push   esi
c0028c5a:	53                   	push   ebx
c0028c5b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c5e:	85 db                	test   ebx,ebx
c0028c60:	74 2a                	je     c0028c8c <__floatunsidf+0x36>
c0028c62:	0f bd cb             	bsr    ecx,ebx
c0028c65:	83 f1 1f             	xor    ecx,0x1f
c0028c68:	d3 e3                	shl    ebx,cl
c0028c6a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028c70:	b8 1e 04 00 00       	mov    eax,0x41e
c0028c75:	29 c8                	sub    eax,ecx
c0028c77:	c1 e0 14             	shl    eax,0x14
c0028c7a:	89 c1                	mov    ecx,eax
c0028c7c:	89 de                	mov    esi,ebx
c0028c7e:	c1 ee 0b             	shr    esi,0xb
c0028c81:	09 f1                	or     ecx,esi
c0028c83:	89 ca                	mov    edx,ecx
c0028c85:	c1 e3 15             	shl    ebx,0x15
c0028c88:	89 d8                	mov    eax,ebx
c0028c8a:	eb 04                	jmp    c0028c90 <__floatunsidf+0x3a>
c0028c8c:	31 c0                	xor    eax,eax
c0028c8e:	31 d2                	xor    edx,edx
c0028c90:	5b                   	pop    ebx
c0028c91:	5e                   	pop    esi
c0028c92:	5d                   	pop    ebp
c0028c93:	c3                   	ret    

c0028c94 <__fixdfsi>:
c0028c94:	55                   	push   ebp
c0028c95:	89 e5                	mov    ebp,esp
c0028c97:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c9a:	89 d1                	mov    ecx,edx
c0028c9c:	c1 e1 0b             	shl    ecx,0xb
c0028c9f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028ca8:	c1 e8 15             	shr    eax,0x15
c0028cab:	09 c1                	or     ecx,eax
c0028cad:	c1 fa 14             	sar    edx,0x14
c0028cb0:	78 1f                	js     c0028cd1 <__fixdfsi+0x3d>
c0028cb2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028cb8:	31 c0                	xor    eax,eax
c0028cba:	83 fa 1e             	cmp    edx,0x1e
c0028cbd:	77 40                	ja     c0028cff <__fixdfsi+0x6b>
c0028cbf:	89 c8                	mov    eax,ecx
c0028cc1:	0d 00 00 00 80       	or     eax,0x80000000
c0028cc6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028ccb:	29 d1                	sub    ecx,edx
c0028ccd:	d3 e8                	shr    eax,cl
c0028ccf:	eb 2e                	jmp    c0028cff <__fixdfsi+0x6b>
c0028cd1:	31 c0                	xor    eax,eax
c0028cd3:	81 c2 01 04 00 00    	add    edx,0x401
c0028cd9:	78 24                	js     c0028cff <__fixdfsi+0x6b>
c0028cdb:	83 fa 1e             	cmp    edx,0x1e
c0028cde:	7e 09                	jle    c0028ce9 <__fixdfsi+0x55>
c0028ce0:	83 fa 1f             	cmp    edx,0x1f
c0028ce3:	75 18                	jne    c0028cfd <__fixdfsi+0x69>
c0028ce5:	85 c9                	test   ecx,ecx
c0028ce7:	75 14                	jne    c0028cfd <__fixdfsi+0x69>
c0028ce9:	89 c8                	mov    eax,ecx
c0028ceb:	0d 00 00 00 80       	or     eax,0x80000000
c0028cf0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028cf5:	29 d1                	sub    ecx,edx
c0028cf7:	d3 e8                	shr    eax,cl
c0028cf9:	f7 d8                	neg    eax
c0028cfb:	eb 02                	jmp    c0028cff <__fixdfsi+0x6b>
c0028cfd:	31 c0                	xor    eax,eax
c0028cff:	5d                   	pop    ebp
c0028d00:	c3                   	ret    

c0028d01 <__fixunsdfsi>:
c0028d01:	55                   	push   ebp
c0028d02:	89 e5                	mov    ebp,esp
c0028d04:	53                   	push   ebx
c0028d05:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028d08:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028d0b:	89 d3                	mov    ebx,edx
c0028d0d:	c1 fb 14             	sar    ebx,0x14
c0028d10:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028d16:	31 c0                	xor    eax,eax
c0028d18:	83 fb 1f             	cmp    ebx,0x1f
c0028d1b:	77 1d                	ja     c0028d3a <__fixunsdfsi+0x39>
c0028d1d:	89 d0                	mov    eax,edx
c0028d1f:	c1 e0 0b             	shl    eax,0xb
c0028d22:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028d27:	c1 e9 15             	shr    ecx,0x15
c0028d2a:	09 c8                	or     eax,ecx
c0028d2c:	0d 00 00 00 80       	or     eax,0x80000000
c0028d31:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028d36:	29 d9                	sub    ecx,ebx
c0028d38:	d3 e8                	shr    eax,cl
c0028d3a:	5b                   	pop    ebx
c0028d3b:	5d                   	pop    ebp
c0028d3c:	c3                   	ret    

c0028d3d <__cmpdf2>:
c0028d3d:	55                   	push   ebp
c0028d3e:	89 e5                	mov    ebp,esp
c0028d40:	57                   	push   edi
c0028d41:	56                   	push   esi
c0028d42:	53                   	push   ebx
c0028d43:	83 ec 0c             	sub    esp,0xc
c0028d46:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028d49:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028d4c:	89 ca                	mov    edx,ecx
c0028d4e:	c1 ea 14             	shr    edx,0x14
c0028d51:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028d57:	89 cb                	mov    ebx,ecx
c0028d59:	c1 fb 1f             	sar    ebx,0x1f
c0028d5c:	31 da                	xor    edx,ebx
c0028d5e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028d61:	89 df                	mov    edi,ebx
c0028d63:	c1 e7 0b             	shl    edi,0xb
c0028d66:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028d69:	c1 e1 0b             	shl    ecx,0xb
c0028d6c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028d72:	c1 eb 15             	shr    ebx,0x15
c0028d75:	09 d9                	or     ecx,ebx
c0028d77:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028d7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028d7d:	89 ce                	mov    esi,ecx
c0028d7f:	c1 ee 14             	shr    esi,0x14
c0028d82:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028d88:	89 cb                	mov    ebx,ecx
c0028d8a:	c1 fb 1f             	sar    ebx,0x1f
c0028d8d:	31 de                	xor    esi,ebx
c0028d8f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028d92:	89 df                	mov    edi,ebx
c0028d94:	c1 e7 0b             	shl    edi,0xb
c0028d97:	c1 e1 0b             	shl    ecx,0xb
c0028d9a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028da0:	c1 eb 15             	shr    ebx,0x15
c0028da3:	09 d9                	or     ecx,ebx
c0028da5:	89 d3                	mov    ebx,edx
c0028da7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028dad:	43                   	inc    ebx
c0028dae:	83 fb 01             	cmp    ebx,0x1
c0028db1:	77 08                	ja     c0028dbb <__cmpdf2+0x7e>
c0028db3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028db6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028db9:	75 68                	jne    c0028e23 <__cmpdf2+0xe6>
c0028dbb:	89 f3                	mov    ebx,esi
c0028dbd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028dc3:	43                   	inc    ebx
c0028dc4:	83 fb 01             	cmp    ebx,0x1
c0028dc7:	77 06                	ja     c0028dcf <__cmpdf2+0x92>
c0028dc9:	89 fb                	mov    ebx,edi
c0028dcb:	09 cb                	or     ebx,ecx
c0028dcd:	75 54                	jne    c0028e23 <__cmpdf2+0xe6>
c0028dcf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028dd2:	09 f8                	or     eax,edi
c0028dd4:	09 c8                	or     eax,ecx
c0028dd6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028dd9:	75 12                	jne    c0028ded <__cmpdf2+0xb0>
c0028ddb:	8d 42 01             	lea    eax,[edx+0x1]
c0028dde:	83 f8 01             	cmp    eax,0x1
c0028de1:	77 0a                	ja     c0028ded <__cmpdf2+0xb0>
c0028de3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028de6:	31 c0                	xor    eax,eax
c0028de8:	83 fb 01             	cmp    ebx,0x1
c0028deb:	76 36                	jbe    c0028e23 <__cmpdf2+0xe6>
c0028ded:	b8 01 00 00 00       	mov    eax,0x1
c0028df2:	39 f2                	cmp    edx,esi
c0028df4:	7f 2d                	jg     c0028e23 <__cmpdf2+0xe6>
c0028df6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028dfb:	7c 26                	jl     c0028e23 <__cmpdf2+0xe6>
c0028dfd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028e00:	77 07                	ja     c0028e09 <__cmpdf2+0xcc>
c0028e02:	72 16                	jb     c0028e1a <__cmpdf2+0xdd>
c0028e04:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028e07:	76 0a                	jbe    c0028e13 <__cmpdf2+0xd6>
c0028e09:	89 d0                	mov    eax,edx
c0028e0b:	c1 f8 1f             	sar    eax,0x1f
c0028e0e:	83 c8 01             	or     eax,0x1
c0028e11:	eb 10                	jmp    c0028e23 <__cmpdf2+0xe6>
c0028e13:	b8 00 00 00 00       	mov    eax,0x0
c0028e18:	73 09                	jae    c0028e23 <__cmpdf2+0xe6>
c0028e1a:	89 d0                	mov    eax,edx
c0028e1c:	c1 f8 1f             	sar    eax,0x1f
c0028e1f:	83 e0 02             	and    eax,0x2
c0028e22:	48                   	dec    eax
c0028e23:	83 c4 0c             	add    esp,0xc
c0028e26:	5b                   	pop    ebx
c0028e27:	5e                   	pop    esi
c0028e28:	5f                   	pop    edi
c0028e29:	5d                   	pop    ebp
c0028e2a:	c3                   	ret    

c0028e2b <__eqdf2>:
c0028e2b:	55                   	push   ebp
c0028e2c:	89 e5                	mov    ebp,esp
c0028e2e:	50                   	push   eax
c0028e2f:	6a 01                	push   0x1
c0028e31:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028e34:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028e37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028e3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028e3d:	e8 fb fe ff ff       	call   c0028d3d <__cmpdf2>
c0028e42:	83 c4 18             	add    esp,0x18
c0028e45:	c9                   	leave  
c0028e46:	c3                   	ret    

c0028e47 <__nedf2>:
c0028e47:	eb e2                	jmp    c0028e2b <__eqdf2>

c0028e49 <__gtdf2>:
c0028e49:	55                   	push   ebp
c0028e4a:	89 e5                	mov    ebp,esp
c0028e4c:	50                   	push   eax
c0028e4d:	6a ff                	push   0xffffffff
c0028e4f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028e52:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028e55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028e58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028e5b:	e8 dd fe ff ff       	call   c0028d3d <__cmpdf2>
c0028e60:	83 c4 18             	add    esp,0x18
c0028e63:	c9                   	leave  
c0028e64:	c3                   	ret    

c0028e65 <__gedf2>:
c0028e65:	eb e2                	jmp    c0028e49 <__gtdf2>

c0028e67 <__ltdf2>:
c0028e67:	eb c2                	jmp    c0028e2b <__eqdf2>

c0028e69 <__ledf2>:
c0028e69:	eb c0                	jmp    c0028e2b <__eqdf2>

c0028e6b <__truncdfsf2>:
c0028e6b:	55                   	push   ebp
c0028e6c:	89 e5                	mov    ebp,esp
c0028e6e:	57                   	push   edi
c0028e6f:	56                   	push   esi
c0028e70:	53                   	push   ebx
c0028e71:	83 ec 0c             	sub    esp,0xc
c0028e74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028e77:	89 d1                	mov    ecx,edx
c0028e79:	c1 f9 14             	sar    ecx,0x14
c0028e7c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028e7f:	89 df                	mov    edi,ebx
c0028e81:	c1 e7 0b             	shl    edi,0xb
c0028e84:	89 d0                	mov    eax,edx
c0028e86:	c1 e0 0b             	shl    eax,0xb
c0028e89:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028e8e:	c1 eb 15             	shr    ebx,0x15
c0028e91:	09 d8                	or     eax,ebx
c0028e93:	89 cb                	mov    ebx,ecx
c0028e95:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028e9b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028ea1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028ea7:	0f 86 9e 00 00 00    	jbe    c0028f4b <__truncdfsf2+0xe0>
c0028ead:	85 db                	test   ebx,ebx
c0028eaf:	75 0a                	jne    c0028ebb <__truncdfsf2+0x50>
c0028eb1:	c1 fa 17             	sar    edx,0x17
c0028eb4:	30 d2                	xor    dl,dl
c0028eb6:	e9 84 00 00 00       	jmp    c0028f3f <__truncdfsf2+0xd4>
c0028ebb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028ec1:	83 fe 83             	cmp    esi,0xffffff83
c0028ec4:	7d 4b                	jge    c0028f11 <__truncdfsf2+0xa6>
c0028ec6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028ecb:	29 f1                	sub    ecx,esi
c0028ecd:	83 f9 1f             	cmp    ecx,0x1f
c0028ed0:	7f 6b                	jg     c0028f3d <__truncdfsf2+0xd2>
c0028ed2:	0d 00 00 00 80       	or     eax,0x80000000
c0028ed7:	89 c3                	mov    ebx,eax
c0028ed9:	d3 eb                	shr    ebx,cl
c0028edb:	be 01 00 00 00       	mov    esi,0x1
c0028ee0:	d3 e6                	shl    esi,cl
c0028ee2:	4e                   	dec    esi
c0028ee3:	21 f0                	and    eax,esi
c0028ee5:	09 f8                	or     eax,edi
c0028ee7:	0f 95 c0             	setne  al
c0028eea:	0f b6 c0             	movzx  eax,al
c0028eed:	09 c3                	or     ebx,eax
c0028eef:	89 d9                	mov    ecx,ebx
c0028ef1:	c1 e9 08             	shr    ecx,0x8
c0028ef4:	f6 c3 7f             	test   bl,0x7f
c0028ef7:	0f 95 c0             	setne  al
c0028efa:	09 c8                	or     eax,ecx
c0028efc:	83 e0 01             	and    eax,0x1
c0028eff:	c1 eb 07             	shr    ebx,0x7
c0028f02:	21 c3                	and    ebx,eax
c0028f04:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028f0a:	09 d1                	or     ecx,edx
c0028f0c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028f0f:	eb 76                	jmp    c0028f87 <__truncdfsf2+0x11c>
c0028f11:	83 c6 80             	add    esi,0xffffff80
c0028f14:	7e 1d                	jle    c0028f33 <__truncdfsf2+0xc8>
c0028f16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028f1c:	75 0b                	jne    c0028f29 <__truncdfsf2+0xbe>
c0028f1e:	09 f8                	or     eax,edi
c0028f20:	74 09                	je     c0028f2b <__truncdfsf2+0xc0>
c0028f22:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028f27:	eb 02                	jmp    c0028f2b <__truncdfsf2+0xc0>
c0028f29:	31 c0                	xor    eax,eax
c0028f2b:	c1 fa 17             	sar    edx,0x17
c0028f2e:	80 ca ff             	or     dl,0xff
c0028f31:	eb 0e                	jmp    c0028f41 <__truncdfsf2+0xd6>
c0028f33:	c1 fa 1f             	sar    edx,0x1f
c0028f36:	c1 e2 08             	shl    edx,0x8
c0028f39:	09 ca                	or     edx,ecx
c0028f3b:	eb 04                	jmp    c0028f41 <__truncdfsf2+0xd6>
c0028f3d:	31 d2                	xor    edx,edx
c0028f3f:	31 c0                	xor    eax,eax
c0028f41:	c1 e2 17             	shl    edx,0x17
c0028f44:	c1 e8 08             	shr    eax,0x8
c0028f47:	09 d0                	or     eax,edx
c0028f49:	eb 3c                	jmp    c0028f87 <__truncdfsf2+0x11c>
c0028f4b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028f51:	89 ca                	mov    edx,ecx
c0028f53:	c1 fa 0b             	sar    edx,0xb
c0028f56:	c1 e2 08             	shl    edx,0x8
c0028f59:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028f5c:	31 db                	xor    ebx,ebx
c0028f5e:	85 ff                	test   edi,edi
c0028f60:	0f 95 c3             	setne  bl
c0028f63:	09 d8                	or     eax,ebx
c0028f65:	89 c3                	mov    ebx,eax
c0028f67:	c1 eb 08             	shr    ebx,0x8
c0028f6a:	a8 7f                	test   al,0x7f
c0028f6c:	0f 95 c2             	setne  dl
c0028f6f:	89 d6                	mov    esi,edx
c0028f71:	09 de                	or     esi,ebx
c0028f73:	83 e6 01             	and    esi,0x1
c0028f76:	c1 e8 07             	shr    eax,0x7
c0028f79:	21 f0                	and    eax,esi
c0028f7b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028f7e:	09 ca                	or     edx,ecx
c0028f80:	c1 e2 17             	shl    edx,0x17
c0028f83:	09 da                	or     edx,ebx
c0028f85:	01 d0                	add    eax,edx
c0028f87:	83 c4 0c             	add    esp,0xc
c0028f8a:	5b                   	pop    ebx
c0028f8b:	5e                   	pop    esi
c0028f8c:	5f                   	pop    edi
c0028f8d:	5d                   	pop    ebp
c0028f8e:	c3                   	ret    

c0028f8f <__extendsfdf2>:
c0028f8f:	55                   	push   ebp
c0028f90:	89 e5                	mov    ebp,esp
c0028f92:	57                   	push   edi
c0028f93:	56                   	push   esi
c0028f94:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028f97:	89 d1                	mov    ecx,edx
c0028f99:	c1 f9 17             	sar    ecx,0x17
c0028f9c:	c1 e2 08             	shl    edx,0x8
c0028f9f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028fa5:	89 c8                	mov    eax,ecx
c0028fa7:	80 e4 f8             	and    ah,0xf8
c0028faa:	8d 71 01             	lea    esi,[ecx+0x1]
c0028fad:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028fb3:	75 27                	jne    c0028fdc <__extendsfdf2+0x4d>
c0028fb5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028fbb:	75 18                	jne    c0028fd5 <__extendsfdf2+0x46>
c0028fbd:	85 d2                	test   edx,edx
c0028fbf:	74 20                	je     c0028fe1 <__extendsfdf2+0x52>
c0028fc1:	41                   	inc    ecx
c0028fc2:	01 d2                	add    edx,edx
c0028fc4:	79 fb                	jns    c0028fc1 <__extendsfdf2+0x32>
c0028fc6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028fcc:	29 c8                	sub    eax,ecx
c0028fce:	05 81 03 00 00       	add    eax,0x381
c0028fd3:	eb 0c                	jmp    c0028fe1 <__extendsfdf2+0x52>
c0028fd5:	05 00 07 00 00       	add    eax,0x700
c0028fda:	eb 05                	jmp    c0028fe1 <__extendsfdf2+0x52>
c0028fdc:	05 80 03 00 00       	add    eax,0x380
c0028fe1:	c1 e0 14             	shl    eax,0x14
c0028fe4:	89 c1                	mov    ecx,eax
c0028fe6:	89 d0                	mov    eax,edx
c0028fe8:	c1 e8 0b             	shr    eax,0xb
c0028feb:	09 c1                	or     ecx,eax
c0028fed:	c1 e2 15             	shl    edx,0x15
c0028ff0:	89 d0                	mov    eax,edx
c0028ff2:	89 ca                	mov    edx,ecx
c0028ff4:	5e                   	pop    esi
c0028ff5:	5f                   	pop    edi
c0028ff6:	5d                   	pop    ebp
c0028ff7:	c3                   	ret    
c0028ff8:	66 90                	xchg   ax,ax
c0028ffa:	66 90                	xchg   ax,ax
c0028ffc:	66 90                	xchg   ax,ax
c0028ffe:	66 90                	xchg   ax,ax

c0029000 <fabs>:
c0029000:	83 ec 0c             	sub    esp,0xc
c0029003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029007:	89 04 24             	mov    DWORD PTR [esp],eax
c002900a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002900e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0029013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0029017:	dd 04 24             	fld    QWORD PTR [esp]
c002901a:	83 c4 0c             	add    esp,0xc
c002901d:	c3                   	ret    
c002901e:	66 90                	xchg   ax,ax

c0029020 <lrint>:
c0029020:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0029024:	83 ec 04             	sub    esp,0x4
c0029027:	db 1c 24             	fistp  DWORD PTR [esp]
c002902a:	58                   	pop    eax
c002902b:	c3                   	ret    

c002902c <lrintf>:
c002902c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0029030:	83 ec 04             	sub    esp,0x4
c0029033:	db 1c 24             	fistp  DWORD PTR [esp]
c0029036:	58                   	pop    eax
c0029037:	c3                   	ret    

Disassembly of section .init:

c0029038 <_init>:
c0029038:	55                   	push   ebp
c0029039:	89 e5                	mov    ebp,esp
c002903b:	e8 d8 70 fd ff       	call   c0000118 <frame_dummy>
c0029040:	e8 5b e0 ff ff       	call   c00270a0 <__do_global_ctors_aux>
c0029045:	5d                   	pop    ebp
c0029046:	c3                   	ret    

Disassembly of section .fini:

c0029047 <_fini>:
c0029047:	55                   	push   ebp
c0029048:	89 e5                	mov    ebp,esp
c002904a:	e8 59 70 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002904f:	5d                   	pop    ebp
c0029050:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0029052 <Computer::~Computer()>:
c0029052:	83 ec 0c             	sub    esp,0xc
c0029055:	ba 04 ad 02 c0       	mov    edx,0xc002ad04
c002905a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905e:	89 10                	mov    DWORD PTR [eax],edx
c0029060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029064:	83 ec 0c             	sub    esp,0xc
c0029067:	50                   	push   eax
c0029068:	e8 39 b1 fe ff       	call   c00141a6 <Device::~Device()>
c002906d:	83 c4 10             	add    esp,0x10
c0029070:	90                   	nop
c0029071:	83 c4 0c             	add    esp,0xc
c0029074:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029076 <Computer::~Computer()>:
c0029076:	83 ec 0c             	sub    esp,0xc
c0029079:	83 ec 0c             	sub    esp,0xc
c002907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029080:	e8 cd ff ff ff       	call   c0029052 <Computer::~Computer()>
c0029085:	83 c4 10             	add    esp,0x10
c0029088:	83 ec 08             	sub    esp,0x8
c002908b:	68 ec 01 00 00       	push   0x1ec
c0029090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029094:	e8 26 9d fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029099:	83 c4 10             	add    esp,0x10
c002909c:	83 c4 0c             	add    esp,0xc
c002909f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00290a0 <idleCommon()>:
c00290a0:	83 ec 0c             	sub    esp,0xc
c00290a3:	fa                   	cli    
c00290a4:	ff 05 e8 25 03 c0    	inc    DWORD PTR ds:0xc00325e8
c00290aa:	e8 8b 55 ff ff       	call   c001e63a <schedule()>
c00290af:	a1 e8 25 03 c0       	mov    eax,ds:0xc00325e8
c00290b4:	48                   	dec    eax
c00290b5:	a3 e8 25 03 c0       	mov    ds:0xc00325e8,eax
c00290ba:	75 01                	jne    c00290bd <idleCommon()+0x1d>
c00290bc:	fb                   	sti    
c00290bd:	83 c4 0c             	add    esp,0xc
c00290c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00290c2 <LinkedList<UnixFile>::~LinkedList()>:
c00290c2:	90                   	nop
c00290c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00290c4 <LinkedList<UnixFile>::LinkedList()>:
c00290c4:	83 ec 0c             	sub    esp,0xc
c00290c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029100:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029107:	83 ec 0c             	sub    esp,0xc
c002910a:	68 c2 af 02 c0       	push   0xc002afc2
c002910f:	e8 8b 9d fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0029114:	83 c4 10             	add    esp,0x10
c0029117:	90                   	nop
c0029118:	83 c4 0c             	add    esp,0xc
c002911b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002911c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002911c:	83 ec 0c             	sub    esp,0xc
c002911f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029124:	75 10                	jne    c0029136 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029126:	83 ec 0c             	sub    esp,0xc
c0029129:	68 dc af 02 c0       	push   0xc002afdc
c002912e:	e8 54 17 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029133:	83 c4 10             	add    esp,0x10
c0029136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913a:	8b 00                	mov    eax,DWORD PTR [eax]
c002913c:	85 c0                	test   eax,eax
c002913e:	74 34                	je     c0029174 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029147:	85 c0                	test   eax,eax
c0029149:	74 29                	je     c0029174 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002914b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029152:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029156:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029161:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029168:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002916b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029172:	eb 65                	jmp    c00291d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029178:	8b 00                	mov    eax,DWORD PTR [eax]
c002917a:	85 c0                	test   eax,eax
c002917c:	75 4b                	jne    c00291c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029185:	85 c0                	test   eax,eax
c0029187:	75 40                	jne    c00291c9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029191:	89 10                	mov    DWORD PTR [eax],edx
c0029193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029197:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002919b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002919e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291b3:	85 c0                	test   eax,eax
c00291b5:	74 22                	je     c00291d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00291b7:	83 ec 0c             	sub    esp,0xc
c00291ba:	68 fe af 02 c0       	push   0xc002affe
c00291bf:	e8 c3 16 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00291c4:	83 c4 10             	add    esp,0x10
c00291c7:	eb 10                	jmp    c00291d9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00291c9:	83 ec 0c             	sub    esp,0xc
c00291cc:	68 08 b0 02 c0       	push   0xc002b008
c00291d1:	e8 b1 16 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00291d6:	83 c4 10             	add    esp,0x10
c00291d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291e0:	8d 50 01             	lea    edx,[eax+0x1]
c00291e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291ea:	90                   	nop
c00291eb:	83 c4 0c             	add    esp,0xc
c00291ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00291f0 <LinkedList<UnixFile>::getFirstElement()>:
c00291f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00291f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00291f8 <LinkedList<UnixFile>::removeFirst()>:
c00291f8:	83 ec 0c             	sub    esp,0xc
c00291fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0029201:	85 c0                	test   eax,eax
c0029203:	75 12                	jne    c0029217 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029205:	83 ec 0c             	sub    esp,0xc
c0029208:	68 14 b0 02 c0       	push   0xc002b014
c002920d:	e8 75 16 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029212:	83 c4 10             	add    esp,0x10
c0029215:	eb 7e                	jmp    c0029295 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002921e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029221:	85 c0                	test   eax,eax
c0029223:	74 10                	je     c0029235 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029225:	83 ec 0c             	sub    esp,0xc
c0029228:	68 5f b0 02 c0       	push   0xc002b05f
c002922d:	e8 55 16 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029232:	83 c4 10             	add    esp,0x10
c0029235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029239:	8b 00                	mov    eax,DWORD PTR [eax]
c002923b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002923e:	85 c0                	test   eax,eax
c0029240:	75 33                	jne    c0029275 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029246:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002924c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029250:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002925e:	83 f8 01             	cmp    eax,0x1
c0029261:	74 21                	je     c0029284 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029263:	83 ec 0c             	sub    esp,0xc
c0029266:	68 38 b0 02 c0       	push   0xc002b038
c002926b:	e8 17 16 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029270:	83 c4 10             	add    esp,0x10
c0029273:	eb 0f                	jmp    c0029284 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029279:	8b 00                	mov    eax,DWORD PTR [eax]
c002927b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002927e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029282:	89 10                	mov    DWORD PTR [eax],edx
c0029284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029288:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002928b:	8d 50 ff             	lea    edx,[eax-0x1]
c002928e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029292:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029295:	83 c4 0c             	add    esp,0xc
c0029298:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002929a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002929a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002929e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292a1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00292a2 <DriverlessDevice::~DriverlessDevice()>:
c00292a2:	ba e4 b7 02 c0       	mov    edx,0xc002b7e4
c00292a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292ab:	89 10                	mov    DWORD PTR [eax],edx
c00292ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292b1:	50                   	push   eax
c00292b2:	e8 ef ae fe ff       	call   c00141a6 <Device::~Device()>
c00292b7:	83 c4 04             	add    esp,0x4
c00292ba:	90                   	nop
c00292bb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00292bc <DriverlessDevice::~DriverlessDevice()>:
c00292bc:	83 ec 0c             	sub    esp,0xc
c00292bf:	83 ec 0c             	sub    esp,0xc
c00292c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292c6:	e8 d7 ff ff ff       	call   c00292a2 <DriverlessDevice::~DriverlessDevice()>
c00292cb:	83 c4 10             	add    esp,0x10
c00292ce:	83 ec 08             	sub    esp,0x8
c00292d1:	68 58 01 00 00       	push   0x158
c00292d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292da:	e8 e0 9a fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c00292df:	83 c4 10             	add    esp,0x10
c00292e2:	83 c4 0c             	add    esp,0xc
c00292e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00292e6 <LinkedList<Device>::addElement(Device*)>:
c00292e6:	83 ec 0c             	sub    esp,0xc
c00292e9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00292ee:	75 10                	jne    c0029300 <LinkedList<Device>::addElement(Device*)+0x1a>
c00292f0:	83 ec 0c             	sub    esp,0xc
c00292f3:	68 dc af 02 c0       	push   0xc002afdc
c00292f8:	e8 8a 15 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00292fd:	83 c4 10             	add    esp,0x10
c0029300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029304:	8b 00                	mov    eax,DWORD PTR [eax]
c0029306:	85 c0                	test   eax,eax
c0029308:	74 3a                	je     c0029344 <LinkedList<Device>::addElement(Device*)+0x5e>
c002930a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002930e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029311:	85 c0                	test   eax,eax
c0029313:	74 2f                	je     c0029344 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029319:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002931c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029320:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002932e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029335:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029338:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029342:	eb 68                	jmp    c00293ac <LinkedList<Device>::addElement(Device*)+0xc6>
c0029344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029348:	8b 00                	mov    eax,DWORD PTR [eax]
c002934a:	85 c0                	test   eax,eax
c002934c:	75 4e                	jne    c002939c <LinkedList<Device>::addElement(Device*)+0xb6>
c002934e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029352:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029355:	85 c0                	test   eax,eax
c0029357:	75 43                	jne    c002939c <LinkedList<Device>::addElement(Device*)+0xb6>
c0029359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002935d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029361:	89 10                	mov    DWORD PTR [eax],edx
c0029363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029367:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002936b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002936e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029372:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029375:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002937f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029383:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029386:	85 c0                	test   eax,eax
c0029388:	74 22                	je     c00293ac <LinkedList<Device>::addElement(Device*)+0xc6>
c002938a:	83 ec 0c             	sub    esp,0xc
c002938d:	68 fe af 02 c0       	push   0xc002affe
c0029392:	e8 f0 14 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029397:	83 c4 10             	add    esp,0x10
c002939a:	eb 10                	jmp    c00293ac <LinkedList<Device>::addElement(Device*)+0xc6>
c002939c:	83 ec 0c             	sub    esp,0xc
c002939f:	68 08 b0 02 c0       	push   0xc002b008
c00293a4:	e8 de 14 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00293a9:	83 c4 10             	add    esp,0x10
c00293ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293b3:	8d 50 01             	lea    edx,[eax+0x1]
c00293b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293bd:	90                   	nop
c00293be:	83 c4 0c             	add    esp,0xc
c00293c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00293c2 <LinkedList<Device>::LinkedList()>:
c00293c2:	83 ec 0c             	sub    esp,0xc
c00293c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029405:	83 ec 0c             	sub    esp,0xc
c0029408:	68 c2 af 02 c0       	push   0xc002afc2
c002940d:	e8 8d 9a fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c0029412:	83 c4 10             	add    esp,0x10
c0029415:	90                   	nop
c0029416:	83 c4 0c             	add    esp,0xc
c0029419:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002941a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002941a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002941e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029420:	85 c0                	test   eax,eax
c0029422:	75 0e                	jne    c0029432 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002942b:	85 c0                	test   eax,eax
c002942d:	75 03                	jne    c0029432 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002942f:	b0 01                	mov    al,0x1
c0029431:	c3                   	ret    
c0029432:	b0 00                	mov    al,0x0
c0029434:	90                   	nop
c0029435:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029436 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002943a:	8b 00                	mov    eax,DWORD PTR [eax]
c002943c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002943e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002943e:	83 ec 0c             	sub    esp,0xc
c0029441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029445:	8b 00                	mov    eax,DWORD PTR [eax]
c0029447:	85 c0                	test   eax,eax
c0029449:	75 15                	jne    c0029460 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002944b:	83 ec 0c             	sub    esp,0xc
c002944e:	68 14 b0 02 c0       	push   0xc002b014
c0029453:	e8 2f 14 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029458:	83 c4 10             	add    esp,0x10
c002945b:	e9 88 00 00 00       	jmp    c00294e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029464:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029467:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002946a:	85 c0                	test   eax,eax
c002946c:	0f 95 c0             	setne  al
c002946f:	84 c0                	test   al,al
c0029471:	74 10                	je     c0029483 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029473:	83 ec 0c             	sub    esp,0xc
c0029476:	68 5f b0 02 c0       	push   0xc002b05f
c002947b:	e8 07 14 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029480:	83 c4 10             	add    esp,0x10
c0029483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029487:	8b 00                	mov    eax,DWORD PTR [eax]
c0029489:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002948c:	85 c0                	test   eax,eax
c002948e:	0f 94 c0             	sete   al
c0029491:	84 c0                	test   al,al
c0029493:	74 33                	je     c00294c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029499:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002949f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294b1:	83 f8 01             	cmp    eax,0x1
c00294b4:	74 21                	je     c00294d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00294b6:	83 ec 0c             	sub    esp,0xc
c00294b9:	68 38 b0 02 c0       	push   0xc002b038
c00294be:	e8 c4 13 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00294c3:	83 c4 10             	add    esp,0x10
c00294c6:	eb 0f                	jmp    c00294d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00294c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00294ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00294d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d5:	89 10                	mov    DWORD PTR [eax],edx
c00294d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294de:	8d 50 ff             	lea    edx,[eax-0x1]
c00294e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294e8:	83 c4 0c             	add    esp,0xc
c00294eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00294ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00294ec:	83 ec 0c             	sub    esp,0xc
c00294ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00294f4:	75 10                	jne    c0029506 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00294f6:	83 ec 0c             	sub    esp,0xc
c00294f9:	68 dc af 02 c0       	push   0xc002afdc
c00294fe:	e8 84 13 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029503:	83 c4 10             	add    esp,0x10
c0029506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950a:	8b 00                	mov    eax,DWORD PTR [eax]
c002950c:	85 c0                	test   eax,eax
c002950e:	74 34                	je     c0029544 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029517:	85 c0                	test   eax,eax
c0029519:	74 29                	je     c0029544 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002951b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002951f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029522:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029526:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029531:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002953b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029542:	eb 65                	jmp    c00295a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029548:	8b 00                	mov    eax,DWORD PTR [eax]
c002954a:	85 c0                	test   eax,eax
c002954c:	75 4b                	jne    c0029599 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002954e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029552:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029555:	85 c0                	test   eax,eax
c0029557:	75 40                	jne    c0029599 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029561:	89 10                	mov    DWORD PTR [eax],edx
c0029563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029567:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002956b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002956e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029572:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029575:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002957c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029580:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029583:	85 c0                	test   eax,eax
c0029585:	74 22                	je     c00295a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029587:	83 ec 0c             	sub    esp,0xc
c002958a:	68 fe af 02 c0       	push   0xc002affe
c002958f:	e8 f3 12 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029594:	83 c4 10             	add    esp,0x10
c0029597:	eb 10                	jmp    c00295a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029599:	83 ec 0c             	sub    esp,0xc
c002959c:	68 08 b0 02 c0       	push   0xc002b008
c00295a1:	e8 e1 12 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00295a6:	83 c4 10             	add    esp,0x10
c00295a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295b0:	8d 50 01             	lea    edx,[eax+0x1]
c00295b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00295ba:	90                   	nop
c00295bb:	83 c4 0c             	add    esp,0xc
c00295be:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00295c0 <ACPI::~ACPI()>:
c00295c0:	83 ec 0c             	sub    esp,0xc
c00295c3:	ba 10 c2 02 c0       	mov    edx,0xc002c210
c00295c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295cc:	89 10                	mov    DWORD PTR [eax],edx
c00295ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d2:	83 ec 0c             	sub    esp,0xc
c00295d5:	50                   	push   eax
c00295d6:	e8 cb ab fe ff       	call   c00141a6 <Device::~Device()>
c00295db:	83 c4 10             	add    esp,0x10
c00295de:	90                   	nop
c00295df:	83 c4 0c             	add    esp,0xc
c00295e2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00295e4 <ACPI::~ACPI()>:
c00295e4:	83 ec 0c             	sub    esp,0xc
c00295e7:	83 ec 0c             	sub    esp,0xc
c00295ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295ee:	e8 cd ff ff ff       	call   c00295c0 <ACPI::~ACPI()>
c00295f3:	83 c4 10             	add    esp,0x10
c00295f6:	83 ec 08             	sub    esp,0x8
c00295f9:	68 68 12 00 00       	push   0x1268
c00295fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029602:	e8 b8 97 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029607:	83 c4 10             	add    esp,0x10
c002960a:	83 c4 0c             	add    esp,0xc
c002960d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002960e <LinkedList<Device>::~LinkedList()>:
c002960e:	90                   	nop
c002960f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029610 <LinkedList<Device>::isEmpty()>:
c0029610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029614:	8b 00                	mov    eax,DWORD PTR [eax]
c0029616:	85 c0                	test   eax,eax
c0029618:	75 0e                	jne    c0029628 <LinkedList<Device>::isEmpty()+0x18>
c002961a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002961e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029621:	85 c0                	test   eax,eax
c0029623:	75 03                	jne    c0029628 <LinkedList<Device>::isEmpty()+0x18>
c0029625:	b0 01                	mov    al,0x1
c0029627:	c3                   	ret    
c0029628:	b0 00                	mov    al,0x0
c002962a:	90                   	nop
c002962b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002962c <LinkedList<Device>::getFirstElement()>:
c002962c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029630:	8b 00                	mov    eax,DWORD PTR [eax]
c0029632:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029634 <LinkedList<Device>::removeFirst()>:
c0029634:	83 ec 0c             	sub    esp,0xc
c0029637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963b:	8b 00                	mov    eax,DWORD PTR [eax]
c002963d:	85 c0                	test   eax,eax
c002963f:	75 15                	jne    c0029656 <LinkedList<Device>::removeFirst()+0x22>
c0029641:	83 ec 0c             	sub    esp,0xc
c0029644:	68 14 b0 02 c0       	push   0xc002b014
c0029649:	e8 39 12 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c002964e:	83 c4 10             	add    esp,0x10
c0029651:	e9 87 00 00 00       	jmp    c00296dd <LinkedList<Device>::removeFirst()+0xa9>
c0029656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002965d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029663:	85 c0                	test   eax,eax
c0029665:	74 10                	je     c0029677 <LinkedList<Device>::removeFirst()+0x43>
c0029667:	83 ec 0c             	sub    esp,0xc
c002966a:	68 5f b0 02 c0       	push   0xc002b05f
c002966f:	e8 13 12 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c0029674:	83 c4 10             	add    esp,0x10
c0029677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002967b:	8b 00                	mov    eax,DWORD PTR [eax]
c002967d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029683:	85 c0                	test   eax,eax
c0029685:	75 33                	jne    c00296ba <LinkedList<Device>::removeFirst()+0x86>
c0029687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029695:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002969c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296a3:	83 f8 01             	cmp    eax,0x1
c00296a6:	74 24                	je     c00296cc <LinkedList<Device>::removeFirst()+0x98>
c00296a8:	83 ec 0c             	sub    esp,0xc
c00296ab:	68 38 b0 02 c0       	push   0xc002b038
c00296b0:	e8 d2 11 ff ff       	call   c001a887 <Krnl::panic(char const*)>
c00296b5:	83 c4 10             	add    esp,0x10
c00296b8:	eb 12                	jmp    c00296cc <LinkedList<Device>::removeFirst()+0x98>
c00296ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296be:	8b 00                	mov    eax,DWORD PTR [eax]
c00296c0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00296c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ca:	89 10                	mov    DWORD PTR [eax],edx
c00296cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00296d3:	8d 50 ff             	lea    edx,[eax-0x1]
c00296d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00296dd:	83 c4 0c             	add    esp,0xc
c00296e0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00296e2 <CPU::~CPU()>:
c00296e2:	83 ec 0c             	sub    esp,0xc
c00296e5:	ba 00 c6 02 c0       	mov    edx,0xc002c600
c00296ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ee:	89 10                	mov    DWORD PTR [eax],edx
c00296f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f4:	83 ec 0c             	sub    esp,0xc
c00296f7:	50                   	push   eax
c00296f8:	e8 a9 aa fe ff       	call   c00141a6 <Device::~Device()>
c00296fd:	83 c4 10             	add    esp,0x10
c0029700:	90                   	nop
c0029701:	83 c4 0c             	add    esp,0xc
c0029704:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029706 <CPU::~CPU()>:
c0029706:	83 ec 0c             	sub    esp,0xc
c0029709:	83 ec 0c             	sub    esp,0xc
c002970c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029710:	e8 cd ff ff ff       	call   c00296e2 <CPU::~CPU()>
c0029715:	83 c4 10             	add    esp,0x10
c0029718:	83 ec 08             	sub    esp,0x8
c002971b:	68 98 11 00 00       	push   0x1198
c0029720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029724:	e8 96 96 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029729:	83 c4 10             	add    esp,0x10
c002972c:	83 c4 0c             	add    esp,0xc
c002972f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029730 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029730:	90                   	nop
c0029731:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029732 <ThreadControlBlock::ThreadControlBlock()>:
c0029732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029736:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002973d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029741:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002974c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029757:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002975e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029762:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002976d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029775:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029779:	90                   	nop
c002977a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002977c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002977c:	83 ec 0c             	sub    esp,0xc
c002977f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029783:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029798:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002979f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00297a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00297b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00297bf:	83 ec 0c             	sub    esp,0xc
c00297c2:	68 c2 af 02 c0       	push   0xc002afc2
c00297c7:	e8 d3 96 fe ff       	call   c0012e9f <Dbg::kprintf(char const*, ...)>
c00297cc:	83 c4 10             	add    esp,0x10
c00297cf:	90                   	nop
c00297d0:	83 c4 0c             	add    esp,0xc
c00297d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00297d4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00297d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00297d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00297db:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00297dc <Vm::_FPUState::_FPUState()>:
c00297dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00297e0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00297e7:	90                   	nop
c00297e8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00297ea <PCI::~PCI()>:
c00297ea:	83 ec 0c             	sub    esp,0xc
c00297ed:	ba 04 d7 02 c0       	mov    edx,0xc002d704
c00297f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297f6:	89 10                	mov    DWORD PTR [eax],edx
c00297f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297fc:	83 ec 0c             	sub    esp,0xc
c00297ff:	50                   	push   eax
c0029800:	e8 71 a3 fe ff       	call   c0013b76 <Bus::~Bus()>
c0029805:	83 c4 10             	add    esp,0x10
c0029808:	90                   	nop
c0029809:	83 c4 0c             	add    esp,0xc
c002980c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002980e <PCI::~PCI()>:
c002980e:	83 ec 0c             	sub    esp,0xc
c0029811:	83 ec 0c             	sub    esp,0xc
c0029814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029818:	e8 cd ff ff ff       	call   c00297ea <PCI::~PCI()>
c002981d:	83 c4 10             	add    esp,0x10
c0029820:	83 ec 08             	sub    esp,0x8
c0029823:	68 58 01 00 00       	push   0x158
c0029828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002982c:	e8 8e 95 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029831:	83 c4 10             	add    esp,0x10
c0029834:	83 c4 0c             	add    esp,0xc
c0029837:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029838 <IDE::~IDE()>:
c0029838:	83 ec 0c             	sub    esp,0xc
c002983b:	ba 68 d9 02 c0       	mov    edx,0xc002d968
c0029840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029844:	89 10                	mov    DWORD PTR [eax],edx
c0029846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002984a:	83 ec 0c             	sub    esp,0xc
c002984d:	50                   	push   eax
c002984e:	e8 3d ae fe ff       	call   c0014690 <HardDiskController::~HardDiskController()>
c0029853:	83 c4 10             	add    esp,0x10
c0029856:	90                   	nop
c0029857:	83 c4 0c             	add    esp,0xc
c002985a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002985c <IDE::~IDE()>:
c002985c:	83 ec 0c             	sub    esp,0xc
c002985f:	83 ec 0c             	sub    esp,0xc
c0029862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029866:	e8 cd ff ff ff       	call   c0029838 <IDE::~IDE()>
c002986b:	83 c4 10             	add    esp,0x10
c002986e:	83 ec 08             	sub    esp,0x8
c0029871:	68 70 02 00 00       	push   0x270
c0029876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002987a:	e8 40 95 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c002987f:	83 c4 10             	add    esp,0x10
c0029882:	83 c4 0c             	add    esp,0xc
c0029885:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029886 <SATABus::~SATABus()>:
c0029886:	83 ec 0c             	sub    esp,0xc
c0029889:	ba 48 da 02 c0       	mov    edx,0xc002da48
c002988e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029892:	89 10                	mov    DWORD PTR [eax],edx
c0029894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029898:	83 ec 0c             	sub    esp,0xc
c002989b:	50                   	push   eax
c002989c:	e8 ef ad fe ff       	call   c0014690 <HardDiskController::~HardDiskController()>
c00298a1:	83 c4 10             	add    esp,0x10
c00298a4:	90                   	nop
c00298a5:	83 c4 0c             	add    esp,0xc
c00298a8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00298aa <SATABus::~SATABus()>:
c00298aa:	83 ec 0c             	sub    esp,0xc
c00298ad:	83 ec 0c             	sub    esp,0xc
c00298b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298b4:	e8 cd ff ff ff       	call   c0029886 <SATABus::~SATABus()>
c00298b9:	83 c4 10             	add    esp,0x10
c00298bc:	83 ec 08             	sub    esp,0x8
c00298bf:	68 64 01 00 00       	push   0x164
c00298c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298c8:	e8 f2 94 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c00298cd:	83 c4 10             	add    esp,0x10
c00298d0:	83 c4 0c             	add    esp,0xc
c00298d3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00298d4 <ATA::~ATA()>:
c00298d4:	83 ec 0c             	sub    esp,0xc
c00298d7:	ba 94 da 02 c0       	mov    edx,0xc002da94
c00298dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e0:	89 10                	mov    DWORD PTR [eax],edx
c00298e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e6:	83 ec 0c             	sub    esp,0xc
c00298e9:	50                   	push   eax
c00298ea:	e8 93 ae fe ff       	call   c0014782 <PhysicalDisk::~PhysicalDisk()>
c00298ef:	83 c4 10             	add    esp,0x10
c00298f2:	90                   	nop
c00298f3:	83 c4 0c             	add    esp,0xc
c00298f6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00298f8 <ATA::~ATA()>:
c00298f8:	83 ec 0c             	sub    esp,0xc
c00298fb:	83 ec 0c             	sub    esp,0xc
c00298fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029902:	e8 cd ff ff ff       	call   c00298d4 <ATA::~ATA()>
c0029907:	83 c4 10             	add    esp,0x10
c002990a:	83 ec 08             	sub    esp,0x8
c002990d:	68 7c 01 00 00       	push   0x17c
c0029912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029916:	e8 a4 94 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c002991b:	83 c4 10             	add    esp,0x10
c002991e:	83 c4 0c             	add    esp,0xc
c0029921:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029922 <ATAPI::~ATAPI()>:
c0029922:	83 ec 0c             	sub    esp,0xc
c0029925:	ba cc da 02 c0       	mov    edx,0xc002dacc
c002992a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992e:	89 10                	mov    DWORD PTR [eax],edx
c0029930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029934:	83 ec 0c             	sub    esp,0xc
c0029937:	50                   	push   eax
c0029938:	e8 45 ae fe ff       	call   c0014782 <PhysicalDisk::~PhysicalDisk()>
c002993d:	83 c4 10             	add    esp,0x10
c0029940:	90                   	nop
c0029941:	83 c4 0c             	add    esp,0xc
c0029944:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029946 <ATAPI::~ATAPI()>:
c0029946:	83 ec 0c             	sub    esp,0xc
c0029949:	83 ec 0c             	sub    esp,0xc
c002994c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029950:	e8 cd ff ff ff       	call   c0029922 <ATAPI::~ATAPI()>
c0029955:	83 c4 10             	add    esp,0x10
c0029958:	83 ec 08             	sub    esp,0x8
c002995b:	68 80 01 00 00       	push   0x180
c0029960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029964:	e8 56 94 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029969:	83 c4 10             	add    esp,0x10
c002996c:	83 c4 0c             	add    esp,0xc
c002996f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029970 <SATA::~SATA()>:
c0029970:	83 ec 0c             	sub    esp,0xc
c0029973:	ba 80 db 02 c0       	mov    edx,0xc002db80
c0029978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002997c:	89 10                	mov    DWORD PTR [eax],edx
c002997e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029982:	83 ec 0c             	sub    esp,0xc
c0029985:	50                   	push   eax
c0029986:	e8 f7 ad fe ff       	call   c0014782 <PhysicalDisk::~PhysicalDisk()>
c002998b:	83 c4 10             	add    esp,0x10
c002998e:	90                   	nop
c002998f:	83 c4 0c             	add    esp,0xc
c0029992:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029994 <SATA::~SATA()>:
c0029994:	83 ec 0c             	sub    esp,0xc
c0029997:	83 ec 0c             	sub    esp,0xc
c002999a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002999e:	e8 cd ff ff ff       	call   c0029970 <SATA::~SATA()>
c00299a3:	83 c4 10             	add    esp,0x10
c00299a6:	83 ec 08             	sub    esp,0x8
c00299a9:	68 7c 01 00 00       	push   0x17c
c00299ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299b2:	e8 08 94 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c00299b7:	83 c4 10             	add    esp,0x10
c00299ba:	83 c4 0c             	add    esp,0xc
c00299bd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00299be <SATAPI::~SATAPI()>:
c00299be:	83 ec 0c             	sub    esp,0xc
c00299c1:	ba 5c dc 02 c0       	mov    edx,0xc002dc5c
c00299c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ca:	89 10                	mov    DWORD PTR [eax],edx
c00299cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d0:	83 ec 0c             	sub    esp,0xc
c00299d3:	50                   	push   eax
c00299d4:	e8 a9 ad fe ff       	call   c0014782 <PhysicalDisk::~PhysicalDisk()>
c00299d9:	83 c4 10             	add    esp,0x10
c00299dc:	90                   	nop
c00299dd:	83 c4 0c             	add    esp,0xc
c00299e0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00299e2 <SATAPI::~SATAPI()>:
c00299e2:	83 ec 0c             	sub    esp,0xc
c00299e5:	83 ec 0c             	sub    esp,0xc
c00299e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299ec:	e8 cd ff ff ff       	call   c00299be <SATAPI::~SATAPI()>
c00299f1:	83 c4 10             	add    esp,0x10
c00299f4:	83 ec 08             	sub    esp,0x8
c00299f7:	68 80 01 00 00       	push   0x180
c00299fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a00:	e8 ba 93 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029a05:	83 c4 10             	add    esp,0x10
c0029a08:	83 c4 0c             	add    esp,0xc
c0029a0b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029a0c <AVX::~AVX()>:
c0029a0c:	83 ec 0c             	sub    esp,0xc
c0029a0f:	ba 9c dc 02 c0       	mov    edx,0xc002dc9c
c0029a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a18:	89 10                	mov    DWORD PTR [eax],edx
c0029a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a1e:	83 ec 0c             	sub    esp,0xc
c0029a21:	50                   	push   eax
c0029a22:	e8 df ad fe ff       	call   c0014806 <FPU::~FPU()>
c0029a27:	83 c4 10             	add    esp,0x10
c0029a2a:	90                   	nop
c0029a2b:	83 c4 0c             	add    esp,0xc
c0029a2e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029a30 <AVX::~AVX()>:
c0029a30:	83 ec 0c             	sub    esp,0xc
c0029a33:	83 ec 0c             	sub    esp,0xc
c0029a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a3a:	e8 cd ff ff ff       	call   c0029a0c <AVX::~AVX()>
c0029a3f:	83 c4 10             	add    esp,0x10
c0029a42:	83 ec 08             	sub    esp,0x8
c0029a45:	68 58 01 00 00       	push   0x158
c0029a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a4e:	e8 6c 93 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029a53:	83 c4 10             	add    esp,0x10
c0029a56:	83 c4 0c             	add    esp,0xc
c0029a59:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029a5a <MMX::~MMX()>:
c0029a5a:	83 ec 0c             	sub    esp,0xc
c0029a5d:	ba dc dc 02 c0       	mov    edx,0xc002dcdc
c0029a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a66:	89 10                	mov    DWORD PTR [eax],edx
c0029a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a6c:	83 ec 0c             	sub    esp,0xc
c0029a6f:	50                   	push   eax
c0029a70:	e8 91 ad fe ff       	call   c0014806 <FPU::~FPU()>
c0029a75:	83 c4 10             	add    esp,0x10
c0029a78:	90                   	nop
c0029a79:	83 c4 0c             	add    esp,0xc
c0029a7c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029a7e <MMX::~MMX()>:
c0029a7e:	83 ec 0c             	sub    esp,0xc
c0029a81:	83 ec 0c             	sub    esp,0xc
c0029a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a88:	e8 cd ff ff ff       	call   c0029a5a <MMX::~MMX()>
c0029a8d:	83 c4 10             	add    esp,0x10
c0029a90:	83 ec 08             	sub    esp,0x8
c0029a93:	68 58 01 00 00       	push   0x158
c0029a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a9c:	e8 1e 93 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029aa1:	83 c4 10             	add    esp,0x10
c0029aa4:	83 c4 0c             	add    esp,0xc
c0029aa7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029aa8 <SSE::~SSE()>:
c0029aa8:	83 ec 0c             	sub    esp,0xc
c0029aab:	ba 1c dd 02 c0       	mov    edx,0xc002dd1c
c0029ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ab4:	89 10                	mov    DWORD PTR [eax],edx
c0029ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aba:	83 ec 0c             	sub    esp,0xc
c0029abd:	50                   	push   eax
c0029abe:	e8 43 ad fe ff       	call   c0014806 <FPU::~FPU()>
c0029ac3:	83 c4 10             	add    esp,0x10
c0029ac6:	90                   	nop
c0029ac7:	83 c4 0c             	add    esp,0xc
c0029aca:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029acc <SSE::~SSE()>:
c0029acc:	83 ec 0c             	sub    esp,0xc
c0029acf:	83 ec 0c             	sub    esp,0xc
c0029ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ad6:	e8 cd ff ff ff       	call   c0029aa8 <SSE::~SSE()>
c0029adb:	83 c4 10             	add    esp,0x10
c0029ade:	83 ec 08             	sub    esp,0x8
c0029ae1:	68 58 01 00 00       	push   0x158
c0029ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aea:	e8 d0 92 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029aef:	83 c4 10             	add    esp,0x10
c0029af2:	83 c4 0c             	add    esp,0xc
c0029af5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029af6 <x87::~x87()>:
c0029af6:	83 ec 0c             	sub    esp,0xc
c0029af9:	ba 5c dd 02 c0       	mov    edx,0xc002dd5c
c0029afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b02:	89 10                	mov    DWORD PTR [eax],edx
c0029b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b08:	83 ec 0c             	sub    esp,0xc
c0029b0b:	50                   	push   eax
c0029b0c:	e8 f5 ac fe ff       	call   c0014806 <FPU::~FPU()>
c0029b11:	83 c4 10             	add    esp,0x10
c0029b14:	90                   	nop
c0029b15:	83 c4 0c             	add    esp,0xc
c0029b18:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029b1a <x87::~x87()>:
c0029b1a:	83 ec 0c             	sub    esp,0xc
c0029b1d:	83 ec 0c             	sub    esp,0xc
c0029b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b24:	e8 cd ff ff ff       	call   c0029af6 <x87::~x87()>
c0029b29:	83 c4 10             	add    esp,0x10
c0029b2c:	83 ec 08             	sub    esp,0x8
c0029b2f:	68 58 01 00 00       	push   0x158
c0029b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b38:	e8 82 92 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029b3d:	83 c4 10             	add    esp,0x10
c0029b40:	83 c4 0c             	add    esp,0xc
c0029b43:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029b44 <IOAPIC::~IOAPIC()>:
c0029b44:	83 ec 0c             	sub    esp,0xc
c0029b47:	ba b4 de 02 c0       	mov    edx,0xc002deb4
c0029b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b50:	89 10                	mov    DWORD PTR [eax],edx
c0029b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b56:	83 ec 0c             	sub    esp,0xc
c0029b59:	50                   	push   eax
c0029b5a:	e8 47 a6 fe ff       	call   c00141a6 <Device::~Device()>
c0029b5f:	83 c4 10             	add    esp,0x10
c0029b62:	90                   	nop
c0029b63:	83 c4 0c             	add    esp,0xc
c0029b66:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029b68 <IOAPIC::~IOAPIC()>:
c0029b68:	83 ec 0c             	sub    esp,0xc
c0029b6b:	83 ec 0c             	sub    esp,0xc
c0029b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b72:	e8 cd ff ff ff       	call   c0029b44 <IOAPIC::~IOAPIC()>
c0029b77:	83 c4 10             	add    esp,0x10
c0029b7a:	83 ec 08             	sub    esp,0x8
c0029b7d:	68 68 01 00 00       	push   0x168
c0029b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b86:	e8 34 92 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029b8b:	83 c4 10             	add    esp,0x10
c0029b8e:	83 c4 0c             	add    esp,0xc
c0029b91:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029b92 <APIC::~APIC()>:
c0029b92:	83 ec 0c             	sub    esp,0xc
c0029b95:	ba 6c de 02 c0       	mov    edx,0xc002de6c
c0029b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b9e:	89 10                	mov    DWORD PTR [eax],edx
c0029ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ba4:	83 ec 0c             	sub    esp,0xc
c0029ba7:	50                   	push   eax
c0029ba8:	e8 23 b1 fe ff       	call   c0014cd0 <InterruptController::~InterruptController()>
c0029bad:	83 c4 10             	add    esp,0x10
c0029bb0:	90                   	nop
c0029bb1:	83 c4 0c             	add    esp,0xc
c0029bb4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029bb6 <APIC::~APIC()>:
c0029bb6:	83 ec 0c             	sub    esp,0xc
c0029bb9:	83 ec 0c             	sub    esp,0xc
c0029bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bc0:	e8 cd ff ff ff       	call   c0029b92 <APIC::~APIC()>
c0029bc5:	83 c4 10             	add    esp,0x10
c0029bc8:	83 ec 08             	sub    esp,0x8
c0029bcb:	68 58 21 00 00       	push   0x2158
c0029bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bd4:	e8 e6 91 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029bd9:	83 c4 10             	add    esp,0x10
c0029bdc:	83 c4 0c             	add    esp,0xc
c0029bdf:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029be0 <PIC::~PIC()>:
c0029be0:	83 ec 0c             	sub    esp,0xc
c0029be3:	ba 04 df 02 c0       	mov    edx,0xc002df04
c0029be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bec:	89 10                	mov    DWORD PTR [eax],edx
c0029bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bf2:	83 ec 0c             	sub    esp,0xc
c0029bf5:	50                   	push   eax
c0029bf6:	e8 d5 b0 fe ff       	call   c0014cd0 <InterruptController::~InterruptController()>
c0029bfb:	83 c4 10             	add    esp,0x10
c0029bfe:	90                   	nop
c0029bff:	83 c4 0c             	add    esp,0xc
c0029c02:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029c04 <PIC::~PIC()>:
c0029c04:	83 ec 0c             	sub    esp,0xc
c0029c07:	83 ec 0c             	sub    esp,0xc
c0029c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c0e:	e8 cd ff ff ff       	call   c0029be0 <PIC::~PIC()>
c0029c13:	83 c4 10             	add    esp,0x10
c0029c16:	83 ec 08             	sub    esp,0x8
c0029c19:	68 58 21 00 00       	push   0x2158
c0029c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c22:	e8 98 91 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029c27:	83 c4 10             	add    esp,0x10
c0029c2a:	83 c4 0c             	add    esp,0xc
c0029c2d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029c2e <APICTimer::~APICTimer()>:
c0029c2e:	83 ec 0c             	sub    esp,0xc
c0029c31:	ba 58 df 02 c0       	mov    edx,0xc002df58
c0029c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c3a:	89 10                	mov    DWORD PTR [eax],edx
c0029c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c40:	83 ec 0c             	sub    esp,0xc
c0029c43:	50                   	push   eax
c0029c44:	e8 3d d1 fe ff       	call   c0016d86 <Timer::~Timer()>
c0029c49:	83 c4 10             	add    esp,0x10
c0029c4c:	90                   	nop
c0029c4d:	83 c4 0c             	add    esp,0xc
c0029c50:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029c52 <APICTimer::~APICTimer()>:
c0029c52:	83 ec 0c             	sub    esp,0xc
c0029c55:	83 ec 0c             	sub    esp,0xc
c0029c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c5c:	e8 cd ff ff ff       	call   c0029c2e <APICTimer::~APICTimer()>
c0029c61:	83 c4 10             	add    esp,0x10
c0029c64:	83 ec 08             	sub    esp,0x8
c0029c67:	68 60 01 00 00       	push   0x160
c0029c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c70:	e8 4a 91 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029c75:	83 c4 10             	add    esp,0x10
c0029c78:	83 c4 0c             	add    esp,0xc
c0029c7b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029c7c <PIT::~PIT()>:
c0029c7c:	83 ec 0c             	sub    esp,0xc
c0029c7f:	ba a8 df 02 c0       	mov    edx,0xc002dfa8
c0029c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c88:	89 10                	mov    DWORD PTR [eax],edx
c0029c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c8e:	83 ec 0c             	sub    esp,0xc
c0029c91:	50                   	push   eax
c0029c92:	e8 ef d0 fe ff       	call   c0016d86 <Timer::~Timer()>
c0029c97:	83 c4 10             	add    esp,0x10
c0029c9a:	90                   	nop
c0029c9b:	83 c4 0c             	add    esp,0xc
c0029c9e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ca0 <PIT::~PIT()>:
c0029ca0:	83 ec 0c             	sub    esp,0xc
c0029ca3:	83 ec 0c             	sub    esp,0xc
c0029ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029caa:	e8 cd ff ff ff       	call   c0029c7c <PIT::~PIT()>
c0029caf:	83 c4 10             	add    esp,0x10
c0029cb2:	83 ec 08             	sub    esp,0x8
c0029cb5:	68 5c 01 00 00       	push   0x15c
c0029cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cbe:	e8 fc 90 fe ff       	call   c0012dbf <operator delete(void*, unsigned long)>
c0029cc3:	83 c4 10             	add    esp,0x10
c0029cc6:	83 c4 0c             	add    esp,0xc
c0029cc9:	c3                   	ret    
