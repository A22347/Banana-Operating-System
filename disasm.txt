
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a1 f7 00 00       	call   c000f7c1 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 56 02 00       	call   c00256f8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b8 61 02 c0       	mov    ebx,0xc00261b8
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c4 61 02 c0    	cmp    ebx,0xc00261c4
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 2c a0 02 c0       	mov    eax,0xc002a02c
c0000049:	3d 2c a0 02 c0       	cmp    eax,0xc002a02c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 2c a0 02 c0       	push   0xc002a02c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 2c a0 02 c0       	mov    eax,0xc002a02c
c0000075:	2d 2c a0 02 c0       	sub    eax,0xc002a02c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 2c a0 02 c0       	push   0xc002a02c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 5c a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a65c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb cc 61 02 c0       	mov    ebx,0xc00261cc
c00000bb:	81 eb c8 61 02 c0    	sub    ebx,0xc00261c8
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c8 61 02 c0       	mov    esi,0xc00261c8
c00000ca:	a1 60 a6 02 c0       	mov    eax,ds:0xc002a660
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 60 a6 02 c0       	mov    ds:0xc002a660,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 60 a6 02 c0       	mov    eax,ds:0xc002a660
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 2c a0 02 c0       	push   0xc002a02c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 5c a6 02 c0 01 	mov    BYTE PTR ds:0xc002a65c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 64 a6 02 c0       	push   0xc002a664
c000012c:	68 2c a0 02 c0       	push   0xc002a02c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	fa                   	cli    
c00002b0:	55                   	push   ebp
c00002b1:	89 e5                	mov    ebp,esp
c00002b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002bf:	25 ff ff 00 00       	and    eax,0xffff
c00002c4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002d0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d6:	52                   	push   edx
c00002d7:	51                   	push   ecx
c00002d8:	68 02 02 02 00       	push   0x20202
c00002dd:	53                   	push   ebx
c00002de:	50                   	push   eax
c00002df:	cf                   	iret   

c00002e0 <goToUsermode>:
c00002e0:	fa                   	cli    
c00002e1:	55                   	push   ebp
c00002e2:	89 e5                	mov    ebp,esp
c00002e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e7:	66 b8 23 00          	mov    ax,0x23
c00002eb:	66 8e d8             	mov    ds,ax
c00002ee:	66 8e c0             	mov    es,ax
c00002f1:	66 8e e0             	mov    fs,ax
c00002f4:	66 8e e8             	mov    gs,ax
c00002f7:	89 e0                	mov    eax,esp
c00002f9:	68 23 00 00 00       	push   0x23
c00002fe:	50                   	push   eax
c00002ff:	68 02 02 00 00       	push   0x202
c0000304:	68 1b 00 00 00       	push   0x1b
c0000309:	53                   	push   ebx
c000030a:	cf                   	iret   

c000030b <switchToThreadASMFirstTime>:
c000030b:	9c                   	pushf  
c000030c:	fa                   	cli    
c000030d:	50                   	push   eax
c000030e:	53                   	push   ebx
c000030f:	51                   	push   ecx
c0000310:	52                   	push   edx
c0000311:	56                   	push   esi
c0000312:	57                   	push   edi
c0000313:	55                   	push   ebp
c0000314:	e9 11 00 00 00       	jmp    c000032a <commonThreadSwitch>

c0000319 <switchToThreadASM>:
c0000319:	9c                   	pushf  
c000031a:	50                   	push   eax
c000031b:	53                   	push   ebx
c000031c:	51                   	push   ecx
c000031d:	52                   	push   edx
c000031e:	56                   	push   esi
c000031f:	57                   	push   edi
c0000320:	55                   	push   ebp
c0000321:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000327:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000032a <commonThreadSwitch>:
c000032a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000334:	8b 06                	mov    eax,DWORD PTR [esi]
c0000336:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000339:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033c:	0f 20 d9             	mov    ecx,cr3
c000033f:	39 c8                	cmp    eax,ecx
c0000341:	74 03                	je     c0000346 <commonThreadSwitch.doneVAS>
c0000343:	0f 22 d8             	mov    cr3,eax

c0000346 <commonThreadSwitch.doneVAS>:
c0000346:	85 d2                	test   edx,edx
c0000348:	75 11                	jne    c000035b <commonThreadSwitch.firstTime>
c000034a:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034d:	e8 c0 b6 01 00       	call   c001ba12 <changeTSS>
c0000352:	5d                   	pop    ebp
c0000353:	5f                   	pop    edi
c0000354:	5e                   	pop    esi
c0000355:	5a                   	pop    edx
c0000356:	59                   	pop    ecx
c0000357:	5b                   	pop    ebx
c0000358:	58                   	pop    eax
c0000359:	9d                   	popf   
c000035a:	c3                   	ret    

c000035b <commonThreadSwitch.firstTime>:
c000035b:	fa                   	cli    
c000035c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035f:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000364:	60                   	pusha  
c0000365:	e8 b9 20 01 00       	call   c0012423 <mapVASFirstTime>
c000036a:	61                   	popa   
c000036b:	89 c4                	mov    esp,eax
c000036d:	56                   	push   esi
c000036e:	52                   	push   edx
c000036f:	e8 9e b6 01 00       	call   c001ba12 <changeTSS>
c0000374:	5a                   	pop    edx
c0000375:	5e                   	pop    esi
c0000376:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037d:	5d                   	pop    ebp
c000037e:	5f                   	pop    edi
c000037f:	5e                   	pop    esi
c0000380:	59                   	pop    ecx
c0000381:	59                   	pop    ecx
c0000382:	5b                   	pop    ebx
c0000383:	58                   	pop    eax
c0000384:	81 c4 04 00 00 00    	add    esp,0x4
c000038a:	6a 02                	push   0x2
c000038c:	9d                   	popf   
c000038d:	52                   	push   edx
c000038e:	e8 b5 ba 01 00       	call   c001be48 <taskStartupFunction>
c0000393:	5a                   	pop    edx
c0000394:	50                   	push   eax
c0000395:	ff d2                	call   edx
c0000397:	e8 62 c0 01 00       	call   c001c3fe <taskReturned>
c000039c:	e9 fb ff ff ff       	jmp    c000039c <commonThreadSwitch.firstTime+0x41>

c00003a1 <asmQuickAcquireLock>:
c00003a1:	55                   	push   ebp
c00003a2:	89 e5                	mov    ebp,esp
c00003a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a7 <asmQuickAcquireLock.retry>:
c00003a7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ac:	72 02                	jb     c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ae:	fa                   	cli    
c00003af:	c3                   	ret    

c00003b0 <asmQuickAcquireLock.spin_with_pause>:
c00003b0:	f3 90                	pause  
c00003b2:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b8:	75 f6                	jne    c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ba:	e9 e8 ff ff ff       	jmp    c00003a7 <asmQuickAcquireLock.retry>

c00003bf <asmQuickReleaseLock>:
c00003bf:	55                   	push   ebp
c00003c0:	89 e5                	mov    ebp,esp
c00003c2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c9:	5d                   	pop    ebp
c00003ca:	c3                   	ret    

c00003cb <asmAcquireLock>:
c00003cb:	55                   	push   ebp
c00003cc:	89 e5                	mov    ebp,esp
c00003ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003d1 <asmAcquireLock.retry>:
c00003d1:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d6:	72 05                	jb     c00003dd <asmAcquireLock.spin_with_pause>
c00003d8:	9c                   	pushf  
c00003d9:	58                   	pop    eax
c00003da:	fa                   	cli    
c00003db:	5d                   	pop    ebp
c00003dc:	c3                   	ret    

c00003dd <asmAcquireLock.spin_with_pause>:
c00003dd:	f3 90                	pause  
c00003df:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e5:	75 f6                	jne    c00003dd <asmAcquireLock.spin_with_pause>
c00003e7:	e9 e5 ff ff ff       	jmp    c00003d1 <asmAcquireLock.retry>

c00003ec <asmReleaseLock>:
c00003ec:	55                   	push   ebp
c00003ed:	89 e5                	mov    ebp,esp
c00003ef:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003fb:	52                   	push   edx
c00003fc:	9d                   	popf   
c00003fd:	5d                   	pop    ebp
c00003fe:	c3                   	ret    

c00003ff <loadGDT>:
c00003ff:	0f 01 15 90 aa 02 c0 	lgdtd  ds:0xc002aa90
c0000406:	66 b8 10 00          	mov    ax,0x10
c000040a:	66 8e d8             	mov    ds,ax
c000040d:	66 8e c0             	mov    es,ax
c0000410:	66 8e e0             	mov    fs,ax
c0000413:	66 8e e8             	mov    gs,ax
c0000416:	66 8e d0             	mov    ss,ax
c0000419:	e9 00 00 00 00       	jmp    c000041e <flush2>

c000041e <flush2>:
c000041e:	c3                   	ret    

c000041f <isr0>:
c000041f:	fa                   	cli    
c0000420:	68 00 00 00 00       	push   0x0
c0000425:	68 00 00 00 00       	push   0x0
c000042a:	e9 44 01 00 00       	jmp    c0000573 <int_common_stub>

c000042f <isr1>:
c000042f:	fa                   	cli    
c0000430:	6a 00                	push   0x0
c0000432:	6a 01                	push   0x1
c0000434:	e9 3a 01 00 00       	jmp    c0000573 <int_common_stub>

c0000439 <isr2>:
c0000439:	fa                   	cli    
c000043a:	6a 00                	push   0x0
c000043c:	6a 02                	push   0x2
c000043e:	e9 30 01 00 00       	jmp    c0000573 <int_common_stub>

c0000443 <isr3>:
c0000443:	fa                   	cli    
c0000444:	6a 00                	push   0x0
c0000446:	6a 03                	push   0x3
c0000448:	e9 26 01 00 00       	jmp    c0000573 <int_common_stub>

c000044d <isr4>:
c000044d:	fa                   	cli    
c000044e:	6a 00                	push   0x0
c0000450:	6a 04                	push   0x4
c0000452:	e9 1c 01 00 00       	jmp    c0000573 <int_common_stub>

c0000457 <isr5>:
c0000457:	fa                   	cli    
c0000458:	6a 00                	push   0x0
c000045a:	6a 05                	push   0x5
c000045c:	e9 12 01 00 00       	jmp    c0000573 <int_common_stub>

c0000461 <isr6>:
c0000461:	fa                   	cli    
c0000462:	6a 00                	push   0x0
c0000464:	6a 06                	push   0x6
c0000466:	e9 08 01 00 00       	jmp    c0000573 <int_common_stub>

c000046b <isr7>:
c000046b:	fa                   	cli    
c000046c:	6a 00                	push   0x0
c000046e:	6a 07                	push   0x7
c0000470:	e9 fe 00 00 00       	jmp    c0000573 <int_common_stub>

c0000475 <isr8>:
c0000475:	fa                   	cli    
c0000476:	6a 08                	push   0x8
c0000478:	e9 f6 00 00 00       	jmp    c0000573 <int_common_stub>

c000047d <isr9>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 09                	push   0x9
c0000482:	e9 ec 00 00 00       	jmp    c0000573 <int_common_stub>

c0000487 <isr10>:
c0000487:	fa                   	cli    
c0000488:	6a 0a                	push   0xa
c000048a:	e9 e4 00 00 00       	jmp    c0000573 <int_common_stub>

c000048f <isr11>:
c000048f:	fa                   	cli    
c0000490:	6a 0b                	push   0xb
c0000492:	e9 dc 00 00 00       	jmp    c0000573 <int_common_stub>

c0000497 <isr12>:
c0000497:	fa                   	cli    
c0000498:	6a 0c                	push   0xc
c000049a:	e9 d4 00 00 00       	jmp    c0000573 <int_common_stub>

c000049f <isr13>:
c000049f:	fa                   	cli    
c00004a0:	6a 0d                	push   0xd
c00004a2:	e9 cc 00 00 00       	jmp    c0000573 <int_common_stub>

c00004a7 <isr14>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0e                	push   0xe
c00004aa:	e9 c4 00 00 00       	jmp    c0000573 <int_common_stub>

c00004af <isr15>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 0f                	push   0xf
c00004b4:	e9 ba 00 00 00       	jmp    c0000573 <int_common_stub>

c00004b9 <isr16>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 10                	push   0x10
c00004be:	e9 b0 00 00 00       	jmp    c0000573 <int_common_stub>

c00004c3 <isr17>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 11                	push   0x11
c00004c8:	e9 a6 00 00 00       	jmp    c0000573 <int_common_stub>

c00004cd <isr18>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 12                	push   0x12
c00004d2:	e9 9c 00 00 00       	jmp    c0000573 <int_common_stub>

c00004d7 <irq3>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 23                	push   0x23
c00004dc:	e9 92 00 00 00       	jmp    c0000573 <int_common_stub>

c00004e1 <irq4>:
c00004e1:	fa                   	cli    
c00004e2:	6a 00                	push   0x0
c00004e4:	6a 24                	push   0x24
c00004e6:	e9 88 00 00 00       	jmp    c0000573 <int_common_stub>

c00004eb <irq5>:
c00004eb:	fa                   	cli    
c00004ec:	6a 00                	push   0x0
c00004ee:	6a 25                	push   0x25
c00004f0:	e9 7e 00 00 00       	jmp    c0000573 <int_common_stub>

c00004f5 <irq6>:
c00004f5:	fa                   	cli    
c00004f6:	6a 00                	push   0x0
c00004f8:	6a 26                	push   0x26
c00004fa:	e9 74 00 00 00       	jmp    c0000573 <int_common_stub>

c00004ff <irq7>:
c00004ff:	fa                   	cli    
c0000500:	6a 00                	push   0x0
c0000502:	6a 27                	push   0x27
c0000504:	e9 6a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000509 <irq8>:
c0000509:	fa                   	cli    
c000050a:	6a 00                	push   0x0
c000050c:	6a 28                	push   0x28
c000050e:	e9 60 00 00 00       	jmp    c0000573 <int_common_stub>

c0000513 <irq9>:
c0000513:	fa                   	cli    
c0000514:	6a 00                	push   0x0
c0000516:	6a 29                	push   0x29
c0000518:	e9 56 00 00 00       	jmp    c0000573 <int_common_stub>

c000051d <irq10>:
c000051d:	fa                   	cli    
c000051e:	6a 00                	push   0x0
c0000520:	6a 2a                	push   0x2a
c0000522:	e9 4c 00 00 00       	jmp    c0000573 <int_common_stub>

c0000527 <irq11>:
c0000527:	fa                   	cli    
c0000528:	6a 00                	push   0x0
c000052a:	6a 2b                	push   0x2b
c000052c:	e9 42 00 00 00       	jmp    c0000573 <int_common_stub>

c0000531 <irq12>:
c0000531:	fa                   	cli    
c0000532:	6a 00                	push   0x0
c0000534:	6a 2c                	push   0x2c
c0000536:	e9 38 00 00 00       	jmp    c0000573 <int_common_stub>

c000053b <irq13>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 2d                	push   0x2d
c0000540:	e9 2e 00 00 00       	jmp    c0000573 <int_common_stub>

c0000545 <irq14>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 2e                	push   0x2e
c000054a:	e9 24 00 00 00       	jmp    c0000573 <int_common_stub>

c000054f <irq15>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 2f                	push   0x2f
c0000554:	e9 1a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000559 <irq1>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 21                	push   0x21
c000055e:	eb 13                	jmp    c0000573 <int_common_stub>

c0000560 <irq2>:
c0000560:	fa                   	cli    
c0000561:	6a 00                	push   0x0
c0000563:	6a 22                	push   0x22
c0000565:	eb 0c                	jmp    c0000573 <int_common_stub>

c0000567 <isr96>:
c0000567:	6a 00                	push   0x0
c0000569:	6a 60                	push   0x60
c000056b:	fb                   	sti    
c000056c:	eb 05                	jmp    c0000573 <int_common_stub>

c000056e <irq0>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 20                	push   0x20

c0000573 <int_common_stub>:
c0000573:	60                   	pusha  
c0000574:	1e                   	push   ds
c0000575:	06                   	push   es
c0000576:	0f a0                	push   fs
c0000578:	0f a8                	push   gs
c000057a:	54                   	push   esp
c000057b:	e8 5b 3d 01 00       	call   c00142db <int_handler>
c0000580:	81 c4 04 00 00 00    	add    esp,0x4
c0000586:	0f a9                	pop    gs
c0000588:	0f a1                	pop    fs
c000058a:	07                   	pop    es
c000058b:	1f                   	pop    ds
c000058c:	61                   	popa   
c000058d:	81 c4 08 00 00 00    	add    esp,0x8
c0000593:	cf                   	iret   

c0000594 <irq16>:
c0000594:	fa                   	cli    
c0000595:	6a 00                	push   0x0
c0000597:	6a 30                	push   0x30
c0000599:	e9 d5 ff ff ff       	jmp    c0000573 <int_common_stub>

c000059e <irq17>:
c000059e:	fa                   	cli    
c000059f:	6a 00                	push   0x0
c00005a1:	6a 31                	push   0x31
c00005a3:	e9 cb ff ff ff       	jmp    c0000573 <int_common_stub>

c00005a8 <irq18>:
c00005a8:	fa                   	cli    
c00005a9:	6a 00                	push   0x0
c00005ab:	6a 32                	push   0x32
c00005ad:	e9 c1 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005b2 <irq19>:
c00005b2:	fa                   	cli    
c00005b3:	6a 00                	push   0x0
c00005b5:	6a 33                	push   0x33
c00005b7:	e9 b7 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005bc <irq20>:
c00005bc:	fa                   	cli    
c00005bd:	6a 00                	push   0x0
c00005bf:	6a 34                	push   0x34
c00005c1:	e9 ad ff ff ff       	jmp    c0000573 <int_common_stub>

c00005c6 <irq21>:
c00005c6:	fa                   	cli    
c00005c7:	6a 00                	push   0x0
c00005c9:	6a 35                	push   0x35
c00005cb:	e9 a3 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005d0 <irq22>:
c00005d0:	fa                   	cli    
c00005d1:	6a 00                	push   0x0
c00005d3:	6a 36                	push   0x36
c00005d5:	e9 99 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005da <irq23>:
c00005da:	fa                   	cli    
c00005db:	6a 00                	push   0x0
c00005dd:	6a 37                	push   0x37
c00005df:	e9 8f ff ff ff       	jmp    c0000573 <int_common_stub>

c00005e4 <memcmp>:
c00005e4:	56                   	push   esi
c00005e5:	53                   	push   ebx
c00005e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005f2:	01 d6                	add    esi,edx
c00005f4:	39 f2                	cmp    edx,esi
c00005f6:	74 0e                	je     c0000606 <memcmp+0x22>
c00005f8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00005fb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005fe:	38 c8                	cmp    al,cl
c0000600:	75 08                	jne    c000060a <memcmp+0x26>
c0000602:	42                   	inc    edx
c0000603:	43                   	inc    ebx
c0000604:	eb ee                	jmp    c00005f4 <memcmp+0x10>
c0000606:	31 c0                	xor    eax,eax
c0000608:	eb 02                	jmp    c000060c <memcmp+0x28>
c000060a:	29 c8                	sub    eax,ecx
c000060c:	5b                   	pop    ebx
c000060d:	5e                   	pop    esi
c000060e:	c3                   	ret    

c000060f <memmove>:
c000060f:	56                   	push   esi
c0000610:	53                   	push   ebx
c0000611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000615:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000061d:	39 c8                	cmp    eax,ecx
c000061f:	73 12                	jae    c0000633 <memmove+0x24>
c0000621:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000624:	89 c3                	mov    ebx,eax
c0000626:	39 f1                	cmp    ecx,esi
c0000628:	74 1a                	je     c0000644 <memmove+0x35>
c000062a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062c:	43                   	inc    ebx
c000062d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000630:	41                   	inc    ecx
c0000631:	eb f3                	jmp    c0000626 <memmove+0x17>
c0000633:	76 0f                	jbe    c0000644 <memmove+0x35>
c0000635:	85 d2                	test   edx,edx
c0000637:	74 0b                	je     c0000644 <memmove+0x35>
c0000639:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000063d:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000641:	4a                   	dec    edx
c0000642:	eb f1                	jmp    c0000635 <memmove+0x26>
c0000644:	5b                   	pop    ebx
c0000645:	5e                   	pop    esi
c0000646:	c3                   	ret    

c0000647 <memcpy>:
c0000647:	57                   	push   edi
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000652:	89 da                	mov    edx,ebx
c0000654:	89 d9                	mov    ecx,ebx
c0000656:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065a:	83 e2 fc             	and    edx,0xfffffffc
c000065d:	c1 e9 02             	shr    ecx,0x2
c0000660:	89 c7                	mov    edi,eax
c0000662:	fc                   	cld    
c0000663:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000665:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000668:	01 c2                	add    edx,eax
c000066a:	01 de                	add    esi,ebx
c000066c:	39 f1                	cmp    ecx,esi
c000066e:	74 09                	je     c0000679 <memcpy+0x32>
c0000670:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000672:	42                   	inc    edx
c0000673:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000676:	41                   	inc    ecx
c0000677:	eb f3                	jmp    c000066c <memcpy+0x25>
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	5f                   	pop    edi
c000067c:	c3                   	ret    

c000067d <memset>:
c000067d:	53                   	push   ebx
c000067e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000682:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000686:	89 c2                	mov    edx,eax
c0000688:	01 c1                	add    ecx,eax
c000068a:	39 ca                	cmp    edx,ecx
c000068c:	74 0a                	je     c0000698 <memset+0x1b>
c000068e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000692:	42                   	inc    edx
c0000693:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000696:	eb f2                	jmp    c000068a <memset+0xd>
c0000698:	5b                   	pop    ebx
c0000699:	c3                   	ret    

c000069a <strlen>:
c000069a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069e:	31 c0                	xor    eax,eax
c00006a0:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a4:	74 03                	je     c00006a9 <strlen+0xf>
c00006a6:	40                   	inc    eax
c00006a7:	eb f7                	jmp    c00006a0 <strlen+0x6>
c00006a9:	c3                   	ret    

c00006aa <strpbrk>:
c00006aa:	53                   	push   ebx
c00006ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006af:	8a 08                	mov    cl,BYTE PTR [eax]
c00006b1:	84 c9                	test   cl,cl
c00006b3:	74 14                	je     c00006c9 <strpbrk+0x1f>
c00006b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006b9:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006bb:	84 db                	test   bl,bl
c00006bd:	74 07                	je     c00006c6 <strpbrk+0x1c>
c00006bf:	38 cb                	cmp    bl,cl
c00006c1:	74 08                	je     c00006cb <strpbrk+0x21>
c00006c3:	42                   	inc    edx
c00006c4:	eb f3                	jmp    c00006b9 <strpbrk+0xf>
c00006c6:	40                   	inc    eax
c00006c7:	eb e6                	jmp    c00006af <strpbrk+0x5>
c00006c9:	31 c0                	xor    eax,eax
c00006cb:	5b                   	pop    ebx
c00006cc:	c3                   	ret    

c00006cd <strtok>:
c00006cd:	56                   	push   esi
c00006ce:	53                   	push   ebx
c00006cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d7:	85 db                	test   ebx,ebx
c00006d9:	75 0e                	jne    c00006e9 <strtok+0x1c>
c00006db:	8b 1d 7c a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a67c
c00006e1:	85 db                	test   ebx,ebx
c00006e3:	75 04                	jne    c00006e9 <strtok+0x1c>
c00006e5:	31 db                	xor    ebx,ebx
c00006e7:	eb 2e                	jmp    c0000717 <strtok+0x4a>
c00006e9:	56                   	push   esi
c00006ea:	53                   	push   ebx
c00006eb:	e8 ba ff ff ff       	call   c00006aa <strpbrk>
c00006f0:	5a                   	pop    edx
c00006f1:	a3 7c a6 02 c0       	mov    ds:0xc002a67c,eax
c00006f6:	59                   	pop    ecx
c00006f7:	a1 7c a6 02 c0       	mov    eax,ds:0xc002a67c
c00006fc:	39 d8                	cmp    eax,ebx
c00006fe:	75 07                	jne    c0000707 <strtok+0x3a>
c0000700:	43                   	inc    ebx
c0000701:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000705:	eb e2                	jmp    c00006e9 <strtok+0x1c>
c0000707:	85 c0                	test   eax,eax
c0000709:	74 da                	je     c00006e5 <strtok+0x18>
c000070b:	8d 50 01             	lea    edx,[eax+0x1]
c000070e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000711:	89 15 7c a6 02 c0    	mov    DWORD PTR ds:0xc002a67c,edx
c0000717:	89 d8                	mov    eax,ebx
c0000719:	5b                   	pop    ebx
c000071a:	5e                   	pop    esi
c000071b:	c3                   	ret    

c000071c <strcpy>:
c000071c:	53                   	push   ebx
c000071d:	31 d2                	xor    edx,edx
c000071f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000723:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000727:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000072a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000072d:	84 c9                	test   cl,cl
c000072f:	74 06                	je     c0000737 <strcpy+0x1b>
c0000731:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000734:	42                   	inc    edx
c0000735:	eb ec                	jmp    c0000723 <strcpy+0x7>
c0000737:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000073a:	5b                   	pop    ebx
c000073b:	c3                   	ret    

c000073c <strncpy>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000746:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000074a:	89 c3                	mov    ebx,eax
c000074c:	85 c9                	test   ecx,ecx
c000074e:	74 1a                	je     c000076a <strncpy+0x2e>
c0000750:	46                   	inc    esi
c0000751:	43                   	inc    ebx
c0000752:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000755:	49                   	dec    ecx
c0000756:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000759:	84 d2                	test   dl,dl
c000075b:	75 ef                	jne    c000074c <strncpy+0x10>
c000075d:	31 d2                	xor    edx,edx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	74 07                	je     c000076a <strncpy+0x2e>
c0000763:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000767:	42                   	inc    edx
c0000768:	eb f5                	jmp    c000075f <strncpy+0x23>
c000076a:	5b                   	pop    ebx
c000076b:	5e                   	pop    esi
c000076c:	c3                   	ret    

c000076d <strcmp>:
c000076d:	31 c9                	xor    ecx,ecx
c000076f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000773:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000777:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000077b:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000077f:	38 d0                	cmp    al,dl
c0000781:	75 08                	jne    c000078b <strcmp+0x1e>
c0000783:	41                   	inc    ecx
c0000784:	84 c0                	test   al,al
c0000786:	75 e7                	jne    c000076f <strcmp+0x2>
c0000788:	31 c0                	xor    eax,eax
c000078a:	c3                   	ret    
c000078b:	29 d0                	sub    eax,edx
c000078d:	c3                   	ret    

c000078e <strchr>:
c000078e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000792:	8a 10                	mov    dl,BYTE PTR [eax]
c0000794:	84 d2                	test   dl,dl
c0000796:	74 09                	je     c00007a1 <strchr+0x13>
c0000798:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000079c:	74 05                	je     c00007a3 <strchr+0x15>
c000079e:	40                   	inc    eax
c000079f:	eb f1                	jmp    c0000792 <strchr+0x4>
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	c3                   	ret    

c00007a4 <strncmp>:
c00007a4:	56                   	push   esi
c00007a5:	53                   	push   ebx
c00007a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007b2:	01 d6                	add    esi,edx
c00007b4:	39 f2                	cmp    edx,esi
c00007b6:	74 12                	je     c00007ca <strncmp+0x26>
c00007b8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007bb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007be:	38 c8                	cmp    al,cl
c00007c0:	75 0c                	jne    c00007ce <strncmp+0x2a>
c00007c2:	42                   	inc    edx
c00007c3:	84 c0                	test   al,al
c00007c5:	74 03                	je     c00007ca <strncmp+0x26>
c00007c7:	43                   	inc    ebx
c00007c8:	eb ea                	jmp    c00007b4 <strncmp+0x10>
c00007ca:	31 c0                	xor    eax,eax
c00007cc:	eb 02                	jmp    c00007d0 <strncmp+0x2c>
c00007ce:	29 c8                	sub    eax,ecx
c00007d0:	5b                   	pop    ebx
c00007d1:	5e                   	pop    esi
c00007d2:	c3                   	ret    

c00007d3 <strcat>:
c00007d3:	53                   	push   ebx
c00007d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d8:	89 c1                	mov    ecx,eax
c00007da:	8d 51 01             	lea    edx,[ecx+0x1]
c00007dd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007e1:	74 04                	je     c00007e7 <strcat+0x14>
c00007e3:	89 d1                	mov    ecx,edx
c00007e5:	eb f3                	jmp    c00007da <strcat+0x7>
c00007e7:	31 d2                	xor    edx,edx
c00007e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ed:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007f0:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c00007f3:	42                   	inc    edx
c00007f4:	84 db                	test   bl,bl
c00007f6:	75 f1                	jne    c00007e9 <strcat+0x16>
c00007f8:	5b                   	pop    ebx
c00007f9:	c3                   	ret    

c00007fa <strncat>:
c00007fa:	56                   	push   esi
c00007fb:	53                   	push   ebx
c00007fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000800:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000804:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000808:	89 c2                	mov    edx,eax
c000080a:	85 db                	test   ebx,ebx
c000080c:	74 23                	je     c0000831 <strncat+0x37>
c000080e:	8d 72 01             	lea    esi,[edx+0x1]
c0000811:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000815:	74 04                	je     c000081b <strncat+0x21>
c0000817:	89 f2                	mov    edx,esi
c0000819:	eb f3                	jmp    c000080e <strncat+0x14>
c000081b:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000081e:	41                   	inc    ecx
c000081f:	42                   	inc    edx
c0000820:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000823:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000826:	84 db                	test   bl,bl
c0000828:	74 07                	je     c0000831 <strncat+0x37>
c000082a:	39 f1                	cmp    ecx,esi
c000082c:	75 f0                	jne    c000081e <strncat+0x24>
c000082e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000831:	5b                   	pop    ebx
c0000832:	5e                   	pop    esi
c0000833:	c3                   	ret    

c0000834 <strstr>:
c0000834:	57                   	push   edi
c0000835:	56                   	push   esi
c0000836:	53                   	push   ebx
c0000837:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000083b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000083f:	57                   	push   edi
c0000840:	e8 55 fe ff ff       	call   c000069a <strlen>
c0000845:	59                   	pop    ecx
c0000846:	89 c6                	mov    esi,eax
c0000848:	85 c0                	test   eax,eax
c000084a:	74 1f                	je     c000086b <strstr+0x37>
c000084c:	53                   	push   ebx
c000084d:	e8 48 fe ff ff       	call   c000069a <strlen>
c0000852:	5a                   	pop    edx
c0000853:	39 f0                	cmp    eax,esi
c0000855:	72 12                	jb     c0000869 <strstr+0x35>
c0000857:	56                   	push   esi
c0000858:	57                   	push   edi
c0000859:	53                   	push   ebx
c000085a:	e8 85 fd ff ff       	call   c00005e4 <memcmp>
c000085f:	83 c4 0c             	add    esp,0xc
c0000862:	85 c0                	test   eax,eax
c0000864:	74 05                	je     c000086b <strstr+0x37>
c0000866:	43                   	inc    ebx
c0000867:	eb e3                	jmp    c000084c <strstr+0x18>
c0000869:	31 db                	xor    ebx,ebx
c000086b:	89 d8                	mov    eax,ebx
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    

c0000871 <toupper>:
c0000871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000875:	0f b6 d0             	movzx  edx,al
c0000878:	f6 82 e0 61 02 c0 02 	test   BYTE PTR [edx-0x3ffd9e20],0x2
c000087f:	74 03                	je     c0000884 <toupper+0x13>
c0000881:	83 e8 20             	sub    eax,0x20
c0000884:	c3                   	ret    

c0000885 <tolower>:
c0000885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000889:	0f b6 d0             	movzx  edx,al
c000088c:	f6 82 e0 61 02 c0 01 	test   BYTE PTR [edx-0x3ffd9e20],0x1
c0000893:	74 03                	je     c0000898 <tolower+0x13>
c0000895:	83 c0 20             	add    eax,0x20
c0000898:	c3                   	ret    

c0000899 <simple_strtoul>:
c0000899:	55                   	push   ebp
c000089a:	57                   	push   edi
c000089b:	56                   	push   esi
c000089c:	53                   	push   ebx
c000089d:	83 ec 08             	sub    esp,0x8
c00008a0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008a8:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008ab:	f6 82 e0 61 02 c0 08 	test   BYTE PTR [edx-0x3ffd9e20],0x8
c00008b2:	74 03                	je     c00008b7 <simple_strtoul+0x1e>
c00008b4:	41                   	inc    ecx
c00008b5:	eb f1                	jmp    c00008a8 <simple_strtoul+0xf>
c00008b7:	80 fa 09             	cmp    dl,0x9
c00008ba:	74 f8                	je     c00008b4 <simple_strtoul+0x1b>
c00008bc:	80 fa 2d             	cmp    dl,0x2d
c00008bf:	75 0b                	jne    c00008cc <simple_strtoul+0x33>
c00008c1:	41                   	inc    ecx
c00008c2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008ca:	eb 0e                	jmp    c00008da <simple_strtoul+0x41>
c00008cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008d4:	80 fa 2b             	cmp    dl,0x2b
c00008d7:	75 01                	jne    c00008da <simple_strtoul+0x41>
c00008d9:	41                   	inc    ecx
c00008da:	85 f6                	test   esi,esi
c00008dc:	75 22                	jne    c0000900 <simple_strtoul+0x67>
c00008de:	be 0a 00 00 00       	mov    esi,0xa
c00008e3:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008e6:	75 5a                	jne    c0000942 <simple_strtoul+0xa9>
c00008e8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008ec:	50                   	push   eax
c00008ed:	e8 93 ff ff ff       	call   c0000885 <tolower>
c00008f2:	5a                   	pop    edx
c00008f3:	83 f8 78             	cmp    eax,0x78
c00008f6:	74 03                	je     c00008fb <simple_strtoul+0x62>
c00008f8:	41                   	inc    ecx
c00008f9:	eb 16                	jmp    c0000911 <simple_strtoul+0x78>
c00008fb:	83 c1 02             	add    ecx,0x2
c00008fe:	eb 22                	jmp    c0000922 <simple_strtoul+0x89>
c0000900:	8d 46 fe             	lea    eax,[esi-0x2]
c0000903:	83 f8 22             	cmp    eax,0x22
c0000906:	0f 87 b7 00 00 00    	ja     c00009c3 <simple_strtoul+0x12a>
c000090c:	83 fe 08             	cmp    esi,0x8
c000090f:	75 0c                	jne    c000091d <simple_strtoul+0x84>
c0000911:	be 08 00 00 00       	mov    esi,0x8
c0000916:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000919:	75 27                	jne    c0000942 <simple_strtoul+0xa9>
c000091b:	eb 1f                	jmp    c000093c <simple_strtoul+0xa3>
c000091d:	83 fe 10             	cmp    esi,0x10
c0000920:	75 20                	jne    c0000942 <simple_strtoul+0xa9>
c0000922:	be 10 00 00 00       	mov    esi,0x10
c0000927:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092a:	75 16                	jne    c0000942 <simple_strtoul+0xa9>
c000092c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000930:	50                   	push   eax
c0000931:	e8 4f ff ff ff       	call   c0000885 <tolower>
c0000936:	5d                   	pop    ebp
c0000937:	83 f8 78             	cmp    eax,0x78
c000093a:	74 03                	je     c000093f <simple_strtoul+0xa6>
c000093c:	41                   	inc    ecx
c000093d:	eb 03                	jmp    c0000942 <simple_strtoul+0xa9>
c000093f:	83 c1 02             	add    ecx,0x2
c0000942:	31 ed                	xor    ebp,ebp
c0000944:	31 db                	xor    ebx,ebx
c0000946:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000094d:	8a 11                	mov    dl,BYTE PTR [ecx]
c000094f:	84 d2                	test   dl,dl
c0000951:	74 27                	je     c000097a <simple_strtoul+0xe1>
c0000953:	0f b6 fa             	movzx  edi,dl
c0000956:	f6 87 e0 61 02 c0 04 	test   BYTE PTR [edi-0x3ffd9e20],0x4
c000095d:	74 05                	je     c0000964 <simple_strtoul+0xcb>
c000095f:	83 ef 30             	sub    edi,0x30
c0000962:	eb 22                	jmp    c0000986 <simple_strtoul+0xed>
c0000964:	0f be d2             	movsx  edx,dl
c0000967:	52                   	push   edx
c0000968:	e8 04 ff ff ff       	call   c0000871 <toupper>
c000096d:	5f                   	pop    edi
c000096e:	0f b6 d0             	movzx  edx,al
c0000971:	f6 82 e0 61 02 c0 01 	test   BYTE PTR [edx-0x3ffd9e20],0x1
c0000978:	75 09                	jne    c0000983 <simple_strtoul+0xea>
c000097a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000097f:	75 2d                	jne    c00009ae <simple_strtoul+0x115>
c0000981:	eb 57                	jmp    c00009da <simple_strtoul+0x141>
c0000983:	8d 78 c9             	lea    edi,[eax-0x37]
c0000986:	39 f7                	cmp    edi,esi
c0000988:	73 f0                	jae    c000097a <simple_strtoul+0xe1>
c000098a:	31 d2                	xor    edx,edx
c000098c:	89 f8                	mov    eax,edi
c000098e:	f7 d0                	not    eax
c0000990:	f7 f6                	div    esi
c0000992:	39 d8                	cmp    eax,ebx
c0000994:	72 0e                	jb     c00009a4 <simple_strtoul+0x10b>
c0000996:	0f af de             	imul   ebx,esi
c0000999:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009a0:	01 fb                	add    ebx,edi
c00009a2:	eb 07                	jmp    c00009ab <simple_strtoul+0x112>
c00009a4:	bd 01 00 00 00       	mov    ebp,0x1
c00009a9:	31 db                	xor    ebx,ebx
c00009ab:	41                   	inc    ecx
c00009ac:	eb 9f                	jmp    c000094d <simple_strtoul+0xb4>
c00009ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009b1:	09 d8                	or     eax,ebx
c00009b3:	75 1f                	jne    c00009d4 <simple_strtoul+0x13b>
c00009b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009bd:	31 db                	xor    ebx,ebx
c00009bf:	89 38                	mov    DWORD PTR [eax],edi
c00009c1:	eb 17                	jmp    c00009da <simple_strtoul+0x141>
c00009c3:	31 db                	xor    ebx,ebx
c00009c5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ca:	74 14                	je     c00009e0 <simple_strtoul+0x147>
c00009cc:	31 ed                	xor    ebp,ebp
c00009ce:	85 c9                	test   ecx,ecx
c00009d0:	75 e3                	jne    c00009b5 <simple_strtoul+0x11c>
c00009d2:	31 db                	xor    ebx,ebx
c00009d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d8:	89 08                	mov    DWORD PTR [eax],ecx
c00009da:	4d                   	dec    ebp
c00009db:	75 03                	jne    c00009e0 <simple_strtoul+0x147>
c00009dd:	83 cb ff             	or     ebx,0xffffffff
c00009e0:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009e5:	75 02                	jne    c00009e9 <simple_strtoul+0x150>
c00009e7:	f7 db                	neg    ebx
c00009e9:	83 c4 08             	add    esp,0x8
c00009ec:	89 d8                	mov    eax,ebx
c00009ee:	5b                   	pop    ebx
c00009ef:	5e                   	pop    esi
c00009f0:	5f                   	pop    edi
c00009f1:	5d                   	pop    ebp
c00009f2:	c3                   	ret    

c00009f3 <largebin_index>:
c00009f3:	89 c2                	mov    edx,eax
c00009f5:	c1 ea 08             	shr    edx,0x8
c00009f8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00009fe:	77 10                	ja     c0000a10 <largebin_index+0x1d>
c0000a00:	0f bd d2             	bsr    edx,edx
c0000a03:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a06:	d3 e8                	shr    eax,cl
c0000a08:	83 e0 03             	and    eax,0x3
c0000a0b:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a0f:	c3                   	ret    
c0000a10:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a15:	c3                   	ret    

c0000a16 <malloc_init_state>:
c0000a16:	53                   	push   ebx
c0000a17:	8d 50 34             	lea    edx,[eax+0x34]
c0000a1a:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a20:	89 d1                	mov    ecx,edx
c0000a22:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a25:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a28:	83 c2 08             	add    edx,0x8
c0000a2b:	39 da                	cmp    edx,ebx
c0000a2d:	75 f3                	jne    c0000a22 <malloc_init_state+0xc>
c0000a2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a31:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a3b:	83 e2 03             	and    edx,0x3
c0000a3e:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a48:	83 ca 48             	or     edx,0x48
c0000a4b:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a55:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a5f:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a66:	89 10                	mov    DWORD PTR [eax],edx
c0000a68:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a6b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a75:	5b                   	pop    ebx
c0000a76:	c3                   	ret    

c0000a77 <malloc_consolidate>:
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	85 d2                	test   edx,edx
c0000a7b:	0f 84 d8 00 00 00    	je     c0000b59 <malloc_consolidate+0xe2>
c0000a81:	55                   	push   ebp
c0000a82:	83 e2 fd             	and    edx,0xfffffffd
c0000a85:	57                   	push   edi
c0000a86:	89 c5                	mov    ebp,eax
c0000a88:	56                   	push   esi
c0000a89:	8d 78 34             	lea    edi,[eax+0x34]
c0000a8c:	53                   	push   ebx
c0000a8d:	83 ec 10             	sub    esp,0x10
c0000a90:	89 10                	mov    DWORD PTR [eax],edx
c0000a92:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a96:	c1 ea 03             	shr    edx,0x3
c0000a99:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aa1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	0f 84 98 00 00 00    	je     c0000b44 <malloc_consolidate+0xcd>
c0000aac:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ab3:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ab6:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ab9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000abd:	89 f9                	mov    ecx,edi
c0000abf:	83 e1 fe             	and    ecx,0xfffffffe
c0000ac2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ac5:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ac8:	83 e3 fc             	and    ebx,0xfffffffc
c0000acb:	83 e7 01             	and    edi,0x1
c0000ace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000ad1:	75 14                	jne    c0000ae7 <malloc_consolidate+0x70>
c0000ad3:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ad5:	29 fa                	sub    edx,edi
c0000ad7:	01 f9                	add    ecx,edi
c0000ad9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000adc:	89 fb                	mov    ebx,edi
c0000ade:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ae1:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ae4:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ae7:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000aea:	74 40                	je     c0000b2c <malloc_consolidate+0xb5>
c0000aec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000aef:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000af2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000af6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000af9:	83 e7 01             	and    edi,0x1
c0000afc:	75 0e                	jne    c0000b0c <malloc_consolidate+0x95>
c0000afe:	01 d9                	add    ecx,ebx
c0000b00:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b03:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b06:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b09:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b0c:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b0f:	89 ce                	mov    esi,ecx
c0000b11:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b14:	83 ce 01             	or     esi,0x1
c0000b17:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b1a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b1d:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b20:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b24:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b27:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b2a:	eb 0c                	jmp    c0000b38 <malloc_consolidate+0xc1>
c0000b2c:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b2f:	83 c9 01             	or     ecx,0x1
c0000b32:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b35:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b3c:	85 d2                	test   edx,edx
c0000b3e:	0f 85 6f ff ff ff    	jne    c0000ab3 <malloc_consolidate+0x3c>
c0000b44:	83 c5 04             	add    ebp,0x4
c0000b47:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b4b:	0f 85 50 ff ff ff    	jne    c0000aa1 <malloc_consolidate+0x2a>
c0000b51:	83 c4 10             	add    esp,0x10
c0000b54:	5b                   	pop    ebx
c0000b55:	5e                   	pop    esi
c0000b56:	5f                   	pop    edi
c0000b57:	5d                   	pop    ebp
c0000b58:	c3                   	ret    
c0000b59:	e9 b8 fe ff ff       	jmp    c0000a16 <malloc_init_state>

c0000b5e <dlfree>:
c0000b5e:	57                   	push   edi
c0000b5f:	56                   	push   esi
c0000b60:	53                   	push   ebx
c0000b61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b65:	85 db                	test   ebx,ebx
c0000b67:	0f 84 e2 00 00 00    	je     c0000c4f <dlfree+0xf1>
c0000b6d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b70:	8b 0d 80 a6 02 c0    	mov    ecx,DWORD PTR ds:0xc002a680
c0000b76:	89 f0                	mov    eax,esi
c0000b78:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b7b:	83 e0 fc             	and    eax,0xfffffffc
c0000b7e:	39 c1                	cmp    ecx,eax
c0000b80:	72 24                	jb     c0000ba6 <dlfree+0x48>
c0000b82:	83 c9 03             	or     ecx,0x3
c0000b85:	c1 e8 03             	shr    eax,0x3
c0000b88:	89 0d 80 a6 02 c0    	mov    DWORD PTR ds:0xc002a680,ecx
c0000b8e:	83 e8 02             	sub    eax,0x2
c0000b91:	8b 0c 85 84 a6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd597c]
c0000b98:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b9a:	89 14 85 84 a6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd597c],edx
c0000ba1:	e9 a9 00 00 00       	jmp    c0000c4f <dlfree+0xf1>
c0000ba6:	83 e6 02             	and    esi,0x2
c0000ba9:	0f 85 a0 00 00 00    	jne    c0000c4f <dlfree+0xf1>
c0000baf:	83 c9 01             	or     ecx,0x1
c0000bb2:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bb5:	89 0d 80 a6 02 c0    	mov    DWORD PTR ds:0xc002a680,ecx
c0000bbb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bbe:	83 e1 fc             	and    ecx,0xfffffffc
c0000bc1:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bc5:	75 13                	jne    c0000bda <dlfree+0x7c>
c0000bc7:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bca:	29 da                	sub    edx,ebx
c0000bcc:	01 d8                	add    eax,ebx
c0000bce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bd1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000bd4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bd7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bda:	39 35 ac a6 02 c0    	cmp    DWORD PTR ds:0xc002a6ac,esi
c0000be0:	74 40                	je     c0000c22 <dlfree+0xc4>
c0000be2:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000be6:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000be9:	80 e3 01             	and    bl,0x1
c0000bec:	75 0e                	jne    c0000bfc <dlfree+0x9e>
c0000bee:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bf1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000bf4:	01 c8                	add    eax,ecx
c0000bf6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bf9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bfc:	8b 0d bc a6 02 c0    	mov    ecx,DWORD PTR ds:0xc002a6bc
c0000c02:	c7 42 0c b4 a6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a6b4
c0000c09:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c0c:	89 15 bc a6 02 c0    	mov    DWORD PTR ds:0xc002a6bc,edx
c0000c12:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c15:	89 c1                	mov    ecx,eax
c0000c17:	83 c9 01             	or     ecx,0x1
c0000c1a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c1d:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c20:	eb 10                	jmp    c0000c32 <dlfree+0xd4>
c0000c22:	01 c8                	add    eax,ecx
c0000c24:	89 c1                	mov    ecx,eax
c0000c26:	83 c9 01             	or     ecx,0x1
c0000c29:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2c:	89 15 ac a6 02 c0    	mov    DWORD PTR ds:0xc002a6ac,edx
c0000c32:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c37:	76 16                	jbe    c0000c4f <dlfree+0xf1>
c0000c39:	f6 05 80 a6 02 c0 02 	test   BYTE PTR ds:0xc002a680,0x2
c0000c40:	74 0d                	je     c0000c4f <dlfree+0xf1>
c0000c42:	5b                   	pop    ebx
c0000c43:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c0000c48:	5e                   	pop    esi
c0000c49:	5f                   	pop    edi
c0000c4a:	e9 28 fe ff ff       	jmp    c0000a77 <malloc_consolidate>
c0000c4f:	5b                   	pop    ebx
c0000c50:	5e                   	pop    esi
c0000c51:	5f                   	pop    edi
c0000c52:	c3                   	ret    

c0000c53 <sYSMALLOc>:
c0000c53:	55                   	push   ebp
c0000c54:	57                   	push   edi
c0000c55:	56                   	push   esi
c0000c56:	53                   	push   ebx
c0000c57:	89 d3                	mov    ebx,edx
c0000c59:	83 ec 2c             	sub    esp,0x2c
c0000c5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c60:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c66:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c69:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c70:	74 1f                	je     c0000c91 <sYSMALLOc+0x3e>
c0000c72:	89 d8                	mov    eax,ebx
c0000c74:	e8 fe fd ff ff       	call   c0000a77 <malloc_consolidate>
c0000c79:	83 ec 0c             	sub    esp,0xc
c0000c7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c80:	83 e8 07             	sub    eax,0x7
c0000c83:	50                   	push   eax
c0000c84:	e8 30 02 00 00       	call   c0000eb9 <dlmalloc>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	e9 20 02 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000c91:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c94:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c9a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c9d:	83 e0 fc             	and    eax,0xfffffffc
c0000ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ca8:	83 c0 10             	add    eax,0x10
c0000cab:	01 c1                	add    ecx,eax
c0000cad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb1:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cb8:	74 04                	je     c0000cbe <sYSMALLOc+0x6b>
c0000cba:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cbe:	f7 da                	neg    edx
c0000cc0:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cc4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cc8:	21 d1                	and    ecx,edx
c0000cca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cce:	7f 07                	jg     c0000cd7 <sYSMALLOc+0x84>
c0000cd0:	31 c0                	xor    eax,eax
c0000cd2:	e9 da 01 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000cd7:	83 ec 0c             	sub    esp,0xc
c0000cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cde:	e8 46 e6 00 00       	call   c000f329 <sbrk>
c0000ce3:	83 c4 10             	add    esp,0x10
c0000ce6:	89 c6                	mov    esi,eax
c0000ce8:	83 f8 ff             	cmp    eax,0xffffffff
c0000ceb:	74 e3                	je     c0000cd0 <sYSMALLOc+0x7d>
c0000ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cf1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000cf5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000cf8:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000cfe:	39 f1                	cmp    ecx,esi
c0000d00:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d06:	75 13                	jne    c0000d1b <sYSMALLOc+0xc8>
c0000d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d0c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d10:	83 c8 01             	or     eax,0x1
c0000d13:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d16:	e9 3e 01 00 00       	jmp    c0000e59 <sYSMALLOc+0x206>
c0000d1b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d21:	88 d0                	mov    al,dl
c0000d23:	83 e0 01             	and    eax,0x1
c0000d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d2b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d2f:	0f 95 c0             	setne  al
c0000d32:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d36:	39 f1                	cmp    ecx,esi
c0000d38:	76 12                	jbe    c0000d4c <sYSMALLOc+0xf9>
c0000d3a:	84 c0                	test   al,al
c0000d3c:	74 0e                	je     c0000d4c <sYSMALLOc+0xf9>
c0000d3e:	83 e2 fe             	and    edx,0xfffffffe
c0000d41:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d47:	e9 83 00 00 00       	jmp    c0000dcf <sYSMALLOc+0x17c>
c0000d4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d51:	74 7c                	je     c0000dcf <sYSMALLOc+0x17c>
c0000d53:	84 c0                	test   al,al
c0000d55:	74 0c                	je     c0000d63 <sYSMALLOc+0x110>
c0000d57:	89 f0                	mov    eax,esi
c0000d59:	29 c8                	sub    eax,ecx
c0000d5b:	01 e8                	add    eax,ebp
c0000d5d:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d63:	89 f2                	mov    edx,esi
c0000d65:	83 e2 07             	and    edx,0x7
c0000d68:	74 0c                	je     c0000d76 <sYSMALLOc+0x123>
c0000d6a:	b8 08 00 00 00       	mov    eax,0x8
c0000d6f:	29 d0                	sub    eax,edx
c0000d71:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d74:	eb 04                	jmp    c0000d7a <sYSMALLOc+0x127>
c0000d76:	89 f5                	mov    ebp,esi
c0000d78:	31 c0                	xor    eax,eax
c0000d7a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d86:	01 c1                	add    ecx,eax
c0000d88:	83 ec 0c             	sub    esp,0xc
c0000d8b:	01 f1                	add    ecx,esi
c0000d8d:	01 ca                	add    edx,ecx
c0000d8f:	29 c8                	sub    eax,ecx
c0000d91:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d95:	01 c2                	add    edx,eax
c0000d97:	52                   	push   edx
c0000d98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d9c:	e8 88 e5 00 00       	call   c000f329 <sbrk>
c0000da1:	83 c4 10             	add    esp,0x10
c0000da4:	83 f8 ff             	cmp    eax,0xffffffff
c0000da7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dab:	75 0f                	jne    c0000dbc <sYSMALLOc+0x169>
c0000dad:	83 ec 0c             	sub    esp,0xc
c0000db0:	6a 00                	push   0x0
c0000db2:	e8 72 e5 00 00       	call   c000f329 <sbrk>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	eb 30                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dbc:	39 c6                	cmp    esi,eax
c0000dbe:	76 33                	jbe    c0000df3 <sYSMALLOc+0x1a0>
c0000dc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dc4:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dcb:	01 f0                	add    eax,esi
c0000dcd:	eb 1d                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	89 f5                	mov    ebp,esi
c0000dd4:	6a 00                	push   0x0
c0000dd6:	e8 4e e5 00 00       	call   c000f329 <sbrk>
c0000ddb:	89 c2                	mov    edx,eax
c0000ddd:	29 f2                	sub    edx,esi
c0000ddf:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000de3:	83 c4 10             	add    esp,0x10
c0000de6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dec:	31 d2                	xor    edx,edx
c0000dee:	83 f8 ff             	cmp    eax,0xffffffff
c0000df1:	74 66                	je     c0000e59 <sYSMALLOc+0x206>
c0000df3:	29 e8                	sub    eax,ebp
c0000df5:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000df8:	01 d0                	add    eax,edx
c0000dfa:	83 c8 01             	or     eax,0x1
c0000dfd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e00:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e06:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e0b:	74 4c                	je     c0000e59 <sYSMALLOc+0x206>
c0000e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e11:	83 e8 0c             	sub    eax,0xc
c0000e14:	83 e0 f8             	and    eax,0xfffffff8
c0000e17:	89 c2                	mov    edx,eax
c0000e19:	83 ca 01             	or     edx,0x1
c0000e1c:	83 f8 0f             	cmp    eax,0xf
c0000e1f:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e22:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e2a:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e32:	76 25                	jbe    c0000e59 <sYSMALLOc+0x206>
c0000e34:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e3a:	83 ec 0c             	sub    esp,0xc
c0000e3d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e47:	83 c7 08             	add    edi,0x8
c0000e4a:	57                   	push   edi
c0000e4b:	e8 0e fd ff ff       	call   c0000b5e <dlfree>
c0000e50:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e56:	83 c4 10             	add    esp,0x10
c0000e59:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e5f:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e65:	73 06                	jae    c0000e6d <sYSMALLOc+0x21a>
c0000e67:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e6d:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e73:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e79:	73 06                	jae    c0000e81 <sYSMALLOc+0x22e>
c0000e7b:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e81:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e87:	83 e2 fc             	and    edx,0xfffffffc
c0000e8a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e8e:	0f 82 3c fe ff ff    	jb     c0000cd0 <sYSMALLOc+0x7d>
c0000e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e98:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e9b:	29 fa                	sub    edx,edi
c0000e9d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ea0:	83 ca 01             	or     edx,0x1
c0000ea3:	89 fb                	mov    ebx,edi
c0000ea5:	83 c0 08             	add    eax,0x8
c0000ea8:	83 cb 01             	or     ebx,0x1
c0000eab:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eb1:	83 c4 2c             	add    esp,0x2c
c0000eb4:	5b                   	pop    ebx
c0000eb5:	5e                   	pop    esi
c0000eb6:	5f                   	pop    edi
c0000eb7:	5d                   	pop    ebp
c0000eb8:	c3                   	ret    

c0000eb9 <dlmalloc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	83 ec 1c             	sub    esp,0x1c
c0000ec0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ec4:	83 f8 df             	cmp    eax,0xffffffdf
c0000ec7:	0f 87 70 03 00 00    	ja     c000123d <dlmalloc+0x384>
c0000ecd:	83 c0 0b             	add    eax,0xb
c0000ed0:	be 10 00 00 00       	mov    esi,0x10
c0000ed5:	83 f8 0f             	cmp    eax,0xf
c0000ed8:	76 05                	jbe    c0000edf <dlmalloc+0x26>
c0000eda:	83 e0 f8             	and    eax,0xfffffff8
c0000edd:	89 c6                	mov    esi,eax
c0000edf:	8b 3d 80 a6 02 c0    	mov    edi,DWORD PTR ds:0xc002a680
c0000ee5:	f7 c7 01 00 00 00    	test   edi,0x1
c0000eeb:	75 17                	jne    c0000f04 <dlmalloc+0x4b>
c0000eed:	85 ff                	test   edi,edi
c0000eef:	0f 85 05 03 00 00    	jne    c00011fa <dlmalloc+0x341>
c0000ef5:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c0000efa:	e8 78 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000eff:	e9 f6 02 00 00       	jmp    c00011fa <dlmalloc+0x341>
c0000f04:	39 f7                	cmp    edi,esi
c0000f06:	72 1f                	jb     c0000f27 <dlmalloc+0x6e>
c0000f08:	89 f2                	mov    edx,esi
c0000f0a:	c1 ea 03             	shr    edx,0x3
c0000f0d:	83 ea 02             	sub    edx,0x2
c0000f10:	8b 04 95 84 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd597c]
c0000f17:	85 c0                	test   eax,eax
c0000f19:	74 0c                	je     c0000f27 <dlmalloc+0x6e>
c0000f1b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f1e:	89 0c 95 84 a6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd597c],ecx
c0000f25:	eb 30                	jmp    c0000f57 <dlmalloc+0x9e>
c0000f27:	89 f0                	mov    eax,esi
c0000f29:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2f:	77 2e                	ja     c0000f5f <dlmalloc+0xa6>
c0000f31:	c1 e8 03             	shr    eax,0x3
c0000f34:	8d 14 c5 b4 a6 02 c0 	lea    edx,[eax*8-0x3ffd594c]
c0000f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f3f:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f42:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f45:	39 c3                	cmp    ebx,eax
c0000f47:	74 2e                	je     c0000f77 <dlmalloc+0xbe>
c0000f49:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f4c:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f54:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f57:	83 c0 08             	add    eax,0x8
c0000f5a:	e9 e0 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c0000f5f:	e8 8f fa ff ff       	call   c00009f3 <largebin_index>
c0000f64:	83 e7 02             	and    edi,0x2
c0000f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f6b:	74 0a                	je     c0000f77 <dlmalloc+0xbe>
c0000f6d:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c0000f72:	e8 00 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000f77:	8d 46 10             	lea    eax,[esi+0x10]
c0000f7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f7e:	8b 1d c0 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a6c0
c0000f84:	81 fb b4 a6 02 c0    	cmp    ebx,0xc002a6b4
c0000f8a:	0f 84 13 01 00 00    	je     c00010a3 <dlmalloc+0x1ea>
c0000f90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f93:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f96:	83 e7 fc             	and    edi,0xfffffffc
c0000f99:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9f:	77 4c                	ja     c0000fed <dlmalloc+0x134>
c0000fa1:	3d b4 a6 02 c0       	cmp    eax,0xc002a6b4
c0000fa6:	75 45                	jne    c0000fed <dlmalloc+0x134>
c0000fa8:	39 1d b0 a6 02 c0    	cmp    DWORD PTR ds:0xc002a6b0,ebx
c0000fae:	75 3d                	jne    c0000fed <dlmalloc+0x134>
c0000fb0:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fb4:	73 37                	jae    c0000fed <dlmalloc+0x134>
c0000fb6:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fb9:	89 fa                	mov    edx,edi
c0000fbb:	a3 bc a6 02 c0       	mov    ds:0xc002a6bc,eax
c0000fc0:	a3 c0 a6 02 c0       	mov    ds:0xc002a6c0,eax
c0000fc5:	a3 b0 a6 02 c0       	mov    ds:0xc002a6b0,eax
c0000fca:	29 f2                	sub    edx,esi
c0000fcc:	c7 40 08 b4 a6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a6b4
c0000fd3:	c7 40 0c b4 a6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a6b4
c0000fda:	83 ce 01             	or     esi,0x1
c0000fdd:	89 d1                	mov    ecx,edx
c0000fdf:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000fe2:	83 c9 01             	or     ecx,0x1
c0000fe5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000fe8:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000feb:	eb 15                	jmp    c0001002 <dlmalloc+0x149>
c0000fed:	a3 c0 a6 02 c0       	mov    ds:0xc002a6c0,eax
c0000ff2:	39 fe                	cmp    esi,edi
c0000ff4:	c7 40 08 b4 a6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a6b4
c0000ffb:	75 0d                	jne    c000100a <dlmalloc+0x151>
c0000ffd:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001002:	8d 43 08             	lea    eax,[ebx+0x8]
c0001005:	e9 35 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c000100a:	89 f8                	mov    eax,edi
c000100c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001012:	77 19                	ja     c000102d <dlmalloc+0x174>
c0001014:	c1 e8 03             	shr    eax,0x3
c0001017:	8d 14 00             	lea    edx,[eax+eax*1]
c000101a:	83 c2 0d             	add    edx,0xd
c000101d:	8d 2c 95 78 a6 02 c0 	lea    ebp,[edx*4-0x3ffd5988]
c0001024:	8b 14 95 80 a6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5980]
c000102b:	eb 46                	jmp    c0001073 <dlmalloc+0x1ba>
c000102d:	e8 c1 f9 ff ff       	call   c00009f3 <largebin_index>
c0001032:	8d 14 00             	lea    edx,[eax+eax*1]
c0001035:	83 c2 0d             	add    edx,0xd
c0001038:	8d 0c 95 80 a6 02 c0 	lea    ecx,[edx*4-0x3ffd5980]
c000103f:	8b 14 95 80 a6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5980]
c0001046:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001049:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000104d:	89 d5                	mov    ebp,edx
c000104f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001053:	74 1e                	je     c0001073 <dlmalloc+0x1ba>
c0001055:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001058:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000105b:	77 12                	ja     c000106f <dlmalloc+0x1b6>
c000105d:	83 cf 01             	or     edi,0x1
c0001060:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001063:	76 05                	jbe    c000106a <dlmalloc+0x1b1>
c0001065:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001068:	eb f6                	jmp    c0001060 <dlmalloc+0x1a7>
c000106a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000106d:	eb 04                	jmp    c0001073 <dlmalloc+0x1ba>
c000106f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001073:	89 c7                	mov    edi,eax
c0001075:	88 c1                	mov    cl,al
c0001077:	c1 ff 05             	sar    edi,0x5
c000107a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000107e:	bf 01 00 00 00       	mov    edi,0x1
c0001083:	d3 e7                	shl    edi,cl
c0001085:	89 f8                	mov    eax,edi
c0001087:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000108b:	09 04 bd b4 a9 02 c0 	or     DWORD PTR [edi*4-0x3ffd564c],eax
c0001092:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001095:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001098:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000109b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000109e:	e9 db fe ff ff       	jmp    c0000f7e <dlmalloc+0xc5>
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	76 78                	jbe    c0001123 <dlmalloc+0x26a>
c00010ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010af:	8d 04 c5 b4 a6 02 c0 	lea    eax,[eax*8-0x3ffd594c]
c00010b6:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bc:	39 ca                	cmp    edx,ecx
c00010be:	74 63                	je     c0001123 <dlmalloc+0x26a>
c00010c0:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010c6:	83 e3 fc             	and    ebx,0xfffffffc
c00010c9:	39 de                	cmp    esi,ebx
c00010cb:	77 52                	ja     c000111f <dlmalloc+0x266>
c00010cd:	89 df                	mov    edi,ebx
c00010cf:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010d2:	29 f7                	sub    edi,esi
c00010d4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010d7:	01 d3                	add    ebx,edx
c00010d9:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010dc:	83 ff 0f             	cmp    edi,0xf
c00010df:	8d 42 08             	lea    eax,[edx+0x8]
c00010e2:	77 09                	ja     c00010ed <dlmalloc+0x234>
c00010e4:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010e8:	e9 52 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c00010ed:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010f0:	83 ce 01             	or     esi,0x1
c00010f3:	89 0d bc a6 02 c0    	mov    DWORD PTR ds:0xc002a6bc,ecx
c00010f9:	89 0d c0 a6 02 c0    	mov    DWORD PTR ds:0xc002a6c0,ecx
c00010ff:	c7 41 08 b4 a6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a6b4
c0001106:	c7 41 0c b4 a6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a6b4
c000110d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001110:	89 fa                	mov    edx,edi
c0001112:	83 ca 01             	or     edx,0x1
c0001115:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001118:	89 3b                	mov    DWORD PTR [ebx],edi
c000111a:	e9 20 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c000111f:	89 c2                	mov    edx,eax
c0001121:	eb 99                	jmp    c00010bc <dlmalloc+0x203>
c0001123:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001127:	b8 01 00 00 00       	mov    eax,0x1
c000112c:	41                   	inc    ecx
c000112d:	89 cb                	mov    ebx,ecx
c000112f:	8d 14 cd ac a6 02 c0 	lea    edx,[ecx*8-0x3ffd5954]
c0001136:	c1 eb 05             	shr    ebx,0x5
c0001139:	d3 e0                	shl    eax,cl
c000113b:	8b 3c 9d b4 a9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd564c]
c0001142:	39 f8                	cmp    eax,edi
c0001144:	77 04                	ja     c000114a <dlmalloc+0x291>
c0001146:	85 c0                	test   eax,eax
c0001148:	75 26                	jne    c0001170 <dlmalloc+0x2b7>
c000114a:	43                   	inc    ebx
c000114b:	83 fb 02             	cmp    ebx,0x2
c000114e:	0f 87 a6 00 00 00    	ja     c00011fa <dlmalloc+0x341>
c0001154:	8b 3c 9d b4 a9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd564c]
c000115b:	85 ff                	test   edi,edi
c000115d:	74 eb                	je     c000114a <dlmalloc+0x291>
c000115f:	89 d8                	mov    eax,ebx
c0001161:	c1 e0 06             	shl    eax,0x6
c0001164:	8d 14 85 ac a6 02 c0 	lea    edx,[eax*4-0x3ffd5954]
c000116b:	b8 01 00 00 00       	mov    eax,0x1
c0001170:	85 f8                	test   eax,edi
c0001172:	75 07                	jne    c000117b <dlmalloc+0x2c2>
c0001174:	83 c2 08             	add    edx,0x8
c0001177:	01 c0                	add    eax,eax
c0001179:	eb f5                	jmp    c0001170 <dlmalloc+0x2b7>
c000117b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000117e:	39 ca                	cmp    edx,ecx
c0001180:	75 14                	jne    c0001196 <dlmalloc+0x2dd>
c0001182:	89 c1                	mov    ecx,eax
c0001184:	83 c2 08             	add    edx,0x8
c0001187:	f7 d1                	not    ecx
c0001189:	01 c0                	add    eax,eax
c000118b:	21 cf                	and    edi,ecx
c000118d:	89 3c 9d b4 a9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd564c],edi
c0001194:	eb ac                	jmp    c0001142 <dlmalloc+0x289>
c0001196:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001199:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000119c:	83 e0 fc             	and    eax,0xfffffffc
c000119f:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011a2:	89 c3                	mov    ebx,eax
c00011a4:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011a7:	29 f3                	sub    ebx,esi
c00011a9:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ac:	83 fb 0f             	cmp    ebx,0xf
c00011af:	8d 41 08             	lea    eax,[ecx+0x8]
c00011b2:	77 09                	ja     c00011bd <dlmalloc+0x304>
c00011b4:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011b8:	e9 82 00 00 00       	jmp    c000123f <dlmalloc+0x386>
c00011bd:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011c0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c6:	89 3d bc a6 02 c0    	mov    DWORD PTR ds:0xc002a6bc,edi
c00011cc:	89 3d c0 a6 02 c0    	mov    DWORD PTR ds:0xc002a6c0,edi
c00011d2:	c7 47 08 b4 a6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a6b4
c00011d9:	c7 47 0c b4 a6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a6b4
c00011e0:	77 06                	ja     c00011e8 <dlmalloc+0x32f>
c00011e2:	89 3d b0 a6 02 c0    	mov    DWORD PTR ds:0xc002a6b0,edi
c00011e8:	83 ce 01             	or     esi,0x1
c00011eb:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011ee:	89 d9                	mov    ecx,ebx
c00011f0:	83 c9 01             	or     ecx,0x1
c00011f3:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00011f6:	89 1a                	mov    DWORD PTR [edx],ebx
c00011f8:	eb 45                	jmp    c000123f <dlmalloc+0x386>
c00011fa:	a1 ac a6 02 c0       	mov    eax,ds:0xc002a6ac
c00011ff:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001202:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001205:	83 e2 fc             	and    edx,0xfffffffc
c0001208:	39 d1                	cmp    ecx,edx
c000120a:	77 1e                	ja     c000122a <dlmalloc+0x371>
c000120c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000120f:	89 f3                	mov    ebx,esi
c0001211:	89 0d ac a6 02 c0    	mov    DWORD PTR ds:0xc002a6ac,ecx
c0001217:	83 cb 01             	or     ebx,0x1
c000121a:	29 f2                	sub    edx,esi
c000121c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000121f:	83 ca 01             	or     edx,0x1
c0001222:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001225:	e9 2d fd ff ff       	jmp    c0000f57 <dlmalloc+0x9e>
c000122a:	83 c4 1c             	add    esp,0x1c
c000122d:	89 f0                	mov    eax,esi
c000122f:	5b                   	pop    ebx
c0001230:	ba 80 a6 02 c0       	mov    edx,0xc002a680
c0001235:	5e                   	pop    esi
c0001236:	5f                   	pop    edi
c0001237:	5d                   	pop    ebp
c0001238:	e9 16 fa ff ff       	jmp    c0000c53 <sYSMALLOc>
c000123d:	31 c0                	xor    eax,eax
c000123f:	83 c4 1c             	add    esp,0x1c
c0001242:	5b                   	pop    ebx
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	c3                   	ret    

c0001247 <iALLOc>:
c0001247:	55                   	push   ebp
c0001248:	89 c5                	mov    ebp,eax
c000124a:	57                   	push   edi
c000124b:	56                   	push   esi
c000124c:	53                   	push   ebx
c000124d:	83 ec 2c             	sub    esp,0x2c
c0001250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001254:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125c:	83 3d 80 a6 02 c0 00 	cmp    DWORD PTR ds:0xc002a680,0x0
c0001263:	75 12                	jne    c0001277 <iALLOc+0x30>
c0001265:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001269:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c000126e:	e8 04 f8 ff ff       	call   c0000a77 <malloc_consolidate>
c0001273:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001277:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000127c:	74 12                	je     c0001290 <iALLOc+0x49>
c000127e:	85 ed                	test   ebp,ebp
c0001280:	0f 84 64 01 00 00    	je     c00013ea <iALLOc+0x1a3>
c0001286:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000128e:	eb 33                	jmp    c00012c3 <iALLOc+0x7c>
c0001290:	85 ed                	test   ebp,ebp
c0001292:	75 14                	jne    c00012a8 <iALLOc+0x61>
c0001294:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000129c:	83 c4 2c             	add    esp,0x2c
c000129f:	5b                   	pop    ebx
c00012a0:	5e                   	pop    esi
c00012a1:	5f                   	pop    edi
c00012a2:	5d                   	pop    ebp
c00012a3:	e9 11 fc ff ff       	jmp    c0000eb9 <dlmalloc>
c00012a8:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012af:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012b7:	83 f8 0f             	cmp    eax,0xf
c00012ba:	76 07                	jbe    c00012c3 <iALLOc+0x7c>
c00012bc:	83 e0 f8             	and    eax,0xfffffff8
c00012bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012c3:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012c8:	75 09                	jne    c00012d3 <iALLOc+0x8c>
c00012ca:	89 d0                	mov    eax,edx
c00012cc:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012cf:	31 f6                	xor    esi,esi
c00012d1:	eb 3b                	jmp    c000130e <iALLOc+0xc7>
c00012d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00012d5:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012dd:	83 c0 0b             	add    eax,0xb
c00012e0:	83 f8 0f             	cmp    eax,0xf
c00012e3:	76 07                	jbe    c00012ec <iALLOc+0xa5>
c00012e5:	83 e0 f8             	and    eax,0xfffffff8
c00012e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012f0:	0f af f5             	imul   esi,ebp
c00012f3:	eb 25                	jmp    c000131a <iALLOc+0xd3>
c00012f5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00012f7:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00012fa:	bb 10 00 00 00       	mov    ebx,0x10
c00012ff:	83 f9 0f             	cmp    ecx,0xf
c0001302:	76 05                	jbe    c0001309 <iALLOc+0xc2>
c0001304:	83 e1 f8             	and    ecx,0xfffffff8
c0001307:	89 cb                	mov    ebx,ecx
c0001309:	01 de                	add    esi,ebx
c000130b:	83 c0 04             	add    eax,0x4
c000130e:	39 c7                	cmp    edi,eax
c0001310:	75 e3                	jne    c00012f5 <iALLOc+0xae>
c0001312:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000131a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000131e:	8b 1d d4 a9 02 c0    	mov    ebx,DWORD PTR ds:0xc002a9d4
c0001324:	83 ec 0c             	sub    esp,0xc
c0001327:	c7 05 d4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9d4,0x0
c0001331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001335:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001339:	50                   	push   eax
c000133a:	e8 7a fb ff ff       	call   c0000eb9 <dlmalloc>
c000133f:	83 c4 10             	add    esp,0x10
c0001342:	89 1d d4 a9 02 c0    	mov    DWORD PTR ds:0xc002a9d4,ebx
c0001348:	85 c0                	test   eax,eax
c000134a:	0f 84 92 00 00 00    	je     c00013e2 <iALLOc+0x19b>
c0001350:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001353:	8d 78 f8             	lea    edi,[eax-0x8]
c0001356:	83 e3 fc             	and    ebx,0xfffffffc
c0001359:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000135d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001362:	74 1e                	je     c0001382 <iALLOc+0x13b>
c0001364:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	52                   	push   edx
c000136b:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000136f:	83 e9 04             	sub    ecx,0x4
c0001372:	51                   	push   ecx
c0001373:	6a 00                	push   0x0
c0001375:	50                   	push   eax
c0001376:	e8 02 f3 ff ff       	call   c000067d <memset>
c000137b:	83 c4 10             	add    esp,0x10
c000137e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001382:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001387:	75 14                	jne    c000139d <iALLOc+0x156>
c0001389:	8d 04 37             	lea    eax,[edi+esi*1]
c000138c:	29 f3                	sub    ebx,esi
c000138e:	8d 48 08             	lea    ecx,[eax+0x8]
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001398:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000139b:	89 f3                	mov    ebx,esi
c000139d:	31 c0                	xor    eax,eax
c000139f:	4d                   	dec    ebp
c00013a0:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013a3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013a7:	39 c5                	cmp    ebp,eax
c00013a9:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ac:	74 2c                	je     c00013da <iALLOc+0x193>
c00013ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013b2:	85 c9                	test   ecx,ecx
c00013b4:	75 15                	jne    c00013cb <iALLOc+0x184>
c00013b6:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013b9:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013bc:	b9 10 00 00 00       	mov    ecx,0x10
c00013c1:	83 fe 0f             	cmp    esi,0xf
c00013c4:	76 05                	jbe    c00013cb <iALLOc+0x184>
c00013c6:	83 e6 f8             	and    esi,0xfffffff8
c00013c9:	89 f1                	mov    ecx,esi
c00013cb:	89 ce                	mov    esi,ecx
c00013cd:	29 cb                	sub    ebx,ecx
c00013cf:	83 ce 01             	or     esi,0x1
c00013d2:	40                   	inc    eax
c00013d3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013d6:	01 cf                	add    edi,ecx
c00013d8:	eb c6                	jmp    c00013a0 <iALLOc+0x159>
c00013da:	83 cb 01             	or     ebx,0x1
c00013dd:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013e0:	eb 08                	jmp    c00013ea <iALLOc+0x1a3>
c00013e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013ee:	83 c4 2c             	add    esp,0x2c
c00013f1:	5b                   	pop    ebx
c00013f2:	5e                   	pop    esi
c00013f3:	5f                   	pop    edi
c00013f4:	5d                   	pop    ebp
c00013f5:	c3                   	ret    

c00013f6 <dlrealloc>:
c00013f6:	55                   	push   ebp
c00013f7:	57                   	push   edi
c00013f8:	56                   	push   esi
c00013f9:	53                   	push   ebx
c00013fa:	83 ec 1c             	sub    esp,0x1c
c00013fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001401:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001405:	85 db                	test   ebx,ebx
c0001407:	75 10                	jne    c0001419 <dlrealloc+0x23>
c0001409:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000140d:	83 c4 1c             	add    esp,0x1c
c0001410:	5b                   	pop    ebx
c0001411:	5e                   	pop    esi
c0001412:	5f                   	pop    edi
c0001413:	5d                   	pop    ebp
c0001414:	e9 a0 fa ff ff       	jmp    c0000eb9 <dlmalloc>
c0001419:	83 f8 df             	cmp    eax,0xffffffdf
c000141c:	76 07                	jbe    c0001425 <dlrealloc+0x2f>
c000141e:	31 db                	xor    ebx,ebx
c0001420:	e9 7c 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001425:	83 c0 0b             	add    eax,0xb
c0001428:	bf 10 00 00 00       	mov    edi,0x10
c000142d:	83 f8 0f             	cmp    eax,0xf
c0001430:	76 05                	jbe    c0001437 <dlrealloc+0x41>
c0001432:	83 e0 f8             	and    eax,0xfffffff8
c0001435:	89 c7                	mov    edi,eax
c0001437:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000143a:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000143d:	89 c6                	mov    esi,eax
c000143f:	83 e6 fc             	and    esi,0xfffffffc
c0001442:	a8 02                	test   al,0x2
c0001444:	75 d8                	jne    c000141e <dlrealloc+0x28>
c0001446:	39 f7                	cmp    edi,esi
c0001448:	0f 86 15 01 00 00    	jbe    c0001563 <dlrealloc+0x16d>
c000144e:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001452:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001455:	39 15 ac a6 02 c0    	cmp    DWORD PTR ds:0xc002a6ac,edx
c000145b:	75 33                	jne    c0001490 <dlrealloc+0x9a>
c000145d:	83 e1 fc             	and    ecx,0xfffffffc
c0001460:	01 f1                	add    ecx,esi
c0001462:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001466:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001469:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000146d:	77 49                	ja     c00014b8 <dlrealloc+0xc2>
c000146f:	01 fd                	add    ebp,edi
c0001471:	83 e0 01             	and    eax,0x1
c0001474:	09 f8                	or     eax,edi
c0001476:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001479:	89 2d ac a6 02 c0    	mov    DWORD PTR ds:0xc002a6ac,ebp
c000147f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001483:	29 f8                	sub    eax,edi
c0001485:	83 c8 01             	or     eax,0x1
c0001488:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000148b:	e9 11 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001490:	89 c8                	mov    eax,ecx
c0001492:	83 e0 fe             	and    eax,0xfffffffe
c0001495:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000149a:	75 1c                	jne    c00014b8 <dlrealloc+0xc2>
c000149c:	83 e1 fc             	and    ecx,0xfffffffc
c000149f:	01 f1                	add    ecx,esi
c00014a1:	39 cf                	cmp    edi,ecx
c00014a3:	77 13                	ja     c00014b8 <dlrealloc+0xc2>
c00014a5:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014a8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ab:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ae:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014b1:	89 ce                	mov    esi,ecx
c00014b3:	e9 ab 00 00 00       	jmp    c0001563 <dlrealloc+0x16d>
c00014b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014bc:	8d 47 f9             	lea    eax,[edi-0x7]
c00014bf:	83 ec 0c             	sub    esp,0xc
c00014c2:	50                   	push   eax
c00014c3:	e8 f1 f9 ff ff       	call   c0000eb9 <dlmalloc>
c00014c8:	83 c4 10             	add    esp,0x10
c00014cb:	89 c1                	mov    ecx,eax
c00014cd:	85 c0                	test   eax,eax
c00014cf:	0f 84 49 ff ff ff    	je     c000141e <dlrealloc+0x28>
c00014d5:	8d 40 f8             	lea    eax,[eax-0x8]
c00014d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014dc:	39 c2                	cmp    edx,eax
c00014de:	75 0a                	jne    c00014ea <dlrealloc+0xf4>
c00014e0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014e3:	83 e0 fc             	and    eax,0xfffffffc
c00014e6:	01 c6                	add    esi,eax
c00014e8:	eb 79                	jmp    c0001563 <dlrealloc+0x16d>
c00014ea:	83 ee 04             	sub    esi,0x4
c00014ed:	83 fe 27             	cmp    esi,0x27
c00014f0:	76 16                	jbe    c0001508 <dlrealloc+0x112>
c00014f2:	50                   	push   eax
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	51                   	push   ecx
c00014f6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00014fa:	e8 48 f1 ff ff       	call   c0000647 <memcpy>
c00014ff:	83 c4 10             	add    esp,0x10
c0001502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001506:	eb 43                	jmp    c000154b <dlrealloc+0x155>
c0001508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000150a:	83 fe 13             	cmp    esi,0x13
c000150d:	89 01                	mov    DWORD PTR [ecx],eax
c000150f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001512:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001515:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001518:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000151b:	76 2e                	jbe    c000154b <dlrealloc+0x155>
c000151d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001520:	83 fe 1b             	cmp    esi,0x1b
c0001523:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001526:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001529:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000152c:	76 1d                	jbe    c000154b <dlrealloc+0x155>
c000152e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001531:	83 fe 23             	cmp    esi,0x23
c0001534:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001537:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000153a:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000153d:	76 0c                	jbe    c000154b <dlrealloc+0x155>
c000153f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001542:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001545:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001548:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000154b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000154f:	83 ec 0c             	sub    esp,0xc
c0001552:	53                   	push   ebx
c0001553:	e8 06 f6 ff ff       	call   c0000b5e <dlfree>
c0001558:	83 c4 10             	add    esp,0x10
c000155b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155f:	89 cb                	mov    ebx,ecx
c0001561:	eb 3e                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001563:	89 f2                	mov    edx,esi
c0001565:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001568:	29 fa                	sub    edx,edi
c000156a:	83 e1 01             	and    ecx,0x1
c000156d:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001571:	83 fa 0f             	cmp    edx,0xf
c0001574:	77 0b                	ja     c0001581 <dlrealloc+0x18b>
c0001576:	09 ce                	or     esi,ecx
c0001578:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000157b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000157f:	eb 20                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001581:	01 fd                	add    ebp,edi
c0001583:	83 ec 0c             	sub    esp,0xc
c0001586:	09 cf                	or     edi,ecx
c0001588:	83 ca 01             	or     edx,0x1
c000158b:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000158e:	83 c5 08             	add    ebp,0x8
c0001591:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001594:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001598:	55                   	push   ebp
c0001599:	e8 c0 f5 ff ff       	call   c0000b5e <dlfree>
c000159e:	83 c4 10             	add    esp,0x10
c00015a1:	83 c4 1c             	add    esp,0x1c
c00015a4:	89 d8                	mov    eax,ebx
c00015a6:	5b                   	pop    ebx
c00015a7:	5e                   	pop    esi
c00015a8:	5f                   	pop    edi
c00015a9:	5d                   	pop    ebp
c00015aa:	c3                   	ret    

c00015ab <dlmemalign>:
c00015ab:	55                   	push   ebp
c00015ac:	57                   	push   edi
c00015ad:	56                   	push   esi
c00015ae:	53                   	push   ebx
c00015af:	83 ec 0c             	sub    esp,0xc
c00015b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015ba:	83 fa 08             	cmp    edx,0x8
c00015bd:	77 10                	ja     c00015cf <dlmemalign+0x24>
c00015bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015c3:	83 c4 0c             	add    esp,0xc
c00015c6:	5b                   	pop    ebx
c00015c7:	5e                   	pop    esi
c00015c8:	5f                   	pop    edi
c00015c9:	5d                   	pop    ebp
c00015ca:	e9 ea f8 ff ff       	jmp    c0000eb9 <dlmalloc>
c00015cf:	bf 10 00 00 00       	mov    edi,0x10
c00015d4:	83 fa 0f             	cmp    edx,0xf
c00015d7:	76 13                	jbe    c00015ec <dlmemalign+0x41>
c00015d9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015dc:	85 d1                	test   ecx,edx
c00015de:	75 04                	jne    c00015e4 <dlmemalign+0x39>
c00015e0:	89 d7                	mov    edi,edx
c00015e2:	eb 08                	jmp    c00015ec <dlmemalign+0x41>
c00015e4:	39 d7                	cmp    edi,edx
c00015e6:	73 04                	jae    c00015ec <dlmemalign+0x41>
c00015e8:	01 ff                	add    edi,edi
c00015ea:	eb f8                	jmp    c00015e4 <dlmemalign+0x39>
c00015ec:	83 f8 df             	cmp    eax,0xffffffdf
c00015ef:	76 07                	jbe    c00015f8 <dlmemalign+0x4d>
c00015f1:	31 c0                	xor    eax,eax
c00015f3:	e9 ce 00 00 00       	jmp    c00016c6 <dlmemalign+0x11b>
c00015f8:	83 c0 0b             	add    eax,0xb
c00015fb:	bd 10 00 00 00       	mov    ebp,0x10
c0001600:	83 f8 0f             	cmp    eax,0xf
c0001603:	76 05                	jbe    c000160a <dlmemalign+0x5f>
c0001605:	83 e0 f8             	and    eax,0xfffffff8
c0001608:	89 c5                	mov    ebp,eax
c000160a:	83 ec 0c             	sub    esp,0xc
c000160d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001611:	50                   	push   eax
c0001612:	e8 a2 f8 ff ff       	call   c0000eb9 <dlmalloc>
c0001617:	83 c4 10             	add    esp,0x10
c000161a:	89 c1                	mov    ecx,eax
c000161c:	85 c0                	test   eax,eax
c000161e:	74 d1                	je     c00015f1 <dlmemalign+0x46>
c0001620:	31 d2                	xor    edx,edx
c0001622:	8d 70 f8             	lea    esi,[eax-0x8]
c0001625:	f7 f7                	div    edi
c0001627:	85 d2                	test   edx,edx
c0001629:	74 62                	je     c000168d <dlmemalign+0xe2>
c000162b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000162f:	89 f8                	mov    eax,edi
c0001631:	f7 d8                	neg    eax
c0001633:	21 c3                	and    ebx,eax
c0001635:	83 eb 08             	sub    ebx,0x8
c0001638:	89 d8                	mov    eax,ebx
c000163a:	29 f0                	sub    eax,esi
c000163c:	83 f8 0f             	cmp    eax,0xf
c000163f:	77 02                	ja     c0001643 <dlmemalign+0x98>
c0001641:	01 fb                	add    ebx,edi
c0001643:	89 d8                	mov    eax,ebx
c0001645:	29 f0                	sub    eax,esi
c0001647:	89 c6                	mov    esi,eax
c0001649:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000164c:	89 c2                	mov    edx,eax
c000164e:	83 e2 fc             	and    edx,0xfffffffc
c0001651:	29 f2                	sub    edx,esi
c0001653:	a8 02                	test   al,0x2
c0001655:	74 10                	je     c0001667 <dlmemalign+0xbc>
c0001657:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000165a:	83 ca 02             	or     edx,0x2
c000165d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001660:	89 33                	mov    DWORD PTR [ebx],esi
c0001662:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001665:	eb 5f                	jmp    c00016c6 <dlmemalign+0x11b>
c0001667:	83 ec 0c             	sub    esp,0xc
c000166a:	89 d0                	mov    eax,edx
c000166c:	83 c8 01             	or     eax,0x1
c000166f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001672:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001677:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000167a:	83 e0 01             	and    eax,0x1
c000167d:	09 f0                	or     eax,esi
c000167f:	89 de                	mov    esi,ebx
c0001681:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001684:	51                   	push   ecx
c0001685:	e8 d4 f4 ff ff       	call   c0000b5e <dlfree>
c000168a:	83 c4 10             	add    esp,0x10
c000168d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001690:	a8 02                	test   al,0x2
c0001692:	75 2f                	jne    c00016c3 <dlmemalign+0x118>
c0001694:	83 e0 fc             	and    eax,0xfffffffc
c0001697:	8d 55 10             	lea    edx,[ebp+0x10]
c000169a:	39 c2                	cmp    edx,eax
c000169c:	73 25                	jae    c00016c3 <dlmemalign+0x118>
c000169e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016a1:	83 ec 0c             	sub    esp,0xc
c00016a4:	29 e8                	sub    eax,ebp
c00016a6:	83 c2 08             	add    edx,0x8
c00016a9:	83 c8 01             	or     eax,0x1
c00016ac:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016af:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016b2:	83 e0 01             	and    eax,0x1
c00016b5:	09 c5                	or     ebp,eax
c00016b7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016ba:	52                   	push   edx
c00016bb:	e8 9e f4 ff ff       	call   c0000b5e <dlfree>
c00016c0:	83 c4 10             	add    esp,0x10
c00016c3:	8d 46 08             	lea    eax,[esi+0x8]
c00016c6:	83 c4 0c             	add    esp,0xc
c00016c9:	5b                   	pop    ebx
c00016ca:	5e                   	pop    esi
c00016cb:	5f                   	pop    edi
c00016cc:	5d                   	pop    ebp
c00016cd:	c3                   	ret    

c00016ce <dlcalloc>:
c00016ce:	53                   	push   ebx
c00016cf:	83 ec 14             	sub    esp,0x14
c00016d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016d6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016db:	50                   	push   eax
c00016dc:	e8 d8 f7 ff ff       	call   c0000eb9 <dlmalloc>
c00016e1:	83 c4 10             	add    esp,0x10
c00016e4:	89 c3                	mov    ebx,eax
c00016e6:	85 c0                	test   eax,eax
c00016e8:	74 77                	je     c0001761 <dlcalloc+0x93>
c00016ea:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016ed:	89 d0                	mov    eax,edx
c00016ef:	83 e0 fc             	and    eax,0xfffffffc
c00016f2:	80 e2 02             	and    dl,0x2
c00016f5:	75 5a                	jne    c0001751 <dlcalloc+0x83>
c00016f7:	83 e8 04             	sub    eax,0x4
c00016fa:	83 f8 27             	cmp    eax,0x27
c00016fd:	76 03                	jbe    c0001702 <dlcalloc+0x34>
c00016ff:	51                   	push   ecx
c0001700:	eb 53                	jmp    c0001755 <dlcalloc+0x87>
c0001702:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001708:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000170f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001716:	83 f8 13             	cmp    eax,0x13
c0001719:	76 46                	jbe    c0001761 <dlcalloc+0x93>
c000171b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001722:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001729:	83 f8 1b             	cmp    eax,0x1b
c000172c:	76 33                	jbe    c0001761 <dlcalloc+0x93>
c000172e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001735:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000173c:	83 f8 23             	cmp    eax,0x23
c000173f:	76 20                	jbe    c0001761 <dlcalloc+0x93>
c0001741:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001748:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000174f:	eb 10                	jmp    c0001761 <dlcalloc+0x93>
c0001751:	83 e8 08             	sub    eax,0x8
c0001754:	52                   	push   edx
c0001755:	50                   	push   eax
c0001756:	6a 00                	push   0x0
c0001758:	53                   	push   ebx
c0001759:	e8 1f ef ff ff       	call   c000067d <memset>
c000175e:	83 c4 10             	add    esp,0x10
c0001761:	89 d8                	mov    eax,ebx
c0001763:	83 c4 08             	add    esp,0x8
c0001766:	5b                   	pop    ebx
c0001767:	c3                   	ret    

c0001768 <dlcfree>:
c0001768:	e9 f1 f3 ff ff       	jmp    c0000b5e <dlfree>

c000176d <dlindependent_calloc>:
c000176d:	83 ec 28             	sub    esp,0x28
c0001770:	b9 03 00 00 00       	mov    ecx,0x3
c0001775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000177d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001781:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001789:	e8 b9 fa ff ff       	call   c0001247 <iALLOc>
c000178e:	83 c4 2c             	add    esp,0x2c
c0001791:	c3                   	ret    

c0001792 <dlindependent_comalloc>:
c0001792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000179a:	31 c9                	xor    ecx,ecx
c000179c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017a4:	e9 9e fa ff ff       	jmp    c0001247 <iALLOc>

c00017a9 <dlvalloc>:
c00017a9:	83 ec 0c             	sub    esp,0xc
c00017ac:	83 3d 80 a6 02 c0 00 	cmp    DWORD PTR ds:0xc002a680,0x0
c00017b3:	75 0a                	jne    c00017bf <dlvalloc+0x16>
c00017b5:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c00017ba:	e8 b8 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017bf:	50                   	push   eax
c00017c0:	50                   	push   eax
c00017c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017c5:	ff 35 dc a9 02 c0    	push   DWORD PTR ds:0xc002a9dc
c00017cb:	e8 db fd ff ff       	call   c00015ab <dlmemalign>
c00017d0:	83 c4 1c             	add    esp,0x1c
c00017d3:	c3                   	ret    

c00017d4 <dlpvalloc>:
c00017d4:	83 ec 0c             	sub    esp,0xc
c00017d7:	83 3d 80 a6 02 c0 00 	cmp    DWORD PTR ds:0xc002a680,0x0
c00017de:	75 0a                	jne    c00017ea <dlpvalloc+0x16>
c00017e0:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c00017e5:	e8 8d f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017ea:	a1 dc a9 02 c0       	mov    eax,ds:0xc002a9dc
c00017ef:	89 c1                	mov    ecx,eax
c00017f1:	52                   	push   edx
c00017f2:	f7 d9                	neg    ecx
c00017f4:	52                   	push   edx
c00017f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00017f9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00017fd:	21 ca                	and    edx,ecx
c00017ff:	52                   	push   edx
c0001800:	50                   	push   eax
c0001801:	e8 a5 fd ff ff       	call   c00015ab <dlmemalign>
c0001806:	83 c4 1c             	add    esp,0x1c
c0001809:	c3                   	ret    

c000180a <dlmalloc_trim>:
c000180a:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c000180f:	e8 63 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001814:	31 c0                	xor    eax,eax
c0001816:	c3                   	ret    

c0001817 <dlmalloc_usable_size>:
c0001817:	53                   	push   ebx
c0001818:	31 c0                	xor    eax,eax
c000181a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000181e:	85 c9                	test   ecx,ecx
c0001820:	74 24                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001822:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001825:	f6 c2 02             	test   dl,0x2
c0001828:	74 08                	je     c0001832 <dlmalloc_usable_size+0x1b>
c000182a:	83 e2 fc             	and    edx,0xfffffffc
c000182d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001830:	eb 14                	jmp    c0001846 <dlmalloc_usable_size+0x2f>
c0001832:	89 d3                	mov    ebx,edx
c0001834:	31 c0                	xor    eax,eax
c0001836:	83 e3 fe             	and    ebx,0xfffffffe
c0001839:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000183e:	74 06                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001840:	83 e2 fc             	and    edx,0xfffffffc
c0001843:	8d 42 fc             	lea    eax,[edx-0x4]
c0001846:	5b                   	pop    ebx
c0001847:	c3                   	ret    

c0001848 <dlmallinfo>:
c0001848:	55                   	push   ebp
c0001849:	57                   	push   edi
c000184a:	56                   	push   esi
c000184b:	53                   	push   ebx
c000184c:	83 ec 08             	sub    esp,0x8
c000184f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001853:	83 3d ac a6 02 c0 00 	cmp    DWORD PTR ds:0xc002a6ac,0x0
c000185a:	75 0a                	jne    c0001866 <dlmallinfo+0x1e>
c000185c:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c0001861:	e8 11 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001866:	a1 ac a6 02 c0       	mov    eax,ds:0xc002a6ac
c000186b:	31 ed                	xor    ebp,ebp
c000186d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001870:	31 c9                	xor    ecx,ecx
c0001872:	83 e0 fc             	and    eax,0xfffffffc
c0001875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001879:	31 c0                	xor    eax,eax
c000187b:	8b 14 85 84 a6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd597c]
c0001882:	85 d2                	test   edx,edx
c0001884:	74 0e                	je     c0001894 <dlmallinfo+0x4c>
c0001886:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001889:	45                   	inc    ebp
c000188a:	83 e6 fc             	and    esi,0xfffffffc
c000188d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001890:	01 f1                	add    ecx,esi
c0001892:	eb ee                	jmp    c0001882 <dlmallinfo+0x3a>
c0001894:	40                   	inc    eax
c0001895:	83 f8 0a             	cmp    eax,0xa
c0001898:	75 e1                	jne    c000187b <dlmallinfo+0x33>
c000189a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000189e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018a5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018a8:	b8 b4 a6 02 c0       	mov    eax,0xc002a6b4
c00018ad:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018b0:	39 f0                	cmp    eax,esi
c00018b2:	74 10                	je     c00018c4 <dlmallinfo+0x7c>
c00018b4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018b7:	ff 04 24             	inc    DWORD PTR [esp]
c00018ba:	83 e7 fc             	and    edi,0xfffffffc
c00018bd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018c0:	01 fa                	add    edx,edi
c00018c2:	eb ec                	jmp    c00018b0 <dlmallinfo+0x68>
c00018c4:	83 c0 08             	add    eax,0x8
c00018c7:	3d ac a9 02 c0       	cmp    eax,0xc002a9ac
c00018cc:	75 df                	jne    c00018ad <dlmallinfo+0x65>
c00018ce:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018d1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018d4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018d7:	a1 e8 a9 02 c0       	mov    eax,ds:0xc002a9e8
c00018dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018df:	89 03                	mov    DWORD PTR [ebx],eax
c00018e1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018e4:	8b 35 d0 a9 02 c0    	mov    esi,DWORD PTR ds:0xc002a9d0
c00018ea:	29 d0                	sub    eax,edx
c00018ec:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00018f2:	8b 35 e4 a9 02 c0    	mov    esi,DWORD PTR ds:0xc002a9e4
c00018f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00018ff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001902:	8b 35 f4 a9 02 c0    	mov    esi,DWORD PTR ds:0xc002a9f4
c0001908:	89 d8                	mov    eax,ebx
c000190a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000190d:	83 c4 08             	add    esp,0x8
c0001910:	5b                   	pop    ebx
c0001911:	5e                   	pop    esi
c0001912:	5f                   	pop    edi
c0001913:	5d                   	pop    ebp
c0001914:	c2 04 00             	ret    0x4

c0001917 <dlmalloc_stats>:
c0001917:	83 ec 30             	sub    esp,0x30
c000191a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000191e:	50                   	push   eax
c000191f:	e8 24 ff ff ff       	call   c0001848 <dlmallinfo>
c0001924:	83 c4 30             	add    esp,0x30
c0001927:	c3                   	ret    

c0001928 <dlmallopt>:
c0001928:	56                   	push   esi
c0001929:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c000192e:	53                   	push   ebx
c000192f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001937:	e8 3b f1 ff ff       	call   c0000a77 <malloc_consolidate>
c000193c:	8d 46 04             	lea    eax,[esi+0x4]
c000193f:	83 f8 05             	cmp    eax,0x5
c0001942:	77 67                	ja     c00019ab <dlmallopt+0x83>
c0001944:	ff 24 85 e4 62 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9d1c]
c000194b:	83 fb 50             	cmp    ebx,0x50
c000194e:	77 5b                	ja     c00019ab <dlmallopt+0x83>
c0001950:	ba 08 00 00 00       	mov    edx,0x8
c0001955:	85 db                	test   ebx,ebx
c0001957:	74 12                	je     c000196b <dlmallopt+0x43>
c0001959:	83 c3 0b             	add    ebx,0xb
c000195c:	ba 10 00 00 00       	mov    edx,0x10
c0001961:	83 fb 0f             	cmp    ebx,0xf
c0001964:	76 05                	jbe    c000196b <dlmallopt+0x43>
c0001966:	89 da                	mov    edx,ebx
c0001968:	83 e2 f8             	and    edx,0xfffffff8
c000196b:	a1 80 a6 02 c0       	mov    eax,ds:0xc002a680
c0001970:	83 e0 03             	and    eax,0x3
c0001973:	09 d0                	or     eax,edx
c0001975:	a3 80 a6 02 c0       	mov    ds:0xc002a680,eax
c000197a:	eb 31                	jmp    c00019ad <dlmallopt+0x85>
c000197c:	89 1d c4 a9 02 c0    	mov    DWORD PTR ds:0xc002a9c4,ebx
c0001982:	eb 06                	jmp    c000198a <dlmallopt+0x62>
c0001984:	89 1d c8 a9 02 c0    	mov    DWORD PTR ds:0xc002a9c8,ebx
c000198a:	be 01 00 00 00       	mov    esi,0x1
c000198f:	eb 1c                	jmp    c00019ad <dlmallopt+0x85>
c0001991:	89 1d cc a9 02 c0    	mov    DWORD PTR ds:0xc002a9cc,ebx
c0001997:	eb f1                	jmp    c000198a <dlmallopt+0x62>
c0001999:	31 f6                	xor    esi,esi
c000199b:	85 db                	test   ebx,ebx
c000199d:	75 0e                	jne    c00019ad <dlmallopt+0x85>
c000199f:	c7 05 d4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9d4,0x0
c00019a9:	eb df                	jmp    c000198a <dlmallopt+0x62>
c00019ab:	31 f6                	xor    esi,esi
c00019ad:	89 f0                	mov    eax,esi
c00019af:	5b                   	pop    ebx
c00019b0:	5e                   	pop    esi
c00019b1:	c3                   	ret    

c00019b2 <disk_status>:
c00019b2:	31 c0                	xor    eax,eax
c00019b4:	c3                   	ret    

c00019b5 <disk_initialize>:
c00019b5:	31 c0                	xor    eax,eax
c00019b7:	c3                   	ret    

c00019b8 <disk_read>:
c00019b8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019bd:	0f b6 04 85 c0 c0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3f40]
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	e9 8e d1 01 00       	jmp    c001eb5c <fatWrapperReadDisk>

c00019ce <disk_write>:
c00019ce:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019d3:	0f b6 04 85 c0 c0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3f40]
c00019db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019df:	e9 bf d1 01 00       	jmp    c001eba3 <fatWrapperWriteDisk>

c00019e4 <disk_ioctl>:
c00019e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019ed:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f2:	0f b6 04 85 c0 c0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3f40]
c00019fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fe:	e9 e7 d1 01 00       	jmp    c001ebea <fatWrapperIoctl>

c0001a03 <ld_word>:
c0001a03:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a07:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a0a:	c1 e2 08             	shl    edx,0x8
c0001a0d:	09 d0                	or     eax,edx
c0001a0f:	c3                   	ret    

c0001a10 <ld_dword>:
c0001a10:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a14:	89 d1                	mov    ecx,edx
c0001a16:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a1a:	c1 e1 08             	shl    ecx,0x8
c0001a1d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a20:	09 ca                	or     edx,ecx
c0001a22:	c1 e2 08             	shl    edx,0x8
c0001a25:	09 d0                	or     eax,edx
c0001a27:	c3                   	ret    

c0001a28 <ld_qword>:
c0001a28:	57                   	push   edi
c0001a29:	56                   	push   esi
c0001a2a:	53                   	push   ebx
c0001a2b:	31 db                	xor    ebx,ebx
c0001a2d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a30:	89 df                	mov    edi,ebx
c0001a32:	89 ce                	mov    esi,ecx
c0001a34:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a38:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a3c:	c1 e6 08             	shl    esi,0x8
c0001a3f:	09 f2                	or     edx,esi
c0001a41:	89 d6                	mov    esi,edx
c0001a43:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a47:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4b:	c1 e6 08             	shl    esi,0x8
c0001a4e:	09 f2                	or     edx,esi
c0001a50:	89 d6                	mov    esi,edx
c0001a52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a56:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5d:	c1 e6 08             	shl    esi,0x8
c0001a60:	89 fb                	mov    ebx,edi
c0001a62:	09 f2                	or     edx,esi
c0001a64:	89 d1                	mov    ecx,edx
c0001a66:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a6a:	c1 e1 08             	shl    ecx,0x8
c0001a6d:	89 da                	mov    edx,ebx
c0001a6f:	09 c8                	or     eax,ecx
c0001a71:	5b                   	pop    ebx
c0001a72:	5e                   	pop    esi
c0001a73:	5f                   	pop    edi
c0001a74:	c3                   	ret    

c0001a75 <st_word>:
c0001a75:	66 89 10             	mov    WORD PTR [eax],dx
c0001a78:	c3                   	ret    

c0001a79 <st_dword>:
c0001a79:	89 10                	mov    DWORD PTR [eax],edx
c0001a7b:	c3                   	ret    

c0001a7c <st_qword>:
c0001a7c:	89 10                	mov    DWORD PTR [eax],edx
c0001a7e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a81:	c3                   	ret    

c0001a82 <mem_cpy>:
c0001a82:	85 c9                	test   ecx,ecx
c0001a84:	74 10                	je     c0001a96 <mem_cpy+0x14>
c0001a86:	57                   	push   edi
c0001a87:	01 c1                	add    ecx,eax
c0001a89:	56                   	push   esi
c0001a8a:	89 c7                	mov    edi,eax
c0001a8c:	89 d6                	mov    esi,edx
c0001a8e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a8f:	39 f9                	cmp    ecx,edi
c0001a91:	75 fb                	jne    c0001a8e <mem_cpy+0xc>
c0001a93:	5e                   	pop    esi
c0001a94:	5f                   	pop    edi
c0001a95:	c3                   	ret    
c0001a96:	c3                   	ret    

c0001a97 <mem_set>:
c0001a97:	01 c1                	add    ecx,eax
c0001a99:	40                   	inc    eax
c0001a9a:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a9d:	39 c8                	cmp    eax,ecx
c0001a9f:	75 f8                	jne    c0001a99 <mem_set+0x2>
c0001aa1:	c3                   	ret    

c0001aa2 <mem_cmp>:
c0001aa2:	57                   	push   edi
c0001aa3:	56                   	push   esi
c0001aa4:	89 c6                	mov    esi,eax
c0001aa6:	53                   	push   ebx
c0001aa7:	46                   	inc    esi
c0001aa8:	42                   	inc    edx
c0001aa9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aad:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ab1:	29 fb                	sub    ebx,edi
c0001ab3:	89 cf                	mov    edi,ecx
c0001ab5:	29 f7                	sub    edi,esi
c0001ab7:	01 c7                	add    edi,eax
c0001ab9:	74 04                	je     c0001abf <mem_cmp+0x1d>
c0001abb:	85 db                	test   ebx,ebx
c0001abd:	74 e8                	je     c0001aa7 <mem_cmp+0x5>
c0001abf:	89 d8                	mov    eax,ebx
c0001ac1:	5b                   	pop    ebx
c0001ac2:	5e                   	pop    esi
c0001ac3:	5f                   	pop    edi
c0001ac4:	c3                   	ret    

c0001ac5 <chk_chr>:
c0001ac5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ac8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001acb:	74 07                	je     c0001ad4 <chk_chr+0xf>
c0001acd:	39 d1                	cmp    ecx,edx
c0001acf:	74 03                	je     c0001ad4 <chk_chr+0xf>
c0001ad1:	40                   	inc    eax
c0001ad2:	eb f1                	jmp    c0001ac5 <chk_chr>
c0001ad4:	89 c8                	mov    eax,ecx
c0001ad6:	c3                   	ret    

c0001ad7 <dbc_1st>:
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	c3                   	ret    

c0001ada <dbc_2nd>:
c0001ada:	31 c0                	xor    eax,eax
c0001adc:	c3                   	ret    

c0001add <tchar2uni>:
c0001add:	57                   	push   edi
c0001ade:	89 c7                	mov    edi,eax
c0001ae0:	56                   	push   esi
c0001ae1:	53                   	push   ebx
c0001ae2:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ae4:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001ae6:	8d 73 01             	lea    esi,[ebx+0x1]
c0001ae9:	84 c9                	test   cl,cl
c0001aeb:	78 0a                	js     c0001af7 <tchar2uni+0x1a>
c0001aed:	0f b6 d1             	movzx  edx,cl
c0001af0:	89 f3                	mov    ebx,esi
c0001af2:	e9 9f 00 00 00       	jmp    c0001b96 <tchar2uni+0xb9>
c0001af7:	88 ca                	mov    dl,cl
c0001af9:	83 e2 e0             	and    edx,0xffffffe0
c0001afc:	80 fa c0             	cmp    dl,0xc0
c0001aff:	75 0c                	jne    c0001b0d <tchar2uni+0x30>
c0001b01:	89 ca                	mov    edx,ecx
c0001b03:	b9 01 00 00 00       	mov    ecx,0x1
c0001b08:	83 e2 1f             	and    edx,0x1f
c0001b0b:	eb 2e                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b0d:	88 ca                	mov    dl,cl
c0001b0f:	83 e2 f0             	and    edx,0xfffffff0
c0001b12:	80 fa e0             	cmp    dl,0xe0
c0001b15:	75 0c                	jne    c0001b23 <tchar2uni+0x46>
c0001b17:	89 ca                	mov    edx,ecx
c0001b19:	b9 02 00 00 00       	mov    ecx,0x2
c0001b1e:	83 e2 0f             	and    edx,0xf
c0001b21:	eb 18                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b23:	88 ca                	mov    dl,cl
c0001b25:	83 e2 f8             	and    edx,0xfffffff8
c0001b28:	88 d0                	mov    al,dl
c0001b2a:	83 ca ff             	or     edx,0xffffffff
c0001b2d:	3c f0                	cmp    al,0xf0
c0001b2f:	75 6c                	jne    c0001b9d <tchar2uni+0xc0>
c0001b31:	89 ca                	mov    edx,ecx
c0001b33:	b9 03 00 00 00       	mov    ecx,0x3
c0001b38:	83 e2 07             	and    edx,0x7
c0001b3b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b3f:	46                   	inc    esi
c0001b40:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b43:	88 c8                	mov    al,cl
c0001b45:	83 e0 c0             	and    eax,0xffffffc0
c0001b48:	3c 80                	cmp    al,0x80
c0001b4a:	75 4e                	jne    c0001b9a <tchar2uni+0xbd>
c0001b4c:	c1 e2 06             	shl    edx,0x6
c0001b4f:	83 e1 3f             	and    ecx,0x3f
c0001b52:	09 ca                	or     edx,ecx
c0001b54:	39 de                	cmp    esi,ebx
c0001b56:	75 e7                	jne    c0001b3f <tchar2uni+0x62>
c0001b58:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b5b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b61:	77 37                	ja     c0001b9a <tchar2uni+0xbd>
c0001b63:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b69:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b6f:	76 29                	jbe    c0001b9a <tchar2uni+0xbd>
c0001b71:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b77:	76 1d                	jbe    c0001b96 <tchar2uni+0xb9>
c0001b79:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b7f:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b85:	c1 e1 06             	shl    ecx,0x6
c0001b88:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b8e:	09 ca                	or     edx,ecx
c0001b90:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b96:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b98:	eb 03                	jmp    c0001b9d <tchar2uni+0xc0>
c0001b9a:	83 ca ff             	or     edx,0xffffffff
c0001b9d:	5b                   	pop    ebx
c0001b9e:	89 d0                	mov    eax,edx
c0001ba0:	5e                   	pop    esi
c0001ba1:	5f                   	pop    edi
c0001ba2:	c3                   	ret    

c0001ba3 <put_utf>:
c0001ba3:	53                   	push   ebx
c0001ba4:	83 f8 7f             	cmp    eax,0x7f
c0001ba7:	89 c3                	mov    ebx,eax
c0001ba9:	b0 00                	mov    al,0x0
c0001bab:	77 11                	ja     c0001bbe <put_utf+0x1b>
c0001bad:	85 c9                	test   ecx,ecx
c0001baf:	0f 84 e5 00 00 00    	je     c0001c9a <put_utf+0xf7>
c0001bb5:	88 1a                	mov    BYTE PTR [edx],bl
c0001bb7:	b0 01                	mov    al,0x1
c0001bb9:	e9 dc 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001bbe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bc4:	77 23                	ja     c0001be9 <put_utf+0x46>
c0001bc6:	83 f9 01             	cmp    ecx,0x1
c0001bc9:	0f 86 cb 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bcf:	89 d8                	mov    eax,ebx
c0001bd1:	83 e3 3f             	and    ebx,0x3f
c0001bd4:	c1 e8 06             	shr    eax,0x6
c0001bd7:	83 cb 80             	or     ebx,0xffffff80
c0001bda:	83 c8 c0             	or     eax,0xffffffc0
c0001bdd:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001be0:	88 02                	mov    BYTE PTR [edx],al
c0001be2:	b0 02                	mov    al,0x2
c0001be4:	e9 b1 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001be9:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bef:	77 40                	ja     c0001c31 <put_utf+0x8e>
c0001bf1:	83 f9 02             	cmp    ecx,0x2
c0001bf4:	0f 86 a0 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bfa:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c00:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c06:	0f 86 8e 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001c0c:	89 d8                	mov    eax,ebx
c0001c0e:	c1 e8 0c             	shr    eax,0xc
c0001c11:	83 c8 e0             	or     eax,0xffffffe0
c0001c14:	88 02                	mov    BYTE PTR [edx],al
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 e0 3f             	and    eax,0x3f
c0001c24:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c27:	83 c8 80             	or     eax,0xffffff80
c0001c2a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c2d:	b0 03                	mov    al,0x3
c0001c2f:	eb 69                	jmp    c0001c9a <put_utf+0xf7>
c0001c31:	83 f9 03             	cmp    ecx,0x3
c0001c34:	76 64                	jbe    c0001c9a <put_utf+0xf7>
c0001c36:	89 d9                	mov    ecx,ebx
c0001c38:	0f b7 c3             	movzx  eax,bx
c0001c3b:	66 31 c9             	xor    cx,cx
c0001c3e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c44:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c4a:	c1 e9 06             	shr    ecx,0x6
c0001c4d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c53:	77 43                	ja     c0001c98 <put_utf+0xf5>
c0001c55:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c5b:	77 3b                	ja     c0001c98 <put_utf+0xf5>
c0001c5d:	09 cb                	or     ebx,ecx
c0001c5f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c65:	89 d8                	mov    eax,ebx
c0001c67:	c1 e8 12             	shr    eax,0x12
c0001c6a:	83 c8 f0             	or     eax,0xfffffff0
c0001c6d:	88 02                	mov    BYTE PTR [edx],al
c0001c6f:	89 d8                	mov    eax,ebx
c0001c71:	c1 e8 0c             	shr    eax,0xc
c0001c74:	83 e0 3f             	and    eax,0x3f
c0001c77:	83 c8 80             	or     eax,0xffffff80
c0001c7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	83 e3 3f             	and    ebx,0x3f
c0001c82:	c1 e8 06             	shr    eax,0x6
c0001c85:	83 cb 80             	or     ebx,0xffffff80
c0001c88:	83 e0 3f             	and    eax,0x3f
c0001c8b:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c8e:	83 c8 80             	or     eax,0xffffff80
c0001c91:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c94:	b0 04                	mov    al,0x4
c0001c96:	eb 02                	jmp    c0001c9a <put_utf+0xf7>
c0001c98:	31 c0                	xor    eax,eax
c0001c9a:	5b                   	pop    ebx
c0001c9b:	c3                   	ret    

c0001c9c <clst2sect>:
c0001c9c:	89 c1                	mov    ecx,eax
c0001c9e:	83 ea 02             	sub    edx,0x2
c0001ca1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ca4:	83 e8 02             	sub    eax,0x2
c0001ca7:	39 d0                	cmp    eax,edx
c0001ca9:	76 0d                	jbe    c0001cb8 <clst2sect+0x1c>
c0001cab:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001caf:	f7 e2                	mul    edx
c0001cb1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cb4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cb7:	c3                   	ret    
c0001cb8:	31 c0                	xor    eax,eax
c0001cba:	31 d2                	xor    edx,edx
c0001cbc:	c3                   	ret    

c0001cbd <clmt_clust>:
c0001cbd:	57                   	push   edi
c0001cbe:	89 cf                	mov    edi,ecx
c0001cc0:	56                   	push   esi
c0001cc1:	89 d6                	mov    esi,edx
c0001cc3:	53                   	push   ebx
c0001cc4:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cc8:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001ccb:	89 f2                	mov    edx,esi
c0001ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ccf:	c1 ef 09             	shr    edi,0x9
c0001cd2:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001cd6:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001cd9:	89 f9                	mov    ecx,edi
c0001cdb:	31 ff                	xor    edi,edi
c0001cdd:	57                   	push   edi
c0001cde:	56                   	push   esi
c0001cdf:	51                   	push   ecx
c0001ce0:	52                   	push   edx
c0001ce1:	e8 76 1d 02 00       	call   c0023a5c <__udivdi3>
c0001ce6:	83 c4 10             	add    esp,0x10
c0001ce9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001ceb:	85 d2                	test   edx,edx
c0001ced:	74 10                	je     c0001cff <clmt_clust+0x42>
c0001cef:	39 d0                	cmp    eax,edx
c0001cf1:	72 07                	jb     c0001cfa <clmt_clust+0x3d>
c0001cf3:	29 d0                	sub    eax,edx
c0001cf5:	83 c3 08             	add    ebx,0x8
c0001cf8:	eb ef                	jmp    c0001ce9 <clmt_clust+0x2c>
c0001cfa:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001cfd:	89 c2                	mov    edx,eax
c0001cff:	5b                   	pop    ebx
c0001d00:	89 d0                	mov    eax,edx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <pick_lfn>:
c0001d05:	55                   	push   ebp
c0001d06:	57                   	push   edi
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	89 c3                	mov    ebx,eax
c0001d0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d10:	e8 ee fc ff ff       	call   c0001a03 <ld_word>
c0001d15:	66 85 c0             	test   ax,ax
c0001d18:	74 04                	je     c0001d1e <pick_lfn+0x19>
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	eb 5c                	jmp    c0001d7a <pick_lfn+0x75>
c0001d1e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d21:	bd 01 00 00 00       	mov    ebp,0x1
c0001d26:	83 e1 bf             	and    ecx,0xffffffbf
c0001d29:	31 ff                	xor    edi,edi
c0001d2b:	49                   	dec    ecx
c0001d2c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d2f:	0f b6 87 00 64 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd9c00]
c0001d36:	01 f0                	add    eax,esi
c0001d38:	e8 c6 fc ff ff       	call   c0001a03 <ld_word>
c0001d3d:	66 85 ed             	test   bp,bp
c0001d40:	74 11                	je     c0001d53 <pick_lfn+0x4e>
c0001d42:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d48:	77 d0                	ja     c0001d1a <pick_lfn+0x15>
c0001d4a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d4e:	89 c5                	mov    ebp,eax
c0001d50:	41                   	inc    ecx
c0001d51:	eb 04                	jmp    c0001d57 <pick_lfn+0x52>
c0001d53:	66 40                	inc    ax
c0001d55:	75 c3                	jne    c0001d1a <pick_lfn+0x15>
c0001d57:	47                   	inc    edi
c0001d58:	83 ff 0d             	cmp    edi,0xd
c0001d5b:	75 d2                	jne    c0001d2f <pick_lfn+0x2a>
c0001d5d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d60:	74 13                	je     c0001d75 <pick_lfn+0x70>
c0001d62:	66 85 ed             	test   bp,bp
c0001d65:	74 0e                	je     c0001d75 <pick_lfn+0x70>
c0001d67:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d6d:	77 ab                	ja     c0001d1a <pick_lfn+0x15>
c0001d6f:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d75:	b8 01 00 00 00       	mov    eax,0x1
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <put_lfn>:
c0001d7f:	55                   	push   ebp
c0001d80:	31 ed                	xor    ebp,ebp
c0001d82:	57                   	push   edi
c0001d83:	89 d7                	mov    edi,edx
c0001d85:	56                   	push   esi
c0001d86:	31 f6                	xor    esi,esi
c0001d88:	53                   	push   ebx
c0001d89:	83 ec 08             	sub    esp,0x8
c0001d8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8f:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d97:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d9d:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001da0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001da3:	31 d2                	xor    edx,edx
c0001da5:	e8 cb fc ff ff       	call   c0001a75 <st_word>
c0001daa:	0f b6 d9             	movzx  ebx,cl
c0001dad:	4b                   	dec    ebx
c0001dae:	6b db 0d             	imul   ebx,ebx,0xd
c0001db1:	66 83 fe ff          	cmp    si,0xffff
c0001db5:	74 08                	je     c0001dbf <put_lfn+0x40>
c0001db7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dba:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dbe:	43                   	inc    ebx
c0001dbf:	0f b6 85 00 64 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd9c00]
c0001dc6:	0f b7 d6             	movzx  edx,si
c0001dc9:	01 f8                	add    eax,edi
c0001dcb:	e8 a5 fc ff ff       	call   c0001a75 <st_word>
c0001dd0:	66 85 f6             	test   si,si
c0001dd3:	75 03                	jne    c0001dd8 <put_lfn+0x59>
c0001dd5:	83 ce ff             	or     esi,0xffffffff
c0001dd8:	45                   	inc    ebp
c0001dd9:	83 fd 0d             	cmp    ebp,0xd
c0001ddc:	75 d3                	jne    c0001db1 <put_lfn+0x32>
c0001dde:	66 46                	inc    si
c0001de0:	74 0a                	je     c0001dec <put_lfn+0x6d>
c0001de2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001de5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001dea:	75 09                	jne    c0001df5 <put_lfn+0x76>
c0001dec:	88 c8                	mov    al,cl
c0001dee:	83 c8 40             	or     eax,0x40
c0001df1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001df5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001df9:	88 07                	mov    BYTE PTR [edi],al
c0001dfb:	83 c4 08             	add    esp,0x8
c0001dfe:	5b                   	pop    ebx
c0001dff:	5e                   	pop    esi
c0001e00:	5f                   	pop    edi
c0001e01:	5d                   	pop    ebp
c0001e02:	c3                   	ret    

c0001e03 <gen_numname>:
c0001e03:	57                   	push   edi
c0001e04:	89 cf                	mov    edi,ecx
c0001e06:	56                   	push   esi
c0001e07:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e0c:	53                   	push   ebx
c0001e0d:	89 c6                	mov    esi,eax
c0001e0f:	83 ec 10             	sub    esp,0x10
c0001e12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e16:	e8 67 fc ff ff       	call   c0001a82 <mem_cpy>
c0001e1b:	83 fb 05             	cmp    ebx,0x5
c0001e1e:	76 2d                	jbe    c0001e4d <gen_numname+0x4a>
c0001e20:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e23:	66 85 c0             	test   ax,ax
c0001e26:	74 25                	je     c0001e4d <gen_numname+0x4a>
c0001e28:	83 c7 02             	add    edi,0x2
c0001e2b:	ba 10 00 00 00       	mov    edx,0x10
c0001e30:	01 db                	add    ebx,ebx
c0001e32:	89 c1                	mov    ecx,eax
c0001e34:	66 d1 e8             	shr    ax,1
c0001e37:	83 e1 01             	and    ecx,0x1
c0001e3a:	01 cb                	add    ebx,ecx
c0001e3c:	0f ba e3 10          	bt     ebx,0x10
c0001e40:	73 06                	jae    c0001e48 <gen_numname+0x45>
c0001e42:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e48:	4a                   	dec    edx
c0001e49:	75 e5                	jne    c0001e30 <gen_numname+0x2d>
c0001e4b:	eb d3                	jmp    c0001e20 <gen_numname+0x1d>
c0001e4d:	b8 07 00 00 00       	mov    eax,0x7
c0001e52:	88 d9                	mov    cl,bl
c0001e54:	83 e1 0f             	and    ecx,0xf
c0001e57:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e5a:	80 fa 39             	cmp    dl,0x39
c0001e5d:	76 03                	jbe    c0001e62 <gen_numname+0x5f>
c0001e5f:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e62:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e65:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e69:	89 da                	mov    edx,ebx
c0001e6b:	c1 ea 04             	shr    edx,0x4
c0001e6e:	83 fb 0f             	cmp    ebx,0xf
c0001e71:	76 06                	jbe    c0001e79 <gen_numname+0x76>
c0001e73:	89 c8                	mov    eax,ecx
c0001e75:	89 d3                	mov    ebx,edx
c0001e77:	eb d9                	jmp    c0001e52 <gen_numname+0x4f>
c0001e79:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e7e:	31 d2                	xor    edx,edx
c0001e80:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e83:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e86:	39 ca                	cmp    edx,ecx
c0001e88:	73 18                	jae    c0001ea2 <gen_numname+0x9f>
c0001e8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8d:	3c 20                	cmp    al,0x20
c0001e8f:	74 11                	je     c0001ea2 <gen_numname+0x9f>
c0001e91:	e8 41 fc ff ff       	call   c0001ad7 <dbc_1st>
c0001e96:	85 c0                	test   eax,eax
c0001e98:	74 05                	je     c0001e9f <gen_numname+0x9c>
c0001e9a:	39 d3                	cmp    ebx,edx
c0001e9c:	74 04                	je     c0001ea2 <gen_numname+0x9f>
c0001e9e:	42                   	inc    edx
c0001e9f:	42                   	inc    edx
c0001ea0:	eb e1                	jmp    c0001e83 <gen_numname+0x80>
c0001ea2:	b0 20                	mov    al,0x20
c0001ea4:	83 f9 07             	cmp    ecx,0x7
c0001ea7:	77 05                	ja     c0001eae <gen_numname+0xab>
c0001ea9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ead:	41                   	inc    ecx
c0001eae:	42                   	inc    edx
c0001eaf:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eb3:	83 fa 07             	cmp    edx,0x7
c0001eb6:	76 ea                	jbe    c0001ea2 <gen_numname+0x9f>
c0001eb8:	83 c4 10             	add    esp,0x10
c0001ebb:	5b                   	pop    ebx
c0001ebc:	5e                   	pop    esi
c0001ebd:	5f                   	pop    edi
c0001ebe:	c3                   	ret    

c0001ebf <sum_sfn>:
c0001ebf:	31 c9                	xor    ecx,ecx
c0001ec1:	31 d2                	xor    edx,edx
c0001ec3:	d0 ca                	ror    dl,1
c0001ec5:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ec8:	41                   	inc    ecx
c0001ec9:	83 f9 0b             	cmp    ecx,0xb
c0001ecc:	75 f5                	jne    c0001ec3 <sum_sfn+0x4>
c0001ece:	88 d0                	mov    al,dl
c0001ed0:	c3                   	ret    

c0001ed1 <xdir_sum>:
c0001ed1:	56                   	push   esi
c0001ed2:	31 c9                	xor    ecx,ecx
c0001ed4:	53                   	push   ebx
c0001ed5:	31 d2                	xor    edx,edx
c0001ed7:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001edb:	43                   	inc    ebx
c0001edc:	c1 e3 05             	shl    ebx,0x5
c0001edf:	83 fa 02             	cmp    edx,0x2
c0001ee2:	74 0b                	je     c0001eef <xdir_sum+0x1e>
c0001ee4:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ee8:	66 d1 c9             	ror    cx,1
c0001eeb:	01 f1                	add    ecx,esi
c0001eed:	eb 05                	jmp    c0001ef4 <xdir_sum+0x23>
c0001eef:	ba 03 00 00 00       	mov    edx,0x3
c0001ef4:	42                   	inc    edx
c0001ef5:	39 d3                	cmp    ebx,edx
c0001ef7:	77 e6                	ja     c0001edf <xdir_sum+0xe>
c0001ef9:	89 c8                	mov    eax,ecx
c0001efb:	5b                   	pop    ebx
c0001efc:	5e                   	pop    esi
c0001efd:	c3                   	ret    

c0001efe <xsum32>:
c0001efe:	d1 ca                	ror    edx,1
c0001f00:	0f b6 c0             	movzx  eax,al
c0001f03:	01 d0                	add    eax,edx
c0001f05:	c3                   	ret    

c0001f06 <get_xfileinfo>:
c0001f06:	55                   	push   ebp
c0001f07:	31 c9                	xor    ecx,ecx
c0001f09:	57                   	push   edi
c0001f0a:	bd 40 00 00 00       	mov    ebp,0x40
c0001f0f:	56                   	push   esi
c0001f10:	31 ff                	xor    edi,edi
c0001f12:	53                   	push   ebx
c0001f13:	89 c6                	mov    esi,eax
c0001f15:	83 ec 0c             	sub    esp,0xc
c0001f18:	89 d3                	mov    ebx,edx
c0001f1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f21:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f25:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f28:	76 6d                	jbe    c0001f97 <get_xfileinfo+0x91>
c0001f2a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f30:	76 0b                	jbe    c0001f3d <get_xfileinfo+0x37>
c0001f32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f36:	bf 01 00 00 00       	mov    edi,0x1
c0001f3b:	eb 63                	jmp    c0001fa0 <get_xfileinfo+0x9a>
c0001f3d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f43:	75 03                	jne    c0001f48 <get_xfileinfo+0x42>
c0001f45:	83 c5 02             	add    ebp,0x2
c0001f48:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f4b:	83 c5 02             	add    ebp,0x2
c0001f4e:	e8 b0 fa ff ff       	call   c0001a03 <ld_word>
c0001f53:	ff 04 24             	inc    DWORD PTR [esp]
c0001f56:	66 85 c9             	test   cx,cx
c0001f59:	75 0d                	jne    c0001f68 <get_xfileinfo+0x62>
c0001f5b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f61:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f66:	76 2b                	jbe    c0001f93 <get_xfileinfo+0x8d>
c0001f68:	c1 e1 10             	shl    ecx,0x10
c0001f6b:	ba ff 00 00 00       	mov    edx,0xff
c0001f70:	0f b7 c0             	movzx  eax,ax
c0001f73:	29 fa                	sub    edx,edi
c0001f75:	09 c8                	or     eax,ecx
c0001f77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f7b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f83:	e8 1b fc ff ff       	call   c0001ba3 <put_utf>
c0001f88:	84 c0                	test   al,al
c0001f8a:	74 a6                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f8c:	0f b6 c0             	movzx  eax,al
c0001f8f:	01 c7                	add    edi,eax
c0001f91:	31 c0                	xor    eax,eax
c0001f93:	89 c1                	mov    ecx,eax
c0001f95:	eb 8a                	jmp    c0001f21 <get_xfileinfo+0x1b>
c0001f97:	85 ff                	test   edi,edi
c0001f99:	74 97                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f9b:	66 85 c9             	test   cx,cx
c0001f9e:	75 92                	jne    c0001f32 <get_xfileinfo+0x2c>
c0001fa0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fa5:	31 c0                	xor    eax,eax
c0001fa7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fab:	31 d2                	xor    edx,edx
c0001fad:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fb0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fb3:	80 e1 10             	and    cl,0x10
c0001fb6:	75 08                	jne    c0001fc0 <get_xfileinfo+0xba>
c0001fb8:	8d 46 38             	lea    eax,[esi+0x38]
c0001fbb:	e8 68 fa ff ff       	call   c0001a28 <ld_qword>
c0001fc0:	89 03                	mov    DWORD PTR [ebx],eax
c0001fc2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fc5:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fc8:	e8 36 fa ff ff       	call   c0001a03 <ld_word>
c0001fcd:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fd1:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fd4:	e8 2a fa ff ff       	call   c0001a03 <ld_word>
c0001fd9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001fdd:	83 c4 0c             	add    esp,0xc
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <get_ldnumber>:
c0001fe5:	8b 10                	mov    edx,DWORD PTR [eax]
c0001fe7:	85 d2                	test   edx,edx
c0001fe9:	74 14                	je     c0001fff <get_ldnumber+0x1a>
c0001feb:	56                   	push   esi
c0001fec:	53                   	push   ebx
c0001fed:	89 d3                	mov    ebx,edx
c0001fef:	43                   	inc    ebx
c0001ff0:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001ff3:	80 f9 1f             	cmp    cl,0x1f
c0001ff6:	76 0d                	jbe    c0002005 <get_ldnumber+0x20>
c0001ff8:	80 f9 3a             	cmp    cl,0x3a
c0001ffb:	75 f2                	jne    c0001fef <get_ldnumber+0xa>
c0001ffd:	eb 0a                	jmp    c0002009 <get_ldnumber+0x24>
c0001fff:	83 c9 ff             	or     ecx,0xffffffff
c0002002:	89 c8                	mov    eax,ecx
c0002004:	c3                   	ret    
c0002005:	31 c9                	xor    ecx,ecx
c0002007:	eb 24                	jmp    c000202d <get_ldnumber+0x48>
c0002009:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000200c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000200f:	80 f9 09             	cmp    cl,0x9
c0002012:	77 16                	ja     c000202a <get_ldnumber+0x45>
c0002014:	83 c2 02             	add    edx,0x2
c0002017:	83 c9 ff             	or     ecx,0xffffffff
c000201a:	39 d3                	cmp    ebx,edx
c000201c:	75 0f                	jne    c000202d <get_ldnumber+0x48>
c000201e:	89 f2                	mov    edx,esi
c0002020:	89 18                	mov    DWORD PTR [eax],ebx
c0002022:	0f be ca             	movsx  ecx,dl
c0002025:	83 e9 30             	sub    ecx,0x30
c0002028:	eb 03                	jmp    c000202d <get_ldnumber+0x48>
c000202a:	83 c9 ff             	or     ecx,0xffffffff
c000202d:	89 c8                	mov    eax,ecx
c000202f:	5b                   	pop    ebx
c0002030:	5e                   	pop    esi
c0002031:	c3                   	ret    

c0002032 <crc32>:
c0002032:	56                   	push   esi
c0002033:	89 d6                	mov    esi,edx
c0002035:	53                   	push   ebx
c0002036:	b2 01                	mov    dl,0x1
c0002038:	bb 08 00 00 00       	mov    ebx,0x8
c000203d:	89 f1                	mov    ecx,esi
c000203f:	84 d1                	test   cl,dl
c0002041:	0f 95 c1             	setne  cl
c0002044:	0f b6 c9             	movzx  ecx,cl
c0002047:	31 c1                	xor    ecx,eax
c0002049:	89 c8                	mov    eax,ecx
c000204b:	d1 e8                	shr    eax,1
c000204d:	80 e1 01             	and    cl,0x1
c0002050:	74 05                	je     c0002057 <crc32+0x25>
c0002052:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002057:	d1 e2                	shl    edx,1
c0002059:	4b                   	dec    ebx
c000205a:	75 e1                	jne    c000203d <crc32+0xb>
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	c3                   	ret    

c000205f <test_gpt_header>:
c000205f:	55                   	push   ebp
c0002060:	b9 10 00 00 00       	mov    ecx,0x10
c0002065:	57                   	push   edi
c0002066:	ba 00 63 02 c0       	mov    edx,0xc0026300
c000206b:	56                   	push   esi
c000206c:	31 ff                	xor    edi,edi
c000206e:	53                   	push   ebx
c000206f:	89 c3                	mov    ebx,eax
c0002071:	e8 2c fa ff ff       	call   c0001aa2 <mem_cmp>
c0002076:	85 c0                	test   eax,eax
c0002078:	75 55                	jne    c00020cf <test_gpt_header+0x70>
c000207a:	89 c7                	mov    edi,eax
c000207c:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002081:	83 ce ff             	or     esi,0xffffffff
c0002084:	31 d2                	xor    edx,edx
c0002086:	83 fd 03             	cmp    ebp,0x3
c0002089:	76 05                	jbe    c0002090 <test_gpt_header+0x31>
c000208b:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002090:	89 f0                	mov    eax,esi
c0002092:	45                   	inc    ebp
c0002093:	e8 9a ff ff ff       	call   c0002032 <crc32>
c0002098:	83 fd 4c             	cmp    ebp,0x4c
c000209b:	89 c6                	mov    esi,eax
c000209d:	75 e5                	jne    c0002084 <test_gpt_header+0x25>
c000209f:	8d 43 10             	lea    eax,[ebx+0x10]
c00020a2:	f7 d6                	not    esi
c00020a4:	e8 67 f9 ff ff       	call   c0001a10 <ld_dword>
c00020a9:	39 c6                	cmp    esi,eax
c00020ab:	75 22                	jne    c00020cf <test_gpt_header+0x70>
c00020ad:	8d 43 54             	lea    eax,[ebx+0x54]
c00020b0:	e8 5b f9 ff ff       	call   c0001a10 <ld_dword>
c00020b5:	83 c0 80             	add    eax,0xffffff80
c00020b8:	75 15                	jne    c00020cf <test_gpt_header+0x70>
c00020ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00020bd:	e8 4e f9 ff ff       	call   c0001a10 <ld_dword>
c00020c2:	3d 80 00 00 00       	cmp    eax,0x80
c00020c7:	0f 96 c0             	setbe  al
c00020ca:	0f b6 c0             	movzx  eax,al
c00020cd:	89 c7                	mov    edi,eax
c00020cf:	5b                   	pop    ebx
c00020d0:	89 f8                	mov    eax,edi
c00020d2:	5e                   	pop    esi
c00020d3:	5f                   	pop    edi
c00020d4:	5d                   	pop    ebp
c00020d5:	c3                   	ret    

c00020d6 <make_rand>:
c00020d6:	56                   	push   esi
c00020d7:	85 c0                	test   eax,eax
c00020d9:	53                   	push   ebx
c00020da:	75 05                	jne    c00020e1 <make_rand+0xb>
c00020dc:	b8 01 00 00 00       	mov    eax,0x1
c00020e1:	01 d1                	add    ecx,edx
c00020e3:	bb 08 00 00 00       	mov    ebx,0x8
c00020e8:	89 c6                	mov    esi,eax
c00020ea:	d1 e8                	shr    eax,1
c00020ec:	83 e6 01             	and    esi,0x1
c00020ef:	85 f6                	test   esi,esi
c00020f1:	74 05                	je     c00020f8 <make_rand+0x22>
c00020f3:	35 00 00 00 a3       	xor    eax,0xa3000000
c00020f8:	4b                   	dec    ebx
c00020f9:	75 ed                	jne    c00020e8 <make_rand+0x12>
c00020fb:	42                   	inc    edx
c00020fc:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00020ff:	39 ca                	cmp    edx,ecx
c0002101:	75 e0                	jne    c00020e3 <make_rand+0xd>
c0002103:	5b                   	pop    ebx
c0002104:	5e                   	pop    esi
c0002105:	c3                   	ret    

c0002106 <validate>:
c0002106:	56                   	push   esi
c0002107:	53                   	push   ebx
c0002108:	89 d6                	mov    esi,edx
c000210a:	51                   	push   ecx
c000210b:	85 c0                	test   eax,eax
c000210d:	75 09                	jne    c0002118 <validate+0x12>
c000210f:	b8 09 00 00 00       	mov    eax,0x9
c0002114:	31 c9                	xor    ecx,ecx
c0002116:	eb 2f                	jmp    c0002147 <validate+0x41>
c0002118:	89 c3                	mov    ebx,eax
c000211a:	8b 00                	mov    eax,DWORD PTR [eax]
c000211c:	85 c0                	test   eax,eax
c000211e:	74 ef                	je     c000210f <validate+0x9>
c0002120:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002123:	74 ea                	je     c000210f <validate+0x9>
c0002125:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002129:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000212d:	75 e0                	jne    c000210f <validate+0x9>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002136:	50                   	push   eax
c0002137:	e8 76 f8 ff ff       	call   c00019b2 <disk_status>
c000213c:	83 c4 10             	add    esp,0x10
c000213f:	a8 01                	test   al,0x1
c0002141:	75 cc                	jne    c000210f <validate+0x9>
c0002143:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002145:	31 c0                	xor    eax,eax
c0002147:	89 0e                	mov    DWORD PTR [esi],ecx
c0002149:	5a                   	pop    edx
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <sync_window>:
c000214d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002151:	0f 84 85 00 00 00    	je     c00021dc <sync_window+0x8f>
c0002157:	55                   	push   ebp
c0002158:	8d 68 54             	lea    ebp,[eax+0x54]
c000215b:	57                   	push   edi
c000215c:	56                   	push   esi
c000215d:	53                   	push   ebx
c000215e:	89 c3                	mov    ebx,eax
c0002160:	83 ec 28             	sub    esp,0x28
c0002163:	6a 01                	push   0x1
c0002165:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002168:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000216b:	55                   	push   ebp
c000216c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002170:	50                   	push   eax
c0002171:	e8 58 f8 ff ff       	call   c00019ce <disk_write>
c0002176:	83 c4 20             	add    esp,0x20
c0002179:	ba 01 00 00 00       	mov    edx,0x1
c000217e:	85 c0                	test   eax,eax
c0002180:	75 50                	jne    c00021d2 <sync_window+0x85>
c0002182:	31 ff                	xor    edi,edi
c0002184:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002187:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000218b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000218f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002192:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002195:	89 c6                	mov    esi,eax
c0002197:	89 d7                	mov    edi,edx
c0002199:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000219c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021a0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021a3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021a7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021ab:	73 23                	jae    c00021d0 <sync_window+0x83>
c00021ad:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021b1:	75 1d                	jne    c00021d0 <sync_window+0x83>
c00021b3:	83 ec 0c             	sub    esp,0xc
c00021b6:	6a 01                	push   0x1
c00021b8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021bc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021c0:	52                   	push   edx
c00021c1:	50                   	push   eax
c00021c2:	55                   	push   ebp
c00021c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c7:	50                   	push   eax
c00021c8:	e8 01 f8 ff ff       	call   c00019ce <disk_write>
c00021cd:	83 c4 20             	add    esp,0x20
c00021d0:	31 d2                	xor    edx,edx
c00021d2:	83 c4 1c             	add    esp,0x1c
c00021d5:	89 d0                	mov    eax,edx
c00021d7:	5b                   	pop    ebx
c00021d8:	5e                   	pop    esi
c00021d9:	5f                   	pop    edi
c00021da:	5d                   	pop    ebp
c00021db:	c3                   	ret    
c00021dc:	31 d2                	xor    edx,edx
c00021de:	89 d0                	mov    eax,edx
c00021e0:	c3                   	ret    

c00021e1 <move_window>:
c00021e1:	56                   	push   esi
c00021e2:	53                   	push   ebx
c00021e3:	89 c3                	mov    ebx,eax
c00021e5:	83 ec 14             	sub    esp,0x14
c00021e8:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021eb:	75 07                	jne    c00021f4 <move_window+0x13>
c00021ed:	31 f6                	xor    esi,esi
c00021ef:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c00021f2:	74 59                	je     c000224d <move_window+0x6c>
c00021f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00021f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021fc:	89 d8                	mov    eax,ebx
c00021fe:	e8 4a ff ff ff       	call   c000214d <sync_window>
c0002203:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002207:	89 c6                	mov    esi,eax
c0002209:	85 c0                	test   eax,eax
c000220b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000220f:	75 3c                	jne    c000224d <move_window+0x6c>
c0002211:	83 ec 0c             	sub    esp,0xc
c0002214:	8d 43 54             	lea    eax,[ebx+0x54]
c0002217:	6a 01                	push   0x1
c0002219:	51                   	push   ecx
c000221a:	52                   	push   edx
c000221b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000221f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002223:	50                   	push   eax
c0002224:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002228:	50                   	push   eax
c0002229:	e8 8a f7 ff ff       	call   c00019b8 <disk_read>
c000222e:	83 c4 20             	add    esp,0x20
c0002231:	85 c0                	test   eax,eax
c0002233:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002237:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000223b:	74 0a                	je     c0002247 <move_window+0x66>
c000223d:	83 ca ff             	or     edx,0xffffffff
c0002240:	be 01 00 00 00       	mov    esi,0x1
c0002245:	89 d1                	mov    ecx,edx
c0002247:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000224a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000224d:	89 f0                	mov    eax,esi
c000224f:	83 c4 14             	add    esp,0x14
c0002252:	5b                   	pop    ebx
c0002253:	5e                   	pop    esi
c0002254:	c3                   	ret    

c0002255 <check_fs>:
c0002255:	53                   	push   ebx
c0002256:	89 c3                	mov    ebx,eax
c0002258:	83 ec 08             	sub    esp,0x8
c000225b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000225f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002266:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000226d:	e8 6f ff ff ff       	call   c00021e1 <move_window>
c0002272:	ba 04 00 00 00       	mov    edx,0x4
c0002277:	85 c0                	test   eax,eax
c0002279:	0f 85 89 00 00 00    	jne    c0002308 <check_fs+0xb3>
c000227f:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002285:	e8 79 f7 ff ff       	call   c0001a03 <ld_word>
c000228a:	ba 03 00 00 00       	mov    edx,0x3
c000228f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002293:	75 73                	jne    c0002308 <check_fs+0xb3>
c0002295:	ba 20 64 02 c0       	mov    edx,0xc0026420
c000229a:	8d 43 54             	lea    eax,[ebx+0x54]
c000229d:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a2:	e8 fb f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022a7:	ba 01 00 00 00       	mov    edx,0x1
c00022ac:	85 c0                	test   eax,eax
c00022ae:	74 58                	je     c0002308 <check_fs+0xb3>
c00022b0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022b3:	8d 50 18             	lea    edx,[eax+0x18]
c00022b6:	80 fa 01             	cmp    dl,0x1
c00022b9:	76 09                	jbe    c00022c4 <check_fs+0x6f>
c00022bb:	ba 02 00 00 00       	mov    edx,0x2
c00022c0:	3c eb                	cmp    al,0xeb
c00022c2:	75 44                	jne    c0002308 <check_fs+0xb3>
c00022c4:	ba 50 91 02 c0       	mov    edx,0xc0029150
c00022c9:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022cf:	b9 03 00 00 00       	mov    ecx,0x3
c00022d4:	e8 c9 f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022d9:	31 d2                	xor    edx,edx
c00022db:	85 c0                	test   eax,eax
c00022dd:	74 29                	je     c0002308 <check_fs+0xb3>
c00022df:	ba 2c 64 02 c0       	mov    edx,0xc002642c
c00022e4:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022ea:	b9 05 00 00 00       	mov    ecx,0x5
c00022ef:	e8 ae f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022f4:	31 d2                	xor    edx,edx
c00022f6:	85 c0                	test   eax,eax
c00022f8:	74 0e                	je     c0002308 <check_fs+0xb3>
c00022fa:	31 d2                	xor    edx,edx
c00022fc:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002303:	0f 95 c2             	setne  dl
c0002306:	01 d2                	add    edx,edx
c0002308:	89 d0                	mov    eax,edx
c000230a:	83 c4 08             	add    esp,0x8
c000230d:	5b                   	pop    ebx
c000230e:	c3                   	ret    

c000230f <find_volume>:
c000230f:	55                   	push   ebp
c0002310:	31 c9                	xor    ecx,ecx
c0002312:	57                   	push   edi
c0002313:	56                   	push   esi
c0002314:	89 d6                	mov    esi,edx
c0002316:	53                   	push   ebx
c0002317:	31 d2                	xor    edx,edx
c0002319:	83 ec 3c             	sub    esp,0x3c
c000231c:	89 c3                	mov    ebx,eax
c000231e:	e8 32 ff ff ff       	call   c0002255 <check_fs>
c0002323:	83 f8 02             	cmp    eax,0x2
c0002326:	74 0e                	je     c0002336 <find_volume+0x27>
c0002328:	0f 87 5d 01 00 00    	ja     c000248b <find_volume+0x17c>
c000232e:	85 f6                	test   esi,esi
c0002330:	0f 84 55 01 00 00    	je     c000248b <find_volume+0x17c>
c0002336:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000233d:	0f 85 dd 00 00 00    	jne    c0002420 <find_volume+0x111>
c0002343:	31 c9                	xor    ecx,ecx
c0002345:	ba 01 00 00 00       	mov    edx,0x1
c000234a:	89 d8                	mov    eax,ebx
c000234c:	e8 90 fe ff ff       	call   c00021e1 <move_window>
c0002351:	85 c0                	test   eax,eax
c0002353:	74 0a                	je     c000235f <find_volume+0x50>
c0002355:	b8 04 00 00 00       	mov    eax,0x4
c000235a:	e9 2c 01 00 00       	jmp    c000248b <find_volume+0x17c>
c000235f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002362:	89 e8                	mov    eax,ebp
c0002364:	e8 f6 fc ff ff       	call   c000205f <test_gpt_header>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 0a                	jne    c0002377 <find_volume+0x68>
c000236d:	b8 03 00 00 00       	mov    eax,0x3
c0002372:	e9 14 01 00 00       	jmp    c000248b <find_volume+0x17c>
c0002377:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000237d:	e8 8e f6 ff ff       	call   c0001a10 <ld_dword>
c0002382:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002386:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000238c:	e8 97 f6 ff ff       	call   c0001a28 <ld_qword>
c0002391:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000239d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ad:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023b1:	74 ba                	je     c000236d <find_volume+0x5e>
c00023b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023b7:	31 c9                	xor    ecx,ecx
c00023b9:	c1 e7 07             	shl    edi,0x7
c00023bc:	89 d8                	mov    eax,ebx
c00023be:	89 fa                	mov    edx,edi
c00023c0:	c1 ea 09             	shr    edx,0x9
c00023c3:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023c7:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023cb:	e8 11 fe ff ff       	call   c00021e1 <move_window>
c00023d0:	85 c0                	test   eax,eax
c00023d2:	75 81                	jne    c0002355 <find_volume+0x46>
c00023d4:	81 e7 80 01 00 00    	and    edi,0x180
c00023da:	b9 10 00 00 00       	mov    ecx,0x10
c00023df:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023e3:	ba 10 64 02 c0       	mov    edx,0xc0026410
c00023e8:	e8 b5 f6 ff ff       	call   c0001aa2 <mem_cmp>
c00023ed:	85 c0                	test   eax,eax
c00023ef:	75 29                	jne    c000241a <find_volume+0x10b>
c00023f1:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00023f5:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00023f9:	e8 2a f6 ff ff       	call   c0001a28 <ld_qword>
c00023fe:	89 d1                	mov    ecx,edx
c0002400:	89 c2                	mov    edx,eax
c0002402:	89 d8                	mov    eax,ebx
c0002404:	e8 4c fe ff ff       	call   c0002255 <check_fs>
c0002409:	85 f6                	test   esi,esi
c000240b:	75 07                	jne    c0002414 <find_volume+0x105>
c000240d:	83 f8 01             	cmp    eax,0x1
c0002410:	77 08                	ja     c000241a <find_volume+0x10b>
c0002412:	eb 77                	jmp    c000248b <find_volume+0x17c>
c0002414:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002418:	74 71                	je     c000248b <find_volume+0x17c>
c000241a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000241e:	eb 89                	jmp    c00023a9 <find_volume+0x9a>
c0002420:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002424:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000242a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002434:	89 cd                	mov    ebp,ecx
c0002436:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000243a:	89 f8                	mov    eax,edi
c000243c:	83 c7 10             	add    edi,0x10
c000243f:	e8 cc f5 ff ff       	call   c0001a10 <ld_dword>
c0002444:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002448:	89 01                	mov    DWORD PTR [ecx],eax
c000244a:	83 c1 04             	add    ecx,0x4
c000244d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002451:	75 e3                	jne    c0002436 <find_volume+0x127>
c0002453:	31 ff                	xor    edi,edi
c0002455:	85 f6                	test   esi,esi
c0002457:	74 03                	je     c000245c <find_volume+0x14d>
c0002459:	8d 7e ff             	lea    edi,[esi-0x1]
c000245c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002460:	85 d2                	test   edx,edx
c0002462:	74 14                	je     c0002478 <find_volume+0x169>
c0002464:	31 c9                	xor    ecx,ecx
c0002466:	89 d8                	mov    eax,ebx
c0002468:	e8 e8 fd ff ff       	call   c0002255 <check_fs>
c000246d:	83 f8 01             	cmp    eax,0x1
c0002470:	76 19                	jbe    c000248b <find_volume+0x17c>
c0002472:	85 f6                	test   esi,esi
c0002474:	74 0f                	je     c0002485 <find_volume+0x176>
c0002476:	eb 13                	jmp    c000248b <find_volume+0x17c>
c0002478:	85 f6                	test   esi,esi
c000247a:	0f 85 ed fe ff ff    	jne    c000236d <find_volume+0x5e>
c0002480:	b8 03 00 00 00       	mov    eax,0x3
c0002485:	47                   	inc    edi
c0002486:	83 ff 03             	cmp    edi,0x3
c0002489:	76 d1                	jbe    c000245c <find_volume+0x14d>
c000248b:	83 c4 3c             	add    esp,0x3c
c000248e:	5b                   	pop    ebx
c000248f:	5e                   	pop    esi
c0002490:	5f                   	pop    edi
c0002491:	5d                   	pop    ebp
c0002492:	c3                   	ret    

c0002493 <mount_volume>:
c0002493:	55                   	push   ebp
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 3c             	sub    esp,0x3c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024ab:	e8 35 fb ff ff       	call   c0001fe5 <get_ldnumber>
c00024b0:	85 c0                	test   eax,eax
c00024b2:	0f 88 3a 05 00 00    	js     c00029f2 <mount_volume+0x55f>
c00024b8:	8b 2c 85 20 aa 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd55e0]
c00024bf:	89 c6                	mov    esi,eax
c00024c1:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c6:	85 ed                	test   ebp,ebp
c00024c8:	0f 84 24 05 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024d2:	83 e7 fe             	and    edi,0xfffffffe
c00024d5:	89 2a                	mov    DWORD PTR [edx],ebp
c00024d7:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024db:	74 32                	je     c000250f <mount_volume+0x7c>
c00024dd:	83 ec 0c             	sub    esp,0xc
c00024e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024e4:	50                   	push   eax
c00024e5:	e8 c8 f4 ff ff       	call   c00019b2 <disk_status>
c00024ea:	83 c4 10             	add    esp,0x10
c00024ed:	a8 01                	test   al,0x1
c00024ef:	75 1e                	jne    c000250f <mount_volume+0x7c>
c00024f1:	31 db                	xor    ebx,ebx
c00024f3:	89 f9                	mov    ecx,edi
c00024f5:	84 c9                	test   cl,cl
c00024f7:	0f 84 f5 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 ed 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 e3 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	89 f0                	mov    eax,esi
c0002514:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002518:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000251b:	0f b6 f0             	movzx  esi,al
c000251e:	bb 03 00 00 00       	mov    ebx,0x3
c0002523:	56                   	push   esi
c0002524:	e8 8c f4 ff ff       	call   c00019b5 <disk_initialize>
c0002529:	83 c4 10             	add    esp,0x10
c000252c:	a8 01                	test   al,0x1
c000252e:	0f 85 be 04 00 00    	jne    c00029f2 <mount_volume+0x55f>
c0002534:	89 f9                	mov    ecx,edi
c0002536:	84 c9                	test   cl,cl
c0002538:	74 04                	je     c000253e <mount_volume+0xab>
c000253a:	a8 04                	test   al,0x4
c000253c:	75 c7                	jne    c0002505 <mount_volume+0x72>
c000253e:	31 d2                	xor    edx,edx
c0002540:	89 e8                	mov    eax,ebp
c0002542:	e8 c8 fd ff ff       	call   c000230f <find_volume>
c0002547:	83 f8 04             	cmp    eax,0x4
c000254a:	75 0a                	jne    c0002556 <mount_volume+0xc3>
c000254c:	bb 01 00 00 00       	mov    ebx,0x1
c0002551:	e9 9c 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002556:	83 f8 01             	cmp    eax,0x1
c0002559:	76 0a                	jbe    c0002565 <mount_volume+0xd2>
c000255b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002560:	e9 8d 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002565:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002568:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000256b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000256f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002573:	75 17                	jne    c000258c <mount_volume+0xf9>
c0002575:	b8 0b 00 00 00       	mov    eax,0xb
c000257a:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000257f:	75 da                	jne    c000255b <mount_volume+0xc8>
c0002581:	40                   	inc    eax
c0002582:	83 f8 40             	cmp    eax,0x40
c0002585:	75 f3                	jne    c000257a <mount_volume+0xe7>
c0002587:	e9 5a 02 00 00       	jmp    c00027e6 <mount_volume+0x353>
c000258c:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000258f:	e8 6f f4 ff ff       	call   c0001a03 <ld_word>
c0002594:	66 3d 00 02          	cmp    ax,0x200
c0002598:	75 c1                	jne    c000255b <mount_volume+0xc8>
c000259a:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000259d:	e8 61 f4 ff ff       	call   c0001a03 <ld_word>
c00025a2:	0f b7 c0             	movzx  eax,ax
c00025a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0c                	jne    c00025b9 <mount_volume+0x126>
c00025ad:	8d 45 78             	lea    eax,[ebp+0x78]
c00025b0:	e8 5b f4 ff ff       	call   c0001a10 <ld_dword>
c00025b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025bd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025c0:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025c3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025c7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025ca:	48                   	dec    eax
c00025cb:	3c 01                	cmp    al,0x1
c00025cd:	77 8c                	ja     c000255b <mount_volume+0xc8>
c00025cf:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025d3:	89 c3                	mov    ebx,eax
c00025d5:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025d9:	66 85 c0             	test   ax,ax
c00025dc:	0f 84 79 ff ff ff    	je     c000255b <mount_volume+0xc8>
c00025e2:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e5:	85 d8                	test   eax,ebx
c00025e7:	0f 85 6e ff ff ff    	jne    c000255b <mount_volume+0xc8>
c00025ed:	8d 45 65             	lea    eax,[ebp+0x65]
c00025f0:	e8 0e f4 ff ff       	call   c0001a03 <ld_word>
c00025f5:	89 c7                	mov    edi,eax
c00025f7:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00025fb:	a8 0f                	test   al,0xf
c00025fd:	0f 85 58 ff ff ff    	jne    c000255b <mount_volume+0xc8>
c0002603:	8d 45 67             	lea    eax,[ebp+0x67]
c0002606:	e8 f8 f3 ff ff       	call   c0001a03 <ld_word>
c000260b:	0f b7 f0             	movzx  esi,ax
c000260e:	85 f6                	test   esi,esi
c0002610:	75 0a                	jne    c000261c <mount_volume+0x189>
c0002612:	8d 45 74             	lea    eax,[ebp+0x74]
c0002615:	e8 f6 f3 ff ff       	call   c0001a10 <ld_dword>
c000261a:	89 c6                	mov    esi,eax
c000261c:	8d 45 62             	lea    eax,[ebp+0x62]
c000261f:	e8 df f3 ff ff       	call   c0001a03 <ld_word>
c0002624:	66 85 c0             	test   ax,ax
c0002627:	0f 84 2e ff ff ff    	je     c000255b <mount_volume+0xc8>
c000262d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002632:	0f b7 c8             	movzx  ecx,ax
c0002635:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000263a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000263e:	89 fa                	mov    edx,edi
c0002640:	66 c1 ea 04          	shr    dx,0x4
c0002644:	0f b7 d2             	movzx  edx,dx
c0002647:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000264b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000264e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002652:	39 c6                	cmp    esi,eax
c0002654:	0f 82 01 ff ff ff    	jb     c000255b <mount_volume+0xc8>
c000265a:	29 c6                	sub    esi,eax
c000265c:	31 d2                	xor    edx,edx
c000265e:	89 f0                	mov    eax,esi
c0002660:	f7 f3                	div    ebx
c0002662:	39 de                	cmp    esi,ebx
c0002664:	0f 82 f1 fe ff ff    	jb     c000255b <mount_volume+0xc8>
c000266a:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000266f:	0f 87 e6 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c0002675:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000267a:	0f 86 63 03 00 00    	jbe    c00029e3 <mount_volume+0x550>
c0002680:	bb 03 00 00 00       	mov    ebx,0x3
c0002685:	8d 70 02             	lea    esi,[eax+0x2]
c0002688:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000268c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002690:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002693:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 c8                	mov    eax,ecx
c000269a:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000269d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026a1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ad:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026b0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026b7:	31 d2                	xor    edx,edx
c00026b9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026bd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026c1:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026c4:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026c7:	83 fb 03             	cmp    ebx,0x3
c00026ca:	75 2b                	jne    c00026f7 <mount_volume+0x264>
c00026cc:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026cf:	e8 2f f3 ff ff       	call   c0001a03 <ld_word>
c00026d4:	66 09 c7             	or     di,ax
c00026d7:	0f 85 7e fe ff ff    	jne    c000255b <mount_volume+0xc8>
c00026dd:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026e3:	c1 e6 02             	shl    esi,0x2
c00026e6:	e8 25 f3 ff ff       	call   c0001a10 <ld_dword>
c00026eb:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00026f2:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026f5:	eb 30                	jmp    c0002727 <mount_volume+0x294>
c00026f7:	66 85 ff             	test   di,di
c00026fa:	0f 84 5b fe ff ff    	je     c000255b <mount_volume+0xc8>
c0002700:	31 d2                	xor    edx,edx
c0002702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002706:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000270a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000270e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002711:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002714:	83 fb 02             	cmp    ebx,0x2
c0002717:	75 04                	jne    c000271d <mount_volume+0x28a>
c0002719:	01 f6                	add    esi,esi
c000271b:	eb 0a                	jmp    c0002727 <mount_volume+0x294>
c000271d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002720:	83 e6 01             	and    esi,0x1
c0002723:	d1 e8                	shr    eax,1
c0002725:	01 c6                	add    esi,eax
c0002727:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000272d:	c1 ee 09             	shr    esi,0x9
c0002730:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002734:	0f 87 21 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c000273a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002741:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002748:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000274c:	83 fb 03             	cmp    ebx,0x3
c000274f:	75 7a                	jne    c00027cb <mount_volume+0x338>
c0002751:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002757:	e8 a7 f2 ff ff       	call   c0001a03 <ld_word>
c000275c:	66 48                	dec    ax
c000275e:	75 6b                	jne    c00027cb <mount_volume+0x338>
c0002760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002764:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002768:	83 c2 01             	add    edx,0x1
c000276b:	89 e8                	mov    eax,ebp
c000276d:	83 d1 00             	adc    ecx,0x0
c0002770:	e8 6c fa ff ff       	call   c00021e1 <move_window>
c0002775:	85 c0                	test   eax,eax
c0002777:	75 52                	jne    c00027cb <mount_volume+0x338>
c0002779:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000277d:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002783:	e8 7b f2 ff ff       	call   c0001a03 <ld_word>
c0002788:	66 3d 55 aa          	cmp    ax,0xaa55
c000278c:	75 3d                	jne    c00027cb <mount_volume+0x338>
c000278e:	8d 45 54             	lea    eax,[ebp+0x54]
c0002791:	e8 7a f2 ff ff       	call   c0001a10 <ld_dword>
c0002796:	3d 52 52 61 41       	cmp    eax,0x41615252
c000279b:	75 2e                	jne    c00027cb <mount_volume+0x338>
c000279d:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027a3:	e8 68 f2 ff ff       	call   c0001a10 <ld_dword>
c00027a8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ad:	75 1c                	jne    c00027cb <mount_volume+0x338>
c00027af:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027b5:	e8 56 f2 ff ff       	call   c0001a10 <ld_dword>
c00027ba:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027bd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027c3:	e8 48 f2 ff ff       	call   c0001a10 <ld_dword>
c00027c8:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027cb:	66 a1 00 aa 02 c0    	mov    ax,ds:0xc002aa00
c00027d1:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027d4:	40                   	inc    eax
c00027d5:	31 db                	xor    ebx,ebx
c00027d7:	66 a3 00 aa 02 c0    	mov    ds:0xc002aa00,ax
c00027dd:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027e1:	e9 0c 02 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c00027e6:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027ec:	e8 12 f2 ff ff       	call   c0001a03 <ld_word>
c00027f1:	66 3d 00 01          	cmp    ax,0x100
c00027f5:	0f 85 60 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c00027fb:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002802:	0f 85 53 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c0002808:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000280e:	e8 15 f2 ff ff       	call   c0001a28 <ld_qword>
c0002813:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002817:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000281b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002821:	e8 ea f1 ff ff       	call   c0001a10 <ld_dword>
c0002826:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002829:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000282f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002832:	fe c8                	dec    al
c0002834:	0f 85 21 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c000283a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002841:	bb 01 00 00 00       	mov    ebx,0x1
c0002846:	d3 e3                	shl    ebx,cl
c0002848:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000284c:	66 85 db             	test   bx,bx
c000284f:	0f 84 06 fd ff ff    	je     c000255b <mount_volume+0xc8>
c0002855:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000285b:	e8 b0 f1 ff ff       	call   c0001a10 <ld_dword>
c0002860:	89 c6                	mov    esi,eax
c0002862:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002867:	0f 87 ee fc ff ff    	ja     c000255b <mount_volume+0xc8>
c000286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002871:	8d 40 02             	lea    eax,[eax+0x2]
c0002874:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002877:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c000287a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000287e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002881:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002887:	e8 84 f1 ff ff       	call   c0001a10 <ld_dword>
c000288c:	31 d2                	xor    edx,edx
c000288e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002892:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002896:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000289a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000289e:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028a1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028a4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028aa:	e8 61 f1 ff ff       	call   c0001a10 <ld_dword>
c00028af:	31 d2                	xor    edx,edx
c00028b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028b5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028b9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028bd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028c0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028c3:	0f b7 c3             	movzx  eax,bx
c00028c6:	31 d2                	xor    edx,edx
c00028c8:	0f af f0             	imul   esi,eax
c00028cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028cf:	89 f0                	mov    eax,esi
c00028d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028d5:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028d9:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028dd:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028e1:	39 c1                	cmp    ecx,eax
c00028e3:	89 df                	mov    edi,ebx
c00028e5:	19 d7                	sbb    edi,edx
c00028e7:	0f 82 6e fc ff ff    	jb     c000255b <mount_volume+0xc8>
c00028ed:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c00028f3:	31 db                	xor    ebx,ebx
c00028f5:	e8 16 f1 ff ff       	call   c0001a10 <ld_dword>
c00028fa:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002901:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002904:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000290c:	85 db                	test   ebx,ebx
c000290e:	75 39                	jne    c0002949 <mount_volume+0x4b6>
c0002910:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002914:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002918:	0f 86 3d fc ff ff    	jbe    c000255b <mount_volume+0xc8>
c000291e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002921:	31 ff                	xor    edi,edi
c0002923:	89 e8                	mov    eax,ebp
c0002925:	e8 72 f3 ff ff       	call   c0001c9c <clst2sect>
c000292a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000292e:	01 c6                	add    esi,eax
c0002930:	89 e8                	mov    eax,ebp
c0002932:	11 d7                	adc    edi,edx
c0002934:	89 f2                	mov    edx,esi
c0002936:	89 f9                	mov    ecx,edi
c0002938:	e8 a4 f8 ff ff       	call   c00021e1 <move_window>
c000293d:	85 c0                	test   eax,eax
c000293f:	0f 85 07 fc ff ff    	jne    c000254c <mount_volume+0xb9>
c0002945:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002949:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000294e:	74 0b                	je     c000295b <mount_volume+0x4c8>
c0002950:	83 c3 20             	add    ebx,0x20
c0002953:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002959:	eb b1                	jmp    c000290c <mount_volume+0x479>
c000295b:	8d 75 54             	lea    esi,[ebp+0x54]
c000295e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002962:	e8 a9 f0 ff ff       	call   c0001a10 <ld_dword>
c0002967:	89 c3                	mov    ebx,eax
c0002969:	83 f8 01             	cmp    eax,0x1
c000296c:	0f 86 e9 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c0002972:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002975:	0f 86 e0 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c000297b:	8d 53 fe             	lea    edx,[ebx-0x2]
c000297e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002982:	0f af c2             	imul   eax,edx
c0002985:	31 d2                	xor    edx,edx
c0002987:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c000298a:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000298d:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002990:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002993:	31 c9                	xor    ecx,ecx
c0002995:	89 da                	mov    edx,ebx
c0002997:	89 e8                	mov    eax,ebp
c0002999:	c1 ea 07             	shr    edx,0x7
c000299c:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000299f:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029a2:	e8 3a f8 ff ff       	call   c00021e1 <move_window>
c00029a7:	85 c0                	test   eax,eax
c00029a9:	0f 85 9d fb ff ff    	jne    c000254c <mount_volume+0xb9>
c00029af:	89 d8                	mov    eax,ebx
c00029b1:	83 e0 7f             	and    eax,0x7f
c00029b4:	8d 04 86             	lea    eax,[esi+eax*4]
c00029b7:	e8 54 f0 ff ff       	call   c0001a10 <ld_dword>
c00029bc:	83 f8 ff             	cmp    eax,0xffffffff
c00029bf:	74 0a                	je     c00029cb <mount_volume+0x538>
c00029c1:	43                   	inc    ebx
c00029c2:	39 d8                	cmp    eax,ebx
c00029c4:	74 cd                	je     c0002993 <mount_volume+0x500>
c00029c6:	e9 90 fb ff ff       	jmp    c000255b <mount_volume+0xc8>
c00029cb:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029d2:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029d9:	bb 04 00 00 00       	mov    ebx,0x4
c00029de:	e9 e8 fd ff ff       	jmp    c00027cb <mount_volume+0x338>
c00029e3:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029e8:	19 db                	sbb    ebx,ebx
c00029ea:	83 c3 02             	add    ebx,0x2
c00029ed:	e9 93 fc ff ff       	jmp    c0002685 <mount_volume+0x1f2>
c00029f2:	83 c4 3c             	add    esp,0x3c
c00029f5:	89 d8                	mov    eax,ebx
c00029f7:	5b                   	pop    ebx
c00029f8:	5e                   	pop    esi
c00029f9:	5f                   	pop    edi
c00029fa:	5d                   	pop    ebp
c00029fb:	c3                   	ret    

c00029fc <find_bitmap>:
c00029fc:	55                   	push   ebp
c00029fd:	57                   	push   edi
c00029fe:	89 c7                	mov    edi,eax
c0002a00:	56                   	push   esi
c0002a01:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a04:	53                   	push   ebx
c0002a05:	83 ec 1c             	sub    esp,0x1c
c0002a08:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a0f:	83 e8 02             	sub    eax,0x2
c0002a12:	39 f0                	cmp    eax,esi
c0002a14:	77 02                	ja     c0002a18 <find_bitmap+0x1c>
c0002a16:	31 f6                	xor    esi,esi
c0002a18:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a1c:	89 f3                	mov    ebx,esi
c0002a1e:	31 ed                	xor    ebp,ebp
c0002a20:	31 c9                	xor    ecx,ecx
c0002a22:	89 da                	mov    edx,ebx
c0002a24:	89 f8                	mov    eax,edi
c0002a26:	c1 ea 0c             	shr    edx,0xc
c0002a29:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a2c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a2f:	e8 ad f7 ff ff       	call   c00021e1 <move_window>
c0002a34:	85 c0                	test   eax,eax
c0002a36:	75 68                	jne    c0002aa0 <find_bitmap+0xa4>
c0002a38:	89 da                	mov    edx,ebx
c0002a3a:	89 d9                	mov    ecx,ebx
c0002a3c:	c1 ea 03             	shr    edx,0x3
c0002a3f:	83 e1 07             	and    ecx,0x7
c0002a42:	b8 01 00 00 00       	mov    eax,0x1
c0002a47:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a4d:	d3 e0                	shl    eax,cl
c0002a4f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a52:	83 e9 02             	sub    ecx,0x2
c0002a55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a59:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a5d:	43                   	inc    ebx
c0002a5e:	21 c1                	and    ecx,eax
c0002a60:	d1 e0                	shl    eax,1
c0002a62:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a66:	77 09                	ja     c0002a71 <find_bitmap+0x75>
c0002a68:	31 db                	xor    ebx,ebx
c0002a6a:	ba 00 02 00 00       	mov    edx,0x200
c0002a6f:	31 c0                	xor    eax,eax
c0002a71:	84 c9                	test   cl,cl
c0002a73:	75 10                	jne    c0002a85 <find_bitmap+0x89>
c0002a75:	45                   	inc    ebp
c0002a76:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a7a:	75 0f                	jne    c0002a8b <find_bitmap+0x8f>
c0002a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a80:	83 c0 02             	add    eax,0x2
c0002a83:	eb 22                	jmp    c0002aa7 <find_bitmap+0xab>
c0002a85:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a89:	31 ed                	xor    ebp,ebp
c0002a8b:	39 de                	cmp    esi,ebx
c0002a8d:	74 16                	je     c0002aa5 <find_bitmap+0xa9>
c0002a8f:	84 c0                	test   al,al
c0002a91:	75 c6                	jne    c0002a59 <find_bitmap+0x5d>
c0002a93:	42                   	inc    edx
c0002a94:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a9a:	77 84                	ja     c0002a20 <find_bitmap+0x24>
c0002a9c:	b0 01                	mov    al,0x1
c0002a9e:	eb b9                	jmp    c0002a59 <find_bitmap+0x5d>
c0002aa0:	83 c8 ff             	or     eax,0xffffffff
c0002aa3:	eb 02                	jmp    c0002aa7 <find_bitmap+0xab>
c0002aa5:	31 c0                	xor    eax,eax
c0002aa7:	83 c4 1c             	add    esp,0x1c
c0002aaa:	5b                   	pop    ebx
c0002aab:	5e                   	pop    esi
c0002aac:	5f                   	pop    edi
c0002aad:	5d                   	pop    ebp
c0002aae:	c3                   	ret    

c0002aaf <change_bitmap>:
c0002aaf:	55                   	push   ebp
c0002ab0:	89 cd                	mov    ebp,ecx
c0002ab2:	57                   	push   edi
c0002ab3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ab6:	56                   	push   esi
c0002ab7:	89 c7                	mov    edi,eax
c0002ab9:	53                   	push   ebx
c0002aba:	89 c8                	mov    eax,ecx
c0002abc:	83 ec 1c             	sub    esp,0x1c
c0002abf:	31 d2                	xor    edx,edx
c0002ac1:	89 ce                	mov    esi,ecx
c0002ac3:	c1 e8 0c             	shr    eax,0xc
c0002ac6:	bb 01 00 00 00       	mov    ebx,0x1
c0002acb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002ace:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002ad1:	c1 ee 03             	shr    esi,0x3
c0002ad4:	83 e1 07             	and    ecx,0x7
c0002ad7:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002add:	d3 e3                	shl    ebx,cl
c0002adf:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002ae3:	89 c1                	mov    ecx,eax
c0002ae5:	89 d3                	mov    ebx,edx
c0002ae7:	83 c1 01             	add    ecx,0x1
c0002aea:	83 d3 00             	adc    ebx,0x0
c0002aed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002af1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002af5:	89 d1                	mov    ecx,edx
c0002af7:	89 c2                	mov    edx,eax
c0002af9:	89 f8                	mov    eax,edi
c0002afb:	e8 e1 f6 ff ff       	call   c00021e1 <move_window>
c0002b00:	89 c1                	mov    ecx,eax
c0002b02:	85 c0                	test   eax,eax
c0002b04:	75 48                	jne    c0002b4e <change_bitmap+0x9f>
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b0c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b10:	0f 95 c2             	setne  dl
c0002b13:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b17:	74 3c                	je     c0002b55 <change_bitmap+0xa6>
c0002b19:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b1d:	4d                   	dec    ebp
c0002b1e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b22:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b26:	74 32                	je     c0002b5a <change_bitmap+0xab>
c0002b28:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b2c:	75 d8                	jne    c0002b06 <change_bitmap+0x57>
c0002b2e:	8d 46 01             	lea    eax,[esi+0x1]
c0002b31:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b36:	89 c3                	mov    ebx,eax
c0002b38:	31 f6                	xor    esi,esi
c0002b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b42:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b48:	74 99                	je     c0002ae3 <change_bitmap+0x34>
c0002b4a:	89 de                	mov    esi,ebx
c0002b4c:	eb b8                	jmp    c0002b06 <change_bitmap+0x57>
c0002b4e:	b9 01 00 00 00       	mov    ecx,0x1
c0002b53:	eb 05                	jmp    c0002b5a <change_bitmap+0xab>
c0002b55:	b9 02 00 00 00       	mov    ecx,0x2
c0002b5a:	83 c4 1c             	add    esp,0x1c
c0002b5d:	89 c8                	mov    eax,ecx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <put_fat>:
c0002b64:	83 fa 01             	cmp    edx,0x1
c0002b67:	0f 86 7b 01 00 00    	jbe    c0002ce8 <put_fat+0x184>
c0002b6d:	55                   	push   ebp
c0002b6e:	57                   	push   edi
c0002b6f:	89 cf                	mov    edi,ecx
c0002b71:	56                   	push   esi
c0002b72:	b9 02 00 00 00       	mov    ecx,0x2
c0002b77:	53                   	push   ebx
c0002b78:	89 c6                	mov    esi,eax
c0002b7a:	83 ec 1c             	sub    esp,0x1c
c0002b7d:	89 d3                	mov    ebx,edx
c0002b7f:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b82:	0f 86 68 01 00 00    	jbe    c0002cf0 <put_fat+0x18c>
c0002b88:	8a 00                	mov    al,BYTE PTR [eax]
c0002b8a:	3c 02                	cmp    al,0x2
c0002b8c:	0f 84 c7 00 00 00    	je     c0002c59 <put_fat+0xf5>
c0002b92:	77 09                	ja     c0002b9d <put_fat+0x39>
c0002b94:	fe c8                	dec    al
c0002b96:	74 17                	je     c0002baf <put_fat+0x4b>
c0002b98:	e9 53 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	3c 04                	cmp    al,0x4
c0002ba4:	0f 86 e1 00 00 00    	jbe    c0002c8b <put_fat+0x127>
c0002baa:	e9 41 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002baf:	89 d5                	mov    ebp,edx
c0002bb1:	31 c9                	xor    ecx,ecx
c0002bb3:	d1 ed                	shr    ebp,1
c0002bb5:	89 f0                	mov    eax,esi
c0002bb7:	01 d5                	add    ebp,edx
c0002bb9:	89 ea                	mov    edx,ebp
c0002bbb:	c1 ea 09             	shr    edx,0x9
c0002bbe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bc1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bc4:	e8 18 f6 ff ff       	call   c00021e1 <move_window>
c0002bc9:	89 c1                	mov    ecx,eax
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 1d 01 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002bd3:	8d 46 54             	lea    eax,[esi+0x54]
c0002bd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bda:	8d 45 01             	lea    eax,[ebp+0x1]
c0002bdd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002be3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002be7:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002beb:	89 f8                	mov    eax,edi
c0002bed:	83 e3 01             	and    ebx,0x1
c0002bf0:	74 0d                	je     c0002bff <put_fat+0x9b>
c0002bf2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002bf5:	89 fa                	mov    edx,edi
c0002bf7:	83 e0 0f             	and    eax,0xf
c0002bfa:	c1 e2 04             	shl    edx,0x4
c0002bfd:	09 d0                	or     eax,edx
c0002bff:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c06:	31 c9                	xor    ecx,ecx
c0002c08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c0c:	c1 ea 09             	shr    edx,0x9
c0002c0f:	89 f0                	mov    eax,esi
c0002c11:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c14:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c17:	e8 c5 f5 ff ff       	call   c00021e1 <move_window>
c0002c1c:	89 c1                	mov    ecx,eax
c0002c1e:	85 c0                	test   eax,eax
c0002c20:	0f 85 ca 00 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002c26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c2a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c30:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c34:	85 db                	test   ebx,ebx
c0002c36:	74 07                	je     c0002c3f <put_fat+0xdb>
c0002c38:	c1 ef 04             	shr    edi,0x4
c0002c3b:	89 fa                	mov    edx,edi
c0002c3d:	eb 0e                	jmp    c0002c4d <put_fat+0xe9>
c0002c3f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c42:	c1 ef 08             	shr    edi,0x8
c0002c45:	83 e2 f0             	and    edx,0xfffffff0
c0002c48:	83 e7 0f             	and    edi,0xf
c0002c4b:	09 fa                	or     edx,edi
c0002c4d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c50:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c54:	e9 97 00 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002c59:	31 c9                	xor    ecx,ecx
c0002c5b:	c1 ea 08             	shr    edx,0x8
c0002c5e:	89 f0                	mov    eax,esi
c0002c60:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c63:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c66:	e8 76 f5 ff ff       	call   c00021e1 <move_window>
c0002c6b:	89 c1                	mov    ecx,eax
c0002c6d:	85 c0                	test   eax,eax
c0002c6f:	75 7f                	jne    c0002cf0 <put_fat+0x18c>
c0002c71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c75:	01 db                	add    ebx,ebx
c0002c77:	0f b7 d7             	movzx  edx,di
c0002c7a:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c80:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c84:	e8 ec ed ff ff       	call   c0001a75 <st_word>
c0002c89:	eb 53                	jmp    c0002cde <put_fat+0x17a>
c0002c8b:	31 c9                	xor    ecx,ecx
c0002c8d:	c1 ea 07             	shr    edx,0x7
c0002c90:	89 f0                	mov    eax,esi
c0002c92:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c95:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c98:	e8 44 f5 ff ff       	call   c00021e1 <move_window>
c0002c9d:	89 c1                	mov    ecx,eax
c0002c9f:	85 c0                	test   eax,eax
c0002ca1:	75 4d                	jne    c0002cf0 <put_fat+0x18c>
c0002ca3:	c1 e3 02             	shl    ebx,0x2
c0002ca6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cac:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002caf:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cb3:	74 1c                	je     c0002cd1 <put_fat+0x16d>
c0002cb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cbf:	89 d8                	mov    eax,ebx
c0002cc1:	e8 4a ed ff ff       	call   c0001a10 <ld_dword>
c0002cc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cca:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ccf:	09 c7                	or     edi,eax
c0002cd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd5:	89 fa                	mov    edx,edi
c0002cd7:	89 d8                	mov    eax,ebx
c0002cd9:	e8 9b ed ff ff       	call   c0001a79 <st_dword>
c0002cde:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ce2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ce6:	eb 08                	jmp    c0002cf0 <put_fat+0x18c>
c0002ce8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ced:	89 c8                	mov    eax,ecx
c0002cef:	c3                   	ret    
c0002cf0:	83 c4 1c             	add    esp,0x1c
c0002cf3:	89 c8                	mov    eax,ecx
c0002cf5:	5b                   	pop    ebx
c0002cf6:	5e                   	pop    esi
c0002cf7:	5f                   	pop    edi
c0002cf8:	5d                   	pop    ebp
c0002cf9:	c3                   	ret    

c0002cfa <fill_last_frag>:
c0002cfa:	57                   	push   edi
c0002cfb:	89 cf                	mov    edi,ecx
c0002cfd:	56                   	push   esi
c0002cfe:	89 d6                	mov    esi,edx
c0002d00:	53                   	push   ebx
c0002d01:	89 c3                	mov    ebx,eax
c0002d03:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d06:	85 c0                	test   eax,eax
c0002d08:	74 21                	je     c0002d2b <fill_last_frag+0x31>
c0002d0a:	89 f9                	mov    ecx,edi
c0002d0c:	83 f8 01             	cmp    eax,0x1
c0002d0f:	76 05                	jbe    c0002d16 <fill_last_frag+0x1c>
c0002d11:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d14:	29 c1                	sub    ecx,eax
c0002d16:	8d 56 01             	lea    edx,[esi+0x1]
c0002d19:	29 c2                	sub    edx,eax
c0002d1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d1d:	e8 42 fe ff ff       	call   c0002b64 <put_fat>
c0002d22:	85 c0                	test   eax,eax
c0002d24:	75 05                	jne    c0002d2b <fill_last_frag+0x31>
c0002d26:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d29:	eb d8                	jmp    c0002d03 <fill_last_frag+0x9>
c0002d2b:	5b                   	pop    ebx
c0002d2c:	5e                   	pop    esi
c0002d2d:	5f                   	pop    edi
c0002d2e:	c3                   	ret    

c0002d2f <fill_first_frag>:
c0002d2f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d33:	75 2d                	jne    c0002d62 <fill_first_frag+0x33>
c0002d35:	57                   	push   edi
c0002d36:	56                   	push   esi
c0002d37:	53                   	push   ebx
c0002d38:	89 c3                	mov    ebx,eax
c0002d3a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d3d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d40:	01 d7                	add    edi,edx
c0002d42:	39 fa                	cmp    edx,edi
c0002d44:	74 14                	je     c0002d5a <fill_first_frag+0x2b>
c0002d46:	8d 72 01             	lea    esi,[edx+0x1]
c0002d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d4b:	89 f1                	mov    ecx,esi
c0002d4d:	e8 12 fe ff ff       	call   c0002b64 <put_fat>
c0002d52:	89 f2                	mov    edx,esi
c0002d54:	85 c0                	test   eax,eax
c0002d56:	74 ea                	je     c0002d42 <fill_first_frag+0x13>
c0002d58:	eb 0b                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d5a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d5e:	31 c0                	xor    eax,eax
c0002d60:	eb 03                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d62:	31 c0                	xor    eax,eax
c0002d64:	c3                   	ret    
c0002d65:	5b                   	pop    ebx
c0002d66:	5e                   	pop    esi
c0002d67:	5f                   	pop    edi
c0002d68:	c3                   	ret    

c0002d69 <get_fat>:
c0002d69:	83 fa 01             	cmp    edx,0x1
c0002d6c:	0f 86 db 01 00 00    	jbe    c0002f4d <get_fat+0x1e4>
c0002d72:	55                   	push   ebp
c0002d73:	b9 01 00 00 00       	mov    ecx,0x1
c0002d78:	57                   	push   edi
c0002d79:	56                   	push   esi
c0002d7a:	53                   	push   ebx
c0002d7b:	83 ec 1c             	sub    esp,0x1c
c0002d7e:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d80:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d83:	0f 86 cc 01 00 00    	jbe    c0002f55 <get_fat+0x1ec>
c0002d89:	89 c3                	mov    ebx,eax
c0002d8b:	89 d6                	mov    esi,edx
c0002d8d:	8a 07                	mov    al,BYTE PTR [edi]
c0002d8f:	3c 02                	cmp    al,0x2
c0002d91:	0f 84 99 00 00 00    	je     c0002e30 <get_fat+0xc7>
c0002d97:	77 09                	ja     c0002da2 <get_fat+0x39>
c0002d99:	fe c8                	dec    al
c0002d9b:	74 1a                	je     c0002db7 <get_fat+0x4e>
c0002d9d:	e9 b3 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002da2:	3c 03                	cmp    al,0x3
c0002da4:	0f 84 b5 00 00 00    	je     c0002e5f <get_fat+0xf6>
c0002daa:	3c 04                	cmp    al,0x4
c0002dac:	0f 84 e3 00 00 00    	je     c0002e95 <get_fat+0x12c>
c0002db2:	e9 9e 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002db7:	89 d3                	mov    ebx,edx
c0002db9:	31 c9                	xor    ecx,ecx
c0002dbb:	d1 eb                	shr    ebx,1
c0002dbd:	89 f8                	mov    eax,edi
c0002dbf:	01 d3                	add    ebx,edx
c0002dc1:	89 da                	mov    edx,ebx
c0002dc3:	c1 ea 09             	shr    edx,0x9
c0002dc6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dcc:	e8 10 f4 ff ff       	call   c00021e1 <move_window>
c0002dd1:	85 c0                	test   eax,eax
c0002dd3:	74 08                	je     c0002ddd <get_fat+0x74>
c0002dd5:	83 c9 ff             	or     ecx,0xffffffff
c0002dd8:	e9 78 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002ddd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002de0:	31 c9                	xor    ecx,ecx
c0002de2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002de8:	89 ea                	mov    edx,ebp
c0002dea:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dee:	c1 ea 09             	shr    edx,0x9
c0002df1:	89 f8                	mov    eax,edi
c0002df3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df9:	e8 e3 f3 ff ff       	call   c00021e1 <move_window>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	75 d3                	jne    c0002dd5 <get_fat+0x6c>
c0002e02:	0f b6 c3             	movzx  eax,bl
c0002e05:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e0b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e10:	c1 e3 08             	shl    ebx,0x8
c0002e13:	09 c3                	or     ebx,eax
c0002e15:	89 d9                	mov    ecx,ebx
c0002e17:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e1d:	83 e6 01             	and    esi,0x1
c0002e20:	0f 84 2f 01 00 00    	je     c0002f55 <get_fat+0x1ec>
c0002e26:	89 d9                	mov    ecx,ebx
c0002e28:	c1 e9 04             	shr    ecx,0x4
c0002e2b:	e9 25 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e30:	31 c9                	xor    ecx,ecx
c0002e32:	c1 ea 08             	shr    edx,0x8
c0002e35:	89 f8                	mov    eax,edi
c0002e37:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3d:	e8 9f f3 ff ff       	call   c00021e1 <move_window>
c0002e42:	85 c0                	test   eax,eax
c0002e44:	75 8f                	jne    c0002dd5 <get_fat+0x6c>
c0002e46:	01 f6                	add    esi,esi
c0002e48:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e4e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e52:	e8 ac eb ff ff       	call   c0001a03 <ld_word>
c0002e57:	0f b7 c8             	movzx  ecx,ax
c0002e5a:	e9 f6 00 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e5f:	31 c9                	xor    ecx,ecx
c0002e61:	c1 ea 07             	shr    edx,0x7
c0002e64:	89 f8                	mov    eax,edi
c0002e66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6c:	e8 70 f3 ff ff       	call   c00021e1 <move_window>
c0002e71:	85 c0                	test   eax,eax
c0002e73:	0f 85 5c ff ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002e79:	c1 e6 02             	shl    esi,0x2
c0002e7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e86:	e8 85 eb ff ff       	call   c0001a10 <ld_dword>
c0002e8b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e90:	e9 b4 00 00 00       	jmp    c0002f49 <get_fat+0x1e0>
c0002e95:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e98:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e9b:	89 d1                	mov    ecx,edx
c0002e9d:	09 c1                	or     ecx,eax
c0002e9f:	74 06                	je     c0002ea7 <get_fat+0x13e>
c0002ea1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ea5:	75 0f                	jne    c0002eb6 <get_fat+0x14d>
c0002ea7:	b9 01 00 00 00       	mov    ecx,0x1
c0002eac:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eb0:	0f 85 9f 00 00 00    	jne    c0002f55 <get_fat+0x1ec>
c0002eb6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eba:	89 f5                	mov    ebp,esi
c0002ebc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ec1:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ec4:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ec7:	80 f9 02             	cmp    cl,0x2
c0002eca:	75 35                	jne    c0002f01 <get_fat+0x198>
c0002ecc:	83 c0 ff             	add    eax,0xffffffff
c0002ecf:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ed4:	83 d2 ff             	adc    edx,0xffffffff
c0002ed7:	31 db                	xor    ebx,ebx
c0002ed9:	0f ac d0 09          	shrd   eax,edx,0x9
c0002edd:	53                   	push   ebx
c0002ede:	c1 ea 09             	shr    edx,0x9
c0002ee1:	51                   	push   ecx
c0002ee2:	52                   	push   edx
c0002ee3:	50                   	push   eax
c0002ee4:	e8 73 0b 02 00       	call   c0023a5c <__udivdi3>
c0002ee9:	83 c4 10             	add    esp,0x10
c0002eec:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef1:	39 c5                	cmp    ebp,eax
c0002ef3:	77 60                	ja     c0002f55 <get_fat+0x1ec>
c0002ef5:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002efa:	74 59                	je     c0002f55 <get_fat+0x1ec>
c0002efc:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002eff:	eb 54                	jmp    c0002f55 <get_fat+0x1ec>
c0002f01:	80 f9 03             	cmp    cl,0x3
c0002f04:	75 05                	jne    c0002f0b <get_fat+0x1a2>
c0002f06:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f09:	77 f1                	ja     c0002efc <get_fat+0x193>
c0002f0b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f10:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f14:	75 3f                	jne    c0002f55 <get_fat+0x1ec>
c0002f16:	31 c9                	xor    ecx,ecx
c0002f18:	89 f2                	mov    edx,esi
c0002f1a:	89 f8                	mov    eax,edi
c0002f1c:	c1 ea 07             	shr    edx,0x7
c0002f1f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f22:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f25:	e8 b7 f2 ff ff       	call   c00021e1 <move_window>
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	0f 85 a3 fe ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002f32:	c1 e6 02             	shl    esi,0x2
c0002f35:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f3b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f3f:	e8 cc ea ff ff       	call   c0001a10 <ld_dword>
c0002f44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f49:	89 c1                	mov    ecx,eax
c0002f4b:	eb 08                	jmp    c0002f55 <get_fat+0x1ec>
c0002f4d:	b9 01 00 00 00       	mov    ecx,0x1
c0002f52:	89 c8                	mov    eax,ecx
c0002f54:	c3                   	ret    
c0002f55:	83 c4 1c             	add    esp,0x1c
c0002f58:	89 c8                	mov    eax,ecx
c0002f5a:	5b                   	pop    ebx
c0002f5b:	5e                   	pop    esi
c0002f5c:	5f                   	pop    edi
c0002f5d:	5d                   	pop    ebp
c0002f5e:	c3                   	ret    

c0002f5f <dir_sdi>:
c0002f5f:	55                   	push   ebp
c0002f60:	57                   	push   edi
c0002f61:	56                   	push   esi
c0002f62:	53                   	push   ebx
c0002f63:	89 c3                	mov    ebx,eax
c0002f65:	83 ec 1c             	sub    esp,0x1c
c0002f68:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f6a:	31 c0                	xor    eax,eax
c0002f6c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f6f:	0f 94 c0             	sete   al
c0002f72:	48                   	dec    eax
c0002f73:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f78:	05 00 00 00 10       	add    eax,0x10000000
c0002f7d:	39 d0                	cmp    eax,edx
c0002f7f:	77 0a                	ja     c0002f8b <dir_sdi+0x2c>
c0002f81:	b8 02 00 00 00       	mov    eax,0x2
c0002f86:	e9 c4 00 00 00       	jmp    c000304f <dir_sdi+0xf0>
c0002f8b:	89 d6                	mov    esi,edx
c0002f8d:	f6 c2 1f             	test   dl,0x1f
c0002f90:	75 ef                	jne    c0002f81 <dir_sdi+0x22>
c0002f92:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f95:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f98:	85 c9                	test   ecx,ecx
c0002f9a:	75 2d                	jne    c0002fc9 <dir_sdi+0x6a>
c0002f9c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f9f:	77 1b                	ja     c0002fbc <dir_sdi+0x5d>
c0002fa1:	89 f2                	mov    edx,esi
c0002fa3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fa7:	c1 ea 05             	shr    edx,0x5
c0002faa:	39 c2                	cmp    edx,eax
c0002fac:	73 d3                	jae    c0002f81 <dir_sdi+0x22>
c0002fae:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fb1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fb4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fba:	eb 4b                	jmp    c0003007 <dir_sdi+0xa8>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc3:	85 c0                	test   eax,eax
c0002fc5:	74 da                	je     c0002fa1 <dir_sdi+0x42>
c0002fc7:	89 c1                	mov    ecx,eax
c0002fc9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fcd:	c1 e5 09             	shl    ebp,0x9
c0002fd0:	89 ca                	mov    edx,ecx
c0002fd2:	39 ee                	cmp    esi,ebp
c0002fd4:	72 1c                	jb     c0002ff2 <dir_sdi+0x93>
c0002fd6:	89 d8                	mov    eax,ebx
c0002fd8:	e8 8c fd ff ff       	call   c0002d69 <get_fat>
c0002fdd:	89 c1                	mov    ecx,eax
c0002fdf:	83 f8 ff             	cmp    eax,0xffffffff
c0002fe2:	74 66                	je     c000304a <dir_sdi+0xeb>
c0002fe4:	83 f8 01             	cmp    eax,0x1
c0002fe7:	76 98                	jbe    c0002f81 <dir_sdi+0x22>
c0002fe9:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002fec:	76 93                	jbe    c0002f81 <dir_sdi+0x22>
c0002fee:	29 ee                	sub    esi,ebp
c0002ff0:	eb de                	jmp    c0002fd0 <dir_sdi+0x71>
c0002ff2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ff6:	89 f8                	mov    eax,edi
c0002ff8:	e8 9f ec ff ff       	call   c0001c9c <clst2sect>
c0002ffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003001:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003004:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000300a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000300d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003010:	89 d1                	mov    ecx,edx
c0003012:	09 c1                	or     ecx,eax
c0003014:	0f 84 67 ff ff ff    	je     c0002f81 <dir_sdi+0x22>
c000301a:	89 f1                	mov    ecx,esi
c000301c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003024:	c1 e9 09             	shr    ecx,0x9
c0003027:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000302f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003033:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003036:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000303c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003043:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003046:	31 c0                	xor    eax,eax
c0003048:	eb 05                	jmp    c000304f <dir_sdi+0xf0>
c000304a:	b8 01 00 00 00       	mov    eax,0x1
c000304f:	83 c4 1c             	add    esp,0x1c
c0003052:	5b                   	pop    ebx
c0003053:	5e                   	pop    esi
c0003054:	5f                   	pop    edi
c0003055:	5d                   	pop    ebp
c0003056:	c3                   	ret    

c0003057 <create_chain>:
c0003057:	55                   	push   ebp
c0003058:	89 c5                	mov    ebp,eax
c000305a:	57                   	push   edi
c000305b:	56                   	push   esi
c000305c:	53                   	push   ebx
c000305d:	83 ec 1c             	sub    esp,0x1c
c0003060:	85 d2                	test   edx,edx
c0003062:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003066:	8b 30                	mov    esi,DWORD PTR [eax]
c0003068:	75 0e                	jne    c0003078 <create_chain+0x21>
c000306a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000306d:	85 ff                	test   edi,edi
c000306f:	74 39                	je     c00030aa <create_chain+0x53>
c0003071:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003074:	77 39                	ja     c00030af <create_chain+0x58>
c0003076:	eb 32                	jmp    c00030aa <create_chain+0x53>
c0003078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000307c:	e8 e8 fc ff ff       	call   c0002d69 <get_fat>
c0003081:	89 c3                	mov    ebx,eax
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	77 0a                	ja     c0003092 <create_chain+0x3b>
c0003088:	bb 01 00 00 00       	mov    ebx,0x1
c000308d:	e9 ba 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c0003092:	83 f8 ff             	cmp    eax,0xffffffff
c0003095:	0f 84 62 01 00 00    	je     c00031fd <create_chain+0x1a6>
c000309b:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000309e:	0f 87 a8 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030a8:	eb 05                	jmp    c00030af <create_chain+0x58>
c00030aa:	bf 01 00 00 00       	mov    edi,0x1
c00030af:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030b3:	75 07                	jne    c00030bc <create_chain+0x65>
c00030b5:	31 db                	xor    ebx,ebx
c00030b7:	e9 90 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c00030bc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030bf:	75 74                	jne    c0003135 <create_chain+0xde>
c00030c1:	b9 01 00 00 00       	mov    ecx,0x1
c00030c6:	89 fa                	mov    edx,edi
c00030c8:	89 f0                	mov    eax,esi
c00030ca:	e8 2d f9 ff ff       	call   c00029fc <find_bitmap>
c00030cf:	89 c3                	mov    ebx,eax
c00030d1:	8d 40 ff             	lea    eax,[eax-0x1]
c00030d4:	83 f8 fd             	cmp    eax,0xfffffffd
c00030d7:	0f 87 6f 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030dd:	83 ec 0c             	sub    esp,0xc
c00030e0:	b9 01 00 00 00       	mov    ecx,0x1
c00030e5:	6a 01                	push   0x1
c00030e7:	89 da                	mov    edx,ebx
c00030e9:	89 f0                	mov    eax,esi
c00030eb:	e8 bf f9 ff ff       	call   c0002aaf <change_bitmap>
c00030f0:	83 c4 10             	add    esp,0x10
c00030f3:	83 f8 02             	cmp    eax,0x2
c00030f6:	74 90                	je     c0003088 <create_chain+0x31>
c00030f8:	83 f8 01             	cmp    eax,0x1
c00030fb:	0f 84 fc 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003106:	75 09                	jne    c0003111 <create_chain+0xba>
c0003108:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000310c:	e9 0c 01 00 00       	jmp    c000321d <create_chain+0x1c6>
c0003111:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003115:	0f 85 e7 00 00 00    	jne    c0003202 <create_chain+0x1ab>
c000311b:	8d 57 01             	lea    edx,[edi+0x1]
c000311e:	39 da                	cmp    edx,ebx
c0003120:	0f 84 f7 00 00 00    	je     c000321d <create_chain+0x1c6>
c0003126:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003129:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000312d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003130:	e9 cd 00 00 00       	jmp    c0003202 <create_chain+0x1ab>
c0003135:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003139:	75 41                	jne    c000317c <create_chain+0x125>
c000313b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000313e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003141:	77 05                	ja     c0003148 <create_chain+0xf1>
c0003143:	bb 02 00 00 00       	mov    ebx,0x2
c0003148:	89 da                	mov    edx,ebx
c000314a:	89 e8                	mov    eax,ebp
c000314c:	e8 18 fc ff ff       	call   c0002d69 <get_fat>
c0003151:	83 f8 01             	cmp    eax,0x1
c0003154:	0f 84 2e ff ff ff    	je     c0003088 <create_chain+0x31>
c000315a:	83 f8 ff             	cmp    eax,0xffffffff
c000315d:	0f 84 9a 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003163:	85 c0                	test   eax,eax
c0003165:	74 11                	je     c0003178 <create_chain+0x121>
c0003167:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000316a:	83 f8 01             	cmp    eax,0x1
c000316d:	76 0d                	jbe    c000317c <create_chain+0x125>
c000316f:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003172:	76 08                	jbe    c000317c <create_chain+0x125>
c0003174:	89 c7                	mov    edi,eax
c0003176:	eb 04                	jmp    c000317c <create_chain+0x125>
c0003178:	85 db                	test   ebx,ebx
c000317a:	75 38                	jne    c00031b4 <create_chain+0x15d>
c000317c:	89 fb                	mov    ebx,edi
c000317e:	43                   	inc    ebx
c000317f:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003182:	77 0e                	ja     c0003192 <create_chain+0x13b>
c0003184:	83 ff 01             	cmp    edi,0x1
c0003187:	0f 86 28 ff ff ff    	jbe    c00030b5 <create_chain+0x5e>
c000318d:	bb 02 00 00 00       	mov    ebx,0x2
c0003192:	89 da                	mov    edx,ebx
c0003194:	89 e8                	mov    eax,ebp
c0003196:	e8 ce fb ff ff       	call   c0002d69 <get_fat>
c000319b:	85 c0                	test   eax,eax
c000319d:	74 15                	je     c00031b4 <create_chain+0x15d>
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	0f 84 e0 fe ff ff    	je     c0003088 <create_chain+0x31>
c00031a8:	40                   	inc    eax
c00031a9:	74 52                	je     c00031fd <create_chain+0x1a6>
c00031ab:	39 fb                	cmp    ebx,edi
c00031ad:	75 cf                	jne    c000317e <create_chain+0x127>
c00031af:	e9 01 ff ff ff       	jmp    c00030b5 <create_chain+0x5e>
c00031b4:	83 c9 ff             	or     ecx,0xffffffff
c00031b7:	89 da                	mov    edx,ebx
c00031b9:	89 f0                	mov    eax,esi
c00031bb:	e8 a4 f9 ff ff       	call   c0002b64 <put_fat>
c00031c0:	85 c0                	test   eax,eax
c00031c2:	75 32                	jne    c00031f6 <create_chain+0x19f>
c00031c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031c9:	74 11                	je     c00031dc <create_chain+0x185>
c00031cb:	89 d9                	mov    ecx,ebx
c00031cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d1:	89 f0                	mov    eax,esi
c00031d3:	e8 8c f9 ff ff       	call   c0002b64 <put_fat>
c00031d8:	85 c0                	test   eax,eax
c00031da:	75 1a                	jne    c00031f6 <create_chain+0x19f>
c00031dc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031df:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031e2:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031e5:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031e8:	39 d0                	cmp    eax,edx
c00031ea:	77 04                	ja     c00031f0 <create_chain+0x199>
c00031ec:	48                   	dec    eax
c00031ed:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031f0:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00031f4:	eb 56                	jmp    c000324c <create_chain+0x1f5>
c00031f6:	48                   	dec    eax
c00031f7:	0f 85 8b fe ff ff    	jne    c0003088 <create_chain+0x31>
c00031fd:	83 cb ff             	or     ebx,0xffffffff
c0003200:	eb 4a                	jmp    c000324c <create_chain+0x1f5>
c0003202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003206:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003209:	41                   	inc    ecx
c000320a:	39 d9                	cmp    ecx,ebx
c000320c:	75 19                	jne    c0003227 <create_chain+0x1d0>
c000320e:	b9 02 00 00 00       	mov    ecx,0x2
c0003213:	85 d2                	test   edx,edx
c0003215:	74 03                	je     c000321a <create_chain+0x1c3>
c0003217:	8d 4a 01             	lea    ecx,[edx+0x1]
c000321a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000321d:	85 c0                	test   eax,eax
c000321f:	0f 85 63 fe ff ff    	jne    c0003088 <create_chain+0x31>
c0003225:	eb b5                	jmp    c00031dc <create_chain+0x185>
c0003227:	85 d2                	test   edx,edx
c0003229:	75 07                	jne    c0003232 <create_chain+0x1db>
c000322b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003232:	89 d9                	mov    ecx,ebx
c0003234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003238:	89 e8                	mov    eax,ebp
c000323a:	e8 bb fa ff ff       	call   c0002cfa <fill_last_frag>
c000323f:	85 c0                	test   eax,eax
c0003241:	75 b3                	jne    c00031f6 <create_chain+0x19f>
c0003243:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000324a:	eb 90                	jmp    c00031dc <create_chain+0x185>
c000324c:	83 c4 1c             	add    esp,0x1c
c000324f:	89 d8                	mov    eax,ebx
c0003251:	5b                   	pop    ebx
c0003252:	5e                   	pop    esi
c0003253:	5f                   	pop    edi
c0003254:	5d                   	pop    ebp
c0003255:	c3                   	ret    

c0003256 <remove_chain>:
c0003256:	55                   	push   ebp
c0003257:	57                   	push   edi
c0003258:	56                   	push   esi
c0003259:	53                   	push   ebx
c000325a:	83 ec 1c             	sub    esp,0x1c
c000325d:	83 fa 01             	cmp    edx,0x1
c0003260:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003264:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003266:	77 0a                	ja     c0003272 <remove_chain+0x1c>
c0003268:	b8 02 00 00 00       	mov    eax,0x2
c000326d:	e9 24 01 00 00       	jmp    c0003396 <remove_chain+0x140>
c0003272:	89 d6                	mov    esi,edx
c0003274:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003277:	76 ef                	jbe    c0003268 <remove_chain+0x12>
c0003279:	89 c7                	mov    edi,eax
c000327b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003280:	75 06                	jne    c0003288 <remove_chain+0x32>
c0003282:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003286:	eb 54                	jmp    c00032dc <remove_chain+0x86>
c0003288:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000328b:	75 06                	jne    c0003293 <remove_chain+0x3d>
c000328d:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003291:	74 ef                	je     c0003282 <remove_chain+0x2c>
c0003293:	83 c9 ff             	or     ecx,0xffffffff
c0003296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000329a:	89 d8                	mov    eax,ebx
c000329c:	e8 c3 f8 ff ff       	call   c0002b64 <put_fat>
c00032a1:	85 c0                	test   eax,eax
c00032a3:	74 dd                	je     c0003282 <remove_chain+0x2c>
c00032a5:	e9 ec 00 00 00       	jmp    c0003396 <remove_chain+0x140>
c00032aa:	83 f8 01             	cmp    eax,0x1
c00032ad:	74 b9                	je     c0003268 <remove_chain+0x12>
c00032af:	83 f8 ff             	cmp    eax,0xffffffff
c00032b2:	74 6d                	je     c0003321 <remove_chain+0xcb>
c00032b4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b7:	75 6f                	jne    c0003328 <remove_chain+0xd2>
c00032b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032bc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032bf:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032c2:	39 d0                	cmp    eax,edx
c00032c4:	73 08                	jae    c00032ce <remove_chain+0x78>
c00032c6:	40                   	inc    eax
c00032c7:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032cb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032ce:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032d1:	39 e9                	cmp    ecx,ebp
c00032d3:	75 64                	jne    c0003339 <remove_chain+0xe3>
c00032d5:	89 ee                	mov    esi,ebp
c00032d7:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032da:	76 0f                	jbe    c00032eb <remove_chain+0x95>
c00032dc:	89 f2                	mov    edx,esi
c00032de:	89 f8                	mov    eax,edi
c00032e0:	e8 84 fa ff ff       	call   c0002d69 <get_fat>
c00032e5:	89 c5                	mov    ebp,eax
c00032e7:	85 c0                	test   eax,eax
c00032e9:	75 bf                	jne    c00032aa <remove_chain+0x54>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	0f 85 a0 00 00 00    	jne    c0003394 <remove_chain+0x13e>
c00032f4:	eb 6c                	jmp    c0003362 <remove_chain+0x10c>
c00032f6:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00032f9:	84 c0                	test   al,al
c00032fb:	75 7d                	jne    c000337a <remove_chain+0x124>
c00032fd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003300:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003304:	0f 84 86 00 00 00    	je     c0003390 <remove_chain+0x13a>
c000330a:	89 da                	mov    edx,ebx
c000330c:	89 f8                	mov    eax,edi
c000330e:	e8 56 fa ff ff       	call   c0002d69 <get_fat>
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	0f 86 4c ff ff ff    	jbe    c0003268 <remove_chain+0x12>
c000331c:	83 f8 ff             	cmp    eax,0xffffffff
c000331f:	75 4e                	jne    c000336f <remove_chain+0x119>
c0003321:	b8 01 00 00 00       	mov    eax,0x1
c0003326:	eb 6e                	jmp    c0003396 <remove_chain+0x140>
c0003328:	31 c9                	xor    ecx,ecx
c000332a:	89 f2                	mov    edx,esi
c000332c:	89 d8                	mov    eax,ebx
c000332e:	e8 31 f8 ff ff       	call   c0002b64 <put_fat>
c0003333:	85 c0                	test   eax,eax
c0003335:	74 82                	je     c00032b9 <remove_chain+0x63>
c0003337:	eb 5d                	jmp    c0003396 <remove_chain+0x140>
c0003339:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333c:	75 1b                	jne    c0003359 <remove_chain+0x103>
c000333e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003342:	89 d8                	mov    eax,ebx
c0003344:	83 ec 0c             	sub    esp,0xc
c0003347:	6a 00                	push   0x0
c0003349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000334d:	e8 5d f7 ff ff       	call   c0002aaf <change_bitmap>
c0003352:	83 c4 10             	add    esp,0x10
c0003355:	85 c0                	test   eax,eax
c0003357:	75 3d                	jne    c0003396 <remove_chain+0x140>
c0003359:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000335d:	e9 73 ff ff ff       	jmp    c00032d5 <remove_chain+0x7f>
c0003362:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003367:	75 8d                	jne    c00032f6 <remove_chain+0xa0>
c0003369:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000336d:	eb 25                	jmp    c0003394 <remove_chain+0x13e>
c000336f:	8d 53 01             	lea    edx,[ebx+0x1]
c0003372:	89 c3                	mov    ebx,eax
c0003374:	39 c2                	cmp    edx,eax
c0003376:	74 88                	je     c0003300 <remove_chain+0xaa>
c0003378:	eb 1a                	jmp    c0003394 <remove_chain+0x13e>
c000337a:	3c 03                	cmp    al,0x3
c000337c:	75 16                	jne    c0003394 <remove_chain+0x13e>
c000337e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003381:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003385:	77 0d                	ja     c0003394 <remove_chain+0x13e>
c0003387:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000338a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000338e:	72 04                	jb     c0003394 <remove_chain+0x13e>
c0003390:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003394:	31 c0                	xor    eax,eax
c0003396:	83 c4 1c             	add    esp,0x1c
c0003399:	5b                   	pop    ebx
c000339a:	5e                   	pop    esi
c000339b:	5f                   	pop    edi
c000339c:	5d                   	pop    ebp
c000339d:	c3                   	ret    

c000339e <dir_clear>:
c000339e:	55                   	push   ebp
c000339f:	57                   	push   edi
c00033a0:	56                   	push   esi
c00033a1:	89 c6                	mov    esi,eax
c00033a3:	53                   	push   ebx
c00033a4:	83 ec 1c             	sub    esp,0x1c
c00033a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033ab:	e8 9d ed ff ff       	call   c000214d <sync_window>
c00033b0:	85 c0                	test   eax,eax
c00033b2:	0f 85 de 00 00 00    	jne    c0003496 <dir_clear+0xf8>
c00033b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033bc:	89 f0                	mov    eax,esi
c00033be:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033c1:	e8 d6 e8 ff ff       	call   c0001c9c <clst2sect>
c00033c6:	b9 00 02 00 00       	mov    ecx,0x200
c00033cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033d3:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033d6:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033d9:	89 e8                	mov    eax,ebp
c00033db:	31 d2                	xor    edx,edx
c00033dd:	e8 b5 e6 ff ff       	call   c0001a97 <mem_set>
c00033e2:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033e6:	c1 e3 09             	shl    ebx,0x9
c00033e9:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033ef:	76 1f                	jbe    c0003410 <dir_clear+0x72>
c00033f1:	bb 00 80 00 00       	mov    ebx,0x8000
c00033f6:	eb 18                	jmp    c0003410 <dir_clear+0x72>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	53                   	push   ebx
c00033fc:	e8 35 4e 00 00       	call   c0008236 <ff_memalloc>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	89 c7                	mov    edi,eax
c0003406:	85 c0                	test   eax,eax
c0003408:	0f 85 8f 00 00 00    	jne    c000349d <dir_clear+0xff>
c000340e:	d1 eb                	shr    ebx,1
c0003410:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003416:	77 e0                	ja     c00033f8 <dir_clear+0x5a>
c0003418:	31 db                	xor    ebx,ebx
c000341a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000341e:	39 d8                	cmp    eax,ebx
c0003420:	76 66                	jbe    c0003488 <dir_clear+0xea>
c0003422:	83 ec 0c             	sub    esp,0xc
c0003425:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003429:	6a 01                	push   0x1
c000342b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000342f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003433:	55                   	push   ebp
c0003434:	50                   	push   eax
c0003435:	e8 94 e5 ff ff       	call   c00019ce <disk_write>
c000343a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000343f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003444:	83 c4 20             	add    esp,0x20
c0003447:	85 c0                	test   eax,eax
c0003449:	75 3d                	jne    c0003488 <dir_clear+0xea>
c000344b:	43                   	inc    ebx
c000344c:	eb cc                	jmp    c000341a <dir_clear+0x7c>
c000344e:	83 ec 0c             	sub    esp,0xc
c0003451:	31 d2                	xor    edx,edx
c0003453:	55                   	push   ebp
c0003454:	89 d8                	mov    eax,ebx
c0003456:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000345a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000345e:	52                   	push   edx
c000345f:	50                   	push   eax
c0003460:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003464:	57                   	push   edi
c0003465:	50                   	push   eax
c0003466:	e8 63 e5 ff ff       	call   c00019ce <disk_write>
c000346b:	83 c4 20             	add    esp,0x20
c000346e:	85 c0                	test   eax,eax
c0003470:	75 0a                	jne    c000347c <dir_clear+0xde>
c0003472:	01 eb                	add    ebx,ebp
c0003474:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003478:	39 d8                	cmp    eax,ebx
c000347a:	77 d2                	ja     c000344e <dir_clear+0xb0>
c000347c:	83 ec 0c             	sub    esp,0xc
c000347f:	57                   	push   edi
c0003480:	e8 c7 4d 00 00       	call   c000824c <ff_memfree>
c0003485:	83 c4 10             	add    esp,0x10
c0003488:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348c:	39 d8                	cmp    eax,ebx
c000348e:	0f 95 c0             	setne  al
c0003491:	0f b6 c0             	movzx  eax,al
c0003494:	eb 19                	jmp    c00034af <dir_clear+0x111>
c0003496:	b8 01 00 00 00       	mov    eax,0x1
c000349b:	eb 12                	jmp    c00034af <dir_clear+0x111>
c000349d:	89 d9                	mov    ecx,ebx
c000349f:	31 d2                	xor    edx,edx
c00034a1:	c1 eb 09             	shr    ebx,0x9
c00034a4:	e8 ee e5 ff ff       	call   c0001a97 <mem_set>
c00034a9:	89 dd                	mov    ebp,ebx
c00034ab:	31 db                	xor    ebx,ebx
c00034ad:	eb c5                	jmp    c0003474 <dir_clear+0xd6>
c00034af:	83 c4 1c             	add    esp,0x1c
c00034b2:	5b                   	pop    ebx
c00034b3:	5e                   	pop    esi
c00034b4:	5f                   	pop    edi
c00034b5:	5d                   	pop    ebp
c00034b6:	c3                   	ret    

c00034b7 <dir_next>:
c00034b7:	55                   	push   ebp
c00034b8:	57                   	push   edi
c00034b9:	56                   	push   esi
c00034ba:	53                   	push   ebx
c00034bb:	89 c3                	mov    ebx,eax
c00034bd:	83 ec 1c             	sub    esp,0x1c
c00034c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034c9:	8d 78 20             	lea    edi,[eax+0x20]
c00034cc:	31 c0                	xor    eax,eax
c00034ce:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034d2:	0f 94 c0             	sete   al
c00034d5:	48                   	dec    eax
c00034d6:	25 00 00 20 f0       	and    eax,0xf0200000
c00034db:	05 00 00 00 10       	add    eax,0x10000000
c00034e0:	39 f8                	cmp    eax,edi
c00034e2:	77 0e                	ja     c00034f2 <dir_next+0x3b>
c00034e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034f2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00034f5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00034f8:	b8 04 00 00 00       	mov    eax,0x4
c00034fd:	89 ce                	mov    esi,ecx
c00034ff:	09 d6                	or     esi,edx
c0003501:	0f 84 da 00 00 00    	je     c00035e1 <dir_next+0x12a>
c0003507:	89 f8                	mov    eax,edi
c0003509:	25 ff 01 00 00       	and    eax,0x1ff
c000350e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003512:	0f 85 b9 00 00 00    	jne    c00035d1 <dir_next+0x11a>
c0003518:	83 c2 01             	add    edx,0x1
c000351b:	83 d1 00             	adc    ecx,0x0
c000351e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003521:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003524:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003527:	85 d2                	test   edx,edx
c0003529:	75 29                	jne    c0003554 <dir_next+0x9d>
c000352b:	89 fa                	mov    edx,edi
c000352d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003531:	c1 ea 05             	shr    edx,0x5
c0003534:	39 c2                	cmp    edx,eax
c0003536:	0f 82 95 00 00 00    	jb     c00035d1 <dir_next+0x11a>
c000353c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003543:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000354a:	b8 04 00 00 00       	mov    eax,0x4
c000354f:	e9 8d 00 00 00       	jmp    c00035e1 <dir_next+0x12a>
c0003554:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003558:	89 f9                	mov    ecx,edi
c000355a:	48                   	dec    eax
c000355b:	c1 e9 09             	shr    ecx,0x9
c000355e:	85 c8                	test   eax,ecx
c0003560:	75 6f                	jne    c00035d1 <dir_next+0x11a>
c0003562:	89 d8                	mov    eax,ebx
c0003564:	e8 00 f8 ff ff       	call   c0002d69 <get_fat>
c0003569:	89 c6                	mov    esi,eax
c000356b:	83 f8 01             	cmp    eax,0x1
c000356e:	77 07                	ja     c0003577 <dir_next+0xc0>
c0003570:	b8 02 00 00 00       	mov    eax,0x2
c0003575:	eb 6a                	jmp    c00035e1 <dir_next+0x12a>
c0003577:	83 f8 ff             	cmp    eax,0xffffffff
c000357a:	75 07                	jne    c0003583 <dir_next+0xcc>
c000357c:	b8 01 00 00 00       	mov    eax,0x1
c0003581:	eb 5e                	jmp    c00035e1 <dir_next+0x12a>
c0003583:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003586:	77 37                	ja     c00035bf <dir_next+0x108>
c0003588:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000358d:	74 ad                	je     c000353c <dir_next+0x85>
c000358f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 be fa ff ff       	call   c0003057 <create_chain>
c0003599:	89 c6                	mov    esi,eax
c000359b:	b8 07 00 00 00       	mov    eax,0x7
c00035a0:	85 f6                	test   esi,esi
c00035a2:	74 3d                	je     c00035e1 <dir_next+0x12a>
c00035a4:	83 fe 01             	cmp    esi,0x1
c00035a7:	74 c7                	je     c0003570 <dir_next+0xb9>
c00035a9:	83 fe ff             	cmp    esi,0xffffffff
c00035ac:	74 ce                	je     c000357c <dir_next+0xc5>
c00035ae:	89 f2                	mov    edx,esi
c00035b0:	89 e8                	mov    eax,ebp
c00035b2:	e8 e7 fd ff ff       	call   c000339e <dir_clear>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 c1                	jne    c000357c <dir_next+0xc5>
c00035bb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035bf:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035c2:	89 f2                	mov    edx,esi
c00035c4:	89 e8                	mov    eax,ebp
c00035c6:	e8 d1 e6 ff ff       	call   c0001c9c <clst2sect>
c00035cb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035d5:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035d8:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035dc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035df:	31 c0                	xor    eax,eax
c00035e1:	83 c4 1c             	add    esp,0x1c
c00035e4:	5b                   	pop    ebx
c00035e5:	5e                   	pop    esi
c00035e6:	5f                   	pop    edi
c00035e7:	5d                   	pop    ebp
c00035e8:	c3                   	ret    

c00035e9 <load_xdir>:
c00035e9:	55                   	push   ebp
c00035ea:	57                   	push   edi
c00035eb:	56                   	push   esi
c00035ec:	89 c6                	mov    esi,eax
c00035ee:	53                   	push   ebx
c00035ef:	83 ec 1c             	sub    esp,0x1c
c00035f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00035f4:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035fa:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035fd:	e8 df eb ff ff       	call   c00021e1 <move_window>
c0003602:	89 c3                	mov    ebx,eax
c0003604:	85 c0                	test   eax,eax
c0003606:	0f 85 0c 01 00 00    	jne    c0003718 <load_xdir+0x12f>
c000360c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003612:	0f 85 fb 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c0003618:	89 f8                	mov    eax,edi
c000361a:	b9 20 00 00 00       	mov    ecx,0x20
c000361f:	e8 5e e4 ff ff       	call   c0001a82 <mem_cpy>
c0003624:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003628:	40                   	inc    eax
c0003629:	c1 e0 05             	shl    eax,0x5
c000362c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003630:	83 e8 60             	sub    eax,0x60
c0003633:	3d 00 02 00 00       	cmp    eax,0x200
c0003638:	0f 87 d5 00 00 00    	ja     c0003713 <load_xdir+0x12a>
c000363e:	31 d2                	xor    edx,edx
c0003640:	89 f0                	mov    eax,esi
c0003642:	e8 70 fe ff ff       	call   c00034b7 <dir_next>
c0003647:	89 c3                	mov    ebx,eax
c0003649:	83 f8 04             	cmp    eax,0x4
c000364c:	0f 84 c1 00 00 00    	je     c0003713 <load_xdir+0x12a>
c0003652:	85 c0                	test   eax,eax
c0003654:	0f 85 be 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c000365a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000365d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003660:	8b 06                	mov    eax,DWORD PTR [esi]
c0003662:	e8 7a eb ff ff       	call   c00021e1 <move_window>
c0003667:	89 c3                	mov    ebx,eax
c0003669:	85 c0                	test   eax,eax
c000366b:	0f 85 a7 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c0003671:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003674:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003677:	0f 85 96 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c000367d:	8d 47 20             	lea    eax,[edi+0x20]
c0003680:	b9 20 00 00 00       	mov    ecx,0x20
c0003685:	e8 f8 e3 ff ff       	call   c0001a82 <mem_cpy>
c000368a:	31 d2                	xor    edx,edx
c000368c:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003690:	b9 0f 00 00 00       	mov    ecx,0xf
c0003695:	83 c0 2c             	add    eax,0x2c
c0003698:	f7 f1                	div    ecx
c000369a:	c1 e0 05             	shl    eax,0x5
c000369d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036a1:	77 70                	ja     c0003713 <load_xdir+0x12a>
c00036a3:	bd 40 00 00 00       	mov    ebp,0x40
c00036a8:	31 d2                	xor    edx,edx
c00036aa:	89 f0                	mov    eax,esi
c00036ac:	e8 06 fe ff ff       	call   c00034b7 <dir_next>
c00036b1:	89 c3                	mov    ebx,eax
c00036b3:	83 f8 04             	cmp    eax,0x4
c00036b6:	74 5b                	je     c0003713 <load_xdir+0x12a>
c00036b8:	85 c0                	test   eax,eax
c00036ba:	75 5c                	jne    c0003718 <load_xdir+0x12f>
c00036bc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036bf:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c4:	e8 18 eb ff ff       	call   c00021e1 <move_window>
c00036c9:	89 c3                	mov    ebx,eax
c00036cb:	85 c0                	test   eax,eax
c00036cd:	75 49                	jne    c0003718 <load_xdir+0x12f>
c00036cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036d2:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036d5:	75 3c                	jne    c0003713 <load_xdir+0x12a>
c00036d7:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036dd:	77 0d                	ja     c00036ec <load_xdir+0x103>
c00036df:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036e2:	b9 20 00 00 00       	mov    ecx,0x20
c00036e7:	e8 96 e3 ff ff       	call   c0001a82 <mem_cpy>
c00036ec:	83 c5 20             	add    ebp,0x20
c00036ef:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00036f3:	77 b3                	ja     c00036a8 <load_xdir+0xbf>
c00036f5:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00036fb:	77 1b                	ja     c0003718 <load_xdir+0x12f>
c00036fd:	89 f8                	mov    eax,edi
c00036ff:	e8 cd e7 ff ff       	call   c0001ed1 <xdir_sum>
c0003704:	89 c1                	mov    ecx,eax
c0003706:	8d 47 02             	lea    eax,[edi+0x2]
c0003709:	e8 f5 e2 ff ff       	call   c0001a03 <ld_word>
c000370e:	66 39 c1             	cmp    cx,ax
c0003711:	74 05                	je     c0003718 <load_xdir+0x12f>
c0003713:	bb 02 00 00 00       	mov    ebx,0x2
c0003718:	83 c4 1c             	add    esp,0x1c
c000371b:	89 d8                	mov    eax,ebx
c000371d:	5b                   	pop    ebx
c000371e:	5e                   	pop    esi
c000371f:	5f                   	pop    edi
c0003720:	5d                   	pop    ebp
c0003721:	c3                   	ret    

c0003722 <load_obj_xdir>:
c0003722:	53                   	push   ebx
c0003723:	89 c3                	mov    ebx,eax
c0003725:	83 ec 08             	sub    esp,0x8
c0003728:	8b 02                	mov    eax,DWORD PTR [edx]
c000372a:	89 03                	mov    DWORD PTR [ebx],eax
c000372c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000372f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003732:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003735:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003738:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000373b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003742:	30 c0                	xor    al,al
c0003744:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000374b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000374e:	89 d8                	mov    eax,ebx
c0003750:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003753:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003756:	e8 04 f8 ff ff       	call   c0002f5f <dir_sdi>
c000375b:	85 c0                	test   eax,eax
c000375d:	75 0b                	jne    c000376a <load_obj_xdir+0x48>
c000375f:	89 d8                	mov    eax,ebx
c0003761:	83 c4 08             	add    esp,0x8
c0003764:	5b                   	pop    ebx
c0003765:	e9 7f fe ff ff       	jmp    c00035e9 <load_xdir>
c000376a:	83 c4 08             	add    esp,0x8
c000376d:	5b                   	pop    ebx
c000376e:	c3                   	ret    

c000376f <dir_read>:
c000376f:	55                   	push   ebp
c0003770:	bd 04 00 00 00       	mov    ebp,0x4
c0003775:	57                   	push   edi
c0003776:	56                   	push   esi
c0003777:	be ff ff ff ff       	mov    esi,0xffffffff
c000377c:	53                   	push   ebx
c000377d:	89 c3                	mov    ebx,eax
c000377f:	83 ec 1c             	sub    esp,0x1c
c0003782:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003786:	8b 38                	mov    edi,DWORD PTR [eax]
c0003788:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000378d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003793:	89 c8                	mov    eax,ecx
c0003795:	09 d0                	or     eax,edx
c0003797:	0f 84 25 01 00 00    	je     c00038c2 <dir_read+0x153>
c000379d:	89 f8                	mov    eax,edi
c000379f:	e8 3d ea ff ff       	call   c00021e1 <move_window>
c00037a4:	89 c5                	mov    ebp,eax
c00037a6:	85 c0                	test   eax,eax
c00037a8:	0f 85 23 01 00 00    	jne    c00038d1 <dir_read+0x162>
c00037ae:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037b1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 11 01 00 00    	je     c00038cc <dir_read+0x15d>
c00037bb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037be:	75 48                	jne    c0003808 <dir_read+0x99>
c00037c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037c5:	74 10                	je     c00037d7 <dir_read+0x68>
c00037c7:	80 f9 83             	cmp    cl,0x83
c00037ca:	0f 85 dd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037d0:	31 ed                	xor    ebp,ebp
c00037d2:	e9 08 01 00 00       	jmp    c00038df <dir_read+0x170>
c00037d7:	80 f9 85             	cmp    cl,0x85
c00037da:	0f 85 cd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e3:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e6:	89 d8                	mov    eax,ebx
c00037e8:	e8 fc fd ff ff       	call   c00035e9 <load_xdir>
c00037ed:	89 c5                	mov    ebp,eax
c00037ef:	85 c0                	test   eax,eax
c00037f1:	0f 85 da 00 00 00    	jne    c00038d1 <dir_read+0x162>
c00037f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00037fa:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00037fd:	83 e0 3f             	and    eax,0x3f
c0003800:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003803:	e9 d7 00 00 00       	jmp    c00038df <dir_read+0x170>
c0003808:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	80 f9 2e             	cmp    cl,0x2e
c0003811:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003815:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003818:	0f 84 8a 00 00 00    	je     c00038a8 <dir_read+0x139>
c000381e:	80 f9 e5             	cmp    cl,0xe5
c0003821:	0f 84 81 00 00 00    	je     c00038a8 <dir_read+0x139>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	83 e0 1f             	and    eax,0x1f
c000382e:	83 f8 08             	cmp    eax,0x8
c0003831:	0f 94 c0             	sete   al
c0003834:	0f b6 c0             	movzx  eax,al
c0003837:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000383b:	75 6b                	jne    c00038a8 <dir_read+0x139>
c000383d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003842:	75 44                	jne    c0003888 <dir_read+0x119>
c0003844:	f6 c1 40             	test   cl,0x40
c0003847:	74 12                	je     c000385b <dir_read+0xec>
c0003849:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000384c:	83 e1 bf             	and    ecx,0xffffffbf
c000384f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003853:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003856:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003859:	eb 06                	jmp    c0003861 <dir_read+0xf2>
c000385b:	89 f0                	mov    eax,esi
c000385d:	38 c8                	cmp    al,cl
c000385f:	75 47                	jne    c00038a8 <dir_read+0x139>
c0003861:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003865:	be ff ff ff ff       	mov    esi,0xffffffff
c000386a:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000386d:	75 3e                	jne    c00038ad <dir_read+0x13e>
c000386f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003873:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003876:	e8 8a e4 ff ff       	call   c0001d05 <pick_lfn>
c000387b:	85 c0                	test   eax,eax
c000387d:	74 2e                	je     c00038ad <dir_read+0x13e>
c000387f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003883:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003886:	eb 25                	jmp    c00038ad <dir_read+0x13e>
c0003888:	89 f0                	mov    eax,esi
c000388a:	84 c0                	test   al,al
c000388c:	75 11                	jne    c000389f <dir_read+0x130>
c000388e:	89 d0                	mov    eax,edx
c0003890:	e8 2a e6 ff ff       	call   c0001ebf <sum_sfn>
c0003895:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003899:	0f 84 31 ff ff ff    	je     c00037d0 <dir_read+0x61>
c000389f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a6:	eb 37                	jmp    c00038df <dir_read+0x170>
c00038a8:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ad:	31 d2                	xor    edx,edx
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	e8 01 fc ff ff       	call   c00034b7 <dir_next>
c00038b6:	89 c5                	mov    ebp,eax
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 84 cd fe ff ff    	je     c000378d <dir_read+0x1e>
c00038c0:	eb 0f                	jmp    c00038d1 <dir_read+0x162>
c00038c2:	85 ed                	test   ebp,ebp
c00038c4:	0f 84 06 ff ff ff    	je     c00037d0 <dir_read+0x61>
c00038ca:	eb 05                	jmp    c00038d1 <dir_read+0x162>
c00038cc:	bd 04 00 00 00       	mov    ebp,0x4
c00038d1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038d8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038df:	83 c4 1c             	add    esp,0x1c
c00038e2:	89 e8                	mov    eax,ebp
c00038e4:	5b                   	pop    ebx
c00038e5:	5e                   	pop    esi
c00038e6:	5f                   	pop    edi
c00038e7:	5d                   	pop    ebp
c00038e8:	c3                   	ret    

c00038e9 <dir_alloc>:
c00038e9:	55                   	push   ebp
c00038ea:	89 d5                	mov    ebp,edx
c00038ec:	57                   	push   edi
c00038ed:	31 d2                	xor    edx,edx
c00038ef:	56                   	push   esi
c00038f0:	53                   	push   ebx
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 ec 0c             	sub    esp,0xc
c00038f6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f8:	e8 62 f6 ff ff       	call   c0002f5f <dir_sdi>
c00038fd:	85 c0                	test   eax,eax
c00038ff:	75 4e                	jne    c000394f <dir_alloc+0x66>
c0003901:	31 f6                	xor    esi,esi
c0003903:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003906:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003909:	89 f8                	mov    eax,edi
c000390b:	e8 d1 e8 ff ff       	call   c00021e1 <move_window>
c0003910:	85 c0                	test   eax,eax
c0003912:	75 3b                	jne    c000394f <dir_alloc+0x66>
c0003914:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003917:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000391a:	8a 12                	mov    dl,BYTE PTR [edx]
c000391c:	75 07                	jne    c0003925 <dir_alloc+0x3c>
c000391e:	f7 d2                	not    edx
c0003920:	c0 ea 07             	shr    dl,0x7
c0003923:	eb 0d                	jmp    c0003932 <dir_alloc+0x49>
c0003925:	84 d2                	test   dl,dl
c0003927:	0f 94 c1             	sete   cl
c000392a:	80 fa e5             	cmp    dl,0xe5
c000392d:	0f 94 c2             	sete   dl
c0003930:	09 ca                	or     edx,ecx
c0003932:	84 d2                	test   dl,dl
c0003934:	74 07                	je     c000393d <dir_alloc+0x54>
c0003936:	46                   	inc    esi
c0003937:	39 ee                	cmp    esi,ebp
c0003939:	75 04                	jne    c000393f <dir_alloc+0x56>
c000393b:	eb 1c                	jmp    c0003959 <dir_alloc+0x70>
c000393d:	31 f6                	xor    esi,esi
c000393f:	ba 01 00 00 00       	mov    edx,0x1
c0003944:	89 d8                	mov    eax,ebx
c0003946:	e8 6c fb ff ff       	call   c00034b7 <dir_next>
c000394b:	85 c0                	test   eax,eax
c000394d:	74 b4                	je     c0003903 <dir_alloc+0x1a>
c000394f:	83 f8 04             	cmp    eax,0x4
c0003952:	75 05                	jne    c0003959 <dir_alloc+0x70>
c0003954:	b8 07 00 00 00       	mov    eax,0x7
c0003959:	83 c4 0c             	add    esp,0xc
c000395c:	5b                   	pop    ebx
c000395d:	5e                   	pop    esi
c000395e:	5f                   	pop    edi
c000395f:	5d                   	pop    ebp
c0003960:	c3                   	ret    

c0003961 <store_xdir>:
c0003961:	55                   	push   ebp
c0003962:	57                   	push   edi
c0003963:	89 c7                	mov    edi,eax
c0003965:	56                   	push   esi
c0003966:	53                   	push   ebx
c0003967:	83 ec 0c             	sub    esp,0xc
c000396a:	8b 00                	mov    eax,DWORD PTR [eax]
c000396c:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000396f:	89 e8                	mov    eax,ebp
c0003971:	e8 5b e5 ff ff       	call   c0001ed1 <xdir_sum>
c0003976:	0f b7 d0             	movzx  edx,ax
c0003979:	8d 45 02             	lea    eax,[ebp+0x2]
c000397c:	e8 f4 e0 ff ff       	call   c0001a75 <st_word>
c0003981:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003985:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003988:	89 f8                	mov    eax,edi
c000398a:	e8 d0 f5 ff ff       	call   c0002f5f <dir_sdi>
c000398f:	89 c6                	mov    esi,eax
c0003991:	85 f6                	test   esi,esi
c0003993:	75 3d                	jne    c00039d2 <store_xdir+0x71>
c0003995:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003998:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c000399b:	8b 07                	mov    eax,DWORD PTR [edi]
c000399d:	e8 3f e8 ff ff       	call   c00021e1 <move_window>
c00039a2:	89 c6                	mov    esi,eax
c00039a4:	85 c0                	test   eax,eax
c00039a6:	75 2a                	jne    c00039d2 <store_xdir+0x71>
c00039a8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039ab:	b9 20 00 00 00       	mov    ecx,0x20
c00039b0:	89 ea                	mov    edx,ebp
c00039b2:	e8 cb e0 ff ff       	call   c0001a82 <mem_cpy>
c00039b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00039b9:	85 db                	test   ebx,ebx
c00039bb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039bf:	74 11                	je     c00039d2 <store_xdir+0x71>
c00039c1:	31 d2                	xor    edx,edx
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	83 c5 20             	add    ebp,0x20
c00039c8:	e8 ea fa ff ff       	call   c00034b7 <dir_next>
c00039cd:	4b                   	dec    ebx
c00039ce:	89 c6                	mov    esi,eax
c00039d0:	eb bf                	jmp    c0003991 <store_xdir+0x30>
c00039d2:	89 f0                	mov    eax,esi
c00039d4:	83 fe 02             	cmp    esi,0x2
c00039d7:	76 05                	jbe    c00039de <store_xdir+0x7d>
c00039d9:	b8 02 00 00 00       	mov    eax,0x2
c00039de:	83 c4 0c             	add    esp,0xc
c00039e1:	5b                   	pop    ebx
c00039e2:	5e                   	pop    esi
c00039e3:	5f                   	pop    edi
c00039e4:	5d                   	pop    ebp
c00039e5:	c3                   	ret    

c00039e6 <dir_remove>:
c00039e6:	57                   	push   edi
c00039e7:	56                   	push   esi
c00039e8:	53                   	push   ebx
c00039e9:	89 c3                	mov    ebx,eax
c00039eb:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039ee:	8b 30                	mov    esi,DWORD PTR [eax]
c00039f0:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c00039f3:	83 fa ff             	cmp    edx,0xffffffff
c00039f6:	74 09                	je     c0003a01 <dir_remove+0x1b>
c00039f8:	e8 62 f5 ff ff       	call   c0002f5f <dir_sdi>
c00039fd:	85 c0                	test   eax,eax
c00039ff:	75 41                	jne    c0003a42 <dir_remove+0x5c>
c0003a01:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a04:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a07:	89 f0                	mov    eax,esi
c0003a09:	e8 d3 e7 ff ff       	call   c00021e1 <move_window>
c0003a0e:	85 c0                	test   eax,eax
c0003a10:	75 26                	jne    c0003a38 <dir_remove+0x52>
c0003a12:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a18:	75 05                	jne    c0003a1f <dir_remove+0x39>
c0003a1a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a1d:	eb 03                	jmp    c0003a22 <dir_remove+0x3c>
c0003a1f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a22:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a26:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a29:	73 17                	jae    c0003a42 <dir_remove+0x5c>
c0003a2b:	31 d2                	xor    edx,edx
c0003a2d:	89 d8                	mov    eax,ebx
c0003a2f:	e8 83 fa ff ff       	call   c00034b7 <dir_next>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	74 c9                	je     c0003a01 <dir_remove+0x1b>
c0003a38:	83 f8 04             	cmp    eax,0x4
c0003a3b:	75 05                	jne    c0003a42 <dir_remove+0x5c>
c0003a3d:	b8 02 00 00 00       	mov    eax,0x2
c0003a42:	5b                   	pop    ebx
c0003a43:	5e                   	pop    esi
c0003a44:	5f                   	pop    edi
c0003a45:	c3                   	ret    

c0003a46 <create_name>:
c0003a46:	55                   	push   ebp
c0003a47:	89 d5                	mov    ebp,edx
c0003a49:	57                   	push   edi
c0003a4a:	89 c7                	mov    edi,eax
c0003a4c:	56                   	push   esi
c0003a4d:	31 f6                	xor    esi,esi
c0003a4f:	53                   	push   ebx
c0003a50:	83 ec 3c             	sub    esp,0x3c
c0003a53:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a59:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a62:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a66:	e8 72 e0 ff ff       	call   c0001add <tchar2uni>
c0003a6b:	89 c3                	mov    ebx,eax
c0003a6d:	83 f8 ff             	cmp    eax,0xffffffff
c0003a70:	75 0a                	jne    c0003a7c <create_name+0x36>
c0003a72:	b8 06 00 00 00       	mov    eax,0x6
c0003a77:	e9 9e 02 00 00       	jmp    c0003d1a <create_name+0x2d4>
c0003a7c:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a81:	76 0c                	jbe    c0003a8f <create_name+0x49>
c0003a83:	c1 e8 10             	shr    eax,0x10
c0003a86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a8a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a8e:	46                   	inc    esi
c0003a8f:	66 83 fb 1f          	cmp    bx,0x1f
c0003a93:	76 4f                	jbe    c0003ae4 <create_name+0x9e>
c0003a95:	66 83 fb 5c          	cmp    bx,0x5c
c0003a99:	74 35                	je     c0003ad0 <create_name+0x8a>
c0003a9b:	66 83 fb 2f          	cmp    bx,0x2f
c0003a9f:	74 2f                	je     c0003ad0 <create_name+0x8a>
c0003aa1:	66 83 fb 7f          	cmp    bx,0x7f
c0003aa5:	77 11                	ja     c0003ab8 <create_name+0x72>
c0003aa7:	0f b7 d3             	movzx  edx,bx
c0003aaa:	b8 32 64 02 c0       	mov    eax,0xc0026432
c0003aaf:	e8 11 e0 ff ff       	call   c0001ac5 <chk_chr>
c0003ab4:	85 c0                	test   eax,eax
c0003ab6:	75 ba                	jne    c0003a72 <create_name+0x2c>
c0003ab8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003abe:	77 b2                	ja     c0003a72 <create_name+0x2c>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ac8:	46                   	inc    esi
c0003ac9:	eb 97                	jmp    c0003a62 <create_name+0x1c>
c0003acb:	40                   	inc    eax
c0003acc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ad4:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ad6:	80 fa 2f             	cmp    dl,0x2f
c0003ad9:	74 f0                	je     c0003acb <create_name+0x85>
c0003adb:	80 fa 5c             	cmp    dl,0x5c
c0003ade:	74 eb                	je     c0003acb <create_name+0x85>
c0003ae0:	31 db                	xor    ebx,ebx
c0003ae2:	eb 02                	jmp    c0003ae6 <create_name+0xa0>
c0003ae4:	b3 04                	mov    bl,0x4
c0003ae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003aea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003aed:	85 f6                	test   esi,esi
c0003aef:	74 18                	je     c0003b09 <create_name+0xc3>
c0003af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003afa:	66 83 f8 20          	cmp    ax,0x20
c0003afe:	74 06                	je     c0003b06 <create_name+0xc0>
c0003b00:	66 83 f8 2e          	cmp    ax,0x2e
c0003b04:	75 03                	jne    c0003b09 <create_name+0xc3>
c0003b06:	4e                   	dec    esi
c0003b07:	eb e4                	jmp    c0003aed <create_name+0xa7>
c0003b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0d:	31 ed                	xor    ebp,ebp
c0003b0f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b15:	85 f6                	test   esi,esi
c0003b17:	0f 84 55 ff ff ff    	je     c0003a72 <create_name+0x2c>
c0003b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b21:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b24:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b28:	66 83 f8 20          	cmp    ax,0x20
c0003b2c:	75 04                	jne    c0003b32 <create_name+0xec>
c0003b2e:	89 d5                	mov    ebp,edx
c0003b30:	eb eb                	jmp    c0003b1d <create_name+0xd7>
c0003b32:	85 ed                	test   ebp,ebp
c0003b34:	75 06                	jne    c0003b3c <create_name+0xf6>
c0003b36:	66 83 f8 2e          	cmp    ax,0x2e
c0003b3a:	75 08                	jne    c0003b44 <create_name+0xfe>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	eb 03                	jmp    c0003b44 <create_name+0xfe>
c0003b41:	4e                   	dec    esi
c0003b42:	74 0c                	je     c0003b50 <create_name+0x10a>
c0003b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b48:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b4e:	75 f1                	jne    c0003b41 <create_name+0xfb>
c0003b50:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b55:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b58:	ba 20 00 00 00       	mov    edx,0x20
c0003b5d:	e8 35 df ff ff       	call   c0001a97 <mem_set>
c0003b62:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b6a:	31 c9                	xor    ecx,ecx
c0003b6c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b71:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b80:	66 85 ed             	test   bp,bp
c0003b83:	0f 84 30 01 00 00    	je     c0003cb9 <create_name+0x273>
c0003b89:	66 83 fd 20          	cmp    bp,0x20
c0003b8d:	74 10                	je     c0003b9f <create_name+0x159>
c0003b8f:	66 83 fd 2e          	cmp    bp,0x2e
c0003b93:	75 13                	jne    c0003ba8 <create_name+0x162>
c0003b95:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b99:	0f 84 6b 01 00 00    	je     c0003d0a <create_name+0x2c4>
c0003b9f:	83 cb 03             	or     ebx,0x3
c0003ba2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003ba6:	eb c9                	jmp    c0003b71 <create_name+0x12b>
c0003ba8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bac:	73 0b                	jae    c0003bb9 <create_name+0x173>
c0003bae:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bb2:	75 47                	jne    c0003bfb <create_name+0x1b5>
c0003bb4:	e9 51 01 00 00       	jmp    c0003d0a <create_name+0x2c4>
c0003bb9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bbe:	75 10                	jne    c0003bd0 <create_name+0x18a>
c0003bc0:	83 cb 03             	or     ebx,0x3
c0003bc3:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bcb:	e9 e9 00 00 00       	jmp    c0003cb9 <create_name+0x273>
c0003bd0:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd4:	74 0d                	je     c0003be3 <create_name+0x19d>
c0003bd6:	83 cb 03             	or     ebx,0x3
c0003bd9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bdd:	0f 87 d6 00 00 00    	ja     c0003cb9 <create_name+0x273>
c0003be3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003be8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bec:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bf4:	b9 08 00 00 00       	mov    ecx,0x8
c0003bf9:	eb a7                	jmp    c0003ba2 <create_name+0x15c>
c0003bfb:	66 83 fd 7f          	cmp    bp,0x7f
c0003bff:	76 68                	jbe    c0003c69 <create_name+0x223>
c0003c01:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c05:	88 da                	mov    dl,bl
c0003c07:	83 ca 02             	or     edx,0x2
c0003c0a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c0e:	50                   	push   eax
c0003c0f:	50                   	push   eax
c0003c10:	68 b5 01 00 00       	push   0x1b5
c0003c15:	55                   	push   ebp
c0003c16:	e8 48 46 00 00       	call   c0008263 <ff_uni2oem>
c0003c1b:	83 c4 10             	add    esp,0x10
c0003c1e:	89 c5                	mov    ebp,eax
c0003c20:	a8 80                	test   al,0x80
c0003c22:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c2a:	74 0c                	je     c0003c38 <create_name+0x1f2>
c0003c2c:	83 e5 7f             	and    ebp,0x7f
c0003c2f:	0f b6 ad 80 63 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd9c80]
c0003c36:	eb 2a                	jmp    c0003c62 <create_name+0x21c>
c0003c38:	66 3d ff 00          	cmp    ax,0xff
c0003c3c:	76 24                	jbe    c0003c62 <create_name+0x21c>
c0003c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c42:	48                   	dec    eax
c0003c43:	39 c8                	cmp    eax,ecx
c0003c45:	77 0c                	ja     c0003c53 <create_name+0x20d>
c0003c47:	83 cb 03             	or     ebx,0x3
c0003c4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c4e:	e9 4f ff ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003c53:	89 e8                	mov    eax,ebp
c0003c55:	88 d3                	mov    bl,dl
c0003c57:	66 c1 e8 08          	shr    ax,0x8
c0003c5b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c5f:	41                   	inc    ecx
c0003c60:	eb 4b                	jmp    c0003cad <create_name+0x267>
c0003c62:	88 d3                	mov    bl,dl
c0003c64:	66 85 ed             	test   bp,bp
c0003c67:	74 19                	je     c0003c82 <create_name+0x23c>
c0003c69:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c6d:	0f b7 d5             	movzx  edx,bp
c0003c70:	b8 3b 64 02 c0       	mov    eax,0xc002643b
c0003c75:	e8 4b de ff ff       	call   c0001ac5 <chk_chr>
c0003c7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c7e:	85 c0                	test   eax,eax
c0003c80:	74 0a                	je     c0003c8c <create_name+0x246>
c0003c82:	83 cb 03             	or     ebx,0x3
c0003c85:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c8a:	eb 21                	jmp    c0003cad <create_name+0x267>
c0003c8c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c8f:	66 83 f8 19          	cmp    ax,0x19
c0003c93:	77 07                	ja     c0003c9c <create_name+0x256>
c0003c95:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c9a:	eb 11                	jmp    c0003cad <create_name+0x267>
c0003c9c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c9f:	66 83 f8 19          	cmp    ax,0x19
c0003ca3:	77 08                	ja     c0003cad <create_name+0x267>
c0003ca5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003caa:	83 ed 20             	sub    ebp,0x20
c0003cad:	89 e8                	mov    eax,ebp
c0003caf:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb3:	41                   	inc    ecx
c0003cb4:	e9 e9 fe ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003cb9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cbd:	75 04                	jne    c0003cc3 <create_name+0x27d>
c0003cbf:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cc3:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cc8:	75 05                	jne    c0003ccf <create_name+0x289>
c0003cca:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ccf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cd3:	83 e0 0c             	and    eax,0xc
c0003cd6:	3c 0c                	cmp    al,0xc
c0003cd8:	74 0b                	je     c0003ce5 <create_name+0x29f>
c0003cda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cde:	83 e0 03             	and    eax,0x3
c0003ce1:	3c 03                	cmp    al,0x3
c0003ce3:	75 05                	jne    c0003cea <create_name+0x2a4>
c0003ce5:	83 cb 02             	or     ebx,0x2
c0003ce8:	eb 19                	jmp    c0003d03 <create_name+0x2bd>
c0003cea:	f6 c3 02             	test   bl,0x2
c0003ced:	75 14                	jne    c0003d03 <create_name+0x2bd>
c0003cef:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003cf4:	74 03                	je     c0003cf9 <create_name+0x2b3>
c0003cf6:	83 cb 10             	or     ebx,0x10
c0003cf9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003cfe:	74 03                	je     c0003d03 <create_name+0x2bd>
c0003d00:	83 cb 08             	or     ebx,0x8
c0003d03:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d06:	31 c0                	xor    eax,eax
c0003d08:	eb 10                	jmp    c0003d1a <create_name+0x2d4>
c0003d0a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0f:	0f 85 ce fe ff ff    	jne    c0003be3 <create_name+0x19d>
c0003d15:	e9 a6 fe ff ff       	jmp    c0003bc0 <create_name+0x17a>
c0003d1a:	83 c4 3c             	add    esp,0x3c
c0003d1d:	5b                   	pop    ebx
c0003d1e:	5e                   	pop    esi
c0003d1f:	5f                   	pop    edi
c0003d20:	5d                   	pop    ebp
c0003d21:	c3                   	ret    

c0003d22 <xname_sum>:
c0003d22:	56                   	push   esi
c0003d23:	53                   	push   ebx
c0003d24:	89 c6                	mov    esi,eax
c0003d26:	51                   	push   ecx
c0003d27:	31 db                	xor    ebx,ebx
c0003d29:	83 c6 02             	add    esi,0x2
c0003d2c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d30:	66 85 c0             	test   ax,ax
c0003d33:	74 1f                	je     c0003d54 <xname_sum+0x32>
c0003d35:	83 ec 0c             	sub    esp,0xc
c0003d38:	66 d1 cb             	ror    bx,1
c0003d3b:	50                   	push   eax
c0003d3c:	e8 1e 46 00 00       	call   c000835f <ff_wtoupper>
c0003d41:	83 c4 10             	add    esp,0x10
c0003d44:	0f b6 d0             	movzx  edx,al
c0003d47:	66 c1 e8 08          	shr    ax,0x8
c0003d4b:	01 d3                	add    ebx,edx
c0003d4d:	66 d1 cb             	ror    bx,1
c0003d50:	01 c3                	add    ebx,eax
c0003d52:	eb d5                	jmp    c0003d29 <xname_sum+0x7>
c0003d54:	89 d8                	mov    eax,ebx
c0003d56:	5a                   	pop    edx
c0003d57:	5b                   	pop    ebx
c0003d58:	5e                   	pop    esi
c0003d59:	c3                   	ret    

c0003d5a <create_xdir>:
c0003d5a:	55                   	push   ebp
c0003d5b:	b9 40 00 00 00       	mov    ecx,0x40
c0003d60:	57                   	push   edi
c0003d61:	bd 01 00 00 00       	mov    ebp,0x1
c0003d66:	56                   	push   esi
c0003d67:	31 ff                	xor    edi,edi
c0003d69:	53                   	push   ebx
c0003d6a:	be 40 00 00 00       	mov    esi,0x40
c0003d6f:	89 c3                	mov    ebx,eax
c0003d71:	83 ec 1c             	sub    esp,0x1c
c0003d74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d78:	31 d2                	xor    edx,edx
c0003d7a:	e8 18 dd ff ff       	call   c0001a97 <mem_set>
c0003d7f:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d82:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d86:	31 c9                	xor    ecx,ecx
c0003d88:	8d 46 01             	lea    eax,[esi+0x1]
c0003d8b:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d8f:	83 c6 02             	add    esi,0x2
c0003d92:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d96:	66 85 ed             	test   bp,bp
c0003d99:	74 12                	je     c0003dad <create_xdir+0x53>
c0003d9b:	0f b6 c1             	movzx  eax,cl
c0003d9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003da2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003da6:	66 83 fd 01          	cmp    bp,0x1
c0003daa:	80 d9 ff             	sbb    cl,0xff
c0003dad:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003db0:	0f b7 d5             	movzx  edx,bp
c0003db3:	83 c6 02             	add    esi,0x2
c0003db6:	e8 ba dc ff ff       	call   c0001a75 <st_word>
c0003dbb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dc1:	75 d3                	jne    c0003d96 <create_xdir+0x3c>
c0003dc3:	8d 47 01             	lea    eax,[edi+0x1]
c0003dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dce:	0f b6 c1             	movzx  eax,cl
c0003dd1:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dd6:	74 07                	je     c0003ddf <create_xdir+0x85>
c0003dd8:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003ddd:	eb a9                	jmp    c0003d88 <create_xdir+0x2e>
c0003ddf:	8d 47 02             	lea    eax,[edi+0x2]
c0003de2:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003de5:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003de8:	89 d0                	mov    eax,edx
c0003dea:	e8 33 ff ff ff       	call   c0003d22 <xname_sum>
c0003def:	83 c4 1c             	add    esp,0x1c
c0003df2:	0f b7 d0             	movzx  edx,ax
c0003df5:	8d 43 24             	lea    eax,[ebx+0x24]
c0003df8:	5b                   	pop    ebx
c0003df9:	5e                   	pop    esi
c0003dfa:	5f                   	pop    edi
c0003dfb:	5d                   	pop    ebp
c0003dfc:	e9 74 dc ff ff       	jmp    c0001a75 <st_word>

c0003e01 <cmp_lfn>:
c0003e01:	55                   	push   ebp
c0003e02:	57                   	push   edi
c0003e03:	89 d7                	mov    edi,edx
c0003e05:	56                   	push   esi
c0003e06:	53                   	push   ebx
c0003e07:	83 ec 1c             	sub    esp,0x1c
c0003e0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e0e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e11:	e8 ed db ff ff       	call   c0001a03 <ld_word>
c0003e16:	66 85 c0             	test   ax,ax
c0003e19:	74 07                	je     c0003e22 <cmp_lfn+0x21>
c0003e1b:	31 c0                	xor    eax,eax
c0003e1d:	e9 9a 00 00 00       	jmp    c0003ebc <cmp_lfn+0xbb>
c0003e22:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e24:	bd 01 00 00 00       	mov    ebp,0x1
c0003e29:	83 e3 3f             	and    ebx,0x3f
c0003e2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e34:	4b                   	dec    ebx
c0003e35:	6b db 0d             	imul   ebx,ebx,0xd
c0003e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e3c:	0f b6 80 00 64 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9c00]
c0003e43:	01 f8                	add    eax,edi
c0003e45:	e8 b9 db ff ff       	call   c0001a03 <ld_word>
c0003e4a:	66 85 ed             	test   bp,bp
c0003e4d:	89 c6                	mov    esi,eax
c0003e4f:	74 3c                	je     c0003e8d <cmp_lfn+0x8c>
c0003e51:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e57:	77 c2                	ja     c0003e1b <cmp_lfn+0x1a>
c0003e59:	83 ec 0c             	sub    esp,0xc
c0003e5c:	0f b7 c0             	movzx  eax,ax
c0003e5f:	50                   	push   eax
c0003e60:	e8 fa 44 00 00       	call   c000835f <ff_wtoupper>
c0003e65:	89 c5                	mov    ebp,eax
c0003e67:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e72:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e76:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e79:	e8 e1 44 00 00       	call   c000835f <ff_wtoupper>
c0003e7e:	83 c4 10             	add    esp,0x10
c0003e81:	39 c5                	cmp    ebp,eax
c0003e83:	75 96                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e85:	89 f5                	mov    ebp,esi
c0003e87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e8b:	eb 04                	jmp    c0003e91 <cmp_lfn+0x90>
c0003e8d:	66 46                	inc    si
c0003e8f:	75 8a                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e91:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e95:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e9a:	75 9c                	jne    c0003e38 <cmp_lfn+0x37>
c0003e9c:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e9f:	74 16                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea1:	66 85 ed             	test   bp,bp
c0003ea4:	74 11                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eaa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eaf:	0f 94 c0             	sete   al
c0003eb2:	0f b6 c0             	movzx  eax,al
c0003eb5:	eb 05                	jmp    c0003ebc <cmp_lfn+0xbb>
c0003eb7:	b8 01 00 00 00       	mov    eax,0x1
c0003ebc:	83 c4 1c             	add    esp,0x1c
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	5f                   	pop    edi
c0003ec2:	5d                   	pop    ebp
c0003ec3:	c3                   	ret    

c0003ec4 <dir_find>:
c0003ec4:	55                   	push   ebp
c0003ec5:	31 d2                	xor    edx,edx
c0003ec7:	57                   	push   edi
c0003ec8:	56                   	push   esi
c0003ec9:	53                   	push   ebx
c0003eca:	89 c3                	mov    ebx,eax
c0003ecc:	83 ec 1c             	sub    esp,0x1c
c0003ecf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ed1:	e8 89 f0 ff ff       	call   c0002f5f <dir_sdi>
c0003ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed9:	85 c0                	test   eax,eax
c0003edb:	0f 85 9e 01 00 00    	jne    c000407f <dir_find+0x1bb>
c0003ee1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ee4:	0f 85 8d 00 00 00    	jne    c0003f77 <dir_find+0xb3>
c0003eea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003eed:	e8 30 fe ff ff       	call   c0003d22 <xname_sum>
c0003ef2:	89 c7                	mov    edi,eax
c0003ef4:	31 d2                	xor    edx,edx
c0003ef6:	89 d8                	mov    eax,ebx
c0003ef8:	e8 72 f8 ff ff       	call   c000376f <dir_read>
c0003efd:	85 c0                	test   eax,eax
c0003eff:	0f 85 5e 01 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f05:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f08:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f0b:	e8 f3 da ff ff       	call   c0001a03 <ld_word>
c0003f10:	66 39 f8             	cmp    ax,di
c0003f13:	75 df                	jne    c0003ef4 <dir_find+0x30>
c0003f15:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f18:	31 ed                	xor    ebp,ebp
c0003f1a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f1e:	ba 40 00 00 00       	mov    edx,0x40
c0003f23:	89 e9                	mov    ecx,ebp
c0003f25:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f29:	0f 84 42 01 00 00    	je     c0004071 <dir_find+0x1ad>
c0003f2f:	f6 c2 1f             	test   dl,0x1f
c0003f32:	75 03                	jne    c0003f37 <dir_find+0x73>
c0003f34:	83 c2 02             	add    edx,0x2
c0003f37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f3b:	89 d0                	mov    eax,edx
c0003f3d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f40:	e8 be da ff ff       	call   c0001a03 <ld_word>
c0003f45:	83 ec 0c             	sub    esp,0xc
c0003f48:	0f b7 c0             	movzx  eax,ax
c0003f4b:	50                   	push   eax
c0003f4c:	e8 0e 44 00 00       	call   c000835f <ff_wtoupper>
c0003f51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f55:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f58:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f5f:	e8 fb 43 00 00       	call   c000835f <ff_wtoupper>
c0003f64:	83 c4 10             	add    esp,0x10
c0003f67:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f6b:	75 87                	jne    c0003ef4 <dir_find+0x30>
c0003f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f71:	45                   	inc    ebp
c0003f72:	83 c2 02             	add    edx,0x2
c0003f75:	eb ac                	jmp    c0003f23 <dir_find+0x5f>
c0003f77:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f7e:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f83:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f88:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f8b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f8e:	89 f0                	mov    eax,esi
c0003f90:	e8 4c e2 ff ff       	call   c00021e1 <move_window>
c0003f95:	85 c0                	test   eax,eax
c0003f97:	0f 85 c6 00 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f9d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fa0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fa3:	84 c9                	test   cl,cl
c0003fa5:	0f 84 bd 00 00 00    	je     c0004068 <dir_find+0x1a4>
c0003fab:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fae:	88 d0                	mov    al,dl
c0003fb0:	83 e0 3f             	and    eax,0x3f
c0003fb3:	80 f9 e5             	cmp    cl,0xe5
c0003fb6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fb9:	0f 84 87 00 00 00    	je     c0004046 <dir_find+0x182>
c0003fbf:	80 e2 08             	and    dl,0x8
c0003fc2:	74 06                	je     c0003fca <dir_find+0x106>
c0003fc4:	3c 0f                	cmp    al,0xf
c0003fc6:	75 7e                	jne    c0004046 <dir_find+0x182>
c0003fc8:	eb 04                	jmp    c0003fce <dir_find+0x10a>
c0003fca:	3c 0f                	cmp    al,0xf
c0003fcc:	75 4c                	jne    c000401a <dir_find+0x156>
c0003fce:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fd2:	75 7e                	jne    c0004052 <dir_find+0x18e>
c0003fd4:	f6 c1 40             	test   cl,0x40
c0003fd7:	74 12                	je     c0003feb <dir_find+0x127>
c0003fd9:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fdc:	83 e1 bf             	and    ecx,0xffffffbf
c0003fdf:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003fe3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fe6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003fe9:	eb 06                	jmp    c0003ff1 <dir_find+0x12d>
c0003feb:	89 f8                	mov    eax,edi
c0003fed:	38 c8                	cmp    al,cl
c0003fef:	75 5c                	jne    c000404d <dir_find+0x189>
c0003ff1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003ff5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ffa:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003ffd:	75 53                	jne    c0004052 <dir_find+0x18e>
c0003fff:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004003:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004006:	89 ea                	mov    edx,ebp
c0004008:	e8 f4 fd ff ff       	call   c0003e01 <cmp_lfn>
c000400d:	85 c0                	test   eax,eax
c000400f:	74 41                	je     c0004052 <dir_find+0x18e>
c0004011:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004015:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004018:	eb 38                	jmp    c0004052 <dir_find+0x18e>
c000401a:	89 f8                	mov    eax,edi
c000401c:	84 c0                	test   al,al
c000401e:	75 0d                	jne    c000402d <dir_find+0x169>
c0004020:	89 e8                	mov    eax,ebp
c0004022:	e8 98 de ff ff       	call   c0001ebf <sum_sfn>
c0004027:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000402b:	74 52                	je     c000407f <dir_find+0x1bb>
c000402d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004031:	75 13                	jne    c0004046 <dir_find+0x182>
c0004033:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004036:	b9 0b 00 00 00       	mov    ecx,0xb
c000403b:	89 e8                	mov    eax,ebp
c000403d:	e8 60 da ff ff       	call   c0001aa2 <mem_cmp>
c0004042:	85 c0                	test   eax,eax
c0004044:	74 39                	je     c000407f <dir_find+0x1bb>
c0004046:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000404d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004052:	31 d2                	xor    edx,edx
c0004054:	89 d8                	mov    eax,ebx
c0004056:	e8 5c f4 ff ff       	call   c00034b7 <dir_next>
c000405b:	85 c0                	test   eax,eax
c000405d:	0f 84 25 ff ff ff    	je     c0003f88 <dir_find+0xc4>
c0004063:	89 04 24             	mov    DWORD PTR [esp],eax
c0004066:	eb 17                	jmp    c000407f <dir_find+0x1bb>
c0004068:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000406f:	eb 0e                	jmp    c000407f <dir_find+0x1bb>
c0004071:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004074:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004079:	0f 85 75 fe ff ff    	jne    c0003ef4 <dir_find+0x30>
c000407f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004082:	83 c4 1c             	add    esp,0x1c
c0004085:	5b                   	pop    ebx
c0004086:	5e                   	pop    esi
c0004087:	5f                   	pop    edi
c0004088:	5d                   	pop    ebp
c0004089:	c3                   	ret    

c000408a <dir_register>:
c000408a:	55                   	push   ebp
c000408b:	57                   	push   edi
c000408c:	56                   	push   esi
c000408d:	be 06 00 00 00       	mov    esi,0x6
c0004092:	53                   	push   ebx
c0004093:	83 ec 6c             	sub    esp,0x6c
c0004096:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c000409a:	0f 85 62 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040a2:	31 ff                	xor    edi,edi
c00040a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040a7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ac:	74 03                	je     c00040b1 <dir_register+0x27>
c00040ae:	47                   	inc    edi
c00040af:	eb f6                	jmp    c00040a7 <dir_register+0x1d>
c00040b1:	89 c3                	mov    ebx,eax
c00040b3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040b7:	0f 85 e1 00 00 00    	jne    c000419e <dir_register+0x114>
c00040bd:	83 c7 0e             	add    edi,0xe
c00040c0:	b9 0f 00 00 00       	mov    ecx,0xf
c00040c5:	89 f8                	mov    eax,edi
c00040c7:	31 d2                	xor    edx,edx
c00040c9:	f7 f1                	div    ecx
c00040cb:	8d 50 02             	lea    edx,[eax+0x2]
c00040ce:	89 c7                	mov    edi,eax
c00040d0:	89 d8                	mov    eax,ebx
c00040d2:	e8 12 f8 ff ff       	call   c00038e9 <dir_alloc>
c00040d7:	89 c6                	mov    esi,eax
c00040d9:	85 c0                	test   eax,eax
c00040db:	0f 85 21 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040e1:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040ea:	c1 e7 05             	shl    edi,0x5
c00040ed:	29 f8                	sub    eax,edi
c00040ef:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00040f2:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f5:	a8 04                	test   al,0x4
c00040f7:	0f 84 91 00 00 00    	je     c000418e <dir_register+0x104>
c00040fd:	83 e0 fb             	and    eax,0xfffffffb
c0004100:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004103:	89 d8                	mov    eax,ebx
c0004105:	e8 25 ec ff ff       	call   c0002d2f <fill_first_frag>
c000410a:	85 c0                	test   eax,eax
c000410c:	0f 85 ee 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004112:	83 c9 ff             	or     ecx,0xffffffff
c0004115:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004118:	89 d8                	mov    eax,ebx
c000411a:	e8 db eb ff ff       	call   c0002cfa <fill_last_frag>
c000411f:	85 c0                	test   eax,eax
c0004121:	0f 85 d9 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004127:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000412b:	74 61                	je     c000418e <dir_register+0x104>
c000412d:	89 da                	mov    edx,ebx
c000412f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004133:	e8 ea f5 ff ff       	call   c0003722 <load_obj_xdir>
c0004138:	85 c0                	test   eax,eax
c000413a:	0f 85 c0 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004140:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004144:	31 c9                	xor    ecx,ecx
c0004146:	c1 e2 09             	shl    edx,0x9
c0004149:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000414c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000414f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004152:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004155:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004158:	83 c0 38             	add    eax,0x38
c000415b:	e8 1c d9 ff ff       	call   c0001a7c <st_qword>
c0004160:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004163:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004166:	83 c0 28             	add    eax,0x28
c0004169:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000416c:	e8 0b d9 ff ff       	call   c0001a7c <st_qword>
c0004171:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004174:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004177:	83 c8 01             	or     eax,0x1
c000417a:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000417d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004181:	e8 db f7 ff ff       	call   c0003961 <store_xdir>
c0004186:	85 c0                	test   eax,eax
c0004188:	0f 85 72 01 00 00    	jne    c0004300 <dir_register+0x276>
c000418e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004191:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004194:	e8 c1 fb ff ff       	call   c0003d5a <create_xdir>
c0004199:	e9 64 01 00 00       	jmp    c0004302 <dir_register+0x278>
c000419e:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041a1:	b9 0c 00 00 00       	mov    ecx,0xc
c00041a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041aa:	89 c2                	mov    edx,eax
c00041ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041b0:	e8 cd d8 ff ff       	call   c0001a82 <mem_cpy>
c00041b5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041ba:	74 58                	je     c0004214 <dir_register+0x18a>
c00041bc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041c0:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041c8:	83 ec 0c             	sub    esp,0xc
c00041cb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041d2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041da:	e8 24 dc ff ff       	call   c0001e03 <gen_numname>
c00041df:	89 d8                	mov    eax,ebx
c00041e1:	e8 de fc ff ff       	call   c0003ec4 <dir_find>
c00041e6:	83 c4 10             	add    esp,0x10
c00041e9:	89 c6                	mov    esi,eax
c00041eb:	85 c0                	test   eax,eax
c00041ed:	75 15                	jne    c0004204 <dir_register+0x17a>
c00041ef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00041f3:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00041f8:	75 ce                	jne    c00041c8 <dir_register+0x13e>
c00041fa:	be 07 00 00 00       	mov    esi,0x7
c00041ff:	e9 fe 00 00 00       	jmp    c0004302 <dir_register+0x278>
c0004204:	83 f8 04             	cmp    eax,0x4
c0004207:	0f 85 f5 00 00 00    	jne    c0004302 <dir_register+0x278>
c000420d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004211:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004214:	b9 01 00 00 00       	mov    ecx,0x1
c0004219:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000421e:	74 0f                	je     c000422f <dir_register+0x1a5>
c0004220:	b9 0d 00 00 00       	mov    ecx,0xd
c0004225:	8d 47 0c             	lea    eax,[edi+0xc]
c0004228:	31 d2                	xor    edx,edx
c000422a:	f7 f1                	div    ecx
c000422c:	8d 48 01             	lea    ecx,[eax+0x1]
c000422f:	89 ca                	mov    edx,ecx
c0004231:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004235:	89 d8                	mov    eax,ebx
c0004237:	e8 ad f6 ff ff       	call   c00038e9 <dir_alloc>
c000423c:	89 c6                	mov    esi,eax
c000423e:	85 c0                	test   eax,eax
c0004240:	0f 85 bc 00 00 00    	jne    c0004302 <dir_register+0x278>
c0004246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000424a:	49                   	dec    ecx
c000424b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424f:	74 6a                	je     c00042bb <dir_register+0x231>
c0004251:	89 c8                	mov    eax,ecx
c0004253:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004256:	c1 e0 05             	shl    eax,0x5
c0004259:	29 c2                	sub    edx,eax
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 fd ec ff ff       	call   c0002f5f <dir_sdi>
c0004262:	89 c6                	mov    esi,eax
c0004264:	85 c0                	test   eax,eax
c0004266:	0f 85 96 00 00 00    	jne    c0004302 <dir_register+0x278>
c000426c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004270:	e8 4a dc ff ff       	call   c0001ebf <sum_sfn>
c0004275:	0f b6 f8             	movzx  edi,al
c0004278:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000427b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 5c df ff ff       	call   c00021e1 <move_window>
c0004285:	89 c6                	mov    esi,eax
c0004287:	85 c0                	test   eax,eax
c0004289:	75 77                	jne    c0004302 <dir_register+0x278>
c000428b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004290:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004293:	83 ec 0c             	sub    esp,0xc
c0004296:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004299:	57                   	push   edi
c000429a:	e8 e0 da ff ff       	call   c0001d7f <put_lfn>
c000429f:	31 d2                	xor    edx,edx
c00042a1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042a5:	89 d8                	mov    eax,ebx
c00042a7:	e8 0b f2 ff ff       	call   c00034b7 <dir_next>
c00042ac:	83 c4 10             	add    esp,0x10
c00042af:	89 c6                	mov    esi,eax
c00042b1:	85 c0                	test   eax,eax
c00042b3:	75 4d                	jne    c0004302 <dir_register+0x278>
c00042b5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042b9:	75 bd                	jne    c0004278 <dir_register+0x1ee>
c00042bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042be:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c1:	89 e8                	mov    eax,ebp
c00042c3:	e8 19 df ff ff       	call   c00021e1 <move_window>
c00042c8:	89 c6                	mov    esi,eax
c00042ca:	85 c0                	test   eax,eax
c00042cc:	75 34                	jne    c0004302 <dir_register+0x278>
c00042ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042d1:	b9 20 00 00 00       	mov    ecx,0x20
c00042d6:	31 d2                	xor    edx,edx
c00042d8:	e8 ba d7 ff ff       	call   c0001a97 <mem_set>
c00042dd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e9:	e8 94 d7 ff ff       	call   c0001a82 <mem_cpy>
c00042ee:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042f1:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042f4:	83 e0 18             	and    eax,0x18
c00042f7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00042fa:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fe:	eb 02                	jmp    c0004302 <dir_register+0x278>
c0004300:	89 c6                	mov    esi,eax
c0004302:	83 c4 6c             	add    esp,0x6c
c0004305:	89 f0                	mov    eax,esi
c0004307:	5b                   	pop    ebx
c0004308:	5e                   	pop    esi
c0004309:	5f                   	pop    edi
c000430a:	5d                   	pop    ebp
c000430b:	c3                   	ret    

c000430c <sync_fs>:
c000430c:	56                   	push   esi
c000430d:	53                   	push   ebx
c000430e:	53                   	push   ebx
c000430f:	89 c3                	mov    ebx,eax
c0004311:	e8 37 de ff ff       	call   c000214d <sync_window>
c0004316:	85 c0                	test   eax,eax
c0004318:	0f 85 b1 00 00 00    	jne    c00043cf <sync_fs+0xc3>
c000431e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004321:	0f 85 8e 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004327:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000432b:	0f 85 84 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004331:	b9 00 02 00 00       	mov    ecx,0x200
c0004336:	8d 73 54             	lea    esi,[ebx+0x54]
c0004339:	31 d2                	xor    edx,edx
c000433b:	89 f0                	mov    eax,esi
c000433d:	e8 55 d7 ff ff       	call   c0001a97 <mem_set>
c0004342:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004348:	ba 55 aa 00 00       	mov    edx,0xaa55
c000434d:	e8 23 d7 ff ff       	call   c0001a75 <st_word>
c0004352:	ba 52 52 61 41       	mov    edx,0x41615252
c0004357:	89 f0                	mov    eax,esi
c0004359:	e8 1b d7 ff ff       	call   c0001a79 <st_dword>
c000435e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004364:	ba 72 72 41 61       	mov    edx,0x61417272
c0004369:	e8 0b d7 ff ff       	call   c0001a79 <st_dword>
c000436e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004371:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004377:	e8 fd d6 ff ff       	call   c0001a79 <st_dword>
c000437c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000437f:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004385:	e8 ef d6 ff ff       	call   c0001a79 <st_dword>
c000438a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000438d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004390:	83 c0 01             	add    eax,0x1
c0004393:	83 d2 00             	adc    edx,0x0
c0004396:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004399:	83 ec 0c             	sub    esp,0xc
c000439c:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000439f:	6a 01                	push   0x1
c00043a1:	52                   	push   edx
c00043a2:	50                   	push   eax
c00043a3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043a7:	56                   	push   esi
c00043a8:	50                   	push   eax
c00043a9:	e8 20 d6 ff ff       	call   c00019ce <disk_write>
c00043ae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043b2:	83 c4 20             	add    esp,0x20
c00043b5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b9:	51                   	push   ecx
c00043ba:	6a 00                	push   0x0
c00043bc:	6a 00                	push   0x0
c00043be:	50                   	push   eax
c00043bf:	e8 20 d6 ff ff       	call   c00019e4 <disk_ioctl>
c00043c4:	83 c4 10             	add    esp,0x10
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 95 c0             	setne  al
c00043cc:	0f b6 c0             	movzx  eax,al
c00043cf:	5a                   	pop    edx
c00043d0:	5b                   	pop    ebx
c00043d1:	5e                   	pop    esi
c00043d2:	c3                   	ret    

c00043d3 <create_partition>:
c00043d3:	55                   	push   ebp
c00043d4:	0f b6 c0             	movzx  eax,al
c00043d7:	57                   	push   edi
c00043d8:	56                   	push   esi
c00043d9:	53                   	push   ebx
c00043da:	83 ec 60             	sub    esp,0x60
c00043dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043e1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043e5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043e9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043ed:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043f1:	50                   	push   eax
c00043f2:	6a 01                	push   0x1
c00043f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f8:	e8 e7 d5 ff ff       	call   c00019e4 <disk_ioctl>
c00043fd:	83 c4 10             	add    esp,0x10
c0004400:	85 c0                	test   eax,eax
c0004402:	74 0a                	je     c000440e <create_partition+0x3b>
c0004404:	b8 01 00 00 00       	mov    eax,0x1
c0004409:	e9 67 05 00 00       	jmp    c0004975 <create_partition+0x5a2>
c000440e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004412:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000441a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000441e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004423:	0f 86 ed 03 00 00    	jbe    c0004816 <create_partition+0x443>
c0004429:	83 c0 df             	add    eax,0xffffffdf
c000442c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004434:	83 d2 ff             	adc    edx,0xffffffff
c0004437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000443b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000443f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004447:	83 c0 bd             	add    eax,0xffffffbd
c000444a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004451:	83 d2 ff             	adc    edx,0xffffffff
c0004454:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004458:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000445c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004464:	be 22 00 00 00       	mov    esi,0x22
c0004469:	31 ff                	xor    edi,edi
c000446b:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004473:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000447b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004483:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004487:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000448d:	75 0e                	jne    c000449d <create_partition+0xca>
c000448f:	b9 00 02 00 00       	mov    ecx,0x200
c0004494:	31 d2                	xor    edx,edx
c0004496:	89 d8                	mov    eax,ebx
c0004498:	e8 fa d5 ff ff       	call   c0001a97 <mem_set>
c000449d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044a1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044a9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ac:	0f 84 23 01 00 00    	je     c00045d5 <create_partition+0x202>
c00044b2:	89 f0                	mov    eax,esi
c00044b4:	89 fa                	mov    edx,edi
c00044b6:	05 ff 07 00 00       	add    eax,0x7ff
c00044bb:	83 d2 00             	adc    edx,0x0
c00044be:	89 c1                	mov    ecx,eax
c00044c0:	89 d7                	mov    edi,edx
c00044c2:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044cc:	89 ce                	mov    esi,ecx
c00044ce:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044d6:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044da:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e4:	b8 64 00 00 00       	mov    eax,0x64
c00044e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044ec:	b8 00 00 00 00       	mov    eax,0x0
c00044f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00044f5:	72 41                	jb     c0004538 <create_partition+0x165>
c00044f7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00044fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ff:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004503:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004508:	01 c1                	add    ecx,eax
c000450a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000450e:	f7 24 24             	mul    DWORD PTR [esp]
c0004511:	6a 00                	push   0x0
c0004513:	01 ca                	add    edx,ecx
c0004515:	6a 64                	push   0x64
c0004517:	52                   	push   edx
c0004518:	50                   	push   eax
c0004519:	e8 3e f5 01 00       	call   c0023a5c <__udivdi3>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	05 ff 07 00 00       	add    eax,0x7ff
c0004526:	83 d2 00             	adc    edx,0x0
c0004529:	89 c1                	mov    ecx,eax
c000452b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000452f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004535:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004538:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000453b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000453f:	01 f0                	add    eax,esi
c0004541:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004545:	11 fa                	adc    edx,edi
c0004547:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000454b:	19 d1                	sbb    ecx,edx
c000454d:	73 2e                	jae    c000457d <create_partition+0x1aa>
c000454f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004553:	89 f8                	mov    eax,edi
c0004555:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000455c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004560:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004568:	73 6b                	jae    c00045d5 <create_partition+0x202>
c000456a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000456e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004572:	29 f0                	sub    eax,esi
c0004574:	19 fa                	sbb    edx,edi
c0004576:	89 04 24             	mov    DWORD PTR [esp],eax
c0004579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004581:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004584:	74 4f                	je     c00045d5 <create_partition+0x202>
c0004586:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004589:	b9 10 00 00 00       	mov    ecx,0x10
c000458e:	ba 10 64 02 c0       	mov    edx,0xc0026410
c0004593:	e8 ea d4 ff ff       	call   c0001a82 <mem_cpy>
c0004598:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000459c:	b9 10 00 00 00       	mov    ecx,0x10
c00045a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045a5:	e8 2c db ff ff       	call   c00020d6 <make_rand>
c00045aa:	89 f2                	mov    edx,esi
c00045ac:	89 f9                	mov    ecx,edi
c00045ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045b2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045b6:	e8 c1 d4 ff ff       	call   c0001a7c <st_qword>
c00045bb:	03 34 24             	add    esi,DWORD PTR [esp]
c00045be:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045c2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045c6:	89 f2                	mov    edx,esi
c00045c8:	89 f9                	mov    ecx,edi
c00045ca:	83 c2 ff             	add    edx,0xffffffff
c00045cd:	83 d1 ff             	adc    ecx,0xffffffff
c00045d0:	e8 a7 d4 ff ff       	call   c0001a7c <st_qword>
c00045d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045d9:	83 e8 80             	sub    eax,0xffffff80
c00045dc:	89 c5                	mov    ebp,eax
c00045de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e8:	75 6b                	jne    c0004655 <create_partition+0x282>
c00045ea:	45                   	inc    ebp
c00045eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045ef:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c00045f4:	e8 39 da ff ff       	call   c0002032 <crc32>
c00045f9:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00045ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004603:	75 e5                	jne    c00045ea <create_partition+0x217>
c0004605:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004609:	31 d2                	xor    edx,edx
c000460b:	83 ec 0c             	sub    esp,0xc
c000460e:	c1 ed 09             	shr    ebp,0x9
c0004611:	6a 01                	push   0x1
c0004613:	8d 45 02             	lea    eax,[ebp+0x2]
c0004616:	52                   	push   edx
c0004617:	50                   	push   eax
c0004618:	53                   	push   ebx
c0004619:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000461d:	e8 ac d3 ff ff       	call   c00019ce <disk_write>
c0004622:	83 c4 20             	add    esp,0x20
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 85 d7 fd ff ff    	jne    c0004404 <create_partition+0x31>
c000462d:	83 ec 0c             	sub    esp,0xc
c0004630:	31 d2                	xor    edx,edx
c0004632:	6a 01                	push   0x1
c0004634:	89 e8                	mov    eax,ebp
c0004636:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000463a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000463e:	52                   	push   edx
c000463f:	50                   	push   eax
c0004640:	53                   	push   ebx
c0004641:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004645:	e8 84 d3 ff ff       	call   c00019ce <disk_write>
c000464a:	83 c4 20             	add    esp,0x20
c000464d:	85 c0                	test   eax,eax
c000464f:	0f 85 af fd ff ff    	jne    c0004404 <create_partition+0x31>
c0004655:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004659:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000465d:	3d 00 40 00 00       	cmp    eax,0x4000
c0004662:	74 0d                	je     c0004671 <create_partition+0x29e>
c0004664:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004668:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000466c:	e9 12 fe ff ff       	jmp    c0004483 <create_partition+0xb0>
c0004671:	31 d2                	xor    edx,edx
c0004673:	b9 00 02 00 00       	mov    ecx,0x200
c0004678:	89 d8                	mov    eax,ebx
c000467a:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000467d:	e8 15 d4 ff ff       	call   c0001a97 <mem_set>
c0004682:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004685:	b9 10 00 00 00       	mov    ecx,0x10
c000468a:	ba 00 63 02 c0       	mov    edx,0xc0026300
c000468f:	89 d8                	mov    eax,ebx
c0004691:	e8 ec d3 ff ff       	call   c0001a82 <mem_cpy>
c0004696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000469a:	8d 43 58             	lea    eax,[ebx+0x58]
c000469d:	f7 d2                	not    edx
c000469f:	e8 d5 d3 ff ff       	call   c0001a79 <st_dword>
c00046a4:	8d 43 18             	lea    eax,[ebx+0x18]
c00046a7:	31 c9                	xor    ecx,ecx
c00046a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ac:	ba 01 00 00 00       	mov    edx,0x1
c00046b1:	e8 c6 d3 ff ff       	call   c0001a7c <st_qword>
c00046b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046ba:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046be:	83 c2 ff             	add    edx,0xffffffff
c00046c1:	89 e8                	mov    eax,ebp
c00046c3:	83 d1 ff             	adc    ecx,0xffffffff
c00046c6:	e8 b1 d3 ff ff       	call   c0001a7c <st_qword>
c00046cb:	31 c9                	xor    ecx,ecx
c00046cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00046d0:	ba 22 00 00 00       	mov    edx,0x22
c00046d5:	e8 a2 d3 ff ff       	call   c0001a7c <st_qword>
c00046da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046e2:	83 c2 de             	add    edx,0xffffffde
c00046e5:	8d 43 30             	lea    eax,[ebx+0x30]
c00046e8:	83 d1 ff             	adc    ecx,0xffffffff
c00046eb:	31 f6                	xor    esi,esi
c00046ed:	e8 8a d3 ff ff       	call   c0001a7c <st_qword>
c00046f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00046f5:	ba 80 00 00 00       	mov    edx,0x80
c00046fa:	e8 7a d3 ff ff       	call   c0001a79 <st_dword>
c00046ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0004702:	ba 80 00 00 00       	mov    edx,0x80
c0004707:	e8 6d d3 ff ff       	call   c0001a79 <st_dword>
c000470c:	ba 02 00 00 00       	mov    edx,0x2
c0004711:	89 f8                	mov    eax,edi
c0004713:	e8 61 d3 ff ff       	call   c0001a79 <st_dword>
c0004718:	8d 53 38             	lea    edx,[ebx+0x38]
c000471b:	b9 10 00 00 00       	mov    ecx,0x10
c0004720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004724:	e8 ad d9 ff ff       	call   c00020d6 <make_rand>
c0004729:	83 c8 ff             	or     eax,0xffffffff
c000472c:	46                   	inc    esi
c000472d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004732:	e8 fb d8 ff ff       	call   c0002032 <crc32>
c0004737:	83 fe 5c             	cmp    esi,0x5c
c000473a:	75 f0                	jne    c000472c <create_partition+0x359>
c000473c:	f7 d0                	not    eax
c000473e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004741:	89 c2                	mov    edx,eax
c0004743:	89 f0                	mov    eax,esi
c0004745:	e8 2f d3 ff ff       	call   c0001a79 <st_dword>
c000474a:	83 ec 0c             	sub    esp,0xc
c000474d:	6a 01                	push   0x1
c000474f:	6a 00                	push   0x0
c0004751:	6a 01                	push   0x1
c0004753:	53                   	push   ebx
c0004754:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004758:	e8 71 d2 ff ff       	call   c00019ce <disk_write>
c000475d:	83 c4 20             	add    esp,0x20
c0004760:	85 c0                	test   eax,eax
c0004762:	0f 85 9c fc ff ff    	jne    c0004404 <create_partition+0x31>
c0004768:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000476c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004770:	83 c2 ff             	add    edx,0xffffffff
c0004773:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004776:	83 d1 ff             	adc    ecx,0xffffffff
c0004779:	e8 fe d2 ff ff       	call   c0001a7c <st_qword>
c000477e:	ba 01 00 00 00       	mov    edx,0x1
c0004783:	31 c9                	xor    ecx,ecx
c0004785:	89 e8                	mov    eax,ebp
c0004787:	e8 f0 d2 ff ff       	call   c0001a7c <st_qword>
c000478c:	89 f8                	mov    eax,edi
c000478e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004792:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004796:	31 ff                	xor    edi,edi
c0004798:	e8 df d2 ff ff       	call   c0001a7c <st_qword>
c000479d:	89 f0                	mov    eax,esi
c000479f:	31 d2                	xor    edx,edx
c00047a1:	e8 d3 d2 ff ff       	call   c0001a79 <st_dword>
c00047a6:	83 c8 ff             	or     eax,0xffffffff
c00047a9:	47                   	inc    edi
c00047aa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047af:	e8 7e d8 ff ff       	call   c0002032 <crc32>
c00047b4:	83 ff 5c             	cmp    edi,0x5c
c00047b7:	75 f0                	jne    c00047a9 <create_partition+0x3d6>
c00047b9:	f7 d0                	not    eax
c00047bb:	89 c2                	mov    edx,eax
c00047bd:	89 f0                	mov    eax,esi
c00047bf:	e8 b5 d2 ff ff       	call   c0001a79 <st_dword>
c00047c4:	83 ec 0c             	sub    esp,0xc
c00047c7:	6a 01                	push   0x1
c00047c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047cd:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047d1:	83 c0 ff             	add    eax,0xffffffff
c00047d4:	83 d2 ff             	adc    edx,0xffffffff
c00047d7:	52                   	push   edx
c00047d8:	50                   	push   eax
c00047d9:	53                   	push   ebx
c00047da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047de:	e8 eb d1 ff ff       	call   c00019ce <disk_write>
c00047e3:	83 c4 20             	add    esp,0x20
c00047e6:	85 c0                	test   eax,eax
c00047e8:	0f 85 16 fc ff ff    	jne    c0004404 <create_partition+0x31>
c00047ee:	31 d2                	xor    edx,edx
c00047f0:	89 d8                	mov    eax,ebx
c00047f2:	b9 00 02 00 00       	mov    ecx,0x200
c00047f7:	e8 9b d2 ff ff       	call   c0001a97 <mem_set>
c00047fc:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	ba 10 63 02 c0       	mov    edx,0xc0026310
c000480c:	e8 71 d2 ff ff       	call   c0001a82 <mem_cpy>
c0004811:	e9 21 01 00 00       	jmp    c0004937 <create_partition+0x564>
c0004816:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000481a:	b9 05 00 00 00       	mov    ecx,0x5
c000481f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004822:	bf 08 00 00 00       	mov    edi,0x8
c0004827:	89 f8                	mov    eax,edi
c0004829:	31 d2                	xor    edx,edx
c000482b:	0f b6 f0             	movzx  esi,al
c000482e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004831:	f7 f6                	div    esi
c0004833:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004838:	76 0a                	jbe    c0004844 <create_partition+0x471>
c000483a:	d1 e7                	shl    edi,1
c000483c:	49                   	dec    ecx
c000483d:	75 e8                	jne    c0004827 <create_partition+0x454>
c000483f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004844:	b9 00 02 00 00       	mov    ecx,0x200
c0004849:	31 d2                	xor    edx,edx
c000484b:	89 d8                	mov    eax,ebx
c000484d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004853:	e8 3f d2 ff ff       	call   c0001a97 <mem_set>
c0004858:	b9 64 00 00 00       	mov    ecx,0x64
c000485d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004860:	31 d2                	xor    edx,edx
c0004862:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000486a:	f7 f1                	div    ecx
c000486c:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004871:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004875:	89 f8                	mov    eax,edi
c0004877:	0f b6 c0             	movzx  eax,al
c000487a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000487e:	e9 80 00 00 00       	jmp    c0004903 <create_partition+0x530>
c0004883:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004886:	29 cf                	sub    edi,ecx
c0004888:	89 ca                	mov    edx,ecx
c000488a:	89 f0                	mov    eax,esi
c000488c:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004891:	e8 e3 d1 ff ff       	call   c0001a79 <st_dword>
c0004896:	8d 46 04             	lea    eax,[esi+0x4]
c0004899:	89 fa                	mov    edx,edi
c000489b:	83 c6 10             	add    esi,0x10
c000489e:	e8 d6 d1 ff ff       	call   c0001a79 <st_dword>
c00048a3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ac:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048b0:	89 c8                	mov    eax,ecx
c00048b2:	01 f9                	add    ecx,edi
c00048b4:	f7 f5                	div    ebp
c00048b6:	89 d5                	mov    ebp,edx
c00048b8:	31 d2                	xor    edx,edx
c00048ba:	45                   	inc    ebp
c00048bb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048bf:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048c2:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048c5:	89 c2                	mov    edx,eax
c00048c7:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048ca:	c1 ea 02             	shr    edx,0x2
c00048cd:	83 e2 c0             	and    edx,0xffffffc0
c00048d0:	09 ea                	or     edx,ebp
c00048d2:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d7:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048da:	31 d2                	xor    edx,edx
c00048dc:	f7 f5                	div    ebp
c00048de:	89 d7                	mov    edi,edx
c00048e0:	31 d2                	xor    edx,edx
c00048e2:	47                   	inc    edi
c00048e3:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048e7:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048ea:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048ed:	89 c5                	mov    ebp,eax
c00048ef:	c1 ed 02             	shr    ebp,0x2
c00048f2:	83 e5 c0             	and    ebp,0xffffffc0
c00048f5:	09 ef                	or     edi,ebp
c00048f7:	89 fa                	mov    edx,edi
c00048f9:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00048fc:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004901:	74 34                	je     c0004937 <create_partition+0x564>
c0004903:	85 c9                	test   ecx,ecx
c0004905:	74 30                	je     c0004937 <create_partition+0x564>
c0004907:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000490a:	76 2b                	jbe    c0004937 <create_partition+0x564>
c000490c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004910:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004914:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004917:	83 ff 64             	cmp    edi,0x64
c000491a:	76 4b                	jbe    c0004967 <create_partition+0x594>
c000491c:	89 f8                	mov    eax,edi
c000491e:	01 c8                	add    eax,ecx
c0004920:	0f 82 5d ff ff ff    	jb     c0004883 <create_partition+0x4b0>
c0004926:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004929:	0f 87 54 ff ff ff    	ja     c0004883 <create_partition+0x4b0>
c000492f:	85 ff                	test   edi,edi
c0004931:	0f 85 51 ff ff ff    	jne    c0004888 <create_partition+0x4b5>
c0004937:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000493d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004942:	e8 2e d1 ff ff       	call   c0001a75 <st_word>
c0004947:	83 ec 0c             	sub    esp,0xc
c000494a:	6a 01                	push   0x1
c000494c:	6a 00                	push   0x0
c000494e:	6a 00                	push   0x0
c0004950:	53                   	push   ebx
c0004951:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004955:	e8 74 d0 ff ff       	call   c00019ce <disk_write>
c000495a:	83 c4 20             	add    esp,0x20
c000495d:	85 c0                	test   eax,eax
c000495f:	0f 95 c0             	setne  al
c0004962:	0f b6 c0             	movzx  eax,al
c0004965:	eb 0e                	jmp    c0004975 <create_partition+0x5a2>
c0004967:	74 07                	je     c0004970 <create_partition+0x59d>
c0004969:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000496e:	eb ac                	jmp    c000491c <create_partition+0x549>
c0004970:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004973:	eb a7                	jmp    c000491c <create_partition+0x549>
c0004975:	83 c4 5c             	add    esp,0x5c
c0004978:	5b                   	pop    ebx
c0004979:	5e                   	pop    esi
c000497a:	5f                   	pop    edi
c000497b:	5d                   	pop    ebp
c000497c:	c3                   	ret    

c000497d <get_fileinfo>:
c000497d:	55                   	push   ebp
c000497e:	57                   	push   edi
c000497f:	56                   	push   esi
c0004980:	53                   	push   ebx
c0004981:	83 ec 1c             	sub    esp,0x1c
c0004984:	8b 30                	mov    esi,DWORD PTR [eax]
c0004986:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c000498a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000498e:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004991:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004994:	0f 84 dc 01 00 00    	je     c0004b76 <get_fileinfo+0x1f9>
c000499a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000499d:	75 0f                	jne    c00049ae <get_fileinfo+0x31>
c000499f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049a2:	83 c4 1c             	add    esp,0x1c
c00049a5:	5b                   	pop    ebx
c00049a6:	5e                   	pop    esi
c00049a7:	5f                   	pop    edi
c00049a8:	5d                   	pop    ebp
c00049a9:	e9 58 d5 ff ff       	jmp    c0001f06 <get_xfileinfo>
c00049ae:	89 d3                	mov    ebx,edx
c00049b0:	89 c6                	mov    esi,eax
c00049b2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049b6:	74 6a                	je     c0004a22 <get_fileinfo+0xa5>
c00049b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049c0:	31 ed                	xor    ebp,ebp
c00049c2:	31 ff                	xor    edi,edi
c00049c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049cf:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049d3:	66 85 d2             	test   dx,dx
c00049d6:	74 3e                	je     c0004a16 <get_fileinfo+0x99>
c00049d8:	66 85 ed             	test   bp,bp
c00049db:	75 0c                	jne    c00049e9 <get_fileinfo+0x6c>
c00049dd:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049e3:	66 3d ff 07          	cmp    ax,0x7ff
c00049e7:	76 22                	jbe    c0004a0b <get_fileinfo+0x8e>
c00049e9:	b9 ff 00 00 00       	mov    ecx,0xff
c00049ee:	89 e8                	mov    eax,ebp
c00049f0:	29 f9                	sub    ecx,edi
c00049f2:	c1 e0 10             	shl    eax,0x10
c00049f5:	09 d0                	or     eax,edx
c00049f7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00049fb:	e8 a3 d1 ff ff       	call   c0001ba3 <put_utf>
c0004a00:	84 c0                	test   al,al
c0004a02:	74 10                	je     c0004a14 <get_fileinfo+0x97>
c0004a04:	0f b6 c0             	movzx  eax,al
c0004a07:	31 d2                	xor    edx,edx
c0004a09:	01 c7                	add    edi,eax
c0004a0b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a10:	89 d5                	mov    ebp,edx
c0004a12:	eb b0                	jmp    c00049c4 <get_fileinfo+0x47>
c0004a14:	31 ff                	xor    edi,edi
c0004a16:	66 85 ed             	test   bp,bp
c0004a19:	74 02                	je     c0004a1d <get_fileinfo+0xa0>
c0004a1b:	31 ff                	xor    edi,edi
c0004a1d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	31 c9                	xor    ecx,ecx
c0004a26:	83 f9 0a             	cmp    ecx,0xa
c0004a29:	0f 87 ad 00 00 00    	ja     c0004adc <get_fileinfo+0x15f>
c0004a2f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a32:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a35:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a39:	66 83 fa 20          	cmp    dx,0x20
c0004a3d:	0f 84 92 00 00 00    	je     c0004ad5 <get_fileinfo+0x158>
c0004a43:	66 83 fa 05          	cmp    dx,0x5
c0004a47:	75 05                	jne    c0004a4e <get_fileinfo+0xd1>
c0004a49:	ba e5 00 00 00       	mov    edx,0xe5
c0004a4e:	83 ff 0b             	cmp    edi,0xb
c0004a51:	77 0b                	ja     c0004a5e <get_fileinfo+0xe1>
c0004a53:	83 fd 09             	cmp    ebp,0x9
c0004a56:	75 06                	jne    c0004a5e <get_fileinfo+0xe1>
c0004a58:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a5d:	47                   	inc    edi
c0004a5e:	0f b7 c2             	movzx  eax,dx
c0004a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a65:	e8 6d d0 ff ff       	call   c0001ad7 <dbc_1st>
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	74 2f                	je     c0004a9d <get_fileinfo+0x120>
c0004a6e:	83 fd 08             	cmp    ebp,0x8
c0004a71:	74 2a                	je     c0004a9d <get_fileinfo+0x120>
c0004a73:	83 fd 0b             	cmp    ebp,0xb
c0004a76:	74 25                	je     c0004a9d <get_fileinfo+0x120>
c0004a78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a7f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a83:	e8 52 d0 ff ff       	call   c0001ada <dbc_2nd>
c0004a88:	85 c0                	test   eax,eax
c0004a8a:	74 11                	je     c0004a9d <get_fileinfo+0x120>
c0004a8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a95:	c1 e2 08             	shl    edx,0x8
c0004a98:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a9b:	09 c2                	or     edx,eax
c0004a9d:	0f b7 d2             	movzx  edx,dx
c0004aa0:	50                   	push   eax
c0004aa1:	50                   	push   eax
c0004aa2:	68 b5 01 00 00       	push   0x1b5
c0004aa7:	52                   	push   edx
c0004aa8:	e8 46 38 00 00       	call   c00082f3 <ff_oem2uni>
c0004aad:	83 c4 10             	add    esp,0x10
c0004ab0:	66 85 c0             	test   ax,ax
c0004ab3:	75 04                	jne    c0004ab9 <get_fileinfo+0x13c>
c0004ab5:	31 ff                	xor    edi,edi
c0004ab7:	eb 23                	jmp    c0004adc <get_fileinfo+0x15f>
c0004ab9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004abe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ac2:	29 f9                	sub    ecx,edi
c0004ac4:	0f b7 c0             	movzx  eax,ax
c0004ac7:	e8 d7 d0 ff ff       	call   c0001ba3 <put_utf>
c0004acc:	84 c0                	test   al,al
c0004ace:	74 e5                	je     c0004ab5 <get_fileinfo+0x138>
c0004ad0:	0f b6 c0             	movzx  eax,al
c0004ad3:	01 c7                	add    edi,eax
c0004ad5:	89 e9                	mov    ecx,ebp
c0004ad7:	e9 4a ff ff ff       	jmp    c0004a26 <get_fileinfo+0xa9>
c0004adc:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004ae1:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004ae5:	75 54                	jne    c0004b3b <get_fileinfo+0x1be>
c0004ae7:	85 ff                	test   edi,edi
c0004ae9:	75 0b                	jne    c0004af6 <get_fileinfo+0x179>
c0004aeb:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004aef:	ba 01 00 00 00       	mov    edx,0x1
c0004af4:	eb 33                	jmp    c0004b29 <get_fileinfo+0x1ac>
c0004af6:	b1 08                	mov    cl,0x8
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b00:	84 c0                	test   al,al
c0004b02:	74 25                	je     c0004b29 <get_fileinfo+0x1ac>
c0004b04:	66 83 f8 2e          	cmp    ax,0x2e
c0004b08:	74 16                	je     c0004b20 <get_fileinfo+0x1a3>
c0004b0a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b0d:	66 83 ff 19          	cmp    di,0x19
c0004b11:	77 0f                	ja     c0004b22 <get_fileinfo+0x1a5>
c0004b13:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b16:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b19:	74 07                	je     c0004b22 <get_fileinfo+0x1a5>
c0004b1b:	83 c0 20             	add    eax,0x20
c0004b1e:	eb 02                	jmp    c0004b22 <get_fileinfo+0x1a5>
c0004b20:	b1 10                	mov    cl,0x10
c0004b22:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b26:	42                   	inc    edx
c0004b27:	eb d1                	jmp    c0004afa <get_fileinfo+0x17d>
c0004b29:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b2e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b31:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b35:	75 04                	jne    c0004b3b <get_fileinfo+0x1be>
c0004b37:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b3b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b41:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b44:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b47:	83 c0 1c             	add    eax,0x1c
c0004b4a:	e8 c1 ce ff ff       	call   c0001a10 <ld_dword>
c0004b4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b56:	89 03                	mov    DWORD PTR [ebx],eax
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	83 c0 16             	add    eax,0x16
c0004b5e:	e8 a0 ce ff ff       	call   c0001a03 <ld_word>
c0004b63:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b67:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6a:	83 c0 18             	add    eax,0x18
c0004b6d:	e8 91 ce ff ff       	call   c0001a03 <ld_word>
c0004b72:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b76:	83 c4 1c             	add    esp,0x1c
c0004b79:	5b                   	pop    ebx
c0004b7a:	5e                   	pop    esi
c0004b7b:	5f                   	pop    edi
c0004b7c:	5d                   	pop    ebp
c0004b7d:	c3                   	ret    

c0004b7e <ld_clust.isra.0>:
c0004b7e:	56                   	push   esi
c0004b7f:	89 c6                	mov    esi,eax
c0004b81:	53                   	push   ebx
c0004b82:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b85:	89 d3                	mov    ebx,edx
c0004b87:	e8 77 ce ff ff       	call   c0001a03 <ld_word>
c0004b8c:	0f b7 c8             	movzx  ecx,ax
c0004b8f:	89 f0                	mov    eax,esi
c0004b91:	3c 03                	cmp    al,0x3
c0004b93:	75 0d                	jne    c0004ba2 <ld_clust.isra.0+0x24>
c0004b95:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b98:	e8 66 ce ff ff       	call   c0001a03 <ld_word>
c0004b9d:	c1 e0 10             	shl    eax,0x10
c0004ba0:	09 c1                	or     ecx,eax
c0004ba2:	89 c8                	mov    eax,ecx
c0004ba4:	5b                   	pop    ebx
c0004ba5:	5e                   	pop    esi
c0004ba6:	c3                   	ret    

c0004ba7 <st_clust.isra.1>:
c0004ba7:	56                   	push   esi
c0004ba8:	89 c6                	mov    esi,eax
c0004baa:	53                   	push   ebx
c0004bab:	89 d3                	mov    ebx,edx
c0004bad:	0f b7 d1             	movzx  edx,cx
c0004bb0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bb3:	e8 bd ce ff ff       	call   c0001a75 <st_word>
c0004bb8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bbb:	75 0f                	jne    c0004bcc <st_clust.isra.1+0x25>
c0004bbd:	c1 e9 10             	shr    ecx,0x10
c0004bc0:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc3:	89 ca                	mov    edx,ecx
c0004bc5:	5b                   	pop    ebx
c0004bc6:	5e                   	pop    esi
c0004bc7:	e9 a9 ce ff ff       	jmp    c0001a75 <st_word>
c0004bcc:	5b                   	pop    ebx
c0004bcd:	5e                   	pop    esi
c0004bce:	c3                   	ret    

c0004bcf <init_alloc_info.isra.2>:
c0004bcf:	56                   	push   esi
c0004bd0:	53                   	push   ebx
c0004bd1:	89 c6                	mov    esi,eax
c0004bd3:	89 d3                	mov    ebx,edx
c0004bd5:	51                   	push   ecx
c0004bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bd8:	83 c0 34             	add    eax,0x34
c0004bdb:	e8 30 ce ff ff       	call   c0001a10 <ld_dword>
c0004be0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004be5:	83 c0 38             	add    eax,0x38
c0004be8:	e8 3b ce ff ff       	call   c0001a28 <ld_qword>
c0004bed:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bf0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004bf3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf5:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004bf8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bff:	83 e0 02             	and    eax,0x2
c0004c02:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c05:	5b                   	pop    ebx
c0004c06:	5b                   	pop    ebx
c0004c07:	5e                   	pop    esi
c0004c08:	c3                   	ret    

c0004c09 <follow_path>:
c0004c09:	56                   	push   esi
c0004c0a:	53                   	push   ebx
c0004c0b:	89 c3                	mov    ebx,eax
c0004c0d:	83 ec 14             	sub    esp,0x14
c0004c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c14:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c1c:	80 fa 5c             	cmp    dl,0x5c
c0004c1f:	75 07                	jne    c0004c28 <follow_path+0x1f>
c0004c21:	40                   	inc    eax
c0004c22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c26:	eb ee                	jmp    c0004c16 <follow_path+0xd>
c0004c28:	80 fa 2f             	cmp    dl,0x2f
c0004c2b:	74 f4                	je     c0004c21 <follow_path+0x18>
c0004c2d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c34:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c3e:	77 52                	ja     c0004c92 <follow_path+0x89>
c0004c40:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c44:	31 d2                	xor    edx,edx
c0004c46:	89 d8                	mov    eax,ebx
c0004c48:	e8 12 e3 ff ff       	call   c0002f5f <dir_sdi>
c0004c4d:	eb 7c                	jmp    c0004ccb <follow_path+0xc2>
c0004c4f:	89 d8                	mov    eax,ebx
c0004c51:	e8 6e f2 ff ff       	call   c0003ec4 <dir_find>
c0004c56:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	75 46                	jne    c0004ca3 <follow_path+0x9a>
c0004c5d:	80 e2 04             	and    dl,0x4
c0004c60:	75 69                	jne    c0004ccb <follow_path+0xc2>
c0004c62:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c66:	74 5e                	je     c0004cc6 <follow_path+0xbd>
c0004c68:	8a 06                	mov    al,BYTE PTR [esi]
c0004c6a:	3c 04                	cmp    al,0x4
c0004c6c:	75 41                	jne    c0004caf <follow_path+0xa6>
c0004c6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c71:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c75:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c78:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c7b:	30 c0                	xor    al,al
c0004c7d:	09 d0                	or     eax,edx
c0004c7f:	89 da                	mov    edx,ebx
c0004c81:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c87:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c8a:	8d 46 10             	lea    eax,[esi+0x10]
c0004c8d:	e8 3d ff ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004c92:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 a9 ed ff ff       	call   c0003a46 <create_name>
c0004c9d:	85 c0                	test   eax,eax
c0004c9f:	74 ae                	je     c0004c4f <follow_path+0x46>
c0004ca1:	eb 28                	jmp    c0004ccb <follow_path+0xc2>
c0004ca3:	83 f8 04             	cmp    eax,0x4
c0004ca6:	75 23                	jne    c0004ccb <follow_path+0xc2>
c0004ca8:	80 e2 04             	and    dl,0x4
c0004cab:	74 19                	je     c0004cc6 <follow_path+0xbd>
c0004cad:	eb 1c                	jmp    c0004ccb <follow_path+0xc2>
c0004caf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cb2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cb8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cbc:	e8 bd fe ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004cc1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cc4:	eb cc                	jmp    c0004c92 <follow_path+0x89>
c0004cc6:	b8 05 00 00 00       	mov    eax,0x5
c0004ccb:	83 c4 14             	add    esp,0x14
c0004cce:	5b                   	pop    ebx
c0004ccf:	5e                   	pop    esi
c0004cd0:	c3                   	ret    

c0004cd1 <f_mount>:
c0004cd1:	53                   	push   ebx
c0004cd2:	83 ec 18             	sub    esp,0x18
c0004cd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cd9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004ce5:	e8 fb d2 ff ff       	call   c0001fe5 <get_ldnumber>
c0004cea:	89 c2                	mov    edx,eax
c0004cec:	b8 0b 00 00 00       	mov    eax,0xb
c0004cf1:	85 d2                	test   edx,edx
c0004cf3:	78 39                	js     c0004d2e <f_mount+0x5d>
c0004cf5:	8b 04 95 20 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd55e0]
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	74 03                	je     c0004d03 <f_mount+0x32>
c0004d00:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d07:	85 c0                	test   eax,eax
c0004d09:	74 03                	je     c0004d0e <f_mount+0x3d>
c0004d0b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d12:	89 04 95 20 aa 02 c0 	mov    DWORD PTR [edx*4-0x3ffd55e0],eax
c0004d19:	31 c0                	xor    eax,eax
c0004d1b:	84 db                	test   bl,bl
c0004d1d:	74 0f                	je     c0004d2e <f_mount+0x5d>
c0004d1f:	31 c9                	xor    ecx,ecx
c0004d21:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d29:	e8 65 d7 ff ff       	call   c0002493 <mount_volume>
c0004d2e:	83 c4 18             	add    esp,0x18
c0004d31:	5b                   	pop    ebx
c0004d32:	c3                   	ret    

c0004d33 <f_open>:
c0004d33:	55                   	push   ebp
c0004d34:	bd 09 00 00 00       	mov    ebp,0x9
c0004d39:	57                   	push   edi
c0004d3a:	56                   	push   esi
c0004d3b:	53                   	push   ebx
c0004d3c:	83 ec 7c             	sub    esp,0x7c
c0004d3f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d46:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d4d:	85 db                	test   ebx,ebx
c0004d4f:	0f 84 10 04 00 00    	je     c0005165 <f_open+0x432>
c0004d55:	89 fe                	mov    esi,edi
c0004d57:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d5b:	83 e6 3f             	and    esi,0x3f
c0004d5e:	89 f0                	mov    eax,esi
c0004d60:	0f b6 c8             	movzx  ecx,al
c0004d63:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d6a:	e8 24 d7 ff ff       	call   c0002493 <mount_volume>
c0004d6f:	89 c5                	mov    ebp,eax
c0004d71:	85 c0                	test   eax,eax
c0004d73:	0f 85 e6 03 00 00    	jne    c000515f <f_open+0x42c>
c0004d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7d:	bd 11 00 00 00       	mov    ebp,0x11
c0004d82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d86:	83 ec 0c             	sub    esp,0xc
c0004d89:	68 60 04 00 00       	push   0x460
c0004d8e:	e8 a3 34 00 00       	call   c0008236 <ff_memalloc>
c0004d93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d97:	83 c4 10             	add    esp,0x10
c0004d9a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d9f:	0f 84 c0 03 00 00    	je     c0005165 <f_open+0x432>
c0004da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dad:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004db3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004db6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004db9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dc0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dc4:	e8 40 fe ff ff       	call   c0004c09 <follow_path>
c0004dc9:	89 c5                	mov    ebp,eax
c0004dcb:	85 c0                	test   eax,eax
c0004dcd:	75 0c                	jne    c0004ddb <f_open+0xa8>
c0004dcf:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dd4:	79 05                	jns    c0004ddb <f_open+0xa8>
c0004dd6:	bd 06 00 00 00       	mov    ebp,0x6
c0004ddb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004de1:	0f 84 84 01 00 00    	je     c0004f6b <f_open+0x238>
c0004de7:	85 ed                	test   ebp,ebp
c0004de9:	74 20                	je     c0004e0b <f_open+0xd8>
c0004deb:	83 fd 04             	cmp    ebp,0x4
c0004dee:	0f 85 58 03 00 00    	jne    c000514c <f_open+0x419>
c0004df4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df8:	83 ce 08             	or     esi,0x8
c0004dfb:	e8 8a f2 ff ff       	call   c000408a <dir_register>
c0004e00:	89 c5                	mov    ebp,eax
c0004e02:	85 c0                	test   eax,eax
c0004e04:	74 2f                	je     c0004e35 <f_open+0x102>
c0004e06:	e9 41 03 00 00       	jmp    c000514c <f_open+0x419>
c0004e0b:	bd 07 00 00 00       	mov    ebp,0x7
c0004e10:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e15:	0f 85 31 03 00 00    	jne    c000514c <f_open+0x419>
c0004e1b:	bd 08 00 00 00       	mov    ebp,0x8
c0004e20:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e26:	0f 85 20 03 00 00    	jne    c000514c <f_open+0x419>
c0004e2c:	83 e7 08             	and    edi,0x8
c0004e2f:	0f 84 65 01 00 00    	je     c0004f9a <f_open+0x267>
c0004e35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e39:	8a 02                	mov    al,BYTE PTR [edx]
c0004e3b:	3c 04                	cmp    al,0x4
c0004e3d:	0f 85 97 00 00 00    	jne    c0004eda <f_open+0x1a7>
c0004e43:	8d 42 10             	lea    eax,[edx+0x10]
c0004e46:	89 13                	mov    DWORD PTR [ebx],edx
c0004e48:	89 da                	mov    edx,ebx
c0004e4a:	e8 80 fd ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004e4f:	31 d2                	xor    edx,edx
c0004e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e55:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e5d:	83 c0 02             	add    eax,0x2
c0004e60:	e8 32 cc ff ff       	call   c0001a97 <mem_set>
c0004e65:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e6a:	31 d2                	xor    edx,edx
c0004e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e73:	83 c0 26             	add    eax,0x26
c0004e76:	e8 1c cc ff ff       	call   c0001a97 <mem_set>
c0004e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e82:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e86:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8e:	83 c0 08             	add    eax,0x8
c0004e91:	e8 e3 cb ff ff       	call   c0001a79 <st_dword>
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9d:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ea1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ea5:	e8 b7 ea ff ff       	call   c0003961 <store_xdir>
c0004eaa:	89 c5                	mov    ebp,eax
c0004eac:	85 c0                	test   eax,eax
c0004eae:	0f 85 98 02 00 00    	jne    c000514c <f_open+0x419>
c0004eb4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eb7:	85 d2                	test   edx,edx
c0004eb9:	0f 84 db 00 00 00    	je     c0004f9a <f_open+0x267>
c0004ebf:	31 c9                	xor    ecx,ecx
c0004ec1:	89 d8                	mov    eax,ebx
c0004ec3:	e8 8e e3 ff ff       	call   c0003256 <remove_chain>
c0004ec8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ecc:	89 c5                	mov    ebp,eax
c0004ece:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed1:	48                   	dec    eax
c0004ed2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ed5:	e9 b8 00 00 00       	jmp    c0004f92 <f_open+0x25f>
c0004eda:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004ede:	89 ea                	mov    edx,ebp
c0004ee0:	e8 99 fc ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ee5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eea:	89 c7                	mov    edi,eax
c0004eec:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004eef:	e8 85 cb ff ff       	call   c0001a79 <st_dword>
c0004ef4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ef8:	31 c9                	xor    ecx,ecx
c0004efa:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f02:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f06:	e8 9c fc ff ff       	call   c0004ba7 <st_clust.isra.1>
c0004f0b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f0f:	31 d2                	xor    edx,edx
c0004f11:	83 c0 1c             	add    eax,0x1c
c0004f14:	e8 60 cb ff ff       	call   c0001a79 <st_dword>
c0004f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f1d:	85 ff                	test   edi,edi
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	74 75                	je     c0004f9a <f_open+0x267>
c0004f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f29:	31 c9                	xor    ecx,ecx
c0004f2b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f2e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f39:	89 fa                	mov    edx,edi
c0004f3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f3f:	e8 12 e3 ff ff       	call   c0003256 <remove_chain>
c0004f44:	89 c5                	mov    ebp,eax
c0004f46:	85 c0                	test   eax,eax
c0004f48:	0f 85 fe 01 00 00    	jne    c000514c <f_open+0x419>
c0004f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	4f                   	dec    edi
c0004f5b:	e8 81 d2 ff ff       	call   c00021e1 <move_window>
c0004f60:	89 c5                	mov    ebp,eax
c0004f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f66:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f69:	eb 27                	jmp    c0004f92 <f_open+0x25f>
c0004f6b:	85 ed                	test   ebp,ebp
c0004f6d:	0f 85 d9 01 00 00    	jne    c000514c <f_open+0x419>
c0004f73:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f77:	bd 04 00 00 00       	mov    ebp,0x4
c0004f7c:	a8 10                	test   al,0x10
c0004f7e:	0f 85 c8 01 00 00    	jne    c000514c <f_open+0x419>
c0004f84:	83 e7 02             	and    edi,0x2
c0004f87:	74 11                	je     c0004f9a <f_open+0x267>
c0004f89:	bd 07 00 00 00       	mov    ebp,0x7
c0004f8e:	a8 01                	test   al,0x1
c0004f90:	eb 02                	jmp    c0004f94 <f_open+0x261>
c0004f92:	85 ed                	test   ebp,ebp
c0004f94:	0f 85 b2 01 00 00    	jne    c000514c <f_open+0x419>
c0004f9a:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fa0:	74 03                	je     c0004fa5 <f_open+0x272>
c0004fa2:	83 ce 40             	or     esi,0x40
c0004fa5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fac:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004faf:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fb2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fb5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fb9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fbc:	8a 02                	mov    al,BYTE PTR [edx]
c0004fbe:	3c 04                	cmp    al,0x4
c0004fc0:	75 2a                	jne    c0004fec <f_open+0x2b9>
c0004fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fc6:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fcb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fd2:	30 c0                	xor    al,al
c0004fd4:	09 c8                	or     eax,ecx
c0004fd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fd9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004fdd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fe0:	8d 42 10             	lea    eax,[edx+0x10]
c0004fe3:	89 da                	mov    edx,ebx
c0004fe5:	e8 e5 fb ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004fea:	eb 1c                	jmp    c0005008 <f_open+0x2d5>
c0004fec:	89 fa                	mov    edx,edi
c0004fee:	e8 8b fb ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ff3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ff6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004ff9:	e8 12 ca ff ff       	call   c0001a10 <ld_dword>
c0004ffe:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005005:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005013:	89 03                	mov    DWORD PTR [ebx],eax
c0005015:	31 d2                	xor    edx,edx
c0005017:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000501b:	b9 00 02 00 00       	mov    ecx,0x200
c0005020:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005024:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005028:	89 f0                	mov    eax,esi
c000502a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005031:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005034:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000503b:	8d 43 50             	lea    eax,[ebx+0x50]
c000503e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005045:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000504c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005050:	e8 42 ca ff ff       	call   c0001a97 <mem_set>
c0005055:	83 e6 20             	and    esi,0x20
c0005058:	75 07                	jne    c0005061 <f_open+0x32e>
c000505a:	31 ed                	xor    ebp,ebp
c000505c:	e9 eb 00 00 00       	jmp    c000514c <f_open+0x419>
c0005061:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005064:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000506f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005073:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005077:	74 e1                	je     c000505a <f_open+0x327>
c0005079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000507d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005081:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005084:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000508b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000508e:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005092:	31 ff                	xor    edi,edi
c0005094:	c1 e5 09             	shl    ebp,0x9
c0005097:	89 ee                	mov    esi,ebp
c0005099:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000509d:	89 f8                	mov    eax,edi
c000509f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050a3:	73 22                	jae    c00050c7 <f_open+0x394>
c00050a5:	89 d8                	mov    eax,ebx
c00050a7:	e8 bd dc ff ff       	call   c0002d69 <get_fat>
c00050ac:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050b0:	89 c2                	mov    edx,eax
c00050b2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050b6:	83 f8 01             	cmp    eax,0x1
c00050b9:	76 10                	jbe    c00050cb <f_open+0x398>
c00050bb:	83 f8 ff             	cmp    eax,0xffffffff
c00050be:	75 d9                	jne    c0005099 <f_open+0x366>
c00050c0:	bd 01 00 00 00       	mov    ebp,0x1
c00050c5:	eb 09                	jmp    c00050d0 <f_open+0x39d>
c00050c7:	31 ed                	xor    ebp,ebp
c00050c9:	eb 05                	jmp    c00050d0 <f_open+0x39d>
c00050cb:	bd 02 00 00 00       	mov    ebp,0x2
c00050d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	75 75                	jne    c000514c <f_open+0x419>
c00050d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050db:	25 ff 01 00 00       	and    eax,0x1ff
c00050e0:	0f 84 74 ff ff ff    	je     c000505a <f_open+0x327>
c00050e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050ea:	bd 02 00 00 00       	mov    ebp,0x2
c00050ef:	89 c8                	mov    eax,ecx
c00050f1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00050f5:	e8 a2 cb ff ff       	call   c0001c9c <clst2sect>
c00050fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00050fe:	89 d7                	mov    edi,edx
c0005100:	09 c7                	or     edi,eax
c0005102:	74 48                	je     c000514c <f_open+0x419>
c0005104:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005108:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000510c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005114:	0f ac fe 09          	shrd   esi,edi,0x9
c0005118:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000511c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005120:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005123:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005127:	83 ec 0c             	sub    esp,0xc
c000512a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000512d:	6a 01                	push   0x1
c000512f:	52                   	push   edx
c0005130:	50                   	push   eax
c0005131:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005135:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005139:	50                   	push   eax
c000513a:	e8 79 c8 ff ff       	call   c00019b8 <disk_read>
c000513f:	83 c4 20             	add    esp,0x20
c0005142:	85 c0                	test   eax,eax
c0005144:	0f 95 c0             	setne  al
c0005147:	0f b6 c0             	movzx  eax,al
c000514a:	89 c5                	mov    ebp,eax
c000514c:	83 ec 0c             	sub    esp,0xc
c000514f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005153:	e8 f4 30 00 00       	call   c000824c <ff_memfree>
c0005158:	83 c4 10             	add    esp,0x10
c000515b:	85 ed                	test   ebp,ebp
c000515d:	74 06                	je     c0005165 <f_open+0x432>
c000515f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005165:	83 c4 7c             	add    esp,0x7c
c0005168:	89 e8                	mov    eax,ebp
c000516a:	5b                   	pop    ebx
c000516b:	5e                   	pop    esi
c000516c:	5f                   	pop    edi
c000516d:	5d                   	pop    ebp
c000516e:	c3                   	ret    

c000516f <f_read>:
c000516f:	55                   	push   ebp
c0005170:	57                   	push   edi
c0005171:	56                   	push   esi
c0005172:	53                   	push   ebx
c0005173:	83 ec 2c             	sub    esp,0x2c
c0005176:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000517a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005184:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005188:	89 d8                	mov    eax,ebx
c000518a:	e8 77 cf ff ff       	call   c0002106 <validate>
c000518f:	89 c5                	mov    ebp,eax
c0005191:	85 c0                	test   eax,eax
c0005193:	0f 85 4c 02 00 00    	jne    c00053e5 <f_read+0x276>
c0005199:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000519d:	85 ed                	test   ebp,ebp
c000519f:	0f 85 40 02 00 00    	jne    c00053e5 <f_read+0x276>
c00051a5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051a9:	0f 84 31 02 00 00    	je     c00053e0 <f_read+0x271>
c00051af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051b8:	bf 00 00 00 00       	mov    edi,0x0
c00051bd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051c0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051c4:	89 d1                	mov    ecx,edx
c00051c6:	19 f9                	sbb    ecx,edi
c00051c8:	0f 83 cf 00 00 00    	jae    c000529d <f_read+0x12e>
c00051ce:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051d2:	e9 c6 00 00 00       	jmp    c000529d <f_read+0x12e>
c00051d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051da:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051dd:	89 d0                	mov    eax,edx
c00051df:	25 ff 01 00 00       	and    eax,0x1ff
c00051e4:	0f 85 c9 01 00 00    	jne    c00053b3 <f_read+0x244>
c00051ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ee:	89 d6                	mov    esi,edx
c00051f0:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00051f4:	89 cf                	mov    edi,ecx
c00051f6:	48                   	dec    eax
c00051f7:	0f ac fe 09          	shrd   esi,edi,0x9
c00051fb:	21 f0                	and    eax,esi
c00051fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005201:	0f 84 a6 00 00 00    	je     c00052ad <f_read+0x13e>
c0005207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000520b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000520e:	89 c8                	mov    eax,ecx
c0005210:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005213:	e8 84 ca ff ff       	call   c0001c9c <clst2sect>
c0005218:	89 d7                	mov    edi,edx
c000521a:	09 c7                	or     edi,eax
c000521c:	0f 84 b4 00 00 00    	je     c00052d6 <f_read+0x167>
c0005222:	31 ff                	xor    edi,edi
c0005224:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005228:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000522b:	01 c6                	add    esi,eax
c000522d:	11 d7                	adc    edi,edx
c000522f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005237:	0f 86 fd 00 00 00    	jbe    c000533a <f_read+0x1cb>
c000523d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005241:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005245:	c1 e8 09             	shr    eax,0x9
c0005248:	89 04 24             	mov    DWORD PTR [esp],eax
c000524b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000524f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005252:	39 c2                	cmp    edx,eax
c0005254:	76 07                	jbe    c000525d <f_read+0xee>
c0005256:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000525a:	89 04 24             	mov    DWORD PTR [esp],eax
c000525d:	83 ec 0c             	sub    esp,0xc
c0005260:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005264:	57                   	push   edi
c0005265:	56                   	push   esi
c0005266:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000526a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000526e:	50                   	push   eax
c000526f:	e8 44 c7 ff ff       	call   c00019b8 <disk_read>
c0005274:	83 c4 20             	add    esp,0x20
c0005277:	85 c0                	test   eax,eax
c0005279:	75 6e                	jne    c00052e9 <f_read+0x17a>
c000527b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000527f:	78 7e                	js     c00052ff <f_read+0x190>
c0005281:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005284:	c1 e6 09             	shl    esi,0x9
c0005287:	31 ff                	xor    edi,edi
c0005289:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000528d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005291:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005295:	01 30                	add    DWORD PTR [eax],esi
c0005297:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c000529a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000529d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052a2:	0f 85 2f ff ff ff    	jne    c00051d7 <f_read+0x68>
c00052a8:	e9 38 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052ad:	89 c8                	mov    eax,ecx
c00052af:	09 d0                	or     eax,edx
c00052b1:	75 05                	jne    c00052b8 <f_read+0x149>
c00052b3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052b6:	eb 19                	jmp    c00052d1 <f_read+0x162>
c00052b8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052bc:	74 09                	je     c00052c7 <f_read+0x158>
c00052be:	89 d8                	mov    eax,ebx
c00052c0:	e8 f8 c9 ff ff       	call   c0001cbd <clmt_clust>
c00052c5:	eb 0a                	jmp    c00052d1 <f_read+0x162>
c00052c7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052ca:	89 d8                	mov    eax,ebx
c00052cc:	e8 98 da ff ff       	call   c0002d69 <get_fat>
c00052d1:	83 f8 01             	cmp    eax,0x1
c00052d4:	77 0e                	ja     c00052e4 <f_read+0x175>
c00052d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052da:	bd 02 00 00 00       	mov    ebp,0x2
c00052df:	e9 01 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052e4:	83 f8 ff             	cmp    eax,0xffffffff
c00052e7:	75 0e                	jne    c00052f7 <f_read+0x188>
c00052e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052ed:	bd 01 00 00 00       	mov    ebp,0x1
c00052f2:	e9 ee 00 00 00       	jmp    c00053e5 <f_read+0x276>
c00052f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052fa:	e9 08 ff ff ff       	jmp    c0005207 <f_read+0x98>
c00052ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005302:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005305:	29 f0                	sub    eax,esi
c0005307:	19 fa                	sbb    edx,edi
c0005309:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530c:	89 d7                	mov    edi,edx
c000530e:	ba 00 00 00 00       	mov    edx,0x0
c0005313:	89 f9                	mov    ecx,edi
c0005315:	19 d1                	sbb    ecx,edx
c0005317:	0f 83 64 ff ff ff    	jae    c0005281 <f_read+0x112>
c000531d:	89 c7                	mov    edi,eax
c000531f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005322:	c1 e7 09             	shl    edi,0x9
c0005325:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005329:	b9 00 02 00 00       	mov    ecx,0x200
c000532e:	01 f8                	add    eax,edi
c0005330:	e8 4d c7 ff ff       	call   c0001a82 <mem_cpy>
c0005335:	e9 47 ff ff ff       	jmp    c0005281 <f_read+0x112>
c000533a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005340:	89 04 24             	mov    DWORD PTR [esp],eax
c0005343:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005347:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000534b:	75 05                	jne    c0005352 <f_read+0x1e3>
c000534d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005350:	74 5b                	je     c00053ad <f_read+0x23e>
c0005352:	8d 43 50             	lea    eax,[ebx+0x50]
c0005355:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535d:	79 2a                	jns    c0005389 <f_read+0x21a>
c000535f:	83 ec 0c             	sub    esp,0xc
c0005362:	6a 01                	push   0x1
c0005364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005370:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005374:	50                   	push   eax
c0005375:	e8 54 c6 ff ff       	call   c00019ce <disk_write>
c000537a:	83 c4 20             	add    esp,0x20
c000537d:	85 c0                	test   eax,eax
c000537f:	0f 85 64 ff ff ff    	jne    c00052e9 <f_read+0x17a>
c0005385:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	57                   	push   edi
c000538f:	56                   	push   esi
c0005390:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005394:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539c:	50                   	push   eax
c000539d:	e8 16 c6 ff ff       	call   c00019b8 <disk_read>
c00053a2:	83 c4 20             	add    esp,0x20
c00053a5:	85 c0                	test   eax,eax
c00053a7:	0f 85 3c ff ff ff    	jne    c00052e9 <f_read+0x17a>
c00053ad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053b0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b6:	ba 00 02 00 00       	mov    edx,0x200
c00053bb:	25 ff 01 00 00       	and    eax,0x1ff
c00053c0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c4:	29 c2                	sub    edx,eax
c00053c6:	39 d6                	cmp    esi,edx
c00053c8:	76 02                	jbe    c00053cc <f_read+0x25d>
c00053ca:	89 d6                	mov    esi,edx
c00053cc:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053d0:	89 f1                	mov    ecx,esi
c00053d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d6:	e8 a7 c6 ff ff       	call   c0001a82 <mem_cpy>
c00053db:	e9 a7 fe ff ff       	jmp    c0005287 <f_read+0x118>
c00053e0:	bd 07 00 00 00       	mov    ebp,0x7
c00053e5:	83 c4 2c             	add    esp,0x2c
c00053e8:	89 e8                	mov    eax,ebp
c00053ea:	5b                   	pop    ebx
c00053eb:	5e                   	pop    esi
c00053ec:	5f                   	pop    edi
c00053ed:	5d                   	pop    ebp
c00053ee:	c3                   	ret    

c00053ef <f_write>:
c00053ef:	55                   	push   ebp
c00053f0:	57                   	push   edi
c00053f1:	56                   	push   esi
c00053f2:	53                   	push   ebx
c00053f3:	83 ec 2c             	sub    esp,0x2c
c00053f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053fa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005404:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005408:	89 d8                	mov    eax,ebx
c000540a:	e8 f7 cc ff ff       	call   c0002106 <validate>
c000540f:	89 c5                	mov    ebp,eax
c0005411:	85 c0                	test   eax,eax
c0005413:	0f 85 86 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005419:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541d:	85 ed                	test   ebp,ebp
c000541f:	0f 85 7a 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005425:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005429:	0f 84 6b 02 00 00    	je     c000569a <f_write+0x2ab>
c000542f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005433:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005436:	0f 84 43 01 00 00    	je     c000557f <f_write+0x190>
c000543c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000543f:	89 c1                	mov    ecx,eax
c0005441:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005445:	0f 83 34 01 00 00    	jae    c000557f <f_write+0x190>
c000544b:	f7 d0                	not    eax
c000544d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005451:	e9 29 01 00 00       	jmp    c000557f <f_write+0x190>
c0005456:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005459:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545c:	89 d0                	mov    eax,edx
c000545e:	25 ff 01 00 00       	and    eax,0x1ff
c0005463:	0f 85 00 02 00 00    	jne    c0005669 <f_write+0x27a>
c0005469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546d:	89 d6                	mov    esi,edx
c000546f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005473:	89 cf                	mov    edi,ecx
c0005475:	48                   	dec    eax
c0005476:	0f ac fe 09          	shrd   esi,edi,0x9
c000547a:	21 f0                	and    eax,esi
c000547c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005480:	0f 84 06 01 00 00    	je     c000558c <f_write+0x19d>
c0005486:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000548a:	0f 88 6e 01 00 00    	js     c00055fe <f_write+0x20f>
c0005490:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005494:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005497:	89 c8                	mov    eax,ecx
c0005499:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000549d:	e8 fa c7 ff ff       	call   c0001c9c <clst2sect>
c00054a2:	89 d1                	mov    ecx,edx
c00054a4:	09 c1                	or     ecx,eax
c00054a6:	0f 84 1c 01 00 00    	je     c00055c8 <f_write+0x1d9>
c00054ac:	31 ff                	xor    edi,edi
c00054ae:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054b6:	01 c6                	add    esi,eax
c00054b8:	11 d7                	adc    edi,edx
c00054ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054c2:	0f 86 63 01 00 00    	jbe    c000562b <f_write+0x23c>
c00054c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054d0:	c1 e8 09             	shr    eax,0x9
c00054d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054d7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054db:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054df:	39 c2                	cmp    edx,eax
c00054e1:	76 08                	jbe    c00054eb <f_write+0xfc>
c00054e3:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054eb:	83 ec 0c             	sub    esp,0xc
c00054ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054f2:	57                   	push   edi
c00054f3:	56                   	push   esi
c00054f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054fc:	50                   	push   eax
c00054fd:	e8 cc c4 ff ff       	call   c00019ce <disk_write>
c0005502:	83 c4 20             	add    esp,0x20
c0005505:	85 c0                	test   eax,eax
c0005507:	0f 85 ce 00 00 00    	jne    c00055db <f_write+0x1ec>
c000550d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005510:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005513:	29 f0                	sub    eax,esi
c0005515:	19 fa                	sbb    edx,edi
c0005517:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000551b:	89 d7                	mov    edi,edx
c000551d:	ba 00 00 00 00       	mov    edx,0x0
c0005522:	89 f9                	mov    ecx,edi
c0005524:	19 d1                	sbb    ecx,edx
c0005526:	73 1c                	jae    c0005544 <f_write+0x155>
c0005528:	89 c7                	mov    edi,eax
c000552a:	b9 00 02 00 00       	mov    ecx,0x200
c000552f:	c1 e7 09             	shl    edi,0x9
c0005532:	8d 43 50             	lea    eax,[ebx+0x50]
c0005535:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005539:	89 fa                	mov    edx,edi
c000553b:	e8 42 c5 ff ff       	call   c0001a82 <mem_cpy>
c0005540:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005544:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005548:	c1 e6 09             	shl    esi,0x9
c000554b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554f:	31 ff                	xor    edi,edi
c0005551:	01 30                	add    DWORD PTR [eax],esi
c0005553:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005557:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000555b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000555e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005561:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005564:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005567:	89 c1                	mov    ecx,eax
c0005569:	39 f2                	cmp    edx,esi
c000556b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000556e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005571:	19 f9                	sbb    ecx,edi
c0005573:	73 04                	jae    c0005579 <f_write+0x18a>
c0005575:	89 f2                	mov    edx,esi
c0005577:	89 f8                	mov    eax,edi
c0005579:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000557c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000557f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005584:	0f 85 cc fe ff ff    	jne    c0005456 <f_write+0x67>
c000558a:	eb 2e                	jmp    c00055ba <f_write+0x1cb>
c000558c:	89 c8                	mov    eax,ecx
c000558e:	09 d0                	or     eax,edx
c0005590:	75 0b                	jne    c000559d <f_write+0x1ae>
c0005592:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005595:	31 d2                	xor    edx,edx
c0005597:	85 c0                	test   eax,eax
c0005599:	75 28                	jne    c00055c3 <f_write+0x1d4>
c000559b:	eb 12                	jmp    c00055af <f_write+0x1c0>
c000559d:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055a1:	74 09                	je     c00055ac <f_write+0x1bd>
c00055a3:	89 d8                	mov    eax,ebx
c00055a5:	e8 13 c7 ff ff       	call   c0001cbd <clmt_clust>
c00055aa:	eb 0a                	jmp    c00055b6 <f_write+0x1c7>
c00055ac:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055af:	89 d8                	mov    eax,ebx
c00055b1:	e8 a1 da ff ff       	call   c0003057 <create_chain>
c00055b6:	85 c0                	test   eax,eax
c00055b8:	75 09                	jne    c00055c3 <f_write+0x1d4>
c00055ba:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055be:	e9 dc 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055c3:	83 f8 01             	cmp    eax,0x1
c00055c6:	75 0e                	jne    c00055d6 <f_write+0x1e7>
c00055c8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055cc:	bd 02 00 00 00       	mov    ebp,0x2
c00055d1:	e9 c9 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055d6:	83 f8 ff             	cmp    eax,0xffffffff
c00055d9:	75 0e                	jne    c00055e9 <f_write+0x1fa>
c00055db:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055df:	bd 01 00 00 00       	mov    ebp,0x1
c00055e4:	e9 b6 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055e9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055ec:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055f0:	0f 85 90 fe ff ff    	jne    c0005486 <f_write+0x97>
c00055f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055f9:	e9 88 fe ff ff       	jmp    c0005486 <f_write+0x97>
c00055fe:	83 ec 0c             	sub    esp,0xc
c0005601:	8d 43 50             	lea    eax,[ebx+0x50]
c0005604:	6a 01                	push   0x1
c0005606:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005609:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000560c:	50                   	push   eax
c000560d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005611:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005615:	50                   	push   eax
c0005616:	e8 b3 c3 ff ff       	call   c00019ce <disk_write>
c000561b:	83 c4 20             	add    esp,0x20
c000561e:	85 c0                	test   eax,eax
c0005620:	75 b9                	jne    c00055db <f_write+0x1ec>
c0005622:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005626:	e9 65 fe ff ff       	jmp    c0005490 <f_write+0xa1>
c000562b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000562e:	75 05                	jne    c0005635 <f_write+0x246>
c0005630:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005633:	74 2e                	je     c0005663 <f_write+0x274>
c0005635:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005638:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000563b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000563e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005641:	73 20                	jae    c0005663 <f_write+0x274>
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	8d 43 50             	lea    eax,[ebx+0x50]
c0005649:	6a 01                	push   0x1
c000564b:	57                   	push   edi
c000564c:	56                   	push   esi
c000564d:	50                   	push   eax
c000564e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005652:	50                   	push   eax
c0005653:	e8 60 c3 ff ff       	call   c00019b8 <disk_read>
c0005658:	83 c4 20             	add    esp,0x20
c000565b:	85 c0                	test   eax,eax
c000565d:	0f 85 78 ff ff ff    	jne    c00055db <f_write+0x1ec>
c0005663:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005666:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005669:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000566c:	ba 00 02 00 00       	mov    edx,0x200
c0005671:	25 ff 01 00 00       	and    eax,0x1ff
c0005676:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000567a:	29 c2                	sub    edx,eax
c000567c:	39 d6                	cmp    esi,edx
c000567e:	76 02                	jbe    c0005682 <f_write+0x293>
c0005680:	89 d6                	mov    esi,edx
c0005682:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005686:	89 f1                	mov    ecx,esi
c0005688:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000568c:	e8 f1 c3 ff ff       	call   c0001a82 <mem_cpy>
c0005691:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005695:	e9 b1 fe ff ff       	jmp    c000554b <f_write+0x15c>
c000569a:	bd 07 00 00 00       	mov    ebp,0x7
c000569f:	83 c4 2c             	add    esp,0x2c
c00056a2:	89 e8                	mov    eax,ebp
c00056a4:	5b                   	pop    ebx
c00056a5:	5e                   	pop    esi
c00056a6:	5f                   	pop    edi
c00056a7:	5d                   	pop    ebp
c00056a8:	c3                   	ret    

c00056a9 <f_sync>:
c00056a9:	56                   	push   esi
c00056aa:	53                   	push   ebx
c00056ab:	83 ec 64             	sub    esp,0x64
c00056ae:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056b2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056b6:	89 d8                	mov    eax,ebx
c00056b8:	e8 49 ca ff ff       	call   c0002106 <validate>
c00056bd:	85 c0                	test   eax,eax
c00056bf:	0f 85 ba 01 00 00    	jne    c000587f <f_sync+0x1d6>
c00056c5:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056c8:	f6 c2 40             	test   dl,0x40
c00056cb:	0f 84 ae 01 00 00    	je     c000587f <f_sync+0x1d6>
c00056d1:	84 d2                	test   dl,dl
c00056d3:	79 33                	jns    c0005708 <f_sync+0x5f>
c00056d5:	83 ec 0c             	sub    esp,0xc
c00056d8:	8d 43 50             	lea    eax,[ebx+0x50]
c00056db:	6a 01                	push   0x1
c00056dd:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056e0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056e3:	50                   	push   eax
c00056e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056ec:	50                   	push   eax
c00056ed:	e8 dc c2 ff ff       	call   c00019ce <disk_write>
c00056f2:	83 c4 20             	add    esp,0x20
c00056f5:	89 c2                	mov    edx,eax
c00056f7:	b8 01 00 00 00       	mov    eax,0x1
c00056fc:	85 d2                	test   edx,edx
c00056fe:	0f 85 7b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005704:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000570f:	0f 85 11 01 00 00    	jne    c0005826 <f_sync+0x17d>
c0005715:	89 d8                	mov    eax,ebx
c0005717:	e8 13 d6 ff ff       	call   c0002d2f <fill_first_frag>
c000571c:	85 c0                	test   eax,eax
c000571e:	0f 85 5b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005724:	83 c9 ff             	or     ecx,0xffffffff
c0005727:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000572a:	89 d8                	mov    eax,ebx
c000572c:	e8 c9 d5 ff ff       	call   c0002cfa <fill_last_frag>
c0005731:	85 c0                	test   eax,eax
c0005733:	0f 85 46 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005739:	83 ec 0c             	sub    esp,0xc
c000573c:	68 60 04 00 00       	push   0x460
c0005741:	e8 f0 2a 00 00       	call   c0008236 <ff_memalloc>
c0005746:	83 c4 10             	add    esp,0x10
c0005749:	89 c6                	mov    esi,eax
c000574b:	b8 11 00 00 00       	mov    eax,0x11
c0005750:	85 f6                	test   esi,esi
c0005752:	0f 84 27 01 00 00    	je     c000587f <f_sync+0x1d6>
c0005758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005762:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005765:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005768:	89 da                	mov    edx,ebx
c000576a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000576e:	e8 af df ff ff       	call   c0003722 <load_obj_xdir>
c0005773:	85 c0                	test   eax,eax
c0005775:	0f 85 95 00 00 00    	jne    c0005810 <f_sync+0x167>
c000577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005782:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005786:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005789:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000578c:	83 ca 01             	or     edx,0x1
c000578f:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005792:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005795:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005798:	83 c0 34             	add    eax,0x34
c000579b:	e8 d9 c2 ff ff       	call   c0001a79 <st_dword>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057aa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ad:	83 c0 38             	add    eax,0x38
c00057b0:	e8 c7 c2 ff ff       	call   c0001a7c <st_qword>
c00057b5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c2:	83 c0 28             	add    eax,0x28
c00057c5:	e8 b2 c2 ff ff       	call   c0001a7c <st_qword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d6:	83 c0 0c             	add    eax,0xc
c00057d9:	e8 9b c2 ff ff       	call   c0001a79 <st_dword>
c00057de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057e5:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057e9:	31 d2                	xor    edx,edx
c00057eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ee:	83 c0 10             	add    eax,0x10
c00057f1:	e8 83 c2 ff ff       	call   c0001a79 <st_dword>
c00057f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057fa:	e8 62 e1 ff ff       	call   c0003961 <store_xdir>
c00057ff:	85 c0                	test   eax,eax
c0005801:	75 0d                	jne    c0005810 <f_sync+0x167>
c0005803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005807:	e8 00 eb ff ff       	call   c000430c <sync_fs>
c000580c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005810:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005814:	83 ec 0c             	sub    esp,0xc
c0005817:	56                   	push   esi
c0005818:	e8 2f 2a 00 00       	call   c000824c <ff_memfree>
c000581d:	83 c4 10             	add    esp,0x10
c0005820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005824:	eb 59                	jmp    c000587f <f_sync+0x1d6>
c0005826:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005829:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000582c:	e8 b0 c9 ff ff       	call   c00021e1 <move_window>
c0005831:	85 c0                	test   eax,eax
c0005833:	75 4a                	jne    c000587f <f_sync+0x1d6>
c0005835:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005838:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000583c:	89 f2                	mov    edx,esi
c000583e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005841:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005843:	e8 5f f3 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0005848:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000584b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000584e:	e8 26 c2 ff ff       	call   c0001a79 <st_dword>
c0005853:	8d 46 16             	lea    eax,[esi+0x16]
c0005856:	ba 00 00 21 50       	mov    edx,0x50210000
c000585b:	e8 19 c2 ff ff       	call   c0001a79 <st_dword>
c0005860:	8d 46 12             	lea    eax,[esi+0x12]
c0005863:	31 d2                	xor    edx,edx
c0005865:	e8 0b c2 ff ff       	call   c0001a75 <st_word>
c000586a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005876:	e8 91 ea ff ff       	call   c000430c <sync_fs>
c000587b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587f:	83 c4 64             	add    esp,0x64
c0005882:	5b                   	pop    ebx
c0005883:	5e                   	pop    esi
c0005884:	c3                   	ret    

c0005885 <f_close>:
c0005885:	53                   	push   ebx
c0005886:	83 ec 24             	sub    esp,0x24
c0005889:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000588d:	53                   	push   ebx
c000588e:	e8 16 fe ff ff       	call   c00056a9 <f_sync>
c0005893:	83 c4 10             	add    esp,0x10
c0005896:	85 c0                	test   eax,eax
c0005898:	75 15                	jne    c00058af <f_close+0x2a>
c000589a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000589e:	89 d8                	mov    eax,ebx
c00058a0:	e8 61 c8 ff ff       	call   c0002106 <validate>
c00058a5:	85 c0                	test   eax,eax
c00058a7:	75 06                	jne    c00058af <f_close+0x2a>
c00058a9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058af:	83 c4 18             	add    esp,0x18
c00058b2:	5b                   	pop    ebx
c00058b3:	c3                   	ret    

c00058b4 <f_lseek>:
c00058b4:	55                   	push   ebp
c00058b5:	57                   	push   edi
c00058b6:	56                   	push   esi
c00058b7:	53                   	push   ebx
c00058b8:	83 ec 3c             	sub    esp,0x3c
c00058bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058c3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00058ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058ce:	89 d8                	mov    eax,ebx
c00058d0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058d4:	e8 2d c8 ff ff       	call   c0002106 <validate>
c00058d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058dd:	85 c0                	test   eax,eax
c00058df:	0f 85 7a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058e5:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058ed:	85 c0                	test   eax,eax
c00058ef:	0f 85 6a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00058f9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058fc:	74 0c                	je     c000590a <f_lseek+0x56>
c00058fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005901:	85 c0                	test   eax,eax
c0005903:	75 1f                	jne    c0005924 <f_lseek+0x70>
c0005905:	e9 b5 01 00 00       	jmp    c0005abf <f_lseek+0x20b>
c000590a:	83 c9 ff             	or     ecx,0xffffffff
c000590d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005910:	89 d8                	mov    eax,ebx
c0005912:	e8 e3 d3 ff ff       	call   c0002cfa <fill_last_frag>
c0005917:	85 c0                	test   eax,eax
c0005919:	74 e3                	je     c00058fe <f_lseek+0x4a>
c000591b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591f:	e9 3b 04 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005924:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005929:	0f 85 ac 00 00 00    	jne    c00059db <f_lseek+0x127>
c000592f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005933:	0f 85 a2 00 00 00    	jne    c00059db <f_lseek+0x127>
c0005939:	8d 78 04             	lea    edi,[eax+0x4]
c000593c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000593f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005941:	be 02 00 00 00       	mov    esi,0x2
c0005946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000594a:	85 ed                	test   ebp,ebp
c000594c:	74 73                	je     c00059c1 <f_lseek+0x10d>
c000594e:	89 e9                	mov    ecx,ebp
c0005950:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005957:	ff 04 24             	inc    DWORD PTR [esp]
c000595a:	89 ca                	mov    edx,ecx
c000595c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005960:	89 d8                	mov    eax,ebx
c0005962:	e8 02 d4 ff ff       	call   c0002d69 <get_fat>
c0005967:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000596b:	83 f8 01             	cmp    eax,0x1
c000596e:	77 11                	ja     c0005981 <f_lseek+0xcd>
c0005970:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005974:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000597c:	e9 de 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005981:	83 f8 ff             	cmp    eax,0xffffffff
c0005984:	75 11                	jne    c0005997 <f_lseek+0xe3>
c0005986:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000598a:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005992:	e9 c8 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005997:	8d 51 01             	lea    edx,[ecx+0x1]
c000599a:	89 c1                	mov    ecx,eax
c000599c:	39 c2                	cmp    edx,eax
c000599e:	74 b7                	je     c0005957 <f_lseek+0xa3>
c00059a0:	83 c6 02             	add    esi,0x2
c00059a3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059a7:	72 0b                	jb     c00059b4 <f_lseek+0x100>
c00059a9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ac:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059af:	89 0f                	mov    DWORD PTR [edi],ecx
c00059b1:	83 c7 08             	add    edi,0x8
c00059b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059b8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059bb:	76 04                	jbe    c00059c1 <f_lseek+0x10d>
c00059bd:	89 c5                	mov    ebp,eax
c00059bf:	eb 8d                	jmp    c000594e <f_lseek+0x9a>
c00059c1:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059c4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059c8:	89 30                	mov    DWORD PTR [eax],esi
c00059ca:	0f 87 87 03 00 00    	ja     c0005d57 <f_lseek+0x4a3>
c00059d0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059d6:	e9 84 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c00059db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059ed:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059f4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00059f8:	73 0f                	jae    c0005a09 <f_lseek+0x155>
c00059fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00059fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a11:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a14:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a1f:	0f 84 3a 03 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a25:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a2d:	83 c6 ff             	add    esi,0xffffffff
c0005a30:	89 d8                	mov    eax,ebx
c0005a32:	83 d7 ff             	adc    edi,0xffffffff
c0005a35:	89 f2                	mov    edx,esi
c0005a37:	89 f9                	mov    ecx,edi
c0005a39:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a40:	e8 78 c2 ff ff       	call   c0001cbd <clmt_clust>
c0005a45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a49:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4c:	89 c2                	mov    edx,eax
c0005a4e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	e8 43 c2 ff ff       	call   c0001c9c <clst2sect>
c0005a59:	89 d7                	mov    edi,edx
c0005a5b:	09 c7                	or     edi,eax
c0005a5d:	0f 84 0d ff ff ff    	je     c0005970 <f_lseek+0xbc>
c0005a63:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a67:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a6d:	0f 84 ec 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1ed>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 be 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 80 02 00 00    	jns    c0005d2e <f_lseek+0x47a>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 5a 02 00 00       	jmp    c0005d19 <f_lseek+0x465>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x22a>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x22a>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x248>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x248>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005aff:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b02:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x26e>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 af 01 00 00       	jmp    c0005cd1 <f_lseek+0x41d>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	89 d7                	mov    edi,edx
c0005b28:	c1 e1 09             	shl    ecx,0x9
c0005b2b:	09 c7                	or     edi,eax
c0005b2d:	89 cd                	mov    ebp,ecx
c0005b2f:	74 6d                	je     c0005b9e <f_lseek+0x2ea>
c0005b31:	83 c0 ff             	add    eax,0xffffffff
c0005b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b42:	83 c0 ff             	add    eax,0xffffffff
c0005b45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b49:	83 d2 ff             	adc    edx,0xffffffff
c0005b4c:	31 ff                	xor    edi,edi
c0005b4e:	57                   	push   edi
c0005b4f:	51                   	push   ecx
c0005b50:	52                   	push   edx
c0005b51:	50                   	push   eax
c0005b52:	e8 05 df 01 00       	call   c0023a5c <__udivdi3>
c0005b57:	83 c4 10             	add    esp,0x10
c0005b5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b62:	57                   	push   edi
c0005b63:	55                   	push   ebp
c0005b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b6c:	e8 eb de 01 00       	call   c0023a5c <__udivdi3>
c0005b71:	83 c4 10             	add    esp,0x10
c0005b74:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b7c:	19 d1                	sbb    ecx,edx
c0005b7e:	72 1e                	jb     c0005b9e <f_lseek+0x2ea>
c0005b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b84:	89 e9                	mov    ecx,ebp
c0005b86:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b89:	f7 d9                	neg    ecx
c0005b8b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b8e:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b92:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b95:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b98:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x312>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x30f>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 a9 d4 ff ff       	call   c0003057 <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 b9 fd ff ff    	je     c0005970 <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 c6 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x265>
c0005bce:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005bd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bda:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005be1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005beb:	0f 83 9d 00 00 00    	jae    c0005c8e <f_lseek+0x3da>
c0005bf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bf9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bfc:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c00:	01 f2                	add    edx,esi
c0005c02:	11 f9                	adc    ecx,edi
c0005c04:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c0c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c0f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c12:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c15:	f6 c1 02             	test   cl,0x2
c0005c18:	74 35                	je     c0005c4f <f_lseek+0x39b>
c0005c1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c1e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c21:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c24:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c28:	73 16                	jae    c0005c40 <f_lseek+0x38c>
c0005c2a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c2e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c32:	88 ca                	mov    dl,cl
c0005c34:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c37:	83 ca 40             	or     edx,0x40
c0005c3a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c3d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c40:	89 c2                	mov    edx,eax
c0005c42:	89 d8                	mov    eax,ebx
c0005c44:	e8 0e d4 ff ff       	call   c0003057 <create_chain>
c0005c49:	85 c0                	test   eax,eax
c0005c4b:	75 0b                	jne    c0005c58 <f_lseek+0x3a4>
c0005c4d:	eb 30                	jmp    c0005c7f <f_lseek+0x3cb>
c0005c4f:	89 c2                	mov    edx,eax
c0005c51:	89 d8                	mov    eax,ebx
c0005c53:	e8 11 d1 ff ff       	call   c0002d69 <get_fat>
c0005c58:	83 f8 ff             	cmp    eax,0xffffffff
c0005c5b:	0f 84 25 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005c61:	83 f8 01             	cmp    eax,0x1
c0005c64:	0f 86 06 fd ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c6e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c71:	0f 86 f9 fc ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c77:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c7a:	e9 5b ff ff ff       	jmp    c0005bda <f_lseek+0x326>
c0005c7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c91:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c95:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c98:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c9b:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c9e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ca4:	0f 84 6f fe ff ff    	je     c0005b19 <f_lseek+0x265>
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cb0:	e8 e7 bf ff ff       	call   c0001c9c <clst2sect>
c0005cb5:	89 d7                	mov    edi,edx
c0005cb7:	09 c7                	or     edi,eax
c0005cb9:	0f 84 b1 fc ff ff    	je     c0005970 <f_lseek+0xbc>
c0005cbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cca:	c1 ef 09             	shr    edi,0x9
c0005ccd:	01 c6                	add    esi,eax
c0005ccf:	11 d7                	adc    edi,edx
c0005cd1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cd4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cd7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cda:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cdd:	19 d1                	sbb    ecx,edx
c0005cdf:	73 0a                	jae    c0005ceb <f_lseek+0x437>
c0005ce1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005ce4:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005ceb:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cf0:	74 6d                	je     c0005d5f <f_lseek+0x4ab>
c0005cf2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf8:	39 fa                	cmp    edx,edi
c0005cfa:	75 04                	jne    c0005d00 <f_lseek+0x44c>
c0005cfc:	39 f0                	cmp    eax,esi
c0005cfe:	74 5f                	je     c0005d5f <f_lseek+0x4ab>
c0005d00:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d03:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d07:	79 25                	jns    c0005d2e <f_lseek+0x47a>
c0005d09:	83 ec 0c             	sub    esp,0xc
c0005d0c:	6a 01                	push   0x1
c0005d0e:	52                   	push   edx
c0005d0f:	50                   	push   eax
c0005d10:	55                   	push   ebp
c0005d11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d15:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d19:	50                   	push   eax
c0005d1a:	e8 af bc ff ff       	call   c00019ce <disk_write>
c0005d1f:	83 c4 20             	add    esp,0x20
c0005d22:	85 c0                	test   eax,eax
c0005d24:	0f 85 5c fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d2a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d2e:	83 ec 0c             	sub    esp,0xc
c0005d31:	6a 01                	push   0x1
c0005d33:	57                   	push   edi
c0005d34:	56                   	push   esi
c0005d35:	55                   	push   ebp
c0005d36:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d3a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d3e:	50                   	push   eax
c0005d3f:	e8 74 bc ff ff       	call   c00019b8 <disk_read>
c0005d44:	83 c4 20             	add    esp,0x20
c0005d47:	85 c0                	test   eax,eax
c0005d49:	0f 85 37 fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d4f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d52:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d55:	eb 08                	jmp    c0005d5f <f_lseek+0x4ab>
c0005d57:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d63:	83 c4 3c             	add    esp,0x3c
c0005d66:	5b                   	pop    ebx
c0005d67:	5e                   	pop    esi
c0005d68:	5f                   	pop    edi
c0005d69:	5d                   	pop    ebp
c0005d6a:	c3                   	ret    

c0005d6b <f_opendir>:
c0005d6b:	56                   	push   esi
c0005d6c:	b8 09 00 00 00       	mov    eax,0x9
c0005d71:	53                   	push   ebx
c0005d72:	83 ec 24             	sub    esp,0x24
c0005d75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d79:	85 db                	test   ebx,ebx
c0005d7b:	0f 84 e6 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005d81:	31 c9                	xor    ecx,ecx
c0005d83:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d87:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d8b:	e8 03 c7 ff ff       	call   c0002493 <mount_volume>
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 85 c9 00 00 00    	jne    c0005e61 <f_opendir+0xf6>
c0005d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9c:	83 ec 0c             	sub    esp,0xc
c0005d9f:	89 03                	mov    DWORD PTR [ebx],eax
c0005da1:	68 60 04 00 00       	push   0x460
c0005da6:	e8 8b 24 00 00       	call   c0008236 <ff_memalloc>
c0005dab:	83 c4 10             	add    esp,0x10
c0005dae:	89 c6                	mov    esi,eax
c0005db0:	b8 11 00 00 00       	mov    eax,0x11
c0005db5:	85 f6                	test   esi,esi
c0005db7:	0f 84 aa 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005dbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dc1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dc7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dcd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dd1:	89 d8                	mov    eax,ebx
c0005dd3:	e8 31 ee ff ff       	call   c0004c09 <follow_path>
c0005dd8:	85 c0                	test   eax,eax
c0005dda:	75 61                	jne    c0005e3d <f_opendir+0xd2>
c0005ddc:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005de0:	78 46                	js     c0005e28 <f_opendir+0xbd>
c0005de2:	b8 05 00 00 00       	mov    eax,0x5
c0005de7:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005deb:	74 50                	je     c0005e3d <f_opendir+0xd2>
c0005ded:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005df1:	8a 01                	mov    al,BYTE PTR [ecx]
c0005df3:	3c 04                	cmp    al,0x4
c0005df5:	75 26                	jne    c0005e1d <f_opendir+0xb2>
c0005df7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dfa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dfd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e00:	30 d2                	xor    dl,dl
c0005e02:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e06:	09 c2                	or     edx,eax
c0005e08:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e0b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e0e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e11:	89 da                	mov    edx,ebx
c0005e13:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e16:	e8 b4 ed ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0005e1b:	eb 0b                	jmp    c0005e28 <f_opendir+0xbd>
c0005e1d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e20:	e8 59 ed ff ff       	call   c0004b7e <ld_clust.isra.0>
c0005e25:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e32:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e36:	89 d8                	mov    eax,ebx
c0005e38:	e8 22 d1 ff ff       	call   c0002f5f <dir_sdi>
c0005e3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e41:	83 ec 0c             	sub    esp,0xc
c0005e44:	56                   	push   esi
c0005e45:	e8 02 24 00 00       	call   c000824c <ff_memfree>
c0005e4a:	83 c4 10             	add    esp,0x10
c0005e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e51:	83 f8 04             	cmp    eax,0x4
c0005e54:	74 06                	je     c0005e5c <f_opendir+0xf1>
c0005e56:	85 c0                	test   eax,eax
c0005e58:	74 0d                	je     c0005e67 <f_opendir+0xfc>
c0005e5a:	eb 05                	jmp    c0005e61 <f_opendir+0xf6>
c0005e5c:	b8 05 00 00 00       	mov    eax,0x5
c0005e61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e67:	83 c4 24             	add    esp,0x24
c0005e6a:	5b                   	pop    ebx
c0005e6b:	5e                   	pop    esi
c0005e6c:	c3                   	ret    

c0005e6d <f_closedir>:
c0005e6d:	53                   	push   ebx
c0005e6e:	83 ec 18             	sub    esp,0x18
c0005e71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e75:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e79:	89 d8                	mov    eax,ebx
c0005e7b:	e8 86 c2 ff ff       	call   c0002106 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 06                	jne    c0005e8a <f_closedir+0x1d>
c0005e84:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e8a:	83 c4 18             	add    esp,0x18
c0005e8d:	5b                   	pop    ebx
c0005e8e:	c3                   	ret    

c0005e8f <f_readdir>:
c0005e8f:	57                   	push   edi
c0005e90:	56                   	push   esi
c0005e91:	53                   	push   ebx
c0005e92:	83 ec 20             	sub    esp,0x20
c0005e95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e99:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ea1:	89 d8                	mov    eax,ebx
c0005ea3:	e8 5e c2 ff ff       	call   c0002106 <validate>
c0005ea8:	85 c0                	test   eax,eax
c0005eaa:	75 77                	jne    c0005f23 <f_readdir+0x94>
c0005eac:	85 ff                	test   edi,edi
c0005eae:	75 0b                	jne    c0005ebb <f_readdir+0x2c>
c0005eb0:	31 d2                	xor    edx,edx
c0005eb2:	89 d8                	mov    eax,ebx
c0005eb4:	e8 a6 d0 ff ff       	call   c0002f5f <dir_sdi>
c0005eb9:	eb 68                	jmp    c0005f23 <f_readdir+0x94>
c0005ebb:	83 ec 0c             	sub    esp,0xc
c0005ebe:	68 60 04 00 00       	push   0x460
c0005ec3:	e8 6e 23 00 00       	call   c0008236 <ff_memalloc>
c0005ec8:	83 c4 10             	add    esp,0x10
c0005ecb:	89 c6                	mov    esi,eax
c0005ecd:	b8 11 00 00 00       	mov    eax,0x11
c0005ed2:	85 f6                	test   esi,esi
c0005ed4:	74 4d                	je     c0005f23 <f_readdir+0x94>
c0005ed6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eda:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ee0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ee3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ee6:	31 d2                	xor    edx,edx
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 80 d8 ff ff       	call   c000376f <dir_read>
c0005eef:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ef4:	75 19                	jne    c0005f0f <f_readdir+0x80>
c0005ef6:	89 fa                	mov    edx,edi
c0005ef8:	89 d8                	mov    eax,ebx
c0005efa:	e8 7e ea ff ff       	call   c000497d <get_fileinfo>
c0005eff:	31 d2                	xor    edx,edx
c0005f01:	89 d8                	mov    eax,ebx
c0005f03:	e8 af d5 ff ff       	call   c00034b7 <dir_next>
c0005f08:	83 f8 04             	cmp    eax,0x4
c0005f0b:	75 02                	jne    c0005f0f <f_readdir+0x80>
c0005f0d:	31 c0                	xor    eax,eax
c0005f0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f13:	83 ec 0c             	sub    esp,0xc
c0005f16:	56                   	push   esi
c0005f17:	e8 30 23 00 00       	call   c000824c <ff_memfree>
c0005f1c:	83 c4 10             	add    esp,0x10
c0005f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f23:	83 c4 20             	add    esp,0x20
c0005f26:	5b                   	pop    ebx
c0005f27:	5e                   	pop    esi
c0005f28:	5f                   	pop    edi
c0005f29:	c3                   	ret    

c0005f2a <f_stat>:
c0005f2a:	57                   	push   edi
c0005f2b:	31 c9                	xor    ecx,ecx
c0005f2d:	56                   	push   esi
c0005f2e:	53                   	push   ebx
c0005f2f:	83 ec 50             	sub    esp,0x50
c0005f32:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f36:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f3a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f3e:	e8 50 c5 ff ff       	call   c0002493 <mount_volume>
c0005f43:	89 c3                	mov    ebx,eax
c0005f45:	85 c0                	test   eax,eax
c0005f47:	75 67                	jne    c0005fb0 <f_stat+0x86>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	bb 11 00 00 00       	mov    ebx,0x11
c0005f51:	68 60 04 00 00       	push   0x460
c0005f56:	e8 db 22 00 00       	call   c0008236 <ff_memalloc>
c0005f5b:	83 c4 10             	add    esp,0x10
c0005f5e:	89 c6                	mov    esi,eax
c0005f60:	85 c0                	test   eax,eax
c0005f62:	74 4c                	je     c0005fb0 <f_stat+0x86>
c0005f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f68:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f74:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f78:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7c:	e8 88 ec ff ff       	call   c0004c09 <follow_path>
c0005f81:	89 c3                	mov    ebx,eax
c0005f83:	85 c0                	test   eax,eax
c0005f85:	75 1d                	jne    c0005fa4 <f_stat+0x7a>
c0005f87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f8c:	78 11                	js     c0005f9f <f_stat+0x75>
c0005f8e:	85 ff                	test   edi,edi
c0005f90:	74 12                	je     c0005fa4 <f_stat+0x7a>
c0005f92:	89 fa                	mov    edx,edi
c0005f94:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f98:	e8 e0 e9 ff ff       	call   c000497d <get_fileinfo>
c0005f9d:	eb 05                	jmp    c0005fa4 <f_stat+0x7a>
c0005f9f:	bb 06 00 00 00       	mov    ebx,0x6
c0005fa4:	83 ec 0c             	sub    esp,0xc
c0005fa7:	56                   	push   esi
c0005fa8:	e8 9f 22 00 00       	call   c000824c <ff_memfree>
c0005fad:	83 c4 10             	add    esp,0x10
c0005fb0:	83 c4 50             	add    esp,0x50
c0005fb3:	89 d8                	mov    eax,ebx
c0005fb5:	5b                   	pop    ebx
c0005fb6:	5e                   	pop    esi
c0005fb7:	5f                   	pop    edi
c0005fb8:	c3                   	ret    

c0005fb9 <f_getfree>:
c0005fb9:	55                   	push   ebp
c0005fba:	31 c9                	xor    ecx,ecx
c0005fbc:	57                   	push   edi
c0005fbd:	56                   	push   esi
c0005fbe:	53                   	push   ebx
c0005fbf:	83 ec 5c             	sub    esp,0x5c
c0005fc2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fca:	e8 c4 c4 ff ff       	call   c0002493 <mount_volume>
c0005fcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fd3:	85 c0                	test   eax,eax
c0005fd5:	0f 85 9d 01 00 00    	jne    c0006178 <f_getfree+0x1bf>
c0005fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fdf:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fe3:	89 02                	mov    DWORD PTR [edx],eax
c0005fe5:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005fe8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005feb:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005fee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ff2:	39 f2                	cmp    edx,esi
c0005ff4:	77 0b                	ja     c0006001 <f_getfree+0x48>
c0005ff6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005ffa:	89 10                	mov    DWORD PTR [eax],edx
c0005ffc:	e9 77 01 00 00       	jmp    c0006178 <f_getfree+0x1bf>
c0006001:	8a 10                	mov    dl,BYTE PTR [eax]
c0006003:	80 fa 01             	cmp    dl,0x1
c0006006:	75 3a                	jne    c0006042 <f_getfree+0x89>
c0006008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000600c:	be 02 00 00 00       	mov    esi,0x2
c0006011:	31 db                	xor    ebx,ebx
c0006013:	89 f2                	mov    edx,esi
c0006015:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006019:	e8 4b cd ff ff       	call   c0002d69 <get_fat>
c000601e:	83 f8 ff             	cmp    eax,0xffffffff
c0006021:	0f 84 28 01 00 00    	je     c000614f <f_getfree+0x196>
c0006027:	83 f8 01             	cmp    eax,0x1
c000602a:	0f 84 29 01 00 00    	je     c0006159 <f_getfree+0x1a0>
c0006030:	83 d3 00             	adc    ebx,0x0
c0006033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006037:	46                   	inc    esi
c0006038:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000603b:	77 d6                	ja     c0006013 <f_getfree+0x5a>
c000603d:	e9 25 01 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c0006042:	80 fa 04             	cmp    dl,0x4
c0006045:	0f 85 88 00 00 00    	jne    c00060d3 <f_getfree+0x11a>
c000604b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000604e:	31 ed                	xor    ebp,ebp
c0006050:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006053:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000605b:	31 db                	xor    ebx,ebx
c000605d:	85 ed                	test   ebp,ebp
c000605f:	75 3f                	jne    c00060a0 <f_getfree+0xe7>
c0006061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006065:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006069:	83 c0 01             	add    eax,0x1
c000606c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006070:	83 d2 00             	adc    edx,0x0
c0006073:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006077:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006083:	e8 59 c1 ff ff       	call   c00021e1 <move_window>
c0006088:	85 c0                	test   eax,eax
c000608a:	0f 85 d3 00 00 00    	jne    c0006163 <f_getfree+0x1aa>
c0006090:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060a7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060ab:	89 cf                	mov    edi,ecx
c00060ad:	85 f6                	test   esi,esi
c00060af:	74 12                	je     c00060c3 <f_getfree+0x10a>
c00060b1:	88 c1                	mov    cl,al
c00060b3:	83 e1 01             	and    ecx,0x1
c00060b6:	80 f9 01             	cmp    cl,0x1
c00060b9:	83 d3 00             	adc    ebx,0x0
c00060bc:	d0 e8                	shr    al,1
c00060be:	4e                   	dec    esi
c00060bf:	39 fe                	cmp    esi,edi
c00060c1:	75 ea                	jne    c00060ad <f_getfree+0xf4>
c00060c3:	45                   	inc    ebp
c00060c4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060ca:	85 f6                	test   esi,esi
c00060cc:	75 8f                	jne    c000605d <f_getfree+0xa4>
c00060ce:	e9 94 00 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c00060d3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d9:	31 f6                	xor    esi,esi
c00060db:	31 db                	xor    ebx,ebx
c00060dd:	85 f6                	test   esi,esi
c00060df:	75 1b                	jne    c00060fc <f_getfree+0x143>
c00060e1:	89 d7                	mov    edi,edx
c00060e3:	89 cd                	mov    ebp,ecx
c00060e5:	83 c7 01             	add    edi,0x1
c00060e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ec:	83 d5 00             	adc    ebp,0x0
c00060ef:	e8 ed c0 ff ff       	call   c00021e1 <move_window>
c00060f4:	85 c0                	test   eax,eax
c00060f6:	75 6b                	jne    c0006163 <f_getfree+0x1aa>
c00060f8:	89 fa                	mov    edx,edi
c00060fa:	89 e9                	mov    ecx,ebp
c00060fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006100:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006104:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006108:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000610b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006113:	75 11                	jne    c0006126 <f_getfree+0x16d>
c0006115:	e8 e9 b8 ff ff       	call   c0001a03 <ld_word>
c000611a:	66 83 f8 01          	cmp    ax,0x1
c000611e:	83 d3 00             	adc    ebx,0x0
c0006121:	83 c6 02             	add    esi,0x2
c0006124:	eb 13                	jmp    c0006139 <f_getfree+0x180>
c0006126:	e8 e5 b8 ff ff       	call   c0001a10 <ld_dword>
c000612b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006130:	83 f8 01             	cmp    eax,0x1
c0006133:	83 d3 00             	adc    ebx,0x0
c0006136:	83 c6 04             	add    esi,0x4
c0006139:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006143:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006147:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000614b:	75 90                	jne    c00060dd <f_getfree+0x124>
c000614d:	eb 18                	jmp    c0006167 <f_getfree+0x1ae>
c000614f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006157:	eb 0e                	jmp    c0006167 <f_getfree+0x1ae>
c0006159:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006161:	eb 04                	jmp    c0006167 <f_getfree+0x1ae>
c0006163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006167:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000616b:	89 18                	mov    DWORD PTR [eax],ebx
c000616d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006171:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006174:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617c:	83 c4 5c             	add    esp,0x5c
c000617f:	5b                   	pop    ebx
c0006180:	5e                   	pop    esi
c0006181:	5f                   	pop    edi
c0006182:	5d                   	pop    ebp
c0006183:	c3                   	ret    

c0006184 <f_truncate>:
c0006184:	56                   	push   esi
c0006185:	53                   	push   ebx
c0006186:	83 ec 14             	sub    esp,0x14
c0006189:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006191:	89 d8                	mov    eax,ebx
c0006193:	e8 6e bf ff ff       	call   c0002106 <validate>
c0006198:	89 c6                	mov    esi,eax
c000619a:	85 c0                	test   eax,eax
c000619c:	0f 85 d2 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061a2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a6:	85 f6                	test   esi,esi
c00061a8:	0f 85 c6 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061ae:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b2:	0f 84 b7 00 00 00    	je     c000626f <f_truncate+0xeb>
c00061b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061be:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061c1:	89 d1                	mov    ecx,edx
c00061c3:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c6:	0f 83 a8 00 00 00    	jae    c0006274 <f_truncate+0xf0>
c00061cc:	09 c2                	or     edx,eax
c00061ce:	75 15                	jne    c00061e5 <f_truncate+0x61>
c00061d0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	89 d8                	mov    eax,ebx
c00061d7:	e8 7a d0 ff ff       	call   c0003256 <remove_chain>
c00061dc:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e3:	eb 35                	jmp    c000621a <f_truncate+0x96>
c00061e5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e8:	89 d8                	mov    eax,ebx
c00061ea:	e8 7a cb ff ff       	call   c0002d69 <get_fat>
c00061ef:	89 c2                	mov    edx,eax
c00061f1:	b8 01 00 00 00       	mov    eax,0x1
c00061f6:	83 fa ff             	cmp    edx,0xffffffff
c00061f9:	74 1f                	je     c000621a <f_truncate+0x96>
c00061fb:	b8 02 00 00 00       	mov    eax,0x2
c0006200:	83 fa 01             	cmp    edx,0x1
c0006203:	74 15                	je     c000621a <f_truncate+0x96>
c0006205:	31 c0                	xor    eax,eax
c0006207:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000620b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620e:	76 0a                	jbe    c000621a <f_truncate+0x96>
c0006210:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006213:	89 d8                	mov    eax,ebx
c0006215:	e8 3c d0 ff ff       	call   c0003256 <remove_chain>
c000621a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006220:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006223:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006226:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006229:	83 ca 40             	or     edx,0x40
c000622c:	85 c0                	test   eax,eax
c000622e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006231:	75 35                	jne    c0006268 <f_truncate+0xe4>
c0006233:	84 d2                	test   dl,dl
c0006235:	79 3d                	jns    c0006274 <f_truncate+0xf0>
c0006237:	83 ec 0c             	sub    esp,0xc
c000623a:	8d 43 50             	lea    eax,[ebx+0x50]
c000623d:	6a 01                	push   0x1
c000623f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006242:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006245:	50                   	push   eax
c0006246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000624a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624e:	50                   	push   eax
c000624f:	e8 7a b7 ff ff       	call   c00019ce <disk_write>
c0006254:	83 c4 20             	add    esp,0x20
c0006257:	85 c0                	test   eax,eax
c0006259:	75 08                	jne    c0006263 <f_truncate+0xdf>
c000625b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625f:	31 f6                	xor    esi,esi
c0006261:	eb 11                	jmp    c0006274 <f_truncate+0xf0>
c0006263:	b8 01 00 00 00       	mov    eax,0x1
c0006268:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000626b:	89 c6                	mov    esi,eax
c000626d:	eb 05                	jmp    c0006274 <f_truncate+0xf0>
c000626f:	be 07 00 00 00       	mov    esi,0x7
c0006274:	89 f0                	mov    eax,esi
c0006276:	83 c4 14             	add    esp,0x14
c0006279:	5b                   	pop    ebx
c000627a:	5e                   	pop    esi
c000627b:	c3                   	ret    

c000627c <f_unlink>:
c000627c:	56                   	push   esi
c000627d:	b9 02 00 00 00       	mov    ecx,0x2
c0006282:	53                   	push   ebx
c0006283:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006289:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628d:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006294:	e8 fa c1 ff ff       	call   c0002493 <mount_volume>
c0006299:	85 c0                	test   eax,eax
c000629b:	0f 85 55 01 00 00    	jne    c00063f6 <f_unlink+0x17a>
c00062a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a5:	83 ec 0c             	sub    esp,0xc
c00062a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ac:	68 60 04 00 00       	push   0x460
c00062b1:	e8 80 1f 00 00       	call   c0008236 <ff_memalloc>
c00062b6:	83 c4 10             	add    esp,0x10
c00062b9:	89 c3                	mov    ebx,eax
c00062bb:	b8 11 00 00 00       	mov    eax,0x11
c00062c0:	85 db                	test   ebx,ebx
c00062c2:	0f 84 2e 01 00 00    	je     c00063f6 <f_unlink+0x17a>
c00062c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d8:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062df:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e3:	e8 21 e9 ff ff       	call   c0004c09 <follow_path>
c00062e8:	85 c0                	test   eax,eax
c00062ea:	0f 85 f2 00 00 00    	jne    c00063e2 <f_unlink+0x166>
c00062f0:	b8 06 00 00 00       	mov    eax,0x6
c00062f5:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fd:	0f 88 df 00 00 00    	js     c00063e2 <f_unlink+0x166>
c0006303:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006308:	74 0a                	je     c0006314 <f_unlink+0x98>
c000630a:	b8 07 00 00 00       	mov    eax,0x7
c000630f:	e9 ce 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c0006314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006318:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631c:	8a 02                	mov    al,BYTE PTR [edx]
c000631e:	3c 04                	cmp    al,0x4
c0006320:	75 12                	jne    c0006334 <f_unlink+0xb8>
c0006322:	8d 42 10             	lea    eax,[edx+0x10]
c0006325:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006329:	e8 a1 e8 ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c000632e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006332:	eb 0e                	jmp    c0006342 <f_unlink+0xc6>
c0006334:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000633b:	e8 3e e8 ff ff       	call   c0004b7e <ld_clust.isra.0>
c0006340:	89 c6                	mov    esi,eax
c0006342:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006347:	75 12                	jne    c000635b <f_unlink+0xdf>
c0006349:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634d:	e8 94 d6 ff ff       	call   c00039e6 <dir_remove>
c0006352:	85 c0                	test   eax,eax
c0006354:	74 6c                	je     c00063c2 <f_unlink+0x146>
c0006356:	e9 87 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c000635b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006366:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006370:	75 21                	jne    c0006393 <f_unlink+0x117>
c0006372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006376:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637a:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006381:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006388:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638c:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006393:	31 d2                	xor    edx,edx
c0006395:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639c:	e8 be cb ff ff       	call   c0002f5f <dir_sdi>
c00063a1:	85 c0                	test   eax,eax
c00063a3:	75 3d                	jne    c00063e2 <f_unlink+0x166>
c00063a5:	31 d2                	xor    edx,edx
c00063a7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ae:	e8 bc d3 ff ff       	call   c000376f <dir_read>
c00063b3:	85 c0                	test   eax,eax
c00063b5:	0f 84 4f ff ff ff    	je     c000630a <f_unlink+0x8e>
c00063bb:	83 f8 04             	cmp    eax,0x4
c00063be:	75 22                	jne    c00063e2 <f_unlink+0x166>
c00063c0:	eb 87                	jmp    c0006349 <f_unlink+0xcd>
c00063c2:	85 f6                	test   esi,esi
c00063c4:	75 0b                	jne    c00063d1 <f_unlink+0x155>
c00063c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ca:	e8 3d df ff ff       	call   c000430c <sync_fs>
c00063cf:	eb 11                	jmp    c00063e2 <f_unlink+0x166>
c00063d1:	31 c9                	xor    ecx,ecx
c00063d3:	89 f2                	mov    edx,esi
c00063d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d9:	e8 78 ce ff ff       	call   c0003256 <remove_chain>
c00063de:	85 c0                	test   eax,eax
c00063e0:	74 e4                	je     c00063c6 <f_unlink+0x14a>
c00063e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e6:	83 ec 0c             	sub    esp,0xc
c00063e9:	53                   	push   ebx
c00063ea:	e8 5d 1e 00 00       	call   c000824c <ff_memfree>
c00063ef:	83 c4 10             	add    esp,0x10
c00063f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f6:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063fc:	5b                   	pop    ebx
c00063fd:	5e                   	pop    esi
c00063fe:	c3                   	ret    

c00063ff <f_mkdir>:
c00063ff:	57                   	push   edi
c0006400:	b9 02 00 00 00       	mov    ecx,0x2
c0006405:	56                   	push   esi
c0006406:	53                   	push   ebx
c0006407:	83 c4 80             	add    esp,0xffffff80
c000640a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006415:	e8 79 c0 ff ff       	call   c0002493 <mount_volume>
c000641a:	89 c3                	mov    ebx,eax
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 85 fe 01 00 00    	jne    c0006622 <f_mkdir+0x223>
c0006424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006428:	bb 11 00 00 00       	mov    ebx,0x11
c000642d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006431:	83 ec 0c             	sub    esp,0xc
c0006434:	68 60 04 00 00       	push   0x460
c0006439:	e8 f8 1d 00 00       	call   c0008236 <ff_memalloc>
c000643e:	83 c4 10             	add    esp,0x10
c0006441:	89 c7                	mov    edi,eax
c0006443:	85 c0                	test   eax,eax
c0006445:	0f 84 d7 01 00 00    	je     c0006622 <f_mkdir+0x223>
c000644b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006455:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006458:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000645b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006462:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006466:	e8 9e e7 ff ff       	call   c0004c09 <follow_path>
c000646b:	89 c3                	mov    ebx,eax
c000646d:	85 c0                	test   eax,eax
c000646f:	74 3e                	je     c00064af <f_mkdir+0xb0>
c0006471:	83 f8 04             	cmp    eax,0x4
c0006474:	75 3e                	jne    c00064b4 <f_mkdir+0xb5>
c0006476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647a:	31 d2                	xor    edx,edx
c000647c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006480:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006484:	e8 ce cb ff ff       	call   c0003057 <create_chain>
c0006489:	89 c6                	mov    esi,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	74 0c                	je     c000649b <f_mkdir+0x9c>
c000648f:	bb 02 00 00 00       	mov    ebx,0x2
c0006494:	83 f8 01             	cmp    eax,0x1
c0006497:	74 07                	je     c00064a0 <f_mkdir+0xa1>
c0006499:	eb 2a                	jmp    c00064c5 <f_mkdir+0xc6>
c000649b:	bb 07 00 00 00       	mov    ebx,0x7
c00064a0:	31 c9                	xor    ecx,ecx
c00064a2:	89 f2                	mov    edx,esi
c00064a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a8:	e8 a9 cd ff ff       	call   c0003256 <remove_chain>
c00064ad:	eb 05                	jmp    c00064b4 <f_mkdir+0xb5>
c00064af:	bb 08 00 00 00       	mov    ebx,0x8
c00064b4:	83 ec 0c             	sub    esp,0xc
c00064b7:	57                   	push   edi
c00064b8:	e8 8f 1d 00 00       	call   c000824c <ff_memfree>
c00064bd:	83 c4 10             	add    esp,0x10
c00064c0:	e9 5d 01 00 00       	jmp    c0006622 <f_mkdir+0x223>
c00064c5:	bb 01 00 00 00       	mov    ebx,0x1
c00064ca:	83 f8 ff             	cmp    eax,0xffffffff
c00064cd:	74 d1                	je     c00064a0 <f_mkdir+0xa1>
c00064cf:	89 f2                	mov    edx,esi
c00064d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d5:	e8 c4 ce ff ff       	call   c000339e <dir_clear>
c00064da:	89 c3                	mov    ebx,eax
c00064dc:	85 c0                	test   eax,eax
c00064de:	75 c0                	jne    c00064a0 <f_mkdir+0xa1>
c00064e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e7:	74 69                	je     c0006552 <f_mkdir+0x153>
c00064e9:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ee:	83 c0 54             	add    eax,0x54
c00064f1:	ba 20 00 00 00       	mov    edx,0x20
c00064f6:	e8 9c b5 ff ff       	call   c0001a97 <mem_set>
c00064fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0006504:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006508:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000650c:	83 c0 6a             	add    eax,0x6a
c000650f:	e8 65 b5 ff ff       	call   c0001a79 <st_dword>
c0006514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006518:	89 f1                	mov    ecx,esi
c000651a:	8d 50 54             	lea    edx,[eax+0x54]
c000651d:	e8 85 e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	b9 20 00 00 00       	mov    ecx,0x20
c000652b:	8d 50 54             	lea    edx,[eax+0x54]
c000652e:	83 c0 74             	add    eax,0x74
c0006531:	e8 4c b5 ff ff       	call   c0001a82 <mem_cpy>
c0006536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006542:	8d 50 74             	lea    edx,[eax+0x74]
c0006545:	e8 5d e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c000654a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006552:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006556:	e8 2f db ff ff       	call   c000408a <dir_register>
c000655b:	89 c3                	mov    ebx,eax
c000655d:	85 c0                	test   eax,eax
c000655f:	0f 85 3b ff ff ff    	jne    c00064a0 <f_mkdir+0xa1>
c0006565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006569:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000656c:	75 74                	jne    c00065e2 <f_mkdir+0x1e3>
c000656e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 0c             	add    eax,0xc
c0006579:	e8 fb b4 ff ff       	call   c0001a79 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f2                	mov    edx,esi
c0006584:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006587:	83 c0 34             	add    eax,0x34
c000658a:	e8 ea b4 ff ff       	call   c0001a79 <st_dword>
c000658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006593:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000659a:	c1 e2 09             	shl    edx,0x9
c000659d:	83 c0 38             	add    eax,0x38
c00065a0:	e8 d4 b4 ff ff       	call   c0001a79 <st_dword>
c00065a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b0:	c1 e2 09             	shl    edx,0x9
c00065b3:	83 c0 28             	add    eax,0x28
c00065b6:	e8 be b4 ff ff       	call   c0001a79 <st_dword>
c00065bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c2:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c9:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065cd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065d1:	e8 8b d3 ff ff       	call   c0003961 <store_xdir>
c00065d6:	89 c3                	mov    ebx,eax
c00065d8:	85 c0                	test   eax,eax
c00065da:	0f 85 d4 fe ff ff    	jne    c00064b4 <f_mkdir+0xb5>
c00065e0:	eb 30                	jmp    c0006612 <f_mkdir+0x213>
c00065e2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e6:	ba 00 00 21 50       	mov    edx,0x50210000
c00065eb:	83 c0 16             	add    eax,0x16
c00065ee:	e8 86 b4 ff ff       	call   c0001a79 <st_dword>
c00065f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f7:	89 f1                	mov    ecx,esi
c00065f9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fd:	e8 a5 e5 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006602:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006606:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000660a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006612:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006616:	e8 f1 dc ff ff       	call   c000430c <sync_fs>
c000661b:	89 c3                	mov    ebx,eax
c000661d:	e9 92 fe ff ff       	jmp    c00064b4 <f_mkdir+0xb5>
c0006622:	83 ec 80             	sub    esp,0xffffff80
c0006625:	89 d8                	mov    eax,ebx
c0006627:	5b                   	pop    ebx
c0006628:	5e                   	pop    esi
c0006629:	5f                   	pop    edi
c000662a:	c3                   	ret    

c000662b <f_rename>:
c000662b:	55                   	push   ebp
c000662c:	57                   	push   edi
c000662d:	56                   	push   esi
c000662e:	53                   	push   ebx
c000662f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006635:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000663c:	e8 a4 b9 ff ff       	call   c0001fe5 <get_ldnumber>
c0006641:	b9 02 00 00 00       	mov    ecx,0x2
c0006646:	8d 54 24 14          	lea    edx,[esp+0x14]
c000664a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006651:	e8 3d be ff ff       	call   c0002493 <mount_volume>
c0006656:	85 c0                	test   eax,eax
c0006658:	0f 85 b5 02 00 00    	jne    c0006913 <f_rename+0x2e8>
c000665e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006662:	83 ec 0c             	sub    esp,0xc
c0006665:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006669:	68 60 04 00 00       	push   0x460
c000666e:	e8 c3 1b 00 00       	call   c0008236 <ff_memalloc>
c0006673:	83 c4 10             	add    esp,0x10
c0006676:	89 c3                	mov    ebx,eax
c0006678:	b8 11 00 00 00       	mov    eax,0x11
c000667d:	85 db                	test   ebx,ebx
c000667f:	0f 84 8e 02 00 00    	je     c0006913 <f_rename+0x2e8>
c0006685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006689:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006695:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000669c:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066a0:	e8 64 e5 ff ff       	call   c0004c09 <follow_path>
c00066a5:	85 c0                	test   eax,eax
c00066a7:	0f 85 52 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066ad:	b8 06 00 00 00       	mov    eax,0x6
c00066b2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ba:	0f 85 3f 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c7:	0f 85 05 01 00 00    	jne    c00067d2 <f_rename+0x1a7>
c00066cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d0:	b9 40 00 00 00       	mov    ecx,0x40
c00066d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d9:	e8 a4 b3 ff ff       	call   c0001a82 <mem_cpy>
c00066de:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ee:	e8 8f b3 ff ff       	call   c0001a82 <mem_cpy>
c00066f3:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066fa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006701:	e8 03 e5 ff ff       	call   c0004c09 <follow_path>
c0006706:	85 c0                	test   eax,eax
c0006708:	75 29                	jne    c0006733 <f_rename+0x108>
c000670a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006715:	74 0a                	je     c0006721 <f_rename+0xf6>
c0006717:	b8 08 00 00 00       	mov    eax,0x8
c000671c:	e9 de 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c0006721:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006728:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672f:	75 e6                	jne    c0006717 <f_rename+0xec>
c0006731:	eb 09                	jmp    c000673c <f_rename+0x111>
c0006733:	83 f8 04             	cmp    eax,0x4
c0006736:	0f 85 c3 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c000673c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006743:	e8 42 d9 ff ff       	call   c000408a <dir_register>
c0006748:	85 c0                	test   eax,eax
c000674a:	0f 85 af 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006754:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006757:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000675a:	89 c5                	mov    ebp,eax
c000675c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006763:	8d 46 24             	lea    eax,[esi+0x24]
c0006766:	e8 98 b2 ff ff       	call   c0001a03 <ld_word>
c000676b:	b9 40 00 00 00       	mov    ecx,0x40
c0006770:	89 c7                	mov    edi,eax
c0006772:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006776:	89 f0                	mov    eax,esi
c0006778:	e8 05 b3 ff ff       	call   c0001a82 <mem_cpy>
c000677d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006781:	89 e9                	mov    ecx,ebp
c0006783:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006786:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006789:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006791:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006794:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006797:	0f b7 d7             	movzx  edx,di
c000679a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000679d:	83 c0 24             	add    eax,0x24
c00067a0:	e8 d0 b2 ff ff       	call   c0001a75 <st_word>
c00067a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ac:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067af:	a8 10                	test   al,0x10
c00067b1:	75 06                	jne    c00067b9 <f_rename+0x18e>
c00067b3:	83 c8 20             	or     eax,0x20
c00067b6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c0:	e8 9c d1 ff ff       	call   c0003961 <store_xdir>
c00067c5:	85 c0                	test   eax,eax
c00067c7:	0f 84 1c 01 00 00    	je     c00068e9 <f_rename+0x2be>
c00067cd:	e9 2d 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c00067d2:	b9 20 00 00 00       	mov    ecx,0x20
c00067d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e2:	e8 9b b2 ff ff       	call   c0001a82 <mem_cpy>
c00067e7:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067ec:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067f0:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f7:	e8 86 b2 ff ff       	call   c0001a82 <mem_cpy>
c00067fc:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006803:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000680a:	e8 fa e3 ff ff       	call   c0004c09 <follow_path>
c000680f:	85 c0                	test   eax,eax
c0006811:	75 27                	jne    c000683a <f_rename+0x20f>
c0006813:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006817:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681e:	0f 85 f3 fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006824:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000682b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006832:	0f 85 df fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006838:	eb 09                	jmp    c0006843 <f_rename+0x218>
c000683a:	83 f8 04             	cmp    eax,0x4
c000683d:	0f 85 bc 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006843:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000684a:	e8 3b d8 ff ff       	call   c000408a <dir_register>
c000684f:	85 c0                	test   eax,eax
c0006851:	0f 85 a8 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006857:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685e:	b9 13 00 00 00       	mov    ecx,0x13
c0006863:	8d 46 0d             	lea    eax,[esi+0xd]
c0006866:	8d 54 24 25          	lea    edx,[esp+0x25]
c000686a:	e8 13 b2 ff ff       	call   c0001a82 <mem_cpy>
c000686f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006873:	a8 10                	test   al,0x10
c0006875:	75 03                	jne    c000687a <f_rename+0x24f>
c0006877:	83 c8 20             	or     eax,0x20
c000687a:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006881:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006885:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006889:	74 5e                	je     c00068e9 <f_rename+0x2be>
c000688b:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006892:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006896:	74 51                	je     c00068e9 <f_rename+0x2be>
c0006898:	89 f2                	mov    edx,esi
c000689a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000689e:	8a 07                	mov    al,BYTE PTR [edi]
c00068a0:	e8 d9 e2 ff ff       	call   c0004b7e <ld_clust.isra.0>
c00068a5:	89 c2                	mov    edx,eax
c00068a7:	89 f8                	mov    eax,edi
c00068a9:	e8 ee b3 ff ff       	call   c0001c9c <clst2sect>
c00068ae:	89 c6                	mov    esi,eax
c00068b0:	89 d1                	mov    ecx,edx
c00068b2:	b8 02 00 00 00       	mov    eax,0x2
c00068b7:	09 f2                	or     edx,esi
c00068b9:	74 44                	je     c00068ff <f_rename+0x2d4>
c00068bb:	89 f2                	mov    edx,esi
c00068bd:	89 f8                	mov    eax,edi
c00068bf:	e8 1d b9 ff ff       	call   c00021e1 <move_window>
c00068c4:	85 c0                	test   eax,eax
c00068c6:	75 37                	jne    c00068ff <f_rename+0x2d4>
c00068c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068cc:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068d0:	75 17                	jne    c00068e9 <f_rename+0x2be>
c00068d2:	8d 50 74             	lea    edx,[eax+0x74]
c00068d5:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068dc:	e8 c6 e2 ff ff       	call   c0004ba7 <st_clust.isra.1>
c00068e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068ed:	e8 f4 d0 ff ff       	call   c00039e6 <dir_remove>
c00068f2:	85 c0                	test   eax,eax
c00068f4:	75 09                	jne    c00068ff <f_rename+0x2d4>
c00068f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068fa:	e8 0d da ff ff       	call   c000430c <sync_fs>
c00068ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006903:	83 ec 0c             	sub    esp,0xc
c0006906:	53                   	push   ebx
c0006907:	e8 40 19 00 00       	call   c000824c <ff_memfree>
c000690c:	83 c4 10             	add    esp,0x10
c000690f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006913:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006919:	5b                   	pop    ebx
c000691a:	5e                   	pop    esi
c000691b:	5f                   	pop    edi
c000691c:	5d                   	pop    ebp
c000691d:	c3                   	ret    

c000691e <f_chmod>:
c000691e:	57                   	push   edi
c000691f:	b9 02 00 00 00       	mov    ecx,0x2
c0006924:	56                   	push   esi
c0006925:	53                   	push   ebx
c0006926:	83 ec 60             	sub    esp,0x60
c0006929:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006931:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006935:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006939:	e8 55 bb ff ff       	call   c0002493 <mount_volume>
c000693e:	85 c0                	test   eax,eax
c0006940:	0f 85 af 00 00 00    	jne    c00069f5 <f_chmod+0xd7>
c0006946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006951:	68 60 04 00 00       	push   0x460
c0006956:	e8 db 18 00 00       	call   c0008236 <ff_memalloc>
c000695b:	83 c4 10             	add    esp,0x10
c000695e:	89 c6                	mov    esi,eax
c0006960:	b8 11 00 00 00       	mov    eax,0x11
c0006965:	85 f6                	test   esi,esi
c0006967:	0f 84 88 00 00 00    	je     c00069f5 <f_chmod+0xd7>
c000696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006971:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006977:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000697a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000697d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006981:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006985:	e8 7f e2 ff ff       	call   c0004c09 <follow_path>
c000698a:	85 c0                	test   eax,eax
c000698c:	75 53                	jne    c00069e1 <f_chmod+0xc3>
c000698e:	b8 06 00 00 00       	mov    eax,0x6
c0006993:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006998:	75 47                	jne    c00069e1 <f_chmod+0xc3>
c000699a:	89 f9                	mov    ecx,edi
c000699c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a0:	83 e1 27             	and    ecx,0x27
c00069a3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a6:	75 1d                	jne    c00069c5 <f_chmod+0xa7>
c00069a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ab:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ae:	21 cb                	and    ebx,ecx
c00069b0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ba:	e8 a2 cf ff ff       	call   c0003961 <store_xdir>
c00069bf:	85 c0                	test   eax,eax
c00069c1:	75 1e                	jne    c00069e1 <f_chmod+0xc3>
c00069c3:	eb 13                	jmp    c00069d8 <f_chmod+0xba>
c00069c5:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c9:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cc:	21 cb                	and    ebx,ecx
c00069ce:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069dc:	e8 2b d9 ff ff       	call   c000430c <sync_fs>
c00069e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e5:	83 ec 0c             	sub    esp,0xc
c00069e8:	56                   	push   esi
c00069e9:	e8 5e 18 00 00       	call   c000824c <ff_memfree>
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f5:	83 c4 60             	add    esp,0x60
c00069f8:	5b                   	pop    ebx
c00069f9:	5e                   	pop    esi
c00069fa:	5f                   	pop    edi
c00069fb:	c3                   	ret    

c00069fc <f_utime>:
c00069fc:	56                   	push   esi
c00069fd:	b9 02 00 00 00       	mov    ecx,0x2
c0006a02:	53                   	push   ebx
c0006a03:	83 ec 64             	sub    esp,0x64
c0006a06:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a0e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a12:	e8 7c ba ff ff       	call   c0002493 <mount_volume>
c0006a17:	85 c0                	test   eax,eax
c0006a19:	0f 85 b5 00 00 00    	jne    c0006ad4 <f_utime+0xd8>
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	83 ec 0c             	sub    esp,0xc
c0006a26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a2a:	68 60 04 00 00       	push   0x460
c0006a2f:	e8 02 18 00 00       	call   c0008236 <ff_memalloc>
c0006a34:	83 c4 10             	add    esp,0x10
c0006a37:	89 c3                	mov    ebx,eax
c0006a39:	b8 11 00 00 00       	mov    eax,0x11
c0006a3e:	85 db                	test   ebx,ebx
c0006a40:	0f 84 8e 00 00 00    	je     c0006ad4 <f_utime+0xd8>
c0006a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a50:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a53:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a56:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5e:	e8 a6 e1 ff ff       	call   c0004c09 <follow_path>
c0006a63:	85 c0                	test   eax,eax
c0006a65:	75 59                	jne    c0006ac0 <f_utime+0xc4>
c0006a67:	b8 06 00 00 00       	mov    eax,0x6
c0006a6c:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a71:	75 4d                	jne    c0006ac0 <f_utime+0xc4>
c0006a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a77:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a7b:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7f:	c1 e2 10             	shl    edx,0x10
c0006a82:	09 ca                	or     edx,ecx
c0006a84:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a87:	75 1a                	jne    c0006aa3 <f_utime+0xa7>
c0006a89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a8c:	83 c0 0c             	add    eax,0xc
c0006a8f:	e8 e5 af ff ff       	call   c0001a79 <st_dword>
c0006a94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a98:	e8 c4 ce ff ff       	call   c0003961 <store_xdir>
c0006a9d:	85 c0                	test   eax,eax
c0006a9f:	75 1f                	jne    c0006ac0 <f_utime+0xc4>
c0006aa1:	eb 14                	jmp    c0006ab7 <f_utime+0xbb>
c0006aa3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa7:	83 c0 16             	add    eax,0x16
c0006aaa:	e8 ca af ff ff       	call   c0001a79 <st_dword>
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abb:	e8 4c d8 ff ff       	call   c000430c <sync_fs>
c0006ac0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac4:	83 ec 0c             	sub    esp,0xc
c0006ac7:	53                   	push   ebx
c0006ac8:	e8 7f 17 00 00       	call   c000824c <ff_memfree>
c0006acd:	83 c4 10             	add    esp,0x10
c0006ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad4:	83 c4 64             	add    esp,0x64
c0006ad7:	5b                   	pop    ebx
c0006ad8:	5e                   	pop    esi
c0006ad9:	c3                   	ret    

c0006ada <f_getlabel>:
c0006ada:	55                   	push   ebp
c0006adb:	31 c9                	xor    ecx,ecx
c0006add:	57                   	push   edi
c0006ade:	56                   	push   esi
c0006adf:	53                   	push   ebx
c0006ae0:	83 ec 6c             	sub    esp,0x6c
c0006ae3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aee:	e8 a0 b9 ff ff       	call   c0002493 <mount_volume>
c0006af3:	89 c6                	mov    esi,eax
c0006af5:	85 c0                	test   eax,eax
c0006af7:	0f 85 c1 01 00 00    	jne    c0006cbe <f_getlabel+0x1e4>
c0006afd:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b05:	0f 84 5f 01 00 00    	je     c0006c6a <f_getlabel+0x190>
c0006b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0f:	31 d2                	xor    edx,edx
c0006b11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b21:	e8 39 c4 ff ff       	call   c0002f5f <dir_sdi>
c0006b26:	85 c0                	test   eax,eax
c0006b28:	0f 85 2d 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b2e:	ba 01 00 00 00       	mov    edx,0x1
c0006b33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b37:	e8 33 cc ff ff       	call   c000376f <dir_read>
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 17 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4b:	74 09                	je     c0006b56 <f_getlabel+0x7c>
c0006b4d:	31 db                	xor    ebx,ebx
c0006b4f:	31 c9                	xor    ecx,ecx
c0006b51:	e9 c8 00 00 00       	jmp    c0006c1e <f_getlabel+0x144>
c0006b56:	31 ed                	xor    ebp,ebp
c0006b58:	31 db                	xor    ebx,ebx
c0006b5a:	31 ff                	xor    edi,edi
c0006b5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b64:	39 fa                	cmp    edx,edi
c0006b66:	76 4b                	jbe    c0006bb3 <f_getlabel+0xd9>
c0006b68:	47                   	inc    edi
c0006b69:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6c:	01 d0                	add    eax,edx
c0006b6e:	e8 90 ae ff ff       	call   c0001a03 <ld_word>
c0006b73:	66 85 ed             	test   bp,bp
c0006b76:	75 0d                	jne    c0006b85 <f_getlabel+0xab>
c0006b78:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b83:	76 28                	jbe    c0006bad <f_getlabel+0xd3>
c0006b85:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8c:	89 e9                	mov    ecx,ebp
c0006b8e:	01 da                	add    edx,ebx
c0006b90:	c1 e1 10             	shl    ecx,0x10
c0006b93:	0f b7 c0             	movzx  eax,ax
c0006b96:	09 c8                	or     eax,ecx
c0006b98:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9d:	e8 01 b0 ff ff       	call   c0001ba3 <put_utf>
c0006ba2:	84 c0                	test   al,al
c0006ba4:	74 0b                	je     c0006bb1 <f_getlabel+0xd7>
c0006ba6:	0f b6 c0             	movzx  eax,al
c0006ba9:	01 c3                	add    ebx,eax
c0006bab:	31 c0                	xor    eax,eax
c0006bad:	89 c5                	mov    ebp,eax
c0006baf:	eb ab                	jmp    c0006b5c <f_getlabel+0x82>
c0006bb1:	31 db                	xor    ebx,ebx
c0006bb3:	66 85 ed             	test   bp,bp
c0006bb6:	74 02                	je     c0006bba <f_getlabel+0xe0>
c0006bb8:	31 db                	xor    ebx,ebx
c0006bba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bc1:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bc5:	e9 a0 00 00 00       	jmp    c0006c6a <f_getlabel+0x190>
c0006bca:	83 ff 0b             	cmp    edi,0xb
c0006bcd:	74 11                	je     c0006be0 <f_getlabel+0x106>
c0006bcf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd8:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bdb:	c1 e0 08             	shl    eax,0x8
c0006bde:	09 c2                	or     edx,eax
c0006be0:	0f b7 d2             	movzx  edx,dx
c0006be3:	50                   	push   eax
c0006be4:	50                   	push   eax
c0006be5:	68 b5 01 00 00       	push   0x1b5
c0006bea:	52                   	push   edx
c0006beb:	e8 03 17 00 00       	call   c00082f3 <ff_oem2uni>
c0006bf0:	83 c4 10             	add    esp,0x10
c0006bf3:	66 85 c0             	test   ax,ax
c0006bf6:	74 46                	je     c0006c3e <f_getlabel+0x164>
c0006bf8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bff:	0f b7 c0             	movzx  eax,ax
c0006c02:	01 da                	add    edx,ebx
c0006c04:	b9 04 00 00 00       	mov    ecx,0x4
c0006c09:	e8 95 af ff ff       	call   c0001ba3 <put_utf>
c0006c0e:	84 c0                	test   al,al
c0006c10:	74 2c                	je     c0006c3e <f_getlabel+0x164>
c0006c12:	0f b6 c0             	movzx  eax,al
c0006c15:	01 c3                	add    ebx,eax
c0006c17:	83 ff 0b             	cmp    edi,0xb
c0006c1a:	74 24                	je     c0006c40 <f_getlabel+0x166>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c22:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c25:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c2a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c33:	e8 9f ae ff ff       	call   c0001ad7 <dbc_1st>
c0006c38:	85 c0                	test   eax,eax
c0006c3a:	74 a4                	je     c0006be0 <f_getlabel+0x106>
c0006c3c:	eb 8c                	jmp    c0006bca <f_getlabel+0xf0>
c0006c3e:	31 db                	xor    ebx,ebx
c0006c40:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c47:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c4a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c51:	74 17                	je     c0006c6a <f_getlabel+0x190>
c0006c53:	4b                   	dec    ebx
c0006c54:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c57:	74 ee                	je     c0006c47 <f_getlabel+0x16d>
c0006c59:	eb 0f                	jmp    c0006c6a <f_getlabel+0x190>
c0006c5b:	83 f8 04             	cmp    eax,0x4
c0006c5e:	75 5c                	jne    c0006cbc <f_getlabel+0x1e2>
c0006c60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c6a:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c72:	74 4a                	je     c0006cbe <f_getlabel+0x1e4>
c0006c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c78:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c7b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7e:	e8 5e b5 ff ff       	call   c00021e1 <move_window>
c0006c83:	89 c6                	mov    esi,eax
c0006c85:	85 c0                	test   eax,eax
c0006c87:	75 35                	jne    c0006cbe <f_getlabel+0x1e4>
c0006c89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8d:	b8 43 00 00 00       	mov    eax,0x43
c0006c92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c94:	80 f9 03             	cmp    cl,0x3
c0006c97:	74 0f                	je     c0006ca8 <f_getlabel+0x1ce>
c0006c99:	31 c0                	xor    eax,eax
c0006c9b:	80 f9 04             	cmp    cl,0x4
c0006c9e:	0f 94 c0             	sete   al
c0006ca1:	48                   	dec    eax
c0006ca2:	83 e0 c3             	and    eax,0xffffffc3
c0006ca5:	83 c0 64             	add    eax,0x64
c0006ca8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cac:	e8 5f ad ff ff       	call   c0001a10 <ld_dword>
c0006cb1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb8:	89 07                	mov    DWORD PTR [edi],eax
c0006cba:	eb 02                	jmp    c0006cbe <f_getlabel+0x1e4>
c0006cbc:	89 c6                	mov    esi,eax
c0006cbe:	83 c4 6c             	add    esp,0x6c
c0006cc1:	89 f0                	mov    eax,esi
c0006cc3:	5b                   	pop    ebx
c0006cc4:	5e                   	pop    esi
c0006cc5:	5f                   	pop    edi
c0006cc6:	5d                   	pop    ebp
c0006cc7:	c3                   	ret    

c0006cc8 <f_setlabel>:
c0006cc8:	56                   	push   esi
c0006cc9:	b9 02 00 00 00       	mov    ecx,0x2
c0006cce:	53                   	push   ebx
c0006ccf:	83 ec 74             	sub    esp,0x74
c0006cd2:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdd:	e8 b1 b7 ff ff       	call   c0002493 <mount_volume>
c0006ce2:	89 c6                	mov    esi,eax
c0006ce4:	85 c0                	test   eax,eax
c0006ce6:	0f 85 41 02 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cf0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf3:	0f 85 8e 00 00 00    	jne    c0006d87 <f_setlabel+0xbf>
c0006cf9:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfe:	31 d2                	xor    edx,edx
c0006d00:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d04:	31 db                	xor    ebx,ebx
c0006d06:	e8 8c ad ff ff       	call   c0001a97 <mem_set>
c0006d0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d15:	0f 86 0a 01 00 00    	jbe    c0006e25 <f_setlabel+0x15d>
c0006d1b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d22:	e8 b6 ad ff ff       	call   c0001add <tchar2uni>
c0006d27:	89 c6                	mov    esi,eax
c0006d29:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2e:	76 2a                	jbe    c0006d5a <f_setlabel+0x92>
c0006d30:	83 f8 ff             	cmp    eax,0xffffffff
c0006d33:	74 05                	je     c0006d3a <f_setlabel+0x72>
c0006d35:	83 fb 09             	cmp    ebx,0x9
c0006d38:	76 0a                	jbe    c0006d44 <f_setlabel+0x7c>
c0006d3a:	be 06 00 00 00       	mov    esi,0x6
c0006d3f:	e9 e9 01 00 00       	jmp    c0006f2d <f_setlabel+0x265>
c0006d44:	89 c2                	mov    edx,eax
c0006d46:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d4a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4d:	c1 ea 10             	shr    edx,0x10
c0006d50:	01 c8                	add    eax,ecx
c0006d52:	43                   	inc    ebx
c0006d53:	e8 1d ad ff ff       	call   c0001a75 <st_word>
c0006d58:	eb 04                	jmp    c0006d5e <f_setlabel+0x96>
c0006d5a:	85 c0                	test   eax,eax
c0006d5c:	74 dc                	je     c0006d3a <f_setlabel+0x72>
c0006d5e:	89 f2                	mov    edx,esi
c0006d60:	b8 57 63 02 c0       	mov    eax,0xc0026357
c0006d65:	e8 5b ad ff ff       	call   c0001ac5 <chk_chr>
c0006d6a:	85 c0                	test   eax,eax
c0006d6c:	75 cc                	jne    c0006d3a <f_setlabel+0x72>
c0006d6e:	83 fb 0a             	cmp    ebx,0xa
c0006d71:	77 c7                	ja     c0006d3a <f_setlabel+0x72>
c0006d73:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d76:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d7a:	0f b7 d6             	movzx  edx,si
c0006d7d:	01 c8                	add    eax,ecx
c0006d7f:	43                   	inc    ebx
c0006d80:	e8 f0 ac ff ff       	call   c0001a75 <st_word>
c0006d85:	eb 84                	jmp    c0006d0b <f_setlabel+0x43>
c0006d87:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8c:	ba 20 00 00 00       	mov    edx,0x20
c0006d91:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d95:	31 db                	xor    ebx,ebx
c0006d97:	e8 fb ac ff ff       	call   c0001a97 <mem_set>
c0006d9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da6:	76 60                	jbe    c0006e08 <f_setlabel+0x140>
c0006da8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006daf:	e8 29 ad ff ff       	call   c0001add <tchar2uni>
c0006db4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db9:	0f 87 7b ff ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006dbf:	83 ec 0c             	sub    esp,0xc
c0006dc2:	50                   	push   eax
c0006dc3:	e8 97 15 00 00       	call   c000835f <ff_wtoupper>
c0006dc8:	5a                   	pop    edx
c0006dc9:	59                   	pop    ecx
c0006dca:	68 b5 01 00 00       	push   0x1b5
c0006dcf:	50                   	push   eax
c0006dd0:	e8 8e 14 00 00       	call   c0008263 <ff_uni2oem>
c0006dd5:	83 c4 10             	add    esp,0x10
c0006dd8:	89 c6                	mov    esi,eax
c0006dda:	66 85 c0             	test   ax,ax
c0006ddd:	0f 84 57 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006de3:	0f b7 d0             	movzx  edx,ax
c0006de6:	b8 50 63 02 c0       	mov    eax,0xc0026350
c0006deb:	e8 d5 ac ff ff       	call   c0001ac5 <chk_chr>
c0006df0:	85 c0                	test   eax,eax
c0006df2:	0f 85 42 ff ff ff    	jne    c0006d3a <f_setlabel+0x72>
c0006df8:	66 81 fe ff 00       	cmp    si,0xff
c0006dfd:	0f 87 14 01 00 00    	ja     c0006f17 <f_setlabel+0x24f>
c0006e03:	e9 fa 00 00 00       	jmp    c0006f02 <f_setlabel+0x23a>
c0006e08:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0d:	0f 84 27 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006e13:	85 db                	test   ebx,ebx
c0006e15:	74 0e                	je     c0006e25 <f_setlabel+0x15d>
c0006e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e1a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1f:	75 04                	jne    c0006e25 <f_setlabel+0x15d>
c0006e21:	89 c3                	mov    ebx,eax
c0006e23:	eb ee                	jmp    c0006e13 <f_setlabel+0x14b>
c0006e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e29:	31 d2                	xor    edx,edx
c0006e2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e3b:	e8 1f c1 ff ff       	call   c0002f5f <dir_sdi>
c0006e40:	89 c6                	mov    esi,eax
c0006e42:	85 c0                	test   eax,eax
c0006e44:	0f 85 e3 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006e4a:	ba 01 00 00 00       	mov    edx,0x1
c0006e4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e53:	e8 17 c9 ff ff       	call   c000376f <dir_read>
c0006e58:	85 c0                	test   eax,eax
c0006e5a:	75 21                	jne    c0006e7d <f_setlabel+0x1b5>
c0006e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e67:	74 5d                	je     c0006ec6 <f_setlabel+0x1fe>
c0006e69:	85 db                	test   ebx,ebx
c0006e6b:	74 0b                	je     c0006e78 <f_setlabel+0x1b0>
c0006e6d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e72:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e76:	eb 70                	jmp    c0006ee8 <f_setlabel+0x220>
c0006e78:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7b:	eb 70                	jmp    c0006eed <f_setlabel+0x225>
c0006e7d:	83 f8 04             	cmp    eax,0x4
c0006e80:	75 7c                	jne    c0006efe <f_setlabel+0x236>
c0006e82:	85 db                	test   ebx,ebx
c0006e84:	0f 84 a3 00 00 00    	je     c0006f2d <f_setlabel+0x265>
c0006e8a:	ba 01 00 00 00       	mov    edx,0x1
c0006e8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e93:	e8 51 ca ff ff       	call   c00038e9 <dir_alloc>
c0006e98:	89 c6                	mov    esi,eax
c0006e9a:	85 c0                	test   eax,eax
c0006e9c:	0f 85 8b 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006ea2:	31 d2                	xor    edx,edx
c0006ea4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ead:	e8 e5 ab ff ff       	call   c0001a97 <mem_set>
c0006eb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebd:	75 18                	jne    c0006ed7 <f_setlabel+0x20f>
c0006ebf:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec6:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec9:	b9 16 00 00 00       	mov    ecx,0x16
c0006ece:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed2:	83 c0 02             	add    eax,0x2
c0006ed5:	eb 9b                	jmp    c0006e72 <f_setlabel+0x1aa>
c0006ed7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006edb:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee8:	e8 95 ab ff ff       	call   c0001a82 <mem_cpy>
c0006eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef9:	e8 0e d4 ff ff       	call   c000430c <sync_fs>
c0006efe:	89 c6                	mov    esi,eax
c0006f00:	eb 2b                	jmp    c0006f2d <f_setlabel+0x265>
c0006f02:	83 fb 0a             	cmp    ebx,0xa
c0006f05:	0f 87 2f fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f0b:	89 f0                	mov    eax,esi
c0006f0d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f11:	43                   	inc    ebx
c0006f12:	e9 85 fe ff ff       	jmp    c0006d9c <f_setlabel+0xd4>
c0006f17:	83 fb 09             	cmp    ebx,0x9
c0006f1a:	0f 87 1a fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f20:	89 f0                	mov    eax,esi
c0006f22:	66 c1 e8 08          	shr    ax,0x8
c0006f26:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f2a:	43                   	inc    ebx
c0006f2b:	eb de                	jmp    c0006f0b <f_setlabel+0x243>
c0006f2d:	89 f0                	mov    eax,esi
c0006f2f:	83 c4 74             	add    esp,0x74
c0006f32:	5b                   	pop    ebx
c0006f33:	5e                   	pop    esi
c0006f34:	c3                   	ret    

c0006f35 <f_forward>:
c0006f35:	55                   	push   ebp
c0006f36:	57                   	push   edi
c0006f37:	56                   	push   esi
c0006f38:	53                   	push   ebx
c0006f39:	83 ec 2c             	sub    esp,0x2c
c0006f3c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f40:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f4a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4e:	89 d8                	mov    eax,ebx
c0006f50:	e8 b1 b1 ff ff       	call   c0002106 <validate>
c0006f55:	89 c5                	mov    ebp,eax
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 85 aa 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f5f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f63:	85 ed                	test   ebp,ebp
c0006f65:	0f 85 9e 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f6b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6f:	0f 84 8f 01 00 00    	je     c0007104 <f_forward+0x1cf>
c0006f75:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f78:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7e:	bf 00 00 00 00       	mov    edi,0x0
c0006f83:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f86:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f8a:	89 d1                	mov    ecx,edx
c0006f8c:	19 f9                	sbb    ecx,edi
c0006f8e:	0f 83 cf 00 00 00    	jae    c0007063 <f_forward+0x12e>
c0006f94:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f98:	e9 c6 00 00 00       	jmp    c0007063 <f_forward+0x12e>
c0006f9d:	50                   	push   eax
c0006f9e:	50                   	push   eax
c0006f9f:	6a 00                	push   0x0
c0006fa1:	6a 00                	push   0x0
c0006fa3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa7:	83 c4 10             	add    esp,0x10
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 84 57 01 00 00    	je     c0007109 <f_forward+0x1d4>
c0006fb2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fc0:	89 d7                	mov    edi,edx
c0006fc2:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc5:	89 c6                	mov    esi,eax
c0006fc7:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fcb:	21 ce                	and    esi,ecx
c0006fcd:	89 c1                	mov    ecx,eax
c0006fcf:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd5:	0f 84 98 00 00 00    	je     c0007073 <f_forward+0x13e>
c0006fdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe2:	89 c8                	mov    eax,ecx
c0006fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe8:	e8 af ac ff ff       	call   c0001c9c <clst2sect>
c0006fed:	89 d7                	mov    edi,edx
c0006fef:	09 c7                	or     edi,eax
c0006ff1:	0f 84 9e 00 00 00    	je     c0007095 <f_forward+0x160>
c0006ff7:	31 ff                	xor    edi,edi
c0006ff9:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffc:	01 c6                	add    esi,eax
c0006ffe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007002:	11 d7                	adc    edi,edx
c0007004:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007007:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000700a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700e:	39 fa                	cmp    edx,edi
c0007010:	0f 85 a2 00 00 00    	jne    c00070b8 <f_forward+0x183>
c0007016:	39 f0                	cmp    eax,esi
c0007018:	0f 85 9a 00 00 00    	jne    c00070b8 <f_forward+0x183>
c000701e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007021:	ba 00 02 00 00       	mov    edx,0x200
c0007026:	25 ff 01 00 00       	and    eax,0x1ff
c000702b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702f:	29 c2                	sub    edx,eax
c0007031:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007034:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007037:	39 d1                	cmp    ecx,edx
c0007039:	76 02                	jbe    c000703d <f_forward+0x108>
c000703b:	89 d1                	mov    ecx,edx
c000703d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007040:	52                   	push   edx
c0007041:	01 c6                	add    esi,eax
c0007043:	52                   	push   edx
c0007044:	51                   	push   ecx
c0007045:	56                   	push   esi
c0007046:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000704a:	83 c4 10             	add    esp,0x10
c000704d:	85 c0                	test   eax,eax
c000704f:	74 44                	je     c0007095 <f_forward+0x160>
c0007051:	31 ff                	xor    edi,edi
c0007053:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007056:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007059:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007061:	01 07                	add    DWORD PTR [edi],eax
c0007063:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007068:	0f 85 2f ff ff ff    	jne    c0006f9d <f_forward+0x68>
c000706e:	e9 96 00 00 00       	jmp    c0007109 <f_forward+0x1d4>
c0007073:	85 f6                	test   esi,esi
c0007075:	0f 85 60 ff ff ff    	jne    c0006fdb <f_forward+0xa6>
c000707b:	89 d7                	mov    edi,edx
c000707d:	09 c7                	or     edi,eax
c000707f:	75 05                	jne    c0007086 <f_forward+0x151>
c0007081:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007084:	eb 0a                	jmp    c0007090 <f_forward+0x15b>
c0007086:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007089:	89 d8                	mov    eax,ebx
c000708b:	e8 d9 bc ff ff       	call   c0002d69 <get_fat>
c0007090:	83 f8 01             	cmp    eax,0x1
c0007093:	77 0b                	ja     c00070a0 <f_forward+0x16b>
c0007095:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007099:	bd 02 00 00 00       	mov    ebp,0x2
c000709e:	eb 69                	jmp    c0007109 <f_forward+0x1d4>
c00070a0:	83 f8 ff             	cmp    eax,0xffffffff
c00070a3:	75 0b                	jne    c00070b0 <f_forward+0x17b>
c00070a5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a9:	bd 01 00 00 00       	mov    ebp,0x1
c00070ae:	eb 59                	jmp    c0007109 <f_forward+0x1d4>
c00070b0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b3:	e9 23 ff ff ff       	jmp    c0006fdb <f_forward+0xa6>
c00070b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070bc:	79 20                	jns    c00070de <f_forward+0x1a9>
c00070be:	83 ec 0c             	sub    esp,0xc
c00070c1:	6a 01                	push   0x1
c00070c3:	52                   	push   edx
c00070c4:	50                   	push   eax
c00070c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cd:	50                   	push   eax
c00070ce:	e8 fb a8 ff ff       	call   c00019ce <disk_write>
c00070d3:	83 c4 20             	add    esp,0x20
c00070d6:	85 c0                	test   eax,eax
c00070d8:	75 cb                	jne    c00070a5 <f_forward+0x170>
c00070da:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070de:	83 ec 0c             	sub    esp,0xc
c00070e1:	6a 01                	push   0x1
c00070e3:	57                   	push   edi
c00070e4:	56                   	push   esi
c00070e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070ed:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f1:	50                   	push   eax
c00070f2:	e8 c1 a8 ff ff       	call   c00019b8 <disk_read>
c00070f7:	83 c4 20             	add    esp,0x20
c00070fa:	85 c0                	test   eax,eax
c00070fc:	0f 84 1c ff ff ff    	je     c000701e <f_forward+0xe9>
c0007102:	eb a1                	jmp    c00070a5 <f_forward+0x170>
c0007104:	bd 07 00 00 00       	mov    ebp,0x7
c0007109:	83 c4 2c             	add    esp,0x2c
c000710c:	89 e8                	mov    eax,ebp
c000710e:	5b                   	pop    ebx
c000710f:	5e                   	pop    esi
c0007110:	5f                   	pop    edi
c0007111:	5d                   	pop    ebp
c0007112:	c3                   	ret    

c0007113 <f_mkfs>:
c0007113:	55                   	push   ebp
c0007114:	57                   	push   edi
c0007115:	56                   	push   esi
c0007116:	53                   	push   ebx
c0007117:	bb 0b 00 00 00       	mov    ebx,0xb
c000711c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007130:	e8 b0 ae ff ff       	call   c0001fe5 <get_ldnumber>
c0007135:	85 c0                	test   eax,eax
c0007137:	0f 88 ec 10 00 00    	js     c0008229 <f_mkfs+0x1116>
c000713d:	8b 14 85 20 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd55e0]
c0007144:	85 d2                	test   edx,edx
c0007146:	74 03                	je     c000714b <f_mkfs+0x38>
c0007148:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714b:	85 f6                	test   esi,esi
c000714d:	75 05                	jne    c0007154 <f_mkfs+0x41>
c000714f:	be 40 63 02 c0       	mov    esi,0xc0026340
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	0f b6 c0             	movzx  eax,al
c000715a:	bb 03 00 00 00       	mov    ebx,0x3
c000715f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007163:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007167:	e8 49 a8 ff ff       	call   c00019b5 <disk_initialize>
c000716c:	83 c4 10             	add    esp,0x10
c000716f:	a8 01                	test   al,0x1
c0007171:	0f 85 b2 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007177:	bb 0a 00 00 00       	mov    ebx,0xa
c000717c:	a8 04                	test   al,0x4
c000717e:	0f 85 a5 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007184:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007187:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718b:	85 c0                	test   eax,eax
c000718d:	75 20                	jne    c00071af <f_mkfs+0x9c>
c000718f:	51                   	push   ecx
c0007190:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007194:	50                   	push   eax
c0007195:	6a 03                	push   0x3
c0007197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719b:	e8 44 a8 ff ff       	call   c00019e4 <disk_ioctl>
c00071a0:	83 c4 10             	add    esp,0x10
c00071a3:	85 c0                	test   eax,eax
c00071a5:	74 08                	je     c00071af <f_mkfs+0x9c>
c00071a7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071af:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b3:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071bb:	77 04                	ja     c00071c1 <f_mkfs+0xae>
c00071bd:	85 c2                	test   edx,eax
c00071bf:	74 08                	je     c00071c9 <f_mkfs+0xb6>
c00071c1:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071cc:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071d0:	48                   	dec    eax
c00071d1:	3c 01                	cmp    al,0x1
c00071d3:	76 05                	jbe    c00071da <f_mkfs+0xc7>
c00071d5:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071da:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e1:	48                   	dec    eax
c00071e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e7:	77 07                	ja     c00071f0 <f_mkfs+0xdd>
c00071e9:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ee:	74 08                	je     c00071f8 <f_mkfs+0xe5>
c00071f0:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f8:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fb:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007201:	77 07                	ja     c000720a <f_mkfs+0xf7>
c0007203:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007206:	85 d8                	test   eax,ebx
c0007208:	74 02                	je     c000720c <f_mkfs+0xf9>
c000720a:	31 db                	xor    ebx,ebx
c000720c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007217:	77 0a                	ja     c0007223 <f_mkfs+0x110>
c0007219:	bb 11 00 00 00       	mov    ebx,0x11
c000721e:	e9 06 10 00 00       	jmp    c0008229 <f_mkfs+0x1116>
c0007223:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000722a:	8b 36                	mov    esi,DWORD PTR [esi]
c000722c:	85 ed                	test   ebp,ebp
c000722e:	75 1e                	jne    c000724e <f_mkfs+0x13b>
c0007230:	83 ec 0c             	sub    esp,0xc
c0007233:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000723a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723f:	50                   	push   eax
c0007240:	e8 f1 0f 00 00       	call   c0008236 <ff_memalloc>
c0007245:	83 c4 10             	add    esp,0x10
c0007248:	89 c5                	mov    ebp,eax
c000724a:	85 c0                	test   eax,eax
c000724c:	74 cb                	je     c0007219 <f_mkfs+0x106>
c000724e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007256:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725e:	52                   	push   edx
c000725f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007263:	50                   	push   eax
c0007264:	6a 01                	push   0x1
c0007266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000726a:	e8 75 a7 ff ff       	call   c00019e4 <disk_ioctl>
c000726f:	83 c4 10             	add    esp,0x10
c0007272:	85 c0                	test   eax,eax
c0007274:	0f 85 4a 0f 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000727a:	89 f1                	mov    ecx,esi
c000727c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007284:	83 e1 0f             	and    ecx,0xf
c0007287:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728f:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007293:	83 e6 08             	and    esi,0x8
c0007296:	75 56                	jne    c00072ee <f_mkfs+0x1db>
c0007298:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729c:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072a0:	83 ff 00             	cmp    edi,0x0
c00072a3:	76 20                	jbe    c00072c5 <f_mkfs+0x1b2>
c00072a5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072aa:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b8:	83 d7 ff             	adc    edi,0xffffffff
c00072bb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bf:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c3:	eb 21                	jmp    c00072e6 <f_mkfs+0x1d3>
c00072c5:	ba 3f 00 00 00       	mov    edx,0x3f
c00072ca:	39 f2                	cmp    edx,esi
c00072cc:	19 f8                	sbb    eax,edi
c00072ce:	73 1e                	jae    c00072ee <f_mkfs+0x1db>
c00072d0:	83 c6 c1             	add    esi,0xffffffc1
c00072d3:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072db:	83 d7 ff             	adc    edi,0xffffffff
c00072de:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e2:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ee:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f2:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fd:	31 c0                	xor    eax,eax
c00072ff:	ba 7f 00 00 00       	mov    edx,0x7f
c0007304:	89 c7                	mov    edi,eax
c0007306:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007309:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730d:	0f 83 c5 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c0007313:	89 df                	mov    edi,ebx
c0007315:	c1 ef 09             	shr    edi,0x9
c0007318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732f:	74 29                	je     c000735a <f_mkfs+0x247>
c0007331:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007337:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000733c:	0f 97 c2             	seta   dl
c000733f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007342:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007346:	0f 92 c0             	setb   al
c0007349:	08 c2                	or     dl,al
c000734b:	75 5b                	jne    c00073a8 <f_mkfs+0x295>
c000734d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007351:	83 e0 07             	and    eax,0x7
c0007354:	3c 04                	cmp    al,0x4
c0007356:	74 50                	je     c00073a8 <f_mkfs+0x295>
c0007358:	eb 1b                	jmp    c0007375 <f_mkfs+0x262>
c000735a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735f:	0f 87 73 0a 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007365:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736b:	76 08                	jbe    c0007375 <f_mkfs+0x262>
c000736d:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007375:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007379:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737d:	83 e0 01             	and    eax,0x1
c0007380:	80 e1 02             	and    cl,0x2
c0007383:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007387:	74 0d                	je     c0007396 <f_mkfs+0x283>
c0007389:	84 c0                	test   al,al
c000738b:	0f 84 53 09 00 00    	je     c0007ce4 <f_mkfs+0xbd1>
c0007391:	e9 12 08 00 00       	jmp    c0007ba8 <f_mkfs+0xa95>
c0007396:	bb 13 00 00 00       	mov    ebx,0x13
c000739b:	84 c0                	test   al,al
c000739d:	0f 85 05 08 00 00    	jne    c0007ba8 <f_mkfs+0xa95>
c00073a3:	e9 39 0e 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c00073a8:	31 c0                	xor    eax,eax
c00073aa:	ba ff 0f 00 00       	mov    edx,0xfff
c00073af:	89 c7                	mov    edi,eax
c00073b1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b8:	0f 83 1a 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c00073be:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c4:	77 39                	ja     c00073ff <f_mkfs+0x2ec>
c00073c6:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073cb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d3:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073da:	73 08                	jae    c00073e4 <f_mkfs+0x2d1>
c00073dc:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e4:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ec:	b8 00 00 00 00       	mov    eax,0x0
c00073f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f5:	73 08                	jae    c00073ff <f_mkfs+0x2ec>
c00073f7:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007407:	83 c0 20             	add    eax,0x20
c000740a:	83 d2 00             	adc    edx,0x0
c000740d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007411:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007415:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007419:	31 d2                	xor    edx,edx
c000741b:	31 ff                	xor    edi,edi
c000741d:	52                   	push   edx
c000741e:	89 fb                	mov    ebx,edi
c0007420:	50                   	push   eax
c0007421:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007425:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007429:	e8 2e c6 01 00       	call   c0023a5c <__udivdi3>
c000742e:	83 c4 10             	add    esp,0x10
c0007431:	c1 e0 02             	shl    eax,0x2
c0007434:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007438:	05 07 02 00 00       	add    eax,0x207
c000743d:	89 f1                	mov    ecx,esi
c000743f:	c1 e8 09             	shr    eax,0x9
c0007442:	83 c1 ff             	add    ecx,0xffffffff
c0007445:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007449:	83 d3 ff             	adc    ebx,0xffffffff
c000744c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007450:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007454:	31 d2                	xor    edx,edx
c0007456:	01 c8                	add    eax,ecx
c0007458:	11 da                	adc    edx,ebx
c000745a:	89 c1                	mov    ecx,eax
c000745c:	f7 de                	neg    esi
c000745e:	89 d0                	mov    eax,edx
c0007460:	83 d7 00             	adc    edi,0x0
c0007463:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007467:	f7 df                	neg    edi
c0007469:	21 f1                	and    ecx,esi
c000746b:	21 f8                	and    eax,edi
c000746d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007475:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007479:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747d:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007481:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007484:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007488:	0f ac d0 01          	shrd   eax,edx,0x1
c000748c:	89 df                	mov    edi,ebx
c000748e:	d1 ea                	shr    edx,1
c0007490:	39 c1                	cmp    ecx,eax
c0007492:	19 d7                	sbb    edi,edx
c0007494:	0f 83 3e 09 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c000749a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749e:	31 d2                	xor    edx,edx
c00074a0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074af:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bf:	83 f8 0f             	cmp    eax,0xf
c00074c2:	0f 86 10 09 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c00074c8:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074d0:	0f 87 02 09 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c00074d6:	31 d2                	xor    edx,edx
c00074d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074dc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e4:	83 c0 07             	add    eax,0x7
c00074e7:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074ef:	c1 e8 03             	shr    eax,0x3
c00074f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007501:	c1 e0 09             	shl    eax,0x9
c0007504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007508:	48                   	dec    eax
c0007509:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007511:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007515:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007519:	31 d2                	xor    edx,edx
c000751b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000752a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007533:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007537:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000753b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000753f:	31 ff                	xor    edi,edi
c0007541:	31 f6                	xor    esi,esi
c0007543:	31 db                	xor    ebx,ebx
c0007545:	85 ff                	test   edi,edi
c0007547:	74 05                	je     c000754e <f_mkfs+0x43b>
c0007549:	4f                   	dec    edi
c000754a:	74 44                	je     c0007590 <f_mkfs+0x47d>
c000754c:	eb 4f                	jmp    c000759d <f_mkfs+0x48a>
c000754e:	83 ec 0c             	sub    esp,0xc
c0007551:	0f b7 c3             	movzx  eax,bx
c0007554:	50                   	push   eax
c0007555:	e8 05 0e 00 00       	call   c000835f <ff_wtoupper>
c000755a:	83 c4 10             	add    esp,0x10
c000755d:	89 c1                	mov    ecx,eax
c000755f:	8d 53 01             	lea    edx,[ebx+0x1]
c0007562:	66 39 c3             	cmp    bx,ax
c0007565:	75 3e                	jne    c00075a5 <f_mkfs+0x492>
c0007567:	be 01 00 00 00       	mov    esi,0x1
c000756c:	89 df                	mov    edi,ebx
c000756e:	66 01 f7             	add    di,si
c0007571:	75 07                	jne    c000757a <f_mkfs+0x467>
c0007573:	83 fe 7f             	cmp    esi,0x7f
c0007576:	77 31                	ja     c00075a9 <f_mkfs+0x496>
c0007578:	eb 16                	jmp    c0007590 <f_mkfs+0x47d>
c000757a:	83 ec 0c             	sub    esp,0xc
c000757d:	0f b7 ff             	movzx  edi,di
c0007580:	57                   	push   edi
c0007581:	e8 d9 0d 00 00       	call   c000835f <ff_wtoupper>
c0007586:	83 c4 10             	add    esp,0x10
c0007589:	39 c7                	cmp    edi,eax
c000758b:	75 e6                	jne    c0007573 <f_mkfs+0x460>
c000758d:	46                   	inc    esi
c000758e:	eb dc                	jmp    c000756c <f_mkfs+0x459>
c0007590:	31 c0                	xor    eax,eax
c0007592:	89 d9                	mov    ecx,ebx
c0007594:	4e                   	dec    esi
c0007595:	0f 95 c0             	setne  al
c0007598:	43                   	inc    ebx
c0007599:	89 c7                	mov    edi,eax
c000759b:	eb 14                	jmp    c00075b1 <f_mkfs+0x49e>
c000759d:	89 f1                	mov    ecx,esi
c000759f:	01 f3                	add    ebx,esi
c00075a1:	31 ff                	xor    edi,edi
c00075a3:	eb 0c                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a5:	89 d3                	mov    ebx,edx
c00075a7:	eb 08                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a9:	bf 02 00 00 00       	mov    edi,0x2
c00075ae:	83 c9 ff             	or     ecx,0xffffffff
c00075b1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075bc:	0f b6 c1             	movzx  eax,cl
c00075bf:	e8 3a a9 ff ff       	call   c0001efe <xsum32>
c00075c4:	66 c1 e9 08          	shr    cx,0x8
c00075c8:	89 c2                	mov    edx,eax
c00075ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cd:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075d1:	0f b7 c1             	movzx  eax,cx
c00075d4:	e8 25 a9 ff ff       	call   c0001efe <xsum32>
c00075d9:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075de:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e2:	66 85 db             	test   bx,bx
c00075e5:	74 1f                	je     c0007606 <f_mkfs+0x4f3>
c00075e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ea:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075f1:	83 c0 02             	add    eax,0x2
c00075f4:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075fa:	39 c2                	cmp    edx,eax
c00075fc:	74 08                	je     c0007606 <f_mkfs+0x4f3>
c00075fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007601:	e9 3f ff ff ff       	jmp    c0007545 <f_mkfs+0x432>
c0007606:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007609:	83 ec 0c             	sub    esp,0xc
c000760c:	05 01 02 00 00       	add    eax,0x201
c0007611:	c1 e8 09             	shr    eax,0x9
c0007614:	50                   	push   eax
c0007615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007619:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007621:	55                   	push   ebp
c0007622:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007626:	e8 a3 a3 ff ff       	call   c00019ce <disk_write>
c000762b:	83 c4 20             	add    esp,0x20
c000762e:	85 c0                	test   eax,eax
c0007630:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007633:	0f 85 8b 0b 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007639:	89 d0                	mov    eax,edx
c000763b:	31 d2                	xor    edx,edx
c000763d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007641:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007645:	66 85 db             	test   bx,bx
c0007648:	74 04                	je     c000764e <f_mkfs+0x53b>
c000764a:	31 c0                	xor    eax,eax
c000764c:	eb b0                	jmp    c00075fe <f_mkfs+0x4eb>
c000764e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007652:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007656:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000765a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007660:	31 d2                	xor    edx,edx
c0007662:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000766d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007671:	c1 eb 09             	shr    ebx,0x9
c0007674:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000767b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767f:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007683:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007687:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000768b:	8d 70 01             	lea    esi,[eax+0x1]
c000768e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007696:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769d:	31 d2                	xor    edx,edx
c000769f:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a7:	89 c1                	mov    ecx,eax
c00076a9:	89 e8                	mov    eax,ebp
c00076ab:	e8 e7 a3 ff ff       	call   c0001a97 <mem_set>
c00076b0:	31 c0                	xor    eax,eax
c00076b2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b5:	76 10                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076b7:	83 fe 07             	cmp    esi,0x7
c00076ba:	76 0b                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076bc:	40                   	inc    eax
c00076bd:	83 ee 08             	sub    esi,0x8
c00076c0:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c5:	eb eb                	jmp    c00076b2 <f_mkfs+0x59f>
c00076c7:	b2 01                	mov    dl,0x1
c00076c9:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cd:	85 f6                	test   esi,esi
c00076cf:	74 0c                	je     c00076dd <f_mkfs+0x5ca>
c00076d1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d4:	76 07                	jbe    c00076dd <f_mkfs+0x5ca>
c00076d6:	08 11                	or     BYTE PTR [ecx],dl
c00076d8:	4e                   	dec    esi
c00076d9:	d1 e2                	shl    edx,1
c00076db:	eb f0                	jmp    c00076cd <f_mkfs+0x5ba>
c00076dd:	89 df                	mov    edi,ebx
c00076df:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e3:	76 04                	jbe    c00076e9 <f_mkfs+0x5d6>
c00076e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e9:	83 ec 0c             	sub    esp,0xc
c00076ec:	57                   	push   edi
c00076ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f5:	55                   	push   ebp
c00076f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076fa:	e8 cf a2 ff ff       	call   c00019ce <disk_write>
c00076ff:	83 c4 20             	add    esp,0x20
c0007702:	85 c0                	test   eax,eax
c0007704:	0f 85 ba 0a 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000770a:	31 d2                	xor    edx,edx
c000770c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007710:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007714:	29 fb                	sub    ebx,edi
c0007716:	0f 85 7a ff ff ff    	jne    c0007696 <f_mkfs+0x583>
c000771c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007720:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007728:	31 f6                	xor    esi,esi
c000772a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000772e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007731:	31 d2                	xor    edx,edx
c0007733:	89 e8                	mov    eax,ebp
c0007735:	e8 5d a3 ff ff       	call   c0001a97 <mem_set>
c000773a:	31 c9                	xor    ecx,ecx
c000773c:	85 db                	test   ebx,ebx
c000773e:	75 40                	jne    c0007780 <f_mkfs+0x66d>
c0007740:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007745:	89 e8                	mov    eax,ebp
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 28 a3 ff ff       	call   c0001a79 <st_dword>
c0007751:	8d 45 04             	lea    eax,[ebp+0x4]
c0007754:	83 ca ff             	or     edx,0xffffffff
c0007757:	e8 1d a3 ff ff       	call   c0001a79 <st_dword>
c000775c:	b9 08 00 00 00       	mov    ecx,0x8
c0007761:	eb 1d                	jmp    c0007780 <f_mkfs+0x66d>
c0007763:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007766:	76 3b                	jbe    c00077a3 <f_mkfs+0x690>
c0007768:	43                   	inc    ebx
c0007769:	83 fe 01             	cmp    esi,0x1
c000776c:	89 da                	mov    edx,ebx
c000776e:	77 03                	ja     c0007773 <f_mkfs+0x660>
c0007770:	83 ca ff             	or     edx,0xffffffff
c0007773:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007777:	4e                   	dec    esi
c0007778:	e8 fc a2 ff ff       	call   c0001a79 <st_dword>
c000777d:	83 c1 04             	add    ecx,0x4
c0007780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007784:	85 f6                	test   esi,esi
c0007786:	75 db                	jne    c0007763 <f_mkfs+0x650>
c0007788:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778d:	77 14                	ja     c00077a3 <f_mkfs+0x690>
c000778f:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007793:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000779a:	85 f6                	test   esi,esi
c000779c:	74 05                	je     c00077a3 <f_mkfs+0x690>
c000779e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a1:	77 dd                	ja     c0007780 <f_mkfs+0x66d>
c00077a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ab:	39 cf                	cmp    edi,ecx
c00077ad:	76 02                	jbe    c00077b1 <f_mkfs+0x69e>
c00077af:	89 cf                	mov    edi,ecx
c00077b1:	83 ec 0c             	sub    esp,0xc
c00077b4:	57                   	push   edi
c00077b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077bd:	55                   	push   ebp
c00077be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c2:	e8 07 a2 ff ff       	call   c00019ce <disk_write>
c00077c7:	83 c4 20             	add    esp,0x20
c00077ca:	85 c0                	test   eax,eax
c00077cc:	0f 85 f2 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00077d2:	31 d2                	xor    edx,edx
c00077d4:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077d8:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077dc:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077e0:	0f 85 48 ff ff ff    	jne    c000772e <f_mkfs+0x61b>
c00077e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e9:	31 d2                	xor    edx,edx
c00077eb:	89 e8                	mov    eax,ebp
c00077ed:	31 ff                	xor    edi,edi
c00077ef:	e8 a3 a2 ff ff       	call   c0001a97 <mem_set>
c00077f4:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f7:	ba 02 00 00 00       	mov    edx,0x2
c00077fc:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007800:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007804:	e8 70 a2 ff ff       	call   c0001a79 <st_dword>
c0007809:	8d 45 38             	lea    eax,[ebp+0x38]
c000780c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007810:	e8 64 a2 ff ff       	call   c0001a79 <st_dword>
c0007815:	8d 45 44             	lea    eax,[ebp+0x44]
c0007818:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007820:	e8 54 a2 ff ff       	call   c0001a79 <st_dword>
c0007825:	8d 45 54             	lea    eax,[ebp+0x54]
c0007828:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000782c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007830:	83 c2 02             	add    edx,0x2
c0007833:	e8 41 a2 ff ff       	call   c0001a79 <st_dword>
c0007838:	8d 45 58             	lea    eax,[ebp+0x58]
c000783b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007843:	e8 31 a2 ff ff       	call   c0001a79 <st_dword>
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007851:	89 c6                	mov    esi,eax
c0007853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007857:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000785b:	89 04 24             	mov    DWORD PTR [esp],eax
c000785e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007862:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007865:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007869:	39 cb                	cmp    ebx,ecx
c000786b:	76 02                	jbe    c000786f <f_mkfs+0x75c>
c000786d:	89 cb                	mov    ebx,ecx
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	53                   	push   ebx
c0007873:	57                   	push   edi
c0007874:	56                   	push   esi
c0007875:	55                   	push   ebp
c0007876:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000787a:	e8 4f a1 ff ff       	call   c00019ce <disk_write>
c000787f:	83 c4 20             	add    esp,0x20
c0007882:	85 c0                	test   eax,eax
c0007884:	0f 85 3a 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000788a:	31 d2                	xor    edx,edx
c000788c:	b9 00 02 00 00       	mov    ecx,0x200
c0007891:	89 e8                	mov    eax,ebp
c0007893:	e8 ff a1 ff ff       	call   c0001a97 <mem_set>
c0007898:	31 d2                	xor    edx,edx
c000789a:	01 de                	add    esi,ebx
c000789c:	11 d7                	adc    edi,edx
c000789e:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078a1:	75 bf                	jne    c0007862 <f_mkfs+0x74f>
c00078a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078ab:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b3:	b9 00 02 00 00       	mov    ecx,0x200
c00078b8:	31 d2                	xor    edx,edx
c00078ba:	89 e8                	mov    eax,ebp
c00078bc:	e8 d6 a1 ff ff       	call   c0001a97 <mem_set>
c00078c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c6:	ba 20 64 02 c0       	mov    edx,0xc0026420
c00078cb:	89 e8                	mov    eax,ebp
c00078cd:	e8 b0 a1 ff ff       	call   c0001a82 <mem_cpy>
c00078d2:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078dd:	e8 9a a1 ff ff       	call   c0001a7c <st_qword>
c00078e2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e6:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078ed:	e8 8a a1 ff ff       	call   c0001a7c <st_qword>
c00078f2:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f5:	ba 20 00 00 00       	mov    edx,0x20
c00078fa:	e8 7a a1 ff ff       	call   c0001a79 <st_dword>
c00078ff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007903:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007907:	e8 6d a1 ff ff       	call   c0001a79 <st_dword>
c000790c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007910:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007914:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007918:	e8 5c a1 ff ff       	call   c0001a79 <st_dword>
c000791d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007920:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007924:	e8 50 a1 ff ff       	call   c0001a79 <st_dword>
c0007929:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000792d:	8d 50 02             	lea    edx,[eax+0x2]
c0007930:	8d 45 60             	lea    eax,[ebp+0x60]
c0007933:	e8 41 a1 ff ff       	call   c0001a79 <st_dword>
c0007938:	8d 45 64             	lea    eax,[ebp+0x64]
c000793b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007940:	e8 34 a1 ff ff       	call   c0001a79 <st_dword>
c0007945:	8d 45 68             	lea    eax,[ebp+0x68]
c0007948:	ba 00 01 00 00       	mov    edx,0x100
c000794d:	e8 23 a1 ff ff       	call   c0001a75 <st_word>
c0007952:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007956:	b8 0a 00 00 00       	mov    eax,0xa
c000795b:	48                   	dec    eax
c000795c:	74 05                	je     c0007963 <f_mkfs+0x850>
c000795e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007961:	eb f8                	jmp    c000795b <f_mkfs+0x848>
c0007963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007967:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000796b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796f:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007973:	74 05                	je     c000797a <f_mkfs+0x867>
c0007975:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007978:	eb f5                	jmp    c000796f <f_mkfs+0x85c>
c000797a:	8d 45 78             	lea    eax,[ebp+0x78]
c000797d:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007982:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007988:	31 db                	xor    ebx,ebx
c000798a:	e8 e6 a0 ff ff       	call   c0001a75 <st_word>
c000798f:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007995:	ba 55 aa 00 00       	mov    edx,0xaa55
c000799a:	89 04 24             	mov    DWORD PTR [esp],eax
c000799d:	e8 d3 a0 ff ff       	call   c0001a75 <st_word>
c00079a2:	31 c9                	xor    ecx,ecx
c00079a4:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a7:	83 f8 01             	cmp    eax,0x1
c00079aa:	76 13                	jbe    c00079bf <f_mkfs+0x8ac>
c00079ac:	83 f9 70             	cmp    ecx,0x70
c00079af:	74 0e                	je     c00079bf <f_mkfs+0x8ac>
c00079b1:	89 da                	mov    edx,ebx
c00079b3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b8:	e8 41 a5 ff ff       	call   c0001efe <xsum32>
c00079bd:	89 c3                	mov    ebx,eax
c00079bf:	41                   	inc    ecx
c00079c0:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c6:	75 dc                	jne    c00079a4 <f_mkfs+0x891>
c00079c8:	89 f0                	mov    eax,esi
c00079ca:	89 fa                	mov    edx,edi
c00079cc:	83 c0 01             	add    eax,0x1
c00079cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d3:	83 d2 00             	adc    edx,0x0
c00079d6:	83 ec 0c             	sub    esp,0xc
c00079d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079dd:	6a 01                	push   0x1
c00079df:	57                   	push   edi
c00079e0:	56                   	push   esi
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 e3 9f ff ff       	call   c00019ce <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 ce 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	b9 00 02 00 00       	mov    ecx,0x200
c00079fd:	89 e8                	mov    eax,ebp
c00079ff:	e8 93 a0 ff ff       	call   c0001a97 <mem_set>
c0007a04:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0c:	e8 64 a0 ff ff       	call   c0001a75 <st_word>
c0007a11:	89 f0                	mov    eax,esi
c0007a13:	89 fa                	mov    edx,edi
c0007a15:	83 c0 09             	add    eax,0x9
c0007a18:	83 d2 00             	adc    edx,0x0
c0007a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a22:	31 c9                	xor    ecx,ecx
c0007a24:	41                   	inc    ecx
c0007a25:	89 da                	mov    edx,ebx
c0007a27:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2c:	e8 cd a4 ff ff       	call   c0001efe <xsum32>
c0007a31:	89 c3                	mov    ebx,eax
c0007a33:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a39:	75 e9                	jne    c0007a24 <f_mkfs+0x911>
c0007a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a43:	83 c0 01             	add    eax,0x1
c0007a46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a4a:	83 d2 00             	adc    edx,0x0
c0007a4d:	83 ec 0c             	sub    esp,0xc
c0007a50:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a54:	6a 01                	push   0x1
c0007a56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5e:	55                   	push   ebp
c0007a5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a63:	e8 66 9f ff ff       	call   c00019ce <disk_write>
c0007a68:	83 c4 20             	add    esp,0x20
c0007a6b:	85 c0                	test   eax,eax
c0007a6d:	0f 85 51 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a7b:	75 09                	jne    c0007a86 <f_mkfs+0x973>
c0007a7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a80:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a84:	74 12                	je     c0007a98 <f_mkfs+0x985>
c0007a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a96:	eb 8a                	jmp    c0007a22 <f_mkfs+0x90f>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9f:	89 e8                	mov    eax,ebp
c0007aa1:	e8 f1 9f ff ff       	call   c0001a97 <mem_set>
c0007aa6:	83 c6 0b             	add    esi,0xb
c0007aa9:	83 d7 00             	adc    edi,0x0
c0007aac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007ab0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab4:	31 c9                	xor    ecx,ecx
c0007ab6:	41                   	inc    ecx
c0007ab7:	89 da                	mov    edx,ebx
c0007ab9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abe:	e8 3b a4 ff ff       	call   c0001efe <xsum32>
c0007ac3:	89 c3                	mov    ebx,eax
c0007ac5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007acb:	75 e9                	jne    c0007ab6 <f_mkfs+0x9a3>
c0007acd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ad0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad4:	83 c6 01             	add    esi,0x1
c0007ad7:	83 d7 00             	adc    edi,0x0
c0007ada:	83 ec 0c             	sub    esp,0xc
c0007add:	6a 01                	push   0x1
c0007adf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae7:	55                   	push   ebp
c0007ae8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aec:	e8 dd 9e ff ff       	call   c00019ce <disk_write>
c0007af1:	83 c4 20             	add    esp,0x20
c0007af4:	85 c0                	test   eax,eax
c0007af6:	0f 85 c8 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007afc:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b00:	75 06                	jne    c0007b08 <f_mkfs+0x9f5>
c0007b02:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b06:	74 09                	je     c0007b11 <f_mkfs+0x9fe>
c0007b08:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b0b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0f:	eb a3                	jmp    c0007ab4 <f_mkfs+0x9a1>
c0007b11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b15:	89 da                	mov    edx,ebx
c0007b17:	01 e8                	add    eax,ebp
c0007b19:	e8 5b 9f ff ff       	call   c0001a79 <st_dword>
c0007b1e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b23:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b2b:	75 e4                	jne    c0007b11 <f_mkfs+0x9fe>
c0007b2d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b30:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b34:	83 c6 02             	add    esi,0x2
c0007b37:	83 d7 00             	adc    edi,0x0
c0007b3a:	83 ec 0c             	sub    esp,0xc
c0007b3d:	6a 01                	push   0x1
c0007b3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b47:	55                   	push   ebp
c0007b48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4c:	e8 7d 9e ff ff       	call   c00019ce <disk_write>
c0007b51:	83 c4 20             	add    esp,0x20
c0007b54:	85 c0                	test   eax,eax
c0007b56:	0f 85 68 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007b5c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b61:	74 0d                	je     c0007b70 <f_mkfs+0xa5d>
c0007b63:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b6b:	e9 43 fd ff ff       	jmp    c00078b3 <f_mkfs+0x7a0>
c0007b70:	b1 07                	mov    cl,0x7
c0007b72:	e9 e3 05 00 00       	jmp    c000815a <f_mkfs+0x1047>
c0007b77:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7c:	0f 85 4f 02 00 00    	jne    c0007dd1 <f_mkfs+0xcbe>
c0007b82:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b87:	0f 86 22 02 00 00    	jbe    c0007daf <f_mkfs+0xc9c>
c0007b8d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b92:	0f 85 81 06 00 00    	jne    c0008219 <f_mkfs+0x1106>
c0007b98:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9f:	83 f8 40             	cmp    eax,0x40
c0007ba2:	0f 87 51 06 00 00    	ja     c00081f9 <f_mkfs+0x10e6>
c0007ba8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bac:	85 ff                	test   edi,edi
c0007bae:	75 1c                	jne    c0007bcc <f_mkfs+0xab9>
c0007bb0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb3:	ba 20 63 02 c0       	mov    edx,0xc0026320
c0007bb8:	c1 e9 0c             	shr    ecx,0xc
c0007bbb:	bf 01 00 00 00       	mov    edi,0x1
c0007bc0:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc3:	66 85 c0             	test   ax,ax
c0007bc6:	0f 85 95 01 00 00    	jne    c0007d61 <f_mkfs+0xc4e>
c0007bcc:	31 d2                	xor    edx,edx
c0007bce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bd1:	f7 f7                	div    edi
c0007bd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd8:	0f 86 95 01 00 00    	jbe    c0007d73 <f_mkfs+0xc60>
c0007bde:	83 c0 02             	add    eax,0x2
c0007be1:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be6:	01 c0                	add    eax,eax
c0007be8:	05 ff 01 00 00       	add    eax,0x1ff
c0007bed:	be 01 00 00 00       	mov    esi,0x1
c0007bf2:	c1 e8 09             	shr    eax,0x9
c0007bf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfd:	c1 e0 05             	shl    eax,0x5
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c07:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c0c:	31 d2                	xor    edx,edx
c0007c0e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c12:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c16:	89 f0                	mov    eax,esi
c0007c18:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c1c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c33:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c37:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c3b:	31 db                	xor    ebx,ebx
c0007c3d:	01 c8                	add    eax,ecx
c0007c3f:	11 da                	adc    edx,ebx
c0007c41:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c49:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c4d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c51:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c55:	f7 da                	neg    edx
c0007c57:	21 d1                	and    ecx,edx
c0007c59:	29 d9                	sub    ecx,ebx
c0007c5b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c60:	0f 85 20 01 00 00    	jne    c0007d86 <f_mkfs+0xc73>
c0007c66:	31 db                	xor    ebx,ebx
c0007c68:	01 ce                	add    esi,ecx
c0007c6a:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6e:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c72:	31 d2                	xor    edx,edx
c0007c74:	89 f8                	mov    eax,edi
c0007c76:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c7a:	c1 e0 04             	shl    eax,0x4
c0007c7d:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c81:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c85:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c89:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c90:	19 d3                	sbb    ebx,edx
c0007c92:	0f 82 40 01 00 00    	jb     c0007dd8 <f_mkfs+0xcc5>
c0007c98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9f:	89 c8                	mov    eax,ecx
c0007ca1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ca6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007caa:	29 f0                	sub    eax,esi
c0007cac:	29 d0                	sub    eax,edx
c0007cae:	31 d2                	xor    edx,edx
c0007cb0:	f7 f7                	div    edi
c0007cb2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb7:	89 c3                	mov    ebx,eax
c0007cb9:	0f 85 b8 fe ff ff    	jne    c0007b77 <f_mkfs+0xa64>
c0007cbf:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc4:	0f 87 1d 01 00 00    	ja     c0007de7 <f_mkfs+0xcd4>
c0007cca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccf:	0f 85 03 01 00 00    	jne    c0007dd8 <f_mkfs+0xcc5>
c0007cd5:	83 ff 01             	cmp    edi,0x1
c0007cd8:	0f 86 fa 00 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c0007cde:	d1 ef                	shr    edi,1
c0007ce0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ceb:	85 db                	test   ebx,ebx
c0007ced:	75 2d                	jne    c0007d1c <f_mkfs+0xc09>
c0007cef:	89 cb                	mov    ebx,ecx
c0007cf1:	ba 30 63 02 c0       	mov    edx,0xc0026330
c0007cf6:	c1 eb 11             	shr    ebx,0x11
c0007cf9:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d01:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d04:	66 85 c0             	test   ax,ax
c0007d07:	74 11                	je     c0007d1a <f_mkfs+0xc07>
c0007d09:	83 c2 02             	add    edx,0x2
c0007d0c:	39 d8                	cmp    eax,ebx
c0007d0e:	77 0a                	ja     c0007d1a <f_mkfs+0xc07>
c0007d10:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d14:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d18:	eb e7                	jmp    c0007d01 <f_mkfs+0xbee>
c0007d1a:	31 db                	xor    ebx,ebx
c0007d1c:	31 d2                	xor    edx,edx
c0007d1e:	89 c8                	mov    eax,ecx
c0007d20:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d24:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d2b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d30:	c1 ea 09             	shr    edx,0x9
c0007d33:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d38:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3c:	0f 87 96 00 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d46:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d52:	be 20 00 00 00       	mov    esi,0x20
c0007d57:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5c:	e9 a6 fe ff ff       	jmp    c0007c07 <f_mkfs+0xaf4>
c0007d61:	83 c2 02             	add    edx,0x2
c0007d64:	39 c8                	cmp    eax,ecx
c0007d66:	0f 87 60 fe ff ff    	ja     c0007bcc <f_mkfs+0xab9>
c0007d6c:	01 ff                	add    edi,edi
c0007d6e:	e9 4d fe ff ff       	jmp    c0007bc0 <f_mkfs+0xaad>
c0007d73:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d76:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7b:	40                   	inc    eax
c0007d7c:	d1 e8                	shr    eax,1
c0007d7e:	83 c0 03             	add    eax,0x3
c0007d81:	e9 62 fe ff ff       	jmp    c0007be8 <f_mkfs+0xad5>
c0007d86:	31 d2                	xor    edx,edx
c0007d88:	89 c8                	mov    eax,ecx
c0007d8a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d8e:	85 d2                	test   edx,edx
c0007d90:	74 0c                	je     c0007d9e <f_mkfs+0xc8b>
c0007d92:	49                   	dec    ecx
c0007d93:	46                   	inc    esi
c0007d94:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d99:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9e:	89 c8                	mov    eax,ecx
c0007da0:	31 d2                	xor    edx,edx
c0007da2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007da6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007daa:	e9 c3 fe ff ff       	jmp    c0007c72 <f_mkfs+0xb5f>
c0007daf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db4:	77 31                	ja     c0007de7 <f_mkfs+0xcd4>
c0007db6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dbb:	75 1b                	jne    c0007dd8 <f_mkfs+0xcc5>
c0007dbd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc9:	0f 86 d9 fd ff ff    	jbe    c0007ba8 <f_mkfs+0xa95>
c0007dcf:	eb 07                	jmp    c0007dd8 <f_mkfs+0xcc5>
c0007dd1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd6:	76 0a                	jbe    c0007de2 <f_mkfs+0xccf>
c0007dd8:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddd:	e9 ff 03 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c0007de2:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	b9 00 02 00 00       	mov    ecx,0x200
c0007dee:	89 e8                	mov    eax,ebp
c0007df0:	e8 a2 9c ff ff       	call   c0001a97 <mem_set>
c0007df5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007dfa:	ba 42 64 02 c0       	mov    edx,0xc0026442
c0007dff:	89 e8                	mov    eax,ebp
c0007e01:	e8 7c 9c ff ff       	call   c0001a82 <mem_cpy>
c0007e06:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e09:	ba 00 02 00 00       	mov    edx,0x200
c0007e0e:	e8 62 9c ff ff       	call   c0001a75 <st_word>
c0007e13:	89 f8                	mov    eax,edi
c0007e15:	0f b7 d6             	movzx  edx,si
c0007e18:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e1b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1e:	e8 52 9c ff ff       	call   c0001a75 <st_word>
c0007e23:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e27:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e2f:	75 08                	jne    c0007e39 <f_mkfs+0xd26>
c0007e31:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e39:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e40:	e8 30 9c ff ff       	call   c0001a75 <st_word>
c0007e45:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e4a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4e:	39 d0                	cmp    eax,edx
c0007e50:	b8 00 00 00 00       	mov    eax,0x0
c0007e55:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e59:	72 0a                	jb     c0007e65 <f_mkfs+0xd52>
c0007e5b:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5e:	e8 12 9c ff ff       	call   c0001a75 <st_word>
c0007e63:	eb 08                	jmp    c0007e6d <f_mkfs+0xd5a>
c0007e65:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e68:	e8 0c 9c ff ff       	call   c0001a79 <st_dword>
c0007e6d:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e70:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e75:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e79:	e8 f7 9b ff ff       	call   c0001a75 <st_word>
c0007e7e:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e81:	ba ff 00 00 00       	mov    edx,0xff
c0007e86:	e8 ea 9b ff ff       	call   c0001a75 <st_word>
c0007e8b:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e92:	e8 e2 9b ff ff       	call   c0001a79 <st_dword>
c0007e97:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9c:	75 57                	jne    c0007ef5 <f_mkfs+0xde2>
c0007e9e:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ea1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea6:	e8 ce 9b ff ff       	call   c0001a79 <st_dword>
c0007eab:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb2:	e8 c2 9b ff ff       	call   c0001a79 <st_dword>
c0007eb7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eba:	ba 02 00 00 00       	mov    edx,0x2
c0007ebf:	e8 b5 9b ff ff       	call   c0001a79 <st_dword>
c0007ec4:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec7:	ba 01 00 00 00       	mov    edx,0x1
c0007ecc:	e8 a4 9b ff ff       	call   c0001a75 <st_word>
c0007ed1:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed4:	ba 06 00 00 00       	mov    edx,0x6
c0007ed9:	e8 97 9b ff ff       	call   c0001a75 <st_word>
c0007ede:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee2:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee6:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee9:	b9 13 00 00 00       	mov    ecx,0x13
c0007eee:	ba 4e 64 02 c0       	mov    edx,0xc002644e
c0007ef3:	eb 2f                	jmp    c0007f24 <f_mkfs+0xe11>
c0007ef5:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efd:	e8 77 9b ff ff       	call   c0001a79 <st_dword>
c0007f02:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f07:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f0a:	e8 66 9b ff ff       	call   c0001a75 <st_word>
c0007f0f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f13:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f17:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f1a:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1f:	ba 62 64 02 c0       	mov    edx,0xc0026462
c0007f24:	e8 59 9b ff ff       	call   c0001a82 <mem_cpy>
c0007f29:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f2f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f34:	89 f0                	mov    eax,esi
c0007f36:	e8 3a 9b ff ff       	call   c0001a75 <st_word>
c0007f3b:	83 ec 0c             	sub    esp,0xc
c0007f3e:	6a 01                	push   0x1
c0007f40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f48:	55                   	push   ebp
c0007f49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4d:	e8 7c 9a ff ff       	call   c00019ce <disk_write>
c0007f52:	83 c4 20             	add    esp,0x20
c0007f55:	85 c0                	test   eax,eax
c0007f57:	0f 85 67 02 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007f5d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f62:	0f 85 b7 00 00 00    	jne    c000801f <f_mkfs+0xf0c>
c0007f68:	83 ec 0c             	sub    esp,0xc
c0007f6b:	6a 01                	push   0x1
c0007f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f75:	83 c0 06             	add    eax,0x6
c0007f78:	83 d2 00             	adc    edx,0x0
c0007f7b:	52                   	push   edx
c0007f7c:	50                   	push   eax
c0007f7d:	55                   	push   ebp
c0007f7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f82:	e8 47 9a ff ff       	call   c00019ce <disk_write>
c0007f87:	83 c4 20             	add    esp,0x20
c0007f8a:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8f:	31 d2                	xor    edx,edx
c0007f91:	89 e8                	mov    eax,ebp
c0007f93:	e8 ff 9a ff ff       	call   c0001a97 <mem_set>
c0007f98:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9d:	89 e8                	mov    eax,ebp
c0007f9f:	e8 d5 9a ff ff       	call   c0001a79 <st_dword>
c0007fa4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007faa:	ba 72 72 41 61       	mov    edx,0x61417272
c0007faf:	e8 c5 9a ff ff       	call   c0001a79 <st_dword>
c0007fb4:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbd:	e8 b7 9a ff ff       	call   c0001a79 <st_dword>
c0007fc2:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc8:	ba 02 00 00 00       	mov    edx,0x2
c0007fcd:	e8 a7 9a ff ff       	call   c0001a79 <st_dword>
c0007fd2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd7:	89 f0                	mov    eax,esi
c0007fd9:	e8 97 9a ff ff       	call   c0001a75 <st_word>
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	6a 01                	push   0x1
c0007fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007feb:	83 c0 07             	add    eax,0x7
c0007fee:	83 d2 00             	adc    edx,0x0
c0007ff1:	52                   	push   edx
c0007ff2:	50                   	push   eax
c0007ff3:	55                   	push   ebp
c0007ff4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff8:	e8 d1 99 ff ff       	call   c00019ce <disk_write>
c0007ffd:	83 c4 14             	add    esp,0x14
c0008000:	6a 01                	push   0x1
c0008002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008006:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000800a:	83 c0 01             	add    eax,0x1
c000800d:	83 d2 00             	adc    edx,0x0
c0008010:	52                   	push   edx
c0008011:	50                   	push   eax
c0008012:	55                   	push   ebp
c0008013:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008017:	e8 b2 99 ff ff       	call   c00019ce <disk_write>
c000801c:	83 c4 20             	add    esp,0x20
c000801f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008026:	31 d2                	xor    edx,edx
c0008028:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802e:	31 db                	xor    ebx,ebx
c0008030:	89 e8                	mov    eax,ebp
c0008032:	e8 60 9a ff ff       	call   c0001a97 <mem_set>
c0008037:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008043:	0f 94 c3             	sete   bl
c0008046:	4b                   	dec    ebx
c0008047:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008053:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008058:	75 21                	jne    c000807b <f_mkfs+0xf68>
c000805a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805f:	89 e8                	mov    eax,ebp
c0008061:	e8 13 9a ff ff       	call   c0001a79 <st_dword>
c0008066:	8d 45 04             	lea    eax,[ebp+0x4]
c0008069:	83 ca ff             	or     edx,0xffffffff
c000806c:	e8 08 9a ff ff       	call   c0001a79 <st_dword>
c0008071:	8d 45 08             	lea    eax,[ebp+0x8]
c0008074:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008079:	eb 04                	jmp    c000807f <f_mkfs+0xf6c>
c000807b:	89 da                	mov    edx,ebx
c000807d:	89 e8                	mov    eax,ebp
c000807f:	e8 f5 99 ff ff       	call   c0001a79 <st_dword>
c0008084:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008088:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008090:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008094:	39 ce                	cmp    esi,ecx
c0008096:	76 02                	jbe    c000809a <f_mkfs+0xf87>
c0008098:	89 ce                	mov    esi,ecx
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	56                   	push   esi
c000809e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a6:	55                   	push   ebp
c00080a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ab:	e8 1e 99 ff ff       	call   c00019ce <disk_write>
c00080b0:	83 c4 20             	add    esp,0x20
c00080b3:	85 c0                	test   eax,eax
c00080b5:	0f 85 09 01 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00080bb:	31 d2                	xor    edx,edx
c00080bd:	b9 00 02 00 00       	mov    ecx,0x200
c00080c2:	89 e8                	mov    eax,ebp
c00080c4:	e8 ce 99 ff ff       	call   c0001a97 <mem_set>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cf:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d7:	75 b3                	jne    c000808c <f_mkfs+0xf79>
c00080d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080dc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e3:	40                   	inc    eax
c00080e4:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080e8:	0f 87 65 ff ff ff    	ja     c0008053 <f_mkfs+0xf40>
c00080ee:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f3:	74 04                	je     c00080f9 <f_mkfs+0xfe6>
c00080f5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00080f9:	89 fb                	mov    ebx,edi
c00080fb:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080ff:	76 04                	jbe    c0008105 <f_mkfs+0xff2>
c0008101:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008105:	83 ec 0c             	sub    esp,0xc
c0008108:	53                   	push   ebx
c0008109:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008111:	55                   	push   ebp
c0008112:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008116:	e8 b3 98 ff ff       	call   c00019ce <disk_write>
c000811b:	83 c4 20             	add    esp,0x20
c000811e:	85 c0                	test   eax,eax
c0008120:	0f 85 9e 00 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0008126:	31 d2                	xor    edx,edx
c0008128:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008130:	29 df                	sub    edi,ebx
c0008132:	75 c5                	jne    c00080f9 <f_mkfs+0xfe6>
c0008134:	b1 0c                	mov    cl,0xc
c0008136:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813b:	74 1d                	je     c000815a <f_mkfs+0x1047>
c000813d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008142:	b1 06                	mov    cl,0x6
c0008144:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008148:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814c:	72 0c                	jb     c000815a <f_mkfs+0x1047>
c000814e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008153:	0f 94 c1             	sete   cl
c0008156:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000815a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815f:	75 4c                	jne    c00081ad <f_mkfs+0x109a>
c0008161:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008165:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008169:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008170:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008177:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008182:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818d:	0f b6 c9             	movzx  ecx,cl
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	55                   	push   ebp
c0008194:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000819f:	e8 2f c2 ff ff       	call   c00043d3 <create_partition>
c00081a4:	83 c4 10             	add    esp,0x10
c00081a7:	89 c3                	mov    ebx,eax
c00081a9:	85 c0                	test   eax,eax
c00081ab:	75 34                	jne    c00081e1 <f_mkfs+0x10ce>
c00081ad:	31 db                	xor    ebx,ebx
c00081af:	50                   	push   eax
c00081b0:	6a 00                	push   0x0
c00081b2:	6a 00                	push   0x0
c00081b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b8:	e8 27 98 ff ff       	call   c00019e4 <disk_ioctl>
c00081bd:	83 c4 10             	add    esp,0x10
c00081c0:	85 c0                	test   eax,eax
c00081c2:	74 1d                	je     c00081e1 <f_mkfs+0x10ce>
c00081c4:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081cc:	75 0c                	jne    c00081da <f_mkfs+0x10c7>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	55                   	push   ebp
c00081d2:	e8 75 00 00 00       	call   c000824c <ff_memfree>
c00081d7:	83 c4 10             	add    esp,0x10
c00081da:	bb 01 00 00 00       	mov    ebx,0x1
c00081df:	eb 48                	jmp    c0008229 <f_mkfs+0x1116>
c00081e1:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e9:	75 3e                	jne    c0008229 <f_mkfs+0x1116>
c00081eb:	83 ec 0c             	sub    esp,0xc
c00081ee:	55                   	push   ebp
c00081ef:	e8 58 00 00 00       	call   c000824c <ff_memfree>
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	eb 30                	jmp    c0008229 <f_mkfs+0x1116>
c00081f9:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fe:	0f 85 eb fa ff ff    	jne    c0007cef <f_mkfs+0xbdc>
c0008204:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008208:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820e:	0f 86 b8 f9 ff ff    	jbe    c0007bcc <f_mkfs+0xab9>
c0008214:	e9 bf fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008219:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821e:	0f 85 c0 fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd1>
c0008224:	e9 af fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008229:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822f:	89 d8                	mov    eax,ebx
c0008231:	5b                   	pop    ebx
c0008232:	5e                   	pop    esi
c0008233:	5f                   	pop    edi
c0008234:	5d                   	pop    ebp
c0008235:	c3                   	ret    

c0008236 <ff_memalloc>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 8d 72 00 00       	call   c000f4d2 <malloc>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 c4 0c             	add    esp,0xc
c000824b:	c3                   	ret    

c000824c <ff_memfree>:
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	83 ec 0c             	sub    esp,0xc
c0008252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008256:	e8 87 72 00 00       	call   c000f4e2 <free>
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	90                   	nop
c000825f:	83 c4 0c             	add    esp,0xc
c0008262:	c3                   	ret    

c0008263 <ff_uni2oem>:
c0008263:	83 ec 14             	sub    esp,0x14
c0008266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000826a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826e:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008275:	c7 44 24 0c 80 67 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026780
c000827d:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008282:	77 0b                	ja     c000828f <ff_uni2oem+0x2c>
c0008284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008288:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828d:	eb 5b                	jmp    c00082ea <ff_uni2oem+0x87>
c000828f:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008297:	77 51                	ja     c00082ea <ff_uni2oem+0x87>
c0008299:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829f:	75 49                	jne    c00082ea <ff_uni2oem+0x87>
c00082a1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a8:	eb 0b                	jmp    c00082b5 <ff_uni2oem+0x52>
c00082aa:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082af:	40                   	inc    eax
c00082b0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082bb:	77 1b                	ja     c00082d8 <ff_uni2oem+0x75>
c00082bd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082c2:	01 c0                	add    eax,eax
c00082c4:	89 c2                	mov    edx,eax
c00082c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ca:	01 d0                	add    eax,edx
c00082cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cf:	0f b7 c0             	movzx  eax,ax
c00082d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d6:	75 d2                	jne    c00082aa <ff_uni2oem+0x47>
c00082d8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082dd:	83 e8 80             	sub    eax,0xffffff80
c00082e0:	25 ff 00 00 00       	and    eax,0xff
c00082e5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ef:	83 c4 14             	add    esp,0x14
c00082f2:	c3                   	ret    

c00082f3 <ff_oem2uni>:
c00082f3:	83 ec 18             	sub    esp,0x18
c00082f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fe:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008303:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008307:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830e:	c7 44 24 10 80 67 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026780
c0008316:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831c:	77 0b                	ja     c0008329 <ff_oem2uni+0x36>
c000831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008322:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008327:	eb 2d                	jmp    c0008356 <ff_oem2uni+0x63>
c0008329:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832f:	75 25                	jne    c0008356 <ff_oem2uni+0x63>
c0008331:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008338:	77 1c                	ja     c0008356 <ff_oem2uni+0x63>
c000833a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000833f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008344:	01 c0                	add    eax,eax
c0008346:	89 c2                	mov    edx,eax
c0008348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834c:	01 d0                	add    eax,edx
c000834e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008351:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008356:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000835b:	83 c4 18             	add    esp,0x18
c000835e:	c3                   	ret    

c000835f <ff_wtoupper>:
c000835f:	83 ec 10             	sub    esp,0x10
c0008362:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000836a:	0f 87 3e 01 00 00    	ja     c00084ae <ff_wtoupper+0x14f>
c0008370:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008374:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008379:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008380:	77 07                	ja     c0008389 <ff_wtoupper+0x2a>
c0008382:	b8 80 65 02 c0       	mov    eax,0xc0026580
c0008387:	eb 05                	jmp    c000838e <ff_wtoupper+0x2f>
c0008389:	b8 c0 64 02 c0       	mov    eax,0xc00264c0
c000838e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008396:	8d 50 02             	lea    edx,[eax+0x2]
c0008399:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839d:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083ab:	0f 84 f4 00 00 00    	je     c00084a5 <ff_wtoupper+0x146>
c00083b1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083bb:	0f 82 e4 00 00 00    	jb     c00084a5 <ff_wtoupper+0x146>
c00083c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c5:	8d 50 02             	lea    edx,[eax+0x2]
c00083c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cf:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d4:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d9:	66 c1 e8 08          	shr    ax,0x8
c00083dd:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e2:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083ee:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00083f3:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00083f8:	01 ca                	add    edx,ecx
c00083fa:	39 d0                	cmp    eax,edx
c00083fc:	0f 8d 86 00 00 00    	jge    c0008488 <ff_wtoupper+0x129>
c0008402:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008407:	83 f8 08             	cmp    eax,0x8
c000840a:	0f 87 94 00 00 00    	ja     c00084a4 <ff_wtoupper+0x145>
c0008410:	8b 04 85 80 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9b80]
c0008417:	ff e0                	jmp    eax
c0008419:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000841e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008423:	29 c2                	sub    edx,eax
c0008425:	89 d0                	mov    eax,edx
c0008427:	01 c0                	add    eax,eax
c0008429:	89 c2                	mov    edx,eax
c000842b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842f:	01 d0                	add    eax,edx
c0008431:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008434:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008439:	eb 4b                	jmp    c0008486 <ff_wtoupper+0x127>
c000843b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008440:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008444:	83 e0 01             	and    eax,0x1
c0008447:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000844c:	eb 38                	jmp    c0008486 <ff_wtoupper+0x127>
c000844e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008454:	eb 30                	jmp    c0008486 <ff_wtoupper+0x127>
c0008456:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000845c:	eb 28                	jmp    c0008486 <ff_wtoupper+0x127>
c000845e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008464:	eb 20                	jmp    c0008486 <ff_wtoupper+0x127>
c0008466:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000846c:	eb 18                	jmp    c0008486 <ff_wtoupper+0x127>
c000846e:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008474:	eb 10                	jmp    c0008486 <ff_wtoupper+0x127>
c0008476:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000847c:	eb 08                	jmp    c0008486 <ff_wtoupper+0x127>
c000847e:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008485:	90                   	nop
c0008486:	eb 1c                	jmp    c00084a4 <ff_wtoupper+0x145>
c0008488:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000848e:	0f 85 fe fe ff ff    	jne    c0008392 <ff_wtoupper+0x33>
c0008494:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008499:	01 c0                	add    eax,eax
c000849b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000849f:	e9 ee fe ff ff       	jmp    c0008392 <ff_wtoupper+0x33>
c00084a4:	90                   	nop
c00084a5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b2:	83 c4 10             	add    esp,0x10
c00084b5:	c3                   	ret    

c00084b6 <psrc_set_converter>:
c00084b6:	56                   	push   esi
c00084b7:	89 d6                	mov    esi,edx
c00084b9:	53                   	push   ebx
c00084ba:	89 c3                	mov    ebx,eax
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	52                   	push   edx
c00084c0:	50                   	push   eax
c00084c1:	e8 6f 55 00 00       	call   c000da35 <sinc_set_converter>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	85 c0                	test   eax,eax
c00084cb:	74 25                	je     c00084f2 <psrc_set_converter+0x3c>
c00084cd:	50                   	push   eax
c00084ce:	50                   	push   eax
c00084cf:	56                   	push   esi
c00084d0:	53                   	push   ebx
c00084d1:	e8 17 5d 00 00       	call   c000e1ed <zoh_set_converter>
c00084d6:	83 c4 10             	add    esp,0x10
c00084d9:	85 c0                	test   eax,eax
c00084db:	74 15                	je     c00084f2 <psrc_set_converter+0x3c>
c00084dd:	51                   	push   ecx
c00084de:	51                   	push   ecx
c00084df:	56                   	push   esi
c00084e0:	53                   	push   ebx
c00084e1:	e8 0f 11 00 00       	call   c00095f5 <linear_set_converter>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	ba 0a 00 00 00       	mov    edx,0xa
c00084ee:	85 c0                	test   eax,eax
c00084f0:	75 02                	jne    c00084f4 <psrc_set_converter+0x3e>
c00084f2:	31 d2                	xor    edx,edx
c00084f4:	89 d0                	mov    eax,edx
c00084f6:	5a                   	pop    edx
c00084f7:	5b                   	pop    ebx
c00084f8:	5e                   	pop    esi
c00084f9:	c3                   	ret    

c00084fa <src_delete>:
c00084fa:	53                   	push   ebx
c00084fb:	83 ec 08             	sub    esp,0x8
c00084fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008502:	85 db                	test   ebx,ebx
c0008504:	74 29                	je     c000852f <src_delete+0x35>
c0008506:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008509:	85 c0                	test   eax,eax
c000850b:	74 0c                	je     c0008519 <src_delete+0x1f>
c000850d:	83 ec 0c             	sub    esp,0xc
c0008510:	50                   	push   eax
c0008511:	e8 cc 6f 00 00       	call   c000f4e2 <free>
c0008516:	83 c4 10             	add    esp,0x10
c0008519:	50                   	push   eax
c000851a:	6a 3c                	push   0x3c
c000851c:	6a 00                	push   0x0
c000851e:	53                   	push   ebx
c000851f:	e8 59 81 ff ff       	call   c000067d <memset>
c0008524:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008527:	e8 b6 6f 00 00       	call   c000f4e2 <free>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	31 c0                	xor    eax,eax
c0008531:	83 c4 08             	add    esp,0x8
c0008534:	5b                   	pop    ebx
c0008535:	c3                   	ret    

c0008536 <src_process>:
c0008536:	55                   	push   ebp
c0008537:	57                   	push   edi
c0008538:	56                   	push   esi
c0008539:	53                   	push   ebx
c000853a:	83 ec 1c             	sub    esp,0x1c
c000853d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008541:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008545:	85 ed                	test   ebp,ebp
c0008547:	0f 84 6f 01 00 00    	je     c00086bc <src_process+0x186>
c000854d:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008551:	0f 84 6c 01 00 00    	je     c00086c3 <src_process+0x18d>
c0008557:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000855b:	0f 84 62 01 00 00    	je     c00086c3 <src_process+0x18d>
c0008561:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008568:	0f 85 5c 01 00 00    	jne    c00086ca <src_process+0x194>
c000856e:	85 db                	test   ebx,ebx
c0008570:	0f 84 5b 01 00 00    	je     c00086d1 <src_process+0x19b>
c0008576:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008578:	85 f6                	test   esi,esi
c000857a:	0f 84 58 01 00 00    	je     c00086d8 <src_process+0x1a2>
c0008580:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008583:	85 ff                	test   edi,edi
c0008585:	0f 84 4d 01 00 00    	je     c00086d8 <src_process+0x1a2>
c000858b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000858e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0008591:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008595:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008599:	68 00 00 70 3f       	push   0x3f700000
c000859e:	6a 00                	push   0x0
c00085a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a8:	e8 82 cf 01 00       	call   c002552f <__ltdf2>
c00085ad:	83 c4 10             	add    esp,0x10
c00085b0:	85 c0                	test   eax,eax
c00085b2:	0f 88 27 01 00 00    	js     c00086df <src_process+0x1a9>
c00085b8:	68 00 00 70 40       	push   0x40700000
c00085bd:	6a 00                	push   0x0
c00085bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c7:	e8 45 cf 01 00       	call   c0025511 <__gtdf2>
c00085cc:	83 c4 10             	add    esp,0x10
c00085cf:	85 c0                	test   eax,eax
c00085d1:	0f 8f 08 01 00 00    	jg     c00086df <src_process+0x1a9>
c00085d7:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085db:	79 07                	jns    c00085e4 <src_process+0xae>
c00085dd:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085e4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085e7:	85 c0                	test   eax,eax
c00085e9:	79 50                	jns    c000863b <src_process+0x105>
c00085eb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00085f2:	39 fe                	cmp    esi,edi
c00085f4:	72 37                	jb     c000862d <src_process+0xf7>
c00085f6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085fd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008604:	68 00 00 70 3f       	push   0x3f700000
c0008609:	6a 00                	push   0x0
c000860b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000860e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008611:	e8 19 cf 01 00       	call   c002552f <__ltdf2>
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	85 c0                	test   eax,eax
c000861b:	79 37                	jns    c0008654 <src_process+0x11e>
c000861d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008621:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008625:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008628:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000862b:	eb 27                	jmp    c0008654 <src_process+0x11e>
c000862d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008630:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008634:	8d 04 86             	lea    eax,[esi+eax*4]
c0008637:	39 c7                	cmp    edi,eax
c0008639:	eb 0d                	jmp    c0008648 <src_process+0x112>
c000863b:	39 fe                	cmp    esi,edi
c000863d:	72 ee                	jb     c000862d <src_process+0xf7>
c000863f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008643:	8d 04 87             	lea    eax,[edi+eax*4]
c0008646:	39 c6                	cmp    esi,eax
c0008648:	73 ac                	jae    c00085f6 <src_process+0xc0>
c000864a:	b8 10 00 00 00       	mov    eax,0x10
c000864f:	e9 90 00 00 00       	jmp    c00086e4 <src_process+0x1ae>
c0008654:	83 ec 10             	sub    esp,0x10
c0008657:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000865a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000865d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008660:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008663:	e8 cc c5 01 00       	call   c0024c34 <__subdf3>
c0008668:	83 c4 18             	add    esp,0x18
c000866b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000866f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008673:	52                   	push   edx
c0008674:	50                   	push   eax
c0008675:	e8 46 d0 01 00       	call   c00256c0 <fabs>
c000867a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000867e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008682:	83 c4 10             	add    esp,0x10
c0008685:	68 af 03 d2 3c       	push   0x3cd203af
c000868a:	68 16 56 e7 9e       	push   0x9ee75616
c000868f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008697:	e8 93 ce 01 00       	call   c002552f <__ltdf2>
c000869c:	83 c4 10             	add    esp,0x10
c000869f:	85 c0                	test   eax,eax
c00086a1:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086a5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086a9:	79 05                	jns    c00086b0 <src_process+0x17a>
c00086ab:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086ae:	eb 03                	jmp    c00086b3 <src_process+0x17d>
c00086b0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086b3:	83 c4 1c             	add    esp,0x1c
c00086b6:	5b                   	pop    ebx
c00086b7:	5e                   	pop    esi
c00086b8:	5f                   	pop    edi
c00086b9:	5d                   	pop    ebp
c00086ba:	ff e0                	jmp    eax
c00086bc:	b8 02 00 00 00       	mov    eax,0x2
c00086c1:	eb 21                	jmp    c00086e4 <src_process+0x1ae>
c00086c3:	b8 07 00 00 00       	mov    eax,0x7
c00086c8:	eb 1a                	jmp    c00086e4 <src_process+0x1ae>
c00086ca:	b8 12 00 00 00       	mov    eax,0x12
c00086cf:	eb 13                	jmp    c00086e4 <src_process+0x1ae>
c00086d1:	b8 03 00 00 00       	mov    eax,0x3
c00086d6:	eb 0c                	jmp    c00086e4 <src_process+0x1ae>
c00086d8:	b8 04 00 00 00       	mov    eax,0x4
c00086dd:	eb 05                	jmp    c00086e4 <src_process+0x1ae>
c00086df:	b8 06 00 00 00       	mov    eax,0x6
c00086e4:	83 c4 1c             	add    esp,0x1c
c00086e7:	5b                   	pop    ebx
c00086e8:	5e                   	pop    esi
c00086e9:	5f                   	pop    edi
c00086ea:	5d                   	pop    ebp
c00086eb:	c3                   	ret    

c00086ec <src_callback_read>:
c00086ec:	55                   	push   ebp
c00086ed:	57                   	push   edi
c00086ee:	56                   	push   esi
c00086ef:	53                   	push   ebx
c00086f0:	83 ec 3c             	sub    esp,0x3c
c00086f3:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c00086f7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00086fb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00086ff:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008703:	85 ed                	test   ebp,ebp
c0008705:	0f 8e 52 01 00 00    	jle    c000885d <src_callback_read+0x171>
c000870b:	85 db                	test   ebx,ebx
c000870d:	0f 84 4a 01 00 00    	je     c000885d <src_callback_read+0x171>
c0008713:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000871a:	74 0c                	je     c0008728 <src_callback_read+0x3c>
c000871c:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008723:	e9 35 01 00 00       	jmp    c000885d <src_callback_read+0x171>
c0008728:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000872c:	75 0c                	jne    c000873a <src_callback_read+0x4e>
c000872e:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008735:	e9 23 01 00 00       	jmp    c000885d <src_callback_read+0x171>
c000873a:	51                   	push   ecx
c000873b:	6a 24                	push   0x24
c000873d:	6a 00                	push   0x0
c000873f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008743:	50                   	push   eax
c0008744:	e8 34 7f ff ff       	call   c000067d <memset>
c0008749:	83 c4 10             	add    esp,0x10
c000874c:	68 00 00 70 3f       	push   0x3f700000
c0008751:	6a 00                	push   0x0
c0008753:	57                   	push   edi
c0008754:	56                   	push   esi
c0008755:	e8 d5 cd 01 00       	call   c002552f <__ltdf2>
c000875a:	83 c4 10             	add    esp,0x10
c000875d:	85 c0                	test   eax,eax
c000875f:	78 3e                	js     c000879f <src_callback_read+0xb3>
c0008761:	68 00 00 70 40       	push   0x40700000
c0008766:	6a 00                	push   0x0
c0008768:	57                   	push   edi
c0008769:	56                   	push   esi
c000876a:	e8 a2 cd 01 00       	call   c0025511 <__gtdf2>
c000876f:	83 c4 10             	add    esp,0x10
c0008772:	85 c0                	test   eax,eax
c0008774:	7f 29                	jg     c000879f <src_callback_read+0xb3>
c0008776:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000877a:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000877e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008782:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008786:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008789:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000878d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008791:	31 f6                	xor    esi,esi
c0008793:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008796:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000879a:	e9 97 00 00 00       	jmp    c0008836 <src_callback_read+0x14a>
c000879f:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087a6:	e9 b2 00 00 00       	jmp    c000885d <src_callback_read+0x171>
c00087ab:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b3:	52                   	push   edx
c00087b4:	52                   	push   edx
c00087b5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087b9:	50                   	push   eax
c00087ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bd:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087c4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087cc:	83 c4 10             	add    esp,0x10
c00087cf:	85 c0                	test   eax,eax
c00087d1:	75 08                	jne    c00087db <src_callback_read+0xef>
c00087d3:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087db:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087e2:	50                   	push   eax
c00087e3:	50                   	push   eax
c00087e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087e8:	50                   	push   eax
c00087e9:	53                   	push   ebx
c00087ea:	e8 47 fd ff ff       	call   c0008536 <src_process>
c00087ef:	83 c4 10             	add    esp,0x10
c00087f2:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087f9:	85 c0                	test   eax,eax
c00087fb:	75 49                	jne    c0008846 <src_callback_read+0x15a>
c00087fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008801:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008804:	89 f9                	mov    ecx,edi
c0008806:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c000880a:	0f af ca             	imul   ecx,edx
c000880d:	c1 e1 02             	shl    ecx,0x2
c0008810:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008814:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008818:	0f af d1             	imul   edx,ecx
c000881b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000881f:	c1 e2 02             	shl    edx,0x2
c0008822:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008826:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008829:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000882e:	74 12                	je     c0008842 <src_callback_read+0x156>
c0008830:	39 d5                	cmp    ebp,edx
c0008832:	7e 14                	jle    c0008848 <src_callback_read+0x15c>
c0008834:	89 d6                	mov    esi,edx
c0008836:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000883b:	75 9e                	jne    c00087db <src_callback_read+0xef>
c000883d:	e9 69 ff ff ff       	jmp    c00087ab <src_callback_read+0xbf>
c0008842:	85 c9                	test   ecx,ecx
c0008844:	75 ea                	jne    c0008830 <src_callback_read+0x144>
c0008846:	89 f2                	mov    edx,esi
c0008848:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000884c:	85 c0                	test   eax,eax
c000884e:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008851:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008855:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008858:	74 05                	je     c000885f <src_callback_read+0x173>
c000885a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000885d:	31 d2                	xor    edx,edx
c000885f:	83 c4 3c             	add    esp,0x3c
c0008862:	89 d0                	mov    eax,edx
c0008864:	5b                   	pop    ebx
c0008865:	5e                   	pop    esi
c0008866:	5f                   	pop    edi
c0008867:	5d                   	pop    ebp
c0008868:	c3                   	ret    

c0008869 <src_set_ratio>:
c0008869:	57                   	push   edi
c000886a:	ba 02 00 00 00       	mov    edx,0x2
c000886f:	56                   	push   esi
c0008870:	53                   	push   ebx
c0008871:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008875:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008879:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000887d:	85 db                	test   ebx,ebx
c000887f:	74 4c                	je     c00088cd <src_set_ratio+0x64>
c0008881:	ba 07 00 00 00       	mov    edx,0x7
c0008886:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000888a:	74 41                	je     c00088cd <src_set_ratio+0x64>
c000888c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008890:	74 3b                	je     c00088cd <src_set_ratio+0x64>
c0008892:	68 00 00 70 3f       	push   0x3f700000
c0008897:	6a 00                	push   0x0
c0008899:	57                   	push   edi
c000889a:	56                   	push   esi
c000889b:	e8 8f cc 01 00       	call   c002552f <__ltdf2>
c00088a0:	83 c4 10             	add    esp,0x10
c00088a3:	ba 06 00 00 00       	mov    edx,0x6
c00088a8:	85 c0                	test   eax,eax
c00088aa:	78 21                	js     c00088cd <src_set_ratio+0x64>
c00088ac:	68 00 00 70 40       	push   0x40700000
c00088b1:	6a 00                	push   0x0
c00088b3:	57                   	push   edi
c00088b4:	56                   	push   esi
c00088b5:	e8 57 cc 01 00       	call   c0025511 <__gtdf2>
c00088ba:	83 c4 10             	add    esp,0x10
c00088bd:	ba 06 00 00 00       	mov    edx,0x6
c00088c2:	85 c0                	test   eax,eax
c00088c4:	7f 07                	jg     c00088cd <src_set_ratio+0x64>
c00088c6:	89 33                	mov    DWORD PTR [ebx],esi
c00088c8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088cb:	31 d2                	xor    edx,edx
c00088cd:	5b                   	pop    ebx
c00088ce:	89 d0                	mov    eax,edx
c00088d0:	5e                   	pop    esi
c00088d1:	5f                   	pop    edi
c00088d2:	c3                   	ret    

c00088d3 <src_get_channels>:
c00088d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088d7:	b8 02 00 00 00       	mov    eax,0x2
c00088dc:	85 d2                	test   edx,edx
c00088de:	74 14                	je     c00088f4 <src_get_channels+0x21>
c00088e0:	b8 07 00 00 00       	mov    eax,0x7
c00088e5:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088e9:	74 09                	je     c00088f4 <src_get_channels+0x21>
c00088eb:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088ef:	74 03                	je     c00088f4 <src_get_channels+0x21>
c00088f1:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088f4:	c3                   	ret    

c00088f5 <src_reset>:
c00088f5:	53                   	push   ebx
c00088f6:	b8 02 00 00 00       	mov    eax,0x2
c00088fb:	83 ec 08             	sub    esp,0x8
c00088fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008902:	85 db                	test   ebx,ebx
c0008904:	74 36                	je     c000893c <src_reset+0x47>
c0008906:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008909:	85 c0                	test   eax,eax
c000890b:	74 09                	je     c0008916 <src_reset+0x21>
c000890d:	83 ec 0c             	sub    esp,0xc
c0008910:	53                   	push   ebx
c0008911:	ff d0                	call   eax
c0008913:	83 c4 10             	add    esp,0x10
c0008916:	31 c0                	xor    eax,eax
c0008918:	31 d2                	xor    edx,edx
c000891a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000891d:	89 03                	mov    DWORD PTR [ebx],eax
c000891f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008922:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008925:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000892c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008933:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000893a:	31 c0                	xor    eax,eax
c000893c:	83 c4 08             	add    esp,0x8
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    

c0008941 <src_new>:
c0008941:	57                   	push   edi
c0008942:	56                   	push   esi
c0008943:	53                   	push   ebx
c0008944:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008948:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000894c:	85 f6                	test   esi,esi
c000894e:	74 73                	je     c00089c3 <src_new+0x82>
c0008950:	85 ff                	test   edi,edi
c0008952:	7f 08                	jg     c000895c <src_new+0x1b>
c0008954:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c000895a:	eb 1e                	jmp    c000897a <src_new+0x39>
c000895c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008962:	50                   	push   eax
c0008963:	50                   	push   eax
c0008964:	6a 3c                	push   0x3c
c0008966:	6a 01                	push   0x1
c0008968:	e8 95 6b 00 00       	call   c000f502 <calloc>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	89 c3                	mov    ebx,eax
c0008972:	85 c0                	test   eax,eax
c0008974:	75 10                	jne    c0008986 <src_new+0x45>
c0008976:	85 f6                	test   esi,esi
c0008978:	75 04                	jne    c000897e <src_new+0x3d>
c000897a:	31 db                	xor    ebx,ebx
c000897c:	eb 4b                	jmp    c00089c9 <src_new+0x88>
c000897e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008984:	eb 43                	jmp    c00089c9 <src_new+0x88>
c0008986:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008989:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008990:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008994:	e8 1d fb ff ff       	call   c00084b6 <psrc_set_converter>
c0008999:	85 c0                	test   eax,eax
c000899b:	74 18                	je     c00089b5 <src_new+0x74>
c000899d:	85 f6                	test   esi,esi
c000899f:	74 06                	je     c00089a7 <src_new+0x66>
c00089a1:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089a7:	83 ec 0c             	sub    esp,0xc
c00089aa:	53                   	push   ebx
c00089ab:	31 db                	xor    ebx,ebx
c00089ad:	e8 30 6b 00 00       	call   c000f4e2 <free>
c00089b2:	83 c4 10             	add    esp,0x10
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	e8 37 ff ff ff       	call   c00088f5 <src_reset>
c00089be:	83 c4 10             	add    esp,0x10
c00089c1:	eb 06                	jmp    c00089c9 <src_new+0x88>
c00089c3:	85 ff                	test   edi,edi
c00089c5:	7f 9b                	jg     c0008962 <src_new+0x21>
c00089c7:	eb b1                	jmp    c000897a <src_new+0x39>
c00089c9:	89 d8                	mov    eax,ebx
c00089cb:	5b                   	pop    ebx
c00089cc:	5e                   	pop    esi
c00089cd:	5f                   	pop    edi
c00089ce:	c3                   	ret    

c00089cf <src_callback_new>:
c00089cf:	56                   	push   esi
c00089d0:	53                   	push   ebx
c00089d1:	53                   	push   ebx
c00089d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089da:	85 f6                	test   esi,esi
c00089dc:	75 0e                	jne    c00089ec <src_callback_new+0x1d>
c00089de:	31 db                	xor    ebx,ebx
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 47                	je     c0008a2b <src_callback_new+0x5c>
c00089e4:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089ea:	eb 3f                	jmp    c0008a2b <src_callback_new+0x5c>
c00089ec:	85 c0                	test   eax,eax
c00089ee:	74 06                	je     c00089f6 <src_callback_new+0x27>
c00089f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089f6:	51                   	push   ecx
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a00:	e8 3c ff ff ff       	call   c0008941 <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	89 c3                	mov    ebx,eax
c0008a0a:	85 c0                	test   eax,eax
c0008a0c:	74 1d                	je     c0008a2b <src_callback_new+0x5c>
c0008a0e:	83 ec 0c             	sub    esp,0xc
c0008a11:	50                   	push   eax
c0008a12:	e8 de fe ff ff       	call   c00088f5 <src_reset>
c0008a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a1b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a22:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a25:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	89 d8                	mov    eax,ebx
c0008a2d:	5a                   	pop    edx
c0008a2e:	5b                   	pop    ebx
c0008a2f:	5e                   	pop    esi
c0008a30:	c3                   	ret    

c0008a31 <src_get_name>:
c0008a31:	53                   	push   ebx
c0008a32:	83 ec 14             	sub    esp,0x14
c0008a35:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a39:	53                   	push   ebx
c0008a3a:	e8 d0 4f 00 00       	call   c000da0f <sinc_get_name>
c0008a3f:	83 c4 10             	add    esp,0x10
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 1d                	jne    c0008a63 <src_get_name+0x32>
c0008a46:	83 ec 0c             	sub    esp,0xc
c0008a49:	53                   	push   ebx
c0008a4a:	e8 80 57 00 00       	call   c000e1cf <zoh_get_name>
c0008a4f:	83 c4 10             	add    esp,0x10
c0008a52:	85 c0                	test   eax,eax
c0008a54:	75 0d                	jne    c0008a63 <src_get_name+0x32>
c0008a56:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a5a:	83 c4 08             	add    esp,0x8
c0008a5d:	5b                   	pop    ebx
c0008a5e:	e9 74 0b 00 00       	jmp    c00095d7 <linear_get_name>
c0008a63:	83 c4 08             	add    esp,0x8
c0008a66:	5b                   	pop    ebx
c0008a67:	c3                   	ret    

c0008a68 <src_get_description>:
c0008a68:	53                   	push   ebx
c0008a69:	83 ec 14             	sub    esp,0x14
c0008a6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a70:	53                   	push   ebx
c0008a71:	e8 ac 4f 00 00       	call   c000da22 <sinc_get_description>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	85 c0                	test   eax,eax
c0008a7b:	75 1d                	jne    c0008a9a <src_get_description+0x32>
c0008a7d:	83 ec 0c             	sub    esp,0xc
c0008a80:	53                   	push   ebx
c0008a81:	e8 58 57 00 00       	call   c000e1de <zoh_get_description>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 0d                	jne    c0008a9a <src_get_description+0x32>
c0008a8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a91:	83 c4 08             	add    esp,0x8
c0008a94:	5b                   	pop    ebx
c0008a95:	e9 4c 0b 00 00       	jmp    c00095e6 <linear_get_description>
c0008a9a:	83 c4 08             	add    esp,0x8
c0008a9d:	5b                   	pop    ebx
c0008a9e:	c3                   	ret    

c0008a9f <src_get_version>:
c0008a9f:	b8 80 68 02 c0       	mov    eax,0xc0026880
c0008aa4:	c3                   	ret    

c0008aa5 <src_is_valid_ratio>:
c0008aa5:	83 ec 1c             	sub    esp,0x1c
c0008aa8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ab0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ab8:	68 00 00 70 3f       	push   0x3f700000
c0008abd:	6a 00                	push   0x0
c0008abf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac7:	e8 63 ca 01 00       	call   c002552f <__ltdf2>
c0008acc:	83 c4 10             	add    esp,0x10
c0008acf:	31 d2                	xor    edx,edx
c0008ad1:	85 c0                	test   eax,eax
c0008ad3:	78 1e                	js     c0008af3 <src_is_valid_ratio+0x4e>
c0008ad5:	68 00 00 70 40       	push   0x40700000
c0008ada:	6a 00                	push   0x0
c0008adc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ae4:	e8 28 ca 01 00       	call   c0025511 <__gtdf2>
c0008ae9:	31 d2                	xor    edx,edx
c0008aeb:	83 c4 10             	add    esp,0x10
c0008aee:	85 c0                	test   eax,eax
c0008af0:	0f 9e c2             	setle  dl
c0008af3:	89 d0                	mov    eax,edx
c0008af5:	83 c4 1c             	add    esp,0x1c
c0008af8:	c3                   	ret    

c0008af9 <src_error>:
c0008af9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afd:	31 c0                	xor    eax,eax
c0008aff:	85 d2                	test   edx,edx
c0008b01:	74 03                	je     c0008b06 <src_error+0xd>
c0008b03:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b06:	c3                   	ret    

c0008b07 <src_strerror>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	83 fa 17             	cmp    edx,0x17
c0008b10:	77 07                	ja     c0008b19 <src_strerror+0x12>
c0008b12:	8b 04 95 e0 6c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9320]
c0008b19:	c3                   	ret    

c0008b1a <src_simple>:
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 18             	sub    esp,0x18
c0008b1f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b23:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b27:	50                   	push   eax
c0008b28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b30:	e8 0c fe ff ff       	call   c0008941 <src_new>
c0008b35:	83 c4 10             	add    esp,0x10
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	75 06                	jne    c0008b42 <src_simple+0x28>
c0008b3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b40:	eb 25                	jmp    c0008b67 <src_simple+0x4d>
c0008b42:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b49:	89 c3                	mov    ebx,eax
c0008b4b:	50                   	push   eax
c0008b4c:	50                   	push   eax
c0008b4d:	56                   	push   esi
c0008b4e:	53                   	push   ebx
c0008b4f:	e8 e2 f9 ff ff       	call   c0008536 <src_process>
c0008b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b5b:	e8 9a f9 ff ff       	call   c00084fa <src_delete>
c0008b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b64:	83 c4 10             	add    esp,0x10
c0008b67:	83 c4 14             	add    esp,0x14
c0008b6a:	5b                   	pop    ebx
c0008b6b:	5e                   	pop    esi
c0008b6c:	c3                   	ret    

c0008b6d <src_short_to_float_array>:
c0008b6d:	53                   	push   ebx
c0008b6e:	83 ec 18             	sub    esp,0x18
c0008b71:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b75:	85 db                	test   ebx,ebx
c0008b77:	74 54                	je     c0008bcd <src_short_to_float_array+0x60>
c0008b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b7d:	4b                   	dec    ebx
c0008b7e:	83 ec 0c             	sub    esp,0xc
c0008b81:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b85:	50                   	push   eax
c0008b86:	e8 38 c7 01 00       	call   c00252c3 <__floatsidf>
c0008b8b:	83 c4 10             	add    esp,0x10
c0008b8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b96:	68 00 00 00 3f       	push   0x3f000000
c0008b9b:	6a 00                	push   0x0
c0008b9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba5:	e8 b6 c0 01 00       	call   c0024c60 <__muldf3>
c0008baa:	59                   	pop    ecx
c0008bab:	59                   	pop    ecx
c0008bac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bbc:	e8 72 c9 01 00       	call   c0025533 <__truncdfsf2>
c0008bc1:	83 c4 10             	add    esp,0x10
c0008bc4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bc8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bcb:	eb a8                	jmp    c0008b75 <src_short_to_float_array+0x8>
c0008bcd:	83 c4 18             	add    esp,0x18
c0008bd0:	5b                   	pop    ebx
c0008bd1:	c3                   	ret    

c0008bd2 <src_float_to_short_array>:
c0008bd2:	56                   	push   esi
c0008bd3:	53                   	push   ebx
c0008bd4:	83 ec 14             	sub    esp,0x14
c0008bd7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bdb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bdf:	85 db                	test   ebx,ebx
c0008be1:	0f 84 a4 00 00 00    	je     c0008c8b <src_float_to_short_array+0xb9>
c0008be7:	83 ec 0c             	sub    esp,0xc
c0008bea:	4b                   	dec    ebx
c0008beb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bef:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008bf2:	e8 60 ca 01 00       	call   c0025657 <__extendsfdf2>
c0008bf7:	83 c4 10             	add    esp,0x10
c0008bfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c02:	68 00 00 e0 41       	push   0x41e00000
c0008c07:	6a 00                	push   0x0
c0008c09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c11:	e8 4a c0 01 00       	call   c0024c60 <__muldf3>
c0008c16:	83 c4 10             	add    esp,0x10
c0008c19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c21:	68 ff ff df 41       	push   0x41dfffff
c0008c26:	68 00 00 c0 ff       	push   0xffc00000
c0008c2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c33:	e8 f5 c8 01 00       	call   c002552d <__gedf2>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	85 c0                	test   eax,eax
c0008c3d:	78 08                	js     c0008c47 <src_float_to_short_array+0x75>
c0008c3f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c45:	eb 98                	jmp    c0008bdf <src_float_to_short_array+0xd>
c0008c47:	68 00 00 e0 c1       	push   0xc1e00000
c0008c4c:	6a 00                	push   0x0
c0008c4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c56:	e8 d6 c8 01 00       	call   c0025531 <__ledf2>
c0008c5b:	83 c4 10             	add    esp,0x10
c0008c5e:	85 c0                	test   eax,eax
c0008c60:	7f 0b                	jg     c0008c6d <src_float_to_short_array+0x9b>
c0008c62:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c68:	e9 72 ff ff ff       	jmp    c0008bdf <src_float_to_short_array+0xd>
c0008c6d:	50                   	push   eax
c0008c6e:	50                   	push   eax
c0008c6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c77:	e8 64 ca 01 00       	call   c00256e0 <lrint>
c0008c7c:	83 c4 10             	add    esp,0x10
c0008c7f:	c1 f8 10             	sar    eax,0x10
c0008c82:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c86:	e9 54 ff ff ff       	jmp    c0008bdf <src_float_to_short_array+0xd>
c0008c8b:	83 c4 14             	add    esp,0x14
c0008c8e:	5b                   	pop    ebx
c0008c8f:	5e                   	pop    esi
c0008c90:	c3                   	ret    

c0008c91 <src_int_to_float_array>:
c0008c91:	53                   	push   ebx
c0008c92:	83 ec 18             	sub    esp,0x18
c0008c95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c99:	85 db                	test   ebx,ebx
c0008c9b:	74 52                	je     c0008cef <src_int_to_float_array+0x5e>
c0008c9d:	83 ec 0c             	sub    esp,0xc
c0008ca0:	4b                   	dec    ebx
c0008ca1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ca5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ca8:	e8 16 c6 01 00       	call   c00252c3 <__floatsidf>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cb8:	68 00 00 00 3e       	push   0x3e000000
c0008cbd:	6a 00                	push   0x0
c0008cbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc7:	e8 94 bf 01 00       	call   c0024c60 <__muldf3>
c0008ccc:	59                   	pop    ecx
c0008ccd:	59                   	pop    ecx
c0008cce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008cd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cde:	e8 50 c8 01 00       	call   c0025533 <__truncdfsf2>
c0008ce3:	83 c4 10             	add    esp,0x10
c0008ce6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cea:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008ced:	eb aa                	jmp    c0008c99 <src_int_to_float_array+0x8>
c0008cef:	83 c4 18             	add    esp,0x18
c0008cf2:	5b                   	pop    ebx
c0008cf3:	c3                   	ret    

c0008cf4 <src_float_to_int_array>:
c0008cf4:	56                   	push   esi
c0008cf5:	53                   	push   ebx
c0008cf6:	83 ec 14             	sub    esp,0x14
c0008cf9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008cfd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d01:	85 db                	test   ebx,ebx
c0008d03:	0f 84 a2 00 00 00    	je     c0008dab <src_float_to_int_array+0xb7>
c0008d09:	83 ec 0c             	sub    esp,0xc
c0008d0c:	4b                   	dec    ebx
c0008d0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d11:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d14:	e8 3e c9 01 00       	call   c0025657 <__extendsfdf2>
c0008d19:	83 c4 10             	add    esp,0x10
c0008d1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d24:	68 00 00 e0 41       	push   0x41e00000
c0008d29:	6a 00                	push   0x0
c0008d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d33:	e8 28 bf 01 00       	call   c0024c60 <__muldf3>
c0008d38:	83 c4 10             	add    esp,0x10
c0008d3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d43:	68 ff ff df 41       	push   0x41dfffff
c0008d48:	68 00 00 c0 ff       	push   0xffc00000
c0008d4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d55:	e8 d3 c7 01 00       	call   c002552d <__gedf2>
c0008d5a:	83 c4 10             	add    esp,0x10
c0008d5d:	85 c0                	test   eax,eax
c0008d5f:	78 09                	js     c0008d6a <src_float_to_int_array+0x76>
c0008d61:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d68:	eb 97                	jmp    c0008d01 <src_float_to_int_array+0xd>
c0008d6a:	68 00 00 e0 c1       	push   0xc1e00000
c0008d6f:	6a 00                	push   0x0
c0008d71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d79:	e8 b3 c7 01 00       	call   c0025531 <__ledf2>
c0008d7e:	83 c4 10             	add    esp,0x10
c0008d81:	85 c0                	test   eax,eax
c0008d83:	7f 0c                	jg     c0008d91 <src_float_to_int_array+0x9d>
c0008d85:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d8c:	e9 70 ff ff ff       	jmp    c0008d01 <src_float_to_int_array+0xd>
c0008d91:	50                   	push   eax
c0008d92:	50                   	push   eax
c0008d93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9b:	e8 40 c9 01 00       	call   c00256e0 <lrint>
c0008da0:	83 c4 10             	add    esp,0x10
c0008da3:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008da6:	e9 56 ff ff ff       	jmp    c0008d01 <src_float_to_int_array+0xd>
c0008dab:	83 c4 14             	add    esp,0x14
c0008dae:	5b                   	pop    ebx
c0008daf:	5e                   	pop    esi
c0008db0:	c3                   	ret    

c0008db1 <linear_vari_process>:
c0008db1:	55                   	push   ebp
c0008db2:	31 d2                	xor    edx,edx
c0008db4:	57                   	push   edi
c0008db5:	56                   	push   esi
c0008db6:	53                   	push   ebx
c0008db7:	83 ec 3c             	sub    esp,0x3c
c0008dba:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dbe:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dc2:	0f 8e d3 07 00 00    	jle    c000959b <linear_vari_process+0x7ea>
c0008dc8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dcc:	ba 05 00 00 00       	mov    edx,0x5
c0008dd1:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008dd4:	85 db                	test   ebx,ebx
c0008dd6:	0f 84 bf 07 00 00    	je     c000959b <linear_vari_process+0x7ea>
c0008ddc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ddf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008de3:	74 19                	je     c0008dfe <linear_vari_process+0x4d>
c0008de5:	31 d2                	xor    edx,edx
c0008de7:	39 c2                	cmp    edx,eax
c0008de9:	7d 0c                	jge    c0008df7 <linear_vari_process+0x46>
c0008deb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ded:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008df0:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008df4:	42                   	inc    edx
c0008df5:	eb f0                	jmp    c0008de7 <linear_vari_process+0x36>
c0008df7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008dfe:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e01:	0f af d0             	imul   edx,eax
c0008e04:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e07:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e0b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e12:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e15:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e1c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e20:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e23:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e2d:	68 00 00 70 3f       	push   0x3f700000
c0008e32:	6a 00                	push   0x0
c0008e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e3c:	e8 ee c6 01 00       	call   c002552f <__ltdf2>
c0008e41:	83 c4 10             	add    esp,0x10
c0008e44:	ba 16 00 00 00       	mov    edx,0x16
c0008e49:	85 c0                	test   eax,eax
c0008e4b:	0f 88 4a 07 00 00    	js     c000959b <linear_vari_process+0x7ea>
c0008e51:	68 00 00 70 40       	push   0x40700000
c0008e56:	6a 00                	push   0x0
c0008e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e60:	e8 ac c6 01 00       	call   c0025511 <__gtdf2>
c0008e65:	83 c4 10             	add    esp,0x10
c0008e68:	ba 16 00 00 00       	mov    edx,0x16
c0008e6d:	85 c0                	test   eax,eax
c0008e6f:	0f 8f 26 07 00 00    	jg     c000959b <linear_vari_process+0x7ea>
c0008e75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e79:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 00 00 f0 3f       	push   0x3ff00000
c0008e8c:	6a 00                	push   0x0
c0008e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e96:	e8 94 c6 01 00       	call   c002552f <__ltdf2>
c0008e9b:	83 c4 10             	add    esp,0x10
c0008e9e:	85 c0                	test   eax,eax
c0008ea0:	0f 89 89 02 00 00    	jns    c000912f <linear_vari_process+0x37e>
c0008ea6:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ea9:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eac:	0f 8d 7d 02 00 00    	jge    c000912f <linear_vari_process+0x37e>
c0008eb2:	83 ec 0c             	sub    esp,0xc
c0008eb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eb8:	e8 06 c4 01 00       	call   c00252c3 <__floatsidf>
c0008ebd:	83 c4 10             	add    esp,0x10
c0008ec0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ec7:	68 00 00 f0 3f       	push   0x3ff00000
c0008ecc:	6a 00                	push   0x0
c0008ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed6:	e8 08 b7 01 00       	call   c00245e3 <__adddf3>
c0008edb:	83 c4 10             	add    esp,0x10
c0008ede:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ee2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ee6:	52                   	push   edx
c0008ee7:	50                   	push   eax
c0008ee8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008eec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008ef0:	e8 6b bd 01 00       	call   c0024c60 <__muldf3>
c0008ef5:	5d                   	pop    ebp
c0008ef6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008efa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008efe:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f01:	e8 bd c3 01 00       	call   c00252c3 <__floatsidf>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f0d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f11:	52                   	push   edx
c0008f12:	50                   	push   eax
c0008f13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f1b:	e8 c3 b6 01 00       	call   c00245e3 <__adddf3>
c0008f20:	59                   	pop    ecx
c0008f21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f25:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f29:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f2c:	e8 92 c3 01 00       	call   c00252c3 <__floatsidf>
c0008f31:	83 c4 10             	add    esp,0x10
c0008f34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f3c:	52                   	push   edx
c0008f3d:	50                   	push   eax
c0008f3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f46:	e8 e2 c5 01 00       	call   c002552d <__gedf2>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	85 c0                	test   eax,eax
c0008f50:	0f 89 d9 01 00 00    	jns    c000912f <linear_vari_process+0x37e>
c0008f56:	85 ff                	test   edi,edi
c0008f58:	0f 8e f4 00 00 00    	jle    c0009052 <linear_vari_process+0x2a1>
c0008f5e:	83 ec 10             	sub    esp,0x10
c0008f61:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f64:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f67:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f6b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f6e:	ff 30                	push   DWORD PTR [eax]
c0008f70:	e8 bf bc 01 00       	call   c0024c34 <__subdf3>
c0008f75:	83 c4 18             	add    esp,0x18
c0008f78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f80:	52                   	push   edx
c0008f81:	50                   	push   eax
c0008f82:	e8 39 c7 01 00       	call   c00256c0 <fabs>
c0008f87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f8b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008f97:	68 23 42 92 0c       	push   0xc924223
c0008f9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fa0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fa4:	e8 68 c5 01 00       	call   c0025511 <__gtdf2>
c0008fa9:	83 c4 10             	add    esp,0x10
c0008fac:	85 c0                	test   eax,eax
c0008fae:	0f 8e 9e 00 00 00    	jle    c0009052 <linear_vari_process+0x2a1>
c0008fb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fb8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fc4:	52                   	push   edx
c0008fc5:	50                   	push   eax
c0008fc6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fc9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fcc:	e8 63 bc 01 00       	call   c0024c34 <__subdf3>
c0008fd1:	59                   	pop    ecx
c0008fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fd6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fda:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fdd:	e8 e1 c2 01 00       	call   c00252c3 <__floatsidf>
c0008fe2:	83 c4 10             	add    esp,0x10
c0008fe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fe9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fed:	52                   	push   edx
c0008fee:	50                   	push   eax
c0008fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff7:	e8 64 bc 01 00       	call   c0024c60 <__muldf3>
c0008ffc:	5f                   	pop    edi
c0008ffd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009001:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009005:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009008:	e8 b6 c2 01 00       	call   c00252c3 <__floatsidf>
c000900d:	83 c4 10             	add    esp,0x10
c0009010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009014:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009018:	52                   	push   edx
c0009019:	50                   	push   eax
c000901a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000901e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009022:	e8 1d bf 01 00       	call   c0024f44 <__divdf3>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009032:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009036:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009042:	e8 9c b5 01 00       	call   c00245e3 <__adddf3>
c0009047:	83 c4 10             	add    esp,0x10
c000904a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000904e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009052:	31 ff                	xor    edi,edi
c0009054:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009057:	0f 8e 9d 00 00 00    	jle    c00090fa <linear_vari_process+0x349>
c000905d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009060:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009064:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009067:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000906b:	89 04 24             	mov    DWORD PTR [esp],eax
c000906e:	8b 06                	mov    eax,DWORD PTR [esi]
c0009070:	52                   	push   edx
c0009071:	52                   	push   edx
c0009072:	55                   	push   ebp
c0009073:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009076:	47                   	inc    edi
c0009077:	e8 fc ae 01 00       	call   c0023f78 <__subsf3>
c000907c:	89 04 24             	mov    DWORD PTR [esp],eax
c000907f:	e8 d3 c5 01 00       	call   c0025657 <__extendsfdf2>
c0009084:	83 c4 10             	add    esp,0x10
c0009087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000908b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000908f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009093:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909f:	e8 bc bb 01 00       	call   c0024c60 <__muldf3>
c00090a4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090af:	e8 a3 c5 01 00       	call   c0025657 <__extendsfdf2>
c00090b4:	83 c4 10             	add    esp,0x10
c00090b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090bb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090bf:	52                   	push   edx
c00090c0:	50                   	push   eax
c00090c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c9:	e8 15 b5 01 00       	call   c00245e3 <__adddf3>
c00090ce:	59                   	pop    ecx
c00090cf:	5d                   	pop    ebp
c00090d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e0:	e8 4e c4 01 00       	call   c0025533 <__truncdfsf2>
c00090e5:	83 c4 10             	add    esp,0x10
c00090e8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090eb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090ef:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00090f2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00090f5:	e9 5a ff ff ff       	jmp    c0009054 <linear_vari_process+0x2a3>
c00090fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009102:	68 00 00 f0 3f       	push   0x3ff00000
c0009107:	6a 00                	push   0x0
c0009109:	e8 36 be 01 00       	call   c0024f44 <__divdf3>
c000910e:	83 c4 10             	add    esp,0x10
c0009111:	89 04 24             	mov    DWORD PTR [esp],eax
c0009114:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009118:	52                   	push   edx
c0009119:	50                   	push   eax
c000911a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009122:	e8 bc b4 01 00       	call   c00245e3 <__adddf3>
c0009127:	83 c4 10             	add    esp,0x10
c000912a:	e9 50 fd ff ff       	jmp    c0008e7f <linear_vari_process+0xce>
c000912f:	50                   	push   eax
c0009130:	50                   	push   eax
c0009131:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009135:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009139:	e8 a2 c5 01 00       	call   c00256e0 <lrint>
c000913e:	83 ec 0c             	sub    esp,0xc
c0009141:	50                   	push   eax
c0009142:	e8 7c c1 01 00       	call   c00252c3 <__floatsidf>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000914e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009152:	52                   	push   edx
c0009153:	50                   	push   eax
c0009154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000915c:	e8 d3 ba 01 00       	call   c0024c34 <__subdf3>
c0009161:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009165:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009169:	83 c4 20             	add    esp,0x20
c000916c:	6a 00                	push   0x0
c000916e:	6a 00                	push   0x0
c0009170:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009174:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009178:	e8 b2 c3 01 00       	call   c002552f <__ltdf2>
c000917d:	83 c4 10             	add    esp,0x10
c0009180:	85 c0                	test   eax,eax
c0009182:	79 1e                	jns    c00091a2 <linear_vari_process+0x3f1>
c0009184:	68 00 00 f0 3f       	push   0x3ff00000
c0009189:	6a 00                	push   0x0
c000918b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000918f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009193:	e8 4b b4 01 00       	call   c00245e3 <__adddf3>
c0009198:	83 c4 10             	add    esp,0x10
c000919b:	89 04 24             	mov    DWORD PTR [esp],eax
c000919e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091a2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091a5:	83 ec 10             	sub    esp,0x10
c00091a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b8:	e8 77 ba 01 00       	call   c0024c34 <__subdf3>
c00091bd:	83 c4 18             	add    esp,0x18
c00091c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091c8:	52                   	push   edx
c00091c9:	50                   	push   eax
c00091ca:	e8 11 c5 01 00       	call   c00256e0 <lrint>
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	0f af f8             	imul   edi,eax
c00091d5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091d8:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091db:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091de:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091e1:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091e4:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091e8:	0f 8d 13 03 00 00    	jge    c0009501 <linear_vari_process+0x750>
c00091ee:	83 ec 0c             	sub    esp,0xc
c00091f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091f4:	e8 ca c0 01 00       	call   c00252c3 <__floatsidf>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009200:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009204:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009208:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000920c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009214:	e8 47 ba 01 00       	call   c0024c60 <__muldf3>
c0009219:	89 3c 24             	mov    DWORD PTR [esp],edi
c000921c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009220:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009224:	e8 9a c0 01 00       	call   c00252c3 <__floatsidf>
c0009229:	83 c4 10             	add    esp,0x10
c000922c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009234:	52                   	push   edx
c0009235:	50                   	push   eax
c0009236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923e:	e8 a0 b3 01 00       	call   c00245e3 <__adddf3>
c0009243:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009246:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924e:	e8 70 c0 01 00       	call   c00252c3 <__floatsidf>
c0009253:	83 c4 10             	add    esp,0x10
c0009256:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000925a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925e:	52                   	push   edx
c000925f:	50                   	push   eax
c0009260:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009268:	e8 c2 c2 01 00       	call   c002552f <__ltdf2>
c000926d:	83 c4 10             	add    esp,0x10
c0009270:	85 c0                	test   eax,eax
c0009272:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009276:	0f 89 85 02 00 00    	jns    c0009501 <linear_vari_process+0x750>
c000927c:	85 c9                	test   ecx,ecx
c000927e:	0f 8e f5 00 00 00    	jle    c0009379 <linear_vari_process+0x5c8>
c0009284:	83 ec 10             	sub    esp,0x10
c0009287:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000928a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000928d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009291:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009294:	ff 30                	push   DWORD PTR [eax]
c0009296:	e8 99 b9 01 00       	call   c0024c34 <__subdf3>
c000929b:	83 c4 18             	add    esp,0x18
c000929e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092a6:	52                   	push   edx
c00092a7:	50                   	push   eax
c00092a8:	e8 13 c4 01 00       	call   c00256c0 <fabs>
c00092ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092bd:	68 23 42 92 0c       	push   0xc924223
c00092c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ca:	e8 42 c2 01 00       	call   c0025511 <__gtdf2>
c00092cf:	83 c4 10             	add    esp,0x10
c00092d2:	85 c0                	test   eax,eax
c00092d4:	0f 8e 9f 00 00 00    	jle    c0009379 <linear_vari_process+0x5c8>
c00092da:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092eb:	52                   	push   edx
c00092ec:	50                   	push   eax
c00092ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092f3:	e8 3c b9 01 00       	call   c0024c34 <__subdf3>
c00092f8:	5f                   	pop    edi
c00092f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092fd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009301:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009304:	e8 ba bf 01 00       	call   c00252c3 <__floatsidf>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009310:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009314:	52                   	push   edx
c0009315:	50                   	push   eax
c0009316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000931a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000931e:	e8 3d b9 01 00       	call   c0024c60 <__muldf3>
c0009323:	5d                   	pop    ebp
c0009324:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009328:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000932c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000932f:	e8 8f bf 01 00       	call   c00252c3 <__floatsidf>
c0009334:	83 c4 10             	add    esp,0x10
c0009337:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000933f:	52                   	push   edx
c0009340:	50                   	push   eax
c0009341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009349:	e8 f6 bb 01 00       	call   c0024f44 <__divdf3>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009355:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009359:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000935d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009369:	e8 75 b2 01 00       	call   c00245e3 <__adddf3>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009375:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009379:	31 ff                	xor    edi,edi
c000937b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000937e:	39 f8                	cmp    eax,edi
c0009380:	0f 8e ac 00 00 00    	jle    c0009432 <linear_vari_process+0x681>
c0009386:	8b 16                	mov    edx,DWORD PTR [esi]
c0009388:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000938b:	29 c1                	sub    ecx,eax
c000938d:	89 c8                	mov    eax,ecx
c000938f:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009392:	01 f8                	add    eax,edi
c0009394:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009398:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000939b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000939e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093a5:	51                   	push   ecx
c00093a6:	01 f8                	add    eax,edi
c00093a8:	51                   	push   ecx
c00093a9:	47                   	inc    edi
c00093aa:	55                   	push   ebp
c00093ab:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093ae:	e8 c5 ab 01 00       	call   c0023f78 <__subsf3>
c00093b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00093b6:	e8 9c c2 01 00       	call   c0025657 <__extendsfdf2>
c00093bb:	83 c4 10             	add    esp,0x10
c00093be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093c6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093ca:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d6:	e8 85 b8 01 00       	call   c0024c60 <__muldf3>
c00093db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093e6:	e8 6c c2 01 00       	call   c0025657 <__extendsfdf2>
c00093eb:	83 c4 10             	add    esp,0x10
c00093ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093f6:	52                   	push   edx
c00093f7:	50                   	push   eax
c00093f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009400:	e8 de b1 01 00       	call   c00245e3 <__adddf3>
c0009405:	5d                   	pop    ebp
c0009406:	59                   	pop    ecx
c0009407:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000940b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000940f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009413:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009417:	e8 17 c1 01 00       	call   c0025533 <__truncdfsf2>
c000941c:	83 c4 10             	add    esp,0x10
c000941f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009423:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009427:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000942a:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000942d:	e9 49 ff ff ff       	jmp    c000937b <linear_vari_process+0x5ca>
c0009432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000943a:	68 00 00 f0 3f       	push   0x3ff00000
c000943f:	6a 00                	push   0x0
c0009441:	e8 fe ba 01 00       	call   c0024f44 <__divdf3>
c0009446:	83 c4 10             	add    esp,0x10
c0009449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000944d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009451:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009455:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009461:	e8 7d b1 01 00       	call   c00245e3 <__adddf3>
c0009466:	59                   	pop    ecx
c0009467:	5f                   	pop    edi
c0009468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000946c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009478:	e8 63 c2 01 00       	call   c00256e0 <lrint>
c000947d:	83 ec 0c             	sub    esp,0xc
c0009480:	50                   	push   eax
c0009481:	e8 3d be 01 00       	call   c00252c3 <__floatsidf>
c0009486:	83 c4 10             	add    esp,0x10
c0009489:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000948d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009491:	52                   	push   edx
c0009492:	50                   	push   eax
c0009493:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009497:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000949b:	e8 94 b7 01 00       	call   c0024c34 <__subdf3>
c00094a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094a4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094a8:	83 c4 20             	add    esp,0x20
c00094ab:	6a 00                	push   0x0
c00094ad:	6a 00                	push   0x0
c00094af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b7:	e8 73 c0 01 00       	call   c002552f <__ltdf2>
c00094bc:	83 c4 10             	add    esp,0x10
c00094bf:	85 c0                	test   eax,eax
c00094c1:	79 1e                	jns    c00094e1 <linear_vari_process+0x730>
c00094c3:	68 00 00 f0 3f       	push   0x3ff00000
c00094c8:	6a 00                	push   0x0
c00094ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094d2:	e8 0c b1 01 00       	call   c00245e3 <__adddf3>
c00094d7:	83 c4 10             	add    esp,0x10
c00094da:	89 04 24             	mov    DWORD PTR [esp],eax
c00094dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094e4:	83 ec 10             	sub    esp,0x10
c00094e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f7:	e8 38 b7 01 00       	call   c0024c34 <__subdf3>
c00094fc:	e9 bc fc ff ff       	jmp    c00091bd <linear_vari_process+0x40c>
c0009501:	39 fd                	cmp    ebp,edi
c0009503:	7d 38                	jge    c000953d <linear_vari_process+0x78c>
c0009505:	83 ec 0c             	sub    esp,0xc
c0009508:	89 f8                	mov    eax,edi
c000950a:	29 e8                	sub    eax,ebp
c000950c:	99                   	cdq    
c000950d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009510:	50                   	push   eax
c0009511:	e8 ad bd 01 00       	call   c00252c3 <__floatsidf>
c0009516:	83 c4 10             	add    esp,0x10
c0009519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000951d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009521:	52                   	push   edx
c0009522:	50                   	push   eax
c0009523:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009527:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000952b:	e8 b3 b0 01 00       	call   c00245e3 <__adddf3>
c0009530:	83 c4 10             	add    esp,0x10
c0009533:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009536:	89 04 24             	mov    DWORD PTR [esp],eax
c0009539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000953d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009541:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009544:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009548:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000954b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000954e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009551:	85 c0                	test   eax,eax
c0009553:	7f 29                	jg     c000957e <linear_vari_process+0x7cd>
c0009555:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000955d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009561:	89 01                	mov    DWORD PTR [ecx],eax
c0009563:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009566:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009569:	99                   	cdq    
c000956a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000956d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009570:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009573:	99                   	cdq    
c0009574:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009577:	31 d2                	xor    edx,edx
c0009579:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000957c:	eb 1d                	jmp    c000959b <linear_vari_process+0x7ea>
c000957e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009581:	31 d2                	xor    edx,edx
c0009583:	29 c8                	sub    eax,ecx
c0009585:	c1 e0 02             	shl    eax,0x2
c0009588:	39 d1                	cmp    ecx,edx
c000958a:	7e c9                	jle    c0009555 <linear_vari_process+0x7a4>
c000958c:	8b 3e                	mov    edi,DWORD PTR [esi]
c000958e:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009591:	83 c0 04             	add    eax,0x4
c0009594:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009598:	42                   	inc    edx
c0009599:	eb ed                	jmp    c0009588 <linear_vari_process+0x7d7>
c000959b:	83 c4 3c             	add    esp,0x3c
c000959e:	89 d0                	mov    eax,edx
c00095a0:	5b                   	pop    ebx
c00095a1:	5e                   	pop    esi
c00095a2:	5f                   	pop    edi
c00095a3:	5d                   	pop    ebp
c00095a4:	c3                   	ret    

c00095a5 <linear_reset>:
c00095a5:	83 ec 0c             	sub    esp,0xc
c00095a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ac:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095af:	85 c0                	test   eax,eax
c00095b1:	74 20                	je     c00095d3 <linear_reset+0x2e>
c00095b3:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095b6:	83 c0 1c             	add    eax,0x1c
c00095b9:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095bc:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095c3:	c1 e2 02             	shl    edx,0x2
c00095c6:	51                   	push   ecx
c00095c7:	52                   	push   edx
c00095c8:	6a 00                	push   0x0
c00095ca:	50                   	push   eax
c00095cb:	e8 ad 70 ff ff       	call   c000067d <memset>
c00095d0:	83 c4 10             	add    esp,0x10
c00095d3:	83 c4 0c             	add    esp,0xc
c00095d6:	c3                   	ret    

c00095d7 <linear_get_name>:
c00095d7:	31 c0                	xor    eax,eax
c00095d9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095de:	75 05                	jne    c00095e5 <linear_get_name+0xe>
c00095e0:	b8 40 6d 02 c0       	mov    eax,0xc0026d40
c00095e5:	c3                   	ret    

c00095e6 <linear_get_description>:
c00095e6:	31 c0                	xor    eax,eax
c00095e8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ed:	75 05                	jne    c00095f4 <linear_get_description+0xe>
c00095ef:	b8 54 6d 02 c0       	mov    eax,0xc0026d54
c00095f4:	c3                   	ret    

c00095f5 <linear_set_converter>:
c00095f5:	53                   	push   ebx
c00095f6:	b8 0a 00 00 00       	mov    eax,0xa
c00095fb:	83 ec 08             	sub    esp,0x8
c00095fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009602:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009607:	75 6e                	jne    c0009677 <linear_set_converter+0x82>
c0009609:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000960c:	85 c0                	test   eax,eax
c000960e:	74 13                	je     c0009623 <linear_set_converter+0x2e>
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	50                   	push   eax
c0009614:	e8 c9 5e 00 00       	call   c000f4e2 <free>
c0009619:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009620:	83 c4 10             	add    esp,0x10
c0009623:	50                   	push   eax
c0009624:	50                   	push   eax
c0009625:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009628:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000962f:	50                   	push   eax
c0009630:	6a 01                	push   0x1
c0009632:	e8 cb 5e 00 00       	call   c000f502 <calloc>
c0009637:	83 c4 10             	add    esp,0x10
c000963a:	89 c2                	mov    edx,eax
c000963c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000963f:	85 d2                	test   edx,edx
c0009641:	b8 01 00 00 00       	mov    eax,0x1
c0009646:	74 2f                	je     c0009677 <linear_set_converter+0x82>
c0009648:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000964b:	83 ec 0c             	sub    esp,0xc
c000964e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009651:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009657:	c7 43 24 b1 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008db1
c000965e:	c7 43 20 b1 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008db1
c0009665:	c7 43 28 a5 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095a5
c000966c:	53                   	push   ebx
c000966d:	e8 33 ff ff ff       	call   c00095a5 <linear_reset>
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	31 c0                	xor    eax,eax
c0009677:	83 c4 08             	add    esp,0x8
c000967a:	5b                   	pop    ebx
c000967b:	c3                   	ret    

c000967c <int_to_fp>:
c000967c:	c1 e0 0c             	shl    eax,0xc
c000967f:	c3                   	ret    

c0009680 <fp_to_int>:
c0009680:	c1 f8 0c             	sar    eax,0xc
c0009683:	c3                   	ret    

c0009684 <fp_fraction_part>:
c0009684:	25 ff 0f 00 00       	and    eax,0xfff
c0009689:	c3                   	ret    

c000968a <fp_to_double>:
c000968a:	83 ec 1c             	sub    esp,0x1c
c000968d:	e8 f2 ff ff ff       	call   c0009684 <fp_fraction_part>
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	50                   	push   eax
c0009696:	e8 28 bc 01 00       	call   c00252c3 <__floatsidf>
c000969b:	83 c4 10             	add    esp,0x10
c000969e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096a6:	68 00 00 30 3f       	push   0x3f300000
c00096ab:	6a 00                	push   0x0
c00096ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b5:	e8 a6 b5 01 00       	call   c0024c60 <__muldf3>
c00096ba:	83 c4 2c             	add    esp,0x2c
c00096bd:	c3                   	ret    

c00096be <calc_output_single>:
c00096be:	55                   	push   ebp
c00096bf:	57                   	push   edi
c00096c0:	56                   	push   esi
c00096c1:	89 c6                	mov    esi,eax
c00096c3:	53                   	push   ebx
c00096c4:	89 d3                	mov    ebx,edx
c00096c6:	83 ec 4c             	sub    esp,0x4c
c00096c9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096cd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096d0:	e8 a7 ff ff ff       	call   c000967c <int_to_fp>
c00096d5:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096d8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096dc:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096e0:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096e4:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096e7:	99                   	cdq    
c00096e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096f0:	f7 fb                	idiv   ebx
c00096f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00096fa:	89 da                	mov    edx,ebx
c00096fc:	0f af d0             	imul   edx,eax
c00096ff:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009703:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009707:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000970b:	29 c2                	sub    edx,eax
c000970d:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009714:	83 c5 04             	add    ebp,0x4
c0009717:	e8 6e ff ff ff       	call   c000968a <fp_to_double>
c000971c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009720:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009728:	e8 53 ff ff ff       	call   c0009680 <fp_to_int>
c000972d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009730:	52                   	push   edx
c0009731:	52                   	push   edx
c0009732:	51                   	push   ecx
c0009733:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009737:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000973b:	e8 38 a8 01 00       	call   c0023f78 <__subsf3>
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	e8 0f bf 01 00       	call   c0025657 <__extendsfdf2>
c0009748:	83 c4 10             	add    esp,0x10
c000974b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000974f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000975b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000975f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009763:	e8 f8 b4 01 00       	call   c0024c60 <__muldf3>
c0009768:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000976c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009770:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009773:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009777:	e8 db be 01 00       	call   c0025657 <__extendsfdf2>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009783:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000978d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009791:	e8 4d ae 01 00       	call   c00245e3 <__adddf3>
c0009796:	59                   	pop    ecx
c0009797:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000979b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000979f:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097a5:	e8 ad be 01 00       	call   c0025657 <__extendsfdf2>
c00097aa:	83 c4 10             	add    esp,0x10
c00097ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097b5:	52                   	push   edx
c00097b6:	50                   	push   eax
c00097b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bf:	e8 9c b4 01 00       	call   c0024c60 <__muldf3>
c00097c4:	83 c4 10             	add    esp,0x10
c00097c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097cf:	52                   	push   edx
c00097d0:	50                   	push   eax
c00097d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d9:	e8 05 ae 01 00       	call   c00245e3 <__adddf3>
c00097de:	83 c4 10             	add    esp,0x10
c00097e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097e9:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097ed:	0f 89 1d ff ff ff    	jns    c0009710 <calc_output_single+0x52>
c00097f3:	89 d9                	mov    ecx,ebx
c00097f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097fd:	89 dd                	mov    ebp,ebx
c00097ff:	29 c8                	sub    eax,ecx
c0009801:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009809:	99                   	cdq    
c000980a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009812:	f7 fb                	idiv   ebx
c0009814:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009818:	0f af e8             	imul   ebp,eax
c000981b:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000981f:	01 cd                	add    ebp,ecx
c0009821:	8d 34 86             	lea    esi,[esi+eax*4]
c0009824:	89 e8                	mov    eax,ebp
c0009826:	83 ee 04             	sub    esi,0x4
c0009829:	e8 5c fe ff ff       	call   c000968a <fp_to_double>
c000982e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009832:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009836:	89 e8                	mov    eax,ebp
c0009838:	29 dd                	sub    ebp,ebx
c000983a:	e8 41 fe ff ff       	call   c0009680 <fp_to_int>
c000983f:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009842:	52                   	push   edx
c0009843:	52                   	push   edx
c0009844:	51                   	push   ecx
c0009845:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009849:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000984d:	e8 26 a7 01 00       	call   c0023f78 <__subsf3>
c0009852:	89 04 24             	mov    DWORD PTR [esp],eax
c0009855:	e8 fd bd 01 00       	call   c0025657 <__extendsfdf2>
c000985a:	83 c4 10             	add    esp,0x10
c000985d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009861:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009865:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000986d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009871:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009875:	e8 e6 b3 01 00       	call   c0024c60 <__muldf3>
c000987a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000987e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009882:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009885:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009889:	e8 c9 bd 01 00       	call   c0025657 <__extendsfdf2>
c000988e:	83 c4 10             	add    esp,0x10
c0009891:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009895:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009899:	52                   	push   edx
c000989a:	50                   	push   eax
c000989b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000989f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098a3:	e8 3b ad 01 00       	call   c00245e3 <__adddf3>
c00098a8:	59                   	pop    ecx
c00098a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098b1:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098b7:	e8 9b bd 01 00       	call   c0025657 <__extendsfdf2>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098c7:	52                   	push   edx
c00098c8:	50                   	push   eax
c00098c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098d1:	e8 8a b3 01 00       	call   c0024c60 <__muldf3>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098e1:	52                   	push   edx
c00098e2:	50                   	push   eax
c00098e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098eb:	e8 f3 ac 01 00       	call   c00245e3 <__adddf3>
c00098f0:	83 c4 10             	add    esp,0x10
c00098f3:	85 ed                	test   ebp,ebp
c00098f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098fd:	0f 8f 21 ff ff ff    	jg     c0009824 <calc_output_single+0x166>
c0009903:	52                   	push   edx
c0009904:	50                   	push   eax
c0009905:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009909:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990d:	e8 d1 ac 01 00       	call   c00245e3 <__adddf3>
c0009912:	83 c4 5c             	add    esp,0x5c
c0009915:	5b                   	pop    ebx
c0009916:	5e                   	pop    esi
c0009917:	5f                   	pop    edi
c0009918:	5d                   	pop    ebp
c0009919:	c3                   	ret    

c000991a <calc_output_stereo>:
c000991a:	55                   	push   ebp
c000991b:	89 cd                	mov    ebp,ecx
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	53                   	push   ebx
c0009920:	89 c3                	mov    ebx,eax
c0009922:	83 ec 6c             	sub    esp,0x6c
c0009925:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009929:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009930:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009937:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000993b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000993f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009942:	e8 35 fd ff ff       	call   c000967c <int_to_fp>
c0009947:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000994f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009953:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000995b:	29 c8                	sub    eax,ecx
c000995d:	99                   	cdq    
c000995e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009966:	0f af d0             	imul   edx,eax
c0009969:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000996c:	31 d2                	xor    edx,edx
c000996e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009972:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009976:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009979:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000997d:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009980:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009984:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009988:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000998b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009990:	29 c1                	sub    ecx,eax
c0009992:	31 c0                	xor    eax,eax
c0009994:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009997:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000999b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000999f:	83 c7 08             	add    edi,0x8
c00099a2:	e8 e3 fc ff ff       	call   c000968a <fp_to_double>
c00099a7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099b3:	e8 c8 fc ff ff       	call   c0009680 <fp_to_int>
c00099b8:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099bb:	52                   	push   edx
c00099bc:	52                   	push   edx
c00099bd:	51                   	push   ecx
c00099be:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099c2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099c6:	e8 ad a5 01 00       	call   c0023f78 <__subsf3>
c00099cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00099ce:	e8 84 bc 01 00       	call   c0025657 <__extendsfdf2>
c00099d3:	83 c4 10             	add    esp,0x10
c00099d6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099da:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099ee:	e8 6d b2 01 00       	call   c0024c60 <__muldf3>
c00099f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00099f7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00099fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099fe:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a02:	e8 50 bc 01 00       	call   c0025657 <__extendsfdf2>
c0009a07:	83 c4 10             	add    esp,0x10
c0009a0a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a0e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a12:	52                   	push   edx
c0009a13:	50                   	push   eax
c0009a14:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a18:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a1c:	e8 c2 ab 01 00       	call   c00245e3 <__adddf3>
c0009a21:	59                   	pop    ecx
c0009a22:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a26:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a2a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a30:	e8 22 bc 01 00       	call   c0025657 <__extendsfdf2>
c0009a35:	83 c4 10             	add    esp,0x10
c0009a38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a50:	e8 0b b2 01 00       	call   c0024c60 <__muldf3>
c0009a55:	83 c4 10             	add    esp,0x10
c0009a58:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a5c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a60:	52                   	push   edx
c0009a61:	50                   	push   eax
c0009a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a6a:	e8 74 ab 01 00       	call   c00245e3 <__adddf3>
c0009a6f:	59                   	pop    ecx
c0009a70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a74:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a78:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a7e:	e8 d4 bb 01 00       	call   c0025657 <__extendsfdf2>
c0009a83:	83 c4 10             	add    esp,0x10
c0009a86:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a8a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a96:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a9e:	e8 bd b1 01 00       	call   c0024c60 <__muldf3>
c0009aa3:	83 c4 10             	add    esp,0x10
c0009aa6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009aaa:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009aae:	52                   	push   edx
c0009aaf:	50                   	push   eax
c0009ab0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab8:	e8 26 ab 01 00       	call   c00245e3 <__adddf3>
c0009abd:	83 c4 10             	add    esp,0x10
c0009ac0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ac4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acc:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ad0:	0f 89 c5 fe ff ff    	jns    c000999b <calc_output_stereo+0x81>
c0009ad6:	29 e9                	sub    ecx,ebp
c0009ad8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009adc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009ae0:	29 c8                	sub    eax,ecx
c0009ae2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009aea:	99                   	cdq    
c0009aeb:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009aef:	31 d2                	xor    edx,edx
c0009af1:	0f af f8             	imul   edi,eax
c0009af4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009af8:	40                   	inc    eax
c0009af9:	01 cf                	add    edi,ecx
c0009afb:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b00:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b04:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b0c:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b0f:	31 c0                	xor    eax,eax
c0009b11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b15:	89 f8                	mov    eax,edi
c0009b17:	83 eb 08             	sub    ebx,0x8
c0009b1a:	e8 6b fb ff ff       	call   c000968a <fp_to_double>
c0009b1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b27:	89 f8                	mov    eax,edi
c0009b29:	e8 52 fb ff ff       	call   c0009680 <fp_to_int>
c0009b2e:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b31:	52                   	push   edx
c0009b32:	52                   	push   edx
c0009b33:	55                   	push   ebp
c0009b34:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b38:	e8 3b a4 01 00       	call   c0023f78 <__subsf3>
c0009b3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b40:	e8 12 bb 01 00       	call   c0025657 <__extendsfdf2>
c0009b45:	83 c4 10             	add    esp,0x10
c0009b48:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b4c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b54:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b58:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b5c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b60:	e8 fb b0 01 00       	call   c0024c60 <__muldf3>
c0009b65:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b68:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b6c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b70:	e8 e2 ba 01 00       	call   c0025657 <__extendsfdf2>
c0009b75:	83 c4 10             	add    esp,0x10
c0009b78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b80:	52                   	push   edx
c0009b81:	50                   	push   eax
c0009b82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b8a:	e8 54 aa 01 00       	call   c00245e3 <__adddf3>
c0009b8f:	59                   	pop    ecx
c0009b90:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009b94:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009b98:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009b9e:	e8 b4 ba 01 00       	call   c0025657 <__extendsfdf2>
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009baa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bbe:	e8 9d b0 01 00       	call   c0024c60 <__muldf3>
c0009bc3:	83 c4 10             	add    esp,0x10
c0009bc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bca:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bce:	52                   	push   edx
c0009bcf:	50                   	push   eax
c0009bd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd8:	e8 06 aa 01 00       	call   c00245e3 <__adddf3>
c0009bdd:	5d                   	pop    ebp
c0009bde:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009be2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009be6:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bec:	e8 66 ba 01 00       	call   c0025657 <__extendsfdf2>
c0009bf1:	83 c4 10             	add    esp,0x10
c0009bf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c04:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c08:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c0c:	e8 4f b0 01 00       	call   c0024c60 <__muldf3>
c0009c11:	83 c4 10             	add    esp,0x10
c0009c14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c1c:	52                   	push   edx
c0009c1d:	50                   	push   eax
c0009c1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c22:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c26:	e8 b8 a9 01 00       	call   c00245e3 <__adddf3>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c3a:	85 ff                	test   edi,edi
c0009c3c:	0f 8f d3 fe ff ff    	jg     c0009b15 <calc_output_stereo+0x1fb>
c0009c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c52:	e8 8c a9 01 00       	call   c00245e3 <__adddf3>
c0009c57:	83 c4 10             	add    esp,0x10
c0009c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c72:	e8 e9 af 01 00       	call   c0024c60 <__muldf3>
c0009c77:	59                   	pop    ecx
c0009c78:	5b                   	pop    ebx
c0009c79:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c89:	e8 a5 b8 01 00       	call   c0025533 <__truncdfsf2>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009c98:	89 03                	mov    DWORD PTR [ebx],eax
c0009c9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009caa:	e8 34 a9 01 00       	call   c00245e3 <__adddf3>
c0009caf:	83 c4 10             	add    esp,0x10
c0009cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cca:	e8 91 af 01 00       	call   c0024c60 <__muldf3>
c0009ccf:	5e                   	pop    esi
c0009cd0:	5f                   	pop    edi
c0009cd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cd5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce1:	e8 4d b8 01 00       	call   c0025533 <__truncdfsf2>
c0009ce6:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009ced:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cf0:	83 c4 7c             	add    esp,0x7c
c0009cf3:	5b                   	pop    ebx
c0009cf4:	5e                   	pop    esi
c0009cf5:	5f                   	pop    edi
c0009cf6:	5d                   	pop    ebp
c0009cf7:	c3                   	ret    

c0009cf8 <calc_output_quad>:
c0009cf8:	55                   	push   ebp
c0009cf9:	57                   	push   edi
c0009cfa:	56                   	push   esi
c0009cfb:	89 c6                	mov    esi,eax
c0009cfd:	53                   	push   ebx
c0009cfe:	83 ec 7c             	sub    esp,0x7c
c0009d01:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d05:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d10:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d17:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d22:	e8 55 f9 ff ff       	call   c000967c <int_to_fp>
c0009d27:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d2a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d2d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d31:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d35:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d39:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d3d:	99                   	cdq    
c0009d3e:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d42:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d46:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d49:	31 d2                	xor    edx,edx
c0009d4b:	0f af d8             	imul   ebx,eax
c0009d4e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d56:	0f af c7             	imul   eax,edi
c0009d59:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d5d:	29 c1                	sub    ecx,eax
c0009d5f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d67:	31 c0                	xor    eax,eax
c0009d69:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d80:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d84:	89 d8                	mov    eax,ebx
c0009d86:	83 c7 10             	add    edi,0x10
c0009d89:	e8 fc f8 ff ff       	call   c000968a <fp_to_double>
c0009d8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d96:	89 d8                	mov    eax,ebx
c0009d98:	e8 e3 f8 ff ff       	call   c0009680 <fp_to_int>
c0009d9d:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009da1:	52                   	push   edx
c0009da2:	52                   	push   edx
c0009da3:	51                   	push   ecx
c0009da4:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009da8:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dac:	e8 c7 a1 01 00       	call   c0023f78 <__subsf3>
c0009db1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009db4:	e8 9e b8 01 00       	call   c0025657 <__extendsfdf2>
c0009db9:	83 c4 10             	add    esp,0x10
c0009dbc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dc0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dcc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dd0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dd4:	e8 87 ae 01 00       	call   c0024c60 <__muldf3>
c0009dd9:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009ddd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009de1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009de8:	e8 6a b8 01 00       	call   c0025657 <__extendsfdf2>
c0009ded:	83 c4 10             	add    esp,0x10
c0009df0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009df4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009df8:	52                   	push   edx
c0009df9:	50                   	push   eax
c0009dfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e02:	e8 dc a7 01 00       	call   c00245e3 <__adddf3>
c0009e07:	59                   	pop    ecx
c0009e08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e0c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e10:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e16:	e8 3c b8 01 00       	call   c0025657 <__extendsfdf2>
c0009e1b:	83 c4 10             	add    esp,0x10
c0009e1e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e22:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e2e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e32:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e36:	e8 25 ae 01 00       	call   c0024c60 <__muldf3>
c0009e3b:	83 c4 10             	add    esp,0x10
c0009e3e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e42:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e46:	52                   	push   edx
c0009e47:	50                   	push   eax
c0009e48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e50:	e8 8e a7 01 00       	call   c00245e3 <__adddf3>
c0009e55:	59                   	pop    ecx
c0009e56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e5a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e5e:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e64:	e8 ee b7 01 00       	call   c0025657 <__extendsfdf2>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e70:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e7c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e80:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e84:	e8 d7 ad 01 00       	call   c0024c60 <__muldf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e90:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e94:	52                   	push   edx
c0009e95:	50                   	push   eax
c0009e96:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e9a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e9e:	e8 40 a7 01 00       	call   c00245e3 <__adddf3>
c0009ea3:	59                   	pop    ecx
c0009ea4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ea8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eac:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009eb2:	e8 a0 b7 01 00       	call   c0025657 <__extendsfdf2>
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ece:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ed2:	e8 89 ad 01 00       	call   c0024c60 <__muldf3>
c0009ed7:	83 c4 10             	add    esp,0x10
c0009eda:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ede:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ee2:	52                   	push   edx
c0009ee3:	50                   	push   eax
c0009ee4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ee8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009eec:	e8 f2 a6 01 00       	call   c00245e3 <__adddf3>
c0009ef1:	59                   	pop    ecx
c0009ef2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ef6:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009efa:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f00:	e8 52 b7 01 00       	call   c0025657 <__extendsfdf2>
c0009f05:	83 c4 10             	add    esp,0x10
c0009f08:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f20:	e8 3b ad 01 00       	call   c0024c60 <__muldf3>
c0009f25:	83 c4 10             	add    esp,0x10
c0009f28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f2c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f30:	52                   	push   edx
c0009f31:	50                   	push   eax
c0009f32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f3a:	e8 a4 a6 01 00       	call   c00245e3 <__adddf3>
c0009f3f:	83 c4 10             	add    esp,0x10
c0009f42:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f46:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f4a:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f4e:	0f 89 30 fe ff ff    	jns    c0009d84 <calc_output_quad+0x8c>
c0009f54:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f5c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f60:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f64:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f6c:	29 c8                	sub    eax,ecx
c0009f6e:	99                   	cdq    
c0009f6f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f73:	31 d2                	xor    edx,edx
c0009f75:	0f af d8             	imul   ebx,eax
c0009f78:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f7c:	40                   	inc    eax
c0009f7d:	01 cb                	add    ebx,ecx
c0009f7f:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f84:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f88:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f90:	8d 34 86             	lea    esi,[esi+eax*4]
c0009f93:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009f9b:	31 c0                	xor    eax,eax
c0009f9d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fa1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fa5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fa9:	89 d8                	mov    eax,ebx
c0009fab:	83 ee 10             	sub    esi,0x10
c0009fae:	e8 d7 f6 ff ff       	call   c000968a <fp_to_double>
c0009fb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fbb:	89 d8                	mov    eax,ebx
c0009fbd:	e8 be f6 ff ff       	call   c0009680 <fp_to_int>
c0009fc2:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fc6:	52                   	push   edx
c0009fc7:	52                   	push   edx
c0009fc8:	57                   	push   edi
c0009fc9:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fcd:	e8 a6 9f 01 00       	call   c0023f78 <__subsf3>
c0009fd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd5:	e8 7d b6 01 00       	call   c0025657 <__extendsfdf2>
c0009fda:	83 c4 10             	add    esp,0x10
c0009fdd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff5:	e8 66 ac 01 00       	call   c0024c60 <__muldf3>
c0009ffa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ffd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a001:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a005:	e8 4d b6 01 00       	call   c0025657 <__extendsfdf2>
c000a00a:	83 c4 10             	add    esp,0x10
c000a00d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a011:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a015:	52                   	push   edx
c000a016:	50                   	push   eax
c000a017:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01f:	e8 bf a5 01 00       	call   c00245e3 <__adddf3>
c000a024:	59                   	pop    ecx
c000a025:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a029:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a02d:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a033:	e8 1f b6 01 00       	call   c0025657 <__extendsfdf2>
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a047:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a04f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a053:	e8 08 ac 01 00       	call   c0024c60 <__muldf3>
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a063:	52                   	push   edx
c000a064:	50                   	push   eax
c000a065:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a069:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a06d:	e8 71 a5 01 00       	call   c00245e3 <__adddf3>
c000a072:	5f                   	pop    edi
c000a073:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a077:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a07b:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a081:	e8 d1 b5 01 00       	call   c0025657 <__extendsfdf2>
c000a086:	83 c4 10             	add    esp,0x10
c000a089:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a091:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a099:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a1:	e8 ba ab 01 00       	call   c0024c60 <__muldf3>
c000a0a6:	83 c4 10             	add    esp,0x10
c000a0a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ad:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b1:	52                   	push   edx
c000a0b2:	50                   	push   eax
c000a0b3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0b7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0bb:	e8 23 a5 01 00       	call   c00245e3 <__adddf3>
c000a0c0:	59                   	pop    ecx
c000a0c1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0c5:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0c9:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0cf:	e8 83 b5 01 00       	call   c0025657 <__extendsfdf2>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0eb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ef:	e8 6c ab 01 00       	call   c0024c60 <__muldf3>
c000a0f4:	83 c4 10             	add    esp,0x10
c000a0f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ff:	52                   	push   edx
c000a100:	50                   	push   eax
c000a101:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a105:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a109:	e8 d5 a4 01 00       	call   c00245e3 <__adddf3>
c000a10e:	5f                   	pop    edi
c000a10f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a113:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a117:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a11d:	e8 35 b5 01 00       	call   c0025657 <__extendsfdf2>
c000a122:	83 c4 10             	add    esp,0x10
c000a125:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a129:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a135:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a139:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13d:	e8 1e ab 01 00       	call   c0024c60 <__muldf3>
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a149:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a14d:	52                   	push   edx
c000a14e:	50                   	push   eax
c000a14f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a153:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a157:	e8 87 a4 01 00       	call   c00245e3 <__adddf3>
c000a15c:	83 c4 10             	add    esp,0x10
c000a15f:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a163:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a167:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a16b:	85 db                	test   ebx,ebx
c000a16d:	0f 8f 36 fe ff ff    	jg     c0009fa9 <calc_output_quad+0x2b1>
c000a173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a177:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a183:	e8 5b a4 01 00       	call   c00245e3 <__adddf3>
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a18f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a193:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a197:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a3:	e8 b8 aa 01 00       	call   c0024c60 <__muldf3>
c000a1a8:	59                   	pop    ecx
c000a1a9:	5b                   	pop    ebx
c000a1aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ba:	e8 74 b3 01 00       	call   c0025533 <__truncdfsf2>
c000a1bf:	83 c4 10             	add    esp,0x10
c000a1c2:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1c9:	89 06                	mov    DWORD PTR [esi],eax
c000a1cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1d7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1db:	e8 03 a4 01 00       	call   c00245e3 <__adddf3>
c000a1e0:	83 c4 10             	add    esp,0x10
c000a1e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fb:	e8 60 aa 01 00       	call   c0024c60 <__muldf3>
c000a200:	5e                   	pop    esi
c000a201:	5f                   	pop    edi
c000a202:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a206:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a212:	e8 1c b3 01 00       	call   c0025533 <__truncdfsf2>
c000a217:	83 c4 10             	add    esp,0x10
c000a21a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a221:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a224:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a228:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a22c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a234:	e8 aa a3 01 00       	call   c00245e3 <__adddf3>
c000a239:	83 c4 10             	add    esp,0x10
c000a23c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a240:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a254:	e8 07 aa 01 00       	call   c0024c60 <__muldf3>
c000a259:	5d                   	pop    ebp
c000a25a:	59                   	pop    ecx
c000a25b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a25f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26b:	e8 c3 b2 01 00       	call   c0025533 <__truncdfsf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a27a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a27d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a281:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a285:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a289:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28d:	e8 51 a3 01 00       	call   c00245e3 <__adddf3>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a299:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a29d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ad:	e8 ae a9 01 00       	call   c0024c60 <__muldf3>
c000a2b2:	5b                   	pop    ebx
c000a2b3:	5e                   	pop    esi
c000a2b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c4:	e8 6a b2 01 00       	call   c0025533 <__truncdfsf2>
c000a2c9:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2d0:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2d3:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2d9:	5b                   	pop    ebx
c000a2da:	5e                   	pop    esi
c000a2db:	5f                   	pop    edi
c000a2dc:	5d                   	pop    ebp
c000a2dd:	c3                   	ret    

c000a2de <calc_output_hex>:
c000a2de:	55                   	push   ebp
c000a2df:	89 cd                	mov    ebp,ecx
c000a2e1:	57                   	push   edi
c000a2e2:	56                   	push   esi
c000a2e3:	53                   	push   ebx
c000a2e4:	89 c3                	mov    ebx,eax
c000a2e6:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2ec:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2ef:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a2f6:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a2fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a301:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a305:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a308:	e8 6f f3 ff ff       	call   c000967c <int_to_fp>
c000a30d:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a310:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a314:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a317:	29 c8                	sub    eax,ecx
c000a319:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a31d:	99                   	cdq    
c000a31e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a326:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a329:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a331:	0f af f8             	imul   edi,eax
c000a334:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a337:	01 cf                	add    edi,ecx
c000a339:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a33d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a340:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a344:	0f af c2             	imul   eax,edx
c000a347:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a34b:	29 c1                	sub    ecx,eax
c000a34d:	31 d2                	xor    edx,edx
c000a34f:	31 c0                	xor    eax,eax
c000a351:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a354:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a358:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a35c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a360:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a364:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a368:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a36c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a370:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a374:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a378:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a37c:	89 f8                	mov    eax,edi
c000a37e:	e8 07 f3 ff ff       	call   c000968a <fp_to_double>
c000a383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a387:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a38b:	89 f8                	mov    eax,edi
c000a38d:	e8 ee f2 ff ff       	call   c0009680 <fp_to_int>
c000a392:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a396:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a399:	52                   	push   edx
c000a39a:	52                   	push   edx
c000a39b:	51                   	push   ecx
c000a39c:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3a0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3a7:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3ab:	e8 c8 9b 01 00       	call   c0023f78 <__subsf3>
c000a3b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3b3:	e8 9f b2 01 00       	call   c0025657 <__extendsfdf2>
c000a3b8:	83 c4 10             	add    esp,0x10
c000a3bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3d3:	e8 88 a8 01 00       	call   c0024c60 <__muldf3>
c000a3d8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3e0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3e7:	e8 6b b2 01 00       	call   c0025657 <__extendsfdf2>
c000a3ec:	83 c4 10             	add    esp,0x10
c000a3ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3f7:	52                   	push   edx
c000a3f8:	50                   	push   eax
c000a3f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a401:	e8 dd a1 01 00       	call   c00245e3 <__adddf3>
c000a406:	59                   	pop    ecx
c000a407:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a40b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a40f:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a415:	e8 3d b2 01 00       	call   c0025657 <__extendsfdf2>
c000a41a:	83 c4 10             	add    esp,0x10
c000a41d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a421:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a425:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a429:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a431:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a435:	e8 26 a8 01 00       	call   c0024c60 <__muldf3>
c000a43a:	83 c4 10             	add    esp,0x10
c000a43d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a441:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a445:	52                   	push   edx
c000a446:	50                   	push   eax
c000a447:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44f:	e8 8f a1 01 00       	call   c00245e3 <__adddf3>
c000a454:	59                   	pop    ecx
c000a455:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a459:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a45d:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a463:	e8 ef b1 01 00       	call   c0025657 <__extendsfdf2>
c000a468:	83 c4 10             	add    esp,0x10
c000a46b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a47b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a483:	e8 d8 a7 01 00       	call   c0024c60 <__muldf3>
c000a488:	83 c4 10             	add    esp,0x10
c000a48b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a48f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a493:	52                   	push   edx
c000a494:	50                   	push   eax
c000a495:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a499:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a49d:	e8 41 a1 01 00       	call   c00245e3 <__adddf3>
c000a4a2:	59                   	pop    ecx
c000a4a3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4a7:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4ab:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4b1:	e8 a1 b1 01 00       	call   c0025657 <__extendsfdf2>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4d1:	e8 8a a7 01 00       	call   c0024c60 <__muldf3>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4dd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4e1:	52                   	push   edx
c000a4e2:	50                   	push   eax
c000a4e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4eb:	e8 f3 a0 01 00       	call   c00245e3 <__adddf3>
c000a4f0:	59                   	pop    ecx
c000a4f1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4f5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a4f9:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a4ff:	e8 53 b1 01 00       	call   c0025657 <__extendsfdf2>
c000a504:	83 c4 10             	add    esp,0x10
c000a507:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a517:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51f:	e8 3c a7 01 00       	call   c0024c60 <__muldf3>
c000a524:	83 c4 10             	add    esp,0x10
c000a527:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a52b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a52f:	52                   	push   edx
c000a530:	50                   	push   eax
c000a531:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a535:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a539:	e8 a5 a0 01 00       	call   c00245e3 <__adddf3>
c000a53e:	59                   	pop    ecx
c000a53f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a543:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a547:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a54d:	e8 05 b1 01 00       	call   c0025657 <__extendsfdf2>
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a559:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a565:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a569:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56d:	e8 ee a6 01 00       	call   c0024c60 <__muldf3>
c000a572:	83 c4 10             	add    esp,0x10
c000a575:	83 c6 18             	add    esi,0x18
c000a578:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a57c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a580:	52                   	push   edx
c000a581:	50                   	push   eax
c000a582:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a586:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a58a:	e8 54 a0 01 00       	call   c00245e3 <__adddf3>
c000a58f:	59                   	pop    ecx
c000a590:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a594:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a598:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a59e:	e8 b4 b0 01 00       	call   c0025657 <__extendsfdf2>
c000a5a3:	83 c4 10             	add    esp,0x10
c000a5a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5aa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5be:	e8 9d a6 01 00       	call   c0024c60 <__muldf3>
c000a5c3:	83 c4 10             	add    esp,0x10
c000a5c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ce:	52                   	push   edx
c000a5cf:	50                   	push   eax
c000a5d0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d8:	e8 06 a0 01 00       	call   c00245e3 <__adddf3>
c000a5dd:	83 c4 10             	add    esp,0x10
c000a5e0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5e4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5e8:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5eb:	0f 89 8b fd ff ff    	jns    c000a37c <calc_output_hex+0x9e>
c000a5f1:	31 f6                	xor    esi,esi
c000a5f3:	31 ff                	xor    edi,edi
c000a5f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a5f9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a5fc:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a600:	29 e9                	sub    ecx,ebp
c000a602:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a606:	29 c8                	sub    eax,ecx
c000a608:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a60b:	99                   	cdq    
c000a60c:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a610:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a613:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a617:	0f af e8             	imul   ebp,eax
c000a61a:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a61e:	40                   	inc    eax
c000a61f:	01 cd                	add    ebp,ecx
c000a621:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a626:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a62a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a62e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a632:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a635:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a639:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a63d:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a641:	89 e8                	mov    eax,ebp
c000a643:	e8 42 f0 ff ff       	call   c000968a <fp_to_double>
c000a648:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a64c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a650:	89 e8                	mov    eax,ebp
c000a652:	e8 29 f0 ff ff       	call   c0009680 <fp_to_int>
c000a657:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a65b:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a65e:	52                   	push   edx
c000a65f:	52                   	push   edx
c000a660:	51                   	push   ecx
c000a661:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a668:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a66f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a673:	e8 00 99 01 00       	call   c0023f78 <__subsf3>
c000a678:	89 04 24             	mov    DWORD PTR [esp],eax
c000a67b:	e8 d7 af 01 00       	call   c0025657 <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a687:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a697:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a69b:	e8 c0 a5 01 00       	call   c0024c60 <__muldf3>
c000a6a0:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6ae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6b2:	e8 a0 af 01 00       	call   c0025657 <__extendsfdf2>
c000a6b7:	83 c4 10             	add    esp,0x10
c000a6ba:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6be:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6c2:	52                   	push   edx
c000a6c3:	50                   	push   eax
c000a6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6cc:	e8 12 9f 01 00       	call   c00245e3 <__adddf3>
c000a6d1:	59                   	pop    ecx
c000a6d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6d6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6da:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6e0:	e8 72 af 01 00       	call   c0025657 <__extendsfdf2>
c000a6e5:	83 c4 10             	add    esp,0x10
c000a6e8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ec:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6fc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a700:	e8 5b a5 01 00       	call   c0024c60 <__muldf3>
c000a705:	83 c4 10             	add    esp,0x10
c000a708:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a70c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a710:	52                   	push   edx
c000a711:	50                   	push   eax
c000a712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a71a:	e8 c4 9e 01 00       	call   c00245e3 <__adddf3>
c000a71f:	59                   	pop    ecx
c000a720:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a724:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a728:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a72e:	e8 24 af 01 00       	call   c0025657 <__extendsfdf2>
c000a733:	83 c4 10             	add    esp,0x10
c000a736:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a73a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a746:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a74a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a74e:	e8 0d a5 01 00       	call   c0024c60 <__muldf3>
c000a753:	83 c4 10             	add    esp,0x10
c000a756:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a75a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a75e:	52                   	push   edx
c000a75f:	50                   	push   eax
c000a760:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a764:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a768:	e8 76 9e 01 00       	call   c00245e3 <__adddf3>
c000a76d:	59                   	pop    ecx
c000a76e:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a772:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a776:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a77c:	e8 d6 ae 01 00       	call   c0025657 <__extendsfdf2>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a788:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a790:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a794:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a798:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a79c:	e8 bf a4 01 00       	call   c0024c60 <__muldf3>
c000a7a1:	83 c4 10             	add    esp,0x10
c000a7a4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ac:	52                   	push   edx
c000a7ad:	50                   	push   eax
c000a7ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b6:	e8 28 9e 01 00       	call   c00245e3 <__adddf3>
c000a7bb:	59                   	pop    ecx
c000a7bc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7c0:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7c4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7ca:	e8 88 ae 01 00       	call   c0025657 <__extendsfdf2>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7ea:	e8 71 a4 01 00       	call   c0024c60 <__muldf3>
c000a7ef:	83 c4 10             	add    esp,0x10
c000a7f2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7fa:	52                   	push   edx
c000a7fb:	50                   	push   eax
c000a7fc:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a800:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a804:	e8 da 9d 01 00       	call   c00245e3 <__adddf3>
c000a809:	59                   	pop    ecx
c000a80a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a80e:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a812:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a818:	e8 3a ae 01 00       	call   c0025657 <__extendsfdf2>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a824:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a828:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a830:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a834:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a838:	e8 23 a4 01 00       	call   c0024c60 <__muldf3>
c000a83d:	83 c4 10             	add    esp,0x10
c000a840:	83 eb 18             	sub    ebx,0x18
c000a843:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a847:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a84b:	52                   	push   edx
c000a84c:	50                   	push   eax
c000a84d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a851:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a855:	e8 89 9d 01 00       	call   c00245e3 <__adddf3>
c000a85a:	59                   	pop    ecx
c000a85b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a85f:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a863:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a869:	e8 e9 ad 01 00       	call   c0025657 <__extendsfdf2>
c000a86e:	83 c4 10             	add    esp,0x10
c000a871:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a875:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a881:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a885:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a889:	e8 d2 a3 01 00       	call   c0024c60 <__muldf3>
c000a88e:	83 c4 10             	add    esp,0x10
c000a891:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a895:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a899:	52                   	push   edx
c000a89a:	50                   	push   eax
c000a89b:	57                   	push   edi
c000a89c:	56                   	push   esi
c000a89d:	e8 41 9d 01 00       	call   c00245e3 <__adddf3>
c000a8a2:	83 c4 10             	add    esp,0x10
c000a8a5:	89 c6                	mov    esi,eax
c000a8a7:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8aa:	89 d7                	mov    edi,edx
c000a8ac:	85 ed                	test   ebp,ebp
c000a8ae:	0f 8f 8d fd ff ff    	jg     c000a641 <calc_output_hex+0x363>
c000a8b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c4:	e8 1a 9d 01 00       	call   c00245e3 <__adddf3>
c000a8c9:	83 c4 10             	add    esp,0x10
c000a8cc:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e3:	e8 78 a3 01 00       	call   c0024c60 <__muldf3>
c000a8e8:	59                   	pop    ecx
c000a8e9:	5b                   	pop    ebx
c000a8ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8fa:	e8 34 ac 01 00       	call   c0025533 <__truncdfsf2>
c000a8ff:	83 c4 10             	add    esp,0x10
c000a902:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a909:	89 03                	mov    DWORD PTR [ebx],eax
c000a90b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a90f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a913:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a917:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a91b:	e8 c3 9c 01 00       	call   c00245e3 <__adddf3>
c000a920:	83 c4 10             	add    esp,0x10
c000a923:	89 04 24             	mov    DWORD PTR [esp],eax
c000a926:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a92a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a932:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a936:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93a:	e8 21 a3 01 00       	call   c0024c60 <__muldf3>
c000a93f:	5d                   	pop    ebp
c000a940:	59                   	pop    ecx
c000a941:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a945:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a951:	e8 dd ab 01 00       	call   c0025533 <__truncdfsf2>
c000a956:	83 c4 10             	add    esp,0x10
c000a959:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a960:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a963:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a967:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a96b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a96f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a973:	e8 6b 9c 01 00       	call   c00245e3 <__adddf3>
c000a978:	83 c4 10             	add    esp,0x10
c000a97b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a97e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a982:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a986:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a992:	e8 c9 a2 01 00       	call   c0024c60 <__muldf3>
c000a997:	5b                   	pop    ebx
c000a998:	5d                   	pop    ebp
c000a999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a99d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a9:	e8 85 ab 01 00       	call   c0025533 <__truncdfsf2>
c000a9ae:	83 c4 10             	add    esp,0x10
c000a9b1:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9b8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9bb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9bf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9cb:	e8 13 9c 01 00       	call   c00245e3 <__adddf3>
c000a9d0:	83 c4 10             	add    esp,0x10
c000a9d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ea:	e8 71 a2 01 00       	call   c0024c60 <__muldf3>
c000a9ef:	59                   	pop    ecx
c000a9f0:	5b                   	pop    ebx
c000a9f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa01:	e8 2d ab 01 00       	call   c0025533 <__truncdfsf2>
c000aa06:	83 c4 10             	add    esp,0x10
c000aa09:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa10:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa23:	e8 bb 9b 01 00       	call   c00245e3 <__adddf3>
c000aa28:	83 c4 10             	add    esp,0x10
c000aa2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa42:	e8 19 a2 01 00       	call   c0024c60 <__muldf3>
c000aa47:	5d                   	pop    ebp
c000aa48:	59                   	pop    ecx
c000aa49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa51:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa59:	e8 d5 aa 01 00       	call   c0025533 <__truncdfsf2>
c000aa5e:	83 c4 10             	add    esp,0x10
c000aa61:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa68:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa6b:	57                   	push   edi
c000aa6c:	56                   	push   esi
c000aa6d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa71:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa75:	e8 69 9b 01 00       	call   c00245e3 <__adddf3>
c000aa7a:	83 c4 10             	add    esp,0x10
c000aa7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa94:	e8 c7 a1 01 00       	call   c0024c60 <__muldf3>
c000aa99:	5b                   	pop    ebx
c000aa9a:	5e                   	pop    esi
c000aa9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaab:	e8 83 aa 01 00       	call   c0025533 <__truncdfsf2>
c000aab0:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aab7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaba:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aac0:	5b                   	pop    ebx
c000aac1:	5e                   	pop    esi
c000aac2:	5f                   	pop    edi
c000aac3:	5d                   	pop    ebp
c000aac4:	c3                   	ret    

c000aac5 <sinc_reset>:
c000aac5:	56                   	push   esi
c000aac6:	53                   	push   ebx
c000aac7:	51                   	push   ecx
c000aac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacc:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aacf:	85 db                	test   ebx,ebx
c000aad1:	74 59                	je     c000ab2c <sinc_reset+0x67>
c000aad3:	31 d2                	xor    edx,edx
c000aad5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aadc:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aadf:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aae2:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aae9:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aaf0:	31 c0                	xor    eax,eax
c000aaf2:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000aaf8:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000aafb:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000aafe:	52                   	push   edx
c000aaff:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab02:	c1 e0 02             	shl    eax,0x2
c000ab05:	50                   	push   eax
c000ab06:	6a 00                	push   0x0
c000ab08:	56                   	push   esi
c000ab09:	e8 6f 5b ff ff       	call   c000067d <memset>
c000ab0e:	83 c4 0c             	add    esp,0xc
c000ab11:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab14:	c1 e0 02             	shl    eax,0x2
c000ab17:	50                   	push   eax
c000ab18:	68 aa 00 00 00       	push   0xaa
c000ab1d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab20:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab23:	50                   	push   eax
c000ab24:	e8 54 5b ff ff       	call   c000067d <memset>
c000ab29:	83 c4 10             	add    esp,0x10
c000ab2c:	58                   	pop    eax
c000ab2d:	5b                   	pop    ebx
c000ab2e:	5e                   	pop    esi
c000ab2f:	c3                   	ret    

c000ab30 <calc_output_multi>:
c000ab30:	55                   	push   ebp
c000ab31:	57                   	push   edi
c000ab32:	56                   	push   esi
c000ab33:	89 c6                	mov    esi,eax
c000ab35:	53                   	push   ebx
c000ab36:	83 ec 4c             	sub    esp,0x4c
c000ab39:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab3d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab41:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab45:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab49:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab55:	8d 46 44             	lea    eax,[esi+0x44]
c000ab58:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab5b:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab65:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab68:	e8 0f eb ff ff       	call   c000967c <int_to_fp>
c000ab6d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab70:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab74:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab78:	99                   	cdq    
c000ab79:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab81:	0f af d0             	imul   edx,eax
c000ab84:	0f af c3             	imul   eax,ebx
c000ab87:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab8b:	29 c1                	sub    ecx,eax
c000ab8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab91:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ab95:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ab9c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aba0:	57                   	push   edi
c000aba1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aba5:	6a 00                	push   0x0
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	e8 cd 5a ff ff       	call   c000067d <memset>
c000abb0:	83 c4 10             	add    esp,0x10
c000abb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abb7:	89 df                	mov    edi,ebx
c000abb9:	e8 cc ea ff ff       	call   c000968a <fp_to_double>
c000abbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abc6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abca:	e8 b1 ea ff ff       	call   c0009680 <fp_to_int>
c000abcf:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abd2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abd5:	51                   	push   ecx
c000abd6:	51                   	push   ecx
c000abd7:	55                   	push   ebp
c000abd8:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abdc:	e8 97 93 01 00       	call   c0023f78 <__subsf3>
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	e8 6e aa 01 00       	call   c0025657 <__extendsfdf2>
c000abe9:	83 c4 10             	add    esp,0x10
c000abec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abf0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000abf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac04:	e8 57 a0 01 00       	call   c0024c60 <__muldf3>
c000ac09:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac14:	e8 3e aa 01 00       	call   c0025657 <__extendsfdf2>
c000ac19:	83 c4 10             	add    esp,0x10
c000ac1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac24:	52                   	push   edx
c000ac25:	50                   	push   eax
c000ac26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2e:	e8 b0 99 01 00       	call   c00245e3 <__adddf3>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac3a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac3e:	89 f8                	mov    eax,edi
c000ac40:	b9 08 00 00 00       	mov    ecx,0x8
c000ac45:	99                   	cdq    
c000ac46:	f7 f9                	idiv   ecx
c000ac48:	4a                   	dec    edx
c000ac49:	83 fa 06             	cmp    edx,0x6
c000ac4c:	77 07                	ja     c000ac55 <calc_output_multi+0x125>
c000ac4e:	ff 24 95 84 6d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd927c]
c000ac55:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac58:	4f                   	dec    edi
c000ac59:	83 ec 0c             	sub    esp,0xc
c000ac5c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac63:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac6a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac6e:	e8 e4 a9 01 00       	call   c0025657 <__extendsfdf2>
c000ac73:	83 c4 10             	add    esp,0x10
c000ac76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac8e:	e8 cd 9f 01 00       	call   c0024c60 <__muldf3>
c000ac93:	83 c4 10             	add    esp,0x10
c000ac96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac9a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac9e:	52                   	push   edx
c000ac9f:	50                   	push   eax
c000aca0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aca3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aca6:	e8 38 99 01 00       	call   c00245e3 <__adddf3>
c000acab:	83 c4 10             	add    esp,0x10
c000acae:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acb1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acb4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acb7:	4f                   	dec    edi
c000acb8:	83 ec 0c             	sub    esp,0xc
c000acbb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acc2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acc9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000accd:	e8 85 a9 01 00       	call   c0025657 <__extendsfdf2>
c000acd2:	83 c4 10             	add    esp,0x10
c000acd5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acd9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ace9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aced:	e8 6e 9f 01 00       	call   c0024c60 <__muldf3>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acfd:	52                   	push   edx
c000acfe:	50                   	push   eax
c000acff:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad02:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad05:	e8 d9 98 01 00       	call   c00245e3 <__adddf3>
c000ad0a:	83 c4 10             	add    esp,0x10
c000ad0d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad10:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad16:	4f                   	dec    edi
c000ad17:	83 ec 0c             	sub    esp,0xc
c000ad1a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad21:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad2c:	e8 26 a9 01 00       	call   c0025657 <__extendsfdf2>
c000ad31:	83 c4 10             	add    esp,0x10
c000ad34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad48:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad4c:	e8 0f 9f 01 00       	call   c0024c60 <__muldf3>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad58:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad5c:	52                   	push   edx
c000ad5d:	50                   	push   eax
c000ad5e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad61:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad64:	e8 7a 98 01 00       	call   c00245e3 <__adddf3>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad6f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad75:	4f                   	dec    edi
c000ad76:	83 ec 0c             	sub    esp,0xc
c000ad79:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad80:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad87:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad8b:	e8 c7 a8 01 00       	call   c0025657 <__extendsfdf2>
c000ad90:	83 c4 10             	add    esp,0x10
c000ad93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad97:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ada3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adab:	e8 b0 9e 01 00       	call   c0024c60 <__muldf3>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adbb:	52                   	push   edx
c000adbc:	50                   	push   eax
c000adbd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adc0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adc3:	e8 1b 98 01 00       	call   c00245e3 <__adddf3>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000add1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000add4:	4f                   	dec    edi
c000add5:	83 ec 0c             	sub    esp,0xc
c000add8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000addb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000addf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ade6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adea:	e8 68 a8 01 00       	call   c0025657 <__extendsfdf2>
c000adef:	83 c4 10             	add    esp,0x10
c000adf2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae0a:	e8 51 9e 01 00       	call   c0024c60 <__muldf3>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae16:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae1a:	52                   	push   edx
c000ae1b:	50                   	push   eax
c000ae1c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae1f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae22:	e8 bc 97 01 00       	call   c00245e3 <__adddf3>
c000ae27:	83 c4 10             	add    esp,0x10
c000ae2a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae2d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae30:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae33:	4f                   	dec    edi
c000ae34:	83 ec 0c             	sub    esp,0xc
c000ae37:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae3e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae45:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae49:	e8 09 a8 01 00       	call   c0025657 <__extendsfdf2>
c000ae4e:	83 c4 10             	add    esp,0x10
c000ae51:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae55:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae65:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae69:	e8 f2 9d 01 00       	call   c0024c60 <__muldf3>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae75:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae79:	52                   	push   edx
c000ae7a:	50                   	push   eax
c000ae7b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae7e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae81:	e8 5d 97 01 00       	call   c00245e3 <__adddf3>
c000ae86:	83 c4 10             	add    esp,0x10
c000ae89:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae8c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae92:	4f                   	dec    edi
c000ae93:	83 ec 0c             	sub    esp,0xc
c000ae96:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae9d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aea4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aea8:	e8 aa a7 01 00       	call   c0025657 <__extendsfdf2>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec8:	e8 93 9d 01 00       	call   c0024c60 <__muldf3>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aed8:	52                   	push   edx
c000aed9:	50                   	push   eax
c000aeda:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aedd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee0:	e8 fe 96 01 00       	call   c00245e3 <__adddf3>
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeeb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aeee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef1:	4f                   	dec    edi
c000aef2:	83 ec 0c             	sub    esp,0xc
c000aef5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aef8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aefc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af03:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af07:	e8 4b a7 01 00       	call   c0025657 <__extendsfdf2>
c000af0c:	83 c4 10             	add    esp,0x10
c000af0f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af13:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af27:	e8 34 9d 01 00       	call   c0024c60 <__muldf3>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af33:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af37:	52                   	push   edx
c000af38:	50                   	push   eax
c000af39:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af3c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af3f:	e8 9f 96 01 00       	call   c00245e3 <__adddf3>
c000af44:	83 c4 10             	add    esp,0x10
c000af47:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af4a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af4d:	85 ff                	test   edi,edi
c000af4f:	0f 8f e9 fc ff ff    	jg     c000ac3e <calc_output_multi+0x10e>
c000af55:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af59:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af5d:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af61:	0f 89 4c fc ff ff    	jns    c000abb3 <calc_output_multi+0x83>
c000af67:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af6f:	29 c8                	sub    eax,ecx
c000af71:	99                   	cdq    
c000af72:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af76:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af7a:	0f af d0             	imul   edx,eax
c000af7d:	40                   	inc    eax
c000af7e:	01 d1                	add    ecx,edx
c000af80:	0f af c3             	imul   eax,ebx
c000af83:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af87:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af8e:	55                   	push   ebp
c000af8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000af93:	6a 00                	push   0x0
c000af95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af99:	e8 df 56 ff ff       	call   c000067d <memset>
c000af9e:	83 c4 10             	add    esp,0x10
c000afa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afa5:	e8 e0 e6 ff ff       	call   c000968a <fp_to_double>
c000afaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb6:	e8 c5 e6 ff ff       	call   c0009680 <fp_to_int>
c000afbb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afbe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afc1:	57                   	push   edi
c000afc2:	57                   	push   edi
c000afc3:	89 df                	mov    edi,ebx
c000afc5:	55                   	push   ebp
c000afc6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afca:	e8 a9 8f 01 00       	call   c0023f78 <__subsf3>
c000afcf:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd2:	e8 80 a6 01 00       	call   c0025657 <__extendsfdf2>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000afe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aff2:	e8 69 9c 01 00       	call   c0024c60 <__muldf3>
c000aff7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000affa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000affe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b002:	e8 50 a6 01 00       	call   c0025657 <__extendsfdf2>
c000b007:	83 c4 10             	add    esp,0x10
c000b00a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b00e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b012:	52                   	push   edx
c000b013:	50                   	push   eax
c000b014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01c:	e8 c2 95 01 00       	call   c00245e3 <__adddf3>
c000b021:	83 c4 10             	add    esp,0x10
c000b024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b028:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b02c:	89 f8                	mov    eax,edi
c000b02e:	b9 08 00 00 00       	mov    ecx,0x8
c000b033:	99                   	cdq    
c000b034:	f7 f9                	idiv   ecx
c000b036:	4a                   	dec    edx
c000b037:	83 fa 06             	cmp    edx,0x6
c000b03a:	77 07                	ja     c000b043 <calc_output_multi+0x513>
c000b03c:	ff 24 95 a0 6d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9260]
c000b043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b047:	4f                   	dec    edi
c000b048:	83 ec 0c             	sub    esp,0xc
c000b04b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b04e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b052:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b059:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b05d:	e8 f5 a5 01 00       	call   c0025657 <__extendsfdf2>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b06d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b071:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b075:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b079:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b07d:	e8 de 9b 01 00       	call   c0024c60 <__muldf3>
c000b082:	83 c4 10             	add    esp,0x10
c000b085:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b089:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b08d:	52                   	push   edx
c000b08e:	50                   	push   eax
c000b08f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b092:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b095:	e8 49 95 01 00       	call   c00245e3 <__adddf3>
c000b09a:	83 c4 10             	add    esp,0x10
c000b09d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0a0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0a7:	4f                   	dec    edi
c000b0a8:	83 ec 0c             	sub    esp,0xc
c000b0ab:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0b2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0b9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0bd:	e8 95 a5 01 00       	call   c0025657 <__extendsfdf2>
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0dd:	e8 7e 9b 01 00       	call   c0024c60 <__muldf3>
c000b0e2:	83 c4 10             	add    esp,0x10
c000b0e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0ed:	52                   	push   edx
c000b0ee:	50                   	push   eax
c000b0ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0f5:	e8 e9 94 01 00       	call   c00245e3 <__adddf3>
c000b0fa:	83 c4 10             	add    esp,0x10
c000b0fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b100:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b107:	4f                   	dec    edi
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b10e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b112:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b119:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b11d:	e8 35 a5 01 00       	call   c0025657 <__extendsfdf2>
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b131:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b135:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b139:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b13d:	e8 1e 9b 01 00       	call   c0024c60 <__muldf3>
c000b142:	83 c4 10             	add    esp,0x10
c000b145:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b149:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b14d:	52                   	push   edx
c000b14e:	50                   	push   eax
c000b14f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b152:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b155:	e8 89 94 01 00       	call   c00245e3 <__adddf3>
c000b15a:	83 c4 10             	add    esp,0x10
c000b15d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b160:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b167:	4f                   	dec    edi
c000b168:	83 ec 0c             	sub    esp,0xc
c000b16b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b16e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b172:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b179:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b17d:	e8 d5 a4 01 00       	call   c0025657 <__extendsfdf2>
c000b182:	83 c4 10             	add    esp,0x10
c000b185:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b189:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b18d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b195:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b199:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b19d:	e8 be 9a 01 00       	call   c0024c60 <__muldf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ad:	52                   	push   edx
c000b1ae:	50                   	push   eax
c000b1af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1b5:	e8 29 94 01 00       	call   c00245e3 <__adddf3>
c000b1ba:	83 c4 10             	add    esp,0x10
c000b1bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1c7:	4f                   	dec    edi
c000b1c8:	83 ec 0c             	sub    esp,0xc
c000b1cb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1d2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1d9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1dd:	e8 75 a4 01 00       	call   c0025657 <__extendsfdf2>
c000b1e2:	83 c4 10             	add    esp,0x10
c000b1e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1fd:	e8 5e 9a 01 00       	call   c0024c60 <__muldf3>
c000b202:	83 c4 10             	add    esp,0x10
c000b205:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b209:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b20d:	52                   	push   edx
c000b20e:	50                   	push   eax
c000b20f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b212:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b215:	e8 c9 93 01 00       	call   c00245e3 <__adddf3>
c000b21a:	83 c4 10             	add    esp,0x10
c000b21d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b220:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b227:	4f                   	dec    edi
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b22e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b232:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b239:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b23d:	e8 15 a4 01 00       	call   c0025657 <__extendsfdf2>
c000b242:	83 c4 10             	add    esp,0x10
c000b245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b249:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b255:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b259:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25d:	e8 fe 99 01 00       	call   c0024c60 <__muldf3>
c000b262:	83 c4 10             	add    esp,0x10
c000b265:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b269:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b26d:	52                   	push   edx
c000b26e:	50                   	push   eax
c000b26f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b272:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b275:	e8 69 93 01 00       	call   c00245e3 <__adddf3>
c000b27a:	83 c4 10             	add    esp,0x10
c000b27d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b280:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b287:	4f                   	dec    edi
c000b288:	83 ec 0c             	sub    esp,0xc
c000b28b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b292:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b299:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29d:	e8 b5 a3 01 00       	call   c0025657 <__extendsfdf2>
c000b2a2:	83 c4 10             	add    esp,0x10
c000b2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bd:	e8 9e 99 01 00       	call   c0024c60 <__muldf3>
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cd:	52                   	push   edx
c000b2ce:	50                   	push   eax
c000b2cf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d5:	e8 09 93 01 00       	call   c00245e3 <__adddf3>
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2e0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e7:	4f                   	dec    edi
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fd:	e8 55 a3 01 00       	call   c0025657 <__extendsfdf2>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b315:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b319:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31d:	e8 3e 99 01 00       	call   c0024c60 <__muldf3>
c000b322:	83 c4 10             	add    esp,0x10
c000b325:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b329:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32d:	52                   	push   edx
c000b32e:	50                   	push   eax
c000b32f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b332:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b335:	e8 a9 92 01 00       	call   c00245e3 <__adddf3>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b340:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b343:	85 ff                	test   edi,edi
c000b345:	0f 8f e1 fc ff ff    	jg     c000b02c <calc_output_multi+0x4fc>
c000b34b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b34f:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b353:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b357:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b35c:	0f 8f 3f fc ff ff    	jg     c000afa1 <calc_output_multi+0x471>
c000b362:	be 08 00 00 00       	mov    esi,0x8
c000b367:	89 d8                	mov    eax,ebx
c000b369:	99                   	cdq    
c000b36a:	f7 fe                	idiv   esi
c000b36c:	4a                   	dec    edx
c000b36d:	83 fa 06             	cmp    edx,0x6
c000b370:	77 07                	ja     c000b379 <calc_output_multi+0x849>
c000b372:	ff 24 95 bc 6d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9244]
c000b379:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b37d:	4b                   	dec    ebx
c000b37e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b382:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b385:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b389:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b38d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b390:	e8 4e 92 01 00       	call   c00245e3 <__adddf3>
c000b395:	83 c4 10             	add    esp,0x10
c000b398:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b39c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b0:	e8 ab 98 01 00       	call   c0024c60 <__muldf3>
c000b3b5:	5d                   	pop    ebp
c000b3b6:	59                   	pop    ecx
c000b3b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c7:	e8 67 a1 01 00       	call   c0025533 <__truncdfsf2>
c000b3cc:	83 c4 10             	add    esp,0x10
c000b3cf:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3d3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3da:	4b                   	dec    ebx
c000b3db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3e6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ea:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3ed:	e8 f1 91 01 00       	call   c00245e3 <__adddf3>
c000b3f2:	83 c4 10             	add    esp,0x10
c000b3f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b401:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b409:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40d:	e8 4e 98 01 00       	call   c0024c60 <__muldf3>
c000b412:	59                   	pop    ecx
c000b413:	5f                   	pop    edi
c000b414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b418:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b420:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b424:	e8 0a a1 01 00       	call   c0025533 <__truncdfsf2>
c000b429:	83 c4 10             	add    esp,0x10
c000b42c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b430:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b433:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b437:	4b                   	dec    ebx
c000b438:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b43c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b43f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b443:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b447:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44a:	e8 94 91 01 00       	call   c00245e3 <__adddf3>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b456:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b462:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b466:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46a:	e8 f1 97 01 00       	call   c0024c60 <__muldf3>
c000b46f:	5f                   	pop    edi
c000b470:	5d                   	pop    ebp
c000b471:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b475:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b481:	e8 ad a0 01 00       	call   c0025533 <__truncdfsf2>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b48d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b494:	4b                   	dec    ebx
c000b495:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b499:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b49c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4a0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4a7:	e8 37 91 01 00       	call   c00245e3 <__adddf3>
c000b4ac:	83 c4 10             	add    esp,0x10
c000b4af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c7:	e8 94 97 01 00       	call   c0024c60 <__muldf3>
c000b4cc:	5d                   	pop    ebp
c000b4cd:	59                   	pop    ecx
c000b4ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4de:	e8 50 a0 01 00       	call   c0025533 <__truncdfsf2>
c000b4e3:	83 c4 10             	add    esp,0x10
c000b4e6:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4ea:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4f1:	4b                   	dec    ebx
c000b4f2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4f6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4fd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b501:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b504:	e8 da 90 01 00       	call   c00245e3 <__adddf3>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b510:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b524:	e8 37 97 01 00       	call   c0024c60 <__muldf3>
c000b529:	59                   	pop    ecx
c000b52a:	5f                   	pop    edi
c000b52b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b52f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b533:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b53b:	e8 f3 9f 01 00       	call   c0025533 <__truncdfsf2>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b547:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b54a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54e:	4b                   	dec    ebx
c000b54f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b553:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b55a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b55e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b561:	e8 7d 90 01 00       	call   c00245e3 <__adddf3>
c000b566:	83 c4 10             	add    esp,0x10
c000b569:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b56d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b579:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b581:	e8 da 96 01 00       	call   c0024c60 <__muldf3>
c000b586:	5f                   	pop    edi
c000b587:	5d                   	pop    ebp
c000b588:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b58c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b590:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b594:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b598:	e8 96 9f 01 00       	call   c0025533 <__truncdfsf2>
c000b59d:	83 c4 10             	add    esp,0x10
c000b5a0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5a4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ab:	4b                   	dec    ebx
c000b5ac:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5b7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5bb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5be:	e8 20 90 01 00       	call   c00245e3 <__adddf3>
c000b5c3:	83 c4 10             	add    esp,0x10
c000b5c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5de:	e8 7d 96 01 00       	call   c0024c60 <__muldf3>
c000b5e3:	5d                   	pop    ebp
c000b5e4:	59                   	pop    ecx
c000b5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f5:	e8 39 9f 01 00       	call   c0025533 <__truncdfsf2>
c000b5fa:	83 c4 10             	add    esp,0x10
c000b5fd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b601:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b608:	4b                   	dec    ebx
c000b609:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b614:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b618:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61b:	e8 c3 8f 01 00       	call   c00245e3 <__adddf3>
c000b620:	83 c4 10             	add    esp,0x10
c000b623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b627:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b633:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b637:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63b:	e8 20 96 01 00       	call   c0024c60 <__muldf3>
c000b640:	59                   	pop    ecx
c000b641:	5f                   	pop    edi
c000b642:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b646:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b64a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b652:	e8 dc 9e 01 00       	call   c0025533 <__truncdfsf2>
c000b657:	83 c4 10             	add    esp,0x10
c000b65a:	85 db                	test   ebx,ebx
c000b65c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b660:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b663:	0f 8f fe fc ff ff    	jg     c000b367 <calc_output_multi+0x837>
c000b669:	83 c4 4c             	add    esp,0x4c
c000b66c:	5b                   	pop    ebx
c000b66d:	5e                   	pop    esi
c000b66e:	5f                   	pop    edi
c000b66f:	5d                   	pop    ebp
c000b670:	c3                   	ret    

c000b671 <double_to_fp>:
c000b671:	83 ec 0c             	sub    esp,0xc
c000b674:	68 00 00 b0 40       	push   0x40b00000
c000b679:	6a 00                	push   0x0
c000b67b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b683:	e8 d8 95 01 00       	call   c0024c60 <__muldf3>
c000b688:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b68c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b690:	83 c4 1c             	add    esp,0x1c
c000b693:	e9 48 a0 01 00       	jmp    c00256e0 <lrint>

c000b698 <prepare_data>:
c000b698:	55                   	push   ebp
c000b699:	57                   	push   edi
c000b69a:	56                   	push   esi
c000b69b:	53                   	push   ebx
c000b69c:	83 ec 1c             	sub    esp,0x1c
c000b69f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6a7:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6ab:	0f 89 57 01 00 00    	jns    c000b808 <prepare_data+0x170>
c000b6b1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6b4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6b7:	85 d2                	test   edx,edx
c000b6b9:	75 0d                	jne    c000b6c8 <prepare_data+0x30>
c000b6bb:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6be:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6c1:	29 d0                	sub    eax,edx
c000b6c3:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6c6:	eb 44                	jmp    c000b70c <prepare_data+0x74>
c000b6c8:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6cb:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6ce:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6d1:	39 c1                	cmp    ecx,eax
c000b6d3:	7d 04                	jge    c000b6d9 <prepare_data+0x41>
c000b6d5:	29 d0                	sub    eax,edx
c000b6d7:	eb 2d                	jmp    c000b706 <prepare_data+0x6e>
c000b6d9:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6df:	29 d7                	sub    edi,edx
c000b6e1:	01 f7                	add    edi,esi
c000b6e3:	51                   	push   ecx
c000b6e4:	29 f2                	sub    edx,esi
c000b6e6:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6ed:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6f0:	51                   	push   ecx
c000b6f1:	52                   	push   edx
c000b6f2:	50                   	push   eax
c000b6f3:	e8 17 4f ff ff       	call   c000060f <memmove>
c000b6f8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fb:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6fe:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b701:	29 f0                	sub    eax,esi
c000b703:	83 c4 10             	add    esp,0x10
c000b706:	29 f0                	sub    eax,esi
c000b708:	79 02                	jns    c000b70c <prepare_data+0x74>
c000b70a:	31 c0                	xor    eax,eax
c000b70c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b70f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b712:	29 ef                	sub    edi,ebp
c000b714:	39 c7                	cmp    edi,eax
c000b716:	7e 02                	jle    c000b71a <prepare_data+0x82>
c000b718:	89 c7                	mov    edi,eax
c000b71a:	89 f8                	mov    eax,edi
c000b71c:	99                   	cdq    
c000b71d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b720:	b8 15 00 00 00       	mov    eax,0x15
c000b725:	29 d7                	sub    edi,edx
c000b727:	0f 88 dd 00 00 00    	js     c000b80a <prepare_data+0x172>
c000b72d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b730:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b733:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b736:	0f 8f ce 00 00 00    	jg     c000b80a <prepare_data+0x172>
c000b73c:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b742:	50                   	push   eax
c000b743:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b74a:	50                   	push   eax
c000b74b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b74f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b751:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b754:	50                   	push   eax
c000b755:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b758:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b75c:	50                   	push   eax
c000b75d:	e8 e5 4e ff ff       	call   c0000647 <memcpy>
c000b762:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b765:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b768:	01 fd                	add    ebp,edi
c000b76a:	01 f9                	add    ecx,edi
c000b76c:	83 c4 10             	add    esp,0x10
c000b76f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b772:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b775:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b77c:	0f 85 86 00 00 00    	jne    c000b808 <prepare_data+0x170>
c000b782:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b785:	89 e8                	mov    eax,ebp
c000b787:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b78a:	29 c8                	sub    eax,ecx
c000b78c:	39 f8                	cmp    eax,edi
c000b78e:	7d 78                	jge    c000b808 <prepare_data+0x170>
c000b790:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b794:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b798:	74 6e                	je     c000b808 <prepare_data+0x170>
c000b79a:	8d 7e 04             	lea    edi,[esi+0x4]
c000b79d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7a1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7a4:	29 ef                	sub    edi,ebp
c000b7a6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7aa:	7c 29                	jl     c000b7d5 <prepare_data+0x13d>
c000b7ac:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7af:	29 f1                	sub    ecx,esi
c000b7b1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7b8:	55                   	push   ebp
c000b7b9:	50                   	push   eax
c000b7ba:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7bd:	50                   	push   eax
c000b7be:	52                   	push   edx
c000b7bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7c3:	e8 47 4e ff ff       	call   c000060f <memmove>
c000b7c8:	83 c4 10             	add    esp,0x10
c000b7cb:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7ce:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7d5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7d8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7db:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7de:	83 c6 05             	add    esi,0x5
c000b7e1:	78 07                	js     c000b7ea <prepare_data+0x152>
c000b7e3:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7e6:	39 cf                	cmp    edi,ecx
c000b7e8:	7e 04                	jle    c000b7ee <prepare_data+0x156>
c000b7ea:	89 ce                	mov    esi,ecx
c000b7ec:	29 c6                	sub    esi,eax
c000b7ee:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7f1:	51                   	push   ecx
c000b7f2:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b7f9:	51                   	push   ecx
c000b7fa:	6a 00                	push   0x0
c000b7fc:	50                   	push   eax
c000b7fd:	e8 7b 4e ff ff       	call   c000067d <memset>
c000b802:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b805:	83 c4 10             	add    esp,0x10
c000b808:	31 c0                	xor    eax,eax
c000b80a:	83 c4 1c             	add    esp,0x1c
c000b80d:	5b                   	pop    ebx
c000b80e:	5e                   	pop    esi
c000b80f:	5f                   	pop    edi
c000b810:	5d                   	pop    ebp
c000b811:	c3                   	ret    

c000b812 <sinc_multichan_vari_process>:
c000b812:	55                   	push   ebp
c000b813:	ba 05 00 00 00       	mov    edx,0x5
c000b818:	57                   	push   edi
c000b819:	56                   	push   esi
c000b81a:	53                   	push   ebx
c000b81b:	83 ec 4c             	sub    esp,0x4c
c000b81e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b822:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b826:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b829:	85 db                	test   ebx,ebx
c000b82b:	0f 84 9b 06 00 00    	je     c000becc <sinc_multichan_vari_process+0x6ba>
c000b831:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b834:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b837:	0f af c5             	imul   eax,ebp
c000b83a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b83d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b840:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b847:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b84e:	0f af c5             	imul   eax,ebp
c000b851:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b854:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b857:	8b 06                	mov    eax,DWORD PTR [esi]
c000b859:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b85d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b861:	68 00 00 70 3f       	push   0x3f700000
c000b866:	6a 00                	push   0x0
c000b868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b870:	e8 ba 9c 01 00       	call   c002552f <__ltdf2>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	ba 16 00 00 00       	mov    edx,0x16
c000b87d:	85 c0                	test   eax,eax
c000b87f:	0f 88 47 06 00 00    	js     c000becc <sinc_multichan_vari_process+0x6ba>
c000b885:	68 00 00 70 40       	push   0x40700000
c000b88a:	6a 00                	push   0x0
c000b88c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b894:	e8 78 9c 01 00       	call   c0025511 <__gtdf2>
c000b899:	83 c4 10             	add    esp,0x10
c000b89c:	ba 16 00 00 00       	mov    edx,0x16
c000b8a1:	85 c0                	test   eax,eax
c000b8a3:	0f 8f 23 06 00 00    	jg     c000becc <sinc_multichan_vari_process+0x6ba>
c000b8a9:	83 ec 0c             	sub    esp,0xc
c000b8ac:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8af:	e8 0f 9a 01 00       	call   c00252c3 <__floatsidf>
c000b8b4:	83 c4 10             	add    esp,0x10
c000b8b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8bf:	68 00 00 00 40       	push   0x40000000
c000b8c4:	6a 00                	push   0x0
c000b8c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ce:	e8 10 8d 01 00       	call   c00245e3 <__adddf3>
c000b8d3:	59                   	pop    ecx
c000b8d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8dc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8df:	e8 df 99 01 00       	call   c00252c3 <__floatsidf>
c000b8e4:	83 c4 10             	add    esp,0x10
c000b8e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8ef:	52                   	push   edx
c000b8f0:	50                   	push   eax
c000b8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f9:	e8 46 96 01 00       	call   c0024f44 <__divdf3>
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b905:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b909:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b90c:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b90f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b923:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b927:	e8 e5 9b 01 00       	call   c0025511 <__gtdf2>
c000b92c:	83 c4 10             	add    esp,0x10
c000b92f:	85 c0                	test   eax,eax
c000b931:	7e 2d                	jle    c000b960 <sinc_multichan_vari_process+0x14e>
c000b933:	68 00 00 f0 3f       	push   0x3ff00000
c000b938:	6a 00                	push   0x0
c000b93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b942:	e8 e8 9b 01 00       	call   c002552f <__ltdf2>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	85 c0                	test   eax,eax
c000b94c:	79 4d                	jns    c000b99b <sinc_multichan_vari_process+0x189>
c000b94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b952:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95e:	eb 1b                	jmp    c000b97b <sinc_multichan_vari_process+0x169>
c000b960:	68 00 00 f0 3f       	push   0x3ff00000
c000b965:	6a 00                	push   0x0
c000b967:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96f:	e8 bb 9b 01 00       	call   c002552f <__ltdf2>
c000b974:	83 c4 10             	add    esp,0x10
c000b977:	85 c0                	test   eax,eax
c000b979:	79 20                	jns    c000b99b <sinc_multichan_vari_process+0x189>
c000b97b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b97f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b983:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b987:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b98b:	e8 b4 95 01 00       	call   c0024f44 <__divdf3>
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b997:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b99b:	50                   	push   eax
c000b99c:	50                   	push   eax
c000b99d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a5:	e8 36 9d 01 00       	call   c00256e0 <lrint>
c000b9aa:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9ad:	40                   	inc    eax
c000b9ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b2:	0f af c5             	imul   eax,ebp
c000b9b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9b9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9c0:	58                   	pop    eax
c000b9c1:	5a                   	pop    edx
c000b9c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ca:	e8 11 9d 01 00       	call   c00256e0 <lrint>
c000b9cf:	83 ec 0c             	sub    esp,0xc
c000b9d2:	50                   	push   eax
c000b9d3:	e8 eb 98 01 00       	call   c00252c3 <__floatsidf>
c000b9d8:	83 c4 10             	add    esp,0x10
c000b9db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e3:	52                   	push   edx
c000b9e4:	50                   	push   eax
c000b9e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9ed:	e8 42 92 01 00       	call   c0024c34 <__subdf3>
c000b9f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9fa:	83 c4 20             	add    esp,0x20
c000b9fd:	6a 00                	push   0x0
c000b9ff:	6a 00                	push   0x0
c000ba01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba09:	e8 21 9b 01 00       	call   c002552f <__ltdf2>
c000ba0e:	83 c4 10             	add    esp,0x10
c000ba11:	85 c0                	test   eax,eax
c000ba13:	79 1f                	jns    c000ba34 <sinc_multichan_vari_process+0x222>
c000ba15:	68 00 00 f0 3f       	push   0x3ff00000
c000ba1a:	6a 00                	push   0x0
c000ba1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba24:	e8 ba 8b 01 00       	call   c00245e3 <__adddf3>
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba34:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba37:	83 ec 10             	sub    esp,0x10
c000ba3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba3e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba51:	e8 de 91 01 00       	call   c0024c34 <__subdf3>
c000ba56:	83 c4 18             	add    esp,0x18
c000ba59:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba61:	52                   	push   edx
c000ba62:	50                   	push   eax
c000ba63:	e8 78 9c 01 00       	call   c00256e0 <lrint>
c000ba68:	0f af e8             	imul   ebp,eax
c000ba6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba6f:	01 e8                	add    eax,ebp
c000ba71:	99                   	cdq    
c000ba72:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba75:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba80:	68 00 00 f0 3f       	push   0x3ff00000
c000ba85:	6a 00                	push   0x0
c000ba87:	e8 b8 94 01 00       	call   c0024f44 <__divdf3>
c000ba8c:	83 c4 10             	add    esp,0x10
c000ba8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba93:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba97:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ba9c:	68 23 42 92 0c       	push   0xc924223
c000baa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa9:	e8 35 8b 01 00       	call   c00245e3 <__adddf3>
c000baae:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bab2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bab6:	83 c4 20             	add    esp,0x20
c000bab9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bac1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bac9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bacc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bacf:	7d 50                	jge    c000bb21 <sinc_multichan_vari_process+0x30f>
c000bad1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bad4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bad7:	01 c8                	add    eax,ecx
c000bad9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000badc:	99                   	cdq    
c000badd:	f7 f9                	idiv   ecx
c000badf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bae3:	7d 0c                	jge    c000baf1 <sinc_multichan_vari_process+0x2df>
c000bae5:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bae8:	85 ed                	test   ebp,ebp
c000baea:	79 6b                	jns    c000bb57 <sinc_multichan_vari_process+0x345>
c000baec:	e9 e6 00 00 00       	jmp    c000bbd7 <sinc_multichan_vari_process+0x3c5>
c000baf1:	50                   	push   eax
c000baf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000baf6:	57                   	push   edi
c000baf7:	53                   	push   ebx
c000baf8:	e8 9b fb ff ff       	call   c000b698 <prepare_data>
c000bafd:	83 c4 10             	add    esp,0x10
c000bb00:	89 c2                	mov    edx,eax
c000bb02:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb05:	85 c0                	test   eax,eax
c000bb07:	0f 85 bf 03 00 00    	jne    c000becc <sinc_multichan_vari_process+0x6ba>
c000bb0d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb10:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb13:	01 c8                	add    eax,ecx
c000bb15:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb18:	99                   	cdq    
c000bb19:	f7 f9                	idiv   ecx
c000bb1b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb1f:	7c c4                	jl     c000bae5 <sinc_multichan_vari_process+0x2d3>
c000bb21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb29:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb2c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb37:	89 06                	mov    DWORD PTR [esi],eax
c000bb39:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb3c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb3f:	99                   	cdq    
c000bb40:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb43:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb46:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb49:	99                   	cdq    
c000bb4a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb4d:	31 d2                	xor    edx,edx
c000bb4f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb52:	e9 75 03 00 00       	jmp    c000becc <sinc_multichan_vari_process+0x6ba>
c000bb57:	83 ec 0c             	sub    esp,0xc
c000bb5a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb5d:	e8 61 97 01 00       	call   c00252c3 <__floatsidf>
c000bb62:	83 c4 10             	add    esp,0x10
c000bb65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb69:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb7d:	e8 61 8a 01 00       	call   c00245e3 <__adddf3>
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb89:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb9d:	e8 41 8a 01 00       	call   c00245e3 <__adddf3>
c000bba2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bba5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bba9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbad:	e8 11 97 01 00       	call   c00252c3 <__floatsidf>
c000bbb2:	83 c4 10             	add    esp,0x10
c000bbb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbbd:	52                   	push   edx
c000bbbe:	50                   	push   eax
c000bbbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc7:	e8 61 99 01 00       	call   c002552d <__gedf2>
c000bbcc:	83 c4 10             	add    esp,0x10
c000bbcf:	85 c0                	test   eax,eax
c000bbd1:	0f 89 4a ff ff ff    	jns    c000bb21 <sinc_multichan_vari_process+0x30f>
c000bbd7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbdb:	0f 8e ed 00 00 00    	jle    c000bcce <sinc_multichan_vari_process+0x4bc>
c000bbe1:	83 ec 10             	sub    esp,0x10
c000bbe4:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbe7:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbea:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbed:	ff 36                	push   DWORD PTR [esi]
c000bbef:	e8 40 90 01 00       	call   c0024c34 <__subdf3>
c000bbf4:	83 c4 18             	add    esp,0x18
c000bbf7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbfb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbff:	52                   	push   edx
c000bc00:	50                   	push   eax
c000bc01:	e8 ba 9a 01 00       	call   c00256c0 <fabs>
c000bc06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc0a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc0e:	83 c4 10             	add    esp,0x10
c000bc11:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc16:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc23:	e8 e9 98 01 00       	call   c0025511 <__gtdf2>
c000bc28:	83 c4 10             	add    esp,0x10
c000bc2b:	85 c0                	test   eax,eax
c000bc2d:	0f 8e 9b 00 00 00    	jle    c000bcce <sinc_multichan_vari_process+0x4bc>
c000bc33:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc35:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc3c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc40:	52                   	push   edx
c000bc41:	50                   	push   eax
c000bc42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc48:	e8 e7 8f 01 00       	call   c0024c34 <__subdf3>
c000bc4d:	59                   	pop    ecx
c000bc4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc52:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc59:	e8 65 96 01 00       	call   c00252c3 <__floatsidf>
c000bc5e:	83 c4 10             	add    esp,0x10
c000bc61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc69:	52                   	push   edx
c000bc6a:	50                   	push   eax
c000bc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc73:	e8 e8 8f 01 00       	call   c0024c60 <__muldf3>
c000bc78:	5d                   	pop    ebp
c000bc79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc7d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc81:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc84:	e8 3a 96 01 00       	call   c00252c3 <__floatsidf>
c000bc89:	83 c4 10             	add    esp,0x10
c000bc8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc94:	52                   	push   edx
c000bc95:	50                   	push   eax
c000bc96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9e:	e8 a1 92 01 00       	call   c0024f44 <__divdf3>
c000bca3:	83 c4 10             	add    esp,0x10
c000bca6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcaa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcbe:	e8 20 89 01 00       	call   c00245e3 <__adddf3>
c000bcc3:	83 c4 10             	add    esp,0x10
c000bcc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcce:	83 ec 0c             	sub    esp,0xc
c000bcd1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bcd4:	e8 ea 95 01 00       	call   c00252c3 <__floatsidf>
c000bcd9:	83 c4 10             	add    esp,0x10
c000bcdc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bce0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf4:	e8 36 98 01 00       	call   c002552f <__ltdf2>
c000bcf9:	83 c4 10             	add    esp,0x10
c000bcfc:	85 c0                	test   eax,eax
c000bcfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd06:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd0a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd0e:	78 10                	js     c000bd20 <sinc_multichan_vari_process+0x50e>
c000bd10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd18:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd1c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd30:	e8 2b 8f 01 00       	call   c0024c60 <__muldf3>
c000bd35:	59                   	pop    ecx
c000bd36:	5d                   	pop    ebp
c000bd37:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd47:	e8 25 f9 ff ff       	call   c000b671 <double_to_fp>
c000bd4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd50:	89 c5                	mov    ebp,eax
c000bd52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5e:	e8 fd 8e 01 00       	call   c0024c60 <__muldf3>
c000bd63:	83 c4 18             	add    esp,0x18
c000bd66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd6e:	52                   	push   edx
c000bd6f:	50                   	push   eax
c000bd70:	e8 fc f8 ff ff       	call   c000b671 <double_to_fp>
c000bd75:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd78:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd7c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd7f:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd82:	50                   	push   eax
c000bd83:	50                   	push   eax
c000bd84:	50                   	push   eax
c000bd85:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd88:	e8 36 95 01 00       	call   c00252c3 <__floatsidf>
c000bd8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd91:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bd95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd9d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda5:	e8 9a 91 01 00       	call   c0024f44 <__divdf3>
c000bdaa:	83 c4 1c             	add    esp,0x1c
c000bdad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdb1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdb5:	52                   	push   edx
c000bdb6:	89 ea                	mov    edx,ebp
c000bdb8:	50                   	push   eax
c000bdb9:	89 d8                	mov    eax,ebx
c000bdbb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdbe:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdc2:	e8 69 ed ff ff       	call   c000ab30 <calc_output_multi>
c000bdc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdca:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bdcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdd9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bddd:	e8 62 91 01 00       	call   c0024f44 <__divdf3>
c000bde2:	83 c4 10             	add    esp,0x10
c000bde5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bde9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdf9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdfd:	e8 e1 87 01 00       	call   c00245e3 <__adddf3>
c000be02:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be06:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be0a:	83 c4 28             	add    esp,0x28
c000be0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be15:	e8 c6 98 01 00       	call   c00256e0 <lrint>
c000be1a:	83 ec 0c             	sub    esp,0xc
c000be1d:	50                   	push   eax
c000be1e:	e8 a0 94 01 00       	call   c00252c3 <__floatsidf>
c000be23:	83 c4 10             	add    esp,0x10
c000be26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be2e:	52                   	push   edx
c000be2f:	50                   	push   eax
c000be30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be38:	e8 f7 8d 01 00       	call   c0024c34 <__subdf3>
c000be3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be45:	83 c4 20             	add    esp,0x20
c000be48:	6a 00                	push   0x0
c000be4a:	6a 00                	push   0x0
c000be4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be54:	e8 d6 96 01 00       	call   c002552f <__ltdf2>
c000be59:	83 c4 10             	add    esp,0x10
c000be5c:	85 c0                	test   eax,eax
c000be5e:	79 20                	jns    c000be80 <sinc_multichan_vari_process+0x66e>
c000be60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be70:	e8 6e 87 01 00       	call   c00245e3 <__adddf3>
c000be75:	83 c4 10             	add    esp,0x10
c000be78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be80:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be83:	83 ec 10             	sub    esp,0x10
c000be86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be8a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be9d:	e8 92 8d 01 00       	call   c0024c34 <__subdf3>
c000bea2:	83 c4 18             	add    esp,0x18
c000bea5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bead:	52                   	push   edx
c000beae:	50                   	push   eax
c000beaf:	e8 2c 98 01 00       	call   c00256e0 <lrint>
c000beb4:	0f af e8             	imul   ebp,eax
c000beb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bebb:	83 c4 10             	add    esp,0x10
c000bebe:	01 e8                	add    eax,ebp
c000bec0:	99                   	cdq    
c000bec1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bec4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bec7:	e9 fd fb ff ff       	jmp    c000bac9 <sinc_multichan_vari_process+0x2b7>
c000becc:	83 c4 4c             	add    esp,0x4c
c000becf:	89 d0                	mov    eax,edx
c000bed1:	5b                   	pop    ebx
c000bed2:	5e                   	pop    esi
c000bed3:	5f                   	pop    edi
c000bed4:	5d                   	pop    ebp
c000bed5:	c3                   	ret    

c000bed6 <sinc_hex_vari_process>:
c000bed6:	55                   	push   ebp
c000bed7:	ba 05 00 00 00       	mov    edx,0x5
c000bedc:	57                   	push   edi
c000bedd:	56                   	push   esi
c000bede:	53                   	push   ebx
c000bedf:	83 ec 4c             	sub    esp,0x4c
c000bee2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bee6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000beea:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000beed:	85 db                	test   ebx,ebx
c000beef:	0f 84 9c 06 00 00    	je     c000c591 <sinc_hex_vari_process+0x6bb>
c000bef5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bef8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000befb:	0f af c7             	imul   eax,edi
c000befe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf01:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf04:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf0b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf12:	0f af c7             	imul   eax,edi
c000bf15:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf18:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf26:	68 00 00 70 3f       	push   0x3f700000
c000bf2b:	6a 00                	push   0x0
c000bf2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf35:	e8 f5 95 01 00       	call   c002552f <__ltdf2>
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	ba 16 00 00 00       	mov    edx,0x16
c000bf42:	85 c0                	test   eax,eax
c000bf44:	0f 88 47 06 00 00    	js     c000c591 <sinc_hex_vari_process+0x6bb>
c000bf4a:	68 00 00 70 40       	push   0x40700000
c000bf4f:	6a 00                	push   0x0
c000bf51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf59:	e8 b3 95 01 00       	call   c0025511 <__gtdf2>
c000bf5e:	83 c4 10             	add    esp,0x10
c000bf61:	ba 16 00 00 00       	mov    edx,0x16
c000bf66:	85 c0                	test   eax,eax
c000bf68:	0f 8f 23 06 00 00    	jg     c000c591 <sinc_hex_vari_process+0x6bb>
c000bf6e:	83 ec 0c             	sub    esp,0xc
c000bf71:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf74:	e8 4a 93 01 00       	call   c00252c3 <__floatsidf>
c000bf79:	83 c4 10             	add    esp,0x10
c000bf7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf84:	68 00 00 00 40       	push   0x40000000
c000bf89:	6a 00                	push   0x0
c000bf8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf93:	e8 4b 86 01 00       	call   c00245e3 <__adddf3>
c000bf98:	59                   	pop    ecx
c000bf99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bf9d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfa1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfa4:	e8 1a 93 01 00       	call   c00252c3 <__floatsidf>
c000bfa9:	83 c4 10             	add    esp,0x10
c000bfac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfb4:	52                   	push   edx
c000bfb5:	50                   	push   eax
c000bfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfbe:	e8 81 8f 01 00       	call   c0024f44 <__divdf3>
c000bfc3:	83 c4 10             	add    esp,0x10
c000bfc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfce:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfd1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfec:	e8 20 95 01 00       	call   c0025511 <__gtdf2>
c000bff1:	83 c4 10             	add    esp,0x10
c000bff4:	85 c0                	test   eax,eax
c000bff6:	7e 2d                	jle    c000c025 <sinc_hex_vari_process+0x14f>
c000bff8:	68 00 00 f0 3f       	push   0x3ff00000
c000bffd:	6a 00                	push   0x0
c000bfff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c007:	e8 23 95 01 00       	call   c002552f <__ltdf2>
c000c00c:	83 c4 10             	add    esp,0x10
c000c00f:	85 c0                	test   eax,eax
c000c011:	79 4d                	jns    c000c060 <sinc_hex_vari_process+0x18a>
c000c013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c017:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c023:	eb 1b                	jmp    c000c040 <sinc_hex_vari_process+0x16a>
c000c025:	68 00 00 f0 3f       	push   0x3ff00000
c000c02a:	6a 00                	push   0x0
c000c02c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c030:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c034:	e8 f6 94 01 00       	call   c002552f <__ltdf2>
c000c039:	83 c4 10             	add    esp,0x10
c000c03c:	85 c0                	test   eax,eax
c000c03e:	79 20                	jns    c000c060 <sinc_hex_vari_process+0x18a>
c000c040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c044:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c048:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c050:	e8 ef 8e 01 00       	call   c0024f44 <__divdf3>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c05c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c060:	50                   	push   eax
c000c061:	50                   	push   eax
c000c062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c066:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c06a:	e8 71 96 01 00       	call   c00256e0 <lrint>
c000c06f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c072:	40                   	inc    eax
c000c073:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c077:	0f af c7             	imul   eax,edi
c000c07a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c081:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c085:	58                   	pop    eax
c000c086:	5a                   	pop    edx
c000c087:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08f:	e8 4c 96 01 00       	call   c00256e0 <lrint>
c000c094:	83 ec 0c             	sub    esp,0xc
c000c097:	50                   	push   eax
c000c098:	e8 26 92 01 00       	call   c00252c3 <__floatsidf>
c000c09d:	83 c4 10             	add    esp,0x10
c000c0a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a8:	52                   	push   edx
c000c0a9:	50                   	push   eax
c000c0aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b2:	e8 7d 8b 01 00       	call   c0024c34 <__subdf3>
c000c0b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0bb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0bf:	83 c4 20             	add    esp,0x20
c000c0c2:	6a 00                	push   0x0
c000c0c4:	6a 00                	push   0x0
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 5c 94 01 00       	call   c002552f <__ltdf2>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	85 c0                	test   eax,eax
c000c0d8:	79 1f                	jns    c000c0f9 <sinc_hex_vari_process+0x223>
c000c0da:	68 00 00 f0 3f       	push   0x3ff00000
c000c0df:	6a 00                	push   0x0
c000c0e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e9:	e8 f5 84 01 00       	call   c00245e3 <__adddf3>
c000c0ee:	83 c4 10             	add    esp,0x10
c000c0f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0fc:	83 ec 10             	sub    esp,0x10
c000c0ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c103:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c112:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c116:	e8 19 8b 01 00       	call   c0024c34 <__subdf3>
c000c11b:	83 c4 18             	add    esp,0x18
c000c11e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c122:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c126:	52                   	push   edx
c000c127:	50                   	push   eax
c000c128:	e8 b3 95 01 00       	call   c00256e0 <lrint>
c000c12d:	0f af f8             	imul   edi,eax
c000c130:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c134:	01 f8                	add    eax,edi
c000c136:	99                   	cdq    
c000c137:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c13a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c13d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c141:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c145:	68 00 00 f0 3f       	push   0x3ff00000
c000c14a:	6a 00                	push   0x0
c000c14c:	e8 f3 8d 01 00       	call   c0024f44 <__divdf3>
c000c151:	83 c4 10             	add    esp,0x10
c000c154:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c158:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c15c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c161:	68 23 42 92 0c       	push   0xc924223
c000c166:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16e:	e8 70 84 01 00       	call   c00245e3 <__adddf3>
c000c173:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c177:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c17b:	83 c4 20             	add    esp,0x20
c000c17e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c186:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c18e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c191:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c194:	7d 50                	jge    c000c1e6 <sinc_hex_vari_process+0x310>
c000c196:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c199:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c19c:	01 c8                	add    eax,ecx
c000c19e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1a1:	99                   	cdq    
c000c1a2:	f7 f9                	idiv   ecx
c000c1a4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1a8:	7d 0c                	jge    c000c1b6 <sinc_hex_vari_process+0x2e0>
c000c1aa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1ad:	85 ff                	test   edi,edi
c000c1af:	79 6c                	jns    c000c21d <sinc_hex_vari_process+0x347>
c000c1b1:	e9 e7 00 00 00       	jmp    c000c29d <sinc_hex_vari_process+0x3c7>
c000c1b6:	50                   	push   eax
c000c1b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1bb:	56                   	push   esi
c000c1bc:	53                   	push   ebx
c000c1bd:	e8 d6 f4 ff ff       	call   c000b698 <prepare_data>
c000c1c2:	83 c4 10             	add    esp,0x10
c000c1c5:	89 c2                	mov    edx,eax
c000c1c7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1ca:	85 c0                	test   eax,eax
c000c1cc:	0f 85 bf 03 00 00    	jne    c000c591 <sinc_hex_vari_process+0x6bb>
c000c1d2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1d5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1d8:	01 c8                	add    eax,ecx
c000c1da:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1dd:	99                   	cdq    
c000c1de:	f7 f9                	idiv   ecx
c000c1e0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1e4:	7c c4                	jl     c000c1aa <sinc_hex_vari_process+0x2d4>
c000c1e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1ee:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1f1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c1fc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1ff:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c202:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c205:	99                   	cdq    
c000c206:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c209:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c20c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c20f:	99                   	cdq    
c000c210:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c213:	31 d2                	xor    edx,edx
c000c215:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c218:	e9 74 03 00 00       	jmp    c000c591 <sinc_hex_vari_process+0x6bb>
c000c21d:	83 ec 0c             	sub    esp,0xc
c000c220:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c223:	e8 9b 90 01 00       	call   c00252c3 <__floatsidf>
c000c228:	83 c4 10             	add    esp,0x10
c000c22b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c22f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c233:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c237:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c23b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c23f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c243:	e8 9b 83 01 00       	call   c00245e3 <__adddf3>
c000c248:	83 c4 10             	add    esp,0x10
c000c24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c24f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c253:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c257:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c25b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c25f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c263:	e8 7b 83 01 00       	call   c00245e3 <__adddf3>
c000c268:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c26b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c26f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c273:	e8 4b 90 01 00       	call   c00252c3 <__floatsidf>
c000c278:	83 c4 10             	add    esp,0x10
c000c27b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c27f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c283:	52                   	push   edx
c000c284:	50                   	push   eax
c000c285:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c289:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28d:	e8 9b 92 01 00       	call   c002552d <__gedf2>
c000c292:	83 c4 10             	add    esp,0x10
c000c295:	85 c0                	test   eax,eax
c000c297:	0f 89 49 ff ff ff    	jns    c000c1e6 <sinc_hex_vari_process+0x310>
c000c29d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2a1:	0f 8e ef 00 00 00    	jle    c000c396 <sinc_hex_vari_process+0x4c0>
c000c2a7:	83 ec 10             	sub    esp,0x10
c000c2aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ad:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2b0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2b3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2b6:	e8 79 89 01 00       	call   c0024c34 <__subdf3>
c000c2bb:	83 c4 18             	add    esp,0x18
c000c2be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c6:	52                   	push   edx
c000c2c7:	50                   	push   eax
c000c2c8:	e8 f3 93 01 00       	call   c00256c0 <fabs>
c000c2cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2d5:	83 c4 10             	add    esp,0x10
c000c2d8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2dd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2ea:	e8 22 92 01 00       	call   c0025511 <__gtdf2>
c000c2ef:	83 c4 10             	add    esp,0x10
c000c2f2:	85 c0                	test   eax,eax
c000c2f4:	0f 8e 9c 00 00 00    	jle    c000c396 <sinc_hex_vari_process+0x4c0>
c000c2fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2fd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c300:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c304:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c308:	52                   	push   edx
c000c309:	50                   	push   eax
c000c30a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c30d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c310:	e8 1f 89 01 00       	call   c0024c34 <__subdf3>
c000c315:	59                   	pop    ecx
c000c316:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c31a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c31e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c321:	e8 9d 8f 01 00       	call   c00252c3 <__floatsidf>
c000c326:	83 c4 10             	add    esp,0x10
c000c329:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c32d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c331:	52                   	push   edx
c000c332:	50                   	push   eax
c000c333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c337:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c33b:	e8 20 89 01 00       	call   c0024c60 <__muldf3>
c000c340:	5f                   	pop    edi
c000c341:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c345:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c349:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c34c:	e8 72 8f 01 00       	call   c00252c3 <__floatsidf>
c000c351:	83 c4 10             	add    esp,0x10
c000c354:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c358:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c35c:	52                   	push   edx
c000c35d:	50                   	push   eax
c000c35e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c362:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c366:	e8 d9 8b 01 00       	call   c0024f44 <__divdf3>
c000c36b:	83 c4 10             	add    esp,0x10
c000c36e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c372:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c382:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c386:	e8 58 82 01 00       	call   c00245e3 <__adddf3>
c000c38b:	83 c4 10             	add    esp,0x10
c000c38e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c392:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c396:	83 ec 0c             	sub    esp,0xc
c000c399:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c39c:	e8 22 8f 01 00       	call   c00252c3 <__floatsidf>
c000c3a1:	83 c4 10             	add    esp,0x10
c000c3a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3bc:	e8 6e 91 01 00       	call   c002552f <__ltdf2>
c000c3c1:	83 c4 10             	add    esp,0x10
c000c3c4:	85 c0                	test   eax,eax
c000c3c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3ce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3d2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3d6:	78 10                	js     c000c3e8 <sinc_hex_vari_process+0x512>
c000c3d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3e4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f8:	e8 63 88 01 00       	call   c0024c60 <__muldf3>
c000c3fd:	59                   	pop    ecx
c000c3fe:	5f                   	pop    edi
c000c3ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c407:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40f:	e8 5d f2 ff ff       	call   c000b671 <double_to_fp>
c000c414:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c418:	89 c7                	mov    edi,eax
c000c41a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c41e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c422:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c426:	e8 35 88 01 00       	call   c0024c60 <__muldf3>
c000c42b:	83 c4 18             	add    esp,0x18
c000c42e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c432:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c436:	52                   	push   edx
c000c437:	50                   	push   eax
c000c438:	e8 34 f2 ff ff       	call   c000b671 <double_to_fp>
c000c43d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c440:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c444:	83 c4 0c             	add    esp,0xc
c000c447:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c44a:	8d 04 90             	lea    eax,[eax+edx*4]
c000c44d:	50                   	push   eax
c000c44e:	50                   	push   eax
c000c44f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c452:	e8 6c 8e 01 00       	call   c00252c3 <__floatsidf>
c000c457:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c45b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c45f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c463:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c467:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46f:	e8 d0 8a 01 00       	call   c0024f44 <__divdf3>
c000c474:	83 c4 18             	add    esp,0x18
c000c477:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c47f:	52                   	push   edx
c000c480:	89 fa                	mov    edx,edi
c000c482:	50                   	push   eax
c000c483:	89 d8                	mov    eax,ebx
c000c485:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c489:	e8 50 de ff ff       	call   c000a2de <calc_output_hex>
c000c48e:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c496:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c49a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a2:	e8 9d 8a 01 00       	call   c0024f44 <__divdf3>
c000c4a7:	83 c4 10             	add    esp,0x10
c000c4aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c2:	e8 1c 81 01 00       	call   c00245e3 <__adddf3>
c000c4c7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4cb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4cf:	83 c4 18             	add    esp,0x18
c000c4d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4da:	e8 01 92 01 00       	call   c00256e0 <lrint>
c000c4df:	83 ec 0c             	sub    esp,0xc
c000c4e2:	50                   	push   eax
c000c4e3:	e8 db 8d 01 00       	call   c00252c3 <__floatsidf>
c000c4e8:	83 c4 10             	add    esp,0x10
c000c4eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4f3:	52                   	push   edx
c000c4f4:	50                   	push   eax
c000c4f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4fd:	e8 32 87 01 00       	call   c0024c34 <__subdf3>
c000c502:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c506:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c50a:	83 c4 20             	add    esp,0x20
c000c50d:	6a 00                	push   0x0
c000c50f:	6a 00                	push   0x0
c000c511:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c519:	e8 11 90 01 00       	call   c002552f <__ltdf2>
c000c51e:	83 c4 10             	add    esp,0x10
c000c521:	85 c0                	test   eax,eax
c000c523:	79 20                	jns    c000c545 <sinc_hex_vari_process+0x66f>
c000c525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c535:	e8 a9 80 01 00       	call   c00245e3 <__adddf3>
c000c53a:	83 c4 10             	add    esp,0x10
c000c53d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c545:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c548:	83 ec 10             	sub    esp,0x10
c000c54b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c54f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c55a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c55e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c562:	e8 cd 86 01 00       	call   c0024c34 <__subdf3>
c000c567:	83 c4 18             	add    esp,0x18
c000c56a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c572:	52                   	push   edx
c000c573:	50                   	push   eax
c000c574:	e8 67 91 01 00       	call   c00256e0 <lrint>
c000c579:	0f af f8             	imul   edi,eax
c000c57c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c580:	83 c4 10             	add    esp,0x10
c000c583:	01 f8                	add    eax,edi
c000c585:	99                   	cdq    
c000c586:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c589:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c58c:	e9 fd fb ff ff       	jmp    c000c18e <sinc_hex_vari_process+0x2b8>
c000c591:	83 c4 4c             	add    esp,0x4c
c000c594:	89 d0                	mov    eax,edx
c000c596:	5b                   	pop    ebx
c000c597:	5e                   	pop    esi
c000c598:	5f                   	pop    edi
c000c599:	5d                   	pop    ebp
c000c59a:	c3                   	ret    

c000c59b <sinc_quad_vari_process>:
c000c59b:	55                   	push   ebp
c000c59c:	ba 05 00 00 00       	mov    edx,0x5
c000c5a1:	57                   	push   edi
c000c5a2:	56                   	push   esi
c000c5a3:	53                   	push   ebx
c000c5a4:	83 ec 4c             	sub    esp,0x4c
c000c5a7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5ab:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5af:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5b2:	85 db                	test   ebx,ebx
c000c5b4:	0f 84 9c 06 00 00    	je     c000cc56 <sinc_quad_vari_process+0x6bb>
c000c5ba:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5bd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5c0:	0f af c7             	imul   eax,edi
c000c5c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5c6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5c9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5d0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5d7:	0f af c7             	imul   eax,edi
c000c5da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5dd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5eb:	68 00 00 70 3f       	push   0x3f700000
c000c5f0:	6a 00                	push   0x0
c000c5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fa:	e8 30 8f 01 00       	call   c002552f <__ltdf2>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	ba 16 00 00 00       	mov    edx,0x16
c000c607:	85 c0                	test   eax,eax
c000c609:	0f 88 47 06 00 00    	js     c000cc56 <sinc_quad_vari_process+0x6bb>
c000c60f:	68 00 00 70 40       	push   0x40700000
c000c614:	6a 00                	push   0x0
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	e8 ee 8e 01 00       	call   c0025511 <__gtdf2>
c000c623:	83 c4 10             	add    esp,0x10
c000c626:	ba 16 00 00 00       	mov    edx,0x16
c000c62b:	85 c0                	test   eax,eax
c000c62d:	0f 8f 23 06 00 00    	jg     c000cc56 <sinc_quad_vari_process+0x6bb>
c000c633:	83 ec 0c             	sub    esp,0xc
c000c636:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c639:	e8 85 8c 01 00       	call   c00252c3 <__floatsidf>
c000c63e:	83 c4 10             	add    esp,0x10
c000c641:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c645:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c649:	68 00 00 00 40       	push   0x40000000
c000c64e:	6a 00                	push   0x0
c000c650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c658:	e8 86 7f 01 00       	call   c00245e3 <__adddf3>
c000c65d:	59                   	pop    ecx
c000c65e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c662:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c666:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c669:	e8 55 8c 01 00       	call   c00252c3 <__floatsidf>
c000c66e:	83 c4 10             	add    esp,0x10
c000c671:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c675:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c679:	52                   	push   edx
c000c67a:	50                   	push   eax
c000c67b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c67f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c683:	e8 bc 88 01 00       	call   c0024f44 <__divdf3>
c000c688:	83 c4 10             	add    esp,0x10
c000c68b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c68f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c693:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c696:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c699:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c69d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b1:	e8 5b 8e 01 00       	call   c0025511 <__gtdf2>
c000c6b6:	83 c4 10             	add    esp,0x10
c000c6b9:	85 c0                	test   eax,eax
c000c6bb:	7e 2d                	jle    c000c6ea <sinc_quad_vari_process+0x14f>
c000c6bd:	68 00 00 f0 3f       	push   0x3ff00000
c000c6c2:	6a 00                	push   0x0
c000c6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6cc:	e8 5e 8e 01 00       	call   c002552f <__ltdf2>
c000c6d1:	83 c4 10             	add    esp,0x10
c000c6d4:	85 c0                	test   eax,eax
c000c6d6:	79 4d                	jns    c000c725 <sinc_quad_vari_process+0x18a>
c000c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e8:	eb 1b                	jmp    c000c705 <sinc_quad_vari_process+0x16a>
c000c6ea:	68 00 00 f0 3f       	push   0x3ff00000
c000c6ef:	6a 00                	push   0x0
c000c6f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f9:	e8 31 8e 01 00       	call   c002552f <__ltdf2>
c000c6fe:	83 c4 10             	add    esp,0x10
c000c701:	85 c0                	test   eax,eax
c000c703:	79 20                	jns    c000c725 <sinc_quad_vari_process+0x18a>
c000c705:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c709:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c70d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c711:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c715:	e8 2a 88 01 00       	call   c0024f44 <__divdf3>
c000c71a:	83 c4 10             	add    esp,0x10
c000c71d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c721:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c725:	50                   	push   eax
c000c726:	50                   	push   eax
c000c727:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72f:	e8 ac 8f 01 00       	call   c00256e0 <lrint>
c000c734:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c737:	40                   	inc    eax
c000c738:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c73c:	0f af c7             	imul   eax,edi
c000c73f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c746:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c74a:	58                   	pop    eax
c000c74b:	5a                   	pop    edx
c000c74c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c750:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c754:	e8 87 8f 01 00       	call   c00256e0 <lrint>
c000c759:	83 ec 0c             	sub    esp,0xc
c000c75c:	50                   	push   eax
c000c75d:	e8 61 8b 01 00       	call   c00252c3 <__floatsidf>
c000c762:	83 c4 10             	add    esp,0x10
c000c765:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c769:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76d:	52                   	push   edx
c000c76e:	50                   	push   eax
c000c76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c777:	e8 b8 84 01 00       	call   c0024c34 <__subdf3>
c000c77c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c780:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c784:	83 c4 20             	add    esp,0x20
c000c787:	6a 00                	push   0x0
c000c789:	6a 00                	push   0x0
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 97 8d 01 00       	call   c002552f <__ltdf2>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	85 c0                	test   eax,eax
c000c79d:	79 1f                	jns    c000c7be <sinc_quad_vari_process+0x223>
c000c79f:	68 00 00 f0 3f       	push   0x3ff00000
c000c7a4:	6a 00                	push   0x0
c000c7a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ae:	e8 30 7e 01 00       	call   c00245e3 <__adddf3>
c000c7b3:	83 c4 10             	add    esp,0x10
c000c7b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7be:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7c1:	83 ec 10             	sub    esp,0x10
c000c7c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7c8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7db:	e8 54 84 01 00       	call   c0024c34 <__subdf3>
c000c7e0:	83 c4 18             	add    esp,0x18
c000c7e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7eb:	52                   	push   edx
c000c7ec:	50                   	push   eax
c000c7ed:	e8 ee 8e 01 00       	call   c00256e0 <lrint>
c000c7f2:	0f af f8             	imul   edi,eax
c000c7f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7f9:	01 f8                	add    eax,edi
c000c7fb:	99                   	cdq    
c000c7fc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c802:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c806:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c80a:	68 00 00 f0 3f       	push   0x3ff00000
c000c80f:	6a 00                	push   0x0
c000c811:	e8 2e 87 01 00       	call   c0024f44 <__divdf3>
c000c816:	83 c4 10             	add    esp,0x10
c000c819:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c821:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c826:	68 23 42 92 0c       	push   0xc924223
c000c82b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c82f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c833:	e8 ab 7d 01 00       	call   c00245e3 <__adddf3>
c000c838:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c83c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c840:	83 c4 20             	add    esp,0x20
c000c843:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c84b:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c853:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c856:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c859:	7d 50                	jge    c000c8ab <sinc_quad_vari_process+0x310>
c000c85b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c85e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c861:	01 c8                	add    eax,ecx
c000c863:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c866:	99                   	cdq    
c000c867:	f7 f9                	idiv   ecx
c000c869:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c86d:	7d 0c                	jge    c000c87b <sinc_quad_vari_process+0x2e0>
c000c86f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c872:	85 ff                	test   edi,edi
c000c874:	79 6c                	jns    c000c8e2 <sinc_quad_vari_process+0x347>
c000c876:	e9 e7 00 00 00       	jmp    c000c962 <sinc_quad_vari_process+0x3c7>
c000c87b:	50                   	push   eax
c000c87c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c880:	56                   	push   esi
c000c881:	53                   	push   ebx
c000c882:	e8 11 ee ff ff       	call   c000b698 <prepare_data>
c000c887:	83 c4 10             	add    esp,0x10
c000c88a:	89 c2                	mov    edx,eax
c000c88c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c88f:	85 c0                	test   eax,eax
c000c891:	0f 85 bf 03 00 00    	jne    c000cc56 <sinc_quad_vari_process+0x6bb>
c000c897:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c89a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c89d:	01 c8                	add    eax,ecx
c000c89f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8a2:	99                   	cdq    
c000c8a3:	f7 f9                	idiv   ecx
c000c8a5:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8a9:	7c c4                	jl     c000c86f <sinc_quad_vari_process+0x2d4>
c000c8ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8b3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8b6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8ca:	99                   	cdq    
c000c8cb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8ce:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8d1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8d4:	99                   	cdq    
c000c8d5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8d8:	31 d2                	xor    edx,edx
c000c8da:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8dd:	e9 74 03 00 00       	jmp    c000cc56 <sinc_quad_vari_process+0x6bb>
c000c8e2:	83 ec 0c             	sub    esp,0xc
c000c8e5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8e8:	e8 d6 89 01 00       	call   c00252c3 <__floatsidf>
c000c8ed:	83 c4 10             	add    esp,0x10
c000c8f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c8f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c8f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c900:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c904:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c908:	e8 d6 7c 01 00       	call   c00245e3 <__adddf3>
c000c90d:	83 c4 10             	add    esp,0x10
c000c910:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c918:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c91c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c920:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c924:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c928:	e8 b6 7c 01 00       	call   c00245e3 <__adddf3>
c000c92d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c930:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c934:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c938:	e8 86 89 01 00       	call   c00252c3 <__floatsidf>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c944:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c948:	52                   	push   edx
c000c949:	50                   	push   eax
c000c94a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c952:	e8 d6 8b 01 00       	call   c002552d <__gedf2>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	85 c0                	test   eax,eax
c000c95c:	0f 89 49 ff ff ff    	jns    c000c8ab <sinc_quad_vari_process+0x310>
c000c962:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c966:	0f 8e ef 00 00 00    	jle    c000ca5b <sinc_quad_vari_process+0x4c0>
c000c96c:	83 ec 10             	sub    esp,0x10
c000c96f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c972:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c975:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c978:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c97b:	e8 b4 82 01 00       	call   c0024c34 <__subdf3>
c000c980:	83 c4 18             	add    esp,0x18
c000c983:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c987:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98b:	52                   	push   edx
c000c98c:	50                   	push   eax
c000c98d:	e8 2e 8d 01 00       	call   c00256c0 <fabs>
c000c992:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c996:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c99a:	83 c4 10             	add    esp,0x10
c000c99d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9a2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9af:	e8 5d 8b 01 00       	call   c0025511 <__gtdf2>
c000c9b4:	83 c4 10             	add    esp,0x10
c000c9b7:	85 c0                	test   eax,eax
c000c9b9:	0f 8e 9c 00 00 00    	jle    c000ca5b <sinc_quad_vari_process+0x4c0>
c000c9bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9c2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9cd:	52                   	push   edx
c000c9ce:	50                   	push   eax
c000c9cf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9d2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9d5:	e8 5a 82 01 00       	call   c0024c34 <__subdf3>
c000c9da:	59                   	pop    ecx
c000c9db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9df:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9e6:	e8 d8 88 01 00       	call   c00252c3 <__floatsidf>
c000c9eb:	83 c4 10             	add    esp,0x10
c000c9ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9f6:	52                   	push   edx
c000c9f7:	50                   	push   eax
c000c9f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca00:	e8 5b 82 01 00       	call   c0024c60 <__muldf3>
c000ca05:	5f                   	pop    edi
c000ca06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca0a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca0e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca11:	e8 ad 88 01 00       	call   c00252c3 <__floatsidf>
c000ca16:	83 c4 10             	add    esp,0x10
c000ca19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca21:	52                   	push   edx
c000ca22:	50                   	push   eax
c000ca23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca2b:	e8 14 85 01 00       	call   c0024f44 <__divdf3>
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca4b:	e8 93 7b 01 00       	call   c00245e3 <__adddf3>
c000ca50:	83 c4 10             	add    esp,0x10
c000ca53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca5b:	83 ec 0c             	sub    esp,0xc
c000ca5e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca61:	e8 5d 88 01 00       	call   c00252c3 <__floatsidf>
c000ca66:	83 c4 10             	add    esp,0x10
c000ca69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca81:	e8 a9 8a 01 00       	call   c002552f <__ltdf2>
c000ca86:	83 c4 10             	add    esp,0x10
c000ca89:	85 c0                	test   eax,eax
c000ca8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca8f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ca93:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ca97:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ca9b:	78 10                	js     c000caad <sinc_quad_vari_process+0x512>
c000ca9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caa1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caa9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cabd:	e8 9e 81 01 00       	call   c0024c60 <__muldf3>
c000cac2:	59                   	pop    ecx
c000cac3:	5f                   	pop    edi
c000cac4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cac8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cacc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cad0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cad4:	e8 98 eb ff ff       	call   c000b671 <double_to_fp>
c000cad9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cadd:	89 c7                	mov    edi,eax
c000cadf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cae3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cae7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caeb:	e8 70 81 01 00       	call   c0024c60 <__muldf3>
c000caf0:	83 c4 18             	add    esp,0x18
c000caf3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000caf7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cafb:	52                   	push   edx
c000cafc:	50                   	push   eax
c000cafd:	e8 6f eb ff ff       	call   c000b671 <double_to_fp>
c000cb02:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb05:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb09:	83 c4 0c             	add    esp,0xc
c000cb0c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb0f:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb12:	50                   	push   eax
c000cb13:	50                   	push   eax
c000cb14:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb17:	e8 a7 87 01 00       	call   c00252c3 <__floatsidf>
c000cb1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb34:	e8 0b 84 01 00       	call   c0024f44 <__divdf3>
c000cb39:	83 c4 18             	add    esp,0x18
c000cb3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb44:	52                   	push   edx
c000cb45:	89 fa                	mov    edx,edi
c000cb47:	50                   	push   eax
c000cb48:	89 d8                	mov    eax,ebx
c000cb4a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb4e:	e8 a5 d1 ff ff       	call   c0009cf8 <calc_output_quad>
c000cb53:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb67:	e8 d8 83 01 00       	call   c0024f44 <__divdf3>
c000cb6c:	83 c4 10             	add    esp,0x10
c000cb6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb87:	e8 57 7a 01 00       	call   c00245e3 <__adddf3>
c000cb8c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb90:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cb94:	83 c4 18             	add    esp,0x18
c000cb97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9f:	e8 3c 8b 01 00       	call   c00256e0 <lrint>
c000cba4:	83 ec 0c             	sub    esp,0xc
c000cba7:	50                   	push   eax
c000cba8:	e8 16 87 01 00       	call   c00252c3 <__floatsidf>
c000cbad:	83 c4 10             	add    esp,0x10
c000cbb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbb8:	52                   	push   edx
c000cbb9:	50                   	push   eax
c000cbba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc2:	e8 6d 80 01 00       	call   c0024c34 <__subdf3>
c000cbc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbcb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcf:	83 c4 20             	add    esp,0x20
c000cbd2:	6a 00                	push   0x0
c000cbd4:	6a 00                	push   0x0
c000cbd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbde:	e8 4c 89 01 00       	call   c002552f <__ltdf2>
c000cbe3:	83 c4 10             	add    esp,0x10
c000cbe6:	85 c0                	test   eax,eax
c000cbe8:	79 20                	jns    c000cc0a <sinc_quad_vari_process+0x66f>
c000cbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbfa:	e8 e4 79 01 00       	call   c00245e3 <__adddf3>
c000cbff:	83 c4 10             	add    esp,0x10
c000cc02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc0a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc0d:	83 ec 10             	sub    esp,0x10
c000cc10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc14:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc27:	e8 08 80 01 00       	call   c0024c34 <__subdf3>
c000cc2c:	83 c4 18             	add    esp,0x18
c000cc2f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc33:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc37:	52                   	push   edx
c000cc38:	50                   	push   eax
c000cc39:	e8 a2 8a 01 00       	call   c00256e0 <lrint>
c000cc3e:	0f af f8             	imul   edi,eax
c000cc41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc45:	83 c4 10             	add    esp,0x10
c000cc48:	01 f8                	add    eax,edi
c000cc4a:	99                   	cdq    
c000cc4b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc4e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc51:	e9 fd fb ff ff       	jmp    c000c853 <sinc_quad_vari_process+0x2b8>
c000cc56:	83 c4 4c             	add    esp,0x4c
c000cc59:	89 d0                	mov    eax,edx
c000cc5b:	5b                   	pop    ebx
c000cc5c:	5e                   	pop    esi
c000cc5d:	5f                   	pop    edi
c000cc5e:	5d                   	pop    ebp
c000cc5f:	c3                   	ret    

c000cc60 <sinc_stereo_vari_process>:
c000cc60:	55                   	push   ebp
c000cc61:	ba 05 00 00 00       	mov    edx,0x5
c000cc66:	57                   	push   edi
c000cc67:	56                   	push   esi
c000cc68:	53                   	push   ebx
c000cc69:	83 ec 4c             	sub    esp,0x4c
c000cc6c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc70:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc74:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc77:	85 db                	test   ebx,ebx
c000cc79:	0f 84 9c 06 00 00    	je     c000d31b <sinc_stereo_vari_process+0x6bb>
c000cc7f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc82:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc85:	0f af c7             	imul   eax,edi
c000cc88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc8b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc8e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cc95:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cc9c:	0f af c7             	imul   eax,edi
c000cc9f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cca2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cca5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cca8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb0:	68 00 00 70 3f       	push   0x3f700000
c000ccb5:	6a 00                	push   0x0
c000ccb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbf:	e8 6b 88 01 00       	call   c002552f <__ltdf2>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	ba 16 00 00 00       	mov    edx,0x16
c000cccc:	85 c0                	test   eax,eax
c000ccce:	0f 88 47 06 00 00    	js     c000d31b <sinc_stereo_vari_process+0x6bb>
c000ccd4:	68 00 00 70 40       	push   0x40700000
c000ccd9:	6a 00                	push   0x0
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	e8 29 88 01 00       	call   c0025511 <__gtdf2>
c000cce8:	83 c4 10             	add    esp,0x10
c000cceb:	ba 16 00 00 00       	mov    edx,0x16
c000ccf0:	85 c0                	test   eax,eax
c000ccf2:	0f 8f 23 06 00 00    	jg     c000d31b <sinc_stereo_vari_process+0x6bb>
c000ccf8:	83 ec 0c             	sub    esp,0xc
c000ccfb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ccfe:	e8 c0 85 01 00       	call   c00252c3 <__floatsidf>
c000cd03:	83 c4 10             	add    esp,0x10
c000cd06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd0e:	68 00 00 00 40       	push   0x40000000
c000cd13:	6a 00                	push   0x0
c000cd15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd1d:	e8 c1 78 01 00       	call   c00245e3 <__adddf3>
c000cd22:	59                   	pop    ecx
c000cd23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd27:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd2b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd2e:	e8 90 85 01 00       	call   c00252c3 <__floatsidf>
c000cd33:	83 c4 10             	add    esp,0x10
c000cd36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd3e:	52                   	push   edx
c000cd3f:	50                   	push   eax
c000cd40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd48:	e8 f7 81 01 00       	call   c0024f44 <__divdf3>
c000cd4d:	83 c4 10             	add    esp,0x10
c000cd50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd58:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd5b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd76:	e8 96 87 01 00       	call   c0025511 <__gtdf2>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	85 c0                	test   eax,eax
c000cd80:	7e 2d                	jle    c000cdaf <sinc_stereo_vari_process+0x14f>
c000cd82:	68 00 00 f0 3f       	push   0x3ff00000
c000cd87:	6a 00                	push   0x0
c000cd89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd91:	e8 99 87 01 00       	call   c002552f <__ltdf2>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	85 c0                	test   eax,eax
c000cd9b:	79 4d                	jns    c000cdea <sinc_stereo_vari_process+0x18a>
c000cd9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdad:	eb 1b                	jmp    c000cdca <sinc_stereo_vari_process+0x16a>
c000cdaf:	68 00 00 f0 3f       	push   0x3ff00000
c000cdb4:	6a 00                	push   0x0
c000cdb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbe:	e8 6c 87 01 00       	call   c002552f <__ltdf2>
c000cdc3:	83 c4 10             	add    esp,0x10
c000cdc6:	85 c0                	test   eax,eax
c000cdc8:	79 20                	jns    c000cdea <sinc_stereo_vari_process+0x18a>
c000cdca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdda:	e8 65 81 01 00       	call   c0024f44 <__divdf3>
c000cddf:	83 c4 10             	add    esp,0x10
c000cde2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cde6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdea:	50                   	push   eax
c000cdeb:	50                   	push   eax
c000cdec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf4:	e8 e7 88 01 00       	call   c00256e0 <lrint>
c000cdf9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cdfc:	40                   	inc    eax
c000cdfd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce01:	0f af c7             	imul   eax,edi
c000ce04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0f:	58                   	pop    eax
c000ce10:	5a                   	pop    edx
c000ce11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce19:	e8 c2 88 01 00       	call   c00256e0 <lrint>
c000ce1e:	83 ec 0c             	sub    esp,0xc
c000ce21:	50                   	push   eax
c000ce22:	e8 9c 84 01 00       	call   c00252c3 <__floatsidf>
c000ce27:	83 c4 10             	add    esp,0x10
c000ce2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce32:	52                   	push   edx
c000ce33:	50                   	push   eax
c000ce34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce3c:	e8 f3 7d 01 00       	call   c0024c34 <__subdf3>
c000ce41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce49:	83 c4 20             	add    esp,0x20
c000ce4c:	6a 00                	push   0x0
c000ce4e:	6a 00                	push   0x0
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 d2 86 01 00       	call   c002552f <__ltdf2>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	85 c0                	test   eax,eax
c000ce62:	79 1f                	jns    c000ce83 <sinc_stereo_vari_process+0x223>
c000ce64:	68 00 00 f0 3f       	push   0x3ff00000
c000ce69:	6a 00                	push   0x0
c000ce6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce73:	e8 6b 77 01 00       	call   c00245e3 <__adddf3>
c000ce78:	83 c4 10             	add    esp,0x10
c000ce7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce83:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce86:	83 ec 10             	sub    esp,0x10
c000ce89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce8d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cea0:	e8 8f 7d 01 00       	call   c0024c34 <__subdf3>
c000cea5:	83 c4 18             	add    esp,0x18
c000cea8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ceb0:	52                   	push   edx
c000ceb1:	50                   	push   eax
c000ceb2:	e8 29 88 01 00       	call   c00256e0 <lrint>
c000ceb7:	0f af f8             	imul   edi,eax
c000ceba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cebe:	01 f8                	add    eax,edi
c000cec0:	99                   	cdq    
c000cec1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cec4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cec7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cecf:	68 00 00 f0 3f       	push   0x3ff00000
c000ced4:	6a 00                	push   0x0
c000ced6:	e8 69 80 01 00       	call   c0024f44 <__divdf3>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cee2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cee6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ceeb:	68 23 42 92 0c       	push   0xc924223
c000cef0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef8:	e8 e6 76 01 00       	call   c00245e3 <__adddf3>
c000cefd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf01:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf05:	83 c4 20             	add    esp,0x20
c000cf08:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf10:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf18:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf1b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf1e:	7d 50                	jge    c000cf70 <sinc_stereo_vari_process+0x310>
c000cf20:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf23:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf26:	01 c8                	add    eax,ecx
c000cf28:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf2b:	99                   	cdq    
c000cf2c:	f7 f9                	idiv   ecx
c000cf2e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf32:	7d 0c                	jge    c000cf40 <sinc_stereo_vari_process+0x2e0>
c000cf34:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf37:	85 ff                	test   edi,edi
c000cf39:	79 6c                	jns    c000cfa7 <sinc_stereo_vari_process+0x347>
c000cf3b:	e9 e7 00 00 00       	jmp    c000d027 <sinc_stereo_vari_process+0x3c7>
c000cf40:	50                   	push   eax
c000cf41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf45:	56                   	push   esi
c000cf46:	53                   	push   ebx
c000cf47:	e8 4c e7 ff ff       	call   c000b698 <prepare_data>
c000cf4c:	83 c4 10             	add    esp,0x10
c000cf4f:	89 c2                	mov    edx,eax
c000cf51:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf54:	85 c0                	test   eax,eax
c000cf56:	0f 85 bf 03 00 00    	jne    c000d31b <sinc_stereo_vari_process+0x6bb>
c000cf5c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf5f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf62:	01 c8                	add    eax,ecx
c000cf64:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf67:	99                   	cdq    
c000cf68:	f7 f9                	idiv   ecx
c000cf6a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf6e:	7c c4                	jl     c000cf34 <sinc_stereo_vari_process+0x2d4>
c000cf70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf78:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf7b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf86:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf89:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf8c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf8f:	99                   	cdq    
c000cf90:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf93:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cf96:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cf99:	99                   	cdq    
c000cf9a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf9d:	31 d2                	xor    edx,edx
c000cf9f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfa2:	e9 74 03 00 00       	jmp    c000d31b <sinc_stereo_vari_process+0x6bb>
c000cfa7:	83 ec 0c             	sub    esp,0xc
c000cfaa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfad:	e8 11 83 01 00       	call   c00252c3 <__floatsidf>
c000cfb2:	83 c4 10             	add    esp,0x10
c000cfb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfb9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfcd:	e8 11 76 01 00       	call   c00245e3 <__adddf3>
c000cfd2:	83 c4 10             	add    esp,0x10
c000cfd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfd9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfe9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfed:	e8 f1 75 01 00       	call   c00245e3 <__adddf3>
c000cff2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cff5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cff9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cffd:	e8 c1 82 01 00       	call   c00252c3 <__floatsidf>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d009:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d00d:	52                   	push   edx
c000d00e:	50                   	push   eax
c000d00f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d017:	e8 11 85 01 00       	call   c002552d <__gedf2>
c000d01c:	83 c4 10             	add    esp,0x10
c000d01f:	85 c0                	test   eax,eax
c000d021:	0f 89 49 ff ff ff    	jns    c000cf70 <sinc_stereo_vari_process+0x310>
c000d027:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d02b:	0f 8e ef 00 00 00    	jle    c000d120 <sinc_stereo_vari_process+0x4c0>
c000d031:	83 ec 10             	sub    esp,0x10
c000d034:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d037:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d03a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d03d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d040:	e8 ef 7b 01 00       	call   c0024c34 <__subdf3>
c000d045:	83 c4 18             	add    esp,0x18
c000d048:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d050:	52                   	push   edx
c000d051:	50                   	push   eax
c000d052:	e8 69 86 01 00       	call   c00256c0 <fabs>
c000d057:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d05b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d05f:	83 c4 10             	add    esp,0x10
c000d062:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d067:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d074:	e8 98 84 01 00       	call   c0025511 <__gtdf2>
c000d079:	83 c4 10             	add    esp,0x10
c000d07c:	85 c0                	test   eax,eax
c000d07e:	0f 8e 9c 00 00 00    	jle    c000d120 <sinc_stereo_vari_process+0x4c0>
c000d084:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d087:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d08a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d08e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d092:	52                   	push   edx
c000d093:	50                   	push   eax
c000d094:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d097:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d09a:	e8 95 7b 01 00       	call   c0024c34 <__subdf3>
c000d09f:	59                   	pop    ecx
c000d0a0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0a4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0a8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0ab:	e8 13 82 01 00       	call   c00252c3 <__floatsidf>
c000d0b0:	83 c4 10             	add    esp,0x10
c000d0b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0bb:	52                   	push   edx
c000d0bc:	50                   	push   eax
c000d0bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c5:	e8 96 7b 01 00       	call   c0024c60 <__muldf3>
c000d0ca:	5f                   	pop    edi
c000d0cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0cf:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0d3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0d6:	e8 e8 81 01 00       	call   c00252c3 <__floatsidf>
c000d0db:	83 c4 10             	add    esp,0x10
c000d0de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0e6:	52                   	push   edx
c000d0e7:	50                   	push   eax
c000d0e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0f0:	e8 4f 7e 01 00       	call   c0024f44 <__divdf3>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0fc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d100:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d110:	e8 ce 74 01 00       	call   c00245e3 <__adddf3>
c000d115:	83 c4 10             	add    esp,0x10
c000d118:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d11c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d120:	83 ec 0c             	sub    esp,0xc
c000d123:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d126:	e8 98 81 01 00       	call   c00252c3 <__floatsidf>
c000d12b:	83 c4 10             	add    esp,0x10
c000d12e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d132:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d146:	e8 e4 83 01 00       	call   c002552f <__ltdf2>
c000d14b:	83 c4 10             	add    esp,0x10
c000d14e:	85 c0                	test   eax,eax
c000d150:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d154:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d158:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d15c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d160:	78 10                	js     c000d172 <sinc_stereo_vari_process+0x512>
c000d162:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d166:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d16a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d16e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d172:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d176:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d17a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d17e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d182:	e8 d9 7a 01 00       	call   c0024c60 <__muldf3>
c000d187:	59                   	pop    ecx
c000d188:	5f                   	pop    edi
c000d189:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d18d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d195:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d199:	e8 d3 e4 ff ff       	call   c000b671 <double_to_fp>
c000d19e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a2:	89 c7                	mov    edi,eax
c000d1a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1b0:	e8 ab 7a 01 00       	call   c0024c60 <__muldf3>
c000d1b5:	83 c4 18             	add    esp,0x18
c000d1b8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1c0:	52                   	push   edx
c000d1c1:	50                   	push   eax
c000d1c2:	e8 aa e4 ff ff       	call   c000b671 <double_to_fp>
c000d1c7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1ce:	83 c4 0c             	add    esp,0xc
c000d1d1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1d4:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1d7:	50                   	push   eax
c000d1d8:	50                   	push   eax
c000d1d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1dc:	e8 e2 80 01 00       	call   c00252c3 <__floatsidf>
c000d1e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1e5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f9:	e8 46 7d 01 00       	call   c0024f44 <__divdf3>
c000d1fe:	83 c4 18             	add    esp,0x18
c000d201:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d205:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d209:	52                   	push   edx
c000d20a:	89 fa                	mov    edx,edi
c000d20c:	50                   	push   eax
c000d20d:	89 d8                	mov    eax,ebx
c000d20f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d213:	e8 02 c7 ff ff       	call   c000991a <calc_output_stereo>
c000d218:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d21c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d220:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d224:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d228:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22c:	e8 13 7d 01 00       	call   c0024f44 <__divdf3>
c000d231:	83 c4 10             	add    esp,0x10
c000d234:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d238:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d244:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d248:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d24c:	e8 92 73 01 00       	call   c00245e3 <__adddf3>
c000d251:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d255:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d259:	83 c4 18             	add    esp,0x18
c000d25c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d260:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d264:	e8 77 84 01 00       	call   c00256e0 <lrint>
c000d269:	83 ec 0c             	sub    esp,0xc
c000d26c:	50                   	push   eax
c000d26d:	e8 51 80 01 00       	call   c00252c3 <__floatsidf>
c000d272:	83 c4 10             	add    esp,0x10
c000d275:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d279:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d27d:	52                   	push   edx
c000d27e:	50                   	push   eax
c000d27f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d283:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d287:	e8 a8 79 01 00       	call   c0024c34 <__subdf3>
c000d28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d294:	83 c4 20             	add    esp,0x20
c000d297:	6a 00                	push   0x0
c000d299:	6a 00                	push   0x0
c000d29b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d29f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2a3:	e8 87 82 01 00       	call   c002552f <__ltdf2>
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	85 c0                	test   eax,eax
c000d2ad:	79 20                	jns    c000d2cf <sinc_stereo_vari_process+0x66f>
c000d2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2bf:	e8 1f 73 01 00       	call   c00245e3 <__adddf3>
c000d2c4:	83 c4 10             	add    esp,0x10
c000d2c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2cf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2d2:	83 ec 10             	sub    esp,0x10
c000d2d5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2d9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ec:	e8 43 79 01 00       	call   c0024c34 <__subdf3>
c000d2f1:	83 c4 18             	add    esp,0x18
c000d2f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2fc:	52                   	push   edx
c000d2fd:	50                   	push   eax
c000d2fe:	e8 dd 83 01 00       	call   c00256e0 <lrint>
c000d303:	0f af f8             	imul   edi,eax
c000d306:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d30a:	83 c4 10             	add    esp,0x10
c000d30d:	01 f8                	add    eax,edi
c000d30f:	99                   	cdq    
c000d310:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d313:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d316:	e9 fd fb ff ff       	jmp    c000cf18 <sinc_stereo_vari_process+0x2b8>
c000d31b:	83 c4 4c             	add    esp,0x4c
c000d31e:	89 d0                	mov    eax,edx
c000d320:	5b                   	pop    ebx
c000d321:	5e                   	pop    esi
c000d322:	5f                   	pop    edi
c000d323:	5d                   	pop    ebp
c000d324:	c3                   	ret    

c000d325 <sinc_mono_vari_process>:
c000d325:	55                   	push   ebp
c000d326:	ba 05 00 00 00       	mov    edx,0x5
c000d32b:	57                   	push   edi
c000d32c:	56                   	push   esi
c000d32d:	53                   	push   ebx
c000d32e:	83 ec 4c             	sub    esp,0x4c
c000d331:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d335:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d339:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d33c:	85 db                	test   ebx,ebx
c000d33e:	0f 84 c1 06 00 00    	je     c000da05 <sinc_mono_vari_process+0x6e0>
c000d344:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d347:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d34a:	0f af c7             	imul   eax,edi
c000d34d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d350:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d353:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d35a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d361:	0f af c7             	imul   eax,edi
c000d364:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d367:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d36b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d36e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d370:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d374:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d378:	68 00 00 70 3f       	push   0x3f700000
c000d37d:	6a 00                	push   0x0
c000d37f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d387:	e8 a3 81 01 00       	call   c002552f <__ltdf2>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	ba 16 00 00 00       	mov    edx,0x16
c000d394:	85 c0                	test   eax,eax
c000d396:	0f 88 69 06 00 00    	js     c000da05 <sinc_mono_vari_process+0x6e0>
c000d39c:	68 00 00 70 40       	push   0x40700000
c000d3a1:	6a 00                	push   0x0
c000d3a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ab:	e8 61 81 01 00       	call   c0025511 <__gtdf2>
c000d3b0:	83 c4 10             	add    esp,0x10
c000d3b3:	ba 16 00 00 00       	mov    edx,0x16
c000d3b8:	85 c0                	test   eax,eax
c000d3ba:	0f 8f 45 06 00 00    	jg     c000da05 <sinc_mono_vari_process+0x6e0>
c000d3c0:	83 ec 0c             	sub    esp,0xc
c000d3c3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3c6:	e8 f8 7e 01 00       	call   c00252c3 <__floatsidf>
c000d3cb:	83 c4 10             	add    esp,0x10
c000d3ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3d6:	68 00 00 00 40       	push   0x40000000
c000d3db:	6a 00                	push   0x0
c000d3dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e5:	e8 f9 71 01 00       	call   c00245e3 <__adddf3>
c000d3ea:	59                   	pop    ecx
c000d3eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d3f6:	e8 c8 7e 01 00       	call   c00252c3 <__floatsidf>
c000d3fb:	83 c4 10             	add    esp,0x10
c000d3fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d402:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d406:	52                   	push   edx
c000d407:	50                   	push   eax
c000d408:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d410:	e8 2f 7b 01 00       	call   c0024f44 <__divdf3>
c000d415:	83 c4 10             	add    esp,0x10
c000d418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d41c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d420:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d423:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d42a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43e:	e8 ce 80 01 00       	call   c0025511 <__gtdf2>
c000d443:	83 c4 10             	add    esp,0x10
c000d446:	85 c0                	test   eax,eax
c000d448:	7e 2d                	jle    c000d477 <sinc_mono_vari_process+0x152>
c000d44a:	68 00 00 f0 3f       	push   0x3ff00000
c000d44f:	6a 00                	push   0x0
c000d451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d459:	e8 d1 80 01 00       	call   c002552f <__ltdf2>
c000d45e:	83 c4 10             	add    esp,0x10
c000d461:	85 c0                	test   eax,eax
c000d463:	79 4d                	jns    c000d4b2 <sinc_mono_vari_process+0x18d>
c000d465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d469:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d475:	eb 1b                	jmp    c000d492 <sinc_mono_vari_process+0x16d>
c000d477:	68 00 00 f0 3f       	push   0x3ff00000
c000d47c:	6a 00                	push   0x0
c000d47e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d486:	e8 a4 80 01 00       	call   c002552f <__ltdf2>
c000d48b:	83 c4 10             	add    esp,0x10
c000d48e:	85 c0                	test   eax,eax
c000d490:	79 20                	jns    c000d4b2 <sinc_mono_vari_process+0x18d>
c000d492:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d496:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d49a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a2:	e8 9d 7a 01 00       	call   c0024f44 <__divdf3>
c000d4a7:	83 c4 10             	add    esp,0x10
c000d4aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b2:	50                   	push   eax
c000d4b3:	50                   	push   eax
c000d4b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4bc:	e8 1f 82 01 00       	call   c00256e0 <lrint>
c000d4c1:	40                   	inc    eax
c000d4c2:	0f af c7             	imul   eax,edi
c000d4c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4d3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4db:	58                   	pop    eax
c000d4dc:	5a                   	pop    edx
c000d4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e5:	e8 f6 81 01 00       	call   c00256e0 <lrint>
c000d4ea:	83 ec 0c             	sub    esp,0xc
c000d4ed:	50                   	push   eax
c000d4ee:	e8 d0 7d 01 00       	call   c00252c3 <__floatsidf>
c000d4f3:	83 c4 10             	add    esp,0x10
c000d4f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4fe:	52                   	push   edx
c000d4ff:	50                   	push   eax
c000d500:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d504:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d508:	e8 27 77 01 00       	call   c0024c34 <__subdf3>
c000d50d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d511:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d515:	83 c4 20             	add    esp,0x20
c000d518:	6a 00                	push   0x0
c000d51a:	6a 00                	push   0x0
c000d51c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d524:	e8 06 80 01 00       	call   c002552f <__ltdf2>
c000d529:	83 c4 10             	add    esp,0x10
c000d52c:	85 c0                	test   eax,eax
c000d52e:	79 1f                	jns    c000d54f <sinc_mono_vari_process+0x22a>
c000d530:	68 00 00 f0 3f       	push   0x3ff00000
c000d535:	6a 00                	push   0x0
c000d537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53f:	e8 9f 70 01 00       	call   c00245e3 <__adddf3>
c000d544:	83 c4 10             	add    esp,0x10
c000d547:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d54b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d54f:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d552:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d555:	83 ec 10             	sub    esp,0x10
c000d558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d560:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d564:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d568:	e8 c7 76 01 00       	call   c0024c34 <__subdf3>
c000d56d:	83 c4 18             	add    esp,0x18
c000d570:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d574:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d578:	52                   	push   edx
c000d579:	50                   	push   eax
c000d57a:	e8 61 81 01 00       	call   c00256e0 <lrint>
c000d57f:	0f af f8             	imul   edi,eax
c000d582:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d585:	31 ff                	xor    edi,edi
c000d587:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d58c:	99                   	cdq    
c000d58d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d590:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d593:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d59b:	55                   	push   ebp
c000d59c:	57                   	push   edi
c000d59d:	e8 a2 79 01 00       	call   c0024f44 <__divdf3>
c000d5a2:	83 c4 10             	add    esp,0x10
c000d5a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5ad:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5b2:	68 23 42 92 0c       	push   0xc924223
c000d5b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bf:	e8 1f 70 01 00       	call   c00245e3 <__adddf3>
c000d5c4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5c8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5cc:	83 c4 20             	add    esp,0x20
c000d5cf:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5d3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5da:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5dd:	7d 54                	jge    c000d633 <sinc_mono_vari_process+0x30e>
c000d5df:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5e5:	01 c8                	add    eax,ecx
c000d5e7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5ea:	99                   	cdq    
c000d5eb:	f7 f9                	idiv   ecx
c000d5ed:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5f1:	7d 0c                	jge    c000d5ff <sinc_mono_vari_process+0x2da>
c000d5f3:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d5f6:	85 ff                	test   edi,edi
c000d5f8:	79 73                	jns    c000d66d <sinc_mono_vari_process+0x348>
c000d5fa:	e9 ee 00 00 00       	jmp    c000d6ed <sinc_mono_vari_process+0x3c8>
c000d5ff:	50                   	push   eax
c000d600:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d604:	56                   	push   esi
c000d605:	53                   	push   ebx
c000d606:	e8 8d e0 ff ff       	call   c000b698 <prepare_data>
c000d60b:	89 c2                	mov    edx,eax
c000d60d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d611:	83 c4 10             	add    esp,0x10
c000d614:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d617:	85 d2                	test   edx,edx
c000d619:	0f 85 e6 03 00 00    	jne    c000da05 <sinc_mono_vari_process+0x6e0>
c000d61f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d622:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d625:	01 c8                	add    eax,ecx
c000d627:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d62a:	99                   	cdq    
c000d62b:	f7 f9                	idiv   ecx
c000d62d:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d631:	7c c0                	jl     c000d5f3 <sinc_mono_vari_process+0x2ce>
c000d633:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d637:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d63b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d63f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d642:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d649:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d64d:	89 01                	mov    DWORD PTR [ecx],eax
c000d64f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d652:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d655:	99                   	cdq    
c000d656:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d659:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d65c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d65f:	99                   	cdq    
c000d660:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d663:	31 d2                	xor    edx,edx
c000d665:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d668:	e9 98 03 00 00       	jmp    c000da05 <sinc_mono_vari_process+0x6e0>
c000d66d:	83 ec 0c             	sub    esp,0xc
c000d670:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d673:	e8 4b 7c 01 00       	call   c00252c3 <__floatsidf>
c000d678:	83 c4 10             	add    esp,0x10
c000d67b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d67f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d68b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d693:	e8 4b 6f 01 00       	call   c00245e3 <__adddf3>
c000d698:	83 c4 10             	add    esp,0x10
c000d69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6b3:	e8 2b 6f 01 00       	call   c00245e3 <__adddf3>
c000d6b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6bf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6c3:	e8 fb 7b 01 00       	call   c00252c3 <__floatsidf>
c000d6c8:	83 c4 10             	add    esp,0x10
c000d6cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6d3:	52                   	push   edx
c000d6d4:	50                   	push   eax
c000d6d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6dd:	e8 2f 7e 01 00       	call   c0025511 <__gtdf2>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	85 c0                	test   eax,eax
c000d6e7:	0f 8f 46 ff ff ff    	jg     c000d633 <sinc_mono_vari_process+0x30e>
c000d6ed:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6f1:	0f 8e f5 00 00 00    	jle    c000d7ec <sinc_mono_vari_process+0x4c7>
c000d6f7:	83 ec 10             	sub    esp,0x10
c000d6fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d6fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d700:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d704:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d707:	ff 30                	push   DWORD PTR [eax]
c000d709:	e8 26 75 01 00       	call   c0024c34 <__subdf3>
c000d70e:	83 c4 18             	add    esp,0x18
c000d711:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d715:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d719:	52                   	push   edx
c000d71a:	50                   	push   eax
c000d71b:	e8 a0 7f 01 00       	call   c00256c0 <fabs>
c000d720:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d724:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d728:	83 c4 10             	add    esp,0x10
c000d72b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d730:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d735:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d739:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d73d:	e8 cf 7d 01 00       	call   c0025511 <__gtdf2>
c000d742:	83 c4 10             	add    esp,0x10
c000d745:	85 c0                	test   eax,eax
c000d747:	0f 8e 9f 00 00 00    	jle    c000d7ec <sinc_mono_vari_process+0x4c7>
c000d74d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d751:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d754:	8b 00                	mov    eax,DWORD PTR [eax]
c000d756:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d75a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d75e:	52                   	push   edx
c000d75f:	50                   	push   eax
c000d760:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d763:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d766:	e8 c9 74 01 00       	call   c0024c34 <__subdf3>
c000d76b:	5f                   	pop    edi
c000d76c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d770:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d774:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d777:	e8 47 7b 01 00       	call   c00252c3 <__floatsidf>
c000d77c:	83 c4 10             	add    esp,0x10
c000d77f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d783:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d787:	52                   	push   edx
c000d788:	50                   	push   eax
c000d789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d791:	e8 ca 74 01 00       	call   c0024c60 <__muldf3>
c000d796:	5d                   	pop    ebp
c000d797:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d79b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d79f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7a2:	e8 1c 7b 01 00       	call   c00252c3 <__floatsidf>
c000d7a7:	83 c4 10             	add    esp,0x10
c000d7aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7b2:	52                   	push   edx
c000d7b3:	50                   	push   eax
c000d7b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7bc:	e8 83 77 01 00       	call   c0024f44 <__divdf3>
c000d7c1:	83 c4 10             	add    esp,0x10
c000d7c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7dc:	e8 02 6e 01 00       	call   c00245e3 <__adddf3>
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ec:	83 ec 0c             	sub    esp,0xc
c000d7ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d7f2:	e8 cc 7a 01 00       	call   c00252c3 <__floatsidf>
c000d7f7:	83 c4 10             	add    esp,0x10
c000d7fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7fe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d812:	e8 18 7d 01 00       	call   c002552f <__ltdf2>
c000d817:	83 c4 10             	add    esp,0x10
c000d81a:	85 c0                	test   eax,eax
c000d81c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d820:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d824:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d828:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d82c:	78 10                	js     c000d83e <sinc_mono_vari_process+0x519>
c000d82e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d832:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d836:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d83a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d83e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d842:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d846:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d84a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d84e:	e8 0d 74 01 00       	call   c0024c60 <__muldf3>
c000d853:	59                   	pop    ecx
c000d854:	5f                   	pop    edi
c000d855:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d859:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d861:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d865:	e8 07 de ff ff       	call   c000b671 <double_to_fp>
c000d86a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d86e:	89 c7                	mov    edi,eax
c000d870:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d874:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d878:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d87c:	e8 df 73 01 00       	call   c0024c60 <__muldf3>
c000d881:	83 c4 18             	add    esp,0x18
c000d884:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d888:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d88c:	52                   	push   edx
c000d88d:	50                   	push   eax
c000d88e:	e8 de dd ff ff       	call   c000b671 <double_to_fp>
c000d893:	83 ec 0c             	sub    esp,0xc
c000d896:	89 c5                	mov    ebp,eax
c000d898:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d89b:	e8 23 7a 01 00       	call   c00252c3 <__floatsidf>
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8a7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8ab:	52                   	push   edx
c000d8ac:	50                   	push   eax
c000d8ad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b5:	e8 8a 76 01 00       	call   c0024f44 <__divdf3>
c000d8ba:	83 c4 10             	add    esp,0x10
c000d8bd:	89 e9                	mov    ecx,ebp
c000d8bf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8c3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8c7:	89 d8                	mov    eax,ebx
c000d8c9:	89 fa                	mov    edx,edi
c000d8cb:	e8 ee bd ff ff       	call   c00096be <calc_output_single>
c000d8d0:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8d3:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8da:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8de:	52                   	push   edx
c000d8df:	50                   	push   eax
c000d8e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e8:	e8 73 73 01 00       	call   c0024c60 <__muldf3>
c000d8ed:	59                   	pop    ecx
c000d8ee:	59                   	pop    ecx
c000d8ef:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8ff:	e8 2f 7c 01 00       	call   c0025533 <__truncdfsf2>
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d90a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d90d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91d:	e8 22 76 01 00       	call   c0024f44 <__divdf3>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d929:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d935:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d939:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d93d:	e8 a1 6c 01 00       	call   c00245e3 <__adddf3>
c000d942:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d946:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d94a:	83 c4 18             	add    esp,0x18
c000d94d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d951:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d955:	e8 86 7d 01 00       	call   c00256e0 <lrint>
c000d95a:	83 ec 0c             	sub    esp,0xc
c000d95d:	50                   	push   eax
c000d95e:	e8 60 79 01 00       	call   c00252c3 <__floatsidf>
c000d963:	83 c4 10             	add    esp,0x10
c000d966:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d96a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d96e:	52                   	push   edx
c000d96f:	50                   	push   eax
c000d970:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d974:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d978:	e8 b7 72 01 00       	call   c0024c34 <__subdf3>
c000d97d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d981:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d985:	83 c4 20             	add    esp,0x20
c000d988:	6a 00                	push   0x0
c000d98a:	6a 00                	push   0x0
c000d98c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d990:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d994:	e8 96 7b 01 00       	call   c002552f <__ltdf2>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	85 c0                	test   eax,eax
c000d99e:	79 20                	jns    c000d9c0 <sinc_mono_vari_process+0x69b>
c000d9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9b0:	e8 2e 6c 01 00       	call   c00245e3 <__adddf3>
c000d9b5:	83 c4 10             	add    esp,0x10
c000d9b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9c0:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9c3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9c6:	83 ec 10             	sub    esp,0x10
c000d9c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d9:	e8 56 72 01 00       	call   c0024c34 <__subdf3>
c000d9de:	83 c4 18             	add    esp,0x18
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	52                   	push   edx
c000d9ea:	50                   	push   eax
c000d9eb:	e8 f0 7c 01 00       	call   c00256e0 <lrint>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	0f af f8             	imul   edi,eax
c000d9f6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9f9:	99                   	cdq    
c000d9fa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9fd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da00:	e9 d2 fb ff ff       	jmp    c000d5d7 <sinc_mono_vari_process+0x2b2>
c000da05:	83 c4 4c             	add    esp,0x4c
c000da08:	89 d0                	mov    eax,edx
c000da0a:	5b                   	pop    ebx
c000da0b:	5e                   	pop    esi
c000da0c:	5f                   	pop    edi
c000da0d:	5d                   	pop    ebp
c000da0e:	c3                   	ret    

c000da0f <sinc_get_name>:
c000da0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da13:	31 c0                	xor    eax,eax
c000da15:	83 fa 02             	cmp    edx,0x2
c000da18:	77 07                	ja     c000da21 <sinc_get_name+0x12>
c000da1a:	8b 04 95 e4 6d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd921c]
c000da21:	c3                   	ret    

c000da22 <sinc_get_description>:
c000da22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da26:	31 c0                	xor    eax,eax
c000da28:	83 fa 02             	cmp    edx,0x2
c000da2b:	77 07                	ja     c000da34 <sinc_get_description+0x12>
c000da2d:	8b 04 95 d8 6d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9228]
c000da34:	c3                   	ret    

c000da35 <sinc_set_converter>:
c000da35:	53                   	push   ebx
c000da36:	81 ec 58 08 00 00    	sub    esp,0x858
c000da3c:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da43:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da46:	85 c0                	test   eax,eax
c000da48:	74 13                	je     c000da5d <sinc_set_converter+0x28>
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	50                   	push   eax
c000da4e:	e8 8f 1a 00 00       	call   c000f4e2 <free>
c000da53:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da5a:	83 c4 10             	add    esp,0x10
c000da5d:	50                   	push   eax
c000da5e:	68 44 08 00 00       	push   0x844
c000da63:	6a 00                	push   0x0
c000da65:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da69:	50                   	push   eax
c000da6a:	e8 0e 2c ff ff       	call   c000067d <memset>
c000da6f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da72:	83 c4 10             	add    esp,0x10
c000da75:	b8 0b 00 00 00       	mov    eax,0xb
c000da7a:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da80:	7f 6e                	jg     c000daf0 <sinc_set_converter+0xbb>
c000da82:	83 fa 01             	cmp    edx,0x1
c000da85:	75 10                	jne    c000da97 <sinc_set_converter+0x62>
c000da87:	c7 43 24 25 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d325
c000da8e:	c7 43 20 25 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d325
c000da95:	eb 4d                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000da97:	83 fa 02             	cmp    edx,0x2
c000da9a:	75 10                	jne    c000daac <sinc_set_converter+0x77>
c000da9c:	c7 43 24 60 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc60
c000daa3:	c7 43 20 60 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc60
c000daaa:	eb 38                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000daac:	83 fa 04             	cmp    edx,0x4
c000daaf:	75 10                	jne    c000dac1 <sinc_set_converter+0x8c>
c000dab1:	c7 43 24 9b c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c59b
c000dab8:	c7 43 20 9b c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c59b
c000dabf:	eb 23                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000dac1:	83 fa 06             	cmp    edx,0x6
c000dac4:	75 10                	jne    c000dad6 <sinc_set_converter+0xa1>
c000dac6:	c7 43 24 d6 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bed6
c000dacd:	c7 43 20 d6 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bed6
c000dad4:	eb 0e                	jmp    c000dae4 <sinc_set_converter+0xaf>
c000dad6:	c7 43 24 12 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b812
c000dadd:	c7 43 20 12 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b812
c000dae4:	c7 43 28 c5 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aac5
c000daeb:	b8 0a 00 00 00       	mov    eax,0xa
c000daf0:	81 c4 58 08 00 00    	add    esp,0x858
c000daf6:	5b                   	pop    ebx
c000daf7:	c3                   	ret    

c000daf8 <zoh_vari_process>:
c000daf8:	55                   	push   ebp
c000daf9:	31 d2                	xor    edx,edx
c000dafb:	57                   	push   edi
c000dafc:	56                   	push   esi
c000dafd:	53                   	push   ebx
c000dafe:	83 ec 3c             	sub    esp,0x3c
c000db01:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db05:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db09:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db0d:	0f 8e 80 06 00 00    	jle    c000e193 <zoh_vari_process+0x69b>
c000db13:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db16:	ba 05 00 00 00       	mov    edx,0x5
c000db1b:	85 db                	test   ebx,ebx
c000db1d:	0f 84 70 06 00 00    	je     c000e193 <zoh_vari_process+0x69b>
c000db23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db26:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db2a:	74 19                	je     c000db45 <zoh_vari_process+0x4d>
c000db2c:	31 d2                	xor    edx,edx
c000db2e:	39 c2                	cmp    edx,eax
c000db30:	7d 0c                	jge    c000db3e <zoh_vari_process+0x46>
c000db32:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db34:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db37:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db3b:	42                   	inc    edx
c000db3c:	eb f0                	jmp    c000db2e <zoh_vari_process+0x36>
c000db3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db45:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db48:	0f af d0             	imul   edx,eax
c000db4b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db4e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db52:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db59:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db5c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db63:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db66:	8b 07                	mov    eax,DWORD PTR [edi]
c000db68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db70:	68 00 00 70 3f       	push   0x3f700000
c000db75:	6a 00                	push   0x0
c000db77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7f:	e8 ab 79 01 00       	call   c002552f <__ltdf2>
c000db84:	83 c4 10             	add    esp,0x10
c000db87:	ba 16 00 00 00       	mov    edx,0x16
c000db8c:	85 c0                	test   eax,eax
c000db8e:	0f 88 ff 05 00 00    	js     c000e193 <zoh_vari_process+0x69b>
c000db94:	68 00 00 70 40       	push   0x40700000
c000db99:	6a 00                	push   0x0
c000db9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dba3:	e8 69 79 01 00       	call   c0025511 <__gtdf2>
c000dba8:	83 c4 10             	add    esp,0x10
c000dbab:	ba 16 00 00 00       	mov    edx,0x16
c000dbb0:	85 c0                	test   eax,eax
c000dbb2:	0f 8f db 05 00 00    	jg     c000e193 <zoh_vari_process+0x69b>
c000dbb8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbbb:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000dbcb:	6a 00                	push   0x0
c000dbcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd5:	e8 55 79 01 00       	call   c002552f <__ltdf2>
c000dbda:	83 c4 10             	add    esp,0x10
c000dbdd:	85 c0                	test   eax,eax
c000dbdf:	0f 89 da 01 00 00    	jns    c000ddbf <zoh_vari_process+0x2c7>
c000dbe5:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbe8:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbeb:	0f 8d ce 01 00 00    	jge    c000ddbf <zoh_vari_process+0x2c7>
c000dbf1:	83 ec 0c             	sub    esp,0xc
c000dbf4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbf7:	e8 c7 76 01 00       	call   c00252c3 <__floatsidf>
c000dbfc:	83 c4 10             	add    esp,0x10
c000dbff:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc16:	e8 45 70 01 00       	call   c0024c60 <__muldf3>
c000dc1b:	59                   	pop    ecx
c000dc1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc24:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc27:	e8 97 76 01 00       	call   c00252c3 <__floatsidf>
c000dc2c:	83 c4 10             	add    esp,0x10
c000dc2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc37:	52                   	push   edx
c000dc38:	50                   	push   eax
c000dc39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc41:	e8 9d 69 01 00       	call   c00245e3 <__adddf3>
c000dc46:	59                   	pop    ecx
c000dc47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc4b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc4f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc52:	e8 6c 76 01 00       	call   c00252c3 <__floatsidf>
c000dc57:	83 c4 10             	add    esp,0x10
c000dc5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc62:	52                   	push   edx
c000dc63:	50                   	push   eax
c000dc64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc6c:	e8 bc 78 01 00       	call   c002552d <__gedf2>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	85 c0                	test   eax,eax
c000dc76:	0f 89 43 01 00 00    	jns    c000ddbf <zoh_vari_process+0x2c7>
c000dc7c:	85 ed                	test   ebp,ebp
c000dc7e:	0f 8e ec 00 00 00    	jle    c000dd70 <zoh_vari_process+0x278>
c000dc84:	83 ec 10             	sub    esp,0x10
c000dc87:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc8a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc8d:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc90:	ff 37                	push   DWORD PTR [edi]
c000dc92:	e8 9d 6f 01 00       	call   c0024c34 <__subdf3>
c000dc97:	83 c4 18             	add    esp,0x18
c000dc9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dca2:	52                   	push   edx
c000dca3:	50                   	push   eax
c000dca4:	e8 17 7a 01 00       	call   c00256c0 <fabs>
c000dca9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcb1:	83 c4 10             	add    esp,0x10
c000dcb4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcb9:	68 23 42 92 0c       	push   0xc924223
c000dcbe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc6:	e8 46 78 01 00       	call   c0025511 <__gtdf2>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	85 c0                	test   eax,eax
c000dcd0:	0f 8e 9a 00 00 00    	jle    c000dd70 <zoh_vari_process+0x278>
c000dcd6:	8b 07                	mov    eax,DWORD PTR [edi]
c000dcd8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dcdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dce2:	52                   	push   edx
c000dce3:	50                   	push   eax
c000dce4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dce7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcea:	e8 45 6f 01 00       	call   c0024c34 <__subdf3>
c000dcef:	59                   	pop    ecx
c000dcf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcf4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcf8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcfb:	e8 c3 75 01 00       	call   c00252c3 <__floatsidf>
c000dd00:	83 c4 10             	add    esp,0x10
c000dd03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd07:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd0b:	52                   	push   edx
c000dd0c:	50                   	push   eax
c000dd0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd15:	e8 46 6f 01 00       	call   c0024c60 <__muldf3>
c000dd1a:	5d                   	pop    ebp
c000dd1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd1f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd23:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd26:	e8 98 75 01 00       	call   c00252c3 <__floatsidf>
c000dd2b:	83 c4 10             	add    esp,0x10
c000dd2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd36:	52                   	push   edx
c000dd37:	50                   	push   eax
c000dd38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd40:	e8 ff 71 01 00       	call   c0024f44 <__divdf3>
c000dd45:	83 c4 10             	add    esp,0x10
c000dd48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd60:	e8 7e 68 01 00       	call   c00245e3 <__adddf3>
c000dd65:	83 c4 10             	add    esp,0x10
c000dd68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd70:	31 c0                	xor    eax,eax
c000dd72:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd75:	7e 13                	jle    c000dd8a <zoh_vari_process+0x292>
c000dd77:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd7b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd7e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd81:	40                   	inc    eax
c000dd82:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd85:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd88:	eb e8                	jmp    c000dd72 <zoh_vari_process+0x27a>
c000dd8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd92:	68 00 00 f0 3f       	push   0x3ff00000
c000dd97:	6a 00                	push   0x0
c000dd99:	e8 a6 71 01 00       	call   c0024f44 <__divdf3>
c000dd9e:	83 c4 10             	add    esp,0x10
c000dda1:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dda8:	52                   	push   edx
c000dda9:	50                   	push   eax
c000ddaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddb2:	e8 2c 68 01 00       	call   c00245e3 <__adddf3>
c000ddb7:	83 c4 10             	add    esp,0x10
c000ddba:	e9 ff fd ff ff       	jmp    c000dbbe <zoh_vari_process+0xc6>
c000ddbf:	55                   	push   ebp
c000ddc0:	55                   	push   ebp
c000ddc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc9:	e8 12 79 01 00       	call   c00256e0 <lrint>
c000ddce:	83 ec 0c             	sub    esp,0xc
c000ddd1:	50                   	push   eax
c000ddd2:	e8 ec 74 01 00       	call   c00252c3 <__floatsidf>
c000ddd7:	83 c4 10             	add    esp,0x10
c000ddda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dde2:	52                   	push   edx
c000dde3:	50                   	push   eax
c000dde4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dde8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddec:	e8 43 6e 01 00       	call   c0024c34 <__subdf3>
c000ddf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ddf5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ddf9:	83 c4 20             	add    esp,0x20
c000ddfc:	6a 00                	push   0x0
c000ddfe:	6a 00                	push   0x0
c000de00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de08:	e8 22 77 01 00       	call   c002552f <__ltdf2>
c000de0d:	83 c4 10             	add    esp,0x10
c000de10:	85 c0                	test   eax,eax
c000de12:	79 1e                	jns    c000de32 <zoh_vari_process+0x33a>
c000de14:	68 00 00 f0 3f       	push   0x3ff00000
c000de19:	6a 00                	push   0x0
c000de1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de23:	e8 bb 67 01 00       	call   c00245e3 <__adddf3>
c000de28:	83 c4 10             	add    esp,0x10
c000de2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000de2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de32:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de35:	83 ec 10             	sub    esp,0x10
c000de38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de48:	e8 e7 6d 01 00       	call   c0024c34 <__subdf3>
c000de4d:	83 c4 18             	add    esp,0x18
c000de50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de58:	52                   	push   edx
c000de59:	50                   	push   eax
c000de5a:	e8 81 78 01 00       	call   c00256e0 <lrint>
c000de5f:	83 c4 10             	add    esp,0x10
c000de62:	0f af e8             	imul   ebp,eax
c000de65:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de68:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de6b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de6f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de72:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de79:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de7c:	0f 8d 7a 02 00 00    	jge    c000e0fc <zoh_vari_process+0x604>
c000de82:	83 ec 0c             	sub    esp,0xc
c000de85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de88:	e8 36 74 01 00       	call   c00252c3 <__floatsidf>
c000de8d:	83 c4 10             	add    esp,0x10
c000de90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000de9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dea0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea8:	e8 b3 6d 01 00       	call   c0024c60 <__muldf3>
c000dead:	59                   	pop    ecx
c000deae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000deb2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000deb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deba:	e8 04 74 01 00       	call   c00252c3 <__floatsidf>
c000debf:	83 c4 10             	add    esp,0x10
c000dec2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dec6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000deca:	52                   	push   edx
c000decb:	50                   	push   eax
c000decc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ded0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ded4:	e8 0a 67 01 00       	call   c00245e3 <__adddf3>
c000ded9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000dedc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dee0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dee4:	e8 da 73 01 00       	call   c00252c3 <__floatsidf>
c000dee9:	83 c4 10             	add    esp,0x10
c000deec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000def0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000def4:	52                   	push   edx
c000def5:	50                   	push   eax
c000def6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defe:	e8 2e 76 01 00       	call   c0025531 <__ledf2>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	85 c0                	test   eax,eax
c000df08:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df0c:	0f 8f ea 01 00 00    	jg     c000e0fc <zoh_vari_process+0x604>
c000df12:	85 c9                	test   ecx,ecx
c000df14:	0f 8e ed 00 00 00    	jle    c000e007 <zoh_vari_process+0x50f>
c000df1a:	83 ec 10             	sub    esp,0x10
c000df1d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df20:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df23:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df26:	ff 37                	push   DWORD PTR [edi]
c000df28:	e8 07 6d 01 00       	call   c0024c34 <__subdf3>
c000df2d:	83 c4 18             	add    esp,0x18
c000df30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df38:	52                   	push   edx
c000df39:	50                   	push   eax
c000df3a:	e8 81 77 01 00       	call   c00256c0 <fabs>
c000df3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df43:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df47:	83 c4 10             	add    esp,0x10
c000df4a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df4f:	68 23 42 92 0c       	push   0xc924223
c000df54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5c:	e8 b0 75 01 00       	call   c0025511 <__gtdf2>
c000df61:	83 c4 10             	add    esp,0x10
c000df64:	85 c0                	test   eax,eax
c000df66:	0f 8e 9b 00 00 00    	jle    c000e007 <zoh_vari_process+0x50f>
c000df6c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df6e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df79:	52                   	push   edx
c000df7a:	50                   	push   eax
c000df7b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df7e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df81:	e8 ae 6c 01 00       	call   c0024c34 <__subdf3>
c000df86:	5d                   	pop    ebp
c000df87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df8b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df8f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df92:	e8 2c 73 01 00       	call   c00252c3 <__floatsidf>
c000df97:	83 c4 10             	add    esp,0x10
c000df9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfa2:	52                   	push   edx
c000dfa3:	50                   	push   eax
c000dfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfac:	e8 af 6c 01 00       	call   c0024c60 <__muldf3>
c000dfb1:	59                   	pop    ecx
c000dfb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfb6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfba:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfbd:	e8 01 73 01 00       	call   c00252c3 <__floatsidf>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfcd:	52                   	push   edx
c000dfce:	50                   	push   eax
c000dfcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd7:	e8 68 6f 01 00       	call   c0024f44 <__divdf3>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfe3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfeb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff7:	e8 e7 65 01 00       	call   c00245e3 <__adddf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e003:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e007:	31 d2                	xor    edx,edx
c000e009:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e00c:	39 d0                	cmp    eax,edx
c000e00e:	7e 1d                	jle    c000e02d <zoh_vari_process+0x535>
c000e010:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e013:	29 c1                	sub    ecx,eax
c000e015:	89 c8                	mov    eax,ecx
c000e017:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e019:	01 d0                	add    eax,edx
c000e01b:	42                   	inc    edx
c000e01c:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e01f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e022:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e025:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e028:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e02b:	eb dc                	jmp    c000e009 <zoh_vari_process+0x511>
c000e02d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e031:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e035:	68 00 00 f0 3f       	push   0x3ff00000
c000e03a:	6a 00                	push   0x0
c000e03c:	e8 03 6f 01 00       	call   c0024f44 <__divdf3>
c000e041:	83 c4 10             	add    esp,0x10
c000e044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e048:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e04c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e050:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05c:	e8 82 65 01 00       	call   c00245e3 <__adddf3>
c000e061:	5d                   	pop    ebp
c000e062:	59                   	pop    ecx
c000e063:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e067:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e06b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e073:	e8 68 76 01 00       	call   c00256e0 <lrint>
c000e078:	83 ec 0c             	sub    esp,0xc
c000e07b:	50                   	push   eax
c000e07c:	e8 42 72 01 00       	call   c00252c3 <__floatsidf>
c000e081:	83 c4 10             	add    esp,0x10
c000e084:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e088:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e08c:	52                   	push   edx
c000e08d:	50                   	push   eax
c000e08e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e092:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e096:	e8 99 6b 01 00       	call   c0024c34 <__subdf3>
c000e09b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e09f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0a3:	83 c4 20             	add    esp,0x20
c000e0a6:	6a 00                	push   0x0
c000e0a8:	6a 00                	push   0x0
c000e0aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0b2:	e8 78 74 01 00       	call   c002552f <__ltdf2>
c000e0b7:	83 c4 10             	add    esp,0x10
c000e0ba:	85 c0                	test   eax,eax
c000e0bc:	79 1e                	jns    c000e0dc <zoh_vari_process+0x5e4>
c000e0be:	68 00 00 f0 3f       	push   0x3ff00000
c000e0c3:	6a 00                	push   0x0
c000e0c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0cd:	e8 11 65 01 00       	call   c00245e3 <__adddf3>
c000e0d2:	83 c4 10             	add    esp,0x10
c000e0d5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0dc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0df:	83 ec 10             	sub    esp,0x10
c000e0e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0f2:	e8 3d 6b 01 00       	call   c0024c34 <__subdf3>
c000e0f7:	e9 51 fd ff ff       	jmp    c000de4d <zoh_vari_process+0x355>
c000e0fc:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e100:	7d 3a                	jge    c000e13c <zoh_vari_process+0x644>
c000e102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e106:	83 ec 0c             	sub    esp,0xc
c000e109:	29 e8                	sub    eax,ebp
c000e10b:	99                   	cdq    
c000e10c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e10f:	50                   	push   eax
c000e110:	e8 ae 71 01 00       	call   c00252c3 <__floatsidf>
c000e115:	83 c4 10             	add    esp,0x10
c000e118:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e11c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e120:	52                   	push   edx
c000e121:	50                   	push   eax
c000e122:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e126:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e12a:	e8 b4 64 01 00       	call   c00245e3 <__adddf3>
c000e12f:	83 c4 10             	add    esp,0x10
c000e132:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e135:	89 04 24             	mov    DWORD PTR [esp],eax
c000e138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e13f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e143:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e146:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e149:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e14c:	85 c0                	test   eax,eax
c000e14e:	7f 25                	jg     c000e175 <zoh_vari_process+0x67d>
c000e150:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e154:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e158:	89 07                	mov    DWORD PTR [edi],eax
c000e15a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e15d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e160:	99                   	cdq    
c000e161:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e164:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e167:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e16a:	99                   	cdq    
c000e16b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e16e:	31 d2                	xor    edx,edx
c000e170:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e173:	eb 1e                	jmp    c000e193 <zoh_vari_process+0x69b>
c000e175:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e178:	31 d2                	xor    edx,edx
c000e17a:	29 c8                	sub    eax,ecx
c000e17c:	c1 e0 02             	shl    eax,0x2
c000e17f:	39 d1                	cmp    ecx,edx
c000e181:	7e cd                	jle    c000e150 <zoh_vari_process+0x658>
c000e183:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e185:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e189:	83 c0 04             	add    eax,0x4
c000e18c:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e190:	42                   	inc    edx
c000e191:	eb ec                	jmp    c000e17f <zoh_vari_process+0x687>
c000e193:	83 c4 3c             	add    esp,0x3c
c000e196:	89 d0                	mov    eax,edx
c000e198:	5b                   	pop    ebx
c000e199:	5e                   	pop    esi
c000e19a:	5f                   	pop    edi
c000e19b:	5d                   	pop    ebp
c000e19c:	c3                   	ret    

c000e19d <zoh_reset>:
c000e19d:	83 ec 0c             	sub    esp,0xc
c000e1a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1a4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1a7:	85 c0                	test   eax,eax
c000e1a9:	74 20                	je     c000e1cb <zoh_reset+0x2e>
c000e1ab:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1ae:	83 c0 1c             	add    eax,0x1c
c000e1b1:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1b4:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1bb:	c1 e2 02             	shl    edx,0x2
c000e1be:	51                   	push   ecx
c000e1bf:	52                   	push   edx
c000e1c0:	6a 00                	push   0x0
c000e1c2:	50                   	push   eax
c000e1c3:	e8 b5 24 ff ff       	call   c000067d <memset>
c000e1c8:	83 c4 10             	add    esp,0x10
c000e1cb:	83 c4 0c             	add    esp,0xc
c000e1ce:	c3                   	ret    

c000e1cf <zoh_get_name>:
c000e1cf:	31 c0                	xor    eax,eax
c000e1d1:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1d6:	75 05                	jne    c000e1dd <zoh_get_name+0xe>
c000e1d8:	b8 fe 6e 02 c0       	mov    eax,0xc0026efe
c000e1dd:	c3                   	ret    

c000e1de <zoh_get_description>:
c000e1de:	31 c0                	xor    eax,eax
c000e1e0:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e5:	75 05                	jne    c000e1ec <zoh_get_description+0xe>
c000e1e7:	b8 0f 6f 02 c0       	mov    eax,0xc0026f0f
c000e1ec:	c3                   	ret    

c000e1ed <zoh_set_converter>:
c000e1ed:	53                   	push   ebx
c000e1ee:	b8 0a 00 00 00       	mov    eax,0xa
c000e1f3:	83 ec 08             	sub    esp,0x8
c000e1f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1fa:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e1ff:	75 6e                	jne    c000e26f <zoh_set_converter+0x82>
c000e201:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e204:	85 c0                	test   eax,eax
c000e206:	74 13                	je     c000e21b <zoh_set_converter+0x2e>
c000e208:	83 ec 0c             	sub    esp,0xc
c000e20b:	50                   	push   eax
c000e20c:	e8 d1 12 00 00       	call   c000f4e2 <free>
c000e211:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e218:	83 c4 10             	add    esp,0x10
c000e21b:	50                   	push   eax
c000e21c:	50                   	push   eax
c000e21d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e220:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e227:	50                   	push   eax
c000e228:	6a 01                	push   0x1
c000e22a:	e8 d3 12 00 00       	call   c000f502 <calloc>
c000e22f:	83 c4 10             	add    esp,0x10
c000e232:	89 c2                	mov    edx,eax
c000e234:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e237:	85 d2                	test   edx,edx
c000e239:	b8 01 00 00 00       	mov    eax,0x1
c000e23e:	74 2f                	je     c000e26f <zoh_set_converter+0x82>
c000e240:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e243:	83 ec 0c             	sub    esp,0xc
c000e246:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e249:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e24f:	c7 43 24 f8 da 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000daf8
c000e256:	c7 43 20 f8 da 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000daf8
c000e25d:	c7 43 28 9d e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e19d
c000e264:	53                   	push   ebx
c000e265:	e8 33 ff ff ff       	call   c000e19d <zoh_reset>
c000e26a:	83 c4 10             	add    esp,0x10
c000e26d:	31 c0                	xor    eax,eax
c000e26f:	83 c4 08             	add    esp,0x8
c000e272:	5b                   	pop    ebx
c000e273:	c3                   	ret    

c000e274 <CPU::current()>:
c000e274:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c000e279:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e27f:	90                   	nop
c000e280:	c3                   	ret    

c000e281 <operator new(unsigned long)>:
c000e281:	83 ec 0c             	sub    esp,0xc
c000e284:	83 ec 0c             	sub    esp,0xc
c000e287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e28b:	e8 42 12 00 00       	call   c000f4d2 <malloc>
c000e290:	83 c4 10             	add    esp,0x10
c000e293:	83 c4 0c             	add    esp,0xc
c000e296:	c3                   	ret    
c000e297:	90                   	nop

c000e298 <Computer::close(int, int, void*)>:
c000e298:	57                   	push   edi
c000e299:	56                   	push   esi
c000e29a:	53                   	push   ebx
c000e29b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e29f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2a7:	83 ec 0c             	sub    esp,0xc
c000e2aa:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2b0:	e8 f5 58 00 00       	call   c0013baa <Device::closeAll()>
c000e2b5:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2c0:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2c4:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2cc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d4:	5b                   	pop    ebx
c000e2d5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2d8:	5e                   	pop    esi
c000e2d9:	5f                   	pop    edi
c000e2da:	ff e0                	jmp    eax

c000e2dc <Computer::Computer()>:
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e3:	83 ec 08             	sub    esp,0x8
c000e2e6:	68 46 6f 02 c0       	push   0xc0026f46
c000e2eb:	50                   	push   eax
c000e2ec:	e8 33 59 00 00       	call   c0013c24 <Device::Device(char const*)>
c000e2f1:	83 c4 10             	add    esp,0x10
c000e2f4:	ba 10 71 02 c0       	mov    edx,0xc0027110
c000e2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fd:	89 10                	mov    DWORD PTR [eax],edx
c000e2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e303:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e325:	83 ca 04             	or     edx,0x4
c000e328:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e332:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e338:	0f b6 d0             	movzx  edx,al
c000e33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e350:	0f b6 d0             	movzx  edx,al
c000e353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e357:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e360:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e366:	8d 50 01             	lea    edx,[eax+0x1]
c000e369:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e36d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e373:	0f b6 d0             	movzx  edx,al
c000e376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e37e:	83 e1 3f             	and    ecx,0x3f
c000e381:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e389:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e38f:	0f b6 d0             	movzx  edx,al
c000e392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e396:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e39d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3a7:	0f b6 d0             	movzx  edx,al
c000e3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ae:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3bd:	8d 50 01             	lea    edx,[eax+0x1]
c000e3c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3c4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3ca:	0f b6 d0             	movzx  edx,al
c000e3cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3d5:	83 e1 3f             	and    ecx,0x3f
c000e3d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3e6:	0f b6 d0             	movzx  edx,al
c000e3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ed:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3fe:	0f b6 d0             	movzx  edx,al
c000e401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e405:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e414:	8d 50 01             	lea    edx,[eax+0x1]
c000e417:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e41b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e421:	0f b6 d0             	movzx  edx,al
c000e424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e428:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e42c:	83 e1 3f             	and    ecx,0x3f
c000e42f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e433:	90                   	nop
c000e434:	83 c4 0c             	add    esp,0xc
c000e437:	c3                   	ret    

c000e438 <Computer::setBootMessage(char const*)>:
c000e438:	c3                   	ret    
c000e439:	90                   	nop

c000e43a <Computer::start()>:
c000e43a:	56                   	push   esi
c000e43b:	53                   	push   ebx
c000e43c:	50                   	push   eax
c000e43d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e441:	e8 cf d9 00 00       	call   c001be15 <lockScheduler()>
c000e446:	e8 05 dd 00 00       	call   c001c150 <schedule()>
c000e44b:	e8 c7 d9 00 00       	call   c001be17 <unlockScheduler()>
c000e450:	fb                   	sti    
c000e451:	83 ec 0c             	sub    esp,0xc
c000e454:	68 3b 07 00 00       	push   0x73b
c000e459:	e8 74 10 00 00       	call   c000f4d2 <malloc>
c000e45e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e465:	89 c6                	mov    esi,eax
c000e467:	ff 35 94 bf 02 c0    	push   DWORD PTR ds:0xc002bf94
c000e46d:	68 4f 6f 02 c0       	push   0xc0026f4f
c000e472:	6a 01                	push   0x1
c000e474:	50                   	push   eax
c000e475:	e8 ea d7 00 00       	call   c001bc64 <Process::Process(bool, char const*, Process*, char**)>
c000e47a:	83 c4 20             	add    esp,0x20
c000e47d:	68 ff 00 00 00       	push   0xff
c000e482:	6a 00                	push   0x0
c000e484:	68 67 ee 00 c0       	push   0xc000ee67
c000e489:	56                   	push   esi
c000e48a:	e8 b7 da 00 00       	call   c001bf46 <Process::createThread(void (*)(void*), void*, int)>
c000e48f:	6a 7a                	push   0x7a
c000e491:	6a 00                	push   0x0
c000e493:	68 7f c7 01 c0       	push   0xc001c77f
c000e498:	ff 35 94 bf 02 c0    	push   DWORD PTR ds:0xc002bf94
c000e49e:	e8 a3 da 00 00       	call   c001bf46 <Process::createThread(void (*)(void*), void*, int)>
c000e4a3:	83 c4 20             	add    esp,0x20
c000e4a6:	a3 48 bf 02 c0       	mov    ds:0xc002bf48,eax
c000e4ab:	e8 ed e5 00 00       	call   c001ca9d <Vm::initialise8086()>
c000e4b0:	c6 05 8d aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa8d,0x1
c000e4b7:	e8 e4 44 00 00       	call   c00129a0 <initVFS()>
c000e4bc:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	6a 00                	push   0x0
c000e4ca:	50                   	push   eax
c000e4cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4ce:	e8 55 c1 00 00       	call   c001a628 <setupSystemCalls()>
c000e4d3:	e8 da 4f 00 00       	call   c00134b2 <loadClockSettings()>
c000e4d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4db:	e8 9e 56 00 00       	call   c0013b7e <Device::loadDriversForAll()>
c000e4e0:	5a                   	pop    edx
c000e4e1:	8b 1d 88 aa 02 c0    	mov    ebx,DWORD PTR ds:0xc002aa88
c000e4e7:	59                   	pop    ecx
c000e4e8:	6a 01                	push   0x1
c000e4ea:	68 5c 6f 02 c0       	push   0xc0026f5c
c000e4ef:	e8 e4 d2 00 00       	call   c001b7d8 <Thr::loadDLL(char const*, bool)>
c000e4f4:	5e                   	pop    esi
c000e4f5:	5a                   	pop    edx
c000e4f6:	53                   	push   ebx
c000e4f7:	50                   	push   eax
c000e4f8:	e8 ea d4 00 00       	call   c001b9e7 <Thr::executeDLL(unsigned long, void*)>
c000e4fd:	c7 04 24 20 81 02 c0 	mov    DWORD PTR [esp],0xc0028120
c000e504:	e8 3c 41 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	83 ec 0c             	sub    esp,0xc
c000e50f:	6a 02                	push   0x2
c000e511:	e8 94 dd 00 00       	call   c001c2aa <blockTask(TaskState)>
c000e516:	83 c4 10             	add    esp,0x10
c000e519:	eb f1                	jmp    c000e50c <Computer::start()+0xd2>

c000e51b <firstTask()>:
c000e51b:	83 ec 18             	sub    esp,0x18
c000e51e:	ff 35 88 aa 02 c0    	push   DWORD PTR ds:0xc002aa88
c000e524:	e8 11 ff ff ff       	call   c000e43a <Computer::start()>
c000e529:	90                   	nop

c000e52a <Computer::detectFeatures()>:
c000e52a:	55                   	push   ebp
c000e52b:	57                   	push   edi
c000e52c:	56                   	push   esi
c000e52d:	53                   	push   ebx
c000e52e:	83 ec 1c             	sub    esp,0x1c
c000e531:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e535:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e53f:	e8 55 1d ff ff       	call   c0000299 <detectCPUID>
c000e544:	85 c0                	test   eax,eax
c000e546:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54c:	0f 95 c2             	setne  dl
c000e54f:	83 e0 fd             	and    eax,0xfffffffd
c000e552:	d1 e2                	shl    edx,1
c000e554:	09 d0                	or     eax,edx
c000e556:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55c:	a8 02                	test   al,0x2
c000e55e:	75 46                	jne    c000e5a6 <Computer::detectFeatures()+0x7c>
c000e560:	f6 05 a1 aa 02 c0 04 	test   BYTE PTR ds:0xc002aaa1,0x4
c000e567:	74 07                	je     c000e570 <Computer::detectFeatures()+0x46>
c000e569:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e570:	e8 b1 51 01 00       	call   c0023726 <x87Detect>
c000e575:	83 e0 01             	and    eax,0x1
c000e578:	c1 e0 04             	shl    eax,0x4
c000e57b:	88 c2                	mov    dl,al
c000e57d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e583:	83 e0 ef             	and    eax,0xffffffef
c000e586:	09 d0                	or     eax,edx
c000e588:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e58e:	a8 10                	test   al,0x10
c000e590:	0f 85 2a 01 00 00    	jne    c000e6c0 <Computer::detectFeatures()+0x196>
c000e596:	84 c0                	test   al,al
c000e598:	0f 88 45 01 00 00    	js     c000e6e3 <Computer::detectFeatures()+0x1b9>
c000e59e:	83 c4 1c             	add    esp,0x1c
c000e5a1:	5b                   	pop    ebx
c000e5a2:	5e                   	pop    esi
c000e5a3:	5f                   	pop    edi
c000e5a4:	5d                   	pop    ebp
c000e5a5:	c3                   	ret    
c000e5a6:	83 ec 0c             	sub    esp,0xc
c000e5a9:	6a 20                	push   0x20
c000e5ab:	e8 b6 96 00 00       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b0:	83 e0 01             	and    eax,0x1
c000e5b3:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5ba:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c0:	83 e0 f7             	and    eax,0xfffffff7
c000e5c3:	09 d0                	or     eax,edx
c000e5c5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cb:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d2:	e8 8f 96 00 00       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d7:	83 e0 01             	and    eax,0x1
c000e5da:	88 c2                	mov    dl,al
c000e5dc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e2:	83 e0 fe             	and    eax,0xfffffffe
c000e5e5:	09 d0                	or     eax,edx
c000e5e7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ed:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f4:	e8 6d 96 00 00       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c000e5f9:	c1 e0 07             	shl    eax,0x7
c000e5fc:	88 c2                	mov    dl,al
c000e5fe:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e604:	83 e0 7f             	and    eax,0x7f
c000e607:	09 d0                	or     eax,edx
c000e609:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e60f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e616:	e8 4b 96 00 00       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c000e61b:	83 c4 10             	add    esp,0x10
c000e61e:	83 e0 01             	and    eax,0x1
c000e621:	c1 e0 05             	shl    eax,0x5
c000e624:	88 c2                	mov    dl,al
c000e626:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62c:	83 e0 df             	and    eax,0xffffffdf
c000e62f:	09 d0                	or     eax,edx
c000e631:	f7 05 a0 aa 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002aaa0,0x401
c000e63b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e641:	0f 84 c2 00 00 00    	je     c000e709 <Computer::detectFeatures()+0x1df>
c000e647:	83 e0 fe             	and    eax,0xfffffffe
c000e64a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e650:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e656:	88 c2                	mov    dl,al
c000e658:	83 e2 09             	and    edx,0x9
c000e65b:	fe ca                	dec    dl
c000e65d:	75 09                	jne    c000e668 <Computer::detectFeatures()+0x13e>
c000e65f:	83 e0 fe             	and    eax,0xfffffffe
c000e662:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e66f:	50                   	push   eax
c000e670:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e674:	55                   	push   ebp
c000e675:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e679:	57                   	push   edi
c000e67a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e67e:	56                   	push   esi
c000e67f:	68 00 00 00 80       	push   0x80000000
c000e684:	e8 59 95 00 00       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e689:	83 c4 20             	add    esp,0x20
c000e68c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e693:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e697:	0f 86 c3 fe ff ff    	jbe    c000e560 <Computer::detectFeatures()+0x36>
c000e69d:	83 ec 0c             	sub    esp,0xc
c000e6a0:	50                   	push   eax
c000e6a1:	55                   	push   ebp
c000e6a2:	57                   	push   edi
c000e6a3:	56                   	push   esi
c000e6a4:	68 01 00 00 80       	push   0x80000001
c000e6a9:	e8 34 95 00 00       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6ae:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6b8:	83 c4 20             	add    esp,0x20
c000e6bb:	e9 a0 fe ff ff       	jmp    c000e560 <Computer::detectFeatures()+0x36>
c000e6c0:	e8 1b 50 01 00       	call   c00236e0 <sseDetect>
c000e6c5:	88 c2                	mov    dl,al
c000e6c7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cd:	c1 e2 07             	shl    edx,0x7
c000e6d0:	83 e0 7f             	and    eax,0x7f
c000e6d3:	09 d0                	or     eax,edx
c000e6d5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6db:	84 c0                	test   al,al
c000e6dd:	0f 89 bb fe ff ff    	jns    c000e59e <Computer::detectFeatures()+0x74>
c000e6e3:	e8 e8 4f 01 00       	call   c00236d0 <avxDetect>
c000e6e8:	83 e0 01             	and    eax,0x1
c000e6eb:	c1 e0 05             	shl    eax,0x5
c000e6ee:	88 c2                	mov    dl,al
c000e6f0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f6:	83 e0 df             	and    eax,0xffffffdf
c000e6f9:	09 d0                	or     eax,edx
c000e6fb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e701:	83 c4 1c             	add    esp,0x1c
c000e704:	5b                   	pop    ebx
c000e705:	5e                   	pop    esi
c000e706:	5f                   	pop    edi
c000e707:	5d                   	pop    ebp
c000e708:	c3                   	ret    
c000e709:	83 ec 0c             	sub    esp,0xc
c000e70c:	68 00 02 00 00       	push   0x200
c000e711:	e8 50 95 00 00       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c000e716:	83 c4 10             	add    esp,0x10
c000e719:	83 e0 01             	and    eax,0x1
c000e71c:	88 c2                	mov    dl,al
c000e71e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e724:	83 e0 fe             	and    eax,0xfffffffe
c000e727:	09 d0                	or     eax,edx
c000e729:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e72f:	e9 1c ff ff ff       	jmp    c000e650 <Computer::detectFeatures()+0x126>

c000e734 <Computer::displayFeatures()>:
c000e734:	53                   	push   ebx
c000e735:	83 ec 14             	sub    esp,0x14
c000e738:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73c:	68 7f 6f 02 c0       	push   0xc0026f7f
c000e741:	e8 ff 3e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e746:	83 c4 10             	add    esp,0x10
c000e749:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e750:	0f 85 73 02 00 00    	jne    c000e9c9 <Computer::displayFeatures()+0x295>
c000e756:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e75b:	83 ec 08             	sub    esp,0x8
c000e75e:	50                   	push   eax
c000e75f:	68 92 6f 02 c0       	push   0xc0026f92
c000e764:	e8 dc 3e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e769:	83 c4 10             	add    esp,0x10
c000e76c:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e773:	0f 85 8c 02 00 00    	jne    c000ea05 <Computer::displayFeatures()+0x2d1>
c000e779:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e77e:	83 ec 08             	sub    esp,0x8
c000e781:	50                   	push   eax
c000e782:	68 a3 6f 02 c0       	push   0xc0026fa3
c000e787:	e8 b9 3e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e78c:	83 c4 10             	add    esp,0x10
c000e78f:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e796:	0f 85 5f 02 00 00    	jne    c000e9fb <Computer::displayFeatures()+0x2c7>
c000e79c:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e7a1:	83 ec 08             	sub    esp,0x8
c000e7a4:	50                   	push   eax
c000e7a5:	68 b4 6f 02 c0       	push   0xc0026fb4
c000e7aa:	e8 96 3e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e7af:	83 c4 10             	add    esp,0x10
c000e7b2:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7b9:	0f 85 32 02 00 00    	jne    c000e9f1 <Computer::displayFeatures()+0x2bd>
c000e7bf:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e7c4:	83 ec 08             	sub    esp,0x8
c000e7c7:	50                   	push   eax
c000e7c8:	68 c5 6f 02 c0       	push   0xc0026fc5
c000e7cd:	e8 73 3e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e7d2:	83 c4 10             	add    esp,0x10
c000e7d5:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7dc:	0f 85 05 02 00 00    	jne    c000e9e7 <Computer::displayFeatures()+0x2b3>
c000e7e2:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e7e7:	83 ec 08             	sub    esp,0x8
c000e7ea:	50                   	push   eax
c000e7eb:	68 d6 6f 02 c0       	push   0xc0026fd6
c000e7f0:	e8 50 3e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e7f5:	83 c4 10             	add    esp,0x10
c000e7f8:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e7ff:	0f 85 d8 01 00 00    	jne    c000e9dd <Computer::displayFeatures()+0x2a9>
c000e805:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e80a:	83 ec 08             	sub    esp,0x8
c000e80d:	50                   	push   eax
c000e80e:	68 e7 6f 02 c0       	push   0xc0026fe7
c000e813:	e8 2d 3e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e818:	83 c4 10             	add    esp,0x10
c000e81b:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e822:	0f 85 ab 01 00 00    	jne    c000e9d3 <Computer::displayFeatures()+0x29f>
c000e828:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e82d:	83 ec 08             	sub    esp,0x8
c000e830:	50                   	push   eax
c000e831:	68 f8 6f 02 c0       	push   0xc0026ff8
c000e836:	e8 0a 3e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e83b:	83 c4 10             	add    esp,0x10
c000e83e:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e845:	0f 88 1b 02 00 00    	js     c000ea66 <Computer::displayFeatures()+0x332>
c000e84b:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e850:	83 ec 08             	sub    esp,0x8
c000e853:	50                   	push   eax
c000e854:	68 09 70 02 c0       	push   0xc0027009
c000e859:	e8 e7 3d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e85e:	83 c4 10             	add    esp,0x10
c000e861:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e868:	0f 85 a1 01 00 00    	jne    c000ea0f <Computer::displayFeatures()+0x2db>
c000e86e:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e873:	83 ec 08             	sub    esp,0x8
c000e876:	50                   	push   eax
c000e877:	68 1a 70 02 c0       	push   0xc002701a
c000e87c:	e8 c4 3d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e881:	83 c4 10             	add    esp,0x10
c000e884:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88b:	0f 85 cb 01 00 00    	jne    c000ea5c <Computer::displayFeatures()+0x328>
c000e891:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e896:	83 ec 08             	sub    esp,0x8
c000e899:	50                   	push   eax
c000e89a:	68 2b 70 02 c0       	push   0xc002702b
c000e89f:	e8 a1 3d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e8a4:	83 c4 10             	add    esp,0x10
c000e8a7:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8ae:	0f 85 9e 01 00 00    	jne    c000ea52 <Computer::displayFeatures()+0x31e>
c000e8b4:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e8b9:	83 ec 08             	sub    esp,0x8
c000e8bc:	50                   	push   eax
c000e8bd:	68 3c 70 02 c0       	push   0xc002703c
c000e8c2:	e8 7e 3d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e8c7:	83 c4 10             	add    esp,0x10
c000e8ca:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d1:	0f 85 71 01 00 00    	jne    c000ea48 <Computer::displayFeatures()+0x314>
c000e8d7:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e8dc:	83 ec 08             	sub    esp,0x8
c000e8df:	50                   	push   eax
c000e8e0:	68 4d 70 02 c0       	push   0xc002704d
c000e8e5:	e8 5b 3d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e8ea:	83 c4 10             	add    esp,0x10
c000e8ed:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f4:	0f 85 44 01 00 00    	jne    c000ea3e <Computer::displayFeatures()+0x30a>
c000e8fa:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e8ff:	83 ec 08             	sub    esp,0x8
c000e902:	50                   	push   eax
c000e903:	68 5e 70 02 c0       	push   0xc002705e
c000e908:	e8 38 3d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e90d:	83 c4 10             	add    esp,0x10
c000e910:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e917:	0f 85 17 01 00 00    	jne    c000ea34 <Computer::displayFeatures()+0x300>
c000e91d:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e922:	83 ec 08             	sub    esp,0x8
c000e925:	50                   	push   eax
c000e926:	68 6f 70 02 c0       	push   0xc002706f
c000e92b:	e8 15 3d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e930:	83 c4 10             	add    esp,0x10
c000e933:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93a:	0f 85 ea 00 00 00    	jne    c000ea2a <Computer::displayFeatures()+0x2f6>
c000e940:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e945:	83 ec 08             	sub    esp,0x8
c000e948:	50                   	push   eax
c000e949:	68 80 70 02 c0       	push   0xc0027080
c000e94e:	e8 f2 3c 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e953:	83 c4 10             	add    esp,0x10
c000e956:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95d:	0f 88 0d 01 00 00    	js     c000ea70 <Computer::displayFeatures()+0x33c>
c000e963:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e968:	83 ec 08             	sub    esp,0x8
c000e96b:	50                   	push   eax
c000e96c:	68 91 70 02 c0       	push   0xc0027091
c000e971:	e8 cf 3c 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e976:	83 c4 10             	add    esp,0x10
c000e979:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e980:	0f 85 9a 00 00 00    	jne    c000ea20 <Computer::displayFeatures()+0x2ec>
c000e986:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e98b:	83 ec 08             	sub    esp,0x8
c000e98e:	50                   	push   eax
c000e98f:	68 a2 70 02 c0       	push   0xc00270a2
c000e994:	e8 ac 3c 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e999:	83 c4 10             	add    esp,0x10
c000e99c:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a3:	75 74                	jne    c000ea19 <Computer::displayFeatures()+0x2e5>
c000e9a5:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c000e9aa:	83 ec 08             	sub    esp,0x8
c000e9ad:	50                   	push   eax
c000e9ae:	68 b3 70 02 c0       	push   0xc00270b3
c000e9b3:	e8 8d 3c 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000e9b8:	c7 44 24 20 1a 87 02 c0 	mov    DWORD PTR [esp+0x20],0xc002871a
c000e9c0:	83 c4 18             	add    esp,0x18
c000e9c3:	5b                   	pop    ebx
c000e9c4:	e9 7c 3c 00 00       	jmp    c0012645 <Dbg::kprintf(char const*, ...)>
c000e9c9:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000e9ce:	e9 88 fd ff ff       	jmp    c000e75b <Computer::displayFeatures()+0x27>
c000e9d3:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000e9d8:	e9 50 fe ff ff       	jmp    c000e82d <Computer::displayFeatures()+0xf9>
c000e9dd:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000e9e2:	e9 23 fe ff ff       	jmp    c000e80a <Computer::displayFeatures()+0xd6>
c000e9e7:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000e9ec:	e9 f6 fd ff ff       	jmp    c000e7e7 <Computer::displayFeatures()+0xb3>
c000e9f1:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000e9f6:	e9 c9 fd ff ff       	jmp    c000e7c4 <Computer::displayFeatures()+0x90>
c000e9fb:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea00:	e9 9c fd ff ff       	jmp    c000e7a1 <Computer::displayFeatures()+0x6d>
c000ea05:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea0a:	e9 6f fd ff ff       	jmp    c000e77e <Computer::displayFeatures()+0x4a>
c000ea0f:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea14:	e9 5a fe ff ff       	jmp    c000e873 <Computer::displayFeatures()+0x13f>
c000ea19:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea1e:	eb 8a                	jmp    c000e9aa <Computer::displayFeatures()+0x276>
c000ea20:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea25:	e9 61 ff ff ff       	jmp    c000e98b <Computer::displayFeatures()+0x257>
c000ea2a:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea2f:	e9 11 ff ff ff       	jmp    c000e945 <Computer::displayFeatures()+0x211>
c000ea34:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea39:	e9 e4 fe ff ff       	jmp    c000e922 <Computer::displayFeatures()+0x1ee>
c000ea3e:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea43:	e9 b7 fe ff ff       	jmp    c000e8ff <Computer::displayFeatures()+0x1cb>
c000ea48:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea4d:	e9 8a fe ff ff       	jmp    c000e8dc <Computer::displayFeatures()+0x1a8>
c000ea52:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea57:	e9 5d fe ff ff       	jmp    c000e8b9 <Computer::displayFeatures()+0x185>
c000ea5c:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea61:	e9 30 fe ff ff       	jmp    c000e896 <Computer::displayFeatures()+0x162>
c000ea66:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea6b:	e9 e0 fd ff ff       	jmp    c000e850 <Computer::displayFeatures()+0x11c>
c000ea70:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c000ea75:	e9 ee fe ff ff       	jmp    c000e968 <Computer::displayFeatures()+0x234>

c000ea7a <Computer::rdmsr(unsigned int)>:
c000ea7a:	83 ec 0c             	sub    esp,0xc
c000ea7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea81:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea88:	74 0a                	je     c000ea94 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea8e:	0f 32                	rdmsr  
c000ea90:	83 c4 0c             	add    esp,0xc
c000ea93:	c3                   	ret    
c000ea94:	83 ec 0c             	sub    esp,0xc
c000ea97:	68 c4 70 02 c0       	push   0xc00270c4
c000ea9c:	e8 68 a3 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000eaa1:	83 c4 10             	add    esp,0x10
c000eaa4:	eb e4                	jmp    c000ea8a <Computer::rdmsr(unsigned int)+0x10>

c000eaa6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa6:	57                   	push   edi
c000eaa7:	56                   	push   esi
c000eaa8:	52                   	push   edx
c000eaa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabc:	74 0e                	je     c000eacc <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eabe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac2:	89 f0                	mov    eax,esi
c000eac4:	89 fa                	mov    edx,edi
c000eac6:	0f 30                	wrmsr  
c000eac8:	58                   	pop    eax
c000eac9:	5e                   	pop    esi
c000eaca:	5f                   	pop    edi
c000eacb:	c3                   	ret    
c000eacc:	83 ec 0c             	sub    esp,0xc
c000eacf:	68 ca 70 02 c0       	push   0xc00270ca
c000ead4:	e8 30 a3 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000ead9:	83 c4 10             	add    esp,0x10
c000eadc:	eb e0                	jmp    c000eabe <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eade <Computer::nmiEnabled()>:
c000eade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eae8:	c3                   	ret    
c000eae9:	90                   	nop

c000eaea <Computer::readCMOS(unsigned char)>:
c000eaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaee:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf5:	19 c0                	sbb    eax,eax
c000eaf7:	83 e0 80             	and    eax,0xffffff80
c000eafa:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eafe:	e6 70                	out    0x70,al
c000eb00:	e4 71                	in     al,0x71
c000eb02:	c3                   	ret    
c000eb03:	90                   	nop

c000eb04 <Computer::enableNMI(bool)>:
c000eb04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb12:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1a:	eb ce                	jmp    c000eaea <Computer::readCMOS(unsigned char)>

c000eb1c <Computer::open(int, int, void*)>:
c000eb1c:	56                   	push   esi
c000eb1d:	53                   	push   ebx
c000eb1e:	83 ec 10             	sub    esp,0x10
c000eb21:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb25:	f6 05 a0 aa 02 c0 04 	test   BYTE PTR ds:0xc002aaa0,0x4
c000eb2c:	68 68 22 00 00       	push   0x2268
c000eb31:	0f 94 05 40 9a 02 c0 	sete   BYTE PTR ds:0xc0029a40
c000eb38:	e8 95 09 00 00       	call   c000f4d2 <malloc>
c000eb3d:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb40:	89 c6                	mov    esi,eax
c000eb42:	e8 4f 87 00 00       	call   c0017296 <ACPI::ACPI()>
c000eb47:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4d:	58                   	pop    eax
c000eb4e:	5a                   	pop    edx
c000eb4f:	56                   	push   esi
c000eb50:	53                   	push   ebx
c000eb51:	e8 de 4e 00 00       	call   c0013a34 <Device::addChild(Device*)>
c000eb56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb59:	e8 cc f9 ff ff       	call   c000e52a <Computer::detectFeatures()>
c000eb5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb61:	e8 ce fb ff ff       	call   c000e734 <Computer::displayFeatures()>
c000eb66:	59                   	pop    ecx
c000eb67:	5e                   	pop    esi
c000eb68:	6a 01                	push   0x1
c000eb6a:	53                   	push   ebx
c000eb6b:	e8 94 ff ff ff       	call   c000eb04 <Computer::enableNMI(bool)>
c000eb70:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb77:	e8 56 09 00 00       	call   c000f4d2 <malloc>
c000eb7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb7f:	89 c6                	mov    esi,eax
c000eb81:	e8 98 91 00 00       	call   c0017d1e <CPU::CPU()>
c000eb86:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8c:	58                   	pop    eax
c000eb8d:	5a                   	pop    edx
c000eb8e:	56                   	push   esi
c000eb8f:	53                   	push   ebx
c000eb90:	e8 9f 4e 00 00       	call   c0013a34 <Device::addChild(Device*)>
c000eb95:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9b:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba1:	6a 00                	push   0x0
c000eba3:	6a 00                	push   0x0
c000eba5:	50                   	push   eax
c000eba6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eba9:	83 c4 20             	add    esp,0x20
c000ebac:	e8 f5 53 00 00       	call   c0013fa6 <setupFPU()>
c000ebb1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb7:	85 c0                	test   eax,eax
c000ebb9:	74 1f                	je     c000ebda <Computer::open(int, int, void*)+0xbe>
c000ebbb:	83 ec 08             	sub    esp,0x8
c000ebbe:	50                   	push   eax
c000ebbf:	53                   	push   ebx
c000ebc0:	e8 6f 4e 00 00       	call   c0013a34 <Device::addChild(Device*)>
c000ebc5:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcb:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcd:	6a 00                	push   0x0
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	50                   	push   eax
c000ebd4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd7:	83 c4 20             	add    esp,0x20
c000ebda:	83 ec 0c             	sub    esp,0xc
c000ebdd:	68 1b e5 00 c0       	push   0xc000e51b
c000ebe2:	e8 5f d4 00 00       	call   c001c046 <setupMultitasking(void (*)())>
c000ebe7:	83 c4 14             	add    esp,0x14
c000ebea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebef:	5b                   	pop    ebx
c000ebf0:	5e                   	pop    esi
c000ebf1:	c3                   	ret    

c000ebf2 <Computer::disableNMI()>:
c000ebf2:	6a 00                	push   0x0
c000ebf4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebf8:	e8 07 ff ff ff       	call   c000eb04 <Computer::enableNMI(bool)>
c000ebfd:	58                   	pop    eax
c000ebfe:	5a                   	pop    edx
c000ebff:	c3                   	ret    

c000ec00 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec04:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0b:	19 c0                	sbb    eax,eax
c000ec0d:	83 e0 80             	and    eax,0xffffff80
c000ec10:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec14:	e6 70                	out    0x70,al
c000ec16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1a:	e6 71                	out    0x71,al
c000ec1c:	c3                   	ret    
c000ec1d:	90                   	nop

c000ec1e <Computer::handleNMI()>:
c000ec1e:	56                   	push   esi
c000ec1f:	53                   	push   ebx
c000ec20:	83 ec 10             	sub    esp,0x10
c000ec23:	e4 92                	in     al,0x92
c000ec25:	89 c6                	mov    esi,eax
c000ec27:	e4 61                	in     al,0x61
c000ec29:	68 d0 70 02 c0       	push   0xc00270d0
c000ec2e:	88 c3                	mov    bl,al
c000ec30:	e8 10 3a 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	83 e6 10             	and    esi,0x10
c000ec3b:	75 0d                	jne    c000ec4a <Computer::handleNMI()+0x2c>
c000ec3d:	f6 c3 40             	test   bl,0x40
c000ec40:	75 1d                	jne    c000ec5f <Computer::handleNMI()+0x41>
c000ec42:	84 db                	test   bl,bl
c000ec44:	78 2d                	js     c000ec73 <Computer::handleNMI()+0x55>
c000ec46:	58                   	pop    eax
c000ec47:	5b                   	pop    ebx
c000ec48:	5e                   	pop    esi
c000ec49:	c3                   	ret    
c000ec4a:	83 ec 0c             	sub    esp,0xc
c000ec4d:	68 e1 70 02 c0       	push   0xc00270e1
c000ec52:	e8 b2 a1 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000ec57:	83 c4 10             	add    esp,0x10
c000ec5a:	f6 c3 40             	test   bl,0x40
c000ec5d:	74 e3                	je     c000ec42 <Computer::handleNMI()+0x24>
c000ec5f:	83 ec 0c             	sub    esp,0xc
c000ec62:	68 ee 70 02 c0       	push   0xc00270ee
c000ec67:	e8 9d a1 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000ec6c:	83 c4 10             	add    esp,0x10
c000ec6f:	84 db                	test   bl,bl
c000ec71:	79 d3                	jns    c000ec46 <Computer::handleNMI()+0x28>
c000ec73:	c7 44 24 10 f8 70 02 c0 	mov    DWORD PTR [esp+0x10],0xc00270f8
c000ec7b:	5a                   	pop    edx
c000ec7c:	5b                   	pop    ebx
c000ec7d:	5e                   	pop    esi
c000ec7e:	e9 86 a1 00 00       	jmp    c0018e09 <Krnl::panic(char const*)>
c000ec83:	90                   	nop

c000ec84 <Computer::setDiskActivityLight(int, bool)>:
c000ec84:	56                   	push   esi
c000ec85:	53                   	push   ebx
c000ec86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec8f:	77 1b                	ja     c000ecac <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec91:	e4 92                	in     al,0x92
c000ec93:	bb 40 00 00 00       	mov    ebx,0x40
c000ec98:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9c:	89 da                	mov    edx,ebx
c000ec9e:	d3 e2                	shl    edx,cl
c000eca0:	89 f1                	mov    ecx,esi
c000eca2:	f7 d2                	not    edx
c000eca4:	d3 e3                	shl    ebx,cl
c000eca6:	21 d0                	and    eax,edx
c000eca8:	09 d8                	or     eax,ebx
c000ecaa:	e6 92                	out    0x92,al
c000ecac:	5b                   	pop    ebx
c000ecad:	5e                   	pop    esi
c000ecae:	c3                   	ret    
c000ecaf:	90                   	nop

c000ecb0 <GDTEntry::setBase(unsigned int)>:
c000ecb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecb8:	89 c1                	mov    ecx,eax
c000ecba:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecbe:	c1 e9 10             	shr    ecx,0x10
c000ecc1:	c1 e8 18             	shr    eax,0x18
c000ecc4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecca:	c3                   	ret    
c000eccb:	90                   	nop

c000eccc <GDTEntry::setLimit(unsigned int)>:
c000eccc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd7:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecda:	83 e2 f0             	and    edx,0xfffffff0
c000ecdd:	c1 e8 10             	shr    eax,0x10
c000ece0:	83 e0 0f             	and    eax,0xf
c000ece3:	09 d0                	or     eax,edx
c000ece5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ece8:	c3                   	ret    
c000ece9:	90                   	nop

c000ecea <GDT::GDT()>:
c000ecea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecfe:	90                   	nop
c000ecff:	c3                   	ret    

c000ed00 <GDT::addEntry(GDTEntry)>:
c000ed00:	53                   	push   ebx
c000ed01:	83 ec 0c             	sub    esp,0xc
c000ed04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed08:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed11:	52                   	push   edx
c000ed12:	50                   	push   eax
c000ed13:	68 34 71 02 c0       	push   0xc0027134
c000ed18:	e8 28 39 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000ed1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed1f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed23:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed27:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2b:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed2f:	8d 50 01             	lea    edx,[eax+0x1]
c000ed32:	c1 e0 03             	shl    eax,0x3
c000ed35:	89 13                	mov    DWORD PTR [ebx],edx
c000ed37:	83 c4 18             	add    esp,0x18
c000ed3a:	5b                   	pop    ebx
c000ed3b:	c3                   	ret    

c000ed3c <GDT::getNumberOfEntries()>:
c000ed3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed40:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed42:	c3                   	ret    
c000ed43:	90                   	nop

c000ed44 <GDT::flush()>:
c000ed44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed48:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4a:	83 c0 04             	add    eax,0x4
c000ed4d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed54:	a3 92 aa 02 c0       	mov    ds:0xc002aa92,eax
c000ed59:	66 89 15 90 aa 02 c0 	mov    WORD PTR ds:0xc002aa90,dx
c000ed60:	e9 9a 16 ff ff       	jmp    c00003ff <loadGDT>
c000ed65:	90                   	nop

c000ed66 <GDT::setup()>:
c000ed66:	55                   	push   ebp
c000ed67:	57                   	push   edi
c000ed68:	56                   	push   esi
c000ed69:	53                   	push   ebx
c000ed6a:	83 ec 3c             	sub    esp,0x3c
c000ed6d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed71:	6a 00                	push   0x0
c000ed73:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed77:	53                   	push   ebx
c000ed78:	e8 33 ff ff ff       	call   c000ecb0 <GDTEntry::setBase(unsigned int)>
c000ed7d:	6a 00                	push   0x0
c000ed7f:	53                   	push   ebx
c000ed80:	e8 47 ff ff ff       	call   c000eccc <GDTEntry::setLimit(unsigned int)>
c000ed85:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8d:	6a 00                	push   0x0
c000ed8f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed93:	53                   	push   ebx
c000ed94:	e8 17 ff ff ff       	call   c000ecb0 <GDTEntry::setBase(unsigned int)>
c000ed99:	68 ff ff ff 00       	push   0xffffff
c000ed9e:	53                   	push   ebx
c000ed9f:	e8 28 ff ff ff       	call   c000eccc <GDTEntry::setLimit(unsigned int)>
c000eda4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eda8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edad:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb6:	83 c4 20             	add    esp,0x20
c000edb9:	6a 00                	push   0x0
c000edbb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edbf:	53                   	push   ebx
c000edc0:	e8 eb fe ff ff       	call   c000ecb0 <GDTEntry::setBase(unsigned int)>
c000edc5:	68 ff ff ff 00       	push   0xffffff
c000edca:	53                   	push   ebx
c000edcb:	e8 fc fe ff ff       	call   c000eccc <GDTEntry::setLimit(unsigned int)>
c000edd0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edd8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eddc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede4:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ede9:	0d 00 92 c0 00       	or     eax,0xc09200
c000edee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf2:	89 d8                	mov    eax,ebx
c000edf4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edf8:	80 cc 60             	or     ah,0x60
c000edfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edff:	83 c4 0c             	add    esp,0xc
c000ee02:	89 f8                	mov    eax,edi
c000ee04:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee08:	80 cc 60             	or     ah,0x60
c000ee0b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0f:	89 c7                	mov    edi,eax
c000ee11:	55                   	push   ebp
c000ee12:	e8 e9 fe ff ff       	call   c000ed00 <GDT::addEntry(GDTEntry)>
c000ee17:	83 c4 0c             	add    esp,0xc
c000ee1a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee1e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee22:	55                   	push   ebp
c000ee23:	e8 d8 fe ff ff       	call   c000ed00 <GDT::addEntry(GDTEntry)>
c000ee28:	83 c4 0c             	add    esp,0xc
c000ee2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee33:	55                   	push   ebp
c000ee34:	e8 c7 fe ff ff       	call   c000ed00 <GDT::addEntry(GDTEntry)>
c000ee39:	83 c4 0c             	add    esp,0xc
c000ee3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee44:	53                   	push   ebx
c000ee45:	51                   	push   ecx
c000ee46:	55                   	push   ebp
c000ee47:	e8 b4 fe ff ff       	call   c000ed00 <GDT::addEntry(GDTEntry)>
c000ee4c:	83 c4 0c             	add    esp,0xc
c000ee4f:	57                   	push   edi
c000ee50:	56                   	push   esi
c000ee51:	55                   	push   ebp
c000ee52:	e8 a9 fe ff ff       	call   c000ed00 <GDT::addEntry(GDTEntry)>
c000ee57:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5a:	e8 e5 fe ff ff       	call   c000ed44 <GDT::flush()>
c000ee5f:	83 c4 4c             	add    esp,0x4c
c000ee62:	5b                   	pop    ebx
c000ee63:	5e                   	pop    esi
c000ee64:	5f                   	pop    edi
c000ee65:	5d                   	pop    ebp
c000ee66:	c3                   	ret    

c000ee67 <idleFunction(void*)>:
c000ee67:	53                   	push   ebx
c000ee68:	83 ec 08             	sub    esp,0x8
c000ee6b:	e8 a7 cf 00 00       	call   c001be17 <unlockScheduler()>
c000ee70:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c000ee75:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7b:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee82:	74 3c                	je     c000eec0 <idleFunction(void*)+0x59>
c000ee84:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8b:	74 33                	je     c000eec0 <idleFunction(void*)+0x59>
c000ee8d:	31 db                	xor    ebx,ebx
c000ee8f:	52                   	push   edx
c000ee90:	52                   	push   edx
c000ee91:	68 e1 00 00 00       	push   0xe1
c000ee96:	50                   	push   eax
c000ee97:	e8 de fb ff ff       	call   c000ea7a <Computer::rdmsr(unsigned int)>
c000ee9c:	53                   	push   ebx
c000ee9d:	83 e0 02             	and    eax,0x2
c000eea0:	50                   	push   eax
c000eea1:	68 e1 00 00 00       	push   0xe1
c000eea6:	ff 35 88 aa 02 c0    	push   DWORD PTR ds:0xc002aa88
c000eeac:	e8 f5 fb ff ff       	call   c000eaa6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb1:	83 c4 20             	add    esp,0x20
c000eeb4:	e8 7b 13 ff ff       	call   c0000234 <doTPAUSE>
c000eeb9:	e8 a2 68 01 00       	call   c0025760 <idleCommon()>
c000eebe:	eb f4                	jmp    c000eeb4 <idleFunction(void*)+0x4d>
c000eec0:	fb                   	sti    
c000eec1:	f4                   	hlt    
c000eec2:	e8 99 68 01 00       	call   c0025760 <idleCommon()>
c000eec7:	eb f7                	jmp    c000eec0 <idleFunction(void*)+0x59>
c000eec9:	90                   	nop

c000eeca <IDTEntry::IDTEntry(bool)>:
c000eeca:	83 ec 04             	sub    esp,0x4
c000eecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed1:	88 04 24             	mov    BYTE PTR [esp],al
c000eed4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eede:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeed:	83 e2 f0             	and    edx,0xfffffff0
c000eef0:	83 ca 0e             	or     edx,0xe
c000eef3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eefd:	83 e2 ef             	and    edx,0xffffffef
c000ef00:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef03:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef07:	74 04                	je     c000ef0d <IDTEntry::IDTEntry(bool)+0x43>
c000ef09:	b2 03                	mov    dl,0x3
c000ef0b:	eb 02                	jmp    c000ef0f <IDTEntry::IDTEntry(bool)+0x45>
c000ef0d:	b2 00                	mov    dl,0x0
c000ef0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef13:	83 e2 03             	and    edx,0x3
c000ef16:	88 d1                	mov    cl,dl
c000ef18:	c1 e1 05             	shl    ecx,0x5
c000ef1b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef1e:	83 e2 9f             	and    edx,0xffffff9f
c000ef21:	09 ca                	or     edx,ecx
c000ef23:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2d:	83 ca 80             	or     edx,0xffffff80
c000ef30:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef33:	90                   	nop
c000ef34:	83 c4 04             	add    esp,0x4
c000ef37:	c3                   	ret    

c000ef38 <IDTEntry::setOffset(unsigned int)>:
c000ef38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef40:	66 89 02             	mov    WORD PTR [edx],ax
c000ef43:	c1 e8 10             	shr    eax,0x10
c000ef46:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4a:	c3                   	ret    
c000ef4b:	90                   	nop

c000ef4c <IDT::IDT()>:
c000ef4c:	90                   	nop
c000ef4d:	c3                   	ret    

c000ef4e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef52:	83 c0 30             	add    eax,0x30
c000ef55:	c3                   	ret    

c000ef56 <IDT::addEntry(IDTEntry, int)>:
c000ef56:	53                   	push   ebx
c000ef57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef67:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef6e:	5b                   	pop    ebx
c000ef6f:	c3                   	ret    

c000ef70 <IDT::addEntry(int, void (*)(), bool)>:
c000ef70:	53                   	push   ebx
c000ef71:	83 ec 10             	sub    esp,0x10
c000ef74:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef79:	50                   	push   eax
c000ef7a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef7e:	53                   	push   ebx
c000ef7f:	e8 46 ff ff ff       	call   c000eeca <IDTEntry::IDTEntry(bool)>
c000ef84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef88:	53                   	push   ebx
c000ef89:	e8 aa ff ff ff       	call   c000ef38 <IDTEntry::setOffset(unsigned int)>
c000ef8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef9e:	e8 b3 ff ff ff       	call   c000ef56 <IDT::addEntry(IDTEntry, int)>
c000efa3:	83 c4 30             	add    esp,0x30
c000efa6:	5b                   	pop    ebx
c000efa7:	c3                   	ret    

c000efa8 <IDT::flush()>:
c000efa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efac:	66 c7 05 98 aa 02 c0 ff 07 	mov    WORD PTR ds:0xc002aa98,0x7ff
c000efb5:	a3 9a aa 02 c0       	mov    ds:0xc002aa9a,eax
c000efba:	0f 01 1d 98 aa 02 c0 	lidtd  ds:0xc002aa98
c000efc1:	c3                   	ret    

c000efc2 <IDT::setup()>:
c000efc2:	57                   	push   edi
c000efc3:	56                   	push   esi
c000efc4:	53                   	push   ebx
c000efc5:	83 ec 10             	sub    esp,0x10
c000efc8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efcc:	6a 00                	push   0x0
c000efce:	68 1f 04 00 c0       	push   0xc000041f
c000efd3:	6a 00                	push   0x0
c000efd5:	53                   	push   ebx
c000efd6:	e8 95 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000efdb:	6a 00                	push   0x0
c000efdd:	68 2f 04 00 c0       	push   0xc000042f
c000efe2:	6a 01                	push   0x1
c000efe4:	53                   	push   ebx
c000efe5:	e8 86 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000efea:	83 c4 20             	add    esp,0x20
c000efed:	6a 00                	push   0x0
c000efef:	68 39 04 00 c0       	push   0xc0000439
c000eff4:	6a 02                	push   0x2
c000eff6:	53                   	push   ebx
c000eff7:	e8 74 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000effc:	6a 00                	push   0x0
c000effe:	68 43 04 00 c0       	push   0xc0000443
c000f003:	6a 03                	push   0x3
c000f005:	53                   	push   ebx
c000f006:	e8 65 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f00b:	83 c4 20             	add    esp,0x20
c000f00e:	6a 00                	push   0x0
c000f010:	68 4d 04 00 c0       	push   0xc000044d
c000f015:	6a 04                	push   0x4
c000f017:	53                   	push   ebx
c000f018:	e8 53 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f01d:	6a 00                	push   0x0
c000f01f:	68 57 04 00 c0       	push   0xc0000457
c000f024:	6a 05                	push   0x5
c000f026:	53                   	push   ebx
c000f027:	e8 44 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f02c:	83 c4 20             	add    esp,0x20
c000f02f:	6a 00                	push   0x0
c000f031:	68 61 04 00 c0       	push   0xc0000461
c000f036:	6a 06                	push   0x6
c000f038:	53                   	push   ebx
c000f039:	e8 32 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f03e:	6a 00                	push   0x0
c000f040:	68 6b 04 00 c0       	push   0xc000046b
c000f045:	6a 07                	push   0x7
c000f047:	53                   	push   ebx
c000f048:	e8 23 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f04d:	83 c4 20             	add    esp,0x20
c000f050:	6a 00                	push   0x0
c000f052:	68 75 04 00 c0       	push   0xc0000475
c000f057:	6a 08                	push   0x8
c000f059:	53                   	push   ebx
c000f05a:	e8 11 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f05f:	6a 00                	push   0x0
c000f061:	68 7d 04 00 c0       	push   0xc000047d
c000f066:	6a 09                	push   0x9
c000f068:	53                   	push   ebx
c000f069:	e8 02 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f06e:	83 c4 20             	add    esp,0x20
c000f071:	6a 00                	push   0x0
c000f073:	68 87 04 00 c0       	push   0xc0000487
c000f078:	6a 0a                	push   0xa
c000f07a:	53                   	push   ebx
c000f07b:	e8 f0 fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f080:	6a 00                	push   0x0
c000f082:	68 8f 04 00 c0       	push   0xc000048f
c000f087:	6a 0b                	push   0xb
c000f089:	53                   	push   ebx
c000f08a:	e8 e1 fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f08f:	83 c4 20             	add    esp,0x20
c000f092:	6a 00                	push   0x0
c000f094:	68 97 04 00 c0       	push   0xc0000497
c000f099:	6a 0c                	push   0xc
c000f09b:	53                   	push   ebx
c000f09c:	e8 cf fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0a1:	6a 00                	push   0x0
c000f0a3:	68 9f 04 00 c0       	push   0xc000049f
c000f0a8:	6a 0d                	push   0xd
c000f0aa:	53                   	push   ebx
c000f0ab:	e8 c0 fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0b0:	83 c4 20             	add    esp,0x20
c000f0b3:	6a 00                	push   0x0
c000f0b5:	68 a7 04 00 c0       	push   0xc00004a7
c000f0ba:	6a 0e                	push   0xe
c000f0bc:	53                   	push   ebx
c000f0bd:	e8 ae fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0c2:	6a 00                	push   0x0
c000f0c4:	68 af 04 00 c0       	push   0xc00004af
c000f0c9:	6a 0f                	push   0xf
c000f0cb:	53                   	push   ebx
c000f0cc:	e8 9f fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0d1:	83 c4 20             	add    esp,0x20
c000f0d4:	6a 00                	push   0x0
c000f0d6:	68 b9 04 00 c0       	push   0xc00004b9
c000f0db:	6a 10                	push   0x10
c000f0dd:	53                   	push   ebx
c000f0de:	e8 8d fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0e3:	6a 00                	push   0x0
c000f0e5:	68 c3 04 00 c0       	push   0xc00004c3
c000f0ea:	6a 11                	push   0x11
c000f0ec:	53                   	push   ebx
c000f0ed:	e8 7e fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0f2:	83 c4 20             	add    esp,0x20
c000f0f5:	6a 00                	push   0x0
c000f0f7:	68 cd 04 00 c0       	push   0xc00004cd
c000f0fc:	6a 12                	push   0x12
c000f0fe:	53                   	push   ebx
c000f0ff:	e8 6c fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f104:	6a 01                	push   0x1
c000f106:	68 67 05 00 c0       	push   0xc0000567
c000f10b:	6a 60                	push   0x60
c000f10d:	53                   	push   ebx
c000f10e:	e8 5d fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f113:	83 c4 20             	add    esp,0x20
c000f116:	6a 00                	push   0x0
c000f118:	68 6e 05 00 c0       	push   0xc000056e
c000f11d:	6a 20                	push   0x20
c000f11f:	53                   	push   ebx
c000f120:	e8 4b fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f125:	6a 00                	push   0x0
c000f127:	68 59 05 00 c0       	push   0xc0000559
c000f12c:	6a 21                	push   0x21
c000f12e:	53                   	push   ebx
c000f12f:	e8 3c fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f134:	83 c4 20             	add    esp,0x20
c000f137:	6a 00                	push   0x0
c000f139:	68 60 05 00 c0       	push   0xc0000560
c000f13e:	6a 22                	push   0x22
c000f140:	53                   	push   ebx
c000f141:	e8 2a fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f146:	6a 00                	push   0x0
c000f148:	68 d7 04 00 c0       	push   0xc00004d7
c000f14d:	6a 23                	push   0x23
c000f14f:	53                   	push   ebx
c000f150:	e8 1b fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f155:	83 c4 20             	add    esp,0x20
c000f158:	6a 00                	push   0x0
c000f15a:	68 e1 04 00 c0       	push   0xc00004e1
c000f15f:	6a 24                	push   0x24
c000f161:	53                   	push   ebx
c000f162:	e8 09 fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f167:	6a 00                	push   0x0
c000f169:	68 eb 04 00 c0       	push   0xc00004eb
c000f16e:	6a 25                	push   0x25
c000f170:	53                   	push   ebx
c000f171:	e8 fa fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f176:	83 c4 20             	add    esp,0x20
c000f179:	6a 00                	push   0x0
c000f17b:	68 f5 04 00 c0       	push   0xc00004f5
c000f180:	6a 26                	push   0x26
c000f182:	53                   	push   ebx
c000f183:	e8 e8 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f188:	6a 00                	push   0x0
c000f18a:	68 ff 04 00 c0       	push   0xc00004ff
c000f18f:	6a 27                	push   0x27
c000f191:	53                   	push   ebx
c000f192:	e8 d9 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f197:	83 c4 20             	add    esp,0x20
c000f19a:	6a 00                	push   0x0
c000f19c:	68 09 05 00 c0       	push   0xc0000509
c000f1a1:	6a 28                	push   0x28
c000f1a3:	53                   	push   ebx
c000f1a4:	e8 c7 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1a9:	6a 00                	push   0x0
c000f1ab:	68 13 05 00 c0       	push   0xc0000513
c000f1b0:	6a 29                	push   0x29
c000f1b2:	53                   	push   ebx
c000f1b3:	e8 b8 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1b8:	83 c4 20             	add    esp,0x20
c000f1bb:	6a 00                	push   0x0
c000f1bd:	68 1d 05 00 c0       	push   0xc000051d
c000f1c2:	6a 2a                	push   0x2a
c000f1c4:	53                   	push   ebx
c000f1c5:	e8 a6 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1ca:	6a 00                	push   0x0
c000f1cc:	68 27 05 00 c0       	push   0xc0000527
c000f1d1:	6a 2b                	push   0x2b
c000f1d3:	53                   	push   ebx
c000f1d4:	e8 97 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1d9:	83 c4 20             	add    esp,0x20
c000f1dc:	6a 00                	push   0x0
c000f1de:	68 31 05 00 c0       	push   0xc0000531
c000f1e3:	6a 2c                	push   0x2c
c000f1e5:	53                   	push   ebx
c000f1e6:	e8 85 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1eb:	6a 00                	push   0x0
c000f1ed:	68 3b 05 00 c0       	push   0xc000053b
c000f1f2:	6a 2d                	push   0x2d
c000f1f4:	53                   	push   ebx
c000f1f5:	e8 76 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1fa:	83 c4 20             	add    esp,0x20
c000f1fd:	6a 00                	push   0x0
c000f1ff:	68 45 05 00 c0       	push   0xc0000545
c000f204:	6a 2e                	push   0x2e
c000f206:	53                   	push   ebx
c000f207:	e8 64 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f20c:	6a 00                	push   0x0
c000f20e:	68 4f 05 00 c0       	push   0xc000054f
c000f213:	6a 2f                	push   0x2f
c000f215:	53                   	push   ebx
c000f216:	e8 55 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f21b:	83 c4 20             	add    esp,0x20
c000f21e:	6a 00                	push   0x0
c000f220:	68 94 05 00 c0       	push   0xc0000594
c000f225:	6a 30                	push   0x30
c000f227:	53                   	push   ebx
c000f228:	e8 43 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f22d:	6a 00                	push   0x0
c000f22f:	68 9e 05 00 c0       	push   0xc000059e
c000f234:	6a 31                	push   0x31
c000f236:	53                   	push   ebx
c000f237:	e8 34 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f23c:	83 c4 20             	add    esp,0x20
c000f23f:	6a 00                	push   0x0
c000f241:	68 a8 05 00 c0       	push   0xc00005a8
c000f246:	6a 32                	push   0x32
c000f248:	53                   	push   ebx
c000f249:	e8 22 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f24e:	6a 00                	push   0x0
c000f250:	68 b2 05 00 c0       	push   0xc00005b2
c000f255:	6a 33                	push   0x33
c000f257:	53                   	push   ebx
c000f258:	e8 13 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f25d:	83 c4 20             	add    esp,0x20
c000f260:	6a 00                	push   0x0
c000f262:	68 bc 05 00 c0       	push   0xc00005bc
c000f267:	6a 34                	push   0x34
c000f269:	53                   	push   ebx
c000f26a:	e8 01 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f26f:	6a 00                	push   0x0
c000f271:	68 c6 05 00 c0       	push   0xc00005c6
c000f276:	6a 35                	push   0x35
c000f278:	53                   	push   ebx
c000f279:	e8 f2 fc ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f27e:	83 c4 20             	add    esp,0x20
c000f281:	6a 00                	push   0x0
c000f283:	68 d0 05 00 c0       	push   0xc00005d0
c000f288:	6a 36                	push   0x36
c000f28a:	53                   	push   ebx
c000f28b:	e8 e0 fc ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f290:	6a 00                	push   0x0
c000f292:	68 da 05 00 c0       	push   0xc00005da
c000f297:	6a 37                	push   0x37
c000f299:	53                   	push   ebx
c000f29a:	e8 d1 fc ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f29f:	83 c4 20             	add    esp,0x20
c000f2a2:	e8 3e 25 00 00       	call   c00117e5 <Virt::getAKernelVAS()>
c000f2a7:	52                   	push   edx
c000f2a8:	6a 03                	push   0x3
c000f2aa:	6a 02                	push   0x2
c000f2ac:	50                   	push   eax
c000f2ad:	e8 6e 2b 00 00       	call   c0011e20 <VAS::allocatePages(int, int)>
c000f2b2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2b9:	89 c6                	mov    esi,eax
c000f2bb:	e8 12 02 00 00       	call   c000f4d2 <malloc>
c000f2c0:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2c9:	89 c7                	mov    edi,eax
c000f2cb:	e8 b6 1c 00 00       	call   c0010f86 <TSS::TSS()>
c000f2d0:	83 c4 0c             	add    esp,0xc
c000f2d3:	68 75 04 00 c0       	push   0xc0000475
c000f2d8:	56                   	push   esi
c000f2d9:	57                   	push   edi
c000f2da:	e8 e7 1c 00 00       	call   c0010fc6 <TSS::setup(unsigned long, unsigned long)>
c000f2df:	59                   	pop    ecx
c000f2e0:	89 c6                	mov    esi,eax
c000f2e2:	5f                   	pop    edi
c000f2e3:	6a 00                	push   0x0
c000f2e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2e9:	50                   	push   eax
c000f2ea:	e8 db fb ff ff       	call   c000eeca <IDTEntry::IDTEntry(bool)>
c000f2ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f3:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2f8:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f2ff:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f309:	80 ce 05             	or     dh,0x5
c000f30c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f30f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f313:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f317:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31d:	e8 86 fc ff ff       	call   c000efa8 <IDT::flush()>
c000f322:	83 c4 20             	add    esp,0x20
c000f325:	5b                   	pop    ebx
c000f326:	5e                   	pop    esi
c000f327:	5f                   	pop    edi
c000f328:	c3                   	ret    

c000f329 <sbrk>:
c000f329:	55                   	push   ebp
c000f32a:	57                   	push   edi
c000f32b:	56                   	push   esi
c000f32c:	53                   	push   ebx
c000f32d:	83 ec 1c             	sub    esp,0x1c
c000f330:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f334:	85 c0                	test   eax,eax
c000f336:	74 3e                	je     c000f376 <sbrk+0x4d>
c000f338:	78 43                	js     c000f37d <sbrk+0x54>
c000f33a:	8b 15 88 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa88
c000f340:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f346:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34c:	83 e2 01             	and    edx,0x1
c000f34f:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f353:	8b 0d 38 9a 02 c0    	mov    ecx,DWORD PTR ds:0xc0029a38
c000f359:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35d:	05 ff 0f 00 00       	add    eax,0xfff
c000f362:	89 c2                	mov    edx,eax
c000f364:	78 2f                	js     c000f395 <sbrk+0x6c>
c000f366:	c1 fa 0c             	sar    edx,0xc
c000f369:	89 d7                	mov    edi,edx
c000f36b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f36f:	be 00 00 00 00       	mov    esi,0x0
c000f374:	eb 36                	jmp    c000f3ac <sbrk+0x83>
c000f376:	a1 38 9a 02 c0       	mov    eax,ds:0xc0029a38
c000f37b:	eb 74                	jmp    c000f3f1 <sbrk+0xc8>
c000f37d:	83 ec 08             	sub    esp,0x8
c000f380:	50                   	push   eax
c000f381:	68 50 71 02 c0       	push   0xc0027150
c000f386:	e8 ba 32 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000f38b:	83 c4 10             	add    esp,0x10
c000f38e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f393:	eb 5c                	jmp    c000f3f1 <sbrk+0xc8>
c000f395:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39b:	eb c9                	jmp    c000f366 <sbrk+0x3d>
c000f39d:	81 05 38 9a 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0029a38,0x1000
c000f3a7:	46                   	inc    esi
c000f3a8:	39 f7                	cmp    edi,esi
c000f3aa:	74 34                	je     c000f3e0 <sbrk+0xb7>
c000f3ac:	e8 34 24 00 00       	call   c00117e5 <Virt::getAKernelVAS()>
c000f3b1:	89 c3                	mov    ebx,eax
c000f3b3:	8b 2d 38 9a 02 c0    	mov    ebp,DWORD PTR ds:0xc0029a38
c000f3b9:	e8 be 06 00 00       	call   c000fa7c <Phys::allocatePage()>
c000f3be:	68 01 04 00 00       	push   0x401
c000f3c3:	55                   	push   ebp
c000f3c4:	50                   	push   eax
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 55 29 00 00       	call   c0011d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cb:	83 c4 10             	add    esp,0x10
c000f3ce:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d3:	74 c8                	je     c000f39d <sbrk+0x74>
c000f3d5:	8b 1d 38 9a 02 c0    	mov    ebx,DWORD PTR ds:0xc0029a38
c000f3db:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3de:	eb bd                	jmp    c000f39d <sbrk+0x74>
c000f3e0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e5:	75 12                	jne    c000f3f9 <sbrk+0xd0>
c000f3e7:	0f 20 d8             	mov    eax,cr3
c000f3ea:	0f 22 d8             	mov    cr3,eax
c000f3ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f1:	83 c4 1c             	add    esp,0x1c
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	5d                   	pop    ebp
c000f3f8:	c3                   	ret    
c000f3f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3fd:	89 cb                	mov    ebx,ecx
c000f3ff:	c1 eb 0a             	shr    ebx,0xa
c000f402:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f408:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f40e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f412:	c1 e0 0c             	shl    eax,0xc
c000f415:	01 c8                	add    eax,ecx
c000f417:	c1 e8 0a             	shr    eax,0xa
c000f41a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f41f:	2d 00 00 40 00       	sub    eax,0x400000
c000f424:	39 c3                	cmp    ebx,eax
c000f426:	77 c5                	ja     c000f3ed <sbrk+0xc4>
c000f428:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f431:	39 d8                	cmp    eax,ebx
c000f433:	73 f3                	jae    c000f428 <sbrk+0xff>
c000f435:	eb b6                	jmp    c000f3ed <sbrk+0xc4>

c000f437 <mmap>:
c000f437:	83 ec 18             	sub    esp,0x18
c000f43a:	68 80 71 02 c0       	push   0xc0027180
c000f43f:	e8 c5 99 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000f444:	b8 00 00 00 00       	mov    eax,0x0
c000f449:	83 c4 1c             	add    esp,0x1c
c000f44c:	c3                   	ret    

c000f44d <munmap>:
c000f44d:	83 ec 18             	sub    esp,0x18
c000f450:	68 85 71 02 c0       	push   0xc0027185
c000f455:	e8 af 99 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000f45a:	b8 00 00 00 00       	mov    eax,0x0
c000f45f:	83 c4 1c             	add    esp,0x1c
c000f462:	c3                   	ret    

c000f463 <liballoc_lock()>:
c000f463:	83 ec 0c             	sub    esp,0xc
c000f466:	e8 aa c9 00 00       	call   c001be15 <lockScheduler()>
c000f46b:	b8 00 00 00 00       	mov    eax,0x0
c000f470:	83 c4 0c             	add    esp,0xc
c000f473:	c3                   	ret    

c000f474 <liballoc_unlock()>:
c000f474:	83 ec 0c             	sub    esp,0xc
c000f477:	e8 9b c9 00 00       	call   c001be17 <unlockScheduler()>
c000f47c:	b8 00 00 00 00       	mov    eax,0x0
c000f481:	83 c4 0c             	add    esp,0xc
c000f484:	c3                   	ret    

c000f485 <liballoc_alloc(int)>:
c000f485:	83 ec 0c             	sub    esp,0xc
c000f488:	e8 58 23 00 00       	call   c00117e5 <Virt::getAKernelVAS()>
c000f48d:	83 ec 04             	sub    esp,0x4
c000f490:	6a 01                	push   0x1
c000f492:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f496:	50                   	push   eax
c000f497:	e8 84 29 00 00       	call   c0011e20 <VAS::allocatePages(int, int)>
c000f49c:	83 c4 1c             	add    esp,0x1c
c000f49f:	c3                   	ret    

c000f4a0 <liballoc_free(void*, int)>:
c000f4a0:	83 ec 0c             	sub    esp,0xc
c000f4a3:	e8 3d 23 00 00       	call   c00117e5 <Virt::getAKernelVAS()>
c000f4a8:	83 ec 08             	sub    esp,0x8
c000f4ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4af:	50                   	push   eax
c000f4b0:	e8 27 26 00 00       	call   c0011adc <VAS::freeAllocatedPages(unsigned long)>
c000f4b5:	b8 00 00 00 00       	mov    eax,0x0
c000f4ba:	83 c4 1c             	add    esp,0x1c
c000f4bd:	c3                   	ret    

c000f4be <realloc>:
c000f4be:	83 ec 14             	sub    esp,0x14
c000f4c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c9:	e8 28 1f ff ff       	call   c00013f6 <dlrealloc>
c000f4ce:	83 c4 1c             	add    esp,0x1c
c000f4d1:	c3                   	ret    

c000f4d2 <malloc>:
c000f4d2:	83 ec 18             	sub    esp,0x18
c000f4d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d9:	e8 db 19 ff ff       	call   c0000eb9 <dlmalloc>
c000f4de:	83 c4 1c             	add    esp,0x1c
c000f4e1:	c3                   	ret    

c000f4e2 <free>:
c000f4e2:	83 ec 18             	sub    esp,0x18
c000f4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e9:	e8 70 16 ff ff       	call   c0000b5e <dlfree>
c000f4ee:	83 c4 1c             	add    esp,0x1c
c000f4f1:	c3                   	ret    

c000f4f2 <rfree>:
c000f4f2:	83 ec 18             	sub    esp,0x18
c000f4f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4f9:	e8 60 16 ff ff       	call   c0000b5e <dlfree>
c000f4fe:	83 c4 1c             	add    esp,0x1c
c000f501:	c3                   	ret    

c000f502 <calloc>:
c000f502:	56                   	push   esi
c000f503:	53                   	push   ebx
c000f504:	83 ec 10             	sub    esp,0x10
c000f507:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50b:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f510:	53                   	push   ebx
c000f511:	e8 bc ff ff ff       	call   c000f4d2 <malloc>
c000f516:	89 c6                	mov    esi,eax
c000f518:	83 c4 0c             	add    esp,0xc
c000f51b:	53                   	push   ebx
c000f51c:	6a 00                	push   0x0
c000f51e:	50                   	push   eax
c000f51f:	e8 59 11 ff ff       	call   c000067d <memset>
c000f524:	89 f0                	mov    eax,esi
c000f526:	83 c4 14             	add    esp,0x14
c000f529:	5b                   	pop    ebx
c000f52a:	5e                   	pop    esi
c000f52b:	c3                   	ret    

c000f52c <hwTextMode_loadInData(VgaText*)>:
c000f52c:	57                   	push   edi
c000f52d:	56                   	push   esi
c000f52e:	53                   	push   ebx
c000f52f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f533:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f539:	85 c0                	test   eax,eax
c000f53b:	7e 30                	jle    c000f56d <hwTextMode_loadInData(VgaText*)+0x41>
c000f53d:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f540:	31 f6                	xor    esi,esi
c000f542:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f545:	31 c0                	xor    eax,eax
c000f547:	c1 e1 05             	shl    ecx,0x5
c000f54a:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f550:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f554:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f558:	40                   	inc    eax
c000f559:	83 f8 50             	cmp    eax,0x50
c000f55c:	75 f2                	jne    c000f550 <hwTextMode_loadInData(VgaText*)+0x24>
c000f55e:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f564:	46                   	inc    esi
c000f565:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f56b:	7f d5                	jg     c000f542 <hwTextMode_loadInData(VgaText*)+0x16>
c000f56d:	5b                   	pop    ebx
c000f56e:	5e                   	pop    esi
c000f56f:	5f                   	pop    edi
c000f570:	c3                   	ret    

c000f571 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f571:	56                   	push   esi
c000f572:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f577:	53                   	push   ebx
c000f578:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f57c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f580:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f586:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f58c:	c1 e0 04             	shl    eax,0x4
c000f58f:	83 e6 0f             	and    esi,0xf
c000f592:	0f b6 c0             	movzx  eax,al
c000f595:	41                   	inc    ecx
c000f596:	09 f0                	or     eax,esi
c000f598:	83 c2 02             	add    edx,0x2
c000f59b:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f59f:	c1 e0 08             	shl    eax,0x8
c000f5a2:	09 f0                	or     eax,esi
c000f5a4:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5a8:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f5ae:	75 d0                	jne    c000f580 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f5b0:	5b                   	pop    ebx
c000f5b1:	5e                   	pop    esi
c000f5b2:	c3                   	ret    

c000f5b3 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5b3:	56                   	push   esi
c000f5b4:	53                   	push   ebx
c000f5b5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5ba:	74 38                	je     c000f5f4 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5bc:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5c1:	b0 0a                	mov    al,0xa
c000f5c3:	89 da                	mov    edx,ebx
c000f5c5:	ee                   	out    dx,al
c000f5c6:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5cb:	89 ca                	mov    edx,ecx
c000f5cd:	ec                   	in     al,dx
c000f5ce:	b2 0f                	mov    dl,0xf
c000f5d0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5d4:	83 e0 c0             	and    eax,0xffffffc0
c000f5d7:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5dd:	09 d0                	or     eax,edx
c000f5df:	89 ca                	mov    edx,ecx
c000f5e1:	ee                   	out    dx,al
c000f5e2:	b0 0b                	mov    al,0xb
c000f5e4:	89 da                	mov    edx,ebx
c000f5e6:	ee                   	out    dx,al
c000f5e7:	89 ca                	mov    edx,ecx
c000f5e9:	ec                   	in     al,dx
c000f5ea:	83 e0 e0             	and    eax,0xffffffe0
c000f5ed:	83 c8 0f             	or     eax,0xf
c000f5f0:	ee                   	out    dx,al
c000f5f1:	5b                   	pop    ebx
c000f5f2:	5e                   	pop    esi
c000f5f3:	c3                   	ret    
c000f5f4:	b0 0a                	mov    al,0xa
c000f5f6:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5fb:	ee                   	out    dx,al
c000f5fc:	b0 20                	mov    al,0x20
c000f5fe:	ba d5 03 00 00       	mov    edx,0x3d5
c000f603:	ee                   	out    dx,al
c000f604:	5b                   	pop    ebx
c000f605:	5e                   	pop    esi
c000f606:	c3                   	ret    

c000f607 <hwTextMode_update(VgaText*)>:
c000f607:	c3                   	ret    

c000f608 <hwTextMode_updateCursor(VgaText*)>:
c000f608:	56                   	push   esi
c000f609:	b9 19 00 00 00       	mov    ecx,0x19
c000f60e:	53                   	push   ebx
c000f60f:	be d4 03 00 00       	mov    esi,0x3d4
c000f614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f618:	89 f2                	mov    edx,esi
c000f61a:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f620:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f626:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f629:	c1 e1 04             	shl    ecx,0x4
c000f62c:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f632:	b0 0f                	mov    al,0xf
c000f634:	ee                   	out    dx,al
c000f635:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f63a:	88 c8                	mov    al,cl
c000f63c:	89 da                	mov    edx,ebx
c000f63e:	ee                   	out    dx,al
c000f63f:	b0 0e                	mov    al,0xe
c000f641:	89 f2                	mov    edx,esi
c000f643:	ee                   	out    dx,al
c000f644:	89 c8                	mov    eax,ecx
c000f646:	89 da                	mov    edx,ebx
c000f648:	66 c1 e8 08          	shr    ax,0x8
c000f64c:	ee                   	out    dx,al
c000f64d:	5b                   	pop    ebx
c000f64e:	5e                   	pop    esi
c000f64f:	c3                   	ret    

c000f650 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f650:	ba da 03 00 00       	mov    edx,0x3da
c000f655:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f65a:	75 18                	jne    c000f674 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f65c:	ec                   	in     al,dx
c000f65d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f662:	b0 30                	mov    al,0x30
c000f664:	89 ca                	mov    edx,ecx
c000f666:	ee                   	out    dx,al
c000f667:	ba c1 03 00 00       	mov    edx,0x3c1
c000f66c:	ec                   	in     al,dx
c000f66d:	83 c8 08             	or     eax,0x8
c000f670:	89 ca                	mov    edx,ecx
c000f672:	ee                   	out    dx,al
c000f673:	c3                   	ret    
c000f674:	ec                   	in     al,dx
c000f675:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f67a:	b0 30                	mov    al,0x30
c000f67c:	89 ca                	mov    edx,ecx
c000f67e:	ee                   	out    dx,al
c000f67f:	ba c1 03 00 00       	mov    edx,0x3c1
c000f684:	ec                   	in     al,dx
c000f685:	83 e0 f7             	and    eax,0xfffffff7
c000f688:	89 ca                	mov    edx,ecx
c000f68a:	ee                   	out    dx,al
c000f68b:	c3                   	ret    

c000f68c <hwTextMode_scrollScreen(VgaText*)>:
c000f68c:	55                   	push   ebp
c000f68d:	bd 02 00 00 00       	mov    ebp,0x2
c000f692:	57                   	push   edi
c000f693:	56                   	push   esi
c000f694:	53                   	push   ebx
c000f695:	83 ec 1c             	sub    esp,0x1c
c000f698:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f6a0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f6a4:	31 c0                	xor    eax,eax
c000f6a6:	eb 0b                	jmp    c000f6b3 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f6a8:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6ae:	74 57                	je     c000f707 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f6b0:	43                   	inc    ebx
c000f6b1:	89 f0                	mov    eax,esi
c000f6b3:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6b9:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6bf:	88 13                	mov    BYTE PTR [ebx],dl
c000f6c1:	8d 70 01             	lea    esi,[eax+0x1]
c000f6c4:	83 fd 18             	cmp    ebp,0x18
c000f6c7:	75 df                	jne    c000f6a8 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6c9:	a8 01                	test   al,0x1
c000f6cb:	75 13                	jne    c000f6e0 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6cd:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6d0:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6d6:	75 d8                	jne    c000f6b0 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6d8:	83 c4 1c             	add    esp,0x1c
c000f6db:	5b                   	pop    ebx
c000f6dc:	5e                   	pop    esi
c000f6dd:	5f                   	pop    edi
c000f6de:	5d                   	pop    ebp
c000f6df:	c3                   	ret    
c000f6e0:	83 ec 08             	sub    esp,0x8
c000f6e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6e7:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6ee:	50                   	push   eax
c000f6ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6f3:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6fa:	50                   	push   eax
c000f6fb:	e8 66 0b 00 00       	call   c0010266 <VgaText::combineColours(unsigned char, unsigned char)>
c000f700:	83 c4 10             	add    esp,0x10
c000f703:	88 07                	mov    BYTE PTR [edi],al
c000f705:	eb c9                	jmp    c000f6d0 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f707:	45                   	inc    ebp
c000f708:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f710:	eb 8e                	jmp    c000f6a0 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f712 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f712:	56                   	push   esi
c000f713:	53                   	push   ebx
c000f714:	83 ec 0c             	sub    esp,0xc
c000f717:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f71b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f71f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f724:	50                   	push   eax
c000f725:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f72a:	50                   	push   eax
c000f72b:	e8 36 0b 00 00       	call   c0010266 <VgaText::combineColours(unsigned char, unsigned char)>
c000f730:	5a                   	pop    edx
c000f731:	0f b6 c0             	movzx  eax,al
c000f734:	59                   	pop    ecx
c000f735:	50                   	push   eax
c000f736:	89 f0                	mov    eax,esi
c000f738:	0f be f0             	movsx  esi,al
c000f73b:	56                   	push   esi
c000f73c:	e8 cb 0b 00 00       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c000f741:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f745:	ba 19 00 00 00       	mov    edx,0x19
c000f74a:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f750:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f753:	8d 14 92             	lea    edx,[edx+edx*4]
c000f756:	c1 e1 04             	shl    ecx,0x4
c000f759:	c1 e2 04             	shl    edx,0x4
c000f75c:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f760:	01 ca                	add    edx,ecx
c000f762:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f76a:	83 c4 14             	add    esp,0x14
c000f76d:	5b                   	pop    ebx
c000f76e:	5e                   	pop    esi
c000f76f:	c3                   	ret    

c000f770 <setupTextMode()>:
c000f770:	c7 05 38 ab 02 c0 50 f6 00 c0 	mov    DWORD PTR ds:0xc002ab38,0xc000f650
c000f77a:	c7 05 24 ab 02 c0 2c f5 00 c0 	mov    DWORD PTR ds:0xc002ab24,0xc000f52c
c000f784:	c7 05 20 ab 02 c0 71 f5 00 c0 	mov    DWORD PTR ds:0xc002ab20,0xc000f571
c000f78e:	c7 05 2c ab 02 c0 8c f6 00 c0 	mov    DWORD PTR ds:0xc002ab2c,0xc000f68c
c000f798:	c7 05 34 ab 02 c0 b3 f5 00 c0 	mov    DWORD PTR ds:0xc002ab34,0xc000f5b3
c000f7a2:	c7 05 28 ab 02 c0 07 f6 00 c0 	mov    DWORD PTR ds:0xc002ab28,0xc000f607
c000f7ac:	c7 05 30 ab 02 c0 08 f6 00 c0 	mov    DWORD PTR ds:0xc002ab30,0xc000f608
c000f7b6:	c7 05 3c ab 02 c0 12 f7 00 c0 	mov    DWORD PTR ds:0xc002ab3c,0xc000f712
c000f7c0:	c3                   	ret    

c000f7c1 <kernel_main>:
c000f7c1:	57                   	push   edi
c000f7c2:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7c7:	56                   	push   esi
c000f7c8:	31 f6                	xor    esi,esi
c000f7ca:	53                   	push   ebx
c000f7cb:	83 ec 10             	sub    esp,0x10
c000f7ce:	e8 ed 08 00 00       	call   c00100c0 <installVgaTextImplementation()>
c000f7d3:	e8 98 ff ff ff       	call   c000f770 <setupTextMode()>
c000f7d8:	89 f0                	mov    eax,esi
c000f7da:	89 fa                	mov    edx,edi
c000f7dc:	ee                   	out    dx,al
c000f7dd:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7e2:	b0 80                	mov    al,0x80
c000f7e4:	89 da                	mov    edx,ebx
c000f7e6:	ee                   	out    dx,al
c000f7e7:	b1 03                	mov    cl,0x3
c000f7e9:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7ee:	88 c8                	mov    al,cl
c000f7f0:	ee                   	out    dx,al
c000f7f1:	89 f0                	mov    eax,esi
c000f7f3:	89 fa                	mov    edx,edi
c000f7f5:	ee                   	out    dx,al
c000f7f6:	88 c8                	mov    al,cl
c000f7f8:	89 da                	mov    edx,ebx
c000f7fa:	ee                   	out    dx,al
c000f7fb:	b0 c7                	mov    al,0xc7
c000f7fd:	ba fa 03 00 00       	mov    edx,0x3fa
c000f802:	ee                   	out    dx,al
c000f803:	b0 0b                	mov    al,0xb
c000f805:	ba fc 03 00 00       	mov    edx,0x3fc
c000f80a:	ee                   	out    dx,al
c000f80b:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f810:	83 ec 0c             	sub    esp,0xc
c000f813:	05 ff 0f 00 00       	add    eax,0xfff
c000f818:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f81d:	50                   	push   eax
c000f81e:	e8 59 03 00 00       	call   c000fb7c <Phys::physicalMemorySetup(unsigned int)>
c000f823:	e8 3e 1f 00 00       	call   c0011766 <Virt::virtualMemorySetup()>
c000f828:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f82e:	83 c4 10             	add    esp,0x10
c000f831:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f837:	75 0e                	jne    c000f847 <kernel_main+0x86>
c000f839:	89 d8                	mov    eax,ebx
c000f83b:	25 48 03 00 00       	and    eax,0x348
c000f840:	3d 00 03 00 00       	cmp    eax,0x300
c000f845:	74 10                	je     c000f857 <kernel_main+0x96>
c000f847:	83 ec 0c             	sub    esp,0xc
c000f84a:	68 1b 87 02 c0       	push   0xc002871b
c000f84f:	e8 b5 95 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000f854:	83 c4 10             	add    esp,0x10
c000f857:	83 ec 0c             	sub    esp,0xc
c000f85a:	89 1d a0 aa 02 c0    	mov    DWORD PTR ds:0xc002aaa0,ebx
c000f860:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f864:	53                   	push   ebx
c000f865:	e8 b0 20 00 00       	call   c001191a <VAS::VAS()>
c000f86a:	89 1d e4 ab 02 c0    	mov    DWORD PTR ds:0xc002abe4,ebx
c000f870:	e8 ab 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f875:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f87c:	e8 51 fc ff ff       	call   c000f4d2 <malloc>
c000f881:	89 04 24             	mov    DWORD PTR [esp],eax
c000f884:	89 c6                	mov    esi,eax
c000f886:	e8 51 ea ff ff       	call   c000e2dc <Computer::Computer()>
c000f88b:	6a 00                	push   0x0
c000f88d:	89 35 88 aa 02 c0    	mov    DWORD PTR ds:0xc002aa88,esi
c000f893:	6a 00                	push   0x0
c000f895:	6a 00                	push   0x0
c000f897:	56                   	push   esi
c000f898:	e8 7f f2 ff ff       	call   c000eb1c <Computer::open(int, int, void*)>
c000f89d:	83 c4 14             	add    esp,0x14
c000f8a0:	53                   	push   ebx
c000f8a1:	e8 0e 23 00 00       	call   c0011bb4 <VAS::~VAS()>
c000f8a6:	c7 04 24 8c 71 02 c0 	mov    DWORD PTR [esp],0xc002718c
c000f8ad:	e8 57 95 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000f8b2:	83 c4 20             	add    esp,0x20
c000f8b5:	5b                   	pop    ebx
c000f8b6:	5e                   	pop    esi
c000f8b7:	5f                   	pop    edi
c000f8b8:	c3                   	ret    

c000f8b9 <Phys::allocateDMA(unsigned long)>:
c000f8b9:	55                   	push   ebp
c000f8ba:	31 d2                	xor    edx,edx
c000f8bc:	57                   	push   edi
c000f8bd:	31 ed                	xor    ebp,ebp
c000f8bf:	56                   	push   esi
c000f8c0:	31 c9                	xor    ecx,ecx
c000f8c2:	53                   	push   ebx
c000f8c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8c7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8cd:	31 c0                	xor    eax,eax
c000f8cf:	c1 ee 0c             	shr    esi,0xc
c000f8d2:	eb 17                	jmp    c000f8eb <Phys::allocateDMA(unsigned long)+0x32>
c000f8d4:	85 c9                	test   ecx,ecx
c000f8d6:	75 04                	jne    c000f8dc <Phys::allocateDMA(unsigned long)+0x23>
c000f8d8:	89 d5                	mov    ebp,edx
c000f8da:	89 d0                	mov    eax,edx
c000f8dc:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8df:	39 de                	cmp    esi,ebx
c000f8e1:	74 20                	je     c000f903 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8e3:	42                   	inc    edx
c000f8e4:	89 d9                	mov    ecx,ebx
c000f8e6:	83 fa 2f             	cmp    edx,0x2f
c000f8e9:	7f 11                	jg     c000f8fc <Phys::allocateDMA(unsigned long)+0x43>
c000f8eb:	80 ba e0 aa 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5520],0x0
c000f8f2:	74 e0                	je     c000f8d4 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8f4:	31 c9                	xor    ecx,ecx
c000f8f6:	42                   	inc    edx
c000f8f7:	83 fa 2f             	cmp    edx,0x2f
c000f8fa:	7e ef                	jle    c000f8eb <Phys::allocateDMA(unsigned long)+0x32>
c000f8fc:	5b                   	pop    ebx
c000f8fd:	31 c0                	xor    eax,eax
c000f8ff:	5e                   	pop    esi
c000f900:	5f                   	pop    edi
c000f901:	5d                   	pop    ebp
c000f902:	c3                   	ret    
c000f903:	8d 14 30             	lea    edx,[eax+esi*1]
c000f906:	89 d7                	mov    edi,edx
c000f908:	4f                   	dec    edi
c000f909:	79 03                	jns    c000f90e <Phys::allocateDMA(unsigned long)+0x55>
c000f90b:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f90e:	c1 ff 04             	sar    edi,0x4
c000f911:	89 c2                	mov    edx,eax
c000f913:	c1 fa 04             	sar    edx,0x4
c000f916:	39 fa                	cmp    edx,edi
c000f918:	75 2f                	jne    c000f949 <Phys::allocateDMA(unsigned long)+0x90>
c000f91a:	85 db                	test   ebx,ebx
c000f91c:	74 1a                	je     c000f938 <Phys::allocateDMA(unsigned long)+0x7f>
c000f91e:	be e0 aa 02 c0       	mov    esi,0xc002aae0
c000f923:	8d 90 e0 aa 02 c0    	lea    edx,[eax-0x3ffd5520]
c000f929:	f7 d6                	not    esi
c000f92b:	29 c6                	sub    esi,eax
c000f92d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f930:	42                   	inc    edx
c000f931:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f934:	39 d9                	cmp    ecx,ebx
c000f936:	7f f5                	jg     c000f92d <Phys::allocateDMA(unsigned long)+0x74>
c000f938:	85 ff                	test   edi,edi
c000f93a:	74 13                	je     c000f94f <Phys::allocateDMA(unsigned long)+0x96>
c000f93c:	5b                   	pop    ebx
c000f93d:	05 50 20 0c 00       	add    eax,0xc2050
c000f942:	5e                   	pop    esi
c000f943:	c1 e0 0c             	shl    eax,0xc
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	89 ea                	mov    edx,ebp
c000f94b:	31 c9                	xor    ecx,ecx
c000f94d:	eb a7                	jmp    c000f8f6 <Phys::allocateDMA(unsigned long)+0x3d>
c000f94f:	5b                   	pop    ebx
c000f950:	c1 e0 0c             	shl    eax,0xc
c000f953:	5e                   	pop    esi
c000f954:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f959:	5f                   	pop    edi
c000f95a:	5d                   	pop    ebp
c000f95b:	c3                   	ret    

c000f95c <Phys::freeDMA(unsigned long, unsigned long)>:
c000f95c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f960:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f964:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f96a:	c1 e9 0c             	shr    ecx,0xc
c000f96d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f972:	76 25                	jbe    c000f999 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f974:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f979:	c1 e8 0c             	shr    eax,0xc
c000f97c:	8d 50 10             	lea    edx,[eax+0x10]
c000f97f:	85 c9                	test   ecx,ecx
c000f981:	74 15                	je     c000f998 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f983:	8d 82 e0 aa 02 c0    	lea    eax,[edx-0x3ffd5520]
c000f989:	8d 94 11 e0 aa 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5520]
c000f990:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f993:	40                   	inc    eax
c000f994:	39 d0                	cmp    eax,edx
c000f996:	75 f8                	jne    c000f990 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f998:	c3                   	ret    
c000f999:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f99f:	c1 ea 0c             	shr    edx,0xc
c000f9a2:	eb db                	jmp    c000f97f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f9a4 <Phys::setPageState(unsigned long, bool)>:
c000f9a4:	56                   	push   esi
c000f9a5:	ba 01 00 00 00       	mov    edx,0x1
c000f9aa:	53                   	push   ebx
c000f9ab:	8b 35 3c 9a 02 c0    	mov    esi,DWORD PTR ds:0xc0029a3c
c000f9b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9b9:	89 c8                	mov    eax,ecx
c000f9bb:	83 e1 07             	and    ecx,0x7
c000f9be:	c1 e8 03             	shr    eax,0x3
c000f9c1:	d3 e3                	shl    ebx,cl
c000f9c3:	01 c6                	add    esi,eax
c000f9c5:	d3 e2                	shl    edx,cl
c000f9c7:	f7 d2                	not    edx
c000f9c9:	20 16                	and    BYTE PTR [esi],dl
c000f9cb:	03 05 3c 9a 02 c0    	add    eax,DWORD PTR ds:0xc0029a3c
c000f9d1:	08 18                	or     BYTE PTR [eax],bl
c000f9d3:	5b                   	pop    ebx
c000f9d4:	5e                   	pop    esi
c000f9d5:	c3                   	ret    

c000f9d6 <Phys::getPageState(unsigned long)>:
c000f9d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9da:	8b 15 3c 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029a3c
c000f9e0:	89 c8                	mov    eax,ecx
c000f9e2:	83 e1 07             	and    ecx,0x7
c000f9e5:	c1 e8 03             	shr    eax,0x3
c000f9e8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9ec:	d3 f8                	sar    eax,cl
c000f9ee:	83 e0 01             	and    eax,0x1
c000f9f1:	c3                   	ret    

c000f9f2 <Phys::freePage(unsigned long)>:
c000f9f2:	53                   	push   ebx
c000f9f3:	83 ec 08             	sub    esp,0x8
c000f9f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9fa:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fa00:	76 57                	jbe    c000fa59 <Phys::freePage(unsigned long)+0x67>
c000fa02:	c1 eb 0c             	shr    ebx,0xc
c000fa05:	53                   	push   ebx
c000fa06:	e8 cb ff ff ff       	call   c000f9d6 <Phys::getPageState(unsigned long)>
c000fa0b:	5a                   	pop    edx
c000fa0c:	84 c0                	test   al,al
c000fa0e:	74 5b                	je     c000fa6b <Phys::freePage(unsigned long)+0x79>
c000fa10:	a1 cc aa 02 c0       	mov    eax,ds:0xc002aacc
c000fa15:	48                   	dec    eax
c000fa16:	a3 cc aa 02 c0       	mov    ds:0xc002aacc,eax
c000fa1b:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa1e:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa21:	c1 e0 02             	shl    eax,0x2
c000fa24:	99                   	cdq    
c000fa25:	f7 3d d0 aa 02 c0    	idiv   DWORD PTR ds:0xc002aad0
c000fa2b:	39 05 c8 aa 02 c0    	cmp    DWORD PTR ds:0xc002aac8,eax
c000fa31:	75 13                	jne    c000fa46 <Phys::freePage(unsigned long)+0x54>
c000fa33:	83 ec 08             	sub    esp,0x8
c000fa36:	6a 00                	push   0x0
c000fa38:	53                   	push   ebx
c000fa39:	e8 66 ff ff ff       	call   c000f9a4 <Phys::setPageState(unsigned long, bool)>
c000fa3e:	83 c4 10             	add    esp,0x10
c000fa41:	83 c4 08             	add    esp,0x8
c000fa44:	5b                   	pop    ebx
c000fa45:	c3                   	ret    
c000fa46:	83 ec 0c             	sub    esp,0xc
c000fa49:	a3 c8 aa 02 c0       	mov    ds:0xc002aac8,eax
c000fa4e:	50                   	push   eax
c000fa4f:	e8 00 0a 00 00       	call   c0010454 <VgaText::updateRAMUsageDisplay(int)>
c000fa54:	83 c4 10             	add    esp,0x10
c000fa57:	eb da                	jmp    c000fa33 <Phys::freePage(unsigned long)+0x41>
c000fa59:	68 00 10 00 00       	push   0x1000
c000fa5e:	53                   	push   ebx
c000fa5f:	e8 f8 fe ff ff       	call   c000f95c <Phys::freeDMA(unsigned long, unsigned long)>
c000fa64:	59                   	pop    ecx
c000fa65:	5b                   	pop    ebx
c000fa66:	83 c4 08             	add    esp,0x8
c000fa69:	5b                   	pop    ebx
c000fa6a:	c3                   	ret    
c000fa6b:	c7 44 24 10 a7 71 02 c0 	mov    DWORD PTR [esp+0x10],0xc00271a7
c000fa73:	83 c4 08             	add    esp,0x8
c000fa76:	5b                   	pop    ebx
c000fa77:	e9 8d 93 00 00       	jmp    c0018e09 <Krnl::panic(char const*)>

c000fa7c <Phys::allocatePage()>:
c000fa7c:	56                   	push   esi
c000fa7d:	53                   	push   ebx
c000fa7e:	51                   	push   ecx
c000fa7f:	8b 35 c0 aa 02 c0    	mov    esi,DWORD PTR ds:0xc002aac0
c000fa85:	89 f3                	mov    ebx,esi
c000fa87:	eb 0a                	jmp    c000fa93 <Phys::allocatePage()+0x17>
c000fa89:	89 1d c0 aa 02 c0    	mov    DWORD PTR ds:0xc002aac0,ebx
c000fa8f:	39 de                	cmp    esi,ebx
c000fa91:	74 24                	je     c000fab7 <Phys::allocatePage()+0x3b>
c000fa93:	53                   	push   ebx
c000fa94:	e8 3d ff ff ff       	call   c000f9d6 <Phys::getPageState(unsigned long)>
c000fa99:	5a                   	pop    edx
c000fa9a:	84 c0                	test   al,al
c000fa9c:	74 5a                	je     c000faf8 <Phys::allocatePage()+0x7c>
c000fa9e:	43                   	inc    ebx
c000fa9f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faa5:	75 e2                	jne    c000fa89 <Phys::allocatePage()+0xd>
c000faa7:	31 db                	xor    ebx,ebx
c000faa9:	c7 05 c0 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aac0,0x0
c000fab3:	39 de                	cmp    esi,ebx
c000fab5:	75 dc                	jne    c000fa93 <Phys::allocatePage()+0x17>
c000fab7:	83 ec 0c             	sub    esp,0xc
c000faba:	68 bd 71 02 c0       	push   0xc00271bd
c000fabf:	e8 81 2b 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000fac4:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000facb:	e8 e9 fd ff ff       	call   c000f8b9 <Phys::allocateDMA(unsigned long)>
c000fad0:	83 c4 10             	add    esp,0x10
c000fad3:	85 c0                	test   eax,eax
c000fad5:	75 56                	jne    c000fb2d <Phys::allocatePage()+0xb1>
c000fad7:	83 ec 0c             	sub    esp,0xc
c000fada:	68 ce 71 02 c0       	push   0xc00271ce
c000fadf:	e8 25 93 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000fae4:	83 c4 10             	add    esp,0x10
c000fae7:	8b 1d c0 aa 02 c0    	mov    ebx,DWORD PTR ds:0xc002aac0
c000faed:	53                   	push   ebx
c000faee:	e8 e3 fe ff ff       	call   c000f9d6 <Phys::getPageState(unsigned long)>
c000faf3:	5a                   	pop    edx
c000faf4:	84 c0                	test   al,al
c000faf6:	75 a6                	jne    c000fa9e <Phys::allocatePage()+0x22>
c000faf8:	6a 01                	push   0x1
c000fafa:	53                   	push   ebx
c000fafb:	e8 a4 fe ff ff       	call   c000f9a4 <Phys::setPageState(unsigned long, bool)>
c000fb00:	a1 cc aa 02 c0       	mov    eax,ds:0xc002aacc
c000fb05:	59                   	pop    ecx
c000fb06:	40                   	inc    eax
c000fb07:	5b                   	pop    ebx
c000fb08:	a3 cc aa 02 c0       	mov    ds:0xc002aacc,eax
c000fb0d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb10:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb13:	c1 e0 02             	shl    eax,0x2
c000fb16:	99                   	cdq    
c000fb17:	f7 3d d0 aa 02 c0    	idiv   DWORD PTR ds:0xc002aad0
c000fb1d:	39 05 c8 aa 02 c0    	cmp    DWORD PTR ds:0xc002aac8,eax
c000fb23:	75 0c                	jne    c000fb31 <Phys::allocatePage()+0xb5>
c000fb25:	a1 c0 aa 02 c0       	mov    eax,ds:0xc002aac0
c000fb2a:	c1 e0 0c             	shl    eax,0xc
c000fb2d:	5a                   	pop    edx
c000fb2e:	5b                   	pop    ebx
c000fb2f:	5e                   	pop    esi
c000fb30:	c3                   	ret    
c000fb31:	83 ec 0c             	sub    esp,0xc
c000fb34:	a3 c8 aa 02 c0       	mov    ds:0xc002aac8,eax
c000fb39:	50                   	push   eax
c000fb3a:	e8 15 09 00 00       	call   c0010454 <VgaText::updateRAMUsageDisplay(int)>
c000fb3f:	83 c4 10             	add    esp,0x10
c000fb42:	eb e1                	jmp    c000fb25 <Phys::allocatePage()+0xa9>

c000fb44 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fb44:	56                   	push   esi
c000fb45:	53                   	push   ebx
c000fb46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb4a:	39 1d c4 aa 02 c0    	cmp    DWORD PTR ds:0xc002aac4,ebx
c000fb50:	73 06                	jae    c000fb58 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fb52:	89 1d c4 aa 02 c0    	mov    DWORD PTR ds:0xc002aac4,ebx
c000fb58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb5c:	c1 eb 0c             	shr    ebx,0xc
c000fb5f:	c1 e8 0c             	shr    eax,0xc
c000fb62:	39 d8                	cmp    eax,ebx
c000fb64:	73 13                	jae    c000fb79 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb66:	6a 00                	push   0x0
c000fb68:	8d 70 01             	lea    esi,[eax+0x1]
c000fb6b:	50                   	push   eax
c000fb6c:	e8 33 fe ff ff       	call   c000f9a4 <Phys::setPageState(unsigned long, bool)>
c000fb71:	5a                   	pop    edx
c000fb72:	89 f0                	mov    eax,esi
c000fb74:	59                   	pop    ecx
c000fb75:	39 f3                	cmp    ebx,esi
c000fb77:	75 ed                	jne    c000fb66 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb79:	5b                   	pop    ebx
c000fb7a:	5e                   	pop    esi
c000fb7b:	c3                   	ret    

c000fb7c <Phys::physicalMemorySetup(unsigned int)>:
c000fb7c:	55                   	push   ebp
c000fb7d:	57                   	push   edi
c000fb7e:	56                   	push   esi
c000fb7f:	53                   	push   ebx
c000fb80:	31 db                	xor    ebx,ebx
c000fb82:	83 ec 40             	sub    esp,0x40
c000fb85:	6a 30                	push   0x30
c000fb87:	6a 00                	push   0x0
c000fb89:	68 e0 aa 02 c0       	push   0xc002aae0
c000fb8e:	e8 ea 0a ff ff       	call   c000067d <memset>
c000fb93:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb97:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb9c:	05 00 10 00 00       	add    eax,0x1000
c000fba1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fba5:	83 c4 10             	add    esp,0x10
c000fba8:	83 ec 08             	sub    esp,0x8
c000fbab:	6a 01                	push   0x1
c000fbad:	53                   	push   ebx
c000fbae:	43                   	inc    ebx
c000fbaf:	e8 f0 fd ff ff       	call   c000f9a4 <Phys::setPageState(unsigned long, bool)>
c000fbb4:	83 c4 10             	add    esp,0x10
c000fbb7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbbd:	75 e9                	jne    c000fba8 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fbbf:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fbc6:	66 85 c0             	test   ax,ax
c000fbc9:	0f 84 8e 01 00 00    	je     c000fd5d <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fbcf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fbd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fbdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbdf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fbe4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fbe8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fbf0:	eb 15                	jmp    c000fc07 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fbf2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fbf6:	83 c3 18             	add    ebx,0x18
c000fbf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbfd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc01:	0f 84 66 01 00 00    	je     c000fd6d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc07:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc0a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc0d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc14:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc18:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc1a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc1d:	01 f0                	add    eax,esi
c000fc1f:	55                   	push   ebp
c000fc20:	11 fa                	adc    edx,edi
c000fc22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc26:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc2a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc2e:	56                   	push   esi
c000fc2f:	68 08 72 02 c0       	push   0xc0027208
c000fc34:	e8 0c 2a 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000fc39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	09 f8                	or     eax,edi
c000fc42:	0f 85 25 01 00 00    	jne    c000fd6d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc48:	4d                   	dec    ebp
c000fc49:	75 a7                	jne    c000fbf2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc4b:	ba 00 00 08 00       	mov    edx,0x80000
c000fc50:	89 c1                	mov    ecx,eax
c000fc52:	39 f2                	cmp    edx,esi
c000fc54:	19 f9                	sbb    ecx,edi
c000fc56:	0f 82 a7 00 00 00    	jb     c000fd03 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fc5c:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc60:	89 c1                	mov    ecx,eax
c000fc62:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc66:	0f 83 97 00 00 00    	jae    c000fd03 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fc6c:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc71:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc75:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc79:	39 fa                	cmp    edx,edi
c000fc7b:	19 e8                	sbb    eax,ebp
c000fc7d:	0f 82 14 01 00 00    	jb     c000fd97 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fc83:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc87:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc8b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc91:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc96:	83 d5 ff             	adc    ebp,0xffffffff
c000fc99:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc9d:	31 c0                	xor    eax,eax
c000fc9f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fca3:	39 fa                	cmp    edx,edi
c000fca5:	89 c1                	mov    ecx,eax
c000fca7:	19 e9                	sbb    ecx,ebp
c000fca9:	0f 83 43 ff ff ff    	jae    c000fbf2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcaf:	be 00 00 08 00       	mov    esi,0x80000
c000fcb4:	50                   	push   eax
c000fcb5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fcb9:	57                   	push   edi
c000fcba:	56                   	push   esi
c000fcbb:	68 2c 72 02 c0       	push   0xc002722c
c000fcc0:	e8 80 29 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000fcc5:	5a                   	pop    edx
c000fcc6:	59                   	pop    ecx
c000fcc7:	57                   	push   edi
c000fcc8:	56                   	push   esi
c000fcc9:	e8 76 fe ff ff       	call   c000fb44 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fcce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fcd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fcd6:	83 c4 0c             	add    esp,0xc
c000fcd9:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fcdd:	03 05 d0 aa 02 c0    	add    eax,DWORD PTR ds:0xc002aad0
c000fce3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fcea:	a3 d0 aa 02 c0       	mov    ds:0xc002aad0,eax
c000fcef:	52                   	push   edx
c000fcf0:	50                   	push   eax
c000fcf1:	68 ea 71 02 c0       	push   0xc00271ea
c000fcf6:	e8 4a 29 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	e9 ef fe ff ff       	jmp    c000fbf2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd03:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd0f:	39 ea                	cmp    edx,ebp
c000fd11:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd15:	0f 82 d7 fe ff ff    	jb     c000fbf2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd1b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd20:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd24:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd28:	0f 83 c4 fe ff ff    	jae    c000fbf2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd2e:	39 ee                	cmp    esi,ebp
c000fd30:	89 f8                	mov    eax,edi
c000fd32:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd36:	0f 83 78 ff ff ff    	jae    c000fcb4 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd44:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fd48:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fd4c:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd58:	e9 57 ff ff ff       	jmp    c000fcb4 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd5d:	83 ec 0c             	sub    esp,0xc
c000fd60:	68 dc 71 02 c0       	push   0xc00271dc
c000fd65:	e8 9f 90 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000fd6a:	83 c4 10             	add    esp,0x10
c000fd6d:	bb 40 01 00 00       	mov    ebx,0x140
c000fd72:	83 ec 08             	sub    esp,0x8
c000fd75:	6a 00                	push   0x0
c000fd77:	53                   	push   ebx
c000fd78:	43                   	inc    ebx
c000fd79:	e8 26 fc ff ff       	call   c000f9a4 <Phys::setPageState(unsigned long, bool)>
c000fd7e:	ff 05 d0 aa 02 c0    	inc    DWORD PTR ds:0xc002aad0
c000fd84:	83 c4 10             	add    esp,0x10
c000fd87:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd8d:	75 e3                	jne    c000fd72 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fd8f:	83 c4 3c             	add    esp,0x3c
c000fd92:	5b                   	pop    ebx
c000fd93:	5e                   	pop    esi
c000fd94:	5f                   	pop    edi
c000fd95:	5d                   	pop    ebp
c000fd96:	c3                   	ret    
c000fd97:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd9f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fda7:	e9 d7 fe ff ff       	jmp    c000fc83 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fdac <Pipe::isAtty()>:
c000fdac:	31 c0                	xor    eax,eax
c000fdae:	c3                   	ret    
c000fdaf:	90                   	nop

c000fdb0 <Pipe::~Pipe()>:
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	ba 98 72 02 c0       	mov    edx,0xc0027298
c000fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdbc:	89 10                	mov    DWORD PTR [eax],edx
c000fdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdc2:	83 ec 0c             	sub    esp,0xc
c000fdc5:	50                   	push   eax
c000fdc6:	e8 29 16 00 00       	call   c00113f4 <UnixFile::~UnixFile()>
c000fdcb:	83 c4 10             	add    esp,0x10
c000fdce:	90                   	nop
c000fdcf:	83 c4 0c             	add    esp,0xc
c000fdd2:	c3                   	ret    
c000fdd3:	90                   	nop

c000fdd4 <Pipe::~Pipe()>:
c000fdd4:	83 ec 0c             	sub    esp,0xc
c000fdd7:	83 ec 0c             	sub    esp,0xc
c000fdda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdde:	e8 cd ff ff ff       	call   c000fdb0 <Pipe::~Pipe()>
c000fde3:	83 c4 10             	add    esp,0x10
c000fde6:	83 ec 08             	sub    esp,0x8
c000fde9:	6a 20                	push   0x20
c000fdeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdef:	e8 71 27 00 00       	call   c0012565 <operator delete(void*, unsigned long)>
c000fdf4:	83 c4 10             	add    esp,0x10
c000fdf7:	83 c4 0c             	add    esp,0xc
c000fdfa:	c3                   	ret    
c000fdfb:	90                   	nop

c000fdfc <Pipe::read(unsigned long long, void*, int*)>:
c000fdfc:	55                   	push   ebp
c000fdfd:	57                   	push   edi
c000fdfe:	56                   	push   esi
c000fdff:	53                   	push   ebx
c000fe00:	83 ec 1c             	sub    esp,0x1c
c000fe03:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe07:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe0b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe0f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe12:	89 c8                	mov    eax,ecx
c000fe14:	99                   	cdq    
c000fe15:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe19:	74 19                	je     c000fe34 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe1b:	39 f9                	cmp    ecx,edi
c000fe1d:	89 d1                	mov    ecx,edx
c000fe1f:	19 f1                	sbb    ecx,esi
c000fe21:	73 11                	jae    c000fe34 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe23:	e8 ed bf 00 00       	call   c001be15 <lockScheduler()>
c000fe28:	e8 23 c3 00 00       	call   c001c150 <schedule()>
c000fe2d:	e8 e5 bf 00 00       	call   c001be17 <unlockScheduler()>
c000fe32:	eb db                	jmp    c000fe0f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe34:	39 f8                	cmp    eax,edi
c000fe36:	89 d1                	mov    ecx,edx
c000fe38:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe3c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe40:	19 f1                	sbb    ecx,esi
c000fe42:	73 08                	jae    c000fe4c <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fe44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe4c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe4f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe52:	29 c6                	sub    esi,eax
c000fe54:	89 f1                	mov    ecx,esi
c000fe56:	c1 f9 1f             	sar    ecx,0x1f
c000fe59:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fe5d:	89 ca                	mov    edx,ecx
c000fe5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe63:	19 d1                	sbb    ecx,edx
c000fe65:	73 04                	jae    c000fe6b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fe67:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fe6b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe6f:	89 fd                	mov    ebp,edi
c000fe71:	29 f5                	sub    ebp,esi
c000fe73:	85 f6                	test   esi,esi
c000fe75:	74 12                	je     c000fe89 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fe77:	52                   	push   edx
c000fe78:	56                   	push   esi
c000fe79:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fe7c:	50                   	push   eax
c000fe7d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fe81:	e8 c1 07 ff ff       	call   c0000647 <memcpy>
c000fe86:	83 c4 10             	add    esp,0x10
c000fe89:	85 ed                	test   ebp,ebp
c000fe8b:	74 12                	je     c000fe9f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fe8d:	50                   	push   eax
c000fe8e:	55                   	push   ebp
c000fe8f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fe92:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fe96:	56                   	push   esi
c000fe97:	e8 ab 07 ff ff       	call   c0000647 <memcpy>
c000fe9c:	83 c4 10             	add    esp,0x10
c000fe9f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fea2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fea5:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fea8:	99                   	cdq    
c000fea9:	89 f7                	mov    edi,esi
c000feab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000feaf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000feb3:	c1 ff 1f             	sar    edi,0x1f
c000feb6:	57                   	push   edi
c000feb7:	56                   	push   esi
c000feb8:	52                   	push   edx
c000feb9:	50                   	push   eax
c000feba:	e8 9d 3c 01 00       	call   c0023b5c <__umoddi3>
c000febf:	83 c4 10             	add    esp,0x10
c000fec2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fec5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000feca:	75 10                	jne    c000fedc <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fecc:	83 ec 0c             	sub    esp,0xc
c000fecf:	68 55 72 02 c0       	push   0xc0027255
c000fed4:	e8 30 8f 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000fed9:	83 c4 10             	add    esp,0x10
c000fedc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fee4:	89 10                	mov    DWORD PTR [eax],edx
c000fee6:	83 c4 1c             	add    esp,0x1c
c000fee9:	31 c0                	xor    eax,eax
c000feeb:	5b                   	pop    ebx
c000feec:	5e                   	pop    esi
c000feed:	5f                   	pop    edi
c000feee:	5d                   	pop    ebp
c000feef:	c3                   	ret    

c000fef0 <Pipe::write(unsigned long long, void*, int*)>:
c000fef0:	55                   	push   ebp
c000fef1:	57                   	push   edi
c000fef2:	56                   	push   esi
c000fef3:	53                   	push   ebx
c000fef4:	83 ec 1c             	sub    esp,0x1c
c000fef7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fefb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000feff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff03:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff06:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff09:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff0c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff10:	89 de                	mov    esi,ebx
c000ff12:	89 df                	mov    edi,ebx
c000ff14:	c1 ff 1f             	sar    edi,0x1f
c000ff17:	01 c6                	add    esi,eax
c000ff19:	89 c8                	mov    eax,ecx
c000ff1b:	11 d7                	adc    edi,edx
c000ff1d:	99                   	cdq    
c000ff1e:	39 f1                	cmp    ecx,esi
c000ff20:	89 d0                	mov    eax,edx
c000ff22:	19 f8                	sbb    eax,edi
c000ff24:	b8 01 00 00 00       	mov    eax,0x1
c000ff29:	0f 82 80 00 00 00    	jb     c000ffaf <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff2f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff32:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff35:	01 d8                	add    eax,ebx
c000ff37:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff3b:	99                   	cdq    
c000ff3c:	f7 f9                	idiv   ecx
c000ff3e:	29 d1                	sub    ecx,edx
c000ff40:	89 d7                	mov    edi,edx
c000ff42:	89 c8                	mov    eax,ecx
c000ff44:	99                   	cdq    
c000ff45:	39 ce                	cmp    esi,ecx
c000ff47:	19 d3                	sbb    ebx,edx
c000ff49:	bb 00 00 00 00       	mov    ebx,0x0
c000ff4e:	72 04                	jb     c000ff54 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ff50:	89 f3                	mov    ebx,esi
c000ff52:	29 cb                	sub    ebx,ecx
c000ff54:	89 f1                	mov    ecx,esi
c000ff56:	29 d9                	sub    ecx,ebx
c000ff58:	74 1a                	je     c000ff74 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ff5a:	52                   	push   edx
c000ff5b:	51                   	push   ecx
c000ff5c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ff60:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ff64:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff67:	57                   	push   edi
c000ff68:	e8 da 06 ff ff       	call   c0000647 <memcpy>
c000ff6d:	83 c4 10             	add    esp,0x10
c000ff70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff74:	85 db                	test   ebx,ebx
c000ff76:	74 12                	je     c000ff8a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ff78:	50                   	push   eax
c000ff79:	53                   	push   ebx
c000ff7a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ff7e:	51                   	push   ecx
c000ff7f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ff82:	e8 c0 06 ff ff       	call   c0000647 <memcpy>
c000ff87:	83 c4 10             	add    esp,0x10
c000ff8a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ff8d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff92:	75 10                	jne    c000ffa4 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ff94:	83 ec 0c             	sub    esp,0xc
c000ff97:	68 71 72 02 c0       	push   0xc0027271
c000ff9c:	e8 68 8e 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ffa8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ffab:	89 38                	mov    DWORD PTR [eax],edi
c000ffad:	31 c0                	xor    eax,eax
c000ffaf:	83 c4 1c             	add    esp,0x1c
c000ffb2:	5b                   	pop    ebx
c000ffb3:	5e                   	pop    esi
c000ffb4:	5f                   	pop    edi
c000ffb5:	5d                   	pop    ebp
c000ffb6:	c3                   	ret    
c000ffb7:	90                   	nop

c000ffb8 <Pipe::Pipe(int)>:
c000ffb8:	83 ec 0c             	sub    esp,0xc
c000ffbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffbf:	83 ec 08             	sub    esp,0x8
c000ffc2:	6a 00                	push   0x0
c000ffc4:	50                   	push   eax
c000ffc5:	e8 48 12 00 00       	call   c0011212 <UnixFile::UnixFile(int)>
c000ffca:	83 c4 10             	add    esp,0x10
c000ffcd:	ba 98 72 02 c0       	mov    edx,0xc0027298
c000ffd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd6:	89 10                	mov    DWORD PTR [eax],edx
c000ffd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ffe0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ffe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fff9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	50                   	push   eax
c0010001:	e8 cc f4 ff ff       	call   c000f4d2 <malloc>
c0010006:	83 c4 10             	add    esp,0x10
c0010009:	89 c2                	mov    edx,eax
c001000b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001000f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010016:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001001a:	90                   	nop
c001001b:	83 c4 0c             	add    esp,0xc
c001001e:	c3                   	ret    
c001001f:	90                   	nop

c0010020 <VgaText::isAtty()>:
c0010020:	b0 01                	mov    al,0x1
c0010022:	c3                   	ret    
c0010023:	90                   	nop

c0010024 <VgaText::~VgaText()>:
c0010024:	83 ec 0c             	sub    esp,0xc
c0010027:	ba 54 73 02 c0       	mov    edx,0xc0027354
c001002c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010030:	89 10                	mov    DWORD PTR [eax],edx
c0010032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	50                   	push   eax
c001003a:	e8 b5 13 00 00       	call   c00113f4 <UnixFile::~UnixFile()>
c001003f:	83 c4 10             	add    esp,0x10
c0010042:	90                   	nop
c0010043:	83 c4 0c             	add    esp,0xc
c0010046:	c3                   	ret    
c0010047:	90                   	nop

c0010048 <VgaText::~VgaText()>:
c0010048:	83 ec 0c             	sub    esp,0xc
c001004b:	83 ec 0c             	sub    esp,0xc
c001004e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010052:	e8 cd ff ff ff       	call   c0010024 <VgaText::~VgaText()>
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	83 ec 08             	sub    esp,0x8
c001005d:	68 60 12 00 00       	push   0x1260
c0010062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010066:	e8 fa 24 00 00       	call   c0012565 <operator delete(void*, unsigned long)>
c001006b:	83 c4 10             	add    esp,0x10
c001006e:	83 c4 0c             	add    esp,0xc
c0010071:	c3                   	ret    

c0010072 <VgaText::read(unsigned long long, void*, int*)>:
c0010072:	83 ec 10             	sub    esp,0x10
c0010075:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010079:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001007d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010081:	e8 78 57 00 00       	call   c00157fe <readKeyboard(VgaText*, char*, unsigned long)>
c0010086:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001008a:	89 02                	mov    DWORD PTR [edx],eax
c001008c:	31 c0                	xor    eax,eax
c001008e:	83 c4 1c             	add    esp,0x1c
c0010091:	c3                   	ret    

c0010092 <setTerminalScrollLock(bool)>:
c0010092:	c3                   	ret    

c0010093 <addToTerminalCycle(VgaText*)>:
c0010093:	8b 15 40 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab40
c0010099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001009d:	85 d2                	test   edx,edx
c001009f:	75 0c                	jne    c00100ad <addToTerminalCycle(VgaText*)+0x1a>
c00100a1:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00100a7:	a3 40 ab 02 c0       	mov    ds:0xc002ab40,eax
c00100ac:	c3                   	ret    
c00100ad:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00100b3:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00100b9:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00100bf:	c3                   	ret    

c00100c0 <installVgaTextImplementation()>:
c00100c0:	83 ec 10             	sub    esp,0x10
c00100c3:	6a 20                	push   0x20
c00100c5:	6a 00                	push   0x0
c00100c7:	68 20 ab 02 c0       	push   0xc002ab20
c00100cc:	e8 ac 05 ff ff       	call   c000067d <memset>
c00100d1:	83 c4 1c             	add    esp,0x1c
c00100d4:	c3                   	ret    

c00100d5 <scrollTerminalScrollLock(int)>:
c00100d5:	c3                   	ret    

c00100d6 <VgaText::load()>:
c00100d6:	53                   	push   ebx
c00100d7:	31 c0                	xor    eax,eax
c00100d9:	83 ec 58             	sub    esp,0x58
c00100dc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100e0:	89 e2                	mov    edx,esp
c00100e2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100e6:	40                   	inc    eax
c00100e7:	83 f8 50             	cmp    eax,0x50
c00100ea:	75 f6                	jne    c00100e2 <VgaText::load()+0xc>
c00100ec:	31 c0                	xor    eax,eax
c00100ee:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00100f5:	84 c9                	test   cl,cl
c00100f7:	74 06                	je     c00100ff <VgaText::load()+0x29>
c00100f9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100fc:	40                   	inc    eax
c00100fd:	eb ef                	jmp    c00100ee <VgaText::load()+0x18>
c00100ff:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010105:	85 c0                	test   eax,eax
c0010107:	74 09                	je     c0010112 <VgaText::load()+0x3c>
c0010109:	51                   	push   ecx
c001010a:	51                   	push   ecx
c001010b:	52                   	push   edx
c001010c:	53                   	push   ebx
c001010d:	ff d0                	call   eax
c001010f:	83 c4 10             	add    esp,0x10
c0010112:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010118:	85 c0                	test   eax,eax
c001011a:	74 09                	je     c0010125 <VgaText::load()+0x4f>
c001011c:	83 ec 0c             	sub    esp,0xc
c001011f:	53                   	push   ebx
c0010120:	ff d0                	call   eax
c0010122:	83 c4 10             	add    esp,0x10
c0010125:	83 c4 58             	add    esp,0x58
c0010128:	5b                   	pop    ebx
c0010129:	c3                   	ret    

c001012a <VgaText::updateCursor()>:
c001012a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001012e:	39 05 44 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab44,eax
c0010134:	75 0c                	jne    c0010142 <VgaText::updateCursor()+0x18>
c0010136:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001013c:	85 c0                	test   eax,eax
c001013e:	74 02                	je     c0010142 <VgaText::updateCursor()+0x18>
c0010140:	ff e0                	jmp    eax
c0010142:	c3                   	ret    
c0010143:	90                   	nop

c0010144 <VgaText::showCursor(bool)>:
c0010144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010148:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001014c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010152:	c3                   	ret    
c0010153:	90                   	nop

c0010154 <VgaText::disableBlink(bool)>:
c0010154:	56                   	push   esi
c0010155:	53                   	push   ebx
c0010156:	51                   	push   ecx
c0010157:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001015b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001015f:	39 1d 44 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab44,ebx
c0010165:	75 18                	jne    c001017f <VgaText::disableBlink(bool)+0x2b>
c0010167:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001016d:	85 c0                	test   eax,eax
c001016f:	74 0e                	je     c001017f <VgaText::disableBlink(bool)+0x2b>
c0010171:	89 f1                	mov    ecx,esi
c0010173:	52                   	push   edx
c0010174:	52                   	push   edx
c0010175:	0f b6 d1             	movzx  edx,cl
c0010178:	52                   	push   edx
c0010179:	53                   	push   ebx
c001017a:	ff d0                	call   eax
c001017c:	83 c4 10             	add    esp,0x10
c001017f:	89 f0                	mov    eax,esi
c0010181:	83 f0 01             	xor    eax,0x1
c0010184:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001018a:	58                   	pop    eax
c001018b:	5b                   	pop    ebx
c001018c:	5e                   	pop    esi
c001018d:	c3                   	ret    

c001018e <VgaText::doANSI_SGR(int)>:
c001018e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	85 d2                	test   edx,edx
c0010198:	75 14                	jne    c00101ae <VgaText::doANSI_SGR(int)+0x20>
c001019a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00101a0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101a6:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00101ac:	eb 65                	jmp    c0010213 <VgaText::doANSI_SGR(int)+0x85>
c00101ae:	83 fa 07             	cmp    edx,0x7
c00101b1:	75 14                	jne    c00101c7 <VgaText::doANSI_SGR(int)+0x39>
c00101b3:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00101b9:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00101bf:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00101c5:	eb 4c                	jmp    c0010213 <VgaText::doANSI_SGR(int)+0x85>
c00101c7:	83 fa 1b             	cmp    edx,0x1b
c00101ca:	74 ce                	je     c001019a <VgaText::doANSI_SGR(int)+0xc>
c00101cc:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00101cf:	83 f9 07             	cmp    ecx,0x7
c00101d2:	77 09                	ja     c00101dd <VgaText::doANSI_SGR(int)+0x4f>
c00101d4:	8b 14 8d 60 9a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd65a0]
c00101db:	eb 20                	jmp    c00101fd <VgaText::doANSI_SGR(int)+0x6f>
c00101dd:	8d 4a d8             	lea    ecx,[edx-0x28]
c00101e0:	83 f9 07             	cmp    ecx,0x7
c00101e3:	77 09                	ja     c00101ee <VgaText::doANSI_SGR(int)+0x60>
c00101e5:	8b 14 8d 60 9a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd65a0]
c00101ec:	eb 25                	jmp    c0010213 <VgaText::doANSI_SGR(int)+0x85>
c00101ee:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00101f1:	83 f9 07             	cmp    ecx,0x7
c00101f4:	77 0e                	ja     c0010204 <VgaText::doANSI_SGR(int)+0x76>
c00101f6:	8b 14 95 18 99 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd66e8]
c00101fd:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010203:	c3                   	ret    
c0010204:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010207:	83 f9 07             	cmp    ecx,0x7
c001020a:	77 0d                	ja     c0010219 <VgaText::doANSI_SGR(int)+0x8b>
c001020c:	8b 14 95 f0 98 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6710]
c0010213:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010219:	c3                   	ret    

c001021a <VgaText::setDefaultBgColour(VgaColour)>:
c001021a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001021e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010222:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010228:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001022e:	c3                   	ret    
c001022f:	90                   	nop

c0010230 <VgaText::setDefaultFgColour(VgaColour)>:
c0010230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010234:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010238:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001023e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010244:	c3                   	ret    
c0010245:	90                   	nop

c0010246 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010246:	53                   	push   ebx
c0010247:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001024b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001024f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010253:	51                   	push   ecx
c0010254:	e8 c1 ff ff ff       	call   c001021a <VgaText::setDefaultBgColour(VgaColour)>
c0010259:	58                   	pop    eax
c001025a:	5a                   	pop    edx
c001025b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001025f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010263:	5b                   	pop    ebx
c0010264:	eb ca                	jmp    c0010230 <VgaText::setDefaultFgColour(VgaColour)>

c0010266 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010266:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001026a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001026f:	83 e0 0f             	and    eax,0xf
c0010272:	c1 e2 04             	shl    edx,0x4
c0010275:	09 d0                	or     eax,edx
c0010277:	c3                   	ret    

c0010278 <VgaText::scrollScreen()>:
c0010278:	57                   	push   edi
c0010279:	56                   	push   esi
c001027a:	be 01 00 00 00       	mov    esi,0x1
c001027f:	53                   	push   ebx
c0010280:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010284:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001028a:	31 ff                	xor    edi,edi
c001028c:	01 d9                	add    ecx,ebx
c001028e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010291:	83 fe 17             	cmp    esi,0x17
c0010294:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001029a:	75 28                	jne    c00102c4 <VgaText::scrollScreen()+0x4c>
c001029c:	f7 c7 01 00 00 00    	test   edi,0x1
c00102a2:	74 1c                	je     c00102c0 <VgaText::scrollScreen()+0x48>
c00102a4:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00102ab:	50                   	push   eax
c00102ac:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00102b3:	50                   	push   eax
c00102b4:	e8 ad ff ff ff       	call   c0010266 <VgaText::combineColours(unsigned char, unsigned char)>
c00102b9:	5a                   	pop    edx
c00102ba:	5a                   	pop    edx
c00102bb:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00102be:	eb 04                	jmp    c00102c4 <VgaText::scrollScreen()+0x4c>
c00102c0:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00102c4:	47                   	inc    edi
c00102c5:	41                   	inc    ecx
c00102c6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00102cc:	75 c0                	jne    c001028e <VgaText::scrollScreen()+0x16>
c00102ce:	46                   	inc    esi
c00102cf:	83 fe 18             	cmp    esi,0x18
c00102d2:	75 b0                	jne    c0010284 <VgaText::scrollScreen()+0xc>
c00102d4:	39 1d 44 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab44,ebx
c00102da:	75 24                	jne    c0010300 <VgaText::scrollScreen()+0x88>
c00102dc:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00102e3:	74 08                	je     c00102ed <VgaText::scrollScreen()+0x75>
c00102e5:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00102eb:	eb 13                	jmp    c0010300 <VgaText::scrollScreen()+0x88>
c00102ed:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00102f3:	85 c0                	test   eax,eax
c00102f5:	74 09                	je     c0010300 <VgaText::scrollScreen()+0x88>
c00102f7:	83 ec 0c             	sub    esp,0xc
c00102fa:	53                   	push   ebx
c00102fb:	ff d0                	call   eax
c00102fd:	83 c4 10             	add    esp,0x10
c0010300:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010304:	5b                   	pop    ebx
c0010305:	5e                   	pop    esi
c0010306:	5f                   	pop    edi
c0010307:	e9 1e fe ff ff       	jmp    c001012a <VgaText::updateCursor()>

c001030c <VgaText::combineCharAndColour(char, unsigned char)>:
c001030c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010311:	c1 e0 08             	shl    eax,0x8
c0010314:	89 c2                	mov    edx,eax
c0010316:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001031b:	09 d0                	or     eax,edx
c001031d:	c3                   	ret    

c001031e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001031e:	53                   	push   ebx
c001031f:	83 ec 08             	sub    esp,0x8
c0010322:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010326:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001032b:	50                   	push   eax
c001032c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010331:	50                   	push   eax
c0010332:	e8 2f ff ff ff       	call   c0010266 <VgaText::combineColours(unsigned char, unsigned char)>
c0010337:	5a                   	pop    edx
c0010338:	0f b6 c0             	movzx  eax,al
c001033b:	5b                   	pop    ebx
c001033c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010341:	50                   	push   eax
c0010342:	53                   	push   ebx
c0010343:	e8 c4 ff ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c0010348:	5a                   	pop    edx
c0010349:	5a                   	pop    edx
c001034a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010350:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010354:	0f b7 d2             	movzx  edx,dx
c0010357:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001035c:	39 0d 44 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab44,ecx
c0010362:	75 14                	jne    c0010378 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010364:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001036a:	85 c0                	test   eax,eax
c001036c:	74 0a                	je     c0010378 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001036e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010372:	83 c4 08             	add    esp,0x8
c0010375:	5b                   	pop    ebx
c0010376:	ff e0                	jmp    eax
c0010378:	83 c4 08             	add    esp,0x8
c001037b:	5b                   	pop    ebx
c001037c:	c3                   	ret    
c001037d:	90                   	nop

c001037e <VgaText::getCursorX()>:
c001037e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010382:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010388:	c3                   	ret    
c0010389:	90                   	nop

c001038a <VgaText::getCursorY()>:
c001038a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001038e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010394:	c3                   	ret    
c0010395:	90                   	nop

c0010396 <VgaText::setCursor(int, int)>:
c0010396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001039a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001039e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00103a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103a8:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00103ae:	e9 77 fd ff ff       	jmp    c001012a <VgaText::updateCursor()>
c00103b3:	90                   	nop

c00103b4 <VgaText::setCursorX(int)>:
c00103b4:	83 ec 10             	sub    esp,0x10
c00103b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103bb:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00103c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c5:	50                   	push   eax
c00103c6:	e8 cb ff ff ff       	call   c0010396 <VgaText::setCursor(int, int)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorY(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103db:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00103e1:	50                   	push   eax
c00103e2:	e8 af ff ff ff       	call   c0010396 <VgaText::setCursor(int, int)>
c00103e7:	83 c4 1c             	add    esp,0x1c
c00103ea:	c3                   	ret    
c00103eb:	90                   	nop

c00103ec <VgaText::incrementCursor(bool)>:
c00103ec:	56                   	push   esi
c00103ed:	53                   	push   ebx
c00103ee:	51                   	push   ecx
c00103ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f7:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00103fd:	40                   	inc    eax
c00103fe:	83 f8 50             	cmp    eax,0x50
c0010401:	74 08                	je     c001040b <VgaText::incrementCursor(bool)+0x1f>
c0010403:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010409:	eb 33                	jmp    c001043e <VgaText::incrementCursor(bool)+0x52>
c001040b:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010411:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001041b:	8d 50 01             	lea    edx,[eax+0x1]
c001041e:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010424:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001042a:	75 12                	jne    c001043e <VgaText::incrementCursor(bool)+0x52>
c001042c:	83 ec 0c             	sub    esp,0xc
c001042f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010435:	53                   	push   ebx
c0010436:	e8 3d fe ff ff       	call   c0010278 <VgaText::scrollScreen()>
c001043b:	83 c4 10             	add    esp,0x10
c001043e:	89 f0                	mov    eax,esi
c0010440:	84 c0                	test   al,al
c0010442:	74 0c                	je     c0010450 <VgaText::incrementCursor(bool)+0x64>
c0010444:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010448:	5a                   	pop    edx
c0010449:	5b                   	pop    ebx
c001044a:	5e                   	pop    esi
c001044b:	e9 da fc ff ff       	jmp    c001012a <VgaText::updateCursor()>
c0010450:	58                   	pop    eax
c0010451:	5b                   	pop    ebx
c0010452:	5e                   	pop    esi
c0010453:	c3                   	ret    

c0010454 <VgaText::updateRAMUsageDisplay(int)>:
c0010454:	53                   	push   ebx
c0010455:	bb 0a 00 00 00       	mov    ebx,0xa
c001045a:	6a 0f                	push   0xf
c001045c:	6a 00                	push   0x0
c001045e:	e8 03 fe ff ff       	call   c0010266 <VgaText::combineColours(unsigned char, unsigned char)>
c0010463:	5a                   	pop    edx
c0010464:	59                   	pop    ecx
c0010465:	0f b6 c8             	movzx  ecx,al
c0010468:	51                   	push   ecx
c0010469:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001046d:	99                   	cdq    
c001046e:	f7 fb                	idiv   ebx
c0010470:	89 d3                	mov    ebx,edx
c0010472:	83 c0 30             	add    eax,0x30
c0010475:	83 c3 30             	add    ebx,0x30
c0010478:	0f be c0             	movsx  eax,al
c001047b:	0f b6 db             	movzx  ebx,bl
c001047e:	50                   	push   eax
c001047f:	e8 88 fe ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c0010484:	5a                   	pop    edx
c0010485:	5a                   	pop    edx
c0010486:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c001048c:	51                   	push   ecx
c001048d:	53                   	push   ebx
c001048e:	e8 79 fe ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c0010493:	5b                   	pop    ebx
c0010494:	5a                   	pop    edx
c0010495:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c001049b:	51                   	push   ecx
c001049c:	6a 25                	push   0x25
c001049e:	e8 69 fe ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c00104a3:	59                   	pop    ecx
c00104a4:	5b                   	pop    ebx
c00104a5:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00104ab:	5b                   	pop    ebx
c00104ac:	c3                   	ret    
c00104ad:	90                   	nop

c00104ae <VgaText::updateDiskUsage()>:
c00104ae:	55                   	push   ebp
c00104af:	bd 10 27 00 00       	mov    ebp,0x2710
c00104b4:	57                   	push   edi
c00104b5:	56                   	push   esi
c00104b6:	53                   	push   ebx
c00104b7:	6a 0f                	push   0xf
c00104b9:	6a 00                	push   0x0
c00104bb:	e8 a6 fd ff ff       	call   c0010266 <VgaText::combineColours(unsigned char, unsigned char)>
c00104c0:	5a                   	pop    edx
c00104c1:	0f b6 d8             	movzx  ebx,al
c00104c4:	59                   	pop    ecx
c00104c5:	a1 48 cd 02 c0       	mov    eax,ds:0xc002cd48
c00104ca:	53                   	push   ebx
c00104cb:	b9 0a 00 00 00       	mov    ecx,0xa
c00104d0:	99                   	cdq    
c00104d1:	f7 fd                	idiv   ebp
c00104d3:	99                   	cdq    
c00104d4:	f7 f9                	idiv   ecx
c00104d6:	8d 42 30             	lea    eax,[edx+0x30]
c00104d9:	0f b6 c0             	movzx  eax,al
c00104dc:	50                   	push   eax
c00104dd:	e8 2a fe ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c00104e2:	5e                   	pop    esi
c00104e3:	5f                   	pop    edi
c00104e4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c00104ea:	bf e8 03 00 00       	mov    edi,0x3e8
c00104ef:	53                   	push   ebx
c00104f0:	a1 48 cd 02 c0       	mov    eax,ds:0xc002cd48
c00104f5:	99                   	cdq    
c00104f6:	f7 ff                	idiv   edi
c00104f8:	99                   	cdq    
c00104f9:	f7 f9                	idiv   ecx
c00104fb:	8d 42 30             	lea    eax,[edx+0x30]
c00104fe:	0f b6 c0             	movzx  eax,al
c0010501:	50                   	push   eax
c0010502:	e8 05 fe ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c0010507:	5a                   	pop    edx
c0010508:	5e                   	pop    esi
c0010509:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001050f:	be 64 00 00 00       	mov    esi,0x64
c0010514:	53                   	push   ebx
c0010515:	a1 48 cd 02 c0       	mov    eax,ds:0xc002cd48
c001051a:	99                   	cdq    
c001051b:	f7 fe                	idiv   esi
c001051d:	99                   	cdq    
c001051e:	f7 f9                	idiv   ecx
c0010520:	8d 42 30             	lea    eax,[edx+0x30]
c0010523:	0f b6 c0             	movzx  eax,al
c0010526:	50                   	push   eax
c0010527:	e8 e0 fd ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c001052c:	5a                   	pop    edx
c001052d:	5a                   	pop    edx
c001052e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010534:	53                   	push   ebx
c0010535:	a1 48 cd 02 c0       	mov    eax,ds:0xc002cd48
c001053a:	99                   	cdq    
c001053b:	f7 f9                	idiv   ecx
c001053d:	99                   	cdq    
c001053e:	f7 f9                	idiv   ecx
c0010540:	8d 42 30             	lea    eax,[edx+0x30]
c0010543:	0f b6 c0             	movzx  eax,al
c0010546:	50                   	push   eax
c0010547:	e8 c0 fd ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c001054c:	5a                   	pop    edx
c001054d:	5a                   	pop    edx
c001054e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c0010554:	53                   	push   ebx
c0010555:	a1 48 cd 02 c0       	mov    eax,ds:0xc002cd48
c001055a:	99                   	cdq    
c001055b:	f7 f9                	idiv   ecx
c001055d:	8d 42 30             	lea    eax,[edx+0x30]
c0010560:	0f b6 c0             	movzx  eax,al
c0010563:	50                   	push   eax
c0010564:	e8 a3 fd ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c0010569:	5a                   	pop    edx
c001056a:	5a                   	pop    edx
c001056b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c0010571:	53                   	push   ebx
c0010572:	a1 44 cd 02 c0       	mov    eax,ds:0xc002cd44
c0010577:	99                   	cdq    
c0010578:	f7 fd                	idiv   ebp
c001057a:	99                   	cdq    
c001057b:	f7 f9                	idiv   ecx
c001057d:	8d 42 30             	lea    eax,[edx+0x30]
c0010580:	0f b6 c0             	movzx  eax,al
c0010583:	50                   	push   eax
c0010584:	e8 83 fd ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c0010589:	5d                   	pop    ebp
c001058a:	5a                   	pop    edx
c001058b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010591:	53                   	push   ebx
c0010592:	a1 44 cd 02 c0       	mov    eax,ds:0xc002cd44
c0010597:	99                   	cdq    
c0010598:	f7 ff                	idiv   edi
c001059a:	99                   	cdq    
c001059b:	f7 f9                	idiv   ecx
c001059d:	8d 42 30             	lea    eax,[edx+0x30]
c00105a0:	0f b6 c0             	movzx  eax,al
c00105a3:	50                   	push   eax
c00105a4:	e8 63 fd ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c00105a9:	5f                   	pop    edi
c00105aa:	5d                   	pop    ebp
c00105ab:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00105b1:	53                   	push   ebx
c00105b2:	a1 44 cd 02 c0       	mov    eax,ds:0xc002cd44
c00105b7:	99                   	cdq    
c00105b8:	f7 fe                	idiv   esi
c00105ba:	99                   	cdq    
c00105bb:	f7 f9                	idiv   ecx
c00105bd:	8d 42 30             	lea    eax,[edx+0x30]
c00105c0:	0f b6 c0             	movzx  eax,al
c00105c3:	50                   	push   eax
c00105c4:	e8 43 fd ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c00105c9:	5a                   	pop    edx
c00105ca:	5e                   	pop    esi
c00105cb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00105d1:	53                   	push   ebx
c00105d2:	a1 44 cd 02 c0       	mov    eax,ds:0xc002cd44
c00105d7:	99                   	cdq    
c00105d8:	f7 f9                	idiv   ecx
c00105da:	99                   	cdq    
c00105db:	f7 f9                	idiv   ecx
c00105dd:	8d 42 30             	lea    eax,[edx+0x30]
c00105e0:	0f b6 c0             	movzx  eax,al
c00105e3:	50                   	push   eax
c00105e4:	e8 23 fd ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c00105e9:	5f                   	pop    edi
c00105ea:	5d                   	pop    ebp
c00105eb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c00105f1:	53                   	push   ebx
c00105f2:	a1 44 cd 02 c0       	mov    eax,ds:0xc002cd44
c00105f7:	99                   	cdq    
c00105f8:	f7 f9                	idiv   ecx
c00105fa:	83 c2 30             	add    edx,0x30
c00105fd:	0f b6 d2             	movzx  edx,dl
c0010600:	52                   	push   edx
c0010601:	e8 06 fd ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c0010606:	5a                   	pop    edx
c0010607:	59                   	pop    ecx
c0010608:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001060e:	5b                   	pop    ebx
c001060f:	5e                   	pop    esi
c0010610:	5f                   	pop    edi
c0010611:	5d                   	pop    ebp
c0010612:	c3                   	ret    
c0010613:	90                   	nop

c0010614 <VgaText::updateTitle()>:
c0010614:	53                   	push   ebx
c0010615:	31 c0                	xor    eax,eax
c0010617:	83 ec 58             	sub    esp,0x58
c001061a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001061e:	89 e1                	mov    ecx,esp
c0010620:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010624:	40                   	inc    eax
c0010625:	83 f8 50             	cmp    eax,0x50
c0010628:	75 f6                	jne    c0010620 <VgaText::updateTitle()+0xc>
c001062a:	31 c0                	xor    eax,eax
c001062c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010633:	84 db                	test   bl,bl
c0010635:	74 06                	je     c001063d <VgaText::updateTitle()+0x29>
c0010637:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001063a:	40                   	inc    eax
c001063b:	eb ef                	jmp    c001062c <VgaText::updateTitle()+0x18>
c001063d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010643:	85 c0                	test   eax,eax
c0010645:	74 09                	je     c0010650 <VgaText::updateTitle()+0x3c>
c0010647:	53                   	push   ebx
c0010648:	53                   	push   ebx
c0010649:	51                   	push   ecx
c001064a:	52                   	push   edx
c001064b:	ff d0                	call   eax
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	e8 59 fe ff ff       	call   c00104ae <VgaText::updateDiskUsage()>
c0010655:	83 c4 58             	add    esp,0x58
c0010658:	5b                   	pop    ebx
c0010659:	c3                   	ret    

c001065a <VgaText::setTitleTextColour(VgaColour)>:
c001065a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001065e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010662:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010668:	eb aa                	jmp    c0010614 <VgaText::updateTitle()>

c001066a <VgaText::setTitleColour(VgaColour)>:
c001066a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010672:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010678:	eb 9a                	jmp    c0010614 <VgaText::updateTitle()>

c001067a <VgaText::setTitle(char*)>:
c001067a:	53                   	push   ebx
c001067b:	83 ec 10             	sub    esp,0x10
c001067e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010686:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001068c:	50                   	push   eax
c001068d:	e8 8a 00 ff ff       	call   c000071c <strcpy>
c0010692:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010696:	83 c4 18             	add    esp,0x18
c0010699:	5b                   	pop    ebx
c001069a:	e9 75 ff ff ff       	jmp    c0010614 <VgaText::updateTitle()>
c001069f:	90                   	nop

c00106a0 <VgaText::decrementCursor(bool)>:
c00106a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106a8:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00106ae:	85 c0                	test   eax,eax
c00106b0:	74 07                	je     c00106b9 <VgaText::decrementCursor(bool)+0x19>
c00106b2:	48                   	dec    eax
c00106b3:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00106b9:	84 c9                	test   cl,cl
c00106bb:	74 09                	je     c00106c6 <VgaText::decrementCursor(bool)+0x26>
c00106bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106c1:	e9 64 fa ff ff       	jmp    c001012a <VgaText::updateCursor()>
c00106c6:	c3                   	ret    
c00106c7:	90                   	nop

c00106c8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00106c8:	53                   	push   ebx
c00106c9:	83 ec 08             	sub    esp,0x8
c00106cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00106dc:	3c 07                	cmp    al,0x7
c00106de:	75 2a                	jne    c001070a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00106e0:	a1 ec ab 02 c0       	mov    eax,ds:0xc002abec
c00106e5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00106ed:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00106f5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00106fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010701:	83 c4 08             	add    esp,0x8
c0010704:	5b                   	pop    ebx
c0010705:	e9 3a 2d 00 00       	jmp    c0013444 <Buzzer::beep(int, int, bool)>
c001070a:	3c 0d                	cmp    al,0xd
c001070c:	75 0c                	jne    c001071a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001070e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010718:	eb 3b                	jmp    c0010755 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001071a:	3c 0a                	cmp    al,0xa
c001071c:	75 40                	jne    c001075e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001071e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010724:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001072e:	8d 50 01             	lea    edx,[eax+0x1]
c0010731:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010737:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001073d:	75 12                	jne    c0010751 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001073f:	83 ec 0c             	sub    esp,0xc
c0010742:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010748:	53                   	push   ebx
c0010749:	e8 2a fb ff ff       	call   c0010278 <VgaText::scrollScreen()>
c001074e:	83 c4 10             	add    esp,0x10
c0010751:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010755:	83 c4 08             	add    esp,0x8
c0010758:	5b                   	pop    ebx
c0010759:	e9 cc f9 ff ff       	jmp    c001012a <VgaText::updateCursor()>
c001075e:	3c 08                	cmp    al,0x8
c0010760:	75 31                	jne    c0010793 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010762:	50                   	push   eax
c0010763:	50                   	push   eax
c0010764:	6a 01                	push   0x1
c0010766:	53                   	push   ebx
c0010767:	e8 34 ff ff ff       	call   c00106a0 <VgaText::decrementCursor(bool)>
c001076c:	5a                   	pop    edx
c001076d:	59                   	pop    ecx
c001076e:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010774:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001077a:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010780:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010786:	6a 20                	push   0x20
c0010788:	53                   	push   ebx
c0010789:	e8 90 fb ff ff       	call   c001031e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001078e:	83 c4 28             	add    esp,0x28
c0010791:	5b                   	pop    ebx
c0010792:	c3                   	ret    
c0010793:	83 ec 08             	sub    esp,0x8
c0010796:	0f be c0             	movsx  eax,al
c0010799:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001079f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107a5:	51                   	push   ecx
c00107a6:	52                   	push   edx
c00107a7:	50                   	push   eax
c00107a8:	53                   	push   ebx
c00107a9:	e8 70 fb ff ff       	call   c001031e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107ae:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107b2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107ba:	83 c4 28             	add    esp,0x28
c00107bd:	5b                   	pop    ebx
c00107be:	e9 29 fc ff ff       	jmp    c00103ec <VgaText::incrementCursor(bool)>
c00107c3:	90                   	nop

c00107c4 <VgaText::isShowingCursor()>:
c00107c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107c8:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00107ce:	c3                   	ret    
c00107cf:	90                   	nop

c00107d0 <VgaText::isBlinkDisabled()>:
c00107d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d4:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00107da:	83 f0 01             	xor    eax,0x1
c00107dd:	c3                   	ret    

c00107de <VgaText::setCursorHeight(int)>:
c00107de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107e6:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00107ec:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c00107f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107f7:	e9 48 f9 ff ff       	jmp    c0010144 <VgaText::showCursor(bool)>

c00107fc <VgaText::getCursorHeight()>:
c00107fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010800:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010806:	c3                   	ret    

c0010807 <setActiveTerminal(VgaText*)>:
c0010807:	53                   	push   ebx
c0010808:	83 ec 08             	sub    esp,0x8
c001080b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001080f:	85 db                	test   ebx,ebx
c0010811:	75 11                	jne    c0010824 <setActiveTerminal(VgaText*)+0x1d>
c0010813:	c7 44 24 10 ac 72 02 c0 	mov    DWORD PTR [esp+0x10],0xc00272ac
c001081b:	83 c4 08             	add    esp,0x8
c001081e:	5b                   	pop    ebx
c001081f:	e9 e5 85 00 00       	jmp    c0018e09 <Krnl::panic(char const*)>
c0010824:	50                   	push   eax
c0010825:	50                   	push   eax
c0010826:	53                   	push   ebx
c0010827:	68 ba 72 02 c0       	push   0xc00272ba
c001082c:	e8 14 1e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0010831:	a1 44 ab 02 c0       	mov    eax,ds:0xc002ab44
c0010836:	83 c4 10             	add    esp,0x10
c0010839:	85 c0                	test   eax,eax
c001083b:	74 0c                	je     c0010849 <setActiveTerminal(VgaText*)+0x42>
c001083d:	83 ec 0c             	sub    esp,0xc
c0010840:	50                   	push   eax
c0010841:	e8 e4 f8 ff ff       	call   c001012a <VgaText::updateCursor()>
c0010846:	83 c4 10             	add    esp,0x10
c0010849:	89 1d 44 ab 02 c0    	mov    DWORD PTR ds:0xc002ab44,ebx
c001084f:	51                   	push   ecx
c0010850:	51                   	push   ecx
c0010851:	53                   	push   ebx
c0010852:	68 d2 72 02 c0       	push   0xc00272d2
c0010857:	e8 e9 1d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001085c:	83 c4 0c             	add    esp,0xc
c001085f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010865:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001086b:	53                   	push   ebx
c001086c:	e8 25 fb ff ff       	call   c0010396 <VgaText::setCursor(int, int)>
c0010871:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010874:	e8 57 ff ff ff       	call   c00107d0 <VgaText::isBlinkDisabled()>
c0010879:	5a                   	pop    edx
c001087a:	0f b6 c0             	movzx  eax,al
c001087d:	59                   	pop    ecx
c001087e:	50                   	push   eax
c001087f:	53                   	push   ebx
c0010880:	e8 cf f8 ff ff       	call   c0010154 <VgaText::disableBlink(bool)>
c0010885:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010888:	e8 6f ff ff ff       	call   c00107fc <VgaText::getCursorHeight()>
c001088d:	5a                   	pop    edx
c001088e:	59                   	pop    ecx
c001088f:	50                   	push   eax
c0010890:	53                   	push   ebx
c0010891:	e8 48 ff ff ff       	call   c00107de <VgaText::setCursorHeight(int)>
c0010896:	83 c4 10             	add    esp,0x10
c0010899:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00108a0:	75 0a                	jne    c00108ac <setActiveTerminal(VgaText*)+0xa5>
c00108a2:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00108ac:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108b0:	83 c4 08             	add    esp,0x8
c00108b3:	5b                   	pop    ebx
c00108b4:	e9 1d f8 ff ff       	jmp    c00100d6 <VgaText::load()>

c00108b9 <doTerminalCycle()>:
c00108b9:	83 ec 18             	sub    esp,0x18
c00108bc:	a1 40 ab 02 c0       	mov    eax,ds:0xc002ab40
c00108c1:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00108c7:	50                   	push   eax
c00108c8:	a3 40 ab 02 c0       	mov    ds:0xc002ab40,eax
c00108cd:	e8 35 ff ff ff       	call   c0010807 <setActiveTerminal(VgaText*)>
c00108d2:	83 c4 1c             	add    esp,0x1c
c00108d5:	c3                   	ret    

c00108d6 <VgaText::doUpdate()>:
c00108d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108da:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00108e0:	85 c0                	test   eax,eax
c00108e2:	74 02                	je     c00108e6 <VgaText::doUpdate()+0x10>
c00108e4:	ff e0                	jmp    eax
c00108e6:	c3                   	ret    
c00108e7:	90                   	nop

c00108e8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00108e8:	55                   	push   ebp
c00108e9:	57                   	push   edi
c00108ea:	56                   	push   esi
c00108eb:	53                   	push   ebx
c00108ec:	83 ec 1c             	sub    esp,0x1c
c00108ef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00108f3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00108f8:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c00108ff:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010902:	50                   	push   eax
c0010903:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010908:	50                   	push   eax
c0010909:	e8 58 f9 ff ff       	call   c0010266 <VgaText::combineColours(unsigned char, unsigned char)>
c001090e:	59                   	pop    ecx
c001090f:	0f b6 c0             	movzx  eax,al
c0010912:	5b                   	pop    ebx
c0010913:	31 c9                	xor    ecx,ecx
c0010915:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001091d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010921:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010927:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001092b:	0f b7 db             	movzx  ebx,bx
c001092e:	01 db                	add    ebx,ebx
c0010930:	01 fb                	add    ebx,edi
c0010932:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010935:	84 c0                	test   al,al
c0010937:	0f 84 38 01 00 00    	je     c0010a75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001093d:	3c 0d                	cmp    al,0xd
c001093f:	75 0f                	jne    c0010950 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010941:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001094b:	e9 1f 01 00 00       	jmp    c0010a6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010950:	3c 0a                	cmp    al,0xa
c0010952:	75 5b                	jne    c00109af <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010954:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c001095a:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010964:	8d 48 01             	lea    ecx,[eax+0x1]
c0010967:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c001096d:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010973:	75 12                	jne    c0010987 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010975:	83 ec 0c             	sub    esp,0xc
c0010978:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001097e:	55                   	push   ebp
c001097f:	e8 f4 f8 ff ff       	call   c0010278 <VgaText::scrollScreen()>
c0010984:	83 c4 10             	add    esp,0x10
c0010987:	83 ec 0c             	sub    esp,0xc
c001098a:	55                   	push   ebp
c001098b:	e8 9a f7 ff ff       	call   c001012a <VgaText::updateCursor()>
c0010990:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010998:	83 c4 10             	add    esp,0x10
c001099b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109a1:	31 c9                	xor    ecx,ecx
c00109a3:	0f b7 db             	movzx  ebx,bx
c00109a6:	01 db                	add    ebx,ebx
c00109a8:	01 fb                	add    ebx,edi
c00109aa:	e9 c0 00 00 00       	jmp    c0010a6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109af:	3c 08                	cmp    al,0x8
c00109b1:	75 4e                	jne    c0010a01 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00109b3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109b7:	53                   	push   ebx
c00109b8:	53                   	push   ebx
c00109b9:	6a 01                	push   0x1
c00109bb:	55                   	push   ebp
c00109bc:	e8 df fc ff ff       	call   c00106a0 <VgaText::decrementCursor(bool)>
c00109c1:	58                   	pop    eax
c00109c2:	5a                   	pop    edx
c00109c3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00109c9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00109cf:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c00109d5:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c00109db:	6a 20                	push   0x20
c00109dd:	55                   	push   ebp
c00109de:	e8 3b f9 ff ff       	call   c001031e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109e3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109eb:	83 c4 20             	add    esp,0x20
c00109ee:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109f4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00109f8:	0f b7 db             	movzx  ebx,bx
c00109fb:	01 db                	add    ebx,ebx
c00109fd:	01 fb                	add    ebx,edi
c00109ff:	eb 6e                	jmp    c0010a6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a01:	51                   	push   ecx
c0010a02:	51                   	push   ecx
c0010a03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a07:	50                   	push   eax
c0010a08:	e8 ff f8 ff ff       	call   c001030c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a13:	39 2d 44 ab 02 c0    	cmp    DWORD PTR ds:0xc002ab44,ebp
c0010a19:	75 2a                	jne    c0010a45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a1b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a21:	85 c0                	test   eax,eax
c0010a23:	74 20                	je     c0010a45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a25:	52                   	push   edx
c0010a26:	52                   	push   edx
c0010a27:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a2d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a33:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a3b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a3e:	51                   	push   ecx
c0010a3f:	55                   	push   ebp
c0010a40:	ff d0                	call   eax
c0010a42:	83 c4 20             	add    esp,0x20
c0010a45:	83 c3 02             	add    ebx,0x2
c0010a48:	50                   	push   eax
c0010a49:	50                   	push   eax
c0010a4a:	6a 00                	push   0x0
c0010a4c:	55                   	push   ebp
c0010a4d:	e8 9a f9 ff ff       	call   c00103ec <VgaText::incrementCursor(bool)>
c0010a52:	83 c4 10             	add    esp,0x10
c0010a55:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010a5c:	75 0f                	jne    c0010a6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010a5e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a66:	0f b7 db             	movzx  ebx,bx
c0010a69:	01 db                	add    ebx,ebx
c0010a6b:	01 fb                	add    ebx,edi
c0010a6d:	b1 01                	mov    cl,0x1
c0010a6f:	46                   	inc    esi
c0010a70:	e9 bd fe ff ff       	jmp    c0010932 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010a75:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010a79:	83 ec 0c             	sub    esp,0xc
c0010a7c:	55                   	push   ebp
c0010a7d:	e8 a8 f6 ff ff       	call   c001012a <VgaText::updateCursor()>
c0010a82:	83 c4 10             	add    esp,0x10
c0010a85:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010a89:	84 c9                	test   cl,cl
c0010a8b:	74 0c                	je     c0010a99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010a8d:	83 ec 0c             	sub    esp,0xc
c0010a90:	55                   	push   ebp
c0010a91:	e8 40 fe ff ff       	call   c00108d6 <VgaText::doUpdate()>
c0010a96:	83 c4 10             	add    esp,0x10
c0010a99:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010aa0:	83 c4 1c             	add    esp,0x1c
c0010aa3:	5b                   	pop    ebx
c0010aa4:	5e                   	pop    esi
c0010aa5:	5f                   	pop    edi
c0010aa6:	5d                   	pop    ebp
c0010aa7:	c3                   	ret    

c0010aa8 <VgaText::clearScreen()>:
c0010aa8:	57                   	push   edi
c0010aa9:	56                   	push   esi
c0010aaa:	31 f6                	xor    esi,esi
c0010aac:	53                   	push   ebx
c0010aad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ab1:	52                   	push   edx
c0010ab2:	6a 00                	push   0x0
c0010ab4:	6a 00                	push   0x0
c0010ab6:	53                   	push   ebx
c0010ab7:	e8 da f8 ff ff       	call   c0010396 <VgaText::setCursor(int, int)>
c0010abc:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010ac3:	83 c4 10             	add    esp,0x10
c0010ac6:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010acc:	7e 26                	jle    c0010af4 <VgaText::clearScreen()+0x4c>
c0010ace:	31 ff                	xor    edi,edi
c0010ad0:	50                   	push   eax
c0010ad1:	50                   	push   eax
c0010ad2:	56                   	push   esi
c0010ad3:	57                   	push   edi
c0010ad4:	47                   	inc    edi
c0010ad5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010adb:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ae1:	6a 20                	push   0x20
c0010ae3:	53                   	push   ebx
c0010ae4:	e8 35 f8 ff ff       	call   c001031e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ae9:	83 c4 20             	add    esp,0x20
c0010aec:	83 ff 50             	cmp    edi,0x50
c0010aef:	75 df                	jne    c0010ad0 <VgaText::clearScreen()+0x28>
c0010af1:	46                   	inc    esi
c0010af2:	eb d2                	jmp    c0010ac6 <VgaText::clearScreen()+0x1e>
c0010af4:	83 ec 0c             	sub    esp,0xc
c0010af7:	53                   	push   ebx
c0010af8:	e8 d9 fd ff ff       	call   c00108d6 <VgaText::doUpdate()>
c0010afd:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010b04:	83 c4 10             	add    esp,0x10
c0010b07:	5b                   	pop    ebx
c0010b08:	5e                   	pop    esi
c0010b09:	5f                   	pop    edi
c0010b0a:	c3                   	ret    
c0010b0b:	90                   	nop

c0010b0c <VgaText::putchar(char)>:
c0010b0c:	56                   	push   esi
c0010b0d:	53                   	push   ebx
c0010b0e:	83 ec 14             	sub    esp,0x14
c0010b11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b19:	3c 5b                	cmp    al,0x5b
c0010b1b:	75 21                	jne    c0010b3e <VgaText::putchar(char)+0x32>
c0010b1d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b24:	74 28                	je     c0010b4e <VgaText::putchar(char)+0x42>
c0010b26:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b2f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b39:	e9 e2 00 00 00       	jmp    c0010c20 <VgaText::putchar(char)+0x114>
c0010b3e:	3c 1b                	cmp    al,0x1b
c0010b40:	75 0c                	jne    c0010b4e <VgaText::putchar(char)+0x42>
c0010b42:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010b49:	e9 d2 00 00 00       	jmp    c0010c20 <VgaText::putchar(char)+0x114>
c0010b4e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010b54:	84 c9                	test   cl,cl
c0010b56:	0f 84 ab 00 00 00    	je     c0010c07 <VgaText::putchar(char)+0xfb>
c0010b5c:	8d 50 c0             	lea    edx,[eax-0x40]
c0010b5f:	80 fa 3e             	cmp    dl,0x3e
c0010b62:	0f 87 82 00 00 00    	ja     c0010bea <VgaText::putchar(char)+0xde>
c0010b68:	3c 6d                	cmp    al,0x6d
c0010b6a:	75 4d                	jne    c0010bb9 <VgaText::putchar(char)+0xad>
c0010b6c:	31 f6                	xor    esi,esi
c0010b6e:	31 d2                	xor    edx,edx
c0010b70:	31 c0                	xor    eax,eax
c0010b72:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010b78:	7e 30                	jle    c0010baa <VgaText::putchar(char)+0x9e>
c0010b7a:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010b82:	80 fa 3b             	cmp    dl,0x3b
c0010b85:	75 17                	jne    c0010b9e <VgaText::putchar(char)+0x92>
c0010b87:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010b8b:	50                   	push   eax
c0010b8c:	53                   	push   ebx
c0010b8d:	e8 fc f5 ff ff       	call   c001018e <VgaText::doANSI_SGR(int)>
c0010b92:	59                   	pop    ecx
c0010b93:	31 d2                	xor    edx,edx
c0010b95:	58                   	pop    eax
c0010b96:	31 c0                	xor    eax,eax
c0010b98:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b9c:	eb 09                	jmp    c0010ba7 <VgaText::putchar(char)+0x9b>
c0010b9e:	6b c0 0a             	imul   eax,eax,0xa
c0010ba1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010ba5:	88 ca                	mov    dl,cl
c0010ba7:	46                   	inc    esi
c0010ba8:	eb c8                	jmp    c0010b72 <VgaText::putchar(char)+0x66>
c0010baa:	84 d2                	test   dl,dl
c0010bac:	74 31                	je     c0010bdf <VgaText::putchar(char)+0xd3>
c0010bae:	50                   	push   eax
c0010baf:	53                   	push   ebx
c0010bb0:	e8 d9 f5 ff ff       	call   c001018e <VgaText::doANSI_SGR(int)>
c0010bb5:	58                   	pop    eax
c0010bb6:	5a                   	pop    edx
c0010bb7:	eb 26                	jmp    c0010bdf <VgaText::putchar(char)+0xd3>
c0010bb9:	3c 4a                	cmp    al,0x4a
c0010bbb:	75 22                	jne    c0010bdf <VgaText::putchar(char)+0xd3>
c0010bbd:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010bc4:	75 19                	jne    c0010bdf <VgaText::putchar(char)+0xd3>
c0010bc6:	83 ec 0c             	sub    esp,0xc
c0010bc9:	53                   	push   ebx
c0010bca:	e8 d9 fe ff ff       	call   c0010aa8 <VgaText::clearScreen()>
c0010bcf:	83 c4 0c             	add    esp,0xc
c0010bd2:	6a 00                	push   0x0
c0010bd4:	6a 00                	push   0x0
c0010bd6:	53                   	push   ebx
c0010bd7:	e8 ba f7 ff ff       	call   c0010396 <VgaText::setCursor(int, int)>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010be8:	eb 36                	jmp    c0010c20 <VgaText::putchar(char)+0x114>
c0010bea:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010bf0:	83 fa 0e             	cmp    edx,0xe
c0010bf3:	7f 2b                	jg     c0010c20 <VgaText::putchar(char)+0x114>
c0010bf5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010bf8:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010bfe:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010c05:	eb 19                	jmp    c0010c20 <VgaText::putchar(char)+0x114>
c0010c07:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c0d:	0f be c0             	movsx  eax,al
c0010c10:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c16:	50                   	push   eax
c0010c17:	53                   	push   ebx
c0010c18:	e8 ab fa ff ff       	call   c00106c8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c1d:	83 c4 10             	add    esp,0x10
c0010c20:	83 c4 14             	add    esp,0x14
c0010c23:	5b                   	pop    ebx
c0010c24:	5e                   	pop    esi
c0010c25:	c3                   	ret    

c0010c26 <VgaText::puts(char const*)>:
c0010c26:	53                   	push   ebx
c0010c27:	83 ec 08             	sub    esp,0x8
c0010c2a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c2e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c31:	84 c0                	test   al,al
c0010c33:	74 12                	je     c0010c47 <VgaText::puts(char const*)+0x21>
c0010c35:	43                   	inc    ebx
c0010c36:	51                   	push   ecx
c0010c37:	51                   	push   ecx
c0010c38:	50                   	push   eax
c0010c39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c3d:	e8 ca fe ff ff       	call   c0010b0c <VgaText::putchar(char)>
c0010c42:	83 c4 10             	add    esp,0x10
c0010c45:	eb e7                	jmp    c0010c2e <VgaText::puts(char const*)+0x8>
c0010c47:	83 c4 08             	add    esp,0x8
c0010c4a:	5b                   	pop    ebx
c0010c4b:	c3                   	ret    

c0010c4c <VgaText::putx(unsigned int)>:
c0010c4c:	57                   	push   edi
c0010c4d:	b9 11 00 00 00       	mov    ecx,0x11
c0010c52:	56                   	push   esi
c0010c53:	be ee 72 02 c0       	mov    esi,0xc00272ee
c0010c58:	53                   	push   ebx
c0010c59:	83 ec 20             	sub    esp,0x20
c0010c5c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c60:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010c64:	fc                   	cld    
c0010c65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c67:	be 08 00 00 00       	mov    esi,0x8
c0010c6c:	50                   	push   eax
c0010c6d:	50                   	push   eax
c0010c6e:	89 d8                	mov    eax,ebx
c0010c70:	c1 e3 04             	shl    ebx,0x4
c0010c73:	c1 e8 1c             	shr    eax,0x1c
c0010c76:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010c7b:	50                   	push   eax
c0010c7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010c80:	e8 87 fe ff ff       	call   c0010b0c <VgaText::putchar(char)>
c0010c85:	83 c4 10             	add    esp,0x10
c0010c88:	4e                   	dec    esi
c0010c89:	75 e1                	jne    c0010c6c <VgaText::putx(unsigned int)+0x20>
c0010c8b:	83 c4 20             	add    esp,0x20
c0010c8e:	5b                   	pop    ebx
c0010c8f:	5e                   	pop    esi
c0010c90:	5f                   	pop    edi
c0010c91:	c3                   	ret    

c0010c92 <VgaText::VgaText(char const*)>:
c0010c92:	57                   	push   edi
c0010c93:	56                   	push   esi
c0010c94:	53                   	push   ebx
c0010c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c99:	83 ec 08             	sub    esp,0x8
c0010c9c:	6a 00                	push   0x0
c0010c9e:	50                   	push   eax
c0010c9f:	e8 6e 05 00 00       	call   c0011212 <UnixFile::UnixFile(int)>
c0010ca4:	83 c4 10             	add    esp,0x10
c0010ca7:	ba 54 73 02 c0       	mov    edx,0xc0027354
c0010cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb0:	89 10                	mov    DWORD PTR [eax],edx
c0010cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb6:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc4:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd2:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cdd:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce8:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf6:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d04:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d20:	bb 20 ab 02 c0       	mov    ebx,0xc002ab20
c0010d25:	b8 08 00 00 00       	mov    eax,0x8
c0010d2a:	fc                   	cld    
c0010d2b:	89 d7                	mov    edi,edx
c0010d2d:	89 de                	mov    esi,ebx
c0010d2f:	89 c1                	mov    ecx,eax
c0010d31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d37:	05 1e 10 00 00       	add    eax,0x101e
c0010d3c:	83 ec 08             	sub    esp,0x8
c0010d3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d43:	50                   	push   eax
c0010d44:	e8 d3 f9 fe ff       	call   c000071c <strcpy>
c0010d49:	83 c4 10             	add    esp,0x10
c0010d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d50:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d5e:	83 c0 0c             	add    eax,0xc
c0010d61:	83 ec 04             	sub    esp,0x4
c0010d64:	68 00 0f 00 00       	push   0xf00
c0010d69:	6a 00                	push   0x0
c0010d6b:	50                   	push   eax
c0010d6c:	e8 0c f9 fe ff       	call   c000067d <memset>
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	83 ec 04             	sub    esp,0x4
c0010d77:	6a 00                	push   0x0
c0010d79:	6a 07                	push   0x7
c0010d7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d7f:	e8 c2 f4 ff ff       	call   c0010246 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	83 ec 08             	sub    esp,0x8
c0010d8a:	6a 02                	push   0x2
c0010d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d90:	e8 49 fa ff ff       	call   c00107de <VgaText::setCursorHeight(int)>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	83 ec 04             	sub    esp,0x4
c0010d9b:	6a 00                	push   0x0
c0010d9d:	6a 00                	push   0x0
c0010d9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010da3:	e8 ee f5 ff ff       	call   c0010396 <VgaText::setCursor(int, int)>
c0010da8:	83 c4 10             	add    esp,0x10
c0010dab:	83 ec 08             	sub    esp,0x8
c0010dae:	6a 01                	push   0x1
c0010db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db4:	e8 8b f3 ff ff       	call   c0010144 <VgaText::showCursor(bool)>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	83 ec 08             	sub    esp,0x8
c0010dbf:	6a 01                	push   0x1
c0010dc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc5:	e8 8a f3 ff ff       	call   c0010154 <VgaText::disableBlink(bool)>
c0010dca:	83 c4 10             	add    esp,0x10
c0010dcd:	83 ec 0c             	sub    esp,0xc
c0010dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd4:	e8 cf fc ff ff       	call   c0010aa8 <VgaText::clearScreen()>
c0010dd9:	83 c4 10             	add    esp,0x10
c0010ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de0:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010deb:	05 9e 10 00 00       	add    eax,0x109e
c0010df0:	83 ec 04             	sub    esp,0x4
c0010df3:	68 96 00 00 00       	push   0x96
c0010df8:	6a 00                	push   0x0
c0010dfa:	50                   	push   eax
c0010dfb:	e8 7d f8 fe ff       	call   c000067d <memset>
c0010e00:	83 c4 10             	add    esp,0x10
c0010e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e07:	05 34 11 00 00       	add    eax,0x1134
c0010e0c:	83 ec 04             	sub    esp,0x4
c0010e0f:	68 2c 01 00 00       	push   0x12c
c0010e14:	6a 00                	push   0x0
c0010e16:	50                   	push   eax
c0010e17:	e8 61 f8 fe ff       	call   c000067d <memset>
c0010e1c:	83 c4 10             	add    esp,0x10
c0010e1f:	90                   	nop
c0010e20:	5b                   	pop    ebx
c0010e21:	5e                   	pop    esi
c0010e22:	5f                   	pop    edi
c0010e23:	c3                   	ret    

c0010e24 <VgaText::receiveKey(unsigned char)>:
c0010e24:	55                   	push   ebp
c0010e25:	57                   	push   edi
c0010e26:	56                   	push   esi
c0010e27:	53                   	push   ebx
c0010e28:	83 ec 1c             	sub    esp,0x1c
c0010e2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e33:	84 db                	test   bl,bl
c0010e35:	0f 84 c9 00 00 00    	je     c0010f04 <VgaText::receiveKey(unsigned char)+0xe0>
c0010e3b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e41:	80 fb 08             	cmp    bl,0x8
c0010e44:	75 2c                	jne    c0010e72 <VgaText::receiveKey(unsigned char)+0x4e>
c0010e46:	83 ec 0c             	sub    esp,0xc
c0010e49:	57                   	push   edi
c0010e4a:	e8 4b f8 fe ff       	call   c000069a <strlen>
c0010e4f:	83 c4 10             	add    esp,0x10
c0010e52:	85 c0                	test   eax,eax
c0010e54:	74 41                	je     c0010e97 <VgaText::receiveKey(unsigned char)+0x73>
c0010e56:	50                   	push   eax
c0010e57:	50                   	push   eax
c0010e58:	6a 08                	push   0x8
c0010e5a:	56                   	push   esi
c0010e5b:	e8 ac fc ff ff       	call   c0010b0c <VgaText::putchar(char)>
c0010e60:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e63:	e8 32 f8 fe ff       	call   c000069a <strlen>
c0010e68:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010e70:	eb 22                	jmp    c0010e94 <VgaText::receiveKey(unsigned char)+0x70>
c0010e72:	0f be c3             	movsx  eax,bl
c0010e75:	52                   	push   edx
c0010e76:	52                   	push   edx
c0010e77:	50                   	push   eax
c0010e78:	56                   	push   esi
c0010e79:	e8 8e fc ff ff       	call   c0010b0c <VgaText::putchar(char)>
c0010e7e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010e82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010e87:	59                   	pop    ecx
c0010e88:	5d                   	pop    ebp
c0010e89:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010e8d:	50                   	push   eax
c0010e8e:	57                   	push   edi
c0010e8f:	e8 3f f9 fe ff       	call   c00007d3 <strcat>
c0010e94:	83 c4 10             	add    esp,0x10
c0010e97:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010e9e:	75 05                	jne    c0010ea5 <VgaText::receiveKey(unsigned char)+0x81>
c0010ea0:	80 fb 0a             	cmp    bl,0xa
c0010ea3:	75 53                	jne    c0010ef8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010ea5:	83 ec 0c             	sub    esp,0xc
c0010ea8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010eae:	53                   	push   ebx
c0010eaf:	e8 e6 f7 fe ff       	call   c000069a <strlen>
c0010eb4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010eb7:	89 c5                	mov    ebp,eax
c0010eb9:	e8 dc f7 fe ff       	call   c000069a <strlen>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010ec5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010eca:	76 10                	jbe    c0010edc <VgaText::receiveKey(unsigned char)+0xb8>
c0010ecc:	83 ec 0c             	sub    esp,0xc
c0010ecf:	68 ff 72 02 c0       	push   0xc00272ff
c0010ed4:	e8 30 7f 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	50                   	push   eax
c0010edd:	50                   	push   eax
c0010ede:	57                   	push   edi
c0010edf:	53                   	push   ebx
c0010ee0:	e8 ee f8 fe ff       	call   c00007d3 <strcat>
c0010ee5:	83 c4 0c             	add    esp,0xc
c0010ee8:	68 96 00 00 00       	push   0x96
c0010eed:	6a 00                	push   0x0
c0010eef:	57                   	push   edi
c0010ef0:	e8 88 f7 fe ff       	call   c000067d <memset>
c0010ef5:	83 c4 10             	add    esp,0x10
c0010ef8:	83 ec 0c             	sub    esp,0xc
c0010efb:	56                   	push   esi
c0010efc:	e8 d5 f9 ff ff       	call   c00108d6 <VgaText::doUpdate()>
c0010f01:	83 c4 10             	add    esp,0x10
c0010f04:	83 c4 1c             	add    esp,0x1c
c0010f07:	5b                   	pop    ebx
c0010f08:	5e                   	pop    esi
c0010f09:	5f                   	pop    edi
c0010f0a:	5d                   	pop    ebp
c0010f0b:	c3                   	ret    

c0010f0c <VgaText::write(unsigned long long, void*, int*)>:
c0010f0c:	55                   	push   ebp
c0010f0d:	57                   	push   edi
c0010f0e:	56                   	push   esi
c0010f0f:	53                   	push   ebx
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f1b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f1f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f26:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f29:	39 eb                	cmp    ebx,ebp
c0010f2b:	74 13                	je     c0010f40 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f2d:	43                   	inc    ebx
c0010f2e:	50                   	push   eax
c0010f2f:	50                   	push   eax
c0010f30:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f34:	50                   	push   eax
c0010f35:	56                   	push   esi
c0010f36:	e8 d1 fb ff ff       	call   c0010b0c <VgaText::putchar(char)>
c0010f3b:	83 c4 10             	add    esp,0x10
c0010f3e:	eb e9                	jmp    c0010f29 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f40:	83 ec 0c             	sub    esp,0xc
c0010f43:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010f4a:	56                   	push   esi
c0010f4b:	e8 86 f9 ff ff       	call   c00108d6 <VgaText::doUpdate()>
c0010f50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f54:	89 38                	mov    DWORD PTR [eax],edi
c0010f56:	83 c4 1c             	add    esp,0x1c
c0010f59:	31 c0                	xor    eax,eax
c0010f5b:	5b                   	pop    ebx
c0010f5c:	5e                   	pop    esi
c0010f5d:	5f                   	pop    edi
c0010f5e:	5d                   	pop    ebp
c0010f5f:	c3                   	ret    

c0010f60 <newTerminal(char*)>:
c0010f60:	83 ec 28             	sub    esp,0x28
c0010f63:	68 60 12 00 00       	push   0x1260
c0010f68:	e8 65 e5 ff ff       	call   c000f4d2 <malloc>
c0010f6d:	5a                   	pop    edx
c0010f6e:	59                   	pop    ecx
c0010f6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f73:	50                   	push   eax
c0010f74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f78:	e8 15 fd ff ff       	call   c0010c92 <VgaText::VgaText(char const*)>
c0010f7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f81:	83 c4 2c             	add    esp,0x2c
c0010f84:	c3                   	ret    
c0010f85:	90                   	nop

c0010f86 <TSS::TSS()>:
c0010f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f91:	90                   	nop
c0010f92:	c3                   	ret    
c0010f93:	90                   	nop

c0010f94 <TSS::setESP(unsigned long)>:
c0010f94:	55                   	push   ebp
c0010f95:	89 e5                	mov    ebp,esp
c0010f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f9d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fa3:	90                   	nop
c0010fa4:	5d                   	pop    ebp
c0010fa5:	c3                   	ret    

c0010fa6 <TSS::flush()>:
c0010fa6:	55                   	push   ebp
c0010fa7:	89 e5                	mov    ebp,esp
c0010fa9:	83 ec 10             	sub    esp,0x10
c0010fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010faf:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fb1:	83 c8 03             	or     eax,0x3
c0010fb4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010fb8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010fbc:	66 89 d0             	mov    ax,dx
c0010fbf:	0f 00 d8             	ltr    ax
c0010fc2:	90                   	nop
c0010fc3:	c9                   	leave  
c0010fc4:	c3                   	ret    
c0010fc5:	90                   	nop

c0010fc6 <TSS::setup(unsigned long, unsigned long)>:
c0010fc6:	55                   	push   ebp
c0010fc7:	89 e5                	mov    ebp,esp
c0010fc9:	83 ec 18             	sub    esp,0x18
c0010fcc:	83 ec 0c             	sub    esp,0xc
c0010fcf:	6a 68                	push   0x68
c0010fd1:	e8 fc e4 ff ff       	call   c000f4d2 <malloc>
c0010fd6:	83 c4 10             	add    esp,0x10
c0010fd9:	89 c2                	mov    edx,eax
c0010fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fde:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe7:	83 ec 04             	sub    esp,0x4
c0010fea:	6a 68                	push   0x68
c0010fec:	6a 00                	push   0x0
c0010fee:	50                   	push   eax
c0010fef:	e8 89 f6 fe ff       	call   c000067d <memset>
c0010ff4:	83 c4 10             	add    esp,0x10
c0010ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ffa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ffd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011006:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011009:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001100f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011012:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011015:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011018:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001101b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001101e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011021:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001102a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001102d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011039:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001103f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011045:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001104b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001104e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011051:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001105a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001105d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011066:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011069:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001106c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001106f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011075:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011078:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001107b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001107e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011081:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001108b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001108e:	0f 20 da             	mov    edx,cr3
c0011091:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011094:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011097:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001109a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001109d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a0:	83 ec 08             	sub    esp,0x8
c00110a3:	50                   	push   eax
c00110a4:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110a7:	50                   	push   eax
c00110a8:	e8 03 dc ff ff       	call   c000ecb0 <GDTEntry::setBase(unsigned int)>
c00110ad:	83 c4 10             	add    esp,0x10
c00110b0:	83 ec 08             	sub    esp,0x8
c00110b3:	6a 68                	push   0x68
c00110b5:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110b8:	50                   	push   eax
c00110b9:	e8 0e dc ff ff       	call   c000eccc <GDTEntry::setLimit(unsigned int)>
c00110be:	83 c4 10             	add    esp,0x10
c00110c1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00110c5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110c8:	83 e0 0f             	and    eax,0xf
c00110cb:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110ce:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00110d1:	83 c8 40             	or     eax,0x40
c00110d4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00110d7:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00110dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110e2:	05 78 01 00 00       	add    eax,0x178
c00110e7:	83 ec 04             	sub    esp,0x4
c00110ea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00110ed:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00110f0:	50                   	push   eax
c00110f1:	e8 0a dc ff ff       	call   c000ed00 <GDT::addEntry(GDTEntry)>
c00110f6:	83 c4 10             	add    esp,0x10
c00110f9:	89 c2                	mov    edx,eax
c00110fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110fe:	89 10                	mov    DWORD PTR [eax],edx
c0011100:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0011105:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001110b:	05 78 01 00 00       	add    eax,0x178
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	50                   	push   eax
c0011114:	e8 2b dc ff ff       	call   c000ed44 <GDT::flush()>
c0011119:	83 c4 10             	add    esp,0x10
c001111c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001111f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011121:	83 ec 08             	sub    esp,0x8
c0011124:	50                   	push   eax
c0011125:	68 68 73 02 c0       	push   0xc0027368
c001112a:	e8 16 15 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001112f:	83 c4 10             	add    esp,0x10
c0011132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011135:	8b 00                	mov    eax,DWORD PTR [eax]
c0011137:	c9                   	leave  
c0011138:	c3                   	ret    
c0011139:	90                   	nop

c001113a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001113a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001113e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011142:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011145:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001114a:	75 08                	jne    c0011154 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001114c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011152:	eb 38                	jmp    c001118c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011154:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011159:	75 17                	jne    c0011172 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001115b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011160:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011163:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011169:	8b 10                	mov    edx,DWORD PTR [eax]
c001116b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001116f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011172:	89 c1                	mov    ecx,eax
c0011174:	83 e1 fd             	and    ecx,0xfffffffd
c0011177:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001117d:	74 cd                	je     c001114c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001117f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011184:	83 e0 ef             	and    eax,0xffffffef
c0011187:	83 f8 08             	cmp    eax,0x8
c001118a:	76 c0                	jbe    c001114c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001118c:	31 c0                	xor    eax,eax
c001118e:	c3                   	ret    
c001118f:	90                   	nop

c0011190 <ReservedFilename::isAtty()>:
c0011190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011194:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011197:	31 c0                	xor    eax,eax
c0011199:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001119f:	74 09                	je     c00111aa <ReservedFilename::isAtty()+0x1a>
c00111a1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00111a7:	0f 94 c0             	sete   al
c00111aa:	c3                   	ret    
c00111ab:	90                   	nop

c00111ac <ReservedFilename::write(unsigned long long, void*, int*)>:
c00111ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111bb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00111c0:	75 08                	jne    c00111ca <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00111c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00111c8:	eb 3d                	jmp    c0011207 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111ca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111cf:	75 17                	jne    c00111e8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00111d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111d9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111df:	8b 10                	mov    edx,DWORD PTR [eax]
c00111e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111e5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00111e8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111ed:	75 04                	jne    c00111f3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00111ef:	89 0a                	mov    DWORD PTR [edx],ecx
c00111f1:	eb 14                	jmp    c0011207 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00111f3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00111f8:	74 c8                	je     c00111c2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00111fa:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111ff:	83 e0 ef             	and    eax,0xffffffef
c0011202:	83 f8 08             	cmp    eax,0x8
c0011205:	76 bb                	jbe    c00111c2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011207:	31 c0                	xor    eax,eax
c0011209:	c3                   	ret    

c001120a <UnixFile::getFileDescriptor()>:
c001120a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001120e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011211:	c3                   	ret    

c0011212 <UnixFile::UnixFile(int)>:
c0011212:	53                   	push   ebx
c0011213:	83 ec 28             	sub    esp,0x28
c0011216:	ba 54 74 02 c0       	mov    edx,0xc0027454
c001121b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001121f:	89 10                	mov    DWORD PTR [eax],edx
c0011221:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011229:	0f 8f 8c 01 00 00    	jg     c00113bb <UnixFile::UnixFile(int)+0x1a9>
c001122f:	a1 a0 9a 02 c0       	mov    eax,ds:0xc0029aa0
c0011234:	8d 50 01             	lea    edx,[eax+0x1]
c0011237:	89 15 a0 9a 02 c0    	mov    DWORD PTR ds:0xc0029aa0,edx
c001123d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011241:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011244:	83 ec 08             	sub    esp,0x8
c0011247:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001124b:	68 d8 ab 02 c0       	push   0xc002abd8
c0011250:	e8 7b 45 01 00       	call   c00257d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011255:	83 c4 10             	add    esp,0x10
c0011258:	a0 d4 ab 02 c0       	mov    al,ds:0xc002abd4
c001125d:	83 f0 01             	xor    eax,0x1
c0011260:	84 c0                	test   al,al
c0011262:	0f 84 54 01 00 00    	je     c00113bc <UnixFile::UnixFile(int)+0x1aa>
c0011268:	c6 05 d4 ab 02 c0 01 	mov    BYTE PTR ds:0xc002abd4,0x1
c001126f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011277:	83 ec 0c             	sub    esp,0xc
c001127a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001127e:	e8 4f e2 ff ff       	call   c000f4d2 <malloc>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	89 c3                	mov    ebx,eax
c0011288:	83 ec 08             	sub    esp,0x8
c001128b:	68 03 ff ff 0f       	push   0xfffff03
c0011290:	53                   	push   ebx
c0011291:	e8 2c 01 00 00       	call   c00113c2 <ReservedFilename::ReservedFilename(int)>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	89 1d cc ab 02 c0    	mov    DWORD PTR ds:0xc002abcc,ebx
c001129f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00112a7:	83 ec 0c             	sub    esp,0xc
c00112aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ae:	e8 1f e2 ff ff       	call   c000f4d2 <malloc>
c00112b3:	83 c4 10             	add    esp,0x10
c00112b6:	89 c3                	mov    ebx,eax
c00112b8:	83 ec 08             	sub    esp,0x8
c00112bb:	68 01 ff ff 0f       	push   0xfffff01
c00112c0:	53                   	push   ebx
c00112c1:	e8 fc 00 00 00       	call   c00113c2 <ReservedFilename::ReservedFilename(int)>
c00112c6:	83 c4 10             	add    esp,0x10
c00112c9:	89 1d d0 ab 02 c0    	mov    DWORD PTR ds:0xc002abd0,ebx
c00112cf:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00112d7:	83 ec 0c             	sub    esp,0xc
c00112da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00112de:	e8 ef e1 ff ff       	call   c000f4d2 <malloc>
c00112e3:	83 c4 10             	add    esp,0x10
c00112e6:	89 c3                	mov    ebx,eax
c00112e8:	83 ec 08             	sub    esp,0x8
c00112eb:	68 00 ff ff 0f       	push   0xfffff00
c00112f0:	53                   	push   ebx
c00112f1:	e8 cc 00 00 00       	call   c00113c2 <ReservedFilename::ReservedFilename(int)>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	89 1d c4 ab 02 c0    	mov    DWORD PTR ds:0xc002abc4,ebx
c00112ff:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011307:	83 ec 0c             	sub    esp,0xc
c001130a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001130e:	e8 bf e1 ff ff       	call   c000f4d2 <malloc>
c0011313:	83 c4 10             	add    esp,0x10
c0011316:	89 c3                	mov    ebx,eax
c0011318:	83 ec 08             	sub    esp,0x8
c001131b:	68 02 ff ff 0f       	push   0xfffff02
c0011320:	53                   	push   ebx
c0011321:	e8 9c 00 00 00       	call   c00113c2 <ReservedFilename::ReservedFilename(int)>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	89 1d c8 ab 02 c0    	mov    DWORD PTR ds:0xc002abc8,ebx
c001132f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011337:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001133c:	7f 7e                	jg     c00113bc <UnixFile::UnixFile(int)+0x1aa>
c001133e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011346:	83 ec 0c             	sub    esp,0xc
c0011349:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001134d:	e8 80 e1 ff ff       	call   c000f4d2 <malloc>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	89 c3                	mov    ebx,eax
c0011357:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001135b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011360:	83 ec 08             	sub    esp,0x8
c0011363:	50                   	push   eax
c0011364:	53                   	push   ebx
c0011365:	e8 58 00 00 00       	call   c00113c2 <ReservedFilename::ReservedFilename(int)>
c001136a:	83 c4 10             	add    esp,0x10
c001136d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011371:	89 1c 85 a0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5460],ebx
c0011378:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011380:	83 ec 0c             	sub    esp,0xc
c0011383:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011387:	e8 46 e1 ff ff       	call   c000f4d2 <malloc>
c001138c:	83 c4 10             	add    esp,0x10
c001138f:	89 c3                	mov    ebx,eax
c0011391:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011395:	05 20 ff ff 0f       	add    eax,0xfffff20
c001139a:	83 ec 08             	sub    esp,0x8
c001139d:	50                   	push   eax
c001139e:	53                   	push   ebx
c001139f:	e8 1e 00 00 00       	call   c00113c2 <ReservedFilename::ReservedFilename(int)>
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113ab:	89 1c 85 60 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54a0],ebx
c00113b2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113b6:	e9 7c ff ff ff       	jmp    c0011337 <UnixFile::UnixFile(int)+0x125>
c00113bb:	90                   	nop
c00113bc:	83 c4 28             	add    esp,0x28
c00113bf:	5b                   	pop    ebx
c00113c0:	c3                   	ret    
c00113c1:	90                   	nop

c00113c2 <ReservedFilename::ReservedFilename(int)>:
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113c9:	83 ec 08             	sub    esp,0x8
c00113cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113d0:	50                   	push   eax
c00113d1:	e8 3c fe ff ff       	call   c0011212 <UnixFile::UnixFile(int)>
c00113d6:	83 c4 10             	add    esp,0x10
c00113d9:	ba 70 74 02 c0       	mov    edx,0xc0027470
c00113de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e2:	89 10                	mov    DWORD PTR [eax],edx
c00113e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113ef:	90                   	nop
c00113f0:	83 c4 0c             	add    esp,0xc
c00113f3:	c3                   	ret    

c00113f4 <UnixFile::~UnixFile()>:
c00113f4:	83 ec 1c             	sub    esp,0x1c
c00113f7:	ba 54 74 02 c0       	mov    edx,0xc0027454
c00113fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011400:	89 10                	mov    DWORD PTR [eax],edx
c0011402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011406:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011409:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001140e:	7f 73                	jg     c0011483 <UnixFile::~UnixFile()+0x8f>
c0011410:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011418:	83 ec 0c             	sub    esp,0xc
c001141b:	68 d8 ab 02 c0       	push   0xc002abd8
c0011420:	e8 7f 44 01 00       	call   c00258a4 <LinkedList<UnixFile>::getFirstElement()>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001142c:	83 ec 0c             	sub    esp,0xc
c001142f:	68 d8 ab 02 c0       	push   0xc002abd8
c0011434:	e8 73 44 01 00       	call   c00258ac <LinkedList<UnixFile>::removeFirst()>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011440:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011444:	74 40                	je     c0011486 <UnixFile::~UnixFile()+0x92>
c0011446:	83 ec 08             	sub    esp,0x8
c0011449:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001144d:	68 d8 ab 02 c0       	push   0xc002abd8
c0011452:	e8 79 43 01 00       	call   c00257d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011457:	83 c4 10             	add    esp,0x10
c001145a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001145e:	8d 50 01             	lea    edx,[eax+0x1]
c0011461:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011465:	3d 88 13 00 00       	cmp    eax,0x1388
c001146a:	0f 94 c0             	sete   al
c001146d:	84 c0                	test   al,al
c001146f:	74 a7                	je     c0011418 <UnixFile::~UnixFile()+0x24>
c0011471:	83 ec 0c             	sub    esp,0xc
c0011474:	68 2c 74 02 c0       	push   0xc002742c
c0011479:	e8 8b 79 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c001147e:	83 c4 10             	add    esp,0x10
c0011481:	eb 95                	jmp    c0011418 <UnixFile::~UnixFile()+0x24>
c0011483:	90                   	nop
c0011484:	eb 01                	jmp    c0011487 <UnixFile::~UnixFile()+0x93>
c0011486:	90                   	nop
c0011487:	90                   	nop
c0011488:	83 c4 1c             	add    esp,0x1c
c001148b:	c3                   	ret    

c001148c <UnixFile::~UnixFile()>:
c001148c:	83 ec 0c             	sub    esp,0xc
c001148f:	83 ec 0c             	sub    esp,0xc
c0011492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011496:	e8 59 ff ff ff       	call   c00113f4 <UnixFile::~UnixFile()>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	83 ec 08             	sub    esp,0x8
c00114a1:	6a 0c                	push   0xc
c00114a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a7:	e8 b9 10 00 00       	call   c0012565 <operator delete(void*, unsigned long)>
c00114ac:	83 c4 10             	add    esp,0x10
c00114af:	83 c4 0c             	add    esp,0xc
c00114b2:	c3                   	ret    
c00114b3:	90                   	nop

c00114b4 <ReservedFilename::~ReservedFilename()>:
c00114b4:	83 ec 0c             	sub    esp,0xc
c00114b7:	ba 70 74 02 c0       	mov    edx,0xc0027470
c00114bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114c0:	89 10                	mov    DWORD PTR [eax],edx
c00114c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114c6:	83 ec 0c             	sub    esp,0xc
c00114c9:	50                   	push   eax
c00114ca:	e8 25 ff ff ff       	call   c00113f4 <UnixFile::~UnixFile()>
c00114cf:	83 c4 10             	add    esp,0x10
c00114d2:	90                   	nop
c00114d3:	83 c4 0c             	add    esp,0xc
c00114d6:	c3                   	ret    
c00114d7:	90                   	nop

c00114d8 <ReservedFilename::~ReservedFilename()>:
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	83 ec 0c             	sub    esp,0xc
c00114de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114e2:	e8 cd ff ff ff       	call   c00114b4 <ReservedFilename::~ReservedFilename()>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	83 ec 08             	sub    esp,0x8
c00114ed:	6a 0c                	push   0xc
c00114ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f3:	e8 6d 10 00 00       	call   c0012565 <operator delete(void*, unsigned long)>
c00114f8:	83 c4 10             	add    esp,0x10
c00114fb:	83 c4 0c             	add    esp,0xc
c00114fe:	c3                   	ret    

c00114ff <getFromFileDescriptor(int)>:
c00114ff:	53                   	push   ebx
c0011500:	83 ec 08             	sub    esp,0x8
c0011503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011507:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001150d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011513:	7f 2c                	jg     c0011541 <getFromFileDescriptor(int)+0x42>
c0011515:	83 ec 0c             	sub    esp,0xc
c0011518:	68 d8 ab 02 c0       	push   0xc002abd8
c001151d:	e8 82 43 01 00       	call   c00258a4 <LinkedList<UnixFile>::getFirstElement()>
c0011522:	83 c4 10             	add    esp,0x10
c0011525:	85 c0                	test   eax,eax
c0011527:	75 04                	jne    c001152d <getFromFileDescriptor(int)+0x2e>
c0011529:	31 c0                	xor    eax,eax
c001152b:	eb 6e                	jmp    c001159b <getFromFileDescriptor(int)+0x9c>
c001152d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011530:	74 69                	je     c001159b <getFromFileDescriptor(int)+0x9c>
c0011532:	52                   	push   edx
c0011533:	52                   	push   edx
c0011534:	50                   	push   eax
c0011535:	68 d8 ab 02 c0       	push   0xc002abd8
c001153a:	e8 0f 44 01 00       	call   c002594e <LinkedList<UnixFile>::getNext(UnixFile*)>
c001153f:	eb e1                	jmp    c0011522 <getFromFileDescriptor(int)+0x23>
c0011541:	a1 cc ab 02 c0       	mov    eax,ds:0xc002abcc
c0011546:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001154c:	74 4d                	je     c001159b <getFromFileDescriptor(int)+0x9c>
c001154e:	a1 d0 ab 02 c0       	mov    eax,ds:0xc002abd0
c0011553:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011559:	74 40                	je     c001159b <getFromFileDescriptor(int)+0x9c>
c001155b:	a1 c8 ab 02 c0       	mov    eax,ds:0xc002abc8
c0011560:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011566:	74 33                	je     c001159b <getFromFileDescriptor(int)+0x9c>
c0011568:	a1 c4 ab 02 c0       	mov    eax,ds:0xc002abc4
c001156d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011573:	74 26                	je     c001159b <getFromFileDescriptor(int)+0x9c>
c0011575:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001157b:	83 f8 08             	cmp    eax,0x8
c001157e:	77 09                	ja     c0011589 <getFromFileDescriptor(int)+0x8a>
c0011580:	8b 04 85 a0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5460]
c0011587:	eb 12                	jmp    c001159b <getFromFileDescriptor(int)+0x9c>
c0011589:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001158f:	83 fb 08             	cmp    ebx,0x8
c0011592:	77 95                	ja     c0011529 <getFromFileDescriptor(int)+0x2a>
c0011594:	8b 04 9d 60 ab 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd54a0]
c001159b:	83 c4 08             	add    esp,0x8
c001159e:	5b                   	pop    ebx
c001159f:	c3                   	ret    

c00115a0 <__static_initialization_and_destruction_0(int, int)>:
c00115a0:	83 ec 0c             	sub    esp,0xc
c00115a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00115a8:	75 34                	jne    c00115de <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115b2:	75 2a                	jne    c00115de <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115b4:	83 ec 0c             	sub    esp,0xc
c00115b7:	68 d8 ab 02 c0       	push   0xc002abd8
c00115bc:	e8 b7 41 01 00       	call   c0025778 <LinkedList<UnixFile>::LinkedList()>
c00115c1:	83 c4 10             	add    esp,0x10
c00115c4:	83 ec 04             	sub    esp,0x4
c00115c7:	68 34 9a 02 c0       	push   0xc0029a34
c00115cc:	68 d8 ab 02 c0       	push   0xc002abd8
c00115d1:	68 76 57 02 c0       	push   0xc0025776
c00115d6:	e8 04 0f 00 00       	call   c00124df <__cxa_atexit>
c00115db:	83 c4 10             	add    esp,0x10
c00115de:	90                   	nop
c00115df:	83 c4 0c             	add    esp,0xc
c00115e2:	c3                   	ret    

c00115e3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00115e3:	83 ec 0c             	sub    esp,0xc
c00115e6:	83 ec 08             	sub    esp,0x8
c00115e9:	68 ff ff 00 00       	push   0xffff
c00115ee:	6a 01                	push   0x1
c00115f0:	e8 ab ff ff ff       	call   c00115a0 <__static_initialization_and_destruction_0(int, int)>
c00115f5:	83 c4 10             	add    esp,0x10
c00115f8:	83 c4 0c             	add    esp,0xc
c00115fb:	c3                   	ret    

c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00115fc:	53                   	push   ebx
c00115fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011601:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011605:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001160b:	89 c8                	mov    eax,ecx
c001160d:	d1 e8                	shr    eax,1
c001160f:	03 05 a8 9a 02 c0    	add    eax,DWORD PTR ds:0xc0029aa8
c0011615:	83 e1 01             	and    ecx,0x1
c0011618:	8a 10                	mov    dl,BYTE PTR [eax]
c001161a:	75 09                	jne    c0011625 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001161c:	83 e2 f0             	and    edx,0xfffffff0
c001161f:	09 da                	or     edx,ebx
c0011621:	88 10                	mov    BYTE PTR [eax],dl
c0011623:	5b                   	pop    ebx
c0011624:	c3                   	ret    
c0011625:	c1 e3 04             	shl    ebx,0x4
c0011628:	83 e2 0f             	and    edx,0xf
c001162b:	09 da                	or     edx,ebx
c001162d:	88 10                	mov    BYTE PTR [eax],dl
c001162f:	5b                   	pop    ebx
c0011630:	c3                   	ret    

c0011631 <Virt::getPageState(unsigned long)>:
c0011631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011635:	8b 0d a8 9a 02 c0    	mov    ecx,DWORD PTR ds:0xc0029aa8
c001163b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011641:	89 d0                	mov    eax,edx
c0011643:	d1 e8                	shr    eax,1
c0011645:	83 e2 01             	and    edx,0x1
c0011648:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001164b:	75 04                	jne    c0011651 <Virt::getPageState(unsigned long)+0x20>
c001164d:	83 e0 0f             	and    eax,0xf
c0011650:	c3                   	ret    
c0011651:	c0 e8 04             	shr    al,0x4
c0011654:	c3                   	ret    

c0011655 <Virt::allocateKernelVirtualPages(int)>:
c0011655:	55                   	push   ebp
c0011656:	31 ed                	xor    ebp,ebp
c0011658:	57                   	push   edi
c0011659:	56                   	push   esi
c001165a:	53                   	push   ebx
c001165b:	31 db                	xor    ebx,ebx
c001165d:	83 ec 1c             	sub    esp,0x1c
c0011660:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011664:	8b 3d a4 9a 02 c0    	mov    edi,DWORD PTR ds:0xc0029aa4
c001166a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001166f:	57                   	push   edi
c0011670:	e8 bc ff ff ff       	call   c0011631 <Virt::getPageState(unsigned long)>
c0011675:	5a                   	pop    edx
c0011676:	84 c0                	test   al,al
c0011678:	75 3a                	jne    c00116b4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001167a:	85 db                	test   ebx,ebx
c001167c:	75 02                	jne    c0011680 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001167e:	89 fd                	mov    ebp,edi
c0011680:	43                   	inc    ebx
c0011681:	39 f3                	cmp    ebx,esi
c0011683:	74 5a                	je     c00116df <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011685:	47                   	inc    edi
c0011686:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001168c:	76 31                	jbe    c00116bf <Virt::allocateKernelVirtualPages(int)+0x6a>
c001168e:	c7 05 a4 9a 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029aa4,0xc8000
c0011698:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001169d:	75 28                	jne    c00116c7 <Virt::allocateKernelVirtualPages(int)+0x72>
c001169f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00116a4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00116a9:	57                   	push   edi
c00116aa:	e8 82 ff ff ff       	call   c0011631 <Virt::getPageState(unsigned long)>
c00116af:	5a                   	pop    edx
c00116b0:	84 c0                	test   al,al
c00116b2:	74 c6                	je     c001167a <Virt::allocateKernelVirtualPages(int)+0x25>
c00116b4:	31 db                	xor    ebx,ebx
c00116b6:	47                   	inc    edi
c00116b7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116bd:	77 cf                	ja     c001168e <Virt::allocateKernelVirtualPages(int)+0x39>
c00116bf:	89 3d a4 9a 02 c0    	mov    DWORD PTR ds:0xc0029aa4,edi
c00116c5:	eb a8                	jmp    c001166f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116c7:	83 ec 0c             	sub    esp,0xc
c00116ca:	68 84 74 02 c0       	push   0xc0027484
c00116cf:	e8 35 77 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c00116d4:	8b 3d a4 9a 02 c0    	mov    edi,DWORD PTR ds:0xc0029aa4
c00116da:	83 c4 10             	add    esp,0x10
c00116dd:	eb 90                	jmp    c001166f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00116df:	89 2d a4 9a 02 c0    	mov    DWORD PTR ds:0xc0029aa4,ebp
c00116e5:	4b                   	dec    ebx
c00116e6:	74 5f                	je     c0011747 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00116e8:	85 f6                	test   esi,esi
c00116ea:	74 3d                	je     c0011729 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00116ec:	89 e8                	mov    eax,ebp
c00116ee:	31 db                	xor    ebx,ebx
c00116f0:	8d 7e ff             	lea    edi,[esi-0x1]
c00116f3:	eb 14                	jmp    c0011709 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00116f5:	6a 01                	push   0x1
c00116f7:	43                   	inc    ebx
c00116f8:	50                   	push   eax
c00116f9:	e8 fe fe ff ff       	call   c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116fe:	58                   	pop    eax
c00116ff:	39 f3                	cmp    ebx,esi
c0011701:	5a                   	pop    edx
c0011702:	74 25                	je     c0011729 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011704:	a1 a4 9a 02 c0       	mov    eax,ds:0xc0029aa4
c0011709:	8d 50 01             	lea    edx,[eax+0x1]
c001170c:	85 db                	test   ebx,ebx
c001170e:	89 15 a4 9a 02 c0    	mov    DWORD PTR ds:0xc0029aa4,edx
c0011714:	74 20                	je     c0011736 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011716:	39 df                	cmp    edi,ebx
c0011718:	75 db                	jne    c00116f5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001171a:	6a 03                	push   0x3
c001171c:	43                   	inc    ebx
c001171d:	50                   	push   eax
c001171e:	e8 d9 fe ff ff       	call   c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011723:	59                   	pop    ecx
c0011724:	39 f3                	cmp    ebx,esi
c0011726:	58                   	pop    eax
c0011727:	75 db                	jne    c0011704 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011729:	83 c4 1c             	add    esp,0x1c
c001172c:	89 e8                	mov    eax,ebp
c001172e:	5b                   	pop    ebx
c001172f:	c1 e0 0c             	shl    eax,0xc
c0011732:	5e                   	pop    esi
c0011733:	5f                   	pop    edi
c0011734:	5d                   	pop    ebp
c0011735:	c3                   	ret    
c0011736:	6a 02                	push   0x2
c0011738:	bb 01 00 00 00       	mov    ebx,0x1
c001173d:	50                   	push   eax
c001173e:	e8 b9 fe ff ff       	call   c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011743:	58                   	pop    eax
c0011744:	5a                   	pop    edx
c0011745:	eb bd                	jmp    c0011704 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011747:	6a 04                	push   0x4
c0011749:	8d 45 01             	lea    eax,[ebp+0x1]
c001174c:	55                   	push   ebp
c001174d:	a3 a4 9a 02 c0       	mov    ds:0xc0029aa4,eax
c0011752:	e8 a5 fe ff ff       	call   c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011757:	59                   	pop    ecx
c0011758:	89 e8                	mov    eax,ebp
c001175a:	5b                   	pop    ebx
c001175b:	c1 e0 0c             	shl    eax,0xc
c001175e:	83 c4 1c             	add    esp,0x1c
c0011761:	5b                   	pop    ebx
c0011762:	5e                   	pop    esi
c0011763:	5f                   	pop    edi
c0011764:	5d                   	pop    ebp
c0011765:	c3                   	ret    

c0011766 <Virt::virtualMemorySetup()>:
c0011766:	53                   	push   ebx
c0011767:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001176c:	83 ec 08             	sub    esp,0x8
c001176f:	6a 0f                	push   0xf
c0011771:	53                   	push   ebx
c0011772:	43                   	inc    ebx
c0011773:	e8 84 fe ff ff       	call   c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011778:	59                   	pop    ecx
c0011779:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001177f:	58                   	pop    eax
c0011780:	75 ed                	jne    c001176f <Virt::virtualMemorySetup()+0x9>
c0011782:	83 ec 08             	sub    esp,0x8
c0011785:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001178a:	68 00 00 00 c8       	push   0xc8000000
c001178f:	68 0b 76 02 c0       	push   0xc002760b
c0011794:	e8 ac 0e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0011799:	58                   	pop    eax
c001179a:	5a                   	pop    edx
c001179b:	68 00 f0 ff ef       	push   0xeffff000
c00117a0:	68 1f 76 02 c0       	push   0xc002761f
c00117a5:	e8 9b 0e 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00117aa:	83 c4 10             	add    esp,0x10
c00117ad:	83 ec 08             	sub    esp,0x8
c00117b0:	6a 00                	push   0x0
c00117b2:	53                   	push   ebx
c00117b3:	43                   	inc    ebx
c00117b4:	e8 43 fe ff ff       	call   c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117c2:	75 e9                	jne    c00117ad <Virt::virtualMemorySetup()+0x47>
c00117c4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00117c9:	83 ec 08             	sub    esp,0x8
c00117cc:	6a 0f                	push   0xf
c00117ce:	53                   	push   ebx
c00117cf:	43                   	inc    ebx
c00117d0:	e8 27 fe ff ff       	call   c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00117de:	75 e9                	jne    c00117c9 <Virt::virtualMemorySetup()+0x63>
c00117e0:	83 c4 08             	add    esp,0x8
c00117e3:	5b                   	pop    ebx
c00117e4:	c3                   	ret    

c00117e5 <Virt::getAKernelVAS()>:
c00117e5:	a1 e4 ab 02 c0       	mov    eax,ds:0xc002abe4
c00117ea:	c3                   	ret    

c00117eb <Virt::setupPageSwapping(int)>:
c00117eb:	57                   	push   edi
c00117ec:	56                   	push   esi
c00117ed:	53                   	push   ebx
c00117ee:	83 ec 1c             	sub    esp,0x1c
c00117f1:	68 14 01 00 00       	push   0x114
c00117f6:	e8 d7 dc ff ff       	call   c000f4d2 <malloc>
c00117fb:	83 c4 0c             	add    esp,0xc
c00117fe:	89 c6                	mov    esi,eax
c0011800:	ff 35 94 bf 02 c0    	push   DWORD PTR ds:0xc002bf94
c0011806:	68 33 76 02 c0       	push   0xc0027633
c001180b:	50                   	push   eax
c001180c:	e8 63 13 00 00       	call   c0012b74 <File::File(char const*, Process*)>
c0011811:	89 34 24             	mov    DWORD PTR [esp],esi
c0011814:	e8 37 15 00 00       	call   c0012d50 <File::unlink()>
c0011819:	58                   	pop    eax
c001181a:	5a                   	pop    edx
c001181b:	6a 12                	push   0x12
c001181d:	56                   	push   esi
c001181e:	e8 b5 13 00 00       	call   c0012bd8 <File::open(FileOpenMode)>
c0011823:	83 c4 10             	add    esp,0x10
c0011826:	85 c0                	test   eax,eax
c0011828:	0f 85 ca 00 00 00    	jne    c00118f8 <Virt::setupPageSwapping(int)+0x10d>
c001182e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011832:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001183a:	c1 e3 08             	shl    ebx,0x8
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	68 00 00 01 00       	push   0x10000
c0011845:	e8 88 dc ff ff       	call   c000f4d2 <malloc>
c001184a:	83 c4 0c             	add    esp,0xc
c001184d:	89 c7                	mov    edi,eax
c001184f:	68 00 00 01 00       	push   0x10000
c0011854:	6a 00                	push   0x0
c0011856:	50                   	push   eax
c0011857:	e8 21 ee fe ff       	call   c000067d <memset>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	85 db                	test   ebx,ebx
c0011861:	79 03                	jns    c0011866 <Virt::setupPageSwapping(int)+0x7b>
c0011863:	83 c3 0f             	add    ebx,0xf
c0011866:	c1 fb 04             	sar    ebx,0x4
c0011869:	4b                   	dec    ebx
c001186a:	83 fb ff             	cmp    ebx,0xffffffff
c001186d:	74 4b                	je     c00118ba <Virt::setupPageSwapping(int)+0xcf>
c001186f:	83 ec 0c             	sub    esp,0xc
c0011872:	8b 06                	mov    eax,DWORD PTR [esi]
c0011874:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011878:	52                   	push   edx
c0011879:	57                   	push   edi
c001187a:	6a 00                	push   0x0
c001187c:	68 00 00 01 00       	push   0x10000
c0011881:	56                   	push   esi
c0011882:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011885:	83 c4 20             	add    esp,0x20
c0011888:	85 c0                	test   eax,eax
c001188a:	75 59                	jne    c00118e5 <Virt::setupPageSwapping(int)+0xfa>
c001188c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011890:	3d 00 00 01 00       	cmp    eax,0x10000
c0011895:	74 d2                	je     c0011869 <Virt::setupPageSwapping(int)+0x7e>
c0011897:	83 ec 08             	sub    esp,0x8
c001189a:	4b                   	dec    ebx
c001189b:	50                   	push   eax
c001189c:	68 86 76 02 c0       	push   0xc0027686
c00118a1:	e8 9f 0d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00118a6:	c7 04 24 8f 76 02 c0 	mov    DWORD PTR [esp],0xc002768f
c00118ad:	e8 57 75 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	83 fb ff             	cmp    ebx,0xffffffff
c00118b8:	75 b5                	jne    c001186f <Virt::setupPageSwapping(int)+0x84>
c00118ba:	83 ec 0c             	sub    esp,0xc
c00118bd:	56                   	push   esi
c00118be:	e8 73 13 00 00       	call   c0012c36 <File::close()>
c00118c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118c6:	e8 27 dc ff ff       	call   c000f4f2 <rfree>
c00118cb:	83 c4 10             	add    esp,0x10
c00118ce:	85 f6                	test   esi,esi
c00118d0:	74 0c                	je     c00118de <Virt::setupPageSwapping(int)+0xf3>
c00118d2:	83 ec 0c             	sub    esp,0xc
c00118d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00118d7:	56                   	push   esi
c00118d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118db:	83 c4 10             	add    esp,0x10
c00118de:	83 c4 10             	add    esp,0x10
c00118e1:	5b                   	pop    ebx
c00118e2:	5e                   	pop    esi
c00118e3:	5f                   	pop    edi
c00118e4:	c3                   	ret    
c00118e5:	83 ec 08             	sub    esp,0x8
c00118e8:	50                   	push   eax
c00118e9:	68 6e 76 02 c0       	push   0xc002766e
c00118ee:	e8 52 0d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	eb 94                	jmp    c001188c <Virt::setupPageSwapping(int)+0xa1>
c00118f8:	83 ec 08             	sub    esp,0x8
c00118fb:	50                   	push   eax
c00118fc:	68 4a 76 02 c0       	push   0xc002764a
c0011901:	e8 3f 0d 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0011906:	c7 04 24 53 76 02 c0 	mov    DWORD PTR [esp],0xc0027653
c001190d:	e8 f7 74 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0011912:	83 c4 10             	add    esp,0x10
c0011915:	e9 14 ff ff ff       	jmp    c001182e <Virt::setupPageSwapping(int)+0x43>

c001191a <VAS::VAS()>:
c001191a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001191e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011925:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011929:	a3 e4 ab 02 c0       	mov    ds:0xc002abe4,eax
c001192e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011932:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001193d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011941:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011948:	90                   	nop
c0011949:	c3                   	ret    

c001194a <VAS::VAS(VAS*)>:
c001194a:	83 ec 0c             	sub    esp,0xc
c001194d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011951:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011958:	83 ec 0c             	sub    esp,0xc
c001195b:	68 a4 74 02 c0       	push   0xc00274a4
c0011960:	e8 a4 74 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	90                   	nop
c0011969:	83 c4 0c             	add    esp,0xc
c001196c:	c3                   	ret    
c001196d:	90                   	nop

c001196e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001196e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011972:	89 c2                	mov    edx,eax
c0011974:	c1 e8 0a             	shr    eax,0xa
c0011977:	c1 ea 16             	shr    edx,0x16
c001197a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001197f:	19 c9                	sbb    ecx,ecx
c0011981:	c1 e2 0c             	shl    edx,0xc
c0011984:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001198a:	25 fc 0f 00 00       	and    eax,0xffc
c001198f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011996:	01 d0                	add    eax,edx
c0011998:	c3                   	ret    
c0011999:	90                   	nop

c001199a <VAS::getPageTableEntry(unsigned long)>:
c001199a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001199e:	89 ca                	mov    edx,ecx
c00119a0:	c1 e9 0a             	shr    ecx,0xa
c00119a3:	c1 ea 16             	shr    edx,0x16
c00119a6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00119ac:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119b2:	c1 e0 0c             	shl    eax,0xc
c00119b5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00119b8:	c3                   	ret    

c00119b9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00119b9:	57                   	push   edi
c00119ba:	56                   	push   esi
c00119bb:	be 01 00 00 00       	mov    esi,0x1
c00119c0:	53                   	push   ebx
c00119c1:	83 ec 10             	sub    esp,0x10
c00119c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119c8:	c1 eb 0c             	shr    ebx,0xc
c00119cb:	eb 3f                	jmp    c0011a0c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00119cd:	e8 13 fe ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c00119d2:	83 ec 08             	sub    esp,0x8
c00119d5:	57                   	push   edi
c00119d6:	50                   	push   eax
c00119d7:	e8 be ff ff ff       	call   c001199a <VAS::getPageTableEntry(unsigned long)>
c00119dc:	83 c4 10             	add    esp,0x10
c00119df:	8b 00                	mov    eax,DWORD PTR [eax]
c00119e1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119e5:	f6 c4 04             	test   ah,0x4
c00119e8:	75 5f                	jne    c0011a49 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119ea:	80 fa 04             	cmp    dl,0x4
c00119ed:	74 78                	je     c0011a67 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119ef:	80 fa 02             	cmp    dl,0x2
c00119f2:	0f 84 88 00 00 00    	je     c0011a80 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119f8:	80 fa 03             	cmp    dl,0x3
c00119fb:	0f 84 ad 00 00 00    	je     c0011aae <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011a01:	fe ca                	dec    dl
c0011a03:	0f 84 92 00 00 00    	je     c0011a9b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a09:	43                   	inc    ebx
c0011a0a:	31 f6                	xor    esi,esi
c0011a0c:	53                   	push   ebx
c0011a0d:	e8 1f fc ff ff       	call   c0011631 <Virt::getPageState(unsigned long)>
c0011a12:	5f                   	pop    edi
c0011a13:	89 df                	mov    edi,ebx
c0011a15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a19:	c1 e7 0c             	shl    edi,0xc
c0011a1c:	84 c0                	test   al,al
c0011a1e:	75 ad                	jne    c00119cd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a20:	83 ec 0c             	sub    esp,0xc
c0011a23:	68 95 76 02 c0       	push   0xc0027695
c0011a28:	e8 dc 73 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0011a2d:	e8 b3 fd ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c0011a32:	5a                   	pop    edx
c0011a33:	59                   	pop    ecx
c0011a34:	57                   	push   edi
c0011a35:	50                   	push   eax
c0011a36:	e8 5f ff ff ff       	call   c001199a <VAS::getPageTableEntry(unsigned long)>
c0011a3b:	83 c4 10             	add    esp,0x10
c0011a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a40:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a44:	f6 c4 04             	test   ah,0x4
c0011a47:	74 c0                	je     c0011a09 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a49:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a52:	83 ec 0c             	sub    esp,0xc
c0011a55:	50                   	push   eax
c0011a56:	e8 97 df ff ff       	call   c000f9f2 <Phys::freePage(unsigned long)>
c0011a5b:	83 c4 10             	add    esp,0x10
c0011a5e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a62:	80 fa 04             	cmp    dl,0x4
c0011a65:	75 88                	jne    c00119ef <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a67:	89 f0                	mov    eax,esi
c0011a69:	84 c0                	test   al,al
c0011a6b:	75 47                	jne    c0011ab4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a6d:	c7 44 24 20 c8 74 02 c0 	mov    DWORD PTR [esp+0x20],0xc00274c8
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	5b                   	pop    ebx
c0011a79:	5e                   	pop    esi
c0011a7a:	5f                   	pop    edi
c0011a7b:	e9 89 73 00 00       	jmp    c0018e09 <Krnl::panic(char const*)>
c0011a80:	89 f0                	mov    eax,esi
c0011a82:	84 c0                	test   al,al
c0011a84:	75 15                	jne    c0011a9b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a86:	83 ec 0c             	sub    esp,0xc
c0011a89:	68 b1 76 02 c0       	push   0xc00276b1
c0011a8e:	e8 76 73 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	e9 6e ff ff ff       	jmp    c0011a09 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a9b:	83 ec 08             	sub    esp,0x8
c0011a9e:	6a 00                	push   0x0
c0011aa0:	53                   	push   ebx
c0011aa1:	e8 56 fb ff ff       	call   c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aa6:	83 c4 10             	add    esp,0x10
c0011aa9:	e9 5b ff ff ff       	jmp    c0011a09 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011aae:	89 f0                	mov    eax,esi
c0011ab0:	84 c0                	test   al,al
c0011ab2:	75 15                	jne    c0011ac9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011ab4:	83 ec 08             	sub    esp,0x8
c0011ab7:	6a 00                	push   0x0
c0011ab9:	53                   	push   ebx
c0011aba:	e8 3d fb ff ff       	call   c00115fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011abf:	83 c4 10             	add    esp,0x10
c0011ac2:	83 c4 10             	add    esp,0x10
c0011ac5:	5b                   	pop    ebx
c0011ac6:	5e                   	pop    esi
c0011ac7:	5f                   	pop    edi
c0011ac8:	c3                   	ret    
c0011ac9:	c7 44 24 20 cd 76 02 c0 	mov    DWORD PTR [esp+0x20],0xc00276cd
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	5b                   	pop    ebx
c0011ad5:	5e                   	pop    esi
c0011ad6:	5f                   	pop    edi
c0011ad7:	e9 2d 73 00 00       	jmp    c0018e09 <Krnl::panic(char const*)>

c0011adc <VAS::freeAllocatedPages(unsigned long)>:
c0011adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ae0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ae4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ae8:	74 09                	je     c0011af3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011aea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011aee:	e9 c6 fe ff ff       	jmp    c00119b9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011af3:	c7 44 24 04 ec 74 02 c0 	mov    DWORD PTR [esp+0x4],0xc00274ec
c0011afb:	e9 45 0b 00 00       	jmp    c0012645 <Dbg::kprintf(char const*, ...)>

c0011b00 <VAS::virtualToPhysical(unsigned long)>:
c0011b00:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b04:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b08:	e8 8d fe ff ff       	call   c001199a <VAS::getPageTableEntry(unsigned long)>
c0011b0d:	5a                   	pop    edx
c0011b0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b10:	59                   	pop    ecx
c0011b11:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b16:	c3                   	ret    
c0011b17:	90                   	nop

c0011b18 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b18:	55                   	push   ebp
c0011b19:	57                   	push   edi
c0011b1a:	56                   	push   esi
c0011b1b:	53                   	push   ebx
c0011b1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b20:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b24:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b28:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b2c:	85 db                	test   ebx,ebx
c0011b2e:	7e 22                	jle    c0011b52 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b30:	c1 e3 0c             	shl    ebx,0xc
c0011b33:	01 f3                	add    ebx,esi
c0011b35:	56                   	push   esi
c0011b36:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b3c:	55                   	push   ebp
c0011b3d:	e8 58 fe ff ff       	call   c001199a <VAS::getPageTableEntry(unsigned long)>
c0011b42:	5a                   	pop    edx
c0011b43:	59                   	pop    ecx
c0011b44:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b46:	21 f9                	and    ecx,edi
c0011b48:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b4c:	39 f3                	cmp    ebx,esi
c0011b4e:	89 08                	mov    DWORD PTR [eax],ecx
c0011b50:	75 e3                	jne    c0011b35 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b52:	5b                   	pop    ebx
c0011b53:	5e                   	pop    esi
c0011b54:	5f                   	pop    edi
c0011b55:	5d                   	pop    ebp
c0011b56:	c3                   	ret    
c0011b57:	90                   	nop

c0011b58 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b58:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0011b5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b63:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b6a:	75 01                	jne    c0011b6d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b6c:	c3                   	ret    
c0011b6d:	68 80 00 00 00       	push   0x80
c0011b72:	6a ff                	push   0xffffffff
c0011b74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b80:	e8 93 ff ff ff       	call   c0011b18 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b85:	83 c4 14             	add    esp,0x14
c0011b88:	c3                   	ret    
c0011b89:	90                   	nop

c0011b8a <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b8a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b93:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011b96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b9a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011b9d:	19 c0                	sbb    eax,eax
c0011b9f:	83 ca 03             	or     edx,0x3
c0011ba2:	83 e0 fc             	and    eax,0xfffffffc
c0011ba5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011bac:	0f 20 d8             	mov    eax,cr3
c0011baf:	0f 22 d8             	mov    cr3,eax
c0011bb2:	c3                   	ret    
c0011bb3:	90                   	nop

c0011bb4 <VAS::~VAS()>:
c0011bb4:	83 ec 2c             	sub    esp,0x2c
c0011bb7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011bbf:	e8 51 a2 00 00       	call   c001be15 <lockScheduler()>
c0011bc4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bcb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bce:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bd4:	83 ec 04             	sub    esp,0x4
c0011bd7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011bdb:	6a 01                	push   0x1
c0011bdd:	50                   	push   eax
c0011bde:	e8 a7 ff ff ff       	call   c0011b8a <VAS::mapOtherVASIn(bool, VAS*)>
c0011be3:	83 c4 10             	add    esp,0x10
c0011be6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bee:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011bf6:	0f 8f d7 00 00 00    	jg     c0011cd3 <VAS::~VAS()+0x11f>
c0011bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011c03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c07:	c1 e2 02             	shl    edx,0x2
c0011c0a:	01 d0                	add    eax,edx
c0011c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c16:	83 e0 01             	and    eax,0x1
c0011c19:	0f 84 ab 00 00 00    	je     c0011cca <VAS::~VAS()+0x116>
c0011c1f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c27:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c2f:	7f 75                	jg     c0011ca6 <VAS::~VAS()+0xf2>
c0011c31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c35:	c1 e0 0a             	shl    eax,0xa
c0011c38:	89 c2                	mov    edx,eax
c0011c3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c3e:	01 d0                	add    eax,edx
c0011c40:	c1 e0 0c             	shl    eax,0xc
c0011c43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c47:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c51:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c57:	83 ec 04             	sub    esp,0x4
c0011c5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c5e:	6a 01                	push   0x1
c0011c60:	50                   	push   eax
c0011c61:	e8 08 fd ff ff       	call   c001196e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c66:	83 c4 10             	add    esp,0x10
c0011c69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7b:	25 01 04 00 00       	and    eax,0x401
c0011c80:	3d 01 04 00 00       	cmp    eax,0x401
c0011c85:	75 19                	jne    c0011ca0 <VAS::~VAS()+0xec>
c0011c87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c90:	83 ec 0c             	sub    esp,0xc
c0011c93:	50                   	push   eax
c0011c94:	e8 59 dd ff ff       	call   c000f9f2 <Phys::freePage(unsigned long)>
c0011c99:	83 c4 10             	add    esp,0x10
c0011c9c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ca0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011ca4:	eb 81                	jmp    c0011c27 <VAS::~VAS()+0x73>
c0011ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011caa:	25 00 04 00 00       	and    eax,0x400
c0011caf:	74 19                	je     c0011cca <VAS::~VAS()+0x116>
c0011cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cb5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cba:	83 ec 0c             	sub    esp,0xc
c0011cbd:	50                   	push   eax
c0011cbe:	e8 2f dd ff ff       	call   c000f9f2 <Phys::freePage(unsigned long)>
c0011cc3:	83 c4 10             	add    esp,0x10
c0011cc6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cca:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011cce:	e9 1b ff ff ff       	jmp    c0011bee <VAS::~VAS()+0x3a>
c0011cd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011cda:	83 ec 0c             	sub    esp,0xc
c0011cdd:	50                   	push   eax
c0011cde:	e8 d6 fc ff ff       	call   c00119b9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ce3:	83 c4 10             	add    esp,0x10
c0011ce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ced:	83 ec 0c             	sub    esp,0xc
c0011cf0:	50                   	push   eax
c0011cf1:	e8 fc dc ff ff       	call   c000f9f2 <Phys::freePage(unsigned long)>
c0011cf6:	83 c4 10             	add    esp,0x10
c0011cf9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d01:	c1 e0 02             	shl    eax,0x2
c0011d04:	83 ec 08             	sub    esp,0x8
c0011d07:	50                   	push   eax
c0011d08:	68 10 75 02 c0       	push   0xc0027510
c0011d0d:	e8 33 09 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0011d12:	83 c4 10             	add    esp,0x10
c0011d15:	e8 fd a0 00 00       	call   c001be17 <unlockScheduler()>
c0011d1a:	90                   	nop
c0011d1b:	83 c4 2c             	add    esp,0x2c
c0011d1e:	c3                   	ret    
c0011d1f:	90                   	nop

c0011d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d20:	55                   	push   ebp
c0011d21:	57                   	push   edi
c0011d22:	56                   	push   esi
c0011d23:	53                   	push   ebx
c0011d24:	83 ec 1c             	sub    esp,0x1c
c0011d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d35:	77 08                	ja     c0011d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d37:	0f 20 d8             	mov    eax,cr3
c0011d3a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d3d:	75 47                	jne    c0011d86 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d43:	09 d8                	or     eax,ebx
c0011d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d4a:	75 57                	jne    c0011da3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d4c:	89 de                	mov    esi,ebx
c0011d4e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d51:	c1 ee 16             	shr    esi,0x16
c0011d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d5f:	74 54                	je     c0011db5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d65:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d6b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d6f:	c1 e6 0c             	shl    esi,0xc
c0011d72:	c1 eb 0a             	shr    ebx,0xa
c0011d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d7b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d7e:	83 c4 1c             	add    esp,0x1c
c0011d81:	5b                   	pop    ebx
c0011d82:	5e                   	pop    esi
c0011d83:	5f                   	pop    edi
c0011d84:	5d                   	pop    ebp
c0011d85:	c3                   	ret    
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	68 30 75 02 c0       	push   0xc0027530
c0011d8e:	e8 b2 08 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d9a:	09 d8                	or     eax,ebx
c0011d9c:	a9 ff 0f 00 00       	test   eax,0xfff
c0011da1:	74 a9                	je     c0011d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011da3:	83 ec 0c             	sub    esp,0xc
c0011da6:	68 98 75 02 c0       	push   0xc0027598
c0011dab:	e8 59 70 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0011db0:	83 c4 10             	add    esp,0x10
c0011db3:	eb 97                	jmp    c0011d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011db5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011db9:	e8 be dc ff ff       	call   c000fa7c <Phys::allocatePage()>
c0011dbe:	89 c5                	mov    ebp,eax
c0011dc0:	e8 20 fa ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c0011dc5:	83 ec 0c             	sub    esp,0xc
c0011dc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dcc:	6a 01                	push   0x1
c0011dce:	e8 82 f8 ff ff       	call   c0011655 <Virt::allocateKernelVirtualPages(int)>
c0011dd3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dda:	6a 01                	push   0x1
c0011ddc:	50                   	push   eax
c0011ddd:	55                   	push   ebp
c0011dde:	81 cd 07 04 00 00    	or     ebp,0x407
c0011de4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011de8:	51                   	push   ecx
c0011de9:	e8 26 02 00 00       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dee:	83 c4 1c             	add    esp,0x1c
c0011df1:	68 00 10 00 00       	push   0x1000
c0011df6:	6a 00                	push   0x0
c0011df8:	50                   	push   eax
c0011df9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dfd:	e8 7b e8 fe ff       	call   c000067d <memset>
c0011e02:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e06:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e09:	e8 ab fb ff ff       	call   c00119b9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e12:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e15:	83 c4 10             	add    esp,0x10
c0011e18:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e1b:	e9 41 ff ff ff       	jmp    c0011d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011e20 <VAS::allocatePages(int, int)>:
c0011e20:	55                   	push   ebp
c0011e21:	57                   	push   edi
c0011e22:	56                   	push   esi
c0011e23:	53                   	push   ebx
c0011e24:	83 ec 1c             	sub    esp,0x1c
c0011e27:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e2b:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0011e30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e36:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e3c:	83 e0 01             	and    eax,0x1
c0011e3f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e43:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e47:	0f 85 cc 00 00 00    	jne    c0011f19 <VAS::allocatePages(int, int)+0xf9>
c0011e4d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e54:	85 c0                	test   eax,eax
c0011e56:	0f 84 a1 00 00 00    	je     c0011efd <VAS::allocatePages(int, int)+0xdd>
c0011e5c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e64:	c1 e6 0c             	shl    esi,0xc
c0011e67:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e6b:	85 c0                	test   eax,eax
c0011e6d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e70:	7e 33                	jle    c0011ea5 <VAS::allocatePages(int, int)+0x85>
c0011e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e76:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e7a:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e80:	e8 f7 db ff ff       	call   c000fa7c <Phys::allocatePage()>
c0011e85:	55                   	push   ebp
c0011e86:	53                   	push   ebx
c0011e87:	50                   	push   eax
c0011e88:	57                   	push   edi
c0011e89:	e8 92 fe ff ff       	call   c0011d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e8e:	83 c4 10             	add    esp,0x10
c0011e91:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e96:	74 03                	je     c0011e9b <VAS::allocatePages(int, int)+0x7b>
c0011e98:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e9b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ea1:	39 de                	cmp    esi,ebx
c0011ea3:	75 db                	jne    c0011e80 <VAS::allocatePages(int, int)+0x60>
c0011ea5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011eaa:	75 12                	jne    c0011ebe <VAS::allocatePages(int, int)+0x9e>
c0011eac:	0f 20 d8             	mov    eax,cr3
c0011eaf:	0f 22 d8             	mov    cr3,eax
c0011eb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb6:	83 c4 1c             	add    esp,0x1c
c0011eb9:	5b                   	pop    ebx
c0011eba:	5e                   	pop    esi
c0011ebb:	5f                   	pop    edi
c0011ebc:	5d                   	pop    ebp
c0011ebd:	c3                   	ret    
c0011ebe:	c1 ee 0a             	shr    esi,0xa
c0011ec1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ec5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ecb:	c1 eb 0a             	shr    ebx,0xa
c0011ece:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ed4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011eda:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ee0:	39 c3                	cmp    ebx,eax
c0011ee2:	77 ce                	ja     c0011eb2 <VAS::allocatePages(int, int)+0x92>
c0011ee4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ee7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011eed:	39 d8                	cmp    eax,ebx
c0011eef:	73 f3                	jae    c0011ee4 <VAS::allocatePages(int, int)+0xc4>
c0011ef1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ef5:	83 c4 1c             	add    esp,0x1c
c0011ef8:	5b                   	pop    ebx
c0011ef9:	5e                   	pop    esi
c0011efa:	5f                   	pop    edi
c0011efb:	5d                   	pop    ebp
c0011efc:	c3                   	ret    
c0011efd:	83 ec 0c             	sub    esp,0xc
c0011f00:	68 bc 75 02 c0       	push   0xc00275bc
c0011f05:	e8 ff 6e 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0011f0a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f11:	83 c4 10             	add    esp,0x10
c0011f14:	e9 43 ff ff ff       	jmp    c0011e5c <VAS::allocatePages(int, int)+0x3c>
c0011f19:	83 ec 0c             	sub    esp,0xc
c0011f1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f20:	e8 30 f7 ff ff       	call   c0011655 <Virt::allocateKernelVirtualPages(int)>
c0011f25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f29:	83 c4 10             	add    esp,0x10
c0011f2c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f31:	0f 87 9b 00 00 00    	ja     c0011fd2 <VAS::allocatePages(int, int)+0x1b2>
c0011f37:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f3b:	85 d2                	test   edx,edx
c0011f3d:	7e 3c                	jle    c0011f7b <VAS::allocatePages(int, int)+0x15b>
c0011f3f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f43:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f47:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f4b:	c1 e5 0c             	shl    ebp,0xc
c0011f4e:	81 ce 00 04 00 00    	or     esi,0x400
c0011f54:	01 dd                	add    ebp,ebx
c0011f56:	e8 21 db ff ff       	call   c000fa7c <Phys::allocatePage()>
c0011f5b:	56                   	push   esi
c0011f5c:	53                   	push   ebx
c0011f5d:	50                   	push   eax
c0011f5e:	57                   	push   edi
c0011f5f:	e8 bc fd ff ff       	call   c0011d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f64:	83 c4 10             	add    esp,0x10
c0011f67:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f6c:	74 03                	je     c0011f71 <VAS::allocatePages(int, int)+0x151>
c0011f6e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f71:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f77:	39 dd                	cmp    ebp,ebx
c0011f79:	75 db                	jne    c0011f56 <VAS::allocatePages(int, int)+0x136>
c0011f7b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f80:	0f 84 26 ff ff ff    	je     c0011eac <VAS::allocatePages(int, int)+0x8c>
c0011f86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f8e:	89 d3                	mov    ebx,edx
c0011f90:	c1 e0 0c             	shl    eax,0xc
c0011f93:	c1 eb 0a             	shr    ebx,0xa
c0011f96:	01 d0                	add    eax,edx
c0011f98:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f9e:	c1 e8 0a             	shr    eax,0xa
c0011fa1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fac:	2d 00 00 40 00       	sub    eax,0x400000
c0011fb1:	39 c3                	cmp    ebx,eax
c0011fb3:	0f 87 f9 fe ff ff    	ja     c0011eb2 <VAS::allocatePages(int, int)+0x92>
c0011fb9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fbc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fc2:	39 d8                	cmp    eax,ebx
c0011fc4:	73 f3                	jae    c0011fb9 <VAS::allocatePages(int, int)+0x199>
c0011fc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fca:	83 c4 1c             	add    esp,0x1c
c0011fcd:	5b                   	pop    ebx
c0011fce:	5e                   	pop    esi
c0011fcf:	5f                   	pop    edi
c0011fd0:	5d                   	pop    ebp
c0011fd1:	c3                   	ret    
c0011fd2:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0011fd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fdd:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fe4:	0f 84 4d ff ff ff    	je     c0011f37 <VAS::allocatePages(int, int)+0x117>
c0011fea:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011ff2:	e9 40 ff ff ff       	jmp    c0011f37 <VAS::allocatePages(int, int)+0x117>
c0011ff7:	90                   	nop

c0011ff8 <VAS::setCPUSpecific(unsigned long)>:
c0011ff8:	83 ec 0c             	sub    esp,0xc
c0011ffb:	6a 05                	push   0x5
c0011ffd:	68 00 00 40 c2       	push   0xc2400000
c0012002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001200a:	e8 11 fd ff ff       	call   c0011d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001200f:	83 c4 1c             	add    esp,0x1c
c0012012:	c3                   	ret    
c0012013:	90                   	nop

c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012014:	55                   	push   ebp
c0012015:	57                   	push   edi
c0012016:	56                   	push   esi
c0012017:	53                   	push   ebx
c0012018:	83 ec 1c             	sub    esp,0x1c
c001201b:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0012020:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012024:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001202a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001202e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012034:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012038:	83 e0 01             	and    eax,0x1
c001203b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001203f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012043:	85 c0                	test   eax,eax
c0012045:	7e 39                	jle    c0012080 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012047:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001204b:	89 f3                	mov    ebx,esi
c001204d:	c1 e0 0c             	shl    eax,0xc
c0012050:	01 f0                	add    eax,esi
c0012052:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012056:	55                   	push   ebp
c0012057:	53                   	push   ebx
c0012058:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001205c:	29 f0                	sub    eax,esi
c001205e:	01 d8                	add    eax,ebx
c0012060:	50                   	push   eax
c0012061:	57                   	push   edi
c0012062:	e8 b9 fc ff ff       	call   c0011d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001206f:	74 03                	je     c0012074 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012071:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012074:	81 c3 00 10 00 00    	add    ebx,0x1000
c001207a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001207e:	75 d6                	jne    c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012080:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012085:	75 10                	jne    c0012097 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012087:	0f 20 d8             	mov    eax,cr3
c001208a:	0f 22 d8             	mov    cr3,eax
c001208d:	83 c4 1c             	add    esp,0x1c
c0012090:	89 f0                	mov    eax,esi
c0012092:	5b                   	pop    ebx
c0012093:	5e                   	pop    esi
c0012094:	5f                   	pop    edi
c0012095:	5d                   	pop    ebp
c0012096:	c3                   	ret    
c0012097:	89 f3                	mov    ebx,esi
c0012099:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001209d:	c1 eb 0a             	shr    ebx,0xa
c00120a0:	c1 e0 0c             	shl    eax,0xc
c00120a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120a9:	01 f0                	add    eax,esi
c00120ab:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120b1:	c1 e8 0a             	shr    eax,0xa
c00120b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120b9:	2d 00 00 40 00       	sub    eax,0x400000
c00120be:	39 c3                	cmp    ebx,eax
c00120c0:	77 cb                	ja     c001208d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120c2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120c5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120cb:	39 d8                	cmp    eax,ebx
c00120cd:	73 f3                	jae    c00120c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120cf:	83 c4 1c             	add    esp,0x1c
c00120d2:	89 f0                	mov    eax,esi
c00120d4:	5b                   	pop    ebx
c00120d5:	5e                   	pop    esi
c00120d6:	5f                   	pop    edi
c00120d7:	5d                   	pop    ebp
c00120d8:	c3                   	ret    
c00120d9:	90                   	nop

c00120da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120da:	55                   	push   ebp
c00120db:	57                   	push   edi
c00120dc:	56                   	push   esi
c00120dd:	53                   	push   ebx
c00120de:	83 ec 1c             	sub    esp,0x1c
c00120e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120e9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120ed:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120f1:	a9 ff 0f 00 00       	test   eax,0xfff
c00120f6:	75 4a                	jne    c0012142 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120f8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120fc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120ff:	c1 eb 16             	shr    ebx,0x16
c0012102:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012109:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001210d:	74 4d                	je     c001215c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001210f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012113:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012117:	c1 e8 0a             	shr    eax,0xa
c001211a:	80 fa 01             	cmp    dl,0x1
c001211d:	19 d2                	sbb    edx,edx
c001211f:	c1 e3 0c             	shl    ebx,0xc
c0012122:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012126:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001212c:	25 fc 0f 00 00       	and    eax,0xffc
c0012131:	01 d8                	add    eax,ebx
c0012133:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001213a:	83 c4 1c             	add    esp,0x1c
c001213d:	5b                   	pop    ebx
c001213e:	5e                   	pop    esi
c001213f:	5f                   	pop    edi
c0012140:	5d                   	pop    ebp
c0012141:	c3                   	ret    
c0012142:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012146:	83 ec 0c             	sub    esp,0xc
c0012149:	68 e8 75 02 c0       	push   0xc00275e8
c001214e:	e8 b6 6c 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0012153:	83 c4 10             	add    esp,0x10
c0012156:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001215a:	eb 9c                	jmp    c00120f8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001215c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012160:	e8 17 d9 ff ff       	call   c000fa7c <Phys::allocatePage()>
c0012165:	89 c5                	mov    ebp,eax
c0012167:	e8 79 f6 ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c001216c:	83 ec 0c             	sub    esp,0xc
c001216f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012173:	6a 01                	push   0x1
c0012175:	e8 db f4 ff ff       	call   c0011655 <Virt::allocateKernelVirtualPages(int)>
c001217a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012181:	6a 01                	push   0x1
c0012183:	50                   	push   eax
c0012184:	55                   	push   ebp
c0012185:	81 cd 07 04 00 00    	or     ebp,0x407
c001218b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001218f:	51                   	push   ecx
c0012190:	e8 7f fe ff ff       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012195:	83 c4 1c             	add    esp,0x1c
c0012198:	68 00 10 00 00       	push   0x1000
c001219d:	6a 00                	push   0x0
c001219f:	50                   	push   eax
c00121a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121a4:	e8 d4 e4 fe ff       	call   c000067d <memset>
c00121a9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121ad:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121b0:	e8 04 f8 ff ff       	call   c00119b9 <Virt::freeKernelVirtualPages(unsigned long)>
c00121b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121b8:	83 c4 10             	add    esp,0x10
c00121bb:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121c2:	e9 48 ff ff ff       	jmp    c001210f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00121c7:	90                   	nop

c00121c8 <VAS::VAS(bool)>:
c00121c8:	53                   	push   ebx
c00121c9:	83 ec 28             	sub    esp,0x28
c00121cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121e7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121ea:	e8 8d d8 ff ff       	call   c000fa7c <Phys::allocatePage()>
c00121ef:	89 c2                	mov    edx,eax
c00121f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00121f8:	e8 e8 f5 ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c00121fd:	89 c3                	mov    ebx,eax
c00121ff:	83 ec 0c             	sub    esp,0xc
c0012202:	6a 01                	push   0x1
c0012204:	e8 4c f4 ff ff       	call   c0011655 <Virt::allocateKernelVirtualPages(int)>
c0012209:	83 c4 10             	add    esp,0x10
c001220c:	89 c2                	mov    edx,eax
c001220e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012212:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012215:	83 ec 0c             	sub    esp,0xc
c0012218:	6a 03                	push   0x3
c001221a:	6a 01                	push   0x1
c001221c:	52                   	push   edx
c001221d:	50                   	push   eax
c001221e:	53                   	push   ebx
c001221f:	e8 f0 fd ff ff       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012224:	83 c4 20             	add    esp,0x20
c0012227:	89 c2                	mov    edx,eax
c0012229:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012230:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012238:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012240:	7f 1c                	jg     c001225e <VAS::VAS(bool)+0x96>
c0012242:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012246:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012249:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001224d:	c1 e2 02             	shl    edx,0x2
c0012250:	01 d0                	add    eax,edx
c0012252:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012258:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001225c:	eb da                	jmp    c0012238 <VAS::VAS(bool)+0x70>
c001225e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012266:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001226e:	7f 7a                	jg     c00122ea <VAS::VAS(bool)+0x122>
c0012270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012274:	2d 00 02 00 00       	sub    eax,0x200
c0012279:	c1 e0 0c             	shl    eax,0xc
c001227c:	83 c8 03             	or     eax,0x3
c001227f:	89 c2                	mov    edx,eax
c0012281:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0012286:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001228c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012292:	83 e0 10             	and    eax,0x10
c0012295:	84 c0                	test   al,al
c0012297:	74 07                	je     c00122a0 <VAS::VAS(bool)+0xd8>
c0012299:	b8 00 01 00 00       	mov    eax,0x100
c001229e:	eb 05                	jmp    c00122a5 <VAS::VAS(bool)+0xdd>
c00122a0:	b8 00 00 00 00       	mov    eax,0x0
c00122a5:	09 d0                	or     eax,edx
c00122a7:	89 c1                	mov    ecx,eax
c00122a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122b4:	c1 e2 02             	shl    edx,0x2
c00122b7:	01 d0                	add    eax,edx
c00122b9:	89 ca                	mov    edx,ecx
c00122bb:	89 10                	mov    DWORD PTR [eax],edx
c00122bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122c1:	2d 40 03 00 00       	sub    eax,0x340
c00122c6:	83 f8 7f             	cmp    eax,0x7f
c00122c9:	77 16                	ja     c00122e1 <VAS::VAS(bool)+0x119>
c00122cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122d6:	c1 e2 02             	shl    edx,0x2
c00122d9:	01 d0                	add    eax,edx
c00122db:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122e1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122e5:	e9 7c ff ff ff       	jmp    c0012266 <VAS::VAS(bool)+0x9e>
c00122ea:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00122ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122f5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122fb:	83 e0 10             	and    eax,0x10
c00122fe:	84 c0                	test   al,al
c0012300:	74 07                	je     c0012309 <VAS::VAS(bool)+0x141>
c0012302:	b8 03 41 00 00       	mov    eax,0x4103
c0012307:	eb 05                	jmp    c001230e <VAS::VAS(bool)+0x146>
c0012309:	b8 03 40 00 00       	mov    eax,0x4003
c001230e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012312:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012315:	81 c2 20 0c 00 00    	add    edx,0xc20
c001231b:	89 02                	mov    DWORD PTR [edx],eax
c001231d:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0012322:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012328:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001232e:	83 ec 08             	sub    esp,0x8
c0012331:	50                   	push   eax
c0012332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012336:	e8 bd fc ff ff       	call   c0011ff8 <VAS::setCPUSpecific(unsigned long)>
c001233b:	83 c4 10             	add    esp,0x10
c001233e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012342:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012345:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001234a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012350:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012356:	83 e0 10             	and    eax,0x10
c0012359:	84 c0                	test   al,al
c001235b:	74 07                	je     c0012364 <VAS::VAS(bool)+0x19c>
c001235d:	b8 00 01 00 00       	mov    eax,0x100
c0012362:	eb 05                	jmp    c0012369 <VAS::VAS(bool)+0x1a1>
c0012364:	b8 00 00 00 00       	mov    eax,0x0
c0012369:	09 c2                	or     edx,eax
c001236b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001236f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012372:	05 fc 0f 00 00       	add    eax,0xffc
c0012377:	83 ca 03             	or     edx,0x3
c001237a:	89 10                	mov    DWORD PTR [eax],edx
c001237c:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0012381:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012387:	83 ec 0c             	sub    esp,0xc
c001238a:	50                   	push   eax
c001238b:	e8 90 19 00 00       	call   c0013d20 <Device::getName()>
c0012390:	83 c4 10             	add    esp,0x10
c0012393:	83 ec 08             	sub    esp,0x8
c0012396:	68 e7 76 02 c0       	push   0xc00276e7
c001239b:	50                   	push   eax
c001239c:	e8 cc e3 fe ff       	call   c000076d <strcmp>
c00123a1:	83 c4 10             	add    esp,0x10
c00123a4:	85 c0                	test   eax,eax
c00123a6:	0f 94 c0             	sete   al
c00123a9:	84 c0                	test   al,al
c00123ab:	74 70                	je     c001241d <VAS::VAS(bool)+0x255>
c00123ad:	e8 46 9a 00 00       	call   c001bdf8 <disableIRQs()>
c00123b2:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00123b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123bd:	05 7c 09 00 00       	add    eax,0x97c
c00123c2:	83 ec 0c             	sub    esp,0xc
c00123c5:	50                   	push   eax
c00123c6:	e8 83 cb ff ff       	call   c000ef4e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123cb:	83 c4 10             	add    esp,0x10
c00123ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123d3:	89 c3                	mov    ebx,eax
c00123d5:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00123da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123e0:	05 7c 09 00 00       	add    eax,0x97c
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	50                   	push   eax
c00123e9:	e8 60 cb ff ff       	call   c000ef4e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	83 ec 08             	sub    esp,0x8
c00123f4:	50                   	push   eax
c00123f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123f9:	e8 9c f5 ff ff       	call   c001199a <VAS::getPageTableEntry(unsigned long)>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	8b 00                	mov    eax,DWORD PTR [eax]
c0012403:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012408:	6a 11                	push   0x11
c001240a:	53                   	push   ebx
c001240b:	50                   	push   eax
c001240c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012410:	e8 0b f9 ff ff       	call   c0011d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012415:	83 c4 10             	add    esp,0x10
c0012418:	e8 e9 99 00 00       	call   c001be06 <enableIRQs()>
c001241d:	90                   	nop
c001241e:	83 c4 28             	add    esp,0x28
c0012421:	5b                   	pop    ebx
c0012422:	c3                   	ret    

c0012423 <mapVASFirstTime>:
c0012423:	55                   	push   ebp
c0012424:	57                   	push   edi
c0012425:	56                   	push   esi
c0012426:	53                   	push   ebx
c0012427:	83 ec 0c             	sub    esp,0xc
c001242a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001242f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012432:	4a                   	dec    edx
c0012433:	0f 84 8e 00 00 00    	je     c00124c7 <mapVASFirstTime+0xa4>
c0012439:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001243c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001243f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012444:	c1 e5 15             	shl    ebp,0x15
c0012447:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001244c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012452:	29 eb                	sub    ebx,ebp
c0012454:	29 ee                	sub    esi,ebp
c0012456:	e8 21 d6 ff ff       	call   c000fa7c <Phys::allocatePage()>
c001245b:	83 ec 0c             	sub    esp,0xc
c001245e:	68 03 04 00 00       	push   0x403
c0012463:	6a 01                	push   0x1
c0012465:	53                   	push   ebx
c0012466:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001246c:	50                   	push   eax
c001246d:	57                   	push   edi
c001246e:	e8 a1 fb ff ff       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012473:	83 c4 20             	add    esp,0x20
c0012476:	39 f3                	cmp    ebx,esi
c0012478:	75 dc                	jne    c0012456 <mapVASFirstTime+0x33>
c001247a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001247f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012484:	29 ee                	sub    esi,ebp
c0012486:	29 e8                	sub    eax,ebp
c0012488:	89 c5                	mov    ebp,eax
c001248a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001248e:	19 db                	sbb    ebx,ebx
c0012490:	e8 e7 d5 ff ff       	call   c000fa7c <Phys::allocatePage()>
c0012495:	83 e3 04             	and    ebx,0x4
c0012498:	83 ec 0c             	sub    esp,0xc
c001249b:	81 c3 03 04 00 00    	add    ebx,0x403
c00124a1:	53                   	push   ebx
c00124a2:	6a 01                	push   0x1
c00124a4:	56                   	push   esi
c00124a5:	81 ee 00 10 00 00    	sub    esi,0x1000
c00124ab:	50                   	push   eax
c00124ac:	57                   	push   edi
c00124ad:	e8 62 fb ff ff       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124b2:	83 c4 20             	add    esp,0x20
c00124b5:	39 f5                	cmp    ebp,esi
c00124b7:	75 d1                	jne    c001248a <mapVASFirstTime+0x67>
c00124b9:	0f 20 d8             	mov    eax,cr3
c00124bc:	0f 22 d8             	mov    cr3,eax
c00124bf:	83 c4 0c             	add    esp,0xc
c00124c2:	5b                   	pop    ebx
c00124c3:	5e                   	pop    esi
c00124c4:	5f                   	pop    edi
c00124c5:	5d                   	pop    ebp
c00124c6:	c3                   	ret    
c00124c7:	83 ec 0c             	sub    esp,0xc
c00124ca:	68 f5 76 02 c0       	push   0xc00276f5
c00124cf:	e8 71 01 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00124d4:	83 c4 10             	add    esp,0x10
c00124d7:	83 c4 0c             	add    esp,0xc
c00124da:	5b                   	pop    ebx
c00124db:	5e                   	pop    esi
c00124dc:	5f                   	pop    edi
c00124dd:	5d                   	pop    ebp
c00124de:	c3                   	ret    

c00124df <__cxa_atexit>:
c00124df:	31 c0                	xor    eax,eax
c00124e1:	c3                   	ret    

c00124e2 <__cxa_finalize>:
c00124e2:	c3                   	ret    

c00124e3 <__stack_chk_fail>:
c00124e3:	55                   	push   ebp
c00124e4:	89 e5                	mov    ebp,esp
c00124e6:	83 ec 14             	sub    esp,0x14
c00124e9:	68 0e 77 02 c0       	push   0xc002770e
c00124ee:	e8 52 01 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00124f3:	58                   	pop    eax
c00124f4:	5a                   	pop    edx
c00124f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00124f8:	68 5e 77 02 c0       	push   0xc002775e
c00124fd:	e8 43 01 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0012502:	59                   	pop    ecx
c0012503:	58                   	pop    eax
c0012504:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012507:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001250a:	68 5e 77 02 c0       	push   0xc002775e
c001250f:	e8 31 01 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0012514:	5a                   	pop    edx
c0012515:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012518:	59                   	pop    ecx
c0012519:	8b 00                	mov    eax,DWORD PTR [eax]
c001251b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001251e:	68 5e 77 02 c0       	push   0xc002775e
c0012523:	e8 1d 01 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0012528:	5a                   	pop    edx
c0012529:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001252c:	59                   	pop    ecx
c001252d:	8b 00                	mov    eax,DWORD PTR [eax]
c001252f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012531:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012534:	68 5e 77 02 c0       	push   0xc002775e
c0012539:	e8 07 01 00 00       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001253e:	c7 04 24 66 77 02 c0 	mov    DWORD PTR [esp],0xc0027766
c0012545:	e8 bf 68 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c001254a:	83 c4 10             	add    esp,0x10
c001254d:	c9                   	leave  
c001254e:	c3                   	ret    

c001254f <__cxa_pure_virtual>:
c001254f:	83 ec 18             	sub    esp,0x18
c0012552:	68 7e 77 02 c0       	push   0xc002777e
c0012557:	e8 ad 68 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c001255c:	83 c4 1c             	add    esp,0x1c
c001255f:	c3                   	ret    

c0012560 <operator new[](unsigned long)>:
c0012560:	e9 6d cf ff ff       	jmp    c000f4d2 <malloc>

c0012565 <operator delete(void*, unsigned long)>:
c0012565:	e9 88 cf ff ff       	jmp    c000f4f2 <rfree>

c001256a <operator delete[](void*)>:
c001256a:	e9 83 cf ff ff       	jmp    c000f4f2 <rfree>

c001256f <operator delete[](void*, unsigned long)>:
c001256f:	e9 7e cf ff ff       	jmp    c000f4f2 <rfree>

c0012574 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012574:	57                   	push   edi
c0012575:	b9 3f 00 00 00       	mov    ecx,0x3f
c001257a:	56                   	push   esi
c001257b:	be 94 77 02 c0       	mov    esi,0xc0027794
c0012580:	53                   	push   ebx
c0012581:	83 ec 40             	sub    esp,0x40
c0012584:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012588:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001258c:	fc                   	cld    
c001258d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001258f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012593:	83 f9 3e             	cmp    ecx,0x3e
c0012596:	7e 05                	jle    c001259d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012598:	b9 3e 00 00 00       	mov    ecx,0x3e
c001259d:	89 df                	mov    edi,ebx
c001259f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00125a3:	eb 02                	jmp    c00125a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00125a5:	89 c7                	mov    edi,eax
c00125a7:	31 d2                	xor    edx,edx
c00125a9:	46                   	inc    esi
c00125aa:	89 f8                	mov    eax,edi
c00125ac:	f7 f1                	div    ecx
c00125ae:	39 cf                	cmp    edi,ecx
c00125b0:	73 f3                	jae    c00125a5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00125b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125b5:	eb 02                	jmp    c00125b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00125b7:	89 c3                	mov    ebx,eax
c00125b9:	31 d2                	xor    edx,edx
c00125bb:	4e                   	dec    esi
c00125bc:	89 d8                	mov    eax,ebx
c00125be:	f7 f1                	div    ecx
c00125c0:	39 cb                	cmp    ebx,ecx
c00125c2:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00125c6:	88 16                	mov    BYTE PTR [esi],dl
c00125c8:	73 ed                	jae    c00125b7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00125ca:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00125ce:	83 c4 40             	add    esp,0x40
c00125d1:	5b                   	pop    ebx
c00125d2:	5e                   	pop    esi
c00125d3:	5f                   	pop    edi
c00125d4:	c3                   	ret    

c00125d5 <Dbg::logc(char)>:
c00125d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125d9:	ba fd 03 00 00       	mov    edx,0x3fd
c00125de:	ec                   	in     al,dx
c00125df:	a8 20                	test   al,0x20
c00125e1:	74 fb                	je     c00125de <Dbg::logc(char)+0x9>
c00125e3:	ba f8 03 00 00       	mov    edx,0x3f8
c00125e8:	88 c8                	mov    al,cl
c00125ea:	ee                   	out    dx,al
c00125eb:	c3                   	ret    

c00125ec <Dbg::logs(char*)>:
c00125ec:	53                   	push   ebx
c00125ed:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00125f1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125f4:	84 c0                	test   al,al
c00125f6:	74 0f                	je     c0012607 <Dbg::logs(char*)+0x1b>
c00125f8:	50                   	push   eax
c00125f9:	43                   	inc    ebx
c00125fa:	e8 d6 ff ff ff       	call   c00125d5 <Dbg::logc(char)>
c00125ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012602:	5a                   	pop    edx
c0012603:	84 c0                	test   al,al
c0012605:	75 f1                	jne    c00125f8 <Dbg::logs(char*)+0xc>
c0012607:	5b                   	pop    ebx
c0012608:	c3                   	ret    

c0012609 <Dbg::logWriteInt(unsigned int)>:
c0012609:	83 ec 10             	sub    esp,0x10
c001260c:	6a 0a                	push   0xa
c001260e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012612:	50                   	push   eax
c0012613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012617:	e8 58 ff ff ff       	call   c0012574 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001261c:	50                   	push   eax
c001261d:	e8 ca ff ff ff       	call   c00125ec <Dbg::logs(char*)>
c0012622:	83 c4 20             	add    esp,0x20
c0012625:	c3                   	ret    

c0012626 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012626:	83 ec 10             	sub    esp,0x10
c0012629:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001262d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012631:	50                   	push   eax
c0012632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012636:	e8 39 ff ff ff       	call   c0012574 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001263b:	50                   	push   eax
c001263c:	e8 ab ff ff ff       	call   c00125ec <Dbg::logs(char*)>
c0012641:	83 c4 20             	add    esp,0x20
c0012644:	c3                   	ret    

c0012645 <Dbg::kprintf(char const*, ...)>:
c0012645:	55                   	push   ebp
c0012646:	57                   	push   edi
c0012647:	56                   	push   esi
c0012648:	53                   	push   ebx
c0012649:	83 ec 0c             	sub    esp,0xc
c001264c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012650:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012658:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001265b:	84 c0                	test   al,al
c001265d:	74 4a                	je     c00126a9 <Dbg::kprintf(char const*, ...)+0x64>
c001265f:	31 db                	xor    ebx,ebx
c0012661:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012664:	3c 25                	cmp    al,0x25
c0012666:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012669:	0f 85 e4 00 00 00    	jne    c0012753 <Dbg::kprintf(char const*, ...)+0x10e>
c001266f:	83 c3 02             	add    ebx,0x2
c0012672:	8a 07                	mov    al,BYTE PTR [edi]
c0012674:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012677:	83 e8 25             	sub    eax,0x25
c001267a:	3c 53                	cmp    al,0x53
c001267c:	0f 87 ba 00 00 00    	ja     c001273c <Dbg::kprintf(char const*, ...)+0xf7>
c0012682:	0f b6 c0             	movzx  eax,al
c0012685:	ff 24 85 d4 77 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd882c]
c001268c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012690:	89 c8                	mov    eax,ecx
c0012692:	83 c1 04             	add    ecx,0x4
c0012695:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012699:	ff 30                	push   DWORD PTR [eax]
c001269b:	e8 4c ff ff ff       	call   c00125ec <Dbg::logs(char*)>
c00126a0:	58                   	pop    eax
c00126a1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00126a5:	84 c0                	test   al,al
c00126a7:	75 b8                	jne    c0012661 <Dbg::kprintf(char const*, ...)+0x1c>
c00126a9:	83 c4 0c             	add    esp,0xc
c00126ac:	5b                   	pop    ebx
c00126ad:	5e                   	pop    esi
c00126ae:	5f                   	pop    edi
c00126af:	5d                   	pop    ebp
c00126b0:	c3                   	ret    
c00126b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126b5:	89 d0                	mov    eax,edx
c00126b7:	83 c2 04             	add    edx,0x4
c00126ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126be:	ff 30                	push   DWORD PTR [eax]
c00126c0:	e8 44 ff ff ff       	call   c0012609 <Dbg::logWriteInt(unsigned int)>
c00126c5:	58                   	pop    eax
c00126c6:	eb d9                	jmp    c00126a1 <Dbg::kprintf(char const*, ...)+0x5c>
c00126c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126cc:	89 d0                	mov    eax,edx
c00126ce:	83 c2 04             	add    edx,0x4
c00126d1:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00126d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126d8:	50                   	push   eax
c00126d9:	e8 f7 fe ff ff       	call   c00125d5 <Dbg::logc(char)>
c00126de:	58                   	pop    eax
c00126df:	eb c0                	jmp    c00126a1 <Dbg::kprintf(char const*, ...)+0x5c>
c00126e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126e5:	89 c8                	mov    eax,ecx
c00126e7:	83 c1 04             	add    ecx,0x4
c00126ea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126ee:	ff 30                	push   DWORD PTR [eax]
c00126f0:	e8 14 ff ff ff       	call   c0012609 <Dbg::logWriteInt(unsigned int)>
c00126f5:	5f                   	pop    edi
c00126f6:	eb a9                	jmp    c00126a1 <Dbg::kprintf(char const*, ...)+0x5c>
c00126f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126fc:	89 c8                	mov    eax,ecx
c00126fe:	83 c1 04             	add    ecx,0x4
c0012701:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012705:	6a 10                	push   0x10
c0012707:	ff 30                	push   DWORD PTR [eax]
c0012709:	e8 18 ff ff ff       	call   c0012626 <Dbg::logWriteIntBase(unsigned int, int)>
c001270e:	59                   	pop    ecx
c001270f:	5f                   	pop    edi
c0012710:	eb 8f                	jmp    c00126a1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012712:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012716:	89 d0                	mov    eax,edx
c0012718:	83 c2 08             	add    edx,0x8
c001271b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001271f:	6a 10                	push   0x10
c0012721:	ff 30                	push   DWORD PTR [eax]
c0012723:	e8 fe fe ff ff       	call   c0012626 <Dbg::logWriteIntBase(unsigned int, int)>
c0012728:	58                   	pop    eax
c0012729:	5a                   	pop    edx
c001272a:	e9 72 ff ff ff       	jmp    c00126a1 <Dbg::kprintf(char const*, ...)+0x5c>
c001272f:	6a 25                	push   0x25
c0012731:	e8 9f fe ff ff       	call   c00125d5 <Dbg::logc(char)>
c0012736:	58                   	pop    eax
c0012737:	e9 65 ff ff ff       	jmp    c00126a1 <Dbg::kprintf(char const*, ...)+0x5c>
c001273c:	6a 25                	push   0x25
c001273e:	e8 92 fe ff ff       	call   c00125d5 <Dbg::logc(char)>
c0012743:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012746:	50                   	push   eax
c0012747:	e8 89 fe ff ff       	call   c00125d5 <Dbg::logc(char)>
c001274c:	5a                   	pop    edx
c001274d:	59                   	pop    ecx
c001274e:	e9 4e ff ff ff       	jmp    c00126a1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012753:	50                   	push   eax
c0012754:	89 eb                	mov    ebx,ebp
c0012756:	e8 7a fe ff ff       	call   c00125d5 <Dbg::logc(char)>
c001275b:	89 fd                	mov    ebp,edi
c001275d:	58                   	pop    eax
c001275e:	e9 3e ff ff ff       	jmp    c00126a1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012763:	90                   	nop

c0012764 <File::read(unsigned long long, void*, int*)>:
c0012764:	53                   	push   ebx
c0012765:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012769:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001276d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012774:	3c 19                	cmp    al,0x19
c0012776:	77 35                	ja     c00127ad <File::read(unsigned long long, void*, int*)+0x49>
c0012778:	8b 04 85 80 b0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4f80]
c001277f:	85 c0                	test   eax,eax
c0012781:	74 2a                	je     c00127ad <File::read(unsigned long long, void*, int*)+0x49>
c0012783:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012789:	85 c0                	test   eax,eax
c001278b:	74 20                	je     c00127ad <File::read(unsigned long long, void*, int*)+0x49>
c001278d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012791:	74 21                	je     c00127b4 <File::read(unsigned long long, void*, int*)+0x50>
c0012793:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012795:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012799:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001279f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a7:	5b                   	pop    ebx
c00127a8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00127ab:	ff e0                	jmp    eax
c00127ad:	b8 0b 00 00 00       	mov    eax,0xb
c00127b2:	eb 05                	jmp    c00127b9 <File::read(unsigned long long, void*, int*)+0x55>
c00127b4:	b8 05 00 00 00       	mov    eax,0x5
c00127b9:	5b                   	pop    ebx
c00127ba:	c3                   	ret    
c00127bb:	90                   	nop

c00127bc <File::write(unsigned long long, void*, int*)>:
c00127bc:	53                   	push   ebx
c00127bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127c1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127c5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127cc:	3c 19                	cmp    al,0x19
c00127ce:	77 35                	ja     c0012805 <File::write(unsigned long long, void*, int*)+0x49>
c00127d0:	8b 04 85 80 b0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4f80]
c00127d7:	85 c0                	test   eax,eax
c00127d9:	74 2a                	je     c0012805 <File::write(unsigned long long, void*, int*)+0x49>
c00127db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127e1:	85 c0                	test   eax,eax
c00127e3:	74 20                	je     c0012805 <File::write(unsigned long long, void*, int*)+0x49>
c00127e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127e9:	74 21                	je     c001280c <File::write(unsigned long long, void*, int*)+0x50>
c00127eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127f1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ff:	5b                   	pop    ebx
c0012800:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012803:	ff e0                	jmp    eax
c0012805:	b8 0b 00 00 00       	mov    eax,0xb
c001280a:	eb 05                	jmp    c0012811 <File::write(unsigned long long, void*, int*)+0x55>
c001280c:	b8 05 00 00 00       	mov    eax,0x5
c0012811:	5b                   	pop    ebx
c0012812:	c3                   	ret    
c0012813:	90                   	nop

c0012814 <Directory::read(unsigned long long, void*, int*)>:
c0012814:	53                   	push   ebx
c0012815:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012819:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001281d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012824:	3c 19                	cmp    al,0x19
c0012826:	77 35                	ja     c001285d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012828:	8b 04 85 80 b0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4f80]
c001282f:	85 c0                	test   eax,eax
c0012831:	74 2a                	je     c001285d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012833:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012839:	85 c0                	test   eax,eax
c001283b:	74 20                	je     c001285d <Directory::read(unsigned long long, void*, int*)+0x49>
c001283d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012841:	74 21                	je     c0012864 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012843:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012845:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012849:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001284f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012857:	5b                   	pop    ebx
c0012858:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001285b:	ff e0                	jmp    eax
c001285d:	b8 0b 00 00 00       	mov    eax,0xb
c0012862:	eb 05                	jmp    c0012869 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012864:	b8 05 00 00 00       	mov    eax,0x5
c0012869:	5b                   	pop    ebx
c001286a:	c3                   	ret    
c001286b:	90                   	nop

c001286c <Directory::write(unsigned long long, void*, int*)>:
c001286c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012870:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012877:	b8 0b 00 00 00       	mov    eax,0xb
c001287c:	80 fa 19             	cmp    dl,0x19
c001287f:	77 18                	ja     c0012899 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012881:	8b 14 95 80 b0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4f80]
c0012888:	85 d2                	test   edx,edx
c001288a:	74 0d                	je     c0012899 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001288c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012893:	19 c0                	sbb    eax,eax
c0012895:	83 e0 0a             	and    eax,0xa
c0012898:	40                   	inc    eax
c0012899:	c3                   	ret    

c001289a <File::isAtty()>:
c001289a:	31 c0                	xor    eax,eax
c001289c:	c3                   	ret    
c001289d:	90                   	nop

c001289e <Directory::isAtty()>:
c001289e:	31 c0                	xor    eax,eax
c00128a0:	c3                   	ret    
c00128a1:	90                   	nop

c00128a2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00128a2:	b8 0a 00 00 00       	mov    eax,0xa
c00128a7:	c3                   	ret    

c00128a8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00128a8:	b8 0a 00 00 00       	mov    eax,0xa
c00128ad:	c3                   	ret    

c00128ae <File::~File()>:
c00128ae:	83 ec 0c             	sub    esp,0xc
c00128b1:	ba 90 79 02 c0       	mov    edx,0xc0027990
c00128b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ba:	89 10                	mov    DWORD PTR [eax],edx
c00128bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c0:	83 ec 0c             	sub    esp,0xc
c00128c3:	50                   	push   eax
c00128c4:	e8 2b eb ff ff       	call   c00113f4 <UnixFile::~UnixFile()>
c00128c9:	83 c4 10             	add    esp,0x10
c00128cc:	90                   	nop
c00128cd:	83 c4 0c             	add    esp,0xc
c00128d0:	c3                   	ret    
c00128d1:	90                   	nop

c00128d2 <File::~File()>:
c00128d2:	83 ec 0c             	sub    esp,0xc
c00128d5:	83 ec 0c             	sub    esp,0xc
c00128d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128dc:	e8 cd ff ff ff       	call   c00128ae <File::~File()>
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	83 ec 08             	sub    esp,0x8
c00128e7:	68 14 01 00 00       	push   0x114
c00128ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128f0:	e8 70 fc ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	83 c4 0c             	add    esp,0xc
c00128fb:	c3                   	ret    

c00128fc <Directory::~Directory()>:
c00128fc:	83 ec 0c             	sub    esp,0xc
c00128ff:	ba ac 79 02 c0       	mov    edx,0xc00279ac
c0012904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012908:	89 10                	mov    DWORD PTR [eax],edx
c001290a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001290e:	83 ec 0c             	sub    esp,0xc
c0012911:	50                   	push   eax
c0012912:	e8 dd ea ff ff       	call   c00113f4 <UnixFile::~UnixFile()>
c0012917:	83 c4 10             	add    esp,0x10
c001291a:	90                   	nop
c001291b:	83 c4 0c             	add    esp,0xc
c001291e:	c3                   	ret    
c001291f:	90                   	nop

c0012920 <Directory::~Directory()>:
c0012920:	83 ec 0c             	sub    esp,0xc
c0012923:	83 ec 0c             	sub    esp,0xc
c0012926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001292a:	e8 cd ff ff ff       	call   c00128fc <Directory::~Directory()>
c001292f:	83 c4 10             	add    esp,0x10
c0012932:	83 ec 08             	sub    esp,0x8
c0012935:	68 14 01 00 00       	push   0x114
c001293a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001293e:	e8 22 fc ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0012943:	83 c4 10             	add    esp,0x10
c0012946:	83 c4 0c             	add    esp,0xc
c0012949:	c3                   	ret    

c001294a <Filesystem::Filesystem()>:
c001294a:	ba 2c 79 02 c0       	mov    edx,0xc002792c
c001294f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012953:	89 10                	mov    DWORD PTR [eax],edx
c0012955:	8b 15 e8 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002abe8
c001295b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001295f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012966:	a3 e8 ab 02 c0       	mov    ds:0xc002abe8,eax
c001296b:	90                   	nop
c001296c:	c3                   	ret    
c001296d:	90                   	nop

c001296e <Filesystem::~Filesystem()>:
c001296e:	ba 2c 79 02 c0       	mov    edx,0xc002792c
c0012973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012977:	89 10                	mov    DWORD PTR [eax],edx
c0012979:	90                   	nop
c001297a:	c3                   	ret    
c001297b:	90                   	nop

c001297c <Filesystem::~Filesystem()>:
c001297c:	83 ec 0c             	sub    esp,0xc
c001297f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012983:	e8 e6 ff ff ff       	call   c001296e <Filesystem::~Filesystem()>
c0012988:	83 c4 04             	add    esp,0x4
c001298b:	83 ec 08             	sub    esp,0x8
c001298e:	6a 08                	push   0x8
c0012990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012994:	e8 cc fb ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0012999:	83 c4 10             	add    esp,0x10
c001299c:	83 c4 0c             	add    esp,0xc
c001299f:	c3                   	ret    

c00129a0 <initVFS()>:
c00129a0:	83 ec 18             	sub    esp,0x18
c00129a3:	6a 08                	push   0x8
c00129a5:	e8 28 cb ff ff       	call   c000f4d2 <malloc>
c00129aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00129ad:	e8 3c c3 00 00       	call   c001ecee <FAT::FAT()>
c00129b2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00129b9:	e8 14 cb ff ff       	call   c000f4d2 <malloc>
c00129be:	89 04 24             	mov    DWORD PTR [esp],eax
c00129c1:	e8 9e d5 00 00       	call   c001ff64 <ISO9660::ISO9660()>
c00129c6:	83 c4 1c             	add    esp,0x1c
c00129c9:	c3                   	ret    

c00129ca <standardiseFiles(char*, char const*, char const*)>:
c00129ca:	55                   	push   ebp
c00129cb:	57                   	push   edi
c00129cc:	56                   	push   esi
c00129cd:	53                   	push   ebx
c00129ce:	81 ec 10 04 00 00    	sub    esp,0x410
c00129d4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00129db:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00129e2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00129e9:	68 00 04 00 00       	push   0x400
c00129ee:	6a 00                	push   0x0
c00129f0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129f4:	56                   	push   esi
c00129f5:	e8 83 dc fe ff       	call   c000067d <memset>
c00129fa:	83 c4 10             	add    esp,0x10
c00129fd:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a01:	75 0b                	jne    c0012a0e <standardiseFiles(char*, char const*, char const*)+0x44>
c0012a03:	50                   	push   eax
c0012a04:	50                   	push   eax
c0012a05:	57                   	push   edi
c0012a06:	56                   	push   esi
c0012a07:	e8 10 dd fe ff       	call   c000071c <strcpy>
c0012a0c:	eb 41                	jmp    c0012a4f <standardiseFiles(char*, char const*, char const*)+0x85>
c0012a0e:	8a 07                	mov    al,BYTE PTR [edi]
c0012a10:	3c 5c                	cmp    al,0x5c
c0012a12:	74 04                	je     c0012a18 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a14:	3c 2f                	cmp    al,0x2f
c0012a16:	75 18                	jne    c0012a30 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a18:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a1b:	3c 60                	cmp    al,0x60
c0012a1d:	7e 03                	jle    c0012a22 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a1f:	83 e8 20             	sub    eax,0x20
c0012a22:	88 04 24             	mov    BYTE PTR [esp],al
c0012a25:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a2c:	50                   	push   eax
c0012a2d:	50                   	push   eax
c0012a2e:	eb 18                	jmp    c0012a48 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a30:	50                   	push   eax
c0012a31:	50                   	push   eax
c0012a32:	55                   	push   ebp
c0012a33:	56                   	push   esi
c0012a34:	e8 e3 dc fe ff       	call   c000071c <strcpy>
c0012a39:	5a                   	pop    edx
c0012a3a:	59                   	pop    ecx
c0012a3b:	68 41 8c 02 c0       	push   0xc0028c41
c0012a40:	56                   	push   esi
c0012a41:	e8 8d dd fe ff       	call   c00007d3 <strcat>
c0012a46:	5d                   	pop    ebp
c0012a47:	58                   	pop    eax
c0012a48:	57                   	push   edi
c0012a49:	56                   	push   esi
c0012a4a:	e8 84 dd fe ff       	call   c00007d3 <strcat>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a55:	3c 60                	cmp    al,0x60
c0012a57:	7e 03                	jle    c0012a5c <standardiseFiles(char*, char const*, char const*)+0x92>
c0012a59:	83 e8 20             	sub    eax,0x20
c0012a5c:	88 04 24             	mov    BYTE PTR [esp],al
c0012a5f:	88 03                	mov    BYTE PTR [ebx],al
c0012a61:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a68:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012a6e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012a72:	bf 03 00 00 00       	mov    edi,0x3
c0012a77:	b8 03 00 00 00       	mov    eax,0x3
c0012a7c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012a7f:	84 d2                	test   dl,dl
c0012a81:	0f 84 91 00 00 00    	je     c0012b18 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012a87:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012a8a:	80 fa 5c             	cmp    dl,0x5c
c0012a8d:	74 05                	je     c0012a94 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012a8f:	80 fa 2f             	cmp    dl,0x2f
c0012a92:	75 12                	jne    c0012aa6 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a94:	89 c5                	mov    ebp,eax
c0012a96:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a9b:	74 09                	je     c0012aa6 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a9d:	40                   	inc    eax
c0012a9e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012aa2:	89 cf                	mov    edi,ecx
c0012aa4:	eb d6                	jmp    c0012a7c <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012aa6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012aab:	75 5b                	jne    c0012b08 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012aad:	80 fa 2e             	cmp    dl,0x2e
c0012ab0:	75 56                	jne    c0012b08 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012ab2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012ab6:	74 19                	je     c0012ad1 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012ab8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012abd:	74 53                	je     c0012b12 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012abf:	89 f9                	mov    ecx,edi
c0012ac1:	41                   	inc    ecx
c0012ac2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ac5:	80 fa 2f             	cmp    dl,0x2f
c0012ac8:	74 f7                	je     c0012ac1 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012aca:	80 fa 5c             	cmp    dl,0x5c
c0012acd:	74 f2                	je     c0012ac1 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012acf:	eb d1                	jmp    c0012aa2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ad1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ad6:	74 3a                	je     c0012b12 <standardiseFiles(char*, char const*, char const*)+0x148>
c0012ad8:	83 f8 03             	cmp    eax,0x3
c0012adb:	74 c5                	je     c0012aa2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012add:	41                   	inc    ecx
c0012ade:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ae1:	80 fa 2f             	cmp    dl,0x2f
c0012ae4:	74 f7                	je     c0012add <standardiseFiles(char*, char const*, char const*)+0x113>
c0012ae6:	80 fa 5c             	cmp    dl,0x5c
c0012ae9:	74 f2                	je     c0012add <standardiseFiles(char*, char const*, char const*)+0x113>
c0012aeb:	48                   	dec    eax
c0012aec:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012af0:	75 06                	jne    c0012af8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012af2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012af6:	eb f3                	jmp    c0012aeb <standardiseFiles(char*, char const*, char const*)+0x121>
c0012af8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012afc:	74 07                	je     c0012b05 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012afe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b02:	48                   	dec    eax
c0012b03:	eb f3                	jmp    c0012af8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b05:	40                   	inc    eax
c0012b06:	eb 9a                	jmp    c0012aa2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b08:	80 fa 2f             	cmp    dl,0x2f
c0012b0b:	74 95                	je     c0012aa2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b0d:	80 fa 5c             	cmp    dl,0x5c
c0012b10:	74 90                	je     c0012aa2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b12:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b15:	40                   	inc    eax
c0012b16:	eb 8a                	jmp    c0012aa2 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b18:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b1c:	83 ec 0c             	sub    esp,0xc
c0012b1f:	53                   	push   ebx
c0012b20:	e8 75 db fe ff       	call   c000069a <strlen>
c0012b25:	83 c4 10             	add    esp,0x10
c0012b28:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b2d:	75 26                	jne    c0012b55 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b2f:	83 ec 0c             	sub    esp,0xc
c0012b32:	53                   	push   ebx
c0012b33:	e8 62 db fe ff       	call   c000069a <strlen>
c0012b38:	83 c4 10             	add    esp,0x10
c0012b3b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b40:	74 26                	je     c0012b68 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b42:	83 ec 0c             	sub    esp,0xc
c0012b45:	53                   	push   ebx
c0012b46:	e8 4f db fe ff       	call   c000069a <strlen>
c0012b4b:	83 c4 10             	add    esp,0x10
c0012b4e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b53:	eb c7                	jmp    c0012b1c <standardiseFiles(char*, char const*, char const*)+0x152>
c0012b55:	83 ec 0c             	sub    esp,0xc
c0012b58:	53                   	push   ebx
c0012b59:	e8 3c db fe ff       	call   c000069a <strlen>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b66:	74 c7                	je     c0012b2f <standardiseFiles(char*, char const*, char const*)+0x165>
c0012b68:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012b6e:	5b                   	pop    ebx
c0012b6f:	5e                   	pop    esi
c0012b70:	5f                   	pop    edi
c0012b71:	5d                   	pop    ebp
c0012b72:	c3                   	ret    
c0012b73:	90                   	nop

c0012b74 <File::File(char const*, Process*)>:
c0012b74:	83 ec 0c             	sub    esp,0xc
c0012b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7b:	83 ec 08             	sub    esp,0x8
c0012b7e:	6a 00                	push   0x0
c0012b80:	50                   	push   eax
c0012b81:	e8 8c e6 ff ff       	call   c0011212 <UnixFile::UnixFile(int)>
c0012b86:	83 c4 10             	add    esp,0x10
c0012b89:	ba 90 79 02 c0       	mov    edx,0xc0027990
c0012b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b92:	89 10                	mov    DWORD PTR [eax],edx
c0012b94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b98:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba2:	83 c0 0d             	add    eax,0xd
c0012ba5:	83 ec 04             	sub    esp,0x4
c0012ba8:	52                   	push   edx
c0012ba9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bad:	50                   	push   eax
c0012bae:	e8 17 fe ff ff       	call   c00129ca <standardiseFiles(char*, char const*, char const*)>
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bba:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012bbd:	8d 50 bf             	lea    edx,[eax-0x41]
c0012bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bce:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012bd2:	90                   	nop
c0012bd3:	83 c4 0c             	add    esp,0xc
c0012bd6:	c3                   	ret    
c0012bd7:	90                   	nop

c0012bd8 <File::open(FileOpenMode)>:
c0012bd8:	53                   	push   ebx
c0012bd9:	b8 0b 00 00 00       	mov    eax,0xb
c0012bde:	83 ec 08             	sub    esp,0x8
c0012be1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012be5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012bec:	80 fa 19             	cmp    dl,0x19
c0012bef:	77 40                	ja     c0012c31 <File::open(FileOpenMode)+0x59>
c0012bf1:	8b 14 95 80 b0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4f80]
c0012bf8:	85 d2                	test   edx,edx
c0012bfa:	74 35                	je     c0012c31 <File::open(FileOpenMode)+0x59>
c0012bfc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c02:	85 d2                	test   edx,edx
c0012c04:	74 2b                	je     c0012c31 <File::open(FileOpenMode)+0x59>
c0012c06:	b8 06 00 00 00       	mov    eax,0x6
c0012c0b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c0f:	75 20                	jne    c0012c31 <File::open(FileOpenMode)+0x59>
c0012c11:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c13:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c1d:	51                   	push   ecx
c0012c1e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c21:	51                   	push   ecx
c0012c22:	52                   	push   edx
c0012c23:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c26:	83 c4 10             	add    esp,0x10
c0012c29:	85 c0                	test   eax,eax
c0012c2b:	75 04                	jne    c0012c31 <File::open(FileOpenMode)+0x59>
c0012c2d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c31:	83 c4 08             	add    esp,0x8
c0012c34:	5b                   	pop    ebx
c0012c35:	c3                   	ret    

c0012c36 <File::close()>:
c0012c36:	53                   	push   ebx
c0012c37:	b8 0b 00 00 00       	mov    eax,0xb
c0012c3c:	83 ec 08             	sub    esp,0x8
c0012c3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c43:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c4a:	80 fa 19             	cmp    dl,0x19
c0012c4d:	77 41                	ja     c0012c90 <File::close()+0x5a>
c0012c4f:	8b 1c 95 80 b0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd4f80]
c0012c56:	85 db                	test   ebx,ebx
c0012c58:	74 36                	je     c0012c90 <File::close()+0x5a>
c0012c5a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012c61:	74 2d                	je     c0012c90 <File::close()+0x5a>
c0012c63:	b8 05 00 00 00       	mov    eax,0x5
c0012c68:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c6c:	74 22                	je     c0012c90 <File::close()+0x5a>
c0012c6e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c72:	8b 04 95 80 b0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4f80]
c0012c79:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c7f:	53                   	push   ebx
c0012c80:	53                   	push   ebx
c0012c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c83:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c89:	50                   	push   eax
c0012c8a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012c8d:	83 c4 10             	add    esp,0x10
c0012c90:	83 c4 08             	add    esp,0x8
c0012c93:	5b                   	pop    ebx
c0012c94:	c3                   	ret    
c0012c95:	90                   	nop

c0012c96 <File::seek(unsigned long long)>:
c0012c96:	56                   	push   esi
c0012c97:	53                   	push   ebx
c0012c98:	b8 0b 00 00 00       	mov    eax,0xb
c0012c9d:	51                   	push   ecx
c0012c9e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ca2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012ca6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012cad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cb1:	80 fa 19             	cmp    dl,0x19
c0012cb4:	77 31                	ja     c0012ce7 <File::seek(unsigned long long)+0x51>
c0012cb6:	8b 14 95 80 b0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4f80]
c0012cbd:	85 d2                	test   edx,edx
c0012cbf:	74 26                	je     c0012ce7 <File::seek(unsigned long long)+0x51>
c0012cc1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cc7:	85 d2                	test   edx,edx
c0012cc9:	74 1c                	je     c0012ce7 <File::seek(unsigned long long)+0x51>
c0012ccb:	b8 05 00 00 00       	mov    eax,0x5
c0012cd0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012cd4:	74 11                	je     c0012ce7 <File::seek(unsigned long long)+0x51>
c0012cd6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cd8:	53                   	push   ebx
c0012cd9:	51                   	push   ecx
c0012cda:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012ce0:	52                   	push   edx
c0012ce1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ce4:	83 c4 10             	add    esp,0x10
c0012ce7:	5a                   	pop    edx
c0012ce8:	5b                   	pop    ebx
c0012ce9:	5e                   	pop    esi
c0012cea:	c3                   	ret    
c0012ceb:	90                   	nop

c0012cec <File::tell(unsigned long long*)>:
c0012cec:	83 ec 0c             	sub    esp,0xc
c0012cef:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cf8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cff:	80 fa 19             	cmp    dl,0x19
c0012d02:	77 34                	ja     c0012d38 <File::tell(unsigned long long*)+0x4c>
c0012d04:	8b 14 95 80 b0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4f80]
c0012d0b:	85 d2                	test   edx,edx
c0012d0d:	74 29                	je     c0012d38 <File::tell(unsigned long long*)+0x4c>
c0012d0f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d15:	85 d2                	test   edx,edx
c0012d17:	74 1f                	je     c0012d38 <File::tell(unsigned long long*)+0x4c>
c0012d19:	b8 05 00 00 00       	mov    eax,0x5
c0012d1e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d22:	74 14                	je     c0012d38 <File::tell(unsigned long long*)+0x4c>
c0012d24:	50                   	push   eax
c0012d25:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d2b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d31:	52                   	push   edx
c0012d32:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d35:	83 c4 10             	add    esp,0x10
c0012d38:	83 c4 0c             	add    esp,0xc
c0012d3b:	c3                   	ret    

c0012d3c <File::rewind()>:
c0012d3c:	83 ec 10             	sub    esp,0x10
c0012d3f:	6a 00                	push   0x0
c0012d41:	6a 00                	push   0x0
c0012d43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d47:	e8 4a ff ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c0012d4c:	83 c4 1c             	add    esp,0x1c
c0012d4f:	c3                   	ret    

c0012d50 <File::unlink()>:
c0012d50:	83 ec 0c             	sub    esp,0xc
c0012d53:	b8 0b 00 00 00       	mov    eax,0xb
c0012d58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d63:	80 f9 19             	cmp    cl,0x19
c0012d66:	77 2f                	ja     c0012d97 <File::unlink()+0x47>
c0012d68:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c0012d6f:	85 c9                	test   ecx,ecx
c0012d71:	74 24                	je     c0012d97 <File::unlink()+0x47>
c0012d73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d79:	85 c9                	test   ecx,ecx
c0012d7b:	74 1a                	je     c0012d97 <File::unlink()+0x47>
c0012d7d:	b8 06 00 00 00       	mov    eax,0x6
c0012d82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d86:	75 0f                	jne    c0012d97 <File::unlink()+0x47>
c0012d88:	83 c2 0d             	add    edx,0xd
c0012d8b:	50                   	push   eax
c0012d8c:	50                   	push   eax
c0012d8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d8f:	52                   	push   edx
c0012d90:	51                   	push   ecx
c0012d91:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d94:	83 c4 10             	add    esp,0x10
c0012d97:	83 c4 0c             	add    esp,0xc
c0012d9a:	c3                   	ret    
c0012d9b:	90                   	nop

c0012d9c <File::rename(char const*)>:
c0012d9c:	83 ec 0c             	sub    esp,0xc
c0012d9f:	b8 0b 00 00 00       	mov    eax,0xb
c0012da4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012da8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012daf:	80 f9 19             	cmp    cl,0x19
c0012db2:	77 32                	ja     c0012de6 <File::rename(char const*)+0x4a>
c0012db4:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c0012dbb:	85 c9                	test   ecx,ecx
c0012dbd:	74 27                	je     c0012de6 <File::rename(char const*)+0x4a>
c0012dbf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dc5:	85 c9                	test   ecx,ecx
c0012dc7:	74 1d                	je     c0012de6 <File::rename(char const*)+0x4a>
c0012dc9:	b8 06 00 00 00       	mov    eax,0x6
c0012dce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dd2:	75 12                	jne    c0012de6 <File::rename(char const*)+0x4a>
c0012dd4:	83 c2 0d             	add    edx,0xd
c0012dd7:	50                   	push   eax
c0012dd8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dde:	52                   	push   edx
c0012ddf:	51                   	push   ecx
c0012de0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	83 c4 0c             	add    esp,0xc
c0012de9:	c3                   	ret    

c0012dea <File::chfatattr(unsigned char, unsigned char)>:
c0012dea:	57                   	push   edi
c0012deb:	b8 0b 00 00 00       	mov    eax,0xb
c0012df0:	56                   	push   esi
c0012df1:	53                   	push   ebx
c0012df2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012df6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012dfa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e01:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e05:	80 f9 19             	cmp    cl,0x19
c0012e08:	77 37                	ja     c0012e41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e0a:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c0012e11:	85 c9                	test   ecx,ecx
c0012e13:	74 2c                	je     c0012e41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e15:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e1b:	85 c9                	test   ecx,ecx
c0012e1d:	74 22                	je     c0012e41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e1f:	b8 06 00 00 00       	mov    eax,0x6
c0012e24:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e28:	75 17                	jne    c0012e41 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e2a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e2c:	89 f0                	mov    eax,esi
c0012e2e:	83 c2 0d             	add    edx,0xd
c0012e31:	0f b6 f0             	movzx  esi,al
c0012e34:	0f b6 db             	movzx  ebx,bl
c0012e37:	56                   	push   esi
c0012e38:	53                   	push   ebx
c0012e39:	52                   	push   edx
c0012e3a:	51                   	push   ecx
c0012e3b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	5b                   	pop    ebx
c0012e42:	5e                   	pop    esi
c0012e43:	5f                   	pop    edi
c0012e44:	c3                   	ret    
c0012e45:	90                   	nop

c0012e46 <File::exists()>:
c0012e46:	83 ec 0c             	sub    esp,0xc
c0012e49:	31 c0                	xor    eax,eax
c0012e4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e4f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e56:	80 f9 19             	cmp    cl,0x19
c0012e59:	77 24                	ja     c0012e7f <File::exists()+0x39>
c0012e5b:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c0012e62:	85 c9                	test   ecx,ecx
c0012e64:	74 19                	je     c0012e7f <File::exists()+0x39>
c0012e66:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e6c:	85 c9                	test   ecx,ecx
c0012e6e:	74 0f                	je     c0012e7f <File::exists()+0x39>
c0012e70:	83 c2 0d             	add    edx,0xd
c0012e73:	50                   	push   eax
c0012e74:	50                   	push   eax
c0012e75:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e77:	52                   	push   edx
c0012e78:	51                   	push   ecx
c0012e79:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e7c:	83 c4 10             	add    esp,0x10
c0012e7f:	83 c4 0c             	add    esp,0xc
c0012e82:	c3                   	ret    
c0012e83:	90                   	nop

c0012e84 <File::stat(unsigned long long*, bool*)>:
c0012e84:	56                   	push   esi
c0012e85:	53                   	push   ebx
c0012e86:	50                   	push   eax
c0012e87:	b8 0b 00 00 00       	mov    eax,0xb
c0012e8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e90:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e9f:	80 f9 19             	cmp    cl,0x19
c0012ea2:	77 3d                	ja     c0012ee1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ea4:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c0012eab:	85 c9                	test   ecx,ecx
c0012ead:	74 32                	je     c0012ee1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012eaf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb5:	85 c9                	test   ecx,ecx
c0012eb7:	74 28                	je     c0012ee1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012eb9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ebb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ebf:	74 13                	je     c0012ed4 <File::stat(unsigned long long*, bool*)+0x50>
c0012ec1:	83 ec 04             	sub    esp,0x4
c0012ec4:	56                   	push   esi
c0012ec5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ecb:	51                   	push   ecx
c0012ecc:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ecf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ed2:	eb 0a                	jmp    c0012ede <File::stat(unsigned long long*, bool*)+0x5a>
c0012ed4:	53                   	push   ebx
c0012ed5:	83 c2 0d             	add    edx,0xd
c0012ed8:	56                   	push   esi
c0012ed9:	52                   	push   edx
c0012eda:	51                   	push   ecx
c0012edb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ede:	83 c4 10             	add    esp,0x10
c0012ee1:	5a                   	pop    edx
c0012ee2:	5b                   	pop    ebx
c0012ee3:	5e                   	pop    esi
c0012ee4:	c3                   	ret    

c0012ee5 <getcwd(Process*, char*, int)>:
c0012ee5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ee9:	31 c0                	xor    eax,eax
c0012eeb:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012eee:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012ef2:	7d 15                	jge    c0012f09 <getcwd(Process*, char*, int)+0x24>
c0012ef4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ef8:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012eff:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f02:	84 c9                	test   cl,cl
c0012f04:	74 06                	je     c0012f0c <getcwd(Process*, char*, int)+0x27>
c0012f06:	40                   	inc    eax
c0012f07:	eb e2                	jmp    c0012eeb <getcwd(Process*, char*, int)+0x6>
c0012f09:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f0c:	31 c0                	xor    eax,eax
c0012f0e:	c3                   	ret    

c0012f0f <setcwd(Process*, char*)>:
c0012f0f:	55                   	push   ebp
c0012f10:	57                   	push   edi
c0012f11:	56                   	push   esi
c0012f12:	53                   	push   ebx
c0012f13:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f19:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f20:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f26:	57                   	push   edi
c0012f27:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f2e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f32:	56                   	push   esi
c0012f33:	e8 92 fa ff ff       	call   c00129ca <standardiseFiles(char*, char const*, char const*)>
c0012f38:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f3b:	e8 5a d7 fe ff       	call   c000069a <strlen>
c0012f40:	83 c4 10             	add    esp,0x10
c0012f43:	83 f8 02             	cmp    eax,0x2
c0012f46:	77 17                	ja     c0012f5f <setcwd(Process*, char*)+0x50>
c0012f48:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f4d:	83 e8 41             	sub    eax,0x41
c0012f50:	83 f8 19             	cmp    eax,0x19
c0012f53:	76 24                	jbe    c0012f79 <setcwd(Process*, char*)+0x6a>
c0012f55:	b8 03 00 00 00       	mov    eax,0x3
c0012f5a:	e9 e0 00 00 00       	jmp    c001303f <setcwd(Process*, char*)+0x130>
c0012f5f:	83 ec 0c             	sub    esp,0xc
c0012f62:	56                   	push   esi
c0012f63:	e8 32 d7 fe ff       	call   c000069a <strlen>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	83 f8 03             	cmp    eax,0x3
c0012f6e:	75 34                	jne    c0012fa4 <setcwd(Process*, char*)+0x95>
c0012f70:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012f75:	75 2d                	jne    c0012fa4 <setcwd(Process*, char*)+0x95>
c0012f77:	eb cf                	jmp    c0012f48 <setcwd(Process*, char*)+0x39>
c0012f79:	8b 14 85 80 b0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4f80]
c0012f80:	b8 05 00 00 00       	mov    eax,0x5
c0012f85:	85 d2                	test   edx,edx
c0012f87:	0f 84 b2 00 00 00    	je     c001303f <setcwd(Process*, char*)+0x130>
c0012f8d:	b8 06 00 00 00       	mov    eax,0x6
c0012f92:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f99:	0f 85 92 00 00 00    	jne    c0013031 <setcwd(Process*, char*)+0x122>
c0012f9f:	e9 9b 00 00 00       	jmp    c001303f <setcwd(Process*, char*)+0x130>
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	68 14 01 00 00       	push   0x114
c0012fac:	e8 21 c5 ff ff       	call   c000f4d2 <malloc>
c0012fb1:	83 c4 0c             	add    esp,0xc
c0012fb4:	89 c3                	mov    ebx,eax
c0012fb6:	55                   	push   ebp
c0012fb7:	56                   	push   esi
c0012fb8:	50                   	push   eax
c0012fb9:	e8 b6 fb ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c0012fbe:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012fc3:	83 c4 0c             	add    esp,0xc
c0012fc6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012fca:	50                   	push   eax
c0012fcb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012fcf:	50                   	push   eax
c0012fd0:	53                   	push   ebx
c0012fd1:	e8 ae fe ff ff       	call   c0012e84 <File::stat(unsigned long long*, bool*)>
c0012fd6:	83 c4 10             	add    esp,0x10
c0012fd9:	83 f8 02             	cmp    eax,0x2
c0012fdc:	74 04                	je     c0012fe2 <setcwd(Process*, char*)+0xd3>
c0012fde:	85 c0                	test   eax,eax
c0012fe0:	74 1c                	je     c0012ffe <setcwd(Process*, char*)+0xef>
c0012fe2:	b8 01 00 00 00       	mov    eax,0x1
c0012fe7:	85 db                	test   ebx,ebx
c0012fe9:	74 54                	je     c001303f <setcwd(Process*, char*)+0x130>
c0012feb:	83 ec 0c             	sub    esp,0xc
c0012fee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ff0:	53                   	push   ebx
c0012ff1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ff4:	83 c4 10             	add    esp,0x10
c0012ff7:	b8 01 00 00 00       	mov    eax,0x1
c0012ffc:	eb 41                	jmp    c001303f <setcwd(Process*, char*)+0x130>
c0012ffe:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013003:	75 1c                	jne    c0013021 <setcwd(Process*, char*)+0x112>
c0013005:	b8 02 00 00 00       	mov    eax,0x2
c001300a:	85 db                	test   ebx,ebx
c001300c:	74 31                	je     c001303f <setcwd(Process*, char*)+0x130>
c001300e:	83 ec 0c             	sub    esp,0xc
c0013011:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013013:	53                   	push   ebx
c0013014:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013017:	83 c4 10             	add    esp,0x10
c001301a:	b8 02 00 00 00       	mov    eax,0x2
c001301f:	eb 1e                	jmp    c001303f <setcwd(Process*, char*)+0x130>
c0013021:	85 db                	test   ebx,ebx
c0013023:	74 0c                	je     c0013031 <setcwd(Process*, char*)+0x122>
c0013025:	83 ec 0c             	sub    esp,0xc
c0013028:	8b 03                	mov    eax,DWORD PTR [ebx]
c001302a:	53                   	push   ebx
c001302b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001302e:	83 c4 10             	add    esp,0x10
c0013031:	50                   	push   eax
c0013032:	50                   	push   eax
c0013033:	56                   	push   esi
c0013034:	57                   	push   edi
c0013035:	e8 e2 d6 fe ff       	call   c000071c <strcpy>
c001303a:	83 c4 10             	add    esp,0x10
c001303d:	31 c0                	xor    eax,eax
c001303f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013045:	5b                   	pop    ebx
c0013046:	5e                   	pop    esi
c0013047:	5f                   	pop    edi
c0013048:	5d                   	pop    ebp
c0013049:	c3                   	ret    

c001304a <Directory::Directory(char const*, Process*)>:
c001304a:	83 ec 0c             	sub    esp,0xc
c001304d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013051:	83 ec 08             	sub    esp,0x8
c0013054:	6a 00                	push   0x0
c0013056:	50                   	push   eax
c0013057:	e8 b6 e1 ff ff       	call   c0011212 <UnixFile::UnixFile(int)>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	ba ac 79 02 c0       	mov    edx,0xc00279ac
c0013064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013068:	89 10                	mov    DWORD PTR [eax],edx
c001306a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001306e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013078:	83 c0 0d             	add    eax,0xd
c001307b:	83 ec 04             	sub    esp,0x4
c001307e:	52                   	push   edx
c001307f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013083:	50                   	push   eax
c0013084:	e8 41 f9 ff ff       	call   c00129ca <standardiseFiles(char*, char const*, char const*)>
c0013089:	83 c4 10             	add    esp,0x10
c001308c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013090:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013093:	8d 50 bf             	lea    edx,[eax-0x41]
c0013096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130a8:	90                   	nop
c00130a9:	83 c4 0c             	add    esp,0xc
c00130ac:	c3                   	ret    
c00130ad:	90                   	nop

c00130ae <Directory::open()>:
c00130ae:	53                   	push   ebx
c00130af:	b8 0b 00 00 00       	mov    eax,0xb
c00130b4:	83 ec 08             	sub    esp,0x8
c00130b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130bb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130c2:	80 fa 19             	cmp    dl,0x19
c00130c5:	77 3d                	ja     c0013104 <Directory::open()+0x56>
c00130c7:	8b 14 95 80 b0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4f80]
c00130ce:	85 d2                	test   edx,edx
c00130d0:	74 32                	je     c0013104 <Directory::open()+0x56>
c00130d2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130d8:	85 d2                	test   edx,edx
c00130da:	74 28                	je     c0013104 <Directory::open()+0x56>
c00130dc:	b8 06 00 00 00       	mov    eax,0x6
c00130e1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00130e5:	75 1d                	jne    c0013104 <Directory::open()+0x56>
c00130e7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00130ed:	50                   	push   eax
c00130ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00130f0:	51                   	push   ecx
c00130f1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00130f4:	51                   	push   ecx
c00130f5:	52                   	push   edx
c00130f6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00130f9:	83 c4 10             	add    esp,0x10
c00130fc:	85 c0                	test   eax,eax
c00130fe:	75 04                	jne    c0013104 <Directory::open()+0x56>
c0013100:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013104:	83 c4 08             	add    esp,0x8
c0013107:	5b                   	pop    ebx
c0013108:	c3                   	ret    
c0013109:	90                   	nop

c001310a <Directory::close()>:
c001310a:	53                   	push   ebx
c001310b:	b8 0b 00 00 00       	mov    eax,0xb
c0013110:	83 ec 08             	sub    esp,0x8
c0013113:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013117:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001311e:	80 fa 19             	cmp    dl,0x19
c0013121:	77 41                	ja     c0013164 <Directory::close()+0x5a>
c0013123:	8b 1c 95 80 b0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd4f80]
c001312a:	85 db                	test   ebx,ebx
c001312c:	74 36                	je     c0013164 <Directory::close()+0x5a>
c001312e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013135:	74 2d                	je     c0013164 <Directory::close()+0x5a>
c0013137:	b8 05 00 00 00       	mov    eax,0x5
c001313c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013140:	74 22                	je     c0013164 <Directory::close()+0x5a>
c0013142:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013146:	8b 04 95 80 b0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4f80]
c001314d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013153:	53                   	push   ebx
c0013154:	53                   	push   ebx
c0013155:	8b 10                	mov    edx,DWORD PTR [eax]
c0013157:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001315d:	50                   	push   eax
c001315e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	83 c4 08             	add    esp,0x8
c0013167:	5b                   	pop    ebx
c0013168:	c3                   	ret    
c0013169:	90                   	nop

c001316a <Directory::unlink()>:
c001316a:	83 ec 0c             	sub    esp,0xc
c001316d:	b8 0b 00 00 00       	mov    eax,0xb
c0013172:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013176:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001317d:	80 f9 19             	cmp    cl,0x19
c0013180:	77 2f                	ja     c00131b1 <Directory::unlink()+0x47>
c0013182:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c0013189:	85 c9                	test   ecx,ecx
c001318b:	74 24                	je     c00131b1 <Directory::unlink()+0x47>
c001318d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013193:	85 c9                	test   ecx,ecx
c0013195:	74 1a                	je     c00131b1 <Directory::unlink()+0x47>
c0013197:	b8 06 00 00 00       	mov    eax,0x6
c001319c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131a0:	75 0f                	jne    c00131b1 <Directory::unlink()+0x47>
c00131a2:	83 c2 0d             	add    edx,0xd
c00131a5:	50                   	push   eax
c00131a6:	50                   	push   eax
c00131a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131a9:	52                   	push   edx
c00131aa:	51                   	push   ecx
c00131ab:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00131ae:	83 c4 10             	add    esp,0x10
c00131b1:	83 c4 0c             	add    esp,0xc
c00131b4:	c3                   	ret    
c00131b5:	90                   	nop

c00131b6 <Directory::rename(char const*)>:
c00131b6:	83 ec 0c             	sub    esp,0xc
c00131b9:	b8 0b 00 00 00       	mov    eax,0xb
c00131be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131c9:	80 f9 19             	cmp    cl,0x19
c00131cc:	77 32                	ja     c0013200 <Directory::rename(char const*)+0x4a>
c00131ce:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c00131d5:	85 c9                	test   ecx,ecx
c00131d7:	74 27                	je     c0013200 <Directory::rename(char const*)+0x4a>
c00131d9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131df:	85 c9                	test   ecx,ecx
c00131e1:	74 1d                	je     c0013200 <Directory::rename(char const*)+0x4a>
c00131e3:	b8 06 00 00 00       	mov    eax,0x6
c00131e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131ec:	75 12                	jne    c0013200 <Directory::rename(char const*)+0x4a>
c00131ee:	83 c2 0d             	add    edx,0xd
c00131f1:	50                   	push   eax
c00131f2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131f8:	52                   	push   edx
c00131f9:	51                   	push   ecx
c00131fa:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	83 c4 0c             	add    esp,0xc
c0013203:	c3                   	ret    

c0013204 <Directory::exists()>:
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	31 c0                	xor    eax,eax
c0013209:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001320d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013214:	80 f9 19             	cmp    cl,0x19
c0013217:	77 24                	ja     c001323d <Directory::exists()+0x39>
c0013219:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c0013220:	85 c9                	test   ecx,ecx
c0013222:	74 19                	je     c001323d <Directory::exists()+0x39>
c0013224:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001322a:	85 c9                	test   ecx,ecx
c001322c:	74 0f                	je     c001323d <Directory::exists()+0x39>
c001322e:	83 c2 0d             	add    edx,0xd
c0013231:	50                   	push   eax
c0013232:	50                   	push   eax
c0013233:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013235:	52                   	push   edx
c0013236:	51                   	push   ecx
c0013237:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001323a:	83 c4 10             	add    esp,0x10
c001323d:	83 c4 0c             	add    esp,0xc
c0013240:	c3                   	ret    
c0013241:	90                   	nop

c0013242 <Directory::read(dirent*)>:
c0013242:	83 ec 1c             	sub    esp,0x1c
c0013245:	b8 0b 00 00 00       	mov    eax,0xb
c001324a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001324e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013255:	80 fa 19             	cmp    dl,0x19
c0013258:	77 30                	ja     c001328a <Directory::read(dirent*)+0x48>
c001325a:	8b 14 95 80 b0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4f80]
c0013261:	85 d2                	test   edx,edx
c0013263:	74 25                	je     c001328a <Directory::read(dirent*)+0x48>
c0013265:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001326c:	74 1c                	je     c001328a <Directory::read(dirent*)+0x48>
c001326e:	83 ec 0c             	sub    esp,0xc
c0013271:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013273:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013277:	52                   	push   edx
c0013278:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001327c:	6a 00                	push   0x0
c001327e:	68 10 01 00 00       	push   0x110
c0013283:	51                   	push   ecx
c0013284:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013287:	83 c4 20             	add    esp,0x20
c001328a:	83 c4 1c             	add    esp,0x1c
c001328d:	c3                   	ret    

c001328e <Directory::create()>:
c001328e:	83 ec 0c             	sub    esp,0xc
c0013291:	b8 0b 00 00 00       	mov    eax,0xb
c0013296:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001329a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a1:	80 f9 19             	cmp    cl,0x19
c00132a4:	77 2f                	ja     c00132d5 <Directory::create()+0x47>
c00132a6:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c00132ad:	85 c9                	test   ecx,ecx
c00132af:	74 24                	je     c00132d5 <Directory::create()+0x47>
c00132b1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b7:	85 c9                	test   ecx,ecx
c00132b9:	74 1a                	je     c00132d5 <Directory::create()+0x47>
c00132bb:	b8 06 00 00 00       	mov    eax,0x6
c00132c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132c4:	75 0f                	jne    c00132d5 <Directory::create()+0x47>
c00132c6:	83 c2 0d             	add    edx,0xd
c00132c9:	50                   	push   eax
c00132ca:	50                   	push   eax
c00132cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132cd:	52                   	push   edx
c00132ce:	51                   	push   ecx
c00132cf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00132d2:	83 c4 10             	add    esp,0x10
c00132d5:	83 c4 0c             	add    esp,0xc
c00132d8:	c3                   	ret    
c00132d9:	90                   	nop

c00132da <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00132da:	b8 0a 00 00 00       	mov    eax,0xa
c00132df:	c3                   	ret    

c00132e0 <Bus::Bus(char const*)>:
c00132e0:	83 ec 0c             	sub    esp,0xc
c00132e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e7:	83 ec 08             	sub    esp,0x8
c00132ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ee:	50                   	push   eax
c00132ef:	e8 30 09 00 00       	call   c0013c24 <Device::Device(char const*)>
c00132f4:	83 c4 10             	add    esp,0x10
c00132f7:	ba c8 79 02 c0       	mov    edx,0xc00279c8
c00132fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013300:	89 10                	mov    DWORD PTR [eax],edx
c0013302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013306:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013310:	90                   	nop
c0013311:	83 c4 0c             	add    esp,0xc
c0013314:	c3                   	ret    
c0013315:	90                   	nop

c0013316 <Bus::~Bus()>:
c0013316:	83 ec 0c             	sub    esp,0xc
c0013319:	ba c8 79 02 c0       	mov    edx,0xc00279c8
c001331e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013322:	89 10                	mov    DWORD PTR [eax],edx
c0013324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013328:	83 ec 0c             	sub    esp,0xc
c001332b:	50                   	push   eax
c001332c:	e8 d5 05 00 00       	call   c0013906 <Device::~Device()>
c0013331:	83 c4 10             	add    esp,0x10
c0013334:	90                   	nop
c0013335:	83 c4 0c             	add    esp,0xc
c0013338:	c3                   	ret    
c0013339:	90                   	nop

c001333a <Bus::~Bus()>:
c001333a:	83 ec 0c             	sub    esp,0xc
c001333d:	83 ec 0c             	sub    esp,0xc
c0013340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013344:	e8 cd ff ff ff       	call   c0013316 <Bus::~Bus()>
c0013349:	83 c4 10             	add    esp,0x10
c001334c:	83 ec 08             	sub    esp,0x8
c001334f:	68 58 01 00 00       	push   0x158
c0013354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013358:	e8 08 f2 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c001335d:	83 c4 10             	add    esp,0x10
c0013360:	83 c4 0c             	add    esp,0xc
c0013363:	c3                   	ret    

c0013364 <Buzzer::Buzzer(char const*)>:
c0013364:	83 ec 0c             	sub    esp,0xc
c0013367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001336b:	83 ec 08             	sub    esp,0x8
c001336e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013372:	50                   	push   eax
c0013373:	e8 ac 08 00 00       	call   c0013c24 <Device::Device(char const*)>
c0013378:	83 c4 10             	add    esp,0x10
c001337b:	ba f4 79 02 c0       	mov    edx,0xc00279f4
c0013380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013384:	89 10                	mov    DWORD PTR [eax],edx
c0013386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001338a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013398:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00133a2:	90                   	nop
c00133a3:	83 c4 0c             	add    esp,0xc
c00133a6:	c3                   	ret    
c00133a7:	90                   	nop

c00133a8 <Buzzer::~Buzzer()>:
c00133a8:	83 ec 0c             	sub    esp,0xc
c00133ab:	ba f4 79 02 c0       	mov    edx,0xc00279f4
c00133b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b4:	89 10                	mov    DWORD PTR [eax],edx
c00133b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ba:	83 ec 0c             	sub    esp,0xc
c00133bd:	50                   	push   eax
c00133be:	e8 43 05 00 00       	call   c0013906 <Device::~Device()>
c00133c3:	83 c4 10             	add    esp,0x10
c00133c6:	90                   	nop
c00133c7:	83 c4 0c             	add    esp,0xc
c00133ca:	c3                   	ret    
c00133cb:	90                   	nop

c00133cc <Buzzer::~Buzzer()>:
c00133cc:	83 ec 0c             	sub    esp,0xc
c00133cf:	83 ec 0c             	sub    esp,0xc
c00133d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d6:	e8 cd ff ff ff       	call   c00133a8 <Buzzer::~Buzzer()>
c00133db:	83 c4 10             	add    esp,0x10
c00133de:	83 ec 08             	sub    esp,0x8
c00133e1:	68 5c 01 00 00       	push   0x15c
c00133e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ea:	e8 76 f1 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	83 c4 0c             	add    esp,0xc
c00133f5:	c3                   	ret    

c00133f6 <Buzzer::stop()>:
c00133f6:	83 ec 14             	sub    esp,0x14
c00133f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00133ff:	6a 00                	push   0x0
c0013401:	50                   	push   eax
c0013402:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013405:	83 c4 1c             	add    esp,0x1c
c0013408:	c3                   	ret    

c0013409 <beepThread(void*)>:
c0013409:	53                   	push   ebx
c001340a:	83 ec 08             	sub    esp,0x8
c001340d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013411:	e8 01 8a 00 00       	call   c001be17 <unlockScheduler()>
c0013416:	b8 40 42 0f 00       	mov    eax,0xf4240
c001341b:	52                   	push   edx
c001341c:	52                   	push   edx
c001341d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013423:	52                   	push   edx
c0013424:	50                   	push   eax
c0013425:	e8 3a 8f 00 00       	call   c001c364 <nanoSleep(unsigned long long)>
c001342a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001342d:	e8 c4 ff ff ff       	call   c00133f6 <Buzzer::stop()>
c0013432:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001343a:	83 c4 18             	add    esp,0x18
c001343d:	5b                   	pop    ebx
c001343e:	e9 67 8e 00 00       	jmp    c001c2aa <blockTask(TaskState)>
c0013443:	90                   	nop

c0013444 <Buzzer::beep(int, int, bool)>:
c0013444:	57                   	push   edi
c0013445:	56                   	push   esi
c0013446:	53                   	push   ebx
c0013447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001344b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001344f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013453:	52                   	push   edx
c0013454:	52                   	push   edx
c0013455:	8b 06                	mov    eax,DWORD PTR [esi]
c0013457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001345b:	56                   	push   esi
c001345c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001345f:	83 c4 10             	add    esp,0x10
c0013462:	89 f8                	mov    eax,edi
c0013464:	84 c0                	test   al,al
c0013466:	74 1f                	je     c0013487 <Buzzer::beep(int, int, bool)+0x43>
c0013468:	50                   	push   eax
c0013469:	50                   	push   eax
c001346a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013470:	99                   	cdq    
c0013471:	52                   	push   edx
c0013472:	50                   	push   eax
c0013473:	e8 ec 8e 00 00       	call   c001c364 <nanoSleep(unsigned long long)>
c0013478:	83 c4 10             	add    esp,0x10
c001347b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001347f:	5b                   	pop    ebx
c0013480:	5e                   	pop    esi
c0013481:	5f                   	pop    edi
c0013482:	e9 6f ff ff ff       	jmp    c00133f6 <Buzzer::stop()>
c0013487:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001348d:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0013492:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001349a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001349e:	c7 44 24 14 09 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013409
c00134a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134aa:	5b                   	pop    ebx
c00134ab:	5e                   	pop    esi
c00134ac:	5f                   	pop    edi
c00134ad:	e9 94 8a 00 00       	jmp    c001bf46 <Process::createThread(void (*)(void*), void*, int)>

c00134b2 <loadClockSettings()>:
c00134b2:	c7 05 f4 ab 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002abf4,0xa
c00134bc:	c6 05 f1 ab 02 c0 00 	mov    BYTE PTR ds:0xc002abf1,0x0
c00134c3:	c6 05 f0 ab 02 c0 01 	mov    BYTE PTR ds:0xc002abf0,0x1
c00134ca:	c3                   	ret    
c00134cb:	90                   	nop

c00134cc <Clock::Clock(char const*)>:
c00134cc:	83 ec 0c             	sub    esp,0xc
c00134cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d3:	83 ec 08             	sub    esp,0x8
c00134d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134da:	50                   	push   eax
c00134db:	e8 44 07 00 00       	call   c0013c24 <Device::Device(char const*)>
c00134e0:	83 c4 10             	add    esp,0x10
c00134e3:	ba 24 7a 02 c0       	mov    edx,0xc0027a24
c00134e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ec:	89 10                	mov    DWORD PTR [eax],edx
c00134ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00134fc:	90                   	nop
c00134fd:	83 c4 0c             	add    esp,0xc
c0013500:	c3                   	ret    
c0013501:	90                   	nop

c0013502 <Clock::~Clock()>:
c0013502:	83 ec 0c             	sub    esp,0xc
c0013505:	ba 24 7a 02 c0       	mov    edx,0xc0027a24
c001350a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350e:	89 10                	mov    DWORD PTR [eax],edx
c0013510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	50                   	push   eax
c0013518:	e8 e9 03 00 00       	call   c0013906 <Device::~Device()>
c001351d:	83 c4 10             	add    esp,0x10
c0013520:	90                   	nop
c0013521:	83 c4 0c             	add    esp,0xc
c0013524:	c3                   	ret    
c0013525:	90                   	nop

c0013526 <Clock::~Clock()>:
c0013526:	83 ec 0c             	sub    esp,0xc
c0013529:	83 ec 0c             	sub    esp,0xc
c001352c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013530:	e8 cd ff ff ff       	call   c0013502 <Clock::~Clock()>
c0013535:	83 c4 10             	add    esp,0x10
c0013538:	83 ec 08             	sub    esp,0x8
c001353b:	68 58 01 00 00       	push   0x158
c0013540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013544:	e8 1c f0 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0013549:	83 c4 10             	add    esp,0x10
c001354c:	83 c4 0c             	add    esp,0xc
c001354f:	c3                   	ret    

c0013550 <Clock::timeInSecondsLocal()>:
c0013550:	53                   	push   ebx
c0013551:	83 ec 14             	sub    esp,0x14
c0013554:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013558:	8b 10                	mov    edx,DWORD PTR [eax]
c001355a:	50                   	push   eax
c001355b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001355e:	0f b6 0d f0 ab 02 c0 	movzx  ecx,BYTE PTR ds:0xc002abf0
c0013565:	03 0d f4 ab 02 c0    	add    ecx,DWORD PTR ds:0xc002abf4
c001356b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013571:	89 cb                	mov    ebx,ecx
c0013573:	c1 fb 1f             	sar    ebx,0x1f
c0013576:	01 c8                	add    eax,ecx
c0013578:	11 da                	adc    edx,ebx
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	31 c9                	xor    ecx,ecx
c001357f:	80 3d f1 ab 02 c0 00 	cmp    BYTE PTR ds:0xc002abf1,0x0
c0013586:	74 05                	je     c001358d <Clock::timeInSecondsLocal()+0x3d>
c0013588:	b9 08 07 00 00       	mov    ecx,0x708
c001358d:	31 db                	xor    ebx,ebx
c001358f:	01 c8                	add    eax,ecx
c0013591:	11 da                	adc    edx,ebx
c0013593:	83 c4 08             	add    esp,0x8
c0013596:	5b                   	pop    ebx
c0013597:	c3                   	ret    

c0013598 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013598:	57                   	push   edi
c0013599:	56                   	push   esi
c001359a:	53                   	push   ebx
c001359b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001359f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00135a9:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00135ac:	0f b6 05 f0 ab 02 c0 	movzx  eax,BYTE PTR ds:0xc002abf0
c00135b3:	03 05 f4 ab 02 c0    	add    eax,DWORD PTR ds:0xc002abf4
c00135b9:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00135bf:	99                   	cdq    
c00135c0:	29 c6                	sub    esi,eax
c00135c2:	19 d7                	sbb    edi,edx
c00135c4:	89 f0                	mov    eax,esi
c00135c6:	89 fa                	mov    edx,edi
c00135c8:	31 f6                	xor    esi,esi
c00135ca:	80 3d f1 ab 02 c0 00 	cmp    BYTE PTR ds:0xc002abf1,0x0
c00135d1:	74 05                	je     c00135d8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00135d3:	be 08 07 00 00       	mov    esi,0x708
c00135d8:	31 ff                	xor    edi,edi
c00135da:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00135de:	29 f0                	sub    eax,esi
c00135e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00135e4:	19 fa                	sbb    edx,edi
c00135e6:	89 d8                	mov    eax,ebx
c00135e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00135ec:	5b                   	pop    ebx
c00135ed:	5e                   	pop    esi
c00135ee:	5f                   	pop    edi
c00135ef:	ff e0                	jmp    eax

c00135f1 <datetimeToSeconds(datetime_t)>:
c00135f1:	55                   	push   ebp
c00135f2:	57                   	push   edi
c00135f3:	56                   	push   esi
c00135f4:	53                   	push   ebx
c00135f5:	83 ec 14             	sub    esp,0x14
c00135f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00135fc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013600:	89 d3                	mov    ebx,edx
c0013602:	0f b6 c6             	movzx  eax,dh
c0013605:	c1 eb 10             	shr    ebx,0x10
c0013608:	48                   	dec    eax
c0013609:	66 81 eb 6c 07       	sub    bx,0x76c
c001360e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013612:	0f b6 f5             	movzx  esi,ch
c0013615:	89 cf                	mov    edi,ecx
c0013617:	6b f6 3c             	imul   esi,esi,0x3c
c001361a:	c1 ef 10             	shr    edi,0x10
c001361d:	0f b6 c9             	movzx  ecx,cl
c0013620:	89 f8                	mov    eax,edi
c0013622:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013628:	0f b6 f8             	movzx  edi,al
c001362b:	0f b6 d2             	movzx  edx,dl
c001362e:	01 fe                	add    esi,edi
c0013630:	01 f1                	add    ecx,esi
c0013632:	0f b7 f3             	movzx  esi,bx
c0013635:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013639:	c1 f9 1f             	sar    ecx,0x1f
c001363c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013641:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013645:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001364a:	8b 0c 8d 60 7a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd85a0]
c0013651:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013655:	76 29                	jbe    c0013680 <datetimeToSeconds(datetime_t)+0x8f>
c0013657:	f6 c3 03             	test   bl,0x3
c001365a:	75 24                	jne    c0013680 <datetimeToSeconds(datetime_t)+0x8f>
c001365c:	31 d2                	xor    edx,edx
c001365e:	bf 64 00 00 00       	mov    edi,0x64
c0013663:	89 d8                	mov    eax,ebx
c0013665:	66 f7 f7             	div    di
c0013668:	66 85 d2             	test   dx,dx
c001366b:	75 12                	jne    c001367f <datetimeToSeconds(datetime_t)+0x8e>
c001366d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013673:	bf 90 01 00 00       	mov    edi,0x190
c0013678:	99                   	cdq    
c0013679:	f7 ff                	idiv   edi
c001367b:	85 d2                	test   edx,edx
c001367d:	75 01                	jne    c0013680 <datetimeToSeconds(datetime_t)+0x8f>
c001367f:	41                   	inc    ecx
c0013680:	66 83 fb 46          	cmp    bx,0x46
c0013684:	76 45                	jbe    c00136cb <datetimeToSeconds(datetime_t)+0xda>
c0013686:	bb 46 00 00 00       	mov    ebx,0x46
c001368b:	bf 64 00 00 00       	mov    edi,0x64
c0013690:	bd 90 01 00 00       	mov    ebp,0x190
c0013695:	b8 6d 01 00 00       	mov    eax,0x16d
c001369a:	f6 c3 03             	test   bl,0x3
c001369d:	75 23                	jne    c00136c2 <datetimeToSeconds(datetime_t)+0xd1>
c001369f:	89 d8                	mov    eax,ebx
c00136a1:	99                   	cdq    
c00136a2:	f7 ff                	idiv   edi
c00136a4:	b8 6e 01 00 00       	mov    eax,0x16e
c00136a9:	85 d2                	test   edx,edx
c00136ab:	75 15                	jne    c00136c2 <datetimeToSeconds(datetime_t)+0xd1>
c00136ad:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00136b3:	99                   	cdq    
c00136b4:	f7 fd                	idiv   ebp
c00136b6:	83 fa 01             	cmp    edx,0x1
c00136b9:	19 c0                	sbb    eax,eax
c00136bb:	f7 d0                	not    eax
c00136bd:	05 6e 01 00 00       	add    eax,0x16e
c00136c2:	01 c1                	add    ecx,eax
c00136c4:	43                   	inc    ebx
c00136c5:	39 f3                	cmp    ebx,esi
c00136c7:	7c cc                	jl     c0013695 <datetimeToSeconds(datetime_t)+0xa4>
c00136c9:	eb 35                	jmp    c0013700 <datetimeToSeconds(datetime_t)+0x10f>
c00136cb:	74 33                	je     c0013700 <datetimeToSeconds(datetime_t)+0x10f>
c00136cd:	b8 45 00 00 00       	mov    eax,0x45
c00136d2:	89 c2                	mov    edx,eax
c00136d4:	83 e2 03             	and    edx,0x3
c00136d7:	39 f0                	cmp    eax,esi
c00136d9:	7e 0f                	jle    c00136ea <datetimeToSeconds(datetime_t)+0xf9>
c00136db:	83 fa 01             	cmp    edx,0x1
c00136de:	19 d2                	sbb    edx,edx
c00136e0:	48                   	dec    eax
c00136e1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00136e8:	eb e8                	jmp    c00136d2 <datetimeToSeconds(datetime_t)+0xe1>
c00136ea:	b8 6d 01 00 00       	mov    eax,0x16d
c00136ef:	85 d2                	test   edx,edx
c00136f1:	75 0b                	jne    c00136fe <datetimeToSeconds(datetime_t)+0x10d>
c00136f3:	66 83 fb 01          	cmp    bx,0x1
c00136f7:	19 c0                	sbb    eax,eax
c00136f9:	05 6e 01 00 00       	add    eax,0x16e
c00136fe:	29 c1                	sub    ecx,eax
c0013700:	b8 80 51 01 00       	mov    eax,0x15180
c0013705:	f7 e9                	imul   ecx
c0013707:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001370b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001370f:	83 c4 14             	add    esp,0x14
c0013712:	5b                   	pop    ebx
c0013713:	5e                   	pop    esi
c0013714:	5f                   	pop    edi
c0013715:	5d                   	pop    ebp
c0013716:	c3                   	ret    
c0013717:	90                   	nop

c0013718 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013718:	57                   	push   edi
c0013719:	56                   	push   esi
c001371a:	53                   	push   ebx
c001371b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001371f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013721:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013724:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013728:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001372c:	e8 c0 fe ff ff       	call   c00135f1 <datetimeToSeconds(datetime_t)>
c0013731:	59                   	pop    ecx
c0013732:	0f b6 0d f0 ab 02 c0 	movzx  ecx,BYTE PTR ds:0xc002abf0
c0013739:	5b                   	pop    ebx
c001373a:	03 0d f4 ab 02 c0    	add    ecx,DWORD PTR ds:0xc002abf4
c0013740:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013746:	89 cb                	mov    ebx,ecx
c0013748:	c1 fb 1f             	sar    ebx,0x1f
c001374b:	29 c8                	sub    eax,ecx
c001374d:	19 da                	sbb    edx,ebx
c001374f:	31 c9                	xor    ecx,ecx
c0013751:	80 3d f1 ab 02 c0 00 	cmp    BYTE PTR ds:0xc002abf1,0x0
c0013758:	74 05                	je     c001375f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001375a:	b9 08 07 00 00       	mov    ecx,0x708
c001375f:	31 db                	xor    ebx,ebx
c0013761:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013765:	29 c8                	sub    eax,ecx
c0013767:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001376b:	19 da                	sbb    edx,ebx
c001376d:	89 f8                	mov    eax,edi
c001376f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013773:	5b                   	pop    ebx
c0013774:	5e                   	pop    esi
c0013775:	5f                   	pop    edi
c0013776:	ff e0                	jmp    eax

c0013778 <secondsToDatetime(unsigned long long)>:
c0013778:	55                   	push   ebp
c0013779:	57                   	push   edi
c001377a:	56                   	push   esi
c001377b:	53                   	push   ebx
c001377c:	83 ec 1c             	sub    esp,0x1c
c001377f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013783:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013787:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001378b:	6a 00                	push   0x0
c001378d:	68 80 51 01 00       	push   0x15180
c0013792:	55                   	push   ebp
c0013793:	57                   	push   edi
c0013794:	e8 c3 02 01 00       	call   c0023a5c <__udivdi3>
c0013799:	83 c4 10             	add    esp,0x10
c001379c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00137a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137a6:	6a 00                	push   0x0
c00137a8:	68 80 51 01 00       	push   0x15180
c00137ad:	55                   	push   ebp
c00137ae:	57                   	push   edi
c00137af:	bf 10 0e 00 00       	mov    edi,0xe10
c00137b4:	e8 a3 03 01 00       	call   c0023b5c <__umoddi3>
c00137b9:	83 c4 10             	add    esp,0x10
c00137bc:	99                   	cdq    
c00137bd:	f7 ff                	idiv   edi
c00137bf:	bf 3c 00 00 00       	mov    edi,0x3c
c00137c4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00137c7:	89 d0                	mov    eax,edx
c00137c9:	99                   	cdq    
c00137ca:	f7 ff                	idiv   edi
c00137cc:	85 db                	test   ebx,ebx
c00137ce:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00137d1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00137d4:	79 11                	jns    c00137e7 <secondsToDatetime(unsigned long long)+0x6f>
c00137d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137da:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00137e0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137e5:	eb 07                	jmp    c00137ee <secondsToDatetime(unsigned long long)+0x76>
c00137e7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137ec:	89 d8                	mov    eax,ebx
c00137ee:	bf b4 05 00 00       	mov    edi,0x5b4
c00137f3:	99                   	cdq    
c00137f4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00137f9:	f7 f9                	idiv   ecx
c00137fb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013804:	31 d2                	xor    edx,edx
c0013806:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001380e:	01 c3                	add    ebx,eax
c0013810:	89 d8                	mov    eax,ebx
c0013812:	f7 f1                	div    ecx
c0013814:	31 d2                	xor    edx,edx
c0013816:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013819:	89 d8                	mov    eax,ebx
c001381b:	f7 f7                	div    edi
c001381d:	31 d2                	xor    edx,edx
c001381f:	29 c1                	sub    ecx,eax
c0013821:	89 d8                	mov    eax,ebx
c0013823:	f7 f5                	div    ebp
c0013825:	bd 6d 01 00 00       	mov    ebp,0x16d
c001382a:	29 c1                	sub    ecx,eax
c001382c:	31 d2                	xor    edx,edx
c001382e:	89 c8                	mov    eax,ecx
c0013830:	f7 f5                	div    ebp
c0013832:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001383b:	31 d2                	xor    edx,edx
c001383d:	89 c8                	mov    eax,ecx
c001383f:	f7 f5                	div    ebp
c0013841:	31 d2                	xor    edx,edx
c0013843:	01 c3                	add    ebx,eax
c0013845:	89 c8                	mov    eax,ecx
c0013847:	f7 f7                	div    edi
c0013849:	bf 99 00 00 00       	mov    edi,0x99
c001384e:	29 c3                	sub    ebx,eax
c0013850:	31 d2                	xor    edx,edx
c0013852:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001385a:	29 c3                	sub    ebx,eax
c001385c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001385f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013862:	bb 05 00 00 00       	mov    ebx,0x5
c0013867:	83 c1 02             	add    ecx,0x2
c001386a:	89 c8                	mov    eax,ecx
c001386c:	f7 f7                	div    edi
c001386e:	31 d2                	xor    edx,edx
c0013870:	89 c7                	mov    edi,eax
c0013872:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013878:	83 c0 02             	add    eax,0x2
c001387b:	f7 f3                	div    ebx
c001387d:	89 eb                	mov    ebx,ebp
c001387f:	29 c3                	sub    ebx,eax
c0013881:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013887:	88 1e                	mov    BYTE PTR [esi],bl
c0013889:	19 c0                	sbb    eax,eax
c001388b:	31 d2                	xor    edx,edx
c001388d:	83 e0 0c             	and    eax,0xc
c0013890:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013894:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001389c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00138a0:	83 f9 01             	cmp    ecx,0x1
c00138a3:	0f 96 c2             	setbe  dl
c00138a6:	41                   	inc    ecx
c00138a7:	01 d0                	add    eax,edx
c00138a9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00138ac:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00138b0:	83 c4 1c             	add    esp,0x1c
c00138b3:	89 f0                	mov    eax,esi
c00138b5:	5b                   	pop    ebx
c00138b6:	5e                   	pop    esi
c00138b7:	5f                   	pop    edi
c00138b8:	5d                   	pop    ebp
c00138b9:	c2 04 00             	ret    0x4

c00138bc <Clock::timeInDatetimeLocal()>:
c00138bc:	53                   	push   ebx
c00138bd:	83 ec 14             	sub    esp,0x14
c00138c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00138c8:	e8 83 fc ff ff       	call   c0013550 <Clock::timeInSecondsLocal()>
c00138cd:	83 c4 0c             	add    esp,0xc
c00138d0:	52                   	push   edx
c00138d1:	50                   	push   eax
c00138d2:	53                   	push   ebx
c00138d3:	e8 a0 fe ff ff       	call   c0013778 <secondsToDatetime(unsigned long long)>
c00138d8:	89 d8                	mov    eax,ebx
c00138da:	83 c4 14             	add    esp,0x14
c00138dd:	5b                   	pop    ebx
c00138de:	c2 04 00             	ret    0x4
c00138e1:	90                   	nop

c00138e2 <Device::hibernate()>:
c00138e2:	c3                   	ret    
c00138e3:	90                   	nop

c00138e4 <Device::wake()>:
c00138e4:	c3                   	ret    
c00138e5:	90                   	nop

c00138e6 <Device::detect()>:
c00138e6:	c3                   	ret    
c00138e7:	90                   	nop

c00138e8 <Device::disableLegacy()>:
c00138e8:	c3                   	ret    
c00138e9:	90                   	nop

c00138ea <Device::powerSaving(PowerSavingLevel)>:
c00138ea:	c3                   	ret    
c00138eb:	90                   	nop

c00138ec <DriverlessDevice::close(int, int, void*)>:
c00138ec:	31 c0                	xor    eax,eax
c00138ee:	c3                   	ret    
c00138ef:	90                   	nop

c00138f0 <DriverlessDevice::detect()>:
c00138f0:	c3                   	ret    
c00138f1:	90                   	nop

c00138f2 <DriverlessDevice::open(int, int, void*)>:
c00138f2:	83 ec 18             	sub    esp,0x18
c00138f5:	68 90 7a 02 c0       	push   0xc0027a90
c00138fa:	e8 0a 55 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c00138ff:	83 c8 ff             	or     eax,0xffffffff
c0013902:	83 c4 1c             	add    esp,0x1c
c0013905:	c3                   	ret    

c0013906 <Device::~Device()>:
c0013906:	ba b8 7a 02 c0       	mov    edx,0xc0027ab8
c001390b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001390f:	89 10                	mov    DWORD PTR [eax],edx
c0013911:	90                   	nop
c0013912:	c3                   	ret    
c0013913:	90                   	nop

c0013914 <Device::~Device()>:
c0013914:	83 ec 0c             	sub    esp,0xc
c0013917:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001391b:	e8 e6 ff ff ff       	call   c0013906 <Device::~Device()>
c0013920:	83 c4 04             	add    esp,0x4
c0013923:	83 ec 08             	sub    esp,0x8
c0013926:	68 58 01 00 00       	push   0x158
c001392b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001392f:	e8 31 ec ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0013934:	83 c4 10             	add    esp,0x10
c0013937:	83 c4 0c             	add    esp,0xc
c001393a:	c3                   	ret    
c001393b:	90                   	nop

c001393c <Device::findAndLoadDriver()>:
c001393c:	c3                   	ret    
c001393d:	90                   	nop

c001393e <Device::preOpenPCI(PCIDeviceInfo)>:
c001393e:	57                   	push   edi
c001393f:	b9 09 00 00 00       	mov    ecx,0x9
c0013944:	56                   	push   esi
c0013945:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013949:	8d 74 24 10          	lea    esi,[esp+0x10]
c001394d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013957:	81 c7 18 01 00 00    	add    edi,0x118
c001395d:	fc                   	cld    
c001395e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013960:	5e                   	pop    esi
c0013961:	5f                   	pop    edi
c0013962:	c3                   	ret    
c0013963:	90                   	nop

c0013964 <Device::preOpenACPI(void*, char*, char*)>:
c0013964:	56                   	push   esi
c0013965:	53                   	push   ebx
c0013966:	83 ec 08             	sub    esp,0x8
c0013969:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001396d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013971:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001397b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001397f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013985:	6a 1e                	push   0x1e
c0013987:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001398d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013991:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013997:	50                   	push   eax
c0013998:	e8 aa cc fe ff       	call   c0000647 <memcpy>
c001399d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00139a1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00139a5:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00139ad:	83 c4 14             	add    esp,0x14
c00139b0:	5b                   	pop    ebx
c00139b1:	5e                   	pop    esi
c00139b2:	e9 90 cc fe ff       	jmp    c0000647 <memcpy>
c00139b7:	90                   	nop

c00139b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00139b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139bc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139c1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139c8:	75 0b                	jne    c00139d5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00139ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00139cc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00139d3:	eb 1e                	jmp    c00139f3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00139d5:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00139da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139e0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139e8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139f0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00139f3:	ff e0                	jmp    eax
c00139f5:	90                   	nop

c00139f6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00139f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139fa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139ff:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a06:	75 0b                	jne    c0013a13 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a08:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a0e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a11:	eb 1e                	jmp    c0013a31 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a13:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0013a18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a1e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a24:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a26:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a2e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a31:	ff e0                	jmp    eax
c0013a33:	90                   	nop

c0013a34 <Device::addChild(Device*)>:
c0013a34:	53                   	push   ebx
c0013a35:	83 ec 08             	sub    esp,0x8
c0013a38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a40:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a46:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a4c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a4e:	85 d2                	test   edx,edx
c0013a50:	74 04                	je     c0013a56 <Device::addChild(Device*)+0x22>
c0013a52:	89 d3                	mov    ebx,edx
c0013a54:	eb f6                	jmp    c0013a4c <Device::addChild(Device*)+0x18>
c0013a56:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a59:	83 ec 0c             	sub    esp,0xc
c0013a5c:	6a 08                	push   0x8
c0013a5e:	e8 6f ba ff ff       	call   c000f4d2 <malloc>
c0013a63:	89 03                	mov    DWORD PTR [ebx],eax
c0013a65:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a72:	83 c4 18             	add    esp,0x18
c0013a75:	5b                   	pop    ebx
c0013a76:	c3                   	ret    
c0013a77:	90                   	nop

c0013a78 <Device::removeAllChildren()>:
c0013a78:	56                   	push   esi
c0013a79:	53                   	push   ebx
c0013a7a:	52                   	push   edx
c0013a7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a7f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013a85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a88:	74 17                	je     c0013aa1 <Device::removeAllChildren()+0x29>
c0013a8a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a8d:	85 c0                	test   eax,eax
c0013a8f:	74 0c                	je     c0013a9d <Device::removeAllChildren()+0x25>
c0013a91:	83 ec 0c             	sub    esp,0xc
c0013a94:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a96:	50                   	push   eax
c0013a97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a9a:	83 c4 10             	add    esp,0x10
c0013a9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a9f:	eb e4                	jmp    c0013a85 <Device::removeAllChildren()+0xd>
c0013aa1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013aa7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013aad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013ab3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013aba:	58                   	pop    eax
c0013abb:	5b                   	pop    ebx
c0013abc:	5e                   	pop    esi
c0013abd:	c3                   	ret    

c0013abe <Device::hibernateAll()>:
c0013abe:	53                   	push   ebx
c0013abf:	83 ec 14             	sub    esp,0x14
c0013ac2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ac6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ac8:	53                   	push   ebx
c0013ac9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013acc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ad8:	74 0f                	je     c0013ae9 <Device::hibernateAll()+0x2b>
c0013ada:	83 ec 0c             	sub    esp,0xc
c0013add:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ae0:	e8 d9 ff ff ff       	call   c0013abe <Device::hibernateAll()>
c0013ae5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ae7:	eb e9                	jmp    c0013ad2 <Device::hibernateAll()+0x14>
c0013ae9:	83 c4 08             	add    esp,0x8
c0013aec:	5b                   	pop    ebx
c0013aed:	c3                   	ret    

c0013aee <Device::wakeAll()>:
c0013aee:	53                   	push   ebx
c0013aef:	83 ec 14             	sub    esp,0x14
c0013af2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013af6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013af8:	53                   	push   ebx
c0013af9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013afc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b02:	83 c4 10             	add    esp,0x10
c0013b05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b08:	74 0f                	je     c0013b19 <Device::wakeAll()+0x2b>
c0013b0a:	83 ec 0c             	sub    esp,0xc
c0013b0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b10:	e8 d9 ff ff ff       	call   c0013aee <Device::wakeAll()>
c0013b15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b17:	eb e9                	jmp    c0013b02 <Device::wakeAll()+0x14>
c0013b19:	83 c4 08             	add    esp,0x8
c0013b1c:	5b                   	pop    ebx
c0013b1d:	c3                   	ret    

c0013b1e <Device::detectAll()>:
c0013b1e:	53                   	push   ebx
c0013b1f:	83 ec 14             	sub    esp,0x14
c0013b22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b28:	53                   	push   ebx
c0013b29:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b2c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b32:	83 c4 10             	add    esp,0x10
c0013b35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b38:	74 0f                	je     c0013b49 <Device::detectAll()+0x2b>
c0013b3a:	83 ec 0c             	sub    esp,0xc
c0013b3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b40:	e8 d9 ff ff ff       	call   c0013b1e <Device::detectAll()>
c0013b45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b47:	eb e9                	jmp    c0013b32 <Device::detectAll()+0x14>
c0013b49:	83 c4 08             	add    esp,0x8
c0013b4c:	5b                   	pop    ebx
c0013b4d:	c3                   	ret    

c0013b4e <Device::disableLegacyAll()>:
c0013b4e:	53                   	push   ebx
c0013b4f:	83 ec 14             	sub    esp,0x14
c0013b52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b58:	53                   	push   ebx
c0013b59:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b5c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b62:	83 c4 10             	add    esp,0x10
c0013b65:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b68:	74 0f                	je     c0013b79 <Device::disableLegacyAll()+0x2b>
c0013b6a:	83 ec 0c             	sub    esp,0xc
c0013b6d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b70:	e8 d9 ff ff ff       	call   c0013b4e <Device::disableLegacyAll()>
c0013b75:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b77:	eb e9                	jmp    c0013b62 <Device::disableLegacyAll()+0x14>
c0013b79:	83 c4 08             	add    esp,0x8
c0013b7c:	5b                   	pop    ebx
c0013b7d:	c3                   	ret    

c0013b7e <Device::loadDriversForAll()>:
c0013b7e:	53                   	push   ebx
c0013b7f:	83 ec 08             	sub    esp,0x8
c0013b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b86:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013b8c:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013b8e:	85 db                	test   ebx,ebx
c0013b90:	74 12                	je     c0013ba4 <Device::loadDriversForAll()+0x26>
c0013b92:	83 ec 0c             	sub    esp,0xc
c0013b95:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013b98:	e8 e1 ff ff ff       	call   c0013b7e <Device::loadDriversForAll()>
c0013b9d:	83 c4 10             	add    esp,0x10
c0013ba0:	89 d8                	mov    eax,ebx
c0013ba2:	eb e8                	jmp    c0013b8c <Device::loadDriversForAll()+0xe>
c0013ba4:	83 c4 08             	add    esp,0x8
c0013ba7:	5b                   	pop    ebx
c0013ba8:	c3                   	ret    
c0013ba9:	90                   	nop

c0013baa <Device::closeAll()>:
c0013baa:	53                   	push   ebx
c0013bab:	83 ec 08             	sub    esp,0x8
c0013bae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb4:	6a 00                	push   0x0
c0013bb6:	6a 00                	push   0x0
c0013bb8:	6a 00                	push   0x0
c0013bba:	53                   	push   ebx
c0013bbb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bbe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bc4:	83 c4 10             	add    esp,0x10
c0013bc7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bca:	74 0f                	je     c0013bdb <Device::closeAll()+0x31>
c0013bcc:	83 ec 0c             	sub    esp,0xc
c0013bcf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bd2:	e8 d3 ff ff ff       	call   c0013baa <Device::closeAll()>
c0013bd7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bd9:	eb e9                	jmp    c0013bc4 <Device::closeAll()+0x1a>
c0013bdb:	83 c4 08             	add    esp,0x8
c0013bde:	5b                   	pop    ebx
c0013bdf:	c3                   	ret    

c0013be0 <Device::powerSavingAll(PowerSavingLevel)>:
c0013be0:	56                   	push   esi
c0013be1:	53                   	push   ebx
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013be9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013bed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bef:	56                   	push   esi
c0013bf0:	53                   	push   ebx
c0013bf1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013bf4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bfa:	83 c4 10             	add    esp,0x10
c0013bfd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c00:	74 0f                	je     c0013c11 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c02:	52                   	push   edx
c0013c03:	52                   	push   edx
c0013c04:	56                   	push   esi
c0013c05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c08:	e8 d3 ff ff ff       	call   c0013be0 <Device::powerSavingAll(PowerSavingLevel)>
c0013c0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c0f:	eb e9                	jmp    c0013bfa <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c11:	58                   	pop    eax
c0013c12:	5b                   	pop    ebx
c0013c13:	5e                   	pop    esi
c0013c14:	c3                   	ret    
c0013c15:	90                   	nop

c0013c16 <Device::setName(char const*)>:
c0013c16:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c1e:	e9 f9 ca fe ff       	jmp    c000071c <strcpy>
c0013c23:	90                   	nop

c0013c24 <Device::Device(char const*)>:
c0013c24:	83 ec 1c             	sub    esp,0x1c
c0013c27:	ba b8 7a 02 c0       	mov    edx,0xc0027ab8
c0013c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c30:	89 10                	mov    DWORD PTR [eax],edx
c0013c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c36:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c44:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c52:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c60:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c6a:	83 ec 08             	sub    esp,0x8
c0013c6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c75:	e8 9c ff ff ff       	call   c0013c16 <Device::setName(char const*)>
c0013c7a:	83 c4 10             	add    esp,0x10
c0013c7d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c85:	83 ec 0c             	sub    esp,0xc
c0013c88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c8c:	e8 41 b8 ff ff       	call   c000f4d2 <malloc>
c0013c91:	83 c4 10             	add    esp,0x10
c0013c94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ca1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ca5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013caf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cbf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013cd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cdb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013ce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d02:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d10:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d1a:	90                   	nop
c0013d1b:	83 c4 1c             	add    esp,0x1c
c0013d1e:	c3                   	ret    
c0013d1f:	90                   	nop

c0013d20 <Device::getName()>:
c0013d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d24:	05 d0 00 00 00       	add    eax,0xd0
c0013d29:	c3                   	ret    

c0013d2a <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d2a:	83 ec 0c             	sub    esp,0xc
c0013d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d31:	83 ec 08             	sub    esp,0x8
c0013d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d38:	50                   	push   eax
c0013d39:	e8 e6 fe ff ff       	call   c0013c24 <Device::Device(char const*)>
c0013d3e:	83 c4 10             	add    esp,0x10
c0013d41:	ba e4 7a 02 c0       	mov    edx,0xc0027ae4
c0013d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4a:	89 10                	mov    DWORD PTR [eax],edx
c0013d4c:	90                   	nop
c0013d4d:	83 c4 0c             	add    esp,0xc
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d52:	57                   	push   edi
c0013d53:	56                   	push   esi
c0013d54:	53                   	push   ebx
c0013d55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d59:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d61:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013d67:	75 0c                	jne    c0013d75 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d69:	52                   	push   edx
c0013d6a:	52                   	push   edx
c0013d6b:	53                   	push   ebx
c0013d6c:	56                   	push   esi
c0013d6d:	e8 28 1c 01 00       	call   c002599a <LinkedList<Device>::addElement(Device*)>
c0013d72:	83 c4 10             	add    esp,0x10
c0013d75:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d7e:	74 12                	je     c0013d92 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013d80:	50                   	push   eax
c0013d81:	57                   	push   edi
c0013d82:	56                   	push   esi
c0013d83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d86:	e8 c7 ff ff ff       	call   c0013d52 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	eb e9                	jmp    c0013d7b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013d92:	5b                   	pop    ebx
c0013d93:	5e                   	pop    esi
c0013d94:	5f                   	pop    edi
c0013d95:	c3                   	ret    

c0013d96 <getDevicesOfType(DeviceType)>:
c0013d96:	53                   	push   ebx
c0013d97:	83 ec 14             	sub    esp,0x14
c0013d9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d9e:	53                   	push   ebx
c0013d9f:	e8 d2 1c 01 00       	call   c0025a76 <LinkedList<Device>::LinkedList()>
c0013da4:	83 c4 0c             	add    esp,0xc
c0013da7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dab:	53                   	push   ebx
c0013dac:	ff 35 88 aa 02 c0    	push   DWORD PTR ds:0xc002aa88
c0013db2:	e8 9b ff ff ff       	call   c0013d52 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013db7:	89 d8                	mov    eax,ebx
c0013db9:	83 c4 18             	add    esp,0x18
c0013dbc:	5b                   	pop    ebx
c0013dbd:	c2 04 00             	ret    0x4

c0013dc0 <HardDiskController::HardDiskController(char const*)>:
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc7:	83 ec 08             	sub    esp,0x8
c0013dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dce:	50                   	push   eax
c0013dcf:	e8 50 fe ff ff       	call   c0013c24 <Device::Device(char const*)>
c0013dd4:	83 c4 10             	add    esp,0x10
c0013dd7:	ba 10 7b 02 c0       	mov    edx,0xc0027b10
c0013ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de0:	89 10                	mov    DWORD PTR [eax],edx
c0013de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013df0:	90                   	nop
c0013df1:	83 c4 0c             	add    esp,0xc
c0013df4:	c3                   	ret    
c0013df5:	90                   	nop

c0013df6 <HardDiskController::~HardDiskController()>:
c0013df6:	83 ec 0c             	sub    esp,0xc
c0013df9:	ba 10 7b 02 c0       	mov    edx,0xc0027b10
c0013dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e02:	89 10                	mov    DWORD PTR [eax],edx
c0013e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	50                   	push   eax
c0013e0c:	e8 f5 fa ff ff       	call   c0013906 <Device::~Device()>
c0013e11:	83 c4 10             	add    esp,0x10
c0013e14:	90                   	nop
c0013e15:	83 c4 0c             	add    esp,0xc
c0013e18:	c3                   	ret    
c0013e19:	90                   	nop

c0013e1a <HardDiskController::~HardDiskController()>:
c0013e1a:	83 ec 0c             	sub    esp,0xc
c0013e1d:	83 ec 0c             	sub    esp,0xc
c0013e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e24:	e8 cd ff ff ff       	call   c0013df6 <HardDiskController::~HardDiskController()>
c0013e29:	83 c4 10             	add    esp,0x10
c0013e2c:	83 ec 08             	sub    esp,0x8
c0013e2f:	68 58 01 00 00       	push   0x158
c0013e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e38:	e8 28 e7 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0013e3d:	83 c4 10             	add    esp,0x10
c0013e40:	83 c4 0c             	add    esp,0xc
c0013e43:	c3                   	ret    

c0013e44 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4b:	83 ec 08             	sub    esp,0x8
c0013e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e52:	50                   	push   eax
c0013e53:	e8 cc fd ff ff       	call   c0013c24 <Device::Device(char const*)>
c0013e58:	83 c4 10             	add    esp,0x10
c0013e5b:	ba 3c 7b 02 c0       	mov    edx,0xc0027b3c
c0013e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e64:	89 10                	mov    DWORD PTR [eax],edx
c0013e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e75:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e80:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e9c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ea6:	90                   	nop
c0013ea7:	83 c4 0c             	add    esp,0xc
c0013eaa:	c3                   	ret    
c0013eab:	90                   	nop

c0013eac <PhysicalDisk::startCache()>:
c0013eac:	56                   	push   esi
c0013ead:	53                   	push   ebx
c0013eae:	83 ec 10             	sub    esp,0x10
c0013eb1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eb5:	6a 30                	push   0x30
c0013eb7:	e8 16 b6 ff ff       	call   c000f4d2 <malloc>
c0013ebc:	89 c6                	mov    esi,eax
c0013ebe:	58                   	pop    eax
c0013ebf:	5a                   	pop    edx
c0013ec0:	53                   	push   ebx
c0013ec1:	56                   	push   esi
c0013ec2:	e8 df 24 00 00       	call   c00163a6 <VCache::VCache(PhysicalDisk*)>
c0013ec7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ecd:	83 c4 14             	add    esp,0x14
c0013ed0:	5b                   	pop    ebx
c0013ed1:	5e                   	pop    esi
c0013ed2:	c3                   	ret    
c0013ed3:	90                   	nop

c0013ed4 <PhysicalDisk::~PhysicalDisk()>:
c0013ed4:	83 ec 0c             	sub    esp,0xc
c0013ed7:	ba 3c 7b 02 c0       	mov    edx,0xc0027b3c
c0013edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee0:	89 10                	mov    DWORD PTR [eax],edx
c0013ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	50                   	push   eax
c0013eea:	e8 17 fa ff ff       	call   c0013906 <Device::~Device()>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	90                   	nop
c0013ef3:	83 c4 0c             	add    esp,0xc
c0013ef6:	c3                   	ret    
c0013ef7:	90                   	nop

c0013ef8 <PhysicalDisk::~PhysicalDisk()>:
c0013ef8:	83 ec 0c             	sub    esp,0xc
c0013efb:	83 ec 0c             	sub    esp,0xc
c0013efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f02:	e8 cd ff ff ff       	call   c0013ed4 <PhysicalDisk::~PhysicalDisk()>
c0013f07:	83 c4 10             	add    esp,0x10
c0013f0a:	83 ec 08             	sub    esp,0x8
c0013f0d:	68 6c 01 00 00       	push   0x16c
c0013f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f16:	e8 4a e6 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0013f1b:	83 c4 10             	add    esp,0x10
c0013f1e:	83 c4 0c             	add    esp,0xc
c0013f21:	c3                   	ret    

c0013f22 <FPU::FPU(char const*)>:
c0013f22:	83 ec 0c             	sub    esp,0xc
c0013f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f29:	83 ec 08             	sub    esp,0x8
c0013f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f30:	50                   	push   eax
c0013f31:	e8 ee fc ff ff       	call   c0013c24 <Device::Device(char const*)>
c0013f36:	83 c4 10             	add    esp,0x10
c0013f39:	ba 7c 7b 02 c0       	mov    edx,0xc0027b7c
c0013f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f42:	89 10                	mov    DWORD PTR [eax],edx
c0013f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f48:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f52:	90                   	nop
c0013f53:	83 c4 0c             	add    esp,0xc
c0013f56:	c3                   	ret    
c0013f57:	90                   	nop

c0013f58 <FPU::~FPU()>:
c0013f58:	83 ec 0c             	sub    esp,0xc
c0013f5b:	ba 7c 7b 02 c0       	mov    edx,0xc0027b7c
c0013f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f64:	89 10                	mov    DWORD PTR [eax],edx
c0013f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	50                   	push   eax
c0013f6e:	e8 93 f9 ff ff       	call   c0013906 <Device::~Device()>
c0013f73:	83 c4 10             	add    esp,0x10
c0013f76:	90                   	nop
c0013f77:	83 c4 0c             	add    esp,0xc
c0013f7a:	c3                   	ret    
c0013f7b:	90                   	nop

c0013f7c <FPU::~FPU()>:
c0013f7c:	83 ec 0c             	sub    esp,0xc
c0013f7f:	83 ec 0c             	sub    esp,0xc
c0013f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f86:	e8 cd ff ff ff       	call   c0013f58 <FPU::~FPU()>
c0013f8b:	83 c4 10             	add    esp,0x10
c0013f8e:	83 ec 08             	sub    esp,0x8
c0013f91:	68 58 01 00 00       	push   0x158
c0013f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f9a:	e8 c6 e5 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0013f9f:	83 c4 10             	add    esp,0x10
c0013fa2:	83 c4 0c             	add    esp,0xc
c0013fa5:	c3                   	ret    

c0013fa6 <setupFPU()>:
c0013fa6:	53                   	push   ebx
c0013fa7:	83 ec 08             	sub    esp,0x8
c0013faa:	8b 15 88 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa88
c0013fb0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fb7:	74 19                	je     c0013fd2 <setupFPU()+0x2c>
c0013fb9:	83 ec 0c             	sub    esp,0xc
c0013fbc:	68 58 01 00 00       	push   0x158
c0013fc1:	e8 0c b5 ff ff       	call   c000f4d2 <malloc>
c0013fc6:	89 c3                	mov    ebx,eax
c0013fc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fcb:	e8 2c e6 00 00       	call   c00225fc <AVX::AVX()>
c0013fd0:	eb 5b                	jmp    c001402d <setupFPU()+0x87>
c0013fd2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013fd8:	84 c0                	test   al,al
c0013fda:	79 19                	jns    c0013ff5 <setupFPU()+0x4f>
c0013fdc:	83 ec 0c             	sub    esp,0xc
c0013fdf:	68 58 01 00 00       	push   0x158
c0013fe4:	e8 e9 b4 ff ff       	call   c000f4d2 <malloc>
c0013fe9:	89 c3                	mov    ebx,eax
c0013feb:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fee:	e8 2f e7 00 00       	call   c0022722 <SSE::SSE()>
c0013ff3:	eb 38                	jmp    c001402d <setupFPU()+0x87>
c0013ff5:	a8 20                	test   al,0x20
c0013ff7:	74 19                	je     c0014012 <setupFPU()+0x6c>
c0013ff9:	83 ec 0c             	sub    esp,0xc
c0013ffc:	68 58 01 00 00       	push   0x158
c0014001:	e8 cc b4 ff ff       	call   c000f4d2 <malloc>
c0014006:	89 c3                	mov    ebx,eax
c0014008:	89 04 24             	mov    DWORD PTR [esp],eax
c001400b:	e8 7c e6 00 00       	call   c002268c <MMX::MMX()>
c0014010:	eb 1b                	jmp    c001402d <setupFPU()+0x87>
c0014012:	a8 10                	test   al,0x10
c0014014:	74 1c                	je     c0014032 <setupFPU()+0x8c>
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	68 58 01 00 00       	push   0x158
c001401e:	e8 af b4 ff ff       	call   c000f4d2 <malloc>
c0014023:	89 c3                	mov    ebx,eax
c0014025:	89 04 24             	mov    DWORD PTR [esp],eax
c0014028:	e8 83 e7 00 00       	call   c00227b0 <x87::x87()>
c001402d:	83 c4 10             	add    esp,0x10
c0014030:	eb 24                	jmp    c0014056 <setupFPU()+0xb0>
c0014032:	83 e0 ef             	and    eax,0xffffffef
c0014035:	83 ec 0c             	sub    esp,0xc
c0014038:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001403e:	68 68 7b 02 c0       	push   0xc0027b68
c0014043:	e8 fd e5 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0014048:	0f 20 c0             	mov    eax,cr0
c001404b:	83 c8 04             	or     eax,0x4
c001404e:	0f 22 c0             	mov    cr0,eax
c0014051:	31 db                	xor    ebx,ebx
c0014053:	83 c4 10             	add    esp,0x10
c0014056:	89 d8                	mov    eax,ebx
c0014058:	83 c4 08             	add    esp,0x8
c001405b:	5b                   	pop    ebx
c001405c:	c3                   	ret    
c001405d:	90                   	nop

c001405e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001405e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014062:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014066:	c1 e0 04             	shl    eax,0x4
c0014069:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001406d:	8d 50 10             	lea    edx,[eax+0x10]
c0014070:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014076:	74 08                	je     c0014080 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014078:	83 c0 04             	add    eax,0x4
c001407b:	39 d0                	cmp    eax,edx
c001407d:	75 f1                	jne    c0014070 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001407f:	c3                   	ret    
c0014080:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001408a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014094:	eb e2                	jmp    c0014078 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014096 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014096:	57                   	push   edi
c0014097:	31 c0                	xor    eax,eax
c0014099:	56                   	push   esi
c001409a:	53                   	push   ebx
c001409b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001409f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140a3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00140a7:	89 da                	mov    edx,ebx
c00140a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140ad:	c1 e2 04             	shl    edx,0x4
c00140b0:	01 ca                	add    edx,ecx
c00140b2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140ba:	74 16                	je     c00140d2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140bc:	40                   	inc    eax
c00140bd:	83 f8 04             	cmp    eax,0x4
c00140c0:	75 f0                	jne    c00140b2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00140c2:	c7 44 24 10 ac 7b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027bac
c00140ca:	5b                   	pop    ebx
c00140cb:	5e                   	pop    esi
c00140cc:	5f                   	pop    edi
c00140cd:	e9 37 4d 00 00       	jmp    c0018e09 <Krnl::panic(char const*)>
c00140d2:	8d 04 98             	lea    eax,[eax+ebx*4]
c00140d5:	8d 04 81             	lea    eax,[ecx+eax*4]
c00140d8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00140de:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00140e4:	5b                   	pop    ebx
c00140e5:	5e                   	pop    esi
c00140e6:	5f                   	pop    edi
c00140e7:	c3                   	ret    

c00140e8 <doubleFault(regs*, void*)>:
c00140e8:	55                   	push   ebp
c00140e9:	89 e5                	mov    ebp,esp
c00140eb:	83 ec 08             	sub    esp,0x8
c00140ee:	83 ec 0c             	sub    esp,0xc
c00140f1:	68 e7 7b 02 c0       	push   0xc0027be7
c00140f6:	e8 0e 4d 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c00140fb:	83 c4 10             	add    esp,0x10
c00140fe:	90                   	nop
c00140ff:	c9                   	leave  
c0014100:	c3                   	ret    
c0014101:	90                   	nop

c0014102 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014102:	56                   	push   esi
c0014103:	53                   	push   ebx
c0014104:	50                   	push   eax
c0014105:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014109:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001410d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014112:	75 35                	jne    c0014149 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014114:	8d 43 20             	lea    eax,[ebx+0x20]
c0014117:	31 d2                	xor    edx,edx
c0014119:	89 c1                	mov    ecx,eax
c001411b:	c1 e1 04             	shl    ecx,0x4
c001411e:	01 f1                	add    ecx,esi
c0014120:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014128:	74 3e                	je     c0014168 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001412a:	42                   	inc    edx
c001412b:	83 fa 04             	cmp    edx,0x4
c001412e:	75 f0                	jne    c0014120 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014130:	83 ec 0c             	sub    esp,0xc
c0014133:	68 2c 7c 02 c0       	push   0xc0027c2c
c0014138:	e8 cc 4c 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c001413d:	83 c4 10             	add    esp,0x10
c0014140:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014145:	5a                   	pop    edx
c0014146:	5b                   	pop    ebx
c0014147:	5e                   	pop    esi
c0014148:	c3                   	ret    
c0014149:	83 ec 0c             	sub    esp,0xc
c001414c:	56                   	push   esi
c001414d:	e8 ce fb ff ff       	call   c0013d20 <Device::getName()>
c0014152:	83 c4 10             	add    esp,0x10
c0014155:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014158:	75 ba                	jne    c0014114 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001415a:	83 fb 0f             	cmp    ebx,0xf
c001415d:	7f 29                	jg     c0014188 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001415f:	0f b6 9b 60 9d 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd62a0]
c0014166:	eb ac                	jmp    c0014114 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014168:	8d 04 82             	lea    eax,[edx+eax*4]
c001416b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001416f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014172:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014178:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001417c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014182:	89 d8                	mov    eax,ebx
c0014184:	5a                   	pop    edx
c0014185:	5b                   	pop    ebx
c0014186:	5e                   	pop    esi
c0014187:	c3                   	ret    
c0014188:	83 ec 0c             	sub    esp,0xc
c001418b:	68 f4 7b 02 c0       	push   0xc0027bf4
c0014190:	e8 74 4c 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0014195:	83 c4 10             	add    esp,0x10
c0014198:	e9 77 ff ff ff       	jmp    c0014114 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001419d:	90                   	nop

c001419e <InterruptController::clearAllHandlers(int, bool)>:
c001419e:	56                   	push   esi
c001419f:	53                   	push   ebx
c00141a0:	52                   	push   edx
c00141a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141a9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00141ae:	75 61                	jne    c0014211 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141b0:	8d 46 20             	lea    eax,[esi+0x20]
c00141b3:	c1 e6 04             	shl    esi,0x4
c00141b6:	c1 e0 04             	shl    eax,0x4
c00141b9:	01 de                	add    esi,ebx
c00141bb:	01 d8                	add    eax,ebx
c00141bd:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00141c7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00141d1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00141db:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00141e5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00141ef:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00141f9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014203:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001420d:	58                   	pop    eax
c001420e:	5b                   	pop    ebx
c001420f:	5e                   	pop    esi
c0014210:	c3                   	ret    
c0014211:	83 ec 0c             	sub    esp,0xc
c0014214:	53                   	push   ebx
c0014215:	e8 06 fb ff ff       	call   c0013d20 <Device::getName()>
c001421a:	83 c4 10             	add    esp,0x10
c001421d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014220:	75 8e                	jne    c00141b0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014222:	83 fe 0f             	cmp    esi,0xf
c0014225:	7f 09                	jg     c0014230 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014227:	0f b6 b6 60 9d 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd62a0]
c001422e:	eb 80                	jmp    c00141b0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014230:	83 ec 0c             	sub    esp,0xc
c0014233:	68 68 7c 02 c0       	push   0xc0027c68
c0014238:	e8 cc 4b 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c001423d:	83 c4 10             	add    esp,0x10
c0014240:	e9 6b ff ff ff       	jmp    c00141b0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014245:	90                   	nop

c0014246 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014246:	56                   	push   esi
c0014247:	53                   	push   ebx
c0014248:	52                   	push   edx
c0014249:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001424d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014251:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014256:	75 3a                	jne    c0014292 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014258:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001425c:	8d 50 20             	lea    edx,[eax+0x20]
c001425f:	c1 e2 04             	shl    edx,0x4
c0014262:	8d 04 16             	lea    eax,[esi+edx*1]
c0014265:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014269:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001426f:	74 0b                	je     c001427c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014271:	83 c0 04             	add    eax,0x4
c0014274:	39 d0                	cmp    eax,edx
c0014276:	75 f1                	jne    c0014269 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014278:	58                   	pop    eax
c0014279:	5b                   	pop    ebx
c001427a:	5e                   	pop    esi
c001427b:	c3                   	ret    
c001427c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014286:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014290:	eb df                	jmp    c0014271 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014292:	83 ec 0c             	sub    esp,0xc
c0014295:	56                   	push   esi
c0014296:	e8 85 fa ff ff       	call   c0013d20 <Device::getName()>
c001429b:	83 c4 10             	add    esp,0x10
c001429e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142a1:	75 b5                	jne    c0014258 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142a3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00142a8:	7f 11                	jg     c00142bb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00142aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142ae:	0f b6 80 60 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62a0]
c00142b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142b9:	eb 9d                	jmp    c0014258 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142bb:	83 ec 0c             	sub    esp,0xc
c00142be:	68 68 7c 02 c0       	push   0xc0027c68
c00142c3:	e8 41 4b 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c00142c8:	83 c4 10             	add    esp,0x10
c00142cb:	eb 8b                	jmp    c0014258 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00142cd <nmiHandler(regs*, void*)>:
c00142cd:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00142d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142d6:	e9 43 a9 ff ff       	jmp    c000ec1e <Computer::handleNMI()>

c00142db <int_handler>:
c00142db:	55                   	push   ebp
c00142dc:	57                   	push   edi
c00142dd:	56                   	push   esi
c00142de:	53                   	push   ebx
c00142df:	83 ec 0c             	sub    esp,0xc
c00142e2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142e6:	80 3d 94 b5 02 c0 00 	cmp    BYTE PTR ds:0xc002b594,0x0
c00142ed:	74 0b                	je     c00142fa <int_handler+0x1f>
c00142ef:	fa                   	cli    
c00142f0:	f4                   	hlt    
c00142f1:	80 3d 94 b5 02 c0 00 	cmp    BYTE PTR ds:0xc002b594,0x0
c00142f8:	75 f5                	jne    c00142ef <int_handler+0x14>
c00142fa:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00142ff:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014302:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014308:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001430e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014311:	83 f8 17             	cmp    eax,0x17
c0014314:	77 13                	ja     c0014329 <int_handler+0x4e>
c0014316:	83 ec 08             	sub    esp,0x8
c0014319:	8b 17                	mov    edx,DWORD PTR [edi]
c001431b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001431e:	0f b6 c0             	movzx  eax,al
c0014321:	50                   	push   eax
c0014322:	57                   	push   edi
c0014323:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014326:	83 c4 10             	add    esp,0x10
c0014329:	83 c3 15             	add    ebx,0x15
c001432c:	c1 e3 04             	shl    ebx,0x4
c001432f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014333:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001433a:	31 db                	xor    ebx,ebx
c001433c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014340:	85 c0                	test   eax,eax
c0014342:	74 13                	je     c0014357 <int_handler+0x7c>
c0014344:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014347:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001434b:	74 1c                	je     c0014369 <int_handler+0x8e>
c001434d:	83 ec 08             	sub    esp,0x8
c0014350:	52                   	push   edx
c0014351:	56                   	push   esi
c0014352:	ff d0                	call   eax
c0014354:	83 c4 10             	add    esp,0x10
c0014357:	43                   	inc    ebx
c0014358:	83 fb 04             	cmp    ebx,0x4
c001435b:	75 df                	jne    c001433c <int_handler+0x61>
c001435d:	83 c4 0c             	add    esp,0xc
c0014360:	31 c0                	xor    eax,eax
c0014362:	5b                   	pop    ebx
c0014363:	31 d2                	xor    edx,edx
c0014365:	5e                   	pop    esi
c0014366:	5f                   	pop    edi
c0014367:	5d                   	pop    ebp
c0014368:	c3                   	ret    
c0014369:	83 ec 08             	sub    esp,0x8
c001436c:	52                   	push   edx
c001436d:	56                   	push   esi
c001436e:	ff d0                	call   eax
c0014370:	83 c4 10             	add    esp,0x10
c0014373:	83 c4 0c             	add    esp,0xc
c0014376:	5b                   	pop    ebx
c0014377:	5e                   	pop    esi
c0014378:	5f                   	pop    edi
c0014379:	5d                   	pop    ebp
c001437a:	c3                   	ret    
c001437b:	90                   	nop

c001437c <InterruptController::InterruptController(char const*)>:
c001437c:	83 ec 1c             	sub    esp,0x1c
c001437f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014383:	83 ec 08             	sub    esp,0x8
c0014386:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001438a:	50                   	push   eax
c001438b:	e8 94 f8 ff ff       	call   c0013c24 <Device::Device(char const*)>
c0014390:	83 c4 10             	add    esp,0x10
c0014393:	ba 9c 7e 02 c0       	mov    edx,0xc0027e9c
c0014398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001439c:	89 10                	mov    DWORD PTR [eax],edx
c001439e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143a2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00143ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143b4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143bc:	7f 5e                	jg     c001441c <InterruptController::InterruptController(char const*)+0xa0>
c00143be:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143c6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00143cb:	7f 49                	jg     c0014416 <InterruptController::InterruptController(char const*)+0x9a>
c00143cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143d5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143e0:	01 ca                	add    edx,ecx
c00143e2:	83 c2 54             	add    edx,0x54
c00143e5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143f5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014400:	01 ca                	add    edx,ecx
c0014402:	81 c2 54 04 00 00    	add    edx,0x454
c0014408:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014410:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014414:	eb b0                	jmp    c00143c6 <InterruptController::InterruptController(char const*)+0x4a>
c0014416:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001441a:	eb 98                	jmp    c00143b4 <InterruptController::InterruptController(char const*)+0x38>
c001441c:	90                   	nop
c001441d:	83 c4 1c             	add    esp,0x1c
c0014420:	c3                   	ret    
c0014421:	90                   	nop

c0014422 <InterruptController::~InterruptController()>:
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	ba 9c 7e 02 c0       	mov    edx,0xc0027e9c
c001442a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001442e:	89 10                	mov    DWORD PTR [eax],edx
c0014430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014434:	83 ec 0c             	sub    esp,0xc
c0014437:	50                   	push   eax
c0014438:	e8 c9 f4 ff ff       	call   c0013906 <Device::~Device()>
c001443d:	83 c4 10             	add    esp,0x10
c0014440:	90                   	nop
c0014441:	83 c4 0c             	add    esp,0xc
c0014444:	c3                   	ret    
c0014445:	90                   	nop

c0014446 <InterruptController::~InterruptController()>:
c0014446:	83 ec 0c             	sub    esp,0xc
c0014449:	83 ec 0c             	sub    esp,0xc
c001444c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014450:	e8 cd ff ff ff       	call   c0014422 <InterruptController::~InterruptController()>
c0014455:	83 c4 10             	add    esp,0x10
c0014458:	83 ec 08             	sub    esp,0x8
c001445b:	68 58 21 00 00       	push   0x2158
c0014460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014464:	e8 fc e0 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0014469:	83 c4 10             	add    esp,0x10
c001446c:	83 c4 0c             	add    esp,0xc
c001446f:	c3                   	ret    

c0014470 <displayDebugInfo(regs*)>:
c0014470:	55                   	push   ebp
c0014471:	57                   	push   edi
c0014472:	56                   	push   esi
c0014473:	53                   	push   ebx
c0014474:	83 ec 24             	sub    esp,0x24
c0014477:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001447b:	0f 20 c2             	mov    edx,cr0
c001447e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014482:	0f 20 d7             	mov    edi,cr2
c0014485:	0f 20 de             	mov    esi,cr3
c0014488:	0f 20 e5             	mov    ebp,cr4
c001448b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001448e:	68 a2 7c 02 c0       	push   0xc0027ca2
c0014493:	e8 ad e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0014498:	58                   	pop    eax
c0014499:	5a                   	pop    edx
c001449a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001449d:	68 ad 7c 02 c0       	push   0xc0027cad
c00144a2:	e8 9e e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00144a7:	59                   	pop    ecx
c00144a8:	58                   	pop    eax
c00144a9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144ac:	68 b8 7c 02 c0       	push   0xc0027cb8
c00144b1:	e8 8f e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00144b6:	58                   	pop    eax
c00144b7:	5a                   	pop    edx
c00144b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144bb:	68 c3 7c 02 c0       	push   0xc0027cc3
c00144c0:	e8 80 e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00144c5:	59                   	pop    ecx
c00144c6:	58                   	pop    eax
c00144c7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00144ca:	68 ce 7c 02 c0       	push   0xc0027cce
c00144cf:	e8 71 e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00144d4:	58                   	pop    eax
c00144d5:	5a                   	pop    edx
c00144d6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00144d9:	68 d9 7c 02 c0       	push   0xc0027cd9
c00144de:	e8 62 e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00144e3:	59                   	pop    ecx
c00144e4:	58                   	pop    eax
c00144e5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00144e8:	68 e4 7c 02 c0       	push   0xc0027ce4
c00144ed:	e8 53 e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00144f2:	58                   	pop    eax
c00144f3:	5a                   	pop    edx
c00144f4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00144f7:	68 ef 7c 02 c0       	push   0xc0027cef
c00144fc:	e8 44 e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0014501:	59                   	pop    ecx
c0014502:	58                   	pop    eax
c0014503:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014506:	68 fa 7c 02 c0       	push   0xc0027cfa
c001450b:	e8 35 e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0014510:	58                   	pop    eax
c0014511:	5a                   	pop    edx
c0014512:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014515:	68 09 7d 02 c0       	push   0xc0027d09
c001451a:	e8 26 e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001451f:	59                   	pop    ecx
c0014520:	58                   	pop    eax
c0014521:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014524:	68 14 7d 02 c0       	push   0xc0027d14
c0014529:	e8 17 e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001452e:	58                   	pop    eax
c001452f:	5a                   	pop    edx
c0014530:	57                   	push   edi
c0014531:	68 1f 7d 02 c0       	push   0xc0027d1f
c0014536:	e8 0a e1 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001453b:	59                   	pop    ecx
c001453c:	58                   	pop    eax
c001453d:	56                   	push   esi
c001453e:	68 2a 7d 02 c0       	push   0xc0027d2a
c0014543:	e8 fd e0 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0014548:	58                   	pop    eax
c0014549:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001454e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014554:	e8 ae c2 ff ff       	call   c0010807 <setActiveTerminal(VgaText*)>
c0014559:	58                   	pop    eax
c001455a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001455d:	5a                   	pop    edx
c001455e:	c1 e0 05             	shl    eax,0x5
c0014561:	05 c0 9a 02 c0       	add    eax,0xc0029ac0
c0014566:	50                   	push   eax
c0014567:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001456c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014572:	e8 af c6 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0014577:	59                   	pop    ecx
c0014578:	58                   	pop    eax
c0014579:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001457e:	68 35 7d 02 c0       	push   0xc0027d35
c0014583:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014589:	e8 98 c6 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c001458e:	58                   	pop    eax
c001458f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014594:	5a                   	pop    edx
c0014595:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014598:	83 c0 0c             	add    eax,0xc
c001459b:	50                   	push   eax
c001459c:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00145a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145a7:	e8 7a c6 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00145ac:	59                   	pop    ecx
c00145ad:	58                   	pop    eax
c00145ae:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00145b3:	68 3e 7d 02 c0       	push   0xc0027d3e
c00145b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145be:	e8 63 c6 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00145c3:	58                   	pop    eax
c00145c4:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00145c9:	5a                   	pop    edx
c00145ca:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d3:	e8 74 c6 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c00145d8:	59                   	pop    ecx
c00145d9:	58                   	pop    eax
c00145da:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00145df:	68 46 7d 02 c0       	push   0xc0027d46
c00145e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ea:	e8 37 c6 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00145ef:	58                   	pop    eax
c00145f0:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00145f5:	5a                   	pop    edx
c00145f6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ff:	e8 48 c6 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0014604:	59                   	pop    ecx
c0014605:	58                   	pop    eax
c0014606:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001460b:	68 4e 7d 02 c0       	push   0xc0027d4e
c0014610:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014616:	e8 0b c6 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c001461b:	58                   	pop    eax
c001461c:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014621:	5a                   	pop    edx
c0014622:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014625:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462b:	e8 1c c6 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0014630:	59                   	pop    ecx
c0014631:	58                   	pop    eax
c0014632:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014637:	68 56 7d 02 c0       	push   0xc0027d56
c001463c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014642:	e8 df c5 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0014647:	58                   	pop    eax
c0014648:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001464d:	5a                   	pop    edx
c001464e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014651:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014657:	e8 f0 c5 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c001465c:	59                   	pop    ecx
c001465d:	58                   	pop    eax
c001465e:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014663:	68 5e 7d 02 c0       	push   0xc0027d5e
c0014668:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001466e:	e8 b3 c5 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0014673:	58                   	pop    eax
c0014674:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014679:	5a                   	pop    edx
c001467a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001467d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014683:	e8 c4 c5 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0014688:	59                   	pop    ecx
c0014689:	58                   	pop    eax
c001468a:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001468f:	68 66 7d 02 c0       	push   0xc0027d66
c0014694:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469a:	e8 87 c5 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c001469f:	58                   	pop    eax
c00146a0:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00146a5:	5a                   	pop    edx
c00146a6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00146a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146af:	e8 98 c5 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c00146b4:	59                   	pop    ecx
c00146b5:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00146ba:	5b                   	pop    ebx
c00146bb:	68 6e 7d 02 c0       	push   0xc0027d6e
c00146c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c6:	e8 5b c5 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00146cb:	58                   	pop    eax
c00146cc:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00146d1:	5a                   	pop    edx
c00146d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146d6:	52                   	push   edx
c00146d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146dd:	e8 6a c5 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c00146e2:	59                   	pop    ecx
c00146e3:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00146e8:	5b                   	pop    ebx
c00146e9:	68 77 7d 02 c0       	push   0xc0027d77
c00146ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f4:	e8 2d c5 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00146f9:	58                   	pop    eax
c00146fa:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00146ff:	5a                   	pop    edx
c0014700:	57                   	push   edi
c0014701:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014707:	e8 40 c5 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c001470c:	59                   	pop    ecx
c001470d:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014712:	5b                   	pop    ebx
c0014713:	68 7f 7d 02 c0       	push   0xc0027d7f
c0014718:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471e:	e8 03 c5 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0014723:	5f                   	pop    edi
c0014724:	58                   	pop    eax
c0014725:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001472a:	56                   	push   esi
c001472b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014731:	e8 16 c5 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0014736:	58                   	pop    eax
c0014737:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001473c:	5a                   	pop    edx
c001473d:	68 87 7d 02 c0       	push   0xc0027d87
c0014742:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014748:	e8 d9 c4 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c001474d:	59                   	pop    ecx
c001474e:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014753:	5b                   	pop    ebx
c0014754:	55                   	push   ebp
c0014755:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475b:	e8 ec c4 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0014760:	5e                   	pop    esi
c0014761:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014766:	5f                   	pop    edi
c0014767:	68 8f 7d 02 c0       	push   0xc0027d8f
c001476c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014772:	e8 af c4 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0014777:	0f 21 c0             	mov    eax,db0
c001477a:	5d                   	pop    ebp
c001477b:	5a                   	pop    edx
c001477c:	50                   	push   eax
c001477d:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014782:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014788:	e8 bf c4 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c001478d:	59                   	pop    ecx
c001478e:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014793:	5b                   	pop    ebx
c0014794:	68 98 7d 02 c0       	push   0xc0027d98
c0014799:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479f:	e8 82 c4 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00147a4:	0f 21 c8             	mov    eax,db1
c00147a7:	5e                   	pop    esi
c00147a8:	5f                   	pop    edi
c00147a9:	50                   	push   eax
c00147aa:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00147af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b5:	e8 92 c4 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c00147ba:	5d                   	pop    ebp
c00147bb:	58                   	pop    eax
c00147bc:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00147c1:	68 a0 7d 02 c0       	push   0xc0027da0
c00147c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147cc:	e8 55 c4 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00147d1:	0f 21 d0             	mov    eax,db2
c00147d4:	5a                   	pop    edx
c00147d5:	59                   	pop    ecx
c00147d6:	50                   	push   eax
c00147d7:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00147dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e2:	e8 65 c4 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c00147e7:	5b                   	pop    ebx
c00147e8:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00147ed:	5e                   	pop    esi
c00147ee:	68 a8 7d 02 c0       	push   0xc0027da8
c00147f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f9:	e8 28 c4 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00147fe:	0f 21 d8             	mov    eax,db3
c0014801:	5f                   	pop    edi
c0014802:	5d                   	pop    ebp
c0014803:	50                   	push   eax
c0014804:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014809:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480f:	e8 38 c4 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0014814:	58                   	pop    eax
c0014815:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001481a:	5a                   	pop    edx
c001481b:	68 b0 7d 02 c0       	push   0xc0027db0
c0014820:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014826:	e8 fb c3 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c001482b:	0f 21 f0             	mov    eax,db6
c001482e:	59                   	pop    ecx
c001482f:	5b                   	pop    ebx
c0014830:	50                   	push   eax
c0014831:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014836:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483c:	e8 0b c4 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0014841:	5e                   	pop    esi
c0014842:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014847:	5f                   	pop    edi
c0014848:	68 b8 7d 02 c0       	push   0xc0027db8
c001484d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014853:	e8 ce c3 ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0014858:	0f 21 f8             	mov    eax,db7
c001485b:	5d                   	pop    ebp
c001485c:	5a                   	pop    edx
c001485d:	50                   	push   eax
c001485e:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0014863:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014869:	e8 de c3 ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c001486e:	fa                   	cli    
c001486f:	f4                   	hlt    
c0014870:	83 c4 10             	add    esp,0x10
c0014873:	eb fe                	jmp    c0014873 <displayDebugInfo(regs*)+0x403>

c0014875 <x87EmulHandler(regs*, void*)>:
c0014875:	53                   	push   ebx
c0014876:	83 ec 14             	sub    esp,0x14
c0014879:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001487d:	53                   	push   ebx
c001487e:	e8 8c 8f 00 00       	call   c001d80f <Vm::x87Handler(regs*)>
c0014883:	83 c4 10             	add    esp,0x10
c0014886:	84 c0                	test   al,al
c0014888:	74 05                	je     c001488f <x87EmulHandler(regs*, void*)+0x1a>
c001488a:	83 c4 08             	add    esp,0x8
c001488d:	5b                   	pop    ebx
c001488e:	c3                   	ret    
c001488f:	83 ec 0c             	sub    esp,0xc
c0014892:	68 c0 7d 02 c0       	push   0xc0027dc0
c0014897:	e8 a9 dd ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001489c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001489f:	e8 cc fb ff ff       	call   c0014470 <displayDebugInfo(regs*)>

c00148a4 <gpFault(regs*, void*)>:
c00148a4:	53                   	push   ebx
c00148a5:	83 ec 14             	sub    esp,0x14
c00148a8:	c7 05 10 ac 02 c0 83 cd 01 c0 	mov    DWORD PTR ds:0xc002ac10,0xc001cd83
c00148b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148b6:	53                   	push   ebx
c00148b7:	e8 c7 84 00 00       	call   c001cd83 <Vm::faultHandler(regs*)>
c00148bc:	83 c4 10             	add    esp,0x10
c00148bf:	84 c0                	test   al,al
c00148c1:	74 05                	je     c00148c8 <gpFault(regs*, void*)+0x24>
c00148c3:	83 c4 08             	add    esp,0x8
c00148c6:	5b                   	pop    ebx
c00148c7:	c3                   	ret    
c00148c8:	83 ec 0c             	sub    esp,0xc
c00148cb:	68 d6 7d 02 c0       	push   0xc0027dd6
c00148d0:	e8 70 dd ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00148d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148d8:	e8 93 fb ff ff       	call   c0014470 <displayDebugInfo(regs*)>

c00148dd <pgFault(regs*, void*)>:
c00148dd:	83 ec 18             	sub    esp,0x18
c00148e0:	68 f1 7d 02 c0       	push   0xc0027df1
c00148e5:	e8 5b dd ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00148ea:	58                   	pop    eax
c00148eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ef:	e8 7c fb ff ff       	call   c0014470 <displayDebugInfo(regs*)>

c00148f4 <otherISRHandler(regs*, void*)>:
c00148f4:	53                   	push   ebx
c00148f5:	83 ec 0c             	sub    esp,0xc
c00148f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148fc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00148ff:	50                   	push   eax
c0014900:	50                   	push   eax
c0014901:	68 fe 7d 02 c0       	push   0xc0027dfe
c0014906:	e8 3a dd ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001490b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001490e:	e8 5d fb ff ff       	call   c0014470 <displayDebugInfo(regs*)>

c0014913 <opcodeFault(regs*, void*)>:
c0014913:	55                   	push   ebp
c0014914:	89 e5                	mov    ebp,esp
c0014916:	56                   	push   esi
c0014917:	53                   	push   ebx
c0014918:	83 ec 40             	sub    esp,0x40
c001491b:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0014920:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014926:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001492c:	84 c0                	test   al,al
c001492e:	74 24                	je     c0014954 <opcodeFault(regs*, void*)+0x41>
c0014930:	83 ec 0c             	sub    esp,0xc
c0014933:	68 1c 7e 02 c0       	push   0xc0027e1c
c0014938:	e8 08 dd ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001493d:	83 c4 10             	add    esp,0x10
c0014940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014943:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014946:	8d 50 19             	lea    edx,[eax+0x19]
c0014949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001494c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001494f:	e9 77 05 00 00       	jmp    c0014ecb <opcodeFault(regs*, void*)+0x5b8>
c0014954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014957:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001495a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001495d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014961:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014968:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001496b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001496e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014971:	8a 00                	mov    al,BYTE PTR [eax]
c0014973:	3c f0                	cmp    al,0xf0
c0014975:	75 17                	jne    c001498e <opcodeFault(regs*, void*)+0x7b>
c0014977:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001497a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001497d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014980:	8d 50 01             	lea    edx,[eax+0x1]
c0014983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014986:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014989:	e9 da 00 00 00       	jmp    c0014a68 <opcodeFault(regs*, void*)+0x155>
c001498e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014991:	8a 00                	mov    al,BYTE PTR [eax]
c0014993:	3c f2                	cmp    al,0xf2
c0014995:	74 09                	je     c00149a0 <opcodeFault(regs*, void*)+0x8d>
c0014997:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001499a:	8a 00                	mov    al,BYTE PTR [eax]
c001499c:	3c f3                	cmp    al,0xf3
c001499e:	75 1b                	jne    c00149bb <opcodeFault(regs*, void*)+0xa8>
c00149a0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149a4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149ad:	8d 50 01             	lea    edx,[eax+0x1]
c00149b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149b6:	e9 ad 00 00 00       	jmp    c0014a68 <opcodeFault(regs*, void*)+0x155>
c00149bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149be:	8a 00                	mov    al,BYTE PTR [eax]
c00149c0:	3c 66                	cmp    al,0x66
c00149c2:	75 1f                	jne    c00149e3 <opcodeFault(regs*, void*)+0xd0>
c00149c4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149c8:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00149cc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149d5:	8d 50 01             	lea    edx,[eax+0x1]
c00149d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149de:	e9 85 00 00 00       	jmp    c0014a68 <opcodeFault(regs*, void*)+0x155>
c00149e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149e6:	8a 00                	mov    al,BYTE PTR [eax]
c00149e8:	3c 67                	cmp    al,0x67
c00149ea:	75 18                	jne    c0014a04 <opcodeFault(regs*, void*)+0xf1>
c00149ec:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149f0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149f9:	8d 50 01             	lea    edx,[eax+0x1]
c00149fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a02:	eb 64                	jmp    c0014a68 <opcodeFault(regs*, void*)+0x155>
c0014a04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a07:	8a 00                	mov    al,BYTE PTR [eax]
c0014a09:	3c 2e                	cmp    al,0x2e
c0014a0b:	74 09                	je     c0014a16 <opcodeFault(regs*, void*)+0x103>
c0014a0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a10:	8a 00                	mov    al,BYTE PTR [eax]
c0014a12:	3c 3e                	cmp    al,0x3e
c0014a14:	75 18                	jne    c0014a2e <opcodeFault(regs*, void*)+0x11b>
c0014a16:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a1a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a20:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a23:	8d 50 01             	lea    edx,[eax+0x1]
c0014a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a29:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a2c:	eb 3a                	jmp    c0014a68 <opcodeFault(regs*, void*)+0x155>
c0014a2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a31:	8a 00                	mov    al,BYTE PTR [eax]
c0014a33:	3c 36                	cmp    al,0x36
c0014a35:	74 1b                	je     c0014a52 <opcodeFault(regs*, void*)+0x13f>
c0014a37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a3c:	3c 26                	cmp    al,0x26
c0014a3e:	74 12                	je     c0014a52 <opcodeFault(regs*, void*)+0x13f>
c0014a40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a43:	8a 00                	mov    al,BYTE PTR [eax]
c0014a45:	3c 64                	cmp    al,0x64
c0014a47:	74 09                	je     c0014a52 <opcodeFault(regs*, void*)+0x13f>
c0014a49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a4c:	8a 00                	mov    al,BYTE PTR [eax]
c0014a4e:	3c 65                	cmp    al,0x65
c0014a50:	75 16                	jne    c0014a68 <opcodeFault(regs*, void*)+0x155>
c0014a52:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a56:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a5f:	8d 50 01             	lea    edx,[eax+0x1]
c0014a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a65:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a6b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a6d:	3c 0f                	cmp    al,0xf
c0014a6f:	0f 85 ad 00 00 00    	jne    c0014b22 <opcodeFault(regs*, void*)+0x20f>
c0014a75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a78:	40                   	inc    eax
c0014a79:	8a 00                	mov    al,BYTE PTR [eax]
c0014a7b:	3c c2                	cmp    al,0xc2
c0014a7d:	74 0e                	je     c0014a8d <opcodeFault(regs*, void*)+0x17a>
c0014a7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a82:	40                   	inc    eax
c0014a83:	8a 00                	mov    al,BYTE PTR [eax]
c0014a85:	3c c3                	cmp    al,0xc3
c0014a87:	0f 85 95 00 00 00    	jne    c0014b22 <opcodeFault(regs*, void*)+0x20f>
c0014a8d:	83 ec 0c             	sub    esp,0xc
c0014a90:	68 3f 7e 02 c0       	push   0xc0027e3f
c0014a95:	e8 ab db ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0014a9a:	83 c4 10             	add    esp,0x10
c0014a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aa3:	8d 50 01             	lea    edx,[eax+0x1]
c0014aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aac:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aaf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ab2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab4:	8d 50 fe             	lea    edx,[eax-0x2]
c0014ab7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aba:	88 10                	mov    BYTE PTR [eax],dl
c0014abc:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014abf:	50                   	push   eax
c0014ac0:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ac3:	50                   	push   eax
c0014ac4:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ac7:	50                   	push   eax
c0014ac8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014acb:	e8 3e 41 00 00       	call   c0018c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ad0:	83 c4 10             	add    esp,0x10
c0014ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ad9:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014adc:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014adf:	01 d0                	add    eax,edx
c0014ae1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aea:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014aed:	48                   	dec    eax
c0014aee:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014af7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afd:	83 ec 04             	sub    esp,0x4
c0014b00:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b03:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b06:	50                   	push   eax
c0014b07:	e8 5d b6 fe ff       	call   c0000169 <voodooXADD>
c0014b0c:	83 c4 10             	add    esp,0x10
c0014b0f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b12:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b15:	01 c2                	add    edx,eax
c0014b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b1d:	e9 a9 03 00 00       	jmp    c0014ecb <opcodeFault(regs*, void*)+0x5b8>
c0014b22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b25:	8a 00                	mov    al,BYTE PTR [eax]
c0014b27:	3c 0f                	cmp    al,0xf
c0014b29:	0f 85 8b 01 00 00    	jne    c0014cba <opcodeFault(regs*, void*)+0x3a7>
c0014b2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b32:	40                   	inc    eax
c0014b33:	8a 00                	mov    al,BYTE PTR [eax]
c0014b35:	3c c7                	cmp    al,0xc7
c0014b37:	0f 86 7d 01 00 00    	jbe    c0014cba <opcodeFault(regs*, void*)+0x3a7>
c0014b3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b40:	40                   	inc    eax
c0014b41:	8a 00                	mov    al,BYTE PTR [eax]
c0014b43:	3c cf                	cmp    al,0xcf
c0014b45:	0f 87 6f 01 00 00    	ja     c0014cba <opcodeFault(regs*, void*)+0x3a7>
c0014b4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b4e:	40                   	inc    eax
c0014b4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b51:	83 c0 38             	add    eax,0x38
c0014b54:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b57:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014b5b:	75 0b                	jne    c0014b68 <opcodeFault(regs*, void*)+0x255>
c0014b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b60:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014b63:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b66:	eb 75                	jmp    c0014bdd <opcodeFault(regs*, void*)+0x2ca>
c0014b68:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014b6c:	75 0b                	jne    c0014b79 <opcodeFault(regs*, void*)+0x266>
c0014b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b71:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014b74:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b77:	eb 64                	jmp    c0014bdd <opcodeFault(regs*, void*)+0x2ca>
c0014b79:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014b7d:	75 0b                	jne    c0014b8a <opcodeFault(regs*, void*)+0x277>
c0014b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b82:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014b85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b88:	eb 53                	jmp    c0014bdd <opcodeFault(regs*, void*)+0x2ca>
c0014b8a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014b8e:	75 0b                	jne    c0014b9b <opcodeFault(regs*, void*)+0x288>
c0014b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b93:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014b96:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b99:	eb 42                	jmp    c0014bdd <opcodeFault(regs*, void*)+0x2ca>
c0014b9b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014b9f:	75 0b                	jne    c0014bac <opcodeFault(regs*, void*)+0x299>
c0014ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014ba7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014baa:	eb 31                	jmp    c0014bdd <opcodeFault(regs*, void*)+0x2ca>
c0014bac:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014bb0:	75 0b                	jne    c0014bbd <opcodeFault(regs*, void*)+0x2aa>
c0014bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014bb8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bbb:	eb 20                	jmp    c0014bdd <opcodeFault(regs*, void*)+0x2ca>
c0014bbd:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014bc1:	75 0b                	jne    c0014bce <opcodeFault(regs*, void*)+0x2bb>
c0014bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014bc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bcc:	eb 0f                	jmp    c0014bdd <opcodeFault(regs*, void*)+0x2ca>
c0014bce:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014bd2:	75 09                	jne    c0014bdd <opcodeFault(regs*, void*)+0x2ca>
c0014bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014bda:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bdd:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014be1:	74 10                	je     c0014bf3 <opcodeFault(regs*, void*)+0x2e0>
c0014be3:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014bea:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014bf1:	eb 2d                	jmp    c0014c20 <opcodeFault(regs*, void*)+0x30d>
c0014bf3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014bf6:	c1 e0 18             	shl    eax,0x18
c0014bf9:	89 c2                	mov    edx,eax
c0014bfb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014bfe:	c1 e0 08             	shl    eax,0x8
c0014c01:	25 00 00 ff 00       	and    eax,0xff0000
c0014c06:	09 c2                	or     edx,eax
c0014c08:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c0b:	c1 e8 08             	shr    eax,0x8
c0014c0e:	25 00 ff 00 00       	and    eax,0xff00
c0014c13:	09 c2                	or     edx,eax
c0014c15:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c18:	c1 e8 18             	shr    eax,0x18
c0014c1b:	09 d0                	or     eax,edx
c0014c1d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c20:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c24:	75 0b                	jne    c0014c31 <opcodeFault(regs*, void*)+0x31e>
c0014c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c29:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c2c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c2f:	eb 75                	jmp    c0014ca6 <opcodeFault(regs*, void*)+0x393>
c0014c31:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c35:	75 0b                	jne    c0014c42 <opcodeFault(regs*, void*)+0x32f>
c0014c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c3d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c40:	eb 64                	jmp    c0014ca6 <opcodeFault(regs*, void*)+0x393>
c0014c42:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c46:	75 0b                	jne    c0014c53 <opcodeFault(regs*, void*)+0x340>
c0014c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c4e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c51:	eb 53                	jmp    c0014ca6 <opcodeFault(regs*, void*)+0x393>
c0014c53:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c57:	75 0b                	jne    c0014c64 <opcodeFault(regs*, void*)+0x351>
c0014c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c5f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014c62:	eb 42                	jmp    c0014ca6 <opcodeFault(regs*, void*)+0x393>
c0014c64:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c68:	75 0b                	jne    c0014c75 <opcodeFault(regs*, void*)+0x362>
c0014c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c70:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014c73:	eb 31                	jmp    c0014ca6 <opcodeFault(regs*, void*)+0x393>
c0014c75:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c79:	75 0b                	jne    c0014c86 <opcodeFault(regs*, void*)+0x373>
c0014c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c81:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014c84:	eb 20                	jmp    c0014ca6 <opcodeFault(regs*, void*)+0x393>
c0014c86:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c8a:	75 0b                	jne    c0014c97 <opcodeFault(regs*, void*)+0x384>
c0014c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c92:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014c95:	eb 0f                	jmp    c0014ca6 <opcodeFault(regs*, void*)+0x393>
c0014c97:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c9b:	75 09                	jne    c0014ca6 <opcodeFault(regs*, void*)+0x393>
c0014c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ca3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cac:	8d 50 02             	lea    edx,[eax+0x2]
c0014caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cb5:	e9 11 02 00 00       	jmp    c0014ecb <opcodeFault(regs*, void*)+0x5b8>
c0014cba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cbd:	8a 00                	mov    al,BYTE PTR [eax]
c0014cbf:	3c 0f                	cmp    al,0xf
c0014cc1:	0f 85 76 01 00 00    	jne    c0014e3d <opcodeFault(regs*, void*)+0x52a>
c0014cc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cca:	40                   	inc    eax
c0014ccb:	8a 00                	mov    al,BYTE PTR [eax]
c0014ccd:	3c c7                	cmp    al,0xc7
c0014ccf:	0f 85 68 01 00 00    	jne    c0014e3d <opcodeFault(regs*, void*)+0x52a>
c0014cd5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cde:	8d 50 01             	lea    edx,[eax+0x1]
c0014ce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ce7:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014cea:	50                   	push   eax
c0014ceb:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014cee:	50                   	push   eax
c0014cef:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014cf2:	50                   	push   eax
c0014cf3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cf6:	e8 13 3f 00 00       	call   c0018c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cfb:	83 c4 10             	add    esp,0x10
c0014cfe:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d01:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d04:	83 f0 01             	xor    eax,0x1
c0014d07:	84 c0                	test   al,al
c0014d09:	0f 84 2e 01 00 00    	je     c0014e3d <opcodeFault(regs*, void*)+0x52a>
c0014d0f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d12:	3c 01                	cmp    al,0x1
c0014d14:	0f 85 23 01 00 00    	jne    c0014e3d <opcodeFault(regs*, void*)+0x52a>
c0014d1a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d1d:	83 f0 01             	xor    eax,0x1
c0014d20:	84 c0                	test   al,al
c0014d22:	0f 84 15 01 00 00    	je     c0014e3d <opcodeFault(regs*, void*)+0x52a>
c0014d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d2e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d31:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d38:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d3b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d3e:	89 c2                	mov    edx,eax
c0014d40:	b8 00 00 00 00       	mov    eax,0x0
c0014d45:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d48:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d51:	ba 00 00 00 00       	mov    edx,0x0
c0014d56:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014d59:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d62:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d65:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014d6c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014d6f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014d72:	89 c2                	mov    edx,eax
c0014d74:	b8 00 00 00 00       	mov    eax,0x0
c0014d79:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d7c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014d7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d85:	ba 00 00 00 00       	mov    edx,0x0
c0014d8a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014d8d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014d90:	e8 80 70 00 00       	call   c001be15 <lockScheduler()>
c0014d95:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014d98:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d9d:	89 c1                	mov    ecx,eax
c0014d9f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014da2:	89 cb                	mov    ebx,ecx
c0014da4:	89 d0                	mov    eax,edx
c0014da6:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014da9:	89 c6                	mov    esi,eax
c0014dab:	89 f0                	mov    eax,esi
c0014dad:	09 d8                	or     eax,ebx
c0014daf:	85 c0                	test   eax,eax
c0014db1:	75 21                	jne    c0014dd4 <opcodeFault(regs*, void*)+0x4c1>
c0014db3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014db6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014db9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dbc:	89 01                	mov    DWORD PTR [ecx],eax
c0014dbe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dc7:	83 c8 40             	or     eax,0x40
c0014dca:	89 c2                	mov    edx,eax
c0014dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcf:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014dd2:	eb 3e                	jmp    c0014e12 <opcodeFault(regs*, void*)+0x4ff>
c0014dd4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014dd7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014dda:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ddc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ddf:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014de2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014de5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014deb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014dee:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014df1:	89 d0                	mov    eax,edx
c0014df3:	31 d2                	xor    edx,edx
c0014df5:	89 c3                	mov    ebx,eax
c0014df7:	89 d6                	mov    esi,edx
c0014df9:	89 da                	mov    edx,ebx
c0014dfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfe:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e04:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e07:	83 e0 bf             	and    eax,0xffffffbf
c0014e0a:	89 c2                	mov    edx,eax
c0014e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e12:	e8 00 70 00 00       	call   c001be17 <unlockScheduler()>
c0014e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e1d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e20:	01 c2                	add    edx,eax
c0014e22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e25:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e28:	83 ec 0c             	sub    esp,0xc
c0014e2b:	68 4e 7e 02 c0       	push   0xc0027e4e
c0014e30:	e8 10 d8 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0014e35:	83 c4 10             	add    esp,0x10
c0014e38:	e9 8e 00 00 00       	jmp    c0014ecb <opcodeFault(regs*, void*)+0x5b8>
c0014e3d:	83 ec 0c             	sub    esp,0xc
c0014e40:	68 61 7e 02 c0       	push   0xc0027e61
c0014e45:	e8 fb d7 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0014e4a:	83 c4 10             	add    esp,0x10
c0014e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e50:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e59:	c1 e0 04             	shl    eax,0x4
c0014e5c:	01 d0                	add    eax,edx
c0014e5e:	83 c0 03             	add    eax,0x3
c0014e61:	8a 00                	mov    al,BYTE PTR [eax]
c0014e63:	0f b6 d8             	movzx  ebx,al
c0014e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e69:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e72:	c1 e0 04             	shl    eax,0x4
c0014e75:	01 d0                	add    eax,edx
c0014e77:	83 c0 02             	add    eax,0x2
c0014e7a:	8a 00                	mov    al,BYTE PTR [eax]
c0014e7c:	0f b6 c8             	movzx  ecx,al
c0014e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e82:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e8b:	c1 e0 04             	shl    eax,0x4
c0014e8e:	01 d0                	add    eax,edx
c0014e90:	40                   	inc    eax
c0014e91:	8a 00                	mov    al,BYTE PTR [eax]
c0014e93:	0f b6 d0             	movzx  edx,al
c0014e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e99:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ea2:	c1 e0 04             	shl    eax,0x4
c0014ea5:	01 f0                	add    eax,esi
c0014ea7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea9:	0f b6 c0             	movzx  eax,al
c0014eac:	83 ec 0c             	sub    esp,0xc
c0014eaf:	53                   	push   ebx
c0014eb0:	51                   	push   ecx
c0014eb1:	52                   	push   edx
c0014eb2:	50                   	push   eax
c0014eb3:	68 74 7e 02 c0       	push   0xc0027e74
c0014eb8:	e8 88 d7 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0014ebd:	83 c4 20             	add    esp,0x20
c0014ec0:	83 ec 0c             	sub    esp,0xc
c0014ec3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ec6:	e8 a5 f5 ff ff       	call   c0014470 <displayDebugInfo(regs*)>
c0014ecb:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014ece:	5b                   	pop    ebx
c0014ecf:	5e                   	pop    esi
c0014ed0:	5d                   	pop    ebp
c0014ed1:	c3                   	ret    

c0014ed2 <displayProgramFault(char const*)>:
c0014ed2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ed7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eda:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014ee0:	85 c0                	test   eax,eax
c0014ee2:	74 15                	je     c0014ef9 <displayProgramFault(char const*)+0x27>
c0014ee4:	83 ec 0c             	sub    esp,0xc
c0014ee7:	6a 04                	push   0x4
c0014ee9:	6a 0f                	push   0xf
c0014eeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014eef:	50                   	push   eax
c0014ef0:	e8 f3 b9 ff ff       	call   c00108e8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014ef5:	83 c4 1c             	add    esp,0x1c
c0014ef8:	c3                   	ret    
c0014ef9:	c3                   	ret    

c0014efa <setupInterruptController()>:
c0014efa:	55                   	push   ebp
c0014efb:	89 e5                	mov    ebp,esp
c0014efd:	53                   	push   ebx
c0014efe:	83 ec 24             	sub    esp,0x24
c0014f01:	b8 00 00 00 00       	mov    eax,0x0
c0014f06:	85 c0                	test   eax,eax
c0014f08:	0f 95 c0             	setne  al
c0014f0b:	84 c0                	test   al,al
c0014f0d:	74 5b                	je     c0014f6a <setupInterruptController()+0x70>
c0014f0f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f16:	83 ec 0c             	sub    esp,0xc
c0014f19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f1c:	e8 b1 a5 ff ff       	call   c000f4d2 <malloc>
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	89 c3                	mov    ebx,eax
c0014f26:	83 ec 0c             	sub    esp,0xc
c0014f29:	53                   	push   ebx
c0014f2a:	e8 bf da 00 00       	call   c00229ee <APIC::APIC()>
c0014f2f:	83 c4 10             	add    esp,0x10
c0014f32:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f35:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f3d:	83 c0 08             	add    eax,0x8
c0014f40:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f42:	6a 00                	push   0x0
c0014f44:	6a 00                	push   0x0
c0014f46:	6a 00                	push   0x0
c0014f48:	52                   	push   edx
c0014f49:	ff d0                	call   eax
c0014f4b:	83 c4 10             	add    esp,0x10
c0014f4e:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0014f53:	83 ec 08             	sub    esp,0x8
c0014f56:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014f59:	50                   	push   eax
c0014f5a:	e8 d5 ea ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0014f5f:	83 c4 10             	add    esp,0x10
c0014f62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f65:	e9 52 03 00 00       	jmp    c00152bc <setupInterruptController()+0x3c2>
c0014f6a:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0014f6f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014f75:	83 e0 01             	and    eax,0x1
c0014f78:	84 c0                	test   al,al
c0014f7a:	0f 95 c0             	setne  al
c0014f7d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014f80:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014f87:	83 ec 0c             	sub    esp,0xc
c0014f8a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014f8d:	e8 40 a5 ff ff       	call   c000f4d2 <malloc>
c0014f92:	83 c4 10             	add    esp,0x10
c0014f95:	89 c3                	mov    ebx,eax
c0014f97:	83 ec 0c             	sub    esp,0xc
c0014f9a:	53                   	push   ebx
c0014f9b:	e8 a6 df 00 00       	call   c0022f46 <PIC::PIC()>
c0014fa0:	83 c4 10             	add    esp,0x10
c0014fa3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014fa6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014fa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fac:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fae:	83 c0 08             	add    eax,0x8
c0014fb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fb3:	6a 00                	push   0x0
c0014fb5:	6a 00                	push   0x0
c0014fb7:	6a 00                	push   0x0
c0014fb9:	52                   	push   edx
c0014fba:	ff d0                	call   eax
c0014fbc:	83 c4 10             	add    esp,0x10
c0014fbf:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014fc3:	74 73                	je     c0015038 <setupInterruptController()+0x13e>
c0014fc5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014fc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fcd:	83 c0 0c             	add    eax,0xc
c0014fd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fd2:	6a 00                	push   0x0
c0014fd4:	6a 00                	push   0x0
c0014fd6:	6a 00                	push   0x0
c0014fd8:	52                   	push   edx
c0014fd9:	ff d0                	call   eax
c0014fdb:	83 c4 10             	add    esp,0x10
c0014fde:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fe2:	74 15                	je     c0014ff9 <setupInterruptController()+0xff>
c0014fe4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fe9:	83 c0 04             	add    eax,0x4
c0014fec:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fee:	83 ec 0c             	sub    esp,0xc
c0014ff1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ff4:	ff d0                	call   eax
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015000:	83 ec 0c             	sub    esp,0xc
c0015003:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015006:	e8 c7 a4 ff ff       	call   c000f4d2 <malloc>
c001500b:	83 c4 10             	add    esp,0x10
c001500e:	89 c3                	mov    ebx,eax
c0015010:	83 ec 0c             	sub    esp,0xc
c0015013:	53                   	push   ebx
c0015014:	e8 d5 d9 00 00       	call   c00229ee <APIC::APIC()>
c0015019:	83 c4 10             	add    esp,0x10
c001501c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001501f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015022:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015025:	8b 00                	mov    eax,DWORD PTR [eax]
c0015027:	83 c0 08             	add    eax,0x8
c001502a:	8b 00                	mov    eax,DWORD PTR [eax]
c001502c:	6a 00                	push   0x0
c001502e:	6a 00                	push   0x0
c0015030:	6a 00                	push   0x0
c0015032:	52                   	push   edx
c0015033:	ff d0                	call   eax
c0015035:	83 c4 10             	add    esp,0x10
c0015038:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001503d:	83 ec 08             	sub    esp,0x8
c0015040:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015043:	50                   	push   eax
c0015044:	e8 eb e9 ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0015049:	83 c4 10             	add    esp,0x10
c001504c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001504f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015051:	83 c0 24             	add    eax,0x24
c0015054:	8b 00                	mov    eax,DWORD PTR [eax]
c0015056:	6a 00                	push   0x0
c0015058:	68 f4 48 01 c0       	push   0xc00148f4
c001505d:	6a 00                	push   0x0
c001505f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015062:	ff d0                	call   eax
c0015064:	83 c4 10             	add    esp,0x10
c0015067:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001506a:	8b 00                	mov    eax,DWORD PTR [eax]
c001506c:	83 c0 24             	add    eax,0x24
c001506f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015071:	6a 00                	push   0x0
c0015073:	68 f4 48 01 c0       	push   0xc00148f4
c0015078:	6a 01                	push   0x1
c001507a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001507d:	ff d0                	call   eax
c001507f:	83 c4 10             	add    esp,0x10
c0015082:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015085:	8b 00                	mov    eax,DWORD PTR [eax]
c0015087:	83 c0 24             	add    eax,0x24
c001508a:	8b 00                	mov    eax,DWORD PTR [eax]
c001508c:	6a 00                	push   0x0
c001508e:	68 cd 42 01 c0       	push   0xc00142cd
c0015093:	6a 02                	push   0x2
c0015095:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015098:	ff d0                	call   eax
c001509a:	83 c4 10             	add    esp,0x10
c001509d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a2:	83 c0 24             	add    eax,0x24
c00150a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a7:	6a 00                	push   0x0
c00150a9:	68 f4 48 01 c0       	push   0xc00148f4
c00150ae:	6a 03                	push   0x3
c00150b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150b3:	ff d0                	call   eax
c00150b5:	83 c4 10             	add    esp,0x10
c00150b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00150bd:	83 c0 24             	add    eax,0x24
c00150c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c2:	6a 00                	push   0x0
c00150c4:	68 f4 48 01 c0       	push   0xc00148f4
c00150c9:	6a 04                	push   0x4
c00150cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150ce:	ff d0                	call   eax
c00150d0:	83 c4 10             	add    esp,0x10
c00150d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150d8:	83 c0 24             	add    eax,0x24
c00150db:	8b 00                	mov    eax,DWORD PTR [eax]
c00150dd:	6a 00                	push   0x0
c00150df:	68 f4 48 01 c0       	push   0xc00148f4
c00150e4:	6a 05                	push   0x5
c00150e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150e9:	ff d0                	call   eax
c00150eb:	83 c4 10             	add    esp,0x10
c00150ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f3:	83 c0 24             	add    eax,0x24
c00150f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f8:	6a 00                	push   0x0
c00150fa:	68 13 49 01 c0       	push   0xc0014913
c00150ff:	6a 06                	push   0x6
c0015101:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015104:	ff d0                	call   eax
c0015106:	83 c4 10             	add    esp,0x10
c0015109:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001510c:	8b 00                	mov    eax,DWORD PTR [eax]
c001510e:	83 c0 24             	add    eax,0x24
c0015111:	8b 00                	mov    eax,DWORD PTR [eax]
c0015113:	6a 00                	push   0x0
c0015115:	68 75 48 01 c0       	push   0xc0014875
c001511a:	6a 07                	push   0x7
c001511c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001511f:	ff d0                	call   eax
c0015121:	83 c4 10             	add    esp,0x10
c0015124:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015127:	8b 00                	mov    eax,DWORD PTR [eax]
c0015129:	83 c0 24             	add    eax,0x24
c001512c:	8b 00                	mov    eax,DWORD PTR [eax]
c001512e:	6a 00                	push   0x0
c0015130:	68 e8 40 01 c0       	push   0xc00140e8
c0015135:	6a 08                	push   0x8
c0015137:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001513a:	ff d0                	call   eax
c001513c:	83 c4 10             	add    esp,0x10
c001513f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015142:	8b 00                	mov    eax,DWORD PTR [eax]
c0015144:	83 c0 24             	add    eax,0x24
c0015147:	8b 00                	mov    eax,DWORD PTR [eax]
c0015149:	6a 00                	push   0x0
c001514b:	68 f4 48 01 c0       	push   0xc00148f4
c0015150:	6a 09                	push   0x9
c0015152:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015155:	ff d0                	call   eax
c0015157:	83 c4 10             	add    esp,0x10
c001515a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001515d:	8b 00                	mov    eax,DWORD PTR [eax]
c001515f:	83 c0 24             	add    eax,0x24
c0015162:	8b 00                	mov    eax,DWORD PTR [eax]
c0015164:	6a 00                	push   0x0
c0015166:	68 f4 48 01 c0       	push   0xc00148f4
c001516b:	6a 0a                	push   0xa
c001516d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015170:	ff d0                	call   eax
c0015172:	83 c4 10             	add    esp,0x10
c0015175:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015178:	8b 00                	mov    eax,DWORD PTR [eax]
c001517a:	83 c0 24             	add    eax,0x24
c001517d:	8b 00                	mov    eax,DWORD PTR [eax]
c001517f:	6a 00                	push   0x0
c0015181:	68 f4 48 01 c0       	push   0xc00148f4
c0015186:	6a 0b                	push   0xb
c0015188:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001518b:	ff d0                	call   eax
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015193:	8b 00                	mov    eax,DWORD PTR [eax]
c0015195:	83 c0 24             	add    eax,0x24
c0015198:	8b 00                	mov    eax,DWORD PTR [eax]
c001519a:	6a 00                	push   0x0
c001519c:	68 f4 48 01 c0       	push   0xc00148f4
c00151a1:	6a 0c                	push   0xc
c00151a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151a6:	ff d0                	call   eax
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b0:	83 c0 24             	add    eax,0x24
c00151b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b5:	6a 00                	push   0x0
c00151b7:	68 a4 48 01 c0       	push   0xc00148a4
c00151bc:	6a 0d                	push   0xd
c00151be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c1:	ff d0                	call   eax
c00151c3:	83 c4 10             	add    esp,0x10
c00151c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cb:	83 c0 24             	add    eax,0x24
c00151ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d0:	6a 00                	push   0x0
c00151d2:	68 dd 48 01 c0       	push   0xc00148dd
c00151d7:	6a 0e                	push   0xe
c00151d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151dc:	ff d0                	call   eax
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e6:	83 c0 24             	add    eax,0x24
c00151e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151eb:	6a 00                	push   0x0
c00151ed:	68 f4 48 01 c0       	push   0xc00148f4
c00151f2:	6a 0f                	push   0xf
c00151f4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f7:	ff d0                	call   eax
c00151f9:	83 c4 10             	add    esp,0x10
c00151fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015201:	83 c0 24             	add    eax,0x24
c0015204:	8b 00                	mov    eax,DWORD PTR [eax]
c0015206:	6a 00                	push   0x0
c0015208:	68 f4 48 01 c0       	push   0xc00148f4
c001520d:	6a 10                	push   0x10
c001520f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015212:	ff d0                	call   eax
c0015214:	83 c4 10             	add    esp,0x10
c0015217:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521a:	8b 00                	mov    eax,DWORD PTR [eax]
c001521c:	83 c0 24             	add    eax,0x24
c001521f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015221:	6a 00                	push   0x0
c0015223:	68 f4 48 01 c0       	push   0xc00148f4
c0015228:	6a 11                	push   0x11
c001522a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522d:	ff d0                	call   eax
c001522f:	83 c4 10             	add    esp,0x10
c0015232:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015235:	8b 00                	mov    eax,DWORD PTR [eax]
c0015237:	83 c0 24             	add    eax,0x24
c001523a:	8b 00                	mov    eax,DWORD PTR [eax]
c001523c:	6a 00                	push   0x0
c001523e:	68 f4 48 01 c0       	push   0xc00148f4
c0015243:	6a 12                	push   0x12
c0015245:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015248:	ff d0                	call   eax
c001524a:	83 c4 10             	add    esp,0x10
c001524d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015250:	8b 00                	mov    eax,DWORD PTR [eax]
c0015252:	83 c0 24             	add    eax,0x24
c0015255:	8b 00                	mov    eax,DWORD PTR [eax]
c0015257:	6a 00                	push   0x0
c0015259:	68 f4 48 01 c0       	push   0xc00148f4
c001525e:	6a 13                	push   0x13
c0015260:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015263:	ff d0                	call   eax
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526b:	8b 00                	mov    eax,DWORD PTR [eax]
c001526d:	83 c0 24             	add    eax,0x24
c0015270:	8b 00                	mov    eax,DWORD PTR [eax]
c0015272:	6a 00                	push   0x0
c0015274:	68 f4 48 01 c0       	push   0xc00148f4
c0015279:	6a 14                	push   0x14
c001527b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527e:	ff d0                	call   eax
c0015280:	83 c4 10             	add    esp,0x10
c0015283:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015286:	8b 00                	mov    eax,DWORD PTR [eax]
c0015288:	83 c0 24             	add    eax,0x24
c001528b:	8b 00                	mov    eax,DWORD PTR [eax]
c001528d:	6a 00                	push   0x0
c001528f:	68 f4 48 01 c0       	push   0xc00148f4
c0015294:	6a 1e                	push   0x1e
c0015296:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015299:	ff d0                	call   eax
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a3:	83 c0 24             	add    eax,0x24
c00152a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a8:	6a 00                	push   0x0
c00152aa:	68 e1 a7 01 c0       	push   0xc001a7e1
c00152af:	6a 60                	push   0x60
c00152b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b4:	ff d0                	call   eax
c00152b6:	83 c4 10             	add    esp,0x10
c00152b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00152bf:	c9                   	leave  
c00152c0:	c3                   	ret    
c00152c1:	90                   	nop

c00152c2 <InterruptController::convertLegacyIRQNumber(int)>:
c00152c2:	55                   	push   ebp
c00152c3:	89 e5                	mov    ebp,esp
c00152c5:	83 ec 08             	sub    esp,0x8
c00152c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cb:	83 ec 0c             	sub    esp,0xc
c00152ce:	50                   	push   eax
c00152cf:	e8 4c ea ff ff       	call   c0013d20 <Device::getName()>
c00152d4:	83 c4 10             	add    esp,0x10
c00152d7:	8a 00                	mov    al,BYTE PTR [eax]
c00152d9:	3c 41                	cmp    al,0x41
c00152db:	0f 94 c0             	sete   al
c00152de:	84 c0                	test   al,al
c00152e0:	74 28                	je     c001530a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00152e2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00152e6:	7f 12                	jg     c00152fa <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00152e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00152eb:	05 60 9d 02 c0       	add    eax,0xc0029d60
c00152f0:	8a 00                	mov    al,BYTE PTR [eax]
c00152f2:	0f b6 c0             	movzx  eax,al
c00152f5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00152f8:	eb 10                	jmp    c001530a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00152fa:	83 ec 0c             	sub    esp,0xc
c00152fd:	68 f4 7b 02 c0       	push   0xc0027bf4
c0015302:	e8 02 3b 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c0015307:	83 c4 10             	add    esp,0x10
c001530a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001530d:	c9                   	leave  
c001530e:	c3                   	ret    
c001530f:	90                   	nop

c0015310 <startGUI(void*)>:
c0015310:	55                   	push   ebp
c0015311:	89 e5                	mov    ebp,esp
c0015313:	53                   	push   ebx
c0015314:	83 ec 04             	sub    esp,0x4
c0015317:	e8 fb 6a 00 00       	call   c001be17 <unlockScheduler()>
c001531c:	e8 df 6a 00 00       	call   c001be00 <getIRQNestingLevel()>
c0015321:	83 ec 08             	sub    esp,0x8
c0015324:	50                   	push   eax
c0015325:	68 dc 7e 02 c0       	push   0xc0027edc
c001532a:	e8 16 d3 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001532f:	83 c4 10             	add    esp,0x10
c0015332:	8b 1d 88 aa 02 c0    	mov    ebx,DWORD PTR ds:0xc002aa88
c0015338:	83 ec 08             	sub    esp,0x8
c001533b:	6a 01                	push   0x1
c001533d:	68 f6 7e 02 c0       	push   0xc0027ef6
c0015342:	e8 91 64 00 00       	call   c001b7d8 <Thr::loadDLL(char const*, bool)>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	83 ec 08             	sub    esp,0x8
c001534d:	53                   	push   ebx
c001534e:	50                   	push   eax
c001534f:	e8 93 66 00 00       	call   c001b9e7 <Thr::executeDLL(unsigned long, void*)>
c0015354:	83 c4 10             	add    esp,0x10
c0015357:	8b 1d 88 aa 02 c0    	mov    ebx,DWORD PTR ds:0xc002aa88
c001535d:	83 ec 08             	sub    esp,0x8
c0015360:	6a 01                	push   0x1
c0015362:	68 10 7f 02 c0       	push   0xc0027f10
c0015367:	e8 6c 64 00 00       	call   c001b7d8 <Thr::loadDLL(char const*, bool)>
c001536c:	83 c4 10             	add    esp,0x10
c001536f:	83 ec 08             	sub    esp,0x8
c0015372:	53                   	push   ebx
c0015373:	50                   	push   eax
c0015374:	e8 6e 66 00 00       	call   c001b9e7 <Thr::executeDLL(unsigned long, void*)>
c0015379:	83 c4 10             	add    esp,0x10
c001537c:	90                   	nop
c001537d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015380:	c9                   	leave  
c0015381:	c3                   	ret    

c0015382 <sendKeyToTerminal(unsigned char)>:
c0015382:	55                   	push   ebp
c0015383:	89 e5                	mov    ebp,esp
c0015385:	83 ec 28             	sub    esp,0x28
c0015388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001538e:	a1 44 ab 02 c0       	mov    eax,ds:0xc002ab44
c0015393:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015397:	83 ec 08             	sub    esp,0x8
c001539a:	52                   	push   edx
c001539b:	50                   	push   eax
c001539c:	e8 83 ba ff ff       	call   c0010e24 <VgaText::receiveKey(unsigned char)>
c00153a1:	83 c4 10             	add    esp,0x10
c00153a4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00153a8:	75 41                	jne    c00153eb <sendKeyToTerminal(unsigned char)+0x69>
c00153aa:	e8 8d 6a 00 00       	call   c001be3c <lockStuff()>
c00153af:	a1 20 ac 02 c0       	mov    eax,ds:0xc002ac20
c00153b4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153b7:	c7 05 20 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac20,0x0
c00153c1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153c5:	74 1f                	je     c00153e6 <sendKeyToTerminal(unsigned char)+0x64>
c00153c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00153cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00153d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153d3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153d6:	83 ec 0c             	sub    esp,0xc
c00153d9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00153dc:	e8 4b 70 00 00       	call   c001c42c <unblockTask(ThreadControlBlock*)>
c00153e1:	83 c4 10             	add    esp,0x10
c00153e4:	eb db                	jmp    c00153c1 <sendKeyToTerminal(unsigned char)+0x3f>
c00153e6:	e8 ea 6d 00 00       	call   c001c1d5 <unlockStuff()>
c00153eb:	90                   	nop
c00153ec:	c9                   	leave  
c00153ed:	c3                   	ret    

c00153ee <sendKeyboardToken(KeyboardToken)>:
c00153ee:	55                   	push   ebp
c00153ef:	89 e5                	mov    ebp,esp
c00153f1:	83 ec 18             	sub    esp,0x18
c00153f4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00153f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fa:	0f b7 c0             	movzx  eax,ax
c00153fd:	83 f2 01             	xor    edx,0x1
c0015400:	88 90 40 ac 02 c0    	mov    BYTE PTR [eax-0x3ffd53c0],dl
c0015406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015409:	66 3d 03 02          	cmp    ax,0x203
c001540d:	75 07                	jne    c0015416 <sendKeyboardToken(KeyboardToken)+0x28>
c001540f:	a0 40 ad 02 c0       	mov    al,ds:0xc002ad40
c0015414:	84 c0                	test   al,al
c0015416:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001541a:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001541d:	a0 48 b0 02 c0       	mov    al,ds:0xc002b048
c0015422:	38 c2                	cmp    dl,al
c0015424:	74 1c                	je     c0015442 <sendKeyboardToken(KeyboardToken)+0x54>
c0015426:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015429:	a2 48 b0 02 c0       	mov    ds:0xc002b048,al
c001542e:	a0 48 b0 02 c0       	mov    al,ds:0xc002b048
c0015433:	0f b6 c0             	movzx  eax,al
c0015436:	83 ec 0c             	sub    esp,0xc
c0015439:	50                   	push   eax
c001543a:	e8 53 ac ff ff       	call   c0010092 <setTerminalScrollLock(bool)>
c001543f:	83 c4 10             	add    esp,0x10
c0015442:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015445:	84 c0                	test   al,al
c0015447:	0f 84 ae 00 00 00    	je     c00154fb <sendKeyboardToken(KeyboardToken)+0x10d>
c001544d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015450:	66 3d 10 03          	cmp    ax,0x310
c0015454:	75 06                	jne    c001545c <sendKeyboardToken(KeyboardToken)+0x6e>
c0015456:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001545c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545f:	66 3d 11 03          	cmp    ax,0x311
c0015463:	75 06                	jne    c001546b <sendKeyboardToken(KeyboardToken)+0x7d>
c0015465:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001546b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546e:	66 3d 12 03          	cmp    ax,0x312
c0015472:	75 06                	jne    c001547a <sendKeyboardToken(KeyboardToken)+0x8c>
c0015474:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001547a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547d:	66 3d 13 03          	cmp    ax,0x313
c0015481:	75 06                	jne    c0015489 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015483:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548c:	66 3d 14 03          	cmp    ax,0x314
c0015490:	75 06                	jne    c0015498 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015492:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549b:	66 3d 15 03          	cmp    ax,0x315
c001549f:	75 06                	jne    c00154a7 <sendKeyboardToken(KeyboardToken)+0xb9>
c00154a1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00154a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154aa:	66 3d 16 03          	cmp    ax,0x316
c00154ae:	75 06                	jne    c00154b6 <sendKeyboardToken(KeyboardToken)+0xc8>
c00154b0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00154b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b9:	66 3d 17 03          	cmp    ax,0x317
c00154bd:	75 06                	jne    c00154c5 <sendKeyboardToken(KeyboardToken)+0xd7>
c00154bf:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00154c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c8:	66 3d 18 03          	cmp    ax,0x318
c00154cc:	75 06                	jne    c00154d4 <sendKeyboardToken(KeyboardToken)+0xe6>
c00154ce:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00154d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d7:	66 3d 19 03          	cmp    ax,0x319
c00154db:	75 06                	jne    c00154e3 <sendKeyboardToken(KeyboardToken)+0xf5>
c00154dd:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00154e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e6:	66 3d 1a 03          	cmp    ax,0x31a
c00154ea:	0f 85 c9 00 00 00    	jne    c00155b9 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00154f0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00154f6:	e9 be 00 00 00       	jmp    c00155b9 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00154fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fe:	66 3d 10 03          	cmp    ax,0x310
c0015502:	75 0a                	jne    c001550e <sendKeyboardToken(KeyboardToken)+0x120>
c0015504:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001550a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001550e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015511:	66 3d 11 03          	cmp    ax,0x311
c0015515:	75 0a                	jne    c0015521 <sendKeyboardToken(KeyboardToken)+0x133>
c0015517:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001551d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015524:	66 3d 12 03          	cmp    ax,0x312
c0015528:	75 0a                	jne    c0015534 <sendKeyboardToken(KeyboardToken)+0x146>
c001552a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015530:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015537:	66 3d 13 03          	cmp    ax,0x313
c001553b:	75 0a                	jne    c0015547 <sendKeyboardToken(KeyboardToken)+0x159>
c001553d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015543:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554a:	66 3d 14 03          	cmp    ax,0x314
c001554e:	75 0a                	jne    c001555a <sendKeyboardToken(KeyboardToken)+0x16c>
c0015550:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015556:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001555a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555d:	66 3d 15 03          	cmp    ax,0x315
c0015561:	75 0a                	jne    c001556d <sendKeyboardToken(KeyboardToken)+0x17f>
c0015563:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015569:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001556d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015570:	66 3d 16 03          	cmp    ax,0x316
c0015574:	75 0a                	jne    c0015580 <sendKeyboardToken(KeyboardToken)+0x192>
c0015576:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001557c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015583:	66 3d 17 03          	cmp    ax,0x317
c0015587:	75 0a                	jne    c0015593 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015589:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001558f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015596:	66 3d 18 03          	cmp    ax,0x318
c001559a:	75 0a                	jne    c00155a6 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001559c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00155a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a9:	66 3d 19 03          	cmp    ax,0x319
c00155ad:	75 0a                	jne    c00155b9 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00155af:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00155b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bc:	66 3d 00 02          	cmp    ax,0x200
c00155c0:	75 2a                	jne    c00155ec <sendKeyboardToken(KeyboardToken)+0x1fe>
c00155c2:	a0 40 b0 02 c0       	mov    al,ds:0xc002b040
c00155c7:	83 f0 01             	xor    eax,0x1
c00155ca:	84 c0                	test   al,al
c00155cc:	74 1e                	je     c00155ec <sendKeyboardToken(KeyboardToken)+0x1fe>
c00155ce:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00155d3:	6a 01                	push   0x1
c00155d5:	6a 00                	push   0x0
c00155d7:	68 10 53 01 c0       	push   0xc0015310
c00155dc:	50                   	push   eax
c00155dd:	e8 64 69 00 00       	call   c001bf46 <Process::createThread(void (*)(void*), void*, int)>
c00155e2:	83 c4 10             	add    esp,0x10
c00155e5:	c6 05 40 b0 02 c0 01 	mov    BYTE PTR ds:0xc002b040,0x1
c00155ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ef:	66 3d 1d 03          	cmp    ax,0x31d
c00155f3:	75 06                	jne    c00155fb <sendKeyboardToken(KeyboardToken)+0x20d>
c00155f5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00155fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fe:	66 3d 1c 03          	cmp    ax,0x31c
c0015602:	75 06                	jne    c001560a <sendKeyboardToken(KeyboardToken)+0x21c>
c0015604:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001560a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560d:	66 3d 1b 03          	cmp    ax,0x31b
c0015611:	75 06                	jne    c0015619 <sendKeyboardToken(KeyboardToken)+0x22b>
c0015613:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	66 3d 1e 03          	cmp    ax,0x31e
c0015620:	75 06                	jne    c0015628 <sendKeyboardToken(KeyboardToken)+0x23a>
c0015622:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562b:	66 3d 1f 03          	cmp    ax,0x31f
c001562f:	75 06                	jne    c0015637 <sendKeyboardToken(KeyboardToken)+0x249>
c0015631:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563a:	66 3d 1a 03          	cmp    ax,0x31a
c001563e:	75 06                	jne    c0015646 <sendKeyboardToken(KeyboardToken)+0x258>
c0015640:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015646:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001564a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001564d:	83 f0 01             	xor    eax,0x1
c0015650:	84 c0                	test   al,al
c0015652:	74 77                	je     c00156cb <sendKeyboardToken(KeyboardToken)+0x2dd>
c0015654:	a0 41 ad 02 c0       	mov    al,ds:0xc002ad41
c0015659:	84 c0                	test   al,al
c001565b:	74 41                	je     c001569e <sendKeyboardToken(KeyboardToken)+0x2b0>
c001565d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015661:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015665:	74 2b                	je     c0015692 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015667:	8b 15 44 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b044
c001566d:	89 d0                	mov    eax,edx
c001566f:	c1 e0 02             	shl    eax,0x2
c0015672:	01 d0                	add    eax,edx
c0015674:	01 c0                	add    eax,eax
c0015676:	a3 44 b0 02 c0       	mov    ds:0xc002b044,eax
c001567b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567e:	0f b7 c0             	movzx  eax,ax
c0015681:	8d 50 d0             	lea    edx,[eax-0x30]
c0015684:	a1 44 b0 02 c0       	mov    eax,ds:0xc002b044
c0015689:	01 d0                	add    eax,edx
c001568b:	a3 44 b0 02 c0       	mov    ds:0xc002b044,eax
c0015690:	eb 6d                	jmp    c00156ff <sendKeyboardToken(KeyboardToken)+0x311>
c0015692:	c7 05 44 b0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b044,0x0
c001569c:	eb 61                	jmp    c00156ff <sendKeyboardToken(KeyboardToken)+0x311>
c001569e:	a1 44 b0 02 c0       	mov    eax,ds:0xc002b044
c00156a3:	85 c0                	test   eax,eax
c00156a5:	74 18                	je     c00156bf <sendKeyboardToken(KeyboardToken)+0x2d1>
c00156a7:	a1 44 b0 02 c0       	mov    eax,ds:0xc002b044
c00156ac:	0f b6 c0             	movzx  eax,al
c00156af:	83 ec 0c             	sub    esp,0xc
c00156b2:	50                   	push   eax
c00156b3:	e8 ca fc ff ff       	call   c0015382 <sendKeyToTerminal(unsigned char)>
c00156b8:	83 c4 10             	add    esp,0x10
c00156bb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156bf:	c7 05 44 b0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b044,0x0
c00156c9:	eb 34                	jmp    c00156ff <sendKeyboardToken(KeyboardToken)+0x311>
c00156cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ce:	66 3d 01 01          	cmp    ax,0x101
c00156d2:	75 2b                	jne    c00156ff <sendKeyboardToken(KeyboardToken)+0x311>
c00156d4:	a1 44 b0 02 c0       	mov    eax,ds:0xc002b044
c00156d9:	85 c0                	test   eax,eax
c00156db:	74 18                	je     c00156f5 <sendKeyboardToken(KeyboardToken)+0x307>
c00156dd:	a1 44 b0 02 c0       	mov    eax,ds:0xc002b044
c00156e2:	0f b6 c0             	movzx  eax,al
c00156e5:	83 ec 0c             	sub    esp,0xc
c00156e8:	50                   	push   eax
c00156e9:	e8 94 fc ff ff       	call   c0015382 <sendKeyToTerminal(unsigned char)>
c00156ee:	83 c4 10             	add    esp,0x10
c00156f1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156f5:	c7 05 44 b0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b044,0x0
c00156ff:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015702:	83 f0 01             	xor    eax,0x1
c0015705:	84 c0                	test   al,al
c0015707:	74 4c                	je     c0015755 <sendKeyboardToken(KeyboardToken)+0x367>
c0015709:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001570c:	83 f0 01             	xor    eax,0x1
c001570f:	84 c0                	test   al,al
c0015711:	74 42                	je     c0015755 <sendKeyboardToken(KeyboardToken)+0x367>
c0015713:	a0 40 ad 02 c0       	mov    al,ds:0xc002ad40
c0015718:	83 f0 01             	xor    eax,0x1
c001571b:	84 c0                	test   al,al
c001571d:	74 36                	je     c0015755 <sendKeyboardToken(KeyboardToken)+0x367>
c001571f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015722:	66 83 f8 1f          	cmp    ax,0x1f
c0015726:	76 09                	jbe    c0015731 <sendKeyboardToken(KeyboardToken)+0x343>
c0015728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572b:	66 83 f8 7e          	cmp    ax,0x7e
c001572f:	76 12                	jbe    c0015743 <sendKeyboardToken(KeyboardToken)+0x355>
c0015731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015734:	66 83 f8 0a          	cmp    ax,0xa
c0015738:	74 09                	je     c0015743 <sendKeyboardToken(KeyboardToken)+0x355>
c001573a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573d:	66 83 f8 08          	cmp    ax,0x8
c0015741:	75 12                	jne    c0015755 <sendKeyboardToken(KeyboardToken)+0x367>
c0015743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015746:	0f b6 c0             	movzx  eax,al
c0015749:	83 ec 0c             	sub    esp,0xc
c001574c:	50                   	push   eax
c001574d:	e8 30 fc ff ff       	call   c0015382 <sendKeyToTerminal(unsigned char)>
c0015752:	83 c4 10             	add    esp,0x10
c0015755:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015758:	83 f0 01             	xor    eax,0x1
c001575b:	84 c0                	test   al,al
c001575d:	74 4f                	je     c00157ae <sendKeyboardToken(KeyboardToken)+0x3c0>
c001575f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015762:	83 f0 01             	xor    eax,0x1
c0015765:	84 c0                	test   al,al
c0015767:	74 45                	je     c00157ae <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015769:	a0 40 ad 02 c0       	mov    al,ds:0xc002ad40
c001576e:	84 c0                	test   al,al
c0015770:	74 3c                	je     c00157ae <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015775:	66 83 f8 3f          	cmp    ax,0x3f
c0015779:	76 33                	jbe    c00157ae <sendKeyboardToken(KeyboardToken)+0x3c0>
c001577b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577e:	66 83 f8 7f          	cmp    ax,0x7f
c0015782:	77 2a                	ja     c00157ae <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015787:	88 c2                	mov    dl,al
c0015789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578c:	66 83 f8 5f          	cmp    ax,0x5f
c0015790:	76 04                	jbe    c0015796 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0015792:	b0 20                	mov    al,0x20
c0015794:	eb 02                	jmp    c0015798 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0015796:	b0 00                	mov    al,0x0
c0015798:	29 c2                	sub    edx,eax
c001579a:	88 d0                	mov    al,dl
c001579c:	83 e8 40             	sub    eax,0x40
c001579f:	0f b6 c0             	movzx  eax,al
c00157a2:	83 ec 0c             	sub    esp,0xc
c00157a5:	50                   	push   eax
c00157a6:	e8 d7 fb ff ff       	call   c0015382 <sendKeyToTerminal(unsigned char)>
c00157ab:	83 c4 10             	add    esp,0x10
c00157ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b1:	66 3d 00 03          	cmp    ax,0x300
c00157b5:	75 0f                	jne    c00157c6 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157ba:	83 f0 01             	xor    eax,0x1
c00157bd:	84 c0                	test   al,al
c00157bf:	74 05                	je     c00157c6 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157c1:	e8 f3 b0 ff ff       	call   c00108b9 <doTerminalCycle()>
c00157c6:	90                   	nop
c00157c7:	c9                   	leave  
c00157c8:	c3                   	ret    

c00157c9 <clearInternalKeybuffer(VgaText*)>:
c00157c9:	55                   	push   ebp
c00157ca:	89 e5                	mov    ebp,esp
c00157cc:	83 ec 08             	sub    esp,0x8
c00157cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d2:	05 34 11 00 00       	add    eax,0x1134
c00157d7:	83 ec 0c             	sub    esp,0xc
c00157da:	50                   	push   eax
c00157db:	e8 ba ae fe ff       	call   c000069a <strlen>
c00157e0:	83 c4 10             	add    esp,0x10
c00157e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00157e6:	81 c2 34 11 00 00    	add    edx,0x1134
c00157ec:	83 ec 04             	sub    esp,0x4
c00157ef:	50                   	push   eax
c00157f0:	6a 00                	push   0x0
c00157f2:	52                   	push   edx
c00157f3:	e8 85 ae fe ff       	call   c000067d <memset>
c00157f8:	83 c4 10             	add    esp,0x10
c00157fb:	90                   	nop
c00157fc:	c9                   	leave  
c00157fd:	c3                   	ret    

c00157fe <readKeyboard(VgaText*, char*, unsigned long)>:
c00157fe:	55                   	push   ebp
c00157ff:	89 e5                	mov    ebp,esp
c0015801:	83 ec 18             	sub    esp,0x18
c0015804:	fb                   	sti    
c0015805:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001580c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015810:	0f 84 8a 00 00 00    	je     c00158a0 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015819:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001581f:	84 c0                	test   al,al
c0015821:	75 11                	jne    c0015834 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015823:	e8 ed 65 00 00       	call   c001be15 <lockScheduler()>
c0015828:	e8 23 69 00 00       	call   c001c150 <schedule()>
c001582d:	e8 e5 65 00 00       	call   c001be17 <unlockScheduler()>
c0015832:	eb e2                	jmp    c0015816 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015834:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015837:	8d 50 01             	lea    edx,[eax+0x1]
c001583a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001583d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015840:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015846:	88 10                	mov    BYTE PTR [eax],dl
c0015848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015851:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	05 34 11 00 00       	add    eax,0x1134
c001585c:	83 ec 0c             	sub    esp,0xc
c001585f:	50                   	push   eax
c0015860:	e8 35 ae fe ff       	call   c000069a <strlen>
c0015865:	83 c4 10             	add    esp,0x10
c0015868:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001586b:	81 c2 34 11 00 00    	add    edx,0x1134
c0015871:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015874:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015877:	81 c2 34 11 00 00    	add    edx,0x1134
c001587d:	83 ec 04             	sub    esp,0x4
c0015880:	50                   	push   eax
c0015881:	51                   	push   ecx
c0015882:	52                   	push   edx
c0015883:	e8 87 ad fe ff       	call   c000060f <memmove>
c0015888:	83 c4 10             	add    esp,0x10
c001588b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001588e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015891:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015895:	0f 85 71 ff ff ff    	jne    c001580c <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001589b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001589e:	eb 03                	jmp    c00158a3 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00158a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158a3:	c9                   	leave  
c00158a4:	c3                   	ret    
c00158a5:	90                   	nop

c00158a6 <Keyboard::Keyboard(char const*)>:
c00158a6:	83 ec 0c             	sub    esp,0xc
c00158a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ad:	83 ec 08             	sub    esp,0x8
c00158b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158b4:	50                   	push   eax
c00158b5:	e8 6a e3 ff ff       	call   c0013c24 <Device::Device(char const*)>
c00158ba:	83 c4 10             	add    esp,0x10
c00158bd:	ba 34 7f 02 c0       	mov    edx,0xc0027f34
c00158c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c6:	89 10                	mov    DWORD PTR [eax],edx
c00158c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158cc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00158d6:	c6 05 24 ac 02 c0 01 	mov    BYTE PTR ds:0xc002ac24,0x1
c00158dd:	90                   	nop
c00158de:	83 c4 0c             	add    esp,0xc
c00158e1:	c3                   	ret    

c00158e2 <Keyboard::~Keyboard()>:
c00158e2:	83 ec 0c             	sub    esp,0xc
c00158e5:	ba 34 7f 02 c0       	mov    edx,0xc0027f34
c00158ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ee:	89 10                	mov    DWORD PTR [eax],edx
c00158f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f4:	83 ec 0c             	sub    esp,0xc
c00158f7:	50                   	push   eax
c00158f8:	e8 09 e0 ff ff       	call   c0013906 <Device::~Device()>
c00158fd:	83 c4 10             	add    esp,0x10
c0015900:	90                   	nop
c0015901:	83 c4 0c             	add    esp,0xc
c0015904:	c3                   	ret    
c0015905:	90                   	nop

c0015906 <Keyboard::~Keyboard()>:
c0015906:	83 ec 0c             	sub    esp,0xc
c0015909:	83 ec 0c             	sub    esp,0xc
c001590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015910:	e8 cd ff ff ff       	call   c00158e2 <Keyboard::~Keyboard()>
c0015915:	83 c4 10             	add    esp,0x10
c0015918:	83 ec 08             	sub    esp,0x8
c001591b:	68 5c 01 00 00       	push   0x15c
c0015920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015924:	e8 3c cc ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0015929:	83 c4 10             	add    esp,0x10
c001592c:	83 c4 0c             	add    esp,0xc
c001592f:	c3                   	ret    

c0015930 <LogicalDisk::close(int, int, void*)>:
c0015930:	83 c8 ff             	or     eax,0xffffffff
c0015933:	c3                   	ret    

c0015934 <LogicalDisk::~LogicalDisk()>:
c0015934:	83 ec 0c             	sub    esp,0xc
c0015937:	ba e4 7f 02 c0       	mov    edx,0xc0027fe4
c001593c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015940:	89 10                	mov    DWORD PTR [eax],edx
c0015942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015946:	83 ec 0c             	sub    esp,0xc
c0015949:	50                   	push   eax
c001594a:	e8 b7 df ff ff       	call   c0013906 <Device::~Device()>
c001594f:	83 c4 10             	add    esp,0x10
c0015952:	90                   	nop
c0015953:	83 c4 0c             	add    esp,0xc
c0015956:	c3                   	ret    
c0015957:	90                   	nop

c0015958 <LogicalDisk::~LogicalDisk()>:
c0015958:	83 ec 0c             	sub    esp,0xc
c001595b:	83 ec 0c             	sub    esp,0xc
c001595e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015962:	e8 cd ff ff ff       	call   c0015934 <LogicalDisk::~LogicalDisk()>
c0015967:	83 c4 10             	add    esp,0x10
c001596a:	83 ec 08             	sub    esp,0x8
c001596d:	68 74 01 00 00       	push   0x174
c0015972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015976:	e8 ea cb ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	83 c4 0c             	add    esp,0xc
c0015981:	c3                   	ret    

c0015982 <LogicalDisk::open(int, int, void*)>:
c0015982:	83 ec 18             	sub    esp,0x18
c0015985:	68 60 7f 02 c0       	push   0xc0027f60
c001598a:	e8 7a 34 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c001598f:	83 c8 ff             	or     eax,0xffffffff
c0015992:	83 c4 1c             	add    esp,0x1c
c0015995:	c3                   	ret    

c0015996 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015996:	53                   	push   ebx
c0015997:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001599b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001599f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159a3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00159a9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00159af:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00159b5:	77 10                	ja     c00159c7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00159b7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00159bd:	89 d3                	mov    ebx,edx
c00159bf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00159c5:	72 05                	jb     c00159cc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00159c7:	83 c8 ff             	or     eax,0xffffffff
c00159ca:	89 c2                	mov    edx,eax
c00159cc:	5b                   	pop    ebx
c00159cd:	c3                   	ret    

c00159ce <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00159ce:	56                   	push   esi
c00159cf:	83 c8 ff             	or     eax,0xffffffff
c00159d2:	53                   	push   ebx
c00159d3:	89 c2                	mov    edx,eax
c00159d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00159d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00159dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00159e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00159e7:	77 27                	ja     c0015a10 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00159e9:	89 d8                	mov    eax,ebx
c00159eb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00159f1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00159f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159fc:	89 c2                	mov    edx,eax
c00159fe:	73 10                	jae    c0015a10 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015a00:	89 c8                	mov    eax,ecx
c0015a02:	89 da                	mov    edx,ebx
c0015a04:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015a0a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015a10:	5b                   	pop    ebx
c0015a11:	5e                   	pop    esi
c0015a12:	c3                   	ret    
c0015a13:	90                   	nop

c0015a14 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015a14:	83 ec 1c             	sub    esp,0x1c
c0015a17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015a32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a3a:	83 ec 08             	sub    esp,0x8
c0015a3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a41:	50                   	push   eax
c0015a42:	e8 dd e1 ff ff       	call   c0013c24 <Device::Device(char const*)>
c0015a47:	83 c4 10             	add    esp,0x10
c0015a4a:	ba e4 7f 02 c0       	mov    edx,0xc0027fe4
c0015a4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a53:	89 10                	mov    DWORD PTR [eax],edx
c0015a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a59:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a64:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015a6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a6f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015a79:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015a7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015a85:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015a8b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015a91:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015a95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015a98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015a9c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015aa2:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ab0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aba:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ac4:	90                   	nop
c0015ac5:	83 c4 1c             	add    esp,0x1c
c0015ac8:	c3                   	ret    
c0015ac9:	90                   	nop

c0015aca <LogicalDisk::assignDriveLetter()>:
c0015aca:	55                   	push   ebp
c0015acb:	57                   	push   edi
c0015acc:	56                   	push   esi
c0015acd:	53                   	push   ebx
c0015ace:	83 ec 14             	sub    esp,0x14
c0015ad1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ad5:	8b 3d 60 b0 02 c0    	mov    edi,DWORD PTR ds:0xc002b060
c0015adb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ae1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ae5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015aeb:	8b 3d 64 b0 02 c0    	mov    edi,DWORD PTR ds:0xc002b064
c0015af1:	3c 01                	cmp    al,0x1
c0015af3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015af7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015afb:	19 c0                	sbb    eax,eax
c0015afd:	83 e0 02             	and    eax,0x2
c0015b00:	83 c0 41             	add    eax,0x41
c0015b03:	0f be e8             	movsx  ebp,al
c0015b06:	3c 43                	cmp    al,0x43
c0015b08:	75 10                	jne    c0015b1a <LogicalDisk::assignDriveLetter()+0x50>
c0015b0a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015b11:	75 5d                	jne    c0015b70 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b13:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b18:	75 56                	jne    c0015b70 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b1a:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015b1d:	ba 01 00 00 00       	mov    edx,0x1
c0015b22:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015b26:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015b2a:	d3 e2                	shl    edx,cl
c0015b2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b30:	89 d7                	mov    edi,edx
c0015b32:	89 d6                	mov    esi,edx
c0015b34:	c1 ff 1f             	sar    edi,0x1f
c0015b37:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015b3b:	21 f9                	and    ecx,edi
c0015b3d:	09 d1                	or     ecx,edx
c0015b3f:	75 2f                	jne    c0015b70 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015b45:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015b49:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015b4f:	09 f2                	or     edx,esi
c0015b51:	89 15 60 b0 02 c0    	mov    DWORD PTR ds:0xc002b060,edx
c0015b57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b5b:	09 fa                	or     edx,edi
c0015b5d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015b61:	89 15 64 b0 02 c0    	mov    DWORD PTR ds:0xc002b064,edx
c0015b67:	89 1c bd 80 b0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4f80],ebx
c0015b6e:	eb 08                	jmp    c0015b78 <LogicalDisk::assignDriveLetter()+0xae>
c0015b70:	45                   	inc    ebp
c0015b71:	40                   	inc    eax
c0015b72:	3c 5b                	cmp    al,0x5b
c0015b74:	75 90                	jne    c0015b06 <LogicalDisk::assignDriveLetter()+0x3c>
c0015b76:	31 c0                	xor    eax,eax
c0015b78:	83 c4 14             	add    esp,0x14
c0015b7b:	5b                   	pop    ebx
c0015b7c:	5e                   	pop    esi
c0015b7d:	5f                   	pop    edi
c0015b7e:	5d                   	pop    ebp
c0015b7f:	c3                   	ret    

c0015b80 <LogicalDisk::mount()>:
c0015b80:	56                   	push   esi
c0015b81:	53                   	push   ebx
c0015b82:	51                   	push   ecx
c0015b83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b87:	8b 1d e8 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002abe8
c0015b8d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015b97:	85 db                	test   ebx,ebx
c0015b99:	74 50                	je     c0015beb <LogicalDisk::mount()+0x6b>
c0015b9b:	e8 60 62 00 00       	call   c001be00 <getIRQNestingLevel()>
c0015ba0:	52                   	push   edx
c0015ba1:	52                   	push   edx
c0015ba2:	50                   	push   eax
c0015ba3:	68 84 7f 02 c0       	push   0xc0027f84
c0015ba8:	e8 98 ca ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0015bad:	83 c4 0c             	add    esp,0xc
c0015bb0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015bb7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015bb9:	83 e8 41             	sub    eax,0x41
c0015bbc:	50                   	push   eax
c0015bbd:	56                   	push   esi
c0015bbe:	53                   	push   ebx
c0015bbf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bc2:	83 c4 10             	add    esp,0x10
c0015bc5:	84 c0                	test   al,al
c0015bc7:	74 08                	je     c0015bd1 <LogicalDisk::mount()+0x51>
c0015bc9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015bcf:	eb 1c                	jmp    c0015bed <LogicalDisk::mount()+0x6d>
c0015bd1:	e8 2a 62 00 00       	call   c001be00 <getIRQNestingLevel()>
c0015bd6:	51                   	push   ecx
c0015bd7:	51                   	push   ecx
c0015bd8:	50                   	push   eax
c0015bd9:	68 9f 7f 02 c0       	push   0xc0027f9f
c0015bde:	e8 62 ca ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0015be3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015be6:	83 c4 10             	add    esp,0x10
c0015be9:	eb ac                	jmp    c0015b97 <LogicalDisk::mount()+0x17>
c0015beb:	31 c0                	xor    eax,eax
c0015bed:	5a                   	pop    edx
c0015bee:	5b                   	pop    ebx
c0015bef:	5e                   	pop    esi
c0015bf0:	c3                   	ret    
c0015bf1:	90                   	nop

c0015bf2 <LogicalDisk::unmount()>:
c0015bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bf6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015c00:	c3                   	ret    
c0015c01:	90                   	nop

c0015c02 <LogicalDisk::unassignDriveLetter()>:
c0015c02:	57                   	push   edi
c0015c03:	56                   	push   esi
c0015c04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c08:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015c0f:	84 c9                	test   cl,cl
c0015c11:	75 0f                	jne    c0015c22 <LogicalDisk::unassignDriveLetter()+0x20>
c0015c13:	c7 44 24 0c ba 7f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027fba
c0015c1b:	5e                   	pop    esi
c0015c1c:	5f                   	pop    edi
c0015c1d:	e9 e7 31 00 00       	jmp    c0018e09 <Krnl::panic(char const*)>
c0015c22:	83 e9 41             	sub    ecx,0x41
c0015c25:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015c2c:	b8 01 00 00 00       	mov    eax,0x1
c0015c31:	c7 04 8d 80 b0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4f80],0x0
c0015c3c:	d3 e0                	shl    eax,cl
c0015c3e:	89 c7                	mov    edi,eax
c0015c40:	f7 d0                	not    eax
c0015c42:	c1 ff 1f             	sar    edi,0x1f
c0015c45:	21 05 60 b0 02 c0    	and    DWORD PTR ds:0xc002b060,eax
c0015c4b:	89 fe                	mov    esi,edi
c0015c4d:	f7 d6                	not    esi
c0015c4f:	21 35 64 b0 02 c0    	and    DWORD PTR ds:0xc002b064,esi
c0015c55:	5e                   	pop    esi
c0015c56:	5f                   	pop    edi
c0015c57:	c3                   	ret    

c0015c58 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015c58:	57                   	push   edi
c0015c59:	56                   	push   esi
c0015c5a:	53                   	push   ebx
c0015c5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015c5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c63:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c6b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015c71:	77 41                	ja     c0015cb4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015c73:	99                   	cdq    
c0015c74:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015c7a:	01 c8                	add    eax,ecx
c0015c7c:	11 da                	adc    edx,ebx
c0015c7e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015c84:	19 d7                	sbb    edi,edx
c0015c86:	72 33                	jb     c0015cbb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015c88:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015c8e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015c94:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015c98:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015c9c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015ca2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ca8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015cac:	5b                   	pop    ebx
c0015cad:	5e                   	pop    esi
c0015cae:	5f                   	pop    edi
c0015caf:	e9 74 09 00 00       	jmp    c0016628 <VCache::read(unsigned long long, int, void*)>
c0015cb4:	b8 05 00 00 00       	mov    eax,0x5
c0015cb9:	eb 05                	jmp    c0015cc0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015cbb:	b8 07 00 00 00       	mov    eax,0x7
c0015cc0:	5b                   	pop    ebx
c0015cc1:	5e                   	pop    esi
c0015cc2:	5f                   	pop    edi
c0015cc3:	c3                   	ret    

c0015cc4 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015cc4:	57                   	push   edi
c0015cc5:	56                   	push   esi
c0015cc6:	53                   	push   ebx
c0015cc7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ccb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ccf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cd7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015cdd:	77 41                	ja     c0015d20 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015cdf:	99                   	cdq    
c0015ce0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015ce6:	01 c8                	add    eax,ecx
c0015ce8:	11 da                	adc    edx,ebx
c0015cea:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015cf0:	19 d7                	sbb    edi,edx
c0015cf2:	72 33                	jb     c0015d27 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015cf4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015cfa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015d00:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015d04:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015d08:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015d0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d18:	5b                   	pop    ebx
c0015d19:	5e                   	pop    esi
c0015d1a:	5f                   	pop    edi
c0015d1b:	e9 24 08 00 00       	jmp    c0016544 <VCache::write(unsigned long long, int, void*)>
c0015d20:	b8 05 00 00 00       	mov    eax,0x5
c0015d25:	eb 05                	jmp    c0015d2c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015d27:	b8 07 00 00 00       	mov    eax,0x7
c0015d2c:	5b                   	pop    ebx
c0015d2d:	5e                   	pop    esi
c0015d2e:	5f                   	pop    edi
c0015d2f:	c3                   	ret    

c0015d30 <Mouse::Mouse(char const*)>:
c0015d30:	83 ec 0c             	sub    esp,0xc
c0015d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d37:	83 ec 08             	sub    esp,0x8
c0015d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d3e:	50                   	push   eax
c0015d3f:	e8 e0 de ff ff       	call   c0013c24 <Device::Device(char const*)>
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	ba 10 80 02 c0       	mov    edx,0xc0028010
c0015d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d50:	89 10                	mov    DWORD PTR [eax],edx
c0015d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d56:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015d60:	90                   	nop
c0015d61:	83 c4 0c             	add    esp,0xc
c0015d64:	c3                   	ret    
c0015d65:	90                   	nop

c0015d66 <Mouse::~Mouse()>:
c0015d66:	83 ec 0c             	sub    esp,0xc
c0015d69:	ba 10 80 02 c0       	mov    edx,0xc0028010
c0015d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d72:	89 10                	mov    DWORD PTR [eax],edx
c0015d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	50                   	push   eax
c0015d7c:	e8 85 db ff ff       	call   c0013906 <Device::~Device()>
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	90                   	nop
c0015d85:	83 c4 0c             	add    esp,0xc
c0015d88:	c3                   	ret    
c0015d89:	90                   	nop

c0015d8a <Mouse::~Mouse()>:
c0015d8a:	83 ec 0c             	sub    esp,0xc
c0015d8d:	83 ec 0c             	sub    esp,0xc
c0015d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d94:	e8 cd ff ff ff       	call   c0015d66 <Mouse::~Mouse()>
c0015d99:	83 c4 10             	add    esp,0x10
c0015d9c:	83 ec 08             	sub    esp,0x8
c0015d9f:	68 58 01 00 00       	push   0x158
c0015da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015da8:	e8 b8 c7 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	83 c4 0c             	add    esp,0xc
c0015db3:	c3                   	ret    

c0015db4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015db4:	55                   	push   ebp
c0015db5:	57                   	push   edi
c0015db6:	56                   	push   esi
c0015db7:	53                   	push   ebx
c0015db8:	81 ec 28 01 00 00    	sub    esp,0x128
c0015dbe:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015dc5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015dcc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015dd3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015dde:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015de2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015de9:	e8 32 df ff ff       	call   c0013d20 <Device::getName()>
c0015dee:	5a                   	pop    edx
c0015def:	59                   	pop    ecx
c0015df0:	50                   	push   eax
c0015df1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015df5:	55                   	push   ebp
c0015df6:	e8 21 a9 fe ff       	call   c000071c <strcpy>
c0015dfb:	5b                   	pop    ebx
c0015dfc:	58                   	pop    eax
c0015dfd:	68 34 80 02 c0       	push   0xc0028034
c0015e02:	55                   	push   ebp
c0015e03:	e8 cb a9 fe ff       	call   c00007d3 <strcat>
c0015e08:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015e0f:	e8 be 96 ff ff       	call   c000f4d2 <malloc>
c0015e14:	83 c4 0c             	add    esp,0xc
c0015e17:	89 c3                	mov    ebx,eax
c0015e19:	57                   	push   edi
c0015e1a:	56                   	push   esi
c0015e1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e23:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015e2a:	55                   	push   ebp
c0015e2b:	50                   	push   eax
c0015e2c:	e8 e3 fb ff ff       	call   c0015a14 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015e31:	83 c4 14             	add    esp,0x14
c0015e34:	53                   	push   ebx
c0015e35:	e8 90 fc ff ff       	call   c0015aca <LogicalDisk::assignDriveLetter()>
c0015e3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e3d:	e8 3e fd ff ff       	call   c0015b80 <LogicalDisk::mount()>
c0015e42:	58                   	pop    eax
c0015e43:	5a                   	pop    edx
c0015e44:	53                   	push   ebx
c0015e45:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015e4c:	e8 e3 db ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0015e51:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e57:	5b                   	pop    ebx
c0015e58:	5e                   	pop    esi
c0015e59:	5f                   	pop    edi
c0015e5a:	5d                   	pop    ebp
c0015e5b:	c3                   	ret    

c0015e5c <createPartitionsForDisk(PhysicalDisk*)>:
c0015e5c:	55                   	push   ebp
c0015e5d:	57                   	push   edi
c0015e5e:	56                   	push   esi
c0015e5f:	53                   	push   ebx
c0015e60:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015e66:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015e6d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015e73:	3d 00 02 00 00       	cmp    eax,0x200
c0015e78:	74 27                	je     c0015ea1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015e7a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015e80:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015e86:	83 ec 10             	sub    esp,0x10
c0015e89:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015e8d:	99                   	cdq    
c0015e8e:	c1 e6 0a             	shl    esi,0xa
c0015e91:	52                   	push   edx
c0015e92:	89 fd                	mov    ebp,edi
c0015e94:	50                   	push   eax
c0015e95:	55                   	push   ebp
c0015e96:	56                   	push   esi
c0015e97:	e8 c0 db 00 00       	call   c0023a5c <__udivdi3>
c0015e9c:	e9 b1 00 00 00       	jmp    c0015f52 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ea1:	83 ec 0c             	sub    esp,0xc
c0015ea4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ea6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015eaa:	56                   	push   esi
c0015eab:	6a 01                	push   0x1
c0015ead:	6a 00                	push   0x0
c0015eaf:	6a 00                	push   0x0
c0015eb1:	53                   	push   ebx
c0015eb2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015eb5:	83 c4 20             	add    esp,0x20
c0015eb8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015ec0:	75 0a                	jne    c0015ecc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015ec2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015eca:	74 2c                	je     c0015ef8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015ecc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015ed2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015ed8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015ede:	83 ec 10             	sub    esp,0x10
c0015ee1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015ee5:	89 f7                	mov    edi,esi
c0015ee7:	c1 e0 0a             	shl    eax,0xa
c0015eea:	c1 ff 1f             	sar    edi,0x1f
c0015eed:	57                   	push   edi
c0015eee:	56                   	push   esi
c0015eef:	52                   	push   edx
c0015ef0:	50                   	push   eax
c0015ef1:	e8 66 db 00 00       	call   c0023a5c <__udivdi3>
c0015ef6:	eb 5a                	jmp    c0015f52 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ef8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015eff:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015f06:	83 e1 7f             	and    ecx,0x7f
c0015f09:	83 e0 7f             	and    eax,0x7f
c0015f0c:	01 c1                	add    ecx,eax
c0015f0e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015f15:	83 e0 7f             	and    eax,0x7f
c0015f18:	01 c1                	add    ecx,eax
c0015f1a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015f21:	83 e0 7f             	and    eax,0x7f
c0015f24:	00 c1                	add    cl,al
c0015f26:	74 41                	je     c0015f69 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015f28:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f2e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f34:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f3a:	83 ec 10             	sub    esp,0x10
c0015f3d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015f41:	89 f7                	mov    edi,esi
c0015f43:	c1 e0 0a             	shl    eax,0xa
c0015f46:	c1 ff 1f             	sar    edi,0x1f
c0015f49:	57                   	push   edi
c0015f4a:	56                   	push   esi
c0015f4b:	52                   	push   edx
c0015f4c:	50                   	push   eax
c0015f4d:	e8 0a db 00 00       	call   c0023a5c <__udivdi3>
c0015f52:	83 c4 14             	add    esp,0x14
c0015f55:	52                   	push   edx
c0015f56:	50                   	push   eax
c0015f57:	6a 00                	push   0x0
c0015f59:	6a 00                	push   0x0
c0015f5b:	53                   	push   ebx
c0015f5c:	e8 53 fe ff ff       	call   c0015db4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015f61:	83 c4 20             	add    esp,0x20
c0015f64:	e9 79 01 00 00       	jmp    c00160e2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015f69:	89 f0                	mov    eax,esi
c0015f6b:	31 f6                	xor    esi,esi
c0015f6d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015f74:	75 02                	jne    c0015f78 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015f76:	89 f1                	mov    ecx,esi
c0015f78:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015f7f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015f86:	c1 e2 08             	shl    edx,0x8
c0015f89:	c1 e7 10             	shl    edi,0x10
c0015f8c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015f94:	09 fa                	or     edx,edi
c0015f96:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015f9e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015fa5:	83 c0 10             	add    eax,0x10
c0015fa8:	09 fa                	or     edx,edi
c0015faa:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015fb1:	c1 e7 18             	shl    edi,0x18
c0015fb4:	09 fa                	or     edx,edi
c0015fb6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015fbd:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015fc1:	c1 e7 10             	shl    edi,0x10
c0015fc4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015fcb:	c1 e2 08             	shl    edx,0x8
c0015fce:	09 fa                	or     edx,edi
c0015fd0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015fd7:	09 fa                	or     edx,edi
c0015fd9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015fe0:	c1 e7 18             	shl    edi,0x18
c0015fe3:	09 fa                	or     edx,edi
c0015fe5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015fe9:	46                   	inc    esi
c0015fea:	83 fe 04             	cmp    esi,0x4
c0015fed:	0f 85 7a ff ff ff    	jne    c0015f6d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff7:	83 f0 01             	xor    eax,0x1
c0015ffa:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015ffe:	75 57                	jne    c0016057 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016000:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016004:	83 f0 01             	xor    eax,0x1
c0016007:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001600b:	75 4a                	jne    c0016057 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001600d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016011:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016019:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016021:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016027:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001602d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016033:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016037:	89 f7                	mov    edi,esi
c0016039:	c1 e0 0a             	shl    eax,0xa
c001603c:	c1 ff 1f             	sar    edi,0x1f
c001603f:	57                   	push   edi
c0016040:	56                   	push   esi
c0016041:	52                   	push   edx
c0016042:	50                   	push   eax
c0016043:	e8 14 da 00 00       	call   c0023a5c <__udivdi3>
c0016048:	83 c4 10             	add    esp,0x10
c001604b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001604f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016053:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016057:	84 c9                	test   cl,cl
c0016059:	74 53                	je     c00160ae <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001605b:	0f b6 c9             	movzx  ecx,cl
c001605e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016062:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016066:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001606a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001606e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016072:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016076:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001607a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001607e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016082:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001608a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001608e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016092:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016096:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001609a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001609e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00160a2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00160a6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00160aa:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00160ae:	31 ed                	xor    ebp,ebp
c00160b0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00160b4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00160b8:	89 f8                	mov    eax,edi
c00160ba:	09 f0                	or     eax,esi
c00160bc:	74 1e                	je     c00160dc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00160be:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00160c2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00160c6:	89 d1                	mov    ecx,edx
c00160c8:	09 c1                	or     ecx,eax
c00160ca:	74 10                	je     c00160dc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	57                   	push   edi
c00160d0:	56                   	push   esi
c00160d1:	52                   	push   edx
c00160d2:	50                   	push   eax
c00160d3:	53                   	push   ebx
c00160d4:	e8 db fc ff ff       	call   c0015db4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00160d9:	83 c4 20             	add    esp,0x20
c00160dc:	45                   	inc    ebp
c00160dd:	83 fd 04             	cmp    ebp,0x4
c00160e0:	75 ce                	jne    c00160b0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00160e2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00160e8:	5b                   	pop    ebx
c00160e9:	5e                   	pop    esi
c00160ea:	5f                   	pop    edi
c00160eb:	5d                   	pop    ebp
c00160ec:	c3                   	ret    
c00160ed:	90                   	nop

c00160ee <Timer::Timer(char const*)>:
c00160ee:	83 ec 0c             	sub    esp,0xc
c00160f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160f5:	83 ec 08             	sub    esp,0x8
c00160f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160fc:	50                   	push   eax
c00160fd:	e8 22 db ff ff       	call   c0013c24 <Device::Device(char const*)>
c0016102:	83 c4 10             	add    esp,0x10
c0016105:	ba 48 80 02 c0       	mov    edx,0xc0028048
c001610a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001610e:	89 10                	mov    DWORD PTR [eax],edx
c0016110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016114:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001611e:	90                   	nop
c001611f:	83 c4 0c             	add    esp,0xc
c0016122:	c3                   	ret    
c0016123:	90                   	nop

c0016124 <Timer::~Timer()>:
c0016124:	83 ec 0c             	sub    esp,0xc
c0016127:	ba 48 80 02 c0       	mov    edx,0xc0028048
c001612c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016130:	89 10                	mov    DWORD PTR [eax],edx
c0016132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016136:	83 ec 0c             	sub    esp,0xc
c0016139:	50                   	push   eax
c001613a:	e8 c7 d7 ff ff       	call   c0013906 <Device::~Device()>
c001613f:	83 c4 10             	add    esp,0x10
c0016142:	90                   	nop
c0016143:	83 c4 0c             	add    esp,0xc
c0016146:	c3                   	ret    
c0016147:	90                   	nop

c0016148 <Timer::~Timer()>:
c0016148:	83 ec 0c             	sub    esp,0xc
c001614b:	83 ec 0c             	sub    esp,0xc
c001614e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016152:	e8 cd ff ff ff       	call   c0016124 <Timer::~Timer()>
c0016157:	83 c4 10             	add    esp,0x10
c001615a:	83 ec 08             	sub    esp,0x8
c001615d:	68 5c 01 00 00       	push   0x15c
c0016162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016166:	e8 fa c3 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c001616b:	83 c4 10             	add    esp,0x10
c001616e:	83 c4 0c             	add    esp,0xc
c0016171:	c3                   	ret    

c0016172 <Timer::read()>:
c0016172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016176:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001617c:	c3                   	ret    

c001617d <timerHandler(unsigned long long)>:
c001617d:	55                   	push   ebp
c001617e:	57                   	push   edi
c001617f:	56                   	push   esi
c0016180:	53                   	push   ebx
c0016181:	83 ec 0c             	sub    esp,0xc
c0016184:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016188:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001618c:	01 35 f0 b0 02 c0    	add    DWORD PTR ds:0xc002b0f0,esi
c0016192:	11 3d f4 b0 02 c0    	adc    DWORD PTR ds:0xc002b0f4,edi
c0016198:	80 3d 8d aa 02 c0 00 	cmp    BYTE PTR ds:0xc002aa8d,0x0
c001619f:	0f 84 07 01 00 00    	je     c00162ac <timerHandler(unsigned long long)+0x12f>
c00161a5:	e8 92 5c 00 00       	call   c001be3c <lockStuff()>
c00161aa:	83 ec 0c             	sub    esp,0xc
c00161ad:	68 7c bf 02 c0       	push   0xc002bf7c
c00161b2:	e8 17 f9 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161b7:	c7 04 24 7c bf 02 c0 	mov    DWORD PTR [esp],0xc002bf7c
c00161be:	89 c3                	mov    ebx,eax
c00161c0:	e8 11 f9 00 00       	call   c0025ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161c5:	83 c4 10             	add    esp,0x10
c00161c8:	84 c0                	test   al,al
c00161ca:	74 60                	je     c001622c <timerHandler(unsigned long long)+0xaf>
c00161cc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00161d2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00161d5:	85 c0                	test   eax,eax
c00161d7:	0f 85 91 00 00 00    	jne    c001626e <timerHandler(unsigned long long)+0xf1>
c00161dd:	e9 be 00 00 00       	jmp    c00162a0 <timerHandler(unsigned long long)+0x123>
c00161e2:	83 ec 0c             	sub    esp,0xc
c00161e5:	55                   	push   ebp
c00161e6:	e8 41 62 00 00       	call   c001c42c <unblockTask(ThreadControlBlock*)>
c00161eb:	83 c4 10             	add    esp,0x10
c00161ee:	39 eb                	cmp    ebx,ebp
c00161f0:	75 12                	jne    c0016204 <timerHandler(unsigned long long)+0x87>
c00161f2:	83 ec 0c             	sub    esp,0xc
c00161f5:	68 7c bf 02 c0       	push   0xc002bf7c
c00161fa:	e8 cf f8 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161ff:	89 c3                	mov    ebx,eax
c0016201:	83 c4 10             	add    esp,0x10
c0016204:	83 ec 0c             	sub    esp,0xc
c0016207:	68 7c bf 02 c0       	push   0xc002bf7c
c001620c:	e8 c5 f8 00 00       	call   c0025ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016211:	83 c4 10             	add    esp,0x10
c0016214:	84 c0                	test   al,al
c0016216:	75 b4                	jne    c00161cc <timerHandler(unsigned long long)+0x4f>
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	68 7c bf 02 c0       	push   0xc002bf7c
c0016220:	e8 a9 f8 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016225:	83 c4 10             	add    esp,0x10
c0016228:	39 d8                	cmp    eax,ebx
c001622a:	74 a0                	je     c00161cc <timerHandler(unsigned long long)+0x4f>
c001622c:	83 ec 0c             	sub    esp,0xc
c001622f:	68 7c bf 02 c0       	push   0xc002bf7c
c0016234:	e8 95 f8 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016239:	c7 04 24 7c bf 02 c0 	mov    DWORD PTR [esp],0xc002bf7c
c0016240:	89 c5                	mov    ebp,eax
c0016242:	e8 ab f8 00 00       	call   c0025af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016247:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001624a:	83 c4 10             	add    esp,0x10
c001624d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016250:	39 15 f0 b0 02 c0    	cmp    DWORD PTR ds:0xc002b0f0,edx
c0016256:	a1 f4 b0 02 c0       	mov    eax,ds:0xc002b0f4
c001625b:	19 c8                	sbb    eax,ecx
c001625d:	73 83                	jae    c00161e2 <timerHandler(unsigned long long)+0x65>
c001625f:	50                   	push   eax
c0016260:	50                   	push   eax
c0016261:	55                   	push   ebp
c0016262:	68 7c bf 02 c0       	push   0xc002bf7c
c0016267:	e8 34 f9 00 00       	call   c0025ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001626c:	eb 93                	jmp    c0016201 <timerHandler(unsigned long long)+0x84>
c001626e:	80 3d 8c aa 02 c0 00 	cmp    BYTE PTR ds:0xc002aa8c,0x0
c0016275:	74 29                	je     c00162a0 <timerHandler(unsigned long long)+0x123>
c0016277:	39 c6                	cmp    esi,eax
c0016279:	bb 00 00 00 00       	mov    ebx,0x0
c001627e:	19 df                	sbb    edi,ebx
c0016280:	72 19                	jb     c001629b <timerHandler(unsigned long long)+0x11e>
c0016282:	e8 8e 5b 00 00       	call   c001be15 <lockScheduler()>
c0016287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001628c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001628f:	e8 bc 5e 00 00       	call   c001c150 <schedule()>
c0016294:	e8 7e 5b 00 00       	call   c001be17 <unlockScheduler()>
c0016299:	eb 05                	jmp    c00162a0 <timerHandler(unsigned long long)+0x123>
c001629b:	29 f0                	sub    eax,esi
c001629d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00162a0:	83 c4 0c             	add    esp,0xc
c00162a3:	5b                   	pop    ebx
c00162a4:	5e                   	pop    esi
c00162a5:	5f                   	pop    edi
c00162a6:	5d                   	pop    ebp
c00162a7:	e9 29 5f 00 00       	jmp    c001c1d5 <unlockStuff()>
c00162ac:	83 c4 0c             	add    esp,0xc
c00162af:	5b                   	pop    ebx
c00162b0:	5e                   	pop    esi
c00162b1:	5f                   	pop    edi
c00162b2:	5d                   	pop    ebp
c00162b3:	c3                   	ret    

c00162b4 <setupTimer(int)>:
c00162b4:	57                   	push   edi
c00162b5:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00162ba:	56                   	push   esi
c00162bb:	53                   	push   ebx
c00162bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00162c6:	83 ec 0c             	sub    esp,0xc
c00162c9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00162cf:	e8 4c da ff ff       	call   c0013d20 <Device::getName()>
c00162d4:	83 c4 10             	add    esp,0x10
c00162d7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00162da:	0f 85 8d 00 00 00    	jne    c001636d <setupTimer(int)+0xb9>
c00162e0:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00162e5:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00162ec:	74 7f                	je     c001636d <setupTimer(int)+0xb9>
c00162ee:	83 ec 0c             	sub    esp,0xc
c00162f1:	68 5c 01 00 00       	push   0x15c
c00162f6:	e8 d7 91 ff ff       	call   c000f4d2 <malloc>
c00162fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00162fe:	89 c3                	mov    ebx,eax
c0016300:	e8 4b d3 00 00       	call   c0023650 <PIT::PIT()>
c0016305:	59                   	pop    ecx
c0016306:	5f                   	pop    edi
c0016307:	53                   	push   ebx
c0016308:	ff 35 88 aa 02 c0    	push   DWORD PTR ds:0xc002aa88
c001630e:	e8 21 d7 ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0016313:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016315:	6a 00                	push   0x0
c0016317:	6a 00                	push   0x0
c0016319:	56                   	push   esi
c001631a:	53                   	push   ebx
c001631b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001631e:	83 c4 14             	add    esp,0x14
c0016321:	68 60 01 00 00       	push   0x160
c0016326:	e8 a7 91 ff ff       	call   c000f4d2 <malloc>
c001632b:	89 04 24             	mov    DWORD PTR [esp],eax
c001632e:	89 c7                	mov    edi,eax
c0016330:	e8 cb d1 00 00       	call   c0023500 <APICTimer::APICTimer()>
c0016335:	6a 00                	push   0x0
c0016337:	6a 00                	push   0x0
c0016339:	56                   	push   esi
c001633a:	57                   	push   edi
c001633b:	e8 c2 d0 00 00       	call   c0023402 <APICTimer::open(int, int, void*)>
c0016340:	83 c4 20             	add    esp,0x20
c0016343:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016345:	6a 00                	push   0x0
c0016347:	6a 00                	push   0x0
c0016349:	6a 00                	push   0x0
c001634b:	53                   	push   ebx
c001634c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001634f:	58                   	pop    eax
c0016350:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016355:	5a                   	pop    edx
c0016356:	57                   	push   edi
c0016357:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001635d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016363:	e8 cc d6 ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0016368:	83 c4 10             	add    esp,0x10
c001636b:	eb 33                	jmp    c00163a0 <setupTimer(int)+0xec>
c001636d:	83 ec 0c             	sub    esp,0xc
c0016370:	68 5c 01 00 00       	push   0x15c
c0016375:	e8 58 91 ff ff       	call   c000f4d2 <malloc>
c001637a:	89 04 24             	mov    DWORD PTR [esp],eax
c001637d:	89 c3                	mov    ebx,eax
c001637f:	e8 cc d2 00 00       	call   c0023650 <PIT::PIT()>
c0016384:	58                   	pop    eax
c0016385:	5a                   	pop    edx
c0016386:	53                   	push   ebx
c0016387:	ff 35 88 aa 02 c0    	push   DWORD PTR ds:0xc002aa88
c001638d:	e8 a2 d6 ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0016392:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016394:	6a 00                	push   0x0
c0016396:	6a 00                	push   0x0
c0016398:	56                   	push   esi
c0016399:	53                   	push   ebx
c001639a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001639d:	83 c4 20             	add    esp,0x20
c00163a0:	89 d8                	mov    eax,ebx
c00163a2:	5b                   	pop    ebx
c00163a3:	5e                   	pop    esi
c00163a4:	5f                   	pop    edi
c00163a5:	c3                   	ret    

c00163a6 <VCache::VCache(PhysicalDisk*)>:
c00163a6:	53                   	push   ebx
c00163a7:	83 ec 18             	sub    esp,0x18
c00163aa:	ba 78 80 02 c0       	mov    edx,0xc0028078
c00163af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163b3:	89 10                	mov    DWORD PTR [eax],edx
c00163b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163b9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00163c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163c4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00163cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163cf:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00163d6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00163dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163e1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00163e8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00163ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163f3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00163fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163fe:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016402:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001640a:	83 ec 0c             	sub    esp,0xc
c001640d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016411:	e8 bc 90 ff ff       	call   c000f4d2 <malloc>
c0016416:	83 c4 10             	add    esp,0x10
c0016419:	89 c3                	mov    ebx,eax
c001641b:	83 ec 0c             	sub    esp,0xc
c001641e:	53                   	push   ebx
c001641f:	e8 10 5b 00 00       	call   c001bf34 <Mutex::Mutex()>
c0016424:	83 c4 10             	add    esp,0x10
c0016427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001642b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001642e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016432:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016436:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016439:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001643d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016444:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016448:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001644e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016452:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016455:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016459:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001645f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016465:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016469:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001646c:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001646f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016473:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016477:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001647b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016481:	c1 e0 06             	shl    eax,0x6
c0016484:	83 ec 0c             	sub    esp,0xc
c0016487:	50                   	push   eax
c0016488:	e8 45 90 ff ff       	call   c000f4d2 <malloc>
c001648d:	83 c4 10             	add    esp,0x10
c0016490:	89 c2                	mov    edx,eax
c0016492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016496:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016499:	90                   	nop
c001649a:	83 c4 18             	add    esp,0x18
c001649d:	5b                   	pop    ebx
c001649e:	c3                   	ret    
c001649f:	90                   	nop

c00164a0 <VCache::writeWriteBuffer()>:
c00164a0:	53                   	push   ebx
c00164a1:	83 ec 14             	sub    esp,0x14
c00164a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00164a8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00164ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00164ad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00164b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00164b3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00164b6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00164b9:	50                   	push   eax
c00164ba:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00164bd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00164c4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00164cb:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00164cf:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00164d6:	83 c4 28             	add    esp,0x28
c00164d9:	5b                   	pop    ebx
c00164da:	c3                   	ret    
c00164db:	90                   	nop

c00164dc <VCache::~VCache()>:
c00164dc:	83 ec 0c             	sub    esp,0xc
c00164df:	ba 78 80 02 c0       	mov    edx,0xc0028078
c00164e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e8:	89 10                	mov    DWORD PTR [eax],edx
c00164ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ee:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00164f1:	84 c0                	test   al,al
c00164f3:	74 0f                	je     c0016504 <VCache::~VCache()+0x28>
c00164f5:	83 ec 0c             	sub    esp,0xc
c00164f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164fc:	e8 9f ff ff ff       	call   c00164a0 <VCache::writeWriteBuffer()>
c0016501:	83 c4 10             	add    esp,0x10
c0016504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016508:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001650b:	83 ec 0c             	sub    esp,0xc
c001650e:	50                   	push   eax
c001650f:	e8 ce 8f ff ff       	call   c000f4e2 <free>
c0016514:	83 c4 10             	add    esp,0x10
c0016517:	90                   	nop
c0016518:	83 c4 0c             	add    esp,0xc
c001651b:	c3                   	ret    

c001651c <VCache::~VCache()>:
c001651c:	83 ec 0c             	sub    esp,0xc
c001651f:	83 ec 0c             	sub    esp,0xc
c0016522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016526:	e8 b1 ff ff ff       	call   c00164dc <VCache::~VCache()>
c001652b:	83 c4 10             	add    esp,0x10
c001652e:	83 ec 08             	sub    esp,0x8
c0016531:	6a 30                	push   0x30
c0016533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016537:	e8 29 c0 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c001653c:	83 c4 10             	add    esp,0x10
c001653f:	83 c4 0c             	add    esp,0xc
c0016542:	c3                   	ret    
c0016543:	90                   	nop

c0016544 <VCache::write(unsigned long long, int, void*)>:
c0016544:	55                   	push   ebp
c0016545:	57                   	push   edi
c0016546:	56                   	push   esi
c0016547:	53                   	push   ebx
c0016548:	83 ec 28             	sub    esp,0x28
c001654b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001654f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016553:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016557:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001655b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001655e:	e8 33 5e 00 00       	call   c001c396 <Semaphore::acquire()>
c0016563:	83 c4 10             	add    esp,0x10
c0016566:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001656a:	74 66                	je     c00165d2 <VCache::write(unsigned long long, int, void*)+0x8e>
c001656c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001656f:	99                   	cdq    
c0016570:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016574:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016577:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001657a:	89 c1                	mov    ecx,eax
c001657c:	89 d0                	mov    eax,edx
c001657e:	31 f1                	xor    ecx,esi
c0016580:	31 f8                	xor    eax,edi
c0016582:	89 ca                	mov    edx,ecx
c0016584:	09 c2                	or     edx,eax
c0016586:	75 3e                	jne    c00165c6 <VCache::write(unsigned long long, int, void*)+0x82>
c0016588:	83 fd 01             	cmp    ebp,0x1
c001658b:	75 39                	jne    c00165c6 <VCache::write(unsigned long long, int, void*)+0x82>
c001658d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016590:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016596:	51                   	push   ecx
c0016597:	50                   	push   eax
c0016598:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001659c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00165a0:	0f af c8             	imul   ecx,eax
c00165a3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00165a6:	51                   	push   ecx
c00165a7:	e8 9b a0 fe ff       	call   c0000647 <memcpy>
c00165ac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00165af:	83 c4 10             	add    esp,0x10
c00165b2:	40                   	inc    eax
c00165b3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00165b6:	83 f8 40             	cmp    eax,0x40
c00165b9:	75 57                	jne    c0016612 <VCache::write(unsigned long long, int, void*)+0xce>
c00165bb:	83 ec 0c             	sub    esp,0xc
c00165be:	53                   	push   ebx
c00165bf:	e8 dc fe ff ff       	call   c00164a0 <VCache::writeWriteBuffer()>
c00165c4:	eb 34                	jmp    c00165fa <VCache::write(unsigned long long, int, void*)+0xb6>
c00165c6:	83 ec 0c             	sub    esp,0xc
c00165c9:	53                   	push   ebx
c00165ca:	e8 d1 fe ff ff       	call   c00164a0 <VCache::writeWriteBuffer()>
c00165cf:	83 c4 10             	add    esp,0x10
c00165d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00165d5:	83 fd 3f             	cmp    ebp,0x3f
c00165d8:	7f 25                	jg     c00165ff <VCache::write(unsigned long long, int, void*)+0xbb>
c00165da:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00165dd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00165e0:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00165e3:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00165e7:	52                   	push   edx
c00165e8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00165ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00165f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00165f5:	e8 4d a0 fe ff       	call   c0000647 <memcpy>
c00165fa:	83 c4 10             	add    esp,0x10
c00165fd:	eb 13                	jmp    c0016612 <VCache::write(unsigned long long, int, void*)+0xce>
c00165ff:	83 ec 0c             	sub    esp,0xc
c0016602:	8b 10                	mov    edx,DWORD PTR [eax]
c0016604:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016608:	55                   	push   ebp
c0016609:	57                   	push   edi
c001660a:	56                   	push   esi
c001660b:	50                   	push   eax
c001660c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001660f:	83 c4 20             	add    esp,0x20
c0016612:	83 ec 0c             	sub    esp,0xc
c0016615:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016618:	e8 01 63 00 00       	call   c001c91e <Semaphore::release()>
c001661d:	83 c4 2c             	add    esp,0x2c
c0016620:	31 c0                	xor    eax,eax
c0016622:	5b                   	pop    ebx
c0016623:	5e                   	pop    esi
c0016624:	5f                   	pop    edi
c0016625:	5d                   	pop    ebp
c0016626:	c3                   	ret    
c0016627:	90                   	nop

c0016628 <VCache::read(unsigned long long, int, void*)>:
c0016628:	57                   	push   edi
c0016629:	56                   	push   esi
c001662a:	53                   	push   ebx
c001662b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001662f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016637:	83 ec 0c             	sub    esp,0xc
c001663a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001663d:	e8 54 5d 00 00       	call   c001c396 <Semaphore::acquire()>
c0016642:	83 c4 10             	add    esp,0x10
c0016645:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016649:	74 0c                	je     c0016657 <VCache::read(unsigned long long, int, void*)+0x2f>
c001664b:	83 ec 0c             	sub    esp,0xc
c001664e:	53                   	push   ebx
c001664f:	e8 4c fe ff ff       	call   c00164a0 <VCache::writeWriteBuffer()>
c0016654:	83 c4 10             	add    esp,0x10
c0016657:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001665a:	83 ec 0c             	sub    esp,0xc
c001665d:	8b 10                	mov    edx,DWORD PTR [eax]
c001665f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016663:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016667:	57                   	push   edi
c0016668:	56                   	push   esi
c0016669:	50                   	push   eax
c001666a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001666d:	83 c4 14             	add    esp,0x14
c0016670:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016673:	e8 a6 62 00 00       	call   c001c91e <Semaphore::release()>
c0016678:	83 c4 10             	add    esp,0x10
c001667b:	31 c0                	xor    eax,eax
c001667d:	5b                   	pop    ebx
c001667e:	5e                   	pop    esi
c001667f:	5f                   	pop    edi
c0016680:	c3                   	ret    
c0016681:	90                   	nop

c0016682 <Video::putrect(int, int, int, int, unsigned int)>:
c0016682:	55                   	push   ebp
c0016683:	57                   	push   edi
c0016684:	56                   	push   esi
c0016685:	53                   	push   ebx
c0016686:	83 ec 1c             	sub    esp,0x1c
c0016689:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001668d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016691:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016695:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016699:	01 e8                	add    eax,ebp
c001669b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001669f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166a3:	01 df                	add    edi,ebx
c00166a5:	39 fb                	cmp    ebx,edi
c00166a7:	7d 1b                	jge    c00166c4 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00166a9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00166ad:	7d 12                	jge    c00166c1 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00166af:	8b 16                	mov    edx,DWORD PTR [esi]
c00166b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00166b5:	53                   	push   ebx
c00166b6:	55                   	push   ebp
c00166b7:	45                   	inc    ebp
c00166b8:	56                   	push   esi
c00166b9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00166bc:	83 c4 10             	add    esp,0x10
c00166bf:	eb e8                	jmp    c00166a9 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00166c1:	43                   	inc    ebx
c00166c2:	eb e1                	jmp    c00166a5 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00166c4:	83 c4 1c             	add    esp,0x1c
c00166c7:	5b                   	pop    ebx
c00166c8:	5e                   	pop    esi
c00166c9:	5f                   	pop    edi
c00166ca:	5d                   	pop    ebp
c00166cb:	c3                   	ret    

c00166cc <Video::blit(unsigned int*, int, int, int, int)>:
c00166cc:	55                   	push   ebp
c00166cd:	57                   	push   edi
c00166ce:	56                   	push   esi
c00166cf:	53                   	push   ebx
c00166d0:	83 ec 1c             	sub    esp,0x1c
c00166d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00166d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166db:	85 c0                	test   eax,eax
c00166dd:	79 02                	jns    c00166e1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00166df:	31 c0                	xor    eax,eax
c00166e1:	c1 e0 02             	shl    eax,0x2
c00166e4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00166e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166f0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00166f4:	39 d8                	cmp    eax,ebx
c00166f6:	7e 49                	jle    c0016741 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00166f8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00166fe:	7c 41                	jl     c0016741 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016700:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016704:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016708:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001670c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016710:	39 f9                	cmp    ecx,edi
c0016712:	7e 22                	jle    c0016736 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016714:	83 c5 04             	add    ebp,0x4
c0016717:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001671d:	7c 14                	jl     c0016733 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001671f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016721:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016724:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016728:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001672c:	56                   	push   esi
c001672d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016730:	83 c4 10             	add    esp,0x10
c0016733:	47                   	inc    edi
c0016734:	eb d2                	jmp    c0016708 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016736:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001673a:	43                   	inc    ebx
c001673b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001673f:	eb ab                	jmp    c00166ec <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016741:	83 c4 1c             	add    esp,0x1c
c0016744:	5b                   	pop    ebx
c0016745:	5e                   	pop    esi
c0016746:	5f                   	pop    edi
c0016747:	5d                   	pop    ebp
c0016748:	c3                   	ret    
c0016749:	90                   	nop

c001674a <Video::clearScreen(unsigned int)>:
c001674a:	57                   	push   edi
c001674b:	56                   	push   esi
c001674c:	53                   	push   ebx
c001674d:	31 db                	xor    ebx,ebx
c001674f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016753:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016759:	7e 1f                	jle    c001677a <Video::clearScreen(unsigned int)+0x30>
c001675b:	31 ff                	xor    edi,edi
c001675d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016763:	7e 12                	jle    c0016777 <Video::clearScreen(unsigned int)+0x2d>
c0016765:	8b 06                	mov    eax,DWORD PTR [esi]
c0016767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001676b:	53                   	push   ebx
c001676c:	57                   	push   edi
c001676d:	47                   	inc    edi
c001676e:	56                   	push   esi
c001676f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016772:	83 c4 10             	add    esp,0x10
c0016775:	eb e6                	jmp    c001675d <Video::clearScreen(unsigned int)+0x13>
c0016777:	43                   	inc    ebx
c0016778:	eb d9                	jmp    c0016753 <Video::clearScreen(unsigned int)+0x9>
c001677a:	5b                   	pop    ebx
c001677b:	5e                   	pop    esi
c001677c:	5f                   	pop    edi
c001677d:	c3                   	ret    

c001677e <Video::putpixel(int, int, unsigned int)>:
c001677e:	c7 44 24 04 80 80 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028080
c0016786:	e9 ba be ff ff       	jmp    c0012645 <Dbg::kprintf(char const*, ...)>
c001678b:	90                   	nop

c001678c <Video::Video(char const*)>:
c001678c:	83 ec 0c             	sub    esp,0xc
c001678f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016793:	83 ec 08             	sub    esp,0x8
c0016796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001679a:	50                   	push   eax
c001679b:	e8 84 d4 ff ff       	call   c0013c24 <Device::Device(char const*)>
c00167a0:	83 c4 10             	add    esp,0x10
c00167a3:	ba 98 80 02 c0       	mov    edx,0xc0028098
c00167a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ac:	89 10                	mov    DWORD PTR [eax],edx
c00167ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00167bc:	90                   	nop
c00167bd:	83 c4 0c             	add    esp,0xc
c00167c0:	c3                   	ret    
c00167c1:	90                   	nop

c00167c2 <Video::~Video()>:
c00167c2:	83 ec 0c             	sub    esp,0xc
c00167c5:	ba 98 80 02 c0       	mov    edx,0xc0028098
c00167ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ce:	89 10                	mov    DWORD PTR [eax],edx
c00167d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d4:	83 ec 0c             	sub    esp,0xc
c00167d7:	50                   	push   eax
c00167d8:	e8 29 d1 ff ff       	call   c0013906 <Device::~Device()>
c00167dd:	83 c4 10             	add    esp,0x10
c00167e0:	90                   	nop
c00167e1:	83 c4 0c             	add    esp,0xc
c00167e4:	c3                   	ret    
c00167e5:	90                   	nop

c00167e6 <Video::~Video()>:
c00167e6:	83 ec 0c             	sub    esp,0xc
c00167e9:	83 ec 0c             	sub    esp,0xc
c00167ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167f0:	e8 cd ff ff ff       	call   c00167c2 <Video::~Video()>
c00167f5:	83 c4 10             	add    esp,0x10
c00167f8:	83 ec 08             	sub    esp,0x8
c00167fb:	68 64 01 00 00       	push   0x164
c0016800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016804:	e8 5c bd ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0016809:	83 c4 10             	add    esp,0x10
c001680c:	83 c4 0c             	add    esp,0xc
c001680f:	c3                   	ret    

c0016810 <Video::isMonochrome()>:
c0016810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016814:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001681a:	c3                   	ret    
c001681b:	90                   	nop

c001681c <Video::getWidth()>:
c001681c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016820:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016826:	c3                   	ret    
c0016827:	90                   	nop

c0016828 <Video::getHeight()>:
c0016828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001682c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016832:	c3                   	ret    
c0016833:	90                   	nop

c0016834 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016834:	55                   	push   ebp
c0016835:	57                   	push   edi
c0016836:	56                   	push   esi
c0016837:	53                   	push   ebx
c0016838:	83 ec 2c             	sub    esp,0x2c
c001683b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001683f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016843:	83 f8 01             	cmp    eax,0x1
c0016846:	19 c9                	sbb    ecx,ecx
c0016848:	31 db                	xor    ebx,ebx
c001684a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001684e:	89 cd                	mov    ebp,ecx
c0016850:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016858:	f7 d5                	not    ebp
c001685a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016860:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016864:	01 d8                	add    eax,ebx
c0016866:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001686a:	56                   	push   esi
c001686b:	e8 b8 ff ff ff       	call   c0016828 <Video::getHeight()>
c0016870:	59                   	pop    ecx
c0016871:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016875:	7e 70                	jle    c00168e7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016877:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001687b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001687f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016886:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001688a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016891:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016895:	89 f8                	mov    eax,edi
c0016897:	83 c0 20             	add    eax,0x20
c001689a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001689e:	56                   	push   esi
c001689f:	e8 78 ff ff ff       	call   c001681c <Video::getWidth()>
c00168a4:	5a                   	pop    edx
c00168a5:	39 c7                	cmp    edi,eax
c00168a7:	7d 34                	jge    c00168dd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00168a9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00168ae:	74 05                	je     c00168b5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00168b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00168b2:	55                   	push   ebp
c00168b3:	eb 0d                	jmp    c00168c2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00168b5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00168ba:	74 12                	je     c00168ce <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00168bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00168be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168c6:	57                   	push   edi
c00168c7:	56                   	push   esi
c00168c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00168cb:	83 c4 10             	add    esp,0x10
c00168ce:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00168d2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00168d6:	47                   	inc    edi
c00168d7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00168db:	75 c1                	jne    c001689e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00168dd:	43                   	inc    ebx
c00168de:	83 fb 20             	cmp    ebx,0x20
c00168e1:	0f 85 79 ff ff ff    	jne    c0016860 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00168e7:	83 c4 2c             	add    esp,0x2c
c00168ea:	5b                   	pop    ebx
c00168eb:	5e                   	pop    esi
c00168ec:	5f                   	pop    edi
c00168ed:	5d                   	pop    ebp
c00168ee:	c3                   	ret    
c00168ef:	90                   	nop

c00168f0 <ACPI::close(int, int, void*)>:
c00168f0:	83 ec 1c             	sub    esp,0x1c
c00168f3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00168fb:	74 0a                	je     c0016907 <ACPI::close(int, int, void*)+0x17>
c00168fd:	b8 00 00 00 00       	mov    eax,0x0
c0016902:	e9 9a 00 00 00       	jmp    c00169a1 <ACPI::close(int, int, void*)+0xb1>
c0016907:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001690c:	75 37                	jne    c0016945 <ACPI::close(int, int, void*)+0x55>
c001690e:	83 ec 0c             	sub    esp,0xc
c0016911:	68 d0 80 02 c0       	push   0xc00280d0
c0016916:	e8 2a bd ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001691b:	83 c4 10             	add    esp,0x10
c001691e:	a1 08 b1 02 c0       	mov    eax,ds:0xc002b108
c0016923:	85 c0                	test   eax,eax
c0016925:	74 07                	je     c001692e <ACPI::close(int, int, void*)+0x3e>
c0016927:	a1 08 b1 02 c0       	mov    eax,ds:0xc002b108
c001692c:	ff d0                	call   eax
c001692e:	83 ec 0c             	sub    esp,0xc
c0016931:	68 84 81 02 c0       	push   0xc0028184
c0016936:	e8 ce 24 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c001693b:	83 c4 10             	add    esp,0x10
c001693e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016943:	eb 5c                	jmp    c00169a1 <ACPI::close(int, int, void*)+0xb1>
c0016945:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001694a:	75 50                	jne    c001699c <ACPI::close(int, int, void*)+0xac>
c001694c:	a1 04 b1 02 c0       	mov    eax,ds:0xc002b104
c0016951:	85 c0                	test   eax,eax
c0016953:	74 07                	je     c001695c <ACPI::close(int, int, void*)+0x6c>
c0016955:	a1 04 b1 02 c0       	mov    eax,ds:0xc002b104
c001695a:	ff d0                	call   eax
c001695c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016961:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016966:	83 e0 02             	and    eax,0x2
c0016969:	74 1c                	je     c0016987 <ACPI::close(int, int, void*)+0x97>
c001696b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016972:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016976:	89 c2                	mov    edx,eax
c0016978:	ec                   	in     al,dx
c0016979:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001697d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016981:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016985:	eb da                	jmp    c0016961 <ACPI::close(int, int, void*)+0x71>
c0016987:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001698e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016993:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016997:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001699b:	ee                   	out    dx,al
c001699c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169a1:	83 c4 1c             	add    esp,0x1c
c00169a4:	c3                   	ret    

c00169a5 <findRSDP()>:
c00169a5:	83 ec 1c             	sub    esp,0x1c
c00169a8:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00169ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169b3:	83 e0 04             	and    eax,0x4
c00169b6:	84 c0                	test   al,al
c00169b8:	75 07                	jne    c00169c1 <findRSDP()+0x1c>
c00169ba:	b8 00 00 00 00       	mov    eax,0x0
c00169bf:	eb 6a                	jmp    c0016a2b <findRSDP()+0x86>
c00169c1:	a1 d0 aa 02 c0       	mov    eax,ds:0xc002aad0
c00169c6:	3d ff 07 00 00       	cmp    eax,0x7ff
c00169cb:	7f 1b                	jg     c00169e8 <findRSDP()+0x43>
c00169cd:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00169d2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00169d8:	83 e2 fb             	and    edx,0xfffffffb
c00169db:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00169e1:	b8 00 00 00 00       	mov    eax,0x0
c00169e6:	eb 43                	jmp    c0016a2b <findRSDP()+0x86>
c00169e8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00169f0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00169f8:	77 2c                	ja     c0016a26 <findRSDP()+0x81>
c00169fa:	83 ec 04             	sub    esp,0x4
c00169fd:	6a 08                	push   0x8
c00169ff:	68 dd 80 02 c0       	push   0xc00280dd
c0016a04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a08:	e8 d7 9b fe ff       	call   c00005e4 <memcmp>
c0016a0d:	83 c4 10             	add    esp,0x10
c0016a10:	85 c0                	test   eax,eax
c0016a12:	0f 94 c0             	sete   al
c0016a15:	84 c0                	test   al,al
c0016a17:	74 06                	je     c0016a1f <findRSDP()+0x7a>
c0016a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a1d:	eb 0c                	jmp    c0016a2b <findRSDP()+0x86>
c0016a1f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016a24:	eb ca                	jmp    c00169f0 <findRSDP()+0x4b>
c0016a26:	b8 00 00 00 00       	mov    eax,0x0
c0016a2b:	83 c4 1c             	add    esp,0x1c
c0016a2e:	c3                   	ret    

c0016a2f <loadACPITables(unsigned char*)>:
c0016a2f:	56                   	push   esi
c0016a30:	53                   	push   ebx
c0016a31:	83 ec 44             	sub    esp,0x44
c0016a34:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016a39:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a3f:	83 e0 04             	and    eax,0x4
c0016a42:	84 c0                	test   al,al
c0016a44:	0f 84 05 02 00 00    	je     c0016c4f <loadACPITables(unsigned char*)+0x220>
c0016a4a:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0016a4f:	84 c0                	test   al,al
c0016a51:	74 75                	je     c0016ac8 <loadACPITables(unsigned char*)+0x99>
c0016a53:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a57:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016a62:	83 e8 24             	sub    eax,0x24
c0016a65:	c1 e8 03             	shr    eax,0x3
c0016a68:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016a6c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016a74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a78:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016a7c:	0f 8d b2 00 00 00    	jge    c0016b34 <loadACPITables(unsigned char*)+0x105>
c0016a82:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a86:	83 c0 24             	add    eax,0x24
c0016a89:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016a8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016a91:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016a95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a99:	c1 e0 03             	shl    eax,0x3
c0016a9c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016aa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016aa4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0016aa9:	89 c1                	mov    ecx,eax
c0016aab:	a1 0c b1 02 c0       	mov    eax,ds:0xc002b10c
c0016ab0:	8d 50 01             	lea    edx,[eax+0x1]
c0016ab3:	89 15 0c b1 02 c0    	mov    DWORD PTR ds:0xc002b10c,edx
c0016ab9:	89 ca                	mov    edx,ecx
c0016abb:	89 14 c5 24 b1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4edc],edx
c0016ac2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016ac6:	eb ac                	jmp    c0016a74 <loadACPITables(unsigned char*)+0x45>
c0016ac8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016acc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ad7:	83 e8 24             	sub    eax,0x24
c0016ada:	c1 e8 02             	shr    eax,0x2
c0016add:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ae1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016ae9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016aed:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016af1:	7d 41                	jge    c0016b34 <loadACPITables(unsigned char*)+0x105>
c0016af3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016af7:	83 c0 24             	add    eax,0x24
c0016afa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016afe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b0a:	c1 e0 02             	shl    eax,0x2
c0016b0d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016b11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b15:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016b17:	a1 0c b1 02 c0       	mov    eax,ds:0xc002b10c
c0016b1c:	8d 50 01             	lea    edx,[eax+0x1]
c0016b1f:	89 15 0c b1 02 c0    	mov    DWORD PTR ds:0xc002b10c,edx
c0016b25:	89 ca                	mov    edx,ecx
c0016b27:	89 14 c5 24 b1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4edc],edx
c0016b2e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016b32:	eb b5                	jmp    c0016ae9 <loadACPITables(unsigned char*)+0xba>
c0016b34:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016b3c:	a1 0c b1 02 c0       	mov    eax,ds:0xc002b10c
c0016b41:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016b45:	0f 8d 05 01 00 00    	jge    c0016c50 <loadACPITables(unsigned char*)+0x221>
c0016b4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b4f:	8b 04 c5 24 b1 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd4edc]
c0016b56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b66:	25 ff 0f 00 00       	and    eax,0xfff
c0016b6b:	89 c6                	mov    esi,eax
c0016b6d:	e8 73 ac ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c0016b72:	89 c3                	mov    ebx,eax
c0016b74:	83 ec 0c             	sub    esp,0xc
c0016b77:	6a 01                	push   0x1
c0016b79:	e8 d7 aa ff ff       	call   c0011655 <Virt::allocateKernelVirtualPages(int)>
c0016b7e:	83 c4 10             	add    esp,0x10
c0016b81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b85:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016b8b:	83 ec 0c             	sub    esp,0xc
c0016b8e:	6a 01                	push   0x1
c0016b90:	6a 01                	push   0x1
c0016b92:	50                   	push   eax
c0016b93:	52                   	push   edx
c0016b94:	53                   	push   ebx
c0016b95:	e8 7a b4 ff ff       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016b9a:	83 c4 20             	add    esp,0x20
c0016b9d:	09 f0                	or     eax,esi
c0016b9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ba3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ba7:	c1 e0 03             	shl    eax,0x3
c0016baa:	05 20 b1 02 c0       	add    eax,0xc002b120
c0016baf:	83 ec 04             	sub    esp,0x4
c0016bb2:	6a 04                	push   0x4
c0016bb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bb8:	50                   	push   eax
c0016bb9:	e8 89 9a fe ff       	call   c0000647 <memcpy>
c0016bbe:	83 c4 10             	add    esp,0x10
c0016bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016bc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bd0:	05 00 10 00 00       	add    eax,0x1000
c0016bd5:	c1 e8 0c             	shr    eax,0xc
c0016bd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be0:	89 04 24             	mov    DWORD PTR [esp],eax
c0016be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be7:	25 ff 0f 00 00       	and    eax,0xfff
c0016bec:	89 c6                	mov    esi,eax
c0016bee:	e8 f2 ab ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c0016bf3:	89 c3                	mov    ebx,eax
c0016bf5:	83 ec 0c             	sub    esp,0xc
c0016bf8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016bfc:	e8 54 aa ff ff       	call   c0011655 <Virt::allocateKernelVirtualPages(int)>
c0016c01:	83 c4 10             	add    esp,0x10
c0016c04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c08:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016c0e:	83 ec 0c             	sub    esp,0xc
c0016c11:	6a 01                	push   0x1
c0016c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c17:	50                   	push   eax
c0016c18:	52                   	push   edx
c0016c19:	53                   	push   ebx
c0016c1a:	e8 f5 b3 ff ff       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016c1f:	83 c4 20             	add    esp,0x20
c0016c22:	09 f0                	or     eax,esi
c0016c24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c28:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016c2b:	83 ec 0c             	sub    esp,0xc
c0016c2e:	50                   	push   eax
c0016c2f:	e8 85 ad ff ff       	call   c00119b9 <Virt::freeKernelVirtualPages(unsigned long)>
c0016c34:	83 c4 10             	add    esp,0x10
c0016c37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c3f:	89 14 c5 24 b1 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4edc],edx
c0016c46:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016c4a:	e9 ed fe ff ff       	jmp    c0016b3c <loadACPITables(unsigned char*)+0x10d>
c0016c4f:	90                   	nop
c0016c50:	83 c4 44             	add    esp,0x44
c0016c53:	5b                   	pop    ebx
c0016c54:	5e                   	pop    esi
c0016c55:	c3                   	ret    

c0016c56 <findRSDT(unsigned char*)>:
c0016c56:	56                   	push   esi
c0016c57:	53                   	push   ebx
c0016c58:	83 ec 44             	sub    esp,0x44
c0016c5b:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016c60:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016c66:	83 e0 04             	and    eax,0x4
c0016c69:	84 c0                	test   al,al
c0016c6b:	75 0a                	jne    c0016c77 <findRSDT(unsigned char*)+0x21>
c0016c6d:	b8 00 00 00 00       	mov    eax,0x0
c0016c72:	e9 f7 00 00 00       	jmp    c0016d6e <findRSDT(unsigned char*)+0x118>
c0016c77:	83 ec 04             	sub    esp,0x4
c0016c7a:	6a 24                	push   0x24
c0016c7c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016c80:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c84:	50                   	push   eax
c0016c85:	e8 bd 99 fe ff       	call   c0000647 <memcpy>
c0016c8a:	83 c4 10             	add    esp,0x10
c0016c8d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016c91:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016c95:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016c9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ca1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016ca5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016cb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016cb5:	25 ff 0f 00 00       	and    eax,0xfff
c0016cba:	89 c6                	mov    esi,eax
c0016cbc:	e8 24 ab ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c0016cc1:	89 c3                	mov    ebx,eax
c0016cc3:	83 ec 0c             	sub    esp,0xc
c0016cc6:	6a 02                	push   0x2
c0016cc8:	e8 88 a9 ff ff       	call   c0011655 <Virt::allocateKernelVirtualPages(int)>
c0016ccd:	83 c4 10             	add    esp,0x10
c0016cd0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016cd4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016cda:	83 ec 0c             	sub    esp,0xc
c0016cdd:	6a 01                	push   0x1
c0016cdf:	6a 02                	push   0x2
c0016ce1:	50                   	push   eax
c0016ce2:	52                   	push   edx
c0016ce3:	53                   	push   ebx
c0016ce4:	e8 2b b3 ff ff       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016ce9:	83 c4 20             	add    esp,0x20
c0016cec:	09 f0                	or     eax,esi
c0016cee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016cf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016cf6:	25 ff 0f 00 00       	and    eax,0xfff
c0016cfb:	89 c6                	mov    esi,eax
c0016cfd:	e8 e3 aa ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c0016d02:	89 c3                	mov    ebx,eax
c0016d04:	83 ec 0c             	sub    esp,0xc
c0016d07:	6a 02                	push   0x2
c0016d09:	e8 47 a9 ff ff       	call   c0011655 <Virt::allocateKernelVirtualPages(int)>
c0016d0e:	83 c4 10             	add    esp,0x10
c0016d11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016d15:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016d1b:	83 ec 0c             	sub    esp,0xc
c0016d1e:	6a 01                	push   0x1
c0016d20:	6a 02                	push   0x2
c0016d22:	50                   	push   eax
c0016d23:	52                   	push   edx
c0016d24:	53                   	push   ebx
c0016d25:	e8 ea b2 ff ff       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d2a:	83 c4 20             	add    esp,0x20
c0016d2d:	09 f0                	or     eax,esi
c0016d2f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016d33:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016d38:	75 11                	jne    c0016d4b <findRSDT(unsigned char*)+0xf5>
c0016d3a:	c6 05 20 b3 02 c0 00 	mov    BYTE PTR ds:0xc002b320,0x0
c0016d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d45:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016d49:	eb 1f                	jmp    c0016d6a <findRSDT(unsigned char*)+0x114>
c0016d4b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016d50:	75 11                	jne    c0016d63 <findRSDT(unsigned char*)+0x10d>
c0016d52:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0016d59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d5d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016d61:	eb 07                	jmp    c0016d6a <findRSDT(unsigned char*)+0x114>
c0016d63:	b8 00 00 00 00       	mov    eax,0x0
c0016d68:	eb 04                	jmp    c0016d6e <findRSDT(unsigned char*)+0x118>
c0016d6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d6e:	83 c4 44             	add    esp,0x44
c0016d71:	5b                   	pop    ebx
c0016d72:	5e                   	pop    esi
c0016d73:	c3                   	ret    

c0016d74 <findDataTable(unsigned char*, char*)>:
c0016d74:	83 ec 1c             	sub    esp,0x1c
c0016d77:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016d7c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d82:	83 e0 04             	and    eax,0x4
c0016d85:	84 c0                	test   al,al
c0016d87:	75 07                	jne    c0016d90 <findDataTable(unsigned char*, char*)+0x1c>
c0016d89:	b8 00 00 00 00       	mov    eax,0x0
c0016d8e:	eb 7c                	jmp    c0016e0c <findDataTable(unsigned char*, char*)+0x98>
c0016d90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016d98:	a1 0c b1 02 c0       	mov    eax,ds:0xc002b10c
c0016d9d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016da1:	7d 3a                	jge    c0016ddd <findDataTable(unsigned char*, char*)+0x69>
c0016da3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da7:	c1 e0 03             	shl    eax,0x3
c0016daa:	05 20 b1 02 c0       	add    eax,0xc002b120
c0016daf:	83 ec 04             	sub    esp,0x4
c0016db2:	6a 04                	push   0x4
c0016db4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016db8:	50                   	push   eax
c0016db9:	e8 26 98 fe ff       	call   c00005e4 <memcmp>
c0016dbe:	83 c4 10             	add    esp,0x10
c0016dc1:	85 c0                	test   eax,eax
c0016dc3:	0f 94 c0             	sete   al
c0016dc6:	84 c0                	test   al,al
c0016dc8:	74 0d                	je     c0016dd7 <findDataTable(unsigned char*, char*)+0x63>
c0016dca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dce:	8b 04 c5 24 b1 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd4edc]
c0016dd5:	eb 35                	jmp    c0016e0c <findDataTable(unsigned char*, char*)+0x98>
c0016dd7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016ddb:	eb bb                	jmp    c0016d98 <findDataTable(unsigned char*, char*)+0x24>
c0016ddd:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0016de2:	84 c0                	test   al,al
c0016de4:	74 07                	je     c0016ded <findDataTable(unsigned char*, char*)+0x79>
c0016de6:	b8 58 00 00 00       	mov    eax,0x58
c0016deb:	eb 05                	jmp    c0016df2 <findDataTable(unsigned char*, char*)+0x7e>
c0016ded:	b8 52 00 00 00       	mov    eax,0x52
c0016df2:	83 ec 04             	sub    esp,0x4
c0016df5:	50                   	push   eax
c0016df6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dfa:	68 a8 81 02 c0       	push   0xc00281a8
c0016dff:	e8 41 b8 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0016e04:	83 c4 10             	add    esp,0x10
c0016e07:	b8 00 00 00 00       	mov    eax,0x0
c0016e0c:	83 c4 1c             	add    esp,0x1c
c0016e0f:	c3                   	ret    

c0016e10 <scanMADT()>:
c0016e10:	53                   	push   ebx
c0016e11:	83 ec 38             	sub    esp,0x38
c0016e14:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016e19:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e1f:	83 e0 04             	and    eax,0x4
c0016e22:	84 c0                	test   al,al
c0016e24:	0f 84 63 04 00 00    	je     c001728d <scanMADT()+0x47d>
c0016e2a:	e8 76 fb ff ff       	call   c00169a5 <findRSDP()>
c0016e2f:	a3 2c b3 02 c0       	mov    ds:0xc002b32c,eax
c0016e34:	a1 2c b3 02 c0       	mov    eax,ds:0xc002b32c
c0016e39:	85 c0                	test   eax,eax
c0016e3b:	75 19                	jne    c0016e56 <scanMADT()+0x46>
c0016e3d:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016e42:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e48:	83 e2 fb             	and    edx,0xfffffffb
c0016e4b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e51:	e9 3b 04 00 00       	jmp    c0017291 <scanMADT()+0x481>
c0016e56:	a1 2c b3 02 c0       	mov    eax,ds:0xc002b32c
c0016e5b:	83 ec 0c             	sub    esp,0xc
c0016e5e:	50                   	push   eax
c0016e5f:	e8 f2 fd ff ff       	call   c0016c56 <findRSDT(unsigned char*)>
c0016e64:	83 c4 10             	add    esp,0x10
c0016e67:	a3 28 b3 02 c0       	mov    ds:0xc002b328,eax
c0016e6c:	a1 28 b3 02 c0       	mov    eax,ds:0xc002b328
c0016e71:	85 c0                	test   eax,eax
c0016e73:	75 19                	jne    c0016e8e <scanMADT()+0x7e>
c0016e75:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016e7a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e80:	83 e2 fb             	and    edx,0xfffffffb
c0016e83:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e89:	e9 03 04 00 00       	jmp    c0017291 <scanMADT()+0x481>
c0016e8e:	a1 28 b3 02 c0       	mov    eax,ds:0xc002b328
c0016e93:	83 ec 0c             	sub    esp,0xc
c0016e96:	50                   	push   eax
c0016e97:	e8 93 fb ff ff       	call   c0016a2f <loadACPITables(unsigned char*)>
c0016e9c:	83 c4 10             	add    esp,0x10
c0016e9f:	a1 28 b3 02 c0       	mov    eax,ds:0xc002b328
c0016ea4:	83 ec 08             	sub    esp,0x8
c0016ea7:	68 e6 80 02 c0       	push   0xc00280e6
c0016eac:	50                   	push   eax
c0016ead:	e8 c2 fe ff ff       	call   c0016d74 <findDataTable(unsigned char*, char*)>
c0016eb2:	83 c4 10             	add    esp,0x10
c0016eb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016eb9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016ebe:	75 19                	jne    c0016ed9 <scanMADT()+0xc9>
c0016ec0:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016ec5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ecb:	83 e2 fe             	and    edx,0xfffffffe
c0016ece:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ed4:	e9 b8 03 00 00       	jmp    c0017291 <scanMADT()+0x481>
c0016ed9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016ee1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ee5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ee8:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0016eec:	0f 87 9f 03 00 00    	ja     c0017291 <scanMADT()+0x481>
c0016ef2:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0016efa:	0f 87 91 03 00 00    	ja     c0017291 <scanMADT()+0x481>
c0016f00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f0c:	8d 50 01             	lea    edx,[eax+0x1]
c0016f0f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f17:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016f1b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0016f1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f23:	8d 50 01             	lea    edx,[eax+0x1]
c0016f26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f2e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016f32:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0016f36:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0016f3b:	0f 86 4f 03 00 00    	jbe    c0017290 <scanMADT()+0x480>
c0016f41:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0016f46:	75 57                	jne    c0016f9f <scanMADT()+0x18f>
c0016f48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f4c:	8d 50 01             	lea    edx,[eax+0x1]
c0016f4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f53:	8a 15 20 b5 02 c0    	mov    dl,BYTE PTR ds:0xc002b520
c0016f59:	0f b6 d2             	movzx  edx,dl
c0016f5c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016f60:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016f64:	88 82 60 b5 02 c0    	mov    BYTE PTR [edx-0x3ffd4aa0],al
c0016f6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f6e:	8d 50 01             	lea    edx,[eax+0x1]
c0016f71:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016f75:	8a 15 20 b5 02 c0    	mov    dl,BYTE PTR ds:0xc002b520
c0016f7b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016f7e:	88 0d 20 b5 02 c0    	mov    BYTE PTR ds:0xc002b520,cl
c0016f84:	0f b6 d2             	movzx  edx,dl
c0016f87:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016f8b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016f8f:	88 82 40 b5 02 c0    	mov    BYTE PTR [edx-0x3ffd4ac0],al
c0016f95:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016f9a:	e9 da 02 00 00       	jmp    c0017279 <scanMADT()+0x469>
c0016f9f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0016fa4:	0f 85 14 01 00 00    	jne    c00170be <scanMADT()+0x2ae>
c0016faa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fae:	8d 50 01             	lea    edx,[eax+0x1]
c0016fb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016fb5:	8a 15 e0 b3 02 c0    	mov    dl,BYTE PTR ds:0xc002b3e0
c0016fbb:	0f b6 d2             	movzx  edx,dl
c0016fbe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016fc2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016fc6:	88 82 00 b4 02 c0    	mov    BYTE PTR [edx-0x3ffd4c00],al
c0016fcc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0016fd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016fd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fd8:	01 d0                	add    eax,edx
c0016fda:	83 c0 2c             	add    eax,0x2c
c0016fdd:	8a 00                	mov    al,BYTE PTR [eax]
c0016fdf:	0f b6 d0             	movzx  edx,al
c0016fe2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fe6:	8d 48 01             	lea    ecx,[eax+0x1]
c0016fe9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016ff1:	0f b6 c0             	movzx  eax,al
c0016ff4:	c1 e0 08             	shl    eax,0x8
c0016ff7:	89 d1                	mov    ecx,edx
c0016ff9:	09 c1                	or     ecx,eax
c0016ffb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fff:	8d 50 02             	lea    edx,[eax+0x2]
c0017002:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017006:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001700a:	0f b6 c0             	movzx  eax,al
c001700d:	c1 e0 10             	shl    eax,0x10
c0017010:	09 c1                	or     ecx,eax
c0017012:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017016:	8d 50 03             	lea    edx,[eax+0x3]
c0017019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001701d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017021:	0f b6 c0             	movzx  eax,al
c0017024:	c1 e0 18             	shl    eax,0x18
c0017027:	09 c1                	or     ecx,eax
c0017029:	89 ca                	mov    edx,ecx
c001702b:	a0 e0 b3 02 c0       	mov    al,ds:0xc002b3e0
c0017030:	0f b6 c0             	movzx  eax,al
c0017033:	89 14 85 20 b4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4be0],edx
c001703a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001703f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017043:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017047:	01 d0                	add    eax,edx
c0017049:	83 c0 2c             	add    eax,0x2c
c001704c:	8a 00                	mov    al,BYTE PTR [eax]
c001704e:	0f b6 d0             	movzx  edx,al
c0017051:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017055:	8d 48 01             	lea    ecx,[eax+0x1]
c0017058:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001705c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017060:	0f b6 c0             	movzx  eax,al
c0017063:	c1 e0 08             	shl    eax,0x8
c0017066:	89 d1                	mov    ecx,edx
c0017068:	09 c1                	or     ecx,eax
c001706a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001706e:	8d 50 02             	lea    edx,[eax+0x2]
c0017071:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017075:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017079:	0f b6 c0             	movzx  eax,al
c001707c:	c1 e0 10             	shl    eax,0x10
c001707f:	09 c1                	or     ecx,eax
c0017081:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017085:	8d 50 03             	lea    edx,[eax+0x3]
c0017088:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001708c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017090:	0f b6 c0             	movzx  eax,al
c0017093:	c1 e0 18             	shl    eax,0x18
c0017096:	09 c1                	or     ecx,eax
c0017098:	89 ca                	mov    edx,ecx
c001709a:	a0 e0 b3 02 c0       	mov    al,ds:0xc002b3e0
c001709f:	0f b6 c0             	movzx  eax,al
c00170a2:	89 14 85 a0 b4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4b60],edx
c00170a9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00170ae:	a0 e0 b3 02 c0       	mov    al,ds:0xc002b3e0
c00170b3:	40                   	inc    eax
c00170b4:	a2 e0 b3 02 c0       	mov    ds:0xc002b3e0,al
c00170b9:	e9 bb 01 00 00       	jmp    c0017279 <scanMADT()+0x469>
c00170be:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00170c3:	0f 85 e9 00 00 00    	jne    c00171b2 <scanMADT()+0x3a2>
c00170c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170cd:	8d 50 01             	lea    edx,[eax+0x1]
c00170d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00170d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170d8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00170dc:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00170e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170e4:	8d 50 01             	lea    edx,[eax+0x1]
c00170e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00170eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170ef:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00170f3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00170f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00170fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00170ff:	01 d0                	add    eax,edx
c0017101:	83 c0 2c             	add    eax,0x2c
c0017104:	8a 00                	mov    al,BYTE PTR [eax]
c0017106:	0f b6 d0             	movzx  edx,al
c0017109:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001710d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017110:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017114:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017118:	0f b6 c0             	movzx  eax,al
c001711b:	c1 e0 08             	shl    eax,0x8
c001711e:	89 d1                	mov    ecx,edx
c0017120:	09 c1                	or     ecx,eax
c0017122:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017126:	8d 50 02             	lea    edx,[eax+0x2]
c0017129:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001712d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017131:	0f b6 c0             	movzx  eax,al
c0017134:	c1 e0 10             	shl    eax,0x10
c0017137:	09 c1                	or     ecx,eax
c0017139:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001713d:	8d 50 03             	lea    edx,[eax+0x3]
c0017140:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017144:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017148:	0f b6 c0             	movzx  eax,al
c001714b:	c1 e0 18             	shl    eax,0x18
c001714e:	09 c8                	or     eax,ecx
c0017150:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017154:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017159:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001715d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017161:	01 d0                	add    eax,edx
c0017163:	83 c0 2c             	add    eax,0x2c
c0017166:	8a 00                	mov    al,BYTE PTR [eax]
c0017168:	0f b6 c0             	movzx  eax,al
c001716b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001716f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017172:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017176:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001717a:	0f b6 d2             	movzx  edx,dl
c001717d:	c1 e2 08             	shl    edx,0x8
c0017180:	09 d0                	or     eax,edx
c0017182:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017187:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001718c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017191:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017195:	88 90 60 9d 02 c0    	mov    BYTE PTR [eax-0x3ffd62a0],dl
c001719b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00171a0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00171a5:	66 89 84 12 c0 b3 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4c40],ax
c00171ad:	e9 c7 00 00 00       	jmp    c0017279 <scanMADT()+0x469>
c00171b2:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00171b7:	0f 85 b0 00 00 00    	jne    c001726d <scanMADT()+0x45d>
c00171bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171c1:	8d 50 01             	lea    edx,[eax+0x1]
c00171c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00171c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00171cc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00171d0:	0f b6 c0             	movzx  eax,al
c00171d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00171db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171df:	01 d0                	add    eax,edx
c00171e1:	83 c0 2c             	add    eax,0x2c
c00171e4:	8a 00                	mov    al,BYTE PTR [eax]
c00171e6:	0f b6 d0             	movzx  edx,al
c00171e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00171ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00171f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171f4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00171f8:	0f b6 c0             	movzx  eax,al
c00171fb:	c1 e0 08             	shl    eax,0x8
c00171fe:	09 d0                	or     eax,edx
c0017200:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017204:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017209:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001720d:	8d 50 01             	lea    edx,[eax+0x1]
c0017210:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017214:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017218:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001721c:	0f b6 c0             	movzx  eax,al
c001721f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017227:	c1 e0 08             	shl    eax,0x8
c001722a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001722e:	89 c1                	mov    ecx,eax
c0017230:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017234:	c1 e0 18             	shl    eax,0x18
c0017237:	89 c3                	mov    ebx,eax
c0017239:	a1 30 b3 02 c0       	mov    eax,ds:0xc002b330
c001723e:	8d 50 01             	lea    edx,[eax+0x1]
c0017241:	89 15 30 b3 02 c0    	mov    DWORD PTR ds:0xc002b330,edx
c0017247:	09 d9                	or     ecx,ebx
c0017249:	89 ca                	mov    edx,ecx
c001724b:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0017252:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001725a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001725e:	68 d8 81 02 c0       	push   0xc00281d8
c0017263:	e8 dd b3 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017268:	83 c4 10             	add    esp,0x10
c001726b:	eb 0c                	jmp    c0017279 <scanMADT()+0x469>
c001726d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017272:	75 05                	jne    c0017279 <scanMADT()+0x469>
c0017274:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017279:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001727e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017282:	01 d0                	add    eax,edx
c0017284:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017288:	e9 54 fc ff ff       	jmp    c0016ee1 <scanMADT()+0xd1>
c001728d:	90                   	nop
c001728e:	eb 01                	jmp    c0017291 <scanMADT()+0x481>
c0017290:	90                   	nop
c0017291:	83 c4 38             	add    esp,0x38
c0017294:	5b                   	pop    ebx
c0017295:	c3                   	ret    

c0017296 <ACPI::ACPI()>:
c0017296:	83 ec 0c             	sub    esp,0xc
c0017299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001729d:	83 ec 08             	sub    esp,0x8
c00172a0:	68 eb 80 02 c0       	push   0xc00280eb
c00172a5:	50                   	push   eax
c00172a6:	e8 79 c9 ff ff       	call   c0013c24 <Device::Device(char const*)>
c00172ab:	83 c4 10             	add    esp,0x10
c00172ae:	ba b0 82 02 c0       	mov    edx,0xc00282b0
c00172b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172b7:	89 10                	mov    DWORD PTR [eax],edx
c00172b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172bd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00172c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172c8:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00172d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172d6:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00172e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172e4:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00172eb:	e8 20 fb ff ff       	call   c0016e10 <scanMADT()>
c00172f0:	90                   	nop
c00172f1:	83 c4 0c             	add    esp,0xc
c00172f4:	c3                   	ret    
c00172f5:	90                   	nop

c00172f6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00172f6:	83 ec 2c             	sub    esp,0x2c
c00172f9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017301:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017305:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017309:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001730e:	88 d0                	mov    al,dl
c0017310:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017314:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017319:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017321:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017325:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001732b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001732f:	0f 8d 97 00 00 00    	jge    c00173cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017335:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017339:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001733d:	83 c2 2a             	add    edx,0x2a
c0017340:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017344:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017349:	75 78                	jne    c00173c3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001734b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001734f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017353:	83 c2 2a             	add    edx,0x2a
c0017356:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001735a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001735e:	75 63                	jne    c00173c3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017360:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017365:	74 3a                	je     c00173a1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017367:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001736b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001736f:	83 c2 2a             	add    edx,0x2a
c0017372:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017376:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001737a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001737d:	39 c2                	cmp    edx,eax
c001737f:	74 10                	je     c0017391 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017381:	83 ec 0c             	sub    esp,0xc
c0017384:	68 14 82 02 c0       	push   0xc0028214
c0017389:	e8 7b 1a 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c001738e:	83 c4 10             	add    esp,0x10
c0017391:	83 ec 0c             	sub    esp,0xc
c0017394:	68 f0 80 02 c0       	push   0xc00280f0
c0017399:	e8 6b 1a 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c001739e:	83 c4 10             	add    esp,0x10
c00173a1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00173a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00173ad:	83 c2 2a             	add    edx,0x2a
c00173b0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00173b4:	8b 02                	mov    eax,DWORD PTR [edx]
c00173b6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00173b9:	89 01                	mov    DWORD PTR [ecx],eax
c00173bb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00173be:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00173c3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00173c7:	e9 55 ff ff ff       	jmp    c0017321 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00173cc:	90                   	nop
c00173cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173d1:	83 c4 2c             	add    esp,0x2c
c00173d4:	c2 04 00             	ret    0x4
c00173d7:	90                   	nop

c00173d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00173d8:	56                   	push   esi
c00173d9:	53                   	push   ebx
c00173da:	83 ec 14             	sub    esp,0x14
c00173dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173e1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00173e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173e9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00173ee:	88 c8                	mov    al,cl
c00173f0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00173f4:	88 d0                	mov    al,dl
c00173f6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00173fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173fe:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0017404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017408:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c001740e:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0017413:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017418:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001741d:	83 ec 04             	sub    esp,0x4
c0017420:	56                   	push   esi
c0017421:	53                   	push   ebx
c0017422:	51                   	push   ecx
c0017423:	52                   	push   edx
c0017424:	50                   	push   eax
c0017425:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017429:	68 44 82 02 c0       	push   0xc0028244
c001742e:	e8 12 b2 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017433:	83 c4 20             	add    esp,0x20
c0017436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001743a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017444:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017447:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001744b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001744f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017453:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017459:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001745d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017460:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017464:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001746d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017473:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017477:	8d 48 01             	lea    ecx,[eax+0x1]
c001747a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001747e:	83 c2 2a             	add    edx,0x2a
c0017481:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017489:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001748f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017493:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017496:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001749a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001749e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174a2:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00174a8:	8d 50 01             	lea    edx,[eax+0x1]
c00174ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174af:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00174b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174b9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00174bf:	3d 00 08 00 00       	cmp    eax,0x800
c00174c4:	75 10                	jne    c00174d6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00174c6:	83 ec 0c             	sub    esp,0xc
c00174c9:	68 ff 80 02 c0       	push   0xc00280ff
c00174ce:	e8 36 19 00 00       	call   c0018e09 <Krnl::panic(char const*)>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	90                   	nop
c00174d7:	83 c4 14             	add    esp,0x14
c00174da:	5b                   	pop    ebx
c00174db:	5e                   	pop    esi
c00174dc:	c3                   	ret    
c00174dd:	90                   	nop

c00174de <ACPI::setScreenBrightnessLevel(void*, int)>:
c00174de:	b8 00 00 00 00       	mov    eax,0x0
c00174e3:	c3                   	ret    

c00174e4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00174e4:	83 ec 1c             	sub    esp,0x1c
c00174e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00174eb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00174ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00174f2:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00174f7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00174fc:	83 ec 08             	sub    esp,0x8
c00174ff:	52                   	push   edx
c0017500:	50                   	push   eax
c0017501:	e8 e4 75 ff ff       	call   c000eaea <Computer::readCMOS(unsigned char)>
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001750d:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0017512:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017517:	83 ec 04             	sub    esp,0x4
c001751a:	6a 01                	push   0x1
c001751c:	52                   	push   edx
c001751d:	50                   	push   eax
c001751e:	e8 dd 76 ff ff       	call   c000ec00 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017523:	83 c4 10             	add    esp,0x10
c0017526:	90                   	nop
c0017527:	83 c4 1c             	add    esp,0x1c
c001752a:	c3                   	ret    
c001752b:	90                   	nop

c001752c <ACPI::open(int, int, void*)>:
c001752c:	53                   	push   ebx
c001752d:	83 ec 28             	sub    esp,0x28
c0017530:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017534:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001753b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001753f:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017545:	84 c0                	test   al,al
c0017547:	74 67                	je     c00175b0 <ACPI::open(int, int, void*)+0x84>
c0017549:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c0017551:	83 ec 0c             	sub    esp,0xc
c0017554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017558:	e8 75 7f ff ff       	call   c000f4d2 <malloc>
c001755d:	83 c4 10             	add    esp,0x10
c0017560:	89 c3                	mov    ebx,eax
c0017562:	83 ec 0c             	sub    esp,0xc
c0017565:	53                   	push   ebx
c0017566:	e8 31 91 00 00       	call   c002069c <PCI::PCI()>
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017572:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017576:	83 ec 08             	sub    esp,0x8
c0017579:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001757d:	50                   	push   eax
c001757e:	e8 b1 c4 ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0017583:	83 c4 10             	add    esp,0x10
c0017586:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001758a:	8b 00                	mov    eax,DWORD PTR [eax]
c001758c:	83 c0 08             	add    eax,0x8
c001758f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017591:	6a 00                	push   0x0
c0017593:	6a 00                	push   0x0
c0017595:	6a 00                	push   0x0
c0017597:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001759b:	ff d0                	call   eax
c001759d:	83 c4 10             	add    esp,0x10
c00175a0:	83 ec 0c             	sub    esp,0xc
c00175a3:	68 1c 81 02 c0       	push   0xc002811c
c00175a8:	e8 98 b0 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00175ad:	83 c4 10             	add    esp,0x10
c00175b0:	83 ec 0c             	sub    esp,0xc
c00175b3:	68 27 81 02 c0       	push   0xc0028127
c00175b8:	e8 5b 37 00 00       	call   c001ad18 <Thr::loadKernelSymbolTable(char const*)>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	8b 1d 88 aa 02 c0    	mov    ebx,DWORD PTR ds:0xc002aa88
c00175c6:	83 ec 08             	sub    esp,0x8
c00175c9:	6a 01                	push   0x1
c00175cb:	68 45 81 02 c0       	push   0xc0028145
c00175d0:	e8 03 42 00 00       	call   c001b7d8 <Thr::loadDLL(char const*, bool)>
c00175d5:	83 c4 10             	add    esp,0x10
c00175d8:	83 ec 08             	sub    esp,0x8
c00175db:	53                   	push   ebx
c00175dc:	50                   	push   eax
c00175dd:	e8 05 44 00 00       	call   c001b9e7 <Thr::executeDLL(unsigned long, void*)>
c00175e2:	83 c4 10             	add    esp,0x10
c00175e5:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c00175ea:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175f0:	83 e0 04             	and    eax,0x4
c00175f3:	84 c0                	test   al,al
c00175f5:	0f 84 d6 00 00 00    	je     c00176d1 <ACPI::open(int, int, void*)+0x1a5>
c00175fb:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017603:	83 ec 0c             	sub    esp,0xc
c0017606:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001760a:	e8 c3 7e ff ff       	call   c000f4d2 <malloc>
c001760f:	83 c4 10             	add    esp,0x10
c0017612:	89 c3                	mov    ebx,eax
c0017614:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0017619:	83 ec 04             	sub    esp,0x4
c001761c:	50                   	push   eax
c001761d:	68 62 81 02 c0       	push   0xc0028162
c0017622:	53                   	push   ebx
c0017623:	e8 4c b5 ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c0017628:	83 c4 10             	add    esp,0x10
c001762b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001762f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017634:	74 17                	je     c001764d <ACPI::open(int, int, void*)+0x121>
c0017636:	83 ec 0c             	sub    esp,0xc
c0017639:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001763d:	e8 04 b8 ff ff       	call   c0012e46 <File::exists()>
c0017642:	83 c4 10             	add    esp,0x10
c0017645:	84 c0                	test   al,al
c0017647:	74 04                	je     c001764d <ACPI::open(int, int, void*)+0x121>
c0017649:	b0 01                	mov    al,0x1
c001764b:	eb 02                	jmp    c001764f <ACPI::open(int, int, void*)+0x123>
c001764d:	b0 00                	mov    al,0x0
c001764f:	84 c0                	test   al,al
c0017651:	74 25                	je     c0017678 <ACPI::open(int, int, void*)+0x14c>
c0017653:	8b 1d 88 aa 02 c0    	mov    ebx,DWORD PTR ds:0xc002aa88
c0017659:	83 ec 08             	sub    esp,0x8
c001765c:	6a 01                	push   0x1
c001765e:	68 62 81 02 c0       	push   0xc0028162
c0017663:	e8 70 41 00 00       	call   c001b7d8 <Thr::loadDLL(char const*, bool)>
c0017668:	83 c4 10             	add    esp,0x10
c001766b:	83 ec 08             	sub    esp,0x8
c001766e:	53                   	push   ebx
c001766f:	50                   	push   eax
c0017670:	e8 72 43 00 00       	call   c001b9e7 <Thr::executeDLL(unsigned long, void*)>
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001767d:	74 1e                	je     c001769d <ACPI::open(int, int, void*)+0x171>
c001767f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017684:	74 17                	je     c001769d <ACPI::open(int, int, void*)+0x171>
c0017686:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001768a:	8b 00                	mov    eax,DWORD PTR [eax]
c001768c:	83 c0 08             	add    eax,0x8
c001768f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017691:	83 ec 0c             	sub    esp,0xc
c0017694:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017698:	ff d0                	call   eax
c001769a:	83 c4 10             	add    esp,0x10
c001769d:	a1 28 b3 02 c0       	mov    eax,ds:0xc002b328
c00176a2:	83 ec 08             	sub    esp,0x8
c00176a5:	68 7f 81 02 c0       	push   0xc002817f
c00176aa:	50                   	push   eax
c00176ab:	e8 c4 f6 ff ff       	call   c0016d74 <findDataTable(unsigned char*, char*)>
c00176b0:	83 c4 10             	add    esp,0x10
c00176b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00176bc:	74 13                	je     c00176d1 <ACPI::open(int, int, void*)+0x1a5>
c00176be:	83 ec 08             	sub    esp,0x8
c00176c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00176c9:	e8 16 fe ff ff       	call   c00174e4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00176ce:	83 c4 10             	add    esp,0x10
c00176d1:	b8 00 00 00 00       	mov    eax,0x0
c00176d6:	83 c4 28             	add    esp,0x28
c00176d9:	5b                   	pop    ebx
c00176da:	c3                   	ret    
c00176db:	90                   	nop

c00176dc <ACPI::sleep()>:
c00176dc:	83 ec 0c             	sub    esp,0xc
c00176df:	a1 00 b1 02 c0       	mov    eax,ds:0xc002b100
c00176e4:	85 c0                	test   eax,eax
c00176e6:	74 07                	je     c00176ef <ACPI::sleep()+0x13>
c00176e8:	a1 00 b1 02 c0       	mov    eax,ds:0xc002b100
c00176ed:	ff d0                	call   eax
c00176ef:	90                   	nop
c00176f0:	83 c4 0c             	add    esp,0xc
c00176f3:	c3                   	ret    

c00176f4 <CPU::close(int, int, void*)>:
c00176f4:	31 c0                	xor    eax,eax
c00176f6:	c3                   	ret    
c00176f7:	90                   	nop

c00176f8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00176f8:	55                   	push   ebp
c00176f9:	57                   	push   edi
c00176fa:	56                   	push   esi
c00176fb:	53                   	push   ebx
c00176fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017700:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017704:	89 ce                	mov    esi,ecx
c0017706:	89 d5                	mov    ebp,edx
c0017708:	80 f9 04             	cmp    cl,0x4
c001770b:	75 28                	jne    c0017735 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001770d:	8d 42 f9             	lea    eax,[edx-0x7]
c0017710:	3c 03                	cmp    al,0x3
c0017712:	0f 86 63 01 00 00    	jbe    c001787b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017718:	80 fa 03             	cmp    dl,0x3
c001771b:	0f 84 5a 01 00 00    	je     c001787b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017721:	8d 7a f2             	lea    edi,[edx-0xe]
c0017724:	b8 30 9f 02 c0       	mov    eax,0xc0029f30
c0017729:	89 fb                	mov    ebx,edi
c001772b:	80 fb 01             	cmp    bl,0x1
c001772e:	77 4e                	ja     c001777e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017730:	e9 52 01 00 00       	jmp    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017735:	80 f9 05             	cmp    cl,0x5
c0017738:	75 4d                	jne    c0017787 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001773a:	b8 40 9f 02 c0       	mov    eax,0xc0029f40
c001773f:	80 fa 03             	cmp    dl,0x3
c0017742:	0f 86 3f 01 00 00    	jbe    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017748:	8d 7a fa             	lea    edi,[edx-0x6]
c001774b:	b8 50 9f 02 c0       	mov    eax,0xc0029f50
c0017750:	89 fb                	mov    ebx,edi
c0017752:	80 fb 01             	cmp    bl,0x1
c0017755:	0f 86 2c 01 00 00    	jbe    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001775b:	b8 60 9f 02 c0       	mov    eax,0xc0029f60
c0017760:	80 fa 08             	cmp    dl,0x8
c0017763:	0f 84 1e 01 00 00    	je     c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017769:	89 d7                	mov    edi,edx
c001776b:	b8 70 9f 02 c0       	mov    eax,0xc0029f70
c0017770:	83 e7 fb             	and    edi,0xfffffffb
c0017773:	89 fb                	mov    ebx,edi
c0017775:	80 fb 09             	cmp    bl,0x9
c0017778:	0f 84 09 01 00 00    	je     c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001777e:	31 c0                	xor    eax,eax
c0017780:	89 eb                	mov    ebx,ebp
c0017782:	0f b6 fb             	movzx  edi,bl
c0017785:	eb 30                	jmp    c00177b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017787:	31 c0                	xor    eax,eax
c0017789:	80 f9 06             	cmp    cl,0x6
c001778c:	75 f2                	jne    c0017780 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001778e:	80 fa 0a             	cmp    dl,0xa
c0017791:	77 ed                	ja     c0017780 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017793:	bf de 05 00 00       	mov    edi,0x5de
c0017798:	0f a3 d7             	bt     edi,edx
c001779b:	73 e3                	jae    c0017780 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001779d:	b8 80 9f 02 c0       	mov    eax,0xc0029f80
c00177a2:	e9 e0 00 00 00       	jmp    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00177a7:	39 c7                	cmp    edi,eax
c00177a9:	0f 84 d3 00 00 00    	je     c0017882 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00177af:	40                   	inc    eax
c00177b0:	3d d0 00 00 00       	cmp    eax,0xd0
c00177b5:	74 09                	je     c00177c0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00177b7:	89 f3                	mov    ebx,esi
c00177b9:	80 fb 0f             	cmp    bl,0xf
c00177bc:	75 f1                	jne    c00177af <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00177be:	eb e7                	jmp    c00177a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00177c0:	80 f9 10             	cmp    cl,0x10
c00177c3:	75 14                	jne    c00177d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00177c5:	8d 42 fc             	lea    eax,[edx-0x4]
c00177c8:	83 e0 fb             	and    eax,0xfffffffb
c00177cb:	3c 02                	cmp    al,0x2
c00177cd:	76 34                	jbe    c0017803 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00177cf:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c00177d4:	80 fa 02             	cmp    dl,0x2
c00177d7:	eb 24                	jmp    c00177fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00177d9:	80 f9 11             	cmp    cl,0x11
c00177dc:	75 13                	jne    c00177f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00177de:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c00177e3:	80 fa 03             	cmp    dl,0x3
c00177e6:	0f 85 9b 00 00 00    	jne    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00177ec:	e9 91 00 00 00       	jmp    c0017882 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00177f1:	80 f9 12             	cmp    cl,0x12
c00177f4:	75 14                	jne    c001780a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00177f6:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c00177fb:	fe ca                	dec    dl
c00177fd:	0f 85 84 00 00 00    	jne    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017803:	b8 a0 9f 02 c0       	mov    eax,0xc0029fa0
c0017808:	eb 7d                	jmp    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001780a:	80 f9 14             	cmp    cl,0x14
c001780d:	75 12                	jne    c0017821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001780f:	4a                   	dec    edx
c0017810:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c0017815:	80 fa 01             	cmp    dl,0x1
c0017818:	77 6d                	ja     c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001781a:	b8 b0 9f 02 c0       	mov    eax,0xc0029fb0
c001781f:	eb 66                	jmp    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017821:	80 f9 15             	cmp    cl,0x15
c0017824:	75 31                	jne    c0017857 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017826:	b8 c0 9f 02 c0       	mov    eax,0xc0029fc0
c001782b:	80 fa 01             	cmp    dl,0x1
c001782e:	74 57                	je     c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017830:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c0017835:	80 fa 13             	cmp    dl,0x13
c0017838:	76 0c                	jbe    c0017846 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001783a:	80 fa 30             	cmp    dl,0x30
c001783d:	75 48                	jne    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001783f:	b8 e0 9f 02 c0       	mov    eax,0xc0029fe0
c0017844:	eb 41                	jmp    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017846:	b9 04 00 09 00       	mov    ecx,0x90004
c001784b:	0f a3 d1             	bt     ecx,edx
c001784e:	73 37                	jae    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017850:	b8 d0 9f 02 c0       	mov    eax,0xc0029fd0
c0017855:	eb 30                	jmp    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017857:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c001785c:	80 f9 16             	cmp    cl,0x16
c001785f:	75 26                	jne    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017861:	b8 f0 9f 02 c0       	mov    eax,0xc0029ff0
c0017866:	84 d2                	test   dl,dl
c0017868:	74 1d                	je     c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001786a:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c001786f:	80 fa 30             	cmp    dl,0x30
c0017872:	75 13                	jne    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017874:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0017879:	eb 0c                	jmp    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001787b:	b8 20 9f 02 c0       	mov    eax,0xc0029f20
c0017880:	eb 05                	jmp    c0017887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017882:	b8 90 9f 02 c0       	mov    eax,0xc0029f90
c0017887:	5b                   	pop    ebx
c0017888:	5e                   	pop    esi
c0017889:	5f                   	pop    edi
c001788a:	5d                   	pop    ebp
c001788b:	c3                   	ret    

c001788c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001788c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017890:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017894:	80 f9 04             	cmp    cl,0x4
c0017897:	75 6b                	jne    c0017904 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017899:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c001789e:	80 fa 01             	cmp    dl,0x1
c00178a1:	0f 86 92 02 00 00    	jbe    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178a7:	b8 90 9d 02 c0       	mov    eax,0xc0029d90
c00178ac:	80 fa 02             	cmp    dl,0x2
c00178af:	0f 84 84 02 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178b5:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c00178ba:	80 fa 03             	cmp    dl,0x3
c00178bd:	0f 84 76 02 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178c3:	b8 b0 9d 02 c0       	mov    eax,0xc0029db0
c00178c8:	80 fa 04             	cmp    dl,0x4
c00178cb:	0f 84 68 02 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178d1:	b8 c0 9d 02 c0       	mov    eax,0xc0029dc0
c00178d6:	80 fa 05             	cmp    dl,0x5
c00178d9:	0f 84 5a 02 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178df:	b8 a0 9d 02 c0       	mov    eax,0xc0029da0
c00178e4:	80 fa 07             	cmp    dl,0x7
c00178e7:	0f 84 4c 02 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178ed:	83 ea 08             	sub    edx,0x8
c00178f0:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c00178f5:	80 fa 01             	cmp    dl,0x1
c00178f8:	0f 87 3b 02 00 00    	ja     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00178fe:	b8 d0 9d 02 c0       	mov    eax,0xc0029dd0
c0017903:	c3                   	ret    
c0017904:	80 f9 05             	cmp    cl,0x5
c0017907:	75 45                	jne    c001794e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017909:	8d 4a ff             	lea    ecx,[edx-0x1]
c001790c:	b8 e0 9d 02 c0       	mov    eax,0xc0029de0
c0017911:	80 f9 02             	cmp    cl,0x2
c0017914:	0f 86 1f 02 00 00    	jbe    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001791a:	80 fa 04             	cmp    dl,0x4
c001791d:	0f 84 f3 01 00 00    	je     c0017b16 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017923:	80 fa 07             	cmp    dl,0x7
c0017926:	0f 84 0d 02 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001792c:	b8 f0 9d 02 c0       	mov    eax,0xc0029df0
c0017931:	80 fa 08             	cmp    dl,0x8
c0017934:	0f 84 ff 01 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001793a:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c001793f:	80 fa 09             	cmp    dl,0x9
c0017942:	0f 85 f1 01 00 00    	jne    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017948:	b8 00 9e 02 c0       	mov    eax,0xc0029e00
c001794d:	c3                   	ret    
c001794e:	80 f9 06             	cmp    cl,0x6
c0017951:	0f 85 85 01 00 00    	jne    c0017adc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017957:	b8 10 9e 02 c0       	mov    eax,0xc0029e10
c001795c:	80 fa 01             	cmp    dl,0x1
c001795f:	0f 84 d4 01 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017965:	8d 42 fb             	lea    eax,[edx-0x5]
c0017968:	3c 01                	cmp    al,0x1
c001796a:	0f 86 ac 01 00 00    	jbe    c0017b1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017970:	80 fa 03             	cmp    dl,0x3
c0017973:	0f 84 a3 01 00 00    	je     c0017b1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017979:	8d 4a f9             	lea    ecx,[edx-0x7]
c001797c:	b8 30 9e 02 c0       	mov    eax,0xc0029e30
c0017981:	80 f9 01             	cmp    cl,0x1
c0017984:	0f 86 af 01 00 00    	jbe    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001798a:	80 fa 09             	cmp    dl,0x9
c001798d:	0f 84 8f 01 00 00    	je     c0017b22 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017993:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017996:	80 f9 01             	cmp    cl,0x1
c0017999:	0f 86 9a 01 00 00    	jbe    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001799f:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c00179a4:	80 fa 0d             	cmp    dl,0xd
c00179a7:	0f 84 8c 01 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179ad:	b8 50 9e 02 c0       	mov    eax,0xc0029e50
c00179b2:	80 fa 0e             	cmp    dl,0xe
c00179b5:	0f 84 7e 01 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179bb:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c00179c0:	80 fa 0f             	cmp    dl,0xf
c00179c3:	0f 84 70 01 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179c9:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c00179ce:	80 fa 15             	cmp    dl,0x15
c00179d1:	0f 84 62 01 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179d7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00179da:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c00179df:	80 f9 01             	cmp    cl,0x1
c00179e2:	0f 86 51 01 00 00    	jbe    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00179e8:	80 fa 1a             	cmp    dl,0x1a
c00179eb:	0f 84 37 01 00 00    	je     c0017b28 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00179f1:	80 fa 1c             	cmp    dl,0x1c
c00179f4:	0f 84 34 01 00 00    	je     c0017b2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00179fa:	80 fa 1d             	cmp    dl,0x1d
c00179fd:	0f 84 36 01 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a03:	b8 90 9e 02 c0       	mov    eax,0xc0029e90
c0017a08:	80 fa 25             	cmp    dl,0x25
c0017a0b:	0f 84 28 01 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a11:	8d 4a da             	lea    ecx,[edx-0x26]
c0017a14:	b8 80 9e 02 c0       	mov    eax,0xc0029e80
c0017a19:	80 f9 01             	cmp    cl,0x1
c0017a1c:	0f 86 17 01 00 00    	jbe    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a22:	b8 a0 9e 02 c0       	mov    eax,0xc0029ea0
c0017a27:	80 fa 2a             	cmp    dl,0x2a
c0017a2a:	0f 84 09 01 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a30:	b8 90 9e 02 c0       	mov    eax,0xc0029e90
c0017a35:	80 fa 2c             	cmp    dl,0x2c
c0017a38:	0f 84 fb 00 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a3e:	b8 a0 9e 02 c0       	mov    eax,0xc0029ea0
c0017a43:	80 fa 2d             	cmp    dl,0x2d
c0017a46:	0f 84 ed 00 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a4c:	b8 70 9e 02 c0       	mov    eax,0xc0029e70
c0017a51:	80 fa 2e             	cmp    dl,0x2e
c0017a54:	0f 84 df 00 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a5a:	b8 90 9e 02 c0       	mov    eax,0xc0029e90
c0017a5f:	80 fa 2f             	cmp    dl,0x2f
c0017a62:	0f 84 d1 00 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a68:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017a6b:	b8 80 9e 02 c0       	mov    eax,0xc0029e80
c0017a70:	80 f9 01             	cmp    cl,0x1
c0017a73:	0f 86 c0 00 00 00    	jbe    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a79:	b8 b0 9e 02 c0       	mov    eax,0xc0029eb0
c0017a7e:	80 fa 37             	cmp    dl,0x37
c0017a81:	0f 84 b2 00 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a87:	b8 c0 9e 02 c0       	mov    eax,0xc0029ec0
c0017a8c:	80 fa 3a             	cmp    dl,0x3a
c0017a8f:	0f 84 a4 00 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017a95:	b8 d0 9e 02 c0       	mov    eax,0xc0029ed0
c0017a9a:	80 fa 3c             	cmp    dl,0x3c
c0017a9d:	0f 84 96 00 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017aa3:	b8 e0 9e 02 c0       	mov    eax,0xc0029ee0
c0017aa8:	80 fa 3d             	cmp    dl,0x3d
c0017aab:	0f 84 88 00 00 00    	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ab1:	b8 c0 9e 02 c0       	mov    eax,0xc0029ec0
c0017ab6:	80 fa 3e             	cmp    dl,0x3e
c0017ab9:	74 7e                	je     c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017abb:	8d 42 bb             	lea    eax,[edx-0x45]
c0017abe:	3c 01                	cmp    al,0x1
c0017ac0:	76 72                	jbe    c0017b34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017ac2:	80 fa 3f             	cmp    dl,0x3f
c0017ac5:	74 6d                	je     c0017b34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017ac7:	80 fa 4a             	cmp    dl,0x4a
c0017aca:	74 0a                	je     c0017ad6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017acc:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c0017ad1:	80 fa 4d             	cmp    dl,0x4d
c0017ad4:	75 63                	jne    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ad6:	b8 b0 9e 02 c0       	mov    eax,0xc0029eb0
c0017adb:	c3                   	ret    
c0017adc:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c0017ae1:	80 f9 0b             	cmp    cl,0xb
c0017ae4:	75 0a                	jne    c0017af0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017ae6:	fe ca                	dec    dl
c0017ae8:	75 4f                	jne    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017aea:	b8 f0 9e 02 c0       	mov    eax,0xc0029ef0
c0017aef:	c3                   	ret    
c0017af0:	80 f9 0f             	cmp    cl,0xf
c0017af3:	75 44                	jne    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017af5:	b8 00 9f 02 c0       	mov    eax,0xc0029f00
c0017afa:	80 fa 02             	cmp    dl,0x2
c0017afd:	76 3a                	jbe    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017aff:	8d 42 fd             	lea    eax,[edx-0x3]
c0017b02:	3c 01                	cmp    al,0x1
c0017b04:	76 0a                	jbe    c0017b10 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017b06:	b8 c6 85 02 c0       	mov    eax,0xc00285c6
c0017b0b:	80 fa 06             	cmp    dl,0x6
c0017b0e:	75 29                	jne    c0017b39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017b10:	b8 10 9f 02 c0       	mov    eax,0xc0029f10
c0017b15:	c3                   	ret    
c0017b16:	b8 f0 9d 02 c0       	mov    eax,0xc0029df0
c0017b1b:	c3                   	ret    
c0017b1c:	b8 20 9e 02 c0       	mov    eax,0xc0029e20
c0017b21:	c3                   	ret    
c0017b22:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c0017b27:	c3                   	ret    
c0017b28:	b8 70 9e 02 c0       	mov    eax,0xc0029e70
c0017b2d:	c3                   	ret    
c0017b2e:	b8 80 9e 02 c0       	mov    eax,0xc0029e80
c0017b33:	c3                   	ret    
c0017b34:	b8 d0 9e 02 c0       	mov    eax,0xc0029ed0
c0017b39:	c3                   	ret    

c0017b3a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017b3a:	60                   	pusha  
c0017b3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017b3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b47:	9c                   	pushf  
c0017b48:	fa                   	cli    
c0017b49:	0f 09                	wbinvd 
c0017b4b:	0f 30                	wrmsr  
c0017b4d:	9d                   	popf   
c0017b4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b52:	89 02                	mov    DWORD PTR [edx],eax
c0017b54:	61                   	popa   
c0017b55:	c3                   	ret    

c0017b56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017b56:	60                   	pusha  
c0017b57:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017b5b:	9c                   	pushf  
c0017b5c:	fa                   	cli    
c0017b5d:	0f 09                	wbinvd 
c0017b5f:	31 c0                	xor    eax,eax
c0017b61:	31 d2                	xor    edx,edx
c0017b63:	0f 32                	rdmsr  
c0017b65:	9d                   	popf   
c0017b66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b6a:	89 02                	mov    DWORD PTR [edx],eax
c0017b6c:	61                   	popa   
c0017b6d:	c3                   	ret    

c0017b6e <CPU::AMD_K6_writeback(int, int, int)>:
c0017b6e:	56                   	push   esi
c0017b6f:	53                   	push   ebx
c0017b70:	83 ec 10             	sub    esp,0x10
c0017b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b77:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017b7c:	75 5d                	jne    c0017bdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017b7e:	83 f8 08             	cmp    eax,0x8
c0017b81:	75 09                	jne    c0017b8c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017b83:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017b88:	7e 13                	jle    c0017b9d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017b8a:	eb 30                	jmp    c0017bbc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017b8c:	83 f8 06             	cmp    eax,0x6
c0017b8f:	7c 4a                	jl     c0017bdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017b91:	83 f8 07             	cmp    eax,0x7
c0017b94:	7e 07                	jle    c0017b9d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017b96:	83 f8 09             	cmp    eax,0x9
c0017b99:	74 21                	je     c0017bbc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017b9b:	eb 3e                	jmp    c0017bdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017b9d:	89 e6                	mov    esi,esp
c0017b9f:	8b 1d c4 aa 02 c0    	mov    ebx,DWORD PTR ds:0xc002aac4
c0017ba5:	56                   	push   esi
c0017ba6:	c1 eb 15             	shr    ebx,0x15
c0017ba9:	68 82 00 00 c0       	push   0xc0000082
c0017bae:	83 e3 7e             	and    ebx,0x7e
c0017bb1:	e8 a0 ff ff ff       	call   c0017b56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017bb6:	56                   	push   esi
c0017bb7:	6a 00                	push   0x0
c0017bb9:	53                   	push   ebx
c0017bba:	eb 12                	jmp    c0017bce <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017bbc:	89 e3                	mov    ebx,esp
c0017bbe:	53                   	push   ebx
c0017bbf:	68 82 00 00 c0       	push   0xc0000082
c0017bc4:	e8 8d ff ff ff       	call   c0017b56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017bc9:	53                   	push   ebx
c0017bca:	6a 00                	push   0x0
c0017bcc:	6a 00                	push   0x0
c0017bce:	68 82 00 00 c0       	push   0xc0000082
c0017bd3:	e8 62 ff ff ff       	call   c0017b3a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017bd8:	83 c4 18             	add    esp,0x18
c0017bdb:	83 c4 10             	add    esp,0x10
c0017bde:	5b                   	pop    ebx
c0017bdf:	5e                   	pop    esi
c0017be0:	c3                   	ret    
c0017be1:	90                   	nop

c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017be2:	55                   	push   ebp
c0017be3:	57                   	push   edi
c0017be4:	56                   	push   esi
c0017be5:	53                   	push   ebx
c0017be6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017bee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017bf2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017bf6:	39 05 20 a0 02 c0    	cmp    DWORD PTR ds:0xc002a020,eax
c0017bfc:	75 23                	jne    c0017c21 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017bfe:	a1 8c b5 02 c0       	mov    eax,ds:0xc002b58c
c0017c03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c07:	89 06                	mov    DWORD PTR [esi],eax
c0017c09:	a1 88 b5 02 c0       	mov    eax,ds:0xc002b588
c0017c0e:	89 07                	mov    DWORD PTR [edi],eax
c0017c10:	a1 84 b5 02 c0       	mov    eax,ds:0xc002b584
c0017c15:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017c18:	a1 80 b5 02 c0       	mov    eax,ds:0xc002b580
c0017c1d:	89 02                	mov    DWORD PTR [edx],eax
c0017c1f:	eb 3f                	jmp    c0017c60 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017c21:	31 c9                	xor    ecx,ecx
c0017c23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c27:	0f a2                	cpuid  
c0017c29:	89 06                	mov    DWORD PTR [esi],eax
c0017c2b:	89 1f                	mov    DWORD PTR [edi],ebx
c0017c2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c31:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017c34:	89 10                	mov    DWORD PTR [eax],edx
c0017c36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c3a:	a3 20 a0 02 c0       	mov    ds:0xc002a020,eax
c0017c3f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017c41:	a3 8c b5 02 c0       	mov    ds:0xc002b58c,eax
c0017c46:	8b 07                	mov    eax,DWORD PTR [edi]
c0017c48:	a3 88 b5 02 c0       	mov    ds:0xc002b588,eax
c0017c4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c50:	a3 84 b5 02 c0       	mov    ds:0xc002b584,eax
c0017c55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c59:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c5b:	a3 80 b5 02 c0       	mov    ds:0xc002b580,eax
c0017c60:	5b                   	pop    ebx
c0017c61:	5e                   	pop    esi
c0017c62:	5f                   	pop    edi
c0017c63:	5d                   	pop    ebp
c0017c64:	c3                   	ret    
c0017c65:	90                   	nop

c0017c66 <CPU::cpuidCheckEDX(unsigned int)>:
c0017c66:	83 ec 10             	sub    esp,0x10
c0017c69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c6d:	50                   	push   eax
c0017c6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c72:	50                   	push   eax
c0017c73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c77:	50                   	push   eax
c0017c78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c7c:	50                   	push   eax
c0017c7d:	6a 01                	push   0x1
c0017c7f:	e8 5e ff ff ff       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017c84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c88:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017c8c:	0f 95 c0             	setne  al
c0017c8f:	83 c4 24             	add    esp,0x24
c0017c92:	c3                   	ret    
c0017c93:	90                   	nop

c0017c94 <CPU::cpuidCheckECX(unsigned int)>:
c0017c94:	83 ec 10             	sub    esp,0x10
c0017c97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c9b:	50                   	push   eax
c0017c9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ca0:	50                   	push   eax
c0017ca1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ca5:	50                   	push   eax
c0017ca6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017caa:	50                   	push   eax
c0017cab:	6a 01                	push   0x1
c0017cad:	e8 30 ff ff ff       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017cb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cb6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017cba:	0f 95 c0             	setne  al
c0017cbd:	83 c4 24             	add    esp,0x24
c0017cc0:	c3                   	ret    
c0017cc1:	90                   	nop

c0017cc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0017cc2:	83 ec 10             	sub    esp,0x10
c0017cc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cc9:	50                   	push   eax
c0017cca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cce:	50                   	push   eax
c0017ccf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cd3:	50                   	push   eax
c0017cd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cd8:	50                   	push   eax
c0017cd9:	6a 07                	push   0x7
c0017cdb:	e8 02 ff ff ff       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017ce0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ce4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017ce8:	0f 95 c0             	setne  al
c0017ceb:	83 c4 24             	add    esp,0x24
c0017cee:	c3                   	ret    
c0017cef:	90                   	nop

c0017cf0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0017cf0:	83 ec 10             	sub    esp,0x10
c0017cf3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cf7:	50                   	push   eax
c0017cf8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017cfc:	50                   	push   eax
c0017cfd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017d01:	50                   	push   eax
c0017d02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017d06:	50                   	push   eax
c0017d07:	6a 07                	push   0x7
c0017d09:	e8 d4 fe ff ff       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d12:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017d16:	0f 95 c0             	setne  al
c0017d19:	83 c4 24             	add    esp,0x24
c0017d1c:	c3                   	ret    
c0017d1d:	90                   	nop

c0017d1e <CPU::CPU()>:
c0017d1e:	83 ec 0c             	sub    esp,0xc
c0017d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d25:	83 ec 08             	sub    esp,0x8
c0017d28:	68 c6 85 02 c0       	push   0xc00285c6
c0017d2d:	50                   	push   eax
c0017d2e:	e8 f1 be ff ff       	call   c0013c24 <Device::Device(char const*)>
c0017d33:	83 c4 10             	add    esp,0x10
c0017d36:	ba a0 86 02 c0       	mov    edx,0xc00286a0
c0017d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d3f:	89 10                	mov    DWORD PTR [eax],edx
c0017d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d45:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d53:	05 78 01 00 00       	add    eax,0x178
c0017d58:	83 ec 0c             	sub    esp,0xc
c0017d5b:	50                   	push   eax
c0017d5c:	e8 89 6f ff ff       	call   c000ecea <GDT::GDT()>
c0017d61:	83 c4 10             	add    esp,0x10
c0017d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d68:	05 7c 09 00 00       	add    eax,0x97c
c0017d6d:	83 ec 0c             	sub    esp,0xc
c0017d70:	50                   	push   eax
c0017d71:	e8 d6 71 ff ff       	call   c000ef4c <IDT::IDT()>
c0017d76:	83 c4 10             	add    esp,0x10
c0017d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d7d:	05 7c 11 00 00       	add    eax,0x117c
c0017d82:	83 ec 0c             	sub    esp,0xc
c0017d85:	50                   	push   eax
c0017d86:	e8 fb 91 ff ff       	call   c0010f86 <TSS::TSS()>
c0017d8b:	83 c4 10             	add    esp,0x10
c0017d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d92:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d9d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017da7:	90                   	nop
c0017da8:	83 c4 0c             	add    esp,0xc
c0017dab:	c3                   	ret    

c0017dac <CPU::displayFeatures()>:
c0017dac:	53                   	push   ebx
c0017dad:	83 ec 10             	sub    esp,0x10
c0017db0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017db4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017dba:	68 d4 82 02 c0       	push   0xc00282d4
c0017dbf:	e8 81 a8 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017dc4:	59                   	pop    ecx
c0017dc5:	58                   	pop    eax
c0017dc6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017dcc:	50                   	push   eax
c0017dcd:	68 e5 82 02 c0       	push   0xc00282e5
c0017dd2:	e8 6e a8 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017dd7:	58                   	pop    eax
c0017dd8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017dde:	5a                   	pop    edx
c0017ddf:	c1 e8 0e             	shr    eax,0xe
c0017de2:	0f b6 c0             	movzx  eax,al
c0017de5:	50                   	push   eax
c0017de6:	68 f6 82 02 c0       	push   0xc00282f6
c0017deb:	e8 55 a8 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017df0:	59                   	pop    ecx
c0017df1:	58                   	pop    eax
c0017df2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017df8:	66 c1 e8 06          	shr    ax,0x6
c0017dfc:	0f b6 c0             	movzx  eax,al
c0017dff:	50                   	push   eax
c0017e00:	68 07 83 02 c0       	push   0xc0028307
c0017e05:	e8 3b a8 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017e0a:	c7 04 24 1a 87 02 c0 	mov    DWORD PTR [esp],0xc002871a
c0017e11:	e8 2f a8 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017e16:	83 c4 10             	add    esp,0x10
c0017e19:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017e1e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0017e25:	74 05                	je     c0017e2c <CPU::displayFeatures()+0x80>
c0017e27:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017e2c:	52                   	push   edx
c0017e2d:	52                   	push   edx
c0017e2e:	50                   	push   eax
c0017e2f:	68 18 83 02 c0       	push   0xc0028318
c0017e34:	e8 0c a8 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017e39:	83 c4 10             	add    esp,0x10
c0017e3c:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017e41:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0017e48:	78 05                	js     c0017e4f <CPU::displayFeatures()+0xa3>
c0017e4a:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017e4f:	51                   	push   ecx
c0017e50:	51                   	push   ecx
c0017e51:	50                   	push   eax
c0017e52:	68 2f 83 02 c0       	push   0xc002832f
c0017e57:	e8 e9 a7 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017e5c:	83 c4 10             	add    esp,0x10
c0017e5f:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017e64:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017e6b:	75 05                	jne    c0017e72 <CPU::displayFeatures()+0xc6>
c0017e6d:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017e72:	52                   	push   edx
c0017e73:	52                   	push   edx
c0017e74:	50                   	push   eax
c0017e75:	68 46 83 02 c0       	push   0xc0028346
c0017e7a:	e8 c6 a7 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017e87:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017e8e:	75 05                	jne    c0017e95 <CPU::displayFeatures()+0xe9>
c0017e90:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017e95:	51                   	push   ecx
c0017e96:	51                   	push   ecx
c0017e97:	50                   	push   eax
c0017e98:	68 5d 83 02 c0       	push   0xc002835d
c0017e9d:	e8 a3 a7 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017ea2:	83 c4 10             	add    esp,0x10
c0017ea5:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017eaa:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017eb1:	75 05                	jne    c0017eb8 <CPU::displayFeatures()+0x10c>
c0017eb3:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017eb8:	52                   	push   edx
c0017eb9:	52                   	push   edx
c0017eba:	50                   	push   eax
c0017ebb:	68 74 83 02 c0       	push   0xc0028374
c0017ec0:	e8 80 a7 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017ec5:	83 c4 10             	add    esp,0x10
c0017ec8:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017ecd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017ed4:	75 05                	jne    c0017edb <CPU::displayFeatures()+0x12f>
c0017ed6:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017edb:	51                   	push   ecx
c0017edc:	51                   	push   ecx
c0017edd:	50                   	push   eax
c0017ede:	68 8b 83 02 c0       	push   0xc002838b
c0017ee3:	e8 5d a7 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017ef0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017ef7:	75 05                	jne    c0017efe <CPU::displayFeatures()+0x152>
c0017ef9:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017efe:	52                   	push   edx
c0017eff:	52                   	push   edx
c0017f00:	50                   	push   eax
c0017f01:	68 a2 83 02 c0       	push   0xc00283a2
c0017f06:	e8 3a a7 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017f0b:	83 c4 10             	add    esp,0x10
c0017f0e:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017f13:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017f1a:	75 05                	jne    c0017f21 <CPU::displayFeatures()+0x175>
c0017f1c:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017f21:	51                   	push   ecx
c0017f22:	51                   	push   ecx
c0017f23:	50                   	push   eax
c0017f24:	68 b9 83 02 c0       	push   0xc00283b9
c0017f29:	e8 17 a7 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017f2e:	83 c4 10             	add    esp,0x10
c0017f31:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017f36:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017f3d:	75 05                	jne    c0017f44 <CPU::displayFeatures()+0x198>
c0017f3f:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017f44:	52                   	push   edx
c0017f45:	52                   	push   edx
c0017f46:	50                   	push   eax
c0017f47:	68 d0 83 02 c0       	push   0xc00283d0
c0017f4c:	e8 f4 a6 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017f51:	83 c4 10             	add    esp,0x10
c0017f54:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017f59:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017f60:	75 05                	jne    c0017f67 <CPU::displayFeatures()+0x1bb>
c0017f62:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017f67:	51                   	push   ecx
c0017f68:	51                   	push   ecx
c0017f69:	50                   	push   eax
c0017f6a:	68 e7 83 02 c0       	push   0xc00283e7
c0017f6f:	e8 d1 a6 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017f74:	83 c4 10             	add    esp,0x10
c0017f77:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017f7c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017f83:	75 05                	jne    c0017f8a <CPU::displayFeatures()+0x1de>
c0017f85:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017f8a:	52                   	push   edx
c0017f8b:	52                   	push   edx
c0017f8c:	50                   	push   eax
c0017f8d:	68 fe 83 02 c0       	push   0xc00283fe
c0017f92:	e8 ae a6 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017f9f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017fa6:	75 05                	jne    c0017fad <CPU::displayFeatures()+0x201>
c0017fa8:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017fad:	51                   	push   ecx
c0017fae:	51                   	push   ecx
c0017faf:	50                   	push   eax
c0017fb0:	68 15 84 02 c0       	push   0xc0028415
c0017fb5:	e8 8b a6 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017fba:	83 c4 10             	add    esp,0x10
c0017fbd:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017fc2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017fc9:	75 05                	jne    c0017fd0 <CPU::displayFeatures()+0x224>
c0017fcb:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017fd0:	52                   	push   edx
c0017fd1:	52                   	push   edx
c0017fd2:	50                   	push   eax
c0017fd3:	68 2c 84 02 c0       	push   0xc002842c
c0017fd8:	e8 68 a6 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0017fdd:	83 c4 10             	add    esp,0x10
c0017fe0:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0017fe5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017fec:	78 05                	js     c0017ff3 <CPU::displayFeatures()+0x247>
c0017fee:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0017ff3:	51                   	push   ecx
c0017ff4:	51                   	push   ecx
c0017ff5:	50                   	push   eax
c0017ff6:	68 43 84 02 c0       	push   0xc0028443
c0017ffb:	e8 45 a6 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0018000:	83 c4 10             	add    esp,0x10
c0018003:	b8 78 6f 02 c0       	mov    eax,0xc0026f78
c0018008:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001800f:	75 05                	jne    c0018016 <CPU::displayFeatures()+0x26a>
c0018011:	b8 7c 6f 02 c0       	mov    eax,0xc0026f7c
c0018016:	52                   	push   edx
c0018017:	52                   	push   edx
c0018018:	50                   	push   eax
c0018019:	68 5a 84 02 c0       	push   0xc002845a
c001801e:	e8 22 a6 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0018023:	83 c4 18             	add    esp,0x18
c0018026:	5b                   	pop    ebx
c0018027:	c3                   	ret    

c0018028 <CPU::detectFeatures()>:
c0018028:	55                   	push   ebp
c0018029:	57                   	push   edi
c001802a:	56                   	push   esi
c001802b:	53                   	push   ebx
c001802c:	83 ec 50             	sub    esp,0x50
c001802f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018033:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001803d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018044:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001804a:	6a 0d                	push   0xd
c001804c:	6a 00                	push   0x0
c001804e:	57                   	push   edi
c001804f:	e8 29 86 fe ff       	call   c000067d <memset>
c0018054:	83 c4 10             	add    esp,0x10
c0018057:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001805c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018063:	0f 84 20 09 00 00    	je     c0018989 <CPU::detectFeatures()+0x961>
c0018069:	83 ec 0c             	sub    esp,0xc
c001806c:	6a 10                	push   0x10
c001806e:	e8 f3 fb ff ff       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c0018073:	83 e0 01             	and    eax,0x1
c0018076:	8d 14 00             	lea    edx,[eax+eax*1]
c0018079:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001807f:	83 e0 fd             	and    eax,0xfffffffd
c0018082:	09 d0                	or     eax,edx
c0018084:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001808a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018091:	e8 d0 fb ff ff       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c0018096:	83 e0 01             	and    eax,0x1
c0018099:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00180a0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180a6:	83 e0 fb             	and    eax,0xfffffffb
c00180a9:	09 d0                	or     eax,edx
c00180ab:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180b1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00180b8:	e8 a9 fb ff ff       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c00180bd:	83 e0 01             	and    eax,0x1
c00180c0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00180c7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180cd:	83 e0 f7             	and    eax,0xfffffff7
c00180d0:	09 d0                	or     eax,edx
c00180d2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180d8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00180df:	e8 82 fb ff ff       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c00180e4:	83 e0 01             	and    eax,0x1
c00180e7:	c1 e0 04             	shl    eax,0x4
c00180ea:	88 c2                	mov    dl,al
c00180ec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180f2:	83 e0 ef             	and    eax,0xffffffef
c00180f5:	09 d0                	or     eax,edx
c00180f7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180fd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018104:	e8 5d fb ff ff       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c0018109:	83 e0 01             	and    eax,0x1
c001810c:	c1 e0 05             	shl    eax,0x5
c001810f:	88 c2                	mov    dl,al
c0018111:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018117:	83 e0 df             	and    eax,0xffffffdf
c001811a:	09 d0                	or     eax,edx
c001811c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018122:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018129:	e8 38 fb ff ff       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c001812e:	83 e0 01             	and    eax,0x1
c0018131:	8d 14 00             	lea    edx,[eax+eax*1]
c0018134:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001813a:	83 e0 fd             	and    eax,0xfffffffd
c001813d:	09 d0                	or     eax,edx
c001813f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018145:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001814c:	e8 15 fb ff ff       	call   c0017c66 <CPU::cpuidCheckEDX(unsigned int)>
c0018151:	83 e0 01             	and    eax,0x1
c0018154:	c1 e0 06             	shl    eax,0x6
c0018157:	88 c2                	mov    dl,al
c0018159:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001815f:	83 e0 bf             	and    eax,0xffffffbf
c0018162:	09 d0                	or     eax,edx
c0018164:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001816a:	58                   	pop    eax
c001816b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001816f:	56                   	push   esi
c0018170:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018174:	55                   	push   ebp
c0018175:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018179:	50                   	push   eax
c001817a:	8d 54 24 28          	lea    edx,[esp+0x28]
c001817e:	52                   	push   edx
c001817f:	6a 00                	push   0x0
c0018181:	e8 5c fa ff ff       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018186:	83 c4 1c             	add    esp,0x1c
c0018189:	6a 04                	push   0x4
c001818b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001818f:	50                   	push   eax
c0018190:	57                   	push   edi
c0018191:	e8 b1 84 fe ff       	call   c0000647 <memcpy>
c0018196:	83 c4 0c             	add    esp,0xc
c0018199:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001819f:	6a 04                	push   0x4
c00181a1:	56                   	push   esi
c00181a2:	50                   	push   eax
c00181a3:	e8 9f 84 fe ff       	call   c0000647 <memcpy>
c00181a8:	83 c4 0c             	add    esp,0xc
c00181ab:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00181b1:	6a 04                	push   0x4
c00181b3:	55                   	push   ebp
c00181b4:	50                   	push   eax
c00181b5:	e8 8d 84 fe ff       	call   c0000647 <memcpy>
c00181ba:	58                   	pop    eax
c00181bb:	5a                   	pop    edx
c00181bc:	68 71 84 02 c0       	push   0xc0028471
c00181c1:	57                   	push   edi
c00181c2:	e8 a6 85 fe ff       	call   c000076d <strcmp>
c00181c7:	83 c4 10             	add    esp,0x10
c00181ca:	85 c0                	test   eax,eax
c00181cc:	75 0f                	jne    c00181dd <CPU::detectFeatures()+0x1b5>
c00181ce:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00181d8:	e9 22 02 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c00181dd:	50                   	push   eax
c00181de:	50                   	push   eax
c00181df:	68 7e 84 02 c0       	push   0xc002847e
c00181e4:	57                   	push   edi
c00181e5:	e8 83 85 fe ff       	call   c000076d <strcmp>
c00181ea:	83 c4 10             	add    esp,0x10
c00181ed:	85 c0                	test   eax,eax
c00181ef:	74 dd                	je     c00181ce <CPU::detectFeatures()+0x1a6>
c00181f1:	51                   	push   ecx
c00181f2:	51                   	push   ecx
c00181f3:	68 8b 84 02 c0       	push   0xc002848b
c00181f8:	57                   	push   edi
c00181f9:	e8 6f 85 fe ff       	call   c000076d <strcmp>
c00181fe:	83 c4 10             	add    esp,0x10
c0018201:	85 c0                	test   eax,eax
c0018203:	74 2a                	je     c001822f <CPU::detectFeatures()+0x207>
c0018205:	52                   	push   edx
c0018206:	52                   	push   edx
c0018207:	68 98 84 02 c0       	push   0xc0028498
c001820c:	57                   	push   edi
c001820d:	e8 5b 85 fe ff       	call   c000076d <strcmp>
c0018212:	83 c4 10             	add    esp,0x10
c0018215:	85 c0                	test   eax,eax
c0018217:	74 16                	je     c001822f <CPU::detectFeatures()+0x207>
c0018219:	50                   	push   eax
c001821a:	50                   	push   eax
c001821b:	68 a5 84 02 c0       	push   0xc00284a5
c0018220:	57                   	push   edi
c0018221:	e8 47 85 fe ff       	call   c000076d <strcmp>
c0018226:	83 c4 10             	add    esp,0x10
c0018229:	85 c0                	test   eax,eax
c001822b:	74 48                	je     c0018275 <CPU::detectFeatures()+0x24d>
c001822d:	eb 0f                	jmp    c001823e <CPU::detectFeatures()+0x216>
c001822f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018239:	e9 c1 01 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c001823e:	50                   	push   eax
c001823f:	50                   	push   eax
c0018240:	68 b2 84 02 c0       	push   0xc00284b2
c0018245:	57                   	push   edi
c0018246:	e8 22 85 fe ff       	call   c000076d <strcmp>
c001824b:	83 c4 10             	add    esp,0x10
c001824e:	85 c0                	test   eax,eax
c0018250:	74 23                	je     c0018275 <CPU::detectFeatures()+0x24d>
c0018252:	50                   	push   eax
c0018253:	50                   	push   eax
c0018254:	68 bf 84 02 c0       	push   0xc00284bf
c0018259:	57                   	push   edi
c001825a:	e8 0e 85 fe ff       	call   c000076d <strcmp>
c001825f:	83 c4 10             	add    esp,0x10
c0018262:	85 c0                	test   eax,eax
c0018264:	75 1e                	jne    c0018284 <CPU::detectFeatures()+0x25c>
c0018266:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018270:	e9 8a 01 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c0018275:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001827f:	e9 7b 01 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c0018284:	50                   	push   eax
c0018285:	50                   	push   eax
c0018286:	68 cc 84 02 c0       	push   0xc00284cc
c001828b:	57                   	push   edi
c001828c:	e8 dc 84 fe ff       	call   c000076d <strcmp>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	85 c0                	test   eax,eax
c0018296:	75 0f                	jne    c00182a7 <CPU::detectFeatures()+0x27f>
c0018298:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00182a2:	e9 58 01 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c00182a7:	50                   	push   eax
c00182a8:	50                   	push   eax
c00182a9:	68 8b 84 02 c0       	push   0xc002848b
c00182ae:	57                   	push   edi
c00182af:	e8 b9 84 fe ff       	call   c000076d <strcmp>
c00182b4:	83 c4 10             	add    esp,0x10
c00182b7:	85 c0                	test   eax,eax
c00182b9:	75 0f                	jne    c00182ca <CPU::detectFeatures()+0x2a2>
c00182bb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00182c5:	e9 35 01 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c00182ca:	50                   	push   eax
c00182cb:	50                   	push   eax
c00182cc:	68 d9 84 02 c0       	push   0xc00284d9
c00182d1:	57                   	push   edi
c00182d2:	e8 96 84 fe ff       	call   c000076d <strcmp>
c00182d7:	83 c4 10             	add    esp,0x10
c00182da:	85 c0                	test   eax,eax
c00182dc:	75 0f                	jne    c00182ed <CPU::detectFeatures()+0x2c5>
c00182de:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00182e8:	e9 12 01 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c00182ed:	51                   	push   ecx
c00182ee:	51                   	push   ecx
c00182ef:	68 e6 84 02 c0       	push   0xc00284e6
c00182f4:	57                   	push   edi
c00182f5:	e8 73 84 fe ff       	call   c000076d <strcmp>
c00182fa:	83 c4 10             	add    esp,0x10
c00182fd:	85 c0                	test   eax,eax
c00182ff:	75 0f                	jne    c0018310 <CPU::detectFeatures()+0x2e8>
c0018301:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001830b:	e9 ef 00 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c0018310:	52                   	push   edx
c0018311:	52                   	push   edx
c0018312:	68 f3 84 02 c0       	push   0xc00284f3
c0018317:	57                   	push   edi
c0018318:	e8 50 84 fe ff       	call   c000076d <strcmp>
c001831d:	83 c4 10             	add    esp,0x10
c0018320:	85 c0                	test   eax,eax
c0018322:	75 0f                	jne    c0018333 <CPU::detectFeatures()+0x30b>
c0018324:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001832e:	e9 cc 00 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c0018333:	50                   	push   eax
c0018334:	50                   	push   eax
c0018335:	68 00 85 02 c0       	push   0xc0028500
c001833a:	57                   	push   edi
c001833b:	e8 2d 84 fe ff       	call   c000076d <strcmp>
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	85 c0                	test   eax,eax
c0018345:	75 0f                	jne    c0018356 <CPU::detectFeatures()+0x32e>
c0018347:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018351:	e9 a9 00 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c0018356:	50                   	push   eax
c0018357:	50                   	push   eax
c0018358:	68 0d 85 02 c0       	push   0xc002850d
c001835d:	57                   	push   edi
c001835e:	e8 0a 84 fe ff       	call   c000076d <strcmp>
c0018363:	83 c4 10             	add    esp,0x10
c0018366:	85 c0                	test   eax,eax
c0018368:	75 0f                	jne    c0018379 <CPU::detectFeatures()+0x351>
c001836a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018374:	e9 86 00 00 00       	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c0018379:	50                   	push   eax
c001837a:	50                   	push   eax
c001837b:	68 1a 85 02 c0       	push   0xc002851a
c0018380:	57                   	push   edi
c0018381:	e8 e7 83 fe ff       	call   c000076d <strcmp>
c0018386:	83 c4 10             	add    esp,0x10
c0018389:	85 c0                	test   eax,eax
c001838b:	75 0c                	jne    c0018399 <CPU::detectFeatures()+0x371>
c001838d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018397:	eb 66                	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c0018399:	50                   	push   eax
c001839a:	50                   	push   eax
c001839b:	68 27 85 02 c0       	push   0xc0028527
c00183a0:	57                   	push   edi
c00183a1:	e8 c7 83 fe ff       	call   c000076d <strcmp>
c00183a6:	83 c4 10             	add    esp,0x10
c00183a9:	85 c0                	test   eax,eax
c00183ab:	75 0c                	jne    c00183b9 <CPU::detectFeatures()+0x391>
c00183ad:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00183b7:	eb 46                	jmp    c00183ff <CPU::detectFeatures()+0x3d7>
c00183b9:	50                   	push   eax
c00183ba:	50                   	push   eax
c00183bb:	68 34 85 02 c0       	push   0xc0028534
c00183c0:	57                   	push   edi
c00183c1:	e8 a7 83 fe ff       	call   c000076d <strcmp>
c00183c6:	83 c4 10             	add    esp,0x10
c00183c9:	85 c0                	test   eax,eax
c00183cb:	74 e0                	je     c00183ad <CPU::detectFeatures()+0x385>
c00183cd:	50                   	push   eax
c00183ce:	50                   	push   eax
c00183cf:	68 41 85 02 c0       	push   0xc0028541
c00183d4:	57                   	push   edi
c00183d5:	e8 93 83 fe ff       	call   c000076d <strcmp>
c00183da:	83 c4 10             	add    esp,0x10
c00183dd:	85 c0                	test   eax,eax
c00183df:	74 cc                	je     c00183ad <CPU::detectFeatures()+0x385>
c00183e1:	51                   	push   ecx
c00183e2:	51                   	push   ecx
c00183e3:	68 4e 85 02 c0       	push   0xc002854e
c00183e8:	57                   	push   edi
c00183e9:	e8 7f 83 fe ff       	call   c000076d <strcmp>
c00183ee:	83 c4 10             	add    esp,0x10
c00183f1:	85 c0                	test   eax,eax
c00183f3:	74 b8                	je     c00183ad <CPU::detectFeatures()+0x385>
c00183f5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00183ff:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018404:	0f 86 be 00 00 00    	jbe    c00184c8 <CPU::detectFeatures()+0x4a0>
c001840a:	83 ec 0c             	sub    esp,0xc
c001840d:	68 80 00 00 00       	push   0x80
c0018412:	e8 ab f8 ff ff       	call   c0017cc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018417:	83 e0 01             	and    eax,0x1
c001841a:	c1 e0 06             	shl    eax,0x6
c001841d:	88 c2                	mov    dl,al
c001841f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018425:	83 e0 bf             	and    eax,0xffffffbf
c0018428:	09 d0                	or     eax,edx
c001842a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018430:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018437:	e8 86 f8 ff ff       	call   c0017cc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001843c:	83 e0 01             	and    eax,0x1
c001843f:	c1 e0 04             	shl    eax,0x4
c0018442:	88 c2                	mov    dl,al
c0018444:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001844a:	83 e0 ef             	and    eax,0xffffffef
c001844d:	09 d0                	or     eax,edx
c001844f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018455:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001845c:	e8 61 f8 ff ff       	call   c0017cc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018461:	c1 e0 07             	shl    eax,0x7
c0018464:	88 c2                	mov    dl,al
c0018466:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001846c:	83 e0 7f             	and    eax,0x7f
c001846f:	09 d0                	or     eax,edx
c0018471:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018477:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001847e:	e8 6d f8 ff ff       	call   c0017cf0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018483:	83 e0 01             	and    eax,0x1
c0018486:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001848d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018493:	83 e0 f7             	and    eax,0xfffffff7
c0018496:	09 d0                	or     eax,edx
c0018498:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001849e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00184a5:	e8 46 f8 ff ff       	call   c0017cf0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00184aa:	83 c4 10             	add    esp,0x10
c00184ad:	83 e0 01             	and    eax,0x1
c00184b0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00184b7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00184bd:	83 e0 fb             	and    eax,0xfffffffb
c00184c0:	09 d0                	or     eax,edx
c00184c2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00184c8:	83 ec 0c             	sub    esp,0xc
c00184cb:	56                   	push   esi
c00184cc:	55                   	push   ebp
c00184cd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00184d1:	57                   	push   edi
c00184d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00184d6:	50                   	push   eax
c00184d7:	6a 01                	push   0x1
c00184d9:	e8 04 f7 ff ff       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184de:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00184e2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00184e8:	88 ca                	mov    dl,cl
c00184ea:	83 e0 f0             	and    eax,0xfffffff0
c00184ed:	83 e2 0f             	and    edx,0xf
c00184f0:	09 d0                	or     eax,edx
c00184f2:	88 ca                	mov    dl,cl
c00184f4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00184fa:	c0 ea 04             	shr    dl,0x4
c00184fd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018501:	0f b6 c2             	movzx  eax,dl
c0018504:	83 c4 20             	add    esp,0x20
c0018507:	c1 e0 06             	shl    eax,0x6
c001850a:	89 c5                	mov    ebp,eax
c001850c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018512:	66 25 3f c0          	and    ax,0xc03f
c0018516:	09 e8                	or     eax,ebp
c0018518:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001851f:	89 c8                	mov    eax,ecx
c0018521:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018527:	c1 e8 08             	shr    eax,0x8
c001852a:	83 e2 3f             	and    edx,0x3f
c001852d:	83 e0 0f             	and    eax,0xf
c0018530:	89 c5                	mov    ebp,eax
c0018532:	c1 e5 06             	shl    ebp,0x6
c0018535:	09 d5                	or     ebp,edx
c0018537:	89 ea                	mov    edx,ebp
c0018539:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001853f:	88 c2                	mov    dl,al
c0018541:	c0 ea 02             	shr    dl,0x2
c0018544:	89 d5                	mov    ebp,edx
c0018546:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001854c:	83 e2 c0             	and    edx,0xffffffc0
c001854f:	09 d5                	or     ebp,edx
c0018551:	89 ea                	mov    edx,ebp
c0018553:	89 cd                	mov    ebp,ecx
c0018555:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001855b:	c1 ed 0c             	shr    ebp,0xc
c001855e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018564:	83 e5 03             	and    ebp,0x3
c0018567:	83 e2 cf             	and    edx,0xffffffcf
c001856a:	c1 e5 04             	shl    ebp,0x4
c001856d:	09 d5                	or     ebp,edx
c001856f:	3c 06                	cmp    al,0x6
c0018571:	89 ea                	mov    edx,ebp
c0018573:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018579:	74 04                	je     c001857f <CPU::detectFeatures()+0x557>
c001857b:	3c 0f                	cmp    al,0xf
c001857d:	75 5c                	jne    c00185db <CPU::detectFeatures()+0x5b3>
c001857f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018583:	89 cd                	mov    ebp,ecx
c0018585:	c1 ed 10             	shr    ebp,0x10
c0018588:	c1 e5 04             	shl    ebp,0x4
c001858b:	09 ea                	or     edx,ebp
c001858d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018593:	0f b6 d2             	movzx  edx,dl
c0018596:	66 81 e5 3f c0       	and    bp,0xc03f
c001859b:	c1 e2 06             	shl    edx,0x6
c001859e:	09 ea                	or     edx,ebp
c00185a0:	3c 0f                	cmp    al,0xf
c00185a2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00185a9:	75 30                	jne    c00185db <CPU::detectFeatures()+0x5b3>
c00185ab:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00185b1:	c1 e9 14             	shr    ecx,0x14
c00185b4:	83 e0 3f             	and    eax,0x3f
c00185b7:	83 c1 0f             	add    ecx,0xf
c00185ba:	88 ca                	mov    dl,cl
c00185bc:	c0 e9 02             	shr    cl,0x2
c00185bf:	c1 e2 06             	shl    edx,0x6
c00185c2:	09 d0                	or     eax,edx
c00185c4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00185ca:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00185d0:	83 e0 c0             	and    eax,0xffffffc0
c00185d3:	09 c1                	or     ecx,eax
c00185d5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00185db:	83 ec 0c             	sub    esp,0xc
c00185de:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00185e5:	56                   	push   esi
c00185e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00185ea:	50                   	push   eax
c00185eb:	57                   	push   edi
c00185ec:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00185f0:	55                   	push   ebp
c00185f1:	68 00 00 00 80       	push   0x80000000
c00185f6:	e8 e7 f5 ff ff       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00185fb:	83 c4 20             	add    esp,0x20
c00185fe:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018606:	8d 44 24 18          	lea    eax,[esp+0x18]
c001860a:	76 1e                	jbe    c001862a <CPU::detectFeatures()+0x602>
c001860c:	83 ec 0c             	sub    esp,0xc
c001860f:	56                   	push   esi
c0018610:	50                   	push   eax
c0018611:	57                   	push   edi
c0018612:	55                   	push   ebp
c0018613:	68 01 00 00 80       	push   0x80000001
c0018618:	e8 c5 f5 ff ff       	call   c0017be2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001861d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018627:	83 c4 20             	add    esp,0x20
c001862a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018630:	83 f8 01             	cmp    eax,0x1
c0018633:	75 6f                	jne    c00186a4 <CPU::detectFeatures()+0x67c>
c0018635:	51                   	push   ecx
c0018636:	51                   	push   ecx
c0018637:	68 5a 85 02 c0       	push   0xc002855a
c001863c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018640:	56                   	push   esi
c0018641:	e8 d6 80 fe ff       	call   c000071c <strcpy>
c0018646:	5f                   	pop    edi
c0018647:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001864d:	5d                   	pop    ebp
c001864e:	66 c1 e8 06          	shr    ax,0x6
c0018652:	0f b6 c0             	movzx  eax,al
c0018655:	50                   	push   eax
c0018656:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001865c:	c1 e8 0e             	shr    eax,0xe
c001865f:	0f b6 c0             	movzx  eax,al
c0018662:	50                   	push   eax
c0018663:	e8 24 f2 ff ff       	call   c001788c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018668:	5a                   	pop    edx
c0018669:	59                   	pop    ecx
c001866a:	50                   	push   eax
c001866b:	56                   	push   esi
c001866c:	e8 62 81 fe ff       	call   c00007d3 <strcat>
c0018671:	5f                   	pop    edi
c0018672:	5d                   	pop    ebp
c0018673:	56                   	push   esi
c0018674:	53                   	push   ebx
c0018675:	e8 9c b5 ff ff       	call   c0013c16 <Device::setName(char const*)>
c001867a:	58                   	pop    eax
c001867b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018681:	5a                   	pop    edx
c0018682:	68 61 85 02 c0       	push   0xc0028561
c0018687:	50                   	push   eax
c0018688:	e8 e0 80 fe ff       	call   c000076d <strcmp>
c001868d:	83 c4 10             	add    esp,0x10
c0018690:	85 c0                	test   eax,eax
c0018692:	0f 85 71 03 00 00    	jne    c0018a09 <CPU::detectFeatures()+0x9e1>
c0018698:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001869f:	e9 65 03 00 00       	jmp    c0018a09 <CPU::detectFeatures()+0x9e1>
c00186a4:	83 f8 02             	cmp    eax,0x2
c00186a7:	0f 85 b5 00 00 00    	jne    c0018762 <CPU::detectFeatures()+0x73a>
c00186ad:	57                   	push   edi
c00186ae:	57                   	push   edi
c00186af:	68 73 85 02 c0       	push   0xc0028573
c00186b4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00186b8:	56                   	push   esi
c00186b9:	e8 5e 80 fe ff       	call   c000071c <strcpy>
c00186be:	5d                   	pop    ebp
c00186bf:	58                   	pop    eax
c00186c0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00186c6:	66 c1 e8 06          	shr    ax,0x6
c00186ca:	0f b6 c0             	movzx  eax,al
c00186cd:	50                   	push   eax
c00186ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00186d4:	c1 e8 0e             	shr    eax,0xe
c00186d7:	0f b6 c0             	movzx  eax,al
c00186da:	50                   	push   eax
c00186db:	e8 18 f0 ff ff       	call   c00176f8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00186e0:	5a                   	pop    edx
c00186e1:	59                   	pop    ecx
c00186e2:	50                   	push   eax
c00186e3:	56                   	push   esi
c00186e4:	e8 ea 80 fe ff       	call   c00007d3 <strcat>
c00186e9:	5f                   	pop    edi
c00186ea:	5d                   	pop    ebp
c00186eb:	56                   	push   esi
c00186ec:	53                   	push   ebx
c00186ed:	e8 24 b5 ff ff       	call   c0013c16 <Device::setName(char const*)>
c00186f2:	58                   	pop    eax
c00186f3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00186f9:	5a                   	pop    edx
c00186fa:	68 78 85 02 c0       	push   0xc0028578
c00186ff:	50                   	push   eax
c0018700:	e8 68 80 fe ff       	call   c000076d <strcmp>
c0018705:	83 c4 10             	add    esp,0x10
c0018708:	85 c0                	test   eax,eax
c001870a:	75 20                	jne    c001872c <CPU::detectFeatures()+0x704>
c001870c:	8b 15 88 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa88
c0018712:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018718:	a8 01                	test   al,0x1
c001871a:	74 10                	je     c001872c <CPU::detectFeatures()+0x704>
c001871c:	83 e0 fe             	and    eax,0xfffffffe
c001871f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018725:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001872c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018732:	c1 e8 0e             	shr    eax,0xe
c0018735:	3c 05                	cmp    al,0x5
c0018737:	0f 85 cc 02 00 00    	jne    c0018a09 <CPU::detectFeatures()+0x9e1>
c001873d:	56                   	push   esi
c001873e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018744:	83 e0 0f             	and    eax,0xf
c0018747:	50                   	push   eax
c0018748:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001874e:	66 c1 e8 06          	shr    ax,0x6
c0018752:	0f b6 c0             	movzx  eax,al
c0018755:	50                   	push   eax
c0018756:	6a 05                	push   0x5
c0018758:	e8 11 f4 ff ff       	call   c0017b6e <CPU::AMD_K6_writeback(int, int, int)>
c001875d:	e9 1f 02 00 00       	jmp    c0018981 <CPU::detectFeatures()+0x959>
c0018762:	8d 50 fd             	lea    edx,[eax-0x3]
c0018765:	83 fa 01             	cmp    edx,0x1
c0018768:	76 09                	jbe    c0018773 <CPU::detectFeatures()+0x74b>
c001876a:	83 f8 06             	cmp    eax,0x6
c001876d:	0f 85 91 01 00 00    	jne    c0018904 <CPU::detectFeatures()+0x8dc>
c0018773:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018779:	c1 ea 0e             	shr    edx,0xe
c001877c:	80 fa 05             	cmp    dl,0x5
c001877f:	75 7b                	jne    c00187fc <CPU::detectFeatures()+0x7d4>
c0018781:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018787:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001878c:	66 81 fa 00 01       	cmp    dx,0x100
c0018791:	75 0c                	jne    c001879f <CPU::detectFeatures()+0x777>
c0018793:	51                   	push   ecx
c0018794:	51                   	push   ecx
c0018795:	68 7f 85 02 c0       	push   0xc002857f
c001879a:	e9 dc 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c001879f:	66 81 fa 00 02       	cmp    dx,0x200
c00187a4:	75 0c                	jne    c00187b2 <CPU::detectFeatures()+0x78a>
c00187a6:	52                   	push   edx
c00187a7:	52                   	push   edx
c00187a8:	68 92 85 02 c0       	push   0xc0028592
c00187ad:	e9 c9 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c00187b2:	66 81 fa 40 02       	cmp    dx,0x240
c00187b7:	75 0c                	jne    c00187c5 <CPU::detectFeatures()+0x79d>
c00187b9:	50                   	push   eax
c00187ba:	50                   	push   eax
c00187bb:	68 a4 85 02 c0       	push   0xc00285a4
c00187c0:	e9 b6 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c00187c5:	83 f8 06             	cmp    eax,0x6
c00187c8:	75 0c                	jne    c00187d6 <CPU::detectFeatures()+0x7ae>
c00187ca:	50                   	push   eax
c00187cb:	50                   	push   eax
c00187cc:	68 b6 85 02 c0       	push   0xc00285b6
c00187d1:	e9 a5 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c00187d6:	83 f8 04             	cmp    eax,0x4
c00187d9:	75 0c                	jne    c00187e7 <CPU::detectFeatures()+0x7bf>
c00187db:	50                   	push   eax
c00187dc:	50                   	push   eax
c00187dd:	68 c2 85 02 c0       	push   0xc00285c2
c00187e2:	e9 94 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c00187e7:	83 f8 03             	cmp    eax,0x3
c00187ea:	0f 85 19 02 00 00    	jne    c0018a09 <CPU::detectFeatures()+0x9e1>
c00187f0:	50                   	push   eax
c00187f1:	50                   	push   eax
c00187f2:	68 ca 85 02 c0       	push   0xc00285ca
c00187f7:	e9 7f 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c00187fc:	80 fa 06             	cmp    dl,0x6
c00187ff:	0f 85 db 00 00 00    	jne    c00188e0 <CPU::detectFeatures()+0x8b8>
c0018805:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001880b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018810:	66 81 fa 80 01       	cmp    dx,0x180
c0018815:	75 0c                	jne    c0018823 <CPU::detectFeatures()+0x7fb>
c0018817:	50                   	push   eax
c0018818:	50                   	push   eax
c0018819:	68 d5 85 02 c0       	push   0xc00285d5
c001881e:	e9 58 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c0018823:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018829:	66 f7 c1 80 ff       	test   cx,0xff80
c001882e:	75 0c                	jne    c001883c <CPU::detectFeatures()+0x814>
c0018830:	50                   	push   eax
c0018831:	50                   	push   eax
c0018832:	68 e5 85 02 c0       	push   0xc00285e5
c0018837:	e9 3f 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c001883c:	66 81 fa 40 02       	cmp    dx,0x240
c0018841:	75 0c                	jne    c001884f <CPU::detectFeatures()+0x827>
c0018843:	55                   	push   ebp
c0018844:	55                   	push   ebp
c0018845:	68 ec 85 02 c0       	push   0xc00285ec
c001884a:	e9 2c 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c001884f:	66 81 fa 80 02       	cmp    dx,0x280
c0018854:	75 0c                	jne    c0018862 <CPU::detectFeatures()+0x83a>
c0018856:	57                   	push   edi
c0018857:	57                   	push   edi
c0018858:	68 f5 85 02 c0       	push   0xc00285f5
c001885d:	e9 19 01 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c0018862:	66 81 fa 40 03       	cmp    dx,0x340
c0018867:	74 ed                	je     c0018856 <CPU::detectFeatures()+0x82e>
c0018869:	66 81 fa c0 03       	cmp    dx,0x3c0
c001886e:	75 0c                	jne    c001887c <CPU::detectFeatures()+0x854>
c0018870:	56                   	push   esi
c0018871:	56                   	push   esi
c0018872:	68 fc 85 02 c0       	push   0xc00285fc
c0018877:	e9 ff 00 00 00       	jmp    c001897b <CPU::detectFeatures()+0x953>
c001887c:	83 f8 06             	cmp    eax,0x6
c001887f:	0f 84 45 ff ff ff    	je     c00187ca <CPU::detectFeatures()+0x7a2>
c0018885:	83 f8 04             	cmp    eax,0x4
c0018888:	0f 84 4d ff ff ff    	je     c00187db <CPU::detectFeatures()+0x7b3>
c001888e:	83 f8 03             	cmp    eax,0x3
c0018891:	0f 85 72 01 00 00    	jne    c0018a09 <CPU::detectFeatures()+0x9e1>
c0018897:	51                   	push   ecx
c0018898:	51                   	push   ecx
c0018899:	68 05 86 02 c0       	push   0xc0028605
c001889e:	53                   	push   ebx
c001889f:	e8 72 b3 ff ff       	call   c0013c16 <Device::setName(char const*)>
c00188a4:	b1 c1                	mov    cl,0xc1
c00188a6:	88 c8                	mov    al,cl
c00188a8:	e6 22                	out    0x22,al
c00188aa:	e4 23                	in     al,0x23
c00188ac:	88 c2                	mov    dl,al
c00188ae:	88 c8                	mov    al,cl
c00188b0:	e6 22                	out    0x22,al
c00188b2:	88 d0                	mov    al,dl
c00188b4:	83 c8 10             	or     eax,0x10
c00188b7:	e6 23                	out    0x23,al
c00188b9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00188c0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00188c3:	89 d0                	mov    eax,edx
c00188c5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00188cb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00188cf:	40                   	inc    eax
c00188d0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00188d6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00188db:	e9 a1 00 00 00       	jmp    c0018981 <CPU::detectFeatures()+0x959>
c00188e0:	83 f8 06             	cmp    eax,0x6
c00188e3:	0f 84 e1 fe ff ff    	je     c00187ca <CPU::detectFeatures()+0x7a2>
c00188e9:	83 f8 04             	cmp    eax,0x4
c00188ec:	0f 84 e9 fe ff ff    	je     c00187db <CPU::detectFeatures()+0x7b3>
c00188f2:	83 f8 03             	cmp    eax,0x3
c00188f5:	0f 85 0e 01 00 00    	jne    c0018a09 <CPU::detectFeatures()+0x9e1>
c00188fb:	52                   	push   edx
c00188fc:	52                   	push   edx
c00188fd:	68 10 86 02 c0       	push   0xc0028610
c0018902:	eb 77                	jmp    c001897b <CPU::detectFeatures()+0x953>
c0018904:	83 f8 07             	cmp    eax,0x7
c0018907:	75 09                	jne    c0018912 <CPU::detectFeatures()+0x8ea>
c0018909:	50                   	push   eax
c001890a:	50                   	push   eax
c001890b:	68 1a 86 02 c0       	push   0xc002861a
c0018910:	eb 69                	jmp    c001897b <CPU::detectFeatures()+0x953>
c0018912:	83 f8 0a             	cmp    eax,0xa
c0018915:	75 09                	jne    c0018920 <CPU::detectFeatures()+0x8f8>
c0018917:	50                   	push   eax
c0018918:	50                   	push   eax
c0018919:	68 25 86 02 c0       	push   0xc0028625
c001891e:	eb 5b                	jmp    c001897b <CPU::detectFeatures()+0x953>
c0018920:	83 f8 0b             	cmp    eax,0xb
c0018923:	75 09                	jne    c001892e <CPU::detectFeatures()+0x906>
c0018925:	50                   	push   eax
c0018926:	50                   	push   eax
c0018927:	68 2d 86 02 c0       	push   0xc002862d
c001892c:	eb 4d                	jmp    c001897b <CPU::detectFeatures()+0x953>
c001892e:	83 f8 08             	cmp    eax,0x8
c0018931:	75 09                	jne    c001893c <CPU::detectFeatures()+0x914>
c0018933:	50                   	push   eax
c0018934:	50                   	push   eax
c0018935:	68 36 86 02 c0       	push   0xc0028636
c001893a:	eb 3f                	jmp    c001897b <CPU::detectFeatures()+0x953>
c001893c:	83 f8 09             	cmp    eax,0x9
c001893f:	75 09                	jne    c001894a <CPU::detectFeatures()+0x922>
c0018941:	50                   	push   eax
c0018942:	50                   	push   eax
c0018943:	68 3e 86 02 c0       	push   0xc002863e
c0018948:	eb 31                	jmp    c001897b <CPU::detectFeatures()+0x953>
c001894a:	83 f8 05             	cmp    eax,0x5
c001894d:	75 09                	jne    c0018958 <CPU::detectFeatures()+0x930>
c001894f:	50                   	push   eax
c0018950:	50                   	push   eax
c0018951:	68 46 86 02 c0       	push   0xc0028646
c0018956:	eb 23                	jmp    c001897b <CPU::detectFeatures()+0x953>
c0018958:	83 f8 0c             	cmp    eax,0xc
c001895b:	75 09                	jne    c0018966 <CPU::detectFeatures()+0x93e>
c001895d:	55                   	push   ebp
c001895e:	55                   	push   ebp
c001895f:	68 54 86 02 c0       	push   0xc0028654
c0018964:	eb 15                	jmp    c001897b <CPU::detectFeatures()+0x953>
c0018966:	83 f8 0d             	cmp    eax,0xd
c0018969:	75 09                	jne    c0018974 <CPU::detectFeatures()+0x94c>
c001896b:	57                   	push   edi
c001896c:	57                   	push   edi
c001896d:	68 5f 86 02 c0       	push   0xc002865f
c0018972:	eb 07                	jmp    c001897b <CPU::detectFeatures()+0x953>
c0018974:	56                   	push   esi
c0018975:	56                   	push   esi
c0018976:	68 73 86 02 c0       	push   0xc0028673
c001897b:	53                   	push   ebx
c001897c:	e8 95 b2 ff ff       	call   c0013c16 <Device::setName(char const*)>
c0018981:	83 c4 10             	add    esp,0x10
c0018984:	e9 80 00 00 00       	jmp    c0018a09 <CPU::detectFeatures()+0x9e1>
c0018989:	51                   	push   ecx
c001898a:	51                   	push   ecx
c001898b:	68 bf 84 02 c0       	push   0xc00284bf
c0018990:	57                   	push   edi
c0018991:	e8 86 7d fe ff       	call   c000071c <strcpy>
c0018996:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00189a0:	e8 be 78 fe ff       	call   c0000263 <is486>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	85 c0                	test   eax,eax
c00189aa:	74 2b                	je     c00189d7 <CPU::detectFeatures()+0x9af>
c00189ac:	52                   	push   edx
c00189ad:	52                   	push   edx
c00189ae:	68 7f 86 02 c0       	push   0xc002867f
c00189b3:	53                   	push   ebx
c00189b4:	e8 5d b2 ff ff       	call   c0013c16 <Device::setName(char const*)>
c00189b9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00189c0:	0f 20 c0             	mov    eax,cr0
c00189c3:	83 e0 14             	and    eax,0x14
c00189c6:	83 c4 10             	add    esp,0x10
c00189c9:	83 f8 04             	cmp    eax,0x4
c00189cc:	75 1f                	jne    c00189ed <CPU::detectFeatures()+0x9c5>
c00189ce:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00189d5:	eb 32                	jmp    c0018a09 <CPU::detectFeatures()+0x9e1>
c00189d7:	50                   	push   eax
c00189d8:	50                   	push   eax
c00189d9:	68 8a 86 02 c0       	push   0xc002868a
c00189de:	53                   	push   ebx
c00189df:	e8 32 b2 ff ff       	call   c0013c16 <Device::setName(char const*)>
c00189e4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00189eb:	eb d3                	jmp    c00189c0 <CPU::detectFeatures()+0x998>
c00189ed:	e8 4c 78 fe ff       	call   c000023e <hasLegacyFPU>
c00189f2:	83 e0 01             	and    eax,0x1
c00189f5:	8d 14 00             	lea    edx,[eax+eax*1]
c00189f8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00189fe:	83 e0 fd             	and    eax,0xfffffffd
c0018a01:	09 d0                	or     eax,edx
c0018a03:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a09:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018a10:	83 c4 4c             	add    esp,0x4c
c0018a13:	5b                   	pop    ebx
c0018a14:	5e                   	pop    esi
c0018a15:	5f                   	pop    edi
c0018a16:	5d                   	pop    ebp
c0018a17:	c3                   	ret    

c0018a18 <CPU::setupSMEP()>:
c0018a18:	0f 20 e0             	mov    eax,cr4
c0018a1b:	0d 00 00 10 00       	or     eax,0x100000
c0018a20:	0f 22 e0             	mov    cr4,eax
c0018a23:	c3                   	ret    

c0018a24 <CPU::setupUMIP()>:
c0018a24:	0f 20 e0             	mov    eax,cr4
c0018a27:	80 cc 08             	or     ah,0x8
c0018a2a:	0f 22 e0             	mov    cr4,eax
c0018a2d:	c3                   	ret    

c0018a2e <CPU::setupTSC()>:
c0018a2e:	0f 20 e0             	mov    eax,cr4
c0018a31:	83 c8 04             	or     eax,0x4
c0018a34:	0f 22 e0             	mov    cr4,eax
c0018a37:	c3                   	ret    

c0018a38 <CPU::setupLargePages()>:
c0018a38:	0f 20 e0             	mov    eax,cr4
c0018a3b:	83 c8 10             	or     eax,0x10
c0018a3e:	0f 22 e0             	mov    cr4,eax
c0018a41:	c3                   	ret    

c0018a42 <CPU::setupPAT()>:
c0018a42:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0018a47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018a4e:	74 2c                	je     c0018a7c <CPU::setupPAT()+0x3a>
c0018a50:	53                   	push   ebx
c0018a51:	83 ec 10             	sub    esp,0x10
c0018a54:	68 77 02 00 00       	push   0x277
c0018a59:	50                   	push   eax
c0018a5a:	e8 1b 60 ff ff       	call   c000ea7a <Computer::rdmsr(unsigned int)>
c0018a5f:	83 e2 f8             	and    edx,0xfffffff8
c0018a62:	83 ca 01             	or     edx,0x1
c0018a65:	52                   	push   edx
c0018a66:	50                   	push   eax
c0018a67:	68 77 02 00 00       	push   0x277
c0018a6c:	ff 35 88 aa 02 c0    	push   DWORD PTR ds:0xc002aa88
c0018a72:	e8 2f 60 ff ff       	call   c000eaa6 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018a77:	83 c4 28             	add    esp,0x28
c0018a7a:	5b                   	pop    ebx
c0018a7b:	c3                   	ret    
c0018a7c:	c3                   	ret    
c0018a7d:	90                   	nop

c0018a7e <CPU::setupMTRR()>:
c0018a7e:	c3                   	ret    
c0018a7f:	90                   	nop

c0018a80 <CPU::setupGlobalPages()>:
c0018a80:	0f 20 e0             	mov    eax,cr4
c0018a83:	0c 80                	or     al,0x80
c0018a85:	0f 22 e0             	mov    cr4,eax
c0018a88:	c3                   	ret    
c0018a89:	90                   	nop

c0018a8a <CPU::allowUsermodeDataAccess()>:
c0018a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a8e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018a95:	74 03                	je     c0018a9a <CPU::allowUsermodeDataAccess()+0x10>
c0018a97:	0f 01 cb             	stac   
c0018a9a:	c3                   	ret    
c0018a9b:	90                   	nop

c0018a9c <CPU::prohibitUsermodeDataAccess()>:
c0018a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018aa0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018aa7:	74 03                	je     c0018aac <CPU::prohibitUsermodeDataAccess()+0x10>
c0018aa9:	0f 01 ca             	clac   
c0018aac:	c3                   	ret    
c0018aad:	90                   	nop

c0018aae <CPU::setupSMAP()>:
c0018aae:	0f 20 e0             	mov    eax,cr4
c0018ab1:	0d 00 00 20 00       	or     eax,0x200000
c0018ab6:	0f 22 e0             	mov    cr4,eax
c0018ab9:	eb e1                	jmp    c0018a9c <CPU::prohibitUsermodeDataAccess()>
c0018abb:	90                   	nop

c0018abc <CPU::setupFeatures()>:
c0018abc:	83 ec 0c             	sub    esp,0xc
c0018abf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ac3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018aca:	74 07                	je     c0018ad3 <CPU::setupFeatures()+0x17>
c0018acc:	52                   	push   edx
c0018acd:	e8 46 ff ff ff       	call   c0018a18 <CPU::setupSMEP()>
c0018ad2:	58                   	pop    eax
c0018ad3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018ada:	74 07                	je     c0018ae3 <CPU::setupFeatures()+0x27>
c0018adc:	52                   	push   edx
c0018add:	e8 cc ff ff ff       	call   c0018aae <CPU::setupSMAP()>
c0018ae2:	58                   	pop    eax
c0018ae3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018aea:	74 07                	je     c0018af3 <CPU::setupFeatures()+0x37>
c0018aec:	52                   	push   edx
c0018aed:	e8 32 ff ff ff       	call   c0018a24 <CPU::setupUMIP()>
c0018af2:	58                   	pop    eax
c0018af3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018afa:	74 07                	je     c0018b03 <CPU::setupFeatures()+0x47>
c0018afc:	52                   	push   edx
c0018afd:	e8 2c ff ff ff       	call   c0018a2e <CPU::setupTSC()>
c0018b02:	58                   	pop    eax
c0018b03:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018b0a:	74 07                	je     c0018b13 <CPU::setupFeatures()+0x57>
c0018b0c:	52                   	push   edx
c0018b0d:	e8 26 ff ff ff       	call   c0018a38 <CPU::setupLargePages()>
c0018b12:	59                   	pop    ecx
c0018b13:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018b1a:	74 07                	je     c0018b23 <CPU::setupFeatures()+0x67>
c0018b1c:	52                   	push   edx
c0018b1d:	e8 5e ff ff ff       	call   c0018a80 <CPU::setupGlobalPages()>
c0018b22:	58                   	pop    eax
c0018b23:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018b2a:	74 0c                	je     c0018b38 <CPU::setupFeatures()+0x7c>
c0018b2c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018b30:	83 c4 0c             	add    esp,0xc
c0018b33:	e9 0a ff ff ff       	jmp    c0018a42 <CPU::setupPAT()>
c0018b38:	83 c4 0c             	add    esp,0xc
c0018b3b:	c3                   	ret    

c0018b3c <CPU::open(int, int, void*)>:
c0018b3c:	57                   	push   edi
c0018b3d:	56                   	push   esi
c0018b3e:	53                   	push   ebx
c0018b3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018b47:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018b4d:	83 ec 0c             	sub    esp,0xc
c0018b50:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018b56:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018b5c:	50                   	push   eax
c0018b5d:	e8 04 62 ff ff       	call   c000ed66 <GDT::setup()>
c0018b62:	83 c4 0c             	add    esp,0xc
c0018b65:	6a 00                	push   0x0
c0018b67:	68 ef be ad de       	push   0xdeadbeef
c0018b6c:	57                   	push   edi
c0018b6d:	e8 54 84 ff ff       	call   c0010fc6 <TSS::setup(unsigned long, unsigned long)>
c0018b72:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018b75:	e8 2c 84 ff ff       	call   c0010fa6 <TSS::flush()>
c0018b7a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018b80:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b83:	e8 3a 64 ff ff       	call   c000efc2 <IDT::setup()>
c0018b88:	b8 00 04 00 00       	mov    eax,0x400
c0018b8d:	0f 23 f8             	mov    db7,eax
c0018b90:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018b9a:	e8 dd 6e ff ff       	call   c000fa7c <Phys::allocatePage()>
c0018b9f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018ba5:	89 30                	mov    DWORD PTR [eax],esi
c0018ba7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018bad:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018bb0:	58                   	pop    eax
c0018bb1:	5a                   	pop    edx
c0018bb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018bb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018bbc:	e8 37 94 ff ff       	call   c0011ff8 <VAS::setCPUSpecific(unsigned long)>
c0018bc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bc4:	e8 5f f4 ff ff       	call   c0018028 <CPU::detectFeatures()>
c0018bc9:	e8 2c c3 ff ff       	call   c0014efa <setupInterruptController()>
c0018bce:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018bd4:	a1 a0 aa 02 c0       	mov    eax,ds:0xc002aaa0
c0018bd9:	83 e0 10             	and    eax,0x10
c0018bdc:	83 f8 01             	cmp    eax,0x1
c0018bdf:	19 c0                	sbb    eax,eax
c0018be1:	83 e0 46             	and    eax,0x46
c0018be4:	83 c0 1e             	add    eax,0x1e
c0018be7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bea:	e8 c5 d6 ff ff       	call   c00162b4 <setupTimer(int)>
c0018bef:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018bf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018bf8:	e8 bf fe ff ff       	call   c0018abc <CPU::setupFeatures()>
c0018bfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c00:	e8 a7 f1 ff ff       	call   c0017dac <CPU::displayFeatures()>
c0018c05:	83 c4 10             	add    esp,0x10
c0018c08:	31 c0                	xor    eax,eax
c0018c0a:	5b                   	pop    ebx
c0018c0b:	5e                   	pop    esi
c0018c0c:	5f                   	pop    edi
c0018c0d:	c3                   	ret    

c0018c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018c0e:	57                   	push   edi
c0018c0f:	56                   	push   esi
c0018c10:	53                   	push   ebx
c0018c11:	51                   	push   ecx
c0018c12:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018c16:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018c19:	0f 02 c0             	lar    eax,ax
c0018c1c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018c1f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018c23:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018c26:	88 ca                	mov    dl,cl
c0018c28:	c0 ea 06             	shr    dl,0x6
c0018c2b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018c2f:	89 ca                	mov    edx,ecx
c0018c31:	66 c1 ea 03          	shr    dx,0x3
c0018c35:	83 e2 07             	and    edx,0x7
c0018c38:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018c3d:	88 17                	mov    BYTE PTR [edi],dl
c0018c3f:	0f 84 a6 01 00 00    	je     c0018deb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018c45:	83 e1 07             	and    ecx,0x7
c0018c48:	80 f9 04             	cmp    cl,0x4
c0018c4b:	0f 84 98 00 00 00    	je     c0018ce9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018c51:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018c56:	0f 95 c0             	setne  al
c0018c59:	80 f9 05             	cmp    cl,0x5
c0018c5c:	0f 95 c2             	setne  dl
c0018c5f:	08 c2                	or     dl,al
c0018c61:	74 79                	je     c0018cdc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018c63:	84 c9                	test   cl,cl
c0018c65:	75 05                	jne    c0018c6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018c67:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018c6a:	eb 3c                	jmp    c0018ca8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c6c:	80 f9 01             	cmp    cl,0x1
c0018c6f:	75 05                	jne    c0018c76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018c71:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018c74:	eb 32                	jmp    c0018ca8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c76:	80 f9 02             	cmp    cl,0x2
c0018c79:	75 05                	jne    c0018c80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018c7b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018c7e:	eb 28                	jmp    c0018ca8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c80:	31 c0                	xor    eax,eax
c0018c82:	80 f9 03             	cmp    cl,0x3
c0018c85:	75 05                	jne    c0018c8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018c87:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018c8a:	eb 1c                	jmp    c0018ca8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c8c:	80 f9 05             	cmp    cl,0x5
c0018c8f:	75 05                	jne    c0018c96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018c91:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018c94:	eb 12                	jmp    c0018ca8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018c96:	80 f9 06             	cmp    cl,0x6
c0018c99:	75 05                	jne    c0018ca0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018c9b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018c9e:	eb 08                	jmp    c0018ca8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018ca0:	80 f9 07             	cmp    cl,0x7
c0018ca3:	75 03                	jne    c0018ca8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018ca5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018ca8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018cad:	75 10                	jne    c0018cbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018caf:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0018cb3:	b9 03 00 00 00       	mov    ecx,0x3
c0018cb8:	01 d0                	add    eax,edx
c0018cba:	e9 37 01 00 00       	jmp    c0018df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018cbf:	b9 02 00 00 00       	mov    ecx,0x2
c0018cc4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0018cc9:	0f 85 27 01 00 00    	jne    c0018df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018ccf:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0018cd2:	b9 06 00 00 00       	mov    ecx,0x6
c0018cd7:	e9 1a 01 00 00       	jmp    c0018df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018cdc:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0018cdf:	b9 06 00 00 00       	mov    ecx,0x6
c0018ce4:	e9 0f 01 00 00       	jmp    c0018df8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018ce9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0018cec:	88 ca                	mov    dl,cl
c0018cee:	c0 ea 06             	shr    dl,0x6
c0018cf1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0018cf5:	89 ca                	mov    edx,ecx
c0018cf7:	66 c1 ea 03          	shr    dx,0x3
c0018cfb:	83 e2 07             	and    edx,0x7
c0018cfe:	80 e1 07             	and    cl,0x7
c0018d01:	75 05                	jne    c0018d08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0018d03:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0018d06:	eb 4c                	jmp    c0018d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d08:	80 f9 01             	cmp    cl,0x1
c0018d0b:	75 05                	jne    c0018d12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0018d0d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0018d10:	eb 42                	jmp    c0018d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d12:	80 f9 02             	cmp    cl,0x2
c0018d15:	75 05                	jne    c0018d1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0018d17:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0018d1a:	eb 38                	jmp    c0018d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d1c:	80 f9 03             	cmp    cl,0x3
c0018d1f:	75 05                	jne    c0018d26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0018d21:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0018d24:	eb 2e                	jmp    c0018d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d26:	80 f9 04             	cmp    cl,0x4
c0018d29:	75 12                	jne    c0018d3d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0018d2b:	f6 c4 60             	test   ah,0x60
c0018d2e:	75 08                	jne    c0018d38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0018d30:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0018d33:	8d 78 14             	lea    edi,[eax+0x14]
c0018d36:	eb 1c                	jmp    c0018d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d38:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018d3b:	eb 17                	jmp    c0018d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d3d:	80 f9 05             	cmp    cl,0x5
c0018d40:	75 05                	jne    c0018d47 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0018d42:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0018d45:	eb 0d                	jmp    c0018d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d47:	80 f9 06             	cmp    cl,0x6
c0018d4a:	75 05                	jne    c0018d51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018d4c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018d4f:	eb 03                	jmp    c0018d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018d51:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018d54:	84 d2                	test   dl,dl
c0018d56:	75 05                	jne    c0018d5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018d58:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018d5b:	eb 3c                	jmp    c0018d99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d5d:	80 fa 01             	cmp    dl,0x1
c0018d60:	75 05                	jne    c0018d67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018d62:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018d65:	eb 32                	jmp    c0018d99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d67:	80 fa 02             	cmp    dl,0x2
c0018d6a:	75 05                	jne    c0018d71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018d6c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018d6f:	eb 28                	jmp    c0018d99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d71:	80 fa 03             	cmp    dl,0x3
c0018d74:	75 05                	jne    c0018d7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018d76:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018d79:	eb 1e                	jmp    c0018d99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d7b:	31 c0                	xor    eax,eax
c0018d7d:	80 fa 04             	cmp    dl,0x4
c0018d80:	74 17                	je     c0018d99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d82:	80 fa 05             	cmp    dl,0x5
c0018d85:	75 05                	jne    c0018d8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018d87:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018d8a:	eb 0d                	jmp    c0018d99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d8c:	80 fa 06             	cmp    dl,0x6
c0018d8f:	75 05                	jne    c0018d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018d91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018d94:	eb 03                	jmp    c0018d99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018d96:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018d99:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018d9e:	0f 94 c2             	sete   dl
c0018da1:	80 f9 05             	cmp    cl,0x5
c0018da4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018da8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018dad:	d3 e0                	shl    eax,cl
c0018daf:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0018db3:	74 0a                	je     c0018dbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0018db5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018db8:	b9 07 00 00 00       	mov    ecx,0x7
c0018dbd:	eb 37                	jmp    c0018df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018dbf:	01 f8                	add    eax,edi
c0018dc1:	b9 03 00 00 00       	mov    ecx,0x3
c0018dc6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018dcb:	74 2b                	je     c0018df8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018dcd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018dd2:	75 0d                	jne    c0018de1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0018dd4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0018dd8:	01 c8                	add    eax,ecx
c0018dda:	b9 04 00 00 00       	mov    ecx,0x4
c0018ddf:	eb 17                	jmp    c0018df8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018de1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018de4:	b9 07 00 00 00       	mov    ecx,0x7
c0018de9:	eb 0d                	jmp    c0018df8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018deb:	b9 02 00 00 00       	mov    ecx,0x2
c0018df0:	b2 01                	mov    dl,0x1
c0018df2:	31 c0                	xor    eax,eax
c0018df4:	eb 02                	jmp    c0018df8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018df6:	31 d2                	xor    edx,edx
c0018df8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018dfc:	89 0b                	mov    DWORD PTR [ebx],ecx
c0018dfe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018e02:	88 11                	mov    BYTE PTR [ecx],dl
c0018e04:	5a                   	pop    edx
c0018e05:	5b                   	pop    ebx
c0018e06:	5e                   	pop    esi
c0018e07:	5f                   	pop    edi
c0018e08:	c3                   	ret    

c0018e09 <Krnl::panic(char const*)>:
c0018e09:	55                   	push   ebp
c0018e0a:	89 e5                	mov    ebp,esp
c0018e0c:	53                   	push   ebx
c0018e0d:	50                   	push   eax
c0018e0e:	a1 90 b5 02 c0       	mov    eax,ds:0xc002b590
c0018e13:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0018e16:	85 c0                	test   eax,eax
c0018e18:	74 02                	je     c0018e1c <Krnl::panic(char const*)+0x13>
c0018e1a:	ff d0                	call   eax
c0018e1c:	fa                   	cli    
c0018e1d:	c6 05 94 b5 02 c0 01 	mov    BYTE PTR ds:0xc002b594,0x1
c0018e24:	83 ec 08             	sub    esp,0x8
c0018e27:	c6 05 40 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a40,0x0
c0018e2e:	53                   	push   ebx
c0018e2f:	68 c4 86 02 c0       	push   0xc00286c4
c0018e34:	e8 0c 98 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0018e39:	58                   	pop    eax
c0018e3a:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018e3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e45:	e8 bd 79 ff ff       	call   c0010807 <setActiveTerminal(VgaText*)>
c0018e4a:	83 c4 0c             	add    esp,0xc
c0018e4d:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018e52:	6a 01                	push   0x1
c0018e54:	6a 0f                	push   0xf
c0018e56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e5c:	e8 e5 73 ff ff       	call   c0010246 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018e61:	5a                   	pop    edx
c0018e62:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018e67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e6d:	e8 36 7c ff ff       	call   c0010aa8 <VgaText::clearScreen()>
c0018e72:	59                   	pop    ecx
c0018e73:	58                   	pop    eax
c0018e74:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018e79:	68 dd 86 02 c0       	push   0xc00286dd
c0018e7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e84:	e8 9d 7d ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018e89:	58                   	pop    eax
c0018e8a:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018e8f:	5a                   	pop    edx
c0018e90:	68 84 87 02 c0       	push   0xc0028784
c0018e95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018e9b:	e8 86 7d ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018ea0:	59                   	pop    ecx
c0018ea1:	58                   	pop    eax
c0018ea2:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018ea7:	68 f9 86 02 c0       	push   0xc00286f9
c0018eac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018eb2:	e8 6f 7d ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018eb7:	58                   	pop    eax
c0018eb8:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018ebd:	5a                   	pop    edx
c0018ebe:	53                   	push   ebx
c0018ebf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ec5:	e8 5c 7d ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018eca:	59                   	pop    ecx
c0018ecb:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018ed0:	5b                   	pop    ebx
c0018ed1:	68 19 87 02 c0       	push   0xc0028719
c0018ed6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018edc:	e8 45 7d ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018ee1:	58                   	pop    eax
c0018ee2:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018ee7:	5a                   	pop    edx
c0018ee8:	68 c0 87 02 c0       	push   0xc00287c0
c0018eed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ef3:	e8 2e 7d ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018ef8:	59                   	pop    ecx
c0018ef9:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018efe:	5b                   	pop    ebx
c0018eff:	68 f9 86 02 c0       	push   0xc00286f9
c0018f04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f0a:	e8 17 7d ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018f0f:	58                   	pop    eax
c0018f10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f15:	5a                   	pop    edx
c0018f16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018f19:	83 c0 0c             	add    eax,0xc
c0018f1c:	50                   	push   eax
c0018f1d:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018f22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f28:	e8 f9 7c ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018f2d:	59                   	pop    ecx
c0018f2e:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018f33:	5b                   	pop    ebx
c0018f34:	68 18 87 02 c0       	push   0xc0028718
c0018f39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f3f:	e8 e2 7c ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018f44:	58                   	pop    eax
c0018f45:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018f4a:	5a                   	pop    edx
c0018f4b:	68 ec 87 02 c0       	push   0xc00287ec
c0018f50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f56:	e8 cb 7c ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018f5b:	59                   	pop    ecx
c0018f5c:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018f61:	5b                   	pop    ebx
c0018f62:	68 2c 88 02 c0       	push   0xc002882c
c0018f67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f6d:	e8 b4 7c ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018f72:	58                   	pop    eax
c0018f73:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018f78:	5a                   	pop    edx
c0018f79:	68 04 87 02 c0       	push   0xc0028704
c0018f7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018f84:	e8 9d 7c ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018f89:	59                   	pop    ecx
c0018f8a:	5b                   	pop    ebx
c0018f8b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018f8e:	68 1c 87 02 c0       	push   0xc002871c
c0018f93:	e8 ad 96 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0018f98:	58                   	pop    eax
c0018f99:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f9c:	5a                   	pop    edx
c0018f9d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018fa0:	68 25 87 02 c0       	push   0xc0028725
c0018fa5:	e8 9b 96 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0018faa:	59                   	pop    ecx
c0018fab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018fae:	5b                   	pop    ebx
c0018faf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fb1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018fb4:	68 2e 87 02 c0       	push   0xc002872e
c0018fb9:	e8 87 96 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0018fbe:	58                   	pop    eax
c0018fbf:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018fc4:	5a                   	pop    edx
c0018fc5:	68 70 88 02 c0       	push   0xc0028870
c0018fca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018fd0:	e8 51 7c ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018fd5:	59                   	pop    ecx
c0018fd6:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018fdb:	5b                   	pop    ebx
c0018fdc:	68 37 87 02 c0       	push   0xc0028737
c0018fe1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018fe7:	e8 3a 7c ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0018fec:	0f 20 c0             	mov    eax,cr0
c0018fef:	5a                   	pop    edx
c0018ff0:	59                   	pop    ecx
c0018ff1:	50                   	push   eax
c0018ff2:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0018ff7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ffd:	e8 4a 7c ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0019002:	5b                   	pop    ebx
c0019003:	58                   	pop    eax
c0019004:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0019009:	68 41 87 02 c0       	push   0xc0028741
c001900e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019014:	e8 0d 7c ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0019019:	0f 20 d0             	mov    eax,cr2
c001901c:	5a                   	pop    edx
c001901d:	59                   	pop    ecx
c001901e:	50                   	push   eax
c001901f:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0019024:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001902a:	e8 1d 7c ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c001902f:	5b                   	pop    ebx
c0019030:	58                   	pop    eax
c0019031:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0019036:	68 4b 87 02 c0       	push   0xc002874b
c001903b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019041:	e8 e0 7b ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0019046:	0f 20 d8             	mov    eax,cr3
c0019049:	5a                   	pop    edx
c001904a:	59                   	pop    ecx
c001904b:	50                   	push   eax
c001904c:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0019051:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019057:	e8 f0 7b ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c001905c:	5b                   	pop    ebx
c001905d:	58                   	pop    eax
c001905e:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0019063:	68 5e 87 02 c0       	push   0xc002875e
c0019068:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001906e:	e8 b3 7b ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c0019073:	0f 20 e0             	mov    eax,cr4
c0019076:	5a                   	pop    edx
c0019077:	59                   	pop    ecx
c0019078:	50                   	push   eax
c0019079:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c001907e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019084:	e8 c3 7b ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0019089:	5b                   	pop    ebx
c001908a:	58                   	pop    eax
c001908b:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0019090:	68 68 87 02 c0       	push   0xc0028768
c0019095:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001909b:	e8 86 7b ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00190a0:	5a                   	pop    edx
c00190a1:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00190a6:	59                   	pop    ecx
c00190a7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00190ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00190b0:	50                   	push   eax
c00190b1:	e8 96 7b ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c00190b6:	5b                   	pop    ebx
c00190b7:	58                   	pop    eax
c00190b8:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00190bd:	68 7f 87 02 c0       	push   0xc002877f
c00190c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00190c8:	e8 59 7b ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00190cd:	5a                   	pop    edx
c00190ce:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00190d3:	59                   	pop    ecx
c00190d4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00190da:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00190dd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00190e0:	50                   	push   eax
c00190e1:	e8 66 7b ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c00190e6:	5b                   	pop    ebx
c00190e7:	58                   	pop    eax
c00190e8:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c00190ed:	68 7f 87 02 c0       	push   0xc002877f
c00190f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00190f8:	e8 29 7b ff ff       	call   c0010c26 <VgaText::puts(char const*)>
c00190fd:	a1 94 bf 02 c0       	mov    eax,ds:0xc002bf94
c0019102:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019105:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001910b:	8b 12                	mov    edx,DWORD PTR [edx]
c001910d:	59                   	pop    ecx
c001910e:	5b                   	pop    ebx
c001910f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019112:	50                   	push   eax
c0019113:	e8 34 7b ff ff       	call   c0010c4c <VgaText::putx(unsigned int)>
c0019118:	83 c4 10             	add    esp,0x10
c001911b:	b2 fe                	mov    dl,0xfe
c001911d:	e4 60                	in     al,0x60
c001911f:	3c 1c                	cmp    al,0x1c
c0019121:	74 04                	je     c0019127 <Krnl::panic(char const*)+0x31e>
c0019123:	3c 5a                	cmp    al,0x5a
c0019125:	75 f6                	jne    c001911d <Krnl::panic(char const*)+0x314>
c0019127:	e4 64                	in     al,0x64
c0019129:	a8 02                	test   al,0x2
c001912b:	75 fa                	jne    c0019127 <Krnl::panic(char const*)+0x31e>
c001912d:	88 d0                	mov    al,dl
c001912f:	e6 64                	out    0x64,al
c0019131:	fa                   	cli    
c0019132:	f4                   	hlt    
c0019133:	eb e8                	jmp    c001911d <Krnl::panic(char const*)+0x314>

c0019135 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019135:	55                   	push   ebp
c0019136:	57                   	push   edi
c0019137:	56                   	push   esi
c0019138:	53                   	push   ebx
c0019139:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001913f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019146:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019148:	8d 6e 01             	lea    ebp,[esi+0x1]
c001914b:	80 fb 40             	cmp    bl,0x40
c001914e:	75 1b                	jne    c001916b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019150:	8a 16                	mov    dl,BYTE PTR [esi]
c0019152:	84 d2                	test   dl,dl
c0019154:	0f 84 f1 00 00 00    	je     c001924b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001915a:	8d 46 01             	lea    eax,[esi+0x1]
c001915d:	80 fa 3a             	cmp    dl,0x3a
c0019160:	74 04                	je     c0019166 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019162:	89 c6                	mov    esi,eax
c0019164:	eb ea                	jmp    c0019150 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019166:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019169:	89 c6                	mov    esi,eax
c001916b:	50                   	push   eax
c001916c:	6a 40                	push   0x40
c001916e:	6a 00                	push   0x0
c0019170:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019174:	50                   	push   eax
c0019175:	e8 03 75 fe ff       	call   c000067d <memset>
c001917a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019181:	31 c0                	xor    eax,eax
c0019183:	83 c4 10             	add    esp,0x10
c0019186:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019188:	84 c9                	test   cl,cl
c001918a:	0f 84 bb 00 00 00    	je     c001924b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019190:	3d c7 00 00 00       	cmp    eax,0xc7
c0019195:	0f 8f b0 00 00 00    	jg     c001924b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001919b:	80 f9 0a             	cmp    cl,0xa
c001919e:	0f 85 98 00 00 00    	jne    c001923c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00191a4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00191a9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00191ad:	a8 df                	test   al,0xdf
c00191af:	0f 94 c1             	sete   cl
c00191b2:	3c 23                	cmp    al,0x23
c00191b4:	0f 94 c2             	sete   dl
c00191b7:	08 d1                	or     cl,dl
c00191b9:	75 4a                	jne    c0019205 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00191bb:	8d 50 f7             	lea    edx,[eax-0x9]
c00191be:	80 fa 01             	cmp    dl,0x1
c00191c1:	76 42                	jbe    c0019205 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00191c3:	3c 5b                	cmp    al,0x5b
c00191c5:	75 42                	jne    c0019209 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00191c7:	80 fb 40             	cmp    bl,0x40
c00191ca:	75 39                	jne    c0019205 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00191cc:	83 ec 0c             	sub    esp,0xc
c00191cf:	8d 54 24 65          	lea    edx,[esp+0x65]
c00191d3:	52                   	push   edx
c00191d4:	e8 c1 74 fe ff       	call   c000069a <strlen>
c00191d9:	83 c4 10             	add    esp,0x10
c00191dc:	83 f8 3f             	cmp    eax,0x3f
c00191df:	77 6a                	ja     c001924b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00191e1:	50                   	push   eax
c00191e2:	50                   	push   eax
c00191e3:	8d 54 24 61          	lea    edx,[esp+0x61]
c00191e7:	52                   	push   edx
c00191e8:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191ec:	52                   	push   edx
c00191ed:	e8 2a 75 fe ff       	call   c000071c <strcpy>
c00191f2:	58                   	pop    eax
c00191f3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191f7:	52                   	push   edx
c00191f8:	e8 9d 74 fe ff       	call   c000069a <strlen>
c00191fd:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019202:	83 c4 10             	add    esp,0x10
c0019205:	31 d2                	xor    edx,edx
c0019207:	eb 3a                	jmp    c0019243 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019209:	80 fb 40             	cmp    bl,0x40
c001920c:	74 06                	je     c0019214 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001920e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019212:	eb 20                	jmp    c0019234 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019214:	50                   	push   eax
c0019215:	50                   	push   eax
c0019216:	55                   	push   ebp
c0019217:	8d 44 24 24          	lea    eax,[esp+0x24]
c001921b:	50                   	push   eax
c001921c:	e8 4c 75 fe ff       	call   c000076d <strcmp>
c0019221:	83 c4 10             	add    esp,0x10
c0019224:	85 c0                	test   eax,eax
c0019226:	75 dd                	jne    c0019205 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019228:	eb e4                	jmp    c001920e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001922a:	8d 50 01             	lea    edx,[eax+0x1]
c001922d:	80 f9 3d             	cmp    cl,0x3d
c0019230:	74 1d                	je     c001924f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0019232:	89 d0                	mov    eax,edx
c0019234:	8a 08                	mov    cl,BYTE PTR [eax]
c0019236:	84 c9                	test   cl,cl
c0019238:	75 f0                	jne    c001922a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001923a:	eb 0f                	jmp    c001924b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001923c:	8d 50 01             	lea    edx,[eax+0x1]
c001923f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0019243:	47                   	inc    edi
c0019244:	89 d0                	mov    eax,edx
c0019246:	e9 3b ff ff ff       	jmp    c0019186 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001924b:	31 c0                	xor    eax,eax
c001924d:	eb 33                	jmp    c0019282 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001924f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019253:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019256:	50                   	push   eax
c0019257:	50                   	push   eax
c0019258:	8d 44 24 60          	lea    eax,[esp+0x60]
c001925c:	50                   	push   eax
c001925d:	56                   	push   esi
c001925e:	e8 0a 75 fe ff       	call   c000076d <strcmp>
c0019263:	83 c4 10             	add    esp,0x10
c0019266:	85 c0                	test   eax,eax
c0019268:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001926c:	75 97                	jne    c0019205 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001926e:	51                   	push   ecx
c001926f:	51                   	push   ecx
c0019270:	52                   	push   edx
c0019271:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0019278:	e8 9f 74 fe ff       	call   c000071c <strcpy>
c001927d:	83 c4 10             	add    esp,0x10
c0019280:	b0 01                	mov    al,0x1
c0019282:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019288:	5b                   	pop    ebx
c0019289:	5e                   	pop    esi
c001928a:	5f                   	pop    edi
c001928b:	5d                   	pop    ebp
c001928c:	c3                   	ret    

c001928d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001928d:	57                   	push   edi
c001928e:	56                   	push   esi
c001928f:	53                   	push   ebx
c0019290:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019296:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001929d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00192a4:	53                   	push   ebx
c00192a5:	e8 f0 73 fe ff       	call   c000069a <strlen>
c00192aa:	89 34 24             	mov    DWORD PTR [esp],esi
c00192ad:	89 c7                	mov    edi,eax
c00192af:	e8 e6 73 fe ff       	call   c000069a <strlen>
c00192b4:	83 c4 10             	add    esp,0x10
c00192b7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00192bb:	3d ff 00 00 00       	cmp    eax,0xff
c00192c0:	0f 87 d3 00 00 00    	ja     c0019399 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00192c6:	57                   	push   edi
c00192c7:	57                   	push   edi
c00192c8:	56                   	push   esi
c00192c9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192cd:	56                   	push   esi
c00192ce:	e8 49 74 fe ff       	call   c000071c <strcpy>
c00192d3:	58                   	pop    eax
c00192d4:	5a                   	pop    edx
c00192d5:	68 41 8c 02 c0       	push   0xc0028c41
c00192da:	56                   	push   esi
c00192db:	e8 f3 74 fe ff       	call   c00007d3 <strcat>
c00192e0:	59                   	pop    ecx
c00192e1:	5f                   	pop    edi
c00192e2:	53                   	push   ebx
c00192e3:	56                   	push   esi
c00192e4:	e8 ea 74 fe ff       	call   c00007d3 <strcat>
c00192e9:	58                   	pop    eax
c00192ea:	5a                   	pop    edx
c00192eb:	68 96 88 02 c0       	push   0xc0028896
c00192f0:	56                   	push   esi
c00192f1:	e8 dd 74 fe ff       	call   c00007d3 <strcat>
c00192f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00192fd:	e8 d0 61 ff ff       	call   c000f4d2 <malloc>
c0019302:	83 c4 0c             	add    esp,0xc
c0019305:	89 c3                	mov    ebx,eax
c0019307:	ff 35 94 bf 02 c0    	push   DWORD PTR ds:0xc002bf94
c001930d:	56                   	push   esi
c001930e:	50                   	push   eax
c001930f:	e8 60 98 ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c0019314:	83 c4 10             	add    esp,0x10
c0019317:	85 db                	test   ebx,ebx
c0019319:	74 7e                	je     c0019399 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001931b:	51                   	push   ecx
c001931c:	51                   	push   ecx
c001931d:	6a 01                	push   0x1
c001931f:	53                   	push   ebx
c0019320:	e8 b3 98 ff ff       	call   c0012bd8 <File::open(FileOpenMode)>
c0019325:	83 c4 10             	add    esp,0x10
c0019328:	85 c0                	test   eax,eax
c001932a:	74 08                	je     c0019334 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001932c:	83 ec 0c             	sub    esp,0xc
c001932f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019331:	53                   	push   ebx
c0019332:	eb 5f                	jmp    c0019393 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019334:	52                   	push   edx
c0019335:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019339:	50                   	push   eax
c001933a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001933e:	50                   	push   eax
c001933f:	53                   	push   ebx
c0019340:	e8 3f 9b ff ff       	call   c0012e84 <File::stat(unsigned long long*, bool*)>
c0019345:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	89 c1                	mov    ecx,eax
c001934e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0019352:	74 31                	je     c0019385 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0019354:	83 ec 0c             	sub    esp,0xc
c0019357:	50                   	push   eax
c0019358:	e8 75 61 ff ff       	call   c000f4d2 <malloc>
c001935d:	89 c6                	mov    esi,eax
c001935f:	58                   	pop    eax
c0019360:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019362:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019366:	52                   	push   edx
c0019367:	56                   	push   esi
c0019368:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001936c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019370:	53                   	push   ebx
c0019371:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019374:	83 c4 20             	add    esp,0x20
c0019377:	85 c0                	test   eax,eax
c0019379:	75 0a                	jne    c0019385 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001937b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001937f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0019383:	74 18                	je     c001939d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0019385:	83 ec 0c             	sub    esp,0xc
c0019388:	53                   	push   ebx
c0019389:	e8 a8 98 ff ff       	call   c0012c36 <File::close()>
c001938e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019390:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019393:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019396:	83 c4 10             	add    esp,0x10
c0019399:	31 c0                	xor    eax,eax
c001939b:	eb 3b                	jmp    c00193d8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001939d:	83 ec 0c             	sub    esp,0xc
c00193a0:	53                   	push   ebx
c00193a1:	e8 90 98 ff ff       	call   c0012c36 <File::close()>
c00193a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00193a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00193ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00193ae:	83 c4 0c             	add    esp,0xc
c00193b1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00193b8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00193bf:	56                   	push   esi
c00193c0:	e8 70 fd ff ff       	call   c0019135 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00193c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00193c8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00193cc:	e8 11 61 ff ff       	call   c000f4e2 <free>
c00193d1:	83 c4 10             	add    esp,0x10
c00193d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00193d8:	81 c4 20 01 00 00    	add    esp,0x120
c00193de:	5b                   	pop    ebx
c00193df:	5e                   	pop    esi
c00193e0:	5f                   	pop    edi
c00193e1:	c3                   	ret    

c00193e2 <Reg::getLine(char*, char*, char*)>:
c00193e2:	57                   	push   edi
c00193e3:	56                   	push   esi
c00193e4:	53                   	push   ebx
c00193e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00193e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00193f1:	57                   	push   edi
c00193f2:	56                   	push   esi
c00193f3:	53                   	push   ebx
c00193f4:	68 9b 88 02 c0       	push   0xc002889b
c00193f9:	e8 8f fe ff ff       	call   c001928d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00193fe:	83 c4 10             	add    esp,0x10
c0019401:	84 c0                	test   al,al
c0019403:	75 10                	jne    c0019415 <Reg::getLine(char*, char*, char*)+0x33>
c0019405:	57                   	push   edi
c0019406:	56                   	push   esi
c0019407:	53                   	push   ebx
c0019408:	68 c0 88 02 c0       	push   0xc00288c0
c001940d:	e8 7b fe ff ff       	call   c001928d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019412:	83 c4 10             	add    esp,0x10
c0019415:	5b                   	pop    ebx
c0019416:	5e                   	pop    esi
c0019417:	5f                   	pop    edi
c0019418:	c3                   	ret    

c0019419 <Reg::readInt(char*, char*, int*)>:
c0019419:	55                   	push   ebp
c001941a:	57                   	push   edi
c001941b:	56                   	push   esi
c001941c:	53                   	push   ebx
c001941d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019423:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019427:	57                   	push   edi
c0019428:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001942f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019436:	e8 a7 ff ff ff       	call   c00193e2 <Reg::getLine(char*, char*, char*)>
c001943b:	83 c4 10             	add    esp,0x10
c001943e:	84 c0                	test   al,al
c0019440:	0f 84 b3 00 00 00    	je     c00194f9 <Reg::readInt(char*, char*, int*)+0xe0>
c0019446:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001944a:	80 fa 2b             	cmp    dl,0x2b
c001944d:	74 0c                	je     c001945b <Reg::readInt(char*, char*, int*)+0x42>
c001944f:	80 fa 2d             	cmp    dl,0x2d
c0019452:	75 0e                	jne    c0019462 <Reg::readInt(char*, char*, int*)+0x49>
c0019454:	ba 01 00 00 00       	mov    edx,0x1
c0019459:	eb 0b                	jmp    c0019466 <Reg::readInt(char*, char*, int*)+0x4d>
c001945b:	ba 01 00 00 00       	mov    edx,0x1
c0019460:	eb 02                	jmp    c0019464 <Reg::readInt(char*, char*, int*)+0x4b>
c0019462:	31 d2                	xor    edx,edx
c0019464:	31 c0                	xor    eax,eax
c0019466:	be 0a 00 00 00       	mov    esi,0xa
c001946b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019470:	75 20                	jne    c0019492 <Reg::readInt(char*, char*, int*)+0x79>
c0019472:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019476:	80 f9 78             	cmp    cl,0x78
c0019479:	75 0a                	jne    c0019485 <Reg::readInt(char*, char*, int*)+0x6c>
c001947b:	83 c2 02             	add    edx,0x2
c001947e:	be 10 00 00 00       	mov    esi,0x10
c0019483:	eb 0d                	jmp    c0019492 <Reg::readInt(char*, char*, int*)+0x79>
c0019485:	80 f9 62             	cmp    cl,0x62
c0019488:	75 08                	jne    c0019492 <Reg::readInt(char*, char*, int*)+0x79>
c001948a:	83 c2 02             	add    edx,0x2
c001948d:	be 02 00 00 00       	mov    esi,0x2
c0019492:	01 d7                	add    edi,edx
c0019494:	31 d2                	xor    edx,edx
c0019496:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019498:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001949c:	80 fb 0d             	cmp    bl,0xd
c001949f:	0f 94 c3             	sete   bl
c00194a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00194a7:	0f 94 c1             	sete   cl
c00194aa:	08 cb                	or     bl,cl
c00194ac:	75 3a                	jne    c00194e8 <Reg::readInt(char*, char*, int*)+0xcf>
c00194ae:	0f af d6             	imul   edx,esi
c00194b1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00194b6:	83 fe 10             	cmp    esi,0x10
c00194b9:	75 26                	jne    c00194e1 <Reg::readInt(char*, char*, int*)+0xc8>
c00194bb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00194bf:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00194c2:	89 e9                	mov    ecx,ebp
c00194c4:	80 f9 05             	cmp    cl,0x5
c00194c7:	77 06                	ja     c00194cf <Reg::readInt(char*, char*, int*)+0xb6>
c00194c9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00194cd:	eb 16                	jmp    c00194e5 <Reg::readInt(char*, char*, int*)+0xcc>
c00194cf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00194d3:	83 e9 61             	sub    ecx,0x61
c00194d6:	80 f9 05             	cmp    cl,0x5
c00194d9:	77 06                	ja     c00194e1 <Reg::readInt(char*, char*, int*)+0xc8>
c00194db:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00194df:	eb 04                	jmp    c00194e5 <Reg::readInt(char*, char*, int*)+0xcc>
c00194e1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00194e5:	47                   	inc    edi
c00194e6:	eb ae                	jmp    c0019496 <Reg::readInt(char*, char*, int*)+0x7d>
c00194e8:	84 c0                	test   al,al
c00194ea:	74 02                	je     c00194ee <Reg::readInt(char*, char*, int*)+0xd5>
c00194ec:	f7 da                	neg    edx
c00194ee:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00194f5:	89 10                	mov    DWORD PTR [eax],edx
c00194f7:	88 d8                	mov    al,bl
c00194f9:	81 c4 ec 00 00 00    	add    esp,0xec
c00194ff:	5b                   	pop    ebx
c0019500:	5e                   	pop    esi
c0019501:	5f                   	pop    edi
c0019502:	5d                   	pop    ebp
c0019503:	c3                   	ret    

c0019504 <Reg::readString(char*, char*, char*, int)>:
c0019504:	57                   	push   edi
c0019505:	56                   	push   esi
c0019506:	53                   	push   ebx
c0019507:	81 ec d4 00 00 00    	sub    esp,0xd4
c001950d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019514:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019518:	57                   	push   edi
c0019519:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019520:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019527:	e8 b6 fe ff ff       	call   c00193e2 <Reg::getLine(char*, char*, char*)>
c001952c:	83 c4 10             	add    esp,0x10
c001952f:	89 c6                	mov    esi,eax
c0019531:	84 c0                	test   al,al
c0019533:	74 44                	je     c0019579 <Reg::readString(char*, char*, char*, int)+0x75>
c0019535:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001953c:	31 c0                	xor    eax,eax
c001953e:	4a                   	dec    edx
c001953f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019542:	84 c9                	test   cl,cl
c0019544:	74 0f                	je     c0019555 <Reg::readString(char*, char*, char*, int)+0x51>
c0019546:	39 c2                	cmp    edx,eax
c0019548:	7e 0b                	jle    c0019555 <Reg::readString(char*, char*, char*, int)+0x51>
c001954a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001954d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019552:	40                   	inc    eax
c0019553:	eb ea                	jmp    c001953f <Reg::readString(char*, char*, char*, int)+0x3b>
c0019555:	83 ec 0c             	sub    esp,0xc
c0019558:	53                   	push   ebx
c0019559:	e8 3c 71 fe ff       	call   c000069a <strlen>
c001955e:	83 c4 10             	add    esp,0x10
c0019561:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019566:	75 11                	jne    c0019579 <Reg::readString(char*, char*, char*, int)+0x75>
c0019568:	83 ec 0c             	sub    esp,0xc
c001956b:	53                   	push   ebx
c001956c:	e8 29 71 fe ff       	call   c000069a <strlen>
c0019571:	83 c4 10             	add    esp,0x10
c0019574:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019579:	81 c4 d0 00 00 00    	add    esp,0xd0
c001957f:	89 f0                	mov    eax,esi
c0019581:	5b                   	pop    ebx
c0019582:	5e                   	pop    esi
c0019583:	5f                   	pop    edi
c0019584:	c3                   	ret    

c0019585 <Reg::readBool(char*, char*, bool*)>:
c0019585:	83 ec 20             	sub    esp,0x20
c0019588:	8d 44 24 10          	lea    eax,[esp+0x10]
c001958c:	50                   	push   eax
c001958d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019595:	e8 7f fe ff ff       	call   c0019419 <Reg::readInt(char*, char*, int*)>
c001959a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001959f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00195a3:	0f 95 02             	setne  BYTE PTR [edx]
c00195a6:	83 c4 2c             	add    esp,0x2c
c00195a9:	c3                   	ret    

c00195aa <Reg::readBoolWithDefault(char*, char*, bool)>:
c00195aa:	53                   	push   ebx
c00195ab:	83 ec 1c             	sub    esp,0x1c
c00195ae:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00195b2:	8d 44 24 13          	lea    eax,[esp+0x13]
c00195b6:	50                   	push   eax
c00195b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195bf:	e8 c1 ff ff ff       	call   c0019585 <Reg::readBool(char*, char*, bool*)>
c00195c4:	83 c4 10             	add    esp,0x10
c00195c7:	84 c0                	test   al,al
c00195c9:	74 04                	je     c00195cf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00195cb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00195cf:	88 d8                	mov    al,bl
c00195d1:	83 c4 18             	add    esp,0x18
c00195d4:	5b                   	pop    ebx
c00195d5:	c3                   	ret    

c00195d6 <Reg::readIntWithDefault(char*, char*, int)>:
c00195d6:	53                   	push   ebx
c00195d7:	83 ec 1c             	sub    esp,0x1c
c00195da:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00195de:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195e2:	50                   	push   eax
c00195e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195eb:	e8 29 fe ff ff       	call   c0019419 <Reg::readInt(char*, char*, int*)>
c00195f0:	83 c4 10             	add    esp,0x10
c00195f3:	84 c0                	test   al,al
c00195f5:	74 04                	je     c00195fb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00195f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00195fb:	89 d8                	mov    eax,ebx
c00195fd:	83 c4 18             	add    esp,0x18
c0019600:	5b                   	pop    ebx
c0019601:	c3                   	ret    

c0019602 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0019602:	56                   	push   esi
c0019603:	53                   	push   ebx
c0019604:	51                   	push   ecx
c0019605:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019609:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001960d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019611:	56                   	push   esi
c0019612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001961a:	e8 e5 fe ff ff       	call   c0019504 <Reg::readString(char*, char*, char*, int)>
c001961f:	83 c4 10             	add    esp,0x10
c0019622:	84 c0                	test   al,al
c0019624:	74 02                	je     c0019628 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0019626:	89 f3                	mov    ebx,esi
c0019628:	89 d8                	mov    eax,ebx
c001962a:	5a                   	pop    edx
c001962b:	5b                   	pop    ebx
c001962c:	5e                   	pop    esi
c001962d:	c3                   	ret    

c001962e <Sys::exit(regs*)>:
c001962e:	83 ec 18             	sub    esp,0x18
c0019631:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019635:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019638:	e8 f5 31 00 00       	call   c001c832 <terminateTask(int)>
c001963d:	83 c8 ff             	or     eax,0xffffffff
c0019640:	83 c4 1c             	add    esp,0x1c
c0019643:	89 c2                	mov    edx,eax
c0019645:	c3                   	ret    

c0019646 <Sys::loadDLL(regs*)>:
c0019646:	56                   	push   esi
c0019647:	53                   	push   ebx
c0019648:	31 d2                	xor    edx,edx
c001964a:	51                   	push   ecx
c001964b:	b8 01 00 00 00       	mov    eax,0x1
c0019650:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019654:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019658:	0f 84 8c 00 00 00    	je     c00196ea <Sys::loadDLL(regs*)+0xa4>
c001965e:	83 ec 0c             	sub    esp,0xc
c0019661:	68 14 01 00 00       	push   0x114
c0019666:	e8 67 5e ff ff       	call   c000f4d2 <malloc>
c001966b:	83 c4 0c             	add    esp,0xc
c001966e:	89 c3                	mov    ebx,eax
c0019670:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019675:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019678:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001967b:	53                   	push   ebx
c001967c:	e8 f3 94 ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c0019681:	83 c4 10             	add    esp,0x10
c0019684:	31 d2                	xor    edx,edx
c0019686:	b8 02 00 00 00       	mov    eax,0x2
c001968b:	85 db                	test   ebx,ebx
c001968d:	74 5b                	je     c00196ea <Sys::loadDLL(regs*)+0xa4>
c001968f:	83 ec 0c             	sub    esp,0xc
c0019692:	53                   	push   ebx
c0019693:	e8 ae 97 ff ff       	call   c0012e46 <File::exists()>
c0019698:	83 c4 10             	add    esp,0x10
c001969b:	84 c0                	test   al,al
c001969d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001969f:	75 11                	jne    c00196b2 <Sys::loadDLL(regs*)+0x6c>
c00196a1:	83 ec 0c             	sub    esp,0xc
c00196a4:	53                   	push   ebx
c00196a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196a8:	83 c4 10             	add    esp,0x10
c00196ab:	b8 03 00 00 00       	mov    eax,0x3
c00196b0:	eb 36                	jmp    c00196e8 <Sys::loadDLL(regs*)+0xa2>
c00196b2:	83 ec 0c             	sub    esp,0xc
c00196b5:	53                   	push   ebx
c00196b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196b9:	58                   	pop    eax
c00196ba:	5a                   	pop    edx
c00196bb:	6a 00                	push   0x0
c00196bd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00196c0:	e8 13 21 00 00       	call   c001b7d8 <Thr::loadDLL(char const*, bool)>
c00196c5:	83 c4 10             	add    esp,0x10
c00196c8:	89 c1                	mov    ecx,eax
c00196ca:	31 d2                	xor    edx,edx
c00196cc:	b8 04 00 00 00       	mov    eax,0x4
c00196d1:	85 c9                	test   ecx,ecx
c00196d3:	74 15                	je     c00196ea <Sys::loadDLL(regs*)+0xa4>
c00196d5:	53                   	push   ebx
c00196d6:	53                   	push   ebx
c00196d7:	ff 35 88 aa 02 c0    	push   DWORD PTR ds:0xc002aa88
c00196dd:	51                   	push   ecx
c00196de:	e8 04 23 00 00       	call   c001b9e7 <Thr::executeDLL(unsigned long, void*)>
c00196e3:	83 c4 10             	add    esp,0x10
c00196e6:	31 c0                	xor    eax,eax
c00196e8:	31 d2                	xor    edx,edx
c00196ea:	59                   	pop    ecx
c00196eb:	5b                   	pop    ebx
c00196ec:	5e                   	pop    esi
c00196ed:	c3                   	ret    

c00196ee <Sys::read(regs*)>:
c00196ee:	57                   	push   edi
c00196ef:	56                   	push   esi
c00196f0:	53                   	push   ebx
c00196f1:	83 ec 10             	sub    esp,0x10
c00196f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00196f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00196fb:	83 f8 02             	cmp    eax,0x2
c00196fe:	77 10                	ja     c0019710 <Sys::read(regs*)+0x22>
c0019700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019705:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019708:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001970e:	eb 0e                	jmp    c001971e <Sys::read(regs*)+0x30>
c0019710:	83 ec 0c             	sub    esp,0xc
c0019713:	50                   	push   eax
c0019714:	e8 e6 7d ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c0019719:	83 c4 10             	add    esp,0x10
c001971c:	89 c1                	mov    ecx,eax
c001971e:	83 c8 ff             	or     eax,0xffffffff
c0019721:	85 c9                	test   ecx,ecx
c0019723:	89 c2                	mov    edx,eax
c0019725:	74 28                	je     c001974f <Sys::read(regs*)+0x61>
c0019727:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001972f:	31 ff                	xor    edi,edi
c0019731:	83 ec 0c             	sub    esp,0xc
c0019734:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019736:	8d 54 24 18          	lea    edx,[esp+0x18]
c001973a:	52                   	push   edx
c001973b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001973e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019741:	57                   	push   edi
c0019742:	56                   	push   esi
c0019743:	51                   	push   ecx
c0019744:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019747:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001974b:	83 c4 20             	add    esp,0x20
c001974e:	99                   	cdq    
c001974f:	83 c4 10             	add    esp,0x10
c0019752:	5b                   	pop    ebx
c0019753:	5e                   	pop    esi
c0019754:	5f                   	pop    edi
c0019755:	c3                   	ret    

c0019756 <Sys::sbrk(regs*)>:
c0019756:	56                   	push   esi
c0019757:	53                   	push   ebx
c0019758:	50                   	push   eax
c0019759:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001975e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019762:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019765:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019768:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001976e:	85 db                	test   ebx,ebx
c0019770:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019773:	74 02                	je     c0019777 <Sys::sbrk(regs*)+0x21>
c0019775:	79 06                	jns    c001977d <Sys::sbrk(regs*)+0x27>
c0019777:	89 f0                	mov    eax,esi
c0019779:	31 d2                	xor    edx,edx
c001977b:	eb 2a                	jmp    c00197a7 <Sys::sbrk(regs*)+0x51>
c001977d:	83 c8 ff             	or     eax,0xffffffff
c0019780:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019786:	89 c2                	mov    edx,eax
c0019788:	77 1d                	ja     c00197a7 <Sys::sbrk(regs*)+0x51>
c001978a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019790:	50                   	push   eax
c0019791:	c1 ea 0c             	shr    edx,0xc
c0019794:	68 07 04 00 00       	push   0x407
c0019799:	52                   	push   edx
c001979a:	51                   	push   ecx
c001979b:	e8 80 86 ff ff       	call   c0011e20 <VAS::allocatePages(int, int)>
c00197a0:	89 f0                	mov    eax,esi
c00197a2:	31 d2                	xor    edx,edx
c00197a4:	83 c4 10             	add    esp,0x10
c00197a7:	59                   	pop    ecx
c00197a8:	5b                   	pop    ebx
c00197a9:	5e                   	pop    esi
c00197aa:	c3                   	ret    

c00197ab <Sys::write(regs*)>:
c00197ab:	57                   	push   edi
c00197ac:	56                   	push   esi
c00197ad:	53                   	push   ebx
c00197ae:	83 ec 10             	sub    esp,0x10
c00197b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00197b8:	83 f8 02             	cmp    eax,0x2
c00197bb:	77 10                	ja     c00197cd <Sys::write(regs*)+0x22>
c00197bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00197c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00197c5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00197cb:	eb 0e                	jmp    c00197db <Sys::write(regs*)+0x30>
c00197cd:	83 ec 0c             	sub    esp,0xc
c00197d0:	50                   	push   eax
c00197d1:	e8 29 7d ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c00197d6:	83 c4 10             	add    esp,0x10
c00197d9:	89 c1                	mov    ecx,eax
c00197db:	83 c8 ff             	or     eax,0xffffffff
c00197de:	85 c9                	test   ecx,ecx
c00197e0:	89 c2                	mov    edx,eax
c00197e2:	74 28                	je     c001980c <Sys::write(regs*)+0x61>
c00197e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197ec:	31 ff                	xor    edi,edi
c00197ee:	83 ec 0c             	sub    esp,0xc
c00197f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00197f3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00197f7:	52                   	push   edx
c00197f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00197fb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00197fe:	57                   	push   edi
c00197ff:	56                   	push   esi
c0019800:	51                   	push   ecx
c0019801:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019804:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019808:	83 c4 20             	add    esp,0x20
c001980b:	99                   	cdq    
c001980c:	83 c4 10             	add    esp,0x10
c001980f:	5b                   	pop    ebx
c0019810:	5e                   	pop    esi
c0019811:	5f                   	pop    edi
c0019812:	c3                   	ret    

c0019813 <Sys::yield(regs*)>:
c0019813:	83 ec 0c             	sub    esp,0xc
c0019816:	e8 fa 25 00 00       	call   c001be15 <lockScheduler()>
c001981b:	e8 30 29 00 00       	call   c001c150 <schedule()>
c0019820:	e8 f2 25 00 00       	call   c001be17 <unlockScheduler()>
c0019825:	31 c0                	xor    eax,eax
c0019827:	31 d2                	xor    edx,edx
c0019829:	83 c4 0c             	add    esp,0xc
c001982c:	c3                   	ret    

c001982d <sysCallGetPID(regs*)>:
c001982d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019832:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019835:	8b 00                	mov    eax,DWORD PTR [eax]
c0019837:	99                   	cdq    
c0019838:	c3                   	ret    

c0019839 <sysCallSeekDir(regs*)>:
c0019839:	31 c0                	xor    eax,eax
c001983b:	31 d2                	xor    edx,edx
c001983d:	c3                   	ret    

c001983e <sysCallTellDir(regs*)>:
c001983e:	31 c0                	xor    eax,eax
c0019840:	31 d2                	xor    edx,edx
c0019842:	c3                   	ret    

c0019843 <sysCallVerify(regs*)>:
c0019843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019847:	31 d2                	xor    edx,edx
c0019849:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001984c:	c3                   	ret    

c001984d <sysCallGetArgc(regs*)>:
c001984d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019852:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019855:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001985b:	99                   	cdq    
c001985c:	c3                   	ret    

c001985d <sysFormatDisk(regs*)>:
c001985d:	56                   	push   esi
c001985e:	53                   	push   ebx
c001985f:	53                   	push   ebx
c0019860:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019864:	8b 1d e8 ab 02 c0    	mov    ebx,DWORD PTR ds:0xc002abe8
c001986a:	eb 25                	jmp    c0019891 <sysFormatDisk(regs*)+0x34>
c001986c:	83 ec 0c             	sub    esp,0xc
c001986f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019872:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019874:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019877:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001987a:	50                   	push   eax
c001987b:	ff 34 85 80 b0 02 c0 	push   DWORD PTR [eax*4-0x3ffd4f80]
c0019882:	53                   	push   ebx
c0019883:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019886:	83 c4 20             	add    esp,0x20
c0019889:	83 f8 08             	cmp    eax,0x8
c001988c:	75 12                	jne    c00198a0 <sysFormatDisk(regs*)+0x43>
c001988e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019891:	85 db                	test   ebx,ebx
c0019893:	75 d7                	jne    c001986c <sysFormatDisk(regs*)+0xf>
c0019895:	59                   	pop    ecx
c0019896:	b8 03 00 00 00       	mov    eax,0x3
c001989b:	31 d2                	xor    edx,edx
c001989d:	5b                   	pop    ebx
c001989e:	5e                   	pop    esi
c001989f:	c3                   	ret    
c00198a0:	85 c0                	test   eax,eax
c00198a2:	74 1b                	je     c00198bf <sysFormatDisk(regs*)+0x62>
c00198a4:	83 f8 09             	cmp    eax,0x9
c00198a7:	74 0b                	je     c00198b4 <sysFormatDisk(regs*)+0x57>
c00198a9:	59                   	pop    ecx
c00198aa:	b8 02 00 00 00       	mov    eax,0x2
c00198af:	31 d2                	xor    edx,edx
c00198b1:	5b                   	pop    ebx
c00198b2:	5e                   	pop    esi
c00198b3:	c3                   	ret    
c00198b4:	59                   	pop    ecx
c00198b5:	b8 01 00 00 00       	mov    eax,0x1
c00198ba:	31 d2                	xor    edx,edx
c00198bc:	5b                   	pop    ebx
c00198bd:	5e                   	pop    esi
c00198be:	c3                   	ret    
c00198bf:	59                   	pop    ecx
c00198c0:	31 c0                	xor    eax,eax
c00198c2:	31 d2                	xor    edx,edx
c00198c4:	5b                   	pop    ebx
c00198c5:	5e                   	pop    esi
c00198c6:	c3                   	ret    

c00198c7 <sysSetDiskVolumeLabel(regs*)>:
c00198c7:	56                   	push   esi
c00198c8:	53                   	push   ebx
c00198c9:	53                   	push   ebx
c00198ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198ce:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00198d1:	83 f8 19             	cmp    eax,0x19
c00198d4:	77 29                	ja     c00198ff <sysSetDiskVolumeLabel(regs*)+0x38>
c00198d6:	8b 0c 85 80 b0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4f80]
c00198dd:	85 c9                	test   ecx,ecx
c00198df:	74 1e                	je     c00198ff <sysSetDiskVolumeLabel(regs*)+0x38>
c00198e1:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00198e4:	85 d2                	test   edx,edx
c00198e6:	74 17                	je     c00198ff <sysSetDiskVolumeLabel(regs*)+0x38>
c00198e8:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00198ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c00198f0:	52                   	push   edx
c00198f1:	50                   	push   eax
c00198f2:	51                   	push   ecx
c00198f3:	53                   	push   ebx
c00198f4:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00198f7:	83 c4 10             	add    esp,0x10
c00198fa:	99                   	cdq    
c00198fb:	59                   	pop    ecx
c00198fc:	5b                   	pop    ebx
c00198fd:	5e                   	pop    esi
c00198fe:	c3                   	ret    
c00198ff:	59                   	pop    ecx
c0019900:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019905:	ba ff ff ff ff       	mov    edx,0xffffffff
c001990a:	5b                   	pop    ebx
c001990b:	5e                   	pop    esi
c001990c:	c3                   	ret    

c001990d <sysGetDiskVolumeLabel(regs*)>:
c001990d:	57                   	push   edi
c001990e:	56                   	push   esi
c001990f:	53                   	push   ebx
c0019910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019914:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019917:	83 fa 19             	cmp    edx,0x19
c001991a:	77 34                	ja     c0019950 <sysGetDiskVolumeLabel(regs*)+0x43>
c001991c:	8b 0c 95 80 b0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4f80]
c0019923:	85 c9                	test   ecx,ecx
c0019925:	74 29                	je     c0019950 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019927:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001992a:	85 db                	test   ebx,ebx
c001992c:	74 22                	je     c0019950 <sysGetDiskVolumeLabel(regs*)+0x43>
c001992e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019931:	85 c0                	test   eax,eax
c0019933:	74 1b                	je     c0019950 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019935:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001993b:	83 ec 0c             	sub    esp,0xc
c001993e:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019940:	50                   	push   eax
c0019941:	53                   	push   ebx
c0019942:	52                   	push   edx
c0019943:	51                   	push   ecx
c0019944:	56                   	push   esi
c0019945:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019948:	83 c4 20             	add    esp,0x20
c001994b:	99                   	cdq    
c001994c:	5b                   	pop    ebx
c001994d:	5e                   	pop    esi
c001994e:	5f                   	pop    edi
c001994f:	c3                   	ret    
c0019950:	5b                   	pop    ebx
c0019951:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019956:	ba ff ff ff ff       	mov    edx,0xffffffff
c001995b:	5e                   	pop    esi
c001995c:	5f                   	pop    edi
c001995d:	c3                   	ret    

c001995e <sysShutdown(regs*)>:
c001995e:	83 ec 0c             	sub    esp,0xc
c0019961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019965:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019968:	85 c0                	test   eax,eax
c001996a:	74 18                	je     c0019984 <sysShutdown(regs*)+0x26>
c001996c:	83 f8 01             	cmp    eax,0x1
c001996f:	74 38                	je     c00199a9 <sysShutdown(regs*)+0x4b>
c0019971:	83 f8 02             	cmp    eax,0x2
c0019974:	74 24                	je     c001999a <sysShutdown(regs*)+0x3c>
c0019976:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001997b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019980:	83 c4 0c             	add    esp,0xc
c0019983:	c3                   	ret    
c0019984:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0019989:	8b 10                	mov    edx,DWORD PTR [eax]
c001998b:	6a 00                	push   0x0
c001998d:	6a 00                	push   0x0
c001998f:	6a 00                	push   0x0
c0019991:	50                   	push   eax
c0019992:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019995:	83 c4 10             	add    esp,0x10
c0019998:	eb dc                	jmp    c0019976 <sysShutdown(regs*)+0x18>
c001999a:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001999f:	8b 10                	mov    edx,DWORD PTR [eax]
c00199a1:	6a 00                	push   0x0
c00199a3:	6a 00                	push   0x0
c00199a5:	6a 01                	push   0x1
c00199a7:	eb e8                	jmp    c0019991 <sysShutdown(regs*)+0x33>
c00199a9:	a1 00 b1 02 c0       	mov    eax,ds:0xc002b100
c00199ae:	85 c0                	test   eax,eax
c00199b0:	74 02                	je     c00199b4 <sysShutdown(regs*)+0x56>
c00199b2:	ff d0                	call   eax
c00199b4:	31 c0                	xor    eax,eax
c00199b6:	31 d2                	xor    edx,edx
c00199b8:	83 c4 0c             	add    esp,0xc
c00199bb:	c3                   	ret    

c00199bc <sysCallGetCwd(regs*)>:
c00199bc:	83 ec 10             	sub    esp,0x10
c00199bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199c3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00199c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199d1:	e8 0f 95 ff ff       	call   c0012ee5 <getcwd(Process*, char*, int)>
c00199d6:	83 c4 1c             	add    esp,0x1c
c00199d9:	99                   	cdq    
c00199da:	c3                   	ret    

c00199db <sysCallSetCwd(regs*)>:
c00199db:	83 ec 14             	sub    esp,0x14
c00199de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199ed:	e8 1d 95 ff ff       	call   c0012f0f <setcwd(Process*, char*)>
c00199f2:	83 c4 1c             	add    esp,0x1c
c00199f5:	99                   	cdq    
c00199f6:	c3                   	ret    

c00199f7 <sysCallRealpath(regs*)>:
c00199f7:	83 ec 0c             	sub    esp,0xc
c00199fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199fe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0019a01:	85 d2                	test   edx,edx
c0019a03:	74 07                	je     c0019a0c <sysCallRealpath(regs*)+0x15>
c0019a05:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019a08:	85 c0                	test   eax,eax
c0019a0a:	75 0b                	jne    c0019a17 <sysCallRealpath(regs*)+0x20>
c0019a0c:	b8 01 00 00 00       	mov    eax,0x1
c0019a11:	31 d2                	xor    edx,edx
c0019a13:	83 c4 0c             	add    esp,0xc
c0019a16:	c3                   	ret    
c0019a17:	51                   	push   ecx
c0019a18:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a1e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019a21:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019a27:	51                   	push   ecx
c0019a28:	52                   	push   edx
c0019a29:	50                   	push   eax
c0019a2a:	e8 9b 8f ff ff       	call   c00129ca <standardiseFiles(char*, char const*, char const*)>
c0019a2f:	83 c4 10             	add    esp,0x10
c0019a32:	31 c0                	xor    eax,eax
c0019a34:	31 d2                	xor    edx,edx
c0019a36:	83 c4 0c             	add    esp,0xc
c0019a39:	c3                   	ret    

c0019a3a <sysCallReadDir(regs*)>:
c0019a3a:	53                   	push   ebx
c0019a3b:	83 ec 18             	sub    esp,0x18
c0019a3e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a42:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019a45:	83 f8 02             	cmp    eax,0x2
c0019a48:	76 53                	jbe    c0019a9d <sysCallReadDir(regs*)+0x63>
c0019a4a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019a4d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019a53:	77 4f                	ja     c0019aa4 <sysCallReadDir(regs*)+0x6a>
c0019a55:	83 ec 0c             	sub    esp,0xc
c0019a58:	50                   	push   eax
c0019a59:	e8 a1 7a ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c0019a5e:	83 c4 10             	add    esp,0x10
c0019a61:	85 c0                	test   eax,eax
c0019a63:	74 50                	je     c0019ab5 <sysCallReadDir(regs*)+0x7b>
c0019a65:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a6d:	83 ec 0c             	sub    esp,0xc
c0019a70:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a72:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019a76:	51                   	push   ecx
c0019a77:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019a7a:	6a 00                	push   0x0
c0019a7c:	68 10 01 00 00       	push   0x110
c0019a81:	50                   	push   eax
c0019a82:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019a85:	83 c4 20             	add    esp,0x20
c0019a88:	85 c0                	test   eax,eax
c0019a8a:	74 38                	je     c0019ac4 <sysCallReadDir(regs*)+0x8a>
c0019a8c:	83 f8 07             	cmp    eax,0x7
c0019a8f:	74 0c                	je     c0019a9d <sysCallReadDir(regs*)+0x63>
c0019a91:	b8 02 00 00 00       	mov    eax,0x2
c0019a96:	31 d2                	xor    edx,edx
c0019a98:	83 c4 18             	add    esp,0x18
c0019a9b:	5b                   	pop    ebx
c0019a9c:	c3                   	ret    
c0019a9d:	b8 01 00 00 00       	mov    eax,0x1
c0019aa2:	eb f2                	jmp    c0019a96 <sysCallReadDir(regs*)+0x5c>
c0019aa4:	83 ec 08             	sub    esp,0x8
c0019aa7:	52                   	push   edx
c0019aa8:	68 dc 88 02 c0       	push   0xc00288dc
c0019aad:	e8 93 8b ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0019ab2:	83 c4 10             	add    esp,0x10
c0019ab5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019aba:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019abf:	83 c4 18             	add    esp,0x18
c0019ac2:	5b                   	pop    ebx
c0019ac3:	c3                   	ret    
c0019ac4:	31 c0                	xor    eax,eax
c0019ac6:	eb ce                	jmp    c0019a96 <sysCallReadDir(regs*)+0x5c>

c0019ac8 <sysCallIsATTY(regs*)>:
c0019ac8:	83 ec 0c             	sub    esp,0xc
c0019acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019acf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019ad2:	83 f8 02             	cmp    eax,0x2
c0019ad5:	76 07                	jbe    c0019ade <sysCallIsATTY(regs*)+0x16>
c0019ad7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019adc:	75 26                	jne    c0019b04 <sysCallIsATTY(regs*)+0x3c>
c0019ade:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ae3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ae6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019aec:	85 c0                	test   eax,eax
c0019aee:	74 24                	je     c0019b14 <sysCallIsATTY(regs*)+0x4c>
c0019af0:	83 ec 0c             	sub    esp,0xc
c0019af3:	8b 10                	mov    edx,DWORD PTR [eax]
c0019af5:	50                   	push   eax
c0019af6:	ff 12                	call   DWORD PTR [edx]
c0019af8:	31 d2                	xor    edx,edx
c0019afa:	0f b6 c0             	movzx  eax,al
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	83 c4 0c             	add    esp,0xc
c0019b03:	c3                   	ret    
c0019b04:	83 ec 0c             	sub    esp,0xc
c0019b07:	50                   	push   eax
c0019b08:	e8 f2 79 ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c0019b0d:	83 c4 10             	add    esp,0x10
c0019b10:	85 c0                	test   eax,eax
c0019b12:	75 dc                	jne    c0019af0 <sysCallIsATTY(regs*)+0x28>
c0019b14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019b1e:	83 c4 0c             	add    esp,0xc
c0019b21:	c3                   	ret    

c0019b22 <sysCallSeek(regs*)>:
c0019b22:	53                   	push   ebx
c0019b23:	83 ec 08             	sub    esp,0x8
c0019b26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019b2d:	83 f8 02             	cmp    eax,0x2
c0019b30:	76 4a                	jbe    c0019b7c <sysCallSeek(regs*)+0x5a>
c0019b32:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019b37:	77 32                	ja     c0019b6b <sysCallSeek(regs*)+0x49>
c0019b39:	83 ec 0c             	sub    esp,0xc
c0019b3c:	50                   	push   eax
c0019b3d:	e8 bd 79 ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c0019b42:	83 c4 0c             	add    esp,0xc
c0019b45:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019b48:	31 db                	xor    ebx,ebx
c0019b4a:	53                   	push   ebx
c0019b4b:	51                   	push   ecx
c0019b4c:	50                   	push   eax
c0019b4d:	e8 44 91 ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c0019b52:	83 c4 10             	add    esp,0x10
c0019b55:	85 c0                	test   eax,eax
c0019b57:	0f 95 c0             	setne  al
c0019b5a:	31 d2                	xor    edx,edx
c0019b5c:	0f b6 c0             	movzx  eax,al
c0019b5f:	f7 d8                	neg    eax
c0019b61:	83 d2 00             	adc    edx,0x0
c0019b64:	83 c4 08             	add    esp,0x8
c0019b67:	f7 da                	neg    edx
c0019b69:	5b                   	pop    ebx
c0019b6a:	c3                   	ret    
c0019b6b:	83 ec 08             	sub    esp,0x8
c0019b6e:	50                   	push   eax
c0019b6f:	68 98 89 02 c0       	push   0xc0028998
c0019b74:	e8 cc 8a ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0019b79:	83 c4 10             	add    esp,0x10
c0019b7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b81:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019b86:	83 c4 08             	add    esp,0x8
c0019b89:	5b                   	pop    ebx
c0019b8a:	c3                   	ret    

c0019b8b <sysCallTell(regs*)>:
c0019b8b:	53                   	push   ebx
c0019b8c:	83 ec 08             	sub    esp,0x8
c0019b8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019b96:	83 f8 02             	cmp    eax,0x2
c0019b99:	76 5e                	jbe    c0019bf9 <sysCallTell(regs*)+0x6e>
c0019b9b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019ba0:	77 2d                	ja     c0019bcf <sysCallTell(regs*)+0x44>
c0019ba2:	83 ec 0c             	sub    esp,0xc
c0019ba5:	50                   	push   eax
c0019ba6:	e8 54 79 ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c0019bab:	5a                   	pop    edx
c0019bac:	59                   	pop    ecx
c0019bad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019bb0:	50                   	push   eax
c0019bb1:	e8 36 91 ff ff       	call   c0012cec <File::tell(unsigned long long*)>
c0019bb6:	83 c4 10             	add    esp,0x10
c0019bb9:	85 c0                	test   eax,eax
c0019bbb:	0f 95 c0             	setne  al
c0019bbe:	31 d2                	xor    edx,edx
c0019bc0:	0f b6 c0             	movzx  eax,al
c0019bc3:	f7 d8                	neg    eax
c0019bc5:	83 d2 00             	adc    edx,0x0
c0019bc8:	83 c4 08             	add    esp,0x8
c0019bcb:	f7 da                	neg    edx
c0019bcd:	5b                   	pop    ebx
c0019bce:	c3                   	ret    
c0019bcf:	83 ec 08             	sub    esp,0x8
c0019bd2:	50                   	push   eax
c0019bd3:	68 b2 89 02 c0       	push   0xc00289b2
c0019bd8:	e8 68 8a ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0019bdd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019be0:	83 c4 10             	add    esp,0x10
c0019be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019be9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bf0:	31 d2                	xor    edx,edx
c0019bf2:	31 c0                	xor    eax,eax
c0019bf4:	83 c4 08             	add    esp,0x8
c0019bf7:	5b                   	pop    ebx
c0019bf8:	c3                   	ret    
c0019bf9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019bfe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019c03:	83 c4 08             	add    esp,0x8
c0019c06:	5b                   	pop    ebx
c0019c07:	c3                   	ret    

c0019c08 <sysCallSize(regs*)>:
c0019c08:	53                   	push   ebx
c0019c09:	83 ec 18             	sub    esp,0x18
c0019c0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019c10:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019c13:	83 f8 02             	cmp    eax,0x2
c0019c16:	76 64                	jbe    c0019c7c <sysCallSize(regs*)+0x74>
c0019c18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019c1d:	77 33                	ja     c0019c52 <sysCallSize(regs*)+0x4a>
c0019c1f:	83 ec 0c             	sub    esp,0xc
c0019c22:	50                   	push   eax
c0019c23:	e8 d7 78 ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c0019c28:	83 c4 0c             	add    esp,0xc
c0019c2b:	8d 54 24 13          	lea    edx,[esp+0x13]
c0019c2f:	52                   	push   edx
c0019c30:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019c33:	50                   	push   eax
c0019c34:	e8 4b 92 ff ff       	call   c0012e84 <File::stat(unsigned long long*, bool*)>
c0019c39:	83 c4 10             	add    esp,0x10
c0019c3c:	85 c0                	test   eax,eax
c0019c3e:	0f 95 c0             	setne  al
c0019c41:	31 d2                	xor    edx,edx
c0019c43:	0f b6 c0             	movzx  eax,al
c0019c46:	f7 d8                	neg    eax
c0019c48:	83 d2 00             	adc    edx,0x0
c0019c4b:	83 c4 18             	add    esp,0x18
c0019c4e:	f7 da                	neg    edx
c0019c50:	5b                   	pop    ebx
c0019c51:	c3                   	ret    
c0019c52:	83 ec 08             	sub    esp,0x8
c0019c55:	50                   	push   eax
c0019c56:	68 cc 89 02 c0       	push   0xc00289cc
c0019c5b:	e8 e5 89 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0019c60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019c63:	83 c4 10             	add    esp,0x10
c0019c66:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019c6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019c73:	31 d2                	xor    edx,edx
c0019c75:	31 c0                	xor    eax,eax
c0019c77:	83 c4 18             	add    esp,0x18
c0019c7a:	5b                   	pop    ebx
c0019c7b:	c3                   	ret    
c0019c7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019c81:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019c86:	83 c4 18             	add    esp,0x18
c0019c89:	5b                   	pop    ebx
c0019c8a:	c3                   	ret    

c0019c8b <sysCallSizeFromFilename(regs*)>:
c0019c8b:	57                   	push   edi
c0019c8c:	56                   	push   esi
c0019c8d:	53                   	push   ebx
c0019c8e:	83 ec 20             	sub    esp,0x20
c0019c91:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019c95:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c0019c98:	83 fb 02             	cmp    ebx,0x2
c0019c9b:	0f 86 99 00 00 00    	jbe    c0019d3a <sysCallSizeFromFilename(regs*)+0xaf>
c0019ca1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0019ca7:	77 65                	ja     c0019d0e <sysCallSizeFromFilename(regs*)+0x83>
c0019ca9:	83 ec 0c             	sub    esp,0xc
c0019cac:	68 14 01 00 00       	push   0x114
c0019cb1:	e8 1c 58 ff ff       	call   c000f4d2 <malloc>
c0019cb6:	83 c4 0c             	add    esp,0xc
c0019cb9:	89 c6                	mov    esi,eax
c0019cbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cc0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019cc3:	53                   	push   ebx
c0019cc4:	56                   	push   esi
c0019cc5:	e8 aa 8e ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c0019cca:	83 c4 0c             	add    esp,0xc
c0019ccd:	8d 44 24 23          	lea    eax,[esp+0x23]
c0019cd1:	50                   	push   eax
c0019cd2:	ff 77 28             	push   DWORD PTR [edi+0x28]
c0019cd5:	56                   	push   esi
c0019cd6:	e8 a9 91 ff ff       	call   c0012e84 <File::stat(unsigned long long*, bool*)>
c0019cdb:	83 c4 10             	add    esp,0x10
c0019cde:	85 f6                	test   esi,esi
c0019ce0:	74 14                	je     c0019cf6 <sysCallSizeFromFilename(regs*)+0x6b>
c0019ce2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ce6:	8b 16                	mov    edx,DWORD PTR [esi]
c0019ce8:	83 ec 0c             	sub    esp,0xc
c0019ceb:	56                   	push   esi
c0019cec:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019cef:	83 c4 10             	add    esp,0x10
c0019cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cf6:	85 c0                	test   eax,eax
c0019cf8:	0f 95 c0             	setne  al
c0019cfb:	31 d2                	xor    edx,edx
c0019cfd:	0f b6 c0             	movzx  eax,al
c0019d00:	f7 d8                	neg    eax
c0019d02:	83 d2 00             	adc    edx,0x0
c0019d05:	83 c4 20             	add    esp,0x20
c0019d08:	f7 da                	neg    edx
c0019d0a:	5b                   	pop    ebx
c0019d0b:	5e                   	pop    esi
c0019d0c:	5f                   	pop    edi
c0019d0d:	c3                   	ret    
c0019d0e:	83 ec 08             	sub    esp,0x8
c0019d11:	53                   	push   ebx
c0019d12:	68 cc 89 02 c0       	push   0xc00289cc
c0019d17:	e8 29 89 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0019d1c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0019d1f:	83 c4 10             	add    esp,0x10
c0019d22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019d28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019d2f:	31 d2                	xor    edx,edx
c0019d31:	83 c4 20             	add    esp,0x20
c0019d34:	31 c0                	xor    eax,eax
c0019d36:	5b                   	pop    ebx
c0019d37:	5e                   	pop    esi
c0019d38:	5f                   	pop    edi
c0019d39:	c3                   	ret    
c0019d3a:	83 c4 20             	add    esp,0x20
c0019d3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019d42:	5b                   	pop    ebx
c0019d43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019d48:	5e                   	pop    esi
c0019d49:	5f                   	pop    edi
c0019d4a:	c3                   	ret    

c0019d4b <sysCallClose(regs*)>:
c0019d4b:	53                   	push   ebx
c0019d4c:	83 ec 08             	sub    esp,0x8
c0019d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d53:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019d56:	83 f8 02             	cmp    eax,0x2
c0019d59:	76 50                	jbe    c0019dab <sysCallClose(regs*)+0x60>
c0019d5b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019d60:	74 58                	je     c0019dba <sysCallClose(regs*)+0x6f>
c0019d62:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019d67:	74 60                	je     c0019dc9 <sysCallClose(regs*)+0x7e>
c0019d69:	77 2f                	ja     c0019d9a <sysCallClose(regs*)+0x4f>
c0019d6b:	83 ec 0c             	sub    esp,0xc
c0019d6e:	50                   	push   eax
c0019d6f:	e8 8b 77 ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c0019d74:	89 c3                	mov    ebx,eax
c0019d76:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d79:	e8 b8 8e ff ff       	call   c0012c36 <File::close()>
c0019d7e:	83 c4 10             	add    esp,0x10
c0019d81:	85 db                	test   ebx,ebx
c0019d83:	74 0c                	je     c0019d91 <sysCallClose(regs*)+0x46>
c0019d85:	83 ec 0c             	sub    esp,0xc
c0019d88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d8a:	53                   	push   ebx
c0019d8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d8e:	83 c4 10             	add    esp,0x10
c0019d91:	31 c0                	xor    eax,eax
c0019d93:	31 d2                	xor    edx,edx
c0019d95:	83 c4 08             	add    esp,0x8
c0019d98:	5b                   	pop    ebx
c0019d99:	c3                   	ret    
c0019d9a:	83 ec 08             	sub    esp,0x8
c0019d9d:	50                   	push   eax
c0019d9e:	68 00 89 02 c0       	push   0xc0028900
c0019da3:	e8 9d 88 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0019da8:	83 c4 10             	add    esp,0x10
c0019dab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019db0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019db5:	83 c4 08             	add    esp,0x8
c0019db8:	5b                   	pop    ebx
c0019db9:	c3                   	ret    
c0019dba:	83 ec 0c             	sub    esp,0xc
c0019dbd:	68 e7 89 02 c0       	push   0xc00289e7
c0019dc2:	e8 7e 88 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0019dc7:	eb c5                	jmp    c0019d8e <sysCallClose(regs*)+0x43>
c0019dc9:	83 ec 0c             	sub    esp,0xc
c0019dcc:	68 f5 89 02 c0       	push   0xc00289f5
c0019dd1:	eb ef                	jmp    c0019dc2 <sysCallClose(regs*)+0x77>

c0019dd3 <sysCallOpenDir(regs*)>:
c0019dd3:	56                   	push   esi
c0019dd4:	53                   	push   ebx
c0019dd5:	53                   	push   ebx
c0019dd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dda:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0019ddd:	85 f6                	test   esi,esi
c0019ddf:	74 59                	je     c0019e3a <sysCallOpenDir(regs*)+0x67>
c0019de1:	83 ec 0c             	sub    esp,0xc
c0019de4:	68 14 01 00 00       	push   0x114
c0019de9:	e8 e4 56 ff ff       	call   c000f4d2 <malloc>
c0019dee:	83 c4 0c             	add    esp,0xc
c0019df1:	89 c6                	mov    esi,eax
c0019df3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019df8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019dfb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019dfe:	56                   	push   esi
c0019dff:	e8 46 92 ff ff       	call   c001304a <Directory::Directory(char const*, Process*)>
c0019e04:	83 c4 10             	add    esp,0x10
c0019e07:	85 f6                	test   esi,esi
c0019e09:	74 2f                	je     c0019e3a <sysCallOpenDir(regs*)+0x67>
c0019e0b:	83 ec 0c             	sub    esp,0xc
c0019e0e:	56                   	push   esi
c0019e0f:	e8 9a 92 ff ff       	call   c00130ae <Directory::open()>
c0019e14:	83 c4 10             	add    esp,0x10
c0019e17:	85 c0                	test   eax,eax
c0019e19:	75 1f                	jne    c0019e3a <sysCallOpenDir(regs*)+0x67>
c0019e1b:	83 ec 0c             	sub    esp,0xc
c0019e1e:	56                   	push   esi
c0019e1f:	e8 e6 73 ff ff       	call   c001120a <UnixFile::getFileDescriptor()>
c0019e24:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019e27:	83 c4 10             	add    esp,0x10
c0019e2a:	89 02                	mov    DWORD PTR [edx],eax
c0019e2c:	c1 f8 1f             	sar    eax,0x1f
c0019e2f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019e32:	31 c0                	xor    eax,eax
c0019e34:	59                   	pop    ecx
c0019e35:	31 d2                	xor    edx,edx
c0019e37:	5b                   	pop    ebx
c0019e38:	5e                   	pop    esi
c0019e39:	c3                   	ret    
c0019e3a:	59                   	pop    ecx
c0019e3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019e40:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019e45:	5b                   	pop    ebx
c0019e46:	5e                   	pop    esi
c0019e47:	c3                   	ret    

c0019e48 <sysCallCloseDir(regs*)>:
c0019e48:	53                   	push   ebx
c0019e49:	83 ec 08             	sub    esp,0x8
c0019e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019e53:	83 f8 02             	cmp    eax,0x2
c0019e56:	76 47                	jbe    c0019e9f <sysCallCloseDir(regs*)+0x57>
c0019e58:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019e5d:	77 2f                	ja     c0019e8e <sysCallCloseDir(regs*)+0x46>
c0019e5f:	83 ec 0c             	sub    esp,0xc
c0019e62:	50                   	push   eax
c0019e63:	e8 97 76 ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c0019e68:	89 c3                	mov    ebx,eax
c0019e6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e6d:	e8 98 92 ff ff       	call   c001310a <Directory::close()>
c0019e72:	83 c4 10             	add    esp,0x10
c0019e75:	85 db                	test   ebx,ebx
c0019e77:	74 0c                	je     c0019e85 <sysCallCloseDir(regs*)+0x3d>
c0019e79:	83 ec 0c             	sub    esp,0xc
c0019e7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e7e:	53                   	push   ebx
c0019e7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e82:	83 c4 10             	add    esp,0x10
c0019e85:	31 c0                	xor    eax,eax
c0019e87:	31 d2                	xor    edx,edx
c0019e89:	83 c4 08             	add    esp,0x8
c0019e8c:	5b                   	pop    ebx
c0019e8d:	c3                   	ret    
c0019e8e:	83 ec 08             	sub    esp,0x8
c0019e91:	50                   	push   eax
c0019e92:	68 28 89 02 c0       	push   0xc0028928
c0019e97:	e8 a9 87 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0019e9c:	83 c4 10             	add    esp,0x10
c0019e9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ea4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ea9:	83 c4 08             	add    esp,0x8
c0019eac:	5b                   	pop    ebx
c0019ead:	c3                   	ret    

c0019eae <sysCallMakeDir(regs*)>:
c0019eae:	56                   	push   esi
c0019eaf:	53                   	push   ebx
c0019eb0:	83 ec 10             	sub    esp,0x10
c0019eb3:	68 14 01 00 00       	push   0x114
c0019eb8:	e8 15 56 ff ff       	call   c000f4d2 <malloc>
c0019ebd:	83 c4 0c             	add    esp,0xc
c0019ec0:	89 c3                	mov    ebx,eax
c0019ec2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ec7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019eca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ece:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019ed1:	53                   	push   ebx
c0019ed2:	e8 73 91 ff ff       	call   c001304a <Directory::Directory(char const*, Process*)>
c0019ed7:	83 c4 10             	add    esp,0x10
c0019eda:	85 db                	test   ebx,ebx
c0019edc:	74 32                	je     c0019f10 <sysCallMakeDir(regs*)+0x62>
c0019ede:	83 ec 0c             	sub    esp,0xc
c0019ee1:	53                   	push   ebx
c0019ee2:	e8 a7 93 ff ff       	call   c001328e <Directory::create()>
c0019ee7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eea:	89 c6                	mov    esi,eax
c0019eec:	e8 19 92 ff ff       	call   c001310a <Directory::close()>
c0019ef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ef3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ef6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ef9:	83 c4 10             	add    esp,0x10
c0019efc:	31 c0                	xor    eax,eax
c0019efe:	59                   	pop    ecx
c0019eff:	85 f6                	test   esi,esi
c0019f01:	5b                   	pop    ebx
c0019f02:	0f 95 c0             	setne  al
c0019f05:	5e                   	pop    esi
c0019f06:	31 d2                	xor    edx,edx
c0019f08:	f7 d8                	neg    eax
c0019f0a:	83 d2 00             	adc    edx,0x0
c0019f0d:	f7 da                	neg    edx
c0019f0f:	c3                   	ret    
c0019f10:	59                   	pop    ecx
c0019f11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f1b:	5b                   	pop    ebx
c0019f1c:	5e                   	pop    esi
c0019f1d:	c3                   	ret    

c0019f1e <sysCallWait(regs*)>:
c0019f1e:	83 ec 10             	sub    esp,0x10
c0019f21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f25:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019f28:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019f2b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019f2e:	e8 98 23 00 00       	call   c001c2cb <waitTask(int, int*, int)>
c0019f33:	83 c4 1c             	add    esp,0x1c
c0019f36:	99                   	cdq    
c0019f37:	c3                   	ret    

c0019f38 <sysCallNotImpl(regs*)>:
c0019f38:	83 ec 18             	sub    esp,0x18
c0019f3b:	68 03 8a 02 c0       	push   0xc0028a03
c0019f40:	e8 c4 ee ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0019f45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f4f:	83 c4 1c             	add    esp,0x1c
c0019f52:	c3                   	ret    

c0019f53 <sysPanic(regs*)>:
c0019f53:	83 ec 18             	sub    esp,0x18
c0019f56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f5a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019f5d:	e8 a7 ee ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0019f62:	c7 04 24 1d 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a1d
c0019f69:	e8 9b ee ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0019f6e:	b8 01 00 00 00       	mov    eax,0x1
c0019f73:	31 d2                	xor    edx,edx
c0019f75:	83 c4 1c             	add    esp,0x1c
c0019f78:	c3                   	ret    

c0019f79 <sysCallRmdir(regs*)>:
c0019f79:	56                   	push   esi
c0019f7a:	53                   	push   ebx
c0019f7b:	83 ec 20             	sub    esp,0x20
c0019f7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019f82:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019f85:	68 14 01 00 00       	push   0x114
c0019f8a:	e8 43 55 ff ff       	call   c000f4d2 <malloc>
c0019f8f:	83 c4 0c             	add    esp,0xc
c0019f92:	89 c3                	mov    ebx,eax
c0019f94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f99:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019f9c:	56                   	push   esi
c0019f9d:	53                   	push   ebx
c0019f9e:	e8 d1 8b ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c0019fa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fa6:	e8 a5 8d ff ff       	call   c0012d50 <File::unlink()>
c0019fab:	83 c4 10             	add    esp,0x10
c0019fae:	85 db                	test   ebx,ebx
c0019fb0:	74 14                	je     c0019fc6 <sysCallRmdir(regs*)+0x4d>
c0019fb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fb6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019fb8:	83 ec 0c             	sub    esp,0xc
c0019fbb:	53                   	push   ebx
c0019fbc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fc6:	85 c0                	test   eax,eax
c0019fc8:	0f 95 c0             	setne  al
c0019fcb:	31 d2                	xor    edx,edx
c0019fcd:	0f b6 c0             	movzx  eax,al
c0019fd0:	f7 d8                	neg    eax
c0019fd2:	83 d2 00             	adc    edx,0x0
c0019fd5:	83 c4 14             	add    esp,0x14
c0019fd8:	f7 da                	neg    edx
c0019fda:	5b                   	pop    ebx
c0019fdb:	5e                   	pop    esi
c0019fdc:	c3                   	ret    

c0019fdd <sysCallUnlink(regs*)>:
c0019fdd:	56                   	push   esi
c0019fde:	53                   	push   ebx
c0019fdf:	83 ec 20             	sub    esp,0x20
c0019fe2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019fe6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019fe9:	68 14 01 00 00       	push   0x114
c0019fee:	e8 df 54 ff ff       	call   c000f4d2 <malloc>
c0019ff3:	83 c4 0c             	add    esp,0xc
c0019ff6:	89 c3                	mov    ebx,eax
c0019ff8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ffd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a000:	56                   	push   esi
c001a001:	53                   	push   ebx
c001a002:	e8 6d 8b ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c001a007:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a00a:	e8 41 8d ff ff       	call   c0012d50 <File::unlink()>
c001a00f:	83 c4 10             	add    esp,0x10
c001a012:	85 db                	test   ebx,ebx
c001a014:	74 14                	je     c001a02a <sysCallUnlink(regs*)+0x4d>
c001a016:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a01a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a01c:	83 ec 0c             	sub    esp,0xc
c001a01f:	53                   	push   ebx
c001a020:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a023:	83 c4 10             	add    esp,0x10
c001a026:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a02a:	85 c0                	test   eax,eax
c001a02c:	0f 95 c0             	setne  al
c001a02f:	31 d2                	xor    edx,edx
c001a031:	0f b6 c0             	movzx  eax,al
c001a034:	f7 d8                	neg    eax
c001a036:	83 d2 00             	adc    edx,0x0
c001a039:	83 c4 14             	add    esp,0x14
c001a03c:	f7 da                	neg    edx
c001a03e:	5b                   	pop    ebx
c001a03f:	5e                   	pop    esi
c001a040:	c3                   	ret    

c001a041 <sysCallGetArgv(regs*)>:
c001a041:	83 ec 0c             	sub    esp,0xc
c001a044:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a048:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a04b:	85 c0                	test   eax,eax
c001a04d:	78 2b                	js     c001a07a <sysCallGetArgv(regs*)+0x39>
c001a04f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a055:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a058:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001a05e:	7d 1a                	jge    c001a07a <sysCallGetArgv(regs*)+0x39>
c001a060:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001a067:	85 c0                	test   eax,eax
c001a069:	74 17                	je     c001a082 <sysCallGetArgv(regs*)+0x41>
c001a06b:	83 ec 08             	sub    esp,0x8
c001a06e:	50                   	push   eax
c001a06f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001a072:	e8 a5 66 fe ff       	call   c000071c <strcpy>
c001a077:	83 c4 10             	add    esp,0x10
c001a07a:	31 c0                	xor    eax,eax
c001a07c:	31 d2                	xor    edx,edx
c001a07e:	83 c4 0c             	add    esp,0xc
c001a081:	c3                   	ret    
c001a082:	b8 01 00 00 00       	mov    eax,0x1
c001a087:	31 d2                	xor    edx,edx
c001a089:	83 c4 0c             	add    esp,0xc
c001a08c:	c3                   	ret    

c001a08d <sysCallTTYName(regs*)>:
c001a08d:	56                   	push   esi
c001a08e:	53                   	push   ebx
c001a08f:	53                   	push   ebx
c001a090:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a094:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a097:	85 c0                	test   eax,eax
c001a099:	74 5f                	je     c001a0fa <sysCallTTYName(regs*)+0x6d>
c001a09b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a09e:	83 f8 02             	cmp    eax,0x2
c001a0a1:	77 3e                	ja     c001a0e1 <sysCallTTYName(regs*)+0x54>
c001a0a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a0ab:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001a0b1:	85 db                	test   ebx,ebx
c001a0b3:	74 45                	je     c001a0fa <sysCallTTYName(regs*)+0x6d>
c001a0b5:	83 ec 0c             	sub    esp,0xc
c001a0b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0ba:	53                   	push   ebx
c001a0bb:	ff 10                	call   DWORD PTR [eax]
c001a0bd:	83 c4 10             	add    esp,0x10
c001a0c0:	84 c0                	test   al,al
c001a0c2:	74 41                	je     c001a105 <sysCallTTYName(regs*)+0x78>
c001a0c4:	83 ec 08             	sub    esp,0x8
c001a0c7:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001a0cd:	53                   	push   ebx
c001a0ce:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a0d1:	e8 46 66 fe ff       	call   c000071c <strcpy>
c001a0d6:	83 c4 10             	add    esp,0x10
c001a0d9:	31 c0                	xor    eax,eax
c001a0db:	59                   	pop    ecx
c001a0dc:	31 d2                	xor    edx,edx
c001a0de:	5b                   	pop    ebx
c001a0df:	5e                   	pop    esi
c001a0e0:	c3                   	ret    
c001a0e1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a0e6:	74 bb                	je     c001a0a3 <sysCallTTYName(regs*)+0x16>
c001a0e8:	83 ec 0c             	sub    esp,0xc
c001a0eb:	50                   	push   eax
c001a0ec:	e8 0e 74 ff ff       	call   c00114ff <getFromFileDescriptor(int)>
c001a0f1:	83 c4 10             	add    esp,0x10
c001a0f4:	89 c3                	mov    ebx,eax
c001a0f6:	85 db                	test   ebx,ebx
c001a0f8:	75 bb                	jne    c001a0b5 <sysCallTTYName(regs*)+0x28>
c001a0fa:	59                   	pop    ecx
c001a0fb:	b8 01 00 00 00       	mov    eax,0x1
c001a100:	31 d2                	xor    edx,edx
c001a102:	5b                   	pop    ebx
c001a103:	5e                   	pop    esi
c001a104:	c3                   	ret    
c001a105:	59                   	pop    ecx
c001a106:	b8 02 00 00 00       	mov    eax,0x2
c001a10b:	31 d2                	xor    edx,edx
c001a10d:	5b                   	pop    ebx
c001a10e:	5e                   	pop    esi
c001a10f:	c3                   	ret    

c001a110 <sysCallGetEnv(regs*)>:
c001a110:	83 ec 0c             	sub    esp,0xc
c001a113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a117:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001a11a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a11d:	85 c9                	test   ecx,ecx
c001a11f:	75 22                	jne    c001a143 <sysCallGetEnv(regs*)+0x33>
c001a121:	85 d2                	test   edx,edx
c001a123:	74 08                	je     c001a12d <sysCallGetEnv(regs*)+0x1d>
c001a125:	31 c0                	xor    eax,eax
c001a127:	31 d2                	xor    edx,edx
c001a129:	83 c4 0c             	add    esp,0xc
c001a12c:	c3                   	ret    
c001a12d:	83 ec 0c             	sub    esp,0xc
c001a130:	68 4c 89 02 c0       	push   0xc002894c
c001a135:	e8 60 65 fe ff       	call   c000069a <strlen>
c001a13a:	83 c4 10             	add    esp,0x10
c001a13d:	31 d2                	xor    edx,edx
c001a13f:	83 c4 0c             	add    esp,0xc
c001a142:	c3                   	ret    
c001a143:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a146:	85 d2                	test   edx,edx
c001a148:	74 05                	je     c001a14f <sysCallGetEnv(regs*)+0x3f>
c001a14a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a14d:	eb d6                	jmp    c001a125 <sysCallGetEnv(regs*)+0x15>
c001a14f:	83 ec 08             	sub    esp,0x8
c001a152:	68 4c 89 02 c0       	push   0xc002894c
c001a157:	50                   	push   eax
c001a158:	e8 bf 65 fe ff       	call   c000071c <strcpy>
c001a15d:	83 c4 10             	add    esp,0x10
c001a160:	eb c3                	jmp    c001a125 <sysCallGetEnv(regs*)+0x15>

c001a162 <sysCallUSleep(regs*)>:
c001a162:	83 ec 14             	sub    esp,0x14
c001a165:	b8 e8 03 00 00       	mov    eax,0x3e8
c001a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a16e:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001a175:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001a178:	01 ca                	add    edx,ecx
c001a17a:	52                   	push   edx
c001a17b:	50                   	push   eax
c001a17c:	e8 e3 21 00 00       	call   c001c364 <nanoSleep(unsigned long long)>
c001a181:	31 c0                	xor    eax,eax
c001a183:	31 d2                	xor    edx,edx
c001a185:	83 c4 1c             	add    esp,0x1c
c001a188:	c3                   	ret    

c001a189 <sysCallSpawn(regs*)>:
c001a189:	56                   	push   esi
c001a18a:	53                   	push   ebx
c001a18b:	53                   	push   ebx
c001a18c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a190:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001a193:	85 f6                	test   esi,esi
c001a195:	75 08                	jne    c001a19f <sysCallSpawn(regs*)+0x16>
c001a197:	59                   	pop    ecx
c001a198:	31 c0                	xor    eax,eax
c001a19a:	31 d2                	xor    edx,edx
c001a19c:	5b                   	pop    ebx
c001a19d:	5e                   	pop    esi
c001a19e:	c3                   	ret    
c001a19f:	83 ec 0c             	sub    esp,0xc
c001a1a2:	68 3b 07 00 00       	push   0x73b
c001a1a7:	e8 26 53 ff ff       	call   c000f4d2 <malloc>
c001a1ac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a1af:	89 c6                	mov    esi,eax
c001a1b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1b6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a1b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a1bc:	56                   	push   esi
c001a1bd:	e8 da 18 00 00       	call   c001ba9c <Process::Process(char const*, Process*, char**)>
c001a1c2:	83 c4 20             	add    esp,0x20
c001a1c5:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001a1cc:	75 c9                	jne    c001a197 <sysCallSpawn(regs*)+0xe>
c001a1ce:	83 ec 0c             	sub    esp,0xc
c001a1d1:	56                   	push   esi
c001a1d2:	e8 53 1e 00 00       	call   c001c02a <Process::createUserThread()>
c001a1d7:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1d9:	83 c4 10             	add    esp,0x10
c001a1dc:	99                   	cdq    
c001a1dd:	59                   	pop    ecx
c001a1de:	5b                   	pop    ebx
c001a1df:	5e                   	pop    esi
c001a1e0:	c3                   	ret    

c001a1e1 <sysAppSettings(regs*)>:
c001a1e1:	53                   	push   ebx
c001a1e2:	83 ec 08             	sub    esp,0x8
c001a1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1e9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a1ec:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001a1f2:	25 e0 1f 00 00       	and    eax,0x1fe0
c001a1f7:	66 3d c0 09          	cmp    ax,0x9c0
c001a1fb:	75 2f                	jne    c001a22c <sysAppSettings(regs*)+0x4b>
c001a1fd:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001a203:	83 e0 1f             	and    eax,0x1f
c001a206:	3c 01                	cmp    al,0x1
c001a208:	74 2e                	je     c001a238 <sysAppSettings(regs*)+0x57>
c001a20a:	3c 07                	cmp    al,0x7
c001a20c:	0f 84 bd 00 00 00    	je     c001a2cf <sysAppSettings(regs*)+0xee>
c001a212:	84 c0                	test   al,al
c001a214:	0f 84 dc 00 00 00    	je     c001a2f6 <sysAppSettings(regs*)+0x115>
c001a21a:	3c 08                	cmp    al,0x8
c001a21c:	74 6d                	je     c001a28b <sysAppSettings(regs*)+0xaa>
c001a21e:	0f b6 c0             	movzx  eax,al
c001a221:	83 c4 08             	add    esp,0x8
c001a224:	05 e8 03 00 00       	add    eax,0x3e8
c001a229:	5b                   	pop    ebx
c001a22a:	99                   	cdq    
c001a22b:	c3                   	ret    
c001a22c:	b8 01 00 00 00       	mov    eax,0x1
c001a231:	31 d2                	xor    edx,edx
c001a233:	83 c4 08             	add    esp,0x8
c001a236:	5b                   	pop    ebx
c001a237:	c3                   	ret    
c001a238:	51                   	push   ecx
c001a239:	68 00 01 00 00       	push   0x100
c001a23e:	6a 00                	push   0x0
c001a240:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a245:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a248:	83 c0 0c             	add    eax,0xc
c001a24b:	50                   	push   eax
c001a24c:	e8 2c 64 fe ff       	call   c000067d <memset>
c001a251:	83 c4 0c             	add    esp,0xc
c001a254:	68 ff 00 00 00       	push   0xff
c001a259:	53                   	push   ebx
c001a25a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a25f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a262:	83 c0 0c             	add    eax,0xc
c001a265:	50                   	push   eax
c001a266:	e8 dc 63 fe ff       	call   c0000647 <memcpy>
c001a26b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a270:	5b                   	pop    ebx
c001a271:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a274:	5a                   	pop    edx
c001a275:	8d 50 0c             	lea    edx,[eax+0xc]
c001a278:	52                   	push   edx
c001a279:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a27f:	e8 f6 63 ff ff       	call   c001067a <VgaText::setTitle(char*)>
c001a284:	83 c4 10             	add    esp,0x10
c001a287:	31 c0                	xor    eax,eax
c001a289:	eb a6                	jmp    c001a231 <sysAppSettings(regs*)+0x50>
c001a28b:	83 ec 08             	sub    esp,0x8
c001a28e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a294:	83 e0 0f             	and    eax,0xf
c001a297:	50                   	push   eax
c001a298:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a29d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a2a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2a6:	e8 bf 63 ff ff       	call   c001066a <VgaText::setTitleColour(VgaColour)>
c001a2ab:	58                   	pop    eax
c001a2ac:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a2b2:	5a                   	pop    edx
c001a2b3:	c1 e8 04             	shr    eax,0x4
c001a2b6:	83 e0 0f             	and    eax,0xf
c001a2b9:	50                   	push   eax
c001a2ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a2c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2c8:	e8 8d 63 ff ff       	call   c001065a <VgaText::setTitleTextColour(VgaColour)>
c001a2cd:	eb b5                	jmp    c001a284 <sysAppSettings(regs*)+0xa3>
c001a2cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a2d7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001a2dd:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001a2e3:	c0 e8 06             	shr    al,0x6
c001a2e6:	83 e0 01             	and    eax,0x1
c001a2e9:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001a2ef:	31 c0                	xor    eax,eax
c001a2f1:	e9 3b ff ff ff       	jmp    c001a231 <sysAppSettings(regs*)+0x50>
c001a2f6:	b8 02 00 00 00       	mov    eax,0x2
c001a2fb:	e9 31 ff ff ff       	jmp    c001a231 <sysAppSettings(regs*)+0x50>

c001a300 <sysSetFatAttrib(regs*)>:
c001a300:	57                   	push   edi
c001a301:	56                   	push   esi
c001a302:	53                   	push   ebx
c001a303:	83 ec 1c             	sub    esp,0x1c
c001a306:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a30a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a30d:	68 14 01 00 00       	push   0x114
c001a312:	e8 bb 51 ff ff       	call   c000f4d2 <malloc>
c001a317:	83 c4 0c             	add    esp,0xc
c001a31a:	89 c3                	mov    ebx,eax
c001a31c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a321:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a324:	57                   	push   edi
c001a325:	53                   	push   ebx
c001a326:	e8 49 88 ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c001a32b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a32e:	83 c4 0c             	add    esp,0xc
c001a331:	0f b6 d4             	movzx  edx,ah
c001a334:	0f b6 c0             	movzx  eax,al
c001a337:	52                   	push   edx
c001a338:	50                   	push   eax
c001a339:	53                   	push   ebx
c001a33a:	e8 ab 8a ff ff       	call   c0012dea <File::chfatattr(unsigned char, unsigned char)>
c001a33f:	83 c4 10             	add    esp,0x10
c001a342:	85 db                	test   ebx,ebx
c001a344:	74 14                	je     c001a35a <sysSetFatAttrib(regs*)+0x5a>
c001a346:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a34a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a34c:	83 ec 0c             	sub    esp,0xc
c001a34f:	53                   	push   ebx
c001a350:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a353:	83 c4 10             	add    esp,0x10
c001a356:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a35a:	85 c0                	test   eax,eax
c001a35c:	0f 95 c0             	setne  al
c001a35f:	31 d2                	xor    edx,edx
c001a361:	0f b6 c0             	movzx  eax,al
c001a364:	f7 d8                	neg    eax
c001a366:	83 d2 00             	adc    edx,0x0
c001a369:	83 c4 10             	add    esp,0x10
c001a36c:	f7 da                	neg    edx
c001a36e:	5b                   	pop    ebx
c001a36f:	5e                   	pop    esi
c001a370:	5f                   	pop    edi
c001a371:	c3                   	ret    

c001a372 <sysPipe(regs*)>:
c001a372:	57                   	push   edi
c001a373:	56                   	push   esi
c001a374:	53                   	push   ebx
c001a375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a379:	83 ec 0c             	sub    esp,0xc
c001a37c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001a37f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001a382:	6a 20                	push   0x20
c001a384:	e8 49 51 ff ff       	call   c000f4d2 <malloc>
c001a389:	89 c3                	mov    ebx,eax
c001a38b:	58                   	pop    eax
c001a38c:	5a                   	pop    edx
c001a38d:	68 00 50 00 00       	push   0x5000
c001a392:	53                   	push   ebx
c001a393:	e8 20 5c ff ff       	call   c000ffb8 <Pipe::Pipe(int)>
c001a398:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a39b:	e8 6a 6e ff ff       	call   c001120a <UnixFile::getFileDescriptor()>
c001a3a0:	89 07                	mov    DWORD PTR [edi],eax
c001a3a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3a5:	e8 60 6e ff ff       	call   c001120a <UnixFile::getFileDescriptor()>
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	89 06                	mov    DWORD PTR [esi],eax
c001a3af:	31 d2                	xor    edx,edx
c001a3b1:	5b                   	pop    ebx
c001a3b2:	31 c0                	xor    eax,eax
c001a3b4:	5e                   	pop    esi
c001a3b5:	5f                   	pop    edi
c001a3b6:	c3                   	ret    

c001a3b7 <sysGetUnixTime(regs*)>:
c001a3b7:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001a3bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a3c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3c6:	e9 85 91 ff ff       	jmp    c0013550 <Clock::timeInSecondsLocal()>

c001a3cb <string_ends_with(char const*, char const*)>:
c001a3cb:	57                   	push   edi
c001a3cc:	56                   	push   esi
c001a3cd:	53                   	push   ebx
c001a3ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3d6:	83 ec 0c             	sub    esp,0xc
c001a3d9:	53                   	push   ebx
c001a3da:	e8 bb 62 fe ff       	call   c000069a <strlen>
c001a3df:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a3e2:	89 c6                	mov    esi,eax
c001a3e4:	e8 b1 62 fe ff       	call   c000069a <strlen>
c001a3e9:	83 c4 10             	add    esp,0x10
c001a3ec:	39 c6                	cmp    esi,eax
c001a3ee:	7d 06                	jge    c001a3f6 <string_ends_with(char const*, char const*)+0x2b>
c001a3f0:	5b                   	pop    ebx
c001a3f1:	31 c0                	xor    eax,eax
c001a3f3:	5e                   	pop    esi
c001a3f4:	5f                   	pop    edi
c001a3f5:	c3                   	ret    
c001a3f6:	83 ec 08             	sub    esp,0x8
c001a3f9:	29 c6                	sub    esi,eax
c001a3fb:	57                   	push   edi
c001a3fc:	01 f3                	add    ebx,esi
c001a3fe:	53                   	push   ebx
c001a3ff:	e8 69 63 fe ff       	call   c000076d <strcmp>
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	85 c0                	test   eax,eax
c001a409:	5b                   	pop    ebx
c001a40a:	0f 94 c0             	sete   al
c001a40d:	5e                   	pop    esi
c001a40e:	0f b6 c0             	movzx  eax,al
c001a411:	5f                   	pop    edi
c001a412:	c3                   	ret    

c001a413 <sysCallOpen(regs*)>:
c001a413:	56                   	push   esi
c001a414:	53                   	push   ebx
c001a415:	81 ec 04 01 00 00    	sub    esp,0x104
c001a41b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a422:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a425:	85 c9                	test   ecx,ecx
c001a427:	0f 84 b3 00 00 00    	je     c001a4e0 <sysCallOpen(regs*)+0xcd>
c001a42d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a430:	85 c0                	test   eax,eax
c001a432:	0f 84 a8 00 00 00    	je     c001a4e0 <sysCallOpen(regs*)+0xcd>
c001a438:	52                   	push   edx
c001a439:	68 2c 8a 02 c0       	push   0xc0028a2c
c001a43e:	50                   	push   eax
c001a43f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a443:	56                   	push   esi
c001a444:	e8 81 85 ff ff       	call   c00129ca <standardiseFiles(char*, char const*, char const*)>
c001a449:	89 34 24             	mov    DWORD PTR [esp],esi
c001a44c:	e8 49 62 fe ff       	call   c000069a <strlen>
c001a451:	83 c4 10             	add    esp,0x10
c001a454:	48                   	dec    eax
c001a455:	74 1d                	je     c001a474 <sysCallOpen(regs*)+0x61>
c001a457:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a45a:	eb 0f                	jmp    c001a46b <sysCallOpen(regs*)+0x58>
c001a45c:	80 fa 3a             	cmp    dl,0x3a
c001a45f:	74 0f                	je     c001a470 <sysCallOpen(regs*)+0x5d>
c001a461:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a465:	48                   	dec    eax
c001a466:	74 0c                	je     c001a474 <sysCallOpen(regs*)+0x61>
c001a468:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a46b:	80 fa 2e             	cmp    dl,0x2e
c001a46e:	75 ec                	jne    c001a45c <sysCallOpen(regs*)+0x49>
c001a470:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a474:	83 ec 08             	sub    esp,0x8
c001a477:	68 30 8a 02 c0       	push   0xc0028a30
c001a47c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a47f:	e8 47 ff ff ff       	call   c001a3cb <string_ends_with(char const*, char const*)>
c001a484:	83 c4 10             	add    esp,0x10
c001a487:	85 c0                	test   eax,eax
c001a489:	75 17                	jne    c001a4a2 <sysCallOpen(regs*)+0x8f>
c001a48b:	83 ec 08             	sub    esp,0x8
c001a48e:	68 51 8a 02 c0       	push   0xc0028a51
c001a493:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a496:	e8 30 ff ff ff       	call   c001a3cb <string_ends_with(char const*, char const*)>
c001a49b:	83 c4 10             	add    esp,0x10
c001a49e:	85 c0                	test   eax,eax
c001a4a0:	74 51                	je     c001a4f3 <sysCallOpen(regs*)+0xe0>
c001a4a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a4a5:	83 ec 08             	sub    esp,0x8
c001a4a8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a4ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a4b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a4b8:	ff 30                	push   DWORD PTR [eax]
c001a4ba:	68 35 8a 02 c0       	push   0xc0028a35
c001a4bf:	e8 81 81 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001a4c4:	c7 04 24 44 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a44
c001a4cb:	e8 75 81 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001a4d0:	83 c4 10             	add    esp,0x10
c001a4d3:	81 c4 04 01 00 00    	add    esp,0x104
c001a4d9:	31 c0                	xor    eax,eax
c001a4db:	31 d2                	xor    edx,edx
c001a4dd:	5b                   	pop    ebx
c001a4de:	5e                   	pop    esi
c001a4df:	c3                   	ret    
c001a4e0:	81 c4 04 01 00 00    	add    esp,0x104
c001a4e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a4eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a4f0:	5b                   	pop    ebx
c001a4f1:	5e                   	pop    esi
c001a4f2:	c3                   	ret    
c001a4f3:	83 ec 08             	sub    esp,0x8
c001a4f6:	68 31 8a 02 c0       	push   0xc0028a31
c001a4fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a4fe:	e8 6a 62 fe ff       	call   c000076d <strcmp>
c001a503:	83 c4 10             	add    esp,0x10
c001a506:	85 c0                	test   eax,eax
c001a508:	74 98                	je     c001a4a2 <sysCallOpen(regs*)+0x8f>
c001a50a:	83 ec 08             	sub    esp,0x8
c001a50d:	68 30 8a 02 c0       	push   0xc0028a30
c001a512:	56                   	push   esi
c001a513:	e8 b3 fe ff ff       	call   c001a3cb <string_ends_with(char const*, char const*)>
c001a518:	83 c4 10             	add    esp,0x10
c001a51b:	85 c0                	test   eax,eax
c001a51d:	75 83                	jne    c001a4a2 <sysCallOpen(regs*)+0x8f>
c001a51f:	83 ec 08             	sub    esp,0x8
c001a522:	68 56 8a 02 c0       	push   0xc0028a56
c001a527:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a52a:	e8 9c fe ff ff       	call   c001a3cb <string_ends_with(char const*, char const*)>
c001a52f:	83 c4 10             	add    esp,0x10
c001a532:	85 c0                	test   eax,eax
c001a534:	0f 85 d9 00 00 00    	jne    c001a613 <sysCallOpen(regs*)+0x200>
c001a53a:	83 ec 08             	sub    esp,0x8
c001a53d:	68 5b 8a 02 c0       	push   0xc0028a5b
c001a542:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a545:	e8 81 fe ff ff       	call   c001a3cb <string_ends_with(char const*, char const*)>
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	85 c0                	test   eax,eax
c001a54f:	0f 85 be 00 00 00    	jne    c001a613 <sysCallOpen(regs*)+0x200>
c001a555:	83 ec 08             	sub    esp,0x8
c001a558:	68 57 8a 02 c0       	push   0xc0028a57
c001a55d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a560:	e8 08 62 fe ff       	call   c000076d <strcmp>
c001a565:	83 c4 10             	add    esp,0x10
c001a568:	85 c0                	test   eax,eax
c001a56a:	0f 84 a3 00 00 00    	je     c001a613 <sysCallOpen(regs*)+0x200>
c001a570:	83 ec 08             	sub    esp,0x8
c001a573:	68 56 8a 02 c0       	push   0xc0028a56
c001a578:	56                   	push   esi
c001a579:	e8 4d fe ff ff       	call   c001a3cb <string_ends_with(char const*, char const*)>
c001a57e:	83 c4 10             	add    esp,0x10
c001a581:	85 c0                	test   eax,eax
c001a583:	0f 85 8a 00 00 00    	jne    c001a613 <sysCallOpen(regs*)+0x200>
c001a589:	83 ec 0c             	sub    esp,0xc
c001a58c:	68 14 01 00 00       	push   0x114
c001a591:	e8 3c 4f ff ff       	call   c000f4d2 <malloc>
c001a596:	83 c4 0c             	add    esp,0xc
c001a599:	89 c6                	mov    esi,eax
c001a59b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5a0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a5a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5a6:	56                   	push   esi
c001a5a7:	e8 c8 85 ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c001a5ac:	83 c4 10             	add    esp,0x10
c001a5af:	85 f6                	test   esi,esi
c001a5b1:	0f 84 29 ff ff ff    	je     c001a4e0 <sysCallOpen(regs*)+0xcd>
c001a5b7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a5ba:	0f b6 c2             	movzx  eax,dl
c001a5bd:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a5c0:	89 d0                	mov    eax,edx
c001a5c2:	83 e0 01             	and    eax,0x1
c001a5c5:	f6 c2 02             	test   dl,0x2
c001a5c8:	74 03                	je     c001a5cd <sysCallOpen(regs*)+0x1ba>
c001a5ca:	83 c8 02             	or     eax,0x2
c001a5cd:	f6 c2 04             	test   dl,0x4
c001a5d0:	74 03                	je     c001a5d5 <sysCallOpen(regs*)+0x1c2>
c001a5d2:	83 c8 04             	or     eax,0x4
c001a5d5:	f6 c2 08             	test   dl,0x8
c001a5d8:	74 03                	je     c001a5dd <sysCallOpen(regs*)+0x1ca>
c001a5da:	83 c8 0a             	or     eax,0xa
c001a5dd:	83 e2 10             	and    edx,0x10
c001a5e0:	74 03                	je     c001a5e5 <sysCallOpen(regs*)+0x1d2>
c001a5e2:	83 c8 12             	or     eax,0x12
c001a5e5:	83 ec 08             	sub    esp,0x8
c001a5e8:	50                   	push   eax
c001a5e9:	56                   	push   esi
c001a5ea:	e8 e9 85 ff ff       	call   c0012bd8 <File::open(FileOpenMode)>
c001a5ef:	83 c4 10             	add    esp,0x10
c001a5f2:	85 c0                	test   eax,eax
c001a5f4:	0f 85 e6 fe ff ff    	jne    c001a4e0 <sysCallOpen(regs*)+0xcd>
c001a5fa:	83 ec 0c             	sub    esp,0xc
c001a5fd:	56                   	push   esi
c001a5fe:	e8 07 6c ff ff       	call   c001120a <UnixFile::getFileDescriptor()>
c001a603:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a606:	89 02                	mov    DWORD PTR [edx],eax
c001a608:	c1 f8 1f             	sar    eax,0x1f
c001a60b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a60e:	e9 bd fe ff ff       	jmp    c001a4d0 <sysCallOpen(regs*)+0xbd>
c001a613:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a616:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a61c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a623:	e9 ab fe ff ff       	jmp    c001a4d3 <sysCallOpen(regs*)+0xc0>

c001a628 <setupSystemCalls()>:
c001a628:	c7 05 a0 b5 02 c0 13 98 01 c0 	mov    DWORD PTR ds:0xc002b5a0,0xc0019813
c001a632:	c7 05 a4 b5 02 c0 2e 96 01 c0 	mov    DWORD PTR ds:0xc002b5a4,0xc001962e
c001a63c:	c7 05 a8 b5 02 c0 56 97 01 c0 	mov    DWORD PTR ds:0xc002b5a8,0xc0019756
c001a646:	c7 05 ac b5 02 c0 ab 97 01 c0 	mov    DWORD PTR ds:0xc002b5ac,0xc00197ab
c001a650:	c7 05 b0 b5 02 c0 ee 96 01 c0 	mov    DWORD PTR ds:0xc002b5b0,0xc00196ee
c001a65a:	c7 05 b4 b5 02 c0 2d 98 01 c0 	mov    DWORD PTR ds:0xc002b5b4,0xc001982d
c001a664:	c7 05 b8 b5 02 c0 bc 99 01 c0 	mov    DWORD PTR ds:0xc002b5b8,0xc00199bc
c001a66e:	c7 05 bc b5 02 c0 db 99 01 c0 	mov    DWORD PTR ds:0xc002b5bc,0xc00199db
c001a678:	c7 05 c4 b5 02 c0 4b 9d 01 c0 	mov    DWORD PTR ds:0xc002b5c4,0xc0019d4b
c001a682:	c7 05 c0 b5 02 c0 13 a4 01 c0 	mov    DWORD PTR ds:0xc002b5c0,0xc001a413
c001a68c:	c7 05 c8 b5 02 c0 d3 9d 01 c0 	mov    DWORD PTR ds:0xc002b5c8,0xc0019dd3
c001a696:	c7 05 cc b5 02 c0 3a 9a 01 c0 	mov    DWORD PTR ds:0xc002b5cc,0xc0019a3a
c001a6a0:	c7 05 d0 b5 02 c0 39 98 01 c0 	mov    DWORD PTR ds:0xc002b5d0,0xc0019839
c001a6aa:	c7 05 d4 b5 02 c0 3e 98 01 c0 	mov    DWORD PTR ds:0xc002b5d4,0xc001983e
c001a6b4:	c7 05 d8 b5 02 c0 ae 9e 01 c0 	mov    DWORD PTR ds:0xc002b5d8,0xc0019eae
c001a6be:	c7 05 dc b5 02 c0 48 9e 01 c0 	mov    DWORD PTR ds:0xc002b5dc,0xc0019e48
c001a6c8:	c7 05 e0 b5 02 c0 22 9b 01 c0 	mov    DWORD PTR ds:0xc002b5e0,0xc0019b22
c001a6d2:	c7 05 e4 b5 02 c0 8b 9b 01 c0 	mov    DWORD PTR ds:0xc002b5e4,0xc0019b8b
c001a6dc:	c7 05 e8 b5 02 c0 08 9c 01 c0 	mov    DWORD PTR ds:0xc002b5e8,0xc0019c08
c001a6e6:	c7 05 ec b5 02 c0 43 98 01 c0 	mov    DWORD PTR ds:0xc002b5ec,0xc0019843
c001a6f0:	c7 05 f0 b5 02 c0 1e 9f 01 c0 	mov    DWORD PTR ds:0xc002b5f0,0xc0019f1e
c001a6fa:	c7 05 f4 b5 02 c0 38 9f 01 c0 	mov    DWORD PTR ds:0xc002b5f4,0xc0019f38
c001a704:	c7 05 f8 b5 02 c0 38 9f 01 c0 	mov    DWORD PTR ds:0xc002b5f8,0xc0019f38
c001a70e:	c7 05 fc b5 02 c0 79 9f 01 c0 	mov    DWORD PTR ds:0xc002b5fc,0xc0019f79
c001a718:	c7 05 00 b6 02 c0 dd 9f 01 c0 	mov    DWORD PTR ds:0xc002b600,0xc0019fdd
c001a722:	c7 05 04 b6 02 c0 4d 98 01 c0 	mov    DWORD PTR ds:0xc002b604,0xc001984d
c001a72c:	c7 05 08 b6 02 c0 41 a0 01 c0 	mov    DWORD PTR ds:0xc002b608,0xc001a041
c001a736:	c7 05 0c b6 02 c0 f7 99 01 c0 	mov    DWORD PTR ds:0xc002b60c,0xc00199f7
c001a740:	c7 05 10 b6 02 c0 8d a0 01 c0 	mov    DWORD PTR ds:0xc002b610,0xc001a08d
c001a74a:	c7 05 14 b6 02 c0 c8 9a 01 c0 	mov    DWORD PTR ds:0xc002b614,0xc0019ac8
c001a754:	c7 05 18 b6 02 c0 62 a1 01 c0 	mov    DWORD PTR ds:0xc002b618,0xc001a162
c001a75e:	c7 05 1c b6 02 c0 8b 9c 01 c0 	mov    DWORD PTR ds:0xc002b61c,0xc0019c8b
c001a768:	c7 05 20 b6 02 c0 89 a1 01 c0 	mov    DWORD PTR ds:0xc002b620,0xc001a189
c001a772:	c7 05 24 b6 02 c0 10 a1 01 c0 	mov    DWORD PTR ds:0xc002b624,0xc001a110
c001a77c:	c7 05 28 b6 02 c0 e1 a1 01 c0 	mov    DWORD PTR ds:0xc002b628,0xc001a1e1
c001a786:	c7 05 2c b6 02 c0 5d 98 01 c0 	mov    DWORD PTR ds:0xc002b62c,0xc001985d
c001a790:	c7 05 30 b6 02 c0 c7 98 01 c0 	mov    DWORD PTR ds:0xc002b630,0xc00198c7
c001a79a:	c7 05 34 b6 02 c0 0d 99 01 c0 	mov    DWORD PTR ds:0xc002b634,0xc001990d
c001a7a4:	c7 05 38 b6 02 c0 00 a3 01 c0 	mov    DWORD PTR ds:0xc002b638,0xc001a300
c001a7ae:	c7 05 3c b6 02 c0 53 9f 01 c0 	mov    DWORD PTR ds:0xc002b63c,0xc0019f53
c001a7b8:	c7 05 40 b6 02 c0 5e 99 01 c0 	mov    DWORD PTR ds:0xc002b640,0xc001995e
c001a7c2:	c7 05 44 b6 02 c0 72 a3 01 c0 	mov    DWORD PTR ds:0xc002b644,0xc001a372
c001a7cc:	c7 05 48 b6 02 c0 b7 a3 01 c0 	mov    DWORD PTR ds:0xc002b648,0xc001a3b7
c001a7d6:	c7 05 4c b6 02 c0 46 96 01 c0 	mov    DWORD PTR ds:0xc002b64c,0xc0019646
c001a7e0:	c3                   	ret    

c001a7e1 <systemCall(regs*, void*)>:
c001a7e1:	53                   	push   ebx
c001a7e2:	83 ec 08             	sub    esp,0x8
c001a7e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a7ec:	83 f8 7f             	cmp    eax,0x7f
c001a7ef:	77 16                	ja     c001a807 <systemCall(regs*, void*)+0x26>
c001a7f1:	8b 14 85 a0 b5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4a60]
c001a7f8:	85 d2                	test   edx,edx
c001a7fa:	74 0b                	je     c001a807 <systemCall(regs*, void*)+0x26>
c001a7fc:	83 ec 0c             	sub    esp,0xc
c001a7ff:	53                   	push   ebx
c001a800:	ff d2                	call   edx
c001a802:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a805:	eb 0d                	jmp    c001a814 <systemCall(regs*, void*)+0x33>
c001a807:	52                   	push   edx
c001a808:	52                   	push   edx
c001a809:	50                   	push   eax
c001a80a:	68 60 8a 02 c0       	push   0xc0028a60
c001a80f:	e8 31 7e ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001a814:	83 c4 10             	add    esp,0x10
c001a817:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a81c:	31 d2                	xor    edx,edx
c001a81e:	83 c4 08             	add    esp,0x8
c001a821:	5b                   	pop    ebx
c001a822:	c3                   	ret    

c001a823 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a823:	55                   	push   ebp
c001a824:	89 e5                	mov    ebp,esp
c001a826:	57                   	push   edi
c001a827:	56                   	push   esi
c001a828:	53                   	push   ebx
c001a829:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a82f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a832:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a835:	85 c0                	test   eax,eax
c001a837:	0f 95 c1             	setne  cl
c001a83a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a83e:	0f 94 c2             	sete   dl
c001a841:	84 d1                	test   cl,dl
c001a843:	74 26                	je     c001a86b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a845:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a84c:	74 1d                	je     c001a86b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a84e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a851:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a857:	89 d6                	mov    esi,edx
c001a859:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a85f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a865:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a868:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a86b:	83 ec 0c             	sub    esp,0xc
c001a86e:	05 ff 0f 00 00       	add    eax,0xfff
c001a873:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a876:	6a 01                	push   0x1
c001a878:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a87e:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a884:	e8 cc 6d ff ff       	call   c0011655 <Virt::allocateKernelVirtualPages(int)>
c001a889:	83 c4 10             	add    esp,0x10
c001a88c:	89 c6                	mov    esi,eax
c001a88e:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a894:	0f 86 21 01 00 00    	jbe    c001a9bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a89a:	c1 eb 0c             	shr    ebx,0xc
c001a89d:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a8a7:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a8ad:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a8b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a8b3:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a8b9:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a8bc:	29 d8                	sub    eax,ebx
c001a8be:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a8c4:	0f 83 f4 00 00 00    	jae    c001a9be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a8ca:	83 ec 0c             	sub    esp,0xc
c001a8cd:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a8d3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a8d6:	3d 00 10 00 00       	cmp    eax,0x1000
c001a8db:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a8dd:	52                   	push   edx
c001a8de:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a8e4:	52                   	push   edx
c001a8e5:	76 05                	jbe    c001a8ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a8e7:	b8 00 10 00 00       	mov    eax,0x1000
c001a8ec:	31 d2                	xor    edx,edx
c001a8ee:	52                   	push   edx
c001a8ef:	50                   	push   eax
c001a8f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a8f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a8f6:	83 c4 20             	add    esp,0x20
c001a8f9:	85 c0                	test   eax,eax
c001a8fb:	74 1f                	je     c001a91c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a8fd:	51                   	push   ecx
c001a8fe:	51                   	push   ecx
c001a8ff:	50                   	push   eax
c001a900:	68 74 8a 02 c0       	push   0xc0028a74
c001a905:	e8 3b 7d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001a90a:	89 34 24             	mov    DWORD PTR [esp],esi
c001a90d:	e8 a7 70 ff ff       	call   c00119b9 <Virt::freeKernelVirtualPages(unsigned long)>
c001a912:	83 c4 10             	add    esp,0x10
c001a915:	31 c0                	xor    eax,eax
c001a917:	e9 7c 01 00 00       	jmp    c001aa98 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a91c:	e8 f4 14 00 00       	call   c001be15 <lockScheduler()>
c001a921:	e8 56 51 ff ff       	call   c000fa7c <Phys::allocatePage()>
c001a926:	6a 07                	push   0x7
c001a928:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a92e:	56                   	push   esi
c001a92f:	50                   	push   eax
c001a930:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a936:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a939:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a93f:	e8 dc 73 ff ff       	call   c0011d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a944:	83 c4 0c             	add    esp,0xc
c001a947:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a94d:	6a 00                	push   0x0
c001a94f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a955:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a958:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a95e:	e8 27 72 ff ff       	call   c0011b8a <VAS::mapOtherVASIn(bool, VAS*)>
c001a963:	58                   	pop    eax
c001a964:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a96a:	5a                   	pop    edx
c001a96b:	68 07 04 00 00       	push   0x407
c001a970:	53                   	push   ebx
c001a971:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a977:	50                   	push   eax
c001a978:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a97e:	6a 00                	push   0x0
c001a980:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a985:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a988:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a98e:	e8 47 77 ff ff       	call   c00120da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a993:	83 c4 1c             	add    esp,0x1c
c001a996:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a99c:	68 00 10 00 00       	push   0x1000
c001a9a1:	50                   	push   eax
c001a9a2:	56                   	push   esi
c001a9a3:	e8 9f 5c fe ff       	call   c0000647 <memcpy>
c001a9a8:	e8 6a 14 00 00       	call   c001be17 <unlockScheduler()>
c001a9ad:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a9b3:	83 c4 10             	add    esp,0x10
c001a9b6:	e9 f5 fe ff ff       	jmp    c001a8b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a9bb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a9be:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a9c8:	0f 86 bc 00 00 00    	jbe    c001aa8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a9ce:	e8 42 14 00 00       	call   c001be15 <lockScheduler()>
c001a9d3:	51                   	push   ecx
c001a9d4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a9da:	6a 00                	push   0x0
c001a9dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9e4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a9ea:	e8 9b 71 ff ff       	call   c0011b8a <VAS::mapOtherVASIn(bool, VAS*)>
c001a9ef:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a9f5:	83 c4 10             	add    esp,0x10
c001a9f8:	c1 e8 0c             	shr    eax,0xc
c001a9fb:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001aa05:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001aa0b:	e8 6c 50 ff ff       	call   c000fa7c <Phys::allocatePage()>
c001aa10:	6a 07                	push   0x7
c001aa12:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001aa18:	56                   	push   esi
c001aa19:	50                   	push   eax
c001aa1a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aa20:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aa23:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001aa29:	e8 f2 72 ff ff       	call   c0011d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001aa2e:	58                   	pop    eax
c001aa2f:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001aa35:	5a                   	pop    edx
c001aa36:	68 07 04 00 00       	push   0x407
c001aa3b:	53                   	push   ebx
c001aa3c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001aa42:	50                   	push   eax
c001aa43:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001aa49:	6a 00                	push   0x0
c001aa4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa53:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001aa59:	e8 7c 76 ff ff       	call   c00120da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001aa5e:	83 c4 1c             	add    esp,0x1c
c001aa61:	68 00 10 00 00       	push   0x1000
c001aa66:	6a 00                	push   0x0
c001aa68:	56                   	push   esi
c001aa69:	e8 0f 5c fe ff       	call   c000067d <memset>
c001aa6e:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001aa74:	83 c4 10             	add    esp,0x10
c001aa77:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001aa7d:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001aa83:	77 86                	ja     c001aa0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001aa85:	e8 8d 13 00 00       	call   c001be17 <unlockScheduler()>
c001aa8a:	83 ec 0c             	sub    esp,0xc
c001aa8d:	56                   	push   esi
c001aa8e:	e8 26 6f ff ff       	call   c00119b9 <Virt::freeKernelVirtualPages(unsigned long)>
c001aa93:	83 c4 10             	add    esp,0x10
c001aa96:	b0 01                	mov    al,0x1
c001aa98:	8d 65 f4             	lea    esp,[ebp-0xc]
c001aa9b:	5b                   	pop    ebx
c001aa9c:	5e                   	pop    esi
c001aa9d:	5f                   	pop    edi
c001aa9e:	5d                   	pop    ebp
c001aa9f:	c3                   	ret    

c001aaa0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001aaa0:	55                   	push   ebp
c001aaa1:	57                   	push   edi
c001aaa2:	56                   	push   esi
c001aaa3:	53                   	push   ebx
c001aaa4:	83 ec 48             	sub    esp,0x48
c001aaa7:	68 14 01 00 00       	push   0x114
c001aaac:	e8 21 4a ff ff       	call   c000f4d2 <malloc>
c001aab1:	83 c4 0c             	add    esp,0xc
c001aab4:	89 c6                	mov    esi,eax
c001aab6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001aaba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aabe:	50                   	push   eax
c001aabf:	e8 b0 80 ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c001aac4:	58                   	pop    eax
c001aac5:	5a                   	pop    edx
c001aac6:	6a 01                	push   0x1
c001aac8:	56                   	push   esi
c001aac9:	e8 0a 81 ff ff       	call   c0012bd8 <File::open(FileOpenMode)>
c001aace:	83 c4 10             	add    esp,0x10
c001aad1:	85 c0                	test   eax,eax
c001aad3:	0f 85 47 01 00 00    	jne    c001ac20 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001aad9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001aae1:	83 ec 0c             	sub    esp,0xc
c001aae4:	6a 34                	push   0x34
c001aae6:	e8 e7 49 ff ff       	call   c000f4d2 <malloc>
c001aaeb:	89 c3                	mov    ebx,eax
c001aaed:	58                   	pop    eax
c001aaee:	8b 06                	mov    eax,DWORD PTR [esi]
c001aaf0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001aaf4:	57                   	push   edi
c001aaf5:	53                   	push   ebx
c001aaf6:	6a 00                	push   0x0
c001aaf8:	6a 34                	push   0x34
c001aafa:	56                   	push   esi
c001aafb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aafe:	83 c4 20             	add    esp,0x20
c001ab01:	85 c0                	test   eax,eax
c001ab03:	0f 85 17 01 00 00    	jne    c001ac20 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab09:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ab0f:	0f 85 0b 01 00 00    	jne    c001ac20 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ab18:	85 c0                	test   eax,eax
c001ab1a:	0f 84 00 01 00 00    	je     c001ac20 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab20:	31 d2                	xor    edx,edx
c001ab22:	55                   	push   ebp
c001ab23:	52                   	push   edx
c001ab24:	50                   	push   eax
c001ab25:	56                   	push   esi
c001ab26:	e8 6b 81 ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001ab2b:	83 c4 10             	add    esp,0x10
c001ab2e:	85 c0                	test   eax,eax
c001ab30:	0f 85 ea 00 00 00    	jne    c001ac20 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab36:	83 ec 0c             	sub    esp,0xc
c001ab39:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ab3c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ab40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ab44:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ab48:	0f af c2             	imul   eax,edx
c001ab4b:	50                   	push   eax
c001ab4c:	e8 81 49 ff ff       	call   c000f4d2 <malloc>
c001ab51:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ab53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab57:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ab5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab5e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ab62:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ab66:	0f af c2             	imul   eax,edx
c001ab69:	99                   	cdq    
c001ab6a:	52                   	push   edx
c001ab6b:	50                   	push   eax
c001ab6c:	56                   	push   esi
c001ab6d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ab70:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ab73:	83 c4 20             	add    esp,0x20
c001ab76:	85 c0                	test   eax,eax
c001ab78:	0f 84 a2 00 00 00    	je     c001ac20 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab7e:	31 d2                	xor    edx,edx
c001ab80:	51                   	push   ecx
c001ab81:	52                   	push   edx
c001ab82:	50                   	push   eax
c001ab83:	56                   	push   esi
c001ab84:	e8 0d 81 ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	85 c0                	test   eax,eax
c001ab8e:	0f 85 8c 00 00 00    	jne    c001ac20 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ab94:	83 ec 0c             	sub    esp,0xc
c001ab97:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ab9b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ab9f:	31 ed                	xor    ebp,ebp
c001aba1:	0f af c2             	imul   eax,edx
c001aba4:	50                   	push   eax
c001aba5:	e8 28 49 ff ff       	call   c000f4d2 <malloc>
c001abaa:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001abac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abb0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001abb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abb7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001abbb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001abbf:	0f af c2             	imul   eax,edx
c001abc2:	99                   	cdq    
c001abc3:	52                   	push   edx
c001abc4:	50                   	push   eax
c001abc5:	56                   	push   esi
c001abc6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001abc9:	83 c4 20             	add    esp,0x20
c001abcc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001abd4:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001abd8:	0f 86 80 00 00 00    	jbe    c001ac5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001abde:	0f b7 fd             	movzx  edi,bp
c001abe1:	c1 e7 05             	shl    edi,0x5
c001abe4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001abe8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001abeb:	75 6b                	jne    c001ac58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001abed:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001abf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abf4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001abf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abfb:	52                   	push   edx
c001abfc:	31 d2                	xor    edx,edx
c001abfe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ac01:	52                   	push   edx
c001ac02:	50                   	push   eax
c001ac03:	56                   	push   esi
c001ac04:	e8 8d 80 ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001ac09:	83 c4 10             	add    esp,0x10
c001ac0c:	85 c0                	test   eax,eax
c001ac0e:	74 17                	je     c001ac27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ac10:	83 ec 0c             	sub    esp,0xc
c001ac13:	68 9f 8a 02 c0       	push   0xc0028a9f
c001ac18:	e8 28 7a ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001ac1d:	83 c4 10             	add    esp,0x10
c001ac20:	31 c0                	xor    eax,eax
c001ac22:	e9 87 00 00 00       	jmp    c001acae <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ac27:	83 ec 0c             	sub    esp,0xc
c001ac2a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ac2d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ac30:	50                   	push   eax
c001ac31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ac35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac39:	56                   	push   esi
c001ac3a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ac3e:	e8 e0 fb ff ff       	call   c001a823 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ac43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac47:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ac4b:	83 c4 20             	add    esp,0x20
c001ac4e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ac52:	73 04                	jae    c001ac58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ac54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac58:	45                   	inc    ebp
c001ac59:	e9 76 ff ff ff       	jmp    c001abd4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ac5e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ac62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac6a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ac70:	83 ec 0c             	sub    esp,0xc
c001ac73:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ac79:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ac7e:	05 00 10 00 00       	add    eax,0x1000
c001ac83:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ac86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac8a:	e8 53 48 ff ff       	call   c000f4e2 <free>
c001ac8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac92:	e8 4b 48 ff ff       	call   c000f4e2 <free>
c001ac97:	58                   	pop    eax
c001ac98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac9c:	e8 41 48 ff ff       	call   c000f4e2 <free>
c001aca1:	89 34 24             	mov    DWORD PTR [esp],esi
c001aca4:	e8 8d 7f ff ff       	call   c0012c36 <File::close()>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	b0 01                	mov    al,0x1
c001acae:	83 c4 3c             	add    esp,0x3c
c001acb1:	5b                   	pop    ebx
c001acb2:	5e                   	pop    esi
c001acb3:	5f                   	pop    edi
c001acb4:	5d                   	pop    ebp
c001acb5:	c3                   	ret    

c001acb6 <Thr::runtimeReferenceHelper()>:
c001acb6:	83 ec 18             	sub    esp,0x18
c001acb9:	68 a7 8a 02 c0       	push   0xc0028aa7
c001acbe:	e8 82 79 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001acc3:	fa                   	cli    
c001acc4:	83 c4 10             	add    esp,0x10
c001acc7:	eb fe                	jmp    c001acc7 <Thr::runtimeReferenceHelper()+0x11>

c001acc9 <Thr::getAddressOfKernelSymbol(char const*)>:
c001acc9:	57                   	push   edi
c001acca:	56                   	push   esi
c001accb:	53                   	push   ebx
c001accc:	31 db                	xor    ebx,ebx
c001acce:	39 1d 40 bf 02 c0    	cmp    DWORD PTR ds:0xc002bf40,ebx
c001acd4:	7e 3c                	jle    c001ad12 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001acd6:	8b 34 9d c0 be 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4140]
c001acdd:	31 ff                	xor    edi,edi
c001acdf:	39 3c 9d c0 bd 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4240],edi
c001ace6:	7e 27                	jle    c001ad0f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ace8:	50                   	push   eax
c001ace9:	50                   	push   eax
c001acea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001acee:	8b 06                	mov    eax,DWORD PTR [esi]
c001acf0:	03 04 9d 40 be 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c001acf7:	50                   	push   eax
c001acf8:	e8 70 5a fe ff       	call   c000076d <strcmp>
c001acfd:	83 c4 10             	add    esp,0x10
c001ad00:	85 c0                	test   eax,eax
c001ad02:	75 05                	jne    c001ad09 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001ad04:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ad07:	eb 0b                	jmp    c001ad14 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ad09:	83 c6 10             	add    esi,0x10
c001ad0c:	47                   	inc    edi
c001ad0d:	eb d0                	jmp    c001acdf <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ad0f:	43                   	inc    ebx
c001ad10:	eb bc                	jmp    c001acce <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ad12:	31 c0                	xor    eax,eax
c001ad14:	5b                   	pop    ebx
c001ad15:	5e                   	pop    esi
c001ad16:	5f                   	pop    edi
c001ad17:	c3                   	ret    

c001ad18 <Thr::loadKernelSymbolTable(char const*)>:
c001ad18:	55                   	push   ebp
c001ad19:	57                   	push   edi
c001ad1a:	56                   	push   esi
c001ad1b:	53                   	push   ebx
c001ad1c:	83 ec 68             	sub    esp,0x68
c001ad1f:	8b 35 94 bf 02 c0    	mov    esi,DWORD PTR ds:0xc002bf94
c001ad25:	68 14 01 00 00       	push   0x114
c001ad2a:	e8 a3 47 ff ff       	call   c000f4d2 <malloc>
c001ad2f:	83 c4 0c             	add    esp,0xc
c001ad32:	89 c3                	mov    ebx,eax
c001ad34:	56                   	push   esi
c001ad35:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ad39:	50                   	push   eax
c001ad3a:	e8 35 7e ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c001ad3f:	5e                   	pop    esi
c001ad40:	5f                   	pop    edi
c001ad41:	6a 01                	push   0x1
c001ad43:	53                   	push   ebx
c001ad44:	e8 8f 7e ff ff       	call   c0012bd8 <File::open(FileOpenMode)>
c001ad49:	83 c4 10             	add    esp,0x10
c001ad4c:	31 d2                	xor    edx,edx
c001ad4e:	85 c0                	test   eax,eax
c001ad50:	0f 85 74 02 00 00    	jne    c001afca <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001ad56:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ad5e:	83 ec 0c             	sub    esp,0xc
c001ad61:	6a 34                	push   0x34
c001ad63:	e8 6a 47 ff ff       	call   c000f4d2 <malloc>
c001ad68:	59                   	pop    ecx
c001ad69:	89 c7                	mov    edi,eax
c001ad6b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ad6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad71:	56                   	push   esi
c001ad72:	57                   	push   edi
c001ad73:	6a 00                	push   0x0
c001ad75:	6a 34                	push   0x34
c001ad77:	53                   	push   ebx
c001ad78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad7b:	83 c4 20             	add    esp,0x20
c001ad7e:	85 c0                	test   eax,eax
c001ad80:	74 17                	je     c001ad99 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001ad82:	83 ec 0c             	sub    esp,0xc
c001ad85:	68 c9 8a 02 c0       	push   0xc0028ac9
c001ad8a:	e8 7a e0 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	31 d2                	xor    edx,edx
c001ad94:	e9 31 02 00 00       	jmp    c001afca <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001ad99:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ad9f:	75 e1                	jne    c001ad82 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001ada1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ada4:	85 c0                	test   eax,eax
c001ada6:	74 da                	je     c001ad82 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001ada8:	52                   	push   edx
c001ada9:	31 d2                	xor    edx,edx
c001adab:	52                   	push   edx
c001adac:	50                   	push   eax
c001adad:	53                   	push   ebx
c001adae:	e8 e3 7e ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001adb3:	83 c4 10             	add    esp,0x10
c001adb6:	85 c0                	test   eax,eax
c001adb8:	75 c8                	jne    c001ad82 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001adba:	83 ec 0c             	sub    esp,0xc
c001adbd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001adc1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001adc5:	31 ed                	xor    ebp,ebp
c001adc7:	0f af c2             	imul   eax,edx
c001adca:	50                   	push   eax
c001adcb:	e8 02 47 ff ff       	call   c000f4d2 <malloc>
c001add0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001add2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001add6:	89 34 24             	mov    DWORD PTR [esp],esi
c001add9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001addd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ade1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ade5:	0f af c2             	imul   eax,edx
c001ade8:	99                   	cdq    
c001ade9:	52                   	push   edx
c001adea:	50                   	push   eax
c001adeb:	53                   	push   ebx
c001adec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001adef:	83 c4 20             	add    esp,0x20
c001adf2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001adfa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ae02:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ae0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae12:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ae16:	0f 86 aa 00 00 00    	jbe    c001aec6 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001ae1c:	0f b7 f5             	movzx  esi,bp
c001ae1f:	6b f6 28             	imul   esi,esi,0x28
c001ae22:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ae26:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ae29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae2d:	50                   	push   eax
c001ae2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ae32:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ae36:	8b 16                	mov    edx,DWORD PTR [esi]
c001ae38:	6b c0 28             	imul   eax,eax,0x28
c001ae3b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ae3f:	89 d0                	mov    eax,edx
c001ae41:	31 d2                	xor    edx,edx
c001ae43:	52                   	push   edx
c001ae44:	50                   	push   eax
c001ae45:	53                   	push   ebx
c001ae46:	e8 4b 7e ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001ae4b:	83 c4 0c             	add    esp,0xc
c001ae4e:	6a 20                	push   0x20
c001ae50:	6a 00                	push   0x0
c001ae52:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ae56:	52                   	push   edx
c001ae57:	e8 21 58 fe ff       	call   c000067d <memset>
c001ae5c:	58                   	pop    eax
c001ae5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae5f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ae63:	51                   	push   ecx
c001ae64:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ae68:	52                   	push   edx
c001ae69:	6a 00                	push   0x0
c001ae6b:	6a 1f                	push   0x1f
c001ae6d:	53                   	push   ebx
c001ae6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae71:	83 c4 18             	add    esp,0x18
c001ae74:	68 e0 8a 02 c0       	push   0xc0028ae0
c001ae79:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ae7d:	52                   	push   edx
c001ae7e:	e8 ea 58 fe ff       	call   c000076d <strcmp>
c001ae83:	83 c4 10             	add    esp,0x10
c001ae86:	85 c0                	test   eax,eax
c001ae88:	75 0f                	jne    c001ae99 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001ae8a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae99:	50                   	push   eax
c001ae9a:	50                   	push   eax
c001ae9b:	68 e8 8a 02 c0       	push   0xc0028ae8
c001aea0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aea4:	50                   	push   eax
c001aea5:	e8 c3 58 fe ff       	call   c000076d <strcmp>
c001aeaa:	83 c4 10             	add    esp,0x10
c001aead:	85 c0                	test   eax,eax
c001aeaf:	75 0f                	jne    c001aec0 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001aeb1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aeb4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aebc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aec0:	45                   	inc    ebp
c001aec1:	e9 4c ff ff ff       	jmp    c001ae12 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aec6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aecb:	75 10                	jne    c001aedd <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aecd:	83 ec 0c             	sub    esp,0xc
c001aed0:	68 f0 8a 02 c0       	push   0xc0028af0
c001aed5:	e8 2f df ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001aeda:	83 c4 10             	add    esp,0x10
c001aedd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001aee2:	75 10                	jne    c001aef4 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aee4:	83 ec 0c             	sub    esp,0xc
c001aee7:	68 f0 8a 02 c0       	push   0xc0028af0
c001aeec:	e8 18 df ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001aef1:	83 c4 10             	add    esp,0x10
c001aef4:	31 d2                	xor    edx,edx
c001aef6:	50                   	push   eax
c001aef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefb:	52                   	push   edx
c001aefc:	50                   	push   eax
c001aefd:	53                   	push   ebx
c001aefe:	e8 93 7d ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001af03:	5a                   	pop    edx
c001af04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001af08:	e8 c5 45 ff ff       	call   c000f4d2 <malloc>
c001af0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af11:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af15:	31 c9                	xor    ecx,ecx
c001af17:	5e                   	pop    esi
c001af18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af1a:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001af1e:	55                   	push   ebp
c001af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af23:	51                   	push   ecx
c001af24:	52                   	push   edx
c001af25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af29:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001af2d:	53                   	push   ebx
c001af2e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af31:	83 c4 14             	add    esp,0x14
c001af34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af38:	e8 95 45 ff ff       	call   c000f4d2 <malloc>
c001af3d:	89 c6                	mov    esi,eax
c001af3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af41:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af44:	56                   	push   esi
c001af45:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001af49:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001af4d:	51                   	push   ecx
c001af4e:	52                   	push   edx
c001af4f:	53                   	push   ebx
c001af50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af57:	8b 15 40 bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bf40
c001af5d:	83 c4 1c             	add    esp,0x1c
c001af60:	c1 e8 04             	shr    eax,0x4
c001af63:	89 04 95 c0 bd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4240],eax
c001af6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af6e:	31 d2                	xor    edx,edx
c001af70:	52                   	push   edx
c001af71:	50                   	push   eax
c001af72:	53                   	push   ebx
c001af73:	e8 1e 7d ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001af78:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001af7a:	31 d2                	xor    edx,edx
c001af7c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af7f:	56                   	push   esi
c001af80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af84:	52                   	push   edx
c001af85:	50                   	push   eax
c001af86:	53                   	push   ebx
c001af87:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af8a:	83 c4 14             	add    esp,0x14
c001af8d:	53                   	push   ebx
c001af8e:	e8 a3 7c ff ff       	call   c0012c36 <File::close()>
c001af93:	5d                   	pop    ebp
c001af94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af98:	e8 45 45 ff ff       	call   c000f4e2 <free>
c001af9d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001afa0:	e8 3d 45 ff ff       	call   c000f4e2 <free>
c001afa5:	a1 40 bf 02 c0       	mov    eax,ds:0xc002bf40
c001afaa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afae:	8d 50 01             	lea    edx,[eax+0x1]
c001afb1:	89 0c 85 c0 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4140],ecx
c001afb8:	89 15 40 bf 02 c0    	mov    DWORD PTR ds:0xc002bf40,edx
c001afbe:	89 34 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],esi
c001afc5:	83 c4 10             	add    esp,0x10
c001afc8:	b2 01                	mov    dl,0x1
c001afca:	83 c4 5c             	add    esp,0x5c
c001afcd:	88 d0                	mov    al,dl
c001afcf:	5b                   	pop    ebx
c001afd0:	5e                   	pop    esi
c001afd1:	5f                   	pop    edi
c001afd2:	5d                   	pop    ebp
c001afd3:	c3                   	ret    

c001afd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001afd4:	55                   	push   ebp
c001afd5:	57                   	push   edi
c001afd6:	56                   	push   esi
c001afd7:	53                   	push   ebx
c001afd8:	81 ec 68 03 00 00    	sub    esp,0x368
c001afde:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001afe5:	8b 1d 94 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf94
c001afeb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001afef:	68 14 01 00 00       	push   0x114
c001aff4:	e8 d9 44 ff ff       	call   c000f4d2 <malloc>
c001aff9:	83 c4 0c             	add    esp,0xc
c001affc:	89 c5                	mov    ebp,eax
c001affe:	53                   	push   ebx
c001afff:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001b006:	50                   	push   eax
c001b007:	e8 68 7b ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c001b00c:	58                   	pop    eax
c001b00d:	5a                   	pop    edx
c001b00e:	6a 01                	push   0x1
c001b010:	55                   	push   ebp
c001b011:	e8 c2 7b ff ff       	call   c0012bd8 <File::open(FileOpenMode)>
c001b016:	83 c4 10             	add    esp,0x10
c001b019:	85 c0                	test   eax,eax
c001b01b:	0f 85 f2 06 00 00    	jne    c001b713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b021:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b029:	83 ec 0c             	sub    esp,0xc
c001b02c:	6a 34                	push   0x34
c001b02e:	e8 9f 44 ff ff       	call   c000f4d2 <malloc>
c001b033:	89 c7                	mov    edi,eax
c001b035:	58                   	pop    eax
c001b036:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b039:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b03d:	53                   	push   ebx
c001b03e:	57                   	push   edi
c001b03f:	6a 00                	push   0x0
c001b041:	6a 34                	push   0x34
c001b043:	55                   	push   ebp
c001b044:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b047:	83 c4 20             	add    esp,0x20
c001b04a:	85 c0                	test   eax,eax
c001b04c:	0f 85 c1 06 00 00    	jne    c001b713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b052:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b058:	0f 85 b5 06 00 00    	jne    c001b713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b05e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b061:	85 c0                	test   eax,eax
c001b063:	0f 84 aa 06 00 00    	je     c001b713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b069:	31 d2                	xor    edx,edx
c001b06b:	56                   	push   esi
c001b06c:	52                   	push   edx
c001b06d:	50                   	push   eax
c001b06e:	55                   	push   ebp
c001b06f:	e8 22 7c ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001b074:	83 c4 10             	add    esp,0x10
c001b077:	85 c0                	test   eax,eax
c001b079:	0f 85 94 06 00 00    	jne    c001b713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b07f:	83 ec 0c             	sub    esp,0xc
c001b082:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001b085:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b089:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b08d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b091:	0f af c2             	imul   eax,edx
c001b094:	50                   	push   eax
c001b095:	e8 38 44 ff ff       	call   c000f4d2 <malloc>
c001b09a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b09d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b0a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b0ac:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b0b0:	0f af c2             	imul   eax,edx
c001b0b3:	99                   	cdq    
c001b0b4:	52                   	push   edx
c001b0b5:	50                   	push   eax
c001b0b6:	55                   	push   ebp
c001b0b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b0ba:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001b0bd:	83 c4 20             	add    esp,0x20
c001b0c0:	85 c0                	test   eax,eax
c001b0c2:	0f 84 4b 06 00 00    	je     c001b713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b0c8:	31 d2                	xor    edx,edx
c001b0ca:	51                   	push   ecx
c001b0cb:	52                   	push   edx
c001b0cc:	50                   	push   eax
c001b0cd:	55                   	push   ebp
c001b0ce:	e8 c3 7b ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001b0d3:	83 c4 10             	add    esp,0x10
c001b0d6:	85 c0                	test   eax,eax
c001b0d8:	0f 85 35 06 00 00    	jne    c001b713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b0de:	83 ec 0c             	sub    esp,0xc
c001b0e1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b0e5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b0e9:	31 f6                	xor    esi,esi
c001b0eb:	0f af c2             	imul   eax,edx
c001b0ee:	50                   	push   eax
c001b0ef:	e8 de 43 ff ff       	call   c000f4d2 <malloc>
c001b0f4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b0f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b0fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b0fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b102:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b106:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b10a:	0f af c2             	imul   eax,edx
c001b10d:	99                   	cdq    
c001b10e:	52                   	push   edx
c001b10f:	50                   	push   eax
c001b110:	55                   	push   ebp
c001b111:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b114:	83 c4 20             	add    esp,0x20
c001b117:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001b11b:	0f 86 8a 00 00 00    	jbe    c001b1ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001b121:	0f b7 de             	movzx  ebx,si
c001b124:	c1 e3 05             	shl    ebx,0x5
c001b127:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001b12b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001b12e:	75 75                	jne    c001b1a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001b130:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b133:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b137:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b13a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b13e:	52                   	push   edx
c001b13f:	31 d2                	xor    edx,edx
c001b141:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b144:	52                   	push   edx
c001b145:	50                   	push   eax
c001b146:	55                   	push   ebp
c001b147:	e8 4a 7b ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001b14c:	83 c4 10             	add    esp,0x10
c001b14f:	85 c0                	test   eax,eax
c001b151:	0f 85 bc 05 00 00    	jne    c001b713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b157:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b15e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b161:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001b165:	31 d2                	xor    edx,edx
c001b167:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001b16b:	83 ec 0c             	sub    esp,0xc
c001b16e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b172:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b179:	50                   	push   eax
c001b17a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b17e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b182:	52                   	push   edx
c001b183:	50                   	push   eax
c001b184:	55                   	push   ebp
c001b185:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b188:	83 c4 1c             	add    esp,0x1c
c001b18b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b18e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001b191:	50                   	push   eax
c001b192:	6a 00                	push   0x0
c001b194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b198:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b19c:	50                   	push   eax
c001b19d:	e8 db 54 fe ff       	call   c000067d <memset>
c001b1a2:	83 c4 10             	add    esp,0x10
c001b1a5:	46                   	inc    esi
c001b1a6:	e9 6c ff ff ff       	jmp    c001b117 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001b1ab:	31 db                	xor    ebx,ebx
c001b1ad:	50                   	push   eax
c001b1ae:	68 00 01 00 00       	push   0x100
c001b1b3:	6a 00                	push   0x0
c001b1b5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b1b9:	50                   	push   eax
c001b1ba:	e8 be 54 fe ff       	call   c000067d <memset>
c001b1bf:	83 c4 0c             	add    esp,0xc
c001b1c2:	68 00 01 00 00       	push   0x100
c001b1c7:	6a 00                	push   0x0
c001b1c9:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001b1d0:	50                   	push   eax
c001b1d1:	e8 a7 54 fe ff       	call   c000067d <memset>
c001b1d6:	83 c4 10             	add    esp,0x10
c001b1d9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b1e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b1e9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b1f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b1f9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b201:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001b205:	0f 86 30 01 00 00    	jbe    c001b33b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001b20b:	0f b7 f3             	movzx  esi,bx
c001b20e:	6b f6 28             	imul   esi,esi,0x28
c001b211:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001b215:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b218:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b21c:	50                   	push   eax
c001b21d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b221:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001b225:	8b 06                	mov    eax,DWORD PTR [esi]
c001b227:	6b d2 28             	imul   edx,edx,0x28
c001b22a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001b22e:	31 d2                	xor    edx,edx
c001b230:	52                   	push   edx
c001b231:	50                   	push   eax
c001b232:	55                   	push   ebp
c001b233:	e8 5e 7a ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001b238:	83 c4 0c             	add    esp,0xc
c001b23b:	6a 20                	push   0x20
c001b23d:	6a 00                	push   0x0
c001b23f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b246:	51                   	push   ecx
c001b247:	e8 31 54 fe ff       	call   c000067d <memset>
c001b24c:	58                   	pop    eax
c001b24d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b250:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b254:	52                   	push   edx
c001b255:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001b25c:	51                   	push   ecx
c001b25d:	6a 00                	push   0x0
c001b25f:	6a 1f                	push   0x1f
c001b261:	55                   	push   ebp
c001b262:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b265:	83 c4 1c             	add    esp,0x1c
c001b268:	6a 09                	push   0x9
c001b26a:	68 0a 8b 02 c0       	push   0xc0028b0a
c001b26f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b276:	51                   	push   ecx
c001b277:	e8 68 53 fe ff       	call   c00005e4 <memcmp>
c001b27c:	83 c4 10             	add    esp,0x10
c001b27f:	85 c0                	test   eax,eax
c001b281:	75 21                	jne    c001b2a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001b283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b287:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b28b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b28f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b293:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b296:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b29d:	89 c8                	mov    eax,ecx
c001b29f:	40                   	inc    eax
c001b2a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2a4:	50                   	push   eax
c001b2a5:	6a 09                	push   0x9
c001b2a7:	68 14 8b 02 c0       	push   0xc0028b14
c001b2ac:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b2b3:	50                   	push   eax
c001b2b4:	e8 2b 53 fe ff       	call   c00005e4 <memcmp>
c001b2b9:	83 c4 10             	add    esp,0x10
c001b2bc:	85 c0                	test   eax,eax
c001b2be:	75 21                	jne    c001b2e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001b2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b2c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2cc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b2d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b2d3:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b2da:	89 c8                	mov    eax,ecx
c001b2dc:	40                   	inc    eax
c001b2dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2e1:	50                   	push   eax
c001b2e2:	50                   	push   eax
c001b2e3:	68 e0 8a 02 c0       	push   0xc0028ae0
c001b2e8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b2ef:	50                   	push   eax
c001b2f0:	e8 78 54 fe ff       	call   c000076d <strcmp>
c001b2f5:	83 c4 10             	add    esp,0x10
c001b2f8:	85 c0                	test   eax,eax
c001b2fa:	75 0f                	jne    c001b30b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001b2fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b2ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b303:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b307:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b30b:	50                   	push   eax
c001b30c:	50                   	push   eax
c001b30d:	68 e8 8a 02 c0       	push   0xc0028ae8
c001b312:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b319:	50                   	push   eax
c001b31a:	e8 4e 54 fe ff       	call   c000076d <strcmp>
c001b31f:	83 c4 10             	add    esp,0x10
c001b322:	85 c0                	test   eax,eax
c001b324:	75 0f                	jne    c001b335 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001b326:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b329:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b32d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b331:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b335:	43                   	inc    ebx
c001b336:	e9 c6 fe ff ff       	jmp    c001b201 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001b33b:	31 d2                	xor    edx,edx
c001b33d:	50                   	push   eax
c001b33e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b342:	52                   	push   edx
c001b343:	50                   	push   eax
c001b344:	55                   	push   ebp
c001b345:	e8 4c 79 ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001b34a:	5a                   	pop    edx
c001b34b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b34f:	e8 7e 41 ff ff       	call   c000f4d2 <malloc>
c001b354:	31 d2                	xor    edx,edx
c001b356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001b35a:	59                   	pop    ecx
c001b35b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b35e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b362:	53                   	push   ebx
c001b363:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b367:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b36b:	52                   	push   edx
c001b36c:	50                   	push   eax
c001b36d:	55                   	push   ebp
c001b36e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b371:	83 c4 14             	add    esp,0x14
c001b374:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b378:	e8 55 41 ff ff       	call   c000f4d2 <malloc>
c001b37d:	31 d2                	xor    edx,edx
c001b37f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b38a:	52                   	push   edx
c001b38b:	50                   	push   eax
c001b38c:	55                   	push   ebp
c001b38d:	e8 04 79 ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001b392:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b395:	31 d2                	xor    edx,edx
c001b397:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b39a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b39e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b3a2:	52                   	push   edx
c001b3a3:	50                   	push   eax
c001b3a4:	55                   	push   ebp
c001b3a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b3a8:	83 c4 20             	add    esp,0x20
c001b3ab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b3b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b3b7:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b3bb:	0f 84 56 03 00 00    	je     c001b717 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001b3c1:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b3c8:	31 d2                	xor    edx,edx
c001b3ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3ce:	c1 e8 03             	shr    eax,0x3
c001b3d1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b3d5:	50                   	push   eax
c001b3d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3da:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b3de:	52                   	push   edx
c001b3df:	50                   	push   eax
c001b3e0:	55                   	push   ebp
c001b3e1:	e8 b0 78 ff ff       	call   c0012c96 <File::seek(unsigned long long)>
c001b3e6:	58                   	pop    eax
c001b3e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3eb:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b3f2:	e8 db 40 ff ff       	call   c000f4d2 <malloc>
c001b3f7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b3fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b3fe:	31 d2                	xor    edx,edx
c001b400:	58                   	pop    eax
c001b401:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b405:	50                   	push   eax
c001b406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b40a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b40e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b415:	52                   	push   edx
c001b416:	50                   	push   eax
c001b417:	55                   	push   ebp
c001b418:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b41b:	83 c4 20             	add    esp,0x20
c001b41e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b426:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b42a:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b42e:	0f 8d c7 02 00 00    	jge    c001b6fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001b434:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b438:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b43c:	31 db                	xor    ebx,ebx
c001b43e:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b441:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b445:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b449:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b44d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b451:	c1 e8 08             	shr    eax,0x8
c001b454:	89 c6                	mov    esi,eax
c001b456:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b45a:	c1 e6 04             	shl    esi,0x4
c001b45d:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b461:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b464:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b468:	85 c0                	test   eax,eax
c001b46a:	0f 85 17 01 00 00    	jne    c001b587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b470:	83 ec 0c             	sub    esp,0xc
c001b473:	b3 01                	mov    bl,0x1
c001b475:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b479:	03 06                	add    eax,DWORD PTR [esi]
c001b47b:	50                   	push   eax
c001b47c:	e8 48 f8 ff ff       	call   c001acc9 <Thr::getAddressOfKernelSymbol(char const*)>
c001b481:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b485:	83 c4 10             	add    esp,0x10
c001b488:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b48d:	0f 85 f4 00 00 00    	jne    c001b587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b493:	50                   	push   eax
c001b494:	50                   	push   eax
c001b495:	68 1e 8b 02 c0       	push   0xc0028b1e
c001b49a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b49e:	03 06                	add    eax,DWORD PTR [esi]
c001b4a0:	50                   	push   eax
c001b4a1:	e8 c7 52 fe ff       	call   c000076d <strcmp>
c001b4a6:	83 c4 10             	add    esp,0x10
c001b4a9:	85 c0                	test   eax,eax
c001b4ab:	75 0a                	jne    c001b4b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001b4ad:	b8 5c 3a 02 c0       	mov    eax,0xc0023a5c
c001b4b2:	e9 ca 00 00 00       	jmp    c001b581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b4b7:	50                   	push   eax
c001b4b8:	50                   	push   eax
c001b4b9:	68 28 8b 02 c0       	push   0xc0028b28
c001b4be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4c2:	03 06                	add    eax,DWORD PTR [esi]
c001b4c4:	50                   	push   eax
c001b4c5:	e8 a3 52 fe ff       	call   c000076d <strcmp>
c001b4ca:	83 c4 10             	add    esp,0x10
c001b4cd:	85 c0                	test   eax,eax
c001b4cf:	75 0a                	jne    c001b4db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001b4d1:	b8 90 37 02 c0       	mov    eax,0xc0023790
c001b4d6:	e9 a6 00 00 00       	jmp    c001b581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b4db:	53                   	push   ebx
c001b4dc:	53                   	push   ebx
c001b4dd:	68 31 8b 02 c0       	push   0xc0028b31
c001b4e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4e6:	03 06                	add    eax,DWORD PTR [esi]
c001b4e8:	50                   	push   eax
c001b4e9:	e8 7f 52 fe ff       	call   c000076d <strcmp>
c001b4ee:	83 c4 10             	add    esp,0x10
c001b4f1:	85 c0                	test   eax,eax
c001b4f3:	75 0a                	jne    c001b4ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001b4f5:	b8 5c 3b 02 c0       	mov    eax,0xc0023b5c
c001b4fa:	e9 82 00 00 00       	jmp    c001b581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b4ff:	51                   	push   ecx
c001b500:	51                   	push   ecx
c001b501:	68 3b 8b 02 c0       	push   0xc0028b3b
c001b506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b50a:	03 06                	add    eax,DWORD PTR [esi]
c001b50c:	50                   	push   eax
c001b50d:	e8 5b 52 fe ff       	call   c000076d <strcmp>
c001b512:	83 c4 10             	add    esp,0x10
c001b515:	85 c0                	test   eax,eax
c001b517:	74 63                	je     c001b57c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001b519:	50                   	push   eax
c001b51a:	50                   	push   eax
c001b51b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b51f:	03 06                	add    eax,DWORD PTR [esi]
c001b521:	50                   	push   eax
c001b522:	68 44 8b 02 c0       	push   0xc0028b44
c001b527:	e8 19 71 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001b52c:	58                   	pop    eax
c001b52d:	5a                   	pop    edx
c001b52e:	68 5e 8b 02 c0       	push   0xc0028b5e
c001b533:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b53a:	53                   	push   ebx
c001b53b:	e8 dc 51 fe ff       	call   c000071c <strcpy>
c001b540:	59                   	pop    ecx
c001b541:	58                   	pop    eax
c001b542:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b546:	03 06                	add    eax,DWORD PTR [esi]
c001b548:	50                   	push   eax
c001b549:	53                   	push   ebx
c001b54a:	e8 84 52 fe ff       	call   c00007d3 <strcat>
c001b54f:	58                   	pop    eax
c001b550:	5a                   	pop    edx
c001b551:	68 f4 8b 02 c0       	push   0xc0028bf4
c001b556:	53                   	push   ebx
c001b557:	e8 77 52 fe ff       	call   c00007d3 <strcat>
c001b55c:	83 c4 10             	add    esp,0x10
c001b55f:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b564:	0f 84 4b 01 00 00    	je     c001b6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b56a:	83 ec 0c             	sub    esp,0xc
c001b56d:	53                   	push   ebx
c001b56e:	e8 96 d8 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001b573:	83 c4 10             	add    esp,0x10
c001b576:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b57a:	eb 0b                	jmp    c001b587 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b57c:	b8 dc 38 02 c0       	mov    eax,0xc00238dc
c001b581:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b585:	b3 01                	mov    bl,0x1
c001b587:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b58c:	0f 85 80 00 00 00    	jne    c001b612 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001b592:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b599:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b59d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b5a1:	01 ce                	add    esi,ecx
c001b5a3:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b5ab:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5ad:	0f 94 c2             	sete   dl
c001b5b0:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b5b8:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b5bd:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b5c1:	84 db                	test   bl,bl
c001b5c3:	74 31                	je     c001b5f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001b5c5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5c9:	01 c3                	add    ebx,eax
c001b5cb:	84 d2                	test   dl,dl
c001b5cd:	75 0a                	jne    c001b5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001b5cf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b5d3:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b5d7:	76 32                	jbe    c001b60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5d9:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b5de:	0f 84 d1 00 00 00    	je     c001b6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b5e4:	83 ec 0c             	sub    esp,0xc
c001b5e7:	68 75 8b 02 c0       	push   0xc0028b75
c001b5ec:	e8 18 d8 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001b5f1:	83 c4 10             	add    esp,0x10
c001b5f4:	eb 15                	jmp    c001b60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5f6:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b5f9:	84 d2                	test   dl,dl
c001b5fb:	75 0e                	jne    c001b60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b5fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b601:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b605:	77 04                	ja     c001b60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b607:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b60b:	89 1e                	mov    DWORD PTR [esi],ebx
c001b60d:	e9 e0 00 00 00       	jmp    c001b6f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b612:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b617:	75 6e                	jne    c001b687 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001b619:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b620:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b624:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b628:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b630:	74 17                	je     c001b649 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b632:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b63a:	74 0d                	je     c001b649 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b63c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b640:	83 e8 04             	sub    eax,0x4
c001b643:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b647:	76 17                	jbe    c001b660 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001b649:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b64e:	74 65                	je     c001b6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b650:	83 ec 0c             	sub    esp,0xc
c001b653:	68 91 8b 02 c0       	push   0xc0028b91
c001b658:	e8 ac d7 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001b65d:	83 c4 10             	add    esp,0x10
c001b660:	8b 16                	mov    edx,DWORD PTR [esi]
c001b662:	84 db                	test   bl,bl
c001b664:	74 13                	je     c001b679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001b666:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b66a:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b671:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b675:	01 d0                	add    eax,edx
c001b677:	eb 06                	jmp    c001b67f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b679:	89 d0                	mov    eax,edx
c001b67b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b67f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b683:	89 06                	mov    DWORD PTR [esi],eax
c001b685:	eb 6b                	jmp    c001b6f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b687:	50                   	push   eax
c001b688:	50                   	push   eax
c001b689:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b68e:	50                   	push   eax
c001b68f:	68 ad 8b 02 c0       	push   0xc0028bad
c001b694:	e8 ac 6f ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b6a1:	74 12                	je     c001b6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b6a3:	83 ec 0c             	sub    esp,0xc
c001b6a6:	68 b8 8b 02 c0       	push   0xc0028bb8
c001b6ab:	e8 59 d7 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001b6b0:	83 c4 10             	add    esp,0x10
c001b6b3:	eb 3d                	jmp    c001b6f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b6b5:	83 ec 0c             	sub    esp,0xc
c001b6b8:	55                   	push   ebp
c001b6b9:	e8 78 75 ff ff       	call   c0012c36 <File::close()>
c001b6be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b6c1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b6c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6c7:	59                   	pop    ecx
c001b6c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b6cc:	e8 11 3e ff ff       	call   c000f4e2 <free>
c001b6d1:	5b                   	pop    ebx
c001b6d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b6d6:	e8 07 3e ff ff       	call   c000f4e2 <free>
c001b6db:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b6de:	e8 ff 3d ff ff       	call   c000f4e2 <free>
c001b6e3:	5e                   	pop    esi
c001b6e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b6e8:	e8 f5 3d ff ff       	call   c000f4e2 <free>
c001b6ed:	83 c4 10             	add    esp,0x10
c001b6f0:	eb 21                	jmp    c001b713 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b6f2:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b6f6:	e9 2b fd ff ff       	jmp    c001b426 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001b6fb:	83 ec 0c             	sub    esp,0xc
c001b6fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b702:	e8 db 3d ff ff       	call   c000f4e2 <free>
c001b707:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b70b:	83 c4 10             	add    esp,0x10
c001b70e:	e9 a0 fc ff ff       	jmp    c001b3b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001b713:	31 c0                	xor    eax,eax
c001b715:	eb 33                	jmp    c001b74a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001b717:	83 ec 0c             	sub    esp,0xc
c001b71a:	55                   	push   ebp
c001b71b:	e8 16 75 ff ff       	call   c0012c36 <File::close()>
c001b720:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b723:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b726:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b729:	58                   	pop    eax
c001b72a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b72e:	e8 af 3d ff ff       	call   c000f4e2 <free>
c001b733:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b736:	e8 a7 3d ff ff       	call   c000f4e2 <free>
c001b73b:	5a                   	pop    edx
c001b73c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b740:	e8 9d 3d ff ff       	call   c000f4e2 <free>
c001b745:	83 c4 10             	add    esp,0x10
c001b748:	b0 01                	mov    al,0x1
c001b74a:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b750:	5b                   	pop    ebx
c001b751:	5e                   	pop    esi
c001b752:	5f                   	pop    edi
c001b753:	5d                   	pop    ebp
c001b754:	c3                   	ret    

c001b755 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b755:	56                   	push   esi
c001b756:	31 d2                	xor    edx,edx
c001b758:	53                   	push   ebx
c001b759:	8b 1d a0 b7 02 c0    	mov    ebx,DWORD PTR ds:0xc002b7a0
c001b75f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b763:	39 d3                	cmp    ebx,edx
c001b765:	7e 1b                	jle    c001b782 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b767:	8b 04 95 c0 b9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4640]
c001b76e:	39 c8                	cmp    eax,ecx
c001b770:	77 0d                	ja     c001b77f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b772:	8b 34 95 c0 b7 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4840]
c001b779:	01 c6                	add    esi,eax
c001b77b:	39 ce                	cmp    esi,ecx
c001b77d:	77 05                	ja     c001b784 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b77f:	42                   	inc    edx
c001b780:	eb e1                	jmp    c001b763 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b782:	31 c0                	xor    eax,eax
c001b784:	5b                   	pop    ebx
c001b785:	5e                   	pop    esi
c001b786:	c3                   	ret    

c001b787 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b787:	53                   	push   ebx
c001b788:	31 c0                	xor    eax,eax
c001b78a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b78e:	8b 1d a0 b7 02 c0    	mov    ebx,DWORD PTR ds:0xc002b7a0
c001b794:	39 c3                	cmp    ebx,eax
c001b796:	7e 22                	jle    c001b7ba <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b798:	8b 14 85 c0 b9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4640]
c001b79f:	39 ca                	cmp    edx,ecx
c001b7a1:	77 14                	ja     c001b7b7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b7a3:	03 14 85 c0 b7 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4840]
c001b7aa:	39 ca                	cmp    edx,ecx
c001b7ac:	76 09                	jbe    c001b7b7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b7ae:	8b 04 85 c0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4440]
c001b7b5:	eb 05                	jmp    c001b7bc <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b7b7:	40                   	inc    eax
c001b7b8:	eb da                	jmp    c001b794 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b7ba:	31 c0                	xor    eax,eax
c001b7bc:	5b                   	pop    ebx
c001b7bd:	c3                   	ret    

c001b7be <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b7be:	53                   	push   ebx
c001b7bf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b7c3:	53                   	push   ebx
c001b7c4:	e8 8c ff ff ff       	call   c001b755 <Thr::getDriverBaseFromAddress(unsigned long)>
c001b7c9:	5a                   	pop    edx
c001b7ca:	31 d2                	xor    edx,edx
c001b7cc:	85 c0                	test   eax,eax
c001b7ce:	74 04                	je     c001b7d4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b7d0:	89 da                	mov    edx,ebx
c001b7d2:	29 c2                	sub    edx,eax
c001b7d4:	89 d0                	mov    eax,edx
c001b7d6:	5b                   	pop    ebx
c001b7d7:	c3                   	ret    

c001b7d8 <Thr::loadDLL(char const*, bool)>:
c001b7d8:	55                   	push   ebp
c001b7d9:	57                   	push   edi
c001b7da:	56                   	push   esi
c001b7db:	53                   	push   ebx
c001b7dc:	81 ec 34 01 00 00    	sub    esp,0x134
c001b7e2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b7e9:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b7f0:	56                   	push   esi
c001b7f1:	68 d0 8b 02 c0       	push   0xc0028bd0
c001b7f6:	e8 4a 6e ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001b7fb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b802:	e8 cb 3c ff ff       	call   c000f4d2 <malloc>
c001b807:	83 c4 0c             	add    esp,0xc
c001b80a:	89 c3                	mov    ebx,eax
c001b80c:	ff 35 94 bf 02 c0    	push   DWORD PTR ds:0xc002bf94
c001b812:	56                   	push   esi
c001b813:	50                   	push   eax
c001b814:	e8 5b 73 ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c001b819:	83 c4 10             	add    esp,0x10
c001b81c:	85 db                	test   ebx,ebx
c001b81e:	75 3c                	jne    c001b85c <Thr::loadDLL(char const*, bool)+0x84>
c001b820:	89 e8                	mov    eax,ebp
c001b822:	84 c0                	test   al,al
c001b824:	0f 84 b0 01 00 00    	je     c001b9da <Thr::loadDLL(char const*, bool)+0x202>
c001b82a:	50                   	push   eax
c001b82b:	50                   	push   eax
c001b82c:	68 e1 8b 02 c0       	push   0xc0028be1
c001b831:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001b835:	57                   	push   edi
c001b836:	e8 e1 4e fe ff       	call   c000071c <strcpy>
c001b83b:	58                   	pop    eax
c001b83c:	5a                   	pop    edx
c001b83d:	56                   	push   esi
c001b83e:	57                   	push   edi
c001b83f:	e8 8f 4f fe ff       	call   c00007d3 <strcat>
c001b844:	59                   	pop    ecx
c001b845:	58                   	pop    eax
c001b846:	68 f4 8b 02 c0       	push   0xc0028bf4
c001b84b:	57                   	push   edi
c001b84c:	e8 82 4f fe ff       	call   c00007d3 <strcat>
c001b851:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b854:	e8 b0 d5 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001b859:	83 c4 10             	add    esp,0x10
c001b85c:	50                   	push   eax
c001b85d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b861:	50                   	push   eax
c001b862:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b866:	50                   	push   eax
c001b867:	53                   	push   ebx
c001b868:	e8 17 76 ff ff       	call   c0012e84 <File::stat(unsigned long long*, bool*)>
c001b86d:	83 c4 10             	add    esp,0x10
c001b870:	85 db                	test   ebx,ebx
c001b872:	74 0c                	je     c001b880 <Thr::loadDLL(char const*, bool)+0xa8>
c001b874:	83 ec 0c             	sub    esp,0xc
c001b877:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b879:	53                   	push   ebx
c001b87a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b87d:	83 c4 10             	add    esp,0x10
c001b880:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b885:	75 0a                	jne    c001b891 <Thr::loadDLL(char const*, bool)+0xb9>
c001b887:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b88b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b88f:	75 3c                	jne    c001b8cd <Thr::loadDLL(char const*, bool)+0xf5>
c001b891:	89 e8                	mov    eax,ebp
c001b893:	84 c0                	test   al,al
c001b895:	0f 84 3d 01 00 00    	je     c001b9d8 <Thr::loadDLL(char const*, bool)+0x200>
c001b89b:	50                   	push   eax
c001b89c:	50                   	push   eax
c001b89d:	68 e1 8b 02 c0       	push   0xc0028be1
c001b8a2:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b8a6:	53                   	push   ebx
c001b8a7:	e8 70 4e fe ff       	call   c000071c <strcpy>
c001b8ac:	58                   	pop    eax
c001b8ad:	5a                   	pop    edx
c001b8ae:	56                   	push   esi
c001b8af:	53                   	push   ebx
c001b8b0:	e8 1e 4f fe ff       	call   c00007d3 <strcat>
c001b8b5:	59                   	pop    ecx
c001b8b6:	5f                   	pop    edi
c001b8b7:	68 f4 8b 02 c0       	push   0xc0028bf4
c001b8bc:	53                   	push   ebx
c001b8bd:	e8 11 4f fe ff       	call   c00007d3 <strcat>
c001b8c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8c5:	e8 3f d5 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001b8ca:	83 c4 10             	add    esp,0x10
c001b8cd:	e8 13 5f ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c001b8d2:	51                   	push   ecx
c001b8d3:	6a 03                	push   0x3
c001b8d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b8d9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b8dd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b8e3:	83 d3 00             	adc    ebx,0x0
c001b8e6:	89 ca                	mov    edx,ecx
c001b8e8:	89 d1                	mov    ecx,edx
c001b8ea:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b8ee:	51                   	push   ecx
c001b8ef:	50                   	push   eax
c001b8f0:	e8 2b 65 ff ff       	call   c0011e20 <VAS::allocatePages(int, int)>
c001b8f5:	89 34 24             	mov    DWORD PTR [esp],esi
c001b8f8:	89 c3                	mov    ebx,eax
c001b8fa:	e8 9b 4d fe ff       	call   c000069a <strlen>
c001b8ff:	8b 3d a0 b7 02 c0    	mov    edi,DWORD PTR ds:0xc002b7a0
c001b905:	40                   	inc    eax
c001b906:	89 04 24             	mov    DWORD PTR [esp],eax
c001b909:	e8 c4 3b ff ff       	call   c000f4d2 <malloc>
c001b90e:	89 04 bd c0 bb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4440],eax
c001b915:	5f                   	pop    edi
c001b916:	58                   	pop    eax
c001b917:	a1 a0 b7 02 c0       	mov    eax,ds:0xc002b7a0
c001b91c:	56                   	push   esi
c001b91d:	ff 34 85 c0 bb 02 c0 	push   DWORD PTR [eax*4-0x3ffd4440]
c001b924:	e8 f3 4d fe ff       	call   c000071c <strcpy>
c001b929:	a1 a0 b7 02 c0       	mov    eax,ds:0xc002b7a0
c001b92e:	8d 50 01             	lea    edx,[eax+0x1]
c001b931:	89 1c 85 c0 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4640],ebx
c001b938:	89 15 a0 b7 02 c0    	mov    DWORD PTR ds:0xc002b7a0,edx
c001b93e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b942:	83 c4 0c             	add    esp,0xc
c001b945:	89 14 85 c0 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4840],edx
c001b94c:	6a 01                	push   0x1
c001b94e:	53                   	push   ebx
c001b94f:	56                   	push   esi
c001b950:	e8 7f f6 ff ff       	call   c001afd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b955:	83 c4 10             	add    esp,0x10
c001b958:	89 c7                	mov    edi,eax
c001b95a:	fe c8                	dec    al
c001b95c:	74 16                	je     c001b974 <Thr::loadDLL(char const*, bool)+0x19c>
c001b95e:	89 e8                	mov    eax,ebp
c001b960:	84 c0                	test   al,al
c001b962:	74 10                	je     c001b974 <Thr::loadDLL(char const*, bool)+0x19c>
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	68 f6 8b 02 c0       	push   0xc0028bf6
c001b96c:	e8 98 d4 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	31 f6                	xor    esi,esi
c001b976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b97a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b97e:	05 ff 0f 00 00       	add    eax,0xfff
c001b983:	83 d2 00             	adc    edx,0x0
c001b986:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b98a:	c1 ea 0c             	shr    edx,0xc
c001b98d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b991:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b995:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b999:	ba 00 00 00 00       	mov    edx,0x0
c001b99e:	89 d0                	mov    eax,edx
c001b9a0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b9a4:	73 2c                	jae    c001b9d2 <Thr::loadDLL(char const*, bool)+0x1fa>
c001b9a6:	e8 3a 5e ff ff       	call   c00117e5 <Virt::getAKernelVAS()>
c001b9ab:	89 f5                	mov    ebp,esi
c001b9ad:	c1 e5 0c             	shl    ebp,0xc
c001b9b0:	52                   	push   edx
c001b9b1:	01 dd                	add    ebp,ebx
c001b9b3:	52                   	push   edx
c001b9b4:	55                   	push   ebp
c001b9b5:	50                   	push   eax
c001b9b6:	e8 df 5f ff ff       	call   c001199a <VAS::getPageTableEntry(unsigned long)>
c001b9bb:	83 c4 10             	add    esp,0x10
c001b9be:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b9c1:	75 0c                	jne    c001b9cf <Thr::loadDLL(char const*, bool)+0x1f7>
c001b9c3:	83 ec 0c             	sub    esp,0xc
c001b9c6:	55                   	push   ebp
c001b9c7:	e8 26 40 ff ff       	call   c000f9f2 <Phys::freePage(unsigned long)>
c001b9cc:	83 c4 10             	add    esp,0x10
c001b9cf:	46                   	inc    esi
c001b9d0:	eb a4                	jmp    c001b976 <Thr::loadDLL(char const*, bool)+0x19e>
c001b9d2:	89 f8                	mov    eax,edi
c001b9d4:	84 c0                	test   al,al
c001b9d6:	75 02                	jne    c001b9da <Thr::loadDLL(char const*, bool)+0x202>
c001b9d8:	31 db                	xor    ebx,ebx
c001b9da:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b9e0:	89 d8                	mov    eax,ebx
c001b9e2:	5b                   	pop    ebx
c001b9e3:	5e                   	pop    esi
c001b9e4:	5f                   	pop    edi
c001b9e5:	5d                   	pop    ebp
c001b9e6:	c3                   	ret    

c001b9e7 <Thr::executeDLL(unsigned long, void*)>:
c001b9e7:	56                   	push   esi
c001b9e8:	53                   	push   ebx
c001b9e9:	51                   	push   ecx
c001b9ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b9f2:	85 db                	test   ebx,ebx
c001b9f4:	75 10                	jne    c001ba06 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b9f6:	83 ec 0c             	sub    esp,0xc
c001b9f9:	68 15 8c 02 c0       	push   0xc0028c15
c001b9fe:	e8 06 d4 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001ba0a:	89 d8                	mov    eax,ebx
c001ba0c:	5a                   	pop    edx
c001ba0d:	5b                   	pop    ebx
c001ba0e:	5e                   	pop    esi
c001ba0f:	ff e0                	jmp    eax
c001ba11:	90                   	nop

c001ba12 <changeTSS>:
c001ba12:	83 ec 14             	sub    esp,0x14
c001ba15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba1a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ba1d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001ba22:	c1 e2 15             	shl    edx,0x15
c001ba25:	29 d0                	sub    eax,edx
c001ba27:	50                   	push   eax
c001ba28:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001ba2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ba33:	05 7c 11 00 00       	add    eax,0x117c
c001ba38:	50                   	push   eax
c001ba39:	e8 56 55 ff ff       	call   c0010f94 <TSS::setESP(unsigned long)>
c001ba3e:	83 c4 1c             	add    esp,0x1c
c001ba41:	c3                   	ret    

c001ba42 <Process::addArgs(char**)>:
c001ba42:	57                   	push   edi
c001ba43:	56                   	push   esi
c001ba44:	53                   	push   ebx
c001ba45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba49:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba4d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001ba57:	85 ff                	test   edi,edi
c001ba59:	74 3d                	je     c001ba98 <Process::addArgs(char**)+0x56>
c001ba5b:	8b 07                	mov    eax,DWORD PTR [edi]
c001ba5d:	85 c0                	test   eax,eax
c001ba5f:	74 37                	je     c001ba98 <Process::addArgs(char**)+0x56>
c001ba61:	31 db                	xor    ebx,ebx
c001ba63:	83 ec 0c             	sub    esp,0xc
c001ba66:	50                   	push   eax
c001ba67:	e8 2e 4c fe ff       	call   c000069a <strlen>
c001ba6c:	40                   	inc    eax
c001ba6d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba70:	e8 5d 3a ff ff       	call   c000f4d2 <malloc>
c001ba75:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001ba7c:	5a                   	pop    edx
c001ba7d:	59                   	pop    ecx
c001ba7e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001ba81:	43                   	inc    ebx
c001ba82:	50                   	push   eax
c001ba83:	e8 94 4c fe ff       	call   c000071c <strcpy>
c001ba88:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001ba8e:	83 c4 10             	add    esp,0x10
c001ba91:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ba94:	85 c0                	test   eax,eax
c001ba96:	75 cb                	jne    c001ba63 <Process::addArgs(char**)+0x21>
c001ba98:	5b                   	pop    ebx
c001ba99:	5e                   	pop    esi
c001ba9a:	5f                   	pop    edi
c001ba9b:	c3                   	ret    

c001ba9c <Process::Process(char const*, Process*, char**)>:
c001ba9c:	56                   	push   esi
c001ba9d:	53                   	push   ebx
c001ba9e:	83 ec 14             	sub    esp,0x14
c001baa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baa5:	05 0c 02 00 00       	add    eax,0x20c
c001baaa:	bb 07 00 00 00       	mov    ebx,0x7
c001baaf:	89 c6                	mov    esi,eax
c001bab1:	85 db                	test   ebx,ebx
c001bab3:	78 12                	js     c001bac7 <Process::Process(char const*, Process*, char**)+0x2b>
c001bab5:	83 ec 0c             	sub    esp,0xc
c001bab8:	56                   	push   esi
c001bab9:	e8 54 a2 00 00       	call   c0025d12 <ThreadControlBlock::ThreadControlBlock()>
c001babe:	83 c4 10             	add    esp,0x10
c001bac1:	83 c6 63             	add    esi,0x63
c001bac4:	4b                   	dec    ebx
c001bac5:	eb ea                	jmp    c001bab1 <Process::Process(char const*, Process*, char**)+0x15>
c001bac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bacb:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001bad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bad6:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001badf:	a1 24 a0 02 c0       	mov    eax,ds:0xc002a024
c001bae4:	8d 50 01             	lea    edx,[eax+0x1]
c001bae7:	89 15 24 a0 02 c0    	mov    DWORD PTR ds:0xc002a024,edx
c001baed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001baf1:	89 02                	mov    DWORD PTR [edx],eax
c001baf3:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001bafb:	83 ec 0c             	sub    esp,0xc
c001bafe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bb02:	e8 cb 39 ff ff       	call   c000f4d2 <malloc>
c001bb07:	83 c4 10             	add    esp,0x10
c001bb0a:	89 c3                	mov    ebx,eax
c001bb0c:	83 ec 08             	sub    esp,0x8
c001bb0f:	6a 00                	push   0x0
c001bb11:	53                   	push   ebx
c001bb12:	e8 b1 66 ff ff       	call   c00121c8 <VAS::VAS(bool)>
c001bb17:	83 c4 10             	add    esp,0x10
c001bb1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb1e:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001bb24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb28:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001bb32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb3a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bb40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb44:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bb4a:	85 c0                	test   eax,eax
c001bb4c:	74 42                	je     c001bb90 <Process::Process(char const*, Process*, char**)+0xf4>
c001bb4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb52:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bb58:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb62:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001bb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb6c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bb72:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001bb78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb7c:	05 0c 01 00 00       	add    eax,0x10c
c001bb81:	83 ec 08             	sub    esp,0x8
c001bb84:	52                   	push   edx
c001bb85:	50                   	push   eax
c001bb86:	e8 91 4b fe ff       	call   c000071c <strcpy>
c001bb8b:	83 c4 10             	add    esp,0x10
c001bb8e:	eb 63                	jmp    c001bbf3 <Process::Process(char const*, Process*, char**)+0x157>
c001bb90:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001bb98:	83 ec 0c             	sub    esp,0xc
c001bb9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bb9f:	e8 2e 39 ff ff       	call   c000f4d2 <malloc>
c001bba4:	83 c4 10             	add    esp,0x10
c001bba7:	89 c3                	mov    ebx,eax
c001bba9:	83 ec 08             	sub    esp,0x8
c001bbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbb0:	53                   	push   ebx
c001bbb1:	e8 dc 50 ff ff       	call   c0010c92 <VgaText::VgaText(char const*)>
c001bbb6:	83 c4 10             	add    esp,0x10
c001bbb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbbd:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001bbc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbc7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bbcd:	83 ec 0c             	sub    esp,0xc
c001bbd0:	50                   	push   eax
c001bbd1:	e8 bd 44 ff ff       	call   c0010093 <addToTerminalCycle(VgaText*)>
c001bbd6:	83 c4 10             	add    esp,0x10
c001bbd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbdd:	05 0c 01 00 00       	add    eax,0x10c
c001bbe2:	83 ec 08             	sub    esp,0x8
c001bbe5:	68 3f 8c 02 c0       	push   0xc0028c3f
c001bbea:	50                   	push   eax
c001bbeb:	e8 2c 4b fe ff       	call   c000071c <strcpy>
c001bbf0:	83 c4 10             	add    esp,0x10
c001bbf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbf7:	83 c0 0c             	add    eax,0xc
c001bbfa:	83 ec 08             	sub    esp,0x8
c001bbfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc01:	50                   	push   eax
c001bc02:	e8 15 4b fe ff       	call   c000071c <strcpy>
c001bc07:	83 c4 10             	add    esp,0x10
c001bc0a:	83 ec 08             	sub    esp,0x8
c001bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc15:	e8 28 fe ff ff       	call   c001ba42 <Process::addArgs(char**)>
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	83 ec 08             	sub    esp,0x8
c001bc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc28:	e8 73 ee ff ff       	call   c001aaa0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001bc2d:	83 c4 10             	add    esp,0x10
c001bc30:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bc34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bc38:	83 f0 01             	xor    eax,0x1
c001bc3b:	88 c2                	mov    dl,al
c001bc3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc41:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001bc47:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001bc4c:	83 ec 08             	sub    esp,0x8
c001bc4f:	50                   	push   eax
c001bc50:	68 3c 8d 02 c0       	push   0xc0028d3c
c001bc55:	e8 eb 69 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001bc5a:	83 c4 10             	add    esp,0x10
c001bc5d:	90                   	nop
c001bc5e:	83 c4 14             	add    esp,0x14
c001bc61:	5b                   	pop    ebx
c001bc62:	5e                   	pop    esi
c001bc63:	c3                   	ret    

c001bc64 <Process::Process(bool, char const*, Process*, char**)>:
c001bc64:	56                   	push   esi
c001bc65:	53                   	push   ebx
c001bc66:	83 ec 24             	sub    esp,0x24
c001bc69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bc6d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc75:	05 0c 02 00 00       	add    eax,0x20c
c001bc7a:	bb 07 00 00 00       	mov    ebx,0x7
c001bc7f:	89 c6                	mov    esi,eax
c001bc81:	85 db                	test   ebx,ebx
c001bc83:	78 12                	js     c001bc97 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001bc85:	83 ec 0c             	sub    esp,0xc
c001bc88:	56                   	push   esi
c001bc89:	e8 84 a0 00 00       	call   c0025d12 <ThreadControlBlock::ThreadControlBlock()>
c001bc8e:	83 c4 10             	add    esp,0x10
c001bc91:	83 c6 63             	add    esi,0x63
c001bc94:	4b                   	dec    ebx
c001bc95:	eb ea                	jmp    c001bc81 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001bc97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc9b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001bca2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bca6:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001bcaf:	a1 24 a0 02 c0       	mov    eax,ds:0xc002a024
c001bcb4:	8d 50 01             	lea    edx,[eax+0x1]
c001bcb7:	89 15 24 a0 02 c0    	mov    DWORD PTR ds:0xc002a024,edx
c001bcbd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bcc1:	89 02                	mov    DWORD PTR [edx],eax
c001bcc3:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001bccb:	83 ec 0c             	sub    esp,0xc
c001bcce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bcd2:	e8 fb 37 ff ff       	call   c000f4d2 <malloc>
c001bcd7:	83 c4 10             	add    esp,0x10
c001bcda:	89 c3                	mov    ebx,eax
c001bcdc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bce1:	83 ec 08             	sub    esp,0x8
c001bce4:	50                   	push   eax
c001bce5:	53                   	push   ebx
c001bce6:	e8 dd 64 ff ff       	call   c00121c8 <VAS::VAS(bool)>
c001bceb:	83 c4 10             	add    esp,0x10
c001bcee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bcf2:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001bcf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bcfc:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001bd06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd0a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bd0e:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bd14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd18:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bd1e:	85 c0                	test   eax,eax
c001bd20:	74 42                	je     c001bd64 <Process::Process(bool, char const*, Process*, char**)+0x100>
c001bd22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd26:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bd2c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bd32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd36:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001bd3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd40:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bd46:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001bd4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd50:	05 0c 01 00 00       	add    eax,0x10c
c001bd55:	83 ec 08             	sub    esp,0x8
c001bd58:	52                   	push   edx
c001bd59:	50                   	push   eax
c001bd5a:	e8 bd 49 fe ff       	call   c000071c <strcpy>
c001bd5f:	83 c4 10             	add    esp,0x10
c001bd62:	eb 63                	jmp    c001bdc7 <Process::Process(bool, char const*, Process*, char**)+0x163>
c001bd64:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001bd6c:	83 ec 0c             	sub    esp,0xc
c001bd6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bd73:	e8 5a 37 ff ff       	call   c000f4d2 <malloc>
c001bd78:	83 c4 10             	add    esp,0x10
c001bd7b:	89 c3                	mov    ebx,eax
c001bd7d:	83 ec 08             	sub    esp,0x8
c001bd80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bd84:	53                   	push   ebx
c001bd85:	e8 08 4f ff ff       	call   c0010c92 <VgaText::VgaText(char const*)>
c001bd8a:	83 c4 10             	add    esp,0x10
c001bd8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd91:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001bd97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd9b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bda1:	83 ec 0c             	sub    esp,0xc
c001bda4:	50                   	push   eax
c001bda5:	e8 e9 42 ff ff       	call   c0010093 <addToTerminalCycle(VgaText*)>
c001bdaa:	83 c4 10             	add    esp,0x10
c001bdad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bdb1:	05 0c 01 00 00       	add    eax,0x10c
c001bdb6:	83 ec 08             	sub    esp,0x8
c001bdb9:	68 3f 8c 02 c0       	push   0xc0028c3f
c001bdbe:	50                   	push   eax
c001bdbf:	e8 58 49 fe ff       	call   c000071c <strcpy>
c001bdc4:	83 c4 10             	add    esp,0x10
c001bdc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bdcb:	83 c0 0c             	add    eax,0xc
c001bdce:	83 ec 08             	sub    esp,0x8
c001bdd1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bdd5:	50                   	push   eax
c001bdd6:	e8 41 49 fe ff       	call   c000071c <strcpy>
c001bddb:	83 c4 10             	add    esp,0x10
c001bdde:	83 ec 08             	sub    esp,0x8
c001bde1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bde9:	e8 54 fc ff ff       	call   c001ba42 <Process::addArgs(char**)>
c001bdee:	83 c4 10             	add    esp,0x10
c001bdf1:	90                   	nop
c001bdf2:	83 c4 24             	add    esp,0x24
c001bdf5:	5b                   	pop    ebx
c001bdf6:	5e                   	pop    esi
c001bdf7:	c3                   	ret    

c001bdf8 <disableIRQs()>:
c001bdf8:	fa                   	cli    
c001bdf9:	ff 05 6c bf 02 c0    	inc    DWORD PTR ds:0xc002bf6c
c001bdff:	c3                   	ret    

c001be00 <getIRQNestingLevel()>:
c001be00:	a1 6c bf 02 c0       	mov    eax,ds:0xc002bf6c
c001be05:	c3                   	ret    

c001be06 <enableIRQs()>:
c001be06:	a1 6c bf 02 c0       	mov    eax,ds:0xc002bf6c
c001be0b:	48                   	dec    eax
c001be0c:	a3 6c bf 02 c0       	mov    ds:0xc002bf6c,eax
c001be11:	75 01                	jne    c001be14 <enableIRQs()+0xe>
c001be13:	fb                   	sti    
c001be14:	c3                   	ret    

c001be15 <lockScheduler()>:
c001be15:	eb e1                	jmp    c001bdf8 <disableIRQs()>

c001be17 <unlockScheduler()>:
c001be17:	eb ed                	jmp    c001be06 <enableIRQs()>

c001be19 <userModeEntryPoint(void*)>:
c001be19:	83 ec 0c             	sub    esp,0xc
c001be1c:	e8 f6 ff ff ff       	call   c001be17 <unlockScheduler()>
c001be21:	fb                   	sti    
c001be22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be2a:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001be30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be34:	83 c4 0c             	add    esp,0xc
c001be37:	e9 a4 44 fe ff       	jmp    c00002e0 <goToUsermode>

c001be3c <lockStuff()>:
c001be3c:	e8 b7 ff ff ff       	call   c001bdf8 <disableIRQs()>
c001be41:	ff 05 68 bf 02 c0    	inc    DWORD PTR ds:0xc002bf68
c001be47:	c3                   	ret    

c001be48 <taskStartupFunction>:
c001be48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be4d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001be50:	c3                   	ret    

c001be51 <updateTimeUsed()>:
c001be51:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001be56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001be5c:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001be63:	74 50                	je     c001beb5 <updateTimeUsed()+0x64>
c001be65:	57                   	push   edi
c001be66:	56                   	push   esi
c001be67:	53                   	push   ebx
c001be68:	0f 31                	rdtsc  
c001be6a:	89 c1                	mov    ecx,eax
c001be6c:	a3 a8 bf 02 c0       	mov    ds:0xc002bfa8,eax
c001be71:	2b 0d 98 bf 02 c0    	sub    ecx,DWORD PTR ds:0xc002bf98
c001be77:	89 d3                	mov    ebx,edx
c001be79:	89 0d a0 bf 02 c0    	mov    DWORD PTR ds:0xc002bfa0,ecx
c001be7f:	1b 1d 9c bf 02 c0    	sbb    ebx,DWORD PTR ds:0xc002bf9c
c001be85:	a3 98 bf 02 c0       	mov    ds:0xc002bf98,eax
c001be8a:	89 1d a4 bf 02 c0    	mov    DWORD PTR ds:0xc002bfa4,ebx
c001be90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be95:	89 15 ac bf 02 c0    	mov    DWORD PTR ds:0xc002bfac,edx
c001be9b:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001be9e:	89 15 9c bf 02 c0    	mov    DWORD PTR ds:0xc002bf9c,edx
c001bea4:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001bea7:	01 f1                	add    ecx,esi
c001bea9:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001beac:	11 fb                	adc    ebx,edi
c001beae:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001beb1:	5b                   	pop    ebx
c001beb2:	5e                   	pop    esi
c001beb3:	5f                   	pop    edi
c001beb4:	c3                   	ret    
c001beb5:	c3                   	ret    

c001beb6 <switchToThread(ThreadControlBlock*)>:
c001beb6:	53                   	push   ebx
c001beb7:	83 ec 08             	sub    esp,0x8
c001beba:	a1 68 bf 02 c0       	mov    eax,ds:0xc002bf68
c001bebf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bec3:	85 c0                	test   eax,eax
c001bec5:	75 30                	jne    c001bef7 <switchToThread(ThreadControlBlock*)+0x41>
c001bec7:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001beca:	3c ff                	cmp    al,0xff
c001becc:	74 25                	je     c001bef3 <switchToThread(ThreadControlBlock*)+0x3d>
c001bece:	0f b6 d0             	movzx  edx,al
c001bed1:	b8 84 03 00 00       	mov    eax,0x384
c001bed6:	29 d0                	sub    eax,edx
c001bed8:	c1 e0 10             	shl    eax,0x10
c001bedb:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001bede:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001bee1:	e8 6b ff ff ff       	call   c001be51 <updateTimeUsed()>
c001bee6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001beea:	83 c4 08             	add    esp,0x8
c001beed:	5b                   	pop    ebx
c001beee:	e9 26 44 fe ff       	jmp    c0000319 <switchToThreadASM>
c001bef3:	31 c0                	xor    eax,eax
c001bef5:	eb e7                	jmp    c001bede <switchToThread(ThreadControlBlock*)+0x28>
c001bef7:	c7 05 64 bf 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bf64,0x1
c001bf01:	83 c4 08             	add    esp,0x8
c001bf04:	5b                   	pop    ebx
c001bf05:	c3                   	ret    

c001bf06 <Semaphore::Semaphore(int)>:
c001bf06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bf0e:	89 10                	mov    DWORD PTR [eax],edx
c001bf10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf14:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001bf1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf2a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf31:	90                   	nop
c001bf32:	c3                   	ret    
c001bf33:	90                   	nop

c001bf34 <Mutex::Mutex()>:
c001bf34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf38:	6a 01                	push   0x1
c001bf3a:	50                   	push   eax
c001bf3b:	e8 c6 ff ff ff       	call   c001bf06 <Semaphore::Semaphore(int)>
c001bf40:	83 c4 08             	add    esp,0x8
c001bf43:	90                   	nop
c001bf44:	c3                   	ret    
c001bf45:	90                   	nop

c001bf46 <Process::createThread(void (*)(void*), void*, int)>:
c001bf46:	55                   	push   ebp
c001bf47:	31 c9                	xor    ecx,ecx
c001bf49:	57                   	push   edi
c001bf4a:	56                   	push   esi
c001bf4b:	53                   	push   ebx
c001bf4c:	83 ec 1c             	sub    esp,0x1c
c001bf4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf53:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001bf5a:	89 f2                	mov    edx,esi
c001bf5c:	0f b7 c2             	movzx  eax,dx
c001bf5f:	83 e2 01             	and    edx,0x1
c001bf62:	74 14                	je     c001bf78 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001bf64:	d1 f8                	sar    eax,1
c001bf66:	41                   	inc    ecx
c001bf67:	89 c2                	mov    edx,eax
c001bf69:	83 f9 10             	cmp    ecx,0x10
c001bf6c:	75 ee                	jne    c001bf5c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001bf6e:	83 c4 1c             	add    esp,0x1c
c001bf71:	31 c0                	xor    eax,eax
c001bf73:	5b                   	pop    ebx
c001bf74:	5e                   	pop    esi
c001bf75:	5f                   	pop    edi
c001bf76:	5d                   	pop    ebp
c001bf77:	c3                   	ret    
c001bf78:	83 ec 08             	sub    esp,0x8
c001bf7b:	b8 01 00 00 00       	mov    eax,0x1
c001bf80:	d3 e0                	shl    eax,cl
c001bf82:	09 c6                	or     esi,eax
c001bf84:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bf8a:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001bf91:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001bf94:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bf97:	01 ce                	add    esi,ecx
c001bf99:	89 f0                	mov    eax,esi
c001bf9b:	c1 e0 05             	shl    eax,0x5
c001bf9e:	01 c6                	add    esi,eax
c001bfa0:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bfa3:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bfa9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bfaf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bfb3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001bfb9:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bfbf:	89 ca                	mov    edx,ecx
c001bfc1:	f7 da                	neg    edx
c001bfc3:	c1 e2 15             	shl    edx,0x15
c001bfc6:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bfcc:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001bfd2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bfd6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bfe0:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bfe6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bfea:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bff0:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bffa:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001c004:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001c00b:	50                   	push   eax
c001c00c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c010:	68 88 bf 02 c0       	push   0xc002bf88
c001c015:	e8 86 9b 00 00       	call   c0025ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c01a:	83 c4 10             	add    esp,0x10
c001c01d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c021:	83 c4 1c             	add    esp,0x1c
c001c024:	5b                   	pop    ebx
c001c025:	5e                   	pop    esi
c001c026:	5f                   	pop    edi
c001c027:	5d                   	pop    ebp
c001c028:	c3                   	ret    
c001c029:	90                   	nop

c001c02a <Process::createUserThread()>:
c001c02a:	83 ec 0c             	sub    esp,0xc
c001c02d:	68 80 00 00 00       	push   0x80
c001c032:	6a 00                	push   0x0
c001c034:	68 19 be 01 c0       	push   0xc001be19
c001c039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c03d:	e8 04 ff ff ff       	call   c001bf46 <Process::createThread(void (*)(void*), void*, int)>
c001c042:	83 c4 1c             	add    esp,0x1c
c001c045:	c3                   	ret    

c001c046 <setupMultitasking(void (*)())>:
c001c046:	56                   	push   esi
c001c047:	53                   	push   ebx
c001c048:	53                   	push   ebx
c001c049:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c04d:	eb 10                	jmp    c001c05f <setupMultitasking(void (*)())+0x19>
c001c04f:	83 ec 0c             	sub    esp,0xc
c001c052:	68 88 bf 02 c0       	push   0xc002bf88
c001c057:	e8 96 9a 00 00       	call   c0025af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c05c:	83 c4 10             	add    esp,0x10
c001c05f:	83 ec 0c             	sub    esp,0xc
c001c062:	68 88 bf 02 c0       	push   0xc002bf88
c001c067:	e8 6a 9a 00 00       	call   c0025ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c06c:	83 c4 10             	add    esp,0x10
c001c06f:	84 c0                	test   al,al
c001c071:	74 dc                	je     c001c04f <setupMultitasking(void (*)())+0x9>
c001c073:	83 ec 0c             	sub    esp,0xc
c001c076:	68 3b 07 00 00       	push   0x73b
c001c07b:	e8 52 34 ff ff       	call   c000f4d2 <malloc>
c001c080:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001c087:	89 c3                	mov    ebx,eax
c001c089:	6a 00                	push   0x0
c001c08b:	68 43 8c 02 c0       	push   0xc0028c43
c001c090:	6a 01                	push   0x1
c001c092:	50                   	push   eax
c001c093:	e8 cc fb ff ff       	call   c001bc64 <Process::Process(bool, char const*, Process*, char**)>
c001c098:	83 c4 18             	add    esp,0x18
c001c09b:	89 1d 94 bf 02 c0    	mov    DWORD PTR ds:0xc002bf94,ebx
c001c0a1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c0a7:	68 64 8d 02 c0       	push   0xc0028d64
c001c0ac:	e8 94 65 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c0b1:	58                   	pop    eax
c001c0b2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c0b8:	e8 4a 47 ff ff       	call   c0010807 <setActiveTerminal(VgaText*)>
c001c0bd:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001c0c5:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c0cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c0ce:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001c0d8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001c0de:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001c0e4:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001c0ee:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001c0f8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001c102:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001c108:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001c10e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001c118:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001c11e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001c128:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001c12e:	5a                   	pop    edx
c001c12f:	59                   	pop    ecx
c001c130:	68 3f 8c 02 c0       	push   0xc0028c3f
c001c135:	50                   	push   eax
c001c136:	e8 e1 45 fe ff       	call   c000071c <strcpy>
c001c13b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001c142:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001c146:	83 c4 14             	add    esp,0x14
c001c149:	5b                   	pop    ebx
c001c14a:	5e                   	pop    esi
c001c14b:	e9 bb 41 fe ff       	jmp    c000030b <switchToThreadASMFirstTime>

c001c150 <schedule()>:
c001c150:	a1 68 bf 02 c0       	mov    eax,ds:0xc002bf68
c001c155:	85 c0                	test   eax,eax
c001c157:	74 0b                	je     c001c164 <schedule()+0x14>
c001c159:	c7 05 64 bf 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bf64,0x1
c001c163:	c3                   	ret    
c001c164:	53                   	push   ebx
c001c165:	83 ec 14             	sub    esp,0x14
c001c168:	68 88 bf 02 c0       	push   0xc002bf88
c001c16d:	e8 64 99 00 00       	call   c0025ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c172:	83 c4 10             	add    esp,0x10
c001c175:	84 c0                	test   al,al
c001c177:	75 38                	jne    c001c1b1 <schedule()+0x61>
c001c179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c17e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c181:	4a                   	dec    edx
c001c182:	74 32                	je     c001c1b6 <schedule()+0x66>
c001c184:	83 ec 0c             	sub    esp,0xc
c001c187:	68 88 bf 02 c0       	push   0xc002bf88
c001c18c:	e8 3d 99 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c191:	c7 04 24 88 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf88
c001c198:	89 c3                	mov    ebx,eax
c001c19a:	e8 53 99 00 00       	call   c0025af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c19f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001c1a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1a9:	e8 08 fd ff ff       	call   c001beb6 <switchToThread(ThreadControlBlock*)>
c001c1ae:	83 c4 10             	add    esp,0x10
c001c1b1:	83 c4 08             	add    esp,0x8
c001c1b4:	5b                   	pop    ebx
c001c1b5:	c3                   	ret    
c001c1b6:	83 ec 08             	sub    esp,0x8
c001c1b9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001c1c0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c1c6:	68 88 bf 02 c0       	push   0xc002bf88
c001c1cb:	e8 d0 99 00 00       	call   c0025ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c1d0:	83 c4 10             	add    esp,0x10
c001c1d3:	eb af                	jmp    c001c184 <schedule()+0x34>

c001c1d5 <unlockStuff()>:
c001c1d5:	a1 68 bf 02 c0       	mov    eax,ds:0xc002bf68
c001c1da:	48                   	dec    eax
c001c1db:	a3 68 bf 02 c0       	mov    ds:0xc002bf68,eax
c001c1e0:	75 09                	jne    c001c1eb <unlockStuff()+0x16>
c001c1e2:	a1 64 bf 02 c0       	mov    eax,ds:0xc002bf64
c001c1e7:	85 c0                	test   eax,eax
c001c1e9:	75 05                	jne    c001c1f0 <unlockStuff()+0x1b>
c001c1eb:	e9 16 fc ff ff       	jmp    c001be06 <enableIRQs()>
c001c1f0:	83 ec 0c             	sub    esp,0xc
c001c1f3:	c7 05 64 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bf64,0x0
c001c1fd:	e8 4e ff ff ff       	call   c001c150 <schedule()>
c001c202:	83 c4 0c             	add    esp,0xc
c001c205:	e9 fc fb ff ff       	jmp    c001be06 <enableIRQs()>

c001c20a <Semaphore::tryAcquire()>:
c001c20a:	83 ec 0c             	sub    esp,0xc
c001c20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c211:	e8 26 fc ff ff       	call   c001be3c <lockStuff()>
c001c216:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c219:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c21b:	7c 0b                	jl     c001c228 <Semaphore::tryAcquire()+0x1e>
c001c21d:	e8 b3 ff ff ff       	call   c001c1d5 <unlockStuff()>
c001c222:	31 c0                	xor    eax,eax
c001c224:	83 c4 0c             	add    esp,0xc
c001c227:	c3                   	ret    
c001c228:	42                   	inc    edx
c001c229:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c22c:	e8 a4 ff ff ff       	call   c001c1d5 <unlockStuff()>
c001c231:	b0 01                	mov    al,0x1
c001c233:	83 c4 0c             	add    esp,0xc
c001c236:	c3                   	ret    
c001c237:	90                   	nop

c001c238 <Semaphore::assertLocked(char const*)>:
c001c238:	83 ec 0c             	sub    esp,0xc
c001c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c243:	e8 f4 fb ff ff       	call   c001be3c <lockStuff()>
c001c248:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c24a:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001c24d:	7c 05                	jl     c001c254 <Semaphore::assertLocked(char const*)+0x1c>
c001c24f:	83 c4 0c             	add    esp,0xc
c001c252:	eb 81                	jmp    c001c1d5 <unlockStuff()>
c001c254:	83 ec 0c             	sub    esp,0xc
c001c257:	52                   	push   edx
c001c258:	e8 ac cb ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001c25d:	83 c4 10             	add    esp,0x10
c001c260:	83 c4 0c             	add    esp,0xc
c001c263:	e9 6d ff ff ff       	jmp    c001c1d5 <unlockStuff()>

c001c268 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001c268:	83 ec 0c             	sub    esp,0xc
c001c26b:	e8 90 fb ff ff       	call   c001be00 <getIRQNestingLevel()>
c001c270:	83 ec 08             	sub    esp,0x8
c001c273:	50                   	push   eax
c001c274:	68 98 8d 02 c0       	push   0xc0028d98
c001c279:	e8 c7 63 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c27e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c282:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c287:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c28a:	e8 c1 fe ff ff       	call   c001c150 <schedule()>
c001c28f:	e8 83 fb ff ff       	call   c001be17 <unlockScheduler()>
c001c294:	e8 67 fb ff ff       	call   c001be00 <getIRQNestingLevel()>
c001c299:	5a                   	pop    edx
c001c29a:	59                   	pop    ecx
c001c29b:	50                   	push   eax
c001c29c:	68 cc 8d 02 c0       	push   0xc0028dcc
c001c2a1:	e8 9f 63 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c2a6:	83 c4 1c             	add    esp,0x1c
c001c2a9:	c3                   	ret    

c001c2aa <blockTask(TaskState)>:
c001c2aa:	83 ec 0c             	sub    esp,0xc
c001c2ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2b1:	e8 5f fb ff ff       	call   c001be15 <lockScheduler()>
c001c2b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c2be:	e8 8d fe ff ff       	call   c001c150 <schedule()>
c001c2c3:	83 c4 0c             	add    esp,0xc
c001c2c6:	e9 4c fb ff ff       	jmp    c001be17 <unlockScheduler()>

c001c2cb <waitTask(int, int*, int)>:
c001c2cb:	83 ec 18             	sub    esp,0x18
c001c2ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c2d7:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001c2da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c2de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2e3:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001c2e6:	6a 07                	push   0x7
c001c2e8:	e8 bd ff ff ff       	call   c001c2aa <blockTask(TaskState)>
c001c2ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f2:	83 c4 10             	add    esp,0x10
c001c2f5:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001c2f8:	85 d2                	test   edx,edx
c001c2fa:	74 0a                	je     c001c306 <waitTask(int, int*, int)+0x3b>
c001c2fc:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001c2ff:	89 02                	mov    DWORD PTR [edx],eax
c001c301:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c306:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001c309:	83 c4 0c             	add    esp,0xc
c001c30c:	c3                   	ret    

c001c30d <nanoSleepUntil(unsigned long long)>:
c001c30d:	83 ec 0c             	sub    esp,0xc
c001c310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c314:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c318:	3b 05 f0 b0 02 c0    	cmp    eax,DWORD PTR ds:0xc002b0f0
c001c31e:	89 d1                	mov    ecx,edx
c001c320:	1b 0d f4 b0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002b0f4
c001c326:	73 04                	jae    c001c32c <nanoSleepUntil(unsigned long long)+0x1f>
c001c328:	83 c4 0c             	add    esp,0xc
c001c32b:	c3                   	ret    
c001c32c:	e8 0b fb ff ff       	call   c001be3c <lockStuff()>
c001c331:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c337:	83 ec 08             	sub    esp,0x8
c001c33a:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001c33d:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001c340:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c346:	68 7c bf 02 c0       	push   0xc002bf7c
c001c34b:	e8 50 98 00 00       	call   c0025ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c350:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001c357:	e8 4e ff ff ff       	call   c001c2aa <blockTask(TaskState)>
c001c35c:	83 c4 1c             	add    esp,0x1c
c001c35f:	e9 71 fe ff ff       	jmp    c001c1d5 <unlockStuff()>

c001c364 <nanoSleep(unsigned long long)>:
c001c364:	a1 f0 b0 02 c0       	mov    eax,ds:0xc002b0f0
c001c369:	8b 15 f4 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0f4
c001c36f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001c373:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001c377:	eb 94                	jmp    c001c30d <nanoSleepUntil(unsigned long long)>

c001c379 <sleep(unsigned long long)>:
c001c379:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001c381:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001c386:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001c38a:	01 ca                	add    edx,ecx
c001c38c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c390:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c394:	eb ce                	jmp    c001c364 <nanoSleep(unsigned long long)>

c001c396 <Semaphore::acquire()>:
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39d:	e8 9a fa ff ff       	call   c001be3c <lockStuff()>
c001c3a2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c3a5:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c3a7:	7d 0c                	jge    c001c3b5 <Semaphore::acquire()+0x1f>
c001c3a9:	42                   	inc    edx
c001c3aa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c3ad:	83 c4 0c             	add    esp,0xc
c001c3b0:	e9 20 fe ff ff       	jmp    c001c1d5 <unlockStuff()>
c001c3b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3bb:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001c3c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c3c5:	85 d2                	test   edx,edx
c001c3c7:	74 2a                	je     c001c3f3 <Semaphore::acquire()+0x5d>
c001c3c9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c3cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c3d2:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001c3d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3db:	83 ec 0c             	sub    esp,0xc
c001c3de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c3e1:	6a 05                	push   0x5
c001c3e3:	e8 c2 fe ff ff       	call   c001c2aa <blockTask(TaskState)>
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	83 c4 0c             	add    esp,0xc
c001c3ee:	e9 e2 fd ff ff       	jmp    c001c1d5 <unlockStuff()>
c001c3f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3fc:	eb d7                	jmp    c001c3d5 <Semaphore::acquire()+0x3f>

c001c3fe <taskReturned>:
c001c3fe:	83 ec 18             	sub    esp,0x18
c001c401:	68 00 8e 02 c0       	push   0xc0028e00
c001c406:	e8 fe c9 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001c40b:	83 c4 10             	add    esp,0x10
c001c40e:	83 ec 0c             	sub    esp,0xc
c001c411:	6a 02                	push   0x2
c001c413:	e8 92 fe ff ff       	call   c001c2aa <blockTask(TaskState)>
c001c418:	e8 f8 f9 ff ff       	call   c001be15 <lockScheduler()>
c001c41d:	e8 2e fd ff ff       	call   c001c150 <schedule()>
c001c422:	e8 f0 f9 ff ff       	call   c001be17 <unlockScheduler()>
c001c427:	83 c4 10             	add    esp,0x10
c001c42a:	eb e2                	jmp    c001c40e <taskReturned+0x10>

c001c42c <unblockTask(ThreadControlBlock*)>:
c001c42c:	53                   	push   ebx
c001c42d:	83 ec 08             	sub    esp,0x8
c001c430:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c434:	e8 dc f9 ff ff       	call   c001be15 <lockScheduler()>
c001c439:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c43c:	85 c0                	test   eax,eax
c001c43e:	74 5c                	je     c001c49c <unblockTask(ThreadControlBlock*)+0x70>
c001c440:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c443:	48                   	dec    eax
c001c444:	74 31                	je     c001c477 <unblockTask(ThreadControlBlock*)+0x4b>
c001c446:	83 ec 0c             	sub    esp,0xc
c001c449:	68 88 bf 02 c0       	push   0xc002bf88
c001c44e:	e8 7b 96 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c453:	83 c4 10             	add    esp,0x10
c001c456:	85 c0                	test   eax,eax
c001c458:	75 17                	jne    c001c471 <unblockTask(ThreadControlBlock*)+0x45>
c001c45a:	eb 65                	jmp    c001c4c1 <unblockTask(ThreadControlBlock*)+0x95>
c001c45c:	83 ec 08             	sub    esp,0x8
c001c45f:	50                   	push   eax
c001c460:	68 88 bf 02 c0       	push   0xc002bf88
c001c465:	e8 3e 99 00 00       	call   c0025da8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c46a:	83 c4 10             	add    esp,0x10
c001c46d:	85 c0                	test   eax,eax
c001c46f:	74 50                	je     c001c4c1 <unblockTask(ThreadControlBlock*)+0x95>
c001c471:	39 c3                	cmp    ebx,eax
c001c473:	75 e7                	jne    c001c45c <unblockTask(ThreadControlBlock*)+0x30>
c001c475:	eb 1c                	jmp    c001c493 <unblockTask(ThreadControlBlock*)+0x67>
c001c477:	83 ec 0c             	sub    esp,0xc
c001c47a:	68 f0 8e 02 c0       	push   0xc0028ef0
c001c47f:	e8 c1 61 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c484:	c7 04 24 7c 8e 02 c0 	mov    DWORD PTR [esp],0xc0028e7c
c001c48b:	e8 b5 61 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c490:	83 c4 10             	add    esp,0x10
c001c493:	83 c4 08             	add    esp,0x8
c001c496:	5b                   	pop    ebx
c001c497:	e9 7b f9 ff ff       	jmp    c001be17 <unlockScheduler()>
c001c49c:	83 ec 0c             	sub    esp,0xc
c001c49f:	68 34 8e 02 c0       	push   0xc0028e34
c001c4a4:	e8 9c 61 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c4a9:	c7 04 24 7c 8e 02 c0 	mov    DWORD PTR [esp],0xc0028e7c
c001c4b0:	e8 90 61 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c4b5:	83 c4 10             	add    esp,0x10
c001c4b8:	83 c4 08             	add    esp,0x8
c001c4bb:	5b                   	pop    ebx
c001c4bc:	e9 56 f9 ff ff       	jmp    c001be17 <unlockScheduler()>
c001c4c1:	83 ec 08             	sub    esp,0x8
c001c4c4:	53                   	push   ebx
c001c4c5:	68 88 bf 02 c0       	push   0xc002bf88
c001c4ca:	e8 d1 96 00 00       	call   c0025ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c4cf:	83 c4 10             	add    esp,0x10
c001c4d2:	83 c4 08             	add    esp,0x8
c001c4d5:	5b                   	pop    ebx
c001c4d6:	e9 3c f9 ff ff       	jmp    c001be17 <unlockScheduler()>

c001c4db <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c4db:	55                   	push   ebp
c001c4dc:	57                   	push   edi
c001c4dd:	56                   	push   esi
c001c4de:	53                   	push   ebx
c001c4df:	83 ec 1c             	sub    esp,0x1c
c001c4e2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c4e6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c4e9:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c4ef:	85 c9                	test   ecx,ecx
c001c4f1:	7e 20                	jle    c001c513 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c4f3:	31 f6                	xor    esi,esi
c001c4f5:	83 ec 0c             	sub    esp,0xc
c001c4f8:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c4ff:	46                   	inc    esi
c001c500:	e8 dd 2f ff ff       	call   c000f4e2 <free>
c001c505:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c508:	83 c4 10             	add    esp,0x10
c001c50b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c511:	7f e2                	jg     c001c4f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c513:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c51d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c522:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c525:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c528:	d3 c0                	rol    eax,cl
c001c52a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c531:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c534:	89 f7                	mov    edi,esi
c001c536:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c53e:	0f 85 4f 01 00 00    	jne    c001c693 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c544:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c54a:	85 c0                	test   eax,eax
c001c54c:	0f 84 aa 00 00 00    	je     c001c5fc <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c552:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c555:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c559:	31 c9                	xor    ecx,ecx
c001c55b:	eb 10                	jmp    c001c56d <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c55d:	41                   	inc    ecx
c001c55e:	83 f9 10             	cmp    ecx,0x10
c001c561:	0f 84 95 00 00 00    	je     c001c5fc <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c567:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c56d:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c574:	d3 fa                	sar    edx,cl
c001c576:	83 e2 01             	and    edx,0x1
c001c579:	74 e2                	je     c001c55d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c57b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c57e:	01 ca                	add    edx,ecx
c001c580:	89 d5                	mov    ebp,edx
c001c582:	c1 e5 05             	shl    ebp,0x5
c001c585:	01 ea                	add    edx,ebp
c001c587:	01 d0                	add    eax,edx
c001c589:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c58f:	83 fd 07             	cmp    ebp,0x7
c001c592:	75 c9                	jne    c001c55d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c594:	05 40 02 00 00       	add    eax,0x240
c001c599:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c59c:	83 fd ff             	cmp    ebp,0xffffffff
c001c59f:	0f 8c 08 01 00 00    	jl     c001c6ad <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c5a5:	0f 84 b9 01 00 00    	je     c001c764 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c5ab:	85 ed                	test   ebp,ebp
c001c5ad:	0f 84 a0 01 00 00    	je     c001c753 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c5b3:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c5b5:	75 a6                	jne    c001c55d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c5b7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c5bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c5c1:	01 d0                	add    eax,edx
c001c5c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c5c7:	83 ec 0c             	sub    esp,0xc
c001c5ca:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c5d0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c5d3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c5d9:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c5e0:	50                   	push   eax
c001c5e1:	e8 46 fe ff ff       	call   c001c42c <unblockTask(ThreadControlBlock*)>
c001c5e6:	83 c4 10             	add    esp,0x10
c001c5e9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c5ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c5f0:	89 f7                	mov    edi,esi
c001c5f2:	41                   	inc    ecx
c001c5f3:	83 f9 10             	cmp    ecx,0x10
c001c5f6:	0f 85 6b ff ff ff    	jne    c001c567 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c5fc:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c602:	85 c0                	test   eax,eax
c001c604:	74 5d                	je     c001c663 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c606:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c60c:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c612:	74 4f                	je     c001c663 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c614:	83 ec 0c             	sub    esp,0xc
c001c617:	68 88 bf 02 c0       	push   0xc002bf88
c001c61c:	e8 ad 94 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c621:	c7 04 24 88 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf88
c001c628:	89 c7                	mov    edi,eax
c001c62a:	e8 a7 94 00 00       	call   c0025ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c62f:	83 c4 10             	add    esp,0x10
c001c632:	84 c0                	test   al,al
c001c634:	0f 84 e4 00 00 00    	je     c001c71e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c63a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c63d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c643:	85 d2                	test   edx,edx
c001c645:	74 0f                	je     c001c656 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c647:	83 ec 0c             	sub    esp,0xc
c001c64a:	8b 02                	mov    eax,DWORD PTR [edx]
c001c64c:	52                   	push   edx
c001c64d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c650:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c653:	83 c4 10             	add    esp,0x10
c001c656:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c660:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c663:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c669:	85 db                	test   ebx,ebx
c001c66b:	74 16                	je     c001c683 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c66d:	83 ec 0c             	sub    esp,0xc
c001c670:	53                   	push   ebx
c001c671:	e8 3e 55 ff ff       	call   c0011bb4 <VAS::~VAS()>
c001c676:	58                   	pop    eax
c001c677:	5a                   	pop    edx
c001c678:	6a 10                	push   0x10
c001c67a:	53                   	push   ebx
c001c67b:	e8 e5 5e ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c001c680:	83 c4 10             	add    esp,0x10
c001c683:	83 ec 0c             	sub    esp,0xc
c001c686:	68 4a 8c 02 c0       	push   0xc0028c4a
c001c68b:	e8 b5 5f ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c690:	83 c4 10             	add    esp,0x10
c001c693:	83 ec 08             	sub    esp,0x8
c001c696:	68 3b 07 00 00       	push   0x73b
c001c69b:	68 58 8c 02 c0       	push   0xc0028c58
c001c6a0:	e8 a0 5f ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c6a5:	83 c4 2c             	add    esp,0x2c
c001c6a8:	5b                   	pop    ebx
c001c6a9:	5e                   	pop    esi
c001c6aa:	5f                   	pop    edi
c001c6ab:	5d                   	pop    ebp
c001c6ac:	c3                   	ret    
c001c6ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c6b1:	83 ec 0c             	sub    esp,0xc
c001c6b4:	68 34 8f 02 c0       	push   0xc0028f34
c001c6b9:	e8 4b c7 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001c6be:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c6c1:	83 c4 10             	add    esp,0x10
c001c6c4:	89 f7                	mov    edi,esi
c001c6c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6ca:	e9 8e fe ff ff       	jmp    c001c55d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c6cf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c6d5:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c6db:	75 1c                	jne    c001c6f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c6dd:	83 ec 0c             	sub    esp,0xc
c001c6e0:	68 9c 8f 02 c0       	push   0xc0028f9c
c001c6e5:	e8 5b 5f ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c6ea:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c6f1:	e8 b4 fb ff ff       	call   c001c2aa <blockTask(TaskState)>
c001c6f6:	83 c4 10             	add    esp,0x10
c001c6f9:	83 ec 08             	sub    esp,0x8
c001c6fc:	56                   	push   esi
c001c6fd:	68 88 bf 02 c0       	push   0xc002bf88
c001c702:	e8 99 94 00 00       	call   c0025ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c707:	c7 04 24 88 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf88
c001c70e:	e8 bb 93 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c713:	83 c4 10             	add    esp,0x10
c001c716:	39 f8                	cmp    eax,edi
c001c718:	0f 84 1c ff ff ff    	je     c001c63a <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c71e:	83 ec 0c             	sub    esp,0xc
c001c721:	68 88 bf 02 c0       	push   0xc002bf88
c001c726:	e8 a3 93 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c72b:	c7 04 24 88 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf88
c001c732:	89 c6                	mov    esi,eax
c001c734:	e8 b9 93 00 00       	call   c0025af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c739:	83 c4 10             	add    esp,0x10
c001c73c:	39 f3                	cmp    ebx,esi
c001c73e:	74 b9                	je     c001c6f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c740:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c743:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c746:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c74c:	75 ab                	jne    c001c6f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c74e:	e9 7c ff ff ff       	jmp    c001c6cf <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c753:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c757:	83 ec 0c             	sub    esp,0xc
c001c75a:	68 68 8f 02 c0       	push   0xc0028f68
c001c75f:	e9 55 ff ff ff       	jmp    c001c6b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c764:	8b 36                	mov    esi,DWORD PTR [esi]
c001c766:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c76a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c76d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c770:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c776:	01 d7                	add    edi,edx
c001c778:	89 f8                	mov    eax,edi
c001c77a:	e9 44 fe ff ff       	jmp    c001c5c3 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c77f <cleanerTaskFunction(void*)>:
c001c77f:	53                   	push   ebx
c001c780:	83 ec 08             	sub    esp,0x8
c001c783:	e8 8f f6 ff ff       	call   c001be17 <unlockScheduler()>
c001c788:	e8 88 f6 ff ff       	call   c001be15 <lockScheduler()>
c001c78d:	80 3d 4c bf 02 c0 00 	cmp    BYTE PTR ds:0xc002bf4c,0x0
c001c794:	0f 85 8e 00 00 00    	jne    c001c828 <cleanerTaskFunction(void*)+0xa9>
c001c79a:	83 ec 0c             	sub    esp,0xc
c001c79d:	6a 02                	push   0x2
c001c79f:	e8 c4 fa ff ff       	call   c001c268 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c7a4:	83 c4 10             	add    esp,0x10
c001c7a7:	c6 05 4c bf 02 c0 00 	mov    BYTE PTR ds:0xc002bf4c,0x0
c001c7ae:	e8 89 f6 ff ff       	call   c001be3c <lockStuff()>
c001c7b3:	e8 5d f6 ff ff       	call   c001be15 <lockScheduler()>
c001c7b8:	83 ec 0c             	sub    esp,0xc
c001c7bb:	68 70 bf 02 c0       	push   0xc002bf70
c001c7c0:	e8 11 93 00 00       	call   c0025ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c7c5:	83 c4 10             	add    esp,0x10
c001c7c8:	84 c0                	test   al,al
c001c7ca:	75 40                	jne    c001c80c <cleanerTaskFunction(void*)+0x8d>
c001c7cc:	83 ec 0c             	sub    esp,0xc
c001c7cf:	68 70 bf 02 c0       	push   0xc002bf70
c001c7d4:	e8 f5 92 00 00       	call   c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c7d9:	c7 04 24 70 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf70
c001c7e0:	89 c3                	mov    ebx,eax
c001c7e2:	e8 0b 93 00 00       	call   c0025af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c7e7:	c7 04 24 6e 8c 02 c0 	mov    DWORD PTR [esp],0xc0028c6e
c001c7ee:	e8 52 5e ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c7f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7f6:	e8 e0 fc ff ff       	call   c001c4db <cleanupTerminatedTask(ThreadControlBlock*)>
c001c7fb:	c7 04 24 87 8c 02 c0 	mov    DWORD PTR [esp],0xc0028c87
c001c802:	e8 3e 5e ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c807:	83 c4 10             	add    esp,0x10
c001c80a:	eb ac                	jmp    c001c7b8 <cleanerTaskFunction(void*)+0x39>
c001c80c:	e8 06 f6 ff ff       	call   c001be17 <unlockScheduler()>
c001c811:	e8 bf f9 ff ff       	call   c001c1d5 <unlockStuff()>
c001c816:	e8 fa f5 ff ff       	call   c001be15 <lockScheduler()>
c001c81b:	80 3d 4c bf 02 c0 00 	cmp    BYTE PTR ds:0xc002bf4c,0x0
c001c822:	0f 84 72 ff ff ff    	je     c001c79a <cleanerTaskFunction(void*)+0x1b>
c001c828:	e8 ea f5 ff ff       	call   c001be17 <unlockScheduler()>
c001c82d:	e9 75 ff ff ff       	jmp    c001c7a7 <cleanerTaskFunction(void*)+0x28>

c001c832 <terminateTask(int)>:
c001c832:	83 ec 14             	sub    esp,0x14
c001c835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c83a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c83d:	83 c0 0c             	add    eax,0xc
c001c840:	50                   	push   eax
c001c841:	68 c4 8f 02 c0       	push   0xc0028fc4
c001c846:	e8 fa 5d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c84b:	e8 ec f5 ff ff       	call   c001be3c <lockStuff()>
c001c850:	e8 c0 f5 ff ff       	call   c001be15 <lockScheduler()>
c001c855:	c7 04 24 9a 8c 02 c0 	mov    DWORD PTR [esp],0xc0028c9a
c001c85c:	e8 e4 5d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c861:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c86a:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c86d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c872:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c875:	5a                   	pop    edx
c001c876:	59                   	pop    ecx
c001c877:	50                   	push   eax
c001c878:	68 70 bf 02 c0       	push   0xc002bf70
c001c87d:	e8 1e 93 00 00       	call   c0025ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c882:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c887:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c88e:	c7 04 24 b4 8c 02 c0 	mov    DWORD PTR [esp],0xc0028cb4
c001c895:	e8 ab 5d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c89a:	83 c4 10             	add    esp,0x10
c001c89d:	a1 48 bf 02 c0       	mov    eax,ds:0xc002bf48
c001c8a2:	85 c0                	test   eax,eax
c001c8a4:	74 5a                	je     c001c900 <terminateTask(int)+0xce>
c001c8a6:	83 ec 0c             	sub    esp,0xc
c001c8a9:	68 ce 8c 02 c0       	push   0xc0028cce
c001c8ae:	e8 92 5d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c8b3:	58                   	pop    eax
c001c8b4:	c6 05 4c bf 02 c0 01 	mov    BYTE PTR ds:0xc002bf4c,0x1
c001c8bb:	ff 35 48 bf 02 c0    	push   DWORD PTR ds:0xc002bf48
c001c8c1:	e8 66 fb ff ff       	call   c001c42c <unblockTask(ThreadControlBlock*)>
c001c8c6:	c7 04 24 e8 8c 02 c0 	mov    DWORD PTR [esp],0xc0028ce8
c001c8cd:	e8 73 5d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c8d2:	83 c4 10             	add    esp,0x10
c001c8d5:	e8 3d f5 ff ff       	call   c001be17 <unlockScheduler()>
c001c8da:	e8 f6 f8 ff ff       	call   c001c1d5 <unlockStuff()>
c001c8df:	83 ec 0c             	sub    esp,0xc
c001c8e2:	68 20 8d 02 c0       	push   0xc0028d20
c001c8e7:	e8 59 5d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c8ec:	83 c4 10             	add    esp,0x10
c001c8ef:	e8 21 f5 ff ff       	call   c001be15 <lockScheduler()>
c001c8f4:	e8 57 f8 ff ff       	call   c001c150 <schedule()>
c001c8f9:	e8 19 f5 ff ff       	call   c001be17 <unlockScheduler()>
c001c8fe:	eb ef                	jmp    c001c8ef <terminateTask(int)+0xbd>
c001c900:	83 ec 0c             	sub    esp,0xc
c001c903:	68 02 8d 02 c0       	push   0xc0028d02
c001c908:	e8 38 5d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001c90d:	83 c4 10             	add    esp,0x10
c001c910:	eb c3                	jmp    c001c8d5 <terminateTask(int)+0xa3>

c001c912 <Thr::terminateFromIRQ(int)>:
c001c912:	83 ec 18             	sub    esp,0x18
c001c915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c919:	e8 14 ff ff ff       	call   c001c832 <terminateTask(int)>

c001c91e <Semaphore::release()>:
c001c91e:	83 ec 0c             	sub    esp,0xc
c001c921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c925:	e8 12 f5 ff ff       	call   c001be3c <lockStuff()>
c001c92a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c92d:	85 d2                	test   edx,edx
c001c92f:	74 1a                	je     c001c94b <Semaphore::release()+0x2d>
c001c931:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c934:	83 ec 0c             	sub    esp,0xc
c001c937:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c93a:	52                   	push   edx
c001c93b:	e8 ec fa ff ff       	call   c001c42c <unblockTask(ThreadControlBlock*)>
c001c940:	83 c4 10             	add    esp,0x10
c001c943:	83 c4 0c             	add    esp,0xc
c001c946:	e9 8a f8 ff ff       	jmp    c001c1d5 <unlockStuff()>
c001c94b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c94e:	83 c4 0c             	add    esp,0xc
c001c951:	e9 7f f8 ff ff       	jmp    c001c1d5 <unlockStuff()>

c001c956 <__static_initialization_and_destruction_0(int, int)>:
c001c956:	83 ec 0c             	sub    esp,0xc
c001c959:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c95e:	0f 85 88 00 00 00    	jne    c001c9ec <__static_initialization_and_destruction_0(int, int)+0x96>
c001c964:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c96c:	75 7e                	jne    c001c9ec <__static_initialization_and_destruction_0(int, int)+0x96>
c001c96e:	83 ec 0c             	sub    esp,0xc
c001c971:	68 88 bf 02 c0       	push   0xc002bf88
c001c976:	e8 d5 93 00 00       	call   c0025d50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c97b:	83 c4 10             	add    esp,0x10
c001c97e:	83 ec 04             	sub    esp,0x4
c001c981:	68 34 9a 02 c0       	push   0xc0029a34
c001c986:	68 88 bf 02 c0       	push   0xc002bf88
c001c98b:	68 10 5d 02 c0       	push   0xc0025d10
c001c990:	e8 4a 5b ff ff       	call   c00124df <__cxa_atexit>
c001c995:	83 c4 10             	add    esp,0x10
c001c998:	83 ec 0c             	sub    esp,0xc
c001c99b:	68 7c bf 02 c0       	push   0xc002bf7c
c001c9a0:	e8 ab 93 00 00       	call   c0025d50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c9a5:	83 c4 10             	add    esp,0x10
c001c9a8:	83 ec 04             	sub    esp,0x4
c001c9ab:	68 34 9a 02 c0       	push   0xc0029a34
c001c9b0:	68 7c bf 02 c0       	push   0xc002bf7c
c001c9b5:	68 10 5d 02 c0       	push   0xc0025d10
c001c9ba:	e8 20 5b ff ff       	call   c00124df <__cxa_atexit>
c001c9bf:	83 c4 10             	add    esp,0x10
c001c9c2:	83 ec 0c             	sub    esp,0xc
c001c9c5:	68 70 bf 02 c0       	push   0xc002bf70
c001c9ca:	e8 81 93 00 00       	call   c0025d50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c9cf:	83 c4 10             	add    esp,0x10
c001c9d2:	83 ec 04             	sub    esp,0x4
c001c9d5:	68 34 9a 02 c0       	push   0xc0029a34
c001c9da:	68 70 bf 02 c0       	push   0xc002bf70
c001c9df:	68 10 5d 02 c0       	push   0xc0025d10
c001c9e4:	e8 f6 5a ff ff       	call   c00124df <__cxa_atexit>
c001c9e9:	83 c4 10             	add    esp,0x10
c001c9ec:	90                   	nop
c001c9ed:	83 c4 0c             	add    esp,0xc
c001c9f0:	c3                   	ret    

c001c9f1 <_GLOBAL__sub_I_kernelProcess>:
c001c9f1:	83 ec 0c             	sub    esp,0xc
c001c9f4:	83 ec 08             	sub    esp,0x8
c001c9f7:	68 ff ff 00 00       	push   0xffff
c001c9fc:	6a 01                	push   0x1
c001c9fe:	e8 53 ff ff ff       	call   c001c956 <__static_initialization_and_destruction_0(int, int)>
c001ca03:	83 c4 10             	add    esp,0x10
c001ca06:	83 c4 0c             	add    esp,0xc
c001ca09:	c3                   	ret    

c001ca0a <Vm::inbv(unsigned short)>:
c001ca0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca0e:	ec                   	in     al,dx
c001ca0f:	c3                   	ret    

c001ca10 <Vm::outbv(unsigned short, unsigned char)>:
c001ca10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca18:	ee                   	out    dx,al
c001ca19:	c3                   	ret    

c001ca1a <Vm::vm8086EntryPoint(void*)>:
c001ca1a:	83 ec 0c             	sub    esp,0xc
c001ca1d:	e8 f5 f3 ff ff       	call   c001be17 <unlockScheduler()>
c001ca22:	fb                   	sti    
c001ca23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca28:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ca2c:	52                   	push   edx
c001ca2d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ca31:	52                   	push   edx
c001ca32:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ca36:	52                   	push   edx
c001ca37:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ca3b:	50                   	push   eax
c001ca3c:	e8 6e 38 fe ff       	call   c00002af <goToVM86>
c001ca41:	83 c4 1c             	add    esp,0x1c
c001ca44:	c3                   	ret    

c001ca45 <Vm::mainVm8086Loop(void*)>:
c001ca45:	83 ec 0c             	sub    esp,0xc
c001ca48:	e8 ca f3 ff ff       	call   c001be17 <unlockScheduler()>
c001ca4d:	83 ec 0c             	sub    esp,0xc
c001ca50:	c6 05 b1 bf 02 c0 01 	mov    BYTE PTR ds:0xc002bfb1,0x1
c001ca57:	6a 02                	push   0x2
c001ca59:	e8 4c f8 ff ff       	call   c001c2aa <blockTask(TaskState)>
c001ca5e:	58                   	pop    eax
c001ca5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca63:	e8 b2 ff ff ff       	call   c001ca1a <Vm::vm8086EntryPoint(void*)>
c001ca68:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ca6f:	c6 05 b0 bf 02 c0 01 	mov    BYTE PTR ds:0xc002bfb0,0x1
c001ca76:	e8 2f f8 ff ff       	call   c001c2aa <blockTask(TaskState)>
c001ca7b:	83 c4 10             	add    esp,0x10
c001ca7e:	eb cd                	jmp    c001ca4d <Vm::mainVm8086Loop(void*)+0x8>

c001ca80 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ca80:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ca85:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ca8a:	c1 e0 04             	shl    eax,0x4
c001ca8d:	01 d0                	add    eax,edx
c001ca8f:	c3                   	ret    

c001ca90 <Vm::getSegment(unsigned int)>:
c001ca90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca94:	c1 e8 10             	shr    eax,0x10
c001ca97:	c3                   	ret    

c001ca98 <Vm::getOffset(unsigned int)>:
c001ca98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca9c:	c3                   	ret    

c001ca9d <Vm::initialise8086()>:
c001ca9d:	53                   	push   ebx
c001ca9e:	83 ec 14             	sub    esp,0x14
c001caa1:	68 3b 07 00 00       	push   0x73b
c001caa6:	e8 27 2a ff ff       	call   c000f4d2 <malloc>
c001caab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cab2:	89 c3                	mov    ebx,eax
c001cab4:	ff 35 94 bf 02 c0    	push   DWORD PTR ds:0xc002bf94
c001caba:	68 e3 8f 02 c0       	push   0xc0028fe3
c001cabf:	6a 01                	push   0x1
c001cac1:	50                   	push   eax
c001cac2:	e8 9d f1 ff ff       	call   c001bc64 <Process::Process(bool, char const*, Process*, char**)>
c001cac7:	83 c4 20             	add    esp,0x20
c001caca:	89 1d b8 bf 02 c0    	mov    DWORD PTR ds:0xc002bfb8,ebx
c001cad0:	68 80 00 00 00       	push   0x80
c001cad5:	6a 00                	push   0x0
c001cad7:	68 45 ca 01 c0       	push   0xc001ca45
c001cadc:	53                   	push   ebx
c001cadd:	e8 64 f4 ff ff       	call   c001bf46 <Process::createThread(void (*)(void*), void*, int)>
c001cae2:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001cae9:	a3 b4 bf 02 c0       	mov    ds:0xc002bfb4,eax
c001caee:	68 00 01 00 00       	push   0x100
c001caf3:	a1 b8 bf 02 c0       	mov    eax,ds:0xc002bfb8
c001caf8:	6a 00                	push   0x0
c001cafa:	6a 00                	push   0x0
c001cafc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb02:	e8 0d 55 ff ff       	call   c0012014 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001cb07:	83 c4 28             	add    esp,0x28
c001cb0a:	5b                   	pop    ebx
c001cb0b:	c3                   	ret    

c001cb0c <Vm::finish8086()>:
c001cb0c:	83 ec 0c             	sub    esp,0xc
c001cb0f:	e8 01 f3 ff ff       	call   c001be15 <lockScheduler()>
c001cb14:	80 3d b0 bf 02 c0 00 	cmp    BYTE PTR ds:0xc002bfb0,0x0
c001cb1b:	75 07                	jne    c001cb24 <Vm::finish8086()+0x18>
c001cb1d:	e8 f5 f2 ff ff       	call   c001be17 <unlockScheduler()>
c001cb22:	eb eb                	jmp    c001cb0f <Vm::finish8086()+0x3>
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	c6 05 b0 bf 02 c0 00 	mov    BYTE PTR ds:0xc002bfb0,0x0
c001cb2e:	ff 35 b4 bf 02 c0    	push   DWORD PTR ds:0xc002bfb4
c001cb34:	e8 f3 f8 ff ff       	call   c001c42c <unblockTask(ThreadControlBlock*)>
c001cb39:	83 c4 1c             	add    esp,0x1c
c001cb3c:	e9 d6 f2 ff ff       	jmp    c001be17 <unlockScheduler()>

c001cb41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001cb41:	55                   	push   ebp
c001cb42:	57                   	push   edi
c001cb43:	56                   	push   esi
c001cb44:	53                   	push   ebx
c001cb45:	83 ec 2c             	sub    esp,0x2c
c001cb48:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cb4c:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001cb50:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001cb54:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cb58:	e8 b8 f2 ff ff       	call   c001be15 <lockScheduler()>
c001cb5d:	a0 b1 bf 02 c0       	mov    al,ds:0xc002bfb1
c001cb62:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb66:	84 c0                	test   al,al
c001cb68:	75 18                	jne    c001cb82 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x41>
c001cb6a:	e8 a8 f2 ff ff       	call   c001be17 <unlockScheduler()>
c001cb6f:	50                   	push   eax
c001cb70:	50                   	push   eax
c001cb71:	6a 00                	push   0x0
c001cb73:	68 00 e1 f5 05       	push   0x5f5e100
c001cb78:	e8 e7 f7 ff ff       	call   c001c364 <nanoSleep(unsigned long long)>
c001cb7d:	83 c4 10             	add    esp,0x10
c001cb80:	eb d6                	jmp    c001cb58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001cb82:	a1 b4 bf 02 c0       	mov    eax,ds:0xc002bfb4
c001cb87:	83 ec 0c             	sub    esp,0xc
c001cb8a:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001cb8e:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001cb92:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001cb96:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001cb9a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001cb9e:	68 14 01 00 00       	push   0x114
c001cba3:	e8 2a 29 ff ff       	call   c000f4d2 <malloc>
c001cba8:	83 c4 0c             	add    esp,0xc
c001cbab:	89 c7                	mov    edi,eax
c001cbad:	ff 35 94 bf 02 c0    	push   DWORD PTR ds:0xc002bf94
c001cbb3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cbb7:	50                   	push   eax
c001cbb8:	e8 b7 5f ff ff       	call   c0012b74 <File::File(char const*, Process*)>
c001cbbd:	83 c4 10             	add    esp,0x10
c001cbc0:	85 ff                	test   edi,edi
c001cbc2:	75 0a                	jne    c001cbce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x8d>
c001cbc4:	83 ec 0c             	sub    esp,0xc
c001cbc7:	68 f2 8f 02 c0       	push   0xc0028ff2
c001cbcc:	eb 27                	jmp    c001cbf5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xb4>
c001cbce:	50                   	push   eax
c001cbcf:	8d 44 24 17          	lea    eax,[esp+0x17]
c001cbd3:	50                   	push   eax
c001cbd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cbd8:	50                   	push   eax
c001cbd9:	57                   	push   edi
c001cbda:	e8 a5 62 ff ff       	call   c0012e84 <File::stat(unsigned long long*, bool*)>
c001cbdf:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001cbe4:	83 c4 10             	add    esp,0x10
c001cbe7:	89 e8                	mov    eax,ebp
c001cbe9:	84 c0                	test   al,al
c001cbeb:	74 19                	je     c001cc06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc5>
c001cbed:	83 ec 0c             	sub    esp,0xc
c001cbf0:	68 06 90 02 c0       	push   0xc0029006
c001cbf5:	e8 0f c2 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001cbfa:	31 ed                	xor    ebp,ebp
c001cbfc:	e8 16 f2 ff ff       	call   c001be17 <unlockScheduler()>
c001cc01:	83 c4 10             	add    esp,0x10
c001cc04:	eb 75                	jmp    c001cc7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13a>
c001cc06:	50                   	push   eax
c001cc07:	50                   	push   eax
c001cc08:	6a 01                	push   0x1
c001cc0a:	57                   	push   edi
c001cc0b:	e8 c8 5f ff ff       	call   c0012bd8 <File::open(FileOpenMode)>
c001cc10:	83 c4 10             	add    esp,0x10
c001cc13:	85 c0                	test   eax,eax
c001cc15:	74 17                	je     c001cc2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xed>
c001cc17:	83 ec 0c             	sub    esp,0xc
c001cc1a:	68 1f 90 02 c0       	push   0xc002901f
c001cc1f:	e8 e5 c1 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001cc24:	e8 ee f1 ff ff       	call   c001be17 <unlockScheduler()>
c001cc29:	83 c4 10             	add    esp,0x10
c001cc2c:	eb 4d                	jmp    c001cc7b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13a>
c001cc2e:	0f b7 f6             	movzx  esi,si
c001cc31:	50                   	push   eax
c001cc32:	0f b7 db             	movzx  ebx,bx
c001cc35:	50                   	push   eax
c001cc36:	56                   	push   esi
c001cc37:	53                   	push   ebx
c001cc38:	e8 43 fe ff ff       	call   c001ca80 <Vm::realToLinear(unsigned short, unsigned short)>
c001cc3d:	5a                   	pop    edx
c001cc3e:	8b 17                	mov    edx,DWORD PTR [edi]
c001cc40:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001cc44:	51                   	push   ecx
c001cc45:	50                   	push   eax
c001cc46:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cc4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cc4e:	57                   	push   edi
c001cc4f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cc52:	83 c4 14             	add    esp,0x14
c001cc55:	57                   	push   edi
c001cc56:	e8 db 5f ff ff       	call   c0012c36 <File::close()>
c001cc5b:	59                   	pop    ecx
c001cc5c:	c6 05 b1 bf 02 c0 00 	mov    BYTE PTR ds:0xc002bfb1,0x0
c001cc63:	ff 35 b4 bf 02 c0    	push   DWORD PTR ds:0xc002bfb4
c001cc69:	e8 be f7 ff ff       	call   c001c42c <unblockTask(ThreadControlBlock*)>
c001cc6e:	e8 a4 f1 ff ff       	call   c001be17 <unlockScheduler()>
c001cc73:	83 c4 10             	add    esp,0x10
c001cc76:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cc7b:	83 c4 2c             	add    esp,0x2c
c001cc7e:	89 e8                	mov    eax,ebp
c001cc80:	5b                   	pop    ebx
c001cc81:	5e                   	pop    esi
c001cc82:	5f                   	pop    edi
c001cc83:	5d                   	pop    ebp
c001cc84:	c3                   	ret    

c001cc85 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001cc85:	57                   	push   edi
c001cc86:	56                   	push   esi
c001cc87:	53                   	push   ebx
c001cc88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc94:	83 e8 06             	sub    eax,0x6
c001cc97:	0f b7 c0             	movzx  eax,ax
c001cc9a:	50                   	push   eax
c001cc9b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001cca0:	50                   	push   eax
c001cca1:	e8 da fd ff ff       	call   c001ca80 <Vm::realToLinear(unsigned short, unsigned short)>
c001cca6:	5a                   	pop    edx
c001cca7:	5e                   	pop    esi
c001cca8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ccab:	8d 56 fa             	lea    edx,[esi-0x6]
c001ccae:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ccb4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ccb7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ccba:	83 c2 02             	add    edx,0x2
c001ccbd:	66 89 10             	mov    WORD PTR [eax],dx
c001ccc0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ccc3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ccc7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ccca:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ccce:	89 d6                	mov    esi,edx
c001ccd0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ccd6:	66 81 e6 ff fd       	and    si,0xfdff
c001ccdb:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ccdf:	74 07                	je     c001cce8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001cce1:	89 d6                	mov    esi,edx
c001cce3:	66 81 ce 00 02       	or     si,0x200
c001cce8:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ccec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccf1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ccf5:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ccfd:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001cd00:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001cd08:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001cd0b:	5b                   	pop    ebx
c001cd0c:	5e                   	pop    esi
c001cd0d:	5f                   	pop    edi
c001cd0e:	c3                   	ret    

c001cd0f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001cd0f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd14:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd19:	c1 e0 04             	shl    eax,0x4
c001cd1c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001cd1f:	c3                   	ret    

c001cd20 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001cd20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd25:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd2a:	c1 e0 04             	shl    eax,0x4
c001cd2d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001cd31:	c3                   	ret    

c001cd32 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001cd32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd3c:	c1 e0 04             	shl    eax,0x4
c001cd3f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001cd42:	c3                   	ret    

c001cd43 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001cd43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd48:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd4d:	c1 e0 04             	shl    eax,0x4
c001cd50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd54:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001cd57:	c3                   	ret    

c001cd58 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001cd58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd62:	c1 e0 04             	shl    eax,0x4
c001cd65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd69:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001cd6d:	c3                   	ret    

c001cd6e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001cd6e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cd73:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cd78:	c1 e0 04             	shl    eax,0x4
c001cd7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd7f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001cd82:	c3                   	ret    

c001cd83 <Vm::faultHandler(regs*)>:
c001cd83:	55                   	push   ebp
c001cd84:	57                   	push   edi
c001cd85:	56                   	push   esi
c001cd86:	53                   	push   ebx
c001cd87:	83 ec 1c             	sub    esp,0x1c
c001cd8a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cd8e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001cd91:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001cd95:	0f b7 f0             	movzx  esi,ax
c001cd98:	52                   	push   edx
c001cd99:	0f b7 c0             	movzx  eax,ax
c001cd9c:	50                   	push   eax
c001cd9d:	e8 de fc ff ff       	call   c001ca80 <Vm::realToLinear(unsigned short, unsigned short)>
c001cda2:	5a                   	pop    edx
c001cda3:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001cda6:	59                   	pop    ecx
c001cda7:	89 c7                	mov    edi,eax
c001cda9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cdac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdb0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cdb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdb9:	0f b7 c5             	movzx  eax,bp
c001cdbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdc0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001cdc4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cdc8:	e8 b3 fc ff ff       	call   c001ca80 <Vm::realToLinear(unsigned short, unsigned short)>
c001cdcd:	5a                   	pop    edx
c001cdce:	59                   	pop    ecx
c001cdcf:	b1 06                	mov    cl,0x6
c001cdd1:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001cdd6:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001cddb:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001cdde:	80 fa 9d             	cmp    dl,0x9d
c001cde1:	0f 84 1d 02 00 00    	je     c001d004 <Vm::faultHandler(regs*)+0x281>
c001cde7:	0f 87 8e 00 00 00    	ja     c001ce7b <Vm::faultHandler(regs*)+0xf8>
c001cded:	80 fa 66             	cmp    dl,0x66
c001cdf0:	0f 84 89 01 00 00    	je     c001cf7f <Vm::faultHandler(regs*)+0x1fc>
c001cdf6:	77 44                	ja     c001ce3c <Vm::faultHandler(regs*)+0xb9>
c001cdf8:	80 fa 36             	cmp    dl,0x36
c001cdfb:	0f 84 74 01 00 00    	je     c001cf75 <Vm::faultHandler(regs*)+0x1f2>
c001ce01:	77 1a                	ja     c001ce1d <Vm::faultHandler(regs*)+0x9a>
c001ce03:	80 fa 26             	cmp    dl,0x26
c001ce06:	0f 84 4b 01 00 00    	je     c001cf57 <Vm::faultHandler(regs*)+0x1d4>
c001ce0c:	80 fa 2e             	cmp    dl,0x2e
c001ce0f:	0f 85 4a 05 00 00    	jne    c001d35f <Vm::faultHandler(regs*)+0x5dc>
c001ce15:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce18:	31 c9                	xor    ecx,ecx
c001ce1a:	47                   	inc    edi
c001ce1b:	eb be                	jmp    c001cddb <Vm::faultHandler(regs*)+0x58>
c001ce1d:	80 fa 64             	cmp    dl,0x64
c001ce20:	0f 84 3b 01 00 00    	je     c001cf61 <Vm::faultHandler(regs*)+0x1de>
c001ce26:	0f 87 3f 01 00 00    	ja     c001cf6b <Vm::faultHandler(regs*)+0x1e8>
c001ce2c:	80 fa 3e             	cmp    dl,0x3e
c001ce2f:	0f 85 2a 05 00 00    	jne    c001d35f <Vm::faultHandler(regs*)+0x5dc>
c001ce35:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce38:	b1 01                	mov    cl,0x1
c001ce3a:	eb de                	jmp    c001ce1a <Vm::faultHandler(regs*)+0x97>
c001ce3c:	80 fa 6d             	cmp    dl,0x6d
c001ce3f:	0f 84 bf 02 00 00    	je     c001d104 <Vm::faultHandler(regs*)+0x381>
c001ce45:	77 17                	ja     c001ce5e <Vm::faultHandler(regs*)+0xdb>
c001ce47:	80 fa 67             	cmp    dl,0x67
c001ce4a:	0f 84 3c 01 00 00    	je     c001cf8c <Vm::faultHandler(regs*)+0x209>
c001ce50:	80 fa 6c             	cmp    dl,0x6c
c001ce53:	0f 84 5d 02 00 00    	je     c001d0b6 <Vm::faultHandler(regs*)+0x333>
c001ce59:	e9 01 05 00 00       	jmp    c001d35f <Vm::faultHandler(regs*)+0x5dc>
c001ce5e:	80 fa 6f             	cmp    dl,0x6f
c001ce61:	0f 84 8b 03 00 00    	je     c001d1f2 <Vm::faultHandler(regs*)+0x46f>
c001ce67:	0f 82 0f 03 00 00    	jb     c001d17c <Vm::faultHandler(regs*)+0x3f9>
c001ce6d:	80 fa 9c             	cmp    dl,0x9c
c001ce70:	0f 84 23 01 00 00    	je     c001cf99 <Vm::faultHandler(regs*)+0x216>
c001ce76:	e9 e4 04 00 00       	jmp    c001d35f <Vm::faultHandler(regs*)+0x5dc>
c001ce7b:	80 fa ec             	cmp    dl,0xec
c001ce7e:	0f 84 7f 04 00 00    	je     c001d303 <Vm::faultHandler(regs*)+0x580>
c001ce84:	77 7b                	ja     c001cf01 <Vm::faultHandler(regs*)+0x17e>
c001ce86:	80 fa e4             	cmp    dl,0xe4
c001ce89:	0f 84 fe 03 00 00    	je     c001d28d <Vm::faultHandler(regs*)+0x50a>
c001ce8f:	77 53                	ja     c001cee4 <Vm::faultHandler(regs*)+0x161>
c001ce91:	80 fa cd             	cmp    dl,0xcd
c001ce94:	0f 84 cd 01 00 00    	je     c001d067 <Vm::faultHandler(regs*)+0x2e4>
c001ce9a:	80 fa cf             	cmp    dl,0xcf
c001ce9d:	0f 85 bc 04 00 00    	jne    c001d35f <Vm::faultHandler(regs*)+0x5dc>
c001cea3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001cea6:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001cea9:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001cead:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ceb0:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ceb4:	81 ca 00 02 02 00    	or     edx,0x20200
c001ceba:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cebd:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001cec1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cec7:	66 c1 e8 09          	shr    ax,0x9
c001cecb:	83 e0 01             	and    eax,0x1
c001cece:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ced1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ced4:	83 c0 06             	add    eax,0x6
c001ced7:	25 ff ff 00 00       	and    eax,0xffff
c001cedc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001cedf:	e9 77 04 00 00       	jmp    c001d35b <Vm::faultHandler(regs*)+0x5d8>
c001cee4:	80 fa e6             	cmp    dl,0xe6
c001cee7:	0f 84 ea 03 00 00    	je     c001d2d7 <Vm::faultHandler(regs*)+0x554>
c001ceed:	0f 82 b6 03 00 00    	jb     c001d2a9 <Vm::faultHandler(regs*)+0x526>
c001cef3:	80 fa e7             	cmp    dl,0xe7
c001cef6:	0f 84 f2 03 00 00    	je     c001d2ee <Vm::faultHandler(regs*)+0x56b>
c001cefc:	e9 5e 04 00 00       	jmp    c001d35f <Vm::faultHandler(regs*)+0x5dc>
c001cf01:	80 fa ef             	cmp    dl,0xef
c001cf04:	0f 84 3c 04 00 00    	je     c001d346 <Vm::faultHandler(regs*)+0x5c3>
c001cf0a:	77 28                	ja     c001cf34 <Vm::faultHandler(regs*)+0x1b1>
c001cf0c:	80 fa ed             	cmp    dl,0xed
c001cf0f:	0f 84 0a 04 00 00    	je     c001d31f <Vm::faultHandler(regs*)+0x59c>
c001cf15:	80 fa ee             	cmp    dl,0xee
c001cf18:	0f 85 41 04 00 00    	jne    c001d35f <Vm::faultHandler(regs*)+0x5dc>
c001cf1e:	50                   	push   eax
c001cf1f:	50                   	push   eax
c001cf20:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cf24:	50                   	push   eax
c001cf25:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cf29:	50                   	push   eax
c001cf2a:	e8 e1 fa ff ff       	call   c001ca10 <Vm::outbv(unsigned short, unsigned char)>
c001cf2f:	e9 0a 04 00 00       	jmp    c001d33e <Vm::faultHandler(regs*)+0x5bb>
c001cf34:	80 fa fa             	cmp    dl,0xfa
c001cf37:	0f 84 5d 01 00 00    	je     c001d09a <Vm::faultHandler(regs*)+0x317>
c001cf3d:	80 fa fb             	cmp    dl,0xfb
c001cf40:	0f 84 62 01 00 00    	je     c001d0a8 <Vm::faultHandler(regs*)+0x325>
c001cf46:	80 fa f3             	cmp    dl,0xf3
c001cf49:	0f 85 10 04 00 00    	jne    c001d35f <Vm::faultHandler(regs*)+0x5dc>
c001cf4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cf52:	e9 c3 fe ff ff       	jmp    c001ce1a <Vm::faultHandler(regs*)+0x97>
c001cf57:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cf5a:	b1 02                	mov    cl,0x2
c001cf5c:	e9 b9 fe ff ff       	jmp    c001ce1a <Vm::faultHandler(regs*)+0x97>
c001cf61:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cf64:	b1 03                	mov    cl,0x3
c001cf66:	e9 af fe ff ff       	jmp    c001ce1a <Vm::faultHandler(regs*)+0x97>
c001cf6b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cf6e:	b1 04                	mov    cl,0x4
c001cf70:	e9 a5 fe ff ff       	jmp    c001ce1a <Vm::faultHandler(regs*)+0x97>
c001cf75:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cf78:	b1 05                	mov    cl,0x5
c001cf7a:	e9 9b fe ff ff       	jmp    c001ce1a <Vm::faultHandler(regs*)+0x97>
c001cf7f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cf82:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001cf87:	e9 8e fe ff ff       	jmp    c001ce1a <Vm::faultHandler(regs*)+0x97>
c001cf8c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cf8f:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001cf94:	e9 81 fe ff ff       	jmp    c001ce1a <Vm::faultHandler(regs*)+0x97>
c001cf99:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001cf9c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001cfa0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cfa5:	74 30                	je     c001cfd7 <Vm::faultHandler(regs*)+0x254>
c001cfa7:	83 e9 04             	sub    ecx,0x4
c001cfaa:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001cfb0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cfb6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cfb9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001cfbc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cfc2:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cfc6:	0f 84 8c 03 00 00    	je     c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001cfcc:	80 ce 02             	or     dh,0x2
c001cfcf:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001cfd2:	e9 81 03 00 00       	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001cfd7:	83 e9 02             	sub    ecx,0x2
c001cfda:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cfe0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cfe3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cfe7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cfed:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cff1:	74 05                	je     c001cff8 <Vm::faultHandler(regs*)+0x275>
c001cff3:	80 ce 02             	or     dh,0x2
c001cff6:	eb 03                	jmp    c001cffb <Vm::faultHandler(regs*)+0x278>
c001cff8:	80 e6 fd             	and    dh,0xfd
c001cffb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cfff:	e9 54 03 00 00       	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001d004:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d009:	74 2a                	je     c001d035 <Vm::faultHandler(regs*)+0x2b2>
c001d00b:	8b 10                	mov    edx,DWORD PTR [eax]
c001d00d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d013:	81 ca 00 02 02 00    	or     edx,0x20200
c001d019:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d01c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d01e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d024:	c1 e8 09             	shr    eax,0x9
c001d027:	83 e0 01             	and    eax,0x1
c001d02a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d02d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d030:	83 c0 04             	add    eax,0x4
c001d033:	eb 25                	jmp    c001d05a <Vm::faultHandler(regs*)+0x2d7>
c001d035:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d038:	81 ca 00 02 02 00    	or     edx,0x20200
c001d03e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d041:	66 8b 00             	mov    ax,WORD PTR [eax]
c001d044:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d04a:	66 c1 e8 09          	shr    ax,0x9
c001d04e:	83 e0 01             	and    eax,0x1
c001d051:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d054:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d057:	83 c0 02             	add    eax,0x2
c001d05a:	25 ff ff 00 00       	and    eax,0xffff
c001d05f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d062:	e9 f1 02 00 00       	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001d067:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d06b:	3c ee                	cmp    al,0xee
c001d06d:	75 10                	jne    c001d07f <Vm::faultHandler(regs*)+0x2fc>
c001d06f:	83 ec 0c             	sub    esp,0xc
c001d072:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001d075:	e8 98 f8 ff ff       	call   c001c912 <Thr::terminateFromIRQ(int)>
c001d07a:	e9 c2 02 00 00       	jmp    c001d341 <Vm::faultHandler(regs*)+0x5be>
c001d07f:	83 ec 0c             	sub    esp,0xc
c001d082:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d08a:	57                   	push   edi
c001d08b:	50                   	push   eax
c001d08c:	53                   	push   ebx
c001d08d:	e8 f3 fb ff ff       	call   c001cc85 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001d092:	83 c4 20             	add    esp,0x20
c001d095:	e9 c1 02 00 00       	jmp    c001d35b <Vm::faultHandler(regs*)+0x5d8>
c001d09a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d09f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d0a3:	e9 b0 02 00 00       	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001d0a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0ad:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001d0b1:	e9 a2 02 00 00       	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001d0b6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d0bb:	74 0d                	je     c001d0ca <Vm::faultHandler(regs*)+0x347>
c001d0bd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001d0c4:	0f 87 e9 02 00 00    	ja     c001d3b3 <Vm::faultHandler(regs*)+0x630>
c001d0ca:	83 ec 0c             	sub    esp,0xc
c001d0cd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001d0d0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d0d4:	50                   	push   eax
c001d0d5:	e8 30 f9 ff ff       	call   c001ca0a <Vm::inbv(unsigned short)>
c001d0da:	83 c4 0c             	add    esp,0xc
c001d0dd:	0f b6 c0             	movzx  eax,al
c001d0e0:	0f b7 c9             	movzx  ecx,cx
c001d0e3:	50                   	push   eax
c001d0e4:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001d0e8:	50                   	push   eax
c001d0e9:	51                   	push   ecx
c001d0ea:	e8 54 fc ff ff       	call   c001cd43 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001d0ef:	83 c4 10             	add    esp,0x10
c001d0f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0f5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d0f9:	74 03                	je     c001d0fe <Vm::faultHandler(regs*)+0x37b>
c001d0fb:	48                   	dec    eax
c001d0fc:	eb 01                	jmp    c001d0ff <Vm::faultHandler(regs*)+0x37c>
c001d0fe:	40                   	inc    eax
c001d0ff:	0f b7 c0             	movzx  eax,ax
c001d102:	eb 70                	jmp    c001d174 <Vm::faultHandler(regs*)+0x3f1>
c001d104:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d107:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001d10a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d10f:	74 0c                	je     c001d11d <Vm::faultHandler(regs*)+0x39a>
c001d111:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d117:	0f 87 96 02 00 00    	ja     c001d3b3 <Vm::faultHandler(regs*)+0x630>
c001d11d:	0f b7 c9             	movzx  ecx,cx
c001d120:	0f b7 f6             	movzx  esi,si
c001d123:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d126:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d12b:	74 20                	je     c001d14d <Vm::faultHandler(regs*)+0x3ca>
c001d12d:	ed                   	in     eax,dx
c001d12e:	55                   	push   ebp
c001d12f:	50                   	push   eax
c001d130:	51                   	push   ecx
c001d131:	56                   	push   esi
c001d132:	e8 37 fc ff ff       	call   c001cd6e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001d137:	83 c4 10             	add    esp,0x10
c001d13a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d13d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d141:	74 05                	je     c001d148 <Vm::faultHandler(regs*)+0x3c5>
c001d143:	83 e8 04             	sub    eax,0x4
c001d146:	eb 27                	jmp    c001d16f <Vm::faultHandler(regs*)+0x3ec>
c001d148:	83 c0 04             	add    eax,0x4
c001d14b:	eb 22                	jmp    c001d16f <Vm::faultHandler(regs*)+0x3ec>
c001d14d:	66 ed                	in     ax,dx
c001d14f:	0f b7 c0             	movzx  eax,ax
c001d152:	57                   	push   edi
c001d153:	50                   	push   eax
c001d154:	51                   	push   ecx
c001d155:	56                   	push   esi
c001d156:	e8 fd fb ff ff       	call   c001cd58 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001d15b:	83 c4 10             	add    esp,0x10
c001d15e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d161:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d165:	74 05                	je     c001d16c <Vm::faultHandler(regs*)+0x3e9>
c001d167:	83 e8 02             	sub    eax,0x2
c001d16a:	eb 03                	jmp    c001d16f <Vm::faultHandler(regs*)+0x3ec>
c001d16c:	83 c0 02             	add    eax,0x2
c001d16f:	25 ff ff 00 00       	and    eax,0xffff
c001d174:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001d177:	e9 dc 01 00 00       	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001d17c:	49                   	dec    ecx
c001d17d:	80 f9 05             	cmp    cl,0x5
c001d180:	77 24                	ja     c001d1a6 <Vm::faultHandler(regs*)+0x423>
c001d182:	0f b6 c9             	movzx  ecx,cl
c001d185:	ff 24 8d 68 90 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd6f98]
c001d18c:	0f b7 f5             	movzx  esi,bp
c001d18f:	eb 15                	jmp    c001d1a6 <Vm::faultHandler(regs*)+0x423>
c001d191:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001d195:	eb 0f                	jmp    c001d1a6 <Vm::faultHandler(regs*)+0x423>
c001d197:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001d19b:	eb 09                	jmp    c001d1a6 <Vm::faultHandler(regs*)+0x423>
c001d19d:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001d1a1:	eb 03                	jmp    c001d1a6 <Vm::faultHandler(regs*)+0x423>
c001d1a3:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001d1a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1a9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d1ae:	74 0b                	je     c001d1bb <Vm::faultHandler(regs*)+0x438>
c001d1b0:	3d ff ff 00 00       	cmp    eax,0xffff
c001d1b5:	0f 87 f8 01 00 00    	ja     c001d3b3 <Vm::faultHandler(regs*)+0x630>
c001d1bb:	0f b7 c0             	movzx  eax,ax
c001d1be:	52                   	push   edx
c001d1bf:	52                   	push   edx
c001d1c0:	50                   	push   eax
c001d1c1:	56                   	push   esi
c001d1c2:	e8 48 fb ff ff       	call   c001cd0f <Vm::readByteFromReal(unsigned short, unsigned short)>
c001d1c7:	59                   	pop    ecx
c001d1c8:	0f b6 c0             	movzx  eax,al
c001d1cb:	5e                   	pop    esi
c001d1cc:	50                   	push   eax
c001d1cd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d1d1:	50                   	push   eax
c001d1d2:	e8 39 f8 ff ff       	call   c001ca10 <Vm::outbv(unsigned short, unsigned char)>
c001d1d7:	83 c4 10             	add    esp,0x10
c001d1da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1dd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d1e1:	74 03                	je     c001d1e6 <Vm::faultHandler(regs*)+0x463>
c001d1e3:	48                   	dec    eax
c001d1e4:	eb 01                	jmp    c001d1e7 <Vm::faultHandler(regs*)+0x464>
c001d1e6:	40                   	inc    eax
c001d1e7:	0f b7 c0             	movzx  eax,ax
c001d1ea:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d1ed:	e9 66 01 00 00       	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001d1f2:	49                   	dec    ecx
c001d1f3:	80 f9 05             	cmp    cl,0x5
c001d1f6:	77 1f                	ja     c001d217 <Vm::faultHandler(regs*)+0x494>
c001d1f8:	0f b6 c9             	movzx  ecx,cl
c001d1fb:	ff 24 8d 80 90 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd6f80]
c001d202:	89 ee                	mov    esi,ebp
c001d204:	eb 11                	jmp    c001d217 <Vm::faultHandler(regs*)+0x494>
c001d206:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001d209:	eb 0c                	jmp    c001d217 <Vm::faultHandler(regs*)+0x494>
c001d20b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d20e:	eb 07                	jmp    c001d217 <Vm::faultHandler(regs*)+0x494>
c001d210:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001d213:	eb 02                	jmp    c001d217 <Vm::faultHandler(regs*)+0x494>
c001d215:	8b 33                	mov    esi,DWORD PTR [ebx]
c001d217:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001d21a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d21f:	74 0c                	je     c001d22d <Vm::faultHandler(regs*)+0x4aa>
c001d221:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d227:	0f 87 86 01 00 00    	ja     c001d3b3 <Vm::faultHandler(regs*)+0x630>
c001d22d:	0f b7 d6             	movzx  edx,si
c001d230:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d233:	0f b7 c1             	movzx  eax,cx
c001d236:	81 e7 00 04 00 00    	and    edi,0x400
c001d23c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001d23f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d244:	74 1d                	je     c001d263 <Vm::faultHandler(regs*)+0x4e0>
c001d246:	55                   	push   ebp
c001d247:	55                   	push   ebp
c001d248:	50                   	push   eax
c001d249:	52                   	push   edx
c001d24a:	e8 e3 fa ff ff       	call   c001cd32 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001d24f:	83 c4 10             	add    esp,0x10
c001d252:	89 f2                	mov    edx,esi
c001d254:	ef                   	out    dx,eax
c001d255:	85 ff                	test   edi,edi
c001d257:	74 05                	je     c001d25e <Vm::faultHandler(regs*)+0x4db>
c001d259:	83 e9 04             	sub    ecx,0x4
c001d25c:	eb 21                	jmp    c001d27f <Vm::faultHandler(regs*)+0x4fc>
c001d25e:	83 c1 04             	add    ecx,0x4
c001d261:	eb 1c                	jmp    c001d27f <Vm::faultHandler(regs*)+0x4fc>
c001d263:	55                   	push   ebp
c001d264:	55                   	push   ebp
c001d265:	50                   	push   eax
c001d266:	52                   	push   edx
c001d267:	e8 b4 fa ff ff       	call   c001cd20 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001d26c:	83 c4 10             	add    esp,0x10
c001d26f:	89 f2                	mov    edx,esi
c001d271:	66 ef                	out    dx,ax
c001d273:	85 ff                	test   edi,edi
c001d275:	74 05                	je     c001d27c <Vm::faultHandler(regs*)+0x4f9>
c001d277:	83 e9 02             	sub    ecx,0x2
c001d27a:	eb 03                	jmp    c001d27f <Vm::faultHandler(regs*)+0x4fc>
c001d27c:	83 c1 02             	add    ecx,0x2
c001d27f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d285:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001d288:	e9 cb 00 00 00       	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001d28d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d294:	83 ec 0c             	sub    esp,0xc
c001d297:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d29b:	50                   	push   eax
c001d29c:	e8 69 f7 ff ff       	call   c001ca0a <Vm::inbv(unsigned short)>
c001d2a1:	0f b6 c0             	movzx  eax,al
c001d2a4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d2a7:	eb 3f                	jmp    c001d2e8 <Vm::faultHandler(regs*)+0x565>
c001d2a9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d2ae:	74 07                	je     c001d2b7 <Vm::faultHandler(regs*)+0x534>
c001d2b0:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d2b4:	ed                   	in     eax,dx
c001d2b5:	eb 14                	jmp    c001d2cb <Vm::faultHandler(regs*)+0x548>
c001d2b7:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001d2ba:	66 31 c9             	xor    cx,cx
c001d2bd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001d2c0:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d2c4:	66 ed                	in     ax,dx
c001d2c6:	0f b7 c0             	movzx  eax,ax
c001d2c9:	09 c8                	or     eax,ecx
c001d2cb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d2ce:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d2d2:	e9 84 00 00 00       	jmp    c001d35b <Vm::faultHandler(regs*)+0x5d8>
c001d2d7:	52                   	push   edx
c001d2d8:	52                   	push   edx
c001d2d9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d2dd:	50                   	push   eax
c001d2de:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d2e2:	50                   	push   eax
c001d2e3:	e8 28 f7 ff ff       	call   c001ca10 <Vm::outbv(unsigned short, unsigned char)>
c001d2e8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d2ec:	eb 53                	jmp    c001d341 <Vm::faultHandler(regs*)+0x5be>
c001d2ee:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d2f1:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d2f5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d2fa:	74 03                	je     c001d2ff <Vm::faultHandler(regs*)+0x57c>
c001d2fc:	ef                   	out    dx,eax
c001d2fd:	eb cf                	jmp    c001d2ce <Vm::faultHandler(regs*)+0x54b>
c001d2ff:	66 ef                	out    dx,ax
c001d301:	eb cb                	jmp    c001d2ce <Vm::faultHandler(regs*)+0x54b>
c001d303:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d30a:	83 ec 0c             	sub    esp,0xc
c001d30d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d311:	50                   	push   eax
c001d312:	e8 f3 f6 ff ff       	call   c001ca0a <Vm::inbv(unsigned short)>
c001d317:	0f b6 c0             	movzx  eax,al
c001d31a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d31d:	eb 1f                	jmp    c001d33e <Vm::faultHandler(regs*)+0x5bb>
c001d31f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d322:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d327:	74 03                	je     c001d32c <Vm::faultHandler(regs*)+0x5a9>
c001d329:	ed                   	in     eax,dx
c001d32a:	eb 0d                	jmp    c001d339 <Vm::faultHandler(regs*)+0x5b6>
c001d32c:	66 ed                	in     ax,dx
c001d32e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001d331:	0f b7 c0             	movzx  eax,ax
c001d334:	66 31 d2             	xor    dx,dx
c001d337:	09 d0                	or     eax,edx
c001d339:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d33c:	eb 1a                	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001d33e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d341:	83 c4 10             	add    esp,0x10
c001d344:	eb 15                	jmp    c001d35b <Vm::faultHandler(regs*)+0x5d8>
c001d346:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d349:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d34c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d351:	74 03                	je     c001d356 <Vm::faultHandler(regs*)+0x5d3>
c001d353:	ef                   	out    dx,eax
c001d354:	eb 02                	jmp    c001d358 <Vm::faultHandler(regs*)+0x5d5>
c001d356:	66 ef                	out    dx,ax
c001d358:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d35b:	b0 01                	mov    al,0x1
c001d35d:	eb 56                	jmp    c001d3b5 <Vm::faultHandler(regs*)+0x632>
c001d35f:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001d363:	50                   	push   eax
c001d364:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001d368:	50                   	push   eax
c001d369:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001d36d:	50                   	push   eax
c001d36e:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001d372:	50                   	push   eax
c001d373:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d377:	50                   	push   eax
c001d378:	52                   	push   edx
c001d379:	52                   	push   edx
c001d37a:	68 38 90 02 c0       	push   0xc0029038
c001d37f:	e8 c1 52 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001d384:	83 c4 20             	add    esp,0x20
c001d387:	83 ec 0c             	sub    esp,0xc
c001d38a:	6a 60                	push   0x60
c001d38c:	e8 79 f6 ff ff       	call   c001ca0a <Vm::inbv(unsigned short)>
c001d391:	83 c4 10             	add    esp,0x10
c001d394:	3c 1c                	cmp    al,0x1c
c001d396:	74 04                	je     c001d39c <Vm::faultHandler(regs*)+0x619>
c001d398:	3c 5a                	cmp    al,0x5a
c001d39a:	75 eb                	jne    c001d387 <Vm::faultHandler(regs*)+0x604>
c001d39c:	3c 5a                	cmp    al,0x5a
c001d39e:	74 04                	je     c001d3a4 <Vm::faultHandler(regs*)+0x621>
c001d3a0:	3c 1c                	cmp    al,0x1c
c001d3a2:	75 0f                	jne    c001d3b3 <Vm::faultHandler(regs*)+0x630>
c001d3a4:	83 ec 0c             	sub    esp,0xc
c001d3a7:	6a 60                	push   0x60
c001d3a9:	e8 5c f6 ff ff       	call   c001ca0a <Vm::inbv(unsigned short)>
c001d3ae:	83 c4 10             	add    esp,0x10
c001d3b1:	eb e9                	jmp    c001d39c <Vm::faultHandler(regs*)+0x619>
c001d3b3:	31 c0                	xor    eax,eax
c001d3b5:	83 c4 1c             	add    esp,0x1c
c001d3b8:	5b                   	pop    ebx
c001d3b9:	5e                   	pop    esi
c001d3ba:	5f                   	pop    edi
c001d3bb:	5d                   	pop    ebp
c001d3bc:	c3                   	ret    

c001d3bd <Vm::fpuInternalTo32(unsigned long long)>:
c001d3bd:	57                   	push   edi
c001d3be:	56                   	push   esi
c001d3bf:	53                   	push   ebx
c001d3c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c8:	89 d6                	mov    esi,edx
c001d3ca:	89 d7                	mov    edi,edx
c001d3cc:	89 c1                	mov    ecx,eax
c001d3ce:	c1 ef 14             	shr    edi,0x14
c001d3d1:	89 d3                	mov    ebx,edx
c001d3d3:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001d3d9:	31 d2                	xor    edx,edx
c001d3db:	89 f8                	mov    eax,edi
c001d3dd:	81 e6 00 00 00 80    	and    esi,0x80000000
c001d3e3:	bf ff 00 00 00       	mov    edi,0xff
c001d3e8:	05 80 fc ff ff       	add    eax,0xfffffc80
c001d3ed:	83 d2 ff             	adc    edx,0xffffffff
c001d3f0:	39 c7                	cmp    edi,eax
c001d3f2:	bf 00 00 00 00       	mov    edi,0x0
c001d3f7:	19 d7                	sbb    edi,edx
c001d3f9:	72 15                	jb     c001d410 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001d3fb:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001d3ff:	c1 e0 17             	shl    eax,0x17
c001d402:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001d408:	09 f1                	or     ecx,esi
c001d40a:	09 c1                	or     ecx,eax
c001d40c:	89 cf                	mov    edi,ecx
c001d40e:	eb 02                	jmp    c001d412 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001d410:	31 ff                	xor    edi,edi
c001d412:	89 f8                	mov    eax,edi
c001d414:	5b                   	pop    ebx
c001d415:	5e                   	pop    esi
c001d416:	5f                   	pop    edi
c001d417:	c3                   	ret    

c001d418 <Vm::fpuInternalTo64(unsigned long long)>:
c001d418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d41c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d420:	c3                   	ret    

c001d421 <Vm::fpu32ToInternal(unsigned int)>:
c001d421:	57                   	push   edi
c001d422:	31 ff                	xor    edi,edi
c001d424:	56                   	push   esi
c001d425:	53                   	push   ebx
c001d426:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d42a:	89 cb                	mov    ebx,ecx
c001d42c:	89 ce                	mov    esi,ecx
c001d42e:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001d434:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001d43a:	c1 e9 17             	shr    ecx,0x17
c001d43d:	89 f0                	mov    eax,esi
c001d43f:	0f b6 d1             	movzx  edx,cl
c001d442:	81 c2 80 03 00 00    	add    edx,0x380
c001d448:	89 d1                	mov    ecx,edx
c001d44a:	89 fa                	mov    edx,edi
c001d44c:	c1 e1 14             	shl    ecx,0x14
c001d44f:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001d453:	c1 e0 1d             	shl    eax,0x1d
c001d456:	89 d7                	mov    edi,edx
c001d458:	89 c6                	mov    esi,eax
c001d45a:	89 ca                	mov    edx,ecx
c001d45c:	89 f0                	mov    eax,esi
c001d45e:	09 fa                	or     edx,edi
c001d460:	09 da                	or     edx,ebx
c001d462:	5b                   	pop    ebx
c001d463:	5e                   	pop    esi
c001d464:	5f                   	pop    edi
c001d465:	c3                   	ret    

c001d466 <Vm::fpu64ToInternal(unsigned long long)>:
c001d466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d46a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d46e:	c3                   	ret    

c001d46f <Vm::fpuFloatToLong(unsigned long long)>:
c001d46f:	57                   	push   edi
c001d470:	31 c0                	xor    eax,eax
c001d472:	56                   	push   esi
c001d473:	31 d2                	xor    edx,edx
c001d475:	53                   	push   ebx
c001d476:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d47a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d47e:	89 d9                	mov    ecx,ebx
c001d480:	c1 e9 14             	shr    ecx,0x14
c001d483:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001d489:	89 cf                	mov    edi,ecx
c001d48b:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001d491:	78 33                	js     c001d4c6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d493:	89 d9                	mov    ecx,ebx
c001d495:	89 f0                	mov    eax,esi
c001d497:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d49d:	81 c9 00 00 10 00    	or     ecx,0x100000
c001d4a3:	89 ca                	mov    edx,ecx
c001d4a5:	b9 34 00 00 00       	mov    ecx,0x34
c001d4aa:	29 f9                	sub    ecx,edi
c001d4ac:	0f ad d0             	shrd   eax,edx,cl
c001d4af:	d3 fa                	sar    edx,cl
c001d4b1:	f6 c1 20             	test   cl,0x20
c001d4b4:	74 05                	je     c001d4bb <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001d4b6:	89 d0                	mov    eax,edx
c001d4b8:	c1 fa 1f             	sar    edx,0x1f
c001d4bb:	85 db                	test   ebx,ebx
c001d4bd:	79 07                	jns    c001d4c6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d4bf:	f7 d8                	neg    eax
c001d4c1:	83 d2 00             	adc    edx,0x0
c001d4c4:	f7 da                	neg    edx
c001d4c6:	5b                   	pop    ebx
c001d4c7:	5e                   	pop    esi
c001d4c8:	5f                   	pop    edi
c001d4c9:	c3                   	ret    

c001d4ca <Vm::fpuULongToFloat(unsigned long long)>:
c001d4ca:	57                   	push   edi
c001d4cb:	31 c9                	xor    ecx,ecx
c001d4cd:	56                   	push   esi
c001d4ce:	53                   	push   ebx
c001d4cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d4d7:	0f ba e7 14          	bt     edi,0x14
c001d4db:	72 07                	jb     c001d4e4 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001d4dd:	01 f6                	add    esi,esi
c001d4df:	11 ff                	adc    edi,edi
c001d4e1:	41                   	inc    ecx
c001d4e2:	eb f3                	jmp    c001d4d7 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001d4e4:	89 fa                	mov    edx,edi
c001d4e6:	89 f0                	mov    eax,esi
c001d4e8:	bb 33 04 00 00       	mov    ebx,0x433
c001d4ed:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001d4f3:	29 cb                	sub    ebx,ecx
c001d4f5:	89 d9                	mov    ecx,ebx
c001d4f7:	5b                   	pop    ebx
c001d4f8:	c1 e1 14             	shl    ecx,0x14
c001d4fb:	5e                   	pop    esi
c001d4fc:	09 ca                	or     edx,ecx
c001d4fe:	5f                   	pop    edi
c001d4ff:	c3                   	ret    

c001d500 <Vm::fpuLongToFloat(long long)>:
c001d500:	56                   	push   esi
c001d501:	31 c0                	xor    eax,eax
c001d503:	53                   	push   ebx
c001d504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d508:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d50c:	39 c8                	cmp    eax,ecx
c001d50e:	19 d8                	sbb    eax,ebx
c001d510:	7d 04                	jge    c001d516 <Vm::fpuLongToFloat(long long)+0x16>
c001d512:	31 f6                	xor    esi,esi
c001d514:	eb 0c                	jmp    c001d522 <Vm::fpuLongToFloat(long long)+0x22>
c001d516:	f7 d9                	neg    ecx
c001d518:	be 01 00 00 00       	mov    esi,0x1
c001d51d:	83 d3 00             	adc    ebx,0x0
c001d520:	f7 db                	neg    ebx
c001d522:	31 c0                	xor    eax,eax
c001d524:	0f ba e3 14          	bt     ebx,0x14
c001d528:	72 07                	jb     c001d531 <Vm::fpuLongToFloat(long long)+0x31>
c001d52a:	01 c9                	add    ecx,ecx
c001d52c:	11 db                	adc    ebx,ebx
c001d52e:	40                   	inc    eax
c001d52f:	eb f3                	jmp    c001d524 <Vm::fpuLongToFloat(long long)+0x24>
c001d531:	ba 33 04 00 00       	mov    edx,0x433
c001d536:	29 c2                	sub    edx,eax
c001d538:	89 c8                	mov    eax,ecx
c001d53a:	c1 e2 14             	shl    edx,0x14
c001d53d:	89 d9                	mov    ecx,ebx
c001d53f:	89 f3                	mov    ebx,esi
c001d541:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d547:	09 ca                	or     edx,ecx
c001d549:	84 db                	test   bl,bl
c001d54b:	74 06                	je     c001d553 <Vm::fpuLongToFloat(long long)+0x53>
c001d54d:	81 ca 00 00 00 80    	or     edx,0x80000000
c001d553:	5b                   	pop    ebx
c001d554:	5e                   	pop    esi
c001d555:	c3                   	ret    

c001d556 <Vm::fpuGet0()>:
c001d556:	31 c0                	xor    eax,eax
c001d558:	31 d2                	xor    edx,edx
c001d55a:	c3                   	ret    

c001d55b <Vm::fpuGet1()>:
c001d55b:	b8 01 00 00 00       	mov    eax,0x1
c001d560:	31 d2                	xor    edx,edx
c001d562:	c3                   	ret    

c001d563 <Vm::fpuGetPi()>:
c001d563:	b8 03 00 00 00       	mov    eax,0x3
c001d568:	31 d2                	xor    edx,edx
c001d56a:	c3                   	ret    

c001d56b <Vm::fpuGetLog2E()>:
c001d56b:	83 ec 18             	sub    esp,0x18
c001d56e:	68 98 90 02 c0       	push   0xc0029098
c001d573:	e8 91 b8 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001d578:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d57d:	31 d2                	xor    edx,edx
c001d57f:	83 c4 1c             	add    esp,0x1c
c001d582:	c3                   	ret    

c001d583 <Vm::fpuGetLogE2()>:
c001d583:	83 ec 18             	sub    esp,0x18
c001d586:	68 a4 90 02 c0       	push   0xc00290a4
c001d58b:	e8 79 b8 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001d590:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d595:	31 d2                	xor    edx,edx
c001d597:	83 c4 1c             	add    esp,0x1c
c001d59a:	c3                   	ret    

c001d59b <Vm::fpuGetLog210()>:
c001d59b:	83 ec 18             	sub    esp,0x18
c001d59e:	68 b0 90 02 c0       	push   0xc00290b0
c001d5a3:	e8 61 b8 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001d5a8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d5ad:	31 d2                	xor    edx,edx
c001d5af:	83 c4 1c             	add    esp,0x1c
c001d5b2:	c3                   	ret    

c001d5b3 <Vm::fpuGetLog102()>:
c001d5b3:	83 ec 18             	sub    esp,0x18
c001d5b6:	68 bd 90 02 c0       	push   0xc00290bd
c001d5bb:	e8 49 b8 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001d5c0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d5c5:	31 d2                	xor    edx,edx
c001d5c7:	83 c4 1c             	add    esp,0x1c
c001d5ca:	c3                   	ret    

c001d5cb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001d5cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5cf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d5d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d5d7:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d5db:	0f 92 c0             	setb   al
c001d5de:	c3                   	ret    

c001d5df <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d5df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e7:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d5eb:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d5ef:	09 c2                	or     edx,eax
c001d5f1:	0f 94 c0             	sete   al
c001d5f4:	c3                   	ret    

c001d5f5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d5f5:	57                   	push   edi
c001d5f6:	56                   	push   esi
c001d5f7:	53                   	push   ebx
c001d5f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d5fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d600:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d604:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d608:	57                   	push   edi
c001d609:	56                   	push   esi
c001d60a:	53                   	push   ebx
c001d60b:	51                   	push   ecx
c001d60c:	e8 ce ff ff ff       	call   c001d5df <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d611:	83 c4 10             	add    esp,0x10
c001d614:	88 c2                	mov    dl,al
c001d616:	31 c0                	xor    eax,eax
c001d618:	84 d2                	test   dl,dl
c001d61a:	75 0c                	jne    c001d628 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d61c:	57                   	push   edi
c001d61d:	56                   	push   esi
c001d61e:	53                   	push   ebx
c001d61f:	51                   	push   ecx
c001d620:	e8 a6 ff ff ff       	call   c001d5cb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d625:	83 c4 10             	add    esp,0x10
c001d628:	83 e0 01             	and    eax,0x1
c001d62b:	5b                   	pop    ebx
c001d62c:	88 c1                	mov    cl,al
c001d62e:	83 e2 01             	and    edx,0x1
c001d631:	a0 c1 bf 02 c0       	mov    al,ds:0xc002bfc1
c001d636:	c1 e2 06             	shl    edx,0x6
c001d639:	83 e0 ba             	and    eax,0xffffffba
c001d63c:	5e                   	pop    esi
c001d63d:	09 c8                	or     eax,ecx
c001d63f:	5f                   	pop    edi
c001d640:	09 d0                	or     eax,edx
c001d642:	a2 c1 bf 02 c0       	mov    ds:0xc002bfc1,al
c001d647:	c3                   	ret    

c001d648 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d64c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d650:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d654:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d658:	c3                   	ret    

c001d659 <Vm::fpuAbs(unsigned long long)>:
c001d659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d65d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d661:	c3                   	ret    

c001d662 <Vm::fpuChs(unsigned long long)>:
c001d662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d66a:	f7 d8                	neg    eax
c001d66c:	83 d2 00             	adc    edx,0x0
c001d66f:	f7 da                	neg    edx
c001d671:	c3                   	ret    

c001d672 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d672:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d676:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d67b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d67f:	eb c7                	jmp    c001d648 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d681 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d681:	53                   	push   ebx
c001d682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d686:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d68a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d68e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d692:	0f af ca             	imul   ecx,edx
c001d695:	0f af d8             	imul   ebx,eax
c001d698:	f7 e2                	mul    edx
c001d69a:	01 d9                	add    ecx,ebx
c001d69c:	5b                   	pop    ebx
c001d69d:	01 ca                	add    edx,ecx
c001d69f:	c3                   	ret    

c001d6a0 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d6a0:	83 ec 0c             	sub    esp,0xc
c001d6a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6b3:	e8 a4 63 00 00       	call   c0023a5c <__udivdi3>
c001d6b8:	83 c4 1c             	add    esp,0x1c
c001d6bb:	c3                   	ret    

c001d6bc <Vm::fpuSquare(unsigned long long)>:
c001d6bc:	50                   	push   eax
c001d6bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d6c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d6c5:	52                   	push   edx
c001d6c6:	50                   	push   eax
c001d6c7:	52                   	push   edx
c001d6c8:	50                   	push   eax
c001d6c9:	e8 b3 ff ff ff       	call   c001d681 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d6ce:	83 c4 14             	add    esp,0x14
c001d6d1:	c3                   	ret    

c001d6d2 <Vm::fpuGetReg(int)>:
c001d6d2:	83 ec 0c             	sub    esp,0xc
c001d6d5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d6da:	76 10                	jbe    c001d6ec <Vm::fpuGetReg(int)+0x1a>
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	68 ca 90 02 c0       	push   0xc00290ca
c001d6e4:	e8 20 b7 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	a0 c1 bf 02 c0       	mov    al,ds:0xc002bfc1
c001d6f1:	b9 08 00 00 00       	mov    ecx,0x8
c001d6f6:	c0 e8 03             	shr    al,0x3
c001d6f9:	83 e0 07             	and    eax,0x7
c001d6fc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d700:	99                   	cdq    
c001d701:	f7 f9                	idiv   ecx
c001d703:	8b 04 d5 c4 bf 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd403c]
c001d70a:	8b 14 d5 c8 bf 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4038]
c001d711:	83 c4 0c             	add    esp,0xc
c001d714:	c3                   	ret    

c001d715 <Vm::fpuSetReg(int, unsigned long long)>:
c001d715:	57                   	push   edi
c001d716:	56                   	push   esi
c001d717:	52                   	push   edx
c001d718:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d71c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d720:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d725:	76 10                	jbe    c001d737 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d727:	83 ec 0c             	sub    esp,0xc
c001d72a:	68 dd 90 02 c0       	push   0xc00290dd
c001d72f:	e8 d5 b6 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001d734:	83 c4 10             	add    esp,0x10
c001d737:	a0 c1 bf 02 c0       	mov    al,ds:0xc002bfc1
c001d73c:	b9 08 00 00 00       	mov    ecx,0x8
c001d741:	c0 e8 03             	shr    al,0x3
c001d744:	83 e0 07             	and    eax,0x7
c001d747:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d74b:	99                   	cdq    
c001d74c:	f7 f9                	idiv   ecx
c001d74e:	89 34 d5 c4 bf 02 c0 	mov    DWORD PTR [edx*8-0x3ffd403c],esi
c001d755:	89 3c d5 c8 bf 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4038],edi
c001d75c:	58                   	pop    eax
c001d75d:	5e                   	pop    esi
c001d75e:	5f                   	pop    edi
c001d75f:	c3                   	ret    

c001d760 <Vm::fpuPush(unsigned long long)>:
c001d760:	a0 c1 bf 02 c0       	mov    al,ds:0xc002bfc1
c001d765:	c0 e8 03             	shr    al,0x3
c001d768:	83 e0 07             	and    eax,0x7
c001d76b:	83 c0 07             	add    eax,0x7
c001d76e:	88 c2                	mov    dl,al
c001d770:	83 e0 07             	and    eax,0x7
c001d773:	83 e2 07             	and    edx,0x7
c001d776:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d77d:	8a 15 c1 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bfc1
c001d783:	83 e2 c7             	and    edx,0xffffffc7
c001d786:	09 ca                	or     edx,ecx
c001d788:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d78c:	88 15 c1 bf 02 c0    	mov    BYTE PTR ds:0xc002bfc1,dl
c001d792:	89 0c c5 c8 bf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4038],ecx
c001d799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d79d:	89 14 c5 c4 bf 02 c0 	mov    DWORD PTR [eax*8-0x3ffd403c],edx
c001d7a4:	a1 04 c0 02 c0       	mov    eax,ds:0xc002c004
c001d7a9:	83 f8 08             	cmp    eax,0x8
c001d7ac:	75 08                	jne    c001d7b6 <Vm::fpuPush(unsigned long long)+0x56>
c001d7ae:	80 0d c0 bf 02 c0 40 	or     BYTE PTR ds:0xc002bfc0,0x40
c001d7b5:	c3                   	ret    
c001d7b6:	40                   	inc    eax
c001d7b7:	a3 04 c0 02 c0       	mov    ds:0xc002c004,eax
c001d7bc:	c3                   	ret    

c001d7bd <Vm::fpuPop()>:
c001d7bd:	8a 0d c1 bf 02 c0    	mov    cl,BYTE PTR ds:0xc002bfc1
c001d7c3:	53                   	push   ebx
c001d7c4:	c0 e9 03             	shr    cl,0x3
c001d7c7:	8a 1d c1 bf 02 c0    	mov    bl,BYTE PTR ds:0xc002bfc1
c001d7cd:	83 e1 07             	and    ecx,0x7
c001d7d0:	83 e3 c7             	and    ebx,0xffffffc7
c001d7d3:	8b 04 cd c4 bf 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd403c]
c001d7da:	8b 14 cd c8 bf 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4038]
c001d7e1:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d7e8:	83 e1 38             	and    ecx,0x38
c001d7eb:	09 d9                	or     ecx,ebx
c001d7ed:	88 0d c1 bf 02 c0    	mov    BYTE PTR ds:0xc002bfc1,cl
c001d7f3:	8b 0d 04 c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c004
c001d7f9:	85 c9                	test   ecx,ecx
c001d7fb:	74 09                	je     c001d806 <Vm::fpuPop()+0x49>
c001d7fd:	49                   	dec    ecx
c001d7fe:	89 0d 04 c0 02 c0    	mov    DWORD PTR ds:0xc002c004,ecx
c001d804:	eb 07                	jmp    c001d80d <Vm::fpuPop()+0x50>
c001d806:	80 0d c0 bf 02 c0 40 	or     BYTE PTR ds:0xc002bfc0,0x40
c001d80d:	5b                   	pop    ebx
c001d80e:	c3                   	ret    

c001d80f <Vm::x87Handler(regs*)>:
c001d80f:	55                   	push   ebp
c001d810:	57                   	push   edi
c001d811:	56                   	push   esi
c001d812:	53                   	push   ebx
c001d813:	83 ec 1c             	sub    esp,0x1c
c001d816:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d81a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d81f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d822:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d82a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d82e:	50                   	push   eax
c001d82f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d833:	50                   	push   eax
c001d834:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d838:	50                   	push   eax
c001d839:	53                   	push   ebx
c001d83a:	e8 cf b3 ff ff       	call   c0018c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d83f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d842:	83 c4 10             	add    esp,0x10
c001d845:	89 c6                	mov    esi,eax
c001d847:	80 fa d9             	cmp    dl,0xd9
c001d84a:	0f 85 52 01 00 00    	jne    c001d9a2 <Vm::x87Handler(regs*)+0x193>
c001d850:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d854:	8d 50 20             	lea    edx,[eax+0x20]
c001d857:	80 fa 0e             	cmp    dl,0xe
c001d85a:	0f 87 86 00 00 00    	ja     c001d8e6 <Vm::x87Handler(regs*)+0xd7>
c001d860:	0f b6 d2             	movzx  edx,dl
c001d863:	ff 24 95 f0 90 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6f10]
c001d86a:	e8 e7 fc ff ff       	call   c001d556 <Vm::fpuGet0()>
c001d86f:	eb 05                	jmp    c001d876 <Vm::x87Handler(regs*)+0x67>
c001d871:	e8 e5 fc ff ff       	call   c001d55b <Vm::fpuGet1()>
c001d876:	57                   	push   edi
c001d877:	57                   	push   edi
c001d878:	52                   	push   edx
c001d879:	50                   	push   eax
c001d87a:	e8 e1 fe ff ff       	call   c001d760 <Vm::fpuPush(unsigned long long)>
c001d87f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d883:	83 c4 10             	add    esp,0x10
c001d886:	b0 01                	mov    al,0x1
c001d888:	e9 e3 09 00 00       	jmp    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001d88d:	83 ec 0c             	sub    esp,0xc
c001d890:	6a 00                	push   0x0
c001d892:	e8 3b fe ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001d897:	59                   	pop    ecx
c001d898:	5e                   	pop    esi
c001d899:	52                   	push   edx
c001d89a:	50                   	push   eax
c001d89b:	e8 c2 fd ff ff       	call   c001d662 <Vm::fpuChs(unsigned long long)>
c001d8a0:	eb 13                	jmp    c001d8b5 <Vm::x87Handler(regs*)+0xa6>
c001d8a2:	83 ec 0c             	sub    esp,0xc
c001d8a5:	6a 00                	push   0x0
c001d8a7:	e8 26 fe ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001d8ac:	5f                   	pop    edi
c001d8ad:	5d                   	pop    ebp
c001d8ae:	52                   	push   edx
c001d8af:	50                   	push   eax
c001d8b0:	e8 a4 fd ff ff       	call   c001d659 <Vm::fpuAbs(unsigned long long)>
c001d8b5:	83 c4 0c             	add    esp,0xc
c001d8b8:	52                   	push   edx
c001d8b9:	50                   	push   eax
c001d8ba:	6a 00                	push   0x0
c001d8bc:	e8 54 fe ff ff       	call   c001d715 <Vm::fpuSetReg(int, unsigned long long)>
c001d8c1:	eb bc                	jmp    c001d87f <Vm::x87Handler(regs*)+0x70>
c001d8c3:	e8 d3 fc ff ff       	call   c001d59b <Vm::fpuGetLog210()>
c001d8c8:	eb ac                	jmp    c001d876 <Vm::x87Handler(regs*)+0x67>
c001d8ca:	e8 9c fc ff ff       	call   c001d56b <Vm::fpuGetLog2E()>
c001d8cf:	eb a5                	jmp    c001d876 <Vm::x87Handler(regs*)+0x67>
c001d8d1:	e8 8d fc ff ff       	call   c001d563 <Vm::fpuGetPi()>
c001d8d6:	eb 9e                	jmp    c001d876 <Vm::x87Handler(regs*)+0x67>
c001d8d8:	e8 d6 fc ff ff       	call   c001d5b3 <Vm::fpuGetLog102()>
c001d8dd:	eb 97                	jmp    c001d876 <Vm::x87Handler(regs*)+0x67>
c001d8df:	e8 9f fc ff ff       	call   c001d583 <Vm::fpuGetLogE2()>
c001d8e4:	eb 90                	jmp    c001d876 <Vm::x87Handler(regs*)+0x67>
c001d8e6:	8d 50 40             	lea    edx,[eax+0x40]
c001d8e9:	80 fa 07             	cmp    dl,0x7
c001d8ec:	77 15                	ja     c001d903 <Vm::x87Handler(regs*)+0xf4>
c001d8ee:	83 ec 0c             	sub    esp,0xc
c001d8f1:	2d c0 00 00 00       	sub    eax,0xc0
c001d8f6:	50                   	push   eax
c001d8f7:	e8 d6 fd ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001d8fc:	59                   	pop    ecx
c001d8fd:	5e                   	pop    esi
c001d8fe:	e9 75 ff ff ff       	jmp    c001d878 <Vm::x87Handler(regs*)+0x69>
c001d903:	8d 50 38             	lea    edx,[eax+0x38]
c001d906:	80 fa 07             	cmp    dl,0x7
c001d909:	77 3c                	ja     c001d947 <Vm::x87Handler(regs*)+0x138>
c001d90b:	83 ec 0c             	sub    esp,0xc
c001d90e:	2d c8 00 00 00       	sub    eax,0xc8
c001d913:	50                   	push   eax
c001d914:	e8 b9 fd ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001d919:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d920:	89 c6                	mov    esi,eax
c001d922:	89 d7                	mov    edi,edx
c001d924:	e8 a9 fd ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001d929:	83 c4 0c             	add    esp,0xc
c001d92c:	52                   	push   edx
c001d92d:	50                   	push   eax
c001d92e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d932:	2d c8 00 00 00       	sub    eax,0xc8
c001d937:	50                   	push   eax
c001d938:	e8 d8 fd ff ff       	call   c001d715 <Vm::fpuSetReg(int, unsigned long long)>
c001d93d:	83 c4 0c             	add    esp,0xc
c001d940:	57                   	push   edi
c001d941:	56                   	push   esi
c001d942:	e9 73 ff ff ff       	jmp    c001d8ba <Vm::x87Handler(regs*)+0xab>
c001d947:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d94b:	84 d2                	test   dl,dl
c001d94d:	75 0f                	jne    c001d95e <Vm::x87Handler(regs*)+0x14f>
c001d94f:	83 ec 0c             	sub    esp,0xc
c001d952:	ff 36                	push   DWORD PTR [esi]
c001d954:	e8 c8 fa ff ff       	call   c001d421 <Vm::fpu32ToInternal(unsigned int)>
c001d959:	e9 bf 00 00 00       	jmp    c001da1d <Vm::x87Handler(regs*)+0x20e>
c001d95e:	80 fa 03             	cmp    dl,0x3
c001d961:	75 13                	jne    c001d976 <Vm::x87Handler(regs*)+0x167>
c001d963:	e8 55 fe ff ff       	call   c001d7bd <Vm::fpuPop()>
c001d968:	55                   	push   ebp
c001d969:	55                   	push   ebp
c001d96a:	52                   	push   edx
c001d96b:	50                   	push   eax
c001d96c:	e8 4c fa ff ff       	call   c001d3bd <Vm::fpuInternalTo32(unsigned long long)>
c001d971:	e9 88 00 00 00       	jmp    c001d9fe <Vm::x87Handler(regs*)+0x1ef>
c001d976:	80 fa 05             	cmp    dl,0x5
c001d979:	75 0e                	jne    c001d989 <Vm::x87Handler(regs*)+0x17a>
c001d97b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d97e:	66 a3 c2 bf 02 c0    	mov    ds:0xc002bfc2,ax
c001d984:	e9 df 00 00 00       	jmp    c001da68 <Vm::x87Handler(regs*)+0x259>
c001d989:	31 c0                	xor    eax,eax
c001d98b:	80 fa 07             	cmp    dl,0x7
c001d98e:	0f 85 dc 08 00 00    	jne    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001d994:	66 a1 c2 bf 02 c0    	mov    ax,ds:0xc002bfc2
c001d99a:	66 89 06             	mov    WORD PTR [esi],ax
c001d99d:	e9 c6 00 00 00       	jmp    c001da68 <Vm::x87Handler(regs*)+0x259>
c001d9a2:	80 fa d8             	cmp    dl,0xd8
c001d9a5:	0f 84 c9 00 00 00    	je     c001da74 <Vm::x87Handler(regs*)+0x265>
c001d9ab:	80 fa dc             	cmp    dl,0xdc
c001d9ae:	0f 84 0d 02 00 00    	je     c001dbc1 <Vm::x87Handler(regs*)+0x3b2>
c001d9b4:	80 fa de             	cmp    dl,0xde
c001d9b7:	0f 84 cd 02 00 00    	je     c001dc8a <Vm::x87Handler(regs*)+0x47b>
c001d9bd:	80 fa dd             	cmp    dl,0xdd
c001d9c0:	0f 84 5f 04 00 00    	je     c001de25 <Vm::x87Handler(regs*)+0x616>
c001d9c6:	80 fa da             	cmp    dl,0xda
c001d9c9:	0f 84 24 05 00 00    	je     c001def3 <Vm::x87Handler(regs*)+0x6e4>
c001d9cf:	80 fa df             	cmp    dl,0xdf
c001d9d2:	0f 84 68 05 00 00    	je     c001df40 <Vm::x87Handler(regs*)+0x731>
c001d9d8:	31 c0                	xor    eax,eax
c001d9da:	80 fa db             	cmp    dl,0xdb
c001d9dd:	0f 85 8d 08 00 00    	jne    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001d9e3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d9e7:	80 fa 03             	cmp    dl,0x3
c001d9ea:	0f 85 70 06 00 00    	jne    c001e060 <Vm::x87Handler(regs*)+0x851>
c001d9f0:	e8 c8 fd ff ff       	call   c001d7bd <Vm::fpuPop()>
c001d9f5:	55                   	push   ebp
c001d9f6:	55                   	push   ebp
c001d9f7:	52                   	push   edx
c001d9f8:	50                   	push   eax
c001d9f9:	e8 71 fa ff ff       	call   c001d46f <Vm::fpuFloatToLong(unsigned long long)>
c001d9fe:	83 c4 10             	add    esp,0x10
c001da01:	89 06                	mov    DWORD PTR [esi],eax
c001da03:	eb 63                	jmp    c001da68 <Vm::x87Handler(regs*)+0x259>
c001da05:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da09:	84 d2                	test   dl,dl
c001da0b:	0f 85 e6 05 00 00    	jne    c001dff7 <Vm::x87Handler(regs*)+0x7e8>
c001da11:	57                   	push   edi
c001da12:	57                   	push   edi
c001da13:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001da16:	ff 36                	push   DWORD PTR [esi]
c001da18:	e8 49 fa ff ff       	call   c001d466 <Vm::fpu64ToInternal(unsigned long long)>
c001da1d:	5e                   	pop    esi
c001da1e:	5f                   	pop    edi
c001da1f:	52                   	push   edx
c001da20:	50                   	push   eax
c001da21:	e8 3a fd ff ff       	call   c001d760 <Vm::fpuPush(unsigned long long)>
c001da26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da2a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001da2d:	e9 51 fe ff ff       	jmp    c001d883 <Vm::x87Handler(regs*)+0x74>
c001da32:	80 fa 03             	cmp    dl,0x3
c001da35:	0f 85 d7 06 00 00    	jne    c001e112 <Vm::x87Handler(regs*)+0x903>
c001da3b:	57                   	push   edi
c001da3c:	57                   	push   edi
c001da3d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001da40:	ff 36                	push   DWORD PTR [esi]
c001da42:	e8 1f fa ff ff       	call   c001d466 <Vm::fpu64ToInternal(unsigned long long)>
c001da47:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da4e:	89 c6                	mov    esi,eax
c001da50:	89 d7                	mov    edi,edx
c001da52:	e8 7b fc ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001da57:	57                   	push   edi
c001da58:	56                   	push   esi
c001da59:	52                   	push   edx
c001da5a:	50                   	push   eax
c001da5b:	e8 95 fb ff ff       	call   c001d5f5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001da60:	83 c4 20             	add    esp,0x20
c001da63:	e8 55 fd ff ff       	call   c001d7bd <Vm::fpuPop()>
c001da68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da6c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001da6f:	e9 12 fe ff ff       	jmp    c001d886 <Vm::x87Handler(regs*)+0x77>
c001da74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001da78:	8d 50 40             	lea    edx,[eax+0x40]
c001da7b:	80 fa 07             	cmp    dl,0x7
c001da7e:	77 29                	ja     c001daa9 <Vm::x87Handler(regs*)+0x29a>
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	2d c0 00 00 00       	sub    eax,0xc0
c001da88:	50                   	push   eax
c001da89:	e8 44 fc ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001da8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da95:	89 c6                	mov    esi,eax
c001da97:	89 d7                	mov    edi,edx
c001da99:	e8 34 fc ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001da9e:	57                   	push   edi
c001da9f:	56                   	push   esi
c001daa0:	52                   	push   edx
c001daa1:	50                   	push   eax
c001daa2:	e8 a1 fb ff ff       	call   c001d648 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001daa7:	eb 2f                	jmp    c001dad8 <Vm::x87Handler(regs*)+0x2c9>
c001daa9:	8d 50 38             	lea    edx,[eax+0x38]
c001daac:	80 fa 07             	cmp    dl,0x7
c001daaf:	77 2f                	ja     c001dae0 <Vm::x87Handler(regs*)+0x2d1>
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	2d c8 00 00 00       	sub    eax,0xc8
c001dab9:	50                   	push   eax
c001daba:	e8 13 fc ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dabf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dac6:	89 c6                	mov    esi,eax
c001dac8:	89 d7                	mov    edi,edx
c001daca:	e8 03 fc ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dacf:	57                   	push   edi
c001dad0:	56                   	push   esi
c001dad1:	52                   	push   edx
c001dad2:	50                   	push   eax
c001dad3:	e8 a9 fb ff ff       	call   c001d681 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dad8:	83 c4 1c             	add    esp,0x1c
c001dadb:	e9 d8 fd ff ff       	jmp    c001d8b8 <Vm::x87Handler(regs*)+0xa9>
c001dae0:	8d 50 30             	lea    edx,[eax+0x30]
c001dae3:	80 fa 07             	cmp    dl,0x7
c001dae6:	77 0d                	ja     c001daf5 <Vm::x87Handler(regs*)+0x2e6>
c001dae8:	83 ec 0c             	sub    esp,0xc
c001daeb:	2d d0 00 00 00       	sub    eax,0xd0
c001daf0:	e9 99 03 00 00       	jmp    c001de8e <Vm::x87Handler(regs*)+0x67f>
c001daf5:	8d 50 28             	lea    edx,[eax+0x28]
c001daf8:	80 fa 07             	cmp    dl,0x7
c001dafb:	77 0d                	ja     c001db0a <Vm::x87Handler(regs*)+0x2fb>
c001dafd:	83 ec 0c             	sub    esp,0xc
c001db00:	2d d8 00 00 00       	sub    eax,0xd8
c001db05:	e9 c0 03 00 00       	jmp    c001deca <Vm::x87Handler(regs*)+0x6bb>
c001db0a:	8d 50 20             	lea    edx,[eax+0x20]
c001db0d:	80 fa 07             	cmp    dl,0x7
c001db10:	77 1b                	ja     c001db2d <Vm::x87Handler(regs*)+0x31e>
c001db12:	83 ec 0c             	sub    esp,0xc
c001db15:	2d e0 00 00 00       	sub    eax,0xe0
c001db1a:	50                   	push   eax
c001db1b:	e8 b2 fb ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001db20:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db27:	89 c6                	mov    esi,eax
c001db29:	89 d7                	mov    edi,edx
c001db2b:	eb 22                	jmp    c001db4f <Vm::x87Handler(regs*)+0x340>
c001db2d:	8d 50 18             	lea    edx,[eax+0x18]
c001db30:	80 fa 07             	cmp    dl,0x7
c001db33:	77 2d                	ja     c001db62 <Vm::x87Handler(regs*)+0x353>
c001db35:	83 ec 0c             	sub    esp,0xc
c001db38:	6a 00                	push   0x0
c001db3a:	e8 93 fb ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001db3f:	89 c6                	mov    esi,eax
c001db41:	89 d7                	mov    edi,edx
c001db43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001db47:	2d e8 00 00 00       	sub    eax,0xe8
c001db4c:	89 04 24             	mov    DWORD PTR [esp],eax
c001db4f:	e8 7e fb ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001db54:	57                   	push   edi
c001db55:	56                   	push   esi
c001db56:	52                   	push   edx
c001db57:	50                   	push   eax
c001db58:	e8 15 fb ff ff       	call   c001d672 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db5d:	e9 76 ff ff ff       	jmp    c001dad8 <Vm::x87Handler(regs*)+0x2c9>
c001db62:	8d 50 10             	lea    edx,[eax+0x10]
c001db65:	80 fa 07             	cmp    dl,0x7
c001db68:	77 1b                	ja     c001db85 <Vm::x87Handler(regs*)+0x376>
c001db6a:	83 ec 0c             	sub    esp,0xc
c001db6d:	2d f0 00 00 00       	sub    eax,0xf0
c001db72:	50                   	push   eax
c001db73:	e8 5a fb ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001db78:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db7f:	89 c6                	mov    esi,eax
c001db81:	89 d7                	mov    edi,edx
c001db83:	eb 22                	jmp    c001dba7 <Vm::x87Handler(regs*)+0x398>
c001db85:	3c f7                	cmp    al,0xf7
c001db87:	0f 86 d1 03 00 00    	jbe    c001df5e <Vm::x87Handler(regs*)+0x74f>
c001db8d:	83 ec 0c             	sub    esp,0xc
c001db90:	6a 00                	push   0x0
c001db92:	e8 3b fb ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001db97:	89 c6                	mov    esi,eax
c001db99:	89 d7                	mov    edi,edx
c001db9b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001db9f:	2d f8 00 00 00       	sub    eax,0xf8
c001dba4:	89 04 24             	mov    DWORD PTR [esp],eax
c001dba7:	e8 26 fb ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dbac:	57                   	push   edi
c001dbad:	56                   	push   esi
c001dbae:	52                   	push   edx
c001dbaf:	50                   	push   eax
c001dbb0:	e8 eb fa ff ff       	call   c001d6a0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbb5:	83 c4 1c             	add    esp,0x1c
c001dbb8:	52                   	push   edx
c001dbb9:	50                   	push   eax
c001dbba:	6a 00                	push   0x0
c001dbbc:	e9 51 02 00 00       	jmp    c001de12 <Vm::x87Handler(regs*)+0x603>
c001dbc1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dbc5:	8d 50 40             	lea    edx,[eax+0x40]
c001dbc8:	80 fa 07             	cmp    dl,0x7
c001dbcb:	77 37                	ja     c001dc04 <Vm::x87Handler(regs*)+0x3f5>
c001dbcd:	83 ec 0c             	sub    esp,0xc
c001dbd0:	2d c0 00 00 00       	sub    eax,0xc0
c001dbd5:	50                   	push   eax
c001dbd6:	e8 f7 fa ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dbdb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbe2:	89 c6                	mov    esi,eax
c001dbe4:	89 d7                	mov    edi,edx
c001dbe6:	e8 e7 fa ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dbeb:	57                   	push   edi
c001dbec:	56                   	push   esi
c001dbed:	52                   	push   edx
c001dbee:	50                   	push   eax
c001dbef:	e8 54 fa ff ff       	call   c001d648 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dbf4:	83 c4 1c             	add    esp,0x1c
c001dbf7:	52                   	push   edx
c001dbf8:	50                   	push   eax
c001dbf9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dbfd:	2d c0 00 00 00       	sub    eax,0xc0
c001dc02:	eb 3d                	jmp    c001dc41 <Vm::x87Handler(regs*)+0x432>
c001dc04:	8d 50 38             	lea    edx,[eax+0x38]
c001dc07:	80 fa 07             	cmp    dl,0x7
c001dc0a:	77 3b                	ja     c001dc47 <Vm::x87Handler(regs*)+0x438>
c001dc0c:	83 ec 0c             	sub    esp,0xc
c001dc0f:	2d c8 00 00 00       	sub    eax,0xc8
c001dc14:	50                   	push   eax
c001dc15:	e8 b8 fa ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dc1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc21:	89 c6                	mov    esi,eax
c001dc23:	89 d7                	mov    edi,edx
c001dc25:	e8 a8 fa ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dc2a:	57                   	push   edi
c001dc2b:	56                   	push   esi
c001dc2c:	52                   	push   edx
c001dc2d:	50                   	push   eax
c001dc2e:	e8 4e fa ff ff       	call   c001d681 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dc33:	83 c4 1c             	add    esp,0x1c
c001dc36:	52                   	push   edx
c001dc37:	50                   	push   eax
c001dc38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc3c:	2d c8 00 00 00       	sub    eax,0xc8
c001dc41:	50                   	push   eax
c001dc42:	e9 75 fc ff ff       	jmp    c001d8bc <Vm::x87Handler(regs*)+0xad>
c001dc47:	83 c0 18             	add    eax,0x18
c001dc4a:	3c 07                	cmp    al,0x7
c001dc4c:	0f 87 3b 04 00 00    	ja     c001e08d <Vm::x87Handler(regs*)+0x87e>
c001dc52:	83 ec 0c             	sub    esp,0xc
c001dc55:	6a 00                	push   0x0
c001dc57:	e8 76 fa ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dc5c:	89 c6                	mov    esi,eax
c001dc5e:	89 d7                	mov    edi,edx
c001dc60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc64:	2d e8 00 00 00       	sub    eax,0xe8
c001dc69:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc6c:	e8 61 fa ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dc71:	57                   	push   edi
c001dc72:	56                   	push   esi
c001dc73:	52                   	push   edx
c001dc74:	50                   	push   eax
c001dc75:	e8 f8 f9 ff ff       	call   c001d672 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dc7a:	83 c4 1c             	add    esp,0x1c
c001dc7d:	52                   	push   edx
c001dc7e:	50                   	push   eax
c001dc7f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc83:	2d e8 00 00 00       	sub    eax,0xe8
c001dc88:	eb b7                	jmp    c001dc41 <Vm::x87Handler(regs*)+0x432>
c001dc8a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc8e:	8d 50 40             	lea    edx,[eax+0x40]
c001dc91:	80 fa 07             	cmp    dl,0x7
c001dc94:	77 3a                	ja     c001dcd0 <Vm::x87Handler(regs*)+0x4c1>
c001dc96:	83 ec 0c             	sub    esp,0xc
c001dc99:	2d c0 00 00 00       	sub    eax,0xc0
c001dc9e:	50                   	push   eax
c001dc9f:	e8 2e fa ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dca4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dcab:	89 c6                	mov    esi,eax
c001dcad:	89 d7                	mov    edi,edx
c001dcaf:	e8 1e fa ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dcb4:	57                   	push   edi
c001dcb5:	56                   	push   esi
c001dcb6:	52                   	push   edx
c001dcb7:	50                   	push   eax
c001dcb8:	e8 8b f9 ff ff       	call   c001d648 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dcbd:	83 c4 1c             	add    esp,0x1c
c001dcc0:	52                   	push   edx
c001dcc1:	50                   	push   eax
c001dcc2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dcc6:	2d c0 00 00 00       	sub    eax,0xc0
c001dccb:	e9 9e 01 00 00       	jmp    c001de6e <Vm::x87Handler(regs*)+0x65f>
c001dcd0:	8d 50 20             	lea    edx,[eax+0x20]
c001dcd3:	80 fa 07             	cmp    dl,0x7
c001dcd6:	77 3a                	ja     c001dd12 <Vm::x87Handler(regs*)+0x503>
c001dcd8:	83 ec 0c             	sub    esp,0xc
c001dcdb:	2d e0 00 00 00       	sub    eax,0xe0
c001dce0:	50                   	push   eax
c001dce1:	e8 ec f9 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dce6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dced:	89 c6                	mov    esi,eax
c001dcef:	89 d7                	mov    edi,edx
c001dcf1:	e8 dc f9 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dcf6:	57                   	push   edi
c001dcf7:	56                   	push   esi
c001dcf8:	52                   	push   edx
c001dcf9:	50                   	push   eax
c001dcfa:	e8 73 f9 ff ff       	call   c001d672 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dcff:	83 c4 1c             	add    esp,0x1c
c001dd02:	52                   	push   edx
c001dd03:	50                   	push   eax
c001dd04:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd08:	2d e0 00 00 00       	sub    eax,0xe0
c001dd0d:	e9 5c 01 00 00       	jmp    c001de6e <Vm::x87Handler(regs*)+0x65f>
c001dd12:	8d 50 18             	lea    edx,[eax+0x18]
c001dd15:	80 fa 07             	cmp    dl,0x7
c001dd18:	77 3b                	ja     c001dd55 <Vm::x87Handler(regs*)+0x546>
c001dd1a:	83 ec 0c             	sub    esp,0xc
c001dd1d:	6a 00                	push   0x0
c001dd1f:	e8 ae f9 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dd24:	89 c6                	mov    esi,eax
c001dd26:	89 d7                	mov    edi,edx
c001dd28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd2c:	2d e8 00 00 00       	sub    eax,0xe8
c001dd31:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd34:	e8 99 f9 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dd39:	57                   	push   edi
c001dd3a:	56                   	push   esi
c001dd3b:	52                   	push   edx
c001dd3c:	50                   	push   eax
c001dd3d:	e8 30 f9 ff ff       	call   c001d672 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dd42:	83 c4 1c             	add    esp,0x1c
c001dd45:	52                   	push   edx
c001dd46:	50                   	push   eax
c001dd47:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd4b:	2d e8 00 00 00       	sub    eax,0xe8
c001dd50:	e9 19 01 00 00       	jmp    c001de6e <Vm::x87Handler(regs*)+0x65f>
c001dd55:	8d 50 38             	lea    edx,[eax+0x38]
c001dd58:	80 fa 07             	cmp    dl,0x7
c001dd5b:	77 37                	ja     c001dd94 <Vm::x87Handler(regs*)+0x585>
c001dd5d:	83 ec 0c             	sub    esp,0xc
c001dd60:	2d c8 00 00 00       	sub    eax,0xc8
c001dd65:	50                   	push   eax
c001dd66:	e8 67 f9 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dd6b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dd72:	89 c6                	mov    esi,eax
c001dd74:	89 d7                	mov    edi,edx
c001dd76:	e8 57 f9 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dd7b:	57                   	push   edi
c001dd7c:	56                   	push   esi
c001dd7d:	52                   	push   edx
c001dd7e:	50                   	push   eax
c001dd7f:	e8 fd f8 ff ff       	call   c001d681 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dd84:	83 c4 1c             	add    esp,0x1c
c001dd87:	52                   	push   edx
c001dd88:	50                   	push   eax
c001dd89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd8d:	2d c8 00 00 00       	sub    eax,0xc8
c001dd92:	eb 7d                	jmp    c001de11 <Vm::x87Handler(regs*)+0x602>
c001dd94:	3c f7                	cmp    al,0xf7
c001dd96:	76 38                	jbe    c001ddd0 <Vm::x87Handler(regs*)+0x5c1>
c001dd98:	83 ec 0c             	sub    esp,0xc
c001dd9b:	6a 00                	push   0x0
c001dd9d:	e8 30 f9 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dda2:	89 c6                	mov    esi,eax
c001dda4:	89 d7                	mov    edi,edx
c001dda6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ddaa:	2d f8 00 00 00       	sub    eax,0xf8
c001ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001ddb2:	e8 1b f9 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001ddb7:	57                   	push   edi
c001ddb8:	56                   	push   esi
c001ddb9:	52                   	push   edx
c001ddba:	50                   	push   eax
c001ddbb:	e8 e0 f8 ff ff       	call   c001d6a0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ddc0:	83 c4 1c             	add    esp,0x1c
c001ddc3:	52                   	push   edx
c001ddc4:	50                   	push   eax
c001ddc5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ddc9:	2d f8 00 00 00       	sub    eax,0xf8
c001ddce:	eb 41                	jmp    c001de11 <Vm::x87Handler(regs*)+0x602>
c001ddd0:	8d 50 10             	lea    edx,[eax+0x10]
c001ddd3:	80 fa 07             	cmp    dl,0x7
c001ddd6:	0f 87 5a 01 00 00    	ja     c001df36 <Vm::x87Handler(regs*)+0x727>
c001dddc:	83 ec 0c             	sub    esp,0xc
c001dddf:	2d f0 00 00 00       	sub    eax,0xf0
c001dde4:	50                   	push   eax
c001dde5:	e8 e8 f8 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001ddea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ddf1:	89 c6                	mov    esi,eax
c001ddf3:	89 d7                	mov    edi,edx
c001ddf5:	e8 d8 f8 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001ddfa:	57                   	push   edi
c001ddfb:	56                   	push   esi
c001ddfc:	52                   	push   edx
c001ddfd:	50                   	push   eax
c001ddfe:	e8 9d f8 ff ff       	call   c001d6a0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001de03:	83 c4 1c             	add    esp,0x1c
c001de06:	52                   	push   edx
c001de07:	50                   	push   eax
c001de08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de0c:	2d f0 00 00 00       	sub    eax,0xf0
c001de11:	50                   	push   eax
c001de12:	e8 fe f8 ff ff       	call   c001d715 <Vm::fpuSetReg(int, unsigned long long)>
c001de17:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001de1b:	e8 9d f9 ff ff       	call   c001d7bd <Vm::fpuPop()>
c001de20:	e9 5e fa ff ff       	jmp    c001d883 <Vm::x87Handler(regs*)+0x74>
c001de25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de29:	8d 50 30             	lea    edx,[eax+0x30]
c001de2c:	80 fa 07             	cmp    dl,0x7
c001de2f:	77 1d                	ja     c001de4e <Vm::x87Handler(regs*)+0x63f>
c001de31:	83 ec 0c             	sub    esp,0xc
c001de34:	6a 00                	push   0x0
c001de36:	e8 97 f8 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001de3b:	83 c4 0c             	add    esp,0xc
c001de3e:	52                   	push   edx
c001de3f:	50                   	push   eax
c001de40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de44:	2d d0 00 00 00       	sub    eax,0xd0
c001de49:	e9 f3 fd ff ff       	jmp    c001dc41 <Vm::x87Handler(regs*)+0x432>
c001de4e:	8d 50 28             	lea    edx,[eax+0x28]
c001de51:	80 fa 07             	cmp    dl,0x7
c001de54:	77 28                	ja     c001de7e <Vm::x87Handler(regs*)+0x66f>
c001de56:	83 ec 0c             	sub    esp,0xc
c001de59:	6a 00                	push   0x0
c001de5b:	e8 72 f8 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001de60:	83 c4 0c             	add    esp,0xc
c001de63:	52                   	push   edx
c001de64:	50                   	push   eax
c001de65:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de69:	2d d8 00 00 00       	sub    eax,0xd8
c001de6e:	50                   	push   eax
c001de6f:	e8 a1 f8 ff ff       	call   c001d715 <Vm::fpuSetReg(int, unsigned long long)>
c001de74:	e8 44 f9 ff ff       	call   c001d7bd <Vm::fpuPop()>
c001de79:	e9 01 fa ff ff       	jmp    c001d87f <Vm::x87Handler(regs*)+0x70>
c001de7e:	8d 50 20             	lea    edx,[eax+0x20]
c001de81:	80 fa 07             	cmp    dl,0x7
c001de84:	77 30                	ja     c001deb6 <Vm::x87Handler(regs*)+0x6a7>
c001de86:	83 ec 0c             	sub    esp,0xc
c001de89:	2d e0 00 00 00       	sub    eax,0xe0
c001de8e:	50                   	push   eax
c001de8f:	e8 3e f8 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001de94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de9b:	89 c6                	mov    esi,eax
c001de9d:	89 d7                	mov    edi,edx
c001de9f:	e8 2e f8 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dea4:	57                   	push   edi
c001dea5:	56                   	push   esi
c001dea6:	52                   	push   edx
c001dea7:	50                   	push   eax
c001dea8:	e8 48 f7 ff ff       	call   c001d5f5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001dead:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001deb1:	e9 54 02 00 00       	jmp    c001e10a <Vm::x87Handler(regs*)+0x8fb>
c001deb6:	8d 50 18             	lea    edx,[eax+0x18]
c001deb9:	80 fa 07             	cmp    dl,0x7
c001debc:	0f 87 43 fb ff ff    	ja     c001da05 <Vm::x87Handler(regs*)+0x1f6>
c001dec2:	83 ec 0c             	sub    esp,0xc
c001dec5:	2d e8 00 00 00       	sub    eax,0xe8
c001deca:	50                   	push   eax
c001decb:	e8 02 f8 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001ded0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ded7:	89 c6                	mov    esi,eax
c001ded9:	89 d7                	mov    edi,edx
c001dedb:	e8 f2 f7 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dee0:	57                   	push   edi
c001dee1:	56                   	push   esi
c001dee2:	52                   	push   edx
c001dee3:	50                   	push   eax
c001dee4:	e8 0c f7 ff ff       	call   c001d5f5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001dee9:	83 c4 20             	add    esp,0x20
c001deec:	e8 cc f8 ff ff       	call   c001d7bd <Vm::fpuPop()>
c001def1:	eb 62                	jmp    c001df55 <Vm::x87Handler(regs*)+0x746>
c001def3:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001def7:	0f 85 0f 01 00 00    	jne    c001e00c <Vm::x87Handler(regs*)+0x7fd>
c001defd:	83 ec 0c             	sub    esp,0xc
c001df00:	6a 01                	push   0x1
c001df02:	e8 cb f7 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001df07:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df0e:	89 c6                	mov    esi,eax
c001df10:	89 d7                	mov    edi,edx
c001df12:	e8 bb f7 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001df17:	57                   	push   edi
c001df18:	56                   	push   esi
c001df19:	52                   	push   edx
c001df1a:	50                   	push   eax
c001df1b:	e8 d5 f6 ff ff       	call   c001d5f5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001df20:	83 c4 20             	add    esp,0x20
c001df23:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001df27:	e8 91 f8 ff ff       	call   c001d7bd <Vm::fpuPop()>
c001df2c:	e8 8c f8 ff ff       	call   c001d7bd <Vm::fpuPop()>
c001df31:	e9 50 f9 ff ff       	jmp    c001d886 <Vm::x87Handler(regs*)+0x77>
c001df36:	3c d9                	cmp    al,0xd9
c001df38:	0f 85 b5 02 00 00    	jne    c001e1f3 <Vm::x87Handler(regs*)+0x9e4>
c001df3e:	eb bd                	jmp    c001defd <Vm::x87Handler(regs*)+0x6ee>
c001df40:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001df44:	0f 85 ea 02 00 00    	jne    c001e234 <Vm::x87Handler(regs*)+0xa25>
c001df4a:	0f b7 05 c0 bf 02 c0 	movzx  eax,WORD PTR ds:0xc002bfc0
c001df51:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001df55:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001df59:	e9 28 f9 ff ff       	jmp    c001d886 <Vm::x87Handler(regs*)+0x77>
c001df5e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001df62:	84 d2                	test   dl,dl
c001df64:	75 0f                	jne    c001df75 <Vm::x87Handler(regs*)+0x766>
c001df66:	83 ec 0c             	sub    esp,0xc
c001df69:	ff 36                	push   DWORD PTR [esi]
c001df6b:	e8 b1 f4 ff ff       	call   c001d421 <Vm::fpu32ToInternal(unsigned int)>
c001df70:	e9 2c 01 00 00       	jmp    c001e0a1 <Vm::x87Handler(regs*)+0x892>
c001df75:	80 fa 01             	cmp    dl,0x1
c001df78:	75 0f                	jne    c001df89 <Vm::x87Handler(regs*)+0x77a>
c001df7a:	83 ec 0c             	sub    esp,0xc
c001df7d:	ff 36                	push   DWORD PTR [esi]
c001df7f:	e8 9d f4 ff ff       	call   c001d421 <Vm::fpu32ToInternal(unsigned int)>
c001df84:	e9 81 02 00 00       	jmp    c001e20a <Vm::x87Handler(regs*)+0x9fb>
c001df89:	80 fa 04             	cmp    dl,0x4
c001df8c:	75 0f                	jne    c001df9d <Vm::x87Handler(regs*)+0x78e>
c001df8e:	83 ec 0c             	sub    esp,0xc
c001df91:	ff 36                	push   DWORD PTR [esi]
c001df93:	e8 89 f4 ff ff       	call   c001d421 <Vm::fpu32ToInternal(unsigned int)>
c001df98:	e9 86 01 00 00       	jmp    c001e123 <Vm::x87Handler(regs*)+0x914>
c001df9d:	80 fa 05             	cmp    dl,0x5
c001dfa0:	75 1b                	jne    c001dfbd <Vm::x87Handler(regs*)+0x7ae>
c001dfa2:	83 ec 0c             	sub    esp,0xc
c001dfa5:	6a 00                	push   0x0
c001dfa7:	e8 26 f7 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dfac:	89 c7                	mov    edi,eax
c001dfae:	89 d5                	mov    ebp,edx
c001dfb0:	58                   	pop    eax
c001dfb1:	ff 36                	push   DWORD PTR [esi]
c001dfb3:	e8 69 f4 ff ff       	call   c001d421 <Vm::fpu32ToInternal(unsigned int)>
c001dfb8:	e9 a3 01 00 00       	jmp    c001e160 <Vm::x87Handler(regs*)+0x951>
c001dfbd:	80 fa 06             	cmp    dl,0x6
c001dfc0:	75 0f                	jne    c001dfd1 <Vm::x87Handler(regs*)+0x7c2>
c001dfc2:	83 ec 0c             	sub    esp,0xc
c001dfc5:	ff 36                	push   DWORD PTR [esi]
c001dfc7:	e8 55 f4 ff ff       	call   c001d421 <Vm::fpu32ToInternal(unsigned int)>
c001dfcc:	e9 ae 01 00 00       	jmp    c001e17f <Vm::x87Handler(regs*)+0x970>
c001dfd1:	31 c0                	xor    eax,eax
c001dfd3:	80 fa 07             	cmp    dl,0x7
c001dfd6:	0f 85 94 02 00 00    	jne    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001dfdc:	83 ec 0c             	sub    esp,0xc
c001dfdf:	6a 00                	push   0x0
c001dfe1:	e8 ec f6 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001dfe6:	89 c7                	mov    edi,eax
c001dfe8:	89 d5                	mov    ebp,edx
c001dfea:	58                   	pop    eax
c001dfeb:	ff 36                	push   DWORD PTR [esi]
c001dfed:	e8 2f f4 ff ff       	call   c001d421 <Vm::fpu32ToInternal(unsigned int)>
c001dff2:	e9 cb 01 00 00       	jmp    c001e1c2 <Vm::x87Handler(regs*)+0x9b3>
c001dff7:	80 fa 03             	cmp    dl,0x3
c001dffa:	0f 85 d3 01 00 00    	jne    c001e1d3 <Vm::x87Handler(regs*)+0x9c4>
c001e000:	e8 b8 f7 ff ff       	call   c001d7bd <Vm::fpuPop()>
c001e005:	51                   	push   ecx
c001e006:	51                   	push   ecx
c001e007:	e9 de 01 00 00       	jmp    c001e1ea <Vm::x87Handler(regs*)+0x9db>
c001e00c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e010:	80 fa 01             	cmp    dl,0x1
c001e013:	75 09                	jne    c001e01e <Vm::x87Handler(regs*)+0x80f>
c001e015:	57                   	push   edi
c001e016:	57                   	push   edi
c001e017:	8b 06                	mov    eax,DWORD PTR [esi]
c001e019:	e9 e3 01 00 00       	jmp    c001e201 <Vm::x87Handler(regs*)+0x9f2>
c001e01e:	80 fa 04             	cmp    dl,0x4
c001e021:	75 12                	jne    c001e035 <Vm::x87Handler(regs*)+0x826>
c001e023:	31 d2                	xor    edx,edx
c001e025:	51                   	push   ecx
c001e026:	51                   	push   ecx
c001e027:	8b 06                	mov    eax,DWORD PTR [esi]
c001e029:	52                   	push   edx
c001e02a:	50                   	push   eax
c001e02b:	e8 d0 f4 ff ff       	call   c001d500 <Vm::fpuLongToFloat(long long)>
c001e030:	e9 ee 00 00 00       	jmp    c001e123 <Vm::x87Handler(regs*)+0x914>
c001e035:	31 c0                	xor    eax,eax
c001e037:	80 fa 07             	cmp    dl,0x7
c001e03a:	0f 85 30 02 00 00    	jne    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001e040:	83 ec 0c             	sub    esp,0xc
c001e043:	6a 00                	push   0x0
c001e045:	e8 88 f6 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e04a:	89 c7                	mov    edi,eax
c001e04c:	89 d5                	mov    ebp,edx
c001e04e:	58                   	pop    eax
c001e04f:	8b 06                	mov    eax,DWORD PTR [esi]
c001e051:	5a                   	pop    edx
c001e052:	31 d2                	xor    edx,edx
c001e054:	52                   	push   edx
c001e055:	50                   	push   eax
c001e056:	e8 a5 f4 ff ff       	call   c001d500 <Vm::fpuLongToFloat(long long)>
c001e05b:	e9 62 01 00 00       	jmp    c001e1c2 <Vm::x87Handler(regs*)+0x9b3>
c001e060:	84 d2                	test   dl,dl
c001e062:	75 0d                	jne    c001e071 <Vm::x87Handler(regs*)+0x862>
c001e064:	31 d2                	xor    edx,edx
c001e066:	55                   	push   ebp
c001e067:	55                   	push   ebp
c001e068:	8b 06                	mov    eax,DWORD PTR [esi]
c001e06a:	52                   	push   edx
c001e06b:	50                   	push   eax
c001e06c:	e9 d3 01 00 00       	jmp    c001e244 <Vm::x87Handler(regs*)+0xa35>
c001e071:	31 c0                	xor    eax,eax
c001e073:	80 fa 02             	cmp    dl,0x2
c001e076:	0f 85 f4 01 00 00    	jne    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001e07c:	83 ec 0c             	sub    esp,0xc
c001e07f:	6a 00                	push   0x0
c001e081:	e8 4c f6 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e086:	59                   	pop    ecx
c001e087:	5f                   	pop    edi
c001e088:	e9 6a f9 ff ff       	jmp    c001d9f7 <Vm::x87Handler(regs*)+0x1e8>
c001e08d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e091:	84 d2                	test   dl,dl
c001e093:	75 2a                	jne    c001e0bf <Vm::x87Handler(regs*)+0x8b0>
c001e095:	50                   	push   eax
c001e096:	50                   	push   eax
c001e097:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e09a:	ff 36                	push   DWORD PTR [esi]
c001e09c:	e8 c5 f3 ff ff       	call   c001d466 <Vm::fpu64ToInternal(unsigned long long)>
c001e0a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0a8:	89 c6                	mov    esi,eax
c001e0aa:	89 d7                	mov    edi,edx
c001e0ac:	e8 21 f6 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e0b1:	57                   	push   edi
c001e0b2:	56                   	push   esi
c001e0b3:	52                   	push   edx
c001e0b4:	50                   	push   eax
c001e0b5:	e8 8e f5 ff ff       	call   c001d648 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e0ba:	e9 64 01 00 00       	jmp    c001e223 <Vm::x87Handler(regs*)+0xa14>
c001e0bf:	80 fa 01             	cmp    dl,0x1
c001e0c2:	75 11                	jne    c001e0d5 <Vm::x87Handler(regs*)+0x8c6>
c001e0c4:	50                   	push   eax
c001e0c5:	50                   	push   eax
c001e0c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e0c9:	ff 36                	push   DWORD PTR [esi]
c001e0cb:	e8 96 f3 ff ff       	call   c001d466 <Vm::fpu64ToInternal(unsigned long long)>
c001e0d0:	e9 35 01 00 00       	jmp    c001e20a <Vm::x87Handler(regs*)+0x9fb>
c001e0d5:	80 fa 02             	cmp    dl,0x2
c001e0d8:	0f 85 54 f9 ff ff    	jne    c001da32 <Vm::x87Handler(regs*)+0x223>
c001e0de:	55                   	push   ebp
c001e0df:	55                   	push   ebp
c001e0e0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e0e3:	ff 36                	push   DWORD PTR [esi]
c001e0e5:	e8 7c f3 ff ff       	call   c001d466 <Vm::fpu64ToInternal(unsigned long long)>
c001e0ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0f1:	89 c6                	mov    esi,eax
c001e0f3:	89 d7                	mov    edi,edx
c001e0f5:	e8 d8 f5 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e0fa:	57                   	push   edi
c001e0fb:	56                   	push   esi
c001e0fc:	52                   	push   edx
c001e0fd:	50                   	push   eax
c001e0fe:	e8 f2 f4 ff ff       	call   c001d5f5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e103:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e107:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e10a:	83 c4 20             	add    esp,0x20
c001e10d:	e9 74 f7 ff ff       	jmp    c001d886 <Vm::x87Handler(regs*)+0x77>
c001e112:	80 fa 04             	cmp    dl,0x4
c001e115:	75 2a                	jne    c001e141 <Vm::x87Handler(regs*)+0x932>
c001e117:	51                   	push   ecx
c001e118:	51                   	push   ecx
c001e119:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e11c:	ff 36                	push   DWORD PTR [esi]
c001e11e:	e8 43 f3 ff ff       	call   c001d466 <Vm::fpu64ToInternal(unsigned long long)>
c001e123:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e12a:	89 c6                	mov    esi,eax
c001e12c:	89 d7                	mov    edi,edx
c001e12e:	e8 9f f5 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e133:	57                   	push   edi
c001e134:	56                   	push   esi
c001e135:	52                   	push   edx
c001e136:	50                   	push   eax
c001e137:	e8 36 f5 ff ff       	call   c001d672 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e13c:	e9 e2 00 00 00       	jmp    c001e223 <Vm::x87Handler(regs*)+0xa14>
c001e141:	80 fa 05             	cmp    dl,0x5
c001e144:	75 28                	jne    c001e16e <Vm::x87Handler(regs*)+0x95f>
c001e146:	83 ec 0c             	sub    esp,0xc
c001e149:	6a 00                	push   0x0
c001e14b:	e8 82 f5 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e150:	89 c7                	mov    edi,eax
c001e152:	89 d5                	mov    ebp,edx
c001e154:	58                   	pop    eax
c001e155:	5a                   	pop    edx
c001e156:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e159:	ff 36                	push   DWORD PTR [esi]
c001e15b:	e8 06 f3 ff ff       	call   c001d466 <Vm::fpu64ToInternal(unsigned long long)>
c001e160:	83 c4 10             	add    esp,0x10
c001e163:	55                   	push   ebp
c001e164:	57                   	push   edi
c001e165:	52                   	push   edx
c001e166:	50                   	push   eax
c001e167:	e8 06 f5 ff ff       	call   c001d672 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e16c:	eb 60                	jmp    c001e1ce <Vm::x87Handler(regs*)+0x9bf>
c001e16e:	80 fa 06             	cmp    dl,0x6
c001e171:	75 2a                	jne    c001e19d <Vm::x87Handler(regs*)+0x98e>
c001e173:	51                   	push   ecx
c001e174:	51                   	push   ecx
c001e175:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e178:	ff 36                	push   DWORD PTR [esi]
c001e17a:	e8 e7 f2 ff ff       	call   c001d466 <Vm::fpu64ToInternal(unsigned long long)>
c001e17f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e186:	89 c6                	mov    esi,eax
c001e188:	89 d7                	mov    edi,edx
c001e18a:	e8 43 f5 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e18f:	57                   	push   edi
c001e190:	56                   	push   esi
c001e191:	52                   	push   edx
c001e192:	50                   	push   eax
c001e193:	e8 08 f5 ff ff       	call   c001d6a0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e198:	e9 86 00 00 00       	jmp    c001e223 <Vm::x87Handler(regs*)+0xa14>
c001e19d:	31 c0                	xor    eax,eax
c001e19f:	80 fa 07             	cmp    dl,0x7
c001e1a2:	0f 85 c8 00 00 00    	jne    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001e1a8:	83 ec 0c             	sub    esp,0xc
c001e1ab:	6a 00                	push   0x0
c001e1ad:	e8 20 f5 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e1b2:	89 c7                	mov    edi,eax
c001e1b4:	89 d5                	mov    ebp,edx
c001e1b6:	58                   	pop    eax
c001e1b7:	5a                   	pop    edx
c001e1b8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e1bb:	ff 36                	push   DWORD PTR [esi]
c001e1bd:	e8 a4 f2 ff ff       	call   c001d466 <Vm::fpu64ToInternal(unsigned long long)>
c001e1c2:	83 c4 10             	add    esp,0x10
c001e1c5:	55                   	push   ebp
c001e1c6:	57                   	push   edi
c001e1c7:	52                   	push   edx
c001e1c8:	50                   	push   eax
c001e1c9:	e8 d2 f4 ff ff       	call   c001d6a0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e1ce:	83 c4 0c             	add    esp,0xc
c001e1d1:	eb 53                	jmp    c001e226 <Vm::x87Handler(regs*)+0xa17>
c001e1d3:	31 c0                	xor    eax,eax
c001e1d5:	80 fa 02             	cmp    dl,0x2
c001e1d8:	0f 85 92 00 00 00    	jne    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001e1de:	83 ec 0c             	sub    esp,0xc
c001e1e1:	6a 00                	push   0x0
c001e1e3:	e8 ea f4 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e1e8:	59                   	pop    ecx
c001e1e9:	5f                   	pop    edi
c001e1ea:	52                   	push   edx
c001e1eb:	50                   	push   eax
c001e1ec:	e8 27 f2 ff ff       	call   c001d418 <Vm::fpuInternalTo64(unsigned long long)>
c001e1f1:	eb 70                	jmp    c001e263 <Vm::x87Handler(regs*)+0xa54>
c001e1f3:	31 c0                	xor    eax,eax
c001e1f5:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001e1fa:	75 74                	jne    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001e1fc:	50                   	push   eax
c001e1fd:	50                   	push   eax
c001e1fe:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e201:	31 d2                	xor    edx,edx
c001e203:	52                   	push   edx
c001e204:	50                   	push   eax
c001e205:	e8 f6 f2 ff ff       	call   c001d500 <Vm::fpuLongToFloat(long long)>
c001e20a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e211:	89 c6                	mov    esi,eax
c001e213:	89 d7                	mov    edi,edx
c001e215:	e8 b8 f4 ff ff       	call   c001d6d2 <Vm::fpuGetReg(int)>
c001e21a:	57                   	push   edi
c001e21b:	56                   	push   esi
c001e21c:	52                   	push   edx
c001e21d:	50                   	push   eax
c001e21e:	e8 5e f4 ff ff       	call   c001d681 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e223:	83 c4 1c             	add    esp,0x1c
c001e226:	52                   	push   edx
c001e227:	50                   	push   eax
c001e228:	6a 00                	push   0x0
c001e22a:	e8 e6 f4 ff ff       	call   c001d715 <Vm::fpuSetReg(int, unsigned long long)>
c001e22f:	e9 f2 f7 ff ff       	jmp    c001da26 <Vm::x87Handler(regs*)+0x217>
c001e234:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e238:	80 fa 05             	cmp    dl,0x5
c001e23b:	75 11                	jne    c001e24e <Vm::x87Handler(regs*)+0xa3f>
c001e23d:	55                   	push   ebp
c001e23e:	55                   	push   ebp
c001e23f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e242:	ff 36                	push   DWORD PTR [esi]
c001e244:	e8 81 f2 ff ff       	call   c001d4ca <Vm::fpuULongToFloat(unsigned long long)>
c001e249:	e9 cf f7 ff ff       	jmp    c001da1d <Vm::x87Handler(regs*)+0x20e>
c001e24e:	31 c0                	xor    eax,eax
c001e250:	80 fa 07             	cmp    dl,0x7
c001e253:	75 1b                	jne    c001e270 <Vm::x87Handler(regs*)+0xa61>
c001e255:	e8 63 f5 ff ff       	call   c001d7bd <Vm::fpuPop()>
c001e25a:	51                   	push   ecx
c001e25b:	51                   	push   ecx
c001e25c:	52                   	push   edx
c001e25d:	50                   	push   eax
c001e25e:	e8 0c f2 ff ff       	call   c001d46f <Vm::fpuFloatToLong(unsigned long long)>
c001e263:	83 c4 10             	add    esp,0x10
c001e266:	89 06                	mov    DWORD PTR [esi],eax
c001e268:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001e26b:	e9 f8 f7 ff ff       	jmp    c001da68 <Vm::x87Handler(regs*)+0x259>
c001e270:	83 c4 1c             	add    esp,0x1c
c001e273:	5b                   	pop    ebx
c001e274:	5e                   	pop    esi
c001e275:	5f                   	pop    edi
c001e276:	5d                   	pop    ebp
c001e277:	c3                   	ret    

c001e278 <__static_initialization_and_destruction_0(int, int)>:
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e280:	75 1a                	jne    c001e29c <__static_initialization_and_destruction_0(int, int)+0x24>
c001e282:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e28a:	75 10                	jne    c001e29c <__static_initialization_and_destruction_0(int, int)+0x24>
c001e28c:	83 ec 0c             	sub    esp,0xc
c001e28f:	68 c0 bf 02 c0       	push   0xc002bfc0
c001e294:	e8 17 7b 00 00       	call   c0025db0 <Vm::_FPUState::_FPUState()>
c001e299:	83 c4 10             	add    esp,0x10
c001e29c:	90                   	nop
c001e29d:	83 c4 0c             	add    esp,0xc
c001e2a0:	c3                   	ret    

c001e2a1 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001e2a1:	83 ec 0c             	sub    esp,0xc
c001e2a4:	83 ec 08             	sub    esp,0x8
c001e2a7:	68 ff ff 00 00       	push   0xffff
c001e2ac:	6a 01                	push   0x1
c001e2ae:	e8 c5 ff ff ff       	call   c001e278 <__static_initialization_and_destruction_0(int, int)>
c001e2b3:	83 c4 10             	add    esp,0x10
c001e2b6:	83 c4 0c             	add    esp,0xc
c001e2b9:	c3                   	ret    

c001e2ba <FAT::getName()>:
c001e2ba:	b8 2c 91 02 c0       	mov    eax,0xc002912c
c001e2bf:	c3                   	ret    

c001e2c0 <FAT::tell(void*, unsigned long long*)>:
c001e2c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e2c5:	75 06                	jne    c001e2cd <FAT::tell(void*, unsigned long long*)+0xd>
c001e2c7:	b8 04 00 00 00       	mov    eax,0x4
c001e2cc:	c3                   	ret    
c001e2cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e2d2:	75 06                	jne    c001e2da <FAT::tell(void*, unsigned long long*)+0x1a>
c001e2d4:	b8 04 00 00 00       	mov    eax,0x4
c001e2d9:	c3                   	ret    
c001e2da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2de:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001e2e1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001e2e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e2e8:	89 01                	mov    DWORD PTR [ecx],eax
c001e2ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e2ed:	b8 00 00 00 00       	mov    eax,0x0
c001e2f2:	c3                   	ret    
c001e2f3:	90                   	nop

c001e2f4 <FAT::stat(void*, unsigned long long*)>:
c001e2f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e2f9:	75 06                	jne    c001e301 <FAT::stat(void*, unsigned long long*)+0xd>
c001e2fb:	b8 04 00 00 00       	mov    eax,0x4
c001e300:	c3                   	ret    
c001e301:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e306:	75 06                	jne    c001e30e <FAT::stat(void*, unsigned long long*)+0x1a>
c001e308:	b8 04 00 00 00       	mov    eax,0x4
c001e30d:	c3                   	ret    
c001e30e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e312:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001e315:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e318:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e31c:	89 01                	mov    DWORD PTR [ecx],eax
c001e31e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e321:	b8 00 00 00 00       	mov    eax,0x0
c001e326:	c3                   	ret    
c001e327:	90                   	nop

c001e328 <FAT::~FAT()>:
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	ba b0 91 02 c0       	mov    edx,0xc00291b0
c001e330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e334:	89 10                	mov    DWORD PTR [eax],edx
c001e336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33a:	83 ec 0c             	sub    esp,0xc
c001e33d:	50                   	push   eax
c001e33e:	e8 2b 46 ff ff       	call   c001296e <Filesystem::~Filesystem()>
c001e343:	83 c4 10             	add    esp,0x10
c001e346:	90                   	nop
c001e347:	83 c4 0c             	add    esp,0xc
c001e34a:	c3                   	ret    
c001e34b:	90                   	nop

c001e34c <FAT::~FAT()>:
c001e34c:	83 ec 0c             	sub    esp,0xc
c001e34f:	83 ec 0c             	sub    esp,0xc
c001e352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e356:	e8 cd ff ff ff       	call   c001e328 <FAT::~FAT()>
c001e35b:	83 c4 10             	add    esp,0x10
c001e35e:	83 ec 08             	sub    esp,0x8
c001e361:	6a 08                	push   0x8
c001e363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e367:	e8 f9 41 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c001e36c:	83 c4 10             	add    esp,0x10
c001e36f:	83 c4 0c             	add    esp,0xc
c001e372:	c3                   	ret    
c001e373:	90                   	nop

c001e374 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001e374:	83 ec 1c             	sub    esp,0x1c
c001e377:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001e37e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001e383:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e387:	8b 04 85 40 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3fc0]
c001e38e:	83 f8 ff             	cmp    eax,0xffffffff
c001e391:	75 34                	jne    c001e3c7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001e393:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e397:	88 c2                	mov    dl,al
c001e399:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e39e:	01 d0                	add    eax,edx
c001e3a0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e3a4:	8b 15 20 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c020
c001e3aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e3ae:	89 14 85 40 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fc0],edx
c001e3b5:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e3ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3be:	89 14 85 c0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f40],edx
c001e3c5:	eb 17                	jmp    c001e3de <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001e3c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e3cb:	88 c2                	mov    dl,al
c001e3cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e3d1:	8b 04 85 40 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3fc0]
c001e3d8:	01 d0                	add    eax,edx
c001e3da:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e3de:	83 ec 04             	sub    esp,0x4
c001e3e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e3e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e3e9:	8d 44 24 15          	lea    eax,[esp+0x15]
c001e3ed:	50                   	push   eax
c001e3ee:	e8 e7 86 fe ff       	call   c0006ada <f_getlabel>
c001e3f3:	83 c4 10             	add    esp,0x10
c001e3f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3fa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e3ff:	75 07                	jne    c001e408 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001e401:	b8 00 00 00 00       	mov    eax,0x0
c001e406:	eb 05                	jmp    c001e40d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001e408:	b8 01 00 00 00       	mov    eax,0x1
c001e40d:	83 c4 1c             	add    esp,0x1c
c001e410:	c3                   	ret    
c001e411:	90                   	nop

c001e412 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001e412:	57                   	push   edi
c001e413:	83 ec 58             	sub    esp,0x58
c001e416:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001e41e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e422:	b9 0f 00 00 00       	mov    ecx,0xf
c001e427:	b8 00 00 00 00       	mov    eax,0x0
c001e42c:	fc                   	cld    
c001e42d:	89 d7                	mov    edi,edx
c001e42f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e431:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e435:	8b 04 85 40 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3fc0]
c001e43c:	83 f8 ff             	cmp    eax,0xffffffff
c001e43f:	75 34                	jne    c001e475 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001e441:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e445:	88 c2                	mov    dl,al
c001e447:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e44c:	01 d0                	add    eax,edx
c001e44e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e452:	8b 15 20 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c020
c001e458:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e45c:	89 14 85 40 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fc0],edx
c001e463:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e468:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001e46c:	89 14 85 c0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f40],edx
c001e473:	eb 17                	jmp    c001e48c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001e475:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e479:	88 c2                	mov    dl,al
c001e47b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e47f:	8b 04 85 40 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3fc0]
c001e486:	01 d0                	add    eax,edx
c001e488:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e48c:	83 ec 08             	sub    esp,0x8
c001e48f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001e493:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e497:	50                   	push   eax
c001e498:	e8 36 23 fe ff       	call   c00007d3 <strcat>
c001e49d:	83 c4 10             	add    esp,0x10
c001e4a0:	83 ec 0c             	sub    esp,0xc
c001e4a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e4a7:	50                   	push   eax
c001e4a8:	e8 1b 88 fe ff       	call   c0006cc8 <f_setlabel>
c001e4ad:	83 c4 10             	add    esp,0x10
c001e4b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e4b4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001e4b9:	75 07                	jne    c001e4c2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001e4bb:	b8 00 00 00 00       	mov    eax,0x0
c001e4c0:	eb 05                	jmp    c001e4c7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001e4c2:	b8 01 00 00 00       	mov    eax,0x1
c001e4c7:	83 c4 58             	add    esp,0x58
c001e4ca:	5f                   	pop    edi
c001e4cb:	c3                   	ret    

c001e4cc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001e4cc:	83 ec 2c             	sub    esp,0x2c
c001e4cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001e4d7:	83 ec 08             	sub    esp,0x8
c001e4da:	68 50 91 02 c0       	push   0xc0029150
c001e4df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e4e3:	e8 85 22 fe ff       	call   c000076d <strcmp>
c001e4e8:	83 c4 10             	add    esp,0x10
c001e4eb:	85 c0                	test   eax,eax
c001e4ed:	0f 94 c0             	sete   al
c001e4f0:	84 c0                	test   al,al
c001e4f2:	74 0d                	je     c001e501 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001e4f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e4fc:	e9 a6 00 00 00       	jmp    c001e5a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e501:	83 ec 08             	sub    esp,0x8
c001e504:	68 42 91 02 c0       	push   0xc0029142
c001e509:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e50d:	e8 5b 22 fe ff       	call   c000076d <strcmp>
c001e512:	83 c4 10             	add    esp,0x10
c001e515:	85 c0                	test   eax,eax
c001e517:	0f 94 c0             	sete   al
c001e51a:	84 c0                	test   al,al
c001e51c:	74 0a                	je     c001e528 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001e51e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e526:	eb 7f                	jmp    c001e5a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e528:	83 ec 08             	sub    esp,0x8
c001e52b:	68 48 91 02 c0       	push   0xc0029148
c001e530:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e534:	e8 34 22 fe ff       	call   c000076d <strcmp>
c001e539:	83 c4 10             	add    esp,0x10
c001e53c:	85 c0                	test   eax,eax
c001e53e:	0f 94 c0             	sete   al
c001e541:	84 c0                	test   al,al
c001e543:	74 0a                	je     c001e54f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001e545:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e54d:	eb 58                	jmp    c001e5a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e54f:	83 ec 08             	sub    esp,0x8
c001e552:	68 2c 64 02 c0       	push   0xc002642c
c001e557:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e55b:	e8 0d 22 fe ff       	call   c000076d <strcmp>
c001e560:	83 c4 10             	add    esp,0x10
c001e563:	85 c0                	test   eax,eax
c001e565:	0f 94 c0             	sete   al
c001e568:	84 c0                	test   al,al
c001e56a:	74 0a                	je     c001e576 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001e56c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e574:	eb 31                	jmp    c001e5a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e576:	83 ec 08             	sub    esp,0x8
c001e579:	68 4e 91 02 c0       	push   0xc002914e
c001e57e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e582:	e8 e6 21 fe ff       	call   c000076d <strcmp>
c001e587:	83 c4 10             	add    esp,0x10
c001e58a:	85 c0                	test   eax,eax
c001e58c:	0f 94 c0             	sete   al
c001e58f:	84 c0                	test   al,al
c001e591:	74 0a                	je     c001e59d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001e593:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e59b:	eb 0a                	jmp    c001e5a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e59d:	b8 08 00 00 00       	mov    eax,0x8
c001e5a2:	e9 04 01 00 00       	jmp    c001e6ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e5a7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e5ae:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e5b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e5b7:	8b 04 85 40 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3fc0]
c001e5be:	83 f8 ff             	cmp    eax,0xffffffff
c001e5c1:	75 34                	jne    c001e5f7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001e5c3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e5c7:	88 c2                	mov    dl,al
c001e5c9:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e5ce:	01 d0                	add    eax,edx
c001e5d0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e5d4:	8b 15 20 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c020
c001e5da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e5de:	89 14 85 40 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fc0],edx
c001e5e5:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e5ea:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e5ee:	89 14 85 c0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f40],edx
c001e5f5:	eb 17                	jmp    c001e60e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e5f7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e5fb:	88 c2                	mov    dl,al
c001e5fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e601:	8b 04 85 40 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3fc0]
c001e608:	01 d0                	add    eax,edx
c001e60a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e60e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e612:	88 04 24             	mov    BYTE PTR [esp],al
c001e615:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e619:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e61d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e625:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e62a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e632:	83 ec 0c             	sub    esp,0xc
c001e635:	68 00 20 00 00       	push   0x2000
c001e63a:	e8 93 0e ff ff       	call   c000f4d2 <malloc>
c001e63f:	83 c4 10             	add    esp,0x10
c001e642:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e646:	68 00 20 00 00       	push   0x2000
c001e64b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e64f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e653:	50                   	push   eax
c001e654:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e658:	50                   	push   eax
c001e659:	e8 b5 8a fe ff       	call   c0007113 <f_mkfs>
c001e65e:	83 c4 10             	add    esp,0x10
c001e661:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e665:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e66a:	75 07                	jne    c001e673 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e66c:	b8 00 00 00 00       	mov    eax,0x0
c001e671:	eb 38                	jmp    c001e6ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e673:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e678:	75 17                	jne    c001e691 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e67a:	83 ec 0c             	sub    esp,0xc
c001e67d:	68 80 91 02 c0       	push   0xc0029180
c001e682:	e8 be 3f ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001e687:	83 c4 10             	add    esp,0x10
c001e68a:	b8 09 00 00 00       	mov    eax,0x9
c001e68f:	eb 1a                	jmp    c001e6ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e691:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e695:	83 ec 08             	sub    esp,0x8
c001e698:	50                   	push   eax
c001e699:	68 54 91 02 c0       	push   0xc0029154
c001e69e:	e8 a2 3f ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001e6a3:	83 c4 10             	add    esp,0x10
c001e6a6:	b8 01 00 00 00       	mov    eax,0x1
c001e6ab:	83 c4 2c             	add    esp,0x2c
c001e6ae:	c3                   	ret    
c001e6af:	90                   	nop

c001e6b0 <FAT::tryMount(LogicalDisk*, int)>:
c001e6b0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e6b6:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e6bb:	83 f8 14             	cmp    eax,0x14
c001e6be:	75 17                	jne    c001e6d7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e6c0:	83 ec 0c             	sub    esp,0xc
c001e6c3:	68 66 91 02 c0       	push   0xc0029166
c001e6c8:	e8 3c a7 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c001e6cd:	83 c4 10             	add    esp,0x10
c001e6d0:	b0 00                	mov    al,0x0
c001e6d2:	e9 d7 01 00 00       	jmp    c001e8ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e6d7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e6de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e6e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6ea:	3d 00 02 00 00       	cmp    eax,0x200
c001e6ef:	74 07                	je     c001e6f8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e6f1:	b0 00                	mov    al,0x0
c001e6f3:	e9 b6 01 00 00       	jmp    c001e8ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e6f8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e700:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e707:	8b 04 85 40 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3fc0]
c001e70e:	83 f8 ff             	cmp    eax,0xffffffff
c001e711:	74 07                	je     c001e71a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e713:	b0 01                	mov    al,0x1
c001e715:	e9 94 01 00 00       	jmp    c001e8ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e71a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e724:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e72c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e733:	88 c2                	mov    dl,al
c001e735:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e73a:	01 d0                	add    eax,edx
c001e73c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e743:	8b 15 20 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c020
c001e749:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e750:	89 14 85 40 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fc0],edx
c001e757:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e75c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e763:	89 14 85 c0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f40],edx
c001e76a:	83 ec 0c             	sub    esp,0xc
c001e76d:	68 54 02 00 00       	push   0x254
c001e772:	e8 5b 0d ff ff       	call   c000f4d2 <malloc>
c001e777:	83 c4 10             	add    esp,0x10
c001e77a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e781:	83 ec 04             	sub    esp,0x4
c001e784:	6a 00                	push   0x0
c001e786:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e78d:	50                   	push   eax
c001e78e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e795:	e8 37 65 fe ff       	call   c0004cd1 <f_mount>
c001e79a:	83 c4 10             	add    esp,0x10
c001e79d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e7a4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e7ac:	74 19                	je     c001e7c7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e7ae:	83 ec 0c             	sub    esp,0xc
c001e7b1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e7b8:	e8 35 0d ff ff       	call   c000f4f2 <rfree>
c001e7bd:	83 c4 10             	add    esp,0x10
c001e7c0:	b0 00                	mov    al,0x0
c001e7c2:	e9 e7 00 00 00       	jmp    c001e8ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e7c7:	83 ec 04             	sub    esp,0x4
c001e7ca:	68 00 01 00 00       	push   0x100
c001e7cf:	6a 00                	push   0x0
c001e7d1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e7d8:	50                   	push   eax
c001e7d9:	e8 9f 1e fe ff       	call   c000067d <memset>
c001e7de:	83 c4 10             	add    esp,0x10
c001e7e1:	83 ec 08             	sub    esp,0x8
c001e7e4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e7eb:	50                   	push   eax
c001e7ec:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e7f3:	50                   	push   eax
c001e7f4:	e8 da 1f fe ff       	call   c00007d3 <strcat>
c001e7f9:	83 c4 10             	add    esp,0x10
c001e7fc:	83 ec 08             	sub    esp,0x8
c001e7ff:	68 74 91 02 c0       	push   0xc0029174
c001e804:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e80b:	50                   	push   eax
c001e80c:	e8 c2 1f fe ff       	call   c00007d3 <strcat>
c001e811:	83 c4 10             	add    esp,0x10
c001e814:	83 ec 04             	sub    esp,0x4
c001e817:	6a 01                	push   0x1
c001e819:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e820:	50                   	push   eax
c001e821:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e825:	50                   	push   eax
c001e826:	e8 08 65 fe ff       	call   c0004d33 <f_open>
c001e82b:	83 c4 10             	add    esp,0x10
c001e82e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e835:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e83c:	85 c0                	test   eax,eax
c001e83e:	74 0a                	je     c001e84a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e840:	78 2d                	js     c001e86f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e842:	83 e8 04             	sub    eax,0x4
c001e845:	83 f8 01             	cmp    eax,0x1
c001e848:	77 25                	ja     c001e86f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e84a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e852:	83 ec 0c             	sub    esp,0xc
c001e855:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e859:	50                   	push   eax
c001e85a:	e8 26 70 fe ff       	call   c0005885 <f_close>
c001e85f:	83 c4 10             	add    esp,0x10
c001e862:	90                   	nop
c001e863:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e86b:	74 3a                	je     c001e8a7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e86d:	eb 2d                	jmp    c001e89c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e86f:	83 ec 0c             	sub    esp,0xc
c001e872:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e879:	e8 74 0c ff ff       	call   c000f4f2 <rfree>
c001e87e:	83 c4 10             	add    esp,0x10
c001e881:	83 ec 04             	sub    esp,0x4
c001e884:	6a 00                	push   0x0
c001e886:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e88d:	50                   	push   eax
c001e88e:	6a 00                	push   0x0
c001e890:	e8 3c 64 fe ff       	call   c0004cd1 <f_mount>
c001e895:	83 c4 10             	add    esp,0x10
c001e898:	b0 00                	mov    al,0x0
c001e89a:	eb 12                	jmp    c001e8ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e89c:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c001e8a1:	40                   	inc    eax
c001e8a2:	a3 20 c0 02 c0       	mov    ds:0xc002c020,eax
c001e8a7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e8ae:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e8b4:	c3                   	ret    
c001e8b5:	90                   	nop

c001e8b6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e8b6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e8bc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e8c4:	74 0a                	je     c001e8d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e8c6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e8ce:	75 0a                	jne    c001e8da <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e8d0:	b8 04 00 00 00       	mov    eax,0x4
c001e8d5:	e9 db 00 00 00       	jmp    c001e9b5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e8da:	83 ec 08             	sub    esp,0x8
c001e8dd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e8e4:	50                   	push   eax
c001e8e5:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e8ec:	e8 9e 75 fe ff       	call   c0005e8f <f_readdir>
c001e8f1:	83 c4 10             	add    esp,0x10
c001e8f4:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e8fb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e901:	83 ec 0c             	sub    esp,0xc
c001e904:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e90b:	83 c0 1a             	add    eax,0x1a
c001e90e:	50                   	push   eax
c001e90f:	e8 86 1d fe ff       	call   c000069a <strlen>
c001e914:	83 c4 10             	add    esp,0x10
c001e917:	ba 00 00 00 00       	mov    edx,0x0
c001e91c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e920:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e924:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e92b:	0f b6 c0             	movzx  eax,al
c001e92e:	83 e0 10             	and    eax,0x10
c001e931:	74 07                	je     c001e93a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e933:	b8 02 00 00 00       	mov    eax,0x2
c001e938:	eb 05                	jmp    c001e93f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e93a:	b8 01 00 00 00       	mov    eax,0x1
c001e93f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e943:	83 ec 08             	sub    esp,0x8
c001e946:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e94d:	83 c0 1a             	add    eax,0x1a
c001e950:	50                   	push   eax
c001e951:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e955:	83 c0 10             	add    eax,0x10
c001e958:	50                   	push   eax
c001e959:	e8 be 1d fe ff       	call   c000071c <strcpy>
c001e95e:	83 c4 10             	add    esp,0x10
c001e961:	83 ec 04             	sub    esp,0x4
c001e964:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e96b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e96f:	50                   	push   eax
c001e970:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e977:	e8 cb 1c fe ff       	call   c0000647 <memcpy>
c001e97c:	83 c4 10             	add    esp,0x10
c001e97f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e986:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e98c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e993:	84 c0                	test   al,al
c001e995:	75 07                	jne    c001e99e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e997:	b8 07 00 00 00       	mov    eax,0x7
c001e99c:	eb 17                	jmp    c001e9b5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e99e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e9a5:	85 c0                	test   eax,eax
c001e9a7:	75 07                	jne    c001e9b0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e9a9:	b8 00 00 00 00       	mov    eax,0x0
c001e9ae:	eb 05                	jmp    c001e9b5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e9b0:	b8 01 00 00 00       	mov    eax,0x1
c001e9b5:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e9bb:	c3                   	ret    

c001e9bc <FAT::read(void*, unsigned long, void*, int*)>:
c001e9bc:	83 ec 1c             	sub    esp,0x1c
c001e9bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e9c4:	74 07                	je     c001e9cd <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e9c6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e9cb:	75 07                	jne    c001e9d4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e9cd:	b8 04 00 00 00       	mov    eax,0x4
c001e9d2:	eb 3d                	jmp    c001ea11 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e9d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e9d8:	50                   	push   eax
c001e9d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e9dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e9e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e9e5:	e8 85 67 fe ff       	call   c000516f <f_read>
c001e9ea:	83 c4 10             	add    esp,0x10
c001e9ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9f5:	89 c2                	mov    edx,eax
c001e9f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e9fb:	89 10                	mov    DWORD PTR [eax],edx
c001e9fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea01:	85 c0                	test   eax,eax
c001ea03:	75 07                	jne    c001ea0c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001ea05:	b8 00 00 00 00       	mov    eax,0x0
c001ea0a:	eb 05                	jmp    c001ea11 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ea0c:	b8 01 00 00 00       	mov    eax,0x1
c001ea11:	83 c4 1c             	add    esp,0x1c
c001ea14:	c3                   	ret    
c001ea15:	90                   	nop

c001ea16 <FAT::write(void*, unsigned long, void*, int*)>:
c001ea16:	83 ec 1c             	sub    esp,0x1c
c001ea19:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ea1e:	74 07                	je     c001ea27 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001ea20:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ea25:	75 07                	jne    c001ea2e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001ea27:	b8 04 00 00 00       	mov    eax,0x4
c001ea2c:	eb 3d                	jmp    c001ea6b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ea2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ea32:	50                   	push   eax
c001ea33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ea3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ea3f:	e8 ab 69 fe ff       	call   c00053ef <f_write>
c001ea44:	83 c4 10             	add    esp,0x10
c001ea47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea4f:	89 c2                	mov    edx,eax
c001ea51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea55:	89 10                	mov    DWORD PTR [eax],edx
c001ea57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea5b:	85 c0                	test   eax,eax
c001ea5d:	75 07                	jne    c001ea66 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001ea5f:	b8 00 00 00 00       	mov    eax,0x0
c001ea64:	eb 05                	jmp    c001ea6b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ea66:	b8 01 00 00 00       	mov    eax,0x1
c001ea6b:	83 c4 1c             	add    esp,0x1c
c001ea6e:	c3                   	ret    
c001ea6f:	90                   	nop

c001ea70 <FAT::close(void*)>:
c001ea70:	83 ec 1c             	sub    esp,0x1c
c001ea73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ea78:	75 07                	jne    c001ea81 <FAT::close(void*)+0x11>
c001ea7a:	b8 04 00 00 00       	mov    eax,0x4
c001ea7f:	eb 36                	jmp    c001eab7 <FAT::close(void*)+0x47>
c001ea81:	83 ec 0c             	sub    esp,0xc
c001ea84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ea88:	e8 f8 6d fe ff       	call   c0005885 <f_close>
c001ea8d:	83 c4 10             	add    esp,0x10
c001ea90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea94:	83 ec 0c             	sub    esp,0xc
c001ea97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ea9b:	e8 42 0a ff ff       	call   c000f4e2 <free>
c001eaa0:	83 c4 10             	add    esp,0x10
c001eaa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eaa7:	85 c0                	test   eax,eax
c001eaa9:	75 07                	jne    c001eab2 <FAT::close(void*)+0x42>
c001eaab:	b8 00 00 00 00       	mov    eax,0x0
c001eab0:	eb 05                	jmp    c001eab7 <FAT::close(void*)+0x47>
c001eab2:	b8 01 00 00 00       	mov    eax,0x1
c001eab7:	83 c4 1c             	add    esp,0x1c
c001eaba:	c3                   	ret    
c001eabb:	90                   	nop

c001eabc <FAT::closeDir(void*)>:
c001eabc:	83 ec 1c             	sub    esp,0x1c
c001eabf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eac4:	75 07                	jne    c001eacd <FAT::closeDir(void*)+0x11>
c001eac6:	b8 04 00 00 00       	mov    eax,0x4
c001eacb:	eb 36                	jmp    c001eb03 <FAT::closeDir(void*)+0x47>
c001eacd:	83 ec 0c             	sub    esp,0xc
c001ead0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ead4:	e8 94 73 fe ff       	call   c0005e6d <f_closedir>
c001ead9:	83 c4 10             	add    esp,0x10
c001eadc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eae0:	83 ec 0c             	sub    esp,0xc
c001eae3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eae7:	e8 f6 09 ff ff       	call   c000f4e2 <free>
c001eaec:	83 c4 10             	add    esp,0x10
c001eaef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eaf3:	85 c0                	test   eax,eax
c001eaf5:	75 07                	jne    c001eafe <FAT::closeDir(void*)+0x42>
c001eaf7:	b8 00 00 00 00       	mov    eax,0x0
c001eafc:	eb 05                	jmp    c001eb03 <FAT::closeDir(void*)+0x47>
c001eafe:	b8 01 00 00 00       	mov    eax,0x1
c001eb03:	83 c4 1c             	add    esp,0x1c
c001eb06:	c3                   	ret    
c001eb07:	90                   	nop

c001eb08 <FAT::seek(void*, unsigned long long)>:
c001eb08:	83 ec 2c             	sub    esp,0x2c
c001eb0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eb17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb1b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001eb20:	75 07                	jne    c001eb29 <FAT::seek(void*, unsigned long long)+0x21>
c001eb22:	b8 04 00 00 00       	mov    eax,0x4
c001eb27:	eb 2f                	jmp    c001eb58 <FAT::seek(void*, unsigned long long)+0x50>
c001eb29:	83 ec 04             	sub    esp,0x4
c001eb2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eb30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eb34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001eb38:	e8 77 6d fe ff       	call   c00058b4 <f_lseek>
c001eb3d:	83 c4 10             	add    esp,0x10
c001eb40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001eb44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb48:	85 c0                	test   eax,eax
c001eb4a:	75 07                	jne    c001eb53 <FAT::seek(void*, unsigned long long)+0x4b>
c001eb4c:	b8 00 00 00 00       	mov    eax,0x0
c001eb51:	eb 05                	jmp    c001eb58 <FAT::seek(void*, unsigned long long)+0x50>
c001eb53:	b8 01 00 00 00       	mov    eax,0x1
c001eb58:	83 c4 2c             	add    esp,0x2c
c001eb5b:	c3                   	ret    

c001eb5c <fatWrapperReadDisk>:
c001eb5c:	83 ec 1c             	sub    esp,0x1c
c001eb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb63:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001eb67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eb6b:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001eb72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001eb76:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb7b:	8b 04 85 80 b0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4f80]
c001eb82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001eb86:	83 ec 0c             	sub    esp,0xc
c001eb89:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb8d:	52                   	push   edx
c001eb8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eb92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eb96:	50                   	push   eax
c001eb97:	e8 bc 70 ff ff       	call   c0015c58 <LogicalDisk::read(unsigned long long, int, void*)>
c001eb9c:	83 c4 20             	add    esp,0x20
c001eb9f:	83 c4 1c             	add    esp,0x1c
c001eba2:	c3                   	ret    

c001eba3 <fatWrapperWriteDisk>:
c001eba3:	83 ec 1c             	sub    esp,0x1c
c001eba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebaa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ebae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ebb2:	89 04 24             	mov    DWORD PTR [esp],eax
c001ebb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ebb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ebbd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebc2:	8b 04 85 80 b0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4f80]
c001ebc9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ebcd:	83 ec 0c             	sub    esp,0xc
c001ebd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ebd4:	52                   	push   edx
c001ebd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ebd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ebdd:	50                   	push   eax
c001ebde:	e8 e1 70 ff ff       	call   c0015cc4 <LogicalDisk::write(unsigned long long, int, void*)>
c001ebe3:	83 c4 20             	add    esp,0x20
c001ebe6:	83 c4 1c             	add    esp,0x1c
c001ebe9:	c3                   	ret    

c001ebea <fatWrapperIoctl>:
c001ebea:	53                   	push   ebx
c001ebeb:	83 ec 28             	sub    esp,0x28
c001ebee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ebf2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ebf6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ebfa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ebfe:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001ec03:	75 31                	jne    c001ec36 <fatWrapperIoctl+0x4c>
c001ec05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ec0d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec12:	8b 04 85 80 b0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4f80]
c001ec19:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ec1f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ec29:	66 89 02             	mov    WORD PTR [edx],ax
c001ec2c:	b8 00 00 00 00       	mov    eax,0x0
c001ec31:	e9 b2 00 00 00       	jmp    c001ece8 <fatWrapperIoctl+0xfe>
c001ec36:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001ec3b:	75 6a                	jne    c001eca7 <fatWrapperIoctl+0xbd>
c001ec3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ec45:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec4a:	8b 04 85 80 b0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4f80]
c001ec51:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ec57:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ec5d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001ec63:	89 c8                	mov    eax,ecx
c001ec65:	89 da                	mov    edx,ebx
c001ec67:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ec6b:	c1 e0 0a             	shl    eax,0xa
c001ec6e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ec73:	8b 0c 8d 80 b0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4f80]
c001ec7a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ec80:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ec86:	89 cb                	mov    ebx,ecx
c001ec88:	c1 fb 1f             	sar    ebx,0x1f
c001ec8b:	53                   	push   ebx
c001ec8c:	51                   	push   ecx
c001ec8d:	52                   	push   edx
c001ec8e:	50                   	push   eax
c001ec8f:	e8 c8 4d 00 00       	call   c0023a5c <__udivdi3>
c001ec94:	83 c4 10             	add    esp,0x10
c001ec97:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ec9b:	89 01                	mov    DWORD PTR [ecx],eax
c001ec9d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001eca0:	b8 00 00 00 00       	mov    eax,0x0
c001eca5:	eb 41                	jmp    c001ece8 <fatWrapperIoctl+0xfe>
c001eca7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ecac:	75 07                	jne    c001ecb5 <fatWrapperIoctl+0xcb>
c001ecae:	b8 00 00 00 00       	mov    eax,0x0
c001ecb3:	eb 33                	jmp    c001ece8 <fatWrapperIoctl+0xfe>
c001ecb5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001ecba:	75 19                	jne    c001ecd5 <fatWrapperIoctl+0xeb>
c001ecbc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ecc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ecc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ecc8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ecce:	b8 00 00 00 00       	mov    eax,0x0
c001ecd3:	eb 13                	jmp    c001ece8 <fatWrapperIoctl+0xfe>
c001ecd5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001ecda:	75 07                	jne    c001ece3 <fatWrapperIoctl+0xf9>
c001ecdc:	b8 00 00 00 00       	mov    eax,0x0
c001ece1:	eb 05                	jmp    c001ece8 <fatWrapperIoctl+0xfe>
c001ece3:	b8 04 00 00 00       	mov    eax,0x4
c001ece8:	83 c4 28             	add    esp,0x28
c001eceb:	5b                   	pop    ebx
c001ecec:	c3                   	ret    
c001eced:	90                   	nop

c001ecee <FAT::FAT()>:
c001ecee:	83 ec 1c             	sub    esp,0x1c
c001ecf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecf5:	83 ec 0c             	sub    esp,0xc
c001ecf8:	50                   	push   eax
c001ecf9:	e8 4c 3c ff ff       	call   c001294a <Filesystem::Filesystem()>
c001ecfe:	83 c4 10             	add    esp,0x10
c001ed01:	ba b0 91 02 c0       	mov    edx,0xc00291b0
c001ed06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed0a:	89 10                	mov    DWORD PTR [eax],edx
c001ed0c:	c7 05 20 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c020,0x0
c001ed16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ed1e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ed23:	7f 15                	jg     c001ed3a <FAT::FAT()+0x4c>
c001ed25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed29:	c7 04 85 40 c0 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3fc0],0xffffffff
c001ed34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ed38:	eb e4                	jmp    c001ed1e <FAT::FAT()+0x30>
c001ed3a:	90                   	nop
c001ed3b:	83 c4 1c             	add    esp,0x1c
c001ed3e:	c3                   	ret    
c001ed3f:	90                   	nop

c001ed40 <FAT::fixFilepath(char*)>:
c001ed40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed44:	8a 00                	mov    al,BYTE PTR [eax]
c001ed46:	3c 40                	cmp    al,0x40
c001ed48:	7e 2c                	jle    c001ed76 <FAT::fixFilepath(char*)+0x36>
c001ed4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed4e:	8a 00                	mov    al,BYTE PTR [eax]
c001ed50:	83 e8 41             	sub    eax,0x41
c001ed53:	88 c2                	mov    dl,al
c001ed55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed59:	88 10                	mov    BYTE PTR [eax],dl
c001ed5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed5f:	8a 00                	mov    al,BYTE PTR [eax]
c001ed61:	0f be c0             	movsx  eax,al
c001ed64:	8b 04 85 40 c0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3fc0]
c001ed6b:	83 c0 30             	add    eax,0x30
c001ed6e:	88 c2                	mov    dl,al
c001ed70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed74:	88 10                	mov    BYTE PTR [eax],dl
c001ed76:	90                   	nop
c001ed77:	c3                   	ret    

c001ed78 <FAT::open(char const*, void**, FileOpenMode)>:
c001ed78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ed7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ed86:	74 0a                	je     c001ed92 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ed88:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ed90:	75 0a                	jne    c001ed9c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001ed92:	b8 04 00 00 00       	mov    eax,0x4
c001ed97:	e9 fd 00 00 00       	jmp    c001ee99 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ed9c:	83 ec 08             	sub    esp,0x8
c001ed9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eda6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001edaa:	50                   	push   eax
c001edab:	e8 6c 19 fe ff       	call   c000071c <strcpy>
c001edb0:	83 c4 10             	add    esp,0x10
c001edb3:	83 ec 08             	sub    esp,0x8
c001edb6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001edba:	50                   	push   eax
c001edbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001edc2:	e8 79 ff ff ff       	call   c001ed40 <FAT::fixFilepath(char*)>
c001edc7:	83 c4 10             	add    esp,0x10
c001edca:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001edd2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001edd9:	83 e0 01             	and    eax,0x1
c001eddc:	74 08                	je     c001ede6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001edde:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001ede6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001eded:	83 e0 04             	and    eax,0x4
c001edf0:	74 10                	je     c001ee02 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001edf2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001edfa:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ee02:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ee09:	83 e0 02             	and    eax,0x2
c001ee0c:	74 08                	je     c001ee16 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001ee0e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ee16:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ee1d:	83 e0 08             	and    eax,0x8
c001ee20:	74 08                	je     c001ee2a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001ee22:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ee2a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ee31:	83 e0 10             	and    eax,0x10
c001ee34:	74 08                	je     c001ee3e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001ee36:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001ee3e:	83 ec 0c             	sub    esp,0xc
c001ee41:	68 50 02 00 00       	push   0x250
c001ee46:	e8 87 06 ff ff       	call   c000f4d2 <malloc>
c001ee4b:	83 c4 10             	add    esp,0x10
c001ee4e:	89 c2                	mov    edx,eax
c001ee50:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ee57:	89 10                	mov    DWORD PTR [eax],edx
c001ee59:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ee61:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ee68:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee6a:	83 ec 04             	sub    esp,0x4
c001ee6d:	52                   	push   edx
c001ee6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ee72:	52                   	push   edx
c001ee73:	50                   	push   eax
c001ee74:	e8 ba 5e fe ff       	call   c0004d33 <f_open>
c001ee79:	83 c4 10             	add    esp,0x10
c001ee7c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ee83:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ee8b:	74 07                	je     c001ee94 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001ee8d:	b8 01 00 00 00       	mov    eax,0x1
c001ee92:	eb 05                	jmp    c001ee99 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ee94:	b8 00 00 00 00       	mov    eax,0x0
c001ee99:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ee9f:	c3                   	ret    

c001eea0 <FAT::openDir(char const*, void**)>:
c001eea0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001eea6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001eeae:	74 0a                	je     c001eeba <FAT::openDir(char const*, void**)+0x1a>
c001eeb0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001eeb8:	75 07                	jne    c001eec1 <FAT::openDir(char const*, void**)+0x21>
c001eeba:	b8 04 00 00 00       	mov    eax,0x4
c001eebf:	eb 7d                	jmp    c001ef3e <FAT::openDir(char const*, void**)+0x9e>
c001eec1:	83 ec 08             	sub    esp,0x8
c001eec4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eecb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eecf:	50                   	push   eax
c001eed0:	e8 47 18 fe ff       	call   c000071c <strcpy>
c001eed5:	83 c4 10             	add    esp,0x10
c001eed8:	83 ec 08             	sub    esp,0x8
c001eedb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eedf:	50                   	push   eax
c001eee0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eee7:	e8 54 fe ff ff       	call   c001ed40 <FAT::fixFilepath(char*)>
c001eeec:	83 c4 10             	add    esp,0x10
c001eeef:	83 ec 0c             	sub    esp,0xc
c001eef2:	6a 4c                	push   0x4c
c001eef4:	e8 d9 05 ff ff       	call   c000f4d2 <malloc>
c001eef9:	83 c4 10             	add    esp,0x10
c001eefc:	89 c2                	mov    edx,eax
c001eefe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ef05:	89 10                	mov    DWORD PTR [eax],edx
c001ef07:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ef0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef10:	83 ec 08             	sub    esp,0x8
c001ef13:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ef17:	52                   	push   edx
c001ef18:	50                   	push   eax
c001ef19:	e8 4d 6e fe ff       	call   c0005d6b <f_opendir>
c001ef1e:	83 c4 10             	add    esp,0x10
c001ef21:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ef28:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ef30:	74 07                	je     c001ef39 <FAT::openDir(char const*, void**)+0x99>
c001ef32:	b8 01 00 00 00       	mov    eax,0x1
c001ef37:	eb 05                	jmp    c001ef3e <FAT::openDir(char const*, void**)+0x9e>
c001ef39:	b8 00 00 00 00       	mov    eax,0x0
c001ef3e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ef44:	c3                   	ret    
c001ef45:	90                   	nop

c001ef46 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001ef46:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ef4c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001ef54:	75 0a                	jne    c001ef60 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001ef56:	b8 04 00 00 00       	mov    eax,0x4
c001ef5b:	e9 c9 00 00 00       	jmp    c001f029 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ef60:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001ef68:	75 0a                	jne    c001ef74 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001ef6a:	b8 04 00 00 00       	mov    eax,0x4
c001ef6f:	e9 b5 00 00 00       	jmp    c001f029 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ef74:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ef7c:	75 0a                	jne    c001ef88 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001ef7e:	b8 04 00 00 00       	mov    eax,0x4
c001ef83:	e9 a1 00 00 00       	jmp    c001f029 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ef88:	83 ec 08             	sub    esp,0x8
c001ef8b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ef92:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ef99:	50                   	push   eax
c001ef9a:	e8 7d 17 fe ff       	call   c000071c <strcpy>
c001ef9f:	83 c4 10             	add    esp,0x10
c001efa2:	83 ec 08             	sub    esp,0x8
c001efa5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001efac:	50                   	push   eax
c001efad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001efb4:	e8 87 fd ff ff       	call   c001ed40 <FAT::fixFilepath(char*)>
c001efb9:	83 c4 10             	add    esp,0x10
c001efbc:	83 ec 08             	sub    esp,0x8
c001efbf:	8d 44 24 08          	lea    eax,[esp+0x8]
c001efc3:	50                   	push   eax
c001efc4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001efcb:	50                   	push   eax
c001efcc:	e8 59 6f fe ff       	call   c0005f2a <f_stat>
c001efd1:	83 c4 10             	add    esp,0x10
c001efd4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001efdb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001efe2:	85 c0                	test   eax,eax
c001efe4:	74 07                	je     c001efed <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001efe6:	83 f8 04             	cmp    eax,0x4
c001efe9:	74 32                	je     c001f01d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001efeb:	eb 37                	jmp    c001f024 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001efed:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eff1:	0f b6 c0             	movzx  eax,al
c001eff4:	83 e0 10             	and    eax,0x10
c001eff7:	0f 95 c2             	setne  dl
c001effa:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001f001:	88 10                	mov    BYTE PTR [eax],dl
c001f003:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f006:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f00a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001f011:	89 01                	mov    DWORD PTR [ecx],eax
c001f013:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f016:	b8 00 00 00 00       	mov    eax,0x0
c001f01b:	eb 0c                	jmp    c001f029 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f01d:	b8 02 00 00 00       	mov    eax,0x2
c001f022:	eb 05                	jmp    c001f029 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f024:	b8 01 00 00 00       	mov    eax,0x1
c001f029:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f02f:	c3                   	ret    

c001f030 <FAT::unlink(char const*)>:
c001f030:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f036:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f03e:	75 07                	jne    c001f047 <FAT::unlink(char const*)+0x17>
c001f040:	b8 04 00 00 00       	mov    eax,0x4
c001f045:	eb 5c                	jmp    c001f0a3 <FAT::unlink(char const*)+0x73>
c001f047:	83 ec 08             	sub    esp,0x8
c001f04a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f051:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f055:	50                   	push   eax
c001f056:	e8 c1 16 fe ff       	call   c000071c <strcpy>
c001f05b:	83 c4 10             	add    esp,0x10
c001f05e:	83 ec 08             	sub    esp,0x8
c001f061:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f065:	50                   	push   eax
c001f066:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f06d:	e8 ce fc ff ff       	call   c001ed40 <FAT::fixFilepath(char*)>
c001f072:	83 c4 10             	add    esp,0x10
c001f075:	83 ec 0c             	sub    esp,0xc
c001f078:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f07c:	50                   	push   eax
c001f07d:	e8 fa 71 fe ff       	call   c000627c <f_unlink>
c001f082:	83 c4 10             	add    esp,0x10
c001f085:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f08c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f093:	85 c0                	test   eax,eax
c001f095:	75 07                	jne    c001f09e <FAT::unlink(char const*)+0x6e>
c001f097:	b8 00 00 00 00       	mov    eax,0x0
c001f09c:	eb 05                	jmp    c001f0a3 <FAT::unlink(char const*)+0x73>
c001f09e:	b8 01 00 00 00       	mov    eax,0x1
c001f0a3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f0a9:	c3                   	ret    

c001f0aa <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001f0aa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001f0b0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001f0b7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001f0be:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f0c2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f0c6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001f0ce:	75 0a                	jne    c001f0da <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001f0d0:	b8 04 00 00 00       	mov    eax,0x4
c001f0d5:	e9 1c 01 00 00       	jmp    c001f1f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f0da:	83 ec 08             	sub    esp,0x8
c001f0dd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f0e4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f0e8:	50                   	push   eax
c001f0e9:	e8 2e 16 fe ff       	call   c000071c <strcpy>
c001f0ee:	83 c4 10             	add    esp,0x10
c001f0f1:	83 ec 08             	sub    esp,0x8
c001f0f4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f0f8:	50                   	push   eax
c001f0f9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f100:	e8 3b fc ff ff       	call   c001ed40 <FAT::fixFilepath(char*)>
c001f105:	83 c4 10             	add    esp,0x10
c001f108:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001f110:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001f118:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f11d:	83 e0 01             	and    eax,0x1
c001f120:	74 08                	je     c001f12a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001f122:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001f12a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f12f:	83 e0 02             	and    eax,0x2
c001f132:	74 08                	je     c001f13c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001f134:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001f13c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f141:	83 e0 04             	and    eax,0x4
c001f144:	74 08                	je     c001f14e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001f146:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001f14e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f153:	83 e0 08             	and    eax,0x8
c001f156:	74 08                	je     c001f160 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001f158:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001f160:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f165:	83 e0 01             	and    eax,0x1
c001f168:	74 08                	je     c001f172 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001f16a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001f172:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f177:	83 e0 02             	and    eax,0x2
c001f17a:	74 08                	je     c001f184 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001f17c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001f184:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f189:	83 e0 04             	and    eax,0x4
c001f18c:	74 08                	je     c001f196 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001f18e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001f196:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f19b:	83 e0 08             	and    eax,0x8
c001f19e:	74 08                	je     c001f1a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001f1a0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001f1a8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f1af:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001f1b6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001f1be:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001f1c6:	83 ec 04             	sub    esp,0x4
c001f1c9:	52                   	push   edx
c001f1ca:	50                   	push   eax
c001f1cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f1cf:	50                   	push   eax
c001f1d0:	e8 49 77 fe ff       	call   c000691e <f_chmod>
c001f1d5:	83 c4 10             	add    esp,0x10
c001f1d8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001f1df:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001f1e6:	85 c0                	test   eax,eax
c001f1e8:	75 07                	jne    c001f1f1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001f1ea:	b8 00 00 00 00       	mov    eax,0x0
c001f1ef:	eb 05                	jmp    c001f1f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f1f1:	b8 01 00 00 00       	mov    eax,0x1
c001f1f6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001f1fc:	c3                   	ret    
c001f1fd:	90                   	nop

c001f1fe <FAT::rename(char const*, char const*)>:
c001f1fe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f204:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001f20c:	74 0a                	je     c001f218 <FAT::rename(char const*, char const*)+0x1a>
c001f20e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001f216:	75 0a                	jne    c001f222 <FAT::rename(char const*, char const*)+0x24>
c001f218:	b8 04 00 00 00       	mov    eax,0x4
c001f21d:	e9 98 00 00 00       	jmp    c001f2ba <FAT::rename(char const*, char const*)+0xbc>
c001f222:	83 ec 08             	sub    esp,0x8
c001f225:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f22c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f233:	50                   	push   eax
c001f234:	e8 e3 14 fe ff       	call   c000071c <strcpy>
c001f239:	83 c4 10             	add    esp,0x10
c001f23c:	83 ec 08             	sub    esp,0x8
c001f23f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001f246:	50                   	push   eax
c001f247:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f24e:	e8 ed fa ff ff       	call   c001ed40 <FAT::fixFilepath(char*)>
c001f253:	83 c4 10             	add    esp,0x10
c001f256:	83 ec 08             	sub    esp,0x8
c001f259:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001f260:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f264:	50                   	push   eax
c001f265:	e8 b2 14 fe ff       	call   c000071c <strcpy>
c001f26a:	83 c4 10             	add    esp,0x10
c001f26d:	83 ec 08             	sub    esp,0x8
c001f270:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f274:	50                   	push   eax
c001f275:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f27c:	e8 bf fa ff ff       	call   c001ed40 <FAT::fixFilepath(char*)>
c001f281:	83 c4 10             	add    esp,0x10
c001f284:	83 ec 08             	sub    esp,0x8
c001f287:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f28b:	50                   	push   eax
c001f28c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f293:	50                   	push   eax
c001f294:	e8 92 73 fe ff       	call   c000662b <f_rename>
c001f299:	83 c4 10             	add    esp,0x10
c001f29c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001f2a3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001f2aa:	85 c0                	test   eax,eax
c001f2ac:	75 07                	jne    c001f2b5 <FAT::rename(char const*, char const*)+0xb7>
c001f2ae:	b8 00 00 00 00       	mov    eax,0x0
c001f2b3:	eb 05                	jmp    c001f2ba <FAT::rename(char const*, char const*)+0xbc>
c001f2b5:	b8 01 00 00 00       	mov    eax,0x1
c001f2ba:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f2c0:	c3                   	ret    
c001f2c1:	90                   	nop

c001f2c2 <FAT::mkdir(char const*)>:
c001f2c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f2c8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f2d0:	75 07                	jne    c001f2d9 <FAT::mkdir(char const*)+0x17>
c001f2d2:	b8 04 00 00 00       	mov    eax,0x4
c001f2d7:	eb 5c                	jmp    c001f335 <FAT::mkdir(char const*)+0x73>
c001f2d9:	83 ec 08             	sub    esp,0x8
c001f2dc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f2e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f2e7:	50                   	push   eax
c001f2e8:	e8 2f 14 fe ff       	call   c000071c <strcpy>
c001f2ed:	83 c4 10             	add    esp,0x10
c001f2f0:	83 ec 08             	sub    esp,0x8
c001f2f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f2f7:	50                   	push   eax
c001f2f8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f2ff:	e8 3c fa ff ff       	call   c001ed40 <FAT::fixFilepath(char*)>
c001f304:	83 c4 10             	add    esp,0x10
c001f307:	83 ec 0c             	sub    esp,0xc
c001f30a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f30e:	50                   	push   eax
c001f30f:	e8 eb 70 fe ff       	call   c00063ff <f_mkdir>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f31e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f325:	85 c0                	test   eax,eax
c001f327:	75 07                	jne    c001f330 <FAT::mkdir(char const*)+0x6e>
c001f329:	b8 00 00 00 00       	mov    eax,0x0
c001f32e:	eb 05                	jmp    c001f335 <FAT::mkdir(char const*)+0x73>
c001f330:	b8 01 00 00 00       	mov    eax,0x1
c001f335:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f33b:	c3                   	ret    

c001f33c <FAT::exists(char const*)>:
c001f33c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f342:	83 ec 08             	sub    esp,0x8
c001f345:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f34c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f350:	50                   	push   eax
c001f351:	e8 c6 13 fe ff       	call   c000071c <strcpy>
c001f356:	83 c4 10             	add    esp,0x10
c001f359:	83 ec 08             	sub    esp,0x8
c001f35c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f360:	50                   	push   eax
c001f361:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f368:	e8 d3 f9 ff ff       	call   c001ed40 <FAT::fixFilepath(char*)>
c001f36d:	83 c4 10             	add    esp,0x10
c001f370:	83 ec 08             	sub    esp,0x8
c001f373:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001f37a:	50                   	push   eax
c001f37b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f37f:	50                   	push   eax
c001f380:	e8 a5 6b fe ff       	call   c0005f2a <f_stat>
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f38f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f396:	85 c0                	test   eax,eax
c001f398:	75 04                	jne    c001f39e <FAT::exists(char const*)+0x62>
c001f39a:	b0 01                	mov    al,0x1
c001f39c:	eb 02                	jmp    c001f3a0 <FAT::exists(char const*)+0x64>
c001f39e:	b0 00                	mov    al,0x0
c001f3a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f3a6:	c3                   	ret    
c001f3a7:	90                   	nop

c001f3a8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001f3a8:	b8 08 00 00 00       	mov    eax,0x8
c001f3ad:	c3                   	ret    

c001f3ae <ISO9660::seek(void*, unsigned long long)>:
c001f3ae:	53                   	push   ebx
c001f3af:	b8 04 00 00 00       	mov    eax,0x4
c001f3b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f3b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f3bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f3c0:	85 d2                	test   edx,edx
c001f3c2:	74 17                	je     c001f3db <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f3c4:	89 c8                	mov    eax,ecx
c001f3c6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001f3c9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001f3cc:	b8 01 00 00 00       	mov    eax,0x1
c001f3d1:	73 08                	jae    c001f3db <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f3d3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001f3d6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001f3d9:	31 c0                	xor    eax,eax
c001f3db:	5b                   	pop    ebx
c001f3dc:	c3                   	ret    
c001f3dd:	90                   	nop

c001f3de <ISO9660::tell(void*, unsigned long long*)>:
c001f3de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f3e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3e6:	85 d2                	test   edx,edx
c001f3e8:	74 12                	je     c001f3fc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f3ea:	85 c0                	test   eax,eax
c001f3ec:	74 0e                	je     c001f3fc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f3ee:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001f3f1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001f3f4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f3f7:	89 10                	mov    DWORD PTR [eax],edx
c001f3f9:	31 c0                	xor    eax,eax
c001f3fb:	c3                   	ret    
c001f3fc:	b8 04 00 00 00       	mov    eax,0x4
c001f401:	c3                   	ret    

c001f402 <ISO9660::getName()>:
c001f402:	b8 0c 92 02 c0       	mov    eax,0xc002920c
c001f407:	c3                   	ret    

c001f408 <ISO9660::stat(void*, unsigned long long*)>:
c001f408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f40c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f410:	85 d2                	test   edx,edx
c001f412:	74 12                	je     c001f426 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f414:	85 c0                	test   eax,eax
c001f416:	74 0e                	je     c001f426 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f418:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001f41b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001f41e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f421:	89 10                	mov    DWORD PTR [eax],edx
c001f423:	31 c0                	xor    eax,eax
c001f425:	c3                   	ret    
c001f426:	b8 04 00 00 00       	mov    eax,0x4
c001f42b:	c3                   	ret    

c001f42c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001f42c:	b8 01 00 00 00       	mov    eax,0x1
c001f431:	c3                   	ret    

c001f432 <ISO9660::unlink(char const*)>:
c001f432:	b8 01 00 00 00       	mov    eax,0x1
c001f437:	c3                   	ret    

c001f438 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001f438:	b8 01 00 00 00       	mov    eax,0x1
c001f43d:	c3                   	ret    

c001f43e <ISO9660::rename(char const*, char const*)>:
c001f43e:	b8 01 00 00 00       	mov    eax,0x1
c001f443:	c3                   	ret    

c001f444 <ISO9660::mkdir(char const*)>:
c001f444:	b8 01 00 00 00       	mov    eax,0x1
c001f449:	c3                   	ret    

c001f44a <ISO9660::close(void*)>:
c001f44a:	83 ec 0c             	sub    esp,0xc
c001f44d:	b8 04 00 00 00       	mov    eax,0x4
c001f452:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f456:	85 d2                	test   edx,edx
c001f458:	74 0e                	je     c001f468 <ISO9660::close(void*)+0x1e>
c001f45a:	83 ec 0c             	sub    esp,0xc
c001f45d:	52                   	push   edx
c001f45e:	e8 7f 00 ff ff       	call   c000f4e2 <free>
c001f463:	83 c4 10             	add    esp,0x10
c001f466:	31 c0                	xor    eax,eax
c001f468:	83 c4 0c             	add    esp,0xc
c001f46b:	c3                   	ret    

c001f46c <ISO9660::closeDir(void*)>:
c001f46c:	83 ec 0c             	sub    esp,0xc
c001f46f:	b8 04 00 00 00       	mov    eax,0x4
c001f474:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f478:	85 d2                	test   edx,edx
c001f47a:	74 0e                	je     c001f48a <ISO9660::closeDir(void*)+0x1e>
c001f47c:	83 ec 0c             	sub    esp,0xc
c001f47f:	52                   	push   edx
c001f480:	e8 5d 00 ff ff       	call   c000f4e2 <free>
c001f485:	83 c4 10             	add    esp,0x10
c001f488:	31 c0                	xor    eax,eax
c001f48a:	83 c4 0c             	add    esp,0xc
c001f48d:	c3                   	ret    

c001f48e <ISO9660::~ISO9660()>:
c001f48e:	83 ec 0c             	sub    esp,0xc
c001f491:	ba 60 92 02 c0       	mov    edx,0xc0029260
c001f496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49a:	89 10                	mov    DWORD PTR [eax],edx
c001f49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a0:	83 ec 0c             	sub    esp,0xc
c001f4a3:	50                   	push   eax
c001f4a4:	e8 c5 34 ff ff       	call   c001296e <Filesystem::~Filesystem()>
c001f4a9:	83 c4 10             	add    esp,0x10
c001f4ac:	90                   	nop
c001f4ad:	83 c4 0c             	add    esp,0xc
c001f4b0:	c3                   	ret    
c001f4b1:	90                   	nop

c001f4b2 <ISO9660::~ISO9660()>:
c001f4b2:	83 ec 0c             	sub    esp,0xc
c001f4b5:	83 ec 0c             	sub    esp,0xc
c001f4b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4bc:	e8 cd ff ff ff       	call   c001f48e <ISO9660::~ISO9660()>
c001f4c1:	83 c4 10             	add    esp,0x10
c001f4c4:	83 ec 08             	sub    esp,0x8
c001f4c7:	6a 08                	push   0x8
c001f4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4cd:	e8 93 30 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	83 c4 0c             	add    esp,0xc
c001f4d8:	c3                   	ret    

c001f4d9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001f4d9:	55                   	push   ebp
c001f4da:	31 c9                	xor    ecx,ecx
c001f4dc:	57                   	push   edi
c001f4dd:	56                   	push   esi
c001f4de:	53                   	push   ebx
c001f4df:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001f4e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f4e7:	89 eb                	mov    ebx,ebp
c001f4e9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001f4ed:	39 ce                	cmp    esi,ecx
c001f4ef:	7e 17                	jle    c001f508 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001f4f1:	31 d2                	xor    edx,edx
c001f4f3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001f4f7:	7d 13                	jge    c001f50c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001f4f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f4fd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f500:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001f503:	75 0d                	jne    c001f512 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001f505:	42                   	inc    edx
c001f506:	eb eb                	jmp    c001f4f3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001f508:	31 c0                	xor    eax,eax
c001f50a:	eb 0a                	jmp    c001f516 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f50c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001f510:	eb 04                	jmp    c001f516 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f512:	41                   	inc    ecx
c001f513:	43                   	inc    ebx
c001f514:	eb d7                	jmp    c001f4ed <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001f516:	5b                   	pop    ebx
c001f517:	5e                   	pop    esi
c001f518:	5f                   	pop    edi
c001f519:	5d                   	pop    ebp
c001f51a:	c3                   	ret    

c001f51b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001f51b:	56                   	push   esi
c001f51c:	53                   	push   ebx
c001f51d:	52                   	push   edx
c001f51e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f522:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f526:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f52a:	39 0d 20 c1 02 c0    	cmp    DWORD PTR ds:0xc002c120,ecx
c001f530:	75 08                	jne    c001f53a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001f532:	38 05 28 a0 02 c0    	cmp    BYTE PTR ds:0xc002a028,al
c001f538:	74 2b                	je     c001f565 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001f53a:	83 ec 0c             	sub    esp,0xc
c001f53d:	a2 28 a0 02 c0       	mov    ds:0xc002a028,al
c001f542:	68 40 c1 02 c0       	push   0xc002c140
c001f547:	0f be c0             	movsx  eax,al
c001f54a:	6a 01                	push   0x1
c001f54c:	89 0d 20 c1 02 c0    	mov    DWORD PTR ds:0xc002c120,ecx
c001f552:	31 db                	xor    ebx,ebx
c001f554:	53                   	push   ebx
c001f555:	51                   	push   ecx
c001f556:	ff 34 85 7c af 02 c0 	push   DWORD PTR [eax*4-0x3ffd5084]
c001f55d:	e8 f6 66 ff ff       	call   c0015c58 <LogicalDisk::read(unsigned long long, int, void*)>
c001f562:	83 c4 20             	add    esp,0x20
c001f565:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001f56d:	c7 44 24 14 40 c1 02 c0 	mov    DWORD PTR [esp+0x14],0xc002c140
c001f575:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001f579:	58                   	pop    eax
c001f57a:	5b                   	pop    ebx
c001f57b:	5e                   	pop    esi
c001f57c:	e9 c6 10 fe ff       	jmp    c0000647 <memcpy>
c001f581:	90                   	nop

c001f582 <ISO9660::tryMount(LogicalDisk*, int)>:
c001f582:	81 ec 10 08 00 00    	sub    esp,0x810
c001f588:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001f58f:	83 c0 41             	add    eax,0x41
c001f592:	0f be c0             	movsx  eax,al
c001f595:	50                   	push   eax
c001f596:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f59a:	50                   	push   eax
c001f59b:	6a 10                	push   0x10
c001f59d:	e8 79 ff ff ff       	call   c001f51b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5a2:	83 c4 10             	add    esp,0x10
c001f5a5:	31 c0                	xor    eax,eax
c001f5a7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001f5ac:	75 1d                	jne    c001f5cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f5ae:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001f5b3:	75 16                	jne    c001f5cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f5b5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001f5ba:	75 0f                	jne    c001f5cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f5bc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001f5c1:	75 08                	jne    c001f5cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f5c3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001f5c8:	0f 94 c0             	sete   al
c001f5cb:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f5d1:	c3                   	ret    

c001f5d2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f5d2:	55                   	push   ebp
c001f5d3:	57                   	push   edi
c001f5d4:	56                   	push   esi
c001f5d5:	53                   	push   ebx
c001f5d6:	81 ec 34 08 00 00    	sub    esp,0x834
c001f5dc:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f5e3:	55                   	push   ebp
c001f5e4:	68 27 92 02 c0       	push   0xc0029227
c001f5e9:	e8 57 30 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001f5ee:	83 c4 10             	add    esp,0x10
c001f5f1:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f5f9:	0f 84 06 02 00 00    	je     c001f805 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f5ff:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f607:	0f 84 f8 01 00 00    	je     c001f805 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f60d:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f614:	b8 01 00 00 00       	mov    eax,0x1
c001f619:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f61d:	0f 85 e7 01 00 00    	jne    c001f80a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f623:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f626:	31 d2                	xor    edx,edx
c001f628:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f62b:	89 e9                	mov    ecx,ebp
c001f62d:	89 d3                	mov    ebx,edx
c001f62f:	01 f1                	add    ecx,esi
c001f631:	11 fb                	adc    ebx,edi
c001f633:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f637:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f63b:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f642:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f645:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f648:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f64c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f650:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f654:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f658:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f65c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f660:	72 19                	jb     c001f67b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f662:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f66e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f671:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f675:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f679:	eb 13                	jmp    c001f68e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f67b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f67f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f683:	29 f0                	sub    eax,esi
c001f685:	19 fa                	sbb    edx,edi
c001f687:	89 04 24             	mov    DWORD PTR [esp],eax
c001f68a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f68e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f695:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f698:	8b 00                	mov    eax,DWORD PTR [eax]
c001f69a:	53                   	push   ebx
c001f69b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f69f:	c1 e0 0b             	shl    eax,0xb
c001f6a2:	01 c6                	add    esi,eax
c001f6a4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f6ab:	11 d7                	adc    edi,edx
c001f6ad:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f6b1:	89 fa                	mov    edx,edi
c001f6b3:	50                   	push   eax
c001f6b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f6b8:	50                   	push   eax
c001f6b9:	89 f0                	mov    eax,esi
c001f6bb:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f6bf:	50                   	push   eax
c001f6c0:	e8 56 fe ff ff       	call   c001f51b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f6c5:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f6cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6d0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f6d3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f6d7:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f6dd:	83 c4 10             	add    esp,0x10
c001f6e0:	b8 00 08 00 00       	mov    eax,0x800
c001f6e5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f6e9:	29 d0                	sub    eax,edx
c001f6eb:	39 c1                	cmp    ecx,eax
c001f6ed:	83 db 00             	sbb    ebx,0x0
c001f6f0:	7d 19                	jge    c001f70b <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f6f2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f6f7:	75 16                	jne    c001f70f <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f6f9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f700:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f706:	e9 f6 00 00 00       	jmp    c001f801 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f70b:	89 c5                	mov    ebp,eax
c001f70d:	eb 03                	jmp    c001f712 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f70f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f712:	51                   	push   ecx
c001f713:	55                   	push   ebp
c001f714:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f718:	50                   	push   eax
c001f719:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f720:	e8 22 0f fe ff       	call   c0000647 <memcpy>
c001f725:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f729:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f72d:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f734:	01 e8                	add    eax,ebp
c001f736:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f73a:	89 e8                	mov    eax,ebp
c001f73c:	99                   	cdq    
c001f73d:	01 ee                	add    esi,ebp
c001f73f:	11 d7                	adc    edi,edx
c001f741:	29 e9                	sub    ecx,ebp
c001f743:	19 d3                	sbb    ebx,edx
c001f745:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f749:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f74d:	83 c4 10             	add    esp,0x10
c001f750:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f755:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f758:	b8 00 00 00 00       	mov    eax,0x0
c001f75d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f761:	7d 3f                	jge    c001f7a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f763:	52                   	push   edx
c001f764:	89 fa                	mov    edx,edi
c001f766:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f76d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f771:	50                   	push   eax
c001f772:	89 f0                	mov    eax,esi
c001f774:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f778:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f77c:	50                   	push   eax
c001f77d:	e8 99 fd ff ff       	call   c001f51b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f782:	81 c6 00 08 00 00    	add    esi,0x800
c001f788:	83 d7 00             	adc    edi,0x0
c001f78b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f793:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f79b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f7a0:	eb ab                	jmp    c001f74d <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f7a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7a6:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f7a9:	74 34                	je     c001f7df <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f7ab:	89 fa                	mov    edx,edi
c001f7ad:	50                   	push   eax
c001f7ae:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f7b5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f7b9:	50                   	push   eax
c001f7ba:	89 f0                	mov    eax,esi
c001f7bc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f7c0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f7c4:	55                   	push   ebp
c001f7c5:	50                   	push   eax
c001f7c6:	e8 50 fd ff ff       	call   c001f51b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f7cb:	83 c4 0c             	add    esp,0xc
c001f7ce:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f7d2:	55                   	push   ebp
c001f7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d7:	e8 6b 0e fe ff       	call   c0000647 <memcpy>
c001f7dc:	83 c4 10             	add    esp,0x10
c001f7df:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f7e6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f7ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7ee:	89 38                	mov    DWORD PTR [eax],edi
c001f7f0:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f7f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7fb:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f7fe:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f801:	31 c0                	xor    eax,eax
c001f803:	eb 05                	jmp    c001f80a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f805:	b8 04 00 00 00       	mov    eax,0x4
c001f80a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f810:	5b                   	pop    ebx
c001f811:	5e                   	pop    esi
c001f812:	5f                   	pop    edi
c001f813:	5d                   	pop    ebp
c001f814:	c3                   	ret    
c001f815:	90                   	nop

c001f816 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f816:	55                   	push   ebp
c001f817:	57                   	push   edi
c001f818:	56                   	push   esi
c001f819:	53                   	push   ebx
c001f81a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f820:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f827:	85 f6                	test   esi,esi
c001f829:	0f 84 64 02 00 00    	je     c001fa93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f82f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f837:	0f 84 56 02 00 00    	je     c001fa93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f83d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f840:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f843:	75 0a                	jne    c001f84f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f845:	b8 07 00 00 00       	mov    eax,0x7
c001f84a:	e9 49 02 00 00       	jmp    c001fa98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f84f:	50                   	push   eax
c001f850:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f854:	50                   	push   eax
c001f855:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f85c:	53                   	push   ebx
c001f85d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f85f:	c1 e0 0b             	shl    eax,0xb
c001f862:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f865:	c1 e8 0b             	shr    eax,0xb
c001f868:	50                   	push   eax
c001f869:	e8 ad fc ff ff       	call   c001f51b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f86e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f871:	83 c4 10             	add    esp,0x10
c001f874:	89 c1                	mov    ecx,eax
c001f876:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f879:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f87f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f882:	84 db                	test   bl,bl
c001f884:	0f 85 90 00 00 00    	jne    c001f91a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f88a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f890:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f896:	29 c7                	sub    edi,eax
c001f898:	89 fb                	mov    ebx,edi
c001f89a:	c1 fb 1f             	sar    ebx,0x1f
c001f89d:	01 f8                	add    eax,edi
c001f89f:	11 da                	adc    edx,ebx
c001f8a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f8a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f8a9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f8ac:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f8af:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f8b2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f8b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f8bc:	89 d8                	mov    eax,ebx
c001f8be:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f8c1:	ba 00 00 00 00       	mov    edx,0x0
c001f8c6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f8ca:	b8 00 00 00 00       	mov    eax,0x0
c001f8cf:	73 0b                	jae    c001f8dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f8d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f8d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8d8:	29 f8                	sub    eax,edi
c001f8da:	19 da                	sbb    edx,ebx
c001f8dc:	89 d3                	mov    ebx,edx
c001f8de:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f8e1:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f8e4:	09 c3                	or     ebx,eax
c001f8e6:	0f 84 59 ff ff ff    	je     c001f845 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f8ec:	55                   	push   ebp
c001f8ed:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f8f1:	50                   	push   eax
c001f8f2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f8f9:	53                   	push   ebx
c001f8fa:	8b 06                	mov    eax,DWORD PTR [esi]
c001f8fc:	c1 e0 0b             	shl    eax,0xb
c001f8ff:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f903:	c1 e8 0b             	shr    eax,0xb
c001f906:	50                   	push   eax
c001f907:	e8 0f fc ff ff       	call   c001f51b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f90c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f90f:	83 c4 10             	add    esp,0x10
c001f912:	25 ff 07 00 00       	and    eax,0x7ff
c001f917:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f91a:	57                   	push   edi
c001f91b:	6a 28                	push   0x28
c001f91d:	6a 00                	push   0x0
c001f91f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f923:	50                   	push   eax
c001f924:	e8 54 0d fe ff       	call   c000067d <memset>
c001f929:	31 d2                	xor    edx,edx
c001f92b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f92e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f934:	89 f8                	mov    eax,edi
c001f936:	83 c0 21             	add    eax,0x21
c001f939:	83 d2 00             	adc    edx,0x0
c001f93c:	89 c7                	mov    edi,eax
c001f93e:	89 d5                	mov    ebp,edx
c001f940:	83 c4 10             	add    esp,0x10
c001f943:	31 c9                	xor    ecx,ecx
c001f945:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f94c:	83 f9 28             	cmp    ecx,0x28
c001f94f:	88 04 24             	mov    BYTE PTR [esp],al
c001f952:	0f 94 c2             	sete   dl
c001f955:	88 d0                	mov    al,dl
c001f957:	ba ff 07 00 00       	mov    edx,0x7ff
c001f95c:	39 fa                	cmp    edx,edi
c001f95e:	ba 00 00 00 00       	mov    edx,0x0
c001f963:	19 ea                	sbb    edx,ebp
c001f965:	0f 92 c2             	setb   dl
c001f968:	09 c2                	or     edx,eax
c001f96a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f96e:	0f 94 c0             	sete   al
c001f971:	08 d0                	or     al,dl
c001f973:	75 16                	jne    c001f98b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f975:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f979:	74 10                	je     c001f98b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f97b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f97e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f982:	41                   	inc    ecx
c001f983:	83 c7 01             	add    edi,0x1
c001f986:	83 d5 00             	adc    ebp,0x0
c001f989:	eb ba                	jmp    c001f945 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f98b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f992:	83 ec 0c             	sub    esp,0xc
c001f995:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f999:	57                   	push   edi
c001f99a:	e8 fb 0c fe ff       	call   c000069a <strlen>
c001f99f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f9a7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f9ab:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f9b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f9b5:	5a                   	pop    edx
c001f9b6:	25 ff 07 00 00       	and    eax,0x7ff
c001f9bb:	01 c8                	add    eax,ecx
c001f9bd:	59                   	pop    ecx
c001f9be:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f9c4:	83 e0 02             	and    eax,0x2
c001f9c7:	3c 01                	cmp    al,0x1
c001f9c9:	19 c0                	sbb    eax,eax
c001f9cb:	83 c0 02             	add    eax,0x2
c001f9ce:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f9d2:	57                   	push   edi
c001f9d3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f9d7:	50                   	push   eax
c001f9d8:	e8 3f 0d fe ff       	call   c000071c <strcpy>
c001f9dd:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f9e1:	83 c4 10             	add    esp,0x10
c001f9e4:	84 c0                	test   al,al
c001f9e6:	75 21                	jne    c001fa09 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f9e8:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f9f0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f9f8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001fa00:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001fa07:	eb 28                	jmp    c001fa31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001fa09:	fe c8                	dec    al
c001fa0b:	75 24                	jne    c001fa31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001fa0d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001fa15:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001fa1d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001fa25:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001fa2c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001fa31:	0f b6 fb             	movzx  edi,bl
c001fa34:	31 db                	xor    ebx,ebx
c001fa36:	50                   	push   eax
c001fa37:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001fa3e:	8d 44 24 48          	lea    eax,[esp+0x48]
c001fa42:	50                   	push   eax
c001fa43:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001fa4a:	e8 f8 0b fe ff       	call   c0000647 <memcpy>
c001fa4f:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001fa56:	89 f9                	mov    ecx,edi
c001fa58:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fa5e:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001fa61:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001fa64:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001fa67:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001fa6a:	83 c4 10             	add    esp,0x10
c001fa6d:	39 c7                	cmp    edi,eax
c001fa6f:	89 df                	mov    edi,ebx
c001fa71:	19 d7                	sbb    edi,edx
c001fa73:	72 10                	jb     c001fa85 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001fa75:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001fa7c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001fa83:	eb 0a                	jmp    c001fa8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001fa85:	29 c8                	sub    eax,ecx
c001fa87:	19 da                	sbb    edx,ebx
c001fa89:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001fa8c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001fa8f:	31 c0                	xor    eax,eax
c001fa91:	eb 05                	jmp    c001fa98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001fa93:	b8 04 00 00 00       	mov    eax,0x4
c001fa98:	81 c4 5c 09 00 00    	add    esp,0x95c
c001fa9e:	5b                   	pop    ebx
c001fa9f:	5e                   	pop    esi
c001faa0:	5f                   	pop    edi
c001faa1:	5d                   	pop    ebp
c001faa2:	c3                   	ret    

c001faa3 <readRoot(unsigned int*, unsigned int*, char)>:
c001faa3:	81 ec 40 08 00 00    	sub    esp,0x840
c001faa9:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001fab1:	50                   	push   eax
c001fab2:	8d 44 24 38          	lea    eax,[esp+0x38]
c001fab6:	50                   	push   eax
c001fab7:	6a 10                	push   0x10
c001fab9:	e8 5d fa ff ff       	call   c001f51b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fabe:	83 c4 0c             	add    esp,0xc
c001fac1:	6a 22                	push   0x22
c001fac3:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001faca:	50                   	push   eax
c001facb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001facf:	50                   	push   eax
c001fad0:	e8 72 0b fe ff       	call   c0000647 <memcpy>
c001fad5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fadc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001fae0:	89 10                	mov    DWORD PTR [eax],edx
c001fae2:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001fae9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001faed:	89 10                	mov    DWORD PTR [eax],edx
c001faef:	b0 01                	mov    al,0x1
c001faf1:	81 c4 4c 08 00 00    	add    esp,0x84c
c001faf7:	c3                   	ret    

c001faf8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001faf8:	55                   	push   ebp
c001faf9:	57                   	push   edi
c001fafa:	56                   	push   esi
c001fafb:	53                   	push   ebx
c001fafc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fb02:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001fb09:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001fb10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fb14:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001fb18:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fb1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fb20:	75 03                	jne    c001fb25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fb22:	83 c3 02             	add    ebx,0x2
c001fb25:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001fb28:	75 03                	jne    c001fb2d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001fb2a:	43                   	inc    ebx
c001fb2b:	eb f8                	jmp    c001fb25 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fb2d:	51                   	push   ecx
c001fb2e:	68 00 01 00 00       	push   0x100
c001fb33:	6a 00                	push   0x0
c001fb35:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fb39:	50                   	push   eax
c001fb3a:	e8 3e 0b fe ff       	call   c000067d <memset>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	31 d2                	xor    edx,edx
c001fb44:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001fb47:	84 c0                	test   al,al
c001fb49:	74 21                	je     c001fb6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001fb4b:	3c 2f                	cmp    al,0x2f
c001fb4d:	75 0b                	jne    c001fb5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001fb4f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001fb53:	bd 01 00 00 00       	mov    ebp,0x1
c001fb58:	eb 14                	jmp    c001fb6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001fb5a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001fb5d:	80 f9 19             	cmp    cl,0x19
c001fb60:	77 03                	ja     c001fb65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001fb62:	83 e8 20             	sub    eax,0x20
c001fb65:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001fb69:	42                   	inc    edx
c001fb6a:	eb d8                	jmp    c001fb44 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001fb6c:	31 ed                	xor    ebp,ebp
c001fb6e:	83 ec 0c             	sub    esp,0xc
c001fb71:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001fb78:	e8 55 f9 fe ff       	call   c000f4d2 <malloc>
c001fb7d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001fb84:	89 c6                	mov    esi,eax
c001fb86:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001fb8c:	c1 ef 0b             	shr    edi,0xb
c001fb8f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001fb96:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001fb9a:	83 c4 10             	add    esp,0x10
c001fb9d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001fba2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fba6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001fbad:	74 28                	je     c001fbd7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001fbaf:	52                   	push   edx
c001fbb0:	57                   	push   edi
c001fbb1:	50                   	push   eax
c001fbb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fbb6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001fbbd:	e8 59 f9 ff ff       	call   c001f51b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fbc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fbc6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001fbcd:	05 00 08 00 00       	add    eax,0x800
c001fbd2:	83 c4 10             	add    esp,0x10
c001fbd5:	eb cb                	jmp    c001fba2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001fbd7:	83 ec 0c             	sub    esp,0xc
c001fbda:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001fbde:	57                   	push   edi
c001fbdf:	e8 b6 0a fe ff       	call   c000069a <strlen>
c001fbe4:	50                   	push   eax
c001fbe5:	57                   	push   edi
c001fbe6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001fbed:	56                   	push   esi
c001fbee:	e8 e6 f8 ff ff       	call   c001f4d9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001fbf3:	83 c4 20             	add    esp,0x20
c001fbf6:	85 c0                	test   eax,eax
c001fbf8:	75 13                	jne    c001fc0d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001fbfa:	83 ec 0c             	sub    esp,0xc
c001fbfd:	56                   	push   esi
c001fbfe:	e8 df f8 fe ff       	call   c000f4e2 <free>
c001fc03:	83 c4 10             	add    esp,0x10
c001fc06:	31 c0                	xor    eax,eax
c001fc08:	e9 b3 00 00 00       	jmp    c001fcc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001fc0d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001fc11:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001fc15:	c1 e7 08             	shl    edi,0x8
c001fc18:	c1 e2 10             	shl    edx,0x10
c001fc1b:	09 d7                	or     edi,edx
c001fc1d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001fc21:	09 d7                	or     edi,edx
c001fc23:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001fc27:	c1 e2 18             	shl    edx,0x18
c001fc2a:	09 d7                	or     edi,edx
c001fc2c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001fc30:	89 d1                	mov    ecx,edx
c001fc32:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001fc36:	c1 e1 08             	shl    ecx,0x8
c001fc39:	c1 e2 10             	shl    edx,0x10
c001fc3c:	09 ca                	or     edx,ecx
c001fc3e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001fc42:	09 ca                	or     edx,ecx
c001fc44:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001fc48:	c1 e1 18             	shl    ecx,0x18
c001fc4b:	09 ca                	or     edx,ecx
c001fc4d:	89 e9                	mov    ecx,ebp
c001fc4f:	84 c9                	test   cl,cl
c001fc51:	74 3c                	je     c001fc8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001fc53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fc57:	83 ec 0c             	sub    esp,0xc
c001fc5a:	56                   	push   esi
c001fc5b:	e8 82 f8 fe ff       	call   c000f4e2 <free>
c001fc60:	83 c4 0c             	add    esp,0xc
c001fc63:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fc6a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001fc6f:	50                   	push   eax
c001fc70:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fc77:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fc7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fc82:	52                   	push   edx
c001fc83:	57                   	push   edi
c001fc84:	53                   	push   ebx
c001fc85:	e8 6e fe ff ff       	call   c001faf8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001fc8a:	83 c4 20             	add    esp,0x20
c001fc8d:	eb 31                	jmp    c001fcc0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001fc8f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001fc92:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001fc99:	d0 e8                	shr    al,1
c001fc9b:	89 3b                	mov    DWORD PTR [ebx],edi
c001fc9d:	83 e0 01             	and    eax,0x1
c001fca0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001fca7:	83 ec 0c             	sub    esp,0xc
c001fcaa:	89 13                	mov    DWORD PTR [ebx],edx
c001fcac:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001fcb3:	89 03                	mov    DWORD PTR [ebx],eax
c001fcb5:	56                   	push   esi
c001fcb6:	e8 27 f8 fe ff       	call   c000f4e2 <free>
c001fcbb:	83 c4 10             	add    esp,0x10
c001fcbe:	b0 01                	mov    al,0x1
c001fcc0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fcc6:	5b                   	pop    ebx
c001fcc7:	5e                   	pop    esi
c001fcc8:	5f                   	pop    edi
c001fcc9:	5d                   	pop    ebp
c001fcca:	c3                   	ret    

c001fccb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001fccb:	55                   	push   ebp
c001fccc:	57                   	push   edi
c001fccd:	56                   	push   esi
c001fcce:	53                   	push   ebx
c001fccf:	83 ec 20             	sub    esp,0x20
c001fcd2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fcd6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fcda:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fcde:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fce6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001fcee:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001fcf3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001fcf9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001fcff:	57                   	push   edi
c001fd00:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd04:	50                   	push   eax
c001fd05:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fd09:	50                   	push   eax
c001fd0a:	e8 94 fd ff ff       	call   c001faa3 <readRoot(unsigned int*, unsigned int*, char)>
c001fd0f:	5a                   	pop    edx
c001fd10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fd14:	e8 81 09 fe ff       	call   c000069a <strlen>
c001fd19:	83 c4 10             	add    esp,0x10
c001fd1c:	83 f8 03             	cmp    eax,0x3
c001fd1f:	77 17                	ja     c001fd38 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001fd21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd25:	89 03                	mov    DWORD PTR [ebx],eax
c001fd27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd2b:	89 06                	mov    DWORD PTR [esi],eax
c001fd2d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001fd34:	b0 01                	mov    al,0x1
c001fd36:	eb 19                	jmp    c001fd51 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001fd38:	50                   	push   eax
c001fd39:	55                   	push   ebp
c001fd3a:	57                   	push   edi
c001fd3b:	56                   	push   esi
c001fd3c:	53                   	push   ebx
c001fd3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fd41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fd45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001fd49:	e8 aa fd ff ff       	call   c001faf8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001fd4e:	83 c4 20             	add    esp,0x20
c001fd51:	83 c4 1c             	add    esp,0x1c
c001fd54:	5b                   	pop    ebx
c001fd55:	5e                   	pop    esi
c001fd56:	5f                   	pop    edi
c001fd57:	5d                   	pop    ebp
c001fd58:	c3                   	ret    
c001fd59:	90                   	nop

c001fd5a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001fd5a:	57                   	push   edi
c001fd5b:	56                   	push   esi
c001fd5c:	53                   	push   ebx
c001fd5d:	83 ec 10             	sub    esp,0x10
c001fd60:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fd64:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001fd68:	85 ff                	test   edi,edi
c001fd6a:	74 7b                	je     c001fde7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001fd6c:	85 f6                	test   esi,esi
c001fd6e:	74 77                	je     c001fde7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001fd70:	83 ec 0c             	sub    esp,0xc
c001fd73:	6a 1c                	push   0x1c
c001fd75:	e8 58 f7 fe ff       	call   c000f4d2 <malloc>
c001fd7a:	89 07                	mov    DWORD PTR [edi],eax
c001fd7c:	89 c3                	mov    ebx,eax
c001fd7e:	58                   	pop    eax
c001fd7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fd83:	50                   	push   eax
c001fd84:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001fd87:	50                   	push   eax
c001fd88:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fd8c:	50                   	push   eax
c001fd8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fd91:	50                   	push   eax
c001fd92:	56                   	push   esi
c001fd93:	e8 33 ff ff ff       	call   c001fccb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fd98:	83 c4 20             	add    esp,0x20
c001fd9b:	84 c0                	test   al,al
c001fd9d:	74 07                	je     c001fda6 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001fd9f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fda4:	74 0b                	je     c001fdb1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001fda6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001fdaa:	b8 01 00 00 00       	mov    eax,0x1
c001fdaf:	eb 3b                	jmp    c001fdec <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001fdb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001fdb9:	89 03                	mov    DWORD PTR [ebx],eax
c001fdbb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001fdc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdc6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001fdcd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fdd4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fdd7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fdde:	8a 06                	mov    al,BYTE PTR [esi]
c001fde0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001fde3:	31 c0                	xor    eax,eax
c001fde5:	eb 05                	jmp    c001fdec <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001fde7:	b8 04 00 00 00       	mov    eax,0x4
c001fdec:	83 c4 10             	add    esp,0x10
c001fdef:	5b                   	pop    ebx
c001fdf0:	5e                   	pop    esi
c001fdf1:	5f                   	pop    edi
c001fdf2:	c3                   	ret    
c001fdf3:	90                   	nop

c001fdf4 <ISO9660::exists(char const*)>:
c001fdf4:	83 ec 28             	sub    esp,0x28
c001fdf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fdfb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001fdff:	52                   	push   edx
c001fe00:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001fe03:	52                   	push   edx
c001fe04:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001fe08:	52                   	push   edx
c001fe09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001fe0d:	52                   	push   edx
c001fe0e:	50                   	push   eax
c001fe0f:	e8 b7 fe ff ff       	call   c001fccb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fe14:	83 c4 3c             	add    esp,0x3c
c001fe17:	c3                   	ret    

c001fe18 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001fe18:	56                   	push   esi
c001fe19:	53                   	push   ebx
c001fe1a:	83 ec 14             	sub    esp,0x14
c001fe1d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001fe21:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001fe25:	85 db                	test   ebx,ebx
c001fe27:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fe2b:	0f 94 c2             	sete   dl
c001fe2e:	85 f6                	test   esi,esi
c001fe30:	0f 94 c0             	sete   al
c001fe33:	08 c2                	or     dl,al
c001fe35:	75 68                	jne    c001fe9f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001fe37:	85 c9                	test   ecx,ecx
c001fe39:	74 64                	je     c001fe9f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001fe3b:	83 ec 0c             	sub    esp,0xc
c001fe3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001fe41:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe45:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001fe4b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fe52:	50                   	push   eax
c001fe53:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001fe56:	50                   	push   eax
c001fe57:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fe5b:	50                   	push   eax
c001fe5c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fe60:	50                   	push   eax
c001fe61:	51                   	push   ecx
c001fe62:	e8 64 fe ff ff       	call   c001fccb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fe67:	83 c4 20             	add    esp,0x20
c001fe6a:	ba 01 00 00 00       	mov    edx,0x1
c001fe6f:	84 c0                	test   al,al
c001fe71:	74 31                	je     c001fea4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001fe73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe77:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fe7e:	89 03                	mov    DWORD PTR [ebx],eax
c001fe80:	ba 00 00 00 00       	mov    edx,0x0
c001fe85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe89:	85 c0                	test   eax,eax
c001fe8b:	0f 95 06             	setne  BYTE PTR [esi]
c001fe8e:	74 14                	je     c001fea4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001fe90:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001fe96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fe9d:	eb 05                	jmp    c001fea4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001fe9f:	ba 04 00 00 00       	mov    edx,0x4
c001fea4:	83 c4 14             	add    esp,0x14
c001fea7:	89 d0                	mov    eax,edx
c001fea9:	5b                   	pop    ebx
c001feaa:	5e                   	pop    esi
c001feab:	c3                   	ret    

c001feac <ISO9660::openDir(char const*, void**)>:
c001feac:	57                   	push   edi
c001fead:	56                   	push   esi
c001feae:	53                   	push   ebx
c001feaf:	83 ec 10             	sub    esp,0x10
c001feb2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001feb6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001feba:	85 ff                	test   edi,edi
c001febc:	0f 84 95 00 00 00    	je     c001ff57 <ISO9660::openDir(char const*, void**)+0xab>
c001fec2:	85 f6                	test   esi,esi
c001fec4:	0f 84 8d 00 00 00    	je     c001ff57 <ISO9660::openDir(char const*, void**)+0xab>
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	6a 1c                	push   0x1c
c001fecf:	e8 fe f5 fe ff       	call   c000f4d2 <malloc>
c001fed4:	89 07                	mov    DWORD PTR [edi],eax
c001fed6:	89 c3                	mov    ebx,eax
c001fed8:	59                   	pop    ecx
c001fed9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fedd:	50                   	push   eax
c001fede:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001fee1:	50                   	push   eax
c001fee2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fee6:	50                   	push   eax
c001fee7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001feeb:	50                   	push   eax
c001feec:	56                   	push   esi
c001feed:	e8 d9 fd ff ff       	call   c001fccb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fef2:	83 c4 20             	add    esp,0x20
c001fef5:	84 c0                	test   al,al
c001fef7:	74 07                	je     c001ff00 <ISO9660::openDir(char const*, void**)+0x54>
c001fef9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fefe:	75 21                	jne    c001ff21 <ISO9660::openDir(char const*, void**)+0x75>
c001ff00:	0f b6 c0             	movzx  eax,al
c001ff03:	52                   	push   edx
c001ff04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff08:	50                   	push   eax
c001ff09:	68 3a 92 02 c0       	push   0xc002923a
c001ff0e:	e8 32 27 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c001ff13:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ff17:	83 c4 10             	add    esp,0x10
c001ff1a:	b8 01 00 00 00       	mov    eax,0x1
c001ff1f:	eb 3b                	jmp    c001ff5c <ISO9660::openDir(char const*, void**)+0xb0>
c001ff21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff25:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ff29:	89 03                	mov    DWORD PTR [ebx],eax
c001ff2b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ff32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff36:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ff3d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ff44:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ff47:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ff4e:	8a 06                	mov    al,BYTE PTR [esi]
c001ff50:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ff53:	31 c0                	xor    eax,eax
c001ff55:	eb 05                	jmp    c001ff5c <ISO9660::openDir(char const*, void**)+0xb0>
c001ff57:	b8 04 00 00 00       	mov    eax,0x4
c001ff5c:	83 c4 10             	add    esp,0x10
c001ff5f:	5b                   	pop    ebx
c001ff60:	5e                   	pop    esi
c001ff61:	5f                   	pop    edi
c001ff62:	c3                   	ret    
c001ff63:	90                   	nop

c001ff64 <ISO9660::ISO9660()>:
c001ff64:	83 ec 0c             	sub    esp,0xc
c001ff67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6b:	83 ec 0c             	sub    esp,0xc
c001ff6e:	50                   	push   eax
c001ff6f:	e8 d6 29 ff ff       	call   c001294a <Filesystem::Filesystem()>
c001ff74:	83 c4 10             	add    esp,0x10
c001ff77:	ba 60 92 02 c0       	mov    edx,0xc0029260
c001ff7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff80:	89 10                	mov    DWORD PTR [eax],edx
c001ff82:	90                   	nop
c001ff83:	83 c4 0c             	add    esp,0xc
c001ff86:	c3                   	ret    
c001ff87:	90                   	nop

c001ff88 <SoundChannel::~SoundChannel()>:
c001ff88:	83 ec 0c             	sub    esp,0xc
c001ff8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ff92:	83 ec 0c             	sub    esp,0xc
c001ff95:	50                   	push   eax
c001ff96:	e8 47 f5 fe ff       	call   c000f4e2 <free>
c001ff9b:	83 c4 10             	add    esp,0x10
c001ff9e:	90                   	nop
c001ff9f:	83 c4 0c             	add    esp,0xc
c001ffa2:	c3                   	ret    
c001ffa3:	90                   	nop

c001ffa4 <SoundChannel::setSpeed(float)>:
c001ffa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffa8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ffac:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ffaf:	c3                   	ret    

c001ffb0 <SoundChannel::getSpeed()>:
c001ffb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffb4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001ffb7:	c3                   	ret    

c001ffb8 <SoundChannel::setVolume(int)>:
c001ffb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffbc:	83 f8 64             	cmp    eax,0x64
c001ffbf:	7e 05                	jle    c001ffc6 <SoundChannel::setVolume(int)+0xe>
c001ffc1:	b8 64 00 00 00       	mov    eax,0x64
c001ffc6:	85 c0                	test   eax,eax
c001ffc8:	79 02                	jns    c001ffcc <SoundChannel::setVolume(int)+0x14>
c001ffca:	31 c0                	xor    eax,eax
c001ffcc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ffd0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001ffd3:	c3                   	ret    

c001ffd4 <SoundChannel::getVolume()>:
c001ffd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffd8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001ffdb:	c3                   	ret    

c001ffdc <SoundChannel::pause()>:
c001ffdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffe0:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001ffe4:	c3                   	ret    
c001ffe5:	90                   	nop

c001ffe6 <SoundChannel::SoundChannel(int, int, int, int)>:
c001ffe6:	83 ec 1c             	sub    esp,0x1c
c001ffe9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ffed:	e8 ea ff ff ff       	call   c001ffdc <SoundChannel::pause()>
c001fff2:	83 c4 04             	add    esp,0x4
c001fff5:	6a 50                	push   0x50
c001fff7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fffb:	e8 b8 ff ff ff       	call   c001ffb8 <SoundChannel::setVolume(int)>
c0020000:	83 c4 08             	add    esp,0x8
c0020003:	a1 d8 92 02 c0       	mov    eax,ds:0xc00292d8
c0020008:	50                   	push   eax
c0020009:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002000d:	e8 92 ff ff ff       	call   c001ffa4 <SoundChannel::setSpeed(float)>
c0020012:	83 c4 08             	add    esp,0x8
c0020015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020019:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002001d:	89 10                	mov    DWORD PTR [eax],edx
c002001f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020023:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020027:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002002a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002002e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020032:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020035:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002003a:	75 23                	jne    c002005f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002003c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020040:	8b 10                	mov    edx,DWORD PTR [eax]
c0020042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020049:	0f af c2             	imul   eax,edx
c002004c:	85 c0                	test   eax,eax
c002004e:	79 03                	jns    c0020053 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0020050:	83 c0 03             	add    eax,0x3
c0020053:	c1 f8 02             	sar    eax,0x2
c0020056:	05 a0 0f 00 00       	add    eax,0xfa0
c002005b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002005f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020063:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020067:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002006a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002006e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0020075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020079:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0020080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020084:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020087:	c1 e0 02             	shl    eax,0x2
c002008a:	83 ec 0c             	sub    esp,0xc
c002008d:	50                   	push   eax
c002008e:	e8 3f f4 fe ff       	call   c000f4d2 <malloc>
c0020093:	83 c4 10             	add    esp,0x10
c0020096:	89 c2                	mov    edx,eax
c0020098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002009c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002009f:	83 ec 04             	sub    esp,0x4
c00200a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200a6:	50                   	push   eax
c00200a7:	6a 01                	push   0x1
c00200a9:	6a 04                	push   0x4
c00200ab:	e8 91 88 fe ff       	call   c0008941 <src_new>
c00200b0:	83 c4 10             	add    esp,0x10
c00200b3:	89 c2                	mov    edx,eax
c00200b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00200b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00200bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c0:	85 c0                	test   eax,eax
c00200c2:	74 10                	je     c00200d4 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00200c4:	83 ec 0c             	sub    esp,0xc
c00200c7:	68 bc 92 02 c0       	push   0xc00292bc
c00200cc:	e8 38 8d ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c00200d1:	83 c4 10             	add    esp,0x10
c00200d4:	a0 40 cd 02 c0       	mov    al,ds:0xc002cd40
c00200d9:	83 f0 01             	xor    eax,0x1
c00200dc:	84 c0                	test   al,al
c00200de:	74 57                	je     c0020137 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00200e0:	a1 dc 92 02 c0       	mov    eax,ds:0xc00292dc
c00200e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00200e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00200f1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00200f9:	7f 35                	jg     c0020130 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00200fb:	83 ec 0c             	sub    esp,0xc
c00200fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020102:	e8 80 42 00 00       	call   c0024387 <__floatsisf>
c0020107:	83 c4 10             	add    esp,0x10
c002010a:	8b 15 dc 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292dc
c0020110:	83 ec 08             	sub    esp,0x8
c0020113:	52                   	push   edx
c0020114:	50                   	push   eax
c0020115:	e8 7f 3e 00 00       	call   c0023f99 <__mulsf3>
c002011a:	83 c4 10             	add    esp,0x10
c002011d:	89 c2                	mov    edx,eax
c002011f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020123:	89 14 85 40 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd36c0],edx
c002012a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002012e:	eb c1                	jmp    c00200f1 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0020130:	c6 05 40 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd40,0x1
c0020137:	90                   	nop
c0020138:	83 c4 1c             	add    esp,0x1c
c002013b:	c3                   	ret    

c002013c <SoundChannel::play()>:
c002013c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020140:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0020144:	c3                   	ret    
c0020145:	90                   	nop

c0020146 <SoundChannel::paused()>:
c0020146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002014a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002014d:	c3                   	ret    

c002014e <SoundChannel::getSampleRate()>:
c002014e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020152:	8b 00                	mov    eax,DWORD PTR [eax]
c0020154:	c3                   	ret    
c0020155:	90                   	nop

c0020156 <SoundChannel::getBits()>:
c0020156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002015a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002015d:	c3                   	ret    

c002015e <SoundChannel::getBufferUsed()>:
c002015e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020162:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0020165:	c3                   	ret    

c0020166 <SoundChannel::getBufferSize()>:
c0020166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002016a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002016d:	c3                   	ret    

c002016e <SoundChannel::unbuffer(float*, int, int)>:
c002016e:	56                   	push   esi
c002016f:	53                   	push   ebx
c0020170:	83 ec 40             	sub    esp,0x40
c0020173:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0020177:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002017a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002017e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0020181:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020185:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020189:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002018d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020191:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020195:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0020199:	e8 e9 41 00 00       	call   c0024387 <__floatsisf>
c002019e:	5a                   	pop    edx
c002019f:	89 c6                	mov    esi,eax
c00201a1:	ff 33                	push   DWORD PTR [ebx]
c00201a3:	e8 df 41 00 00       	call   c0024387 <__floatsisf>
c00201a8:	59                   	pop    ecx
c00201a9:	5a                   	pop    edx
c00201aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00201ad:	50                   	push   eax
c00201ae:	e8 e6 3d 00 00       	call   c0023f99 <__mulsf3>
c00201b3:	59                   	pop    ecx
c00201b4:	5a                   	pop    edx
c00201b5:	50                   	push   eax
c00201b6:	56                   	push   esi
c00201b7:	e8 a0 3f 00 00       	call   c002415c <__divsf3>
c00201bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00201bf:	e8 93 54 00 00       	call   c0025657 <__extendsfdf2>
c00201c4:	59                   	pop    ecx
c00201c5:	5e                   	pop    esi
c00201c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00201ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00201ce:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00201d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00201da:	50                   	push   eax
c00201db:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00201de:	e8 53 83 fe ff       	call   c0008536 <src_process>
c00201e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00201e7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00201ea:	83 c4 0c             	add    esp,0xc
c00201ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00201f0:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00201f3:	29 d0                	sub    eax,edx
c00201f5:	c1 e0 02             	shl    eax,0x2
c00201f8:	50                   	push   eax
c00201f9:	8d 04 91             	lea    eax,[ecx+edx*4]
c00201fc:	50                   	push   eax
c00201fd:	51                   	push   ecx
c00201fe:	e8 0c 04 fe ff       	call   c000060f <memmove>
c0020203:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020207:	83 c4 44             	add    esp,0x44
c002020a:	5b                   	pop    ebx
c002020b:	5e                   	pop    esi
c002020c:	c3                   	ret    
c002020d:	90                   	nop

c002020e <SoundChannel::buffer8(unsigned char*, int)>:
c002020e:	55                   	push   ebp
c002020f:	57                   	push   edi
c0020210:	56                   	push   esi
c0020211:	53                   	push   ebx
c0020212:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020216:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002021a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002021d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020221:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0020224:	74 7a                	je     c00202a0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020226:	85 ff                	test   edi,edi
c0020228:	7e 76                	jle    c00202a0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002022a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002022e:	8d 70 01             	lea    esi,[eax+0x1]
c0020231:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0020234:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020237:	8b 1c 9d 40 c9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd36c0]
c002023e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0020241:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0020244:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0020247:	74 5e                	je     c00202a7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0020249:	83 ff 01             	cmp    edi,0x1
c002024c:	74 4b                	je     c0020299 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002024e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0020252:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0020255:	8d 70 01             	lea    esi,[eax+0x1]
c0020258:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002025b:	8b 1c 9d 40 c9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd36c0]
c0020262:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0020265:	b8 02 00 00 00       	mov    eax,0x2
c002026a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002026d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0020270:	75 23                	jne    c0020295 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0020272:	eb 27                	jmp    c002029b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0020274:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0020279:	8d 71 01             	lea    esi,[ecx+0x1]
c002027c:	40                   	inc    eax
c002027d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020280:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0020283:	8b 1c 9d 40 c9 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd36c0]
c002028a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002028d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0020290:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0020293:	74 06                	je     c002029b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0020295:	39 c7                	cmp    edi,eax
c0020297:	75 db                	jne    c0020274 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0020299:	89 f8                	mov    eax,edi
c002029b:	5b                   	pop    ebx
c002029c:	5e                   	pop    esi
c002029d:	5f                   	pop    edi
c002029e:	5d                   	pop    ebp
c002029f:	c3                   	ret    
c00202a0:	5b                   	pop    ebx
c00202a1:	31 c0                	xor    eax,eax
c00202a3:	5e                   	pop    esi
c00202a4:	5f                   	pop    edi
c00202a5:	5d                   	pop    ebp
c00202a6:	c3                   	ret    
c00202a7:	b8 01 00 00 00       	mov    eax,0x1
c00202ac:	eb ed                	jmp    c002029b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00202ae <SoundDevice::SoundDevice(char const*)>:
c00202ae:	83 ec 1c             	sub    esp,0x1c
c00202b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202b5:	83 ec 08             	sub    esp,0x8
c00202b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00202bc:	50                   	push   eax
c00202bd:	e8 62 39 ff ff       	call   c0013c24 <Device::Device(char const*)>
c00202c2:	83 c4 10             	add    esp,0x10
c00202c5:	ba e8 92 02 c0       	mov    edx,0xc00292e8
c00202ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202ce:	89 10                	mov    DWORD PTR [eax],edx
c00202d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202d4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00202de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00202ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00202f4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00202f9:	7f 19                	jg     c0020314 <SoundDevice::SoundDevice(char const*)+0x66>
c00202fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020303:	83 c2 54             	add    edx,0x54
c0020306:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002030e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020312:	eb e0                	jmp    c00202f4 <SoundDevice::SoundDevice(char const*)+0x46>
c0020314:	90                   	nop
c0020315:	83 c4 1c             	add    esp,0x1c
c0020318:	c3                   	ret    
c0020319:	90                   	nop

c002031a <SoundDevice::~SoundDevice()>:
c002031a:	53                   	push   ebx
c002031b:	83 ec 18             	sub    esp,0x18
c002031e:	ba e8 92 02 c0       	mov    edx,0xc00292e8
c0020323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020327:	89 10                	mov    DWORD PTR [eax],edx
c0020329:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020331:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0020336:	7f 46                	jg     c002037e <SoundDevice::~SoundDevice()+0x64>
c0020338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002033c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020340:	83 c2 54             	add    edx,0x54
c0020343:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0020347:	85 c0                	test   eax,eax
c0020349:	74 2d                	je     c0020378 <SoundDevice::~SoundDevice()+0x5e>
c002034b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002034f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020353:	83 c2 54             	add    edx,0x54
c0020356:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002035a:	85 db                	test   ebx,ebx
c002035c:	74 1a                	je     c0020378 <SoundDevice::~SoundDevice()+0x5e>
c002035e:	83 ec 0c             	sub    esp,0xc
c0020361:	53                   	push   ebx
c0020362:	e8 21 fc ff ff       	call   c001ff88 <SoundChannel::~SoundChannel()>
c0020367:	83 c4 10             	add    esp,0x10
c002036a:	83 ec 08             	sub    esp,0x8
c002036d:	6a 2c                	push   0x2c
c002036f:	53                   	push   ebx
c0020370:	e8 f0 21 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0020375:	83 c4 10             	add    esp,0x10
c0020378:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002037c:	eb b3                	jmp    c0020331 <SoundDevice::~SoundDevice()+0x17>
c002037e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020382:	83 ec 0c             	sub    esp,0xc
c0020385:	50                   	push   eax
c0020386:	e8 7b 35 ff ff       	call   c0013906 <Device::~Device()>
c002038b:	83 c4 10             	add    esp,0x10
c002038e:	90                   	nop
c002038f:	83 c4 18             	add    esp,0x18
c0020392:	5b                   	pop    ebx
c0020393:	c3                   	ret    

c0020394 <SoundDevice::~SoundDevice()>:
c0020394:	83 ec 0c             	sub    esp,0xc
c0020397:	83 ec 0c             	sub    esp,0xc
c002039a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002039e:	e8 77 ff ff ff       	call   c002031a <SoundDevice::~SoundDevice()>
c00203a3:	83 c4 10             	add    esp,0x10
c00203a6:	83 ec 08             	sub    esp,0x8
c00203a9:	68 e4 01 00 00       	push   0x1e4
c00203ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203b2:	e8 ae 21 ff ff       	call   c0012565 <operator delete(void*, unsigned long)>
c00203b7:	83 c4 10             	add    esp,0x10
c00203ba:	83 c4 0c             	add    esp,0xc
c00203bd:	c3                   	ret    

c00203be <SoundDevice::getFreeChannelNum()>:
c00203be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00203c2:	31 c0                	xor    eax,eax
c00203c4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00203cc:	74 09                	je     c00203d7 <SoundDevice::getFreeChannelNum()+0x19>
c00203ce:	40                   	inc    eax
c00203cf:	83 f8 20             	cmp    eax,0x20
c00203d2:	75 f0                	jne    c00203c4 <SoundDevice::getFreeChannelNum()+0x6>
c00203d4:	83 c8 ff             	or     eax,0xffffffff
c00203d7:	c3                   	ret    

c00203d8 <SoundDevice::addChannel(SoundChannel*)>:
c00203d8:	56                   	push   esi
c00203d9:	53                   	push   ebx
c00203da:	51                   	push   ecx
c00203db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00203df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00203e3:	53                   	push   ebx
c00203e4:	e8 d5 ff ff ff       	call   c00203be <SoundDevice::getFreeChannelNum()>
c00203e9:	5a                   	pop    edx
c00203ea:	83 f8 ff             	cmp    eax,0xffffffff
c00203ed:	74 51                	je     c0020440 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00203ef:	85 f6                	test   esi,esi
c00203f1:	74 4d                	je     c0020440 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00203f3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00203fa:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0020401:	75 30                	jne    c0020433 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0020403:	83 ec 0c             	sub    esp,0xc
c0020406:	56                   	push   esi
c0020407:	e8 42 fd ff ff       	call   c002014e <SoundChannel::getSampleRate()>
c002040c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0020412:	89 34 24             	mov    DWORD PTR [esp],esi
c0020415:	e8 3c fd ff ff       	call   c0020156 <SoundChannel::getBits()>
c002041a:	83 c4 0c             	add    esp,0xc
c002041d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0020423:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020425:	50                   	push   eax
c0020426:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002042c:	53                   	push   ebx
c002042d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0020430:	83 c4 10             	add    esp,0x10
c0020433:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0020439:	b8 01 00 00 00       	mov    eax,0x1
c002043e:	eb 03                	jmp    c0020443 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0020440:	83 c8 ff             	or     eax,0xffffffff
c0020443:	5a                   	pop    edx
c0020444:	5b                   	pop    ebx
c0020445:	5e                   	pop    esi
c0020446:	c3                   	ret    
c0020447:	90                   	nop

c0020448 <SoundDevice::removeChannel(int)>:
c0020448:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002044c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020450:	83 fa 1f             	cmp    edx,0x1f
c0020453:	77 23                	ja     c0020478 <SoundDevice::removeChannel(int)+0x30>
c0020455:	8d 14 90             	lea    edx,[eax+edx*4]
c0020458:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002045f:	74 17                	je     c0020478 <SoundDevice::removeChannel(int)+0x30>
c0020461:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002046b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0020471:	75 05                	jne    c0020478 <SoundDevice::removeChannel(int)+0x30>
c0020473:	8b 00                	mov    eax,DWORD PTR [eax]
c0020475:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0020478:	c3                   	ret    
c0020479:	90                   	nop

c002047a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002047a:	57                   	push   edi
c002047b:	56                   	push   esi
c002047c:	53                   	push   ebx
c002047d:	31 db                	xor    ebx,ebx
c002047f:	83 ec 10             	sub    esp,0x10
c0020482:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020486:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002048a:	0f 8d cb 00 00 00    	jge    c002055b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0020490:	83 ec 0c             	sub    esp,0xc
c0020493:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020497:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002049a:	e8 b8 51 00 00       	call   c0025657 <__extendsfdf2>
c002049f:	83 c4 10             	add    esp,0x10
c00204a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204aa:	68 00 00 f0 3f       	push   0x3ff00000
c00204af:	6a 00                	push   0x0
c00204b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00204b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00204b9:	e8 25 41 00 00       	call   c00245e3 <__adddf3>
c00204be:	83 c4 10             	add    esp,0x10
c00204c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204c9:	68 00 00 e0 3f       	push   0x3fe00000
c00204ce:	6a 00                	push   0x0
c00204d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00204d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00204d8:	e8 83 47 00 00       	call   c0024c60 <__muldf3>
c00204dd:	83 c4 10             	add    esp,0x10
c00204e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204e8:	68 00 00 60 40       	push   0x40600000
c00204ed:	6a 00                	push   0x0
c00204ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00204f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00204f7:	e8 64 47 00 00       	call   c0024c60 <__muldf3>
c00204fc:	59                   	pop    ecx
c00204fd:	5f                   	pop    edi
c00204fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020502:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0020506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002050a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002050e:	e8 20 50 00 00       	call   c0025533 <__truncdfsf2>
c0020513:	5a                   	pop    edx
c0020514:	89 c7                	mov    edi,eax
c0020516:	59                   	pop    ecx
c0020517:	68 00 00 fe 42       	push   0x42fe0000
c002051c:	50                   	push   eax
c002051d:	e8 bb 40 00 00       	call   c00245dd <__gesf2>
c0020522:	83 c4 10             	add    esp,0x10
c0020525:	85 c0                	test   eax,eax
c0020527:	78 06                	js     c002052f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0020529:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002052d:	eb 26                	jmp    c0020555 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002052f:	50                   	push   eax
c0020530:	50                   	push   eax
c0020531:	6a 00                	push   0x0
c0020533:	57                   	push   edi
c0020534:	e8 a8 40 00 00       	call   c00245e1 <__lesf2>
c0020539:	83 c4 10             	add    esp,0x10
c002053c:	85 c0                	test   eax,eax
c002053e:	7f 06                	jg     c0020546 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0020540:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0020544:	eb 0f                	jmp    c0020555 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020546:	83 ec 0c             	sub    esp,0xc
c0020549:	57                   	push   edi
c002054a:	e8 9d 51 00 00       	call   c00256ec <lrintf>
c002054f:	83 c4 10             	add    esp,0x10
c0020552:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0020555:	43                   	inc    ebx
c0020556:	e9 2b ff ff ff       	jmp    c0020486 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002055b:	83 c4 10             	add    esp,0x10
c002055e:	5b                   	pop    ebx
c002055f:	5e                   	pop    esi
c0020560:	5f                   	pop    edi
c0020561:	c3                   	ret    

c0020562 <SoundDevice::getAudio(int, float*, float*)>:
c0020562:	55                   	push   ebp
c0020563:	57                   	push   edi
c0020564:	56                   	push   esi
c0020565:	53                   	push   ebx
c0020566:	31 db                	xor    ebx,ebx
c0020568:	83 ec 20             	sub    esp,0x20
c002056b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002056f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020573:	c1 e0 02             	shl    eax,0x2
c0020576:	50                   	push   eax
c0020577:	6a 00                	push   0x0
c0020579:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002057d:	e8 fb 00 fe ff       	call   c000067d <memset>
c0020582:	83 c4 10             	add    esp,0x10
c0020585:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020589:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0020590:	85 c0                	test   eax,eax
c0020592:	0f 84 d7 00 00 00    	je     c002066f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020598:	83 ec 0c             	sub    esp,0xc
c002059b:	50                   	push   eax
c002059c:	e8 a5 fb ff ff       	call   c0020146 <SoundChannel::paused()>
c00205a1:	83 c4 10             	add    esp,0x10
c00205a4:	84 c0                	test   al,al
c00205a6:	0f 85 c3 00 00 00    	jne    c002066f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00205ac:	83 ec 0c             	sub    esp,0xc
c00205af:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00205b6:	e8 19 fa ff ff       	call   c001ffd4 <SoundChannel::getVolume()>
c00205bb:	83 c4 10             	add    esp,0x10
c00205be:	85 c0                	test   eax,eax
c00205c0:	0f 84 a9 00 00 00    	je     c002066f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00205c6:	83 ec 0c             	sub    esp,0xc
c00205c9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00205d0:	e8 ff f9 ff ff       	call   c001ffd4 <SoundChannel::getVolume()>
c00205d5:	83 ec 0c             	sub    esp,0xc
c00205d8:	50                   	push   eax
c00205d9:	e8 a9 3d 00 00       	call   c0024387 <__floatsisf>
c00205de:	59                   	pop    ecx
c00205df:	5d                   	pop    ebp
c00205e0:	31 ed                	xor    ebp,ebp
c00205e2:	68 00 00 c8 42       	push   0x42c80000
c00205e7:	50                   	push   eax
c00205e8:	e8 6f 3b 00 00       	call   c002415c <__divsf3>
c00205ed:	83 c4 10             	add    esp,0x10
c00205f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00205f8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00205fe:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020602:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020609:	e8 60 fb ff ff       	call   c002016e <SoundChannel::unbuffer(float*, int, int)>
c002060e:	83 c4 20             	add    esp,0x20
c0020611:	89 c1                	mov    ecx,eax
c0020613:	39 cd                	cmp    ebp,ecx
c0020615:	7d 52                	jge    c0020669 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020617:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002061b:	50                   	push   eax
c002061c:	50                   	push   eax
c002061d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020621:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020624:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020628:	e8 6c 39 00 00       	call   c0023f99 <__mulsf3>
c002062d:	5a                   	pop    edx
c002062e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020632:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0020638:	e8 4a 3d 00 00       	call   c0024387 <__floatsisf>
c002063d:	59                   	pop    ecx
c002063e:	5a                   	pop    edx
c002063f:	50                   	push   eax
c0020640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020644:	e8 13 3b 00 00       	call   c002415c <__divsf3>
c0020649:	59                   	pop    ecx
c002064a:	5a                   	pop    edx
c002064b:	50                   	push   eax
c002064c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020650:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020653:	e8 1e 36 00 00       	call   c0023c76 <__addsf3>
c0020658:	83 c4 10             	add    esp,0x10
c002065b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002065f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020663:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0020666:	45                   	inc    ebp
c0020667:	eb aa                	jmp    c0020613 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0020669:	39 cf                	cmp    edi,ecx
c002066b:	7e 02                	jle    c002066f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002066d:	89 cf                	mov    edi,ecx
c002066f:	43                   	inc    ebx
c0020670:	83 fb 20             	cmp    ebx,0x20
c0020673:	0f 85 10 ff ff ff    	jne    c0020589 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0020679:	83 c4 1c             	add    esp,0x1c
c002067c:	89 f8                	mov    eax,edi
c002067e:	5b                   	pop    ebx
c002067f:	5e                   	pop    esi
c0020680:	5f                   	pop    edi
c0020681:	5d                   	pop    ebp
c0020682:	c3                   	ret    
c0020683:	90                   	nop

c0020684 <PCI::open(int, int, void*)>:
c0020684:	83 ec 18             	sub    esp,0x18
c0020687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002068b:	8b 10                	mov    edx,DWORD PTR [eax]
c002068d:	50                   	push   eax
c002068e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0020691:	31 c0                	xor    eax,eax
c0020693:	83 c4 1c             	add    esp,0x1c
c0020696:	c3                   	ret    
c0020697:	90                   	nop

c0020698 <PCI::close(int, int, void*)>:
c0020698:	31 c0                	xor    eax,eax
c002069a:	c3                   	ret    
c002069b:	90                   	nop

c002069c <PCI::PCI()>:
c002069c:	83 ec 0c             	sub    esp,0xc
c002069f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a3:	83 ec 08             	sub    esp,0x8
c00206a6:	68 18 93 02 c0       	push   0xc0029318
c00206ab:	50                   	push   eax
c00206ac:	e8 2f 2c ff ff       	call   c00132e0 <Bus::Bus(char const*)>
c00206b1:	83 c4 10             	add    esp,0x10
c00206b4:	ba a4 93 02 c0       	mov    edx,0xc00293a4
c00206b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206bd:	89 10                	mov    DWORD PTR [eax],edx
c00206bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00206c9:	0f b6 d0             	movzx  edx,al
c00206cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206d0:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00206d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00206e1:	0f b6 d0             	movzx  edx,al
c00206e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206e8:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00206ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206f1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00206f7:	8d 50 01             	lea    edx,[eax+0x1]
c00206fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206fe:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020704:	0f b6 d0             	movzx  edx,al
c0020707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002070b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002070f:	83 c9 c0             	or     ecx,0xffffffc0
c0020712:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020716:	90                   	nop
c0020717:	83 c4 0c             	add    esp,0xc
c002071a:	c3                   	ret    
c002071b:	90                   	nop

c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002071c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020720:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020725:	89 ca                	mov    edx,ecx
c0020727:	c1 e0 10             	shl    eax,0x10
c002072a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020730:	09 d0                	or     eax,edx
c0020732:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020737:	c1 e2 08             	shl    edx,0x8
c002073a:	09 d0                	or     eax,edx
c002073c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020741:	c1 e2 0b             	shl    edx,0xb
c0020744:	09 d0                	or     eax,edx
c0020746:	ba f8 0c 00 00       	mov    edx,0xcf8
c002074b:	0d 00 00 00 80       	or     eax,0x80000000
c0020750:	ef                   	out    dx,eax
c0020751:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020756:	ed                   	in     eax,dx
c0020757:	83 e1 02             	and    ecx,0x2
c002075a:	0f b6 c9             	movzx  ecx,cl
c002075d:	c1 e1 03             	shl    ecx,0x3
c0020760:	d3 e8                	shr    eax,cl
c0020762:	c3                   	ret    
c0020763:	90                   	nop

c0020764 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020764:	6a 00                	push   0x0
c0020766:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002076b:	50                   	push   eax
c002076c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020771:	50                   	push   eax
c0020772:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020777:	50                   	push   eax
c0020778:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002077c:	e8 9b ff ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020781:	83 c4 14             	add    esp,0x14
c0020784:	c3                   	ret    
c0020785:	90                   	nop

c0020786 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020786:	6a 0e                	push   0xe
c0020788:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002078d:	50                   	push   eax
c002078e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020793:	50                   	push   eax
c0020794:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020799:	50                   	push   eax
c002079a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002079e:	e8 79 ff ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207a3:	83 c4 14             	add    esp,0x14
c00207a6:	0f b6 c0             	movzx  eax,al
c00207a9:	c3                   	ret    

c00207aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00207aa:	55                   	push   ebp
c00207ab:	57                   	push   edi
c00207ac:	56                   	push   esi
c00207ad:	53                   	push   ebx
c00207ae:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00207b3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00207b8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00207bd:	6a 0a                	push   0xa
c00207bf:	56                   	push   esi
c00207c0:	55                   	push   ebp
c00207c1:	57                   	push   edi
c00207c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00207c6:	e8 51 ff ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207cb:	6a 0a                	push   0xa
c00207cd:	89 c3                	mov    ebx,eax
c00207cf:	56                   	push   esi
c00207d0:	0f b6 db             	movzx  ebx,bl
c00207d3:	55                   	push   ebp
c00207d4:	57                   	push   edi
c00207d5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00207d9:	e8 3e ff ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207de:	83 c4 28             	add    esp,0x28
c00207e1:	25 00 ff 00 00       	and    eax,0xff00
c00207e6:	09 d8                	or     eax,ebx
c00207e8:	5b                   	pop    ebx
c00207e9:	5e                   	pop    esi
c00207ea:	5f                   	pop    edi
c00207eb:	5d                   	pop    ebp
c00207ec:	c3                   	ret    
c00207ed:	90                   	nop

c00207ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00207ee:	6a 08                	push   0x8
c00207f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00207f5:	50                   	push   eax
c00207f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00207fb:	50                   	push   eax
c00207fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020801:	50                   	push   eax
c0020802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020806:	e8 11 ff ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002080b:	83 c4 14             	add    esp,0x14
c002080e:	0f b6 c4             	movzx  eax,ah
c0020811:	c3                   	ret    

c0020812 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020812:	6a 08                	push   0x8
c0020814:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020819:	50                   	push   eax
c002081a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002081f:	50                   	push   eax
c0020820:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020825:	50                   	push   eax
c0020826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002082a:	e8 ed fe ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002082f:	83 c4 14             	add    esp,0x14
c0020832:	c3                   	ret    
c0020833:	90                   	nop

c0020834 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020834:	6a 3c                	push   0x3c
c0020836:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002083b:	50                   	push   eax
c002083c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020841:	50                   	push   eax
c0020842:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020847:	50                   	push   eax
c0020848:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002084c:	e8 cb fe ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020851:	83 c4 14             	add    esp,0x14
c0020854:	c3                   	ret    
c0020855:	90                   	nop

c0020856 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020856:	6a 18                	push   0x18
c0020858:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002085d:	50                   	push   eax
c002085e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020863:	50                   	push   eax
c0020864:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020869:	50                   	push   eax
c002086a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002086e:	e8 a9 fe ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020873:	83 c4 14             	add    esp,0x14
c0020876:	0f b6 c4             	movzx  eax,ah
c0020879:	c3                   	ret    

c002087a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002087a:	55                   	push   ebp
c002087b:	57                   	push   edi
c002087c:	56                   	push   esi
c002087d:	53                   	push   ebx
c002087e:	50                   	push   eax
c002087f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020883:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0020888:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002088d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0020892:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0020899:	8d 43 12             	lea    eax,[ebx+0x12]
c002089c:	83 c3 10             	add    ebx,0x10
c002089f:	0f b6 c0             	movzx  eax,al
c00208a2:	0f b6 db             	movzx  ebx,bl
c00208a5:	50                   	push   eax
c00208a6:	51                   	push   ecx
c00208a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00208ab:	57                   	push   edi
c00208ac:	55                   	push   ebp
c00208ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00208b1:	e8 66 fe ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00208b6:	53                   	push   ebx
c00208b7:	89 c6                	mov    esi,eax
c00208b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208bd:	c1 e6 10             	shl    esi,0x10
c00208c0:	51                   	push   ecx
c00208c1:	57                   	push   edi
c00208c2:	55                   	push   ebp
c00208c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00208c7:	e8 50 fe ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00208cc:	83 c4 2c             	add    esp,0x2c
c00208cf:	0f b7 c0             	movzx  eax,ax
c00208d2:	5b                   	pop    ebx
c00208d3:	09 f0                	or     eax,esi
c00208d5:	5e                   	pop    esi
c00208d6:	5f                   	pop    edi
c00208d7:	5d                   	pop    ebp
c00208d8:	c3                   	ret    
c00208d9:	90                   	nop

c00208da <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00208da:	53                   	push   ebx
c00208db:	ba f8 0c 00 00       	mov    edx,0xcf8
c00208e0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00208e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00208e9:	c1 e1 10             	shl    ecx,0x10
c00208ec:	25 fc 00 00 00       	and    eax,0xfc
c00208f1:	09 c1                	or     ecx,eax
c00208f3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00208f8:	c1 e0 08             	shl    eax,0x8
c00208fb:	09 c1                	or     ecx,eax
c00208fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020902:	c1 e0 0b             	shl    eax,0xb
c0020905:	09 c1                	or     ecx,eax
c0020907:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002090d:	89 c8                	mov    eax,ecx
c002090f:	ef                   	out    dx,eax
c0020910:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020915:	ed                   	in     eax,dx
c0020916:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002091b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020920:	74 0a                	je     c002092c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020922:	0f b7 d8             	movzx  ebx,ax
c0020925:	89 d0                	mov    eax,edx
c0020927:	c1 e0 10             	shl    eax,0x10
c002092a:	eb 05                	jmp    c0020931 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002092c:	66 31 c0             	xor    ax,ax
c002092f:	89 d3                	mov    ebx,edx
c0020931:	09 c3                	or     ebx,eax
c0020933:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020938:	89 c8                	mov    eax,ecx
c002093a:	ef                   	out    dx,eax
c002093b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020940:	89 d8                	mov    eax,ebx
c0020942:	ef                   	out    dx,eax
c0020943:	5b                   	pop    ebx
c0020944:	c3                   	ret    
c0020945:	90                   	nop

c0020946 <PCI::checkBus(unsigned char)>:
c0020946:	56                   	push   esi
c0020947:	53                   	push   ebx
c0020948:	31 db                	xor    ebx,ebx
c002094a:	51                   	push   ecx
c002094b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020950:	52                   	push   edx
c0020951:	53                   	push   ebx
c0020952:	43                   	inc    ebx
c0020953:	56                   	push   esi
c0020954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020958:	e8 29 03 00 00       	call   c0020c86 <PCI::checkDevice(unsigned char, unsigned char)>
c002095d:	83 c4 10             	add    esp,0x10
c0020960:	83 fb 20             	cmp    ebx,0x20
c0020963:	75 eb                	jne    c0020950 <PCI::checkBus(unsigned char)+0xa>
c0020965:	58                   	pop    eax
c0020966:	5b                   	pop    ebx
c0020967:	5e                   	pop    esi
c0020968:	c3                   	ret    
c0020969:	90                   	nop

c002096a <PCI::foundDevice(PCIDeviceInfo)>:
c002096a:	55                   	push   ebp
c002096b:	57                   	push   edi
c002096c:	56                   	push   esi
c002096d:	53                   	push   ebx
c002096e:	83 ec 1c             	sub    esp,0x1c
c0020971:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020975:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002097b:	0f 84 51 01 00 00    	je     c0020ad2 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020981:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0020985:	66 81 f9 06 04       	cmp    cx,0x406
c002098a:	75 2c                	jne    c00209b8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002098c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0020991:	50                   	push   eax
c0020992:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0020997:	50                   	push   eax
c0020998:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002099d:	50                   	push   eax
c002099e:	56                   	push   esi
c002099f:	e8 b2 fe ff ff       	call   c0020856 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00209a4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00209a8:	0f b6 c0             	movzx  eax,al
c00209ab:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00209af:	83 c4 2c             	add    esp,0x2c
c00209b2:	5b                   	pop    ebx
c00209b3:	5e                   	pop    esi
c00209b4:	5f                   	pop    edi
c00209b5:	5d                   	pop    ebp
c00209b6:	eb 8e                	jmp    c0020946 <PCI::checkBus(unsigned char)>
c00209b8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00209bc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00209c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209c6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00209ca:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00209ce:	88 d3                	mov    bl,dl
c00209d0:	85 c0                	test   eax,eax
c00209d2:	74 33                	je     c0020a07 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00209d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00209d7:	85 d2                	test   edx,edx
c00209d9:	74 28                	je     c0020a03 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00209db:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00209e1:	31 ef                	xor    edi,ebp
c00209e3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00209e9:	75 18                	jne    c0020a03 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00209eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00209ef:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00209f5:	75 0c                	jne    c0020a03 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00209f7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00209fd:	0f 84 cf 00 00 00    	je     c0020ad2 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a05:	eb c9                	jmp    c00209d0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020a07:	66 81 f9 01 06       	cmp    cx,0x601
c0020a0c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020a10:	75 18                	jne    c0020a2a <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c0020a12:	83 ec 0c             	sub    esp,0xc
c0020a15:	68 58 01 00 00       	push   0x158
c0020a1a:	e8 b3 ea fe ff       	call   c000f4d2 <malloc>
c0020a1f:	59                   	pop    ecx
c0020a20:	89 c5                	mov    ebp,eax
c0020a22:	5f                   	pop    edi
c0020a23:	68 20 93 02 c0       	push   0xc0029320
c0020a28:	eb 7d                	jmp    c0020aa7 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020a2a:	66 81 f9 01 01       	cmp    cx,0x101
c0020a2f:	75 60                	jne    c0020a91 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020a31:	83 ec 0c             	sub    esp,0xc
c0020a34:	68 70 02 00 00       	push   0x270
c0020a39:	e8 94 ea fe ff       	call   c000f4d2 <malloc>
c0020a3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a41:	89 c5                	mov    ebp,eax
c0020a43:	e8 02 03 00 00       	call   c0020d4a <IDE::IDE()>
c0020a48:	58                   	pop    eax
c0020a49:	5a                   	pop    edx
c0020a4a:	55                   	push   ebp
c0020a4b:	56                   	push   esi
c0020a4c:	e8 e3 2f ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0020a51:	83 ec 1c             	sub    esp,0x1c
c0020a54:	b9 09 00 00 00       	mov    ecx,0x9
c0020a59:	fc                   	cld    
c0020a5a:	89 e7                	mov    edi,esp
c0020a5c:	89 de                	mov    esi,ebx
c0020a5e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020a60:	55                   	push   ebp
c0020a61:	e8 d8 2e ff ff       	call   c001393e <Device::preOpenPCI(PCIDeviceInfo)>
c0020a66:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020a69:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020a6d:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0020a75:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020a7d:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0020a85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020a88:	83 c4 4c             	add    esp,0x4c
c0020a8b:	5b                   	pop    ebx
c0020a8c:	5e                   	pop    esi
c0020a8d:	5f                   	pop    edi
c0020a8e:	5d                   	pop    ebp
c0020a8f:	ff e0                	jmp    eax
c0020a91:	83 ec 0c             	sub    esp,0xc
c0020a94:	68 58 01 00 00       	push   0x158
c0020a99:	e8 34 ea fe ff       	call   c000f4d2 <malloc>
c0020a9e:	59                   	pop    ecx
c0020a9f:	89 c5                	mov    ebp,eax
c0020aa1:	5f                   	pop    edi
c0020aa2:	68 3f 93 02 c0       	push   0xc002933f
c0020aa7:	55                   	push   ebp
c0020aa8:	e8 7d 32 ff ff       	call   c0013d2a <DriverlessDevice::DriverlessDevice(char const*)>
c0020aad:	58                   	pop    eax
c0020aae:	5a                   	pop    edx
c0020aaf:	55                   	push   ebp
c0020ab0:	56                   	push   esi
c0020ab1:	e8 7e 2f ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0020ab6:	b9 09 00 00 00       	mov    ecx,0x9
c0020abb:	fc                   	cld    
c0020abc:	89 df                	mov    edi,ebx
c0020abe:	89 de                	mov    esi,ebx
c0020ac0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020ac2:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0020ac6:	83 c4 2c             	add    esp,0x2c
c0020ac9:	5b                   	pop    ebx
c0020aca:	5e                   	pop    esi
c0020acb:	5f                   	pop    edi
c0020acc:	5d                   	pop    ebp
c0020acd:	e9 6c 2e ff ff       	jmp    c001393e <Device::preOpenPCI(PCIDeviceInfo)>
c0020ad2:	83 c4 1c             	add    esp,0x1c
c0020ad5:	5b                   	pop    ebx
c0020ad6:	5e                   	pop    esi
c0020ad7:	5f                   	pop    edi
c0020ad8:	5d                   	pop    ebp
c0020ad9:	c3                   	ret    

c0020ada <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020ada:	55                   	push   ebp
c0020adb:	57                   	push   edi
c0020adc:	56                   	push   esi
c0020add:	53                   	push   ebx
c0020ade:	83 ec 5c             	sub    esp,0x5c
c0020ae1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0020ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020ae9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020aed:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0020af2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020af6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020afa:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020aff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020b03:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020b08:	6a 0c                	push   0xc
c0020b0a:	55                   	push   ebp
c0020b0b:	53                   	push   ebx
c0020b0c:	57                   	push   edi
c0020b0d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020b14:	e8 03 fc ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b19:	55                   	push   ebp
c0020b1a:	53                   	push   ebx
c0020b1b:	57                   	push   edi
c0020b1c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020b23:	e8 82 fc ff ff       	call   c00207aa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020b28:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020b2d:	83 c4 24             	add    esp,0x24
c0020b30:	55                   	push   ebp
c0020b31:	53                   	push   ebx
c0020b32:	57                   	push   edi
c0020b33:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020b37:	e8 f8 fc ff ff       	call   c0020834 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020b3c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020b40:	6a 3c                	push   0x3c
c0020b42:	55                   	push   ebp
c0020b43:	53                   	push   ebx
c0020b44:	57                   	push   edi
c0020b45:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020b4c:	e8 cb fb ff ff       	call   c002071c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b51:	0f b6 c4             	movzx  eax,ah
c0020b54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020b58:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020b5c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020b60:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0020b65:	83 c4 24             	add    esp,0x24
c0020b68:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020b6e:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0020b75:	74 6c                	je     c0020be3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020b77:	31 f6                	xor    esi,esi
c0020b79:	8b 15 88 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa88
c0020b7f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020b85:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0020b8b:	7e 56                	jle    c0020be3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020b8d:	8d 14 f2             	lea    edx,[edx+esi*8]
c0020b90:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0020b97:	39 cb                	cmp    ebx,ecx
c0020b99:	75 45                	jne    c0020be0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020b9b:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0020ba2:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0020ba6:	75 38                	jne    c0020be0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020ba8:	83 ec 0c             	sub    esp,0xc
c0020bab:	68 59 93 02 c0       	push   0xc0029359
c0020bb0:	e8 90 1a ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0020bb5:	8b 15 88 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa88
c0020bbb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020bc1:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0020bc9:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0020bcd:	52                   	push   edx
c0020bce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020bd2:	53                   	push   ebx
c0020bd3:	68 7e 93 02 c0       	push   0xc002937e
c0020bd8:	e8 68 1a ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0020bdd:	83 c4 20             	add    esp,0x20
c0020be0:	46                   	inc    esi
c0020be1:	eb 96                	jmp    c0020b79 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0020be3:	31 d2                	xor    edx,edx
c0020be5:	83 ec 0c             	sub    esp,0xc
c0020be8:	55                   	push   ebp
c0020be9:	53                   	push   ebx
c0020bea:	57                   	push   edi
c0020beb:	52                   	push   edx
c0020bec:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020bf0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020bf7:	e8 7e fc ff ff       	call   c002087a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020bfc:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020c00:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020c04:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020c08:	42                   	inc    edx
c0020c09:	83 c4 20             	add    esp,0x20
c0020c0c:	83 fa 06             	cmp    edx,0x6
c0020c0f:	75 d4                	jne    c0020be5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020c11:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020c15:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020c19:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020c1d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020c21:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020c25:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020c29:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020c2e:	86 e0                	xchg   al,ah
c0020c30:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020c35:	55                   	push   ebp
c0020c36:	53                   	push   ebx
c0020c37:	57                   	push   edi
c0020c38:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020c3c:	e8 ad fb ff ff       	call   c00207ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020c41:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020c45:	55                   	push   ebp
c0020c46:	53                   	push   ebx
c0020c47:	57                   	push   edi
c0020c48:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020c4f:	e8 10 fb ff ff       	call   c0020764 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020c54:	83 ec 0c             	sub    esp,0xc
c0020c57:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020c5c:	b9 09 00 00 00       	mov    ecx,0x9
c0020c61:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0020c65:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020c69:	fc                   	cld    
c0020c6a:	89 e7                	mov    edi,esp
c0020c6c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020c6e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0020c75:	e8 f0 fc ff ff       	call   c002096a <PCI::foundDevice(PCIDeviceInfo)>
c0020c7a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020c80:	5b                   	pop    ebx
c0020c81:	5e                   	pop    esi
c0020c82:	5f                   	pop    edi
c0020c83:	5d                   	pop    ebp
c0020c84:	c3                   	ret    
c0020c85:	90                   	nop

c0020c86 <PCI::checkDevice(unsigned char, unsigned char)>:
c0020c86:	55                   	push   ebp
c0020c87:	57                   	push   edi
c0020c88:	56                   	push   esi
c0020c89:	53                   	push   ebx
c0020c8a:	83 ec 0c             	sub    esp,0xc
c0020c8d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0020c91:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0020c96:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020c9b:	6a 00                	push   0x0
c0020c9d:	56                   	push   esi
c0020c9e:	57                   	push   edi
c0020c9f:	55                   	push   ebp
c0020ca0:	e8 bf fa ff ff       	call   c0020764 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020ca5:	6a 00                	push   0x0
c0020ca7:	56                   	push   esi
c0020ca8:	57                   	push   edi
c0020ca9:	55                   	push   ebp
c0020caa:	e8 2b fe ff ff       	call   c0020ada <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020caf:	83 c4 20             	add    esp,0x20
c0020cb2:	6a 00                	push   0x0
c0020cb4:	56                   	push   esi
c0020cb5:	57                   	push   edi
c0020cb6:	55                   	push   ebp
c0020cb7:	e8 ca fa ff ff       	call   c0020786 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020cbc:	83 c4 10             	add    esp,0x10
c0020cbf:	84 c0                	test   al,al
c0020cc1:	79 27                	jns    c0020cea <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0020cc3:	bb 01 00 00 00       	mov    ebx,0x1
c0020cc8:	53                   	push   ebx
c0020cc9:	56                   	push   esi
c0020cca:	57                   	push   edi
c0020ccb:	55                   	push   ebp
c0020ccc:	e8 93 fa ff ff       	call   c0020764 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020cd1:	83 c4 10             	add    esp,0x10
c0020cd4:	66 40                	inc    ax
c0020cd6:	74 0c                	je     c0020ce4 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0020cd8:	53                   	push   ebx
c0020cd9:	56                   	push   esi
c0020cda:	57                   	push   edi
c0020cdb:	55                   	push   ebp
c0020cdc:	e8 f9 fd ff ff       	call   c0020ada <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020ce1:	83 c4 10             	add    esp,0x10
c0020ce4:	43                   	inc    ebx
c0020ce5:	83 fb 08             	cmp    ebx,0x8
c0020ce8:	75 de                	jne    c0020cc8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020cea:	83 c4 0c             	add    esp,0xc
c0020ced:	5b                   	pop    ebx
c0020cee:	5e                   	pop    esi
c0020cef:	5f                   	pop    edi
c0020cf0:	5d                   	pop    ebp
c0020cf1:	c3                   	ret    

c0020cf2 <PCI::detect()>:
c0020cf2:	56                   	push   esi
c0020cf3:	53                   	push   ebx
c0020cf4:	53                   	push   ebx
c0020cf5:	31 db                	xor    ebx,ebx
c0020cf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020cfb:	6a 00                	push   0x0
c0020cfd:	6a 00                	push   0x0
c0020cff:	6a 00                	push   0x0
c0020d01:	56                   	push   esi
c0020d02:	e8 7f fa ff ff       	call   c0020786 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020d07:	83 c4 10             	add    esp,0x10
c0020d0a:	a8 80                	test   al,0x80
c0020d0c:	75 21                	jne    c0020d2f <PCI::detect()+0x3d>
c0020d0e:	51                   	push   ecx
c0020d0f:	51                   	push   ecx
c0020d10:	6a 00                	push   0x0
c0020d12:	56                   	push   esi
c0020d13:	e8 2e fc ff ff       	call   c0020946 <PCI::checkBus(unsigned char)>
c0020d18:	83 c4 10             	add    esp,0x10
c0020d1b:	eb 24                	jmp    c0020d41 <PCI::detect()+0x4f>
c0020d1d:	52                   	push   edx
c0020d1e:	52                   	push   edx
c0020d1f:	53                   	push   ebx
c0020d20:	43                   	inc    ebx
c0020d21:	56                   	push   esi
c0020d22:	e8 1f fc ff ff       	call   c0020946 <PCI::checkBus(unsigned char)>
c0020d27:	83 c4 10             	add    esp,0x10
c0020d2a:	83 fb 08             	cmp    ebx,0x8
c0020d2d:	74 12                	je     c0020d41 <PCI::detect()+0x4f>
c0020d2f:	53                   	push   ebx
c0020d30:	6a 00                	push   0x0
c0020d32:	6a 00                	push   0x0
c0020d34:	56                   	push   esi
c0020d35:	e8 2a fa ff ff       	call   c0020764 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020d3a:	83 c4 10             	add    esp,0x10
c0020d3d:	66 40                	inc    ax
c0020d3f:	74 dc                	je     c0020d1d <PCI::detect()+0x2b>
c0020d41:	58                   	pop    eax
c0020d42:	5b                   	pop    ebx
c0020d43:	5e                   	pop    esi
c0020d44:	c3                   	ret    
c0020d45:	90                   	nop

c0020d46 <IDE::close(int, int, void*)>:
c0020d46:	83 c8 ff             	or     eax,0xffffffff
c0020d49:	c3                   	ret    

c0020d4a <IDE::IDE()>:
c0020d4a:	83 ec 0c             	sub    esp,0xc
c0020d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d51:	83 ec 08             	sub    esp,0x8
c0020d54:	68 c8 93 02 c0       	push   0xc00293c8
c0020d59:	50                   	push   eax
c0020d5a:	e8 61 30 ff ff       	call   c0013dc0 <HardDiskController::HardDiskController(char const*)>
c0020d5f:	83 c4 10             	add    esp,0x10
c0020d62:	ba 08 96 02 c0       	mov    edx,0xc0029608
c0020d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d6b:	89 10                	mov    DWORD PTR [eax],edx
c0020d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d71:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0020d78:	90                   	nop
c0020d79:	83 c4 0c             	add    esp,0xc
c0020d7c:	c3                   	ret    
c0020d7d:	90                   	nop

c0020d7e <IDE::prepareInterrupt(unsigned char)>:
c0020d7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d83:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020d87:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0020d8f:	c3                   	ret    

c0020d90 <selectDrive(unsigned char, unsigned char)>:
c0020d90:	c3                   	ret    
c0020d91:	90                   	nop

c0020d92 <IDE::getBase(unsigned char)>:
c0020d92:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0020d97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d9b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0020da3:	c3                   	ret    

c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0020da4:	55                   	push   ebp
c0020da5:	57                   	push   edi
c0020da6:	56                   	push   esi
c0020da7:	53                   	push   ebx
c0020da8:	83 ec 1c             	sub    esp,0x1c
c0020dab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020daf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020db3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0020db6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020dba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020dbe:	80 f9 03             	cmp    cl,0x3
c0020dc1:	77 51                	ja     c0020e14 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0020dc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dc7:	0f b6 f2             	movzx  esi,dl
c0020dca:	0f b6 db             	movzx  ebx,bl
c0020dcd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020dd0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0020dd4:	83 ca 80             	or     edx,0xffffff80
c0020dd7:	0f b6 d2             	movzx  edx,dl
c0020dda:	52                   	push   edx
c0020ddb:	6a 0c                	push   0xc
c0020ddd:	56                   	push   esi
c0020dde:	57                   	push   edi
c0020ddf:	e8 c0 ff ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020de4:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0020de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ded:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0020df1:	ee                   	out    dx,al
c0020df2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020df7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0020dfb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020dff:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020e03:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020e0b:	83 c4 2c             	add    esp,0x2c
c0020e0e:	5b                   	pop    ebx
c0020e0f:	5e                   	pop    esi
c0020e10:	5f                   	pop    edi
c0020e11:	5d                   	pop    ebp
c0020e12:	eb 90                	jmp    c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e14:	80 fb 07             	cmp    bl,0x7
c0020e17:	77 12                	ja     c0020e2b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020e19:	0f b6 d2             	movzx  edx,dl
c0020e1c:	0f b6 db             	movzx  ebx,bl
c0020e1f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020e27:	89 da                	mov    edx,ebx
c0020e29:	eb 2f                	jmp    c0020e5a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020e2b:	80 fb 0d             	cmp    bl,0xd
c0020e2e:	77 13                	ja     c0020e43 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0020e30:	0f b6 d2             	movzx  edx,dl
c0020e33:	0f b6 db             	movzx  ebx,bl
c0020e36:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020e3d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0020e41:	eb 17                	jmp    c0020e5a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020e43:	80 fb 15             	cmp    bl,0x15
c0020e46:	77 13                	ja     c0020e5b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020e48:	0f b6 d2             	movzx  edx,dl
c0020e4b:	0f b6 db             	movzx  ebx,bl
c0020e4e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0020e56:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0020e5a:	ee                   	out    dx,al
c0020e5b:	83 c4 1c             	add    esp,0x1c
c0020e5e:	5b                   	pop    ebx
c0020e5f:	5e                   	pop    esi
c0020e60:	5f                   	pop    edi
c0020e61:	5d                   	pop    ebp
c0020e62:	c3                   	ret    
c0020e63:	90                   	nop

c0020e64 <IDE::read(unsigned char, unsigned char)>:
c0020e64:	55                   	push   ebp
c0020e65:	57                   	push   edi
c0020e66:	56                   	push   esi
c0020e67:	53                   	push   ebx
c0020e68:	83 ec 1c             	sub    esp,0x1c
c0020e6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020e6f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020e73:	8d 43 f8             	lea    eax,[ebx-0x8]
c0020e76:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020e7a:	3c 03                	cmp    al,0x3
c0020e7c:	77 43                	ja     c0020ec1 <IDE::read(unsigned char, unsigned char)+0x5d>
c0020e7e:	0f b6 f2             	movzx  esi,dl
c0020e81:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020e84:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0020e88:	83 c8 80             	or     eax,0xffffff80
c0020e8b:	0f b6 c0             	movzx  eax,al
c0020e8e:	50                   	push   eax
c0020e8f:	6a 0c                	push   0xc
c0020e91:	56                   	push   esi
c0020e92:	57                   	push   edi
c0020e93:	e8 0c ff ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e98:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0020e9d:	0f b6 c3             	movzx  eax,bl
c0020ea0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0020ea4:	ec                   	in     al,dx
c0020ea5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0020ea9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0020eae:	52                   	push   edx
c0020eaf:	6a 0c                	push   0xc
c0020eb1:	56                   	push   esi
c0020eb2:	57                   	push   edi
c0020eb3:	e8 ec fe ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020eb8:	83 c4 20             	add    esp,0x20
c0020ebb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020ebf:	eb 49                	jmp    c0020f0a <IDE::read(unsigned char, unsigned char)+0xa6>
c0020ec1:	80 fb 07             	cmp    bl,0x7
c0020ec4:	77 12                	ja     c0020ed8 <IDE::read(unsigned char, unsigned char)+0x74>
c0020ec6:	0f b6 d2             	movzx  edx,dl
c0020ec9:	0f b6 c3             	movzx  eax,bl
c0020ecc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0020ed4:	89 c2                	mov    edx,eax
c0020ed6:	eb 31                	jmp    c0020f09 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020ed8:	80 fb 0d             	cmp    bl,0xd
c0020edb:	77 13                	ja     c0020ef0 <IDE::read(unsigned char, unsigned char)+0x8c>
c0020edd:	0f b6 d2             	movzx  edx,dl
c0020ee0:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0020ee7:	0f b6 d3             	movzx  edx,bl
c0020eea:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020eee:	eb 19                	jmp    c0020f09 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020ef0:	31 c0                	xor    eax,eax
c0020ef2:	80 fb 15             	cmp    bl,0x15
c0020ef5:	77 13                	ja     c0020f0a <IDE::read(unsigned char, unsigned char)+0xa6>
c0020ef7:	0f b6 d2             	movzx  edx,dl
c0020efa:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020f02:	0f b6 d3             	movzx  edx,bl
c0020f05:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020f09:	ec                   	in     al,dx
c0020f0a:	83 c4 1c             	add    esp,0x1c
c0020f0d:	5b                   	pop    ebx
c0020f0e:	5e                   	pop    esi
c0020f0f:	5f                   	pop    edi
c0020f10:	5d                   	pop    ebp
c0020f11:	c3                   	ret    

c0020f12 <IDE::waitInterrupt(unsigned char)>:
c0020f12:	55                   	push   ebp
c0020f13:	57                   	push   edi
c0020f14:	56                   	push   esi
c0020f15:	53                   	push   ebx
c0020f16:	31 db                	xor    ebx,ebx
c0020f18:	83 ec 0c             	sub    esp,0xc
c0020f1b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020f1f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020f24:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020f2c:	89 e8                	mov    eax,ebp
c0020f2e:	84 c0                	test   al,al
c0020f30:	75 34                	jne    c0020f66 <IDE::waitInterrupt(unsigned char)+0x54>
c0020f32:	52                   	push   edx
c0020f33:	6a 0c                	push   0xc
c0020f35:	56                   	push   esi
c0020f36:	57                   	push   edi
c0020f37:	e8 28 ff ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0020f3c:	83 c4 10             	add    esp,0x10
c0020f3f:	a8 01                	test   al,0x1
c0020f41:	75 2b                	jne    c0020f6e <IDE::waitInterrupt(unsigned char)+0x5c>
c0020f43:	f6 c3 04             	test   bl,0x4
c0020f46:	75 16                	jne    c0020f5e <IDE::waitInterrupt(unsigned char)+0x4c>
c0020f48:	83 fb 32             	cmp    ebx,0x32
c0020f4b:	7e 11                	jle    c0020f5e <IDE::waitInterrupt(unsigned char)+0x4c>
c0020f4d:	50                   	push   eax
c0020f4e:	50                   	push   eax
c0020f4f:	6a 00                	push   0x0
c0020f51:	68 80 96 98 00       	push   0x989680
c0020f56:	e8 09 b4 ff ff       	call   c001c364 <nanoSleep(unsigned long long)>
c0020f5b:	83 c4 10             	add    esp,0x10
c0020f5e:	83 fb 3c             	cmp    ebx,0x3c
c0020f61:	74 0b                	je     c0020f6e <IDE::waitInterrupt(unsigned char)+0x5c>
c0020f63:	43                   	inc    ebx
c0020f64:	eb be                	jmp    c0020f24 <IDE::waitInterrupt(unsigned char)+0x12>
c0020f66:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020f6e:	83 c4 0c             	add    esp,0xc
c0020f71:	89 e8                	mov    eax,ebp
c0020f73:	5b                   	pop    ebx
c0020f74:	5e                   	pop    esi
c0020f75:	5f                   	pop    edi
c0020f76:	5d                   	pop    ebp
c0020f77:	c3                   	ret    

c0020f78 <ideChannel0IRQHandler(regs*, void*)>:
c0020f78:	83 ec 10             	sub    esp,0x10
c0020f7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020f7f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0020f86:	6a 07                	push   0x7
c0020f88:	6a 00                	push   0x0
c0020f8a:	50                   	push   eax
c0020f8b:	e8 d4 fe ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0020f90:	83 c4 1c             	add    esp,0x1c
c0020f93:	c3                   	ret    

c0020f94 <ideChannel1IRQHandler(regs*, void*)>:
c0020f94:	83 ec 10             	sub    esp,0x10
c0020f97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020f9b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0020fa2:	6a 07                	push   0x7
c0020fa4:	6a 01                	push   0x1
c0020fa6:	50                   	push   eax
c0020fa7:	e8 b8 fe ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0020fac:	83 c4 1c             	add    esp,0x1c
c0020faf:	c3                   	ret    

c0020fb0 <IDE::enableIRQs(unsigned char, bool)>:
c0020fb0:	57                   	push   edi
c0020fb1:	56                   	push   esi
c0020fb2:	be 04 00 00 00       	mov    esi,0x4
c0020fb7:	53                   	push   ebx
c0020fb8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0020fbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fc1:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0020fc6:	0f 94 c0             	sete   al
c0020fc9:	d1 e0                	shl    eax,1
c0020fcb:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0020fd2:	0f b6 c0             	movzx  eax,al
c0020fd5:	50                   	push   eax
c0020fd6:	6a 0c                	push   0xc
c0020fd8:	57                   	push   edi
c0020fd9:	53                   	push   ebx
c0020fda:	e8 c5 fd ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020fdf:	83 c4 10             	add    esp,0x10
c0020fe2:	50                   	push   eax
c0020fe3:	6a 0c                	push   0xc
c0020fe5:	57                   	push   edi
c0020fe6:	53                   	push   ebx
c0020fe7:	e8 78 fe ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0020fec:	83 c4 10             	add    esp,0x10
c0020fef:	4e                   	dec    esi
c0020ff0:	75 f0                	jne    c0020fe2 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020ff2:	5b                   	pop    ebx
c0020ff3:	5e                   	pop    esi
c0020ff4:	5f                   	pop    edi
c0020ff5:	c3                   	ret    

c0020ff6 <IDE::open(int, int, void*)>:
c0020ff6:	55                   	push   ebp
c0020ff7:	57                   	push   edi
c0020ff8:	56                   	push   esi
c0020ff9:	53                   	push   ebx
c0020ffa:	83 ec 1c             	sub    esp,0x1c
c0020ffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021001:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002100a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0021013:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002101a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0021021:	0f 85 b0 02 00 00    	jne    c00212d7 <IDE::open(int, int, void*)+0x2e1>
c0021027:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002102d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0021031:	83 e0 7f             	and    eax,0x7f
c0021034:	3c 05                	cmp    al,0x5
c0021036:	74 04                	je     c002103c <IDE::open(int, int, void*)+0x46>
c0021038:	3c 0f                	cmp    al,0xf
c002103a:	75 32                	jne    c002106e <IDE::open(int, int, void*)+0x78>
c002103c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0021042:	83 e0 fc             	and    eax,0xfffffffc
c0021045:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002104c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0021052:	83 e0 fc             	and    eax,0xfffffffc
c0021055:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002105c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0021062:	83 e0 fc             	and    eax,0xfffffffc
c0021065:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002106c:	eb 14                	jmp    c0021082 <IDE::open(int, int, void*)+0x8c>
c002106e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0021078:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021082:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021089:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0021090:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021094:	89 c6                	mov    esi,eax
c0021096:	bf f8 0c 00 00       	mov    edi,0xcf8
c002109b:	c1 e6 10             	shl    esi,0x10
c002109e:	89 e8                	mov    eax,ebp
c00210a0:	89 fa                	mov    edx,edi
c00210a2:	c1 e0 0b             	shl    eax,0xb
c00210a5:	09 f0                	or     eax,esi
c00210a7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00210ae:	c1 e6 08             	shl    esi,0x8
c00210b1:	09 c6                	or     esi,eax
c00210b3:	89 f0                	mov    eax,esi
c00210b5:	0d 08 00 00 80       	or     eax,0x80000008
c00210ba:	ef                   	out    dx,eax
c00210bb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00210c0:	89 ca                	mov    edx,ecx
c00210c2:	ed                   	in     eax,dx
c00210c3:	c1 e8 10             	shr    eax,0x10
c00210c6:	3d ff ff 00 00       	cmp    eax,0xffff
c00210cb:	0f 84 f5 00 00 00    	je     c00211c6 <IDE::open(int, int, void*)+0x1d0>
c00210d1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00210d7:	89 fa                	mov    edx,edi
c00210d9:	89 f0                	mov    eax,esi
c00210db:	ef                   	out    dx,eax
c00210dc:	b0 fe                	mov    al,0xfe
c00210de:	89 ca                	mov    edx,ecx
c00210e0:	ee                   	out    dx,al
c00210e1:	89 f0                	mov    eax,esi
c00210e3:	89 fa                	mov    edx,edi
c00210e5:	ef                   	out    dx,eax
c00210e6:	89 ca                	mov    edx,ecx
c00210e8:	ed                   	in     eax,dx
c00210e9:	3c fe                	cmp    al,0xfe
c00210eb:	0f 85 a9 00 00 00    	jne    c002119a <IDE::open(int, int, void*)+0x1a4>
c00210f1:	8b 15 88 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa88
c00210f7:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00210fe:	74 33                	je     c0021133 <IDE::open(int, int, void*)+0x13d>
c0021100:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0021106:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002110a:	40                   	inc    eax
c002110b:	83 ec 0c             	sub    esp,0xc
c002110e:	0f b6 c0             	movzx  eax,al
c0021111:	50                   	push   eax
c0021112:	55                   	push   ebp
c0021113:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021117:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002111d:	51                   	push   ecx
c002111e:	e8 d3 61 ff ff       	call   c00172f6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0021123:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0021128:	83 c4 1c             	add    esp,0x1c
c002112b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0021131:	eb 0a                	jmp    c002113d <IDE::open(int, int, void*)+0x147>
c0021133:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002113d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021144:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002114b:	c1 e1 10             	shl    ecx,0x10
c002114e:	c1 e0 08             	shl    eax,0x8
c0021151:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021156:	09 c1                	or     ecx,eax
c0021158:	89 fa                	mov    edx,edi
c002115a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0021161:	c1 e0 0b             	shl    eax,0xb
c0021164:	09 c1                	or     ecx,eax
c0021166:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002116c:	89 c8                	mov    eax,ecx
c002116e:	ef                   	out    dx,eax
c002116f:	be fc 0c 00 00       	mov    esi,0xcfc
c0021174:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002117a:	89 f2                	mov    edx,esi
c002117c:	ee                   	out    dx,al
c002117d:	89 c8                	mov    eax,ecx
c002117f:	89 fa                	mov    edx,edi
c0021181:	ef                   	out    dx,eax
c0021182:	89 f2                	mov    edx,esi
c0021184:	ed                   	in     eax,dx
c0021185:	0f b6 c0             	movzx  eax,al
c0021188:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002118e:	74 46                	je     c00211d6 <IDE::open(int, int, void*)+0x1e0>
c0021190:	83 ec 0c             	sub    esp,0xc
c0021193:	68 e0 93 02 c0       	push   0xc00293e0
c0021198:	eb 34                	jmp    c00211ce <IDE::open(int, int, void*)+0x1d8>
c002119a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00211a3:	75 17                	jne    c00211bc <IDE::open(int, int, void*)+0x1c6>
c00211a5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00211aa:	74 07                	je     c00211b3 <IDE::open(int, int, void*)+0x1bd>
c00211ac:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00211b1:	75 09                	jne    c00211bc <IDE::open(int, int, void*)+0x1c6>
c00211b3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00211ba:	eb 1a                	jmp    c00211d6 <IDE::open(int, int, void*)+0x1e0>
c00211bc:	83 ec 0c             	sub    esp,0xc
c00211bf:	68 e8 93 02 c0       	push   0xc00293e8
c00211c4:	eb 08                	jmp    c00211ce <IDE::open(int, int, void*)+0x1d8>
c00211c6:	83 ec 0c             	sub    esp,0xc
c00211c9:	68 19 94 02 c0       	push   0xc0029419
c00211ce:	e8 36 7c ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c00211d3:	83 c4 10             	add    esp,0x10
c00211d6:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00211dd:	79 1a                	jns    c00211f9 <IDE::open(int, int, void*)+0x203>
c00211df:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00211e5:	83 e0 fc             	and    eax,0xfffffffc
c00211e8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00211ef:	83 c0 08             	add    eax,0x8
c00211f2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00211f9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00211ff:	89 c2                	mov    edx,eax
c0021201:	83 e2 0f             	and    edx,0xf
c0021204:	66 83 fa 08          	cmp    dx,0x8
c0021208:	75 0a                	jne    c0021214 <IDE::open(int, int, void*)+0x21e>
c002120a:	83 e8 02             	sub    eax,0x2
c002120d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021214:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002121a:	89 c2                	mov    edx,eax
c002121c:	83 e2 0f             	and    edx,0xf
c002121f:	66 83 fa 08          	cmp    dx,0x8
c0021223:	75 0a                	jne    c002122f <IDE::open(int, int, void*)+0x239>
c0021225:	83 e8 02             	sub    eax,0x2
c0021228:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002122f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0021236:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002123d:	89 d0                	mov    eax,edx
c002123f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021242:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021246:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002124a:	8d 4a 01             	lea    ecx,[edx+0x1]
c002124d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021252:	0f b6 c9             	movzx  ecx,cl
c0021255:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002125c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002125f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021263:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0021267:	8d 50 02             	lea    edx,[eax+0x2]
c002126a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002126f:	0f b6 d2             	movzx  edx,dl
c0021272:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0021278:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002127b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002127f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0021283:	8d 48 03             	lea    ecx,[eax+0x3]
c0021286:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002128b:	0f b6 c9             	movzx  ecx,cl
c002128e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0021294:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021297:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002129b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002129f:	8d 50 04             	lea    edx,[eax+0x4]
c00212a2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00212a8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00212ad:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00212b4:	66 85 f6             	test   si,si
c00212b7:	74 3e                	je     c00212f7 <IDE::open(int, int, void*)+0x301>
c00212b9:	0f b6 d2             	movzx  edx,dl
c00212bc:	83 c0 05             	add    eax,0x5
c00212bf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00212c2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00212c6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00212ca:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00212d0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00212d5:	eb 20                	jmp    c00212f7 <IDE::open(int, int, void*)+0x301>
c00212d7:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00212e1:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00212eb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00212f2:	e9 02 ff ff ff       	jmp    c00211f9 <IDE::open(int, int, void*)+0x203>
c00212f7:	52                   	push   edx
c00212f8:	52                   	push   edx
c00212f9:	6a 00                	push   0x0
c00212fb:	53                   	push   ebx
c00212fc:	e8 7d fa ff ff       	call   c0020d7e <IDE::prepareInterrupt(unsigned char)>
c0021301:	59                   	pop    ecx
c0021302:	5e                   	pop    esi
c0021303:	6a 01                	push   0x1
c0021305:	53                   	push   ebx
c0021306:	e8 73 fa ff ff       	call   c0020d7e <IDE::prepareInterrupt(unsigned char)>
c002130b:	83 c4 0c             	add    esp,0xc
c002130e:	6a 00                	push   0x0
c0021310:	6a 00                	push   0x0
c0021312:	53                   	push   ebx
c0021313:	e8 98 fc ff ff       	call   c0020fb0 <IDE::enableIRQs(unsigned char, bool)>
c0021318:	83 c4 0c             	add    esp,0xc
c002131b:	6a 00                	push   0x0
c002131d:	6a 01                	push   0x1
c002131f:	53                   	push   ebx
c0021320:	e8 8b fc ff ff       	call   c0020fb0 <IDE::enableIRQs(unsigned char, bool)>
c0021325:	83 c4 10             	add    esp,0x10
c0021328:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002132f:	74 40                	je     c0021371 <IDE::open(int, int, void*)+0x37b>
c0021331:	83 ec 0c             	sub    esp,0xc
c0021334:	68 43 94 02 c0       	push   0xc0029443
c0021339:	e8 07 13 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c002133e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021341:	6a 01                	push   0x1
c0021343:	68 78 0f 02 c0       	push   0xc0020f78
c0021348:	6a 0e                	push   0xe
c002134a:	53                   	push   ebx
c002134b:	e8 68 26 ff ff       	call   c00139b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021350:	83 c4 14             	add    esp,0x14
c0021353:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0021359:	53                   	push   ebx
c002135a:	6a 01                	push   0x1
c002135c:	68 94 0f 02 c0       	push   0xc0020f94
c0021361:	6a 0f                	push   0xf
c0021363:	53                   	push   ebx
c0021364:	e8 4f 26 ff ff       	call   c00139b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021369:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002136f:	eb 4a                	jmp    c00213bb <IDE::open(int, int, void*)+0x3c5>
c0021371:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002137b:	50                   	push   eax
c002137c:	6a 0f                	push   0xf
c002137e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0021384:	68 5f 94 02 c0       	push   0xc002945f
c0021389:	e8 b7 12 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c002138e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021391:	6a 00                	push   0x0
c0021393:	68 78 0f 02 c0       	push   0xc0020f78
c0021398:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002139e:	53                   	push   ebx
c002139f:	e8 14 26 ff ff       	call   c00139b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00213a4:	83 c4 14             	add    esp,0x14
c00213a7:	53                   	push   ebx
c00213a8:	6a 00                	push   0x0
c00213aa:	68 94 0f 02 c0       	push   0xc0020f94
c00213af:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00213b5:	53                   	push   ebx
c00213b6:	e8 fd 25 ff ff       	call   c00139b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00213bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00213bd:	83 c4 20             	add    esp,0x20
c00213c0:	83 ec 0c             	sub    esp,0xc
c00213c3:	53                   	push   ebx
c00213c4:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00213c7:	83 c4 0c             	add    esp,0xc
c00213ca:	6a 07                	push   0x7
c00213cc:	6a 00                	push   0x0
c00213ce:	53                   	push   ebx
c00213cf:	e8 90 fa ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c00213d4:	83 c4 0c             	add    esp,0xc
c00213d7:	6a 07                	push   0x7
c00213d9:	6a 01                	push   0x1
c00213db:	53                   	push   ebx
c00213dc:	e8 83 fa ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c00213e1:	83 c4 0c             	add    esp,0xc
c00213e4:	6a 01                	push   0x1
c00213e6:	6a 00                	push   0x0
c00213e8:	53                   	push   ebx
c00213e9:	e8 c2 fb ff ff       	call   c0020fb0 <IDE::enableIRQs(unsigned char, bool)>
c00213ee:	83 c4 0c             	add    esp,0xc
c00213f1:	6a 01                	push   0x1
c00213f3:	6a 01                	push   0x1
c00213f5:	53                   	push   ebx
c00213f6:	e8 b5 fb ff ff       	call   c0020fb0 <IDE::enableIRQs(unsigned char, bool)>
c00213fb:	83 c4 2c             	add    esp,0x2c
c00213fe:	31 c0                	xor    eax,eax
c0021400:	5b                   	pop    ebx
c0021401:	5e                   	pop    esi
c0021402:	5f                   	pop    edi
c0021403:	5d                   	pop    ebp
c0021404:	c3                   	ret    
c0021405:	90                   	nop

c0021406 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0021406:	55                   	push   ebp
c0021407:	57                   	push   edi
c0021408:	56                   	push   esi
c0021409:	53                   	push   ebx
c002140a:	83 ec 1c             	sub    esp,0x1c
c002140d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021411:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021415:	8d 50 f8             	lea    edx,[eax-0x8]
c0021418:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002141c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0021420:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021424:	80 fa 03             	cmp    dl,0x3
c0021427:	77 5d                	ja     c0021486 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0021429:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002142d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021431:	0f b6 db             	movzx  ebx,bl
c0021434:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0021437:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002143b:	83 ca 80             	or     edx,0xffffff80
c002143e:	0f b6 d2             	movzx  edx,dl
c0021441:	52                   	push   edx
c0021442:	6a 0c                	push   0xc
c0021444:	53                   	push   ebx
c0021445:	56                   	push   esi
c0021446:	e8 59 f9 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002144b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0021450:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021454:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021458:	0f b6 c0             	movzx  eax,al
c002145b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002145f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021461:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0021466:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002146a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002146e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021472:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002147a:	83 c4 2c             	add    esp,0x2c
c002147d:	5b                   	pop    ebx
c002147e:	5e                   	pop    esi
c002147f:	5f                   	pop    edi
c0021480:	5d                   	pop    ebp
c0021481:	e9 1e f9 ff ff       	jmp    c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021486:	3c 07                	cmp    al,0x7
c0021488:	77 10                	ja     c002149a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002148a:	0f b6 db             	movzx  ebx,bl
c002148d:	0f b6 d0             	movzx  edx,al
c0021490:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0021498:	eb 2d                	jmp    c00214c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002149a:	3c 0d                	cmp    al,0xd
c002149c:	77 13                	ja     c00214b1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002149e:	0f b6 db             	movzx  ebx,bl
c00214a1:	0f b6 c0             	movzx  eax,al
c00214a4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00214ab:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00214af:	eb 16                	jmp    c00214c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00214b1:	3c 15                	cmp    al,0x15
c00214b3:	77 14                	ja     c00214c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00214b5:	0f b6 db             	movzx  ebx,bl
c00214b8:	0f b6 c0             	movzx  eax,al
c00214bb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00214c3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00214c7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00214c9:	83 c4 1c             	add    esp,0x1c
c00214cc:	5b                   	pop    ebx
c00214cd:	5e                   	pop    esi
c00214ce:	5f                   	pop    edi
c00214cf:	5d                   	pop    ebp
c00214d0:	c3                   	ret    
c00214d1:	90                   	nop

c00214d2 <IDE::detect()>:
c00214d2:	55                   	push   ebp
c00214d3:	57                   	push   edi
c00214d4:	56                   	push   esi
c00214d5:	53                   	push   ebx
c00214d6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214dc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00214e3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00214ea:	0f 85 be 02 00 00    	jne    c00217ae <IDE::detect()+0x2dc>
c00214f0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00214f7:	31 f6                	xor    esi,esi
c00214f9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021501:	31 ed                	xor    ebp,ebp
c0021503:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021507:	c1 e0 06             	shl    eax,0x6
c002150a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0021512:	89 e8                	mov    eax,ebp
c0021514:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021518:	c1 e0 04             	shl    eax,0x4
c002151b:	83 c8 a0             	or     eax,0xffffffa0
c002151e:	0f b6 c0             	movzx  eax,al
c0021521:	50                   	push   eax
c0021522:	6a 06                	push   0x6
c0021524:	56                   	push   esi
c0021525:	53                   	push   ebx
c0021526:	e8 79 f8 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002152b:	83 c4 0c             	add    esp,0xc
c002152e:	6a 0c                	push   0xc
c0021530:	56                   	push   esi
c0021531:	53                   	push   ebx
c0021532:	e8 2d f9 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0021537:	83 c4 0c             	add    esp,0xc
c002153a:	6a 0c                	push   0xc
c002153c:	56                   	push   esi
c002153d:	53                   	push   ebx
c002153e:	e8 21 f9 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0021543:	83 c4 0c             	add    esp,0xc
c0021546:	6a 0c                	push   0xc
c0021548:	56                   	push   esi
c0021549:	53                   	push   ebx
c002154a:	e8 15 f9 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c002154f:	83 c4 0c             	add    esp,0xc
c0021552:	6a 0c                	push   0xc
c0021554:	56                   	push   esi
c0021555:	53                   	push   ebx
c0021556:	e8 09 f9 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c002155b:	68 ec 00 00 00       	push   0xec
c0021560:	6a 07                	push   0x7
c0021562:	56                   	push   esi
c0021563:	53                   	push   ebx
c0021564:	e8 3b f8 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021569:	83 c4 1c             	add    esp,0x1c
c002156c:	6a 0c                	push   0xc
c002156e:	56                   	push   esi
c002156f:	53                   	push   ebx
c0021570:	e8 ef f8 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0021575:	83 c4 0c             	add    esp,0xc
c0021578:	6a 0c                	push   0xc
c002157a:	56                   	push   esi
c002157b:	53                   	push   ebx
c002157c:	e8 e3 f8 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0021581:	83 c4 0c             	add    esp,0xc
c0021584:	6a 0c                	push   0xc
c0021586:	56                   	push   esi
c0021587:	53                   	push   ebx
c0021588:	e8 d7 f8 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c002158d:	83 c4 0c             	add    esp,0xc
c0021590:	6a 0c                	push   0xc
c0021592:	56                   	push   esi
c0021593:	53                   	push   ebx
c0021594:	e8 cb f8 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0021599:	83 c4 0c             	add    esp,0xc
c002159c:	6a 0c                	push   0xc
c002159e:	56                   	push   esi
c002159f:	53                   	push   ebx
c00215a0:	e8 bf f8 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c00215a5:	83 c4 10             	add    esp,0x10
c00215a8:	84 c0                	test   al,al
c00215aa:	0f 84 8b 01 00 00    	je     c002173b <IDE::detect()+0x269>
c00215b0:	31 ff                	xor    edi,edi
c00215b2:	50                   	push   eax
c00215b3:	6a 0c                	push   0xc
c00215b5:	56                   	push   esi
c00215b6:	53                   	push   ebx
c00215b7:	e8 a8 f8 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c00215bc:	83 c4 10             	add    esp,0x10
c00215bf:	a8 01                	test   al,0x1
c00215c1:	0f 85 8e 01 00 00    	jne    c0021755 <IDE::detect()+0x283>
c00215c7:	84 c0                	test   al,al
c00215c9:	78 04                	js     c00215cf <IDE::detect()+0xfd>
c00215cb:	a8 08                	test   al,0x8
c00215cd:	75 27                	jne    c00215f6 <IDE::detect()+0x124>
c00215cf:	47                   	inc    edi
c00215d0:	81 ff 17 01 00 00    	cmp    edi,0x117
c00215d6:	7e da                	jle    c00215b2 <IDE::detect()+0xe0>
c00215d8:	50                   	push   eax
c00215d9:	50                   	push   eax
c00215da:	6a 00                	push   0x0
c00215dc:	68 40 4b 4c 00       	push   0x4c4b40
c00215e1:	e8 7e ad ff ff       	call   c001c364 <nanoSleep(unsigned long long)>
c00215e6:	83 c4 10             	add    esp,0x10
c00215e9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00215ef:	75 c1                	jne    c00215b2 <IDE::detect()+0xe0>
c00215f1:	e9 5f 01 00 00       	jmp    c0021755 <IDE::detect()+0x283>
c00215f6:	31 c9                	xor    ecx,ecx
c00215f8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00215fc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021600:	83 ec 0c             	sub    esp,0xc
c0021603:	68 80 00 00 00       	push   0x80
c0021608:	57                   	push   edi
c0021609:	6a 00                	push   0x0
c002160b:	56                   	push   esi
c002160c:	53                   	push   ebx
c002160d:	e8 f4 fd ff ff       	call   c0021406 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021612:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021617:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002161b:	89 d1                	mov    ecx,edx
c002161d:	c1 e0 06             	shl    eax,0x6
c0021620:	01 d8                	add    eax,ebx
c0021622:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021629:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021630:	89 f2                	mov    edx,esi
c0021632:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0021638:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002163c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021642:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021646:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002164d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0021655:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002165c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0021664:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002166a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0021671:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0021677:	8d 54 24 58          	lea    edx,[esp+0x58]
c002167b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002167f:	83 c4 20             	add    esp,0x20
c0021682:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0021685:	83 c0 02             	add    eax,0x2
c0021688:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002168e:	83 c7 02             	add    edi,0x2
c0021691:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0021694:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002169a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002169e:	75 e2                	jne    c0021682 <IDE::detect()+0x1b0>
c00216a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216a4:	c1 e0 06             	shl    eax,0x6
c00216a7:	01 d8                	add    eax,ebx
c00216a9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00216af:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00216b6:	66 c1 ea 09          	shr    dx,0x9
c00216ba:	83 e2 01             	and    edx,0x1
c00216bd:	84 c9                	test   cl,cl
c00216bf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00216c5:	75 2f                	jne    c00216f6 <IDE::detect()+0x224>
c00216c7:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00216cd:	85 c0                	test   eax,eax
c00216cf:	74 66                	je     c0021737 <IDE::detect()+0x265>
c00216d1:	50                   	push   eax
c00216d2:	55                   	push   ebp
c00216d3:	56                   	push   esi
c00216d4:	68 7b 94 02 c0       	push   0xc002947b
c00216d9:	e8 67 0f ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00216de:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00216e5:	e8 e8 dd fe ff       	call   c000f4d2 <malloc>
c00216ea:	89 c7                	mov    edi,eax
c00216ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00216ef:	e8 e8 02 00 00       	call   c00219dc <ATA::ATA()>
c00216f4:	eb 28                	jmp    c002171e <IDE::detect()+0x24c>
c00216f6:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00216fc:	55                   	push   ebp
c00216fd:	56                   	push   esi
c00216fe:	68 aa 94 02 c0       	push   0xc00294aa
c0021703:	e8 3d 0f ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0021708:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002170f:	e8 be dd fe ff       	call   c000f4d2 <malloc>
c0021714:	89 c7                	mov    edi,eax
c0021716:	89 04 24             	mov    DWORD PTR [esp],eax
c0021719:	e8 ee 08 00 00       	call   c002200c <ATAPI::ATAPI()>
c002171e:	5a                   	pop    edx
c002171f:	59                   	pop    ecx
c0021720:	57                   	push   edi
c0021721:	53                   	push   ebx
c0021722:	e8 0d 23 ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0021727:	8b 07                	mov    eax,DWORD PTR [edi]
c0021729:	53                   	push   ebx
c002172a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002172e:	6a 00                	push   0x0
c0021730:	57                   	push   edi
c0021731:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021734:	83 c4 20             	add    esp,0x20
c0021737:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002173b:	4d                   	dec    ebp
c002173c:	74 0a                	je     c0021748 <IDE::detect()+0x276>
c002173e:	bd 01 00 00 00       	mov    ebp,0x1
c0021743:	e9 bb fd ff ff       	jmp    c0021503 <IDE::detect()+0x31>
c0021748:	4e                   	dec    esi
c0021749:	74 63                	je     c00217ae <IDE::detect()+0x2dc>
c002174b:	be 01 00 00 00       	mov    esi,0x1
c0021750:	e9 ac fd ff ff       	jmp    c0021501 <IDE::detect()+0x2f>
c0021755:	50                   	push   eax
c0021756:	6a 04                	push   0x4
c0021758:	56                   	push   esi
c0021759:	53                   	push   ebx
c002175a:	e8 05 f7 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c002175f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021763:	83 c4 0c             	add    esp,0xc
c0021766:	6a 05                	push   0x5
c0021768:	56                   	push   esi
c0021769:	53                   	push   ebx
c002176a:	e8 f5 f6 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c002176f:	83 c4 10             	add    esp,0x10
c0021772:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0021776:	80 fa 14             	cmp    dl,0x14
c0021779:	75 04                	jne    c002177f <IDE::detect()+0x2ad>
c002177b:	3c eb                	cmp    al,0xeb
c002177d:	eb 07                	jmp    c0021786 <IDE::detect()+0x2b4>
c002177f:	3c 96                	cmp    al,0x96
c0021781:	75 b8                	jne    c002173b <IDE::detect()+0x269>
c0021783:	80 fa 69             	cmp    dl,0x69
c0021786:	75 b3                	jne    c002173b <IDE::detect()+0x269>
c0021788:	68 a1 00 00 00       	push   0xa1
c002178d:	6a 07                	push   0x7
c002178f:	56                   	push   esi
c0021790:	53                   	push   ebx
c0021791:	e8 0e f6 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021796:	5f                   	pop    edi
c0021797:	58                   	pop    eax
c0021798:	6a 00                	push   0x0
c002179a:	68 40 42 0f 00       	push   0xf4240
c002179f:	e8 c0 ab ff ff       	call   c001c364 <nanoSleep(unsigned long long)>
c00217a4:	83 c4 10             	add    esp,0x10
c00217a7:	b1 01                	mov    cl,0x1
c00217a9:	e9 4a fe ff ff       	jmp    c00215f8 <IDE::detect()+0x126>
c00217ae:	81 c4 1c 02 00 00    	add    esp,0x21c
c00217b4:	5b                   	pop    ebx
c00217b5:	5e                   	pop    esi
c00217b6:	5f                   	pop    edi
c00217b7:	5d                   	pop    ebp
c00217b8:	c3                   	ret    
c00217b9:	90                   	nop

c00217ba <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00217ba:	55                   	push   ebp
c00217bb:	57                   	push   edi
c00217bc:	56                   	push   esi
c00217bd:	53                   	push   ebx
c00217be:	83 ec 1c             	sub    esp,0x1c
c00217c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00217c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00217c9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00217cd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00217d1:	88 c3                	mov    bl,al
c00217d3:	84 c0                	test   al,al
c00217d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00217d9:	0f 84 67 01 00 00    	je     c0021946 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00217df:	83 ec 0c             	sub    esp,0xc
c00217e2:	68 db 94 02 c0       	push   0xc00294db
c00217e7:	e8 59 0e ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00217ec:	83 c4 10             	add    esp,0x10
c00217ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217f3:	3c 01                	cmp    al,0x1
c00217f5:	75 17                	jne    c002180e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00217f7:	83 ec 0c             	sub    esp,0xc
c00217fa:	b3 13                	mov    bl,0x13
c00217fc:	68 e7 94 02 c0       	push   0xc00294e7
c0021801:	e8 3f 0e ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0021806:	83 c4 10             	add    esp,0x10
c0021809:	e9 25 01 00 00       	jmp    c0021933 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002180e:	3c 02                	cmp    al,0x2
c0021810:	0f 85 ef 00 00 00    	jne    c0021905 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021816:	d1 e6                	shl    esi,1
c0021818:	09 ee                	or     esi,ebp
c002181a:	52                   	push   edx
c002181b:	89 f0                	mov    eax,esi
c002181d:	6a 01                	push   0x1
c002181f:	0f b6 f0             	movzx  esi,al
c0021822:	c1 e6 06             	shl    esi,0x6
c0021825:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002182d:	50                   	push   eax
c002182e:	57                   	push   edi
c002182f:	e8 30 f6 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0021834:	83 c4 10             	add    esp,0x10
c0021837:	89 c6                	mov    esi,eax
c0021839:	a8 01                	test   al,0x1
c002183b:	74 12                	je     c002184f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002183d:	83 ec 0c             	sub    esp,0xc
c0021840:	b3 07                	mov    bl,0x7
c0021842:	68 fc 94 02 c0       	push   0xc00294fc
c0021847:	e8 f9 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c002184c:	83 c4 10             	add    esp,0x10
c002184f:	f7 c6 02 00 00 00    	test   esi,0x2
c0021855:	74 12                	je     c0021869 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021857:	83 ec 0c             	sub    esp,0xc
c002185a:	b3 03                	mov    bl,0x3
c002185c:	68 1a 95 02 c0       	push   0xc002951a
c0021861:	e8 df 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0021866:	83 c4 10             	add    esp,0x10
c0021869:	f7 c6 04 00 00 00    	test   esi,0x4
c002186f:	74 12                	je     c0021883 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0021871:	83 ec 0c             	sub    esp,0xc
c0021874:	b3 14                	mov    bl,0x14
c0021876:	68 3a 95 02 c0       	push   0xc002953a
c002187b:	e8 c5 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0021880:	83 c4 10             	add    esp,0x10
c0021883:	f7 c6 08 00 00 00    	test   esi,0x8
c0021889:	74 12                	je     c002189d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002188b:	83 ec 0c             	sub    esp,0xc
c002188e:	b3 03                	mov    bl,0x3
c0021890:	68 1a 95 02 c0       	push   0xc002951a
c0021895:	e8 ab 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c002189a:	83 c4 10             	add    esp,0x10
c002189d:	f7 c6 10 00 00 00    	test   esi,0x10
c00218a3:	74 12                	je     c00218b7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00218a5:	83 ec 0c             	sub    esp,0xc
c00218a8:	b3 15                	mov    bl,0x15
c00218aa:	68 52 95 02 c0       	push   0xc0029552
c00218af:	e8 91 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00218b4:	83 c4 10             	add    esp,0x10
c00218b7:	f7 c6 20 00 00 00    	test   esi,0x20
c00218bd:	74 12                	je     c00218d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00218bf:	83 ec 0c             	sub    esp,0xc
c00218c2:	b3 03                	mov    bl,0x3
c00218c4:	68 1a 95 02 c0       	push   0xc002951a
c00218c9:	e8 77 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00218ce:	83 c4 10             	add    esp,0x10
c00218d1:	f7 c6 40 00 00 00    	test   esi,0x40
c00218d7:	74 12                	je     c00218eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00218d9:	83 ec 0c             	sub    esp,0xc
c00218dc:	b3 16                	mov    bl,0x16
c00218de:	68 6c 95 02 c0       	push   0xc002956c
c00218e3:	e8 5d 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00218e8:	83 c4 10             	add    esp,0x10
c00218eb:	89 f0                	mov    eax,esi
c00218ed:	84 c0                	test   al,al
c00218ef:	79 42                	jns    c0021933 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00218f1:	83 ec 0c             	sub    esp,0xc
c00218f4:	b3 0d                	mov    bl,0xd
c00218f6:	68 8d 95 02 c0       	push   0xc002958d
c00218fb:	e8 45 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0021900:	83 c4 10             	add    esp,0x10
c0021903:	eb 2e                	jmp    c0021933 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021905:	3c 03                	cmp    al,0x3
c0021907:	75 14                	jne    c002191d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021909:	83 ec 0c             	sub    esp,0xc
c002190c:	b3 17                	mov    bl,0x17
c002190e:	68 a1 95 02 c0       	push   0xc00295a1
c0021913:	e8 2d 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0021918:	83 c4 10             	add    esp,0x10
c002191b:	eb 16                	jmp    c0021933 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002191d:	3c 04                	cmp    al,0x4
c002191f:	75 12                	jne    c0021933 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021921:	83 ec 0c             	sub    esp,0xc
c0021924:	b3 08                	mov    bl,0x8
c0021926:	68 b7 95 02 c0       	push   0xc00295b7
c002192b:	e8 15 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0021930:	83 c4 10             	add    esp,0x10
c0021933:	50                   	push   eax
c0021934:	50                   	push   eax
c0021935:	0f b6 c3             	movzx  eax,bl
c0021938:	50                   	push   eax
c0021939:	68 cf 95 02 c0       	push   0xc00295cf
c002193e:	e8 02 0d ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0021943:	83 c4 10             	add    esp,0x10
c0021946:	83 c4 1c             	add    esp,0x1c
c0021949:	88 d8                	mov    al,bl
c002194b:	5b                   	pop    ebx
c002194c:	5e                   	pop    esi
c002194d:	5f                   	pop    edi
c002194e:	5d                   	pop    ebp
c002194f:	c3                   	ret    

c0021950 <IDE::polling(unsigned char, unsigned int)>:
c0021950:	57                   	push   edi
c0021951:	56                   	push   esi
c0021952:	53                   	push   ebx
c0021953:	bb 04 00 00 00       	mov    ebx,0x4
c0021958:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002195c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021961:	52                   	push   edx
c0021962:	6a 0c                	push   0xc
c0021964:	56                   	push   esi
c0021965:	57                   	push   edi
c0021966:	e8 f9 f4 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c002196b:	83 c4 10             	add    esp,0x10
c002196e:	4b                   	dec    ebx
c002196f:	75 f0                	jne    c0021961 <IDE::polling(unsigned char, unsigned int)+0x11>
c0021971:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021976:	50                   	push   eax
c0021977:	6a 0c                	push   0xc
c0021979:	56                   	push   esi
c002197a:	57                   	push   edi
c002197b:	e8 e4 f4 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0021980:	83 c4 10             	add    esp,0x10
c0021983:	a8 01                	test   al,0x1
c0021985:	74 12                	je     c0021999 <IDE::polling(unsigned char, unsigned int)+0x49>
c0021987:	83 ec 0c             	sub    esp,0xc
c002198a:	68 e9 95 02 c0       	push   0xc00295e9
c002198f:	e8 b1 0c ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0021994:	83 c4 10             	add    esp,0x10
c0021997:	eb 17                	jmp    c00219b0 <IDE::polling(unsigned char, unsigned int)+0x60>
c0021999:	a8 20                	test   al,0x20
c002199b:	75 0f                	jne    c00219ac <IDE::polling(unsigned char, unsigned int)+0x5c>
c002199d:	4b                   	dec    ebx
c002199e:	74 10                	je     c00219b0 <IDE::polling(unsigned char, unsigned int)+0x60>
c00219a0:	84 c0                	test   al,al
c00219a2:	78 d2                	js     c0021976 <IDE::polling(unsigned char, unsigned int)+0x26>
c00219a4:	a8 08                	test   al,0x8
c00219a6:	74 ce                	je     c0021976 <IDE::polling(unsigned char, unsigned int)+0x26>
c00219a8:	31 c0                	xor    eax,eax
c00219aa:	eb 06                	jmp    c00219b2 <IDE::polling(unsigned char, unsigned int)+0x62>
c00219ac:	b0 01                	mov    al,0x1
c00219ae:	eb 02                	jmp    c00219b2 <IDE::polling(unsigned char, unsigned int)+0x62>
c00219b0:	b0 02                	mov    al,0x2
c00219b2:	5b                   	pop    ebx
c00219b3:	5e                   	pop    esi
c00219b4:	5f                   	pop    edi
c00219b5:	c3                   	ret    

c00219b6 <ATA::close(int, int, void*)>:
c00219b6:	83 ec 0c             	sub    esp,0xc
c00219b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219bd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00219c3:	85 c0                	test   eax,eax
c00219c5:	74 0c                	je     c00219d3 <ATA::close(int, int, void*)+0x1d>
c00219c7:	83 ec 0c             	sub    esp,0xc
c00219ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00219cc:	50                   	push   eax
c00219cd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00219d0:	83 c4 10             	add    esp,0x10
c00219d3:	31 c0                	xor    eax,eax
c00219d5:	83 c4 0c             	add    esp,0xc
c00219d8:	c3                   	ret    
c00219d9:	90                   	nop

c00219da <ATA::powerSaving(PowerSavingLevel)>:
c00219da:	c3                   	ret    
c00219db:	90                   	nop

c00219dc <ATA::ATA()>:
c00219dc:	83 ec 0c             	sub    esp,0xc
c00219df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e3:	83 ec 04             	sub    esp,0x4
c00219e6:	68 00 02 00 00       	push   0x200
c00219eb:	68 2c 96 02 c0       	push   0xc002962c
c00219f0:	50                   	push   eax
c00219f1:	e8 4e 24 ff ff       	call   c0013e44 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00219f6:	83 c4 10             	add    esp,0x10
c00219f9:	ba 58 96 02 c0       	mov    edx,0xc0029658
c00219fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a02:	89 10                	mov    DWORD PTR [eax],edx
c0021a04:	90                   	nop
c0021a05:	83 c4 0c             	add    esp,0xc
c0021a08:	c3                   	ret    
c0021a09:	90                   	nop

c0021a0a <ATA::flush(bool)>:
c0021a0a:	53                   	push   ebx
c0021a0b:	83 ec 08             	sub    esp,0x8
c0021a0e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0021a13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a17:	19 c0                	sbb    eax,eax
c0021a19:	83 e0 fd             	and    eax,0xfffffffd
c0021a1c:	05 ea 00 00 00       	add    eax,0xea
c0021a21:	50                   	push   eax
c0021a22:	6a 07                	push   0x7
c0021a24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021a2b:	50                   	push   eax
c0021a2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021a32:	e8 6d f3 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a37:	83 c4 0c             	add    esp,0xc
c0021a3a:	6a 00                	push   0x0
c0021a3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021a43:	50                   	push   eax
c0021a44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021a4a:	e8 01 ff ff ff       	call   c0021950 <IDE::polling(unsigned char, unsigned int)>
c0021a4f:	83 c4 18             	add    esp,0x18
c0021a52:	5b                   	pop    ebx
c0021a53:	c3                   	ret    

c0021a54 <ATA::readyForCommand()>:
c0021a54:	56                   	push   esi
c0021a55:	53                   	push   ebx
c0021a56:	31 db                	xor    ebx,ebx
c0021a58:	50                   	push   eax
c0021a59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a5d:	50                   	push   eax
c0021a5e:	6a 0c                	push   0xc
c0021a60:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021a67:	50                   	push   eax
c0021a68:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021a6e:	e8 f1 f3 ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0021a73:	83 c4 10             	add    esp,0x10
c0021a76:	a8 88                	test   al,0x88
c0021a78:	74 23                	je     c0021a9d <ATA::readyForCommand()+0x49>
c0021a7a:	43                   	inc    ebx
c0021a7b:	83 fb 63             	cmp    ebx,0x63
c0021a7e:	7e dd                	jle    c0021a5d <ATA::readyForCommand()+0x9>
c0021a80:	51                   	push   ecx
c0021a81:	51                   	push   ecx
c0021a82:	6a 00                	push   0x0
c0021a84:	68 40 42 0f 00       	push   0xf4240
c0021a89:	e8 d6 a8 ff ff       	call   c001c364 <nanoSleep(unsigned long long)>
c0021a8e:	83 c4 10             	add    esp,0x10
c0021a91:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021a97:	75 c4                	jne    c0021a5d <ATA::readyForCommand()+0x9>
c0021a99:	31 c0                	xor    eax,eax
c0021a9b:	eb 02                	jmp    c0021a9f <ATA::readyForCommand()+0x4b>
c0021a9d:	b0 01                	mov    al,0x1
c0021a9f:	5a                   	pop    edx
c0021aa0:	5b                   	pop    ebx
c0021aa1:	5e                   	pop    esi
c0021aa2:	c3                   	ret    
c0021aa3:	90                   	nop

c0021aa4 <ATA::access(unsigned long long, int, void*, bool)>:
c0021aa4:	55                   	push   ebp
c0021aa5:	57                   	push   edi
c0021aa6:	56                   	push   esi
c0021aa7:	53                   	push   ebx
c0021aa8:	83 ec 2c             	sub    esp,0x2c
c0021aab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021aaf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021ab3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021ab7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021abb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0021abf:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021ac3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021ac7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021acd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ad1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021ad7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021adb:	c1 e0 06             	shl    eax,0x6
c0021ade:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0021ae6:	74 5d                	je     c0021b45 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0021ae8:	89 fa                	mov    edx,edi
c0021aea:	89 f0                	mov    eax,esi
c0021aec:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0021af0:	c1 ea 1c             	shr    edx,0x1c
c0021af3:	89 d1                	mov    ecx,edx
c0021af5:	09 c1                	or     ecx,eax
c0021af7:	74 25                	je     c0021b1e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021af9:	31 ed                	xor    ebp,ebp
c0021afb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0021b02:	89 fa                	mov    edx,edi
c0021b04:	89 f0                	mov    eax,esi
c0021b06:	0f ad d0             	shrd   eax,edx,cl
c0021b09:	d3 ea                	shr    edx,cl
c0021b0b:	f6 c1 20             	test   cl,0x20
c0021b0e:	74 02                	je     c0021b12 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021b10:	89 d0                	mov    eax,edx
c0021b12:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021b16:	45                   	inc    ebp
c0021b17:	83 fd 06             	cmp    ebp,0x6
c0021b1a:	75 df                	jne    c0021afb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021b1c:	eb 76                	jmp    c0021b94 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021b1e:	89 f0                	mov    eax,esi
c0021b20:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0021b25:	89 fa                	mov    edx,edi
c0021b27:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021b2e:	0f ac d0 10          	shrd   eax,edx,0x10
c0021b32:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021b37:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021b3b:	c1 ee 18             	shr    esi,0x18
c0021b3e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0021b43:	eb 56                	jmp    c0021b9b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021b45:	6a 00                	push   0x0
c0021b47:	6a 3f                	push   0x3f
c0021b49:	57                   	push   edi
c0021b4a:	56                   	push   esi
c0021b4b:	e8 0c 20 00 00       	call   c0023b5c <__umoddi3>
c0021b50:	83 c4 10             	add    esp,0x10
c0021b53:	40                   	inc    eax
c0021b54:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0021b58:	6a 00                	push   0x0
c0021b5a:	68 f0 03 00 00       	push   0x3f0
c0021b5f:	57                   	push   edi
c0021b60:	56                   	push   esi
c0021b61:	e8 f6 1e 00 00       	call   c0023a5c <__udivdi3>
c0021b66:	83 c4 10             	add    esp,0x10
c0021b69:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0021b6e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021b75:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021b7a:	6a 00                	push   0x0
c0021b7c:	6a 3f                	push   0x3f
c0021b7e:	57                   	push   edi
c0021b7f:	56                   	push   esi
c0021b80:	e8 d7 1e 00 00       	call   c0023a5c <__udivdi3>
c0021b85:	83 c4 10             	add    esp,0x10
c0021b88:	89 c6                	mov    esi,eax
c0021b8a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0021b8f:	83 e6 0f             	and    esi,0xf
c0021b92:	eb 07                	jmp    c0021b9b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021b94:	31 f6                	xor    esi,esi
c0021b96:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0021b9b:	bf 01 00 00 00       	mov    edi,0x1
c0021ba0:	50                   	push   eax
c0021ba1:	6a 00                	push   0x0
c0021ba3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021baa:	50                   	push   eax
c0021bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021baf:	e8 fc f3 ff ff       	call   c0020fb0 <IDE::enableIRQs(unsigned char, bool)>
c0021bb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021bb7:	e8 98 fe ff ff       	call   c0021a54 <ATA::readyForCommand()>
c0021bbc:	83 c4 10             	add    esp,0x10
c0021bbf:	84 c0                	test   al,al
c0021bc1:	0f 84 50 02 00 00    	je     c0021e17 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021bc7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0021bcd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021bd3:	c1 e0 04             	shl    eax,0x4
c0021bd6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0021bdd:	09 c6                	or     esi,eax
c0021bdf:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0021be4:	75 05                	jne    c0021beb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0021be6:	83 ce a0             	or     esi,0xffffffa0
c0021be9:	eb 03                	jmp    c0021bee <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0021beb:	83 ce e0             	or     esi,0xffffffe0
c0021bee:	89 f0                	mov    eax,esi
c0021bf0:	0f b6 f0             	movzx  esi,al
c0021bf3:	56                   	push   esi
c0021bf4:	6a 06                	push   0x6
c0021bf6:	51                   	push   ecx
c0021bf7:	52                   	push   edx
c0021bf8:	e8 a7 f1 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021bfd:	83 c4 10             	add    esp,0x10
c0021c00:	6a 00                	push   0x0
c0021c02:	6a 01                	push   0x1
c0021c04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c0b:	50                   	push   eax
c0021c0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c12:	e8 8d f1 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c17:	83 c4 10             	add    esp,0x10
c0021c1a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021c1f:	75 6e                	jne    c0021c8f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0021c21:	6a 00                	push   0x0
c0021c23:	6a 08                	push   0x8
c0021c25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c2c:	50                   	push   eax
c0021c2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c33:	e8 6c f1 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c38:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021c3d:	50                   	push   eax
c0021c3e:	6a 09                	push   0x9
c0021c40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c47:	50                   	push   eax
c0021c48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c4e:	e8 51 f1 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c53:	83 c4 20             	add    esp,0x20
c0021c56:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0021c5b:	50                   	push   eax
c0021c5c:	6a 0a                	push   0xa
c0021c5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c65:	50                   	push   eax
c0021c66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c6c:	e8 33 f1 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c71:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0021c76:	50                   	push   eax
c0021c77:	6a 0b                	push   0xb
c0021c79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c80:	50                   	push   eax
c0021c81:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021c87:	e8 18 f1 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c8c:	83 c4 20             	add    esp,0x20
c0021c8f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0021c94:	50                   	push   eax
c0021c95:	6a 02                	push   0x2
c0021c97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021c9e:	50                   	push   eax
c0021c9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021ca5:	e8 fa f0 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021caa:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0021caf:	50                   	push   eax
c0021cb0:	6a 03                	push   0x3
c0021cb2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021cb9:	50                   	push   eax
c0021cba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021cc0:	e8 df f0 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021cc5:	83 c4 20             	add    esp,0x20
c0021cc8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0021ccd:	50                   	push   eax
c0021cce:	6a 04                	push   0x4
c0021cd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021cd7:	50                   	push   eax
c0021cd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021cde:	e8 c1 f0 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ce3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021ce8:	50                   	push   eax
c0021ce9:	6a 05                	push   0x5
c0021ceb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021cf2:	50                   	push   eax
c0021cf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021cf9:	e8 a6 f0 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021cfe:	83 c4 20             	add    esp,0x20
c0021d01:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021d06:	0f 94 c0             	sete   al
c0021d09:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021d0e:	74 09                	je     c0021d19 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0021d10:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021d17:	eb 07                	jmp    c0021d20 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021d19:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0021d20:	0f b6 c0             	movzx  eax,al
c0021d23:	50                   	push   eax
c0021d24:	6a 07                	push   0x7
c0021d26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021d2d:	50                   	push   eax
c0021d2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021d34:	e8 6b f0 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021d39:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021d3d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021d41:	83 c4 10             	add    esp,0x10
c0021d44:	85 f6                	test   esi,esi
c0021d46:	0f 84 ac 00 00 00    	je     c0021df8 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021d4c:	50                   	push   eax
c0021d4d:	6a 01                	push   0x1
c0021d4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021d56:	50                   	push   eax
c0021d57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021d5d:	e8 ee fb ff ff       	call   c0021950 <IDE::polling(unsigned char, unsigned int)>
c0021d62:	83 c4 10             	add    esp,0x10
c0021d65:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021d6b:	84 c0                	test   al,al
c0021d6d:	74 20                	je     c0021d8f <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0021d6f:	0f b6 f8             	movzx  edi,al
c0021d72:	0f b6 d2             	movzx  edx,dl
c0021d75:	57                   	push   edi
c0021d76:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0021d7d:	50                   	push   eax
c0021d7e:	52                   	push   edx
c0021d7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021d85:	e8 30 fa ff ff       	call   c00217ba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021d8a:	e9 85 00 00 00       	jmp    c0021e14 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0021d8f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021d94:	74 41                	je     c0021dd7 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0021d96:	31 c9                	xor    ecx,ecx
c0021d98:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0021d9c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021da0:	50                   	push   eax
c0021da1:	50                   	push   eax
c0021da2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021da9:	50                   	push   eax
c0021daa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021db0:	e8 dd ef ff ff       	call   c0020d92 <IDE::getBase(unsigned char)>
c0021db5:	89 c2                	mov    edx,eax
c0021db7:	89 e8                	mov    eax,ebp
c0021db9:	66 ef                	out    dx,ax
c0021dbb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021dbf:	83 c4 10             	add    esp,0x10
c0021dc2:	41                   	inc    ecx
c0021dc3:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0021dc9:	75 cd                	jne    c0021d98 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0021dcb:	4e                   	dec    esi
c0021dcc:	81 c7 00 02 00 00    	add    edi,0x200
c0021dd2:	e9 6d ff ff ff       	jmp    c0021d44 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0021dd7:	0f b6 d2             	movzx  edx,dl
c0021dda:	51                   	push   ecx
c0021ddb:	51                   	push   ecx
c0021ddc:	52                   	push   edx
c0021ddd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021de3:	e8 aa ef ff ff       	call   c0020d92 <IDE::getBase(unsigned char)>
c0021de8:	b9 00 01 00 00       	mov    ecx,0x100
c0021ded:	89 c2                	mov    edx,eax
c0021def:	fc                   	cld    
c0021df0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0021df3:	83 c4 10             	add    esp,0x10
c0021df6:	eb d3                	jmp    c0021dcb <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0021df8:	31 ff                	xor    edi,edi
c0021dfa:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021dff:	74 16                	je     c0021e17 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021e01:	50                   	push   eax
c0021e02:	50                   	push   eax
c0021e03:	31 c0                	xor    eax,eax
c0021e05:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0021e0a:	0f 94 c0             	sete   al
c0021e0d:	50                   	push   eax
c0021e0e:	53                   	push   ebx
c0021e0f:	e8 f6 fb ff ff       	call   c0021a0a <ATA::flush(bool)>
c0021e14:	83 c4 10             	add    esp,0x10
c0021e17:	83 c4 2c             	add    esp,0x2c
c0021e1a:	89 f8                	mov    eax,edi
c0021e1c:	5b                   	pop    ebx
c0021e1d:	5e                   	pop    esi
c0021e1e:	5f                   	pop    edi
c0021e1f:	5d                   	pop    ebp
c0021e20:	c3                   	ret    
c0021e21:	90                   	nop

c0021e22 <ATA::read(unsigned long long, int, void*)>:
c0021e22:	57                   	push   edi
c0021e23:	b8 04 00 00 00       	mov    eax,0x4
c0021e28:	56                   	push   esi
c0021e29:	53                   	push   ebx
c0021e2a:	83 ec 10             	sub    esp,0x10
c0021e2d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021e31:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e35:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021e38:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e3c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021e40:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021e46:	77 3b                	ja     c0021e83 <ATA::read(unsigned long long, int, void*)+0x61>
c0021e48:	b8 06 00 00 00       	mov    eax,0x6
c0021e4d:	85 d2                	test   edx,edx
c0021e4f:	74 32                	je     c0021e83 <ATA::read(unsigned long long, int, void*)+0x61>
c0021e51:	50                   	push   eax
c0021e52:	50                   	push   eax
c0021e53:	6a 00                	push   0x0
c0021e55:	52                   	push   edx
c0021e56:	53                   	push   ebx
c0021e57:	57                   	push   edi
c0021e58:	56                   	push   esi
c0021e59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021e5d:	e8 42 fc ff ff       	call   c0021aa4 <ATA::access(unsigned long long, int, void*, bool)>
c0021e62:	83 c4 20             	add    esp,0x20
c0021e65:	85 c0                	test   eax,eax
c0021e67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021e6b:	75 11                	jne    c0021e7e <ATA::read(unsigned long long, int, void*)+0x5c>
c0021e6d:	01 1d 48 cd 02 c0    	add    DWORD PTR ds:0xc002cd48,ebx
c0021e73:	e8 36 e6 fe ff       	call   c00104ae <VgaText::updateDiskUsage()>
c0021e78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e7c:	eb 05                	jmp    c0021e83 <ATA::read(unsigned long long, int, void*)+0x61>
c0021e7e:	b8 01 00 00 00       	mov    eax,0x1
c0021e83:	83 c4 10             	add    esp,0x10
c0021e86:	5b                   	pop    ebx
c0021e87:	5e                   	pop    esi
c0021e88:	5f                   	pop    edi
c0021e89:	c3                   	ret    

c0021e8a <ATA::write(unsigned long long, int, void*)>:
c0021e8a:	57                   	push   edi
c0021e8b:	b8 04 00 00 00       	mov    eax,0x4
c0021e90:	56                   	push   esi
c0021e91:	53                   	push   ebx
c0021e92:	83 ec 10             	sub    esp,0x10
c0021e95:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021e99:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e9d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021ea0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021ea4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021ea8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021eae:	77 3b                	ja     c0021eeb <ATA::write(unsigned long long, int, void*)+0x61>
c0021eb0:	b8 06 00 00 00       	mov    eax,0x6
c0021eb5:	85 d2                	test   edx,edx
c0021eb7:	74 32                	je     c0021eeb <ATA::write(unsigned long long, int, void*)+0x61>
c0021eb9:	50                   	push   eax
c0021eba:	50                   	push   eax
c0021ebb:	6a 01                	push   0x1
c0021ebd:	52                   	push   edx
c0021ebe:	53                   	push   ebx
c0021ebf:	57                   	push   edi
c0021ec0:	56                   	push   esi
c0021ec1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021ec5:	e8 da fb ff ff       	call   c0021aa4 <ATA::access(unsigned long long, int, void*, bool)>
c0021eca:	83 c4 20             	add    esp,0x20
c0021ecd:	85 c0                	test   eax,eax
c0021ecf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021ed3:	75 11                	jne    c0021ee6 <ATA::write(unsigned long long, int, void*)+0x5c>
c0021ed5:	01 1d 44 cd 02 c0    	add    DWORD PTR ds:0xc002cd44,ebx
c0021edb:	e8 ce e5 fe ff       	call   c00104ae <VgaText::updateDiskUsage()>
c0021ee0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ee4:	eb 05                	jmp    c0021eeb <ATA::write(unsigned long long, int, void*)+0x61>
c0021ee6:	b8 01 00 00 00       	mov    eax,0x1
c0021eeb:	83 c4 10             	add    esp,0x10
c0021eee:	5b                   	pop    ebx
c0021eef:	5e                   	pop    esi
c0021ef0:	5f                   	pop    edi
c0021ef1:	c3                   	ret    

c0021ef2 <ATA::detectCHS()>:
c0021ef2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ef6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021efc:	c1 e0 06             	shl    eax,0x6
c0021eff:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021f05:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021f0f:	c7 44 24 04 3b 96 02 c0 	mov    DWORD PTR [esp+0x4],0xc002963b
c0021f17:	e9 ed 6e ff ff       	jmp    c0018e09 <Krnl::panic(char const*)>

c0021f1c <ATA::open(int, int, void*)>:
c0021f1c:	53                   	push   ebx
c0021f1d:	83 ec 08             	sub    esp,0x8
c0021f20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021f2c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021f32:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021f38:	c1 e0 06             	shl    eax,0x6
c0021f3b:	01 d0                	add    eax,edx
c0021f3d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021f44:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021f4a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021f51:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021f5b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021f61:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0021f68:	75 0c                	jne    c0021f76 <ATA::open(int, int, void*)+0x5a>
c0021f6a:	83 ec 0c             	sub    esp,0xc
c0021f6d:	53                   	push   ebx
c0021f6e:	e8 7f ff ff ff       	call   c0021ef2 <ATA::detectCHS()>
c0021f73:	83 c4 10             	add    esp,0x10
c0021f76:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021f7c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021f82:	c1 e0 06             	shl    eax,0x6
c0021f85:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0021f8c:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021f96:	d1 e8                	shr    eax,1
c0021f98:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0021f9e:	6a 04                	push   0x4
c0021fa0:	6a 0c                	push   0xc
c0021fa2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021fa9:	50                   	push   eax
c0021faa:	52                   	push   edx
c0021fab:	e8 f4 ed ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fb0:	90                   	nop
c0021fb1:	90                   	nop
c0021fb2:	6a 00                	push   0x0
c0021fb4:	6a 0c                	push   0xc
c0021fb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021fbd:	50                   	push   eax
c0021fbe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021fc4:	e8 db ed ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fc9:	83 c4 14             	add    esp,0x14
c0021fcc:	53                   	push   ebx
c0021fcd:	e8 da 1e ff ff       	call   c0013eac <PhysicalDisk::startCache()>
c0021fd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021fd5:	e8 82 3e ff ff       	call   c0015e5c <createPartitionsForDisk(PhysicalDisk*)>
c0021fda:	31 c0                	xor    eax,eax
c0021fdc:	83 c4 18             	add    esp,0x18
c0021fdf:	5b                   	pop    ebx
c0021fe0:	c3                   	ret    
c0021fe1:	90                   	nop

c0021fe2 <ATAPI::write(unsigned long long, int, void*)>:
c0021fe2:	b8 03 00 00 00       	mov    eax,0x3
c0021fe7:	c3                   	ret    

c0021fe8 <ATAPI::close(int, int, void*)>:
c0021fe8:	83 ec 0c             	sub    esp,0xc
c0021feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021ff5:	85 c0                	test   eax,eax
c0021ff7:	74 0c                	je     c0022005 <ATAPI::close(int, int, void*)+0x1d>
c0021ff9:	83 ec 0c             	sub    esp,0xc
c0021ffc:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ffe:	50                   	push   eax
c0021fff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022002:	83 c4 10             	add    esp,0x10
c0022005:	31 c0                	xor    eax,eax
c0022007:	83 c4 0c             	add    esp,0xc
c002200a:	c3                   	ret    
c002200b:	90                   	nop

c002200c <ATAPI::ATAPI()>:
c002200c:	83 ec 0c             	sub    esp,0xc
c002200f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022013:	83 ec 04             	sub    esp,0x4
c0022016:	68 00 08 00 00       	push   0x800
c002201b:	68 84 96 02 c0       	push   0xc0029684
c0022020:	50                   	push   eax
c0022021:	e8 1e 1e ff ff       	call   c0013e44 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022026:	83 c4 10             	add    esp,0x10
c0022029:	ba c4 96 02 c0       	mov    edx,0xc00296c4
c002202e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022032:	89 10                	mov    DWORD PTR [eax],edx
c0022034:	90                   	nop
c0022035:	83 c4 0c             	add    esp,0xc
c0022038:	c3                   	ret    
c0022039:	90                   	nop

c002203a <ATAPI::readyForCommand()>:
c002203a:	56                   	push   esi
c002203b:	53                   	push   ebx
c002203c:	31 db                	xor    ebx,ebx
c002203e:	50                   	push   eax
c002203f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022043:	50                   	push   eax
c0022044:	6a 0c                	push   0xc
c0022046:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002204d:	50                   	push   eax
c002204e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022054:	e8 0b ee ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0022059:	83 c4 10             	add    esp,0x10
c002205c:	a8 88                	test   al,0x88
c002205e:	74 23                	je     c0022083 <ATAPI::readyForCommand()+0x49>
c0022060:	43                   	inc    ebx
c0022061:	83 fb 63             	cmp    ebx,0x63
c0022064:	7e dd                	jle    c0022043 <ATAPI::readyForCommand()+0x9>
c0022066:	51                   	push   ecx
c0022067:	51                   	push   ecx
c0022068:	6a 00                	push   0x0
c002206a:	68 40 42 0f 00       	push   0xf4240
c002206f:	e8 f0 a2 ff ff       	call   c001c364 <nanoSleep(unsigned long long)>
c0022074:	83 c4 10             	add    esp,0x10
c0022077:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002207d:	75 c4                	jne    c0022043 <ATAPI::readyForCommand()+0x9>
c002207f:	31 c0                	xor    eax,eax
c0022081:	eb 02                	jmp    c0022085 <ATAPI::readyForCommand()+0x4b>
c0022083:	b0 01                	mov    al,0x1
c0022085:	5a                   	pop    edx
c0022086:	5b                   	pop    ebx
c0022087:	5e                   	pop    esi
c0022088:	c3                   	ret    
c0022089:	90                   	nop

c002208a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002208a:	55                   	push   ebp
c002208b:	57                   	push   edi
c002208c:	56                   	push   esi
c002208d:	53                   	push   ebx
c002208e:	83 ec 20             	sub    esp,0x20
c0022091:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022095:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022099:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002209d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00220a1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00220a5:	6a 01                	push   0x1
c00220a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00220ae:	50                   	push   eax
c00220af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00220b5:	e8 f6 ee ff ff       	call   c0020fb0 <IDE::enableIRQs(unsigned char, bool)>
c00220ba:	5e                   	pop    esi
c00220bb:	58                   	pop    eax
c00220bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00220c3:	50                   	push   eax
c00220c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00220ca:	e8 af ec ff ff       	call   c0020d7e <IDE::prepareInterrupt(unsigned char)>
c00220cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00220d2:	e8 63 ff ff ff       	call   c002203a <ATAPI::readyForCommand()>
c00220d7:	83 c4 10             	add    esp,0x10
c00220da:	84 c0                	test   al,al
c00220dc:	75 0a                	jne    c00220e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00220de:	bb 01 00 00 00       	mov    ebx,0x1
c00220e3:	e9 57 02 00 00       	jmp    c002233f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00220e8:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00220ee:	c1 e0 04             	shl    eax,0x4
c00220f1:	0f b6 c0             	movzx  eax,al
c00220f4:	50                   	push   eax
c00220f5:	6a 06                	push   0x6
c00220f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00220fe:	50                   	push   eax
c00220ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022105:	e8 9a ec ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002210a:	6a 00                	push   0x0
c002210c:	6a 01                	push   0x1
c002210e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022115:	50                   	push   eax
c0022116:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002211c:	e8 83 ec ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022121:	83 c4 20             	add    esp,0x20
c0022124:	0f b6 c3             	movzx  eax,bl
c0022127:	0f b6 df             	movzx  ebx,bh
c002212a:	50                   	push   eax
c002212b:	6a 04                	push   0x4
c002212d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022134:	50                   	push   eax
c0022135:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002213b:	e8 64 ec ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022140:	53                   	push   ebx
c0022141:	6a 05                	push   0x5
c0022143:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002214a:	50                   	push   eax
c002214b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022151:	e8 4e ec ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022156:	83 c4 20             	add    esp,0x20
c0022159:	68 a0 00 00 00       	push   0xa0
c002215e:	6a 07                	push   0x7
c0022160:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022167:	50                   	push   eax
c0022168:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002216e:	e8 31 ec ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022173:	83 c4 0c             	add    esp,0xc
c0022176:	6a 01                	push   0x1
c0022178:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002217f:	50                   	push   eax
c0022180:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022186:	e8 c5 f7 ff ff       	call   c0021950 <IDE::polling(unsigned char, unsigned int)>
c002218b:	83 c4 10             	add    esp,0x10
c002218e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0022194:	84 c0                	test   al,al
c0022196:	74 23                	je     c00221bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0022198:	0f b6 d8             	movzx  ebx,al
c002219b:	0f b6 d2             	movzx  edx,dl
c002219e:	53                   	push   ebx
c002219f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00221a6:	50                   	push   eax
c00221a7:	52                   	push   edx
c00221a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00221ae:	e8 07 f6 ff ff       	call   c00217ba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00221b3:	83 c4 10             	add    esp,0x10
c00221b6:	e9 84 01 00 00       	jmp    c002233f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00221bb:	0f b6 d2             	movzx  edx,dl
c00221be:	53                   	push   ebx
c00221bf:	53                   	push   ebx
c00221c0:	52                   	push   edx
c00221c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00221c7:	e8 c6 eb ff ff       	call   c0020d92 <IDE::getBase(unsigned char)>
c00221cc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00221d0:	b9 06 00 00 00       	mov    ecx,0x6
c00221d5:	89 c2                	mov    edx,eax
c00221d7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00221da:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00221de:	83 c4 10             	add    esp,0x10
c00221e1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00221e7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00221ee:	85 db                	test   ebx,ebx
c00221f0:	0f 84 ec 00 00 00    	je     c00222e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00221f6:	51                   	push   ecx
c00221f7:	51                   	push   ecx
c00221f8:	52                   	push   edx
c00221f9:	50                   	push   eax
c00221fa:	e8 13 ed ff ff       	call   c0020f12 <IDE::waitInterrupt(unsigned char)>
c00221ff:	83 c4 10             	add    esp,0x10
c0022202:	84 c0                	test   al,al
c0022204:	0f 84 d4 fe ff ff    	je     c00220de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002220a:	56                   	push   esi
c002220b:	56                   	push   esi
c002220c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022213:	50                   	push   eax
c0022214:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002221a:	e8 5f eb ff ff       	call   c0020d7e <IDE::prepareInterrupt(unsigned char)>
c002221f:	83 c4 0c             	add    esp,0xc
c0022222:	6a 04                	push   0x4
c0022224:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002222b:	50                   	push   eax
c002222c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022232:	e8 2d ec ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0022237:	83 c4 0c             	add    esp,0xc
c002223a:	89 c6                	mov    esi,eax
c002223c:	6a 05                	push   0x5
c002223e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022245:	50                   	push   eax
c0022246:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002224c:	e8 13 ec ff ff       	call   c0020e64 <IDE::read(unsigned char, unsigned char)>
c0022251:	89 f1                	mov    ecx,esi
c0022253:	0f b6 c0             	movzx  eax,al
c0022256:	0f b6 f1             	movzx  esi,cl
c0022259:	c1 e0 08             	shl    eax,0x8
c002225c:	09 c6                	or     esi,eax
c002225e:	d1 fe                	sar    esi,1
c0022260:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0022264:	83 c4 10             	add    esp,0x10
c0022267:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002226c:	74 41                	je     c00222af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002226e:	31 c9                	xor    ecx,ecx
c0022270:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022276:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002227d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0022281:	75 0a                	jne    c002228d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0022283:	01 c9                	add    ecx,ecx
c0022285:	01 cd                	add    ebp,ecx
c0022287:	4b                   	dec    ebx
c0022288:	e9 54 ff ff ff       	jmp    c00221e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002228d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0022292:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022296:	51                   	push   ecx
c0022297:	51                   	push   ecx
c0022298:	52                   	push   edx
c0022299:	50                   	push   eax
c002229a:	e8 f3 ea ff ff       	call   c0020d92 <IDE::getBase(unsigned char)>
c002229f:	89 c2                	mov    edx,eax
c00222a1:	89 f0                	mov    eax,esi
c00222a3:	66 ef                	out    dx,ax
c00222a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00222a9:	83 c4 10             	add    esp,0x10
c00222ac:	41                   	inc    ecx
c00222ad:	eb c1                	jmp    c0022270 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00222af:	31 f6                	xor    esi,esi
c00222b1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00222b7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00222be:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00222c2:	75 06                	jne    c00222ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00222c4:	01 f6                	add    esi,esi
c00222c6:	01 f5                	add    ebp,esi
c00222c8:	eb bd                	jmp    c0022287 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00222ca:	51                   	push   ecx
c00222cb:	51                   	push   ecx
c00222cc:	52                   	push   edx
c00222cd:	50                   	push   eax
c00222ce:	e8 bf ea ff ff       	call   c0020d92 <IDE::getBase(unsigned char)>
c00222d3:	89 c2                	mov    edx,eax
c00222d5:	66 ed                	in     ax,dx
c00222d7:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00222dc:	83 c4 10             	add    esp,0x10
c00222df:	46                   	inc    esi
c00222e0:	eb cf                	jmp    c00222b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00222e2:	51                   	push   ecx
c00222e3:	51                   	push   ecx
c00222e4:	52                   	push   edx
c00222e5:	50                   	push   eax
c00222e6:	e8 27 ec ff ff       	call   c0020f12 <IDE::waitInterrupt(unsigned char)>
c00222eb:	83 c4 10             	add    esp,0x10
c00222ee:	84 c0                	test   al,al
c00222f0:	0f 84 e8 fd ff ff    	je     c00220de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00222f6:	bb a0 86 01 00       	mov    ebx,0x186a0
c00222fb:	52                   	push   edx
c00222fc:	52                   	push   edx
c00222fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022304:	50                   	push   eax
c0022305:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002230b:	e8 6e ea ff ff       	call   c0020d7e <IDE::prepareInterrupt(unsigned char)>
c0022310:	83 c4 10             	add    esp,0x10
c0022313:	50                   	push   eax
c0022314:	50                   	push   eax
c0022315:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002231c:	50                   	push   eax
c002231d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022323:	e8 6a ea ff ff       	call   c0020d92 <IDE::getBase(unsigned char)>
c0022328:	8d 50 07             	lea    edx,[eax+0x7]
c002232b:	ec                   	in     al,dx
c002232c:	83 c4 10             	add    esp,0x10
c002232f:	a8 88                	test   al,0x88
c0022331:	74 0a                	je     c002233d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0022333:	4b                   	dec    ebx
c0022334:	75 dd                	jne    c0022313 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0022336:	bb 02 00 00 00       	mov    ebx,0x2
c002233b:	eb 02                	jmp    c002233f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002233d:	31 db                	xor    ebx,ebx
c002233f:	83 c4 1c             	add    esp,0x1c
c0022342:	89 d8                	mov    eax,ebx
c0022344:	5b                   	pop    ebx
c0022345:	5e                   	pop    esi
c0022346:	5f                   	pop    edi
c0022347:	5d                   	pop    ebp
c0022348:	c3                   	ret    
c0022349:	90                   	nop

c002234a <ATAPI::diskRemoved()>:
c002234a:	83 ec 18             	sub    esp,0x18
c002234d:	68 8f 96 02 c0       	push   0xc002968f
c0022352:	e8 ee 02 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0022357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002235b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0022362:	83 c4 1c             	add    esp,0x1c
c0022365:	c3                   	ret    

c0022366 <ATAPI::eject()>:
c0022366:	57                   	push   edi
c0022367:	b9 03 00 00 00       	mov    ecx,0x3
c002236c:	53                   	push   ebx
c002236d:	83 ec 14             	sub    esp,0x14
c0022370:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022374:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022378:	fc                   	cld    
c0022379:	31 c0                	xor    eax,eax
c002237b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002237d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0022382:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0022387:	50                   	push   eax
c0022388:	50                   	push   eax
c0022389:	6a 00                	push   0x0
c002238b:	6a 00                	push   0x0
c002238d:	6a 00                	push   0x0
c002238f:	6a 02                	push   0x2
c0022391:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022395:	50                   	push   eax
c0022396:	53                   	push   ebx
c0022397:	e8 ee fc ff ff       	call   c002208a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002239c:	83 c4 14             	add    esp,0x14
c002239f:	53                   	push   ebx
c00223a0:	e8 a5 ff ff ff       	call   c002234a <ATAPI::diskRemoved()>
c00223a5:	83 c4 24             	add    esp,0x24
c00223a8:	5b                   	pop    ebx
c00223a9:	5f                   	pop    edi
c00223aa:	c3                   	ret    
c00223ab:	90                   	nop

c00223ac <ATAPI::diskInserted()>:
c00223ac:	53                   	push   ebx
c00223ad:	83 ec 14             	sub    esp,0x14
c00223b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00223b4:	68 a5 96 02 c0       	push   0xc00296a5
c00223b9:	e8 87 02 ff ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00223be:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00223c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00223c8:	e8 df 1a ff ff       	call   c0013eac <PhysicalDisk::startCache()>
c00223cd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00223d1:	83 c4 18             	add    esp,0x18
c00223d4:	5b                   	pop    ebx
c00223d5:	e9 82 3a ff ff       	jmp    c0015e5c <createPartitionsForDisk(PhysicalDisk*)>

c00223da <ATAPI::detectMedia()>:
c00223da:	56                   	push   esi
c00223db:	53                   	push   ebx
c00223dc:	83 ec 28             	sub    esp,0x28
c00223df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00223e3:	6a 0c                	push   0xc
c00223e5:	6a 00                	push   0x0
c00223e7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00223eb:	56                   	push   esi
c00223ec:	e8 8c e2 fd ff       	call   c000067d <memset>
c00223f1:	58                   	pop    eax
c00223f2:	5a                   	pop    edx
c00223f3:	6a 00                	push   0x0
c00223f5:	6a 00                	push   0x0
c00223f7:	6a 00                	push   0x0
c00223f9:	6a 00                	push   0x0
c00223fb:	56                   	push   esi
c00223fc:	53                   	push   ebx
c00223fd:	e8 88 fc ff ff       	call   c002208a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022402:	83 c4 1c             	add    esp,0x1c
c0022405:	6a 0c                	push   0xc
c0022407:	6a 00                	push   0x0
c0022409:	56                   	push   esi
c002240a:	e8 6e e2 fd ff       	call   c000067d <memset>
c002240f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0022414:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0022419:	59                   	pop    ecx
c002241a:	58                   	pop    eax
c002241b:	6a 01                	push   0x1
c002241d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022421:	50                   	push   eax
c0022422:	6a 00                	push   0x0
c0022424:	6a 12                	push   0x12
c0022426:	56                   	push   esi
c0022427:	53                   	push   ebx
c0022428:	e8 5d fc ff ff       	call   c002208a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002242d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0022431:	83 c4 20             	add    esp,0x20
c0022434:	83 e0 7f             	and    eax,0x7f
c0022437:	3c 70                	cmp    al,0x70
c0022439:	74 15                	je     c0022450 <ATAPI::detectMedia()+0x76>
c002243b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022442:	75 0c                	jne    c0022450 <ATAPI::detectMedia()+0x76>
c0022444:	83 ec 0c             	sub    esp,0xc
c0022447:	53                   	push   ebx
c0022448:	e8 5f ff ff ff       	call   c00223ac <ATAPI::diskInserted()>
c002244d:	83 c4 10             	add    esp,0x10
c0022450:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022454:	83 e0 0f             	and    eax,0xf
c0022457:	3c 02                	cmp    al,0x2
c0022459:	75 1b                	jne    c0022476 <ATAPI::detectMedia()+0x9c>
c002245b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0022460:	75 2d                	jne    c002248f <ATAPI::detectMedia()+0xb5>
c0022462:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022469:	74 24                	je     c002248f <ATAPI::detectMedia()+0xb5>
c002246b:	83 ec 0c             	sub    esp,0xc
c002246e:	53                   	push   ebx
c002246f:	e8 d6 fe ff ff       	call   c002234a <ATAPI::diskRemoved()>
c0022474:	eb 16                	jmp    c002248c <ATAPI::detectMedia()+0xb2>
c0022476:	84 c0                	test   al,al
c0022478:	75 15                	jne    c002248f <ATAPI::detectMedia()+0xb5>
c002247a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022481:	75 0c                	jne    c002248f <ATAPI::detectMedia()+0xb5>
c0022483:	83 ec 0c             	sub    esp,0xc
c0022486:	53                   	push   ebx
c0022487:	e8 20 ff ff ff       	call   c00223ac <ATAPI::diskInserted()>
c002248c:	83 c4 10             	add    esp,0x10
c002248f:	83 c4 24             	add    esp,0x24
c0022492:	5b                   	pop    ebx
c0022493:	5e                   	pop    esi
c0022494:	c3                   	ret    
c0022495:	90                   	nop

c0022496 <ATAPI::open(int, int, void*)>:
c0022496:	53                   	push   ebx
c0022497:	83 ec 08             	sub    esp,0x8
c002249a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002249e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00224a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00224a6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00224ac:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00224b2:	c1 e0 06             	shl    eax,0x6
c00224b5:	01 d0                	add    eax,edx
c00224b7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00224be:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00224c4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00224cb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00224d5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00224db:	6a 04                	push   0x4
c00224dd:	6a 0c                	push   0xc
c00224df:	51                   	push   ecx
c00224e0:	52                   	push   edx
c00224e1:	e8 be e8 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224e6:	90                   	nop
c00224e7:	90                   	nop
c00224e8:	6a 00                	push   0x0
c00224ea:	6a 0c                	push   0xc
c00224ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00224f3:	50                   	push   eax
c00224f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00224fa:	e8 a5 e8 ff ff       	call   c0020da4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224ff:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022506:	83 c4 14             	add    esp,0x14
c0022509:	53                   	push   ebx
c002250a:	e8 cb fe ff ff       	call   c00223da <ATAPI::detectMedia()>
c002250f:	31 c0                	xor    eax,eax
c0022511:	83 c4 18             	add    esp,0x18
c0022514:	5b                   	pop    ebx
c0022515:	c3                   	ret    

c0022516 <ATAPI::read(unsigned long long, int, void*)>:
c0022516:	55                   	push   ebp
c0022517:	57                   	push   edi
c0022518:	56                   	push   esi
c0022519:	53                   	push   ebx
c002251a:	83 ec 1c             	sub    esp,0x1c
c002251d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022521:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022525:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0022529:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022530:	74 41                	je     c0022573 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0022532:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022536:	b9 03 00 00 00       	mov    ecx,0x3
c002253b:	fc                   	cld    
c002253c:	31 c0                	xor    eax,eax
c002253e:	86 fb                	xchg   bl,bh
c0022540:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022542:	c1 c3 10             	rol    ebx,0x10
c0022545:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002254a:	89 e8                	mov    eax,ebp
c002254c:	86 fb                	xchg   bl,bh
c002254e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022552:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0022556:	50                   	push   eax
c0022557:	50                   	push   eax
c0022558:	55                   	push   ebp
c0022559:	c1 e5 0b             	shl    ebp,0xb
c002255c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022560:	6a 00                	push   0x0
c0022562:	55                   	push   ebp
c0022563:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022567:	50                   	push   eax
c0022568:	56                   	push   esi
c0022569:	e8 1c fb ff ff       	call   c002208a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002256e:	83 c4 20             	add    esp,0x20
c0022571:	eb 1a                	jmp    c002258d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0022573:	83 ec 0c             	sub    esp,0xc
c0022576:	56                   	push   esi
c0022577:	e8 5e fe ff ff       	call   c00223da <ATAPI::detectMedia()>
c002257c:	83 c4 10             	add    esp,0x10
c002257f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022586:	75 aa                	jne    c0022532 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0022588:	b8 02 00 00 00       	mov    eax,0x2
c002258d:	83 c4 1c             	add    esp,0x1c
c0022590:	5b                   	pop    ebx
c0022591:	5e                   	pop    esi
c0022592:	5f                   	pop    edi
c0022593:	5d                   	pop    ebp
c0022594:	c3                   	ret    
c0022595:	90                   	nop

c0022596 <AVX::open(int, int, void*)>:
c0022596:	83 ec 0c             	sub    esp,0xc
c0022599:	e8 3a 11 00 00       	call   c00236d8 <avxInit>
c002259e:	b8 00 00 00 00       	mov    eax,0x0
c00225a3:	83 c4 0c             	add    esp,0xc
c00225a6:	c3                   	ret    
c00225a7:	90                   	nop

c00225a8 <AVX::close(int, int, void*)>:
c00225a8:	83 ec 0c             	sub    esp,0xc
c00225ab:	e8 29 11 00 00       	call   c00236d9 <avxClose>
c00225b0:	b8 00 00 00 00       	mov    eax,0x0
c00225b5:	83 c4 0c             	add    esp,0xc
c00225b8:	c3                   	ret    
c00225b9:	90                   	nop

c00225ba <AVX::available()>:
c00225ba:	83 ec 0c             	sub    esp,0xc
c00225bd:	e8 0e 11 00 00       	call   c00236d0 <avxDetect>
c00225c2:	85 c0                	test   eax,eax
c00225c4:	0f 95 c0             	setne  al
c00225c7:	83 c4 0c             	add    esp,0xc
c00225ca:	c3                   	ret    
c00225cb:	90                   	nop

c00225cc <AVX::save(void*)>:
c00225cc:	83 ec 0c             	sub    esp,0xc
c00225cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225d3:	83 ec 0c             	sub    esp,0xc
c00225d6:	50                   	push   eax
c00225d7:	e8 fa 10 00 00       	call   c00236d6 <avxSave>
c00225dc:	83 c4 10             	add    esp,0x10
c00225df:	90                   	nop
c00225e0:	83 c4 0c             	add    esp,0xc
c00225e3:	c3                   	ret    

c00225e4 <AVX::load(void*)>:
c00225e4:	83 ec 0c             	sub    esp,0xc
c00225e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225eb:	83 ec 0c             	sub    esp,0xc
c00225ee:	50                   	push   eax
c00225ef:	e8 e3 10 00 00       	call   c00236d7 <avxLoad>
c00225f4:	83 c4 10             	add    esp,0x10
c00225f7:	90                   	nop
c00225f8:	83 c4 0c             	add    esp,0xc
c00225fb:	c3                   	ret    

c00225fc <AVX::AVX()>:
c00225fc:	83 ec 0c             	sub    esp,0xc
c00225ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022603:	83 ec 08             	sub    esp,0x8
c0022606:	68 f0 96 02 c0       	push   0xc00296f0
c002260b:	50                   	push   eax
c002260c:	e8 11 19 ff ff       	call   c0013f22 <FPU::FPU(char const*)>
c0022611:	83 c4 10             	add    esp,0x10
c0022614:	ba 00 97 02 c0       	mov    edx,0xc0029700
c0022619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002261d:	89 10                	mov    DWORD PTR [eax],edx
c002261f:	90                   	nop
c0022620:	83 c4 0c             	add    esp,0xc
c0022623:	c3                   	ret    

c0022624 <MMX::available()>:
c0022624:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0022629:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002262f:	83 e0 20             	and    eax,0x20
c0022632:	84 c0                	test   al,al
c0022634:	0f 95 c0             	setne  al
c0022637:	c3                   	ret    

c0022638 <MMX::open(int, int, void*)>:
c0022638:	83 ec 0c             	sub    esp,0xc
c002263b:	e8 0c 11 00 00       	call   c002374c <x87Init>
c0022640:	b8 00 00 00 00       	mov    eax,0x0
c0022645:	83 c4 0c             	add    esp,0xc
c0022648:	c3                   	ret    
c0022649:	90                   	nop

c002264a <MMX::close(int, int, void*)>:
c002264a:	83 ec 0c             	sub    esp,0xc
c002264d:	e8 14 11 00 00       	call   c0023766 <x87Close>
c0022652:	b8 00 00 00 00       	mov    eax,0x0
c0022657:	83 c4 0c             	add    esp,0xc
c002265a:	c3                   	ret    
c002265b:	90                   	nop

c002265c <MMX::save(void*)>:
c002265c:	83 ec 0c             	sub    esp,0xc
c002265f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022663:	83 ec 0c             	sub    esp,0xc
c0022666:	50                   	push   eax
c0022667:	e8 d5 10 00 00       	call   c0023741 <x87Save>
c002266c:	83 c4 10             	add    esp,0x10
c002266f:	90                   	nop
c0022670:	83 c4 0c             	add    esp,0xc
c0022673:	c3                   	ret    

c0022674 <MMX::load(void*)>:
c0022674:	83 ec 0c             	sub    esp,0xc
c0022677:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002267b:	83 ec 0c             	sub    esp,0xc
c002267e:	50                   	push   eax
c002267f:	e8 c3 10 00 00       	call   c0023747 <x87Load>
c0022684:	83 c4 10             	add    esp,0x10
c0022687:	90                   	nop
c0022688:	83 c4 0c             	add    esp,0xc
c002268b:	c3                   	ret    

c002268c <MMX::MMX()>:
c002268c:	83 ec 0c             	sub    esp,0xc
c002268f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022693:	83 ec 08             	sub    esp,0x8
c0022696:	68 30 97 02 c0       	push   0xc0029730
c002269b:	50                   	push   eax
c002269c:	e8 81 18 ff ff       	call   c0013f22 <FPU::FPU(char const*)>
c00226a1:	83 c4 10             	add    esp,0x10
c00226a4:	ba 40 97 02 c0       	mov    edx,0xc0029740
c00226a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226ad:	89 10                	mov    DWORD PTR [eax],edx
c00226af:	90                   	nop
c00226b0:	83 c4 0c             	add    esp,0xc
c00226b3:	c3                   	ret    

c00226b4 <SSE::open(int, int, void*)>:
c00226b4:	83 ec 0c             	sub    esp,0xc
c00226b7:	e8 4b 10 00 00       	call   c0023707 <sseInit>
c00226bc:	b8 00 00 00 00       	mov    eax,0x0
c00226c1:	83 c4 0c             	add    esp,0xc
c00226c4:	c3                   	ret    
c00226c5:	90                   	nop

c00226c6 <SSE::close(int, int, void*)>:
c00226c6:	83 ec 0c             	sub    esp,0xc
c00226c9:	e8 49 10 00 00       	call   c0023717 <sseClose>
c00226ce:	b8 00 00 00 00       	mov    eax,0x0
c00226d3:	83 c4 0c             	add    esp,0xc
c00226d6:	c3                   	ret    
c00226d7:	90                   	nop

c00226d8 <SSE::available()>:
c00226d8:	83 ec 1c             	sub    esp,0x1c
c00226db:	e8 00 10 00 00       	call   c00236e0 <sseDetect>
c00226e0:	85 c0                	test   eax,eax
c00226e2:	0f 95 c0             	setne  al
c00226e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00226e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00226ed:	83 c4 1c             	add    esp,0x1c
c00226f0:	c3                   	ret    
c00226f1:	90                   	nop

c00226f2 <SSE::save(void*)>:
c00226f2:	83 ec 0c             	sub    esp,0xc
c00226f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00226f9:	83 ec 0c             	sub    esp,0xc
c00226fc:	50                   	push   eax
c00226fd:	e8 f9 0f 00 00       	call   c00236fb <sseSave>
c0022702:	83 c4 10             	add    esp,0x10
c0022705:	90                   	nop
c0022706:	83 c4 0c             	add    esp,0xc
c0022709:	c3                   	ret    

c002270a <SSE::load(void*)>:
c002270a:	83 ec 0c             	sub    esp,0xc
c002270d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022711:	83 ec 0c             	sub    esp,0xc
c0022714:	50                   	push   eax
c0022715:	e8 e7 0f 00 00       	call   c0023701 <sseLoad>
c002271a:	83 c4 10             	add    esp,0x10
c002271d:	90                   	nop
c002271e:	83 c4 0c             	add    esp,0xc
c0022721:	c3                   	ret    

c0022722 <SSE::SSE()>:
c0022722:	83 ec 0c             	sub    esp,0xc
c0022725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022729:	83 ec 08             	sub    esp,0x8
c002272c:	68 70 97 02 c0       	push   0xc0029770
c0022731:	50                   	push   eax
c0022732:	e8 eb 17 ff ff       	call   c0013f22 <FPU::FPU(char const*)>
c0022737:	83 c4 10             	add    esp,0x10
c002273a:	ba 80 97 02 c0       	mov    edx,0xc0029780
c002273f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022743:	89 10                	mov    DWORD PTR [eax],edx
c0022745:	90                   	nop
c0022746:	83 c4 0c             	add    esp,0xc
c0022749:	c3                   	ret    

c002274a <x87::open(int, int, void*)>:
c002274a:	83 ec 0c             	sub    esp,0xc
c002274d:	e8 fa 0f 00 00       	call   c002374c <x87Init>
c0022752:	b8 00 00 00 00       	mov    eax,0x0
c0022757:	83 c4 0c             	add    esp,0xc
c002275a:	c3                   	ret    
c002275b:	90                   	nop

c002275c <x87::close(int, int, void*)>:
c002275c:	83 ec 0c             	sub    esp,0xc
c002275f:	e8 02 10 00 00       	call   c0023766 <x87Close>
c0022764:	b8 00 00 00 00       	mov    eax,0x0
c0022769:	83 c4 0c             	add    esp,0xc
c002276c:	c3                   	ret    
c002276d:	90                   	nop

c002276e <x87::available()>:
c002276e:	83 ec 0c             	sub    esp,0xc
c0022771:	e8 b0 0f 00 00       	call   c0023726 <x87Detect>
c0022776:	85 c0                	test   eax,eax
c0022778:	0f 95 c0             	setne  al
c002277b:	83 c4 0c             	add    esp,0xc
c002277e:	c3                   	ret    
c002277f:	90                   	nop

c0022780 <x87::save(void*)>:
c0022780:	83 ec 0c             	sub    esp,0xc
c0022783:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022787:	83 ec 0c             	sub    esp,0xc
c002278a:	50                   	push   eax
c002278b:	e8 b1 0f 00 00       	call   c0023741 <x87Save>
c0022790:	83 c4 10             	add    esp,0x10
c0022793:	90                   	nop
c0022794:	83 c4 0c             	add    esp,0xc
c0022797:	c3                   	ret    

c0022798 <x87::load(void*)>:
c0022798:	83 ec 0c             	sub    esp,0xc
c002279b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002279f:	83 ec 0c             	sub    esp,0xc
c00227a2:	50                   	push   eax
c00227a3:	e8 9f 0f 00 00       	call   c0023747 <x87Load>
c00227a8:	83 c4 10             	add    esp,0x10
c00227ab:	90                   	nop
c00227ac:	83 c4 0c             	add    esp,0xc
c00227af:	c3                   	ret    

c00227b0 <x87::x87()>:
c00227b0:	83 ec 0c             	sub    esp,0xc
c00227b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227b7:	83 ec 08             	sub    esp,0x8
c00227ba:	68 b0 97 02 c0       	push   0xc00297b0
c00227bf:	50                   	push   eax
c00227c0:	e8 5d 17 ff ff       	call   c0013f22 <FPU::FPU(char const*)>
c00227c5:	83 c4 10             	add    esp,0x10
c00227c8:	ba c0 97 02 c0       	mov    edx,0xc00297c0
c00227cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d1:	89 10                	mov    DWORD PTR [eax],edx
c00227d3:	90                   	nop
c00227d4:	83 c4 0c             	add    esp,0xc
c00227d7:	c3                   	ret    

c00227d8 <APIC::disable()>:
c00227d8:	90                   	nop
c00227d9:	c3                   	ret    

c00227da <APIC::close(int, int, void*)>:
c00227da:	55                   	push   ebp
c00227db:	89 e5                	mov    ebp,esp
c00227dd:	83 ec 08             	sub    esp,0x8
c00227e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00227e5:	83 c0 3c             	add    eax,0x3c
c00227e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00227ea:	83 ec 0c             	sub    esp,0xc
c00227ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227f0:	ff d0                	call   eax
c00227f2:	83 c4 10             	add    esp,0x10
c00227f5:	b8 00 00 00 00       	mov    eax,0x0
c00227fa:	c9                   	leave  
c00227fb:	c3                   	ret    

c00227fc <IOAPIC::close(int, int, void*)>:
c00227fc:	b8 00 00 00 00       	mov    eax,0x0
c0022801:	c3                   	ret    

c0022802 <APIC::io_wait()>:
c0022802:	eb 00                	jmp    c0022804 <APIC::io_wait()+0x2>
c0022804:	eb 00                	jmp    c0022806 <APIC::io_wait()+0x4>
c0022806:	90                   	nop
c0022807:	c3                   	ret    

c0022808 <APIC::getBase()>:
c0022808:	55                   	push   ebp
c0022809:	89 e5                	mov    ebp,esp
c002280b:	83 ec 18             	sub    esp,0x18
c002280e:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0022813:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022819:	83 e0 08             	and    eax,0x8
c002281c:	84 c0                	test   al,al
c002281e:	75 07                	jne    c0022827 <APIC::getBase()+0x1f>
c0022820:	b8 00 00 00 00       	mov    eax,0x0
c0022825:	eb 21                	jmp    c0022848 <APIC::getBase()+0x40>
c0022827:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c002282c:	83 ec 08             	sub    esp,0x8
c002282f:	6a 1b                	push   0x1b
c0022831:	50                   	push   eax
c0022832:	e8 43 c2 fe ff       	call   c000ea7a <Computer::rdmsr(unsigned int)>
c0022837:	83 c4 10             	add    esp,0x10
c002283a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002283d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022840:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022843:	25 00 f0 ff ff       	and    eax,0xfffff000
c0022848:	c9                   	leave  
c0022849:	c3                   	ret    

c002284a <APIC::eoi(unsigned char)>:
c002284a:	55                   	push   ebp
c002284b:	89 e5                	mov    ebp,esp
c002284d:	83 ec 28             	sub    esp,0x28
c0022850:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022853:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022856:	83 ec 0c             	sub    esp,0xc
c0022859:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002285c:	e8 a7 ff ff ff       	call   c0022808 <APIC::getBase()>
c0022861:	83 c4 10             	add    esp,0x10
c0022864:	05 b0 00 00 00       	add    eax,0xb0
c0022869:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002286c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002286f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0022875:	90                   	nop
c0022876:	c9                   	leave  
c0022877:	c3                   	ret    

c0022878 <APIC::open(int, int, void*)>:
c0022878:	55                   	push   ebp
c0022879:	89 e5                	mov    ebp,esp
c002287b:	57                   	push   edi
c002287c:	56                   	push   esi
c002287d:	53                   	push   ebx
c002287e:	83 ec 2c             	sub    esp,0x2c
c0022881:	83 ec 0c             	sub    esp,0xc
c0022884:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022887:	e8 7c ff ff ff       	call   c0022808 <APIC::getBase()>
c002288c:	83 c4 10             	add    esp,0x10
c002288f:	89 c2                	mov    edx,eax
c0022891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022894:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002289a:	0f b6 f8             	movzx  edi,al
c002289d:	89 d0                	mov    eax,edx
c002289f:	ba 00 00 00 00       	mov    edx,0x0
c00228a4:	89 c1                	mov    ecx,eax
c00228a6:	80 e5 ff             	and    ch,0xff
c00228a9:	89 cb                	mov    ebx,ecx
c00228ab:	0f b6 f2             	movzx  esi,dl
c00228ae:	89 d8                	mov    eax,ebx
c00228b0:	89 f2                	mov    edx,esi
c00228b2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00228b5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00228b8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00228bc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00228c0:	83 e0 00             	and    eax,0x0
c00228c3:	09 d0                	or     eax,edx
c00228c5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00228c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00228cc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00228d2:	8d 50 01             	lea    edx,[eax+0x1]
c00228d5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00228d8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00228de:	0f b6 d0             	movzx  edx,al
c00228e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00228e4:	83 c2 08             	add    edx,0x8
c00228e7:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00228eb:	0f b6 c9             	movzx  ecx,cl
c00228ee:	81 c9 00 00 01 00    	or     ecx,0x10000
c00228f4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00228f8:	83 ec 0c             	sub    esp,0xc
c00228fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00228fe:	e8 05 ff ff ff       	call   c0022808 <APIC::getBase()>
c0022903:	83 c4 10             	add    esp,0x10
c0022906:	05 f0 00 00 00       	add    eax,0xf0
c002290b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002290e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022911:	8b 00                	mov    eax,DWORD PTR [eax]
c0022913:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022916:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002291d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0022924:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022927:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002292a:	89 10                	mov    DWORD PTR [eax],edx
c002292c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0022933:	a1 30 b3 02 c0       	mov    eax,ds:0xc002b330
c0022938:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002293b:	7d 7c                	jge    c00229b9 <APIC::open(int, int, void*)+0x141>
c002293d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022940:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0022947:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002294a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002294d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0022954:	c1 e8 08             	shr    eax,0x8
c0022957:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002295b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002295e:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0022965:	c1 e8 18             	shr    eax,0x18
c0022968:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002296b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002296f:	75 40                	jne    c00229b1 <APIC::open(int, int, void*)+0x139>
c0022971:	83 ec 0c             	sub    esp,0xc
c0022974:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022977:	e8 8c fe ff ff       	call   c0022808 <APIC::getBase()>
c002297c:	83 c4 10             	add    esp,0x10
c002297f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0022983:	75 07                	jne    c002298c <APIC::open(int, int, void*)+0x114>
c0022985:	ba 60 03 00 00       	mov    edx,0x360
c002298a:	eb 05                	jmp    c0022991 <APIC::open(int, int, void*)+0x119>
c002298c:	ba 50 03 00 00       	mov    edx,0x350
c0022991:	01 d0                	add    eax,edx
c0022993:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022996:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0022999:	8b 00                	mov    eax,DWORD PTR [eax]
c002299b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002299e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00229a5:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00229a9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00229ac:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00229af:	89 10                	mov    DWORD PTR [eax],edx
c00229b1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00229b4:	e9 7a ff ff ff       	jmp    c0022933 <APIC::open(int, int, void*)+0xbb>
c00229b9:	b8 00 00 00 00       	mov    eax,0x0
c00229be:	8d 65 f4             	lea    esp,[ebp-0xc]
c00229c1:	5b                   	pop    ebx
c00229c2:	5e                   	pop    esi
c00229c3:	5f                   	pop    edi
c00229c4:	5d                   	pop    ebp
c00229c5:	c3                   	ret    

c00229c6 <IOAPIC::IOAPIC()>:
c00229c6:	83 ec 0c             	sub    esp,0xc
c00229c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cd:	83 ec 08             	sub    esp,0x8
c00229d0:	68 f0 97 02 c0       	push   0xc00297f0
c00229d5:	50                   	push   eax
c00229d6:	e8 49 12 ff ff       	call   c0013c24 <Device::Device(char const*)>
c00229db:	83 c4 10             	add    esp,0x10
c00229de:	ba 18 99 02 c0       	mov    edx,0xc0029918
c00229e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e7:	89 10                	mov    DWORD PTR [eax],edx
c00229e9:	90                   	nop
c00229ea:	83 c4 0c             	add    esp,0xc
c00229ed:	c3                   	ret    

c00229ee <APIC::APIC()>:
c00229ee:	53                   	push   ebx
c00229ef:	83 ec 18             	sub    esp,0x18
c00229f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229f6:	83 ec 08             	sub    esp,0x8
c00229f9:	68 f8 97 02 c0       	push   0xc00297f8
c00229fe:	50                   	push   eax
c00229ff:	e8 78 19 ff ff       	call   c001437c <InterruptController::InterruptController(char const*)>
c0022a04:	83 c4 10             	add    esp,0x10
c0022a07:	ba d0 98 02 c0       	mov    edx,0xc00298d0
c0022a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a10:	89 10                	mov    DWORD PTR [eax],edx
c0022a12:	a0 a0 cd 02 c0       	mov    al,ds:0xc002cda0
c0022a17:	83 f0 01             	xor    eax,0x1
c0022a1a:	84 c0                	test   al,al
c0022a1c:	0f 84 a1 00 00 00    	je     c0022ac3 <APIC::APIC()+0xd5>
c0022a22:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0022a27:	a0 e0 b3 02 c0       	mov    al,ds:0xc002b3e0
c0022a2c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0022a30:	0f 83 86 00 00 00    	jae    c0022abc <APIC::APIC()+0xce>
c0022a36:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0022a3e:	83 ec 0c             	sub    esp,0xc
c0022a41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022a45:	e8 88 ca fe ff       	call   c000f4d2 <malloc>
c0022a4a:	83 c4 10             	add    esp,0x10
c0022a4d:	89 c3                	mov    ebx,eax
c0022a4f:	83 ec 0c             	sub    esp,0xc
c0022a52:	53                   	push   ebx
c0022a53:	e8 6e ff ff ff       	call   c00229c6 <IOAPIC::IOAPIC()>
c0022a58:	83 c4 10             	add    esp,0x10
c0022a5b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0022a5f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0022a64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a68:	89 14 85 80 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3280],edx
c0022a6f:	a1 60 cd 02 c0       	mov    eax,ds:0xc002cd60
c0022a74:	40                   	inc    eax
c0022a75:	a3 60 cd 02 c0       	mov    ds:0xc002cd60,eax
c0022a7a:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0022a7f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022a85:	83 ec 08             	sub    esp,0x8
c0022a88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022a8c:	50                   	push   eax
c0022a8d:	e8 a2 0f ff ff       	call   c0013a34 <Device::addChild(Device*)>
c0022a92:	83 c4 10             	add    esp,0x10
c0022a95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a9b:	83 c0 08             	add    eax,0x8
c0022a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aa0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022aa5:	6a 00                	push   0x0
c0022aa7:	6a 00                	push   0x0
c0022aa9:	52                   	push   edx
c0022aaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aae:	ff d0                	call   eax
c0022ab0:	83 c4 10             	add    esp,0x10
c0022ab3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022ab7:	e9 6b ff ff ff       	jmp    c0022a27 <APIC::APIC()+0x39>
c0022abc:	c6 05 a0 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cda0,0x1
c0022ac3:	90                   	nop
c0022ac4:	83 c4 18             	add    esp,0x18
c0022ac7:	5b                   	pop    ebx
c0022ac8:	c3                   	ret    
c0022ac9:	90                   	nop

c0022aca <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0022aca:	55                   	push   ebp
c0022acb:	89 e5                	mov    ebp,esp
c0022acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022ad0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022ad6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022ad9:	72 1d                	jb     c0022af8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022ade:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022ae7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0022aed:	01 d0                	add    eax,edx
c0022aef:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022af2:	73 04                	jae    c0022af8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022af4:	b0 01                	mov    al,0x1
c0022af6:	eb 02                	jmp    c0022afa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0022af8:	b0 00                	mov    al,0x0
c0022afa:	5d                   	pop    ebp
c0022afb:	c3                   	ret    

c0022afc <IOAPIC::read(int)>:
c0022afc:	55                   	push   ebp
c0022afd:	89 e5                	mov    ebp,esp
c0022aff:	83 ec 10             	sub    esp,0x10
c0022b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b05:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022b0b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022b0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b11:	0f b6 d0             	movzx  edx,al
c0022b14:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022b17:	89 10                	mov    DWORD PTR [eax],edx
c0022b19:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022b1c:	83 c0 10             	add    eax,0x10
c0022b1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b21:	c9                   	leave  
c0022b22:	c3                   	ret    
c0022b23:	90                   	nop

c0022b24 <IOAPIC::open(int, int, void*)>:
c0022b24:	55                   	push   ebp
c0022b25:	89 e5                	mov    ebp,esp
c0022b27:	57                   	push   edi
c0022b28:	56                   	push   esi
c0022b29:	53                   	push   ebx
c0022b2a:	83 ec 0c             	sub    esp,0xc
c0022b2d:	83 ec 0c             	sub    esp,0xc
c0022b30:	68 23 98 02 c0       	push   0xc0029823
c0022b35:	e8 0b fb fe ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0022b3a:	83 c4 10             	add    esp,0x10
c0022b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022b43:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022b49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b4c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022b52:	8b 14 85 20 b4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4be0]
c0022b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b5c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b65:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022b6b:	8b 14 85 a0 b4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4b60]
c0022b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b75:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b7e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022b87:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022b8d:	0f b6 f8             	movzx  edi,al
c0022b90:	89 d0                	mov    eax,edx
c0022b92:	ba 00 00 00 00       	mov    edx,0x0
c0022b97:	89 c1                	mov    ecx,eax
c0022b99:	80 e5 ff             	and    ch,0xff
c0022b9c:	89 cb                	mov    ebx,ecx
c0022b9e:	0f b6 f2             	movzx  esi,dl
c0022ba1:	89 d8                	mov    eax,ebx
c0022ba3:	89 f2                	mov    edx,esi
c0022ba5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022ba8:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022bab:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022baf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022bb3:	83 e0 00             	and    eax,0x0
c0022bb6:	09 d0                	or     eax,edx
c0022bb8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022bbf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022bc5:	8d 50 01             	lea    edx,[eax+0x1]
c0022bc8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022bcb:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022bd1:	0f b6 d0             	movzx  edx,al
c0022bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022bd7:	83 c2 08             	add    edx,0x8
c0022bda:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022bde:	0f b6 c9             	movzx  ecx,cl
c0022be1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022be7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022beb:	83 ec 08             	sub    esp,0x8
c0022bee:	6a 01                	push   0x1
c0022bf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bf3:	e8 04 ff ff ff       	call   c0022afc <IOAPIC::read(int)>
c0022bf8:	83 c4 10             	add    esp,0x10
c0022bfb:	c1 f8 10             	sar    eax,0x10
c0022bfe:	0f b6 c0             	movzx  eax,al
c0022c01:	8d 50 01             	lea    edx,[eax+0x1]
c0022c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022c07:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0022c0d:	b8 00 00 00 00       	mov    eax,0x0
c0022c12:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022c15:	5b                   	pop    ebx
c0022c16:	5e                   	pop    esi
c0022c17:	5f                   	pop    edi
c0022c18:	5d                   	pop    ebp
c0022c19:	c3                   	ret    

c0022c1a <IOAPIC::write(int, int)>:
c0022c1a:	55                   	push   ebp
c0022c1b:	89 e5                	mov    ebp,esp
c0022c1d:	83 ec 10             	sub    esp,0x10
c0022c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022c23:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022c29:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022c2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022c2f:	0f b6 d0             	movzx  edx,al
c0022c32:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022c35:	89 10                	mov    DWORD PTR [eax],edx
c0022c37:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022c3a:	8d 50 10             	lea    edx,[eax+0x10]
c0022c3d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022c40:	89 02                	mov    DWORD PTR [edx],eax
c0022c42:	90                   	nop
c0022c43:	c9                   	leave  
c0022c44:	c3                   	ret    
c0022c45:	90                   	nop

c0022c46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022c46:	55                   	push   ebp
c0022c47:	89 e5                	mov    ebp,esp
c0022c49:	53                   	push   ebx
c0022c4a:	83 ec 2c             	sub    esp,0x2c
c0022c4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022c50:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022c53:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022c56:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022c59:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022c5c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022c5f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0022c62:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022c65:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022c68:	88 d8                	mov    al,bl
c0022c6a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0022c6d:	88 c8                	mov    al,cl
c0022c6f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022c72:	88 d0                	mov    al,dl
c0022c74:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0022c77:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022c7b:	83 c0 08             	add    eax,0x8
c0022c7e:	01 c0                	add    eax,eax
c0022c80:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022c83:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022c87:	83 c0 08             	add    eax,0x8
c0022c8a:	01 c0                	add    eax,eax
c0022c8c:	40                   	inc    eax
c0022c8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0022c90:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022c93:	50                   	push   eax
c0022c94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c97:	e8 60 fe ff ff       	call   c0022afc <IOAPIC::read(int)>
c0022c9c:	83 c4 08             	add    esp,0x8
c0022c9f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022ca2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0022ca9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0022cac:	c1 e0 18             	shl    eax,0x18
c0022caf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022cb2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022cb5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022cb8:	52                   	push   edx
c0022cb9:	50                   	push   eax
c0022cba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cbd:	e8 58 ff ff ff       	call   c0022c1a <IOAPIC::write(int, int)>
c0022cc2:	83 c4 0c             	add    esp,0xc
c0022cc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022cc8:	50                   	push   eax
c0022cc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ccc:	e8 2b fe ff ff       	call   c0022afc <IOAPIC::read(int)>
c0022cd1:	83 c4 08             	add    esp,0x8
c0022cd4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022cd7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0022cde:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0022ce5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0022cec:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022cf0:	74 09                	je     c0022cfb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0022cf2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0022cf9:	eb 07                	jmp    c0022d02 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0022cfb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022d02:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022d06:	74 09                	je     c0022d11 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0022d08:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022d0f:	eb 07                	jmp    c0022d18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0022d11:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0022d18:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022d1f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022d23:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022d26:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022d29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022d2c:	52                   	push   edx
c0022d2d:	50                   	push   eax
c0022d2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d31:	e8 e4 fe ff ff       	call   c0022c1a <IOAPIC::write(int, int)>
c0022d36:	83 c4 0c             	add    esp,0xc
c0022d39:	90                   	nop
c0022d3a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0022d3d:	c9                   	leave  
c0022d3e:	c3                   	ret    
c0022d3f:	90                   	nop

c0022d40 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022d40:	55                   	push   ebp
c0022d41:	89 e5                	mov    ebp,esp
c0022d43:	57                   	push   edi
c0022d44:	56                   	push   esi
c0022d45:	53                   	push   ebx
c0022d46:	83 ec 2c             	sub    esp,0x2c
c0022d49:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022d4c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022d4f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022d53:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022d57:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022d5b:	74 5a                	je     c0022db7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022d5d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0022d61:	7f 44                	jg     c0022da7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022d63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022d66:	05 60 9d 02 c0       	add    eax,0xc0029d60
c0022d6b:	8a 00                	mov    al,BYTE PTR [eax]
c0022d6d:	0f b6 c0             	movzx  eax,al
c0022d70:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022d73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022d76:	66 8b 84 00 c0 b3 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd4c40]
c0022d7e:	0f b7 c0             	movzx  eax,ax
c0022d81:	83 e0 02             	and    eax,0x2
c0022d84:	85 c0                	test   eax,eax
c0022d86:	74 04                	je     c0022d8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022d88:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022d8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022d8f:	66 8b 84 00 c0 b3 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd4c40]
c0022d97:	0f b7 c0             	movzx  eax,ax
c0022d9a:	83 e0 08             	and    eax,0x8
c0022d9d:	85 c0                	test   eax,eax
c0022d9f:	74 16                	je     c0022db7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022da1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022da5:	eb 10                	jmp    c0022db7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022da7:	83 ec 0c             	sub    esp,0xc
c0022daa:	68 34 98 02 c0       	push   0xc0029834
c0022daf:	e8 55 60 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0022db4:	83 c4 10             	add    esp,0x10
c0022db7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0022dbb:	a1 60 cd 02 c0       	mov    eax,ds:0xc002cd60
c0022dc0:	83 ec 08             	sub    esp,0x8
c0022dc3:	50                   	push   eax
c0022dc4:	68 6c 98 02 c0       	push   0xc002986c
c0022dc9:	e8 77 f8 fe ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0022dce:	83 c4 10             	add    esp,0x10
c0022dd1:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0022dd8:	a1 60 cd 02 c0       	mov    eax,ds:0xc002cd60
c0022ddd:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0022de0:	7d 67                	jge    c0022e49 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022de2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022de5:	8b 04 85 80 cd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3280]
c0022dec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022def:	83 ec 08             	sub    esp,0x8
c0022df2:	52                   	push   edx
c0022df3:	50                   	push   eax
c0022df4:	e8 d1 fc ff ff       	call   c0022aca <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0022df9:	83 c4 10             	add    esp,0x10
c0022dfc:	84 c0                	test   al,al
c0022dfe:	74 44                	je     c0022e44 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0022e00:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022e03:	8b 1c 85 80 cd 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd3280]
c0022e0a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022e0e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022e11:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022e15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022e18:	83 c0 20             	add    eax,0x20
c0022e1b:	0f b6 f0             	movzx  esi,al
c0022e1e:	b8 00 00 00 00       	mov    eax,0x0
c0022e23:	99                   	cdq    
c0022e24:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022e27:	0f b6 c9             	movzx  ecx,cl
c0022e2a:	83 ec 04             	sub    esp,0x4
c0022e2d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0022e30:	57                   	push   edi
c0022e31:	56                   	push   esi
c0022e32:	52                   	push   edx
c0022e33:	50                   	push   eax
c0022e34:	51                   	push   ecx
c0022e35:	53                   	push   ebx
c0022e36:	e8 0b fe ff ff       	call   c0022c46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022e3b:	83 c4 20             	add    esp,0x20
c0022e3e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022e42:	eb 05                	jmp    c0022e49 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022e44:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022e47:	eb 8f                	jmp    c0022dd8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022e49:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0022e4c:	83 f0 01             	xor    eax,0x1
c0022e4f:	84 c0                	test   al,al
c0022e51:	74 10                	je     c0022e63 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022e53:	83 ec 0c             	sub    esp,0xc
c0022e56:	68 83 98 02 c0       	push   0xc0029883
c0022e5b:	e8 a9 5f ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0022e60:	83 c4 10             	add    esp,0x10
c0022e63:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022e67:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022e6e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022e72:	7f 65                	jg     c0022ed9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0022e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022e77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022e7a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022e81:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022e84:	01 ca                	add    edx,ecx
c0022e86:	83 c2 54             	add    edx,0x54
c0022e89:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022e8d:	85 c0                	test   eax,eax
c0022e8f:	75 43                	jne    c0022ed4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0022e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022e94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022e97:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022e9e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022ea1:	01 ca                	add    edx,ecx
c0022ea3:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022ea6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022ea9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022eb0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022eb3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022eba:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022ebd:	01 ca                	add    edx,ecx
c0022ebf:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022ec5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0022ec8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022ecc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022ecf:	83 e8 20             	sub    eax,0x20
c0022ed2:	eb 1a                	jmp    c0022eee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0022ed4:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0022ed7:	eb 95                	jmp    c0022e6e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0022ed9:	83 ec 0c             	sub    esp,0xc
c0022edc:	68 90 98 02 c0       	push   0xc0029890
c0022ee1:	e8 23 5f ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0022ee6:	83 c4 10             	add    esp,0x10
c0022ee9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022eee:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022ef1:	5b                   	pop    ebx
c0022ef2:	5e                   	pop    esi
c0022ef3:	5f                   	pop    edi
c0022ef4:	5d                   	pop    ebp
c0022ef5:	c3                   	ret    

c0022ef6 <PIC::disable()>:
c0022ef6:	55                   	push   ebp
c0022ef7:	89 e5                	mov    ebp,esp
c0022ef9:	83 ec 10             	sub    esp,0x10
c0022efc:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022f02:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022f06:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022f09:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022f0d:	ee                   	out    dx,al
c0022f0e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022f14:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022f18:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022f1b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022f1f:	ee                   	out    dx,al
c0022f20:	90                   	nop
c0022f21:	c9                   	leave  
c0022f22:	c3                   	ret    
c0022f23:	90                   	nop

c0022f24 <PIC::close(int, int, void*)>:
c0022f24:	55                   	push   ebp
c0022f25:	89 e5                	mov    ebp,esp
c0022f27:	83 ec 08             	sub    esp,0x8
c0022f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022f2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f2f:	83 c0 3c             	add    eax,0x3c
c0022f32:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f34:	83 ec 0c             	sub    esp,0xc
c0022f37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022f3a:	ff d0                	call   eax
c0022f3c:	83 c4 10             	add    esp,0x10
c0022f3f:	b8 00 00 00 00       	mov    eax,0x0
c0022f44:	c9                   	leave  
c0022f45:	c3                   	ret    

c0022f46 <PIC::PIC()>:
c0022f46:	83 ec 0c             	sub    esp,0xc
c0022f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f4d:	83 ec 08             	sub    esp,0x8
c0022f50:	68 3c 99 02 c0       	push   0xc002993c
c0022f55:	50                   	push   eax
c0022f56:	e8 21 14 ff ff       	call   c001437c <InterruptController::InterruptController(char const*)>
c0022f5b:	83 c4 10             	add    esp,0x10
c0022f5e:	ba 68 99 02 c0       	mov    edx,0xc0029968
c0022f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f67:	89 10                	mov    DWORD PTR [eax],edx
c0022f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f73:	0f b6 d0             	movzx  edx,al
c0022f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f7a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f8b:	0f b6 d0             	movzx  edx,al
c0022f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f92:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fa1:	8d 50 01             	lea    edx,[eax+0x1]
c0022fa4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fa8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022fae:	0f b6 d0             	movzx  edx,al
c0022fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022fb9:	83 e1 3f             	and    ecx,0x3f
c0022fbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fca:	0f b6 d0             	movzx  edx,al
c0022fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0022fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fe2:	0f b6 d0             	movzx  edx,al
c0022fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ff8:	8d 50 01             	lea    edx,[eax+0x1]
c0022ffb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023005:	0f b6 d0             	movzx  edx,al
c0023008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002300c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023010:	83 e1 3f             	and    ecx,0x3f
c0023013:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023017:	90                   	nop
c0023018:	83 c4 0c             	add    esp,0xc
c002301b:	c3                   	ret    

c002301c <PIC::ioWait()>:
c002301c:	eb 00                	jmp    c002301e <PIC::ioWait()+0x2>
c002301e:	eb 00                	jmp    c0023020 <PIC::ioWait()+0x4>
c0023020:	90                   	nop
c0023021:	c3                   	ret    

c0023022 <PIC::getIRQReg(int)>:
c0023022:	55                   	push   ebp
c0023023:	89 e5                	mov    ebp,esp
c0023025:	83 ec 10             	sub    esp,0x10
c0023028:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002302b:	0f b6 c0             	movzx  eax,al
c002302e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0023034:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0023037:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002303a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002303e:	ee                   	out    dx,al
c002303f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023042:	0f b6 c0             	movzx  eax,al
c0023045:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002304b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002304e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023051:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023055:	ee                   	out    dx,al
c0023056:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002305c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0023060:	89 c2                	mov    edx,eax
c0023062:	ec                   	in     al,dx
c0023063:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0023066:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023069:	0f b6 c0             	movzx  eax,al
c002306c:	c1 e0 08             	shl    eax,0x8
c002306f:	89 c1                	mov    ecx,eax
c0023071:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0023077:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002307b:	89 c2                	mov    edx,eax
c002307d:	ec                   	in     al,dx
c002307e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0023081:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0023084:	0f b6 c0             	movzx  eax,al
c0023087:	09 c8                	or     eax,ecx
c0023089:	c9                   	leave  
c002308a:	c3                   	ret    
c002308b:	90                   	nop

c002308c <PIC::eoi(unsigned char)>:
c002308c:	55                   	push   ebp
c002308d:	89 e5                	mov    ebp,esp
c002308f:	83 ec 14             	sub    esp,0x14
c0023092:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023095:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0023098:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002309c:	75 1e                	jne    c00230bc <PIC::eoi(unsigned char)+0x30>
c002309e:	6a 0b                	push   0xb
c00230a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00230a3:	e8 7a ff ff ff       	call   c0023022 <PIC::getIRQReg(int)>
c00230a8:	83 c4 08             	add    esp,0x8
c00230ab:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00230af:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00230b3:	25 80 00 00 00       	and    eax,0x80
c00230b8:	85 c0                	test   eax,eax
c00230ba:	74 5f                	je     c002311b <PIC::eoi(unsigned char)+0x8f>
c00230bc:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00230c0:	75 2d                	jne    c00230ef <PIC::eoi(unsigned char)+0x63>
c00230c2:	6a 0b                	push   0xb
c00230c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00230c7:	e8 56 ff ff ff       	call   c0023022 <PIC::getIRQReg(int)>
c00230cc:	83 c4 08             	add    esp,0x8
c00230cf:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00230d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00230d6:	66 85 c0             	test   ax,ax
c00230d9:	78 14                	js     c00230ef <PIC::eoi(unsigned char)+0x63>
c00230db:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00230e1:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00230e5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00230e8:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00230ec:	ee                   	out    dx,al
c00230ed:	eb 2d                	jmp    c002311c <PIC::eoi(unsigned char)+0x90>
c00230ef:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00230f3:	76 12                	jbe    c0023107 <PIC::eoi(unsigned char)+0x7b>
c00230f5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00230fb:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00230ff:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023102:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023106:	ee                   	out    dx,al
c0023107:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002310d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0023111:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023114:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023118:	ee                   	out    dx,al
c0023119:	eb 01                	jmp    c002311c <PIC::eoi(unsigned char)+0x90>
c002311b:	90                   	nop
c002311c:	c9                   	leave  
c002311d:	c3                   	ret    

c002311e <PIC::remap()>:
c002311e:	55                   	push   ebp
c002311f:	89 e5                	mov    ebp,esp
c0023121:	83 ec 48             	sub    esp,0x48
c0023124:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002312b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0023132:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0023138:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002313b:	89 c2                	mov    edx,eax
c002313d:	ec                   	in     al,dx
c002313e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0023141:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0023144:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0023147:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002314d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0023150:	89 c2                	mov    edx,eax
c0023152:	ec                   	in     al,dx
c0023153:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0023156:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0023159:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002315c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0023162:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0023166:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0023169:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002316c:	ee                   	out    dx,al
c002316d:	83 ec 0c             	sub    esp,0xc
c0023170:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023173:	e8 a4 fe ff ff       	call   c002301c <PIC::ioWait()>
c0023178:	83 c4 10             	add    esp,0x10
c002317b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0023181:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0023185:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0023188:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002318b:	ee                   	out    dx,al
c002318c:	83 ec 0c             	sub    esp,0xc
c002318f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023192:	e8 85 fe ff ff       	call   c002301c <PIC::ioWait()>
c0023197:	83 c4 10             	add    esp,0x10
c002319a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002319d:	0f b6 c0             	movzx  eax,al
c00231a0:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00231a6:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00231a9:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00231ac:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00231af:	ee                   	out    dx,al
c00231b0:	83 ec 0c             	sub    esp,0xc
c00231b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00231b6:	e8 61 fe ff ff       	call   c002301c <PIC::ioWait()>
c00231bb:	83 c4 10             	add    esp,0x10
c00231be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00231c1:	0f b6 c0             	movzx  eax,al
c00231c4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00231ca:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00231cd:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00231d0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00231d3:	ee                   	out    dx,al
c00231d4:	83 ec 0c             	sub    esp,0xc
c00231d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00231da:	e8 3d fe ff ff       	call   c002301c <PIC::ioWait()>
c00231df:	83 c4 10             	add    esp,0x10
c00231e2:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00231e8:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00231ec:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00231ef:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00231f2:	ee                   	out    dx,al
c00231f3:	83 ec 0c             	sub    esp,0xc
c00231f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00231f9:	e8 1e fe ff ff       	call   c002301c <PIC::ioWait()>
c00231fe:	83 c4 10             	add    esp,0x10
c0023201:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0023207:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002320b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002320e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023211:	ee                   	out    dx,al
c0023212:	83 ec 0c             	sub    esp,0xc
c0023215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023218:	e8 ff fd ff ff       	call   c002301c <PIC::ioWait()>
c002321d:	83 c4 10             	add    esp,0x10
c0023220:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0023226:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002322a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002322d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0023230:	ee                   	out    dx,al
c0023231:	83 ec 0c             	sub    esp,0xc
c0023234:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023237:	e8 e0 fd ff ff       	call   c002301c <PIC::ioWait()>
c002323c:	83 c4 10             	add    esp,0x10
c002323f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0023245:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0023249:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002324c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002324f:	ee                   	out    dx,al
c0023250:	83 ec 0c             	sub    esp,0xc
c0023253:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023256:	e8 c1 fd ff ff       	call   c002301c <PIC::ioWait()>
c002325b:	83 c4 10             	add    esp,0x10
c002325e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0023262:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0023268:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002326b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002326e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0023271:	ee                   	out    dx,al
c0023272:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0023276:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002327c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002327f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0023282:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0023285:	ee                   	out    dx,al
c0023286:	90                   	nop
c0023287:	c9                   	leave  
c0023288:	c3                   	ret    
c0023289:	90                   	nop

c002328a <PIC::open(int, int, void*)>:
c002328a:	55                   	push   ebp
c002328b:	89 e5                	mov    ebp,esp
c002328d:	83 ec 18             	sub    esp,0x18
c0023290:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0023296:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002329a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002329d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00232a1:	ee                   	out    dx,al
c00232a2:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00232a8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00232ac:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00232af:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00232b3:	ee                   	out    dx,al
c00232b4:	83 ec 0c             	sub    esp,0xc
c00232b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00232ba:	e8 5f fe ff ff       	call   c002311e <PIC::remap()>
c00232bf:	83 c4 10             	add    esp,0x10
c00232c2:	b8 00 00 00 00       	mov    eax,0x0
c00232c7:	c9                   	leave  
c00232c8:	c3                   	ret    
c00232c9:	90                   	nop

c00232ca <APICTimer::close(int, int, void*)>:
c00232ca:	b8 00 00 00 00       	mov    eax,0x0
c00232cf:	c3                   	ret    

c00232d0 <apicTimerHandler(regs*, void*)>:
c00232d0:	83 ec 0c             	sub    esp,0xc
c00232d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00232d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00232d9:	99                   	cdq    
c00232da:	52                   	push   edx
c00232db:	50                   	push   eax
c00232dc:	6a 00                	push   0x0
c00232de:	68 00 ca 9a 3b       	push   0x3b9aca00
c00232e3:	e8 74 07 00 00       	call   c0023a5c <__udivdi3>
c00232e8:	83 c4 10             	add    esp,0x10
c00232eb:	83 ec 08             	sub    esp,0x8
c00232ee:	52                   	push   edx
c00232ef:	50                   	push   eax
c00232f0:	e8 88 2e ff ff       	call   c001617d <timerHandler(unsigned long long)>
c00232f5:	83 c4 10             	add    esp,0x10
c00232f8:	90                   	nop
c00232f9:	83 c4 0c             	add    esp,0xc
c00232fc:	c3                   	ret    
c00232fd:	90                   	nop

c00232fe <APICTimer::write(int)>:
c00232fe:	53                   	push   ebx
c00232ff:	83 ec 28             	sub    esp,0x28
c0023302:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023306:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002330a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023310:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0023315:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002331b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0023321:	83 ec 0c             	sub    esp,0xc
c0023324:	50                   	push   eax
c0023325:	e8 de f4 ff ff       	call   c0022808 <APIC::getBase()>
c002332a:	83 c4 10             	add    esp,0x10
c002332d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023331:	a1 f0 b0 02 c0       	mov    eax,ds:0xc002b0f0
c0023336:	8b 15 f4 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0f4
c002333c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023344:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023348:	05 e0 03 00 00       	add    eax,0x3e0
c002334d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0023353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023357:	05 80 03 00 00       	add    eax,0x380
c002335c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0023362:	fb                   	sti    
c0023363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023367:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002336b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0023370:	83 d2 00             	adc    edx,0x0
c0023373:	89 c1                	mov    ecx,eax
c0023375:	89 d3                	mov    ebx,edx
c0023377:	a1 f0 b0 02 c0       	mov    eax,ds:0xc002b0f0
c002337c:	8b 15 f4 b0 02 c0    	mov    edx,DWORD PTR ds:0xc002b0f4
c0023382:	39 c8                	cmp    eax,ecx
c0023384:	89 d0                	mov    eax,edx
c0023386:	19 d8                	sbb    eax,ebx
c0023388:	73 02                	jae    c002338c <APICTimer::write(int)+0x8e>
c002338a:	eb d7                	jmp    c0023363 <APICTimer::write(int)+0x65>
c002338c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023390:	05 20 03 00 00       	add    eax,0x320
c0023395:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002339b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002339f:	05 90 03 00 00       	add    eax,0x390
c00233a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00233a6:	f7 d0                	not    eax
c00233a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00233b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233b4:	ba 00 00 00 00       	mov    edx,0x0
c00233b9:	f7 f3                	div    ebx
c00233bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00233bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00233c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00233c9:	0d 00 00 02 00       	or     eax,0x20000
c00233ce:	89 c2                	mov    edx,eax
c00233d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233d4:	05 20 03 00 00       	add    eax,0x320
c00233d9:	89 10                	mov    DWORD PTR [eax],edx
c00233db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233df:	05 e0 03 00 00       	add    eax,0x3e0
c00233e4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00233ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233ee:	05 80 03 00 00       	add    eax,0x380
c00233f3:	89 c2                	mov    edx,eax
c00233f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00233f9:	89 02                	mov    DWORD PTR [edx],eax
c00233fb:	90                   	nop
c00233fc:	83 c4 28             	add    esp,0x28
c00233ff:	5b                   	pop    ebx
c0023400:	c3                   	ret    
c0023401:	90                   	nop

c0023402 <APICTimer::open(int, int, void*)>:
c0023402:	57                   	push   edi
c0023403:	56                   	push   esi
c0023404:	53                   	push   ebx
c0023405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023409:	8b 00                	mov    eax,DWORD PTR [eax]
c002340b:	83 c0 24             	add    eax,0x24
c002340e:	8b 00                	mov    eax,DWORD PTR [eax]
c0023410:	83 ec 08             	sub    esp,0x8
c0023413:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023417:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002341b:	ff d0                	call   eax
c002341d:	83 c4 10             	add    esp,0x10
c0023420:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0023425:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002342b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0023431:	83 ec 0c             	sub    esp,0xc
c0023434:	50                   	push   eax
c0023435:	e8 ce f3 ff ff       	call   c0022808 <APIC::getBase()>
c002343a:	83 c4 10             	add    esp,0x10
c002343d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0023443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023447:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002344d:	0f b6 f8             	movzx  edi,al
c0023450:	89 d0                	mov    eax,edx
c0023452:	ba 00 00 00 00       	mov    edx,0x0
c0023457:	89 c1                	mov    ecx,eax
c0023459:	80 e5 ff             	and    ch,0xff
c002345c:	89 cb                	mov    ebx,ecx
c002345e:	0f b6 f2             	movzx  esi,dl
c0023461:	89 d8                	mov    eax,ebx
c0023463:	89 f2                	mov    edx,esi
c0023465:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023469:	8d 5f 08             	lea    ebx,[edi+0x8]
c002346c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023470:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0023474:	83 e0 00             	and    eax,0x0
c0023477:	09 d0                	or     eax,edx
c0023479:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002347d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023481:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023487:	8d 50 01             	lea    edx,[eax+0x1]
c002348a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002348e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0023494:	0f b6 d0             	movzx  edx,al
c0023497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002349b:	83 c2 08             	add    edx,0x8
c002349e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00234a2:	0f b6 c9             	movzx  ecx,cl
c00234a5:	81 c9 00 00 01 00    	or     ecx,0x10000
c00234ab:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00234af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00234b7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00234bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00234c5:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00234cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00234cf:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00234d5:	83 ec 0c             	sub    esp,0xc
c00234d8:	51                   	push   ecx
c00234d9:	6a 01                	push   0x1
c00234db:	68 d0 32 02 c0       	push   0xc00232d0
c00234e0:	52                   	push   edx
c00234e1:	50                   	push   eax
c00234e2:	e8 d1 04 ff ff       	call   c00139b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234e7:	83 c4 20             	add    esp,0x20
c00234ea:	89 c2                	mov    edx,eax
c00234ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00234f6:	b8 00 00 00 00       	mov    eax,0x0
c00234fb:	5b                   	pop    ebx
c00234fc:	5e                   	pop    esi
c00234fd:	5f                   	pop    edi
c00234fe:	c3                   	ret    
c00234ff:	90                   	nop

c0023500 <APICTimer::APICTimer()>:
c0023500:	83 ec 0c             	sub    esp,0xc
c0023503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023507:	83 ec 08             	sub    esp,0x8
c002350a:	68 a8 99 02 c0       	push   0xc00299a8
c002350f:	50                   	push   eax
c0023510:	e8 d9 2b ff ff       	call   c00160ee <Timer::Timer(char const*)>
c0023515:	83 c4 10             	add    esp,0x10
c0023518:	ba bc 99 02 c0       	mov    edx,0xc00299bc
c002351d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023521:	89 10                	mov    DWORD PTR [eax],edx
c0023523:	90                   	nop
c0023524:	83 c4 0c             	add    esp,0xc
c0023527:	c3                   	ret    

c0023528 <PIT::write(int)>:
c0023528:	83 ec 10             	sub    esp,0x10
c002352b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002352f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023533:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023539:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002353d:	a3 a4 cd 02 c0       	mov    ds:0xc002cda4,eax
c0023542:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0023547:	99                   	cdq    
c0023548:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002354c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023550:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0023557:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002355c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0023560:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0023565:	ee                   	out    dx,al
c0023566:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002356a:	0f b6 c0             	movzx  eax,al
c002356d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0023574:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0023578:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002357c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0023581:	ee                   	out    dx,al
c0023582:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023586:	c1 f8 08             	sar    eax,0x8
c0023589:	0f b6 c0             	movzx  eax,al
c002358c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0023593:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0023597:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002359b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00235a0:	ee                   	out    dx,al
c00235a1:	90                   	nop
c00235a2:	83 c4 10             	add    esp,0x10
c00235a5:	c3                   	ret    

c00235a6 <pitHandler(regs*, void*)>:
c00235a6:	83 ec 0c             	sub    esp,0xc
c00235a9:	a1 a4 cd 02 c0       	mov    eax,ds:0xc002cda4
c00235ae:	99                   	cdq    
c00235af:	52                   	push   edx
c00235b0:	50                   	push   eax
c00235b1:	6a 00                	push   0x0
c00235b3:	68 00 ca 9a 3b       	push   0x3b9aca00
c00235b8:	e8 9f 04 00 00       	call   c0023a5c <__udivdi3>
c00235bd:	83 c4 10             	add    esp,0x10
c00235c0:	83 ec 08             	sub    esp,0x8
c00235c3:	52                   	push   edx
c00235c4:	50                   	push   eax
c00235c5:	e8 b3 2b ff ff       	call   c001617d <timerHandler(unsigned long long)>
c00235ca:	83 c4 10             	add    esp,0x10
c00235cd:	90                   	nop
c00235ce:	83 c4 0c             	add    esp,0xc
c00235d1:	c3                   	ret    

c00235d2 <PIT::open(int, int, void*)>:
c00235d2:	83 ec 0c             	sub    esp,0xc
c00235d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00235db:	83 c0 24             	add    eax,0x24
c00235de:	8b 00                	mov    eax,DWORD PTR [eax]
c00235e0:	83 ec 08             	sub    esp,0x8
c00235e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235eb:	ff d0                	call   eax
c00235ed:	83 c4 10             	add    esp,0x10
c00235f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235f4:	83 ec 0c             	sub    esp,0xc
c00235f7:	6a 00                	push   0x0
c00235f9:	6a 01                	push   0x1
c00235fb:	68 a6 35 02 c0       	push   0xc00235a6
c0023600:	6a 00                	push   0x0
c0023602:	50                   	push   eax
c0023603:	e8 b0 03 ff ff       	call   c00139b8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023608:	83 c4 20             	add    esp,0x20
c002360b:	89 c2                	mov    edx,eax
c002360d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023611:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023617:	b8 00 00 00 00       	mov    eax,0x0
c002361c:	83 c4 0c             	add    esp,0xc
c002361f:	c3                   	ret    

c0023620 <PIT::close(int, int, void*)>:
c0023620:	83 ec 0c             	sub    esp,0xc
c0023623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023627:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023635:	6a 01                	push   0x1
c0023637:	68 a6 35 02 c0       	push   0xc00235a6
c002363c:	6a 00                	push   0x0
c002363e:	50                   	push   eax
c002363f:	e8 b2 03 ff ff       	call   c00139f6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0023644:	83 c4 10             	add    esp,0x10
c0023647:	b8 00 00 00 00       	mov    eax,0x0
c002364c:	83 c4 0c             	add    esp,0xc
c002364f:	c3                   	ret    

c0023650 <PIT::PIT()>:
c0023650:	83 ec 0c             	sub    esp,0xc
c0023653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023657:	83 ec 08             	sub    esp,0x8
c002365a:	68 e4 99 02 c0       	push   0xc00299e4
c002365f:	50                   	push   eax
c0023660:	e8 89 2a ff ff       	call   c00160ee <Timer::Timer(char const*)>
c0023665:	83 c4 10             	add    esp,0x10
c0023668:	ba 0c 9a 02 c0       	mov    edx,0xc0029a0c
c002366d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023671:	89 10                	mov    DWORD PTR [eax],edx
c0023673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023677:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002367d:	0f b6 d0             	movzx  edx,al
c0023680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023684:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002368b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002368f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023695:	0f b6 d0             	movzx  edx,al
c0023698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002369c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00236a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00236ab:	8d 50 01             	lea    edx,[eax+0x1]
c00236ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00236b2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00236b8:	0f b6 d0             	movzx  edx,al
c00236bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236bf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00236c3:	83 e1 3f             	and    ecx,0x3f
c00236c6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00236ca:	90                   	nop
c00236cb:	83 c4 0c             	add    esp,0xc
c00236ce:	c3                   	ret    
c00236cf:	90                   	nop

c00236d0 <avxDetect>:
c00236d0:	b8 00 00 00 00       	mov    eax,0x0
c00236d5:	c3                   	ret    

c00236d6 <avxSave>:
c00236d6:	c3                   	ret    

c00236d7 <avxLoad>:
c00236d7:	c3                   	ret    

c00236d8 <avxInit>:
c00236d8:	c3                   	ret    

c00236d9 <avxClose>:
c00236d9:	c3                   	ret    
c00236da:	66 90                	xchg   ax,ax
c00236dc:	66 90                	xchg   ax,ax
c00236de:	66 90                	xchg   ax,ax

c00236e0 <sseDetect>:
c00236e0:	b8 01 00 00 00       	mov    eax,0x1
c00236e5:	0f a2                	cpuid  
c00236e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00236ed:	74 06                	je     c00236f5 <sseDetect.noSSE>
c00236ef:	b8 01 00 00 00       	mov    eax,0x1
c00236f4:	c3                   	ret    

c00236f5 <sseDetect.noSSE>:
c00236f5:	b8 00 00 00 00       	mov    eax,0x0
c00236fa:	c3                   	ret    

c00236fb <sseSave>:
c00236fb:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023700:	c3                   	ret    

c0023701 <sseLoad>:
c0023701:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023706:	c3                   	ret    

c0023707 <sseInit>:
c0023707:	e8 40 00 00 00       	call   c002374c <x87Init>
c002370c:	0f 20 e0             	mov    eax,cr4
c002370f:	66 0d 00 06          	or     ax,0x600
c0023713:	0f 22 e0             	mov    cr4,eax
c0023716:	c3                   	ret    

c0023717 <sseClose>:
c0023717:	c3                   	ret    
c0023718:	66 90                	xchg   ax,ax
c002371a:	66 90                	xchg   ax,ax
c002371c:	66 90                	xchg   ax,ax
c002371e:	66 90                	xchg   ax,ax

c0023720 <value_37F>:
c0023720:	7f 03                	jg     c0023725 <value_37A+0x1>

c0023722 <value_37E>:
c0023722:	7e 03                	jle    c0023727 <x87Detect+0x1>

c0023724 <value_37A>:
c0023724:	7a 03                	jp     c0023729 <x87Detect+0x3>

c0023726 <x87Detect>:
c0023726:	b8 01 00 00 00       	mov    eax,0x1
c002372b:	0f a2                	cpuid  
c002372d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023733:	74 06                	je     c002373b <x87Detect.nox87>
c0023735:	b8 01 00 00 00       	mov    eax,0x1
c002373a:	c3                   	ret    

c002373b <x87Detect.nox87>:
c002373b:	b8 00 00 00 00       	mov    eax,0x0
c0023740:	c3                   	ret    

c0023741 <x87Save>:
c0023741:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023746:	c3                   	ret    

c0023747 <x87Load>:
c0023747:	dd 64 24 08          	frstor [esp+0x8]
c002374b:	c3                   	ret    

c002374c <x87Init>:
c002374c:	9b db e3             	finit  
c002374f:	0f 20 c0             	mov    eax,cr0
c0023752:	66 25 fb ff          	and    ax,0xfffb
c0023756:	66 0d 22 00          	or     ax,0x22
c002375a:	0f 22 c0             	mov    cr0,eax
c002375d:	0f 06                	clts   
c002375f:	d9 2d 24 37 02 c0    	fldcw  WORD PTR ds:0xc0023724
c0023765:	c3                   	ret    

c0023766 <x87Close>:
c0023766:	c3                   	ret    
c0023767:	90                   	nop

c0023768 <__do_global_ctors_aux>:
c0023768:	a1 c0 61 02 c0       	mov    eax,ds:0xc00261c0
c002376d:	83 f8 ff             	cmp    eax,0xffffffff
c0023770:	74 1a                	je     c002378c <__do_global_ctors_aux+0x24>
c0023772:	55                   	push   ebp
c0023773:	89 e5                	mov    ebp,esp
c0023775:	53                   	push   ebx
c0023776:	52                   	push   edx
c0023777:	bb c0 61 02 c0       	mov    ebx,0xc00261c0
c002377c:	ff d0                	call   eax
c002377e:	83 eb 04             	sub    ebx,0x4
c0023781:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023783:	83 f8 ff             	cmp    eax,0xffffffff
c0023786:	75 f4                	jne    c002377c <__do_global_ctors_aux+0x14>
c0023788:	58                   	pop    eax
c0023789:	5b                   	pop    ebx
c002378a:	5d                   	pop    ebp
c002378b:	c3                   	ret    
c002378c:	c3                   	ret    
c002378d:	66 90                	xchg   ax,ax
c002378f:	90                   	nop

c0023790 <__divdi3>:
c0023790:	55                   	push   ebp
c0023791:	57                   	push   edi
c0023792:	56                   	push   esi
c0023793:	53                   	push   ebx
c0023794:	83 ec 1c             	sub    esp,0x1c
c0023797:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002379b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002379f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00237a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00237a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00237aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00237ae:	85 db                	test   ebx,ebx
c00237b0:	0f 88 8e 00 00 00    	js     c0023844 <__divdi3+0xb4>
c00237b6:	89 dd                	mov    ebp,ebx
c00237b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00237c0:	89 d3                	mov    ebx,edx
c00237c2:	85 d2                	test   edx,edx
c00237c4:	79 0d                	jns    c00237d3 <__divdi3+0x43>
c00237c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00237ca:	f7 d8                	neg    eax
c00237cc:	83 d2 00             	adc    edx,0x0
c00237cf:	f7 da                	neg    edx
c00237d1:	89 d3                	mov    ebx,edx
c00237d3:	89 c7                	mov    edi,eax
c00237d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00237d8:	85 db                	test   ebx,ebx
c00237da:	75 48                	jne    c0023824 <__divdi3+0x94>
c00237dc:	39 ef                	cmp    edi,ebp
c00237de:	76 24                	jbe    c0023804 <__divdi3+0x74>
c00237e0:	89 ea                	mov    edx,ebp
c00237e2:	f7 f7                	div    edi
c00237e4:	89 c1                	mov    ecx,eax
c00237e6:	31 f6                	xor    esi,esi
c00237e8:	89 c8                	mov    eax,ecx
c00237ea:	89 f2                	mov    edx,esi
c00237ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00237f0:	85 c9                	test   ecx,ecx
c00237f2:	74 07                	je     c00237fb <__divdi3+0x6b>
c00237f4:	f7 d8                	neg    eax
c00237f6:	83 d2 00             	adc    edx,0x0
c00237f9:	f7 da                	neg    edx
c00237fb:	83 c4 1c             	add    esp,0x1c
c00237fe:	5b                   	pop    ebx
c00237ff:	5e                   	pop    esi
c0023800:	5f                   	pop    edi
c0023801:	5d                   	pop    ebp
c0023802:	c3                   	ret    
c0023803:	90                   	nop
c0023804:	85 ff                	test   edi,edi
c0023806:	75 0b                	jne    c0023813 <__divdi3+0x83>
c0023808:	b8 01 00 00 00       	mov    eax,0x1
c002380d:	31 d2                	xor    edx,edx
c002380f:	f7 f3                	div    ebx
c0023811:	89 c7                	mov    edi,eax
c0023813:	31 d2                	xor    edx,edx
c0023815:	89 e8                	mov    eax,ebp
c0023817:	f7 f7                	div    edi
c0023819:	89 c6                	mov    esi,eax
c002381b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002381e:	f7 f7                	div    edi
c0023820:	89 c1                	mov    ecx,eax
c0023822:	eb c4                	jmp    c00237e8 <__divdi3+0x58>
c0023824:	39 eb                	cmp    ebx,ebp
c0023826:	77 3c                	ja     c0023864 <__divdi3+0xd4>
c0023828:	0f bd f3             	bsr    esi,ebx
c002382b:	83 f6 1f             	xor    esi,0x1f
c002382e:	75 40                	jne    c0023870 <__divdi3+0xe0>
c0023830:	39 eb                	cmp    ebx,ebp
c0023832:	72 09                	jb     c002383d <__divdi3+0xad>
c0023834:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023837:	0f 87 97 00 00 00    	ja     c00238d4 <__divdi3+0x144>
c002383d:	b9 01 00 00 00       	mov    ecx,0x1
c0023842:	eb a4                	jmp    c00237e8 <__divdi3+0x58>
c0023844:	f7 d9                	neg    ecx
c0023846:	83 d3 00             	adc    ebx,0x0
c0023849:	f7 db                	neg    ebx
c002384b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002384e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023852:	89 dd                	mov    ebp,ebx
c0023854:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002385c:	e9 5f ff ff ff       	jmp    c00237c0 <__divdi3+0x30>
c0023861:	8d 76 00             	lea    esi,[esi+0x0]
c0023864:	31 f6                	xor    esi,esi
c0023866:	31 c9                	xor    ecx,ecx
c0023868:	e9 7b ff ff ff       	jmp    c00237e8 <__divdi3+0x58>
c002386d:	8d 76 00             	lea    esi,[esi+0x0]
c0023870:	b8 20 00 00 00       	mov    eax,0x20
c0023875:	29 f0                	sub    eax,esi
c0023877:	89 f1                	mov    ecx,esi
c0023879:	d3 e3                	shl    ebx,cl
c002387b:	89 fa                	mov    edx,edi
c002387d:	88 c1                	mov    cl,al
c002387f:	d3 ea                	shr    edx,cl
c0023881:	09 da                	or     edx,ebx
c0023883:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023887:	89 f1                	mov    ecx,esi
c0023889:	d3 e7                	shl    edi,cl
c002388b:	89 eb                	mov    ebx,ebp
c002388d:	88 c1                	mov    cl,al
c002388f:	d3 eb                	shr    ebx,cl
c0023891:	89 f1                	mov    ecx,esi
c0023893:	d3 e5                	shl    ebp,cl
c0023895:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023898:	88 c1                	mov    cl,al
c002389a:	d3 ea                	shr    edx,cl
c002389c:	09 d5                	or     ebp,edx
c002389e:	89 e8                	mov    eax,ebp
c00238a0:	89 da                	mov    edx,ebx
c00238a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00238a6:	89 d3                	mov    ebx,edx
c00238a8:	89 c5                	mov    ebp,eax
c00238aa:	f7 e7                	mul    edi
c00238ac:	39 d3                	cmp    ebx,edx
c00238ae:	72 18                	jb     c00238c8 <__divdi3+0x138>
c00238b0:	74 0a                	je     c00238bc <__divdi3+0x12c>
c00238b2:	89 e9                	mov    ecx,ebp
c00238b4:	31 f6                	xor    esi,esi
c00238b6:	e9 2d ff ff ff       	jmp    c00237e8 <__divdi3+0x58>
c00238bb:	90                   	nop
c00238bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00238bf:	89 f1                	mov    ecx,esi
c00238c1:	d3 e7                	shl    edi,cl
c00238c3:	39 c7                	cmp    edi,eax
c00238c5:	73 eb                	jae    c00238b2 <__divdi3+0x122>
c00238c7:	90                   	nop
c00238c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00238cb:	31 f6                	xor    esi,esi
c00238cd:	e9 16 ff ff ff       	jmp    c00237e8 <__divdi3+0x58>
c00238d2:	66 90                	xchg   ax,ax
c00238d4:	31 c9                	xor    ecx,ecx
c00238d6:	e9 0d ff ff ff       	jmp    c00237e8 <__divdi3+0x58>
c00238db:	90                   	nop

c00238dc <__moddi3>:
c00238dc:	55                   	push   ebp
c00238dd:	57                   	push   edi
c00238de:	56                   	push   esi
c00238df:	53                   	push   ebx
c00238e0:	83 ec 2c             	sub    esp,0x2c
c00238e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00238e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00238eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00238ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00238f3:	85 db                	test   ebx,ebx
c00238f5:	0f 88 85 00 00 00    	js     c0023980 <__moddi3+0xa4>
c00238fb:	89 de                	mov    esi,ebx
c00238fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023905:	89 d7                	mov    edi,edx
c0023907:	85 d2                	test   edx,edx
c0023909:	79 09                	jns    c0023914 <__moddi3+0x38>
c002390b:	f7 d8                	neg    eax
c002390d:	83 d2 00             	adc    edx,0x0
c0023910:	f7 da                	neg    edx
c0023912:	89 d7                	mov    edi,edx
c0023914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023918:	89 cd                	mov    ebp,ecx
c002391a:	85 ff                	test   edi,edi
c002391c:	75 52                	jne    c0023970 <__moddi3+0x94>
c002391e:	89 c3                	mov    ebx,eax
c0023920:	39 f0                	cmp    eax,esi
c0023922:	76 24                	jbe    c0023948 <__moddi3+0x6c>
c0023924:	89 c8                	mov    eax,ecx
c0023926:	89 f2                	mov    edx,esi
c0023928:	f7 f3                	div    ebx
c002392a:	89 d6                	mov    esi,edx
c002392c:	89 f0                	mov    eax,esi
c002392e:	31 d2                	xor    edx,edx
c0023930:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023934:	85 c9                	test   ecx,ecx
c0023936:	74 07                	je     c002393f <__moddi3+0x63>
c0023938:	f7 d8                	neg    eax
c002393a:	83 d2 00             	adc    edx,0x0
c002393d:	f7 da                	neg    edx
c002393f:	83 c4 2c             	add    esp,0x2c
c0023942:	5b                   	pop    ebx
c0023943:	5e                   	pop    esi
c0023944:	5f                   	pop    edi
c0023945:	5d                   	pop    ebp
c0023946:	c3                   	ret    
c0023947:	90                   	nop
c0023948:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002394c:	85 db                	test   ebx,ebx
c002394e:	75 0d                	jne    c002395d <__moddi3+0x81>
c0023950:	b8 01 00 00 00       	mov    eax,0x1
c0023955:	31 d2                	xor    edx,edx
c0023957:	f7 f7                	div    edi
c0023959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002395d:	89 f0                	mov    eax,esi
c002395f:	31 d2                	xor    edx,edx
c0023961:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023965:	f7 f7                	div    edi
c0023967:	89 e8                	mov    eax,ebp
c0023969:	f7 f7                	div    edi
c002396b:	89 d6                	mov    esi,edx
c002396d:	eb bd                	jmp    c002392c <__moddi3+0x50>
c002396f:	90                   	nop
c0023970:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023974:	39 f7                	cmp    edi,esi
c0023976:	76 20                	jbe    c0023998 <__moddi3+0xbc>
c0023978:	89 c8                	mov    eax,ecx
c002397a:	89 f2                	mov    edx,esi
c002397c:	eb b2                	jmp    c0023930 <__moddi3+0x54>
c002397e:	66 90                	xchg   ax,ax
c0023980:	f7 d9                	neg    ecx
c0023982:	83 d3 00             	adc    ebx,0x0
c0023985:	f7 db                	neg    ebx
c0023987:	89 de                	mov    esi,ebx
c0023989:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023991:	e9 6f ff ff ff       	jmp    c0023905 <__moddi3+0x29>
c0023996:	66 90                	xchg   ax,ax
c0023998:	0f bd c7             	bsr    eax,edi
c002399b:	83 f0 1f             	xor    eax,0x1f
c002399e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00239a2:	75 24                	jne    c00239c8 <__moddi3+0xec>
c00239a4:	39 f7                	cmp    edi,esi
c00239a6:	72 06                	jb     c00239ae <__moddi3+0xd2>
c00239a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00239ac:	77 0c                	ja     c00239ba <__moddi3+0xde>
c00239ae:	89 e9                	mov    ecx,ebp
c00239b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00239b4:	19 fe                	sbb    esi,edi
c00239b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00239ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00239be:	89 f2                	mov    edx,esi
c00239c0:	e9 6b ff ff ff       	jmp    c0023930 <__moddi3+0x54>
c00239c5:	8d 76 00             	lea    esi,[esi+0x0]
c00239c8:	b8 20 00 00 00       	mov    eax,0x20
c00239cd:	89 c2                	mov    edx,eax
c00239cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00239d3:	29 da                	sub    edx,ebx
c00239d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00239d9:	88 d9                	mov    cl,bl
c00239db:	d3 e7                	shl    edi,cl
c00239dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00239e1:	88 d1                	mov    cl,dl
c00239e3:	d3 e8                	shr    eax,cl
c00239e5:	09 c7                	or     edi,eax
c00239e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00239eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00239ef:	89 d8                	mov    eax,ebx
c00239f1:	88 d9                	mov    cl,bl
c00239f3:	d3 e7                	shl    edi,cl
c00239f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00239f9:	89 f3                	mov    ebx,esi
c00239fb:	88 d1                	mov    cl,dl
c00239fd:	d3 eb                	shr    ebx,cl
c00239ff:	89 c7                	mov    edi,eax
c0023a01:	88 c1                	mov    cl,al
c0023a03:	d3 e6                	shl    esi,cl
c0023a05:	89 e8                	mov    eax,ebp
c0023a07:	88 d1                	mov    cl,dl
c0023a09:	d3 e8                	shr    eax,cl
c0023a0b:	09 f0                	or     eax,esi
c0023a0d:	89 f9                	mov    ecx,edi
c0023a0f:	d3 e5                	shl    ebp,cl
c0023a11:	89 da                	mov    edx,ebx
c0023a13:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023a17:	89 d3                	mov    ebx,edx
c0023a19:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023a1d:	89 c6                	mov    esi,eax
c0023a1f:	89 d1                	mov    ecx,edx
c0023a21:	39 d3                	cmp    ebx,edx
c0023a23:	72 27                	jb     c0023a4c <__moddi3+0x170>
c0023a25:	74 21                	je     c0023a48 <__moddi3+0x16c>
c0023a27:	29 f5                	sub    ebp,esi
c0023a29:	19 cb                	sbb    ebx,ecx
c0023a2b:	89 de                	mov    esi,ebx
c0023a2d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023a31:	d3 e6                	shl    esi,cl
c0023a33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023a37:	89 f9                	mov    ecx,edi
c0023a39:	d3 ed                	shr    ebp,cl
c0023a3b:	09 ee                	or     esi,ebp
c0023a3d:	89 f0                	mov    eax,esi
c0023a3f:	d3 eb                	shr    ebx,cl
c0023a41:	89 da                	mov    edx,ebx
c0023a43:	e9 e8 fe ff ff       	jmp    c0023930 <__moddi3+0x54>
c0023a48:	39 c5                	cmp    ebp,eax
c0023a4a:	73 db                	jae    c0023a27 <__moddi3+0x14b>
c0023a4c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023a50:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023a54:	89 d1                	mov    ecx,edx
c0023a56:	89 c6                	mov    esi,eax
c0023a58:	eb cd                	jmp    c0023a27 <__moddi3+0x14b>
c0023a5a:	66 90                	xchg   ax,ax

c0023a5c <__udivdi3>:
c0023a5c:	55                   	push   ebp
c0023a5d:	57                   	push   edi
c0023a5e:	56                   	push   esi
c0023a5f:	53                   	push   ebx
c0023a60:	83 ec 1c             	sub    esp,0x1c
c0023a63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023a67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a6b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023a6f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023a73:	85 d2                	test   edx,edx
c0023a75:	75 41                	jne    c0023ab8 <__udivdi3+0x5c>
c0023a77:	39 f7                	cmp    edi,esi
c0023a79:	76 15                	jbe    c0023a90 <__udivdi3+0x34>
c0023a7b:	89 e8                	mov    eax,ebp
c0023a7d:	89 f2                	mov    edx,esi
c0023a7f:	f7 f7                	div    edi
c0023a81:	31 db                	xor    ebx,ebx
c0023a83:	89 da                	mov    edx,ebx
c0023a85:	83 c4 1c             	add    esp,0x1c
c0023a88:	5b                   	pop    ebx
c0023a89:	5e                   	pop    esi
c0023a8a:	5f                   	pop    edi
c0023a8b:	5d                   	pop    ebp
c0023a8c:	c3                   	ret    
c0023a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0023a90:	89 f9                	mov    ecx,edi
c0023a92:	85 ff                	test   edi,edi
c0023a94:	75 0b                	jne    c0023aa1 <__udivdi3+0x45>
c0023a96:	b8 01 00 00 00       	mov    eax,0x1
c0023a9b:	31 d2                	xor    edx,edx
c0023a9d:	f7 f7                	div    edi
c0023a9f:	89 c1                	mov    ecx,eax
c0023aa1:	31 d2                	xor    edx,edx
c0023aa3:	89 f0                	mov    eax,esi
c0023aa5:	f7 f1                	div    ecx
c0023aa7:	89 c3                	mov    ebx,eax
c0023aa9:	89 e8                	mov    eax,ebp
c0023aab:	f7 f1                	div    ecx
c0023aad:	89 da                	mov    edx,ebx
c0023aaf:	83 c4 1c             	add    esp,0x1c
c0023ab2:	5b                   	pop    ebx
c0023ab3:	5e                   	pop    esi
c0023ab4:	5f                   	pop    edi
c0023ab5:	5d                   	pop    ebp
c0023ab6:	c3                   	ret    
c0023ab7:	90                   	nop
c0023ab8:	39 f2                	cmp    edx,esi
c0023aba:	77 1c                	ja     c0023ad8 <__udivdi3+0x7c>
c0023abc:	0f bd da             	bsr    ebx,edx
c0023abf:	83 f3 1f             	xor    ebx,0x1f
c0023ac2:	75 24                	jne    c0023ae8 <__udivdi3+0x8c>
c0023ac4:	39 f2                	cmp    edx,esi
c0023ac6:	72 08                	jb     c0023ad0 <__udivdi3+0x74>
c0023ac8:	39 ef                	cmp    edi,ebp
c0023aca:	0f 87 84 00 00 00    	ja     c0023b54 <__udivdi3+0xf8>
c0023ad0:	b8 01 00 00 00       	mov    eax,0x1
c0023ad5:	eb ac                	jmp    c0023a83 <__udivdi3+0x27>
c0023ad7:	90                   	nop
c0023ad8:	31 db                	xor    ebx,ebx
c0023ada:	31 c0                	xor    eax,eax
c0023adc:	89 da                	mov    edx,ebx
c0023ade:	83 c4 1c             	add    esp,0x1c
c0023ae1:	5b                   	pop    ebx
c0023ae2:	5e                   	pop    esi
c0023ae3:	5f                   	pop    edi
c0023ae4:	5d                   	pop    ebp
c0023ae5:	c3                   	ret    
c0023ae6:	66 90                	xchg   ax,ax
c0023ae8:	b8 20 00 00 00       	mov    eax,0x20
c0023aed:	29 d8                	sub    eax,ebx
c0023aef:	88 d9                	mov    cl,bl
c0023af1:	d3 e2                	shl    edx,cl
c0023af3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0023af7:	89 fa                	mov    edx,edi
c0023af9:	88 c1                	mov    cl,al
c0023afb:	d3 ea                	shr    edx,cl
c0023afd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b01:	09 d1                	or     ecx,edx
c0023b03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023b07:	88 d9                	mov    cl,bl
c0023b09:	d3 e7                	shl    edi,cl
c0023b0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023b0f:	89 f7                	mov    edi,esi
c0023b11:	88 c1                	mov    cl,al
c0023b13:	d3 ef                	shr    edi,cl
c0023b15:	88 d9                	mov    cl,bl
c0023b17:	d3 e6                	shl    esi,cl
c0023b19:	89 ea                	mov    edx,ebp
c0023b1b:	88 c1                	mov    cl,al
c0023b1d:	d3 ea                	shr    edx,cl
c0023b1f:	09 d6                	or     esi,edx
c0023b21:	89 f0                	mov    eax,esi
c0023b23:	89 fa                	mov    edx,edi
c0023b25:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023b29:	89 d7                	mov    edi,edx
c0023b2b:	89 c6                	mov    esi,eax
c0023b2d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023b31:	39 d7                	cmp    edi,edx
c0023b33:	72 13                	jb     c0023b48 <__udivdi3+0xec>
c0023b35:	74 09                	je     c0023b40 <__udivdi3+0xe4>
c0023b37:	89 f0                	mov    eax,esi
c0023b39:	31 db                	xor    ebx,ebx
c0023b3b:	e9 43 ff ff ff       	jmp    c0023a83 <__udivdi3+0x27>
c0023b40:	88 d9                	mov    cl,bl
c0023b42:	d3 e5                	shl    ebp,cl
c0023b44:	39 c5                	cmp    ebp,eax
c0023b46:	73 ef                	jae    c0023b37 <__udivdi3+0xdb>
c0023b48:	8d 46 ff             	lea    eax,[esi-0x1]
c0023b4b:	31 db                	xor    ebx,ebx
c0023b4d:	e9 31 ff ff ff       	jmp    c0023a83 <__udivdi3+0x27>
c0023b52:	66 90                	xchg   ax,ax
c0023b54:	31 c0                	xor    eax,eax
c0023b56:	e9 28 ff ff ff       	jmp    c0023a83 <__udivdi3+0x27>
c0023b5b:	90                   	nop

c0023b5c <__umoddi3>:
c0023b5c:	55                   	push   ebp
c0023b5d:	57                   	push   edi
c0023b5e:	56                   	push   esi
c0023b5f:	53                   	push   ebx
c0023b60:	83 ec 1c             	sub    esp,0x1c
c0023b63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b6b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023b6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023b73:	89 da                	mov    edx,ebx
c0023b75:	85 c0                	test   eax,eax
c0023b77:	75 37                	jne    c0023bb0 <__umoddi3+0x54>
c0023b79:	39 df                	cmp    edi,ebx
c0023b7b:	76 13                	jbe    c0023b90 <__umoddi3+0x34>
c0023b7d:	89 f0                	mov    eax,esi
c0023b7f:	f7 f7                	div    edi
c0023b81:	89 d0                	mov    eax,edx
c0023b83:	31 d2                	xor    edx,edx
c0023b85:	83 c4 1c             	add    esp,0x1c
c0023b88:	5b                   	pop    ebx
c0023b89:	5e                   	pop    esi
c0023b8a:	5f                   	pop    edi
c0023b8b:	5d                   	pop    ebp
c0023b8c:	c3                   	ret    
c0023b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0023b90:	89 fd                	mov    ebp,edi
c0023b92:	85 ff                	test   edi,edi
c0023b94:	75 0b                	jne    c0023ba1 <__umoddi3+0x45>
c0023b96:	b8 01 00 00 00       	mov    eax,0x1
c0023b9b:	31 d2                	xor    edx,edx
c0023b9d:	f7 f7                	div    edi
c0023b9f:	89 c5                	mov    ebp,eax
c0023ba1:	89 d8                	mov    eax,ebx
c0023ba3:	31 d2                	xor    edx,edx
c0023ba5:	f7 f5                	div    ebp
c0023ba7:	89 f0                	mov    eax,esi
c0023ba9:	f7 f5                	div    ebp
c0023bab:	89 d0                	mov    eax,edx
c0023bad:	eb d4                	jmp    c0023b83 <__umoddi3+0x27>
c0023baf:	90                   	nop
c0023bb0:	89 f1                	mov    ecx,esi
c0023bb2:	39 d8                	cmp    eax,ebx
c0023bb4:	76 0a                	jbe    c0023bc0 <__umoddi3+0x64>
c0023bb6:	89 f0                	mov    eax,esi
c0023bb8:	83 c4 1c             	add    esp,0x1c
c0023bbb:	5b                   	pop    ebx
c0023bbc:	5e                   	pop    esi
c0023bbd:	5f                   	pop    edi
c0023bbe:	5d                   	pop    ebp
c0023bbf:	c3                   	ret    
c0023bc0:	0f bd e8             	bsr    ebp,eax
c0023bc3:	83 f5 1f             	xor    ebp,0x1f
c0023bc6:	75 1c                	jne    c0023be4 <__umoddi3+0x88>
c0023bc8:	39 d8                	cmp    eax,ebx
c0023bca:	72 04                	jb     c0023bd0 <__umoddi3+0x74>
c0023bcc:	39 f7                	cmp    edi,esi
c0023bce:	77 08                	ja     c0023bd8 <__umoddi3+0x7c>
c0023bd0:	89 da                	mov    edx,ebx
c0023bd2:	29 fe                	sub    esi,edi
c0023bd4:	19 c2                	sbb    edx,eax
c0023bd6:	89 f1                	mov    ecx,esi
c0023bd8:	89 c8                	mov    eax,ecx
c0023bda:	83 c4 1c             	add    esp,0x1c
c0023bdd:	5b                   	pop    ebx
c0023bde:	5e                   	pop    esi
c0023bdf:	5f                   	pop    edi
c0023be0:	5d                   	pop    ebp
c0023be1:	c3                   	ret    
c0023be2:	66 90                	xchg   ax,ax
c0023be4:	ba 20 00 00 00       	mov    edx,0x20
c0023be9:	29 ea                	sub    edx,ebp
c0023beb:	89 e9                	mov    ecx,ebp
c0023bed:	d3 e0                	shl    eax,cl
c0023bef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023bf3:	89 f8                	mov    eax,edi
c0023bf5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023bf9:	88 d1                	mov    cl,dl
c0023bfb:	d3 e8                	shr    eax,cl
c0023bfd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023c01:	09 c1                	or     ecx,eax
c0023c03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023c07:	89 e9                	mov    ecx,ebp
c0023c09:	d3 e7                	shl    edi,cl
c0023c0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023c0f:	89 d8                	mov    eax,ebx
c0023c11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023c15:	88 d1                	mov    cl,dl
c0023c17:	d3 e8                	shr    eax,cl
c0023c19:	89 c7                	mov    edi,eax
c0023c1b:	89 e9                	mov    ecx,ebp
c0023c1d:	d3 e3                	shl    ebx,cl
c0023c1f:	89 f0                	mov    eax,esi
c0023c21:	88 d1                	mov    cl,dl
c0023c23:	d3 e8                	shr    eax,cl
c0023c25:	09 d8                	or     eax,ebx
c0023c27:	89 e9                	mov    ecx,ebp
c0023c29:	d3 e6                	shl    esi,cl
c0023c2b:	89 f3                	mov    ebx,esi
c0023c2d:	89 fa                	mov    edx,edi
c0023c2f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023c33:	89 d1                	mov    ecx,edx
c0023c35:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023c39:	89 c6                	mov    esi,eax
c0023c3b:	89 d7                	mov    edi,edx
c0023c3d:	39 d1                	cmp    ecx,edx
c0023c3f:	72 27                	jb     c0023c68 <__umoddi3+0x10c>
c0023c41:	74 21                	je     c0023c64 <__umoddi3+0x108>
c0023c43:	89 ca                	mov    edx,ecx
c0023c45:	29 f3                	sub    ebx,esi
c0023c47:	19 fa                	sbb    edx,edi
c0023c49:	89 d0                	mov    eax,edx
c0023c4b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0023c4f:	d3 e0                	shl    eax,cl
c0023c51:	89 e9                	mov    ecx,ebp
c0023c53:	d3 eb                	shr    ebx,cl
c0023c55:	09 d8                	or     eax,ebx
c0023c57:	d3 ea                	shr    edx,cl
c0023c59:	83 c4 1c             	add    esp,0x1c
c0023c5c:	5b                   	pop    ebx
c0023c5d:	5e                   	pop    esi
c0023c5e:	5f                   	pop    edi
c0023c5f:	5d                   	pop    ebp
c0023c60:	c3                   	ret    
c0023c61:	8d 76 00             	lea    esi,[esi+0x0]
c0023c64:	39 c3                	cmp    ebx,eax
c0023c66:	73 db                	jae    c0023c43 <__umoddi3+0xe7>
c0023c68:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023c6c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023c70:	89 d7                	mov    edi,edx
c0023c72:	89 c6                	mov    esi,eax
c0023c74:	eb cd                	jmp    c0023c43 <__umoddi3+0xe7>

c0023c76 <__addsf3>:
c0023c76:	55                   	push   ebp
c0023c77:	89 e5                	mov    ebp,esp
c0023c79:	57                   	push   edi
c0023c7a:	56                   	push   esi
c0023c7b:	53                   	push   ebx
c0023c7c:	83 ec 08             	sub    esp,0x8
c0023c7f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023c82:	89 fa                	mov    edx,edi
c0023c84:	89 f8                	mov    eax,edi
c0023c86:	c1 f8 17             	sar    eax,0x17
c0023c89:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023c8c:	c1 e2 08             	shl    edx,0x8
c0023c8f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023c95:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023c98:	89 de                	mov    esi,ebx
c0023c9a:	c1 fe 17             	sar    esi,0x17
c0023c9d:	c1 e3 08             	shl    ebx,0x8
c0023ca0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023ca6:	31 f0                	xor    eax,esi
c0023ca8:	0f 88 3b 01 00 00    	js     c0023de9 <__addsf3+0x173>
c0023cae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0023cb1:	29 f1                	sub    ecx,esi
c0023cb3:	85 c9                	test   ecx,ecx
c0023cb5:	7e 54                	jle    c0023d0b <__addsf3+0x95>
c0023cb7:	89 f0                	mov    eax,esi
c0023cb9:	84 c0                	test   al,al
c0023cbb:	75 10                	jne    c0023ccd <__addsf3+0x57>
c0023cbd:	85 db                	test   ebx,ebx
c0023cbf:	0f 84 aa 02 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023cc5:	49                   	dec    ecx
c0023cc6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023cc9:	74 38                	je     c0023d03 <__addsf3+0x8d>
c0023ccb:	eb 13                	jmp    c0023ce0 <__addsf3+0x6a>
c0023ccd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023cd0:	f7 d0                	not    eax
c0023cd2:	84 c0                	test   al,al
c0023cd4:	0f 84 95 02 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023cda:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023ce0:	83 f9 1f             	cmp    ecx,0x1f
c0023ce3:	0f 8f 86 02 00 00    	jg     c0023f6f <__addsf3+0x2f9>
c0023ce9:	89 de                	mov    esi,ebx
c0023ceb:	d3 ee                	shr    esi,cl
c0023ced:	b8 20 00 00 00       	mov    eax,0x20
c0023cf2:	29 c8                	sub    eax,ecx
c0023cf4:	89 c1                	mov    ecx,eax
c0023cf6:	d3 e3                	shl    ebx,cl
c0023cf8:	31 c0                	xor    eax,eax
c0023cfa:	85 db                	test   ebx,ebx
c0023cfc:	0f 95 c0             	setne  al
c0023cff:	09 f0                	or     eax,esi
c0023d01:	01 d0                	add    eax,edx
c0023d03:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023d06:	e9 b6 00 00 00       	jmp    c0023dc1 <__addsf3+0x14b>
c0023d0b:	74 5c                	je     c0023d69 <__addsf3+0xf3>
c0023d0d:	89 f1                	mov    ecx,esi
c0023d0f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023d12:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023d15:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023d19:	75 14                	jne    c0023d2f <__addsf3+0xb9>
c0023d1b:	85 d2                	test   edx,edx
c0023d1d:	0f 84 4c 02 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023d23:	49                   	dec    ecx
c0023d24:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023d27:	0f 84 94 00 00 00    	je     c0023dc1 <__addsf3+0x14b>
c0023d2d:	eb 12                	jmp    c0023d41 <__addsf3+0xcb>
c0023d2f:	89 f0                	mov    eax,esi
c0023d31:	f7 d0                	not    eax
c0023d33:	84 c0                	test   al,al
c0023d35:	0f 84 34 02 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023d3b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023d41:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023d44:	83 f9 1f             	cmp    ecx,0x1f
c0023d47:	0f 8f 22 02 00 00    	jg     c0023f6f <__addsf3+0x2f9>
c0023d4d:	89 d7                	mov    edi,edx
c0023d4f:	d3 ef                	shr    edi,cl
c0023d51:	b8 20 00 00 00       	mov    eax,0x20
c0023d56:	29 c8                	sub    eax,ecx
c0023d58:	89 c1                	mov    ecx,eax
c0023d5a:	d3 e2                	shl    edx,cl
c0023d5c:	31 c0                	xor    eax,eax
c0023d5e:	85 d2                	test   edx,edx
c0023d60:	0f 95 c0             	setne  al
c0023d63:	09 f8                	or     eax,edi
c0023d65:	01 d8                	add    eax,ebx
c0023d67:	eb 58                	jmp    c0023dc1 <__addsf3+0x14b>
c0023d69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023d6c:	8d 70 01             	lea    esi,[eax+0x1]
c0023d6f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023d75:	75 32                	jne    c0023da9 <__addsf3+0x133>
c0023d77:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023d7b:	75 1f                	jne    c0023d9c <__addsf3+0x126>
c0023d7d:	85 d2                	test   edx,edx
c0023d7f:	0f 84 e0 01 00 00    	je     c0023f65 <__addsf3+0x2ef>
c0023d85:	85 db                	test   ebx,ebx
c0023d87:	0f 84 e2 01 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023d8d:	89 d0                	mov    eax,edx
c0023d8f:	01 d8                	add    eax,ebx
c0023d91:	0f 89 a9 01 00 00    	jns    c0023f40 <__addsf3+0x2ca>
c0023d97:	e9 9d 01 00 00       	jmp    c0023f39 <__addsf3+0x2c3>
c0023d9c:	85 d2                	test   edx,edx
c0023d9e:	0f 85 cb 01 00 00    	jne    c0023f6f <__addsf3+0x2f9>
c0023da4:	e9 bc 01 00 00       	jmp    c0023f65 <__addsf3+0x2ef>
c0023da9:	31 c0                	xor    eax,eax
c0023dab:	89 f1                	mov    ecx,esi
c0023dad:	f7 d1                	not    ecx
c0023daf:	84 c9                	test   cl,cl
c0023db1:	0f 84 90 01 00 00    	je     c0023f47 <__addsf3+0x2d1>
c0023db7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023dba:	d1 e8                	shr    eax,1
c0023dbc:	e9 86 01 00 00       	jmp    c0023f47 <__addsf3+0x2d1>
c0023dc1:	85 c0                	test   eax,eax
c0023dc3:	0f 89 7e 01 00 00    	jns    c0023f47 <__addsf3+0x2d1>
c0023dc9:	46                   	inc    esi
c0023dca:	89 f2                	mov    edx,esi
c0023dcc:	f7 d2                	not    edx
c0023dce:	84 d2                	test   dl,dl
c0023dd0:	0f 84 6f 01 00 00    	je     c0023f45 <__addsf3+0x2cf>
c0023dd6:	89 c2                	mov    edx,eax
c0023dd8:	83 e2 01             	and    edx,0x1
c0023ddb:	d1 e8                	shr    eax,1
c0023ddd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0023de2:	09 d0                	or     eax,edx
c0023de4:	e9 5e 01 00 00       	jmp    c0023f47 <__addsf3+0x2d1>
c0023de9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0023ded:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023df0:	89 f0                	mov    eax,esi
c0023df2:	0f b6 c0             	movzx  eax,al
c0023df5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023df8:	29 c1                	sub    ecx,eax
c0023dfa:	85 c9                	test   ecx,ecx
c0023dfc:	7e 55                	jle    c0023e53 <__addsf3+0x1dd>
c0023dfe:	85 c0                	test   eax,eax
c0023e00:	75 11                	jne    c0023e13 <__addsf3+0x19d>
c0023e02:	85 db                	test   ebx,ebx
c0023e04:	0f 84 65 01 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023e0a:	49                   	dec    ecx
c0023e0b:	75 19                	jne    c0023e26 <__addsf3+0x1b0>
c0023e0d:	89 d0                	mov    eax,edx
c0023e0f:	29 d8                	sub    eax,ebx
c0023e11:	eb 38                	jmp    c0023e4b <__addsf3+0x1d5>
c0023e13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023e16:	f7 d0                	not    eax
c0023e18:	84 c0                	test   al,al
c0023e1a:	0f 84 4f 01 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023e20:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023e26:	83 f9 1f             	cmp    ecx,0x1f
c0023e29:	0f 8f 40 01 00 00    	jg     c0023f6f <__addsf3+0x2f9>
c0023e2f:	89 de                	mov    esi,ebx
c0023e31:	d3 ee                	shr    esi,cl
c0023e33:	b8 20 00 00 00       	mov    eax,0x20
c0023e38:	29 c8                	sub    eax,ecx
c0023e3a:	89 c1                	mov    ecx,eax
c0023e3c:	d3 e3                	shl    ebx,cl
c0023e3e:	31 c0                	xor    eax,eax
c0023e40:	85 db                	test   ebx,ebx
c0023e42:	0f 95 c0             	setne  al
c0023e45:	09 f0                	or     eax,esi
c0023e47:	29 c2                	sub    edx,eax
c0023e49:	89 d0                	mov    eax,edx
c0023e4b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023e4e:	e9 af 00 00 00       	jmp    c0023f02 <__addsf3+0x28c>
c0023e53:	74 5c                	je     c0023eb1 <__addsf3+0x23b>
c0023e55:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023e58:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023e5b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0023e5f:	75 14                	jne    c0023e75 <__addsf3+0x1ff>
c0023e61:	85 d2                	test   edx,edx
c0023e63:	0f 84 06 01 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023e69:	48                   	dec    eax
c0023e6a:	75 1b                	jne    c0023e87 <__addsf3+0x211>
c0023e6c:	89 d8                	mov    eax,ebx
c0023e6e:	29 d0                	sub    eax,edx
c0023e70:	e9 8d 00 00 00       	jmp    c0023f02 <__addsf3+0x28c>
c0023e75:	89 f1                	mov    ecx,esi
c0023e77:	f7 d1                	not    ecx
c0023e79:	84 c9                	test   cl,cl
c0023e7b:	0f 84 ee 00 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023e81:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023e87:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023e8a:	83 f8 1f             	cmp    eax,0x1f
c0023e8d:	0f 8f dc 00 00 00    	jg     c0023f6f <__addsf3+0x2f9>
c0023e93:	89 d7                	mov    edi,edx
c0023e95:	88 c1                	mov    cl,al
c0023e97:	d3 ef                	shr    edi,cl
c0023e99:	b9 20 00 00 00       	mov    ecx,0x20
c0023e9e:	29 c1                	sub    ecx,eax
c0023ea0:	d3 e2                	shl    edx,cl
c0023ea2:	31 c0                	xor    eax,eax
c0023ea4:	85 d2                	test   edx,edx
c0023ea6:	0f 95 c0             	setne  al
c0023ea9:	09 f8                	or     eax,edi
c0023eab:	29 c3                	sub    ebx,eax
c0023ead:	89 d8                	mov    eax,ebx
c0023eaf:	eb 51                	jmp    c0023f02 <__addsf3+0x28c>
c0023eb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023eb4:	40                   	inc    eax
c0023eb5:	a8 fe                	test   al,0xfe
c0023eb7:	75 3d                	jne    c0023ef6 <__addsf3+0x280>
c0023eb9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0023ebd:	0f 85 a7 00 00 00    	jne    c0023f6a <__addsf3+0x2f4>
c0023ec3:	85 d2                	test   edx,edx
c0023ec5:	75 12                	jne    c0023ed9 <__addsf3+0x263>
c0023ec7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023eca:	85 db                	test   ebx,ebx
c0023ecc:	0f 85 9d 00 00 00    	jne    c0023f6f <__addsf3+0x2f9>
c0023ed2:	31 ff                	xor    edi,edi
c0023ed4:	e9 96 00 00 00       	jmp    c0023f6f <__addsf3+0x2f9>
c0023ed9:	85 db                	test   ebx,ebx
c0023edb:	0f 84 8e 00 00 00    	je     c0023f6f <__addsf3+0x2f9>
c0023ee1:	89 d0                	mov    eax,edx
c0023ee3:	29 d8                	sub    eax,ebx
c0023ee5:	79 06                	jns    c0023eed <__addsf3+0x277>
c0023ee7:	89 d8                	mov    eax,ebx
c0023ee9:	29 d0                	sub    eax,edx
c0023eeb:	eb 5a                	jmp    c0023f47 <__addsf3+0x2d1>
c0023eed:	bf 00 00 00 00       	mov    edi,0x0
c0023ef2:	74 7b                	je     c0023f6f <__addsf3+0x2f9>
c0023ef4:	eb 4a                	jmp    c0023f40 <__addsf3+0x2ca>
c0023ef6:	89 d0                	mov    eax,edx
c0023ef8:	29 d8                	sub    eax,ebx
c0023efa:	79 12                	jns    c0023f0e <__addsf3+0x298>
c0023efc:	89 d8                	mov    eax,ebx
c0023efe:	29 d0                	sub    eax,edx
c0023f00:	eb 09                	jmp    c0023f0b <__addsf3+0x295>
c0023f02:	85 c0                	test   eax,eax
c0023f04:	79 41                	jns    c0023f47 <__addsf3+0x2d1>
c0023f06:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023f0b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0023f0e:	31 f6                	xor    esi,esi
c0023f10:	85 c0                	test   eax,eax
c0023f12:	74 33                	je     c0023f47 <__addsf3+0x2d1>
c0023f14:	0f bd c8             	bsr    ecx,eax
c0023f17:	83 f1 1f             	xor    ecx,0x1f
c0023f1a:	d3 e0                	shl    eax,cl
c0023f1c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023f20:	39 ca                	cmp    edx,ecx
c0023f22:	7f 10                	jg     c0023f34 <__addsf3+0x2be>
c0023f24:	29 d1                	sub    ecx,edx
c0023f26:	41                   	inc    ecx
c0023f27:	d3 e8                	shr    eax,cl
c0023f29:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023f2c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023f32:	eb 13                	jmp    c0023f47 <__addsf3+0x2d1>
c0023f34:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023f37:	29 ce                	sub    esi,ecx
c0023f39:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023f3e:	eb 07                	jmp    c0023f47 <__addsf3+0x2d1>
c0023f40:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023f43:	eb 02                	jmp    c0023f47 <__addsf3+0x2d1>
c0023f45:	31 c0                	xor    eax,eax
c0023f47:	89 c2                	mov    edx,eax
c0023f49:	c1 ea 08             	shr    edx,0x8
c0023f4c:	a8 7f                	test   al,0x7f
c0023f4e:	0f 95 c1             	setne  cl
c0023f51:	09 d1                	or     ecx,edx
c0023f53:	83 e1 01             	and    ecx,0x1
c0023f56:	c1 e8 07             	shr    eax,0x7
c0023f59:	21 c8                	and    eax,ecx
c0023f5b:	c1 e6 17             	shl    esi,0x17
c0023f5e:	09 d6                	or     esi,edx
c0023f60:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023f63:	eb 0a                	jmp    c0023f6f <__addsf3+0x2f9>
c0023f65:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023f68:	eb 05                	jmp    c0023f6f <__addsf3+0x2f9>
c0023f6a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0023f6f:	89 f8                	mov    eax,edi
c0023f71:	5a                   	pop    edx
c0023f72:	59                   	pop    ecx
c0023f73:	5b                   	pop    ebx
c0023f74:	5e                   	pop    esi
c0023f75:	5f                   	pop    edi
c0023f76:	5d                   	pop    ebp
c0023f77:	c3                   	ret    

c0023f78 <__subsf3>:
c0023f78:	55                   	push   ebp
c0023f79:	89 e5                	mov    ebp,esp
c0023f7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023f7e:	05 00 00 00 80       	add    eax,0x80000000
c0023f83:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023f86:	5d                   	pop    ebp
c0023f87:	e9 ea fc ff ff       	jmp    c0023c76 <__addsf3>

c0023f8c <__negsf2>:
c0023f8c:	55                   	push   ebp
c0023f8d:	89 e5                	mov    ebp,esp
c0023f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023f92:	05 00 00 00 80       	add    eax,0x80000000
c0023f97:	5d                   	pop    ebp
c0023f98:	c3                   	ret    

c0023f99 <__mulsf3>:
c0023f99:	55                   	push   ebp
c0023f9a:	89 e5                	mov    ebp,esp
c0023f9c:	57                   	push   edi
c0023f9d:	56                   	push   esi
c0023f9e:	53                   	push   ebx
c0023f9f:	83 ec 1c             	sub    esp,0x1c
c0023fa2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0023fa5:	89 f0                	mov    eax,esi
c0023fa7:	89 f1                	mov    ecx,esi
c0023fa9:	c1 f9 17             	sar    ecx,0x17
c0023fac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023faf:	c1 e0 08             	shl    eax,0x8
c0023fb2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023fb7:	89 c1                	mov    ecx,eax
c0023fb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023fbc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023fbf:	89 c7                	mov    edi,eax
c0023fc1:	c1 ff 17             	sar    edi,0x17
c0023fc4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023fc8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023fcb:	89 f8                	mov    eax,edi
c0023fcd:	0f b6 c0             	movzx  eax,al
c0023fd0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0023fd3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0023fd7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023fda:	42                   	inc    edx
c0023fdb:	80 e2 fe             	and    dl,0xfe
c0023fde:	75 7b                	jne    c002405b <__mulsf3+0xc2>
c0023fe0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023fe4:	74 54                	je     c002403a <__mulsf3+0xa1>
c0023fe6:	85 c9                	test   ecx,ecx
c0023fe8:	0f 85 64 01 00 00    	jne    c0024152 <__mulsf3+0x1b9>
c0023fee:	8d 57 01             	lea    edx,[edi+0x1]
c0023ff1:	80 e2 fe             	and    dl,0xfe
c0023ff4:	75 1f                	jne    c0024015 <__mulsf3+0x7c>
c0023ff6:	85 c0                	test   eax,eax
c0023ff8:	b8 00 00 00 00       	mov    eax,0x0
c0023ffd:	74 29                	je     c0024028 <__mulsf3+0x8f>
c0023fff:	53                   	push   ebx
c0024000:	53                   	push   ebx
c0024001:	50                   	push   eax
c0024002:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024005:	e8 96 05 00 00       	call   c00245a0 <__nesf2>
c002400a:	83 c4 10             	add    esp,0x10
c002400d:	85 c0                	test   eax,eax
c002400f:	0f 85 3a 01 00 00    	jne    c002414f <__mulsf3+0x1b6>
c0024015:	85 ff                	test   edi,edi
c0024017:	0f 89 35 01 00 00    	jns    c0024152 <__mulsf3+0x1b9>
c002401d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0024023:	e9 2a 01 00 00       	jmp    c0024152 <__mulsf3+0x1b9>
c0024028:	51                   	push   ecx
c0024029:	51                   	push   ecx
c002402a:	50                   	push   eax
c002402b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002402e:	e8 6d 05 00 00       	call   c00245a0 <__nesf2>
c0024033:	83 c4 10             	add    esp,0x10
c0024036:	85 c0                	test   eax,eax
c0024038:	eb 15                	jmp    c002404f <__mulsf3+0xb6>
c002403a:	85 c9                	test   ecx,ecx
c002403c:	74 0b                	je     c0024049 <__mulsf3+0xb0>
c002403e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024041:	01 c9                	add    ecx,ecx
c0024043:	78 16                	js     c002405b <__mulsf3+0xc2>
c0024045:	89 d3                	mov    ebx,edx
c0024047:	eb f5                	jmp    c002403e <__mulsf3+0xa5>
c0024049:	89 f8                	mov    eax,edi
c002404b:	f7 d0                	not    eax
c002404d:	84 c0                	test   al,al
c002404f:	75 c4                	jne    c0024015 <__mulsf3+0x7c>
c0024051:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0024056:	e9 f7 00 00 00       	jmp    c0024152 <__mulsf3+0x1b9>
c002405b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002405e:	c1 e6 08             	shl    esi,0x8
c0024061:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0024067:	8d 57 01             	lea    edx,[edi+0x1]
c002406a:	80 e2 fe             	and    dl,0xfe
c002406d:	75 63                	jne    c00240d2 <__mulsf3+0x139>
c002406f:	85 c0                	test   eax,eax
c0024071:	74 2f                	je     c00240a2 <__mulsf3+0x109>
c0024073:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024077:	0f 89 d2 00 00 00    	jns    c002414f <__mulsf3+0x1b6>
c002407d:	52                   	push   edx
c002407e:	52                   	push   edx
c002407f:	6a 00                	push   0x0
c0024081:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024084:	e8 dc 04 00 00       	call   c0024565 <__eqsf2>
c0024089:	83 c4 10             	add    esp,0x10
c002408c:	85 c0                	test   eax,eax
c002408e:	0f 85 bb 00 00 00    	jne    c002414f <__mulsf3+0x1b6>
c0024094:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024097:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002409d:	e9 b0 00 00 00       	jmp    c0024152 <__mulsf3+0x1b9>
c00240a2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00240a5:	50                   	push   eax
c00240a6:	50                   	push   eax
c00240a7:	6a 00                	push   0x0
c00240a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00240ac:	e8 b4 04 00 00       	call   c0024565 <__eqsf2>
c00240b1:	83 c4 10             	add    esp,0x10
c00240b4:	85 c0                	test   eax,eax
c00240b6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00240b9:	75 0c                	jne    c00240c7 <__mulsf3+0x12e>
c00240bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00240bf:	0f 89 8a 00 00 00    	jns    c002414f <__mulsf3+0x1b6>
c00240c5:	eb cd                	jmp    c0024094 <__mulsf3+0xfb>
c00240c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00240ca:	01 f6                	add    esi,esi
c00240cc:	78 04                	js     c00240d2 <__mulsf3+0x139>
c00240ce:	89 c3                	mov    ebx,eax
c00240d0:	eb f5                	jmp    c00240c7 <__mulsf3+0x12e>
c00240d2:	89 c8                	mov    eax,ecx
c00240d4:	0d 00 00 00 80       	or     eax,0x80000000
c00240d9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00240df:	f7 e6                	mul    esi
c00240e1:	85 c0                	test   eax,eax
c00240e3:	0f 95 c0             	setne  al
c00240e6:	0f b6 c0             	movzx  eax,al
c00240e9:	09 c2                	or     edx,eax
c00240eb:	78 03                	js     c00240f0 <__mulsf3+0x157>
c00240ed:	01 d2                	add    edx,edx
c00240ef:	4b                   	dec    ebx
c00240f0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00240f6:	7f 22                	jg     c002411a <__mulsf3+0x181>
c00240f8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00240fe:	85 db                	test   ebx,ebx
c0024100:	7f 23                	jg     c0024125 <__mulsf3+0x18c>
c0024102:	83 fb e9             	cmp    ebx,0xffffffe9
c0024105:	7c 1a                	jl     c0024121 <__mulsf3+0x188>
c0024107:	81 ca 00 00 00 80    	or     edx,0x80000000
c002410d:	b9 01 00 00 00       	mov    ecx,0x1
c0024112:	29 d9                	sub    ecx,ebx
c0024114:	d3 ea                	shr    edx,cl
c0024116:	31 db                	xor    ebx,ebx
c0024118:	eb 0b                	jmp    c0024125 <__mulsf3+0x18c>
c002411a:	bb ff 00 00 00       	mov    ebx,0xff
c002411f:	eb 02                	jmp    c0024123 <__mulsf3+0x18a>
c0024121:	31 db                	xor    ebx,ebx
c0024123:	31 d2                	xor    edx,edx
c0024125:	89 d0                	mov    eax,edx
c0024127:	c1 e8 08             	shr    eax,0x8
c002412a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002412d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024133:	09 fb                	or     ebx,edi
c0024135:	c1 e3 17             	shl    ebx,0x17
c0024138:	09 c3                	or     ebx,eax
c002413a:	f6 c2 7f             	test   dl,0x7f
c002413d:	0f 95 c1             	setne  cl
c0024140:	09 c8                	or     eax,ecx
c0024142:	83 e0 01             	and    eax,0x1
c0024145:	c1 ea 07             	shr    edx,0x7
c0024148:	21 c2                	and    edx,eax
c002414a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002414d:	eb 03                	jmp    c0024152 <__mulsf3+0x1b9>
c002414f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0024152:	89 f0                	mov    eax,esi
c0024154:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024157:	5b                   	pop    ebx
c0024158:	5e                   	pop    esi
c0024159:	5f                   	pop    edi
c002415a:	5d                   	pop    ebp
c002415b:	c3                   	ret    

c002415c <__divsf3>:
c002415c:	55                   	push   ebp
c002415d:	89 e5                	mov    ebp,esp
c002415f:	57                   	push   edi
c0024160:	56                   	push   esi
c0024161:	53                   	push   ebx
c0024162:	83 ec 1c             	sub    esp,0x1c
c0024165:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024168:	89 d8                	mov    eax,ebx
c002416a:	89 d9                	mov    ecx,ebx
c002416c:	c1 f9 17             	sar    ecx,0x17
c002416f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0024172:	c1 e0 08             	shl    eax,0x8
c0024175:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002417a:	89 c1                	mov    ecx,eax
c002417c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002417f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024182:	89 c7                	mov    edi,eax
c0024184:	c1 ff 17             	sar    edi,0x17
c0024187:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002418b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002418e:	89 f8                	mov    eax,edi
c0024190:	0f b6 c0             	movzx  eax,al
c0024193:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024196:	29 c6                	sub    esi,eax
c0024198:	83 c6 7f             	add    esi,0x7f
c002419b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002419e:	42                   	inc    edx
c002419f:	80 e2 fe             	and    dl,0xfe
c00241a2:	0f 85 9c 00 00 00    	jne    c0024244 <__divsf3+0xe8>
c00241a8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00241ac:	74 33                	je     c00241e1 <__divsf3+0x85>
c00241ae:	85 c9                	test   ecx,ecx
c00241b0:	0f 85 c7 01 00 00    	jne    c002437d <__divsf3+0x221>
c00241b6:	8d 57 01             	lea    edx,[edi+0x1]
c00241b9:	80 e2 fe             	and    dl,0xfe
c00241bc:	75 2f                	jne    c00241ed <__divsf3+0x91>
c00241be:	85 c0                	test   eax,eax
c00241c0:	74 2b                	je     c00241ed <__divsf3+0x91>
c00241c2:	51                   	push   ecx
c00241c3:	51                   	push   ecx
c00241c4:	6a 00                	push   0x0
c00241c6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00241c9:	e8 d2 03 00 00       	call   c00245a0 <__nesf2>
c00241ce:	83 c4 10             	add    esp,0x10
c00241d1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00241d4:	85 c0                	test   eax,eax
c00241d6:	0f 85 a1 01 00 00    	jne    c002437d <__divsf3+0x221>
c00241dc:	e9 92 01 00 00       	jmp    c0024373 <__divsf3+0x217>
c00241e1:	85 c9                	test   ecx,ecx
c00241e3:	75 1b                	jne    c0024200 <__divsf3+0xa4>
c00241e5:	8d 57 01             	lea    edx,[edi+0x1]
c00241e8:	80 e2 fe             	and    dl,0xfe
c00241eb:	74 1e                	je     c002420b <__divsf3+0xaf>
c00241ed:	85 ff                	test   edi,edi
c00241ef:	0f 89 88 01 00 00    	jns    c002437d <__divsf3+0x221>
c00241f5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00241fb:	e9 7d 01 00 00       	jmp    c002437d <__divsf3+0x221>
c0024200:	8d 56 ff             	lea    edx,[esi-0x1]
c0024203:	01 c9                	add    ecx,ecx
c0024205:	78 3d                	js     c0024244 <__divsf3+0xe8>
c0024207:	89 d6                	mov    esi,edx
c0024209:	eb f5                	jmp    c0024200 <__divsf3+0xa4>
c002420b:	85 c0                	test   eax,eax
c002420d:	b8 00 00 00 00       	mov    eax,0x0
c0024212:	74 18                	je     c002422c <__divsf3+0xd0>
c0024214:	52                   	push   edx
c0024215:	52                   	push   edx
c0024216:	50                   	push   eax
c0024217:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002421a:	e8 81 03 00 00       	call   c00245a0 <__nesf2>
c002421f:	83 c4 10             	add    esp,0x10
c0024222:	85 c0                	test   eax,eax
c0024224:	0f 85 50 01 00 00    	jne    c002437a <__divsf3+0x21e>
c002422a:	eb c1                	jmp    c00241ed <__divsf3+0x91>
c002422c:	56                   	push   esi
c002422d:	56                   	push   esi
c002422e:	50                   	push   eax
c002422f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024232:	e8 69 03 00 00       	call   c00245a0 <__nesf2>
c0024237:	83 c4 10             	add    esp,0x10
c002423a:	85 c0                	test   eax,eax
c002423c:	0f 84 31 01 00 00    	je     c0024373 <__divsf3+0x217>
c0024242:	eb a9                	jmp    c00241ed <__divsf3+0x91>
c0024244:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0024247:	c1 e3 08             	shl    ebx,0x8
c002424a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024250:	8d 57 01             	lea    edx,[edi+0x1]
c0024253:	80 e2 fe             	and    dl,0xfe
c0024256:	75 71                	jne    c00242c9 <__divsf3+0x16d>
c0024258:	85 c0                	test   eax,eax
c002425a:	ba 00 00 00 00       	mov    edx,0x0
c002425f:	74 2f                	je     c0024290 <__divsf3+0x134>
c0024261:	51                   	push   ecx
c0024262:	51                   	push   ecx
c0024263:	52                   	push   edx
c0024264:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024267:	e8 f9 02 00 00       	call   c0024565 <__eqsf2>
c002426c:	83 c4 10             	add    esp,0x10
c002426f:	85 c0                	test   eax,eax
c0024271:	0f 85 03 01 00 00    	jne    c002437a <__divsf3+0x21e>
c0024277:	31 d2                	xor    edx,edx
c0024279:	89 d3                	mov    ebx,edx
c002427b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002427e:	31 f8                	xor    eax,edi
c0024280:	0f 89 f7 00 00 00    	jns    c002437d <__divsf3+0x221>
c0024286:	bb 00 00 00 80       	mov    ebx,0x80000000
c002428b:	e9 ed 00 00 00       	jmp    c002437d <__divsf3+0x221>
c0024290:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0024293:	50                   	push   eax
c0024294:	50                   	push   eax
c0024295:	52                   	push   edx
c0024296:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024299:	e8 c7 02 00 00       	call   c0024565 <__eqsf2>
c002429e:	83 c4 10             	add    esp,0x10
c00242a1:	85 c0                	test   eax,eax
c00242a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00242a6:	75 16                	jne    c00242be <__divsf3+0x162>
c00242a8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00242ab:	31 fb                	xor    ebx,edi
c00242ad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00242b3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00242b9:	e9 bf 00 00 00       	jmp    c002437d <__divsf3+0x221>
c00242be:	8d 46 01             	lea    eax,[esi+0x1]
c00242c1:	01 db                	add    ebx,ebx
c00242c3:	78 04                	js     c00242c9 <__divsf3+0x16d>
c00242c5:	89 c6                	mov    esi,eax
c00242c7:	eb f5                	jmp    c00242be <__divsf3+0x162>
c00242c9:	89 c8                	mov    eax,ecx
c00242cb:	0d 00 00 00 80       	or     eax,0x80000000
c00242d0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00242d6:	31 d2                	xor    edx,edx
c00242d8:	39 d8                	cmp    eax,ebx
c00242da:	72 07                	jb     c00242e3 <__divsf3+0x187>
c00242dc:	29 d8                	sub    eax,ebx
c00242de:	ba 01 00 00 00       	mov    edx,0x1
c00242e3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00242ea:	01 d2                	add    edx,edx
c00242ec:	89 c1                	mov    ecx,eax
c00242ee:	01 c0                	add    eax,eax
c00242f0:	85 c9                	test   ecx,ecx
c00242f2:	78 04                	js     c00242f8 <__divsf3+0x19c>
c00242f4:	39 c3                	cmp    ebx,eax
c00242f6:	77 05                	ja     c00242fd <__divsf3+0x1a1>
c00242f8:	29 d8                	sub    eax,ebx
c00242fa:	83 ca 01             	or     edx,0x1
c00242fd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0024300:	75 e8                	jne    c00242ea <__divsf3+0x18e>
c0024302:	85 c0                	test   eax,eax
c0024304:	0f 95 c0             	setne  al
c0024307:	0f b6 c0             	movzx  eax,al
c002430a:	c1 e2 06             	shl    edx,0x6
c002430d:	09 c2                	or     edx,eax
c002430f:	78 03                	js     c0024314 <__divsf3+0x1b8>
c0024311:	01 d2                	add    edx,edx
c0024313:	4e                   	dec    esi
c0024314:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002431a:	7f 22                	jg     c002433e <__divsf3+0x1e2>
c002431c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024322:	85 f6                	test   esi,esi
c0024324:	7f 23                	jg     c0024349 <__divsf3+0x1ed>
c0024326:	83 fe e9             	cmp    esi,0xffffffe9
c0024329:	7c 1a                	jl     c0024345 <__divsf3+0x1e9>
c002432b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024331:	b9 01 00 00 00       	mov    ecx,0x1
c0024336:	29 f1                	sub    ecx,esi
c0024338:	d3 ea                	shr    edx,cl
c002433a:	31 f6                	xor    esi,esi
c002433c:	eb 0b                	jmp    c0024349 <__divsf3+0x1ed>
c002433e:	be ff 00 00 00       	mov    esi,0xff
c0024343:	eb 02                	jmp    c0024347 <__divsf3+0x1eb>
c0024345:	31 f6                	xor    esi,esi
c0024347:	31 d2                	xor    edx,edx
c0024349:	89 d0                	mov    eax,edx
c002434b:	c1 e8 08             	shr    eax,0x8
c002434e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0024351:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024357:	09 fe                	or     esi,edi
c0024359:	c1 e6 17             	shl    esi,0x17
c002435c:	09 c6                	or     esi,eax
c002435e:	f6 c2 7f             	test   dl,0x7f
c0024361:	0f 95 c1             	setne  cl
c0024364:	09 c8                	or     eax,ecx
c0024366:	83 e0 01             	and    eax,0x1
c0024369:	c1 ea 07             	shr    edx,0x7
c002436c:	21 c2                	and    edx,eax
c002436e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0024371:	eb 0a                	jmp    c002437d <__divsf3+0x221>
c0024373:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0024378:	eb 03                	jmp    c002437d <__divsf3+0x221>
c002437a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002437d:	89 d8                	mov    eax,ebx
c002437f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024382:	5b                   	pop    ebx
c0024383:	5e                   	pop    esi
c0024384:	5f                   	pop    edi
c0024385:	5d                   	pop    ebp
c0024386:	c3                   	ret    

c0024387 <__floatsisf>:
c0024387:	55                   	push   ebp
c0024388:	89 e5                	mov    ebp,esp
c002438a:	53                   	push   ebx
c002438b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002438e:	85 d2                	test   edx,edx
c0024390:	7e 2b                	jle    c00243bd <__floatsisf+0x36>
c0024392:	0f bd ca             	bsr    ecx,edx
c0024395:	83 f1 1f             	xor    ecx,0x1f
c0024398:	d3 e2                	shl    edx,cl
c002439a:	89 d0                	mov    eax,edx
c002439c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00243a1:	89 c3                	mov    ebx,eax
c00243a3:	c1 eb 08             	shr    ebx,0x8
c00243a6:	80 e2 7f             	and    dl,0x7f
c00243a9:	0f 95 c2             	setne  dl
c00243ac:	09 da                	or     edx,ebx
c00243ae:	83 e2 01             	and    edx,0x1
c00243b1:	c1 e8 07             	shr    eax,0x7
c00243b4:	21 c2                	and    edx,eax
c00243b6:	b8 9e 00 00 00       	mov    eax,0x9e
c00243bb:	eb 32                	jmp    c00243ef <__floatsisf+0x68>
c00243bd:	b8 00 00 00 00       	mov    eax,0x0
c00243c2:	74 34                	je     c00243f8 <__floatsisf+0x71>
c00243c4:	f7 da                	neg    edx
c00243c6:	0f bd ca             	bsr    ecx,edx
c00243c9:	83 f1 1f             	xor    ecx,0x1f
c00243cc:	d3 e2                	shl    edx,cl
c00243ce:	89 d0                	mov    eax,edx
c00243d0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00243d5:	89 c3                	mov    ebx,eax
c00243d7:	c1 eb 08             	shr    ebx,0x8
c00243da:	80 e2 7f             	and    dl,0x7f
c00243dd:	0f 95 c2             	setne  dl
c00243e0:	09 da                	or     edx,ebx
c00243e2:	83 e2 01             	and    edx,0x1
c00243e5:	c1 e8 07             	shr    eax,0x7
c00243e8:	21 c2                	and    edx,eax
c00243ea:	b8 9e 01 00 00       	mov    eax,0x19e
c00243ef:	29 c8                	sub    eax,ecx
c00243f1:	c1 e0 17             	shl    eax,0x17
c00243f4:	09 d8                	or     eax,ebx
c00243f6:	01 d0                	add    eax,edx
c00243f8:	5b                   	pop    ebx
c00243f9:	5d                   	pop    ebp
c00243fa:	c3                   	ret    

c00243fb <__floatunsisf>:
c00243fb:	55                   	push   ebp
c00243fc:	89 e5                	mov    ebp,esp
c00243fe:	53                   	push   ebx
c00243ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024402:	31 c0                	xor    eax,eax
c0024404:	85 d2                	test   edx,edx
c0024406:	74 32                	je     c002443a <__floatunsisf+0x3f>
c0024408:	0f bd ca             	bsr    ecx,edx
c002440b:	83 f1 1f             	xor    ecx,0x1f
c002440e:	d3 e2                	shl    edx,cl
c0024410:	89 d0                	mov    eax,edx
c0024412:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024417:	89 c3                	mov    ebx,eax
c0024419:	c1 eb 08             	shr    ebx,0x8
c002441c:	80 e2 7f             	and    dl,0x7f
c002441f:	0f 95 c2             	setne  dl
c0024422:	09 da                	or     edx,ebx
c0024424:	83 e2 01             	and    edx,0x1
c0024427:	c1 e8 07             	shr    eax,0x7
c002442a:	21 c2                	and    edx,eax
c002442c:	b8 9e 00 00 00       	mov    eax,0x9e
c0024431:	29 c8                	sub    eax,ecx
c0024433:	c1 e0 17             	shl    eax,0x17
c0024436:	09 d8                	or     eax,ebx
c0024438:	01 d0                	add    eax,edx
c002443a:	5b                   	pop    ebx
c002443b:	5d                   	pop    ebp
c002443c:	c3                   	ret    

c002443d <__fixsfsi>:
c002443d:	55                   	push   ebp
c002443e:	89 e5                	mov    ebp,esp
c0024440:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024443:	89 d1                	mov    ecx,edx
c0024445:	c1 e1 08             	shl    ecx,0x8
c0024448:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002444e:	c1 fa 17             	sar    edx,0x17
c0024451:	78 1c                	js     c002446f <__fixsfsi+0x32>
c0024453:	83 ea 7f             	sub    edx,0x7f
c0024456:	31 c0                	xor    eax,eax
c0024458:	83 fa 1e             	cmp    edx,0x1e
c002445b:	77 40                	ja     c002449d <__fixsfsi+0x60>
c002445d:	89 c8                	mov    eax,ecx
c002445f:	0d 00 00 00 80       	or     eax,0x80000000
c0024464:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024469:	29 d1                	sub    ecx,edx
c002446b:	d3 e8                	shr    eax,cl
c002446d:	eb 2e                	jmp    c002449d <__fixsfsi+0x60>
c002446f:	31 c0                	xor    eax,eax
c0024471:	81 c2 81 00 00 00    	add    edx,0x81
c0024477:	78 24                	js     c002449d <__fixsfsi+0x60>
c0024479:	83 fa 1e             	cmp    edx,0x1e
c002447c:	7e 09                	jle    c0024487 <__fixsfsi+0x4a>
c002447e:	83 fa 1f             	cmp    edx,0x1f
c0024481:	75 18                	jne    c002449b <__fixsfsi+0x5e>
c0024483:	85 c9                	test   ecx,ecx
c0024485:	75 14                	jne    c002449b <__fixsfsi+0x5e>
c0024487:	89 c8                	mov    eax,ecx
c0024489:	0d 00 00 00 80       	or     eax,0x80000000
c002448e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024493:	29 d1                	sub    ecx,edx
c0024495:	d3 e8                	shr    eax,cl
c0024497:	f7 d8                	neg    eax
c0024499:	eb 02                	jmp    c002449d <__fixsfsi+0x60>
c002449b:	31 c0                	xor    eax,eax
c002449d:	5d                   	pop    ebp
c002449e:	c3                   	ret    

c002449f <__fixunssfsi>:
c002449f:	55                   	push   ebp
c00244a0:	89 e5                	mov    ebp,esp
c00244a2:	53                   	push   ebx
c00244a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00244a6:	89 d3                	mov    ebx,edx
c00244a8:	c1 fb 17             	sar    ebx,0x17
c00244ab:	83 eb 7f             	sub    ebx,0x7f
c00244ae:	31 c0                	xor    eax,eax
c00244b0:	83 fb 1f             	cmp    ebx,0x1f
c00244b3:	77 18                	ja     c00244cd <__fixunssfsi+0x2e>
c00244b5:	89 d0                	mov    eax,edx
c00244b7:	c1 e0 08             	shl    eax,0x8
c00244ba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00244bf:	0d 00 00 00 80       	or     eax,0x80000000
c00244c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00244c9:	29 d9                	sub    ecx,ebx
c00244cb:	d3 e8                	shr    eax,cl
c00244cd:	5b                   	pop    ebx
c00244ce:	5d                   	pop    ebp
c00244cf:	c3                   	ret    

c00244d0 <__cmpsf2>:
c00244d0:	55                   	push   ebp
c00244d1:	89 e5                	mov    ebp,esp
c00244d3:	57                   	push   edi
c00244d4:	56                   	push   esi
c00244d5:	53                   	push   ebx
c00244d6:	83 ec 24             	sub    esp,0x24
c00244d9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00244dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00244df:	e8 4f 10 00 00       	call   c0025533 <__truncdfsf2>
c00244e4:	5a                   	pop    edx
c00244e5:	59                   	pop    ecx
c00244e6:	89 c3                	mov    ebx,eax
c00244e8:	c1 e8 17             	shr    eax,0x17
c00244eb:	0f b6 f0             	movzx  esi,al
c00244ee:	89 d8                	mov    eax,ebx
c00244f0:	c1 e8 1f             	shr    eax,0x1f
c00244f3:	31 c6                	xor    esi,eax
c00244f5:	c1 e3 08             	shl    ebx,0x8
c00244f8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00244fb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00244fe:	e8 30 10 00 00       	call   c0025533 <__truncdfsf2>
c0024503:	83 c4 10             	add    esp,0x10
c0024506:	89 c1                	mov    ecx,eax
c0024508:	c1 e9 17             	shr    ecx,0x17
c002450b:	0f b6 c9             	movzx  ecx,cl
c002450e:	89 c7                	mov    edi,eax
c0024510:	c1 ef 1f             	shr    edi,0x1f
c0024513:	89 ca                	mov    edx,ecx
c0024515:	31 fa                	xor    edx,edi
c0024517:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002451a:	c1 e0 08             	shl    eax,0x8
c002451d:	89 c2                	mov    edx,eax
c002451f:	89 d8                	mov    eax,ebx
c0024521:	09 d0                	or     eax,edx
c0024523:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024528:	09 f0                	or     eax,esi
c002452a:	75 08                	jne    c0024534 <__cmpsf2+0x64>
c002452c:	31 c0                	xor    eax,eax
c002452e:	39 f9                	cmp    ecx,edi
c0024530:	75 0c                	jne    c002453e <__cmpsf2+0x6e>
c0024532:	eb 29                	jmp    c002455d <__cmpsf2+0x8d>
c0024534:	b8 01 00 00 00       	mov    eax,0x1
c0024539:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002453c:	7f 1f                	jg     c002455d <__cmpsf2+0x8d>
c002453e:	83 c8 ff             	or     eax,0xffffffff
c0024541:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0024544:	7c 17                	jl     c002455d <__cmpsf2+0x8d>
c0024546:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002454c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024552:	b8 01 00 00 00       	mov    eax,0x1
c0024557:	39 d3                	cmp    ebx,edx
c0024559:	77 02                	ja     c002455d <__cmpsf2+0x8d>
c002455b:	19 c0                	sbb    eax,eax
c002455d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024560:	5b                   	pop    ebx
c0024561:	5e                   	pop    esi
c0024562:	5f                   	pop    edi
c0024563:	5d                   	pop    ebp
c0024564:	c3                   	ret    

c0024565 <__eqsf2>:
c0024565:	55                   	push   ebp
c0024566:	89 e5                	mov    ebp,esp
c0024568:	83 ec 24             	sub    esp,0x24
c002456b:	6a 01                	push   0x1
c002456d:	83 ec 0c             	sub    esp,0xc
c0024570:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024573:	e8 df 10 00 00       	call   c0025657 <__extendsfdf2>
c0024578:	83 c4 10             	add    esp,0x10
c002457b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002457e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024581:	52                   	push   edx
c0024582:	50                   	push   eax
c0024583:	50                   	push   eax
c0024584:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024587:	e8 cb 10 00 00       	call   c0025657 <__extendsfdf2>
c002458c:	59                   	pop    ecx
c002458d:	59                   	pop    ecx
c002458e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024591:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024594:	52                   	push   edx
c0024595:	50                   	push   eax
c0024596:	e8 35 ff ff ff       	call   c00244d0 <__cmpsf2>
c002459b:	83 c4 20             	add    esp,0x20
c002459e:	c9                   	leave  
c002459f:	c3                   	ret    

c00245a0 <__nesf2>:
c00245a0:	eb c3                	jmp    c0024565 <__eqsf2>

c00245a2 <__gtsf2>:
c00245a2:	55                   	push   ebp
c00245a3:	89 e5                	mov    ebp,esp
c00245a5:	83 ec 24             	sub    esp,0x24
c00245a8:	6a ff                	push   0xffffffff
c00245aa:	83 ec 0c             	sub    esp,0xc
c00245ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00245b0:	e8 a2 10 00 00       	call   c0025657 <__extendsfdf2>
c00245b5:	83 c4 10             	add    esp,0x10
c00245b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00245bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00245be:	52                   	push   edx
c00245bf:	50                   	push   eax
c00245c0:	50                   	push   eax
c00245c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245c4:	e8 8e 10 00 00       	call   c0025657 <__extendsfdf2>
c00245c9:	59                   	pop    ecx
c00245ca:	59                   	pop    ecx
c00245cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00245ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00245d1:	52                   	push   edx
c00245d2:	50                   	push   eax
c00245d3:	e8 f8 fe ff ff       	call   c00244d0 <__cmpsf2>
c00245d8:	83 c4 20             	add    esp,0x20
c00245db:	c9                   	leave  
c00245dc:	c3                   	ret    

c00245dd <__gesf2>:
c00245dd:	eb c3                	jmp    c00245a2 <__gtsf2>

c00245df <__ltsf2>:
c00245df:	eb 84                	jmp    c0024565 <__eqsf2>

c00245e1 <__lesf2>:
c00245e1:	eb 82                	jmp    c0024565 <__eqsf2>

c00245e3 <__adddf3>:
c00245e3:	55                   	push   ebp
c00245e4:	89 e5                	mov    ebp,esp
c00245e6:	57                   	push   edi
c00245e7:	56                   	push   esi
c00245e8:	53                   	push   ebx
c00245e9:	83 ec 24             	sub    esp,0x24
c00245ec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00245ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00245f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00245f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00245f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00245fb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00245fe:	89 c8                	mov    eax,ecx
c0024600:	89 ce                	mov    esi,ecx
c0024602:	c1 fe 14             	sar    esi,0x14
c0024605:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0024608:	89 fb                	mov    ebx,edi
c002460a:	89 fa                	mov    edx,edi
c002460c:	c1 e2 0b             	shl    edx,0xb
c002460f:	c1 e0 0b             	shl    eax,0xb
c0024612:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024617:	c1 eb 15             	shr    ebx,0x15
c002461a:	09 d8                	or     eax,ebx
c002461c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002461f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024622:	c1 fe 14             	sar    esi,0x14
c0024625:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0024628:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002462b:	89 f3                	mov    ebx,esi
c002462d:	c1 e3 0b             	shl    ebx,0xb
c0024630:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024633:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024636:	c1 e3 0b             	shl    ebx,0xb
c0024639:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002463f:	c1 ee 15             	shr    esi,0x15
c0024642:	09 f3                	or     ebx,esi
c0024644:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0024647:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002464a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002464d:	0f 88 5f 02 00 00    	js     c00248b2 <__adddf3+0x2cf>
c0024653:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024656:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0024659:	85 db                	test   ebx,ebx
c002465b:	0f 8e c7 00 00 00    	jle    c0024728 <__adddf3+0x145>
c0024661:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0024668:	75 1a                	jne    c0024684 <__adddf3+0xa1>
c002466a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002466d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0024670:	0f 84 b2 05 00 00    	je     c0024c28 <__adddf3+0x645>
c0024676:	4b                   	dec    ebx
c0024677:	75 23                	jne    c002469c <__adddf3+0xb9>
c0024679:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002467c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002467f:	e9 99 00 00 00       	jmp    c002471d <__adddf3+0x13a>
c0024684:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024687:	f7 d6                	not    esi
c0024689:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002468f:	0f 84 93 05 00 00    	je     c0024c28 <__adddf3+0x645>
c0024695:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002469c:	83 fb 1f             	cmp    ebx,0x1f
c002469f:	7e 42                	jle    c00246e3 <__adddf3+0x100>
c00246a1:	83 fb 3f             	cmp    ebx,0x3f
c00246a4:	0f 8f 7e 05 00 00    	jg     c0024c28 <__adddf3+0x645>
c00246aa:	83 e3 1f             	and    ebx,0x1f
c00246ad:	89 d9                	mov    ecx,ebx
c00246af:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00246b2:	d3 ef                	shr    edi,cl
c00246b4:	31 db                	xor    ebx,ebx
c00246b6:	85 c9                	test   ecx,ecx
c00246b8:	74 15                	je     c00246cf <__adddf3+0xec>
c00246ba:	be 20 00 00 00       	mov    esi,0x20
c00246bf:	29 ce                	sub    esi,ecx
c00246c1:	89 f1                	mov    ecx,esi
c00246c3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00246c6:	d3 e6                	shl    esi,cl
c00246c8:	31 db                	xor    ebx,ebx
c00246ca:	85 f6                	test   esi,esi
c00246cc:	0f 95 c3             	setne  bl
c00246cf:	31 c9                	xor    ecx,ecx
c00246d1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00246d5:	0f 95 c1             	setne  cl
c00246d8:	09 cf                	or     edi,ecx
c00246da:	09 fb                	or     ebx,edi
c00246dc:	01 da                	add    edx,ebx
c00246de:	83 d0 00             	adc    eax,0x0
c00246e1:	eb 3a                	jmp    c002471d <__adddf3+0x13a>
c00246e3:	bf 20 00 00 00       	mov    edi,0x20
c00246e8:	29 df                	sub    edi,ebx
c00246ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00246ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00246f0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00246f3:	d3 e6                	shl    esi,cl
c00246f5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00246f8:	88 d9                	mov    cl,bl
c00246fa:	d3 ef                	shr    edi,cl
c00246fc:	09 fe                	or     esi,edi
c00246fe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024701:	88 d9                	mov    cl,bl
c0024703:	d3 ef                	shr    edi,cl
c0024705:	89 fb                	mov    ebx,edi
c0024707:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002470a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002470d:	d3 e7                	shl    edi,cl
c002470f:	85 ff                	test   edi,edi
c0024711:	0f 95 c1             	setne  cl
c0024714:	0f b6 c9             	movzx  ecx,cl
c0024717:	09 ce                	or     esi,ecx
c0024719:	01 f2                	add    edx,esi
c002471b:	11 d8                	adc    eax,ebx
c002471d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024720:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024723:	e9 52 01 00 00       	jmp    c002487a <__adddf3+0x297>
c0024728:	0f 84 d5 00 00 00    	je     c0024803 <__adddf3+0x220>
c002472e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024731:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024734:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024737:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002473a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024741:	75 20                	jne    c0024763 <__adddf3+0x180>
c0024743:	89 d6                	mov    esi,edx
c0024745:	09 c6                	or     esi,eax
c0024747:	0f 84 db 04 00 00    	je     c0024c28 <__adddf3+0x645>
c002474d:	4b                   	dec    ebx
c002474e:	75 29                	jne    c0024779 <__adddf3+0x196>
c0024750:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024753:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024756:	01 d1                	add    ecx,edx
c0024758:	11 c6                	adc    esi,eax
c002475a:	89 f0                	mov    eax,esi
c002475c:	89 ca                	mov    edx,ecx
c002475e:	e9 17 01 00 00       	jmp    c002487a <__adddf3+0x297>
c0024763:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024766:	f7 d6                	not    esi
c0024768:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002476e:	0f 84 b4 04 00 00    	je     c0024c28 <__adddf3+0x645>
c0024774:	0d 00 00 00 80       	or     eax,0x80000000
c0024779:	83 fb 1f             	cmp    ebx,0x1f
c002477c:	7e 48                	jle    c00247c6 <__adddf3+0x1e3>
c002477e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024781:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024784:	83 fb 3f             	cmp    ebx,0x3f
c0024787:	0f 8f 9b 04 00 00    	jg     c0024c28 <__adddf3+0x645>
c002478d:	83 e3 1f             	and    ebx,0x1f
c0024790:	89 d9                	mov    ecx,ebx
c0024792:	89 c7                	mov    edi,eax
c0024794:	d3 ef                	shr    edi,cl
c0024796:	31 db                	xor    ebx,ebx
c0024798:	85 c9                	test   ecx,ecx
c002479a:	74 12                	je     c00247ae <__adddf3+0x1cb>
c002479c:	be 20 00 00 00       	mov    esi,0x20
c00247a1:	29 ce                	sub    esi,ecx
c00247a3:	89 f1                	mov    ecx,esi
c00247a5:	d3 e0                	shl    eax,cl
c00247a7:	31 db                	xor    ebx,ebx
c00247a9:	85 c0                	test   eax,eax
c00247ab:	0f 95 c3             	setne  bl
c00247ae:	31 c0                	xor    eax,eax
c00247b0:	85 d2                	test   edx,edx
c00247b2:	0f 95 c0             	setne  al
c00247b5:	09 c7                	or     edi,eax
c00247b7:	09 fb                	or     ebx,edi
c00247b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00247bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00247bf:	01 da                	add    edx,ebx
c00247c1:	83 d6 00             	adc    esi,0x0
c00247c4:	eb 39                	jmp    c00247ff <__adddf3+0x21c>
c00247c6:	be 20 00 00 00       	mov    esi,0x20
c00247cb:	29 de                	sub    esi,ebx
c00247cd:	89 c7                	mov    edi,eax
c00247cf:	89 f1                	mov    ecx,esi
c00247d1:	d3 e7                	shl    edi,cl
c00247d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00247d6:	89 d7                	mov    edi,edx
c00247d8:	88 d9                	mov    cl,bl
c00247da:	d3 ef                	shr    edi,cl
c00247dc:	89 f9                	mov    ecx,edi
c00247de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00247e1:	09 cf                	or     edi,ecx
c00247e3:	88 d9                	mov    cl,bl
c00247e5:	d3 e8                	shr    eax,cl
c00247e7:	89 f1                	mov    ecx,esi
c00247e9:	d3 e2                	shl    edx,cl
c00247eb:	85 d2                	test   edx,edx
c00247ed:	0f 95 c2             	setne  dl
c00247f0:	0f b6 d2             	movzx  edx,dl
c00247f3:	09 d7                	or     edi,edx
c00247f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00247f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00247fb:	01 fa                	add    edx,edi
c00247fd:	11 c6                	adc    esi,eax
c00247ff:	89 f0                	mov    eax,esi
c0024801:	eb 77                	jmp    c002487a <__adddf3+0x297>
c0024803:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024806:	46                   	inc    esi
c0024807:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002480a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024810:	75 41                	jne    c0024853 <__adddf3+0x270>
c0024812:	89 d3                	mov    ebx,edx
c0024814:	09 c3                	or     ebx,eax
c0024816:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002481d:	75 27                	jne    c0024846 <__adddf3+0x263>
c002481f:	85 db                	test   ebx,ebx
c0024821:	0f 84 fb 03 00 00    	je     c0024c22 <__adddf3+0x63f>
c0024827:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002482a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002482d:	0f 84 f5 03 00 00    	je     c0024c28 <__adddf3+0x645>
c0024833:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024836:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024839:	85 c0                	test   eax,eax
c002483b:	0f 89 91 03 00 00    	jns    c0024bd2 <__adddf3+0x5ef>
c0024841:	e9 85 03 00 00       	jmp    c0024bcb <__adddf3+0x5e8>
c0024846:	85 db                	test   ebx,ebx
c0024848:	0f 85 da 03 00 00    	jne    c0024c28 <__adddf3+0x645>
c002484e:	e9 cf 03 00 00       	jmp    c0024c22 <__adddf3+0x63f>
c0024853:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024856:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024859:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002485c:	f7 d1                	not    ecx
c002485e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024864:	0f 84 70 03 00 00    	je     c0024bda <__adddf3+0x5f7>
c002486a:	d1 ea                	shr    edx,1
c002486c:	89 c1                	mov    ecx,eax
c002486e:	c1 e1 1f             	shl    ecx,0x1f
c0024871:	09 ca                	or     edx,ecx
c0024873:	d1 e8                	shr    eax,1
c0024875:	e9 6f 03 00 00       	jmp    c0024be9 <__adddf3+0x606>
c002487a:	85 c0                	test   eax,eax
c002487c:	0f 89 67 03 00 00    	jns    c0024be9 <__adddf3+0x606>
c0024882:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024885:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024888:	f7 d1                	not    ecx
c002488a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024890:	0f 84 44 03 00 00    	je     c0024bda <__adddf3+0x5f7>
c0024896:	89 d1                	mov    ecx,edx
c0024898:	d1 e9                	shr    ecx,1
c002489a:	83 e2 01             	and    edx,0x1
c002489d:	09 ca                	or     edx,ecx
c002489f:	89 c1                	mov    ecx,eax
c00248a1:	c1 e1 1f             	shl    ecx,0x1f
c00248a4:	09 ca                	or     edx,ecx
c00248a6:	d1 e8                	shr    eax,1
c00248a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00248ad:	e9 37 03 00 00       	jmp    c0024be9 <__adddf3+0x606>
c00248b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00248b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00248bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00248be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00248c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00248c7:	29 de                	sub    esi,ebx
c00248c9:	85 f6                	test   esi,esi
c00248cb:	0f 8e bd 00 00 00    	jle    c002498e <__adddf3+0x3ab>
c00248d1:	85 db                	test   ebx,ebx
c00248d3:	75 17                	jne    c00248ec <__adddf3+0x309>
c00248d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00248d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00248db:	0f 84 47 03 00 00    	je     c0024c28 <__adddf3+0x645>
c00248e1:	4e                   	dec    esi
c00248e2:	75 20                	jne    c0024904 <__adddf3+0x321>
c00248e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00248e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00248ea:	eb 5b                	jmp    c0024947 <__adddf3+0x364>
c00248ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00248ef:	f7 d3                	not    ebx
c00248f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00248f7:	0f 84 2b 03 00 00    	je     c0024c28 <__adddf3+0x645>
c00248fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024904:	83 fe 1f             	cmp    esi,0x1f
c0024907:	7e 49                	jle    c0024952 <__adddf3+0x36f>
c0024909:	83 fe 3f             	cmp    esi,0x3f
c002490c:	0f 8f 16 03 00 00    	jg     c0024c28 <__adddf3+0x645>
c0024912:	83 e6 1f             	and    esi,0x1f
c0024915:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024918:	89 f1                	mov    ecx,esi
c002491a:	d3 ef                	shr    edi,cl
c002491c:	31 db                	xor    ebx,ebx
c002491e:	85 f6                	test   esi,esi
c0024920:	74 13                	je     c0024935 <__adddf3+0x352>
c0024922:	b9 20 00 00 00       	mov    ecx,0x20
c0024927:	29 f1                	sub    ecx,esi
c0024929:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002492c:	d3 e6                	shl    esi,cl
c002492e:	31 db                	xor    ebx,ebx
c0024930:	85 f6                	test   esi,esi
c0024932:	0f 95 c3             	setne  bl
c0024935:	31 c9                	xor    ecx,ecx
c0024937:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002493b:	0f 95 c1             	setne  cl
c002493e:	09 cf                	or     edi,ecx
c0024940:	09 fb                	or     ebx,edi
c0024942:	29 da                	sub    edx,ebx
c0024944:	83 d8 00             	sbb    eax,0x0
c0024947:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002494a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002494d:	e9 aa 01 00 00       	jmp    c0024afc <__adddf3+0x519>
c0024952:	bf 20 00 00 00       	mov    edi,0x20
c0024957:	29 f7                	sub    edi,esi
c0024959:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002495c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002495f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024962:	d3 e3                	shl    ebx,cl
c0024964:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024967:	89 f1                	mov    ecx,esi
c0024969:	d3 ef                	shr    edi,cl
c002496b:	09 fb                	or     ebx,edi
c002496d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024970:	89 f1                	mov    ecx,esi
c0024972:	d3 ef                	shr    edi,cl
c0024974:	89 fe                	mov    esi,edi
c0024976:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024979:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002497c:	d3 e7                	shl    edi,cl
c002497e:	85 ff                	test   edi,edi
c0024980:	0f 95 c1             	setne  cl
c0024983:	0f b6 c9             	movzx  ecx,cl
c0024986:	09 cb                	or     ebx,ecx
c0024988:	29 da                	sub    edx,ebx
c002498a:	19 f0                	sbb    eax,esi
c002498c:	eb b9                	jmp    c0024947 <__adddf3+0x364>
c002498e:	0f 84 cd 00 00 00    	je     c0024a61 <__adddf3+0x47e>
c0024994:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0024997:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002499a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002499d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00249a1:	75 1b                	jne    c00249be <__adddf3+0x3db>
c00249a3:	89 d6                	mov    esi,edx
c00249a5:	09 c6                	or     esi,eax
c00249a7:	0f 84 7b 02 00 00    	je     c0024c28 <__adddf3+0x645>
c00249ad:	4b                   	dec    ebx
c00249ae:	75 24                	jne    c00249d4 <__adddf3+0x3f1>
c00249b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00249b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00249b6:	29 d1                	sub    ecx,edx
c00249b8:	19 c6                	sbb    esi,eax
c00249ba:	89 ca                	mov    edx,ecx
c00249bc:	eb 61                	jmp    c0024a1f <__adddf3+0x43c>
c00249be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00249c1:	f7 d6                	not    esi
c00249c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00249c9:	0f 84 59 02 00 00    	je     c0024c28 <__adddf3+0x645>
c00249cf:	0d 00 00 00 80       	or     eax,0x80000000
c00249d4:	83 fb 1f             	cmp    ebx,0x1f
c00249d7:	7e 4d                	jle    c0024a26 <__adddf3+0x443>
c00249d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00249dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00249df:	83 fb 3f             	cmp    ebx,0x3f
c00249e2:	0f 8f 40 02 00 00    	jg     c0024c28 <__adddf3+0x645>
c00249e8:	83 e3 1f             	and    ebx,0x1f
c00249eb:	89 d9                	mov    ecx,ebx
c00249ed:	89 c7                	mov    edi,eax
c00249ef:	d3 ef                	shr    edi,cl
c00249f1:	31 db                	xor    ebx,ebx
c00249f3:	85 c9                	test   ecx,ecx
c00249f5:	74 12                	je     c0024a09 <__adddf3+0x426>
c00249f7:	be 20 00 00 00       	mov    esi,0x20
c00249fc:	29 ce                	sub    esi,ecx
c00249fe:	89 f1                	mov    ecx,esi
c0024a00:	d3 e0                	shl    eax,cl
c0024a02:	31 db                	xor    ebx,ebx
c0024a04:	85 c0                	test   eax,eax
c0024a06:	0f 95 c3             	setne  bl
c0024a09:	31 c0                	xor    eax,eax
c0024a0b:	85 d2                	test   edx,edx
c0024a0d:	0f 95 c0             	setne  al
c0024a10:	09 c7                	or     edi,eax
c0024a12:	09 fb                	or     ebx,edi
c0024a14:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024a17:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024a1a:	29 da                	sub    edx,ebx
c0024a1c:	83 de 00             	sbb    esi,0x0
c0024a1f:	89 f0                	mov    eax,esi
c0024a21:	e9 d6 00 00 00       	jmp    c0024afc <__adddf3+0x519>
c0024a26:	be 20 00 00 00       	mov    esi,0x20
c0024a2b:	29 de                	sub    esi,ebx
c0024a2d:	89 c7                	mov    edi,eax
c0024a2f:	89 f1                	mov    ecx,esi
c0024a31:	d3 e7                	shl    edi,cl
c0024a33:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024a36:	89 d7                	mov    edi,edx
c0024a38:	88 d9                	mov    cl,bl
c0024a3a:	d3 ef                	shr    edi,cl
c0024a3c:	89 f9                	mov    ecx,edi
c0024a3e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024a41:	09 cf                	or     edi,ecx
c0024a43:	88 d9                	mov    cl,bl
c0024a45:	d3 e8                	shr    eax,cl
c0024a47:	89 f1                	mov    ecx,esi
c0024a49:	d3 e2                	shl    edx,cl
c0024a4b:	85 d2                	test   edx,edx
c0024a4d:	0f 95 c2             	setne  dl
c0024a50:	0f b6 d2             	movzx  edx,dl
c0024a53:	09 d7                	or     edi,edx
c0024a55:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024a58:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024a5b:	29 fa                	sub    edx,edi
c0024a5d:	19 c6                	sbb    esi,eax
c0024a5f:	eb be                	jmp    c0024a1f <__adddf3+0x43c>
c0024a61:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024a64:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024a67:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0024a6d:	75 6a                	jne    c0024ad9 <__adddf3+0x4f6>
c0024a6f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024a73:	75 58                	jne    c0024acd <__adddf3+0x4ea>
c0024a75:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024a78:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024a7b:	89 d6                	mov    esi,edx
c0024a7d:	09 c6                	or     esi,eax
c0024a7f:	75 17                	jne    c0024a98 <__adddf3+0x4b5>
c0024a81:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024a84:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024a87:	85 db                	test   ebx,ebx
c0024a89:	0f 85 99 01 00 00    	jne    c0024c28 <__adddf3+0x645>
c0024a8f:	31 ff                	xor    edi,edi
c0024a91:	31 c9                	xor    ecx,ecx
c0024a93:	e9 90 01 00 00       	jmp    c0024c28 <__adddf3+0x645>
c0024a98:	85 db                	test   ebx,ebx
c0024a9a:	0f 84 88 01 00 00    	je     c0024c28 <__adddf3+0x645>
c0024aa0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024aa3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0024aa6:	85 c0                	test   eax,eax
c0024aa8:	79 10                	jns    c0024aba <__adddf3+0x4d7>
c0024aaa:	31 c9                	xor    ecx,ecx
c0024aac:	f7 da                	neg    edx
c0024aae:	0f 95 c1             	setne  cl
c0024ab1:	01 c8                	add    eax,ecx
c0024ab3:	f7 d8                	neg    eax
c0024ab5:	e9 2f 01 00 00       	jmp    c0024be9 <__adddf3+0x606>
c0024aba:	31 ff                	xor    edi,edi
c0024abc:	31 c9                	xor    ecx,ecx
c0024abe:	89 c3                	mov    ebx,eax
c0024ac0:	09 d3                	or     ebx,edx
c0024ac2:	0f 84 60 01 00 00    	je     c0024c28 <__adddf3+0x645>
c0024ac8:	e9 05 01 00 00       	jmp    c0024bd2 <__adddf3+0x5ef>
c0024acd:	31 ff                	xor    edi,edi
c0024acf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024ad4:	e9 4f 01 00 00       	jmp    c0024c28 <__adddf3+0x645>
c0024ad9:	89 c1                	mov    ecx,eax
c0024adb:	89 d0                	mov    eax,edx
c0024add:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0024ae0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0024ae3:	89 ca                	mov    edx,ecx
c0024ae5:	85 c9                	test   ecx,ecx
c0024ae7:	79 2c                	jns    c0024b15 <__adddf3+0x532>
c0024ae9:	31 c9                	xor    ecx,ecx
c0024aeb:	f7 d8                	neg    eax
c0024aed:	0f 95 c1             	setne  cl
c0024af0:	01 ca                	add    edx,ecx
c0024af2:	f7 da                	neg    edx
c0024af4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024af7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024afa:	eb 19                	jmp    c0024b15 <__adddf3+0x532>
c0024afc:	85 c0                	test   eax,eax
c0024afe:	0f 89 e5 00 00 00    	jns    c0024be9 <__adddf3+0x606>
c0024b04:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024b09:	89 c1                	mov    ecx,eax
c0024b0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024b0e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024b11:	89 d0                	mov    eax,edx
c0024b13:	89 ca                	mov    edx,ecx
c0024b15:	85 d2                	test   edx,edx
c0024b17:	74 59                	je     c0024b72 <__adddf3+0x58f>
c0024b19:	0f bd da             	bsr    ebx,edx
c0024b1c:	83 f3 1f             	xor    ebx,0x1f
c0024b1f:	88 d9                	mov    cl,bl
c0024b21:	d3 e2                	shl    edx,cl
c0024b23:	bf 20 00 00 00       	mov    edi,0x20
c0024b28:	89 f9                	mov    ecx,edi
c0024b2a:	29 d9                	sub    ecx,ebx
c0024b2c:	89 c6                	mov    esi,eax
c0024b2e:	d3 ee                	shr    esi,cl
c0024b30:	09 d6                	or     esi,edx
c0024b32:	88 d9                	mov    cl,bl
c0024b34:	d3 e0                	shl    eax,cl
c0024b36:	89 c2                	mov    edx,eax
c0024b38:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024b3b:	25 ff 07 00 00       	and    eax,0x7ff
c0024b40:	39 d8                	cmp    eax,ebx
c0024b42:	7f 22                	jg     c0024b66 <__adddf3+0x583>
c0024b44:	29 c3                	sub    ebx,eax
c0024b46:	43                   	inc    ebx
c0024b47:	88 d9                	mov    cl,bl
c0024b49:	d3 ea                	shr    edx,cl
c0024b4b:	29 df                	sub    edi,ebx
c0024b4d:	89 f9                	mov    ecx,edi
c0024b4f:	89 f0                	mov    eax,esi
c0024b51:	d3 e0                	shl    eax,cl
c0024b53:	09 c2                	or     edx,eax
c0024b55:	89 f0                	mov    eax,esi
c0024b57:	88 d9                	mov    cl,bl
c0024b59:	d3 e8                	shr    eax,cl
c0024b5b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024b5e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024b64:	eb 6f                	jmp    c0024bd5 <__adddf3+0x5f2>
c0024b66:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024b69:	29 d8                	sub    eax,ebx
c0024b6b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024b6e:	89 f0                	mov    eax,esi
c0024b70:	eb 59                	jmp    c0024bcb <__adddf3+0x5e8>
c0024b72:	85 c0                	test   eax,eax
c0024b74:	74 6a                	je     c0024be0 <__adddf3+0x5fd>
c0024b76:	0f bd c8             	bsr    ecx,eax
c0024b79:	83 f1 1f             	xor    ecx,0x1f
c0024b7c:	d3 e0                	shl    eax,cl
c0024b7e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024b81:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024b87:	83 c1 20             	add    ecx,0x20
c0024b8a:	39 cb                	cmp    ebx,ecx
c0024b8c:	7f 35                	jg     c0024bc3 <__adddf3+0x5e0>
c0024b8e:	29 d9                	sub    ecx,ebx
c0024b90:	8d 71 01             	lea    esi,[ecx+0x1]
c0024b93:	83 fe 1f             	cmp    esi,0x1f
c0024b96:	7e 09                	jle    c0024ba1 <__adddf3+0x5be>
c0024b98:	83 e9 1f             	sub    ecx,0x1f
c0024b9b:	d3 e8                	shr    eax,cl
c0024b9d:	89 c3                	mov    ebx,eax
c0024b9f:	eb 11                	jmp    c0024bb2 <__adddf3+0x5cf>
c0024ba1:	b9 20 00 00 00       	mov    ecx,0x20
c0024ba6:	29 f1                	sub    ecx,esi
c0024ba8:	89 c3                	mov    ebx,eax
c0024baa:	d3 e3                	shl    ebx,cl
c0024bac:	89 f1                	mov    ecx,esi
c0024bae:	d3 e8                	shr    eax,cl
c0024bb0:	89 c2                	mov    edx,eax
c0024bb2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024bb5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0024bba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024bbd:	89 d0                	mov    eax,edx
c0024bbf:	89 da                	mov    edx,ebx
c0024bc1:	eb 26                	jmp    c0024be9 <__adddf3+0x606>
c0024bc3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024bc6:	29 cf                	sub    edi,ecx
c0024bc8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024bcb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024bd0:	eb 17                	jmp    c0024be9 <__adddf3+0x606>
c0024bd2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024bd5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024bd8:	eb 0f                	jmp    c0024be9 <__adddf3+0x606>
c0024bda:	31 d2                	xor    edx,edx
c0024bdc:	31 c0                	xor    eax,eax
c0024bde:	eb 09                	jmp    c0024be9 <__adddf3+0x606>
c0024be0:	89 c2                	mov    edx,eax
c0024be2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024be9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024bec:	c1 e1 14             	shl    ecx,0x14
c0024bef:	89 c3                	mov    ebx,eax
c0024bf1:	c1 eb 0b             	shr    ebx,0xb
c0024bf4:	09 d9                	or     ecx,ebx
c0024bf6:	89 d3                	mov    ebx,edx
c0024bf8:	c1 eb 0b             	shr    ebx,0xb
c0024bfb:	c1 e0 15             	shl    eax,0x15
c0024bfe:	09 d8                	or     eax,ebx
c0024c00:	89 c7                	mov    edi,eax
c0024c02:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024c08:	0f 95 c0             	setne  al
c0024c0b:	89 c6                	mov    esi,eax
c0024c0d:	09 f3                	or     ebx,esi
c0024c0f:	83 e3 01             	and    ebx,0x1
c0024c12:	c1 ea 0a             	shr    edx,0xa
c0024c15:	21 da                	and    edx,ebx
c0024c17:	89 f8                	mov    eax,edi
c0024c19:	01 d0                	add    eax,edx
c0024c1b:	83 d1 00             	adc    ecx,0x0
c0024c1e:	89 c7                	mov    edi,eax
c0024c20:	eb 06                	jmp    c0024c28 <__adddf3+0x645>
c0024c22:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024c25:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024c28:	89 f8                	mov    eax,edi
c0024c2a:	89 ca                	mov    edx,ecx
c0024c2c:	83 c4 24             	add    esp,0x24
c0024c2f:	5b                   	pop    ebx
c0024c30:	5e                   	pop    esi
c0024c31:	5f                   	pop    edi
c0024c32:	5d                   	pop    ebp
c0024c33:	c3                   	ret    

c0024c34 <__subdf3>:
c0024c34:	55                   	push   ebp
c0024c35:	89 e5                	mov    ebp,esp
c0024c37:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024c3a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024c3d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024c43:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024c46:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024c49:	5d                   	pop    ebp
c0024c4a:	e9 94 f9 ff ff       	jmp    c00245e3 <__adddf3>

c0024c4f <__negdf2>:
c0024c4f:	55                   	push   ebp
c0024c50:	89 e5                	mov    ebp,esp
c0024c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c55:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024c58:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024c5e:	5d                   	pop    ebp
c0024c5f:	c3                   	ret    

c0024c60 <__muldf3>:
c0024c60:	55                   	push   ebp
c0024c61:	89 e5                	mov    ebp,esp
c0024c63:	57                   	push   edi
c0024c64:	56                   	push   esi
c0024c65:	53                   	push   ebx
c0024c66:	83 ec 24             	sub    esp,0x24
c0024c69:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024c6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c6f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024c72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024c75:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024c78:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0024c7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024c7e:	89 c8                	mov    eax,ecx
c0024c80:	c1 f8 14             	sar    eax,0x14
c0024c83:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024c86:	89 f8                	mov    eax,edi
c0024c88:	89 fb                	mov    ebx,edi
c0024c8a:	c1 e3 0b             	shl    ebx,0xb
c0024c8d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024c90:	c1 e1 0b             	shl    ecx,0xb
c0024c93:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024c99:	c1 e8 15             	shr    eax,0x15
c0024c9c:	09 c1                	or     ecx,eax
c0024c9e:	89 d6                	mov    esi,edx
c0024ca0:	89 d0                	mov    eax,edx
c0024ca2:	c1 f8 14             	sar    eax,0x14
c0024ca5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024ca8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0024cab:	89 c3                	mov    ebx,eax
c0024cad:	c1 e3 0b             	shl    ebx,0xb
c0024cb0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024cb3:	c1 e6 0b             	shl    esi,0xb
c0024cb6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0024cbc:	c1 e8 15             	shr    eax,0x15
c0024cbf:	09 c6                	or     esi,eax
c0024cc1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024cc4:	25 ff 07 00 00       	and    eax,0x7ff
c0024cc9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024ccc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024ccf:	25 ff 07 00 00       	and    eax,0x7ff
c0024cd4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024cd7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024cda:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024cdd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0024ce4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024ce7:	40                   	inc    eax
c0024ce8:	a9 fe 07 00 00       	test   eax,0x7fe
c0024ced:	0f 85 8d 00 00 00    	jne    c0024d80 <__muldf3+0x120>
c0024cf3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024cf6:	09 c8                	or     eax,ecx
c0024cf8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0024cfc:	74 44                	je     c0024d42 <__muldf3+0xe2>
c0024cfe:	85 c0                	test   eax,eax
c0024d00:	0f 85 31 02 00 00    	jne    c0024f37 <__muldf3+0x2d7>
c0024d06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024d09:	40                   	inc    eax
c0024d0a:	a9 fe 07 00 00       	test   eax,0x7fe
c0024d0f:	75 13                	jne    c0024d24 <__muldf3+0xc4>
c0024d11:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024d14:	09 f1                	or     ecx,esi
c0024d16:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024d1a:	74 22                	je     c0024d3e <__muldf3+0xde>
c0024d1c:	85 c9                	test   ecx,ecx
c0024d1e:	0f 85 0d 02 00 00    	jne    c0024f31 <__muldf3+0x2d1>
c0024d24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024d28:	0f 89 09 02 00 00    	jns    c0024f37 <__muldf3+0x2d7>
c0024d2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024d31:	05 00 00 00 80       	add    eax,0x80000000
c0024d36:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024d39:	e9 f9 01 00 00       	jmp    c0024f37 <__muldf3+0x2d7>
c0024d3e:	85 c9                	test   ecx,ecx
c0024d40:	eb 2e                	jmp    c0024d70 <__muldf3+0x110>
c0024d42:	85 c0                	test   eax,eax
c0024d44:	74 20                	je     c0024d66 <__muldf3+0x106>
c0024d46:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024d49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024d4c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024d4f:	c1 ef 1f             	shr    edi,0x1f
c0024d52:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024d55:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024d58:	8d 43 ff             	lea    eax,[ebx-0x1]
c0024d5b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024d5e:	09 f9                	or     ecx,edi
c0024d60:	78 1e                	js     c0024d80 <__muldf3+0x120>
c0024d62:	89 c3                	mov    ebx,eax
c0024d64:	eb e0                	jmp    c0024d46 <__muldf3+0xe6>
c0024d66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024d69:	f7 d0                	not    eax
c0024d6b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024d70:	75 b2                	jne    c0024d24 <__muldf3+0xc4>
c0024d72:	31 ff                	xor    edi,edi
c0024d74:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0024d7b:	e9 b7 01 00 00       	jmp    c0024f37 <__muldf3+0x2d7>
c0024d80:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024d83:	40                   	inc    eax
c0024d84:	a9 fe 07 00 00       	test   eax,0x7fe
c0024d89:	75 57                	jne    c0024de2 <__muldf3+0x182>
c0024d8b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024d8e:	09 f0                	or     eax,esi
c0024d90:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024d94:	74 23                	je     c0024db9 <__muldf3+0x159>
c0024d96:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0024d9a:	0f 89 91 01 00 00    	jns    c0024f31 <__muldf3+0x2d1>
c0024da0:	85 c0                	test   eax,eax
c0024da2:	0f 85 89 01 00 00    	jne    c0024f31 <__muldf3+0x2d1>
c0024da8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024dab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0024db1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024db4:	e9 7e 01 00 00       	jmp    c0024f37 <__muldf3+0x2d7>
c0024db9:	85 c0                	test   eax,eax
c0024dbb:	75 0c                	jne    c0024dc9 <__muldf3+0x169>
c0024dbd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0024dc1:	0f 89 6a 01 00 00    	jns    c0024f31 <__muldf3+0x2d1>
c0024dc7:	eb df                	jmp    c0024da8 <__muldf3+0x148>
c0024dc9:	01 f6                	add    esi,esi
c0024dcb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024dce:	c1 ea 1f             	shr    edx,0x1f
c0024dd1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024dd4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0024dd7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0024dda:	09 d6                	or     esi,edx
c0024ddc:	78 04                	js     c0024de2 <__muldf3+0x182>
c0024dde:	89 c3                	mov    ebx,eax
c0024de0:	eb e7                	jmp    c0024dc9 <__muldf3+0x169>
c0024de2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0024de8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024dee:	89 c8                	mov    eax,ecx
c0024df0:	f7 e6                	mul    esi
c0024df2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0024df5:	89 c7                	mov    edi,eax
c0024df7:	89 c8                	mov    eax,ecx
c0024df9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024dfc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0024dff:	89 c1                	mov    ecx,eax
c0024e01:	89 f0                	mov    eax,esi
c0024e03:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024e06:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024e09:	89 c6                	mov    esi,eax
c0024e0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024e0e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024e11:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024e14:	31 c0                	xor    eax,eax
c0024e16:	01 f1                	add    ecx,esi
c0024e18:	0f 92 c0             	setb   al
c0024e1b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0024e1e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024e21:	83 d6 00             	adc    esi,0x0
c0024e24:	01 c7                	add    edi,eax
c0024e26:	83 d6 00             	adc    esi,0x0
c0024e29:	01 ca                	add    edx,ecx
c0024e2b:	0f 92 c1             	setb   cl
c0024e2e:	0f b6 c9             	movzx  ecx,cl
c0024e31:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024e34:	83 d6 00             	adc    esi,0x0
c0024e37:	01 cf                	add    edi,ecx
c0024e39:	83 d6 00             	adc    esi,0x0
c0024e3c:	31 c9                	xor    ecx,ecx
c0024e3e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024e41:	0f 95 c1             	setne  cl
c0024e44:	09 cf                	or     edi,ecx
c0024e46:	85 f6                	test   esi,esi
c0024e48:	78 0c                	js     c0024e56 <__muldf3+0x1f6>
c0024e4a:	01 f6                	add    esi,esi
c0024e4c:	89 f8                	mov    eax,edi
c0024e4e:	c1 e8 1f             	shr    eax,0x1f
c0024e51:	09 c6                	or     esi,eax
c0024e53:	01 ff                	add    edi,edi
c0024e55:	4b                   	dec    ebx
c0024e56:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0024e5c:	0f 8f 85 00 00 00    	jg     c0024ee7 <__muldf3+0x287>
c0024e62:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024e68:	85 db                	test   ebx,ebx
c0024e6a:	0f 8f 84 00 00 00    	jg     c0024ef4 <__muldf3+0x294>
c0024e70:	83 fb cc             	cmp    ebx,0xffffffcc
c0024e73:	7c 79                	jl     c0024eee <__muldf3+0x28e>
c0024e75:	ba 01 00 00 00       	mov    edx,0x1
c0024e7a:	29 da                	sub    edx,ebx
c0024e7c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024e82:	83 fa 1f             	cmp    edx,0x1f
c0024e85:	7e 30                	jle    c0024eb7 <__muldf3+0x257>
c0024e87:	83 fa 20             	cmp    edx,0x20
c0024e8a:	75 0b                	jne    c0024e97 <__muldf3+0x237>
c0024e8c:	31 c0                	xor    eax,eax
c0024e8e:	85 ff                	test   edi,edi
c0024e90:	0f 95 c0             	setne  al
c0024e93:	89 c7                	mov    edi,eax
c0024e95:	eb 1a                	jmp    c0024eb1 <__muldf3+0x251>
c0024e97:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0024e9a:	89 f0                	mov    eax,esi
c0024e9c:	d3 e0                	shl    eax,cl
c0024e9e:	09 f8                	or     eax,edi
c0024ea0:	0f 95 c0             	setne  al
c0024ea3:	0f b6 c0             	movzx  eax,al
c0024ea6:	89 c7                	mov    edi,eax
c0024ea8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024ead:	29 d9                	sub    ecx,ebx
c0024eaf:	d3 ee                	shr    esi,cl
c0024eb1:	09 f7                	or     edi,esi
c0024eb3:	31 db                	xor    ebx,ebx
c0024eb5:	eb 3b                	jmp    c0024ef2 <__muldf3+0x292>
c0024eb7:	83 c3 1f             	add    ebx,0x1f
c0024eba:	89 f0                	mov    eax,esi
c0024ebc:	88 d9                	mov    cl,bl
c0024ebe:	d3 e0                	shl    eax,cl
c0024ec0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024ec3:	89 f8                	mov    eax,edi
c0024ec5:	88 d1                	mov    cl,dl
c0024ec7:	d3 e8                	shr    eax,cl
c0024ec9:	89 c1                	mov    ecx,eax
c0024ecb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024ece:	09 c8                	or     eax,ecx
c0024ed0:	88 d9                	mov    cl,bl
c0024ed2:	d3 e7                	shl    edi,cl
c0024ed4:	31 db                	xor    ebx,ebx
c0024ed6:	85 ff                	test   edi,edi
c0024ed8:	0f 95 c3             	setne  bl
c0024edb:	89 df                	mov    edi,ebx
c0024edd:	09 c7                	or     edi,eax
c0024edf:	88 d1                	mov    cl,dl
c0024ee1:	d3 ee                	shr    esi,cl
c0024ee3:	31 db                	xor    ebx,ebx
c0024ee5:	eb 0d                	jmp    c0024ef4 <__muldf3+0x294>
c0024ee7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0024eec:	eb 02                	jmp    c0024ef0 <__muldf3+0x290>
c0024eee:	31 db                	xor    ebx,ebx
c0024ef0:	31 ff                	xor    edi,edi
c0024ef2:	31 f6                	xor    esi,esi
c0024ef4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024ef7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0024efa:	25 00 f8 ff ff       	and    eax,0xfffff800
c0024eff:	09 c3                	or     ebx,eax
c0024f01:	c1 e3 14             	shl    ebx,0x14
c0024f04:	89 f0                	mov    eax,esi
c0024f06:	c1 e8 0b             	shr    eax,0xb
c0024f09:	09 c3                	or     ebx,eax
c0024f0b:	89 f8                	mov    eax,edi
c0024f0d:	c1 e8 0b             	shr    eax,0xb
c0024f10:	c1 e6 15             	shl    esi,0x15
c0024f13:	09 c6                	or     esi,eax
c0024f15:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0024f1b:	0f 95 c1             	setne  cl
c0024f1e:	09 c8                	or     eax,ecx
c0024f20:	83 e0 01             	and    eax,0x1
c0024f23:	c1 ef 0a             	shr    edi,0xa
c0024f26:	21 c7                	and    edi,eax
c0024f28:	01 f7                	add    edi,esi
c0024f2a:	83 d3 00             	adc    ebx,0x0
c0024f2d:	89 da                	mov    edx,ebx
c0024f2f:	eb 03                	jmp    c0024f34 <__muldf3+0x2d4>
c0024f31:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024f34:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024f37:	89 f8                	mov    eax,edi
c0024f39:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024f3c:	83 c4 24             	add    esp,0x24
c0024f3f:	5b                   	pop    ebx
c0024f40:	5e                   	pop    esi
c0024f41:	5f                   	pop    edi
c0024f42:	5d                   	pop    ebp
c0024f43:	c3                   	ret    

c0024f44 <__divdf3>:
c0024f44:	55                   	push   ebp
c0024f45:	89 e5                	mov    ebp,esp
c0024f47:	57                   	push   edi
c0024f48:	56                   	push   esi
c0024f49:	53                   	push   ebx
c0024f4a:	83 ec 2c             	sub    esp,0x2c
c0024f4d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024f50:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024f53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024f56:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024f59:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024f5c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024f5f:	89 ce                	mov    esi,ecx
c0024f61:	89 c8                	mov    eax,ecx
c0024f63:	c1 f8 14             	sar    eax,0x14
c0024f66:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024f69:	89 f8                	mov    eax,edi
c0024f6b:	89 fb                	mov    ebx,edi
c0024f6d:	c1 e3 0b             	shl    ebx,0xb
c0024f70:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024f73:	c1 e6 0b             	shl    esi,0xb
c0024f76:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0024f7c:	c1 e8 15             	shr    eax,0x15
c0024f7f:	09 c6                	or     esi,eax
c0024f81:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024f84:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024f87:	89 c2                	mov    edx,eax
c0024f89:	c1 fa 14             	sar    edx,0x14
c0024f8c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0024f8f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024f92:	89 de                	mov    esi,ebx
c0024f94:	c1 e6 0b             	shl    esi,0xb
c0024f97:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024f9a:	c1 e0 0b             	shl    eax,0xb
c0024f9d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024fa2:	c1 eb 15             	shr    ebx,0x15
c0024fa5:	09 d8                	or     eax,ebx
c0024fa7:	89 c2                	mov    edx,eax
c0024fa9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024fac:	25 ff 07 00 00       	and    eax,0x7ff
c0024fb1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024fb4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024fb7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024fbd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0024fc0:	29 d8                	sub    eax,ebx
c0024fc2:	05 ff 03 00 00       	add    eax,0x3ff
c0024fc7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0024fca:	46                   	inc    esi
c0024fcb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024fd1:	0f 85 a5 00 00 00    	jne    c002507c <__divdf3+0x138>
c0024fd7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024fda:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0024fdd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0024fe1:	74 2a                	je     c002500d <__divdf3+0xc9>
c0024fe3:	85 f6                	test   esi,esi
c0024fe5:	0f 85 cc 02 00 00    	jne    c00252b7 <__divdf3+0x373>
c0024feb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024fee:	40                   	inc    eax
c0024fef:	a9 fe 07 00 00       	test   eax,0x7fe
c0024ff4:	75 26                	jne    c002501c <__divdf3+0xd8>
c0024ff6:	85 db                	test   ebx,ebx
c0024ff8:	74 22                	je     c002501c <__divdf3+0xd8>
c0024ffa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024ffd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025000:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025003:	09 d0                	or     eax,edx
c0025005:	0f 85 ac 02 00 00    	jne    c00252b7 <__divdf3+0x373>
c002500b:	eb 63                	jmp    c0025070 <__divdf3+0x12c>
c002500d:	85 f6                	test   esi,esi
c002500f:	75 22                	jne    c0025033 <__divdf3+0xef>
c0025011:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025014:	40                   	inc    eax
c0025015:	a9 fe 07 00 00       	test   eax,0x7fe
c002501a:	74 36                	je     c0025052 <__divdf3+0x10e>
c002501c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025020:	0f 89 91 02 00 00    	jns    c00252b7 <__divdf3+0x373>
c0025026:	89 f8                	mov    eax,edi
c0025028:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002502e:	e9 80 02 00 00       	jmp    c00252b3 <__divdf3+0x36f>
c0025033:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025036:	01 f6                	add    esi,esi
c0025038:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002503b:	c1 ef 1f             	shr    edi,0x1f
c002503e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025041:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0025044:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025047:	09 f7                	or     edi,esi
c0025049:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002504c:	78 2e                	js     c002507c <__divdf3+0x138>
c002504e:	89 c8                	mov    eax,ecx
c0025050:	eb e1                	jmp    c0025033 <__divdf3+0xef>
c0025052:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025055:	09 d0                	or     eax,edx
c0025057:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002505b:	74 0f                	je     c002506c <__divdf3+0x128>
c002505d:	85 c0                	test   eax,eax
c002505f:	74 bb                	je     c002501c <__divdf3+0xd8>
c0025061:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025064:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025067:	e9 4b 02 00 00       	jmp    c00252b7 <__divdf3+0x373>
c002506c:	85 c0                	test   eax,eax
c002506e:	75 ac                	jne    c002501c <__divdf3+0xd8>
c0025070:	31 ff                	xor    edi,edi
c0025072:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0025077:	e9 3b 02 00 00       	jmp    c00252b7 <__divdf3+0x373>
c002507c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002507f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0025082:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0025088:	75 6b                	jne    c00250f5 <__divdf3+0x1b1>
c002508a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002508d:	09 d6                	or     esi,edx
c002508f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0025093:	74 28                	je     c00250bd <__divdf3+0x179>
c0025095:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025098:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002509b:	85 f6                	test   esi,esi
c002509d:	0f 85 14 02 00 00    	jne    c00252b7 <__divdf3+0x373>
c00250a3:	31 ff                	xor    edi,edi
c00250a5:	31 c9                	xor    ecx,ecx
c00250a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00250aa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00250ad:	0f 89 04 02 00 00    	jns    c00252b7 <__divdf3+0x373>
c00250b3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00250b8:	e9 fa 01 00 00       	jmp    c00252b7 <__divdf3+0x373>
c00250bd:	85 f6                	test   esi,esi
c00250bf:	75 1b                	jne    c00250dc <__divdf3+0x198>
c00250c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00250c4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00250c7:	25 00 00 00 80       	and    eax,0x80000000
c00250cc:	31 c9                	xor    ecx,ecx
c00250ce:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00250d3:	89 cf                	mov    edi,ecx
c00250d5:	89 c1                	mov    ecx,eax
c00250d7:	e9 db 01 00 00       	jmp    c00252b7 <__divdf3+0x373>
c00250dc:	01 d2                	add    edx,edx
c00250de:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00250e1:	c1 eb 1f             	shr    ebx,0x1f
c00250e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00250e7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00250ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00250ed:	09 da                	or     edx,ebx
c00250ef:	78 04                	js     c00250f5 <__divdf3+0x1b1>
c00250f1:	89 c8                	mov    eax,ecx
c00250f3:	eb e7                	jmp    c00250dc <__divdf3+0x198>
c00250f5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00250f8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00250fe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025104:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0025107:	39 d6                	cmp    esi,edx
c0025109:	77 0d                	ja     c0025118 <__divdf3+0x1d4>
c002510b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002510e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0025111:	72 1b                	jb     c002512e <__divdf3+0x1ea>
c0025113:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0025116:	75 16                	jne    c002512e <__divdf3+0x1ea>
c0025118:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002511b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002511e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0025121:	83 de 00             	sbb    esi,0x0
c0025124:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0025127:	ba 01 00 00 00       	mov    edx,0x1
c002512c:	eb 02                	jmp    c0025130 <__divdf3+0x1ec>
c002512e:	31 d2                	xor    edx,edx
c0025130:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0025137:	31 ff                	xor    edi,edi
c0025139:	01 ff                	add    edi,edi
c002513b:	89 d1                	mov    ecx,edx
c002513d:	c1 e9 1f             	shr    ecx,0x1f
c0025140:	09 cf                	or     edi,ecx
c0025142:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0025145:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0025148:	89 da                	mov    edx,ebx
c002514a:	89 f3                	mov    ebx,esi
c002514c:	8d 34 36             	lea    esi,[esi+esi*1]
c002514f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025152:	c1 e9 1f             	shr    ecx,0x1f
c0025155:	09 ce                	or     esi,ecx
c0025157:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002515a:	01 c9                	add    ecx,ecx
c002515c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002515f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0025162:	85 db                	test   ebx,ebx
c0025164:	78 29                	js     c002518f <__divdf3+0x24b>
c0025166:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0025169:	72 07                	jb     c0025172 <__divdf3+0x22e>
c002516b:	75 3c                	jne    c00251a9 <__divdf3+0x265>
c002516d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025170:	77 37                	ja     c00251a9 <__divdf3+0x265>
c0025172:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025175:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0025178:	31 d2                	xor    edx,edx
c002517a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002517d:	0f 97 c2             	seta   dl
c0025180:	29 d6                	sub    esi,edx
c0025182:	89 d9                	mov    ecx,ebx
c0025184:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0025187:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002518a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002518d:	eb 17                	jmp    c00251a6 <__divdf3+0x262>
c002518f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025192:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025195:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025198:	0f 97 c1             	seta   cl
c002519b:	0f b6 c9             	movzx  ecx,cl
c002519e:	29 ce                	sub    esi,ecx
c00251a0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00251a3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00251a6:	83 ca 01             	or     edx,0x1
c00251a9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00251ac:	75 8b                	jne    c0025139 <__divdf3+0x1f5>
c00251ae:	c1 e7 09             	shl    edi,0x9
c00251b1:	89 d1                	mov    ecx,edx
c00251b3:	c1 e9 17             	shr    ecx,0x17
c00251b6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00251b9:	09 f3                	or     ebx,esi
c00251bb:	0f 95 c3             	setne  bl
c00251be:	0f b6 db             	movzx  ebx,bl
c00251c1:	c1 e2 09             	shl    edx,0x9
c00251c4:	09 d3                	or     ebx,edx
c00251c6:	89 ca                	mov    edx,ecx
c00251c8:	09 fa                	or     edx,edi
c00251ca:	78 0c                	js     c00251d8 <__divdf3+0x294>
c00251cc:	01 d2                	add    edx,edx
c00251ce:	89 d9                	mov    ecx,ebx
c00251d0:	c1 e9 1f             	shr    ecx,0x1f
c00251d3:	09 ca                	or     edx,ecx
c00251d5:	01 db                	add    ebx,ebx
c00251d7:	48                   	dec    eax
c00251d8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00251dd:	0f 8f 83 00 00 00    	jg     c0025266 <__divdf3+0x322>
c00251e3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00251e9:	85 c0                	test   eax,eax
c00251eb:	0f 8f 82 00 00 00    	jg     c0025273 <__divdf3+0x32f>
c00251f1:	83 f8 cc             	cmp    eax,0xffffffcc
c00251f4:	7c 77                	jl     c002526d <__divdf3+0x329>
c00251f6:	be 01 00 00 00       	mov    esi,0x1
c00251fb:	29 c6                	sub    esi,eax
c00251fd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025203:	83 fe 1f             	cmp    esi,0x1f
c0025206:	7e 2f                	jle    c0025237 <__divdf3+0x2f3>
c0025208:	83 fe 20             	cmp    esi,0x20
c002520b:	75 0a                	jne    c0025217 <__divdf3+0x2d3>
c002520d:	85 db                	test   ebx,ebx
c002520f:	0f 95 c3             	setne  bl
c0025212:	0f b6 db             	movzx  ebx,bl
c0025215:	eb 1a                	jmp    c0025231 <__divdf3+0x2ed>
c0025217:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002521a:	89 d7                	mov    edi,edx
c002521c:	d3 e7                	shl    edi,cl
c002521e:	89 f9                	mov    ecx,edi
c0025220:	09 d9                	or     ecx,ebx
c0025222:	0f 95 c3             	setne  bl
c0025225:	0f b6 db             	movzx  ebx,bl
c0025228:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002522d:	29 c1                	sub    ecx,eax
c002522f:	d3 ea                	shr    edx,cl
c0025231:	09 d3                	or     ebx,edx
c0025233:	31 c0                	xor    eax,eax
c0025235:	eb 3a                	jmp    c0025271 <__divdf3+0x32d>
c0025237:	83 c0 1f             	add    eax,0x1f
c002523a:	89 d7                	mov    edi,edx
c002523c:	88 c1                	mov    cl,al
c002523e:	d3 e7                	shl    edi,cl
c0025240:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025243:	89 df                	mov    edi,ebx
c0025245:	89 f1                	mov    ecx,esi
c0025247:	d3 ef                	shr    edi,cl
c0025249:	89 f9                	mov    ecx,edi
c002524b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002524e:	09 cf                	or     edi,ecx
c0025250:	88 c1                	mov    cl,al
c0025252:	d3 e3                	shl    ebx,cl
c0025254:	85 db                	test   ebx,ebx
c0025256:	0f 95 c3             	setne  bl
c0025259:	0f b6 db             	movzx  ebx,bl
c002525c:	09 fb                	or     ebx,edi
c002525e:	89 f1                	mov    ecx,esi
c0025260:	d3 ea                	shr    edx,cl
c0025262:	31 c0                	xor    eax,eax
c0025264:	eb 0d                	jmp    c0025273 <__divdf3+0x32f>
c0025266:	b8 ff 07 00 00       	mov    eax,0x7ff
c002526b:	eb 02                	jmp    c002526f <__divdf3+0x32b>
c002526d:	31 c0                	xor    eax,eax
c002526f:	31 db                	xor    ebx,ebx
c0025271:	31 d2                	xor    edx,edx
c0025273:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0025276:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0025279:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002527f:	09 c8                	or     eax,ecx
c0025281:	c1 e0 14             	shl    eax,0x14
c0025284:	89 d1                	mov    ecx,edx
c0025286:	c1 e9 0b             	shr    ecx,0xb
c0025289:	09 c8                	or     eax,ecx
c002528b:	89 c6                	mov    esi,eax
c002528d:	89 d9                	mov    ecx,ebx
c002528f:	c1 e9 0b             	shr    ecx,0xb
c0025292:	c1 e2 15             	shl    edx,0x15
c0025295:	09 ca                	or     edx,ecx
c0025297:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002529d:	0f 95 c0             	setne  al
c00252a0:	09 c1                	or     ecx,eax
c00252a2:	83 e1 01             	and    ecx,0x1
c00252a5:	c1 eb 0a             	shr    ebx,0xa
c00252a8:	21 cb                	and    ebx,ecx
c00252aa:	01 d3                	add    ebx,edx
c00252ac:	89 d8                	mov    eax,ebx
c00252ae:	83 d6 00             	adc    esi,0x0
c00252b1:	89 f2                	mov    edx,esi
c00252b3:	89 c7                	mov    edi,eax
c00252b5:	89 d1                	mov    ecx,edx
c00252b7:	89 f8                	mov    eax,edi
c00252b9:	89 ca                	mov    edx,ecx
c00252bb:	83 c4 2c             	add    esp,0x2c
c00252be:	5b                   	pop    ebx
c00252bf:	5e                   	pop    esi
c00252c0:	5f                   	pop    edi
c00252c1:	5d                   	pop    ebp
c00252c2:	c3                   	ret    

c00252c3 <__floatsidf>:
c00252c3:	55                   	push   ebp
c00252c4:	89 e5                	mov    ebp,esp
c00252c6:	56                   	push   esi
c00252c7:	53                   	push   ebx
c00252c8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00252cb:	85 db                	test   ebx,ebx
c00252cd:	7e 15                	jle    c00252e4 <__floatsidf+0x21>
c00252cf:	0f bd cb             	bsr    ecx,ebx
c00252d2:	83 f1 1f             	xor    ecx,0x1f
c00252d5:	d3 e3                	shl    ebx,cl
c00252d7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00252dd:	b8 1e 04 00 00       	mov    eax,0x41e
c00252e2:	eb 21                	jmp    c0025305 <__floatsidf+0x42>
c00252e4:	b8 00 00 00 00       	mov    eax,0x0
c00252e9:	ba 00 00 00 00       	mov    edx,0x0
c00252ee:	74 2a                	je     c002531a <__floatsidf+0x57>
c00252f0:	f7 db                	neg    ebx
c00252f2:	0f bd cb             	bsr    ecx,ebx
c00252f5:	83 f1 1f             	xor    ecx,0x1f
c00252f8:	d3 e3                	shl    ebx,cl
c00252fa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025300:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0025305:	29 c8                	sub    eax,ecx
c0025307:	c1 e0 14             	shl    eax,0x14
c002530a:	89 c1                	mov    ecx,eax
c002530c:	89 de                	mov    esi,ebx
c002530e:	c1 ee 0b             	shr    esi,0xb
c0025311:	09 f1                	or     ecx,esi
c0025313:	89 ca                	mov    edx,ecx
c0025315:	c1 e3 15             	shl    ebx,0x15
c0025318:	89 d8                	mov    eax,ebx
c002531a:	5b                   	pop    ebx
c002531b:	5e                   	pop    esi
c002531c:	5d                   	pop    ebp
c002531d:	c3                   	ret    

c002531e <__floatunsidf>:
c002531e:	55                   	push   ebp
c002531f:	89 e5                	mov    ebp,esp
c0025321:	56                   	push   esi
c0025322:	53                   	push   ebx
c0025323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025326:	85 db                	test   ebx,ebx
c0025328:	74 2a                	je     c0025354 <__floatunsidf+0x36>
c002532a:	0f bd cb             	bsr    ecx,ebx
c002532d:	83 f1 1f             	xor    ecx,0x1f
c0025330:	d3 e3                	shl    ebx,cl
c0025332:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025338:	b8 1e 04 00 00       	mov    eax,0x41e
c002533d:	29 c8                	sub    eax,ecx
c002533f:	c1 e0 14             	shl    eax,0x14
c0025342:	89 c1                	mov    ecx,eax
c0025344:	89 de                	mov    esi,ebx
c0025346:	c1 ee 0b             	shr    esi,0xb
c0025349:	09 f1                	or     ecx,esi
c002534b:	89 ca                	mov    edx,ecx
c002534d:	c1 e3 15             	shl    ebx,0x15
c0025350:	89 d8                	mov    eax,ebx
c0025352:	eb 04                	jmp    c0025358 <__floatunsidf+0x3a>
c0025354:	31 c0                	xor    eax,eax
c0025356:	31 d2                	xor    edx,edx
c0025358:	5b                   	pop    ebx
c0025359:	5e                   	pop    esi
c002535a:	5d                   	pop    ebp
c002535b:	c3                   	ret    

c002535c <__fixdfsi>:
c002535c:	55                   	push   ebp
c002535d:	89 e5                	mov    ebp,esp
c002535f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025362:	89 d1                	mov    ecx,edx
c0025364:	c1 e1 0b             	shl    ecx,0xb
c0025367:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002536d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025370:	c1 e8 15             	shr    eax,0x15
c0025373:	09 c1                	or     ecx,eax
c0025375:	c1 fa 14             	sar    edx,0x14
c0025378:	78 1f                	js     c0025399 <__fixdfsi+0x3d>
c002537a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0025380:	31 c0                	xor    eax,eax
c0025382:	83 fa 1e             	cmp    edx,0x1e
c0025385:	77 40                	ja     c00253c7 <__fixdfsi+0x6b>
c0025387:	89 c8                	mov    eax,ecx
c0025389:	0d 00 00 00 80       	or     eax,0x80000000
c002538e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025393:	29 d1                	sub    ecx,edx
c0025395:	d3 e8                	shr    eax,cl
c0025397:	eb 2e                	jmp    c00253c7 <__fixdfsi+0x6b>
c0025399:	31 c0                	xor    eax,eax
c002539b:	81 c2 01 04 00 00    	add    edx,0x401
c00253a1:	78 24                	js     c00253c7 <__fixdfsi+0x6b>
c00253a3:	83 fa 1e             	cmp    edx,0x1e
c00253a6:	7e 09                	jle    c00253b1 <__fixdfsi+0x55>
c00253a8:	83 fa 1f             	cmp    edx,0x1f
c00253ab:	75 18                	jne    c00253c5 <__fixdfsi+0x69>
c00253ad:	85 c9                	test   ecx,ecx
c00253af:	75 14                	jne    c00253c5 <__fixdfsi+0x69>
c00253b1:	89 c8                	mov    eax,ecx
c00253b3:	0d 00 00 00 80       	or     eax,0x80000000
c00253b8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00253bd:	29 d1                	sub    ecx,edx
c00253bf:	d3 e8                	shr    eax,cl
c00253c1:	f7 d8                	neg    eax
c00253c3:	eb 02                	jmp    c00253c7 <__fixdfsi+0x6b>
c00253c5:	31 c0                	xor    eax,eax
c00253c7:	5d                   	pop    ebp
c00253c8:	c3                   	ret    

c00253c9 <__fixunsdfsi>:
c00253c9:	55                   	push   ebp
c00253ca:	89 e5                	mov    ebp,esp
c00253cc:	53                   	push   ebx
c00253cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00253d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00253d3:	89 d3                	mov    ebx,edx
c00253d5:	c1 fb 14             	sar    ebx,0x14
c00253d8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00253de:	31 c0                	xor    eax,eax
c00253e0:	83 fb 1f             	cmp    ebx,0x1f
c00253e3:	77 1d                	ja     c0025402 <__fixunsdfsi+0x39>
c00253e5:	89 d0                	mov    eax,edx
c00253e7:	c1 e0 0b             	shl    eax,0xb
c00253ea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00253ef:	c1 e9 15             	shr    ecx,0x15
c00253f2:	09 c8                	or     eax,ecx
c00253f4:	0d 00 00 00 80       	or     eax,0x80000000
c00253f9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00253fe:	29 d9                	sub    ecx,ebx
c0025400:	d3 e8                	shr    eax,cl
c0025402:	5b                   	pop    ebx
c0025403:	5d                   	pop    ebp
c0025404:	c3                   	ret    

c0025405 <__cmpdf2>:
c0025405:	55                   	push   ebp
c0025406:	89 e5                	mov    ebp,esp
c0025408:	57                   	push   edi
c0025409:	56                   	push   esi
c002540a:	53                   	push   ebx
c002540b:	83 ec 0c             	sub    esp,0xc
c002540e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0025411:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025414:	89 ca                	mov    edx,ecx
c0025416:	c1 ea 14             	shr    edx,0x14
c0025419:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002541f:	89 cb                	mov    ebx,ecx
c0025421:	c1 fb 1f             	sar    ebx,0x1f
c0025424:	31 da                	xor    edx,ebx
c0025426:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025429:	89 df                	mov    edi,ebx
c002542b:	c1 e7 0b             	shl    edi,0xb
c002542e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025431:	c1 e1 0b             	shl    ecx,0xb
c0025434:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002543a:	c1 eb 15             	shr    ebx,0x15
c002543d:	09 d9                	or     ecx,ebx
c002543f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0025442:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0025445:	89 ce                	mov    esi,ecx
c0025447:	c1 ee 14             	shr    esi,0x14
c002544a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025450:	89 cb                	mov    ebx,ecx
c0025452:	c1 fb 1f             	sar    ebx,0x1f
c0025455:	31 de                	xor    esi,ebx
c0025457:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002545a:	89 df                	mov    edi,ebx
c002545c:	c1 e7 0b             	shl    edi,0xb
c002545f:	c1 e1 0b             	shl    ecx,0xb
c0025462:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025468:	c1 eb 15             	shr    ebx,0x15
c002546b:	09 d9                	or     ecx,ebx
c002546d:	89 d3                	mov    ebx,edx
c002546f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0025475:	43                   	inc    ebx
c0025476:	83 fb 01             	cmp    ebx,0x1
c0025479:	77 08                	ja     c0025483 <__cmpdf2+0x7e>
c002547b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002547e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0025481:	75 68                	jne    c00254eb <__cmpdf2+0xe6>
c0025483:	89 f3                	mov    ebx,esi
c0025485:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002548b:	43                   	inc    ebx
c002548c:	83 fb 01             	cmp    ebx,0x1
c002548f:	77 06                	ja     c0025497 <__cmpdf2+0x92>
c0025491:	89 fb                	mov    ebx,edi
c0025493:	09 cb                	or     ebx,ecx
c0025495:	75 54                	jne    c00254eb <__cmpdf2+0xe6>
c0025497:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002549a:	09 f8                	or     eax,edi
c002549c:	09 c8                	or     eax,ecx
c002549e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00254a1:	75 12                	jne    c00254b5 <__cmpdf2+0xb0>
c00254a3:	8d 42 01             	lea    eax,[edx+0x1]
c00254a6:	83 f8 01             	cmp    eax,0x1
c00254a9:	77 0a                	ja     c00254b5 <__cmpdf2+0xb0>
c00254ab:	8d 5e 01             	lea    ebx,[esi+0x1]
c00254ae:	31 c0                	xor    eax,eax
c00254b0:	83 fb 01             	cmp    ebx,0x1
c00254b3:	76 36                	jbe    c00254eb <__cmpdf2+0xe6>
c00254b5:	b8 01 00 00 00       	mov    eax,0x1
c00254ba:	39 f2                	cmp    edx,esi
c00254bc:	7f 2d                	jg     c00254eb <__cmpdf2+0xe6>
c00254be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00254c3:	7c 26                	jl     c00254eb <__cmpdf2+0xe6>
c00254c5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00254c8:	77 07                	ja     c00254d1 <__cmpdf2+0xcc>
c00254ca:	72 16                	jb     c00254e2 <__cmpdf2+0xdd>
c00254cc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00254cf:	76 0a                	jbe    c00254db <__cmpdf2+0xd6>
c00254d1:	89 d0                	mov    eax,edx
c00254d3:	c1 f8 1f             	sar    eax,0x1f
c00254d6:	83 c8 01             	or     eax,0x1
c00254d9:	eb 10                	jmp    c00254eb <__cmpdf2+0xe6>
c00254db:	b8 00 00 00 00       	mov    eax,0x0
c00254e0:	73 09                	jae    c00254eb <__cmpdf2+0xe6>
c00254e2:	89 d0                	mov    eax,edx
c00254e4:	c1 f8 1f             	sar    eax,0x1f
c00254e7:	83 e0 02             	and    eax,0x2
c00254ea:	48                   	dec    eax
c00254eb:	83 c4 0c             	add    esp,0xc
c00254ee:	5b                   	pop    ebx
c00254ef:	5e                   	pop    esi
c00254f0:	5f                   	pop    edi
c00254f1:	5d                   	pop    ebp
c00254f2:	c3                   	ret    

c00254f3 <__eqdf2>:
c00254f3:	55                   	push   ebp
c00254f4:	89 e5                	mov    ebp,esp
c00254f6:	50                   	push   eax
c00254f7:	6a 01                	push   0x1
c00254f9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00254fc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00254ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025502:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025505:	e8 fb fe ff ff       	call   c0025405 <__cmpdf2>
c002550a:	83 c4 18             	add    esp,0x18
c002550d:	c9                   	leave  
c002550e:	c3                   	ret    

c002550f <__nedf2>:
c002550f:	eb e2                	jmp    c00254f3 <__eqdf2>

c0025511 <__gtdf2>:
c0025511:	55                   	push   ebp
c0025512:	89 e5                	mov    ebp,esp
c0025514:	50                   	push   eax
c0025515:	6a ff                	push   0xffffffff
c0025517:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002551a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002551d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025520:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025523:	e8 dd fe ff ff       	call   c0025405 <__cmpdf2>
c0025528:	83 c4 18             	add    esp,0x18
c002552b:	c9                   	leave  
c002552c:	c3                   	ret    

c002552d <__gedf2>:
c002552d:	eb e2                	jmp    c0025511 <__gtdf2>

c002552f <__ltdf2>:
c002552f:	eb c2                	jmp    c00254f3 <__eqdf2>

c0025531 <__ledf2>:
c0025531:	eb c0                	jmp    c00254f3 <__eqdf2>

c0025533 <__truncdfsf2>:
c0025533:	55                   	push   ebp
c0025534:	89 e5                	mov    ebp,esp
c0025536:	57                   	push   edi
c0025537:	56                   	push   esi
c0025538:	53                   	push   ebx
c0025539:	83 ec 0c             	sub    esp,0xc
c002553c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002553f:	89 d1                	mov    ecx,edx
c0025541:	c1 f9 14             	sar    ecx,0x14
c0025544:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025547:	89 df                	mov    edi,ebx
c0025549:	c1 e7 0b             	shl    edi,0xb
c002554c:	89 d0                	mov    eax,edx
c002554e:	c1 e0 0b             	shl    eax,0xb
c0025551:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025556:	c1 eb 15             	shr    ebx,0x15
c0025559:	09 d8                	or     eax,ebx
c002555b:	89 cb                	mov    ebx,ecx
c002555d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025563:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0025569:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002556f:	0f 86 9e 00 00 00    	jbe    c0025613 <__truncdfsf2+0xe0>
c0025575:	85 db                	test   ebx,ebx
c0025577:	75 0a                	jne    c0025583 <__truncdfsf2+0x50>
c0025579:	c1 fa 17             	sar    edx,0x17
c002557c:	30 d2                	xor    dl,dl
c002557e:	e9 84 00 00 00       	jmp    c0025607 <__truncdfsf2+0xd4>
c0025583:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0025589:	83 fe 83             	cmp    esi,0xffffff83
c002558c:	7d 4b                	jge    c00255d9 <__truncdfsf2+0xa6>
c002558e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0025593:	29 f1                	sub    ecx,esi
c0025595:	83 f9 1f             	cmp    ecx,0x1f
c0025598:	7f 6b                	jg     c0025605 <__truncdfsf2+0xd2>
c002559a:	0d 00 00 00 80       	or     eax,0x80000000
c002559f:	89 c3                	mov    ebx,eax
c00255a1:	d3 eb                	shr    ebx,cl
c00255a3:	be 01 00 00 00       	mov    esi,0x1
c00255a8:	d3 e6                	shl    esi,cl
c00255aa:	4e                   	dec    esi
c00255ab:	21 f0                	and    eax,esi
c00255ad:	09 f8                	or     eax,edi
c00255af:	0f 95 c0             	setne  al
c00255b2:	0f b6 c0             	movzx  eax,al
c00255b5:	09 c3                	or     ebx,eax
c00255b7:	89 d9                	mov    ecx,ebx
c00255b9:	c1 e9 08             	shr    ecx,0x8
c00255bc:	f6 c3 7f             	test   bl,0x7f
c00255bf:	0f 95 c0             	setne  al
c00255c2:	09 c8                	or     eax,ecx
c00255c4:	83 e0 01             	and    eax,0x1
c00255c7:	c1 eb 07             	shr    ebx,0x7
c00255ca:	21 c3                	and    ebx,eax
c00255cc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00255d2:	09 d1                	or     ecx,edx
c00255d4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00255d7:	eb 76                	jmp    c002564f <__truncdfsf2+0x11c>
c00255d9:	83 c6 80             	add    esi,0xffffff80
c00255dc:	7e 1d                	jle    c00255fb <__truncdfsf2+0xc8>
c00255de:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00255e4:	75 0b                	jne    c00255f1 <__truncdfsf2+0xbe>
c00255e6:	09 f8                	or     eax,edi
c00255e8:	74 09                	je     c00255f3 <__truncdfsf2+0xc0>
c00255ea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00255ef:	eb 02                	jmp    c00255f3 <__truncdfsf2+0xc0>
c00255f1:	31 c0                	xor    eax,eax
c00255f3:	c1 fa 17             	sar    edx,0x17
c00255f6:	80 ca ff             	or     dl,0xff
c00255f9:	eb 0e                	jmp    c0025609 <__truncdfsf2+0xd6>
c00255fb:	c1 fa 1f             	sar    edx,0x1f
c00255fe:	c1 e2 08             	shl    edx,0x8
c0025601:	09 ca                	or     edx,ecx
c0025603:	eb 04                	jmp    c0025609 <__truncdfsf2+0xd6>
c0025605:	31 d2                	xor    edx,edx
c0025607:	31 c0                	xor    eax,eax
c0025609:	c1 e2 17             	shl    edx,0x17
c002560c:	c1 e8 08             	shr    eax,0x8
c002560f:	09 d0                	or     eax,edx
c0025611:	eb 3c                	jmp    c002564f <__truncdfsf2+0x11c>
c0025613:	81 e9 80 03 00 00    	sub    ecx,0x380
c0025619:	89 ca                	mov    edx,ecx
c002561b:	c1 fa 0b             	sar    edx,0xb
c002561e:	c1 e2 08             	shl    edx,0x8
c0025621:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025624:	31 db                	xor    ebx,ebx
c0025626:	85 ff                	test   edi,edi
c0025628:	0f 95 c3             	setne  bl
c002562b:	09 d8                	or     eax,ebx
c002562d:	89 c3                	mov    ebx,eax
c002562f:	c1 eb 08             	shr    ebx,0x8
c0025632:	a8 7f                	test   al,0x7f
c0025634:	0f 95 c2             	setne  dl
c0025637:	89 d6                	mov    esi,edx
c0025639:	09 de                	or     esi,ebx
c002563b:	83 e6 01             	and    esi,0x1
c002563e:	c1 e8 07             	shr    eax,0x7
c0025641:	21 f0                	and    eax,esi
c0025643:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025646:	09 ca                	or     edx,ecx
c0025648:	c1 e2 17             	shl    edx,0x17
c002564b:	09 da                	or     edx,ebx
c002564d:	01 d0                	add    eax,edx
c002564f:	83 c4 0c             	add    esp,0xc
c0025652:	5b                   	pop    ebx
c0025653:	5e                   	pop    esi
c0025654:	5f                   	pop    edi
c0025655:	5d                   	pop    ebp
c0025656:	c3                   	ret    

c0025657 <__extendsfdf2>:
c0025657:	55                   	push   ebp
c0025658:	89 e5                	mov    ebp,esp
c002565a:	57                   	push   edi
c002565b:	56                   	push   esi
c002565c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002565f:	89 d1                	mov    ecx,edx
c0025661:	c1 f9 17             	sar    ecx,0x17
c0025664:	c1 e2 08             	shl    edx,0x8
c0025667:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002566d:	89 c8                	mov    eax,ecx
c002566f:	80 e4 f8             	and    ah,0xf8
c0025672:	8d 71 01             	lea    esi,[ecx+0x1]
c0025675:	81 e6 fe 00 00 00    	and    esi,0xfe
c002567b:	75 27                	jne    c00256a4 <__extendsfdf2+0x4d>
c002567d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0025683:	75 18                	jne    c002569d <__extendsfdf2+0x46>
c0025685:	85 d2                	test   edx,edx
c0025687:	74 20                	je     c00256a9 <__extendsfdf2+0x52>
c0025689:	41                   	inc    ecx
c002568a:	01 d2                	add    edx,edx
c002568c:	79 fb                	jns    c0025689 <__extendsfdf2+0x32>
c002568e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025694:	29 c8                	sub    eax,ecx
c0025696:	05 81 03 00 00       	add    eax,0x381
c002569b:	eb 0c                	jmp    c00256a9 <__extendsfdf2+0x52>
c002569d:	05 00 07 00 00       	add    eax,0x700
c00256a2:	eb 05                	jmp    c00256a9 <__extendsfdf2+0x52>
c00256a4:	05 80 03 00 00       	add    eax,0x380
c00256a9:	c1 e0 14             	shl    eax,0x14
c00256ac:	89 c1                	mov    ecx,eax
c00256ae:	89 d0                	mov    eax,edx
c00256b0:	c1 e8 0b             	shr    eax,0xb
c00256b3:	09 c1                	or     ecx,eax
c00256b5:	c1 e2 15             	shl    edx,0x15
c00256b8:	89 d0                	mov    eax,edx
c00256ba:	89 ca                	mov    edx,ecx
c00256bc:	5e                   	pop    esi
c00256bd:	5f                   	pop    edi
c00256be:	5d                   	pop    ebp
c00256bf:	c3                   	ret    

c00256c0 <fabs>:
c00256c0:	83 ec 0c             	sub    esp,0xc
c00256c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00256ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00256d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00256d7:	dd 04 24             	fld    QWORD PTR [esp]
c00256da:	83 c4 0c             	add    esp,0xc
c00256dd:	c3                   	ret    
c00256de:	66 90                	xchg   ax,ax

c00256e0 <lrint>:
c00256e0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00256e4:	83 ec 04             	sub    esp,0x4
c00256e7:	db 1c 24             	fistp  DWORD PTR [esp]
c00256ea:	58                   	pop    eax
c00256eb:	c3                   	ret    

c00256ec <lrintf>:
c00256ec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00256f0:	83 ec 04             	sub    esp,0x4
c00256f3:	db 1c 24             	fistp  DWORD PTR [esp]
c00256f6:	58                   	pop    eax
c00256f7:	c3                   	ret    

Disassembly of section .init:

c00256f8 <_init>:
c00256f8:	55                   	push   ebp
c00256f9:	89 e5                	mov    ebp,esp
c00256fb:	e8 18 aa fd ff       	call   c0000118 <frame_dummy>
c0025700:	e8 63 e0 ff ff       	call   c0023768 <__do_global_ctors_aux>
c0025705:	5d                   	pop    ebp
c0025706:	c3                   	ret    

Disassembly of section .fini:

c0025707 <_fini>:
c0025707:	55                   	push   ebp
c0025708:	89 e5                	mov    ebp,esp
c002570a:	e8 99 a9 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002570f:	5d                   	pop    ebp
c0025710:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025712 <Computer::~Computer()>:
c0025712:	83 ec 0c             	sub    esp,0xc
c0025715:	ba 10 71 02 c0       	mov    edx,0xc0027110
c002571a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002571e:	89 10                	mov    DWORD PTR [eax],edx
c0025720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025724:	83 ec 0c             	sub    esp,0xc
c0025727:	50                   	push   eax
c0025728:	e8 d9 e1 fe ff       	call   c0013906 <Device::~Device()>
c002572d:	83 c4 10             	add    esp,0x10
c0025730:	90                   	nop
c0025731:	83 c4 0c             	add    esp,0xc
c0025734:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025736 <Computer::~Computer()>:
c0025736:	83 ec 0c             	sub    esp,0xc
c0025739:	83 ec 0c             	sub    esp,0xc
c002573c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025740:	e8 cd ff ff ff       	call   c0025712 <Computer::~Computer()>
c0025745:	83 c4 10             	add    esp,0x10
c0025748:	83 ec 08             	sub    esp,0x8
c002574b:	68 ec 01 00 00       	push   0x1ec
c0025750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025754:	e8 0c ce fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025759:	83 c4 10             	add    esp,0x10
c002575c:	83 c4 0c             	add    esp,0xc
c002575f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025760 <idleCommon()>:
c0025760:	83 ec 0c             	sub    esp,0xc
c0025763:	e8 ad 66 ff ff       	call   c001be15 <lockScheduler()>
c0025768:	e8 e3 69 ff ff       	call   c001c150 <schedule()>
c002576d:	83 c4 0c             	add    esp,0xc
c0025770:	e9 a2 66 ff ff       	jmp    c001be17 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025776 <LinkedList<UnixFile>::~LinkedList()>:
c0025776:	90                   	nop
c0025777:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025778 <LinkedList<UnixFile>::LinkedList()>:
c0025778:	83 ec 0c             	sub    esp,0xc
c002577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002577f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025789:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025794:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002579b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002579f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00257a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00257b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00257bb:	83 ec 0c             	sub    esp,0xc
c00257be:	68 86 73 02 c0       	push   0xc0027386
c00257c3:	e8 7d ce fe ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c00257c8:	83 c4 10             	add    esp,0x10
c00257cb:	90                   	nop
c00257cc:	83 c4 0c             	add    esp,0xc
c00257cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00257d0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00257d0:	83 ec 0c             	sub    esp,0xc
c00257d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00257d8:	75 10                	jne    c00257ea <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00257da:	83 ec 0c             	sub    esp,0xc
c00257dd:	68 a0 73 02 c0       	push   0xc00273a0
c00257e2:	e8 22 36 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c00257e7:	83 c4 10             	add    esp,0x10
c00257ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00257f0:	85 c0                	test   eax,eax
c00257f2:	74 34                	je     c0025828 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00257f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00257fb:	85 c0                	test   eax,eax
c00257fd:	74 29                	je     c0025828 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00257ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025803:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025806:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002580a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002580d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025811:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025815:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002581c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002581f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025826:	eb 65                	jmp    c002588d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002582c:	8b 00                	mov    eax,DWORD PTR [eax]
c002582e:	85 c0                	test   eax,eax
c0025830:	75 4b                	jne    c002587d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025839:	85 c0                	test   eax,eax
c002583b:	75 40                	jne    c002587d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002583d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025841:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025845:	89 10                	mov    DWORD PTR [eax],edx
c0025847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002584b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002584f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025856:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025859:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025864:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025867:	85 c0                	test   eax,eax
c0025869:	74 22                	je     c002588d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002586b:	83 ec 0c             	sub    esp,0xc
c002586e:	68 c2 73 02 c0       	push   0xc00273c2
c0025873:	e8 91 35 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025878:	83 c4 10             	add    esp,0x10
c002587b:	eb 10                	jmp    c002588d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002587d:	83 ec 0c             	sub    esp,0xc
c0025880:	68 cc 73 02 c0       	push   0xc00273cc
c0025885:	e8 7f 35 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c002588a:	83 c4 10             	add    esp,0x10
c002588d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025891:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025894:	8d 50 01             	lea    edx,[eax+0x1]
c0025897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002589b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002589e:	90                   	nop
c002589f:	83 c4 0c             	add    esp,0xc
c00258a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00258a4 <LinkedList<UnixFile>::getFirstElement()>:
c00258a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00258a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00258aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00258ac <LinkedList<UnixFile>::removeFirst()>:
c00258ac:	83 ec 0c             	sub    esp,0xc
c00258af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00258b5:	85 c0                	test   eax,eax
c00258b7:	75 12                	jne    c00258cb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00258b9:	83 ec 0c             	sub    esp,0xc
c00258bc:	68 d8 73 02 c0       	push   0xc00273d8
c00258c1:	e8 43 35 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c00258c6:	83 c4 10             	add    esp,0x10
c00258c9:	eb 7e                	jmp    c0025949 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00258cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00258d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00258d5:	85 c0                	test   eax,eax
c00258d7:	74 10                	je     c00258e9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00258d9:	83 ec 0c             	sub    esp,0xc
c00258dc:	68 23 74 02 c0       	push   0xc0027423
c00258e1:	e8 23 35 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c00258e6:	83 c4 10             	add    esp,0x10
c00258e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00258ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00258f2:	85 c0                	test   eax,eax
c00258f4:	75 33                	jne    c0025929 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00258f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025904:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002590b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002590f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025912:	83 f8 01             	cmp    eax,0x1
c0025915:	74 21                	je     c0025938 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025917:	83 ec 0c             	sub    esp,0xc
c002591a:	68 fc 73 02 c0       	push   0xc00273fc
c002591f:	e8 e5 34 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025924:	83 c4 10             	add    esp,0x10
c0025927:	eb 0f                	jmp    c0025938 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002592d:	8b 00                	mov    eax,DWORD PTR [eax]
c002592f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025936:	89 10                	mov    DWORD PTR [eax],edx
c0025938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002593c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002593f:	8d 50 ff             	lea    edx,[eax-0x1]
c0025942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025946:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025949:	83 c4 0c             	add    esp,0xc
c002594c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002594e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002594e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025952:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025955:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025956 <DriverlessDevice::~DriverlessDevice()>:
c0025956:	ba e4 7a 02 c0       	mov    edx,0xc0027ae4
c002595b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002595f:	89 10                	mov    DWORD PTR [eax],edx
c0025961:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025965:	50                   	push   eax
c0025966:	e8 9b df fe ff       	call   c0013906 <Device::~Device()>
c002596b:	83 c4 04             	add    esp,0x4
c002596e:	90                   	nop
c002596f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0025970 <DriverlessDevice::~DriverlessDevice()>:
c0025970:	83 ec 0c             	sub    esp,0xc
c0025973:	83 ec 0c             	sub    esp,0xc
c0025976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002597a:	e8 d7 ff ff ff       	call   c0025956 <DriverlessDevice::~DriverlessDevice()>
c002597f:	83 c4 10             	add    esp,0x10
c0025982:	83 ec 08             	sub    esp,0x8
c0025985:	68 58 01 00 00       	push   0x158
c002598a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002598e:	e8 d2 cb fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025993:	83 c4 10             	add    esp,0x10
c0025996:	83 c4 0c             	add    esp,0xc
c0025999:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002599a <LinkedList<Device>::addElement(Device*)>:
c002599a:	83 ec 0c             	sub    esp,0xc
c002599d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00259a2:	75 10                	jne    c00259b4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00259a4:	83 ec 0c             	sub    esp,0xc
c00259a7:	68 a0 73 02 c0       	push   0xc00273a0
c00259ac:	e8 58 34 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c00259b1:	83 c4 10             	add    esp,0x10
c00259b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ba:	85 c0                	test   eax,eax
c00259bc:	74 3a                	je     c00259f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00259be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00259c5:	85 c0                	test   eax,eax
c00259c7:	74 2f                	je     c00259f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00259c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00259d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00259d4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00259da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00259e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00259e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00259ec:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00259f6:	eb 68                	jmp    c0025a60 <LinkedList<Device>::addElement(Device*)+0xc6>
c00259f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00259fe:	85 c0                	test   eax,eax
c0025a00:	75 4e                	jne    c0025a50 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a09:	85 c0                	test   eax,eax
c0025a0b:	75 43                	jne    c0025a50 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a15:	89 10                	mov    DWORD PTR [eax],edx
c0025a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a29:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025a3a:	85 c0                	test   eax,eax
c0025a3c:	74 22                	je     c0025a60 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025a3e:	83 ec 0c             	sub    esp,0xc
c0025a41:	68 c2 73 02 c0       	push   0xc00273c2
c0025a46:	e8 be 33 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025a4b:	83 c4 10             	add    esp,0x10
c0025a4e:	eb 10                	jmp    c0025a60 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025a50:	83 ec 0c             	sub    esp,0xc
c0025a53:	68 cc 73 02 c0       	push   0xc00273cc
c0025a58:	e8 ac 33 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025a5d:	83 c4 10             	add    esp,0x10
c0025a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025a67:	8d 50 01             	lea    edx,[eax+0x1]
c0025a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025a71:	90                   	nop
c0025a72:	83 c4 0c             	add    esp,0xc
c0025a75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025a76 <LinkedList<Device>::LinkedList()>:
c0025a76:	83 ec 0c             	sub    esp,0xc
c0025a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ab2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025ab9:	83 ec 0c             	sub    esp,0xc
c0025abc:	68 86 73 02 c0       	push   0xc0027386
c0025ac1:	e8 7f cb fe ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0025ac6:	83 c4 10             	add    esp,0x10
c0025ac9:	90                   	nop
c0025aca:	83 c4 0c             	add    esp,0xc
c0025acd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025ace <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ad4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025ad6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025ad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ada:	8b 00                	mov    eax,DWORD PTR [eax]
c0025adc:	85 c0                	test   eax,eax
c0025ade:	75 0e                	jne    c0025aee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ae4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025ae7:	85 c0                	test   eax,eax
c0025ae9:	75 03                	jne    c0025aee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025aeb:	b0 01                	mov    al,0x1
c0025aed:	c3                   	ret    
c0025aee:	b0 00                	mov    al,0x0
c0025af0:	90                   	nop
c0025af1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025af2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025af2:	83 ec 0c             	sub    esp,0xc
c0025af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025afb:	85 c0                	test   eax,eax
c0025afd:	75 15                	jne    c0025b14 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0025aff:	83 ec 0c             	sub    esp,0xc
c0025b02:	68 d8 73 02 c0       	push   0xc00273d8
c0025b07:	e8 fd 32 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025b0c:	83 c4 10             	add    esp,0x10
c0025b0f:	e9 88 00 00 00       	jmp    c0025b9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0025b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025b1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025b1e:	85 c0                	test   eax,eax
c0025b20:	0f 95 c0             	setne  al
c0025b23:	84 c0                	test   al,al
c0025b25:	74 10                	je     c0025b37 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0025b27:	83 ec 0c             	sub    esp,0xc
c0025b2a:	68 23 74 02 c0       	push   0xc0027423
c0025b2f:	e8 d5 32 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025b34:	83 c4 10             	add    esp,0x10
c0025b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025b40:	85 c0                	test   eax,eax
c0025b42:	0f 94 c0             	sete   al
c0025b45:	84 c0                	test   al,al
c0025b47:	74 33                	je     c0025b7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0025b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b62:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025b65:	83 f8 01             	cmp    eax,0x1
c0025b68:	74 21                	je     c0025b8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0025b6a:	83 ec 0c             	sub    esp,0xc
c0025b6d:	68 fc 73 02 c0       	push   0xc00273fc
c0025b72:	e8 92 32 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025b77:	83 c4 10             	add    esp,0x10
c0025b7a:	eb 0f                	jmp    c0025b8b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0025b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b82:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b89:	89 10                	mov    DWORD PTR [eax],edx
c0025b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025b92:	8d 50 ff             	lea    edx,[eax-0x1]
c0025b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b99:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025b9c:	83 c4 0c             	add    esp,0xc
c0025b9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025ba0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025ba0:	83 ec 0c             	sub    esp,0xc
c0025ba3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025ba8:	75 10                	jne    c0025bba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0025baa:	83 ec 0c             	sub    esp,0xc
c0025bad:	68 a0 73 02 c0       	push   0xc00273a0
c0025bb2:	e8 52 32 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025bb7:	83 c4 10             	add    esp,0x10
c0025bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bc0:	85 c0                	test   eax,eax
c0025bc2:	74 34                	je     c0025bf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025bcb:	85 c0                	test   eax,eax
c0025bcd:	74 29                	je     c0025bf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025bd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025bda:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0025bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025be5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025bef:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025bf6:	eb 65                	jmp    c0025c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bfe:	85 c0                	test   eax,eax
c0025c00:	75 4b                	jne    c0025c4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c09:	85 c0                	test   eax,eax
c0025c0b:	75 40                	jne    c0025c4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c15:	89 10                	mov    DWORD PTR [eax],edx
c0025c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025c1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025c29:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025c37:	85 c0                	test   eax,eax
c0025c39:	74 22                	je     c0025c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025c3b:	83 ec 0c             	sub    esp,0xc
c0025c3e:	68 c2 73 02 c0       	push   0xc00273c2
c0025c43:	e8 c1 31 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025c48:	83 c4 10             	add    esp,0x10
c0025c4b:	eb 10                	jmp    c0025c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025c4d:	83 ec 0c             	sub    esp,0xc
c0025c50:	68 cc 73 02 c0       	push   0xc00273cc
c0025c55:	e8 af 31 ff ff       	call   c0018e09 <Krnl::panic(char const*)>
c0025c5a:	83 c4 10             	add    esp,0x10
c0025c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025c64:	8d 50 01             	lea    edx,[eax+0x1]
c0025c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025c6e:	90                   	nop
c0025c6f:	83 c4 0c             	add    esp,0xc
c0025c72:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025c74 <ACPI::~ACPI()>:
c0025c74:	83 ec 0c             	sub    esp,0xc
c0025c77:	ba b0 82 02 c0       	mov    edx,0xc00282b0
c0025c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c80:	89 10                	mov    DWORD PTR [eax],edx
c0025c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c86:	83 ec 0c             	sub    esp,0xc
c0025c89:	50                   	push   eax
c0025c8a:	e8 77 dc fe ff       	call   c0013906 <Device::~Device()>
c0025c8f:	83 c4 10             	add    esp,0x10
c0025c92:	90                   	nop
c0025c93:	83 c4 0c             	add    esp,0xc
c0025c96:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0025c98 <ACPI::~ACPI()>:
c0025c98:	83 ec 0c             	sub    esp,0xc
c0025c9b:	83 ec 0c             	sub    esp,0xc
c0025c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ca2:	e8 cd ff ff ff       	call   c0025c74 <ACPI::~ACPI()>
c0025ca7:	83 c4 10             	add    esp,0x10
c0025caa:	83 ec 08             	sub    esp,0x8
c0025cad:	68 68 22 00 00       	push   0x2268
c0025cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cb6:	e8 aa c8 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025cbb:	83 c4 10             	add    esp,0x10
c0025cbe:	83 c4 0c             	add    esp,0xc
c0025cc1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025cc2 <CPU::~CPU()>:
c0025cc2:	83 ec 0c             	sub    esp,0xc
c0025cc5:	ba a0 86 02 c0       	mov    edx,0xc00286a0
c0025cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cce:	89 10                	mov    DWORD PTR [eax],edx
c0025cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd4:	83 ec 0c             	sub    esp,0xc
c0025cd7:	50                   	push   eax
c0025cd8:	e8 29 dc fe ff       	call   c0013906 <Device::~Device()>
c0025cdd:	83 c4 10             	add    esp,0x10
c0025ce0:	90                   	nop
c0025ce1:	83 c4 0c             	add    esp,0xc
c0025ce4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025ce6 <CPU::~CPU()>:
c0025ce6:	83 ec 0c             	sub    esp,0xc
c0025ce9:	83 ec 0c             	sub    esp,0xc
c0025cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cf0:	e8 cd ff ff ff       	call   c0025cc2 <CPU::~CPU()>
c0025cf5:	83 c4 10             	add    esp,0x10
c0025cf8:	83 ec 08             	sub    esp,0x8
c0025cfb:	68 98 11 00 00       	push   0x1198
c0025d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d04:	e8 5c c8 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025d09:	83 c4 10             	add    esp,0x10
c0025d0c:	83 c4 0c             	add    esp,0xc
c0025d0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025d10 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025d10:	90                   	nop
c0025d11:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0025d12 <ThreadControlBlock::ThreadControlBlock()>:
c0025d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d16:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d21:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d2c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0025d33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d37:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025d3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d42:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0025d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025d4a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025d4e:	90                   	nop
c0025d4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025d50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025d50:	83 ec 0c             	sub    esp,0xc
c0025d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025d93:	83 ec 0c             	sub    esp,0xc
c0025d96:	68 86 73 02 c0       	push   0xc0027386
c0025d9b:	e8 a5 c8 fe ff       	call   c0012645 <Dbg::kprintf(char const*, ...)>
c0025da0:	83 c4 10             	add    esp,0x10
c0025da3:	90                   	nop
c0025da4:	83 c4 0c             	add    esp,0xc
c0025da7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025da8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025dac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025daf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0025db0 <Vm::_FPUState::_FPUState()>:
c0025db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025db4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025dbb:	90                   	nop
c0025dbc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025dbe <PCI::~PCI()>:
c0025dbe:	83 ec 0c             	sub    esp,0xc
c0025dc1:	ba a4 93 02 c0       	mov    edx,0xc00293a4
c0025dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dca:	89 10                	mov    DWORD PTR [eax],edx
c0025dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd0:	83 ec 0c             	sub    esp,0xc
c0025dd3:	50                   	push   eax
c0025dd4:	e8 3d d5 fe ff       	call   c0013316 <Bus::~Bus()>
c0025dd9:	83 c4 10             	add    esp,0x10
c0025ddc:	90                   	nop
c0025ddd:	83 c4 0c             	add    esp,0xc
c0025de0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0025de2 <PCI::~PCI()>:
c0025de2:	83 ec 0c             	sub    esp,0xc
c0025de5:	83 ec 0c             	sub    esp,0xc
c0025de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025dec:	e8 cd ff ff ff       	call   c0025dbe <PCI::~PCI()>
c0025df1:	83 c4 10             	add    esp,0x10
c0025df4:	83 ec 08             	sub    esp,0x8
c0025df7:	68 58 01 00 00       	push   0x158
c0025dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e00:	e8 60 c7 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025e05:	83 c4 10             	add    esp,0x10
c0025e08:	83 c4 0c             	add    esp,0xc
c0025e0b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0025e0c <IDE::~IDE()>:
c0025e0c:	83 ec 0c             	sub    esp,0xc
c0025e0f:	ba 08 96 02 c0       	mov    edx,0xc0029608
c0025e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e18:	89 10                	mov    DWORD PTR [eax],edx
c0025e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e1e:	83 ec 0c             	sub    esp,0xc
c0025e21:	50                   	push   eax
c0025e22:	e8 cf df fe ff       	call   c0013df6 <HardDiskController::~HardDiskController()>
c0025e27:	83 c4 10             	add    esp,0x10
c0025e2a:	90                   	nop
c0025e2b:	83 c4 0c             	add    esp,0xc
c0025e2e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025e30 <IDE::~IDE()>:
c0025e30:	83 ec 0c             	sub    esp,0xc
c0025e33:	83 ec 0c             	sub    esp,0xc
c0025e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e3a:	e8 cd ff ff ff       	call   c0025e0c <IDE::~IDE()>
c0025e3f:	83 c4 10             	add    esp,0x10
c0025e42:	83 ec 08             	sub    esp,0x8
c0025e45:	68 70 02 00 00       	push   0x270
c0025e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e4e:	e8 12 c7 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025e53:	83 c4 10             	add    esp,0x10
c0025e56:	83 c4 0c             	add    esp,0xc
c0025e59:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025e5a <ATA::~ATA()>:
c0025e5a:	83 ec 0c             	sub    esp,0xc
c0025e5d:	ba 58 96 02 c0       	mov    edx,0xc0029658
c0025e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e66:	89 10                	mov    DWORD PTR [eax],edx
c0025e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6c:	83 ec 0c             	sub    esp,0xc
c0025e6f:	50                   	push   eax
c0025e70:	e8 5f e0 fe ff       	call   c0013ed4 <PhysicalDisk::~PhysicalDisk()>
c0025e75:	83 c4 10             	add    esp,0x10
c0025e78:	90                   	nop
c0025e79:	83 c4 0c             	add    esp,0xc
c0025e7c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025e7e <ATA::~ATA()>:
c0025e7e:	83 ec 0c             	sub    esp,0xc
c0025e81:	83 ec 0c             	sub    esp,0xc
c0025e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e88:	e8 cd ff ff ff       	call   c0025e5a <ATA::~ATA()>
c0025e8d:	83 c4 10             	add    esp,0x10
c0025e90:	83 ec 08             	sub    esp,0x8
c0025e93:	68 7c 01 00 00       	push   0x17c
c0025e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e9c:	e8 c4 c6 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025ea1:	83 c4 10             	add    esp,0x10
c0025ea4:	83 c4 0c             	add    esp,0xc
c0025ea7:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025ea8 <ATAPI::~ATAPI()>:
c0025ea8:	83 ec 0c             	sub    esp,0xc
c0025eab:	ba c4 96 02 c0       	mov    edx,0xc00296c4
c0025eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb4:	89 10                	mov    DWORD PTR [eax],edx
c0025eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eba:	83 ec 0c             	sub    esp,0xc
c0025ebd:	50                   	push   eax
c0025ebe:	e8 11 e0 fe ff       	call   c0013ed4 <PhysicalDisk::~PhysicalDisk()>
c0025ec3:	83 c4 10             	add    esp,0x10
c0025ec6:	90                   	nop
c0025ec7:	83 c4 0c             	add    esp,0xc
c0025eca:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0025ecc <ATAPI::~ATAPI()>:
c0025ecc:	83 ec 0c             	sub    esp,0xc
c0025ecf:	83 ec 0c             	sub    esp,0xc
c0025ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ed6:	e8 cd ff ff ff       	call   c0025ea8 <ATAPI::~ATAPI()>
c0025edb:	83 c4 10             	add    esp,0x10
c0025ede:	83 ec 08             	sub    esp,0x8
c0025ee1:	68 80 01 00 00       	push   0x180
c0025ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025eea:	e8 76 c6 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025eef:	83 c4 10             	add    esp,0x10
c0025ef2:	83 c4 0c             	add    esp,0xc
c0025ef5:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0025ef6 <AVX::~AVX()>:
c0025ef6:	83 ec 0c             	sub    esp,0xc
c0025ef9:	ba 00 97 02 c0       	mov    edx,0xc0029700
c0025efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f02:	89 10                	mov    DWORD PTR [eax],edx
c0025f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f08:	83 ec 0c             	sub    esp,0xc
c0025f0b:	50                   	push   eax
c0025f0c:	e8 47 e0 fe ff       	call   c0013f58 <FPU::~FPU()>
c0025f11:	83 c4 10             	add    esp,0x10
c0025f14:	90                   	nop
c0025f15:	83 c4 0c             	add    esp,0xc
c0025f18:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0025f1a <AVX::~AVX()>:
c0025f1a:	83 ec 0c             	sub    esp,0xc
c0025f1d:	83 ec 0c             	sub    esp,0xc
c0025f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f24:	e8 cd ff ff ff       	call   c0025ef6 <AVX::~AVX()>
c0025f29:	83 c4 10             	add    esp,0x10
c0025f2c:	83 ec 08             	sub    esp,0x8
c0025f2f:	68 58 01 00 00       	push   0x158
c0025f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f38:	e8 28 c6 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025f3d:	83 c4 10             	add    esp,0x10
c0025f40:	83 c4 0c             	add    esp,0xc
c0025f43:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0025f44 <MMX::~MMX()>:
c0025f44:	83 ec 0c             	sub    esp,0xc
c0025f47:	ba 40 97 02 c0       	mov    edx,0xc0029740
c0025f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f50:	89 10                	mov    DWORD PTR [eax],edx
c0025f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f56:	83 ec 0c             	sub    esp,0xc
c0025f59:	50                   	push   eax
c0025f5a:	e8 f9 df fe ff       	call   c0013f58 <FPU::~FPU()>
c0025f5f:	83 c4 10             	add    esp,0x10
c0025f62:	90                   	nop
c0025f63:	83 c4 0c             	add    esp,0xc
c0025f66:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025f68 <MMX::~MMX()>:
c0025f68:	83 ec 0c             	sub    esp,0xc
c0025f6b:	83 ec 0c             	sub    esp,0xc
c0025f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f72:	e8 cd ff ff ff       	call   c0025f44 <MMX::~MMX()>
c0025f77:	83 c4 10             	add    esp,0x10
c0025f7a:	83 ec 08             	sub    esp,0x8
c0025f7d:	68 58 01 00 00       	push   0x158
c0025f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f86:	e8 da c5 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025f8b:	83 c4 10             	add    esp,0x10
c0025f8e:	83 c4 0c             	add    esp,0xc
c0025f91:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0025f92 <SSE::~SSE()>:
c0025f92:	83 ec 0c             	sub    esp,0xc
c0025f95:	ba 80 97 02 c0       	mov    edx,0xc0029780
c0025f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9e:	89 10                	mov    DWORD PTR [eax],edx
c0025fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa4:	83 ec 0c             	sub    esp,0xc
c0025fa7:	50                   	push   eax
c0025fa8:	e8 ab df fe ff       	call   c0013f58 <FPU::~FPU()>
c0025fad:	83 c4 10             	add    esp,0x10
c0025fb0:	90                   	nop
c0025fb1:	83 c4 0c             	add    esp,0xc
c0025fb4:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0025fb6 <SSE::~SSE()>:
c0025fb6:	83 ec 0c             	sub    esp,0xc
c0025fb9:	83 ec 0c             	sub    esp,0xc
c0025fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fc0:	e8 cd ff ff ff       	call   c0025f92 <SSE::~SSE()>
c0025fc5:	83 c4 10             	add    esp,0x10
c0025fc8:	83 ec 08             	sub    esp,0x8
c0025fcb:	68 58 01 00 00       	push   0x158
c0025fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fd4:	e8 8c c5 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0025fd9:	83 c4 10             	add    esp,0x10
c0025fdc:	83 c4 0c             	add    esp,0xc
c0025fdf:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0025fe0 <x87::~x87()>:
c0025fe0:	83 ec 0c             	sub    esp,0xc
c0025fe3:	ba c0 97 02 c0       	mov    edx,0xc00297c0
c0025fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fec:	89 10                	mov    DWORD PTR [eax],edx
c0025fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff2:	83 ec 0c             	sub    esp,0xc
c0025ff5:	50                   	push   eax
c0025ff6:	e8 5d df fe ff       	call   c0013f58 <FPU::~FPU()>
c0025ffb:	83 c4 10             	add    esp,0x10
c0025ffe:	90                   	nop
c0025fff:	83 c4 0c             	add    esp,0xc
c0026002:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0026004 <x87::~x87()>:
c0026004:	83 ec 0c             	sub    esp,0xc
c0026007:	83 ec 0c             	sub    esp,0xc
c002600a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002600e:	e8 cd ff ff ff       	call   c0025fe0 <x87::~x87()>
c0026013:	83 c4 10             	add    esp,0x10
c0026016:	83 ec 08             	sub    esp,0x8
c0026019:	68 58 01 00 00       	push   0x158
c002601e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026022:	e8 3e c5 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0026027:	83 c4 10             	add    esp,0x10
c002602a:	83 c4 0c             	add    esp,0xc
c002602d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002602e <IOAPIC::~IOAPIC()>:
c002602e:	83 ec 0c             	sub    esp,0xc
c0026031:	ba 18 99 02 c0       	mov    edx,0xc0029918
c0026036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603a:	89 10                	mov    DWORD PTR [eax],edx
c002603c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026040:	83 ec 0c             	sub    esp,0xc
c0026043:	50                   	push   eax
c0026044:	e8 bd d8 fe ff       	call   c0013906 <Device::~Device()>
c0026049:	83 c4 10             	add    esp,0x10
c002604c:	90                   	nop
c002604d:	83 c4 0c             	add    esp,0xc
c0026050:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0026052 <IOAPIC::~IOAPIC()>:
c0026052:	83 ec 0c             	sub    esp,0xc
c0026055:	83 ec 0c             	sub    esp,0xc
c0026058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002605c:	e8 cd ff ff ff       	call   c002602e <IOAPIC::~IOAPIC()>
c0026061:	83 c4 10             	add    esp,0x10
c0026064:	83 ec 08             	sub    esp,0x8
c0026067:	68 68 01 00 00       	push   0x168
c002606c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026070:	e8 f0 c4 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0026075:	83 c4 10             	add    esp,0x10
c0026078:	83 c4 0c             	add    esp,0xc
c002607b:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c002607c <APIC::~APIC()>:
c002607c:	83 ec 0c             	sub    esp,0xc
c002607f:	ba d0 98 02 c0       	mov    edx,0xc00298d0
c0026084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026088:	89 10                	mov    DWORD PTR [eax],edx
c002608a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002608e:	83 ec 0c             	sub    esp,0xc
c0026091:	50                   	push   eax
c0026092:	e8 8b e3 fe ff       	call   c0014422 <InterruptController::~InterruptController()>
c0026097:	83 c4 10             	add    esp,0x10
c002609a:	90                   	nop
c002609b:	83 c4 0c             	add    esp,0xc
c002609e:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00260a0 <APIC::~APIC()>:
c00260a0:	83 ec 0c             	sub    esp,0xc
c00260a3:	83 ec 0c             	sub    esp,0xc
c00260a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260aa:	e8 cd ff ff ff       	call   c002607c <APIC::~APIC()>
c00260af:	83 c4 10             	add    esp,0x10
c00260b2:	83 ec 08             	sub    esp,0x8
c00260b5:	68 58 21 00 00       	push   0x2158
c00260ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260be:	e8 a2 c4 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c00260c3:	83 c4 10             	add    esp,0x10
c00260c6:	83 c4 0c             	add    esp,0xc
c00260c9:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00260ca <PIC::~PIC()>:
c00260ca:	83 ec 0c             	sub    esp,0xc
c00260cd:	ba 68 99 02 c0       	mov    edx,0xc0029968
c00260d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d6:	89 10                	mov    DWORD PTR [eax],edx
c00260d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260dc:	83 ec 0c             	sub    esp,0xc
c00260df:	50                   	push   eax
c00260e0:	e8 3d e3 fe ff       	call   c0014422 <InterruptController::~InterruptController()>
c00260e5:	83 c4 10             	add    esp,0x10
c00260e8:	90                   	nop
c00260e9:	83 c4 0c             	add    esp,0xc
c00260ec:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00260ee <PIC::~PIC()>:
c00260ee:	83 ec 0c             	sub    esp,0xc
c00260f1:	83 ec 0c             	sub    esp,0xc
c00260f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260f8:	e8 cd ff ff ff       	call   c00260ca <PIC::~PIC()>
c00260fd:	83 c4 10             	add    esp,0x10
c0026100:	83 ec 08             	sub    esp,0x8
c0026103:	68 58 21 00 00       	push   0x2158
c0026108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002610c:	e8 54 c4 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c0026111:	83 c4 10             	add    esp,0x10
c0026114:	83 c4 0c             	add    esp,0xc
c0026117:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0026118 <APICTimer::~APICTimer()>:
c0026118:	83 ec 0c             	sub    esp,0xc
c002611b:	ba bc 99 02 c0       	mov    edx,0xc00299bc
c0026120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026124:	89 10                	mov    DWORD PTR [eax],edx
c0026126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612a:	83 ec 0c             	sub    esp,0xc
c002612d:	50                   	push   eax
c002612e:	e8 f1 ff fe ff       	call   c0016124 <Timer::~Timer()>
c0026133:	83 c4 10             	add    esp,0x10
c0026136:	90                   	nop
c0026137:	83 c4 0c             	add    esp,0xc
c002613a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002613c <APICTimer::~APICTimer()>:
c002613c:	83 ec 0c             	sub    esp,0xc
c002613f:	83 ec 0c             	sub    esp,0xc
c0026142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026146:	e8 cd ff ff ff       	call   c0026118 <APICTimer::~APICTimer()>
c002614b:	83 c4 10             	add    esp,0x10
c002614e:	83 ec 08             	sub    esp,0x8
c0026151:	68 60 01 00 00       	push   0x160
c0026156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002615a:	e8 06 c4 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c002615f:	83 c4 10             	add    esp,0x10
c0026162:	83 c4 0c             	add    esp,0xc
c0026165:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0026166 <PIT::~PIT()>:
c0026166:	83 ec 0c             	sub    esp,0xc
c0026169:	ba 0c 9a 02 c0       	mov    edx,0xc0029a0c
c002616e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026172:	89 10                	mov    DWORD PTR [eax],edx
c0026174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026178:	83 ec 0c             	sub    esp,0xc
c002617b:	50                   	push   eax
c002617c:	e8 a3 ff fe ff       	call   c0016124 <Timer::~Timer()>
c0026181:	83 c4 10             	add    esp,0x10
c0026184:	90                   	nop
c0026185:	83 c4 0c             	add    esp,0xc
c0026188:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002618a <PIT::~PIT()>:
c002618a:	83 ec 0c             	sub    esp,0xc
c002618d:	83 ec 0c             	sub    esp,0xc
c0026190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026194:	e8 cd ff ff ff       	call   c0026166 <PIT::~PIT()>
c0026199:	83 c4 10             	add    esp,0x10
c002619c:	83 ec 08             	sub    esp,0x8
c002619f:	68 5c 01 00 00       	push   0x15c
c00261a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261a8:	e8 b8 c3 fe ff       	call   c0012565 <operator delete(void*, unsigned long)>
c00261ad:	83 c4 10             	add    esp,0x10
c00261b0:	83 c4 0c             	add    esp,0xc
c00261b3:	c3                   	ret    
